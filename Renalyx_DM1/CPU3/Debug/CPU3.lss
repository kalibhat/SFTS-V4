
CPU3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006e4c  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00086e4c  00086e4c  0000ee4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000c6c  20070000  00086e54  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000005f0  20070c6c  00087ac0  00010c6c  2**2
                  ALLOC
  4 .stack        00002004  2007125c  000880b0  00010c6c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010c6c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010c95  2**0
                  CONTENTS, READONLY
  7 .debug_info   000159b3  00000000  00000000  00010cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003014  00000000  00000000  000266a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000074d6  00000000  00000000  000296b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000da8  00000000  00000000  00030b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000bf8  00000000  00000000  00031935  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00009b21  00000000  00000000  0003252d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00017758  00000000  00000000  0003c04e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00061e40  00000000  00000000  000537a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004318  00000000  00000000  000b55e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20073260 	.word	0x20073260
   80004:	000836a1 	.word	0x000836a1
   80008:	00083699 	.word	0x00083699
   8000c:	00083699 	.word	0x00083699
   80010:	00083699 	.word	0x00083699
   80014:	00083699 	.word	0x00083699
   80018:	00083699 	.word	0x00083699
	...
   8002c:	00083699 	.word	0x00083699
   80030:	00083699 	.word	0x00083699
   80034:	00000000 	.word	0x00000000
   80038:	00083699 	.word	0x00083699
   8003c:	00083699 	.word	0x00083699
   80040:	00083699 	.word	0x00083699
   80044:	00083699 	.word	0x00083699
   80048:	00083699 	.word	0x00083699
   8004c:	00083699 	.word	0x00083699
   80050:	00083699 	.word	0x00083699
   80054:	00083699 	.word	0x00083699
   80058:	00083699 	.word	0x00083699
   8005c:	00083699 	.word	0x00083699
   80060:	00082031 	.word	0x00082031
   80064:	00083699 	.word	0x00083699
   80068:	00000000 	.word	0x00000000
   8006c:	00083309 	.word	0x00083309
   80070:	00083321 	.word	0x00083321
   80074:	00083339 	.word	0x00083339
   80078:	00083351 	.word	0x00083351
	...
   80084:	00083699 	.word	0x00083699
   80088:	00083699 	.word	0x00083699
   8008c:	00083699 	.word	0x00083699
   80090:	00083699 	.word	0x00083699
   80094:	00083699 	.word	0x00083699
   80098:	00083699 	.word	0x00083699
   8009c:	00083699 	.word	0x00083699
   800a0:	00083699 	.word	0x00083699
   800a4:	00000000 	.word	0x00000000
   800a8:	00083699 	.word	0x00083699
   800ac:	00080bd9 	.word	0x00080bd9
   800b0:	00080d49 	.word	0x00080d49
   800b4:	00080e31 	.word	0x00080e31
   800b8:	00080e5d 	.word	0x00080e5d
   800bc:	00083699 	.word	0x00083699
   800c0:	00083699 	.word	0x00083699
   800c4:	00080eb5 	.word	0x00080eb5
   800c8:	00080e89 	.word	0x00080e89
   800cc:	00083699 	.word	0x00083699
   800d0:	00083699 	.word	0x00083699
   800d4:	00083699 	.word	0x00083699
   800d8:	00083699 	.word	0x00083699
   800dc:	00083699 	.word	0x00083699
   800e0:	00083699 	.word	0x00083699
   800e4:	00083699 	.word	0x00083699
   800e8:	00083699 	.word	0x00083699
   800ec:	000801b5 	.word	0x000801b5
   800f0:	00083699 	.word	0x00083699

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070c6c 	.word	0x20070c6c
   80110:	00000000 	.word	0x00000000
   80114:	00086e54 	.word	0x00086e54

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	00086e54 	.word	0x00086e54
   80144:	20070c70 	.word	0x20070c70
   80148:	00086e54 	.word	0x00086e54
   8014c:	00000000 	.word	0x00000000

00080150 <CPU3_D_INIT_CLOCK>:
 *  Author: wid7
 */ 
#include "D_CLOCK.h"

void CPU3_D_INIT_CLOCK()
{
   80150:	b580      	push	{r7, lr}
   80152:	af00      	add	r7, sp, #0
	sysclk_init();
   80154:	4b07      	ldr	r3, [pc, #28]	; (80174 <CPU3_D_INIT_CLOCK+0x24>)
   80156:	4798      	blx	r3
	PMC->PMC_WPMR  = 0x504D4300;
   80158:	4b07      	ldr	r3, [pc, #28]	; (80178 <CPU3_D_INIT_CLOCK+0x28>)
   8015a:	4a08      	ldr	r2, [pc, #32]	; (8017c <CPU3_D_INIT_CLOCK+0x2c>)
   8015c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PMC->PMC_PCER0 = 0xF8407900;
   80160:	4b05      	ldr	r3, [pc, #20]	; (80178 <CPU3_D_INIT_CLOCK+0x28>)
   80162:	4a07      	ldr	r2, [pc, #28]	; (80180 <CPU3_D_INIT_CLOCK+0x30>)
   80164:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER1 = 0x0000083F;
   80166:	4b04      	ldr	r3, [pc, #16]	; (80178 <CPU3_D_INIT_CLOCK+0x28>)
   80168:	f640 023f 	movw	r2, #2111	; 0x83f
   8016c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   80170:	bd80      	pop	{r7, pc}
   80172:	bf00      	nop
   80174:	00082d45 	.word	0x00082d45
   80178:	400e0600 	.word	0x400e0600
   8017c:	504d4300 	.word	0x504d4300
   80180:	f8407900 	.word	0xf8407900

00080184 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80184:	b480      	push	{r7}
   80186:	b083      	sub	sp, #12
   80188:	af00      	add	r7, sp, #0
   8018a:	4603      	mov	r3, r0
   8018c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8018e:	4908      	ldr	r1, [pc, #32]	; (801b0 <NVIC_EnableIRQ+0x2c>)
   80190:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80194:	095b      	lsrs	r3, r3, #5
   80196:	79fa      	ldrb	r2, [r7, #7]
   80198:	f002 021f 	and.w	r2, r2, #31
   8019c:	2001      	movs	r0, #1
   8019e:	fa00 f202 	lsl.w	r2, r0, r2
   801a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   801a6:	370c      	adds	r7, #12
   801a8:	46bd      	mov	sp, r7
   801aa:	f85d 7b04 	ldr.w	r7, [sp], #4
   801ae:	4770      	bx	lr
   801b0:	e000e100 	.word	0xe000e100

000801b4 <CAN0_Handler>:
can_mb_conf_t can0_mailbox;
volatile uint32_t g_ul_recv_status = 0;
temp_struct_type  temp_struct;


void CAN0_Handler(void)   {
   801b4:	b580      	push	{r7, lr}
   801b6:	b082      	sub	sp, #8
   801b8:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	ul_status = (CAN0 -> CAN_SR);
   801ba:	4b11      	ldr	r3, [pc, #68]	; (80200 <CAN0_Handler+0x4c>)
   801bc:	691b      	ldr	r3, [r3, #16]
   801be:	607b      	str	r3, [r7, #4]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   801c0:	687b      	ldr	r3, [r7, #4]
   801c2:	b2db      	uxtb	r3, r3
   801c4:	2b00      	cmp	r3, #0
   801c6:	d017      	beq.n	801f8 <CAN0_Handler+0x44>
		ul_status = CAN0->CAN_MB[1].CAN_MSR ;
   801c8:	4b0d      	ldr	r3, [pc, #52]	; (80200 <CAN0_Handler+0x4c>)
   801ca:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
   801ce:	607b      	str	r3, [r7, #4]
		if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   801d6:	2b00      	cmp	r3, #0
   801d8:	d00e      	beq.n	801f8 <CAN0_Handler+0x44>
			can0_mailbox.ul_mb_idx = 1;
   801da:	4b0a      	ldr	r3, [pc, #40]	; (80204 <CAN0_Handler+0x50>)
   801dc:	2201      	movs	r2, #1
   801de:	601a      	str	r2, [r3, #0]
			can0_mailbox.ul_status = ul_status;
   801e0:	4a08      	ldr	r2, [pc, #32]	; (80204 <CAN0_Handler+0x50>)
   801e2:	687b      	ldr	r3, [r7, #4]
   801e4:	6093      	str	r3, [r2, #8]
			dd_can_mailbox_read(&can0_mailbox);
   801e6:	4807      	ldr	r0, [pc, #28]	; (80204 <CAN0_Handler+0x50>)
   801e8:	4b07      	ldr	r3, [pc, #28]	; (80208 <CAN0_Handler+0x54>)
   801ea:	4798      	blx	r3
			dd_can_extract_mailbox_data(&can0_mailbox);
   801ec:	4805      	ldr	r0, [pc, #20]	; (80204 <CAN0_Handler+0x50>)
   801ee:	4b07      	ldr	r3, [pc, #28]	; (8020c <CAN0_Handler+0x58>)
   801f0:	4798      	blx	r3
			g_ul_recv_status = 1;
   801f2:	4b07      	ldr	r3, [pc, #28]	; (80210 <CAN0_Handler+0x5c>)
   801f4:	2201      	movs	r2, #1
   801f6:	601a      	str	r2, [r3, #0]
		}
		
	}
}
   801f8:	3708      	adds	r7, #8
   801fa:	46bd      	mov	sp, r7
   801fc:	bd80      	pop	{r7, pc}
   801fe:	bf00      	nop
   80200:	400b4000 	.word	0x400b4000
   80204:	20070dd4 	.word	0x20070dd4
   80208:	000804d5 	.word	0x000804d5
   8020c:	00080215 	.word	0x00080215
   80210:	20070ca0 	.word	0x20070ca0

00080214 <dd_can_extract_mailbox_data>:
	p_mailbox->ul_datal = 0;
	p_mailbox->ul_datah = 0;
}


static void dd_can_extract_mailbox_data(can_mb_conf_t *p_mailbox )   {
   80214:	b480      	push	{r7}
   80216:	b085      	sub	sp, #20
   80218:	af00      	add	r7, sp, #0
   8021a:	6078      	str	r0, [r7, #4]
		 uint32_t status ;	
		 uint32_t ul_reg;
	     uint8_t master_command_byte, master_data_byte;
		 
	
	   temp_struct.temp_reg_32 = (p_mailbox->ul_datal);
   8021c:	687b      	ldr	r3, [r7, #4]
   8021e:	699b      	ldr	r3, [r3, #24]
   80220:	4a9b      	ldr	r2, [pc, #620]	; (80490 <dd_can_extract_mailbox_data+0x27c>)
   80222:	6013      	str	r3, [r2, #0]
	   master_command_byte  =  temp_struct.temp_reg_8[1]  ;
   80224:	4b9a      	ldr	r3, [pc, #616]	; (80490 <dd_can_extract_mailbox_data+0x27c>)
   80226:	785b      	ldrb	r3, [r3, #1]
   80228:	73fb      	strb	r3, [r7, #15]
	   master_data_byte     =  temp_struct.temp_reg_8[1]  ;
   8022a:	4b99      	ldr	r3, [pc, #612]	; (80490 <dd_can_extract_mailbox_data+0x27c>)
   8022c:	785b      	ldrb	r3, [r3, #1]
   8022e:	73bb      	strb	r3, [r7, #14]
	   sv_rxrdy_flag = true;
   80230:	4b98      	ldr	r3, [pc, #608]	; (80494 <dd_can_extract_mailbox_data+0x280>)
   80232:	2201      	movs	r2, #1
   80234:	701a      	strb	r2, [r3, #0]
	   switch (state)  {
   80236:	4b98      	ldr	r3, [pc, #608]	; (80498 <dd_can_extract_mailbox_data+0x284>)
   80238:	781b      	ldrb	r3, [r3, #0]
   8023a:	2b00      	cmp	r3, #0
   8023c:	d000      	beq.n	80240 <dd_can_extract_mailbox_data+0x2c>
				
				default:
				break;
			  }		  
		   default:
		   break;
   8023e:	e121      	b.n	80484 <dd_can_extract_mailbox_data+0x270>
	   master_command_byte  =  temp_struct.temp_reg_8[1]  ;
	   master_data_byte     =  temp_struct.temp_reg_8[1]  ;
	   sv_rxrdy_flag = true;
	   switch (state)  {
		   case CAN_IDLE:		
		      data[data_count] = master_command_byte;
   80240:	4b96      	ldr	r3, [pc, #600]	; (8049c <dd_can_extract_mailbox_data+0x288>)
   80242:	781b      	ldrb	r3, [r3, #0]
   80244:	b2db      	uxtb	r3, r3
   80246:	4619      	mov	r1, r3
   80248:	4a95      	ldr	r2, [pc, #596]	; (804a0 <dd_can_extract_mailbox_data+0x28c>)
   8024a:	7bfb      	ldrb	r3, [r7, #15]
   8024c:	5453      	strb	r3, [r2, r1]
		      data_buff[data_count] = data[data_count];		
   8024e:	4b93      	ldr	r3, [pc, #588]	; (8049c <dd_can_extract_mailbox_data+0x288>)
   80250:	781b      	ldrb	r3, [r3, #0]
   80252:	b2db      	uxtb	r3, r3
   80254:	461a      	mov	r2, r3
   80256:	4b91      	ldr	r3, [pc, #580]	; (8049c <dd_can_extract_mailbox_data+0x288>)
   80258:	781b      	ldrb	r3, [r3, #0]
   8025a:	b2db      	uxtb	r3, r3
   8025c:	4619      	mov	r1, r3
   8025e:	4b90      	ldr	r3, [pc, #576]	; (804a0 <dd_can_extract_mailbox_data+0x28c>)
   80260:	5c5b      	ldrb	r3, [r3, r1]
   80262:	b2d9      	uxtb	r1, r3
   80264:	4b8f      	ldr	r3, [pc, #572]	; (804a4 <dd_can_extract_mailbox_data+0x290>)
   80266:	5499      	strb	r1, [r3, r2]
			  data_buffer[data_count]= data_buff[data_count];
   80268:	4b8c      	ldr	r3, [pc, #560]	; (8049c <dd_can_extract_mailbox_data+0x288>)
   8026a:	781b      	ldrb	r3, [r3, #0]
   8026c:	b2db      	uxtb	r3, r3
   8026e:	461a      	mov	r2, r3
   80270:	4b8a      	ldr	r3, [pc, #552]	; (8049c <dd_can_extract_mailbox_data+0x288>)
   80272:	781b      	ldrb	r3, [r3, #0]
   80274:	b2db      	uxtb	r3, r3
   80276:	4619      	mov	r1, r3
   80278:	4b8a      	ldr	r3, [pc, #552]	; (804a4 <dd_can_extract_mailbox_data+0x290>)
   8027a:	5c5b      	ldrb	r3, [r3, r1]
   8027c:	b2d9      	uxtb	r1, r3
   8027e:	4b8a      	ldr	r3, [pc, #552]	; (804a8 <dd_can_extract_mailbox_data+0x294>)
   80280:	5499      	strb	r1, [r3, r2]
			  
			  Master_cpu_command_type diff;
			  diff = data_buff[0];
   80282:	4b88      	ldr	r3, [pc, #544]	; (804a4 <dd_can_extract_mailbox_data+0x290>)
   80284:	781b      	ldrb	r3, [r3, #0]
   80286:	737b      	strb	r3, [r7, #13]
		      start_c[0] =diff;
   80288:	4a88      	ldr	r2, [pc, #544]	; (804ac <dd_can_extract_mailbox_data+0x298>)
   8028a:	7b7b      	ldrb	r3, [r7, #13]
   8028c:	7013      	strb	r3, [r2, #0]
		      switch (diff)	
   8028e:	7b7b      	ldrb	r3, [r7, #13]
   80290:	3b01      	subs	r3, #1
   80292:	2b12      	cmp	r3, #18
   80294:	f200 80f4 	bhi.w	80480 <dd_can_extract_mailbox_data+0x26c>
   80298:	a201      	add	r2, pc, #4	; (adr r2, 802a0 <dd_can_extract_mailbox_data+0x8c>)
   8029a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8029e:	bf00      	nop
   802a0:	00080331 	.word	0x00080331
   802a4:	00080353 	.word	0x00080353
   802a8:	0008037d 	.word	0x0008037d
   802ac:	000803d7 	.word	0x000803d7
   802b0:	000803e5 	.word	0x000803e5
   802b4:	000803f3 	.word	0x000803f3
   802b8:	00080401 	.word	0x00080401
   802bc:	000803bb 	.word	0x000803bb
   802c0:	000803c9 	.word	0x000803c9
   802c4:	0008039f 	.word	0x0008039f
   802c8:	000803ad 	.word	0x000803ad
   802cc:	000802ed 	.word	0x000802ed
   802d0:	0008030f 	.word	0x0008030f
   802d4:	00080433 	.word	0x00080433
   802d8:	00080481 	.word	0x00080481
   802dc:	0008040f 	.word	0x0008040f
   802e0:	00080481 	.word	0x00080481
   802e4:	0008043d 	.word	0x0008043d
   802e8:	0008045f 	.word	0x0008045f
			  {
				  case PROP_START_ACID_PUMP:
				  			          test =0;
   802ec:	4b70      	ldr	r3, [pc, #448]	; (804b0 <dd_can_extract_mailbox_data+0x29c>)
   802ee:	2200      	movs	r2, #0
   802f0:	701a      	strb	r2, [r3, #0]
				  			          count_start++;
   802f2:	4b70      	ldr	r3, [pc, #448]	; (804b4 <dd_can_extract_mailbox_data+0x2a0>)
   802f4:	881b      	ldrh	r3, [r3, #0]
   802f6:	b29b      	uxth	r3, r3
   802f8:	3301      	adds	r3, #1
   802fa:	b29a      	uxth	r2, r3
   802fc:	4b6d      	ldr	r3, [pc, #436]	; (804b4 <dd_can_extract_mailbox_data+0x2a0>)
   802fe:	801a      	strh	r2, [r3, #0]
				  			          flag_buff = 1;
   80300:	4b6d      	ldr	r3, [pc, #436]	; (804b8 <dd_can_extract_mailbox_data+0x2a4>)
   80302:	2201      	movs	r2, #1
   80304:	701a      	strb	r2, [r3, #0]
				  			          state = CAN_IDLE;
   80306:	4b64      	ldr	r3, [pc, #400]	; (80498 <dd_can_extract_mailbox_data+0x284>)
   80308:	2200      	movs	r2, #0
   8030a:	701a      	strb	r2, [r3, #0]
				  
				  break;
   8030c:	e0b9      	b.n	80482 <dd_can_extract_mailbox_data+0x26e>
				  
				  case PROP_START_BICARB_PUMP:
				  			          test =0;
   8030e:	4b68      	ldr	r3, [pc, #416]	; (804b0 <dd_can_extract_mailbox_data+0x29c>)
   80310:	2200      	movs	r2, #0
   80312:	701a      	strb	r2, [r3, #0]
				  			          count_start++;
   80314:	4b67      	ldr	r3, [pc, #412]	; (804b4 <dd_can_extract_mailbox_data+0x2a0>)
   80316:	881b      	ldrh	r3, [r3, #0]
   80318:	b29b      	uxth	r3, r3
   8031a:	3301      	adds	r3, #1
   8031c:	b29a      	uxth	r2, r3
   8031e:	4b65      	ldr	r3, [pc, #404]	; (804b4 <dd_can_extract_mailbox_data+0x2a0>)
   80320:	801a      	strh	r2, [r3, #0]
				  			          flag_buff = 1;
   80322:	4b65      	ldr	r3, [pc, #404]	; (804b8 <dd_can_extract_mailbox_data+0x2a4>)
   80324:	2201      	movs	r2, #1
   80326:	701a      	strb	r2, [r3, #0]
				  			          state = CAN_IDLE;
   80328:	4b5b      	ldr	r3, [pc, #364]	; (80498 <dd_can_extract_mailbox_data+0x284>)
   8032a:	2200      	movs	r2, #0
   8032c:	701a      	strb	r2, [r3, #0]
				  
				  break;
   8032e:	e0a8      	b.n	80482 <dd_can_extract_mailbox_data+0x26e>
			     case PROP_START_ALIGMENT:
			          test =0;
   80330:	4b5f      	ldr	r3, [pc, #380]	; (804b0 <dd_can_extract_mailbox_data+0x29c>)
   80332:	2200      	movs	r2, #0
   80334:	701a      	strb	r2, [r3, #0]
					  count_start++;
   80336:	4b5f      	ldr	r3, [pc, #380]	; (804b4 <dd_can_extract_mailbox_data+0x2a0>)
   80338:	881b      	ldrh	r3, [r3, #0]
   8033a:	b29b      	uxth	r3, r3
   8033c:	3301      	adds	r3, #1
   8033e:	b29a      	uxth	r2, r3
   80340:	4b5c      	ldr	r3, [pc, #368]	; (804b4 <dd_can_extract_mailbox_data+0x2a0>)
   80342:	801a      	strh	r2, [r3, #0]
			          flag_buff = 1;
   80344:	4b5c      	ldr	r3, [pc, #368]	; (804b8 <dd_can_extract_mailbox_data+0x2a4>)
   80346:	2201      	movs	r2, #1
   80348:	701a      	strb	r2, [r3, #0]
			          state = CAN_IDLE;
   8034a:	4b53      	ldr	r3, [pc, #332]	; (80498 <dd_can_extract_mailbox_data+0x284>)
   8034c:	2200      	movs	r2, #0
   8034e:	701a      	strb	r2, [r3, #0]
			    break;
   80350:	e097      	b.n	80482 <dd_can_extract_mailbox_data+0x26e>
				
			    case PROP_START_MIXING:
				 User_setConductivity = temp_struct.temp_reg_16[1];
   80352:	4b4f      	ldr	r3, [pc, #316]	; (80490 <dd_can_extract_mailbox_data+0x27c>)
   80354:	885a      	ldrh	r2, [r3, #2]
   80356:	4b59      	ldr	r3, [pc, #356]	; (804bc <dd_can_extract_mailbox_data+0x2a8>)
   80358:	801a      	strh	r2, [r3, #0]
// // 							break;
// 							
// 						}
			       

				    test=0;
   8035a:	4b55      	ldr	r3, [pc, #340]	; (804b0 <dd_can_extract_mailbox_data+0x29c>)
   8035c:	2200      	movs	r2, #0
   8035e:	701a      	strb	r2, [r3, #0]
					count_start++;					
   80360:	4b54      	ldr	r3, [pc, #336]	; (804b4 <dd_can_extract_mailbox_data+0x2a0>)
   80362:	881b      	ldrh	r3, [r3, #0]
   80364:	b29b      	uxth	r3, r3
   80366:	3301      	adds	r3, #1
   80368:	b29a      	uxth	r2, r3
   8036a:	4b52      	ldr	r3, [pc, #328]	; (804b4 <dd_can_extract_mailbox_data+0x2a0>)
   8036c:	801a      	strh	r2, [r3, #0]
			        flag_buff = 1;
   8036e:	4b52      	ldr	r3, [pc, #328]	; (804b8 <dd_can_extract_mailbox_data+0x2a4>)
   80370:	2201      	movs	r2, #1
   80372:	701a      	strb	r2, [r3, #0]
			        state = CAN_IDLE;
   80374:	4b48      	ldr	r3, [pc, #288]	; (80498 <dd_can_extract_mailbox_data+0x284>)
   80376:	2200      	movs	r2, #0
   80378:	701a      	strb	r2, [r3, #0]
			    break;
   8037a:	e082      	b.n	80482 <dd_can_extract_mailbox_data+0x26e>
				
			    case PROP_STOP_MIXING:
			        test =0;
   8037c:	4b4c      	ldr	r3, [pc, #304]	; (804b0 <dd_can_extract_mailbox_data+0x29c>)
   8037e:	2200      	movs	r2, #0
   80380:	701a      	strb	r2, [r3, #0]
					count_stop++;
   80382:	4b4f      	ldr	r3, [pc, #316]	; (804c0 <dd_can_extract_mailbox_data+0x2ac>)
   80384:	881b      	ldrh	r3, [r3, #0]
   80386:	b29b      	uxth	r3, r3
   80388:	3301      	adds	r3, #1
   8038a:	b29a      	uxth	r2, r3
   8038c:	4b4c      	ldr	r3, [pc, #304]	; (804c0 <dd_can_extract_mailbox_data+0x2ac>)
   8038e:	801a      	strh	r2, [r3, #0]
			        flag_buff = 1;
   80390:	4b49      	ldr	r3, [pc, #292]	; (804b8 <dd_can_extract_mailbox_data+0x2a4>)
   80392:	2201      	movs	r2, #1
   80394:	701a      	strb	r2, [r3, #0]
			        state = CAN_IDLE;
   80396:	4b40      	ldr	r3, [pc, #256]	; (80498 <dd_can_extract_mailbox_data+0x284>)
   80398:	2200      	movs	r2, #0
   8039a:	701a      	strb	r2, [r3, #0]
			    break;
   8039c:	e071      	b.n	80482 <dd_can_extract_mailbox_data+0x26e>
			       state = IDLE;
			    break;*/
				
			    case PROP_COMPLETED:
			        //flag = 1;
			          flag_buff = 1;
   8039e:	4b46      	ldr	r3, [pc, #280]	; (804b8 <dd_can_extract_mailbox_data+0x2a4>)
   803a0:	2201      	movs	r2, #1
   803a2:	701a      	strb	r2, [r3, #0]
			          state = CAN_IDLE;
   803a4:	4b3c      	ldr	r3, [pc, #240]	; (80498 <dd_can_extract_mailbox_data+0x284>)
   803a6:	2200      	movs	r2, #0
   803a8:	701a      	strb	r2, [r3, #0]
			    break;
   803aa:	e06a      	b.n	80482 <dd_can_extract_mailbox_data+0x26e>
				
			    case PROP_RECOVER:
			         //flag = 1;
			         flag_buff = 1;
   803ac:	4b42      	ldr	r3, [pc, #264]	; (804b8 <dd_can_extract_mailbox_data+0x2a4>)
   803ae:	2201      	movs	r2, #1
   803b0:	701a      	strb	r2, [r3, #0]
			         state = CAN_IDLE;
   803b2:	4b39      	ldr	r3, [pc, #228]	; (80498 <dd_can_extract_mailbox_data+0x284>)
   803b4:	2200      	movs	r2, #0
   803b6:	701a      	strb	r2, [r3, #0]
			    break;
   803b8:	e063      	b.n	80482 <dd_can_extract_mailbox_data+0x26e>
			    case PROP_START_OPENFILL:
			        flag_buff=1;
   803ba:	4b3f      	ldr	r3, [pc, #252]	; (804b8 <dd_can_extract_mailbox_data+0x2a4>)
   803bc:	2201      	movs	r2, #1
   803be:	701a      	strb	r2, [r3, #0]
					state= CAN_IDLE;		
   803c0:	4b35      	ldr	r3, [pc, #212]	; (80498 <dd_can_extract_mailbox_data+0x284>)
   803c2:	2200      	movs	r2, #0
   803c4:	701a      	strb	r2, [r3, #0]
			    break;
   803c6:	e05c      	b.n	80482 <dd_can_extract_mailbox_data+0x26e>
				
				
			    case PROP_STOP_OPENFILL:
				    flag_buff=1;
   803c8:	4b3b      	ldr	r3, [pc, #236]	; (804b8 <dd_can_extract_mailbox_data+0x2a4>)
   803ca:	2201      	movs	r2, #1
   803cc:	701a      	strb	r2, [r3, #0]
				    state= CAN_IDLE;
   803ce:	4b32      	ldr	r3, [pc, #200]	; (80498 <dd_can_extract_mailbox_data+0x284>)
   803d0:	2200      	movs	r2, #0
   803d2:	701a      	strb	r2, [r3, #0]
				
				break;
   803d4:	e055      	b.n	80482 <dd_can_extract_mailbox_data+0x26e>
				
				
				case PROP_START_DISINFECTION:
				   flag_buff=1;
   803d6:	4b38      	ldr	r3, [pc, #224]	; (804b8 <dd_can_extract_mailbox_data+0x2a4>)
   803d8:	2201      	movs	r2, #1
   803da:	701a      	strb	r2, [r3, #0]
				   state= CAN_IDLE;
   803dc:	4b2e      	ldr	r3, [pc, #184]	; (80498 <dd_can_extract_mailbox_data+0x284>)
   803de:	2200      	movs	r2, #0
   803e0:	701a      	strb	r2, [r3, #0]
				break;
   803e2:	e04e      	b.n	80482 <dd_can_extract_mailbox_data+0x26e>
				
				
				case PROP_STOP_DISINFECTION:
				   flag_buff=1;
   803e4:	4b34      	ldr	r3, [pc, #208]	; (804b8 <dd_can_extract_mailbox_data+0x2a4>)
   803e6:	2201      	movs	r2, #1
   803e8:	701a      	strb	r2, [r3, #0]
				   state= CAN_IDLE;
   803ea:	4b2b      	ldr	r3, [pc, #172]	; (80498 <dd_can_extract_mailbox_data+0x284>)
   803ec:	2200      	movs	r2, #0
   803ee:	701a      	strb	r2, [r3, #0]
				break;
   803f0:	e047      	b.n	80482 <dd_can_extract_mailbox_data+0x26e>
				
				case PROP_START_CITRIC_DISINFECTION:
				   flag_buff=1;
   803f2:	4b31      	ldr	r3, [pc, #196]	; (804b8 <dd_can_extract_mailbox_data+0x2a4>)
   803f4:	2201      	movs	r2, #1
   803f6:	701a      	strb	r2, [r3, #0]
				   state= CAN_IDLE;
   803f8:	4b27      	ldr	r3, [pc, #156]	; (80498 <dd_can_extract_mailbox_data+0x284>)
   803fa:	2200      	movs	r2, #0
   803fc:	701a      	strb	r2, [r3, #0]
				break;
   803fe:	e040      	b.n	80482 <dd_can_extract_mailbox_data+0x26e>
				
				case PROP_STOP_CITRIC_DISINFECTION:
				flag_buff=1;
   80400:	4b2d      	ldr	r3, [pc, #180]	; (804b8 <dd_can_extract_mailbox_data+0x2a4>)
   80402:	2201      	movs	r2, #1
   80404:	701a      	strb	r2, [r3, #0]
				state= CAN_IDLE;
   80406:	4b24      	ldr	r3, [pc, #144]	; (80498 <dd_can_extract_mailbox_data+0x284>)
   80408:	2200      	movs	r2, #0
   8040a:	701a      	strb	r2, [r3, #0]
				break;
   8040c:	e039      	b.n	80482 <dd_can_extract_mailbox_data+0x26e>
				
				case PROP_CONDUCTIVITY:
				stabilise_Conductivity ++;
   8040e:	4b2d      	ldr	r3, [pc, #180]	; (804c4 <dd_can_extract_mailbox_data+0x2b0>)
   80410:	781b      	ldrb	r3, [r3, #0]
   80412:	3301      	adds	r3, #1
   80414:	b2da      	uxtb	r2, r3
   80416:	4b2b      	ldr	r3, [pc, #172]	; (804c4 <dd_can_extract_mailbox_data+0x2b0>)
   80418:	701a      	strb	r2, [r3, #0]
//				avg_conductivity = avg_conductivity + temp_struct.temp_reg_16[1];
				conductivity = avg_conductivity + temp_struct.temp_reg_16[1];
   8041a:	4b1d      	ldr	r3, [pc, #116]	; (80490 <dd_can_extract_mailbox_data+0x27c>)
   8041c:	885a      	ldrh	r2, [r3, #2]
   8041e:	4b2a      	ldr	r3, [pc, #168]	; (804c8 <dd_can_extract_mailbox_data+0x2b4>)
   80420:	881b      	ldrh	r3, [r3, #0]
   80422:	4413      	add	r3, r2
   80424:	b29a      	uxth	r2, r3
   80426:	4b29      	ldr	r3, [pc, #164]	; (804cc <dd_can_extract_mailbox_data+0x2b8>)
   80428:	801a      	strh	r2, [r3, #0]
// 					avg_conductivity = avg_conductivity /6;
// 					stabilise_Conductivity = 0;
// 					conductivity = avg_conductivity/10;
// 				}
				
				state = CAN_IDLE;
   8042a:	4b1b      	ldr	r3, [pc, #108]	; (80498 <dd_can_extract_mailbox_data+0x284>)
   8042c:	2200      	movs	r2, #0
   8042e:	701a      	strb	r2, [r3, #0]

				break;
   80430:	e027      	b.n	80482 <dd_can_extract_mailbox_data+0x26e>
				
				case PROP_UPDATE_ACID_RC:
				rc = temp_struct.temp_reg_16[1];
   80432:	4b17      	ldr	r3, [pc, #92]	; (80490 <dd_can_extract_mailbox_data+0x27c>)
   80434:	885a      	ldrh	r2, [r3, #2]
   80436:	4b26      	ldr	r3, [pc, #152]	; (804d0 <dd_can_extract_mailbox_data+0x2bc>)
   80438:	801a      	strh	r2, [r3, #0]
				break;
   8043a:	e022      	b.n	80482 <dd_can_extract_mailbox_data+0x26e>
				
				case prop_BICAR_FEED_BACK:
				   test =0;
   8043c:	4b1c      	ldr	r3, [pc, #112]	; (804b0 <dd_can_extract_mailbox_data+0x29c>)
   8043e:	2200      	movs	r2, #0
   80440:	701a      	strb	r2, [r3, #0]
				   count_start++;
   80442:	4b1c      	ldr	r3, [pc, #112]	; (804b4 <dd_can_extract_mailbox_data+0x2a0>)
   80444:	881b      	ldrh	r3, [r3, #0]
   80446:	b29b      	uxth	r3, r3
   80448:	3301      	adds	r3, #1
   8044a:	b29a      	uxth	r2, r3
   8044c:	4b19      	ldr	r3, [pc, #100]	; (804b4 <dd_can_extract_mailbox_data+0x2a0>)
   8044e:	801a      	strh	r2, [r3, #0]
				flag_buff=1;
   80450:	4b19      	ldr	r3, [pc, #100]	; (804b8 <dd_can_extract_mailbox_data+0x2a4>)
   80452:	2201      	movs	r2, #1
   80454:	701a      	strb	r2, [r3, #0]
				state= CAN_IDLE;
   80456:	4b10      	ldr	r3, [pc, #64]	; (80498 <dd_can_extract_mailbox_data+0x284>)
   80458:	2200      	movs	r2, #0
   8045a:	701a      	strb	r2, [r3, #0]
				break;
   8045c:	e011      	b.n	80482 <dd_can_extract_mailbox_data+0x26e>
				case prop_BICAR_FEED_BACK_STATUS:
				   test =0;
   8045e:	4b14      	ldr	r3, [pc, #80]	; (804b0 <dd_can_extract_mailbox_data+0x29c>)
   80460:	2200      	movs	r2, #0
   80462:	701a      	strb	r2, [r3, #0]
				   count_start++;
   80464:	4b13      	ldr	r3, [pc, #76]	; (804b4 <dd_can_extract_mailbox_data+0x2a0>)
   80466:	881b      	ldrh	r3, [r3, #0]
   80468:	b29b      	uxth	r3, r3
   8046a:	3301      	adds	r3, #1
   8046c:	b29a      	uxth	r2, r3
   8046e:	4b11      	ldr	r3, [pc, #68]	; (804b4 <dd_can_extract_mailbox_data+0x2a0>)
   80470:	801a      	strh	r2, [r3, #0]
				flag_buff=1;
   80472:	4b11      	ldr	r3, [pc, #68]	; (804b8 <dd_can_extract_mailbox_data+0x2a4>)
   80474:	2201      	movs	r2, #1
   80476:	701a      	strb	r2, [r3, #0]
				state= CAN_IDLE;
   80478:	4b07      	ldr	r3, [pc, #28]	; (80498 <dd_can_extract_mailbox_data+0x284>)
   8047a:	2200      	movs	r2, #0
   8047c:	701a      	strb	r2, [r3, #0]
				break;
   8047e:	e000      	b.n	80482 <dd_can_extract_mailbox_data+0x26e>
				
				default:
				break;
   80480:	bf00      	nop
			  }		  
		   default:
		   break;
   80482:	bf00      	nop
		   
	 }
}
   80484:	3714      	adds	r7, #20
   80486:	46bd      	mov	sp, r7
   80488:	f85d 7b04 	ldr.w	r7, [sp], #4
   8048c:	4770      	bx	lr
   8048e:	bf00      	nop
   80490:	20070dc8 	.word	0x20070dc8
   80494:	20070c93 	.word	0x20070c93
   80498:	20070c88 	.word	0x20070c88
   8049c:	20070c8e 	.word	0x20070c8e
   804a0:	20070c90 	.word	0x20070c90
   804a4:	20070c94 	.word	0x20070c94
   804a8:	20070e08 	.word	0x20070e08
   804ac:	20070dcc 	.word	0x20070dcc
   804b0:	20070c97 	.word	0x20070c97
   804b4:	20070c8a 	.word	0x20070c8a
   804b8:	20070df4 	.word	0x20070df4
   804bc:	20070dce 	.word	0x20070dce
   804c0:	20070c8c 	.word	0x20070c8c
   804c4:	20070c98 	.word	0x20070c98
   804c8:	20070c9c 	.word	0x20070c9c
   804cc:	20070c9a 	.word	0x20070c9a
   804d0:	20070cde 	.word	0x20070cde

000804d4 <dd_can_mailbox_read>:
	
	



static uint32_t dd_can_mailbox_read(can_mb_conf_t *p_mailbox)   {
   804d4:	b480      	push	{r7}
   804d6:	b087      	sub	sp, #28
   804d8:	af00      	add	r7, sp, #0
   804da:	6078      	str	r0, [r7, #4]

	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   804dc:	2300      	movs	r3, #0
   804de:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   804e0:	687b      	ldr	r3, [r7, #4]
   804e2:	681b      	ldr	r3, [r3, #0]
   804e4:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   804e6:	687b      	ldr	r3, [r7, #4]
   804e8:	689b      	ldr	r3, [r3, #8]
   804ea:	60fb      	str	r3, [r7, #12]
	 /* Check whether there is overwriting happening in Receive with * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	 
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {	ul_retval = CAN_MAILBOX_RX_OVER;	}
   804ec:	68fb      	ldr	r3, [r7, #12]
   804ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   804f2:	2b00      	cmp	r3, #0
   804f4:	d006      	beq.n	80504 <dd_can_mailbox_read+0x30>
   804f6:	68fb      	ldr	r3, [r7, #12]
   804f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   804fc:	2b00      	cmp	r3, #0
   804fe:	d001      	beq.n	80504 <dd_can_mailbox_read+0x30>
   80500:	2302      	movs	r3, #2
   80502:	617b      	str	r3, [r7, #20]

	/* Read the message family ID. */
	p_mailbox->ul_fid =	CAN0->CAN_MB[uc_index].CAN_MFID & CAN_MFID_MFID_Msk;	
   80504:	4a26      	ldr	r2, [pc, #152]	; (805a0 <dd_can_mailbox_read+0xcc>)
   80506:	7cfb      	ldrb	r3, [r7, #19]
   80508:	015b      	lsls	r3, r3, #5
   8050a:	4413      	add	r3, r2
   8050c:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80510:	685b      	ldr	r3, [r3, #4]
   80512:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80516:	687b      	ldr	r3, [r7, #4]
   80518:	615a      	str	r2, [r3, #20]

	/* Read received data length. */
	p_mailbox->uc_length = (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   8051a:	68fb      	ldr	r3, [r7, #12]
   8051c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   80520:	0c1b      	lsrs	r3, r3, #16
   80522:	b2da      	uxtb	r2, r3
   80524:	687b      	ldr	r3, [r7, #4]
   80526:	719a      	strb	r2, [r3, #6]
	
	/* Read received data. */
	p_mailbox->ul_datal = CAN0->CAN_MB[uc_index].CAN_MDL;
   80528:	4a1d      	ldr	r2, [pc, #116]	; (805a0 <dd_can_mailbox_read+0xcc>)
   8052a:	7cfb      	ldrb	r3, [r7, #19]
   8052c:	015b      	lsls	r3, r3, #5
   8052e:	4413      	add	r3, r2
   80530:	f503 7304 	add.w	r3, r3, #528	; 0x210
   80534:	685a      	ldr	r2, [r3, #4]
   80536:	687b      	ldr	r3, [r7, #4]
   80538:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = CAN0->CAN_MB[uc_index].CAN_MDH;
   8053a:	4a19      	ldr	r2, [pc, #100]	; (805a0 <dd_can_mailbox_read+0xcc>)
   8053c:	7cfb      	ldrb	r3, [r7, #19]
   8053e:	015b      	lsls	r3, r3, #5
   80540:	4413      	add	r3, r2
   80542:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80546:	681a      	ldr	r2, [r3, #0]
   80548:	687b      	ldr	r3, [r7, #4]
   8054a:	61da      	str	r2, [r3, #28]
	
	
	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   8054c:	4a14      	ldr	r2, [pc, #80]	; (805a0 <dd_can_mailbox_read+0xcc>)
   8054e:	7cfb      	ldrb	r3, [r7, #19]
   80550:	015b      	lsls	r3, r3, #5
   80552:	4413      	add	r3, r2
   80554:	f503 7304 	add.w	r3, r3, #528	; 0x210
   80558:	681a      	ldr	r2, [r3, #0]
   8055a:	687b      	ldr	r3, [r7, #4]
   8055c:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   8055e:	687b      	ldr	r3, [r7, #4]
   80560:	689b      	ldr	r3, [r3, #8]
   80562:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;	}
   80564:	68fb      	ldr	r3, [r7, #12]
   80566:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   8056a:	2b00      	cmp	r3, #0
   8056c:	d003      	beq.n	80576 <dd_can_mailbox_read+0xa2>
   8056e:	697b      	ldr	r3, [r7, #20]
   80570:	f043 0304 	orr.w	r3, r3, #4
   80574:	617b      	str	r3, [r7, #20]
	else { ul_retval |= CAN_MAILBOX_TRANSFER_OK; }		
		
	/* Enable next receive process. */	 // Allows the reception of the next message
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |CAN_MCR_MDLC(p_mailbox->uc_length);    
   80576:	490a      	ldr	r1, [pc, #40]	; (805a0 <dd_can_mailbox_read+0xcc>)
   80578:	7cfb      	ldrb	r3, [r7, #19]
   8057a:	687a      	ldr	r2, [r7, #4]
   8057c:	7992      	ldrb	r2, [r2, #6]
   8057e:	0412      	lsls	r2, r2, #16
   80580:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   80584:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   80588:	015b      	lsls	r3, r3, #5
   8058a:	440b      	add	r3, r1
   8058c:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80590:	605a      	str	r2, [r3, #4]
	return ul_retval;
   80592:	697b      	ldr	r3, [r7, #20]
}
   80594:	4618      	mov	r0, r3
   80596:	371c      	adds	r7, #28
   80598:	46bd      	mov	sp, r7
   8059a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8059e:	4770      	bx	lr
   805a0:	400b4000 	.word	0x400b4000

000805a4 <dd_can_mailbox_write>:

		
 uint32_t dd_can_mailbox_write(can_mb_conf_t *p_mailbox)
{
   805a4:	b480      	push	{r7}
   805a6:	b085      	sub	sp, #20
   805a8:	af00      	add	r7, sp, #0
   805aa:	6078      	str	r0, [r7, #4]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   805ac:	687b      	ldr	r3, [r7, #4]
   805ae:	681b      	ldr	r3, [r3, #0]
   805b0:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   805b2:	4a2a      	ldr	r2, [pc, #168]	; (8065c <dd_can_mailbox_write+0xb8>)
   805b4:	7bfb      	ldrb	r3, [r7, #15]
   805b6:	015b      	lsls	r3, r3, #5
   805b8:	4413      	add	r3, r2
   805ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
   805be:	681a      	ldr	r2, [r3, #0]
   805c0:	687b      	ldr	r3, [r7, #4]
   805c2:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   805c4:	687b      	ldr	r3, [r7, #4]
   805c6:	689b      	ldr	r3, [r3, #8]
   805c8:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
   805ca:	68bb      	ldr	r3, [r7, #8]
   805cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   805d0:	2b00      	cmp	r3, #0
   805d2:	d101      	bne.n	805d8 <dd_can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
   805d4:	2301      	movs	r3, #1
   805d6:	e03b      	b.n	80650 <dd_can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) { 
   805d8:	687b      	ldr	r3, [r7, #4]
   805da:	795b      	ldrb	r3, [r3, #5]
   805dc:	2b00      	cmp	r3, #0
   805de:	d00b      	beq.n	805f8 <dd_can_mailbox_write+0x54>
		CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id | CAN_MAM_MIDE;
   805e0:	491e      	ldr	r1, [pc, #120]	; (8065c <dd_can_mailbox_write+0xb8>)
   805e2:	7bfb      	ldrb	r3, [r7, #15]
   805e4:	687a      	ldr	r2, [r7, #4]
   805e6:	6912      	ldr	r2, [r2, #16]
   805e8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   805ec:	015b      	lsls	r3, r3, #5
   805ee:	440b      	add	r3, r1
   805f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
   805f4:	601a      	str	r2, [r3, #0]
   805f6:	e008      	b.n	8060a <dd_can_mailbox_write+0x66>
	} else {
		CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   805f8:	4918      	ldr	r1, [pc, #96]	; (8065c <dd_can_mailbox_write+0xb8>)
   805fa:	7bfb      	ldrb	r3, [r7, #15]
   805fc:	687a      	ldr	r2, [r7, #4]
   805fe:	6912      	ldr	r2, [r2, #16]
   80600:	015b      	lsls	r3, r3, #5
   80602:	440b      	add	r3, r1
   80604:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80608:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	CAN0->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
   8060a:	4914      	ldr	r1, [pc, #80]	; (8065c <dd_can_mailbox_write+0xb8>)
   8060c:	7bfb      	ldrb	r3, [r7, #15]
   8060e:	687a      	ldr	r2, [r7, #4]
   80610:	6992      	ldr	r2, [r2, #24]
   80612:	015b      	lsls	r3, r3, #5
   80614:	440b      	add	r3, r1
   80616:	f503 7304 	add.w	r3, r3, #528	; 0x210
   8061a:	605a      	str	r2, [r3, #4]
	if (p_mailbox->uc_length > 4) {  CAN0->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
   8061c:	687b      	ldr	r3, [r7, #4]
   8061e:	799b      	ldrb	r3, [r3, #6]
   80620:	2b04      	cmp	r3, #4
   80622:	d908      	bls.n	80636 <dd_can_mailbox_write+0x92>
   80624:	490d      	ldr	r1, [pc, #52]	; (8065c <dd_can_mailbox_write+0xb8>)
   80626:	7bfb      	ldrb	r3, [r7, #15]
   80628:	687a      	ldr	r2, [r7, #4]
   8062a:	69d2      	ldr	r2, [r2, #28]
   8062c:	015b      	lsls	r3, r3, #5
   8062e:	440b      	add	r3, r1
   80630:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80634:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
   80636:	4909      	ldr	r1, [pc, #36]	; (8065c <dd_can_mailbox_write+0xb8>)
   80638:	7bfb      	ldrb	r3, [r7, #15]
   8063a:	687a      	ldr	r2, [r7, #4]
   8063c:	7992      	ldrb	r2, [r2, #6]
   8063e:	0412      	lsls	r2, r2, #16
   80640:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   80644:	015b      	lsls	r3, r3, #5
   80646:	440b      	add	r3, r1
   80648:	f503 7306 	add.w	r3, r3, #536	; 0x218
   8064c:	605a      	str	r2, [r3, #4]

	return CAN_MAILBOX_TRANSFER_OK;
   8064e:	2300      	movs	r3, #0
}
   80650:	4618      	mov	r0, r3
   80652:	3714      	adds	r7, #20
   80654:	46bd      	mov	sp, r7
   80656:	f85d 7b04 	ldr.w	r7, [sp], #4
   8065a:	4770      	bx	lr
   8065c:	400b4000 	.word	0x400b4000

00080660 <dd_can_global_send_transfer_cmd>:

void dd_can_global_send_transfer_cmd(uint8_t uc_mask)
{
   80660:	b480      	push	{r7}
   80662:	b085      	sub	sp, #20
   80664:	af00      	add	r7, sp, #0
   80666:	4603      	mov	r3, r0
   80668:	71fb      	strb	r3, [r7, #7]
	uint32_t ul_reg;

	ul_reg = CAN0->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
   8066a:	4b07      	ldr	r3, [pc, #28]	; (80688 <dd_can_global_send_transfer_cmd+0x28>)
   8066c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   8066e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   80672:	60fb      	str	r3, [r7, #12]
	CAN0->CAN_TCR = ul_reg | uc_mask;
   80674:	4904      	ldr	r1, [pc, #16]	; (80688 <dd_can_global_send_transfer_cmd+0x28>)
   80676:	79fa      	ldrb	r2, [r7, #7]
   80678:	68fb      	ldr	r3, [r7, #12]
   8067a:	4313      	orrs	r3, r2
   8067c:	624b      	str	r3, [r1, #36]	; 0x24
}
   8067e:	3714      	adds	r7, #20
   80680:	46bd      	mov	sp, r7
   80682:	f85d 7b04 	ldr.w	r7, [sp], #4
   80686:	4770      	bx	lr
   80688:	400b4000 	.word	0x400b4000

0008068c <dd_can_mailbox_conf>:



 void dd_can_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   8068c:	b480      	push	{r7}
   8068e:	b085      	sub	sp, #20
   80690:	af00      	add	r7, sp, #0
   80692:	6078      	str	r0, [r7, #4]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80694:	687b      	ldr	r3, [r7, #4]
   80696:	681b      	ldr	r3, [r3, #0]
   80698:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   8069a:	687b      	ldr	r3, [r7, #4]
   8069c:	791b      	ldrb	r3, [r3, #4]
   8069e:	2b00      	cmp	r3, #0
   806a0:	d12e      	bne.n	80700 <dd_can_mailbox_conf+0x74>
		CAN0->CAN_MB[uc_index].CAN_MMR = 0;
   806a2:	4a34      	ldr	r2, [pc, #208]	; (80774 <dd_can_mailbox_conf+0xe8>)
   806a4:	7bfb      	ldrb	r3, [r7, #15]
   806a6:	3310      	adds	r3, #16
   806a8:	015b      	lsls	r3, r3, #5
   806aa:	4413      	add	r3, r2
   806ac:	2200      	movs	r2, #0
   806ae:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MAM = 0;
   806b0:	4a30      	ldr	r2, [pc, #192]	; (80774 <dd_can_mailbox_conf+0xe8>)
   806b2:	7bfb      	ldrb	r3, [r7, #15]
   806b4:	3310      	adds	r3, #16
   806b6:	015b      	lsls	r3, r3, #5
   806b8:	4413      	add	r3, r2
   806ba:	2200      	movs	r2, #0
   806bc:	605a      	str	r2, [r3, #4]
		CAN0->CAN_MB[uc_index].CAN_MID = 0;
   806be:	4a2d      	ldr	r2, [pc, #180]	; (80774 <dd_can_mailbox_conf+0xe8>)
   806c0:	7bfb      	ldrb	r3, [r7, #15]
   806c2:	015b      	lsls	r3, r3, #5
   806c4:	4413      	add	r3, r2
   806c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
   806ca:	2200      	movs	r2, #0
   806cc:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDL = 0;
   806ce:	4a29      	ldr	r2, [pc, #164]	; (80774 <dd_can_mailbox_conf+0xe8>)
   806d0:	7bfb      	ldrb	r3, [r7, #15]
   806d2:	015b      	lsls	r3, r3, #5
   806d4:	4413      	add	r3, r2
   806d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
   806da:	2200      	movs	r2, #0
   806dc:	605a      	str	r2, [r3, #4]
		CAN0->CAN_MB[uc_index].CAN_MDH = 0;
   806de:	4a25      	ldr	r2, [pc, #148]	; (80774 <dd_can_mailbox_conf+0xe8>)
   806e0:	7bfb      	ldrb	r3, [r7, #15]
   806e2:	015b      	lsls	r3, r3, #5
   806e4:	4413      	add	r3, r2
   806e6:	f503 7306 	add.w	r3, r3, #536	; 0x218
   806ea:	2200      	movs	r2, #0
   806ec:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MCR = 0;
   806ee:	4a21      	ldr	r2, [pc, #132]	; (80774 <dd_can_mailbox_conf+0xe8>)
   806f0:	7bfb      	ldrb	r3, [r7, #15]
   806f2:	015b      	lsls	r3, r3, #5
   806f4:	4413      	add	r3, r2
   806f6:	f503 7306 	add.w	r3, r3, #536	; 0x218
   806fa:	2200      	movs	r2, #0
   806fc:	605a      	str	r2, [r3, #4]
		return;
   806fe:	e034      	b.n	8076a <dd_can_mailbox_conf+0xde>
	}
	
	/* Set the priority in Transmit mode. */                                                                   
	CAN0->CAN_MB[uc_index].CAN_MMR = (CAN0->CAN_MB[uc_index].CAN_MMR &  ~CAN_MMR_PRIOR_Msk) | (p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);  
   80700:	481c      	ldr	r0, [pc, #112]	; (80774 <dd_can_mailbox_conf+0xe8>)
   80702:	7bfb      	ldrb	r3, [r7, #15]
   80704:	491b      	ldr	r1, [pc, #108]	; (80774 <dd_can_mailbox_conf+0xe8>)
   80706:	7bfa      	ldrb	r2, [r7, #15]
   80708:	3210      	adds	r2, #16
   8070a:	0152      	lsls	r2, r2, #5
   8070c:	440a      	add	r2, r1
   8070e:	6812      	ldr	r2, [r2, #0]
   80710:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
   80714:	6879      	ldr	r1, [r7, #4]
   80716:	79c9      	ldrb	r1, [r1, #7]
   80718:	0409      	lsls	r1, r1, #16
   8071a:	430a      	orrs	r2, r1
   8071c:	3310      	adds	r3, #16
   8071e:	015b      	lsls	r3, r3, #5
   80720:	4403      	add	r3, r0
   80722:	601a      	str	r2, [r3, #0]
	/* Set the message ID and message acceptance mask for the mailbox in * other modes. */	
		CAN0 ->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   80724:	4913      	ldr	r1, [pc, #76]	; (80774 <dd_can_mailbox_conf+0xe8>)
   80726:	7bfb      	ldrb	r3, [r7, #15]
   80728:	687a      	ldr	r2, [r7, #4]
   8072a:	68d2      	ldr	r2, [r2, #12]
   8072c:	3310      	adds	r3, #16
   8072e:	015b      	lsls	r3, r3, #5
   80730:	440b      	add	r3, r1
   80732:	605a      	str	r2, [r3, #4]
		CAN0 ->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;	
   80734:	490f      	ldr	r1, [pc, #60]	; (80774 <dd_can_mailbox_conf+0xe8>)
   80736:	7bfb      	ldrb	r3, [r7, #15]
   80738:	687a      	ldr	r2, [r7, #4]
   8073a:	6912      	ldr	r2, [r2, #16]
   8073c:	015b      	lsls	r3, r3, #5
   8073e:	440b      	add	r3, r1
   80740:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80744:	601a      	str	r2, [r3, #0]

	/* Set up mailbox in one of the five different modes. */                                                      
	CAN0 ->CAN_MB[uc_index].CAN_MMR = (CAN0 ->CAN_MB[uc_index].CAN_MMR & ~CAN_MMR_MOT_Msk) | (p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);		
   80746:	480b      	ldr	r0, [pc, #44]	; (80774 <dd_can_mailbox_conf+0xe8>)
   80748:	7bfb      	ldrb	r3, [r7, #15]
   8074a:	490a      	ldr	r1, [pc, #40]	; (80774 <dd_can_mailbox_conf+0xe8>)
   8074c:	7bfa      	ldrb	r2, [r7, #15]
   8074e:	3210      	adds	r2, #16
   80750:	0152      	lsls	r2, r2, #5
   80752:	440a      	add	r2, r1
   80754:	6812      	ldr	r2, [r2, #0]
   80756:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
   8075a:	6879      	ldr	r1, [r7, #4]
   8075c:	7909      	ldrb	r1, [r1, #4]
   8075e:	0609      	lsls	r1, r1, #24
   80760:	430a      	orrs	r2, r1
   80762:	3310      	adds	r3, #16
   80764:	015b      	lsls	r3, r3, #5
   80766:	4403      	add	r3, r0
   80768:	601a      	str	r2, [r3, #0]
}
   8076a:	3714      	adds	r7, #20
   8076c:	46bd      	mov	sp, r7
   8076e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80772:	4770      	bx	lr
   80774:	400b4000 	.word	0x400b4000

00080778 <DD_INIT_CAN>:
	p_mailbox->ul_fid = 0;
	p_mailbox->ul_datal = 0;
	p_mailbox->ul_datah = 0;
}

void DD_INIT_CAN()     {
   80778:	b580      	push	{r7, lr}
   8077a:	b08e      	sub	sp, #56	; 0x38
   8077c:	af00      	add	r7, sp, #0
	can_bit_timing_t  *p_bit_time ;
	p_bit_time = (can_bit_timing_t *)&can_bit_time[6];
   8077e:	4b4b      	ldr	r3, [pc, #300]	; (808ac <DD_INIT_CAN+0x134>)
   80780:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ul_flag;
	uint32_t ul_tick;
	uint8_t uc_prescale = 120;
   80782:	2378      	movs	r3, #120	; 0x78
   80784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t ul_sysclk;
	CAN0 ->CAN_WPMR = 0x43414E00;  //Can write protection disabled
   80788:	4b49      	ldr	r3, [pc, #292]	; (808b0 <DD_INIT_CAN+0x138>)
   8078a:	4a4a      	ldr	r2, [pc, #296]	; (808b4 <DD_INIT_CAN+0x13c>)
   8078c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	CAN0 ->CAN_MR &= ~CAN_MR_CANEN ;  //0xFFFFFFFE; // DISABLE CAN0
   80790:	4a47      	ldr	r2, [pc, #284]	; (808b0 <DD_INIT_CAN+0x138>)
   80792:	4b47      	ldr	r3, [pc, #284]	; (808b0 <DD_INIT_CAN+0x138>)
   80794:	681b      	ldr	r3, [r3, #0]
   80796:	f023 0301 	bic.w	r3, r3, #1
   8079a:	6013      	str	r3, [r2, #0]
	CAN0->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) | CAN_BR_PROPAG(p_bit_time->uc_prog - 1) | CAN_BR_SJW(p_bit_time->uc_sjw - 1) |	CAN_BR_BRP(uc_prescale - 1);
   8079c:	4944      	ldr	r1, [pc, #272]	; (808b0 <DD_INIT_CAN+0x138>)
   8079e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   807a0:	78db      	ldrb	r3, [r3, #3]
   807a2:	3b01      	subs	r3, #1
   807a4:	f003 0207 	and.w	r2, r3, #7
   807a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   807aa:	789b      	ldrb	r3, [r3, #2]
   807ac:	3b01      	subs	r3, #1
   807ae:	011b      	lsls	r3, r3, #4
   807b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   807b4:	431a      	orrs	r2, r3
   807b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   807b8:	785b      	ldrb	r3, [r3, #1]
   807ba:	3b01      	subs	r3, #1
   807bc:	021b      	lsls	r3, r3, #8
   807be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   807c2:	431a      	orrs	r2, r3
   807c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   807c6:	791b      	ldrb	r3, [r3, #4]
   807c8:	3b01      	subs	r3, #1
   807ca:	031b      	lsls	r3, r3, #12
   807cc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   807d0:	431a      	orrs	r2, r3
   807d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   807d6:	3b01      	subs	r3, #1
   807d8:	041b      	lsls	r3, r3, #16
   807da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   807de:	4313      	orrs	r3, r2
   807e0:	614b      	str	r3, [r1, #20]
	can_mb_conf_t mb_config_t;
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   807e2:	2300      	movs	r3, #0
   807e4:	723b      	strb	r3, [r7, #8]
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   807e6:	2300      	movs	r3, #0
   807e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   807ec:	e00b      	b.n	80806 <DD_INIT_CAN+0x8e>
		mb_config_t.ul_mb_idx = i;
   807ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   807f2:	607b      	str	r3, [r7, #4]
		dd_can_mailbox_conf(&mb_config_t);
   807f4:	1d3b      	adds	r3, r7, #4
   807f6:	4618      	mov	r0, r3
   807f8:	4b2f      	ldr	r3, [pc, #188]	; (808b8 <DD_INIT_CAN+0x140>)
   807fa:	4798      	blx	r3
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   807fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   80800:	3301      	adds	r3, #1
   80802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   80806:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   8080a:	2b07      	cmp	r3, #7
   8080c:	d9ef      	bls.n	807ee <DD_INIT_CAN+0x76>
		mb_config_t.ul_mb_idx = i;
		dd_can_mailbox_conf(&mb_config_t);
	}
	// ALL MAIL BOX HAS BEEN RESET
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
   8080e:	4a28      	ldr	r2, [pc, #160]	; (808b0 <DD_INIT_CAN+0x138>)
   80810:	4b27      	ldr	r3, [pc, #156]	; (808b0 <DD_INIT_CAN+0x138>)
   80812:	681b      	ldr	r3, [r3, #0]
   80814:	f043 0301 	orr.w	r3, r3, #1
   80818:	6013      	str	r3, [r2, #0]
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   8081a:	2300      	movs	r3, #0
   8081c:	637b      	str	r3, [r7, #52]	; 0x34
	ul_tick = 0;
   8081e:	2300      	movs	r3, #0
   80820:	633b      	str	r3, [r7, #48]	; 0x30
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   80822:	e005      	b.n	80830 <DD_INIT_CAN+0xb8>
		ul_flag = (CAN0->CAN_SR);
   80824:	4b22      	ldr	r3, [pc, #136]	; (808b0 <DD_INIT_CAN+0x138>)
   80826:	691b      	ldr	r3, [r3, #16]
   80828:	637b      	str	r3, [r7, #52]	; 0x34
		ul_tick++;
   8082a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   8082c:	3301      	adds	r3, #1
   8082e:	633b      	str	r3, [r7, #48]	; 0x30
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   80830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   80832:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   80836:	2b00      	cmp	r3, #0
   80838:	d103      	bne.n	80842 <DD_INIT_CAN+0xca>
   8083a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   8083c:	4a1f      	ldr	r2, [pc, #124]	; (808bc <DD_INIT_CAN+0x144>)
   8083e:	4293      	cmp	r3, r2
   80840:	d9f0      	bls.n	80824 <DD_INIT_CAN+0xac>
	/* Timeout or the CAN module has been synchronized with the bus. */
/*	if (CAN_TIMEOUT == ul_tick) { puts("CAN initialization (sync) ERROR" STRING_EOL);	}
	else {	puts("CAN initialization is completed." STRING_EOL);
	}*/
	//NVIC-> ISER reset_mailbox_conf(&can0_mailbox);
	can0_mailbox.ul_mb_idx =   MAILBOX_1;
   80842:	4b1f      	ldr	r3, [pc, #124]	; (808c0 <DD_INIT_CAN+0x148>)
   80844:	2201      	movs	r2, #1
   80846:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_RX_MODE ;
   80848:	4b1d      	ldr	r3, [pc, #116]	; (808c0 <DD_INIT_CAN+0x148>)
   8084a:	2201      	movs	r2, #1
   8084c:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 0;
   8084e:	4b1c      	ldr	r3, [pc, #112]	; (808c0 <DD_INIT_CAN+0x148>)
   80850:	2200      	movs	r2, #0
   80852:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   80854:	4b1a      	ldr	r3, [pc, #104]	; (808c0 <DD_INIT_CAN+0x148>)
   80856:	2200      	movs	r2, #0
   80858:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk =  CAN_MFID_MFID_VA_dd(CAN_MASK);   // 0x7FC | CAN_MAM_MIDvA_Msk ;
   8085a:	4b19      	ldr	r3, [pc, #100]	; (808c0 <DD_INIT_CAN+0x148>)
   8085c:	4a19      	ldr	r2, [pc, #100]	; (808c4 <DD_INIT_CAN+0x14c>)
   8085e:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(PROPORTIONING_CPU_id) ;
   80860:	4b17      	ldr	r3, [pc, #92]	; (808c0 <DD_INIT_CAN+0x148>)
   80862:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   80866:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);
   80868:	4815      	ldr	r0, [pc, #84]	; (808c0 <DD_INIT_CAN+0x148>)
   8086a:	4b13      	ldr	r3, [pc, #76]	; (808b8 <DD_INIT_CAN+0x140>)
   8086c:	4798      	blx	r3
	NVIC_EnableIRQ(CAN0_IRQn);
   8086e:	202b      	movs	r0, #43	; 0x2b
   80870:	4b15      	ldr	r3, [pc, #84]	; (808c8 <DD_INIT_CAN+0x150>)
   80872:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   80874:	4b0e      	ldr	r3, [pc, #56]	; (808b0 <DD_INIT_CAN+0x138>)
   80876:	2202      	movs	r2, #2
   80878:	605a      	str	r2, [r3, #4]
	
	can0_mailbox.ul_mb_idx =   MAILBOX_0;
   8087a:	4b11      	ldr	r3, [pc, #68]	; (808c0 <DD_INIT_CAN+0x148>)
   8087c:	2200      	movs	r2, #0
   8087e:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;
   80880:	4b0f      	ldr	r3, [pc, #60]	; (808c0 <DD_INIT_CAN+0x148>)
   80882:	2203      	movs	r2, #3
   80884:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 1;
   80886:	4b0e      	ldr	r3, [pc, #56]	; (808c0 <DD_INIT_CAN+0x148>)
   80888:	2201      	movs	r2, #1
   8088a:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   8088c:	4b0c      	ldr	r3, [pc, #48]	; (808c0 <DD_INIT_CAN+0x148>)
   8088e:	2200      	movs	r2, #0
   80890:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = CAN_MFID_MFID_VA_dd(CAN_MASK);// 0x7FC | CAN_MAM_MIDvA_Msk | CAN_MAM_MIDvB_Msk ;
   80892:	4b0b      	ldr	r3, [pc, #44]	; (808c0 <DD_INIT_CAN+0x148>)
   80894:	4a0b      	ldr	r2, [pc, #44]	; (808c4 <DD_INIT_CAN+0x14c>)
   80896:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(MASTER_CPU_id);
   80898:	4b09      	ldr	r3, [pc, #36]	; (808c0 <DD_INIT_CAN+0x148>)
   8089a:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   8089e:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);	
   808a0:	4807      	ldr	r0, [pc, #28]	; (808c0 <DD_INIT_CAN+0x148>)
   808a2:	4b05      	ldr	r3, [pc, #20]	; (808b8 <DD_INIT_CAN+0x140>)
   808a4:	4798      	blx	r3
}
   808a6:	3738      	adds	r7, #56	; 0x38
   808a8:	46bd      	mov	sp, r7
   808aa:	bd80      	pop	{r7, pc}
   808ac:	00086d64 	.word	0x00086d64
   808b0:	400b4000 	.word	0x400b4000
   808b4:	43414e00 	.word	0x43414e00
   808b8:	0008068d 	.word	0x0008068d
   808bc:	0001869f 	.word	0x0001869f
   808c0:	20070dd4 	.word	0x20070dd4
   808c4:	1ffc0000 	.word	0x1ffc0000
   808c8:	00080185 	.word	0x00080185

000808cc <CPU3_D_SET_PUMP>:
 */ 
#include "D_SYS.h"
#include "Platform/Service/sv_interface.h"

uint8_t CPU3_D_SET_PUMP(sv_pumptype id_pump)
{
   808cc:	b580      	push	{r7, lr}
   808ce:	b082      	sub	sp, #8
   808d0:	af00      	add	r7, sp, #0
   808d2:	4603      	mov	r3, r0
   808d4:	71fb      	strb	r3, [r7, #7]
	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x00000A41;
   808d6:	4b18      	ldr	r3, [pc, #96]	; (80938 <CPU3_D_SET_PUMP+0x6c>)
   808d8:	f640 2241 	movw	r2, #2625	; 0xa41
   808dc:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x00000700;
   808e0:	4b15      	ldr	r3, [pc, #84]	; (80938 <CPU3_D_SET_PUMP+0x6c>)
   808e2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   808e6:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
	
	PWM->PWM_CH_NUM[5].PWM_CPRD = 0x00000A41;
   808ea:	4b13      	ldr	r3, [pc, #76]	; (80938 <CPU3_D_SET_PUMP+0x6c>)
   808ec:	f640 2241 	movw	r2, #2625	; 0xa41
   808f0:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY = 0x00000700;
   808f4:	4b10      	ldr	r3, [pc, #64]	; (80938 <CPU3_D_SET_PUMP+0x6c>)
   808f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   808fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	
	switch (id_pump)
   808fe:	79fb      	ldrb	r3, [r7, #7]
   80900:	2b01      	cmp	r3, #1
   80902:	d002      	beq.n	8090a <CPU3_D_SET_PUMP+0x3e>
   80904:	2b02      	cmp	r3, #2
   80906:	d009      	beq.n	8091c <CPU3_D_SET_PUMP+0x50>
		PWM->PWM_ENA =0x00000020;
		gpio_configure_pin(PIN_PWM_LED1_GPIO,PIN_PWM_LED1_FLAGS);
		break;
		
		default:
		break;
   80908:	e011      	b.n	8092e <CPU3_D_SET_PUMP+0x62>
	
	switch (id_pump)
	{
		case ACID_PUMP: //ACID PUMP
		
		PWM->PWM_ENA =0x00000010;
   8090a:	4b0b      	ldr	r3, [pc, #44]	; (80938 <CPU3_D_SET_PUMP+0x6c>)
   8090c:	2210      	movs	r2, #16
   8090e:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
   80910:	2055      	movs	r0, #85	; 0x55
   80912:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80916:	4b09      	ldr	r3, [pc, #36]	; (8093c <CPU3_D_SET_PUMP+0x70>)
   80918:	4798      	blx	r3
		break;
   8091a:	e008      	b.n	8092e <CPU3_D_SET_PUMP+0x62>
		
		case BICAR_PUMP:
		PWM->PWM_ENA =0x00000020;
   8091c:	4b06      	ldr	r3, [pc, #24]	; (80938 <CPU3_D_SET_PUMP+0x6c>)
   8091e:	2220      	movs	r2, #32
   80920:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED1_GPIO,PIN_PWM_LED1_FLAGS);
   80922:	2056      	movs	r0, #86	; 0x56
   80924:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80928:	4b04      	ldr	r3, [pc, #16]	; (8093c <CPU3_D_SET_PUMP+0x70>)
   8092a:	4798      	blx	r3
		break;
   8092c:	bf00      	nop
		
		default:
		break;
	}
	
	return 0;
   8092e:	2300      	movs	r3, #0
}
   80930:	4618      	mov	r0, r3
   80932:	3708      	adds	r7, #8
   80934:	46bd      	mov	sp, r7
   80936:	bd80      	pop	{r7, pc}
   80938:	40094000 	.word	0x40094000
   8093c:	00083041 	.word	0x00083041

00080940 <CPU3_D_CONFIG_TIMER>:
	return SENSOR_VAL;
	
}

uint8_t CPU3_D_CONFIG_TIMER(uint8_t timer_no, uint8_t timer_res)
{
   80940:	b590      	push	{r4, r7, lr}
   80942:	b089      	sub	sp, #36	; 0x24
   80944:	af00      	add	r7, sp, #0
   80946:	4603      	mov	r3, r0
   80948:	460a      	mov	r2, r1
   8094a:	71fb      	strb	r3, [r7, #7]
   8094c:	4613      	mov	r3, r2
   8094e:	71bb      	strb	r3, [r7, #6]
	uint32_t ch_no=0,rc;
   80950:	2300      	movs	r3, #0
   80952:	61fb      	str	r3, [r7, #28]
	double rc_cal;
	rc_cal = ((84000000/(128 * timer_res)) -1);
   80954:	79bb      	ldrb	r3, [r7, #6]
   80956:	01db      	lsls	r3, r3, #7
   80958:	4a1f      	ldr	r2, [pc, #124]	; (809d8 <CPU3_D_CONFIG_TIMER+0x98>)
   8095a:	fb92 f3f3 	sdiv	r3, r2, r3
   8095e:	1e5a      	subs	r2, r3, #1
   80960:	4b1e      	ldr	r3, [pc, #120]	; (809dc <CPU3_D_CONFIG_TIMER+0x9c>)
   80962:	4610      	mov	r0, r2
   80964:	4798      	blx	r3
   80966:	4602      	mov	r2, r0
   80968:	460b      	mov	r3, r1
   8096a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	rc = rc_cal;
   8096e:	4b1c      	ldr	r3, [pc, #112]	; (809e0 <CPU3_D_CONFIG_TIMER+0xa0>)
   80970:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   80974:	4798      	blx	r3
   80976:	4603      	mov	r3, r0
   80978:	60fb      	str	r3, [r7, #12]

	switch (timer_no)
   8097a:	79fb      	ldrb	r3, [r7, #7]
   8097c:	2b04      	cmp	r3, #4
   8097e:	d826      	bhi.n	809ce <CPU3_D_CONFIG_TIMER+0x8e>
   80980:	a201      	add	r2, pc, #4	; (adr r2, 80988 <CPU3_D_CONFIG_TIMER+0x48>)
   80982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80986:	bf00      	nop
   80988:	0008099d 	.word	0x0008099d
   8098c:	000809ab 	.word	0x000809ab
   80990:	000809bd 	.word	0x000809bd
   80994:	000809c3 	.word	0x000809c3
   80998:	000809c9 	.word	0x000809c9
	{
		case 0:
		CPU3_D_MAIN_TIMER( TC2, ch_no, TC6_IRQn, rc);
   8099c:	4811      	ldr	r0, [pc, #68]	; (809e4 <CPU3_D_CONFIG_TIMER+0xa4>)
   8099e:	69f9      	ldr	r1, [r7, #28]
   809a0:	2221      	movs	r2, #33	; 0x21
   809a2:	68fb      	ldr	r3, [r7, #12]
   809a4:	4c10      	ldr	r4, [pc, #64]	; (809e8 <CPU3_D_CONFIG_TIMER+0xa8>)
   809a6:	47a0      	blx	r4
		break;
   809a8:	e012      	b.n	809d0 <CPU3_D_CONFIG_TIMER+0x90>
		
		case 1:
		rc = timer_res;
   809aa:	79bb      	ldrb	r3, [r7, #6]
   809ac:	60fb      	str	r3, [r7, #12]
		acid_startTimer1(TC0,0,TC0_IRQn,rc);
   809ae:	480f      	ldr	r0, [pc, #60]	; (809ec <CPU3_D_CONFIG_TIMER+0xac>)
   809b0:	2100      	movs	r1, #0
   809b2:	221b      	movs	r2, #27
   809b4:	68fb      	ldr	r3, [r7, #12]
   809b6:	4c0e      	ldr	r4, [pc, #56]	; (809f0 <CPU3_D_CONFIG_TIMER+0xb0>)
   809b8:	47a0      	blx	r4
		break;
   809ba:	e009      	b.n	809d0 <CPU3_D_CONFIG_TIMER+0x90>
		
		case 2:
		rc = timer_res;
   809bc:	79bb      	ldrb	r3, [r7, #6]
   809be:	60fb      	str	r3, [r7, #12]
		//acid_startTimer2(TC0,1,TC1_IRQn,rc);
		break;
   809c0:	e006      	b.n	809d0 <CPU3_D_CONFIG_TIMER+0x90>
		
		case 3:
		rc = timer_res;
   809c2:	79bb      	ldrb	r3, [r7, #6]
   809c4:	60fb      	str	r3, [r7, #12]
		//bicar_startTimer2(TC1,0,TC1_IRQn,rc);
		break;
   809c6:	e003      	b.n	809d0 <CPU3_D_CONFIG_TIMER+0x90>
		
		case 4:
		rc = timer_res;
   809c8:	79bb      	ldrb	r3, [r7, #6]
   809ca:	60fb      	str	r3, [r7, #12]
		//bicar_startTimer2(TC1,1,TC1_IRQn,rc);
		break;
   809cc:	e000      	b.n	809d0 <CPU3_D_CONFIG_TIMER+0x90>
		
		
		default:
		break;
   809ce:	bf00      	nop
		
	}
}
   809d0:	4618      	mov	r0, r3
   809d2:	3724      	adds	r7, #36	; 0x24
   809d4:	46bd      	mov	sp, r7
   809d6:	bd90      	pop	{r4, r7, pc}
   809d8:	0501bd00 	.word	0x0501bd00
   809dc:	00083cd5 	.word	0x00083cd5
   809e0:	00083da1 	.word	0x00083da1
   809e4:	40088000 	.word	0x40088000
   809e8:	00081259 	.word	0x00081259
   809ec:	40080000 	.word	0x40080000
   809f0:	000812b5 	.word	0x000812b5

000809f4 <CPU3_D_STOP_TIMER>:

uint8_t CPU3_D_STOP_TIMER(uint8_t timer_no)
{
   809f4:	b580      	push	{r7, lr}
   809f6:	b082      	sub	sp, #8
   809f8:	af00      	add	r7, sp, #0
   809fa:	4603      	mov	r3, r0
   809fc:	71fb      	strb	r3, [r7, #7]
	//uint32_t ch_no=0;
	switch (timer_no)
   809fe:	79fb      	ldrb	r3, [r7, #7]
   80a00:	2b04      	cmp	r3, #4
   80a02:	d826      	bhi.n	80a52 <CPU3_D_STOP_TIMER+0x5e>
   80a04:	a201      	add	r2, pc, #4	; (adr r2, 80a0c <CPU3_D_STOP_TIMER+0x18>)
   80a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80a0a:	bf00      	nop
   80a0c:	00080a21 	.word	0x00080a21
   80a10:	00080a2b 	.word	0x00080a2b
   80a14:	00080a35 	.word	0x00080a35
   80a18:	00080a3f 	.word	0x00080a3f
   80a1c:	00080a49 	.word	0x00080a49
	{
		case 0:
		tc_stop(TC0,0);
   80a20:	480e      	ldr	r0, [pc, #56]	; (80a5c <CPU3_D_STOP_TIMER+0x68>)
   80a22:	2100      	movs	r1, #0
   80a24:	4b0e      	ldr	r3, [pc, #56]	; (80a60 <CPU3_D_STOP_TIMER+0x6c>)
   80a26:	4798      	blx	r3
		break;
   80a28:	e014      	b.n	80a54 <CPU3_D_STOP_TIMER+0x60>
		
		case 1:
		tc_stop(TC0,1);
   80a2a:	480c      	ldr	r0, [pc, #48]	; (80a5c <CPU3_D_STOP_TIMER+0x68>)
   80a2c:	2101      	movs	r1, #1
   80a2e:	4b0c      	ldr	r3, [pc, #48]	; (80a60 <CPU3_D_STOP_TIMER+0x6c>)
   80a30:	4798      	blx	r3
		break;
   80a32:	e00f      	b.n	80a54 <CPU3_D_STOP_TIMER+0x60>
		
		case 2:
		tc_stop(TC2,0);
   80a34:	480b      	ldr	r0, [pc, #44]	; (80a64 <CPU3_D_STOP_TIMER+0x70>)
   80a36:	2100      	movs	r1, #0
   80a38:	4b09      	ldr	r3, [pc, #36]	; (80a60 <CPU3_D_STOP_TIMER+0x6c>)
   80a3a:	4798      	blx	r3
		break;
   80a3c:	e00a      	b.n	80a54 <CPU3_D_STOP_TIMER+0x60>
		
		case 3:
		tc_stop(TC1,0);
   80a3e:	480a      	ldr	r0, [pc, #40]	; (80a68 <CPU3_D_STOP_TIMER+0x74>)
   80a40:	2100      	movs	r1, #0
   80a42:	4b07      	ldr	r3, [pc, #28]	; (80a60 <CPU3_D_STOP_TIMER+0x6c>)
   80a44:	4798      	blx	r3
		break;
   80a46:	e005      	b.n	80a54 <CPU3_D_STOP_TIMER+0x60>
		
		case 4:
		tc_stop(TC1,1);
   80a48:	4807      	ldr	r0, [pc, #28]	; (80a68 <CPU3_D_STOP_TIMER+0x74>)
   80a4a:	2101      	movs	r1, #1
   80a4c:	4b04      	ldr	r3, [pc, #16]	; (80a60 <CPU3_D_STOP_TIMER+0x6c>)
   80a4e:	4798      	blx	r3
		break;
   80a50:	e000      	b.n	80a54 <CPU3_D_STOP_TIMER+0x60>
		
		default:
		break;
   80a52:	bf00      	nop
	}
   80a54:	4618      	mov	r0, r3
   80a56:	3708      	adds	r7, #8
   80a58:	46bd      	mov	sp, r7
   80a5a:	bd80      	pop	{r7, pc}
   80a5c:	40080000 	.word	0x40080000
   80a60:	00081709 	.word	0x00081709
   80a64:	40088000 	.word	0x40088000
   80a68:	40084000 	.word	0x40084000

00080a6c <CPU3_D_INIT_PIO>:
 *  Author: wid7
 */ 
#include "D_GPIO.h"

void CPU3_D_INIT_PIO()
{
   80a6c:	b580      	push	{r7, lr}
   80a6e:	af00      	add	r7, sp, #0
	pmc_enable_periph_clk(ID_PIOA);
   80a70:	200b      	movs	r0, #11
   80a72:	4b3b      	ldr	r3, [pc, #236]	; (80b60 <CPU3_D_INIT_PIO+0xf4>)
   80a74:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOB);
   80a76:	200c      	movs	r0, #12
   80a78:	4b39      	ldr	r3, [pc, #228]	; (80b60 <CPU3_D_INIT_PIO+0xf4>)
   80a7a:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOC);
   80a7c:	200d      	movs	r0, #13
   80a7e:	4b38      	ldr	r3, [pc, #224]	; (80b60 <CPU3_D_INIT_PIO+0xf4>)
   80a80:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOD);
   80a82:	200e      	movs	r0, #14
   80a84:	4b36      	ldr	r3, [pc, #216]	; (80b60 <CPU3_D_INIT_PIO+0xf4>)
   80a86:	4798      	blx	r3
	
	
	PIOA->PIO_WPMR = 0x50494F00;
   80a88:	4b36      	ldr	r3, [pc, #216]	; (80b64 <CPU3_D_INIT_PIO+0xf8>)
   80a8a:	4a37      	ldr	r2, [pc, #220]	; (80b68 <CPU3_D_INIT_PIO+0xfc>)
   80a8c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOB->PIO_WPMR = 0x50494F00;
   80a90:	4b36      	ldr	r3, [pc, #216]	; (80b6c <CPU3_D_INIT_PIO+0x100>)
   80a92:	4a35      	ldr	r2, [pc, #212]	; (80b68 <CPU3_D_INIT_PIO+0xfc>)
   80a94:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR = 0x50494F00;
   80a98:	4b35      	ldr	r3, [pc, #212]	; (80b70 <CPU3_D_INIT_PIO+0x104>)
   80a9a:	4a33      	ldr	r2, [pc, #204]	; (80b68 <CPU3_D_INIT_PIO+0xfc>)
   80a9c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_WPMR = 0x50494F00;
   80aa0:	4b34      	ldr	r3, [pc, #208]	; (80b74 <CPU3_D_INIT_PIO+0x108>)
   80aa2:	4a31      	ldr	r2, [pc, #196]	; (80b68 <CPU3_D_INIT_PIO+0xfc>)
   80aa4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	PIOA->PIO_PUER = 0x00060000;			
   80aa8:	4b2e      	ldr	r3, [pc, #184]	; (80b64 <CPU3_D_INIT_PIO+0xf8>)
   80aaa:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   80aae:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PDR  = 0x1F870343;		//PIOA->PIO_PDR =	 0x00060000;				// initialization for TWI //
   80ab0:	4b2c      	ldr	r3, [pc, #176]	; (80b64 <CPU3_D_INIT_PIO+0xf8>)
   80ab2:	4a31      	ldr	r2, [pc, #196]	; (80b78 <CPU3_D_INIT_PIO+0x10c>)
   80ab4:	605a      	str	r2, [r3, #4]
	PIOA->PIO_ABSR = 0x00090000;
   80ab6:	4b2b      	ldr	r3, [pc, #172]	; (80b64 <CPU3_D_INIT_PIO+0xf8>)
   80ab8:	f44f 2210 	mov.w	r2, #589824	; 0x90000
   80abc:	671a      	str	r2, [r3, #112]	; 0x70
	PIOA->PIO_PUER = 0x00000300;			// for scanf statement//
   80abe:	4b29      	ldr	r3, [pc, #164]	; (80b64 <CPU3_D_INIT_PIO+0xf8>)
   80ac0:	f44f 7240 	mov.w	r2, #768	; 0x300
   80ac4:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PUER = 0x00000300;
   80ac6:	4b27      	ldr	r3, [pc, #156]	; (80b64 <CPU3_D_INIT_PIO+0xf8>)
   80ac8:	f44f 7240 	mov.w	r2, #768	; 0x300
   80acc:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PER  = 0x0018C004;		//PIOA->PIO_PER  = 0x0018C000;
   80ace:	4b25      	ldr	r3, [pc, #148]	; (80b64 <CPU3_D_INIT_PIO+0xf8>)
   80ad0:	4a2a      	ldr	r2, [pc, #168]	; (80b7c <CPU3_D_INIT_PIO+0x110>)
   80ad2:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER  = 0x00180004;		//PIOA->PIO_OER  = 0x0018C000;
   80ad4:	4b23      	ldr	r3, [pc, #140]	; (80b64 <CPU3_D_INIT_PIO+0xf8>)
   80ad6:	4a2a      	ldr	r2, [pc, #168]	; (80b80 <CPU3_D_INIT_PIO+0x114>)
   80ad8:	611a      	str	r2, [r3, #16]
	PIOA->PIO_SODR = 0x00180000;           //??????
   80ada:	4b22      	ldr	r3, [pc, #136]	; (80b64 <CPU3_D_INIT_PIO+0xf8>)
   80adc:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   80ae0:	631a      	str	r2, [r3, #48]	; 0x30
	PIOA->PIO_ODR  = 0x0000C000;             //??????
   80ae2:	4b20      	ldr	r3, [pc, #128]	; (80b64 <CPU3_D_INIT_PIO+0xf8>)
   80ae4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   80ae8:	615a      	str	r2, [r3, #20]
	
		
	PIOB->PIO_PER  = 0x08204000;		//PIOB->PIO_OER  = 0x04204000;
   80aea:	4b20      	ldr	r3, [pc, #128]	; (80b6c <CPU3_D_INIT_PIO+0x100>)
   80aec:	4a25      	ldr	r2, [pc, #148]	; (80b84 <CPU3_D_INIT_PIO+0x118>)
   80aee:	601a      	str	r2, [r3, #0]
	PIOB->PIO_OER  = 0x08204000;		//PIOB->PIO_OER  = 0x06204000;
   80af0:	4b1e      	ldr	r3, [pc, #120]	; (80b6c <CPU3_D_INIT_PIO+0x100>)
   80af2:	4a24      	ldr	r2, [pc, #144]	; (80b84 <CPU3_D_INIT_PIO+0x118>)
   80af4:	611a      	str	r2, [r3, #16]
	PIOB->PIO_PDR  = 0xF01800FF;
   80af6:	4b1d      	ldr	r3, [pc, #116]	; (80b6c <CPU3_D_INIT_PIO+0x100>)
   80af8:	4a23      	ldr	r2, [pc, #140]	; (80b88 <CPU3_D_INIT_PIO+0x11c>)
   80afa:	605a      	str	r2, [r3, #4]
	PIOB->PIO_SODR = 0x06204000;
   80afc:	4b1b      	ldr	r3, [pc, #108]	; (80b6c <CPU3_D_INIT_PIO+0x100>)
   80afe:	4a23      	ldr	r2, [pc, #140]	; (80b8c <CPU3_D_INIT_PIO+0x120>)
   80b00:	631a      	str	r2, [r3, #48]	; 0x30
	PIOB->PIO_CODR = 0x04000000;
   80b02:	4b1a      	ldr	r3, [pc, #104]	; (80b6c <CPU3_D_INIT_PIO+0x100>)
   80b04:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80b08:	635a      	str	r2, [r3, #52]	; 0x34
	
	PIOC->PIO_PER  = 0x0D8FF1FE;		//PIOC->PIO_PER  = 0x378FF1FE;
   80b0a:	4b19      	ldr	r3, [pc, #100]	; (80b70 <CPU3_D_INIT_PIO+0x104>)
   80b0c:	4a20      	ldr	r2, [pc, #128]	; (80b90 <CPU3_D_INIT_PIO+0x124>)
   80b0e:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER  = 0x008FF1FE;		//PIOC->PIO_OER  = 0x068FF1FE;
   80b10:	4b17      	ldr	r3, [pc, #92]	; (80b70 <CPU3_D_INIT_PIO+0x104>)
   80b12:	4a20      	ldr	r2, [pc, #128]	; (80b94 <CPU3_D_INIT_PIO+0x128>)
   80b14:	611a      	str	r2, [r3, #16]
	PIOC->PIO_ODR  = 0x05000000;		//PIOC->PIO_ODR  = 0x14000000;
   80b16:	4b16      	ldr	r3, [pc, #88]	; (80b70 <CPU3_D_INIT_PIO+0x104>)
   80b18:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
   80b1c:	615a      	str	r2, [r3, #20]
	PIOC->PIO_CODR = 0x060FF1FE;
   80b1e:	4b14      	ldr	r3, [pc, #80]	; (80b70 <CPU3_D_INIT_PIO+0x104>)
   80b20:	4a1d      	ldr	r2, [pc, #116]	; (80b98 <CPU3_D_INIT_PIO+0x12c>)
   80b22:	635a      	str	r2, [r3, #52]	; 0x34
	PIOC->PIO_CODR = 0x00800000;
   80b24:	4b12      	ldr	r3, [pc, #72]	; (80b70 <CPU3_D_INIT_PIO+0x104>)
   80b26:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   80b2a:	635a      	str	r2, [r3, #52]	; 0x34

	PIOD->PIO_PER  = 0X000001E10;		//PIOD->PIO_PER  = 0x0000000F;
   80b2c:	4b11      	ldr	r3, [pc, #68]	; (80b74 <CPU3_D_INIT_PIO+0x108>)
   80b2e:	f641 6210 	movw	r2, #7696	; 0x1e10
   80b32:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER  = 0x0000006F;
   80b34:	4b0f      	ldr	r3, [pc, #60]	; (80b74 <CPU3_D_INIT_PIO+0x108>)
   80b36:	226f      	movs	r2, #111	; 0x6f
   80b38:	611a      	str	r2, [r3, #16]
	//PIOD->PIO_SODR = 0x0000000F;
	PIOD->PIO_PUER = 0x0000000F;
   80b3a:	4b0e      	ldr	r3, [pc, #56]	; (80b74 <CPU3_D_INIT_PIO+0x108>)
   80b3c:	220f      	movs	r2, #15
   80b3e:	665a      	str	r2, [r3, #100]	; 0x64
	
	gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   80b40:	2001      	movs	r0, #1
   80b42:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b46:	4b15      	ldr	r3, [pc, #84]	; (80b9c <CPU3_D_INIT_PIO+0x130>)
   80b48:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   80b4a:	2000      	movs	r0, #0
   80b4c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b50:	4b12      	ldr	r3, [pc, #72]	; (80b9c <CPU3_D_INIT_PIO+0x130>)
   80b52:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_STANDBY_IDX, PIN_CAN0_STANDBY_FLAGS);
   80b54:	2003      	movs	r0, #3
   80b56:	4912      	ldr	r1, [pc, #72]	; (80ba0 <CPU3_D_INIT_PIO+0x134>)
   80b58:	4b10      	ldr	r3, [pc, #64]	; (80b9c <CPU3_D_INIT_PIO+0x130>)
   80b5a:	4798      	blx	r3





}
   80b5c:	bd80      	pop	{r7, pc}
   80b5e:	bf00      	nop
   80b60:	000835dd 	.word	0x000835dd
   80b64:	400e0e00 	.word	0x400e0e00
   80b68:	50494f00 	.word	0x50494f00
   80b6c:	400e1000 	.word	0x400e1000
   80b70:	400e1200 	.word	0x400e1200
   80b74:	400e1400 	.word	0x400e1400
   80b78:	1f870343 	.word	0x1f870343
   80b7c:	0018c004 	.word	0x0018c004
   80b80:	00180004 	.word	0x00180004
   80b84:	08204000 	.word	0x08204000
   80b88:	f01800ff 	.word	0xf01800ff
   80b8c:	06204000 	.word	0x06204000
   80b90:	0d8ff1fe 	.word	0x0d8ff1fe
   80b94:	008ff1fe 	.word	0x008ff1fe
   80b98:	060ff1fe 	.word	0x060ff1fe
   80b9c:	00083041 	.word	0x00083041
   80ba0:	30000001 	.word	0x30000001

00080ba4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   80ba4:	b480      	push	{r7}
   80ba6:	b083      	sub	sp, #12
   80ba8:	af00      	add	r7, sp, #0
   80baa:	4603      	mov	r3, r0
   80bac:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   80bae:	4909      	ldr	r1, [pc, #36]	; (80bd4 <NVIC_ClearPendingIRQ+0x30>)
   80bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80bb4:	095b      	lsrs	r3, r3, #5
   80bb6:	79fa      	ldrb	r2, [r7, #7]
   80bb8:	f002 021f 	and.w	r2, r2, #31
   80bbc:	2001      	movs	r0, #1
   80bbe:	fa00 f202 	lsl.w	r2, r0, r2
   80bc2:	3360      	adds	r3, #96	; 0x60
   80bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80bc8:	370c      	adds	r7, #12
   80bca:	46bd      	mov	sp, r7
   80bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
   80bd0:	4770      	bx	lr
   80bd2:	bf00      	nop
   80bd4:	e000e100 	.word	0xe000e100

00080bd8 <TC0_Handler>:
		}
	}
}*/

void TC0_Handler()
{
   80bd8:	b580      	push	{r7, lr}
   80bda:	af00      	add	r7, sp, #0
	TC1->TC_CHANNEL[0].TC_IDR = TC_IER_CPCS;
   80bdc:	4b4f      	ldr	r3, [pc, #316]	; (80d1c <TC0_Handler+0x144>)
   80bde:	2210      	movs	r2, #16
   80be0:	629a      	str	r2, [r3, #40]	; 0x28
	
	PIOD->PIO_WPMR	= 0x50494F00;
   80be2:	4b4f      	ldr	r3, [pc, #316]	; (80d20 <TC0_Handler+0x148>)
   80be4:	4a4f      	ldr	r2, [pc, #316]	; (80d24 <TC0_Handler+0x14c>)
   80be6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR  = 0x50494F00;
   80bea:	4b4f      	ldr	r3, [pc, #316]	; (80d28 <TC0_Handler+0x150>)
   80bec:	4a4d      	ldr	r2, [pc, #308]	; (80d24 <TC0_Handler+0x14c>)
   80bee:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_OWER  = 0x00000003;
   80bf2:	4b4b      	ldr	r3, [pc, #300]	; (80d20 <TC0_Handler+0x148>)
   80bf4:	2203      	movs	r2, #3
   80bf6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOD->PIO_OWDR  = 0x0000000C;
   80bfa:	4b49      	ldr	r3, [pc, #292]	; (80d20 <TC0_Handler+0x148>)
   80bfc:	220c      	movs	r2, #12
   80bfe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOC->PIO_OWER  = 0x000001FE;
   80c02:	4b49      	ldr	r3, [pc, #292]	; (80d28 <TC0_Handler+0x150>)
   80c04:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   80c08:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_OWDR  = 0x000FF000;
   80c0c:	4b46      	ldr	r3, [pc, #280]	; (80d28 <TC0_Handler+0x150>)
   80c0e:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   80c12:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	count = count+1;
   80c16:	4b45      	ldr	r3, [pc, #276]	; (80d2c <TC0_Handler+0x154>)
   80c18:	681b      	ldr	r3, [r3, #0]
   80c1a:	3301      	adds	r3, #1
   80c1c:	4a43      	ldr	r2, [pc, #268]	; (80d2c <TC0_Handler+0x154>)
   80c1e:	6013      	str	r3, [r2, #0]
	TC1_cnt++;
   80c20:	4b43      	ldr	r3, [pc, #268]	; (80d30 <TC0_Handler+0x158>)
   80c22:	681b      	ldr	r3, [r3, #0]
   80c24:	3301      	adds	r3, #1
   80c26:	4a42      	ldr	r2, [pc, #264]	; (80d30 <TC0_Handler+0x158>)
   80c28:	6013      	str	r3, [r2, #0]
	Cnt_TC0_total++;
   80c2a:	4b42      	ldr	r3, [pc, #264]	; (80d34 <TC0_Handler+0x15c>)
   80c2c:	681b      	ldr	r3, [r3, #0]
   80c2e:	3301      	adds	r3, #1
   80c30:	4a40      	ldr	r2, [pc, #256]	; (80d34 <TC0_Handler+0x15c>)
   80c32:	6013      	str	r3, [r2, #0]
	
	
	if(count<64)
   80c34:	4b3d      	ldr	r3, [pc, #244]	; (80d2c <TC0_Handler+0x154>)
   80c36:	681b      	ldr	r3, [r3, #0]
   80c38:	2b3f      	cmp	r3, #63	; 0x3f
   80c3a:	d80e      	bhi.n	80c5a <TC0_Handler+0x82>
	{
		PIOD->PIO_ODSR = array_acid[count].dir;
   80c3c:	4a38      	ldr	r2, [pc, #224]	; (80d20 <TC0_Handler+0x148>)
   80c3e:	4b3b      	ldr	r3, [pc, #236]	; (80d2c <TC0_Handler+0x154>)
   80c40:	681b      	ldr	r3, [r3, #0]
   80c42:	493d      	ldr	r1, [pc, #244]	; (80d38 <TC0_Handler+0x160>)
   80c44:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80c48:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_acid[count].AB;
   80c4a:	4a37      	ldr	r2, [pc, #220]	; (80d28 <TC0_Handler+0x150>)
   80c4c:	4b37      	ldr	r3, [pc, #220]	; (80d2c <TC0_Handler+0x154>)
   80c4e:	681b      	ldr	r3, [r3, #0]
   80c50:	4939      	ldr	r1, [pc, #228]	; (80d38 <TC0_Handler+0x160>)
   80c52:	00db      	lsls	r3, r3, #3
   80c54:	440b      	add	r3, r1
   80c56:	685b      	ldr	r3, [r3, #4]
   80c58:	6393      	str	r3, [r2, #56]	; 0x38
		//printf("%x %x\n",array_acid[count].dir,array_acid[count].AB);
	}
	if (count >=64)
   80c5a:	4b34      	ldr	r3, [pc, #208]	; (80d2c <TC0_Handler+0x154>)
   80c5c:	681b      	ldr	r3, [r3, #0]
   80c5e:	2b3f      	cmp	r3, #63	; 0x3f
   80c60:	d911      	bls.n	80c86 <TC0_Handler+0xae>
	{
		count = 0;
   80c62:	4b32      	ldr	r3, [pc, #200]	; (80d2c <TC0_Handler+0x154>)
   80c64:	2200      	movs	r2, #0
   80c66:	601a      	str	r2, [r3, #0]
		PIOD->PIO_ODSR = array_acid[count].dir;
   80c68:	4a2d      	ldr	r2, [pc, #180]	; (80d20 <TC0_Handler+0x148>)
   80c6a:	4b30      	ldr	r3, [pc, #192]	; (80d2c <TC0_Handler+0x154>)
   80c6c:	681b      	ldr	r3, [r3, #0]
   80c6e:	4932      	ldr	r1, [pc, #200]	; (80d38 <TC0_Handler+0x160>)
   80c70:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80c74:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_acid[count].AB;
   80c76:	4a2c      	ldr	r2, [pc, #176]	; (80d28 <TC0_Handler+0x150>)
   80c78:	4b2c      	ldr	r3, [pc, #176]	; (80d2c <TC0_Handler+0x154>)
   80c7a:	681b      	ldr	r3, [r3, #0]
   80c7c:	492e      	ldr	r1, [pc, #184]	; (80d38 <TC0_Handler+0x160>)
   80c7e:	00db      	lsls	r3, r3, #3
   80c80:	440b      	add	r3, r1
   80c82:	685b      	ldr	r3, [r3, #4]
   80c84:	6393      	str	r3, [r2, #56]	; 0x38
		//printf("%x %x\n",array_acid[count].dir,array_acid[count].AB);
	}
	
		PIOD->PIO_WPMR	= 0x50494F00;
   80c86:	4b26      	ldr	r3, [pc, #152]	; (80d20 <TC0_Handler+0x148>)
   80c88:	4a26      	ldr	r2, [pc, #152]	; (80d24 <TC0_Handler+0x14c>)
   80c8a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		PIOC->PIO_WPMR  = 0x50494F00;
   80c8e:	4b26      	ldr	r3, [pc, #152]	; (80d28 <TC0_Handler+0x150>)
   80c90:	4a24      	ldr	r2, [pc, #144]	; (80d24 <TC0_Handler+0x14c>)
   80c92:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		PIOD->PIO_OWER  = 0x0000000C;
   80c96:	4b22      	ldr	r3, [pc, #136]	; (80d20 <TC0_Handler+0x148>)
   80c98:	220c      	movs	r2, #12
   80c9a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		PIOD->PIO_OWDR  = 0x00000003;
   80c9e:	4b20      	ldr	r3, [pc, #128]	; (80d20 <TC0_Handler+0x148>)
   80ca0:	2203      	movs	r2, #3
   80ca2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		PIOC->PIO_OWER  = 0x000FF000;
   80ca6:	4b20      	ldr	r3, [pc, #128]	; (80d28 <TC0_Handler+0x150>)
   80ca8:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   80cac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		PIOC->PIO_OWDR  = 0x000001FE;
   80cb0:	4b1d      	ldr	r3, [pc, #116]	; (80d28 <TC0_Handler+0x150>)
   80cb2:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   80cb6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

		if(count<64)
   80cba:	4b1c      	ldr	r3, [pc, #112]	; (80d2c <TC0_Handler+0x154>)
   80cbc:	681b      	ldr	r3, [r3, #0]
   80cbe:	2b3f      	cmp	r3, #63	; 0x3f
   80cc0:	d80e      	bhi.n	80ce0 <TC0_Handler+0x108>
		{
			PIOD->PIO_ODSR = array_bicar[count].dir;
   80cc2:	4a17      	ldr	r2, [pc, #92]	; (80d20 <TC0_Handler+0x148>)
   80cc4:	4b19      	ldr	r3, [pc, #100]	; (80d2c <TC0_Handler+0x154>)
   80cc6:	681b      	ldr	r3, [r3, #0]
   80cc8:	491c      	ldr	r1, [pc, #112]	; (80d3c <TC0_Handler+0x164>)
   80cca:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80cce:	6393      	str	r3, [r2, #56]	; 0x38
			PIOC->PIO_ODSR = array_bicar[count].AB;
   80cd0:	4a15      	ldr	r2, [pc, #84]	; (80d28 <TC0_Handler+0x150>)
   80cd2:	4b16      	ldr	r3, [pc, #88]	; (80d2c <TC0_Handler+0x154>)
   80cd4:	681b      	ldr	r3, [r3, #0]
   80cd6:	4919      	ldr	r1, [pc, #100]	; (80d3c <TC0_Handler+0x164>)
   80cd8:	00db      	lsls	r3, r3, #3
   80cda:	440b      	add	r3, r1
   80cdc:	685b      	ldr	r3, [r3, #4]
   80cde:	6393      	str	r3, [r2, #56]	; 0x38
		}
		if (count >=64)
   80ce0:	4b12      	ldr	r3, [pc, #72]	; (80d2c <TC0_Handler+0x154>)
   80ce2:	681b      	ldr	r3, [r3, #0]
   80ce4:	2b3f      	cmp	r3, #63	; 0x3f
   80ce6:	d911      	bls.n	80d0c <TC0_Handler+0x134>
		{
			count = 0;
   80ce8:	4b10      	ldr	r3, [pc, #64]	; (80d2c <TC0_Handler+0x154>)
   80cea:	2200      	movs	r2, #0
   80cec:	601a      	str	r2, [r3, #0]
			PIOD->PIO_ODSR = array_bicar[count].dir;
   80cee:	4a0c      	ldr	r2, [pc, #48]	; (80d20 <TC0_Handler+0x148>)
   80cf0:	4b0e      	ldr	r3, [pc, #56]	; (80d2c <TC0_Handler+0x154>)
   80cf2:	681b      	ldr	r3, [r3, #0]
   80cf4:	4911      	ldr	r1, [pc, #68]	; (80d3c <TC0_Handler+0x164>)
   80cf6:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80cfa:	6393      	str	r3, [r2, #56]	; 0x38
			PIOC->PIO_ODSR = array_bicar[count].AB;
   80cfc:	4a0a      	ldr	r2, [pc, #40]	; (80d28 <TC0_Handler+0x150>)
   80cfe:	4b0b      	ldr	r3, [pc, #44]	; (80d2c <TC0_Handler+0x154>)
   80d00:	681b      	ldr	r3, [r3, #0]
   80d02:	490e      	ldr	r1, [pc, #56]	; (80d3c <TC0_Handler+0x164>)
   80d04:	00db      	lsls	r3, r3, #3
   80d06:	440b      	add	r3, r1
   80d08:	685b      	ldr	r3, [r3, #4]
   80d0a:	6393      	str	r3, [r2, #56]	; 0x38
		}
	
	
	if ((tc_get_status(TC0, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   80d0c:	480c      	ldr	r0, [pc, #48]	; (80d40 <TC0_Handler+0x168>)
   80d0e:	2100      	movs	r1, #0
   80d10:	4b0c      	ldr	r3, [pc, #48]	; (80d44 <TC0_Handler+0x16c>)
   80d12:	4798      	blx	r3
	{
		;
	}
	TC1->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   80d14:	4b01      	ldr	r3, [pc, #4]	; (80d1c <TC0_Handler+0x144>)
   80d16:	2210      	movs	r2, #16
   80d18:	625a      	str	r2, [r3, #36]	; 0x24
}
   80d1a:	bd80      	pop	{r7, pc}
   80d1c:	40084000 	.word	0x40084000
   80d20:	400e1400 	.word	0x400e1400
   80d24:	50494f00 	.word	0x50494f00
   80d28:	400e1200 	.word	0x400e1200
   80d2c:	20070cd4 	.word	0x20070cd4
   80d30:	20070ca8 	.word	0x20070ca8
   80d34:	20070cb0 	.word	0x20070cb0
   80d38:	20070000 	.word	0x20070000
   80d3c:	20070200 	.word	0x20070200
   80d40:	40080000 	.word	0x40080000
   80d44:	00081775 	.word	0x00081775

00080d48 <TC1_Handler>:
// 	}
// 	TC1->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
// }

void TC1_Handler()
{	
   80d48:	b580      	push	{r7, lr}
   80d4a:	af00      	add	r7, sp, #0
	TC1->TC_CHANNEL[0].TC_IDR = TC_IER_CPCS;
   80d4c:	4b2e      	ldr	r3, [pc, #184]	; (80e08 <TC1_Handler+0xc0>)
   80d4e:	2210      	movs	r2, #16
   80d50:	629a      	str	r2, [r3, #40]	; 0x28
	PIOD->PIO_WPMR	= 0x50494F00;
   80d52:	4b2e      	ldr	r3, [pc, #184]	; (80e0c <TC1_Handler+0xc4>)
   80d54:	4a2e      	ldr	r2, [pc, #184]	; (80e10 <TC1_Handler+0xc8>)
   80d56:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR  = 0x50494F00;
   80d5a:	4b2e      	ldr	r3, [pc, #184]	; (80e14 <TC1_Handler+0xcc>)
   80d5c:	4a2c      	ldr	r2, [pc, #176]	; (80e10 <TC1_Handler+0xc8>)
   80d5e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_OWER  = 0x0000000C;
   80d62:	4b2a      	ldr	r3, [pc, #168]	; (80e0c <TC1_Handler+0xc4>)
   80d64:	220c      	movs	r2, #12
   80d66:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOD->PIO_OWDR  = 0x00000003;
   80d6a:	4b28      	ldr	r3, [pc, #160]	; (80e0c <TC1_Handler+0xc4>)
   80d6c:	2203      	movs	r2, #3
   80d6e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOC->PIO_OWER  = 0x000FF000;
   80d72:	4b28      	ldr	r3, [pc, #160]	; (80e14 <TC1_Handler+0xcc>)
   80d74:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   80d78:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_OWDR  = 0x000001FE;
   80d7c:	4b25      	ldr	r3, [pc, #148]	; (80e14 <TC1_Handler+0xcc>)
   80d7e:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   80d82:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	count1 = count1+1;
   80d86:	4b24      	ldr	r3, [pc, #144]	; (80e18 <TC1_Handler+0xd0>)
   80d88:	681b      	ldr	r3, [r3, #0]
   80d8a:	3301      	adds	r3, #1
   80d8c:	4a22      	ldr	r2, [pc, #136]	; (80e18 <TC1_Handler+0xd0>)
   80d8e:	6013      	str	r3, [r2, #0]
	TC2_cnt++;
   80d90:	4b22      	ldr	r3, [pc, #136]	; (80e1c <TC1_Handler+0xd4>)
   80d92:	681b      	ldr	r3, [r3, #0]
   80d94:	3301      	adds	r3, #1
   80d96:	4a21      	ldr	r2, [pc, #132]	; (80e1c <TC1_Handler+0xd4>)
   80d98:	6013      	str	r3, [r2, #0]
	Cnt_TC1_total++;
   80d9a:	4b21      	ldr	r3, [pc, #132]	; (80e20 <TC1_Handler+0xd8>)
   80d9c:	681b      	ldr	r3, [r3, #0]
   80d9e:	3301      	adds	r3, #1
   80da0:	4a1f      	ldr	r2, [pc, #124]	; (80e20 <TC1_Handler+0xd8>)
   80da2:	6013      	str	r3, [r2, #0]
	if(count1<64)
   80da4:	4b1c      	ldr	r3, [pc, #112]	; (80e18 <TC1_Handler+0xd0>)
   80da6:	681b      	ldr	r3, [r3, #0]
   80da8:	2b3f      	cmp	r3, #63	; 0x3f
   80daa:	d80e      	bhi.n	80dca <TC1_Handler+0x82>
	{
		PIOD->PIO_ODSR = array_bicar[count1].dir;
   80dac:	4a17      	ldr	r2, [pc, #92]	; (80e0c <TC1_Handler+0xc4>)
   80dae:	4b1a      	ldr	r3, [pc, #104]	; (80e18 <TC1_Handler+0xd0>)
   80db0:	681b      	ldr	r3, [r3, #0]
   80db2:	491c      	ldr	r1, [pc, #112]	; (80e24 <TC1_Handler+0xdc>)
   80db4:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80db8:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_bicar[count1].AB;
   80dba:	4a16      	ldr	r2, [pc, #88]	; (80e14 <TC1_Handler+0xcc>)
   80dbc:	4b16      	ldr	r3, [pc, #88]	; (80e18 <TC1_Handler+0xd0>)
   80dbe:	681b      	ldr	r3, [r3, #0]
   80dc0:	4918      	ldr	r1, [pc, #96]	; (80e24 <TC1_Handler+0xdc>)
   80dc2:	00db      	lsls	r3, r3, #3
   80dc4:	440b      	add	r3, r1
   80dc6:	685b      	ldr	r3, [r3, #4]
   80dc8:	6393      	str	r3, [r2, #56]	; 0x38
	}
	if (count1 >=64)
   80dca:	4b13      	ldr	r3, [pc, #76]	; (80e18 <TC1_Handler+0xd0>)
   80dcc:	681b      	ldr	r3, [r3, #0]
   80dce:	2b3f      	cmp	r3, #63	; 0x3f
   80dd0:	d911      	bls.n	80df6 <TC1_Handler+0xae>
	{
		count1 = 0;
   80dd2:	4b11      	ldr	r3, [pc, #68]	; (80e18 <TC1_Handler+0xd0>)
   80dd4:	2200      	movs	r2, #0
   80dd6:	601a      	str	r2, [r3, #0]
		PIOD->PIO_ODSR = array_bicar[count1].dir;
   80dd8:	4a0c      	ldr	r2, [pc, #48]	; (80e0c <TC1_Handler+0xc4>)
   80dda:	4b0f      	ldr	r3, [pc, #60]	; (80e18 <TC1_Handler+0xd0>)
   80ddc:	681b      	ldr	r3, [r3, #0]
   80dde:	4911      	ldr	r1, [pc, #68]	; (80e24 <TC1_Handler+0xdc>)
   80de0:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80de4:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_bicar[count1].AB;
   80de6:	4a0b      	ldr	r2, [pc, #44]	; (80e14 <TC1_Handler+0xcc>)
   80de8:	4b0b      	ldr	r3, [pc, #44]	; (80e18 <TC1_Handler+0xd0>)
   80dea:	681b      	ldr	r3, [r3, #0]
   80dec:	490d      	ldr	r1, [pc, #52]	; (80e24 <TC1_Handler+0xdc>)
   80dee:	00db      	lsls	r3, r3, #3
   80df0:	440b      	add	r3, r1
   80df2:	685b      	ldr	r3, [r3, #4]
   80df4:	6393      	str	r3, [r2, #56]	; 0x38
	}
	if ((tc_get_status(TC0, 1) & TC_SR_CPCS) == TC_SR_CPCS)
   80df6:	480c      	ldr	r0, [pc, #48]	; (80e28 <TC1_Handler+0xe0>)
   80df8:	2101      	movs	r1, #1
   80dfa:	4b0c      	ldr	r3, [pc, #48]	; (80e2c <TC1_Handler+0xe4>)
   80dfc:	4798      	blx	r3
	{
		
		
	}
	TC1->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   80dfe:	4b02      	ldr	r3, [pc, #8]	; (80e08 <TC1_Handler+0xc0>)
   80e00:	2210      	movs	r2, #16
   80e02:	625a      	str	r2, [r3, #36]	; 0x24
}
   80e04:	bd80      	pop	{r7, pc}
   80e06:	bf00      	nop
   80e08:	40084000 	.word	0x40084000
   80e0c:	400e1400 	.word	0x400e1400
   80e10:	50494f00 	.word	0x50494f00
   80e14:	400e1200 	.word	0x400e1200
   80e18:	20070cd8 	.word	0x20070cd8
   80e1c:	20070cac 	.word	0x20070cac
   80e20:	20070cb4 	.word	0x20070cb4
   80e24:	20070200 	.word	0x20070200
   80e28:	40080000 	.word	0x40080000
   80e2c:	00081775 	.word	0x00081775

00080e30 <TC2_Handler>:
void TC2_Handler()
{
   80e30:	b580      	push	{r7, lr}
   80e32:	af00      	add	r7, sp, #0
// 	else
// 	{
// 		i2c_counter = 0;
// 	}
	//printf("reached 2sec\n");
	tc_stop(TC0,0);
   80e34:	4805      	ldr	r0, [pc, #20]	; (80e4c <TC2_Handler+0x1c>)
   80e36:	2100      	movs	r1, #0
   80e38:	4b05      	ldr	r3, [pc, #20]	; (80e50 <TC2_Handler+0x20>)
   80e3a:	4798      	blx	r3
// 	toggle = 1;
// }
// else
{
//	PIOB->PIO_CODR = 1 << 19 ;
	toggle = 0;
   80e3c:	4b05      	ldr	r3, [pc, #20]	; (80e54 <TC2_Handler+0x24>)
   80e3e:	2200      	movs	r2, #0
   80e40:	701a      	strb	r2, [r3, #0]
}

	if ((tc_get_status(TC0, 2) & TC_SR_CPCS) == TC_SR_CPCS)
   80e42:	4802      	ldr	r0, [pc, #8]	; (80e4c <TC2_Handler+0x1c>)
   80e44:	2102      	movs	r1, #2
   80e46:	4b04      	ldr	r3, [pc, #16]	; (80e58 <TC2_Handler+0x28>)
   80e48:	4798      	blx	r3
	{
		
	}
}
   80e4a:	bd80      	pop	{r7, pc}
   80e4c:	40080000 	.word	0x40080000
   80e50:	00081709 	.word	0x00081709
   80e54:	20070ca4 	.word	0x20070ca4
   80e58:	00081775 	.word	0x00081775

00080e5c <TC3_Handler>:
void TC3_Handler()
{
   80e5c:	b580      	push	{r7, lr}
   80e5e:	af00      	add	r7, sp, #0
	OneSecFlag = 1;
   80e60:	4b05      	ldr	r3, [pc, #20]	; (80e78 <TC3_Handler+0x1c>)
   80e62:	2201      	movs	r2, #1
   80e64:	701a      	strb	r2, [r3, #0]
	
	if ((tc_get_status(TC1, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   80e66:	4805      	ldr	r0, [pc, #20]	; (80e7c <TC3_Handler+0x20>)
   80e68:	2100      	movs	r1, #0
   80e6a:	4b05      	ldr	r3, [pc, #20]	; (80e80 <TC3_Handler+0x24>)
   80e6c:	4798      	blx	r3
	{
		
	}
	tc_stop(TC1,0);
   80e6e:	4803      	ldr	r0, [pc, #12]	; (80e7c <TC3_Handler+0x20>)
   80e70:	2100      	movs	r1, #0
   80e72:	4b04      	ldr	r3, [pc, #16]	; (80e84 <TC3_Handler+0x28>)
   80e74:	4798      	blx	r3
}
   80e76:	bd80      	pop	{r7, pc}
   80e78:	20070cb8 	.word	0x20070cb8
   80e7c:	40084000 	.word	0x40084000
   80e80:	00081775 	.word	0x00081775
   80e84:	00081709 	.word	0x00081709

00080e88 <TC7_Handler>:

void TC7_Handler(){
   80e88:	b580      	push	{r7, lr}
   80e8a:	af00      	add	r7, sp, #0
	
	OneSecFlag = 1;
   80e8c:	4b05      	ldr	r3, [pc, #20]	; (80ea4 <TC7_Handler+0x1c>)
   80e8e:	2201      	movs	r2, #1
   80e90:	701a      	strb	r2, [r3, #0]
	
	if ((tc_get_status(TC2, 1) & TC_SR_CPCS) == TC_SR_CPCS)
   80e92:	4805      	ldr	r0, [pc, #20]	; (80ea8 <TC7_Handler+0x20>)
   80e94:	2101      	movs	r1, #1
   80e96:	4b05      	ldr	r3, [pc, #20]	; (80eac <TC7_Handler+0x24>)
   80e98:	4798      	blx	r3
	{
		
	}
	tc_stop(TC2,1);
   80e9a:	4803      	ldr	r0, [pc, #12]	; (80ea8 <TC7_Handler+0x20>)
   80e9c:	2101      	movs	r1, #1
   80e9e:	4b04      	ldr	r3, [pc, #16]	; (80eb0 <TC7_Handler+0x28>)
   80ea0:	4798      	blx	r3
	
}
   80ea2:	bd80      	pop	{r7, pc}
   80ea4:	20070cb8 	.word	0x20070cb8
   80ea8:	40088000 	.word	0x40088000
   80eac:	00081775 	.word	0x00081775
   80eb0:	00081709 	.word	0x00081709

00080eb4 <TC6_Handler>:

void TC6_Handler()
{
   80eb4:	b580      	push	{r7, lr}
   80eb6:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TC6_IRQn);
   80eb8:	2021      	movs	r0, #33	; 0x21
   80eba:	4b29      	ldr	r3, [pc, #164]	; (80f60 <TC6_Handler+0xac>)
   80ebc:	4798      	blx	r3
	tick++;
   80ebe:	4b29      	ldr	r3, [pc, #164]	; (80f64 <TC6_Handler+0xb0>)
   80ec0:	681b      	ldr	r3, [r3, #0]
   80ec2:	3301      	adds	r3, #1
   80ec4:	4a27      	ldr	r2, [pc, #156]	; (80f64 <TC6_Handler+0xb0>)
   80ec6:	6013      	str	r3, [r2, #0]
	if (tick == 10)
   80ec8:	4b26      	ldr	r3, [pc, #152]	; (80f64 <TC6_Handler+0xb0>)
   80eca:	681b      	ldr	r3, [r3, #0]
   80ecc:	2b0a      	cmp	r3, #10
   80ece:	d10a      	bne.n	80ee6 <TC6_Handler+0x32>
	{
		tick_10++;
   80ed0:	4b25      	ldr	r3, [pc, #148]	; (80f68 <TC6_Handler+0xb4>)
   80ed2:	681b      	ldr	r3, [r3, #0]
   80ed4:	3301      	adds	r3, #1
   80ed6:	4a24      	ldr	r2, [pc, #144]	; (80f68 <TC6_Handler+0xb4>)
   80ed8:	6013      	str	r3, [r2, #0]
		tick = 0;
   80eda:	4b22      	ldr	r3, [pc, #136]	; (80f64 <TC6_Handler+0xb0>)
   80edc:	2200      	movs	r2, #0
   80ede:	601a      	str	r2, [r3, #0]
		time_tick = TICK_10MS;
   80ee0:	4b22      	ldr	r3, [pc, #136]	; (80f6c <TC6_Handler+0xb8>)
   80ee2:	2200      	movs	r2, #0
   80ee4:	601a      	str	r2, [r3, #0]
	}
	if (tick_10 == 5)
   80ee6:	4b20      	ldr	r3, [pc, #128]	; (80f68 <TC6_Handler+0xb4>)
   80ee8:	681b      	ldr	r3, [r3, #0]
   80eea:	2b05      	cmp	r3, #5
   80eec:	d10a      	bne.n	80f04 <TC6_Handler+0x50>
	{
		tick_50++;
   80eee:	4b20      	ldr	r3, [pc, #128]	; (80f70 <TC6_Handler+0xbc>)
   80ef0:	681b      	ldr	r3, [r3, #0]
   80ef2:	3301      	adds	r3, #1
   80ef4:	4a1e      	ldr	r2, [pc, #120]	; (80f70 <TC6_Handler+0xbc>)
   80ef6:	6013      	str	r3, [r2, #0]
		tick_10 = 0;
   80ef8:	4b1b      	ldr	r3, [pc, #108]	; (80f68 <TC6_Handler+0xb4>)
   80efa:	2200      	movs	r2, #0
   80efc:	601a      	str	r2, [r3, #0]
		time_tick = TICK_50MS;
   80efe:	4b1b      	ldr	r3, [pc, #108]	; (80f6c <TC6_Handler+0xb8>)
   80f00:	2201      	movs	r2, #1
   80f02:	601a      	str	r2, [r3, #0]
	}
	if (tick_50 == 2)
   80f04:	4b1a      	ldr	r3, [pc, #104]	; (80f70 <TC6_Handler+0xbc>)
   80f06:	681b      	ldr	r3, [r3, #0]
   80f08:	2b02      	cmp	r3, #2
   80f0a:	d10a      	bne.n	80f22 <TC6_Handler+0x6e>
	{
		tick_100++;
   80f0c:	4b19      	ldr	r3, [pc, #100]	; (80f74 <TC6_Handler+0xc0>)
   80f0e:	681b      	ldr	r3, [r3, #0]
   80f10:	3301      	adds	r3, #1
   80f12:	4a18      	ldr	r2, [pc, #96]	; (80f74 <TC6_Handler+0xc0>)
   80f14:	6013      	str	r3, [r2, #0]
		tick_50 = 0;
   80f16:	4b16      	ldr	r3, [pc, #88]	; (80f70 <TC6_Handler+0xbc>)
   80f18:	2200      	movs	r2, #0
   80f1a:	601a      	str	r2, [r3, #0]
		time_tick = TICK_100MS;
   80f1c:	4b13      	ldr	r3, [pc, #76]	; (80f6c <TC6_Handler+0xb8>)
   80f1e:	2202      	movs	r2, #2
   80f20:	601a      	str	r2, [r3, #0]
	}
	if (tick_100 == 5)
   80f22:	4b14      	ldr	r3, [pc, #80]	; (80f74 <TC6_Handler+0xc0>)
   80f24:	681b      	ldr	r3, [r3, #0]
   80f26:	2b05      	cmp	r3, #5
   80f28:	d10a      	bne.n	80f40 <TC6_Handler+0x8c>
	{
		tick_500++;
   80f2a:	4b13      	ldr	r3, [pc, #76]	; (80f78 <TC6_Handler+0xc4>)
   80f2c:	681b      	ldr	r3, [r3, #0]
   80f2e:	3301      	adds	r3, #1
   80f30:	4a11      	ldr	r2, [pc, #68]	; (80f78 <TC6_Handler+0xc4>)
   80f32:	6013      	str	r3, [r2, #0]
		tick_100 = 0;
   80f34:	4b0f      	ldr	r3, [pc, #60]	; (80f74 <TC6_Handler+0xc0>)
   80f36:	2200      	movs	r2, #0
   80f38:	601a      	str	r2, [r3, #0]
		time_tick = TICK_500MS;
   80f3a:	4b0c      	ldr	r3, [pc, #48]	; (80f6c <TC6_Handler+0xb8>)
   80f3c:	2203      	movs	r2, #3
   80f3e:	601a      	str	r2, [r3, #0]
	}
	if (tick_500 == 2)
   80f40:	4b0d      	ldr	r3, [pc, #52]	; (80f78 <TC6_Handler+0xc4>)
   80f42:	681b      	ldr	r3, [r3, #0]
   80f44:	2b02      	cmp	r3, #2
   80f46:	d105      	bne.n	80f54 <TC6_Handler+0xa0>
	{
		tick_500 = 0;
   80f48:	4b0b      	ldr	r3, [pc, #44]	; (80f78 <TC6_Handler+0xc4>)
   80f4a:	2200      	movs	r2, #0
   80f4c:	601a      	str	r2, [r3, #0]
		time_tick = TICK_SEC;
   80f4e:	4b07      	ldr	r3, [pc, #28]	; (80f6c <TC6_Handler+0xb8>)
   80f50:	2204      	movs	r2, #4
   80f52:	601a      	str	r2, [r3, #0]
		//printf("1sec\n");
	}
	
	if ((tc_get_status(TC2, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   80f54:	4809      	ldr	r0, [pc, #36]	; (80f7c <TC6_Handler+0xc8>)
   80f56:	2100      	movs	r1, #0
   80f58:	4b09      	ldr	r3, [pc, #36]	; (80f80 <TC6_Handler+0xcc>)
   80f5a:	4798      	blx	r3
	{
		//printf("i m in handler tc6\n");
	}
   80f5c:	bd80      	pop	{r7, pc}
   80f5e:	bf00      	nop
   80f60:	00080ba5 	.word	0x00080ba5
   80f64:	20070cbc 	.word	0x20070cbc
   80f68:	20070cc0 	.word	0x20070cc0
   80f6c:	200711f0 	.word	0x200711f0
   80f70:	20070cc4 	.word	0x20070cc4
   80f74:	20070cc8 	.word	0x20070cc8
   80f78:	20070ccc 	.word	0x20070ccc
   80f7c:	40088000 	.word	0x40088000
   80f80:	00081775 	.word	0x00081775

00080f84 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80f84:	b480      	push	{r7}
   80f86:	b083      	sub	sp, #12
   80f88:	af00      	add	r7, sp, #0
   80f8a:	4603      	mov	r3, r0
   80f8c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80f8e:	4908      	ldr	r1, [pc, #32]	; (80fb0 <NVIC_EnableIRQ+0x2c>)
   80f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80f94:	095b      	lsrs	r3, r3, #5
   80f96:	79fa      	ldrb	r2, [r7, #7]
   80f98:	f002 021f 	and.w	r2, r2, #31
   80f9c:	2001      	movs	r0, #1
   80f9e:	fa00 f202 	lsl.w	r2, r0, r2
   80fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80fa6:	370c      	adds	r7, #12
   80fa8:	46bd      	mov	sp, r7
   80faa:	f85d 7b04 	ldr.w	r7, [sp], #4
   80fae:	4770      	bx	lr
   80fb0:	e000e100 	.word	0xe000e100

00080fb4 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   80fb4:	b480      	push	{r7}
   80fb6:	b083      	sub	sp, #12
   80fb8:	af00      	add	r7, sp, #0
   80fba:	4603      	mov	r3, r0
   80fbc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   80fbe:	4909      	ldr	r1, [pc, #36]	; (80fe4 <NVIC_DisableIRQ+0x30>)
   80fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80fc4:	095b      	lsrs	r3, r3, #5
   80fc6:	79fa      	ldrb	r2, [r7, #7]
   80fc8:	f002 021f 	and.w	r2, r2, #31
   80fcc:	2001      	movs	r0, #1
   80fce:	fa00 f202 	lsl.w	r2, r0, r2
   80fd2:	3320      	adds	r3, #32
   80fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80fd8:	370c      	adds	r7, #12
   80fda:	46bd      	mov	sp, r7
   80fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
   80fe0:	4770      	bx	lr
   80fe2:	bf00      	nop
   80fe4:	e000e100 	.word	0xe000e100

00080fe8 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   80fe8:	b480      	push	{r7}
   80fea:	b083      	sub	sp, #12
   80fec:	af00      	add	r7, sp, #0
   80fee:	4603      	mov	r3, r0
   80ff0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   80ff2:	4909      	ldr	r1, [pc, #36]	; (81018 <NVIC_ClearPendingIRQ+0x30>)
   80ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80ff8:	095b      	lsrs	r3, r3, #5
   80ffa:	79fa      	ldrb	r2, [r7, #7]
   80ffc:	f002 021f 	and.w	r2, r2, #31
   81000:	2001      	movs	r0, #1
   81002:	fa00 f202 	lsl.w	r2, r0, r2
   81006:	3360      	adds	r3, #96	; 0x60
   81008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   8100c:	370c      	adds	r7, #12
   8100e:	46bd      	mov	sp, r7
   81010:	f85d 7b04 	ldr.w	r7, [sp], #4
   81014:	4770      	bx	lr
   81016:	bf00      	nop
   81018:	e000e100 	.word	0xe000e100

0008101c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   8101c:	b480      	push	{r7}
   8101e:	b083      	sub	sp, #12
   81020:	af00      	add	r7, sp, #0
   81022:	4603      	mov	r3, r0
   81024:	6039      	str	r1, [r7, #0]
   81026:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   81028:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8102c:	2b00      	cmp	r3, #0
   8102e:	da0b      	bge.n	81048 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   81030:	490d      	ldr	r1, [pc, #52]	; (81068 <NVIC_SetPriority+0x4c>)
   81032:	79fb      	ldrb	r3, [r7, #7]
   81034:	f003 030f 	and.w	r3, r3, #15
   81038:	3b04      	subs	r3, #4
   8103a:	683a      	ldr	r2, [r7, #0]
   8103c:	b2d2      	uxtb	r2, r2
   8103e:	0112      	lsls	r2, r2, #4
   81040:	b2d2      	uxtb	r2, r2
   81042:	440b      	add	r3, r1
   81044:	761a      	strb	r2, [r3, #24]
   81046:	e009      	b.n	8105c <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81048:	4908      	ldr	r1, [pc, #32]	; (8106c <NVIC_SetPriority+0x50>)
   8104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8104e:	683a      	ldr	r2, [r7, #0]
   81050:	b2d2      	uxtb	r2, r2
   81052:	0112      	lsls	r2, r2, #4
   81054:	b2d2      	uxtb	r2, r2
   81056:	440b      	add	r3, r1
   81058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   8105c:	370c      	adds	r7, #12
   8105e:	46bd      	mov	sp, r7
   81060:	f85d 7b04 	ldr.w	r7, [sp], #4
   81064:	4770      	bx	lr
   81066:	bf00      	nop
   81068:	e000ed00 	.word	0xe000ed00
   8106c:	e000e100 	.word	0xe000e100

00081070 <CPU3_D_INIT_INT>:
#include "D_INT.h"

#define BOARD_TWI_IRQn          TWI0_IRQn

void CPU3_D_INIT_INT()
{
   81070:	b580      	push	{r7, lr}
   81072:	af00      	add	r7, sp, #0
	
	NVIC_DisableIRQ(BOARD_TWI_IRQn);
   81074:	2016      	movs	r0, #22
   81076:	4b31      	ldr	r3, [pc, #196]	; (8113c <CPU3_D_INIT_INT+0xcc>)
   81078:	4798      	blx	r3
	NVIC_ClearPendingIRQ(BOARD_TWI_IRQn);
   8107a:	2016      	movs	r0, #22
   8107c:	4b30      	ldr	r3, [pc, #192]	; (81140 <CPU3_D_INIT_INT+0xd0>)
   8107e:	4798      	blx	r3
	NVIC_SetPriority(BOARD_TWI_IRQn, 0);
   81080:	2016      	movs	r0, #22
   81082:	2100      	movs	r1, #0
   81084:	4b2f      	ldr	r3, [pc, #188]	; (81144 <CPU3_D_INIT_INT+0xd4>)
   81086:	4798      	blx	r3
	NVIC_EnableIRQ(BOARD_TWI_IRQn);
   81088:	2016      	movs	r0, #22
   8108a:	4b2f      	ldr	r3, [pc, #188]	; (81148 <CPU3_D_INIT_INT+0xd8>)
   8108c:	4798      	blx	r3
	
	NVIC_DisableIRQ(UART_IRQn);
   8108e:	2008      	movs	r0, #8
   81090:	4b2a      	ldr	r3, [pc, #168]	; (8113c <CPU3_D_INIT_INT+0xcc>)
   81092:	4798      	blx	r3
	NVIC_ClearPendingIRQ(UART_IRQn);
   81094:	2008      	movs	r0, #8
   81096:	4b2a      	ldr	r3, [pc, #168]	; (81140 <CPU3_D_INIT_INT+0xd0>)
   81098:	4798      	blx	r3
	NVIC_SetPriority(UART_IRQn,0);
   8109a:	2008      	movs	r0, #8
   8109c:	2100      	movs	r1, #0
   8109e:	4b29      	ldr	r3, [pc, #164]	; (81144 <CPU3_D_INIT_INT+0xd4>)
   810a0:	4798      	blx	r3
	NVIC_EnableIRQ(UART_IRQn);
   810a2:	2008      	movs	r0, #8
   810a4:	4b28      	ldr	r3, [pc, #160]	; (81148 <CPU3_D_INIT_INT+0xd8>)
   810a6:	4798      	blx	r3
	uart_enable_interrupt(UART,UART_SR_RXRDY);
   810a8:	4828      	ldr	r0, [pc, #160]	; (8114c <CPU3_D_INIT_INT+0xdc>)
   810aa:	2101      	movs	r1, #1
   810ac:	4b28      	ldr	r3, [pc, #160]	; (81150 <CPU3_D_INIT_INT+0xe0>)
   810ae:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC0_IRQn);
   810b0:	201b      	movs	r0, #27
   810b2:	4b22      	ldr	r3, [pc, #136]	; (8113c <CPU3_D_INIT_INT+0xcc>)
   810b4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC0_IRQn);
   810b6:	201b      	movs	r0, #27
   810b8:	4b21      	ldr	r3, [pc, #132]	; (81140 <CPU3_D_INIT_INT+0xd0>)
   810ba:	4798      	blx	r3
	NVIC_SetPriority(TC0_IRQn,0);
   810bc:	201b      	movs	r0, #27
   810be:	2100      	movs	r1, #0
   810c0:	4b20      	ldr	r3, [pc, #128]	; (81144 <CPU3_D_INIT_INT+0xd4>)
   810c2:	4798      	blx	r3
	NVIC_EnableIRQ(TC0_IRQn);
   810c4:	201b      	movs	r0, #27
   810c6:	4b20      	ldr	r3, [pc, #128]	; (81148 <CPU3_D_INIT_INT+0xd8>)
   810c8:	4798      	blx	r3

	NVIC_DisableIRQ(TC1_IRQn);
   810ca:	201c      	movs	r0, #28
   810cc:	4b1b      	ldr	r3, [pc, #108]	; (8113c <CPU3_D_INIT_INT+0xcc>)
   810ce:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC1_IRQn);
   810d0:	201c      	movs	r0, #28
   810d2:	4b1b      	ldr	r3, [pc, #108]	; (81140 <CPU3_D_INIT_INT+0xd0>)
   810d4:	4798      	blx	r3
	NVIC_SetPriority(TC1_IRQn,0);
   810d6:	201c      	movs	r0, #28
   810d8:	2100      	movs	r1, #0
   810da:	4b1a      	ldr	r3, [pc, #104]	; (81144 <CPU3_D_INIT_INT+0xd4>)
   810dc:	4798      	blx	r3
	NVIC_EnableIRQ(TC1_IRQn);
   810de:	201c      	movs	r0, #28
   810e0:	4b19      	ldr	r3, [pc, #100]	; (81148 <CPU3_D_INIT_INT+0xd8>)
   810e2:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC2_IRQn);
   810e4:	201d      	movs	r0, #29
   810e6:	4b15      	ldr	r3, [pc, #84]	; (8113c <CPU3_D_INIT_INT+0xcc>)
   810e8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC2_IRQn);
   810ea:	201d      	movs	r0, #29
   810ec:	4b14      	ldr	r3, [pc, #80]	; (81140 <CPU3_D_INIT_INT+0xd0>)
   810ee:	4798      	blx	r3
	NVIC_SetPriority(TC2_IRQn,0);
   810f0:	201d      	movs	r0, #29
   810f2:	2100      	movs	r1, #0
   810f4:	4b13      	ldr	r3, [pc, #76]	; (81144 <CPU3_D_INIT_INT+0xd4>)
   810f6:	4798      	blx	r3
	NVIC_EnableIRQ(TC2_IRQn);
   810f8:	201d      	movs	r0, #29
   810fa:	4b13      	ldr	r3, [pc, #76]	; (81148 <CPU3_D_INIT_INT+0xd8>)
   810fc:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC3_IRQn);
   810fe:	201e      	movs	r0, #30
   81100:	4b0e      	ldr	r3, [pc, #56]	; (8113c <CPU3_D_INIT_INT+0xcc>)
   81102:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC3_IRQn);
   81104:	201e      	movs	r0, #30
   81106:	4b0e      	ldr	r3, [pc, #56]	; (81140 <CPU3_D_INIT_INT+0xd0>)
   81108:	4798      	blx	r3
	NVIC_SetPriority(TC3_IRQn,0);
   8110a:	201e      	movs	r0, #30
   8110c:	2100      	movs	r1, #0
   8110e:	4b0d      	ldr	r3, [pc, #52]	; (81144 <CPU3_D_INIT_INT+0xd4>)
   81110:	4798      	blx	r3
	NVIC_EnableIRQ(TC3_IRQn);
   81112:	201e      	movs	r0, #30
   81114:	4b0c      	ldr	r3, [pc, #48]	; (81148 <CPU3_D_INIT_INT+0xd8>)
   81116:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC6_IRQn);
   81118:	2021      	movs	r0, #33	; 0x21
   8111a:	4b08      	ldr	r3, [pc, #32]	; (8113c <CPU3_D_INIT_INT+0xcc>)
   8111c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC6_IRQn);
   8111e:	2021      	movs	r0, #33	; 0x21
   81120:	4b07      	ldr	r3, [pc, #28]	; (81140 <CPU3_D_INIT_INT+0xd0>)
   81122:	4798      	blx	r3
	NVIC_SetPriority(TC6_IRQn,0);
   81124:	2021      	movs	r0, #33	; 0x21
   81126:	2100      	movs	r1, #0
   81128:	4b06      	ldr	r3, [pc, #24]	; (81144 <CPU3_D_INIT_INT+0xd4>)
   8112a:	4798      	blx	r3
	NVIC_EnableIRQ(TC6_IRQn);
   8112c:	2021      	movs	r0, #33	; 0x21
   8112e:	4b06      	ldr	r3, [pc, #24]	; (81148 <CPU3_D_INIT_INT+0xd8>)
   81130:	4798      	blx	r3
	
	NVIC_EnableIRQ(CAN0_IRQn);
   81132:	202b      	movs	r0, #43	; 0x2b
   81134:	4b04      	ldr	r3, [pc, #16]	; (81148 <CPU3_D_INIT_INT+0xd8>)
   81136:	4798      	blx	r3
	
	
   81138:	bd80      	pop	{r7, pc}
   8113a:	bf00      	nop
   8113c:	00080fb5 	.word	0x00080fb5
   81140:	00080fe9 	.word	0x00080fe9
   81144:	0008101d 	.word	0x0008101d
   81148:	00080f85 	.word	0x00080f85
   8114c:	400e0800 	.word	0x400e0800
   81150:	00081845 	.word	0x00081845

00081154 <CPU3_D_INIT_PWM>:
 */ 

#include "D_PWM.h"

void CPU3_D_INIT_PWM()
{
   81154:	b480      	push	{r7}
   81156:	af00      	add	r7, sp, #0
	PWM->PWM_WPCR = 0x50574D00;
   81158:	4b14      	ldr	r3, [pc, #80]	; (811ac <CPU3_D_INIT_PWM+0x58>)
   8115a:	4a15      	ldr	r2, [pc, #84]	; (811b0 <CPU3_D_INIT_PWM+0x5c>)
   8115c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	PWM->PWM_CH_NUM[4].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   81160:	4b12      	ldr	r3, [pc, #72]	; (811ac <CPU3_D_INIT_PWM+0x58>)
   81162:	4a14      	ldr	r2, [pc, #80]	; (811b4 <CPU3_D_INIT_PWM+0x60>)
   81164:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	PWM->PWM_CH_NUM[5].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   81168:	4b10      	ldr	r3, [pc, #64]	; (811ac <CPU3_D_INIT_PWM+0x58>)
   8116a:	4a12      	ldr	r2, [pc, #72]	; (811b4 <CPU3_D_INIT_PWM+0x60>)
   8116c:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0

	PWM->PWM_DIS = 0x000000FF;
   81170:	4b0e      	ldr	r3, [pc, #56]	; (811ac <CPU3_D_INIT_PWM+0x58>)
   81172:	22ff      	movs	r2, #255	; 0xff
   81174:	609a      	str	r2, [r3, #8]
	
	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x00000A41;
   81176:	4b0d      	ldr	r3, [pc, #52]	; (811ac <CPU3_D_INIT_PWM+0x58>)
   81178:	f640 2241 	movw	r2, #2625	; 0xa41
   8117c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x00000700;
   81180:	4b0a      	ldr	r3, [pc, #40]	; (811ac <CPU3_D_INIT_PWM+0x58>)
   81182:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   81186:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
	
	PWM->PWM_CH_NUM[5].PWM_CPRD = 0x00000A41;
   8118a:	4b08      	ldr	r3, [pc, #32]	; (811ac <CPU3_D_INIT_PWM+0x58>)
   8118c:	f640 2241 	movw	r2, #2625	; 0xa41
   81190:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY = 0x00000700;
   81194:	4b05      	ldr	r3, [pc, #20]	; (811ac <CPU3_D_INIT_PWM+0x58>)
   81196:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   8119a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	PWM->PWM_ENA = 0x000000FF;
   8119e:	4b03      	ldr	r3, [pc, #12]	; (811ac <CPU3_D_INIT_PWM+0x58>)
   811a0:	22ff      	movs	r2, #255	; 0xff
   811a2:	605a      	str	r2, [r3, #4]
}
   811a4:	46bd      	mov	sp, r7
   811a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   811aa:	4770      	bx	lr
   811ac:	40094000 	.word	0x40094000
   811b0:	50574d00 	.word	0x50574d00
   811b4:	00070605 	.word	0x00070605

000811b8 <CPU3_D_INIT_TIMER>:


extern uint32_t ra,rc;

void CPU3_D_INIT_TIMER()
{
   811b8:	b580      	push	{r7, lr}
   811ba:	af00      	add	r7, sp, #0
	TC0->TC_WPMR = 0x54494D00;
   811bc:	4b21      	ldr	r3, [pc, #132]	; (81244 <CPU3_D_INIT_TIMER+0x8c>)
   811be:	4a22      	ldr	r2, [pc, #136]	; (81248 <CPU3_D_INIT_TIMER+0x90>)
   811c0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC1->TC_WPMR = 0x54494D00;
   811c4:	4b21      	ldr	r3, [pc, #132]	; (8124c <CPU3_D_INIT_TIMER+0x94>)
   811c6:	4a20      	ldr	r2, [pc, #128]	; (81248 <CPU3_D_INIT_TIMER+0x90>)
   811c8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC2->TC_WPMR = 0x54494D00;
   811cc:	4b20      	ldr	r3, [pc, #128]	; (81250 <CPU3_D_INIT_TIMER+0x98>)
   811ce:	4a1e      	ldr	r2, [pc, #120]	; (81248 <CPU3_D_INIT_TIMER+0x90>)
   811d0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	pmc_enable_periph_clk(ID_TC0);
   811d4:	201b      	movs	r0, #27
   811d6:	4b1f      	ldr	r3, [pc, #124]	; (81254 <CPU3_D_INIT_TIMER+0x9c>)
   811d8:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC1);
   811da:	201c      	movs	r0, #28
   811dc:	4b1d      	ldr	r3, [pc, #116]	; (81254 <CPU3_D_INIT_TIMER+0x9c>)
   811de:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC3);
   811e0:	201e      	movs	r0, #30
   811e2:	4b1c      	ldr	r3, [pc, #112]	; (81254 <CPU3_D_INIT_TIMER+0x9c>)
   811e4:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC7);
   811e6:	2022      	movs	r0, #34	; 0x22
   811e8:	4b1a      	ldr	r3, [pc, #104]	; (81254 <CPU3_D_INIT_TIMER+0x9c>)
   811ea:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC6);
   811ec:	2021      	movs	r0, #33	; 0x21
   811ee:	4b19      	ldr	r3, [pc, #100]	; (81254 <CPU3_D_INIT_TIMER+0x9c>)
   811f0:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   811f2:	4b14      	ldr	r3, [pc, #80]	; (81244 <CPU3_D_INIT_TIMER+0x8c>)
   811f4:	f24c 0203 	movw	r2, #49155	; 0xc003
   811f8:	605a      	str	r2, [r3, #4]
	TC0->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   811fa:	4b12      	ldr	r3, [pc, #72]	; (81244 <CPU3_D_INIT_TIMER+0x8c>)
   811fc:	f24c 0203 	movw	r2, #49155	; 0xc003
   81200:	645a      	str	r2, [r3, #68]	; 0x44
	
	TC1->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81202:	4b12      	ldr	r3, [pc, #72]	; (8124c <CPU3_D_INIT_TIMER+0x94>)
   81204:	f24c 0203 	movw	r2, #49155	; 0xc003
   81208:	605a      	str	r2, [r3, #4]
	TC1->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   8120a:	4b10      	ldr	r3, [pc, #64]	; (8124c <CPU3_D_INIT_TIMER+0x94>)
   8120c:	f24c 0203 	movw	r2, #49155	; 0xc003
   81210:	645a      	str	r2, [r3, #68]	; 0x44
	
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81212:	4b0f      	ldr	r3, [pc, #60]	; (81250 <CPU3_D_INIT_TIMER+0x98>)
   81214:	f24c 0203 	movw	r2, #49155	; 0xc003
   81218:	605a      	str	r2, [r3, #4]
	TC2->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   8121a:	4b0d      	ldr	r3, [pc, #52]	; (81250 <CPU3_D_INIT_TIMER+0x98>)
   8121c:	f24c 0203 	movw	r2, #49155	; 0xc003
   81220:	645a      	str	r2, [r3, #68]	; 0x44
	
	TC0->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   81222:	4b08      	ldr	r3, [pc, #32]	; (81244 <CPU3_D_INIT_TIMER+0x8c>)
   81224:	2210      	movs	r2, #16
   81226:	625a      	str	r2, [r3, #36]	; 0x24
	TC0->TC_CHANNEL[1].TC_IER = TC_IER_CPCS;
   81228:	4b06      	ldr	r3, [pc, #24]	; (81244 <CPU3_D_INIT_TIMER+0x8c>)
   8122a:	2210      	movs	r2, #16
   8122c:	665a      	str	r2, [r3, #100]	; 0x64
	TC1->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   8122e:	4b07      	ldr	r3, [pc, #28]	; (8124c <CPU3_D_INIT_TIMER+0x94>)
   81230:	2210      	movs	r2, #16
   81232:	625a      	str	r2, [r3, #36]	; 0x24
	TC1->TC_CHANNEL[1].TC_IER = TC_IER_CPCS;
   81234:	4b05      	ldr	r3, [pc, #20]	; (8124c <CPU3_D_INIT_TIMER+0x94>)
   81236:	2210      	movs	r2, #16
   81238:	665a      	str	r2, [r3, #100]	; 0x64
	TC2->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   8123a:	4b05      	ldr	r3, [pc, #20]	; (81250 <CPU3_D_INIT_TIMER+0x98>)
   8123c:	2210      	movs	r2, #16
   8123e:	625a      	str	r2, [r3, #36]	; 0x24
//	TC2->TC_CHANNEL[1].TC_IER = TC_IER_CPCS;
}
   81240:	bd80      	pop	{r7, pc}
   81242:	bf00      	nop
   81244:	40080000 	.word	0x40080000
   81248:	54494d00 	.word	0x54494d00
   8124c:	40084000 	.word	0x40084000
   81250:	40088000 	.word	0x40088000
   81254:	000835dd 	.word	0x000835dd

00081258 <CPU3_D_MAIN_TIMER>:


uint8_t CPU3_D_MAIN_TIMER(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t fre)
{
   81258:	b580      	push	{r7, lr}
   8125a:	b084      	sub	sp, #16
   8125c:	af00      	add	r7, sp, #0
   8125e:	60f8      	str	r0, [r7, #12]
   81260:	60b9      	str	r1, [r7, #8]
   81262:	603b      	str	r3, [r7, #0]
   81264:	4613      	mov	r3, r2
   81266:	71fb      	strb	r3, [r7, #7]
	pmc_set_writeprotect(0);
   81268:	2000      	movs	r0, #0
   8126a:	4b0d      	ldr	r3, [pc, #52]	; (812a0 <CPU3_D_MAIN_TIMER+0x48>)
   8126c:	4798      	blx	r3
	channel=0;
   8126e:	2300      	movs	r3, #0
   81270:	60bb      	str	r3, [r7, #8]
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81272:	4b0c      	ldr	r3, [pc, #48]	; (812a4 <CPU3_D_MAIN_TIMER+0x4c>)
   81274:	f24c 0203 	movw	r2, #49155	; 0xc003
   81278:	605a      	str	r2, [r3, #4]
	tc_write_rc(tc, channel,fre);
   8127a:	68f8      	ldr	r0, [r7, #12]
   8127c:	68b9      	ldr	r1, [r7, #8]
   8127e:	683a      	ldr	r2, [r7, #0]
   81280:	4b09      	ldr	r3, [pc, #36]	; (812a8 <CPU3_D_MAIN_TIMER+0x50>)
   81282:	4798      	blx	r3
	tc_start(tc, channel);
   81284:	68f8      	ldr	r0, [r7, #12]
   81286:	68b9      	ldr	r1, [r7, #8]
   81288:	4b08      	ldr	r3, [pc, #32]	; (812ac <CPU3_D_MAIN_TIMER+0x54>)
   8128a:	4798      	blx	r3
	tc_enable_interrupt(tc, channel, TC_IER_CPCS);
   8128c:	68f8      	ldr	r0, [r7, #12]
   8128e:	68b9      	ldr	r1, [r7, #8]
   81290:	2210      	movs	r2, #16
   81292:	4b07      	ldr	r3, [pc, #28]	; (812b0 <CPU3_D_MAIN_TIMER+0x58>)
   81294:	4798      	blx	r3
}
   81296:	4618      	mov	r0, r3
   81298:	3710      	adds	r7, #16
   8129a:	46bd      	mov	sp, r7
   8129c:	bd80      	pop	{r7, pc}
   8129e:	bf00      	nop
   812a0:	00083661 	.word	0x00083661
   812a4:	40088000 	.word	0x40088000
   812a8:	00081729 	.word	0x00081729
   812ac:	000816e9 	.word	0x000816e9
   812b0:	0008174d 	.word	0x0008174d

000812b4 <acid_startTimer1>:

void acid_startTimer1(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t stepcount)
{
   812b4:	b580      	push	{r7, lr}
   812b6:	b084      	sub	sp, #16
   812b8:	af00      	add	r7, sp, #0
   812ba:	60f8      	str	r0, [r7, #12]
   812bc:	60b9      	str	r1, [r7, #8]
   812be:	603b      	str	r3, [r7, #0]
   812c0:	4613      	mov	r3, r2
   812c2:	71fb      	strb	r3, [r7, #7]
	//printf("h\n");
	pmc_set_writeprotect(0);
   812c4:	2000      	movs	r0, #0
   812c6:	4b10      	ldr	r3, [pc, #64]	; (81308 <acid_startTimer1+0x54>)
   812c8:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC0);
   812ca:	201b      	movs	r0, #27
   812cc:	4b0f      	ldr	r3, [pc, #60]	; (8130c <acid_startTimer1+0x58>)
   812ce:	4798      	blx	r3
	//printf("%d\n",stepcount);
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK3);
   812d0:	68f8      	ldr	r0, [r7, #12]
   812d2:	68b9      	ldr	r1, [r7, #8]
   812d4:	f24c 0202 	movw	r2, #49154	; 0xc002
   812d8:	4b0d      	ldr	r3, [pc, #52]	; (81310 <acid_startTimer1+0x5c>)
   812da:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK3;
   812dc:	4b0d      	ldr	r3, [pc, #52]	; (81314 <acid_startTimer1+0x60>)
   812de:	f24c 0202 	movw	r2, #49154	; 0xc002
   812e2:	605a      	str	r2, [r3, #4]
	tc_write_rc(tc, channel, stepcount);
   812e4:	68f8      	ldr	r0, [r7, #12]
   812e6:	68b9      	ldr	r1, [r7, #8]
   812e8:	683a      	ldr	r2, [r7, #0]
   812ea:	4b0b      	ldr	r3, [pc, #44]	; (81318 <acid_startTimer1+0x64>)
   812ec:	4798      	blx	r3
	tc_enable_interrupt(TC0,0,TC_IER_CPCS);
   812ee:	4809      	ldr	r0, [pc, #36]	; (81314 <acid_startTimer1+0x60>)
   812f0:	2100      	movs	r1, #0
   812f2:	2210      	movs	r2, #16
   812f4:	4b09      	ldr	r3, [pc, #36]	; (8131c <acid_startTimer1+0x68>)
   812f6:	4798      	blx	r3
	tc_start(tc, channel);
   812f8:	68f8      	ldr	r0, [r7, #12]
   812fa:	68b9      	ldr	r1, [r7, #8]
   812fc:	4b08      	ldr	r3, [pc, #32]	; (81320 <acid_startTimer1+0x6c>)
   812fe:	4798      	blx	r3
}
   81300:	3710      	adds	r7, #16
   81302:	46bd      	mov	sp, r7
   81304:	bd80      	pop	{r7, pc}
   81306:	bf00      	nop
   81308:	00083661 	.word	0x00083661
   8130c:	000835dd 	.word	0x000835dd
   81310:	000816b1 	.word	0x000816b1
   81314:	40080000 	.word	0x40080000
   81318:	00081729 	.word	0x00081729
   8131c:	0008174d 	.word	0x0008174d
   81320:	000816e9 	.word	0x000816e9

00081324 <bicar_startTimer1>:

void bicar_startTimer1(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t stepcount)
{
   81324:	b580      	push	{r7, lr}
   81326:	b084      	sub	sp, #16
   81328:	af00      	add	r7, sp, #0
   8132a:	60f8      	str	r0, [r7, #12]
   8132c:	60b9      	str	r1, [r7, #8]
   8132e:	603b      	str	r3, [r7, #0]
   81330:	4613      	mov	r3, r2
   81332:	71fb      	strb	r3, [r7, #7]
	pmc_set_writeprotect(0);
   81334:	2000      	movs	r0, #0
   81336:	4b10      	ldr	r3, [pc, #64]	; (81378 <bicar_startTimer1+0x54>)
   81338:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC1);
   8133a:	201c      	movs	r0, #28
   8133c:	4b0f      	ldr	r3, [pc, #60]	; (8137c <bicar_startTimer1+0x58>)
   8133e:	4798      	blx	r3
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK3);
   81340:	68f8      	ldr	r0, [r7, #12]
   81342:	68b9      	ldr	r1, [r7, #8]
   81344:	f24c 0202 	movw	r2, #49154	; 0xc002
   81348:	4b0d      	ldr	r3, [pc, #52]	; (81380 <bicar_startTimer1+0x5c>)
   8134a:	4798      	blx	r3
	TC0->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK3;
   8134c:	4b0d      	ldr	r3, [pc, #52]	; (81384 <bicar_startTimer1+0x60>)
   8134e:	f24c 0202 	movw	r2, #49154	; 0xc002
   81352:	645a      	str	r2, [r3, #68]	; 0x44
	tc_write_rc(tc, channel, stepcount);
   81354:	68f8      	ldr	r0, [r7, #12]
   81356:	68b9      	ldr	r1, [r7, #8]
   81358:	683a      	ldr	r2, [r7, #0]
   8135a:	4b0b      	ldr	r3, [pc, #44]	; (81388 <bicar_startTimer1+0x64>)
   8135c:	4798      	blx	r3
	tc_enable_interrupt(TC0,1,TC_IER_CPCS);
   8135e:	4809      	ldr	r0, [pc, #36]	; (81384 <bicar_startTimer1+0x60>)
   81360:	2101      	movs	r1, #1
   81362:	2210      	movs	r2, #16
   81364:	4b09      	ldr	r3, [pc, #36]	; (8138c <bicar_startTimer1+0x68>)
   81366:	4798      	blx	r3
	tc_start(tc, channel);
   81368:	68f8      	ldr	r0, [r7, #12]
   8136a:	68b9      	ldr	r1, [r7, #8]
   8136c:	4b08      	ldr	r3, [pc, #32]	; (81390 <bicar_startTimer1+0x6c>)
   8136e:	4798      	blx	r3
}
   81370:	3710      	adds	r7, #16
   81372:	46bd      	mov	sp, r7
   81374:	bd80      	pop	{r7, pc}
   81376:	bf00      	nop
   81378:	00083661 	.word	0x00083661
   8137c:	000835dd 	.word	0x000835dd
   81380:	000816b1 	.word	0x000816b1
   81384:	40080000 	.word	0x40080000
   81388:	00081729 	.word	0x00081729
   8138c:	0008174d 	.word	0x0008174d
   81390:	000816e9 	.word	0x000816e9

00081394 <startTimer1>:
// 	tc_enable_interrupt(TC2,1,TC_IER_CPCS);
// 	tc_start(tc, channel);
// }

void startTimer1(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t stepcount)
{
   81394:	b580      	push	{r7, lr}
   81396:	b084      	sub	sp, #16
   81398:	af00      	add	r7, sp, #0
   8139a:	60f8      	str	r0, [r7, #12]
   8139c:	60b9      	str	r1, [r7, #8]
   8139e:	603b      	str	r3, [r7, #0]
   813a0:	4613      	mov	r3, r2
   813a2:	71fb      	strb	r3, [r7, #7]
	//printf("h\n");
	pmc_set_writeprotect(0);
   813a4:	2000      	movs	r0, #0
   813a6:	4b10      	ldr	r3, [pc, #64]	; (813e8 <startTimer1+0x54>)
   813a8:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC2);
   813aa:	201d      	movs	r0, #29
   813ac:	4b0f      	ldr	r3, [pc, #60]	; (813ec <startTimer1+0x58>)
   813ae:	4798      	blx	r3
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4);
   813b0:	68f8      	ldr	r0, [r7, #12]
   813b2:	68b9      	ldr	r1, [r7, #8]
   813b4:	f24c 0203 	movw	r2, #49155	; 0xc003
   813b8:	4b0d      	ldr	r3, [pc, #52]	; (813f0 <startTimer1+0x5c>)
   813ba:	4798      	blx	r3
	TC0->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   813bc:	4b0d      	ldr	r3, [pc, #52]	; (813f4 <startTimer1+0x60>)
   813be:	f24c 0203 	movw	r2, #49155	; 0xc003
   813c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	tc_write_rc(tc, channel, stepcount);
   813c6:	68f8      	ldr	r0, [r7, #12]
   813c8:	68b9      	ldr	r1, [r7, #8]
   813ca:	683a      	ldr	r2, [r7, #0]
   813cc:	4b0a      	ldr	r3, [pc, #40]	; (813f8 <startTimer1+0x64>)
   813ce:	4798      	blx	r3
	tc_enable_interrupt(TC0,2,TC_IER_CPCS);
   813d0:	4808      	ldr	r0, [pc, #32]	; (813f4 <startTimer1+0x60>)
   813d2:	2102      	movs	r1, #2
   813d4:	2210      	movs	r2, #16
   813d6:	4b09      	ldr	r3, [pc, #36]	; (813fc <startTimer1+0x68>)
   813d8:	4798      	blx	r3
	tc_start(tc, channel);
   813da:	68f8      	ldr	r0, [r7, #12]
   813dc:	68b9      	ldr	r1, [r7, #8]
   813de:	4b08      	ldr	r3, [pc, #32]	; (81400 <startTimer1+0x6c>)
   813e0:	4798      	blx	r3
}
   813e2:	3710      	adds	r7, #16
   813e4:	46bd      	mov	sp, r7
   813e6:	bd80      	pop	{r7, pc}
   813e8:	00083661 	.word	0x00083661
   813ec:	000835dd 	.word	0x000835dd
   813f0:	000816b1 	.word	0x000816b1
   813f4:	40080000 	.word	0x40080000
   813f8:	00081729 	.word	0x00081729
   813fc:	0008174d 	.word	0x0008174d
   81400:	000816e9 	.word	0x000816e9

00081404 <startTimer2>:
void startTimer2(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t stepcount)
{
   81404:	b580      	push	{r7, lr}
   81406:	b084      	sub	sp, #16
   81408:	af00      	add	r7, sp, #0
   8140a:	60f8      	str	r0, [r7, #12]
   8140c:	60b9      	str	r1, [r7, #8]
   8140e:	603b      	str	r3, [r7, #0]
   81410:	4613      	mov	r3, r2
   81412:	71fb      	strb	r3, [r7, #7]
	//printf("h\n");
	pmc_set_writeprotect(0);
   81414:	2000      	movs	r0, #0
   81416:	4b10      	ldr	r3, [pc, #64]	; (81458 <startTimer2+0x54>)
   81418:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC3);
   8141a:	201e      	movs	r0, #30
   8141c:	4b0f      	ldr	r3, [pc, #60]	; (8145c <startTimer2+0x58>)
   8141e:	4798      	blx	r3
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4);
   81420:	68f8      	ldr	r0, [r7, #12]
   81422:	68b9      	ldr	r1, [r7, #8]
   81424:	f24c 0203 	movw	r2, #49155	; 0xc003
   81428:	4b0d      	ldr	r3, [pc, #52]	; (81460 <startTimer2+0x5c>)
   8142a:	4798      	blx	r3
	TC1->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   8142c:	4b0d      	ldr	r3, [pc, #52]	; (81464 <startTimer2+0x60>)
   8142e:	f24c 0203 	movw	r2, #49155	; 0xc003
   81432:	605a      	str	r2, [r3, #4]
	tc_write_rc(tc, channel, stepcount);
   81434:	68f8      	ldr	r0, [r7, #12]
   81436:	68b9      	ldr	r1, [r7, #8]
   81438:	683a      	ldr	r2, [r7, #0]
   8143a:	4b0b      	ldr	r3, [pc, #44]	; (81468 <startTimer2+0x64>)
   8143c:	4798      	blx	r3
	tc_enable_interrupt(TC1,0,TC_IER_CPCS);
   8143e:	4809      	ldr	r0, [pc, #36]	; (81464 <startTimer2+0x60>)
   81440:	2100      	movs	r1, #0
   81442:	2210      	movs	r2, #16
   81444:	4b09      	ldr	r3, [pc, #36]	; (8146c <startTimer2+0x68>)
   81446:	4798      	blx	r3
	tc_start(tc, channel);
   81448:	68f8      	ldr	r0, [r7, #12]
   8144a:	68b9      	ldr	r1, [r7, #8]
   8144c:	4b08      	ldr	r3, [pc, #32]	; (81470 <startTimer2+0x6c>)
   8144e:	4798      	blx	r3
}
   81450:	3710      	adds	r7, #16
   81452:	46bd      	mov	sp, r7
   81454:	bd80      	pop	{r7, pc}
   81456:	bf00      	nop
   81458:	00083661 	.word	0x00083661
   8145c:	000835dd 	.word	0x000835dd
   81460:	000816b1 	.word	0x000816b1
   81464:	40084000 	.word	0x40084000
   81468:	00081729 	.word	0x00081729
   8146c:	0008174d 	.word	0x0008174d
   81470:	000816e9 	.word	0x000816e9

00081474 <cpu3_sv_cntrl_activatepump>:

#include "S_CNTRL.h"


uint8_t cpu3_sv_cntrl_activatepump(sv_pumptype sv_pump_id)
{
   81474:	b580      	push	{r7, lr}
   81476:	b082      	sub	sp, #8
   81478:	af00      	add	r7, sp, #0
   8147a:	4603      	mov	r3, r0
   8147c:	71fb      	strb	r3, [r7, #7]
	CPU3_D_SET_PUMP(sv_pump_id);
   8147e:	79fb      	ldrb	r3, [r7, #7]
   81480:	4618      	mov	r0, r3
   81482:	4b03      	ldr	r3, [pc, #12]	; (81490 <cpu3_sv_cntrl_activatepump+0x1c>)
   81484:	4798      	blx	r3
	
	return 0;
   81486:	2300      	movs	r3, #0
}
   81488:	4618      	mov	r0, r3
   8148a:	3708      	adds	r7, #8
   8148c:	46bd      	mov	sp, r7
   8148e:	bd80      	pop	{r7, pc}
   81490:	000808cd 	.word	0x000808cd

00081494 <SV_put_sensor_data>:
// 	
// 	return 0;
// 
// }

bool SV_put_sensor_data(Sys_statusType* sensor_struct)   {
   81494:	b580      	push	{r7, lr}
   81496:	b084      	sub	sp, #16
   81498:	af00      	add	r7, sp, #0
   8149a:	6078      	str	r0, [r7, #4]
	
	DD_CAN_MAILBOX_SENSOR_DATA_REG_TYPE  SV_CAN_MAILBOX_SENSOR_DATA_REG;
	
	
	SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = PROPORTIONING_CPU_id;
   8149c:	2302      	movs	r3, #2
   8149e:	723b      	strb	r3, [r7, #8]
	SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = GROUP_ID_8 ;
   814a0:	2308      	movs	r3, #8
   814a2:	727b      	strb	r3, [r7, #9]
	SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   = acid_f_b;
   814a4:	4b08      	ldr	r3, [pc, #32]	; (814c8 <SV_put_sensor_data+0x34>)
   814a6:	881b      	ldrh	r3, [r3, #0]
   814a8:	817b      	strh	r3, [r7, #10]
	SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  = bicarb_f_b;
   814aa:	4b08      	ldr	r3, [pc, #32]	; (814cc <SV_put_sensor_data+0x38>)
   814ac:	881b      	ldrh	r3, [r3, #0]
   814ae:	81bb      	strh	r3, [r7, #12]
	SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = 0;
   814b0:	2300      	movs	r3, #0
   814b2:	81fb      	strh	r3, [r7, #14]
	SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG);
   814b4:	f107 0308 	add.w	r3, r7, #8
   814b8:	4618      	mov	r0, r3
   814ba:	4b05      	ldr	r3, [pc, #20]	; (814d0 <SV_put_sensor_data+0x3c>)
   814bc:	4798      	blx	r3
	
	return ;
   814be:	bf00      	nop
}
   814c0:	4618      	mov	r0, r3
   814c2:	3710      	adds	r7, #16
   814c4:	46bd      	mov	sp, r7
   814c6:	bd80      	pop	{r7, pc}
   814c8:	200711f8 	.word	0x200711f8
   814cc:	200711fa 	.word	0x200711fa
   814d0:	000814d5 	.word	0x000814d5

000814d4 <SV_SEND_CAN_MAILBOX>:


void SV_SEND_CAN_MAILBOX(DD_CAN_MAILBOX_SENSOR_DATA_REG_TYPE*  SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE)   {
   814d4:	b580      	push	{r7, lr}
   814d6:	b084      	sub	sp, #16
   814d8:	af00      	add	r7, sp, #0
   814da:	6078      	str	r0, [r7, #4]
	sv_data_size_type  sv_data_size;
	sv_data_size.bytearray[0]                                =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->CPU_SENDER_type_reg;
   814dc:	687b      	ldr	r3, [r7, #4]
   814de:	781b      	ldrb	r3, [r3, #0]
   814e0:	723b      	strb	r3, [r7, #8]
	sv_data_size.bytearray[1]                                =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_GROUP_ID_type_reg;
   814e2:	687b      	ldr	r3, [r7, #4]
   814e4:	785b      	ldrb	r3, [r3, #1]
   814e6:	727b      	strb	r3, [r7, #9]
	
	sv_data_size.Twobyte[1]                                  =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_1;
   814e8:	687b      	ldr	r3, [r7, #4]
   814ea:	885b      	ldrh	r3, [r3, #2]
   814ec:	817b      	strh	r3, [r7, #10]
	sv_data_size.Twobyte[2]                                  =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_2;
   814ee:	687b      	ldr	r3, [r7, #4]
   814f0:	889b      	ldrh	r3, [r3, #4]
   814f2:	81bb      	strh	r3, [r7, #12]
	sv_data_size.Twobyte[3]                                  =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_3;
   814f4:	687b      	ldr	r3, [r7, #4]
   814f6:	88db      	ldrh	r3, [r3, #6]
   814f8:	81fb      	strh	r3, [r7, #14]
	
	can0_mailbox.ul_datal                                    =sv_data_size.fourbyte[0];
   814fa:	68bb      	ldr	r3, [r7, #8]
   814fc:	4a14      	ldr	r2, [pc, #80]	; (81550 <SV_SEND_CAN_MAILBOX+0x7c>)
   814fe:	6193      	str	r3, [r2, #24]
	can0_mailbox.ul_datah                                    =sv_data_size.fourbyte[1];
   81500:	68fb      	ldr	r3, [r7, #12]
   81502:	4a13      	ldr	r2, [pc, #76]	; (81550 <SV_SEND_CAN_MAILBOX+0x7c>)
   81504:	61d3      	str	r3, [r2, #28]
	can0_mailbox.uc_length                                  = 8;
   81506:	4b12      	ldr	r3, [pc, #72]	; (81550 <SV_SEND_CAN_MAILBOX+0x7c>)
   81508:	2208      	movs	r2, #8
   8150a:	719a      	strb	r2, [r3, #6]
	can0_mailbox.ul_mb_idx =   MAILBOX_0;
   8150c:	4b10      	ldr	r3, [pc, #64]	; (81550 <SV_SEND_CAN_MAILBOX+0x7c>)
   8150e:	2200      	movs	r2, #0
   81510:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;
   81512:	4b0f      	ldr	r3, [pc, #60]	; (81550 <SV_SEND_CAN_MAILBOX+0x7c>)
   81514:	2203      	movs	r2, #3
   81516:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 1;
   81518:	4b0d      	ldr	r3, [pc, #52]	; (81550 <SV_SEND_CAN_MAILBOX+0x7c>)
   8151a:	2201      	movs	r2, #1
   8151c:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   8151e:	4b0c      	ldr	r3, [pc, #48]	; (81550 <SV_SEND_CAN_MAILBOX+0x7c>)
   81520:	2200      	movs	r2, #0
   81522:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0x7FC ;
   81524:	4b0a      	ldr	r3, [pc, #40]	; (81550 <SV_SEND_CAN_MAILBOX+0x7c>)
   81526:	f240 72fc 	movw	r2, #2044	; 0x7fc
   8152a:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(MASTER_CPU_id); ;
   8152c:	4b08      	ldr	r3, [pc, #32]	; (81550 <SV_SEND_CAN_MAILBOX+0x7c>)
   8152e:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   81532:	611a      	str	r2, [r3, #16]
	while (CAN_MAILBOX_NOT_READY == dd_can_mailbox_write(&can0_mailbox));
   81534:	bf00      	nop
   81536:	4806      	ldr	r0, [pc, #24]	; (81550 <SV_SEND_CAN_MAILBOX+0x7c>)
   81538:	4b06      	ldr	r3, [pc, #24]	; (81554 <SV_SEND_CAN_MAILBOX+0x80>)
   8153a:	4798      	blx	r3
   8153c:	4603      	mov	r3, r0
   8153e:	2b01      	cmp	r3, #1
   81540:	d0f9      	beq.n	81536 <SV_SEND_CAN_MAILBOX+0x62>
	//dd_can_mailbox_write(&can0_mailbox);
	dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
   81542:	2001      	movs	r0, #1
   81544:	4b04      	ldr	r3, [pc, #16]	; (81558 <SV_SEND_CAN_MAILBOX+0x84>)
   81546:	4798      	blx	r3
   81548:	3710      	adds	r7, #16
   8154a:	46bd      	mov	sp, r7
   8154c:	bd80      	pop	{r7, pc}
   8154e:	bf00      	nop
   81550:	20070dd4 	.word	0x20070dd4
   81554:	000805a5 	.word	0x000805a5
   81558:	00080661 	.word	0x00080661

0008155c <CPU3_S_SYSTEM_INIT>:
 */ 
#include "S_SYS.h"
#include "Platform/Service/TIMER/S_TIMER.h"

void CPU3_S_SYSTEM_INIT()
{
   8155c:	b580      	push	{r7, lr}
   8155e:	af00      	add	r7, sp, #0
	CPU3_D_INIT_CLOCK();
   81560:	4b08      	ldr	r3, [pc, #32]	; (81584 <CPU3_S_SYSTEM_INIT+0x28>)
   81562:	4798      	blx	r3
//	CPU3_D_INIT_ADC();
	CPU3_D_INIT_INT();
   81564:	4b08      	ldr	r3, [pc, #32]	; (81588 <CPU3_S_SYSTEM_INIT+0x2c>)
   81566:	4798      	blx	r3
	CPU3_D_INIT_PIO();
   81568:	4b08      	ldr	r3, [pc, #32]	; (8158c <CPU3_S_SYSTEM_INIT+0x30>)
   8156a:	4798      	blx	r3
	CPU3_D_INIT_PWM();
   8156c:	4b08      	ldr	r3, [pc, #32]	; (81590 <CPU3_S_SYSTEM_INIT+0x34>)
   8156e:	4798      	blx	r3
	CPU3_D_INIT_TIMER();
   81570:	4b08      	ldr	r3, [pc, #32]	; (81594 <CPU3_S_SYSTEM_INIT+0x38>)
   81572:	4798      	blx	r3
	DD_INIT_CAN();
   81574:	4b08      	ldr	r3, [pc, #32]	; (81598 <CPU3_S_SYSTEM_INIT+0x3c>)
   81576:	4798      	blx	r3
	//CPU3_D_INIT_IIC();
	
	
	CPU3_S_START_TIMER(0,1000);			//1ms means 1000Hz interrupt frequency
   81578:	2000      	movs	r0, #0
   8157a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   8157e:	4b07      	ldr	r3, [pc, #28]	; (8159c <CPU3_S_SYSTEM_INIT+0x40>)
   81580:	4798      	blx	r3
}
   81582:	bd80      	pop	{r7, pc}
   81584:	00080151 	.word	0x00080151
   81588:	00081071 	.word	0x00081071
   8158c:	00080a6d 	.word	0x00080a6d
   81590:	00081155 	.word	0x00081155
   81594:	000811b9 	.word	0x000811b9
   81598:	00080779 	.word	0x00080779
   8159c:	000815a1 	.word	0x000815a1

000815a0 <CPU3_S_START_TIMER>:
 */ 
#include "S_TIMER.h"


uint8_t CPU3_S_START_TIMER(uint8_t timer_no, uint32_t timer_res)
{
   815a0:	b580      	push	{r7, lr}
   815a2:	b082      	sub	sp, #8
   815a4:	af00      	add	r7, sp, #0
   815a6:	4603      	mov	r3, r0
   815a8:	6039      	str	r1, [r7, #0]
   815aa:	71fb      	strb	r3, [r7, #7]
	// 	timer_no = 2;
	// 	timer_res = 100;
	// 	printf("inside sv start");
	CPU3_D_CONFIG_TIMER(timer_no, timer_res);
   815ac:	683b      	ldr	r3, [r7, #0]
   815ae:	b2db      	uxtb	r3, r3
   815b0:	79fa      	ldrb	r2, [r7, #7]
   815b2:	4610      	mov	r0, r2
   815b4:	4619      	mov	r1, r3
   815b6:	4b03      	ldr	r3, [pc, #12]	; (815c4 <CPU3_S_START_TIMER+0x24>)
   815b8:	4798      	blx	r3
	
	return 0;
   815ba:	2300      	movs	r3, #0
}
   815bc:	4618      	mov	r0, r3
   815be:	3708      	adds	r7, #8
   815c0:	46bd      	mov	sp, r7
   815c2:	bd80      	pop	{r7, pc}
   815c4:	00080941 	.word	0x00080941

000815c8 <CPU3_S_STOP_TIMER>:

uint8_t CPU3_S_STOP_TIMER(uint8_t timer_no)
{
   815c8:	b580      	push	{r7, lr}
   815ca:	b082      	sub	sp, #8
   815cc:	af00      	add	r7, sp, #0
   815ce:	4603      	mov	r3, r0
   815d0:	71fb      	strb	r3, [r7, #7]
	
	CPU3_D_STOP_TIMER(timer_no);
   815d2:	79fb      	ldrb	r3, [r7, #7]
   815d4:	4618      	mov	r0, r3
   815d6:	4b03      	ldr	r3, [pc, #12]	; (815e4 <CPU3_S_STOP_TIMER+0x1c>)
   815d8:	4798      	blx	r3
	
	return 0;
   815da:	2300      	movs	r3, #0
   815dc:	4618      	mov	r0, r3
   815de:	3708      	adds	r7, #8
   815e0:	46bd      	mov	sp, r7
   815e2:	bd80      	pop	{r7, pc}
   815e4:	000809f5 	.word	0x000809f5

000815e8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   815e8:	b580      	push	{r7, lr}
   815ea:	b086      	sub	sp, #24
   815ec:	af00      	add	r7, sp, #0
   815ee:	60f8      	str	r0, [r7, #12]
   815f0:	60b9      	str	r1, [r7, #8]
   815f2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   815f4:	2300      	movs	r3, #0
   815f6:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   815f8:	68fb      	ldr	r3, [r7, #12]
   815fa:	2b00      	cmp	r3, #0
   815fc:	d002      	beq.n	81604 <_read+0x1c>
		return -1;
   815fe:	f04f 33ff 	mov.w	r3, #4294967295
   81602:	e014      	b.n	8162e <_read+0x46>
	}

	for (; len > 0; --len) {
   81604:	e00f      	b.n	81626 <_read+0x3e>
		ptr_get(stdio_base, ptr);
   81606:	4b0c      	ldr	r3, [pc, #48]	; (81638 <_read+0x50>)
   81608:	681b      	ldr	r3, [r3, #0]
   8160a:	4a0c      	ldr	r2, [pc, #48]	; (8163c <_read+0x54>)
   8160c:	6812      	ldr	r2, [r2, #0]
   8160e:	4610      	mov	r0, r2
   81610:	68b9      	ldr	r1, [r7, #8]
   81612:	4798      	blx	r3
		ptr++;
   81614:	68bb      	ldr	r3, [r7, #8]
   81616:	3301      	adds	r3, #1
   81618:	60bb      	str	r3, [r7, #8]
		nChars++;
   8161a:	697b      	ldr	r3, [r7, #20]
   8161c:	3301      	adds	r3, #1
   8161e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   81620:	687b      	ldr	r3, [r7, #4]
   81622:	3b01      	subs	r3, #1
   81624:	607b      	str	r3, [r7, #4]
   81626:	687b      	ldr	r3, [r7, #4]
   81628:	2b00      	cmp	r3, #0
   8162a:	dcec      	bgt.n	81606 <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   8162c:	697b      	ldr	r3, [r7, #20]
}
   8162e:	4618      	mov	r0, r3
   81630:	3718      	adds	r7, #24
   81632:	46bd      	mov	sp, r7
   81634:	bd80      	pop	{r7, pc}
   81636:	bf00      	nop
   81638:	200711fc 	.word	0x200711fc
   8163c:	20071204 	.word	0x20071204

00081640 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   81640:	b580      	push	{r7, lr}
   81642:	b086      	sub	sp, #24
   81644:	af00      	add	r7, sp, #0
   81646:	60f8      	str	r0, [r7, #12]
   81648:	60b9      	str	r1, [r7, #8]
   8164a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   8164c:	2300      	movs	r3, #0
   8164e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   81650:	68fb      	ldr	r3, [r7, #12]
   81652:	2b01      	cmp	r3, #1
   81654:	d008      	beq.n	81668 <_write+0x28>
   81656:	68fb      	ldr	r3, [r7, #12]
   81658:	2b02      	cmp	r3, #2
   8165a:	d005      	beq.n	81668 <_write+0x28>
   8165c:	68fb      	ldr	r3, [r7, #12]
   8165e:	2b03      	cmp	r3, #3
   81660:	d002      	beq.n	81668 <_write+0x28>
		return -1;
   81662:	f04f 33ff 	mov.w	r3, #4294967295
   81666:	e01a      	b.n	8169e <_write+0x5e>
	}

	for (; len != 0; --len) {
   81668:	e015      	b.n	81696 <_write+0x56>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8166a:	4b0f      	ldr	r3, [pc, #60]	; (816a8 <_write+0x68>)
   8166c:	681a      	ldr	r2, [r3, #0]
   8166e:	4b0f      	ldr	r3, [pc, #60]	; (816ac <_write+0x6c>)
   81670:	6818      	ldr	r0, [r3, #0]
   81672:	68bb      	ldr	r3, [r7, #8]
   81674:	1c59      	adds	r1, r3, #1
   81676:	60b9      	str	r1, [r7, #8]
   81678:	781b      	ldrb	r3, [r3, #0]
   8167a:	4619      	mov	r1, r3
   8167c:	4790      	blx	r2
   8167e:	4603      	mov	r3, r0
   81680:	2b00      	cmp	r3, #0
   81682:	da02      	bge.n	8168a <_write+0x4a>
			return -1;
   81684:	f04f 33ff 	mov.w	r3, #4294967295
   81688:	e009      	b.n	8169e <_write+0x5e>
		}
		++nChars;
   8168a:	697b      	ldr	r3, [r7, #20]
   8168c:	3301      	adds	r3, #1
   8168e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   81690:	687b      	ldr	r3, [r7, #4]
   81692:	3b01      	subs	r3, #1
   81694:	607b      	str	r3, [r7, #4]
   81696:	687b      	ldr	r3, [r7, #4]
   81698:	2b00      	cmp	r3, #0
   8169a:	d1e6      	bne.n	8166a <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   8169c:	697b      	ldr	r3, [r7, #20]
}
   8169e:	4618      	mov	r0, r3
   816a0:	3718      	adds	r7, #24
   816a2:	46bd      	mov	sp, r7
   816a4:	bd80      	pop	{r7, pc}
   816a6:	bf00      	nop
   816a8:	20071200 	.word	0x20071200
   816ac:	20071204 	.word	0x20071204

000816b0 <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
   816b0:	b480      	push	{r7}
   816b2:	b087      	sub	sp, #28
   816b4:	af00      	add	r7, sp, #0
   816b6:	60f8      	str	r0, [r7, #12]
   816b8:	60b9      	str	r1, [r7, #8]
   816ba:	607a      	str	r2, [r7, #4]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   816bc:	68bb      	ldr	r3, [r7, #8]
   816be:	019b      	lsls	r3, r3, #6
   816c0:	68fa      	ldr	r2, [r7, #12]
   816c2:	4413      	add	r3, r2
   816c4:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   816c6:	697b      	ldr	r3, [r7, #20]
   816c8:	2202      	movs	r2, #2
   816ca:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   816cc:	697b      	ldr	r3, [r7, #20]
   816ce:	f04f 32ff 	mov.w	r2, #4294967295
   816d2:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   816d4:	697b      	ldr	r3, [r7, #20]
   816d6:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   816d8:	697b      	ldr	r3, [r7, #20]
   816da:	687a      	ldr	r2, [r7, #4]
   816dc:	605a      	str	r2, [r3, #4]
}
   816de:	371c      	adds	r7, #28
   816e0:	46bd      	mov	sp, r7
   816e2:	f85d 7b04 	ldr.w	r7, [sp], #4
   816e6:	4770      	bx	lr

000816e8 <tc_start>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 */
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
   816e8:	b480      	push	{r7}
   816ea:	b083      	sub	sp, #12
   816ec:	af00      	add	r7, sp, #0
   816ee:	6078      	str	r0, [r7, #4]
   816f0:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   816f2:	687a      	ldr	r2, [r7, #4]
   816f4:	683b      	ldr	r3, [r7, #0]
   816f6:	019b      	lsls	r3, r3, #6
   816f8:	4413      	add	r3, r2
   816fa:	2205      	movs	r2, #5
   816fc:	601a      	str	r2, [r3, #0]
}
   816fe:	370c      	adds	r7, #12
   81700:	46bd      	mov	sp, r7
   81702:	f85d 7b04 	ldr.w	r7, [sp], #4
   81706:	4770      	bx	lr

00081708 <tc_stop>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 */
void tc_stop(Tc *p_tc, uint32_t ul_channel)
{
   81708:	b480      	push	{r7}
   8170a:	b083      	sub	sp, #12
   8170c:	af00      	add	r7, sp, #0
   8170e:	6078      	str	r0, [r7, #4]
   81710:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   81712:	687a      	ldr	r2, [r7, #4]
   81714:	683b      	ldr	r3, [r7, #0]
   81716:	019b      	lsls	r3, r3, #6
   81718:	4413      	add	r3, r2
   8171a:	2202      	movs	r2, #2
   8171c:	601a      	str	r2, [r3, #0]
}
   8171e:	370c      	adds	r7, #12
   81720:	46bd      	mov	sp, r7
   81722:	f85d 7b04 	ldr.w	r7, [sp], #4
   81726:	4770      	bx	lr

00081728 <tc_write_rc>:
 * \param ul_channel Channel to configure.
 * \param ul_value Value to set in register.
 */
void tc_write_rc(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_value)
{
   81728:	b480      	push	{r7}
   8172a:	b085      	sub	sp, #20
   8172c:	af00      	add	r7, sp, #0
   8172e:	60f8      	str	r0, [r7, #12]
   81730:	60b9      	str	r1, [r7, #8]
   81732:	607a      	str	r2, [r7, #4]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   81734:	68fa      	ldr	r2, [r7, #12]
   81736:	68bb      	ldr	r3, [r7, #8]
   81738:	019b      	lsls	r3, r3, #6
   8173a:	4413      	add	r3, r2
   8173c:	3318      	adds	r3, #24
   8173e:	687a      	ldr	r2, [r7, #4]
   81740:	605a      	str	r2, [r3, #4]
}
   81742:	3714      	adds	r7, #20
   81744:	46bd      	mov	sp, r7
   81746:	f85d 7b04 	ldr.w	r7, [sp], #4
   8174a:	4770      	bx	lr

0008174c <tc_enable_interrupt>:
 * \param ul_channel Channel to configure.
 * \param ul_sources Interrupt sources bit map.
 */
void tc_enable_interrupt(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_sources)
{
   8174c:	b480      	push	{r7}
   8174e:	b087      	sub	sp, #28
   81750:	af00      	add	r7, sp, #0
   81752:	60f8      	str	r0, [r7, #12]
   81754:	60b9      	str	r1, [r7, #8]
   81756:	607a      	str	r2, [r7, #4]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81758:	68bb      	ldr	r3, [r7, #8]
   8175a:	019b      	lsls	r3, r3, #6
   8175c:	68fa      	ldr	r2, [r7, #12]
   8175e:	4413      	add	r3, r2
   81760:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
   81762:	697b      	ldr	r3, [r7, #20]
   81764:	687a      	ldr	r2, [r7, #4]
   81766:	625a      	str	r2, [r3, #36]	; 0x24
}
   81768:	371c      	adds	r7, #28
   8176a:	46bd      	mov	sp, r7
   8176c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81770:	4770      	bx	lr
   81772:	bf00      	nop

00081774 <tc_get_status>:
 * \param ul_channel Channel to configure.
 *
 * \return The current TC status.
 */
uint32_t tc_get_status(Tc *p_tc, uint32_t ul_channel)
{
   81774:	b480      	push	{r7}
   81776:	b085      	sub	sp, #20
   81778:	af00      	add	r7, sp, #0
   8177a:	6078      	str	r0, [r7, #4]
   8177c:	6039      	str	r1, [r7, #0]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8177e:	683b      	ldr	r3, [r7, #0]
   81780:	019b      	lsls	r3, r3, #6
   81782:	687a      	ldr	r2, [r7, #4]
   81784:	4413      	add	r3, r2
   81786:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
   81788:	68fb      	ldr	r3, [r7, #12]
   8178a:	6a1b      	ldr	r3, [r3, #32]
}
   8178c:	4618      	mov	r0, r3
   8178e:	3714      	adds	r7, #20
   81790:	46bd      	mov	sp, r7
   81792:	f85d 7b04 	ldr.w	r7, [sp], #4
   81796:	4770      	bx	lr

00081798 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   81798:	b480      	push	{r7}
   8179a:	b085      	sub	sp, #20
   8179c:	af00      	add	r7, sp, #0
   8179e:	6078      	str	r0, [r7, #4]
   817a0:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
   817a2:	2300      	movs	r3, #0
   817a4:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   817a6:	687b      	ldr	r3, [r7, #4]
   817a8:	22ac      	movs	r2, #172	; 0xac
   817aa:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   817ac:	683b      	ldr	r3, [r7, #0]
   817ae:	681a      	ldr	r2, [r3, #0]
   817b0:	683b      	ldr	r3, [r7, #0]
   817b2:	685b      	ldr	r3, [r3, #4]
   817b4:	fbb2 f3f3 	udiv	r3, r2, r3
   817b8:	091b      	lsrs	r3, r3, #4
   817ba:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   817bc:	68fb      	ldr	r3, [r7, #12]
   817be:	2b00      	cmp	r3, #0
   817c0:	d003      	beq.n	817ca <uart_init+0x32>
   817c2:	68fb      	ldr	r3, [r7, #12]
   817c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   817c8:	d301      	bcc.n	817ce <uart_init+0x36>
		return 1;
   817ca:	2301      	movs	r3, #1
   817cc:	e00f      	b.n	817ee <uart_init+0x56>

	p_uart->UART_BRGR = cd;
   817ce:	687b      	ldr	r3, [r7, #4]
   817d0:	68fa      	ldr	r2, [r7, #12]
   817d2:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   817d4:	683b      	ldr	r3, [r7, #0]
   817d6:	689a      	ldr	r2, [r3, #8]
   817d8:	687b      	ldr	r3, [r7, #4]
   817da:	605a      	str	r2, [r3, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   817dc:	687b      	ldr	r3, [r7, #4]
   817de:	f240 2202 	movw	r2, #514	; 0x202
   817e2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   817e6:	687b      	ldr	r3, [r7, #4]
   817e8:	2250      	movs	r2, #80	; 0x50
   817ea:	601a      	str	r2, [r3, #0]

	return 0;
   817ec:	2300      	movs	r3, #0
}
   817ee:	4618      	mov	r0, r3
   817f0:	3714      	adds	r7, #20
   817f2:	46bd      	mov	sp, r7
   817f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   817f8:	4770      	bx	lr
   817fa:	bf00      	nop

000817fc <uart_enable_tx>:
 * \brief Enable UART transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
   817fc:	b480      	push	{r7}
   817fe:	b083      	sub	sp, #12
   81800:	af00      	add	r7, sp, #0
   81802:	6078      	str	r0, [r7, #4]
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
   81804:	687b      	ldr	r3, [r7, #4]
   81806:	2240      	movs	r2, #64	; 0x40
   81808:	601a      	str	r2, [r3, #0]
}
   8180a:	370c      	adds	r7, #12
   8180c:	46bd      	mov	sp, r7
   8180e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81812:	4770      	bx	lr

00081814 <uart_enable_rx>:
 * \brief Enable UART receiver.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
   81814:	b480      	push	{r7}
   81816:	b083      	sub	sp, #12
   81818:	af00      	add	r7, sp, #0
   8181a:	6078      	str	r0, [r7, #4]
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
   8181c:	687b      	ldr	r3, [r7, #4]
   8181e:	2210      	movs	r2, #16
   81820:	601a      	str	r2, [r3, #0]
}
   81822:	370c      	adds	r7, #12
   81824:	46bd      	mov	sp, r7
   81826:	f85d 7b04 	ldr.w	r7, [sp], #4
   8182a:	4770      	bx	lr

0008182c <uart_enable>:
 * \brief Enable UART receiver and transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
   8182c:	b480      	push	{r7}
   8182e:	b083      	sub	sp, #12
   81830:	af00      	add	r7, sp, #0
   81832:	6078      	str	r0, [r7, #4]
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   81834:	687b      	ldr	r3, [r7, #4]
   81836:	2250      	movs	r2, #80	; 0x50
   81838:	601a      	str	r2, [r3, #0]
}
   8183a:	370c      	adds	r7, #12
   8183c:	46bd      	mov	sp, r7
   8183e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81842:	4770      	bx	lr

00081844 <uart_enable_interrupt>:
 *
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
   81844:	b480      	push	{r7}
   81846:	b083      	sub	sp, #12
   81848:	af00      	add	r7, sp, #0
   8184a:	6078      	str	r0, [r7, #4]
   8184c:	6039      	str	r1, [r7, #0]
	p_uart->UART_IER = ul_sources;
   8184e:	687b      	ldr	r3, [r7, #4]
   81850:	683a      	ldr	r2, [r7, #0]
   81852:	609a      	str	r2, [r3, #8]
}
   81854:	370c      	adds	r7, #12
   81856:	46bd      	mov	sp, r7
   81858:	f85d 7b04 	ldr.w	r7, [sp], #4
   8185c:	4770      	bx	lr
   8185e:	bf00      	nop

00081860 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
   81860:	b480      	push	{r7}
   81862:	b083      	sub	sp, #12
   81864:	af00      	add	r7, sp, #0
   81866:	6078      	str	r0, [r7, #4]
   81868:	460b      	mov	r3, r1
   8186a:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   8186c:	687b      	ldr	r3, [r7, #4]
   8186e:	695b      	ldr	r3, [r3, #20]
   81870:	f003 0302 	and.w	r3, r3, #2
   81874:	2b00      	cmp	r3, #0
   81876:	d101      	bne.n	8187c <uart_write+0x1c>
		return 1;
   81878:	2301      	movs	r3, #1
   8187a:	e003      	b.n	81884 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
   8187c:	78fa      	ldrb	r2, [r7, #3]
   8187e:	687b      	ldr	r3, [r7, #4]
   81880:	61da      	str	r2, [r3, #28]
	return 0;
   81882:	2300      	movs	r3, #0
}
   81884:	4618      	mov	r0, r3
   81886:	370c      	adds	r7, #12
   81888:	46bd      	mov	sp, r7
   8188a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8188e:	4770      	bx	lr

00081890 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
   81890:	b480      	push	{r7}
   81892:	b083      	sub	sp, #12
   81894:	af00      	add	r7, sp, #0
   81896:	6078      	str	r0, [r7, #4]
   81898:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8189a:	687b      	ldr	r3, [r7, #4]
   8189c:	695b      	ldr	r3, [r3, #20]
   8189e:	f003 0301 	and.w	r3, r3, #1
   818a2:	2b00      	cmp	r3, #0
   818a4:	d101      	bne.n	818aa <uart_read+0x1a>
		return 1;
   818a6:	2301      	movs	r3, #1
   818a8:	e005      	b.n	818b6 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   818aa:	687b      	ldr	r3, [r7, #4]
   818ac:	699b      	ldr	r3, [r3, #24]
   818ae:	b2da      	uxtb	r2, r3
   818b0:	683b      	ldr	r3, [r7, #0]
   818b2:	701a      	strb	r2, [r3, #0]
	return 0;
   818b4:	2300      	movs	r3, #0
}
   818b6:	4618      	mov	r0, r3
   818b8:	370c      	adds	r7, #12
   818ba:	46bd      	mov	sp, r7
   818bc:	f85d 7b04 	ldr.w	r7, [sp], #4
   818c0:	4770      	bx	lr
   818c2:	bf00      	nop

000818c4 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   818c4:	b480      	push	{r7}
   818c6:	b089      	sub	sp, #36	; 0x24
   818c8:	af00      	add	r7, sp, #0
   818ca:	60f8      	str	r0, [r7, #12]
   818cc:	60b9      	str	r1, [r7, #8]
   818ce:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   818d0:	68bb      	ldr	r3, [r7, #8]
   818d2:	011a      	lsls	r2, r3, #4
   818d4:	687b      	ldr	r3, [r7, #4]
   818d6:	429a      	cmp	r2, r3
   818d8:	d802      	bhi.n	818e0 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   818da:	2310      	movs	r3, #16
   818dc:	61fb      	str	r3, [r7, #28]
   818de:	e001      	b.n	818e4 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   818e0:	2308      	movs	r3, #8
   818e2:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   818e4:	687b      	ldr	r3, [r7, #4]
   818e6:	00da      	lsls	r2, r3, #3
   818e8:	69fb      	ldr	r3, [r7, #28]
   818ea:	68b9      	ldr	r1, [r7, #8]
   818ec:	fb01 f303 	mul.w	r3, r1, r3
   818f0:	085b      	lsrs	r3, r3, #1
   818f2:	441a      	add	r2, r3
   818f4:	69fb      	ldr	r3, [r7, #28]
   818f6:	68b9      	ldr	r1, [r7, #8]
   818f8:	fb01 f303 	mul.w	r3, r1, r3
   818fc:	fbb2 f3f3 	udiv	r3, r2, r3
   81900:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   81902:	69bb      	ldr	r3, [r7, #24]
   81904:	08db      	lsrs	r3, r3, #3
   81906:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   81908:	69bb      	ldr	r3, [r7, #24]
   8190a:	f003 0307 	and.w	r3, r3, #7
   8190e:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   81910:	697b      	ldr	r3, [r7, #20]
   81912:	2b00      	cmp	r3, #0
   81914:	d003      	beq.n	8191e <usart_set_async_baudrate+0x5a>
   81916:	697b      	ldr	r3, [r7, #20]
   81918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   8191c:	d301      	bcc.n	81922 <usart_set_async_baudrate+0x5e>
		return 1;
   8191e:	2301      	movs	r3, #1
   81920:	e00f      	b.n	81942 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   81922:	69fb      	ldr	r3, [r7, #28]
   81924:	2b08      	cmp	r3, #8
   81926:	d105      	bne.n	81934 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   81928:	68fb      	ldr	r3, [r7, #12]
   8192a:	685b      	ldr	r3, [r3, #4]
   8192c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   81930:	68fb      	ldr	r3, [r7, #12]
   81932:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   81934:	693b      	ldr	r3, [r7, #16]
   81936:	041a      	lsls	r2, r3, #16
   81938:	697b      	ldr	r3, [r7, #20]
   8193a:	431a      	orrs	r2, r3
   8193c:	68fb      	ldr	r3, [r7, #12]
   8193e:	621a      	str	r2, [r3, #32]

	return 0;
   81940:	2300      	movs	r3, #0
}
   81942:	4618      	mov	r0, r3
   81944:	3724      	adds	r7, #36	; 0x24
   81946:	46bd      	mov	sp, r7
   81948:	f85d 7b04 	ldr.w	r7, [sp], #4
   8194c:	4770      	bx	lr
   8194e:	bf00      	nop

00081950 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   81950:	b580      	push	{r7, lr}
   81952:	b082      	sub	sp, #8
   81954:	af00      	add	r7, sp, #0
   81956:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   81958:	6878      	ldr	r0, [r7, #4]
   8195a:	4b0d      	ldr	r3, [pc, #52]	; (81990 <usart_reset+0x40>)
   8195c:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   8195e:	687b      	ldr	r3, [r7, #4]
   81960:	2200      	movs	r2, #0
   81962:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   81964:	687b      	ldr	r3, [r7, #4]
   81966:	2200      	movs	r2, #0
   81968:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   8196a:	687b      	ldr	r3, [r7, #4]
   8196c:	2200      	movs	r2, #0
   8196e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   81970:	6878      	ldr	r0, [r7, #4]
   81972:	4b08      	ldr	r3, [pc, #32]	; (81994 <usart_reset+0x44>)
   81974:	4798      	blx	r3
	usart_reset_rx(p_usart);
   81976:	6878      	ldr	r0, [r7, #4]
   81978:	4b07      	ldr	r3, [pc, #28]	; (81998 <usart_reset+0x48>)
   8197a:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   8197c:	6878      	ldr	r0, [r7, #4]
   8197e:	4b07      	ldr	r3, [pc, #28]	; (8199c <usart_reset+0x4c>)
   81980:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   81982:	6878      	ldr	r0, [r7, #4]
   81984:	4b06      	ldr	r3, [pc, #24]	; (819a0 <usart_reset+0x50>)
   81986:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   81988:	3708      	adds	r7, #8
   8198a:	46bd      	mov	sp, r7
   8198c:	bd80      	pop	{r7, pc}
   8198e:	bf00      	nop
   81990:	00081b29 	.word	0x00081b29
   81994:	00081a41 	.word	0x00081a41
   81998:	00081a71 	.word	0x00081a71
   8199c:	00081a89 	.word	0x00081a89
   819a0:	00081aa5 	.word	0x00081aa5

000819a4 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   819a4:	b580      	push	{r7, lr}
   819a6:	b084      	sub	sp, #16
   819a8:	af00      	add	r7, sp, #0
   819aa:	60f8      	str	r0, [r7, #12]
   819ac:	60b9      	str	r1, [r7, #8]
   819ae:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   819b0:	68f8      	ldr	r0, [r7, #12]
   819b2:	4b1a      	ldr	r3, [pc, #104]	; (81a1c <usart_init_rs232+0x78>)
   819b4:	4798      	blx	r3

	ul_reg_val = 0;
   819b6:	4b1a      	ldr	r3, [pc, #104]	; (81a20 <usart_init_rs232+0x7c>)
   819b8:	2200      	movs	r2, #0
   819ba:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   819bc:	68bb      	ldr	r3, [r7, #8]
   819be:	2b00      	cmp	r3, #0
   819c0:	d009      	beq.n	819d6 <usart_init_rs232+0x32>
   819c2:	68bb      	ldr	r3, [r7, #8]
   819c4:	681b      	ldr	r3, [r3, #0]
   819c6:	68f8      	ldr	r0, [r7, #12]
   819c8:	4619      	mov	r1, r3
   819ca:	687a      	ldr	r2, [r7, #4]
   819cc:	4b15      	ldr	r3, [pc, #84]	; (81a24 <usart_init_rs232+0x80>)
   819ce:	4798      	blx	r3
   819d0:	4603      	mov	r3, r0
   819d2:	2b00      	cmp	r3, #0
   819d4:	d001      	beq.n	819da <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   819d6:	2301      	movs	r3, #1
   819d8:	e01b      	b.n	81a12 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   819da:	68bb      	ldr	r3, [r7, #8]
   819dc:	685a      	ldr	r2, [r3, #4]
   819de:	68bb      	ldr	r3, [r7, #8]
   819e0:	689b      	ldr	r3, [r3, #8]
   819e2:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   819e4:	68bb      	ldr	r3, [r7, #8]
   819e6:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   819e8:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   819ea:	68bb      	ldr	r3, [r7, #8]
   819ec:	68db      	ldr	r3, [r3, #12]
   819ee:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   819f0:	4b0b      	ldr	r3, [pc, #44]	; (81a20 <usart_init_rs232+0x7c>)
   819f2:	681b      	ldr	r3, [r3, #0]
   819f4:	4313      	orrs	r3, r2
   819f6:	4a0a      	ldr	r2, [pc, #40]	; (81a20 <usart_init_rs232+0x7c>)
   819f8:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   819fa:	4b09      	ldr	r3, [pc, #36]	; (81a20 <usart_init_rs232+0x7c>)
   819fc:	681b      	ldr	r3, [r3, #0]
   819fe:	4a08      	ldr	r2, [pc, #32]	; (81a20 <usart_init_rs232+0x7c>)
   81a00:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
   81a02:	68fb      	ldr	r3, [r7, #12]
   81a04:	685a      	ldr	r2, [r3, #4]
   81a06:	4b06      	ldr	r3, [pc, #24]	; (81a20 <usart_init_rs232+0x7c>)
   81a08:	681b      	ldr	r3, [r3, #0]
   81a0a:	431a      	orrs	r2, r3
   81a0c:	68fb      	ldr	r3, [r7, #12]
   81a0e:	605a      	str	r2, [r3, #4]

	return 0;
   81a10:	2300      	movs	r3, #0
}
   81a12:	4618      	mov	r0, r3
   81a14:	3710      	adds	r7, #16
   81a16:	46bd      	mov	sp, r7
   81a18:	bd80      	pop	{r7, pc}
   81a1a:	bf00      	nop
   81a1c:	00081951 	.word	0x00081951
   81a20:	20070cd0 	.word	0x20070cd0
   81a24:	000818c5 	.word	0x000818c5

00081a28 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   81a28:	b480      	push	{r7}
   81a2a:	b083      	sub	sp, #12
   81a2c:	af00      	add	r7, sp, #0
   81a2e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   81a30:	687b      	ldr	r3, [r7, #4]
   81a32:	2240      	movs	r2, #64	; 0x40
   81a34:	601a      	str	r2, [r3, #0]
}
   81a36:	370c      	adds	r7, #12
   81a38:	46bd      	mov	sp, r7
   81a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
   81a3e:	4770      	bx	lr

00081a40 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   81a40:	b480      	push	{r7}
   81a42:	b083      	sub	sp, #12
   81a44:	af00      	add	r7, sp, #0
   81a46:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   81a48:	687b      	ldr	r3, [r7, #4]
   81a4a:	2288      	movs	r2, #136	; 0x88
   81a4c:	601a      	str	r2, [r3, #0]
}
   81a4e:	370c      	adds	r7, #12
   81a50:	46bd      	mov	sp, r7
   81a52:	f85d 7b04 	ldr.w	r7, [sp], #4
   81a56:	4770      	bx	lr

00081a58 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   81a58:	b480      	push	{r7}
   81a5a:	b083      	sub	sp, #12
   81a5c:	af00      	add	r7, sp, #0
   81a5e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   81a60:	687b      	ldr	r3, [r7, #4]
   81a62:	2210      	movs	r2, #16
   81a64:	601a      	str	r2, [r3, #0]
}
   81a66:	370c      	adds	r7, #12
   81a68:	46bd      	mov	sp, r7
   81a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
   81a6e:	4770      	bx	lr

00081a70 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   81a70:	b480      	push	{r7}
   81a72:	b083      	sub	sp, #12
   81a74:	af00      	add	r7, sp, #0
   81a76:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   81a78:	687b      	ldr	r3, [r7, #4]
   81a7a:	2224      	movs	r2, #36	; 0x24
   81a7c:	601a      	str	r2, [r3, #0]
}
   81a7e:	370c      	adds	r7, #12
   81a80:	46bd      	mov	sp, r7
   81a82:	f85d 7b04 	ldr.w	r7, [sp], #4
   81a86:	4770      	bx	lr

00081a88 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   81a88:	b480      	push	{r7}
   81a8a:	b083      	sub	sp, #12
   81a8c:	af00      	add	r7, sp, #0
   81a8e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   81a90:	687b      	ldr	r3, [r7, #4]
   81a92:	f44f 7280 	mov.w	r2, #256	; 0x100
   81a96:	601a      	str	r2, [r3, #0]
}
   81a98:	370c      	adds	r7, #12
   81a9a:	46bd      	mov	sp, r7
   81a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81aa0:	4770      	bx	lr
   81aa2:	bf00      	nop

00081aa4 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   81aa4:	b480      	push	{r7}
   81aa6:	b083      	sub	sp, #12
   81aa8:	af00      	add	r7, sp, #0
   81aaa:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   81aac:	687b      	ldr	r3, [r7, #4]
   81aae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81ab2:	601a      	str	r2, [r3, #0]
}
   81ab4:	370c      	adds	r7, #12
   81ab6:	46bd      	mov	sp, r7
   81ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
   81abc:	4770      	bx	lr
   81abe:	bf00      	nop

00081ac0 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   81ac0:	b480      	push	{r7}
   81ac2:	b083      	sub	sp, #12
   81ac4:	af00      	add	r7, sp, #0
   81ac6:	6078      	str	r0, [r7, #4]
   81ac8:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   81aca:	687b      	ldr	r3, [r7, #4]
   81acc:	695b      	ldr	r3, [r3, #20]
   81ace:	f003 0302 	and.w	r3, r3, #2
   81ad2:	2b00      	cmp	r3, #0
   81ad4:	d101      	bne.n	81ada <usart_write+0x1a>
		return 1;
   81ad6:	2301      	movs	r3, #1
   81ad8:	e005      	b.n	81ae6 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   81ada:	683b      	ldr	r3, [r7, #0]
   81adc:	f3c3 0208 	ubfx	r2, r3, #0, #9
   81ae0:	687b      	ldr	r3, [r7, #4]
   81ae2:	61da      	str	r2, [r3, #28]
	return 0;
   81ae4:	2300      	movs	r3, #0
}
   81ae6:	4618      	mov	r0, r3
   81ae8:	370c      	adds	r7, #12
   81aea:	46bd      	mov	sp, r7
   81aec:	f85d 7b04 	ldr.w	r7, [sp], #4
   81af0:	4770      	bx	lr
   81af2:	bf00      	nop

00081af4 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
   81af4:	b480      	push	{r7}
   81af6:	b083      	sub	sp, #12
   81af8:	af00      	add	r7, sp, #0
   81afa:	6078      	str	r0, [r7, #4]
   81afc:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   81afe:	687b      	ldr	r3, [r7, #4]
   81b00:	695b      	ldr	r3, [r3, #20]
   81b02:	f003 0301 	and.w	r3, r3, #1
   81b06:	2b00      	cmp	r3, #0
   81b08:	d101      	bne.n	81b0e <usart_read+0x1a>
		return 1;
   81b0a:	2301      	movs	r3, #1
   81b0c:	e006      	b.n	81b1c <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   81b0e:	687b      	ldr	r3, [r7, #4]
   81b10:	699b      	ldr	r3, [r3, #24]
   81b12:	f3c3 0208 	ubfx	r2, r3, #0, #9
   81b16:	683b      	ldr	r3, [r7, #0]
   81b18:	601a      	str	r2, [r3, #0]

	return 0;
   81b1a:	2300      	movs	r3, #0
}
   81b1c:	4618      	mov	r0, r3
   81b1e:	370c      	adds	r7, #12
   81b20:	46bd      	mov	sp, r7
   81b22:	f85d 7b04 	ldr.w	r7, [sp], #4
   81b26:	4770      	bx	lr

00081b28 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   81b28:	b480      	push	{r7}
   81b2a:	b083      	sub	sp, #12
   81b2c:	af00      	add	r7, sp, #0
   81b2e:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
   81b30:	687b      	ldr	r3, [r7, #4]
   81b32:	4a04      	ldr	r2, [pc, #16]	; (81b44 <usart_disable_writeprotect+0x1c>)
   81b34:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   81b38:	370c      	adds	r7, #12
   81b3a:	46bd      	mov	sp, r7
   81b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81b40:	4770      	bx	lr
   81b42:	bf00      	nop
   81b44:	55534100 	.word	0x55534100

00081b48 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   81b48:	b480      	push	{r7}
   81b4a:	b083      	sub	sp, #12
   81b4c:	af00      	add	r7, sp, #0
   81b4e:	4603      	mov	r3, r0
   81b50:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   81b52:	4908      	ldr	r1, [pc, #32]	; (81b74 <NVIC_EnableIRQ+0x2c>)
   81b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81b58:	095b      	lsrs	r3, r3, #5
   81b5a:	79fa      	ldrb	r2, [r7, #7]
   81b5c:	f002 021f 	and.w	r2, r2, #31
   81b60:	2001      	movs	r0, #1
   81b62:	fa00 f202 	lsl.w	r2, r0, r2
   81b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   81b6a:	370c      	adds	r7, #12
   81b6c:	46bd      	mov	sp, r7
   81b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81b72:	4770      	bx	lr
   81b74:	e000e100 	.word	0xe000e100

00081b78 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   81b78:	b480      	push	{r7}
   81b7a:	b083      	sub	sp, #12
   81b7c:	af00      	add	r7, sp, #0
   81b7e:	4603      	mov	r3, r0
   81b80:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   81b82:	4909      	ldr	r1, [pc, #36]	; (81ba8 <NVIC_DisableIRQ+0x30>)
   81b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81b88:	095b      	lsrs	r3, r3, #5
   81b8a:	79fa      	ldrb	r2, [r7, #7]
   81b8c:	f002 021f 	and.w	r2, r2, #31
   81b90:	2001      	movs	r0, #1
   81b92:	fa00 f202 	lsl.w	r2, r0, r2
   81b96:	3320      	adds	r3, #32
   81b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   81b9c:	370c      	adds	r7, #12
   81b9e:	46bd      	mov	sp, r7
   81ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
   81ba4:	4770      	bx	lr
   81ba6:	bf00      	nop
   81ba8:	e000e100 	.word	0xe000e100

00081bac <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   81bac:	b480      	push	{r7}
   81bae:	b083      	sub	sp, #12
   81bb0:	af00      	add	r7, sp, #0
   81bb2:	4603      	mov	r3, r0
   81bb4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   81bb6:	4909      	ldr	r1, [pc, #36]	; (81bdc <NVIC_ClearPendingIRQ+0x30>)
   81bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81bbc:	095b      	lsrs	r3, r3, #5
   81bbe:	79fa      	ldrb	r2, [r7, #7]
   81bc0:	f002 021f 	and.w	r2, r2, #31
   81bc4:	2001      	movs	r0, #1
   81bc6:	fa00 f202 	lsl.w	r2, r0, r2
   81bca:	3360      	adds	r3, #96	; 0x60
   81bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   81bd0:	370c      	adds	r7, #12
   81bd2:	46bd      	mov	sp, r7
   81bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
   81bd8:	4770      	bx	lr
   81bda:	bf00      	nop
   81bdc:	e000e100 	.word	0xe000e100

00081be0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   81be0:	b480      	push	{r7}
   81be2:	b083      	sub	sp, #12
   81be4:	af00      	add	r7, sp, #0
   81be6:	4603      	mov	r3, r0
   81be8:	6039      	str	r1, [r7, #0]
   81bea:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   81bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81bf0:	2b00      	cmp	r3, #0
   81bf2:	da0b      	bge.n	81c0c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   81bf4:	490d      	ldr	r1, [pc, #52]	; (81c2c <NVIC_SetPriority+0x4c>)
   81bf6:	79fb      	ldrb	r3, [r7, #7]
   81bf8:	f003 030f 	and.w	r3, r3, #15
   81bfc:	3b04      	subs	r3, #4
   81bfe:	683a      	ldr	r2, [r7, #0]
   81c00:	b2d2      	uxtb	r2, r2
   81c02:	0112      	lsls	r2, r2, #4
   81c04:	b2d2      	uxtb	r2, r2
   81c06:	440b      	add	r3, r1
   81c08:	761a      	strb	r2, [r3, #24]
   81c0a:	e009      	b.n	81c20 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81c0c:	4908      	ldr	r1, [pc, #32]	; (81c30 <NVIC_SetPriority+0x50>)
   81c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81c12:	683a      	ldr	r2, [r7, #0]
   81c14:	b2d2      	uxtb	r2, r2
   81c16:	0112      	lsls	r2, r2, #4
   81c18:	b2d2      	uxtb	r2, r2
   81c1a:	440b      	add	r3, r1
   81c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   81c20:	370c      	adds	r7, #12
   81c22:	46bd      	mov	sp, r7
   81c24:	f85d 7b04 	ldr.w	r7, [sp], #4
   81c28:	4770      	bx	lr
   81c2a:	bf00      	nop
   81c2c:	e000ed00 	.word	0xe000ed00
   81c30:	e000e100 	.word	0xe000e100

00081c34 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   81c34:	b480      	push	{r7}
   81c36:	b083      	sub	sp, #12
   81c38:	af00      	add	r7, sp, #0
   81c3a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81c3c:	687b      	ldr	r3, [r7, #4]
   81c3e:	2b07      	cmp	r3, #7
   81c40:	d825      	bhi.n	81c8e <osc_get_rate+0x5a>
   81c42:	a201      	add	r2, pc, #4	; (adr r2, 81c48 <osc_get_rate+0x14>)
   81c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81c48:	00081c69 	.word	0x00081c69
   81c4c:	00081c6f 	.word	0x00081c6f
   81c50:	00081c75 	.word	0x00081c75
   81c54:	00081c7b 	.word	0x00081c7b
   81c58:	00081c7f 	.word	0x00081c7f
   81c5c:	00081c83 	.word	0x00081c83
   81c60:	00081c87 	.word	0x00081c87
   81c64:	00081c8b 	.word	0x00081c8b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   81c68:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81c6c:	e010      	b.n	81c90 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   81c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81c72:	e00d      	b.n	81c90 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   81c74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81c78:	e00a      	b.n	81c90 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   81c7a:	4b08      	ldr	r3, [pc, #32]	; (81c9c <osc_get_rate+0x68>)
   81c7c:	e008      	b.n	81c90 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   81c7e:	4b08      	ldr	r3, [pc, #32]	; (81ca0 <osc_get_rate+0x6c>)
   81c80:	e006      	b.n	81c90 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   81c82:	4b08      	ldr	r3, [pc, #32]	; (81ca4 <osc_get_rate+0x70>)
   81c84:	e004      	b.n	81c90 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   81c86:	4b07      	ldr	r3, [pc, #28]	; (81ca4 <osc_get_rate+0x70>)
   81c88:	e002      	b.n	81c90 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   81c8a:	4b06      	ldr	r3, [pc, #24]	; (81ca4 <osc_get_rate+0x70>)
   81c8c:	e000      	b.n	81c90 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   81c8e:	2300      	movs	r3, #0
}
   81c90:	4618      	mov	r0, r3
   81c92:	370c      	adds	r7, #12
   81c94:	46bd      	mov	sp, r7
   81c96:	f85d 7b04 	ldr.w	r7, [sp], #4
   81c9a:	4770      	bx	lr
   81c9c:	003d0900 	.word	0x003d0900
   81ca0:	007a1200 	.word	0x007a1200
   81ca4:	00b71b00 	.word	0x00b71b00

00081ca8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   81ca8:	b580      	push	{r7, lr}
   81caa:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   81cac:	2006      	movs	r0, #6
   81cae:	4b04      	ldr	r3, [pc, #16]	; (81cc0 <sysclk_get_main_hz+0x18>)
   81cb0:	4798      	blx	r3
   81cb2:	4602      	mov	r2, r0
   81cb4:	4613      	mov	r3, r2
   81cb6:	00db      	lsls	r3, r3, #3
   81cb8:	1a9b      	subs	r3, r3, r2
   81cba:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   81cbc:	4618      	mov	r0, r3
   81cbe:	bd80      	pop	{r7, pc}
   81cc0:	00081c35 	.word	0x00081c35

00081cc4 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   81cc4:	b580      	push	{r7, lr}
   81cc6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   81cc8:	4b02      	ldr	r3, [pc, #8]	; (81cd4 <sysclk_get_peripheral_hz+0x10>)
   81cca:	4798      	blx	r3
   81ccc:	4603      	mov	r3, r0
   81cce:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   81cd0:	4618      	mov	r0, r3
   81cd2:	bd80      	pop	{r7, pc}
   81cd4:	00081ca9 	.word	0x00081ca9

00081cd8 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   81cd8:	b580      	push	{r7, lr}
   81cda:	b082      	sub	sp, #8
   81cdc:	af00      	add	r7, sp, #0
   81cde:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   81ce0:	6878      	ldr	r0, [r7, #4]
   81ce2:	4b02      	ldr	r3, [pc, #8]	; (81cec <sysclk_enable_peripheral_clock+0x14>)
   81ce4:	4798      	blx	r3
}
   81ce6:	3708      	adds	r7, #8
   81ce8:	46bd      	mov	sp, r7
   81cea:	bd80      	pop	{r7, pc}
   81cec:	000835dd 	.word	0x000835dd

00081cf0 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
   81cf0:	b580      	push	{r7, lr}
   81cf2:	b08c      	sub	sp, #48	; 0x30
   81cf4:	af00      	add	r7, sp, #0
   81cf6:	6078      	str	r0, [r7, #4]
   81cf8:	6039      	str	r1, [r7, #0]
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   81cfa:	4b40      	ldr	r3, [pc, #256]	; (81dfc <usart_serial_init+0x10c>)
   81cfc:	4798      	blx	r3
   81cfe:	4603      	mov	r3, r0
   81d00:	623b      	str	r3, [r7, #32]
	uart_settings.ul_baudrate = opt->baudrate;
   81d02:	683b      	ldr	r3, [r7, #0]
   81d04:	681b      	ldr	r3, [r3, #0]
   81d06:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_mode = opt->paritytype;
   81d08:	683b      	ldr	r3, [r7, #0]
   81d0a:	689b      	ldr	r3, [r3, #8]
   81d0c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
   81d0e:	683b      	ldr	r3, [r7, #0]
   81d10:	681b      	ldr	r3, [r3, #0]
   81d12:	60bb      	str	r3, [r7, #8]
	usart_settings.char_length = opt->charlength;
   81d14:	683b      	ldr	r3, [r7, #0]
   81d16:	685b      	ldr	r3, [r3, #4]
   81d18:	60fb      	str	r3, [r7, #12]
	usart_settings.parity_type = opt->paritytype;
   81d1a:	683b      	ldr	r3, [r7, #0]
   81d1c:	689b      	ldr	r3, [r3, #8]
   81d1e:	613b      	str	r3, [r7, #16]
	usart_settings.stop_bits= opt->stopbits;
   81d20:	683b      	ldr	r3, [r7, #0]
   81d22:	7b1b      	ldrb	r3, [r3, #12]
   81d24:	617b      	str	r3, [r7, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
   81d26:	2300      	movs	r3, #0
   81d28:	61bb      	str	r3, [r7, #24]
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
   81d2a:	687b      	ldr	r3, [r7, #4]
   81d2c:	4a34      	ldr	r2, [pc, #208]	; (81e00 <usart_serial_init+0x110>)
   81d2e:	4293      	cmp	r3, r2
   81d30:	d108      	bne.n	81d44 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART);
   81d32:	2008      	movs	r0, #8
   81d34:	4b33      	ldr	r3, [pc, #204]	; (81e04 <usart_serial_init+0x114>)
   81d36:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   81d38:	f107 0320 	add.w	r3, r7, #32
   81d3c:	6878      	ldr	r0, [r7, #4]
   81d3e:	4619      	mov	r1, r3
   81d40:	4b31      	ldr	r3, [pc, #196]	; (81e08 <usart_serial_init+0x118>)
   81d42:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81d44:	687b      	ldr	r3, [r7, #4]
   81d46:	4a31      	ldr	r2, [pc, #196]	; (81e0c <usart_serial_init+0x11c>)
   81d48:	4293      	cmp	r3, r2
   81d4a:	d111      	bne.n	81d70 <usart_serial_init+0x80>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART0);
   81d4c:	2011      	movs	r0, #17
   81d4e:	4b2d      	ldr	r3, [pc, #180]	; (81e04 <usart_serial_init+0x114>)
   81d50:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   81d52:	4b2a      	ldr	r3, [pc, #168]	; (81dfc <usart_serial_init+0x10c>)
   81d54:	4798      	blx	r3
   81d56:	4602      	mov	r2, r0
   81d58:	f107 0308 	add.w	r3, r7, #8
   81d5c:	6878      	ldr	r0, [r7, #4]
   81d5e:	4619      	mov	r1, r3
   81d60:	4b2b      	ldr	r3, [pc, #172]	; (81e10 <usart_serial_init+0x120>)
   81d62:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   81d64:	6878      	ldr	r0, [r7, #4]
   81d66:	4b2b      	ldr	r3, [pc, #172]	; (81e14 <usart_serial_init+0x124>)
   81d68:	4798      	blx	r3
		usart_enable_rx(p_usart);
   81d6a:	6878      	ldr	r0, [r7, #4]
   81d6c:	4b2a      	ldr	r3, [pc, #168]	; (81e18 <usart_serial_init+0x128>)
   81d6e:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81d70:	687b      	ldr	r3, [r7, #4]
   81d72:	4a2a      	ldr	r2, [pc, #168]	; (81e1c <usart_serial_init+0x12c>)
   81d74:	4293      	cmp	r3, r2
   81d76:	d111      	bne.n	81d9c <usart_serial_init+0xac>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART1);
   81d78:	2012      	movs	r0, #18
   81d7a:	4b22      	ldr	r3, [pc, #136]	; (81e04 <usart_serial_init+0x114>)
   81d7c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   81d7e:	4b1f      	ldr	r3, [pc, #124]	; (81dfc <usart_serial_init+0x10c>)
   81d80:	4798      	blx	r3
   81d82:	4602      	mov	r2, r0
   81d84:	f107 0308 	add.w	r3, r7, #8
   81d88:	6878      	ldr	r0, [r7, #4]
   81d8a:	4619      	mov	r1, r3
   81d8c:	4b20      	ldr	r3, [pc, #128]	; (81e10 <usart_serial_init+0x120>)
   81d8e:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   81d90:	6878      	ldr	r0, [r7, #4]
   81d92:	4b20      	ldr	r3, [pc, #128]	; (81e14 <usart_serial_init+0x124>)
   81d94:	4798      	blx	r3
		usart_enable_rx(p_usart);
   81d96:	6878      	ldr	r0, [r7, #4]
   81d98:	4b1f      	ldr	r3, [pc, #124]	; (81e18 <usart_serial_init+0x128>)
   81d9a:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81d9c:	687b      	ldr	r3, [r7, #4]
   81d9e:	4a20      	ldr	r2, [pc, #128]	; (81e20 <usart_serial_init+0x130>)
   81da0:	4293      	cmp	r3, r2
   81da2:	d111      	bne.n	81dc8 <usart_serial_init+0xd8>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART2);
   81da4:	2013      	movs	r0, #19
   81da6:	4b17      	ldr	r3, [pc, #92]	; (81e04 <usart_serial_init+0x114>)
   81da8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   81daa:	4b14      	ldr	r3, [pc, #80]	; (81dfc <usart_serial_init+0x10c>)
   81dac:	4798      	blx	r3
   81dae:	4602      	mov	r2, r0
   81db0:	f107 0308 	add.w	r3, r7, #8
   81db4:	6878      	ldr	r0, [r7, #4]
   81db6:	4619      	mov	r1, r3
   81db8:	4b15      	ldr	r3, [pc, #84]	; (81e10 <usart_serial_init+0x120>)
   81dba:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   81dbc:	6878      	ldr	r0, [r7, #4]
   81dbe:	4b15      	ldr	r3, [pc, #84]	; (81e14 <usart_serial_init+0x124>)
   81dc0:	4798      	blx	r3
		usart_enable_rx(p_usart);
   81dc2:	6878      	ldr	r0, [r7, #4]
   81dc4:	4b14      	ldr	r3, [pc, #80]	; (81e18 <usart_serial_init+0x128>)
   81dc6:	4798      	blx	r3
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81dc8:	687b      	ldr	r3, [r7, #4]
   81dca:	4a16      	ldr	r2, [pc, #88]	; (81e24 <usart_serial_init+0x134>)
   81dcc:	4293      	cmp	r3, r2
   81dce:	d111      	bne.n	81df4 <usart_serial_init+0x104>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART3);
   81dd0:	2014      	movs	r0, #20
   81dd2:	4b0c      	ldr	r3, [pc, #48]	; (81e04 <usart_serial_init+0x114>)
   81dd4:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   81dd6:	4b09      	ldr	r3, [pc, #36]	; (81dfc <usart_serial_init+0x10c>)
   81dd8:	4798      	blx	r3
   81dda:	4602      	mov	r2, r0
   81ddc:	f107 0308 	add.w	r3, r7, #8
   81de0:	6878      	ldr	r0, [r7, #4]
   81de2:	4619      	mov	r1, r3
   81de4:	4b0a      	ldr	r3, [pc, #40]	; (81e10 <usart_serial_init+0x120>)
   81de6:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   81de8:	6878      	ldr	r0, [r7, #4]
   81dea:	4b0a      	ldr	r3, [pc, #40]	; (81e14 <usart_serial_init+0x124>)
   81dec:	4798      	blx	r3
		usart_enable_rx(p_usart);
   81dee:	6878      	ldr	r0, [r7, #4]
   81df0:	4b09      	ldr	r3, [pc, #36]	; (81e18 <usart_serial_init+0x128>)
   81df2:	4798      	blx	r3
		usart_enable_rx(p_usart);
	}
# endif
#endif /* ifdef USART */

}
   81df4:	3730      	adds	r7, #48	; 0x30
   81df6:	46bd      	mov	sp, r7
   81df8:	bd80      	pop	{r7, pc}
   81dfa:	bf00      	nop
   81dfc:	00081cc5 	.word	0x00081cc5
   81e00:	400e0800 	.word	0x400e0800
   81e04:	00081cd9 	.word	0x00081cd9
   81e08:	00081799 	.word	0x00081799
   81e0c:	40098000 	.word	0x40098000
   81e10:	000819a5 	.word	0x000819a5
   81e14:	00081a29 	.word	0x00081a29
   81e18:	00081a59 	.word	0x00081a59
   81e1c:	4009c000 	.word	0x4009c000
   81e20:	400a0000 	.word	0x400a0000
   81e24:	400a4000 	.word	0x400a4000

00081e28 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   81e28:	b580      	push	{r7, lr}
   81e2a:	b082      	sub	sp, #8
   81e2c:	af00      	add	r7, sp, #0
   81e2e:	6078      	str	r0, [r7, #4]
   81e30:	460b      	mov	r3, r1
   81e32:	70fb      	strb	r3, [r7, #3]
#ifdef UART
	if (UART == (Uart*)p_usart) {
   81e34:	687b      	ldr	r3, [r7, #4]
   81e36:	4a27      	ldr	r2, [pc, #156]	; (81ed4 <usart_serial_putchar+0xac>)
   81e38:	4293      	cmp	r3, r2
   81e3a:	d10a      	bne.n	81e52 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
   81e3c:	bf00      	nop
   81e3e:	78fb      	ldrb	r3, [r7, #3]
   81e40:	6878      	ldr	r0, [r7, #4]
   81e42:	4619      	mov	r1, r3
   81e44:	4b24      	ldr	r3, [pc, #144]	; (81ed8 <usart_serial_putchar+0xb0>)
   81e46:	4798      	blx	r3
   81e48:	4603      	mov	r3, r0
   81e4a:	2b00      	cmp	r3, #0
   81e4c:	d1f7      	bne.n	81e3e <usart_serial_putchar+0x16>
		return 1;
   81e4e:	2301      	movs	r3, #1
   81e50:	e03c      	b.n	81ecc <usart_serial_putchar+0xa4>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81e52:	687b      	ldr	r3, [r7, #4]
   81e54:	4a21      	ldr	r2, [pc, #132]	; (81edc <usart_serial_putchar+0xb4>)
   81e56:	4293      	cmp	r3, r2
   81e58:	d10a      	bne.n	81e70 <usart_serial_putchar+0x48>
		while (usart_write(p_usart, c)!=0);
   81e5a:	bf00      	nop
   81e5c:	78fb      	ldrb	r3, [r7, #3]
   81e5e:	6878      	ldr	r0, [r7, #4]
   81e60:	4619      	mov	r1, r3
   81e62:	4b1f      	ldr	r3, [pc, #124]	; (81ee0 <usart_serial_putchar+0xb8>)
   81e64:	4798      	blx	r3
   81e66:	4603      	mov	r3, r0
   81e68:	2b00      	cmp	r3, #0
   81e6a:	d1f7      	bne.n	81e5c <usart_serial_putchar+0x34>
		return 1;
   81e6c:	2301      	movs	r3, #1
   81e6e:	e02d      	b.n	81ecc <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81e70:	687b      	ldr	r3, [r7, #4]
   81e72:	4a1c      	ldr	r2, [pc, #112]	; (81ee4 <usart_serial_putchar+0xbc>)
   81e74:	4293      	cmp	r3, r2
   81e76:	d10a      	bne.n	81e8e <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
   81e78:	bf00      	nop
   81e7a:	78fb      	ldrb	r3, [r7, #3]
   81e7c:	6878      	ldr	r0, [r7, #4]
   81e7e:	4619      	mov	r1, r3
   81e80:	4b17      	ldr	r3, [pc, #92]	; (81ee0 <usart_serial_putchar+0xb8>)
   81e82:	4798      	blx	r3
   81e84:	4603      	mov	r3, r0
   81e86:	2b00      	cmp	r3, #0
   81e88:	d1f7      	bne.n	81e7a <usart_serial_putchar+0x52>
		return 1;
   81e8a:	2301      	movs	r3, #1
   81e8c:	e01e      	b.n	81ecc <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81e8e:	687b      	ldr	r3, [r7, #4]
   81e90:	4a15      	ldr	r2, [pc, #84]	; (81ee8 <usart_serial_putchar+0xc0>)
   81e92:	4293      	cmp	r3, r2
   81e94:	d10a      	bne.n	81eac <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
   81e96:	bf00      	nop
   81e98:	78fb      	ldrb	r3, [r7, #3]
   81e9a:	6878      	ldr	r0, [r7, #4]
   81e9c:	4619      	mov	r1, r3
   81e9e:	4b10      	ldr	r3, [pc, #64]	; (81ee0 <usart_serial_putchar+0xb8>)
   81ea0:	4798      	blx	r3
   81ea2:	4603      	mov	r3, r0
   81ea4:	2b00      	cmp	r3, #0
   81ea6:	d1f7      	bne.n	81e98 <usart_serial_putchar+0x70>
		return 1;
   81ea8:	2301      	movs	r3, #1
   81eaa:	e00f      	b.n	81ecc <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81eac:	687b      	ldr	r3, [r7, #4]
   81eae:	4a0f      	ldr	r2, [pc, #60]	; (81eec <usart_serial_putchar+0xc4>)
   81eb0:	4293      	cmp	r3, r2
   81eb2:	d10a      	bne.n	81eca <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
   81eb4:	bf00      	nop
   81eb6:	78fb      	ldrb	r3, [r7, #3]
   81eb8:	6878      	ldr	r0, [r7, #4]
   81eba:	4619      	mov	r1, r3
   81ebc:	4b08      	ldr	r3, [pc, #32]	; (81ee0 <usart_serial_putchar+0xb8>)
   81ebe:	4798      	blx	r3
   81ec0:	4603      	mov	r3, r0
   81ec2:	2b00      	cmp	r3, #0
   81ec4:	d1f7      	bne.n	81eb6 <usart_serial_putchar+0x8e>
		return 1;
   81ec6:	2301      	movs	r3, #1
   81ec8:	e000      	b.n	81ecc <usart_serial_putchar+0xa4>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   81eca:	2300      	movs	r3, #0
}
   81ecc:	4618      	mov	r0, r3
   81ece:	3708      	adds	r7, #8
   81ed0:	46bd      	mov	sp, r7
   81ed2:	bd80      	pop	{r7, pc}
   81ed4:	400e0800 	.word	0x400e0800
   81ed8:	00081861 	.word	0x00081861
   81edc:	40098000 	.word	0x40098000
   81ee0:	00081ac1 	.word	0x00081ac1
   81ee4:	4009c000 	.word	0x4009c000
   81ee8:	400a0000 	.word	0x400a0000
   81eec:	400a4000 	.word	0x400a4000

00081ef0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   81ef0:	b580      	push	{r7, lr}
   81ef2:	b084      	sub	sp, #16
   81ef4:	af00      	add	r7, sp, #0
   81ef6:	6078      	str	r0, [r7, #4]
   81ef8:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
   81efa:	2300      	movs	r3, #0
   81efc:	60fb      	str	r3, [r7, #12]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   81efe:	687b      	ldr	r3, [r7, #4]
   81f00:	4a2a      	ldr	r2, [pc, #168]	; (81fac <usart_serial_getchar+0xbc>)
   81f02:	4293      	cmp	r3, r2
   81f04:	d107      	bne.n	81f16 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
   81f06:	bf00      	nop
   81f08:	6878      	ldr	r0, [r7, #4]
   81f0a:	6839      	ldr	r1, [r7, #0]
   81f0c:	4b28      	ldr	r3, [pc, #160]	; (81fb0 <usart_serial_getchar+0xc0>)
   81f0e:	4798      	blx	r3
   81f10:	4603      	mov	r3, r0
   81f12:	2b00      	cmp	r3, #0
   81f14:	d1f8      	bne.n	81f08 <usart_serial_getchar+0x18>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81f16:	687b      	ldr	r3, [r7, #4]
   81f18:	4a26      	ldr	r2, [pc, #152]	; (81fb4 <usart_serial_getchar+0xc4>)
   81f1a:	4293      	cmp	r3, r2
   81f1c:	d10d      	bne.n	81f3a <usart_serial_getchar+0x4a>
		while (usart_read(p_usart, &val));
   81f1e:	bf00      	nop
   81f20:	f107 030c 	add.w	r3, r7, #12
   81f24:	6878      	ldr	r0, [r7, #4]
   81f26:	4619      	mov	r1, r3
   81f28:	4b23      	ldr	r3, [pc, #140]	; (81fb8 <usart_serial_getchar+0xc8>)
   81f2a:	4798      	blx	r3
   81f2c:	4603      	mov	r3, r0
   81f2e:	2b00      	cmp	r3, #0
   81f30:	d1f6      	bne.n	81f20 <usart_serial_getchar+0x30>
		*data = (uint8_t)(val & 0xFF);
   81f32:	68fb      	ldr	r3, [r7, #12]
   81f34:	b2da      	uxtb	r2, r3
   81f36:	683b      	ldr	r3, [r7, #0]
   81f38:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81f3a:	687b      	ldr	r3, [r7, #4]
   81f3c:	4a1f      	ldr	r2, [pc, #124]	; (81fbc <usart_serial_getchar+0xcc>)
   81f3e:	4293      	cmp	r3, r2
   81f40:	d10d      	bne.n	81f5e <usart_serial_getchar+0x6e>
		while (usart_read(p_usart, &val));
   81f42:	bf00      	nop
   81f44:	f107 030c 	add.w	r3, r7, #12
   81f48:	6878      	ldr	r0, [r7, #4]
   81f4a:	4619      	mov	r1, r3
   81f4c:	4b1a      	ldr	r3, [pc, #104]	; (81fb8 <usart_serial_getchar+0xc8>)
   81f4e:	4798      	blx	r3
   81f50:	4603      	mov	r3, r0
   81f52:	2b00      	cmp	r3, #0
   81f54:	d1f6      	bne.n	81f44 <usart_serial_getchar+0x54>
		*data = (uint8_t)(val & 0xFF);
   81f56:	68fb      	ldr	r3, [r7, #12]
   81f58:	b2da      	uxtb	r2, r3
   81f5a:	683b      	ldr	r3, [r7, #0]
   81f5c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81f5e:	687b      	ldr	r3, [r7, #4]
   81f60:	4a17      	ldr	r2, [pc, #92]	; (81fc0 <usart_serial_getchar+0xd0>)
   81f62:	4293      	cmp	r3, r2
   81f64:	d10d      	bne.n	81f82 <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
   81f66:	bf00      	nop
   81f68:	f107 030c 	add.w	r3, r7, #12
   81f6c:	6878      	ldr	r0, [r7, #4]
   81f6e:	4619      	mov	r1, r3
   81f70:	4b11      	ldr	r3, [pc, #68]	; (81fb8 <usart_serial_getchar+0xc8>)
   81f72:	4798      	blx	r3
   81f74:	4603      	mov	r3, r0
   81f76:	2b00      	cmp	r3, #0
   81f78:	d1f6      	bne.n	81f68 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
   81f7a:	68fb      	ldr	r3, [r7, #12]
   81f7c:	b2da      	uxtb	r2, r3
   81f7e:	683b      	ldr	r3, [r7, #0]
   81f80:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81f82:	687b      	ldr	r3, [r7, #4]
   81f84:	4a0f      	ldr	r2, [pc, #60]	; (81fc4 <usart_serial_getchar+0xd4>)
   81f86:	4293      	cmp	r3, r2
   81f88:	d10d      	bne.n	81fa6 <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
   81f8a:	bf00      	nop
   81f8c:	f107 030c 	add.w	r3, r7, #12
   81f90:	6878      	ldr	r0, [r7, #4]
   81f92:	4619      	mov	r1, r3
   81f94:	4b08      	ldr	r3, [pc, #32]	; (81fb8 <usart_serial_getchar+0xc8>)
   81f96:	4798      	blx	r3
   81f98:	4603      	mov	r3, r0
   81f9a:	2b00      	cmp	r3, #0
   81f9c:	d1f6      	bne.n	81f8c <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
   81f9e:	68fb      	ldr	r3, [r7, #12]
   81fa0:	b2da      	uxtb	r2, r3
   81fa2:	683b      	ldr	r3, [r7, #0]
   81fa4:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   81fa6:	3710      	adds	r7, #16
   81fa8:	46bd      	mov	sp, r7
   81faa:	bd80      	pop	{r7, pc}
   81fac:	400e0800 	.word	0x400e0800
   81fb0:	00081891 	.word	0x00081891
   81fb4:	40098000 	.word	0x40098000
   81fb8:	00081af5 	.word	0x00081af5
   81fbc:	4009c000 	.word	0x4009c000
   81fc0:	400a0000 	.word	0x400a0000
   81fc4:	400a4000 	.word	0x400a4000

00081fc8 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
   81fc8:	b580      	push	{r7, lr}
   81fca:	b082      	sub	sp, #8
   81fcc:	af00      	add	r7, sp, #0
   81fce:	6078      	str	r0, [r7, #4]
   81fd0:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
   81fd2:	4a0f      	ldr	r2, [pc, #60]	; (82010 <stdio_serial_init+0x48>)
   81fd4:	687b      	ldr	r3, [r7, #4]
   81fd6:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   81fd8:	4b0e      	ldr	r3, [pc, #56]	; (82014 <stdio_serial_init+0x4c>)
   81fda:	4a0f      	ldr	r2, [pc, #60]	; (82018 <stdio_serial_init+0x50>)
   81fdc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   81fde:	4b0f      	ldr	r3, [pc, #60]	; (8201c <stdio_serial_init+0x54>)
   81fe0:	4a0f      	ldr	r2, [pc, #60]	; (82020 <stdio_serial_init+0x58>)
   81fe2:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
   81fe4:	6878      	ldr	r0, [r7, #4]
   81fe6:	6839      	ldr	r1, [r7, #0]
   81fe8:	4b0e      	ldr	r3, [pc, #56]	; (82024 <stdio_serial_init+0x5c>)
   81fea:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   81fec:	4b0e      	ldr	r3, [pc, #56]	; (82028 <stdio_serial_init+0x60>)
   81fee:	681b      	ldr	r3, [r3, #0]
   81ff0:	689b      	ldr	r3, [r3, #8]
   81ff2:	4618      	mov	r0, r3
   81ff4:	2100      	movs	r1, #0
   81ff6:	4b0d      	ldr	r3, [pc, #52]	; (8202c <stdio_serial_init+0x64>)
   81ff8:	4798      	blx	r3
	setbuf(stdin, NULL);
   81ffa:	4b0b      	ldr	r3, [pc, #44]	; (82028 <stdio_serial_init+0x60>)
   81ffc:	681b      	ldr	r3, [r3, #0]
   81ffe:	685b      	ldr	r3, [r3, #4]
   82000:	4618      	mov	r0, r3
   82002:	2100      	movs	r1, #0
   82004:	4b09      	ldr	r3, [pc, #36]	; (8202c <stdio_serial_init+0x64>)
   82006:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
   82008:	3708      	adds	r7, #8
   8200a:	46bd      	mov	sp, r7
   8200c:	bd80      	pop	{r7, pc}
   8200e:	bf00      	nop
   82010:	20071204 	.word	0x20071204
   82014:	20071200 	.word	0x20071200
   82018:	00081e29 	.word	0x00081e29
   8201c:	200711fc 	.word	0x200711fc
   82020:	00081ef1 	.word	0x00081ef1
   82024:	00081cf1 	.word	0x00081cf1
   82028:	20070830 	.word	0x20070830
   8202c:	00083ef5 	.word	0x00083ef5

00082030 <UART_Handler>:
};
uint8_t feedcount_flag = 0;
uint32_t acid_count = 0;
uint32_t bicarb_count = 0;
void UART_Handler()
{
   82030:	b580      	push	{r7, lr}
   82032:	b082      	sub	sp, #8
   82034:	af00      	add	r7, sp, #0
	static uint8_t cnt=0;
	cnt++;
   82036:	4b29      	ldr	r3, [pc, #164]	; (820dc <UART_Handler+0xac>)
   82038:	781b      	ldrb	r3, [r3, #0]
   8203a:	3301      	adds	r3, #1
   8203c:	b2da      	uxtb	r2, r3
   8203e:	4b27      	ldr	r3, [pc, #156]	; (820dc <UART_Handler+0xac>)
   82040:	701a      	strb	r2, [r3, #0]
	//printf("l\n");
	uint32_t status;
	//static dummy_1=0;
	uint8_t rx_val;
	status= UART->UART_SR;
   82042:	4b27      	ldr	r3, [pc, #156]	; (820e0 <UART_Handler+0xb0>)
   82044:	695b      	ldr	r3, [r3, #20]
   82046:	607b      	str	r3, [r7, #4]
	if(status & 0x01)
   82048:	687b      	ldr	r3, [r7, #4]
   8204a:	f003 0301 	and.w	r3, r3, #1
   8204e:	2b00      	cmp	r3, #0
   82050:	d041      	beq.n	820d6 <UART_Handler+0xa6>
	{
		rx_val=UART->UART_RHR;
   82052:	4b23      	ldr	r3, [pc, #140]	; (820e0 <UART_Handler+0xb0>)
   82054:	699b      	ldr	r3, [r3, #24]
   82056:	70fb      	strb	r3, [r7, #3]
		rx_val=rx_val+127;
   82058:	78fb      	ldrb	r3, [r7, #3]
   8205a:	337f      	adds	r3, #127	; 0x7f
   8205c:	70fb      	strb	r3, [r7, #3]
		if (cnt==1)
   8205e:	4b1f      	ldr	r3, [pc, #124]	; (820dc <UART_Handler+0xac>)
   82060:	781b      	ldrb	r3, [r3, #0]
   82062:	2b01      	cmp	r3, #1
   82064:	d104      	bne.n	82070 <UART_Handler+0x40>
		{
			rc=rx_val;
   82066:	78fb      	ldrb	r3, [r7, #3]
   82068:	b29a      	uxth	r2, r3
   8206a:	4b1e      	ldr	r3, [pc, #120]	; (820e4 <UART_Handler+0xb4>)
   8206c:	801a      	strh	r2, [r3, #0]
   8206e:	e00a      	b.n	82086 <UART_Handler+0x56>
		}
		else if (cnt==2)
   82070:	4b1a      	ldr	r3, [pc, #104]	; (820dc <UART_Handler+0xac>)
   82072:	781b      	ldrb	r3, [r3, #0]
   82074:	2b02      	cmp	r3, #2
   82076:	d106      	bne.n	82086 <UART_Handler+0x56>
		{
			bic_rc=rx_val;
   82078:	78fb      	ldrb	r3, [r7, #3]
   8207a:	b29a      	uxth	r2, r3
   8207c:	4b1a      	ldr	r3, [pc, #104]	; (820e8 <UART_Handler+0xb8>)
   8207e:	801a      	strh	r2, [r3, #0]
			cnt=0;
   82080:	4b16      	ldr	r3, [pc, #88]	; (820dc <UART_Handler+0xac>)
   82082:	2200      	movs	r2, #0
   82084:	701a      	strb	r2, [r3, #0]
		}
		printf("%d %d\n",rc,bic_rc);
   82086:	4b17      	ldr	r3, [pc, #92]	; (820e4 <UART_Handler+0xb4>)
   82088:	881b      	ldrh	r3, [r3, #0]
   8208a:	461a      	mov	r2, r3
   8208c:	4b16      	ldr	r3, [pc, #88]	; (820e8 <UART_Handler+0xb8>)
   8208e:	881b      	ldrh	r3, [r3, #0]
   82090:	4816      	ldr	r0, [pc, #88]	; (820ec <UART_Handler+0xbc>)
   82092:	4611      	mov	r1, r2
   82094:	461a      	mov	r2, r3
   82096:	4b16      	ldr	r3, [pc, #88]	; (820f0 <UART_Handler+0xc0>)
   82098:	4798      	blx	r3
		tc_stop(TC0,0);
   8209a:	4816      	ldr	r0, [pc, #88]	; (820f4 <UART_Handler+0xc4>)
   8209c:	2100      	movs	r1, #0
   8209e:	4b16      	ldr	r3, [pc, #88]	; (820f8 <UART_Handler+0xc8>)
   820a0:	4798      	blx	r3
		tc_stop(TC0,1);
   820a2:	4814      	ldr	r0, [pc, #80]	; (820f4 <UART_Handler+0xc4>)
   820a4:	2101      	movs	r1, #1
   820a6:	4b14      	ldr	r3, [pc, #80]	; (820f8 <UART_Handler+0xc8>)
   820a8:	4798      	blx	r3
		tc_write_rc(TC0,0,rc);
   820aa:	4b0e      	ldr	r3, [pc, #56]	; (820e4 <UART_Handler+0xb4>)
   820ac:	881b      	ldrh	r3, [r3, #0]
   820ae:	4811      	ldr	r0, [pc, #68]	; (820f4 <UART_Handler+0xc4>)
   820b0:	2100      	movs	r1, #0
   820b2:	461a      	mov	r2, r3
   820b4:	4b11      	ldr	r3, [pc, #68]	; (820fc <UART_Handler+0xcc>)
   820b6:	4798      	blx	r3
		tc_write_rc(TC0,1,bic_rc);
   820b8:	4b0b      	ldr	r3, [pc, #44]	; (820e8 <UART_Handler+0xb8>)
   820ba:	881b      	ldrh	r3, [r3, #0]
   820bc:	480d      	ldr	r0, [pc, #52]	; (820f4 <UART_Handler+0xc4>)
   820be:	2101      	movs	r1, #1
   820c0:	461a      	mov	r2, r3
   820c2:	4b0e      	ldr	r3, [pc, #56]	; (820fc <UART_Handler+0xcc>)
   820c4:	4798      	blx	r3
		tc_start(TC0,0);
   820c6:	480b      	ldr	r0, [pc, #44]	; (820f4 <UART_Handler+0xc4>)
   820c8:	2100      	movs	r1, #0
   820ca:	4b0d      	ldr	r3, [pc, #52]	; (82100 <UART_Handler+0xd0>)
   820cc:	4798      	blx	r3
		tc_start(TC0,1);
   820ce:	4809      	ldr	r0, [pc, #36]	; (820f4 <UART_Handler+0xc4>)
   820d0:	2101      	movs	r1, #1
   820d2:	4b0b      	ldr	r3, [pc, #44]	; (82100 <UART_Handler+0xd0>)
   820d4:	4798      	blx	r3
	}
}
   820d6:	3708      	adds	r7, #8
   820d8:	46bd      	mov	sp, r7
   820da:	bd80      	pop	{r7, pc}
   820dc:	20070cec 	.word	0x20070cec
   820e0:	400e0800 	.word	0x400e0800
   820e4:	20070cde 	.word	0x20070cde
   820e8:	20071220 	.word	0x20071220
   820ec:	00086dbc 	.word	0x00086dbc
   820f0:	00083e31 	.word	0x00083e31
   820f4:	40080000 	.word	0x40080000
   820f8:	00081709 	.word	0x00081709
   820fc:	00081729 	.word	0x00081729
   82100:	000816e9 	.word	0x000816e9

00082104 <main>:
int main (void)
{
   82104:	b590      	push	{r4, r7, lr}
   82106:	b087      	sub	sp, #28
   82108:	af00      	add	r7, sp, #0
	uint8_t uc_key;
	board_init();
   8210a:	4b1a      	ldr	r3, [pc, #104]	; (82174 <main+0x70>)
   8210c:	4798      	blx	r3
	CPU3_S_SYSTEM_INIT();
   8210e:	4b1a      	ldr	r3, [pc, #104]	; (82178 <main+0x74>)
   82110:	4798      	blx	r3
	//configure_console();
	sysclk_enable_peripheral_clock(ID_UART);
   82112:	2008      	movs	r0, #8
   82114:	4b19      	ldr	r3, [pc, #100]	; (8217c <main+0x78>)
   82116:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOA);
   82118:	200b      	movs	r0, #11
   8211a:	4b19      	ldr	r3, [pc, #100]	; (82180 <main+0x7c>)
   8211c:	4798      	blx	r3
	UART->UART_CR	= 0x00000050;
   8211e:	4b19      	ldr	r3, [pc, #100]	; (82184 <main+0x80>)
   82120:	2250      	movs	r2, #80	; 0x50
   82122:	601a      	str	r2, [r3, #0]
	UART->UART_MR	= 0x00000800;
   82124:	4b17      	ldr	r3, [pc, #92]	; (82184 <main+0x80>)
   82126:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8212a:	605a      	str	r2, [r3, #4]
	UART->UART_BRGR = 0x00000046;
   8212c:	4b15      	ldr	r3, [pc, #84]	; (82184 <main+0x80>)
   8212e:	2246      	movs	r2, #70	; 0x46
   82130:	621a      	str	r2, [r3, #32]
	PIOA->PIO_PUER = 0x00000300;
   82132:	4b15      	ldr	r3, [pc, #84]	; (82188 <main+0x84>)
   82134:	f44f 7240 	mov.w	r2, #768	; 0x300
   82138:	665a      	str	r2, [r3, #100]	; 0x64
	
	stdio_serial_init(UART,&uart_serial_options);
   8213a:	4812      	ldr	r0, [pc, #72]	; (82184 <main+0x80>)
   8213c:	4913      	ldr	r1, [pc, #76]	; (8218c <main+0x88>)
   8213e:	4b14      	ldr	r3, [pc, #80]	; (82190 <main+0x8c>)
   82140:	4798      	blx	r3
	uart_enable(UART);
   82142:	4810      	ldr	r0, [pc, #64]	; (82184 <main+0x80>)
   82144:	4b13      	ldr	r3, [pc, #76]	; (82194 <main+0x90>)
   82146:	4798      	blx	r3
	uart_enable_rx(UART);
   82148:	480e      	ldr	r0, [pc, #56]	; (82184 <main+0x80>)
   8214a:	4b13      	ldr	r3, [pc, #76]	; (82198 <main+0x94>)
   8214c:	4798      	blx	r3
	uart_enable_tx(UART);
   8214e:	480d      	ldr	r0, [pc, #52]	; (82184 <main+0x80>)
   82150:	4b12      	ldr	r3, [pc, #72]	; (8219c <main+0x98>)
   82152:	4798      	blx	r3
	
	NVIC_DisableIRQ(UART_IRQn);
   82154:	2008      	movs	r0, #8
   82156:	4b12      	ldr	r3, [pc, #72]	; (821a0 <main+0x9c>)
   82158:	4798      	blx	r3
	NVIC_ClearPendingIRQ(UART_IRQn);
   8215a:	2008      	movs	r0, #8
   8215c:	4b11      	ldr	r3, [pc, #68]	; (821a4 <main+0xa0>)
   8215e:	4798      	blx	r3
	NVIC_SetPriority(UART_IRQn,0);
   82160:	2008      	movs	r0, #8
   82162:	2100      	movs	r1, #0
   82164:	4b10      	ldr	r3, [pc, #64]	; (821a8 <main+0xa4>)
   82166:	4798      	blx	r3
	NVIC_EnableIRQ(UART_IRQn);
   82168:	2008      	movs	r0, #8
   8216a:	4b10      	ldr	r3, [pc, #64]	; (821ac <main+0xa8>)
   8216c:	4798      	blx	r3
	
	for (int i=0;i <100000;i++)
   8216e:	2300      	movs	r3, #0
   82170:	617b      	str	r3, [r7, #20]
   82172:	e020      	b.n	821b6 <main+0xb2>
   82174:	00082de9 	.word	0x00082de9
   82178:	0008155d 	.word	0x0008155d
   8217c:	00081cd9 	.word	0x00081cd9
   82180:	000835dd 	.word	0x000835dd
   82184:	400e0800 	.word	0x400e0800
   82188:	400e0e00 	.word	0x400e0e00
   8218c:	00086dac 	.word	0x00086dac
   82190:	00081fc9 	.word	0x00081fc9
   82194:	0008182d 	.word	0x0008182d
   82198:	00081815 	.word	0x00081815
   8219c:	000817fd 	.word	0x000817fd
   821a0:	00081b79 	.word	0x00081b79
   821a4:	00081bad 	.word	0x00081bad
   821a8:	00081be1 	.word	0x00081be1
   821ac:	00081b49 	.word	0x00081b49
   821b0:	697b      	ldr	r3, [r7, #20]
   821b2:	3301      	adds	r3, #1
   821b4:	617b      	str	r3, [r7, #20]
   821b6:	697b      	ldr	r3, [r7, #20]
   821b8:	4a8f      	ldr	r2, [pc, #572]	; (823f8 <main+0x2f4>)
   821ba:	4293      	cmp	r3, r2
   821bc:	ddf8      	ble.n	821b0 <main+0xac>
	{
		;
	}
	printf("welcome\n");
   821be:	488f      	ldr	r0, [pc, #572]	; (823fc <main+0x2f8>)
   821c0:	4b8f      	ldr	r3, [pc, #572]	; (82400 <main+0x2fc>)
   821c2:	4798      	blx	r3
	
	pmc_enable_periph_clk(ID_PIOA);
   821c4:	200b      	movs	r0, #11
   821c6:	4b8f      	ldr	r3, [pc, #572]	; (82404 <main+0x300>)
   821c8:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOB);
   821ca:	200c      	movs	r0, #12
   821cc:	4b8d      	ldr	r3, [pc, #564]	; (82404 <main+0x300>)
   821ce:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOC);
   821d0:	200d      	movs	r0, #13
   821d2:	4b8c      	ldr	r3, [pc, #560]	; (82404 <main+0x300>)
   821d4:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOD);
   821d6:	200e      	movs	r0, #14
   821d8:	4b8a      	ldr	r3, [pc, #552]	; (82404 <main+0x300>)
   821da:	4798      	blx	r3
	static uint32_t dummy_1=0,flag_1=0,flag_1b=0,dummy_1b=0;
	static uint32_t status,status_bic,status_fdbck;
	static uint32_t prev_status=0, curr_status=0;
    static uint32_t prev_status_bic=0, curr_status_bic=0;
	static uint32_t prev_status_fdbck=0, curr_status_fdbck=0;
	status=(((PIOB->PIO_PDSR)>>25)&1);
   821dc:	4b8a      	ldr	r3, [pc, #552]	; (82408 <main+0x304>)
   821de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   821e0:	0e5b      	lsrs	r3, r3, #25
   821e2:	f003 0301 	and.w	r3, r3, #1
   821e6:	4a89      	ldr	r2, [pc, #548]	; (8240c <main+0x308>)
   821e8:	6013      	str	r3, [r2, #0]
	status_bic=(((PIOC->PIO_PDSR)>>28)&1);
   821ea:	4b89      	ldr	r3, [pc, #548]	; (82410 <main+0x30c>)
   821ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   821ee:	0f1b      	lsrs	r3, r3, #28
   821f0:	f003 0301 	and.w	r3, r3, #1
   821f4:	4a87      	ldr	r2, [pc, #540]	; (82414 <main+0x310>)
   821f6:	6013      	str	r3, [r2, #0]
	status_fdbck=(((PIOC->PIO_PDSR)>>26)&1);
   821f8:	4b85      	ldr	r3, [pc, #532]	; (82410 <main+0x30c>)
   821fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   821fc:	0e9b      	lsrs	r3, r3, #26
   821fe:	f003 0301 	and.w	r3, r3, #1
   82202:	4a85      	ldr	r2, [pc, #532]	; (82418 <main+0x314>)
   82204:	6013      	str	r3, [r2, #0]
	prev_status_bic=status_bic;
   82206:	4b83      	ldr	r3, [pc, #524]	; (82414 <main+0x310>)
   82208:	681b      	ldr	r3, [r3, #0]
   8220a:	4a84      	ldr	r2, [pc, #528]	; (8241c <main+0x318>)
   8220c:	6013      	str	r3, [r2, #0]
	prev_status_fdbck=status_fdbck;
   8220e:	4b82      	ldr	r3, [pc, #520]	; (82418 <main+0x314>)
   82210:	681b      	ldr	r3, [r3, #0]
   82212:	4a83      	ldr	r2, [pc, #524]	; (82420 <main+0x31c>)
   82214:	6013      	str	r3, [r2, #0]
	uint32_t stepcount = 1312499; // sanjeer - this is original value
   82216:	4b83      	ldr	r3, [pc, #524]	; (82424 <main+0x320>)
   82218:	613b      	str	r3, [r7, #16]
	uint32_t secondcount = (1312499/2  + 328124)  ;   //
   8221a:	4b83      	ldr	r3, [pc, #524]	; (82428 <main+0x324>)
   8221c:	60fb      	str	r3, [r7, #12]
//	uint32_t stepcount = 1351873; // changed to get right cond for clinical trial, need to re fix after adjusting angles again
//		uint32_t stepcount = 797782;
	uint32_t stepcount1 = 6562;
   8221e:	f641 13a2 	movw	r3, #6562	; 0x19a2
   82222:	60bb      	str	r3, [r7, #8]
	uart_enable_interrupt(UART,UART_SR_RXRDY);
   82224:	4881      	ldr	r0, [pc, #516]	; (8242c <main+0x328>)
   82226:	2101      	movs	r1, #1
   82228:	4b81      	ldr	r3, [pc, #516]	; (82430 <main+0x32c>)
   8222a:	4798      	blx	r3
	
	
	
PIOB->PIO_PER = 1 << 19 ; //TEST
   8222c:	4b76      	ldr	r3, [pc, #472]	; (82408 <main+0x304>)
   8222e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   82232:	601a      	str	r2, [r3, #0]
PIOB->PIO_OER = 1 << 19 ; //TEST
   82234:	4b74      	ldr	r3, [pc, #464]	; (82408 <main+0x304>)
   82236:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8223a:	611a      	str	r2, [r3, #16]
	
		
	
	while (FOREVER)
	{
		if(openfillstate != STATE_OPEN_FILL)
   8223c:	4b7d      	ldr	r3, [pc, #500]	; (82434 <main+0x330>)
   8223e:	781b      	ldrb	r3, [r3, #0]
   82240:	2b01      	cmp	r3, #1
   82242:	d057      	beq.n	822f4 <main+0x1f0>
		{
			
		
				if(flag_1==0)
   82244:	4b7c      	ldr	r3, [pc, #496]	; (82438 <main+0x334>)
   82246:	681b      	ldr	r3, [r3, #0]
   82248:	2b00      	cmp	r3, #0
   8224a:	d125      	bne.n	82298 <main+0x194>
				{
					status=(((PIOA->PIO_PDSR)>>14)&1);
   8224c:	4b7b      	ldr	r3, [pc, #492]	; (8243c <main+0x338>)
   8224e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82250:	0b9b      	lsrs	r3, r3, #14
   82252:	f003 0301 	and.w	r3, r3, #1
   82256:	4a6d      	ldr	r2, [pc, #436]	; (8240c <main+0x308>)
   82258:	6013      	str	r3, [r2, #0]
					if (status==1 && prev_status ==0)
   8225a:	4b6c      	ldr	r3, [pc, #432]	; (8240c <main+0x308>)
   8225c:	681b      	ldr	r3, [r3, #0]
   8225e:	2b01      	cmp	r3, #1
   82260:	d116      	bne.n	82290 <main+0x18c>
   82262:	4b77      	ldr	r3, [pc, #476]	; (82440 <main+0x33c>)
   82264:	681b      	ldr	r3, [r3, #0]
   82266:	2b00      	cmp	r3, #0
   82268:	d112      	bne.n	82290 <main+0x18c>
					{
						dummy_1++;
   8226a:	4b76      	ldr	r3, [pc, #472]	; (82444 <main+0x340>)
   8226c:	681b      	ldr	r3, [r3, #0]
   8226e:	3301      	adds	r3, #1
   82270:	4a74      	ldr	r2, [pc, #464]	; (82444 <main+0x340>)
   82272:	6013      	str	r3, [r2, #0]
						if (dummy_1==2)
   82274:	4b73      	ldr	r3, [pc, #460]	; (82444 <main+0x340>)
   82276:	681b      	ldr	r3, [r3, #0]
   82278:	2b02      	cmp	r3, #2
   8227a:	d109      	bne.n	82290 <main+0x18c>
						{
							tc_stop(TC0,0);
   8227c:	4872      	ldr	r0, [pc, #456]	; (82448 <main+0x344>)
   8227e:	2100      	movs	r1, #0
   82280:	4b72      	ldr	r3, [pc, #456]	; (8244c <main+0x348>)
   82282:	4798      	blx	r3
							dummy_1=0;
   82284:	4b6f      	ldr	r3, [pc, #444]	; (82444 <main+0x340>)
   82286:	2200      	movs	r2, #0
   82288:	601a      	str	r2, [r3, #0]
							flag_1=1;
   8228a:	4b6b      	ldr	r3, [pc, #428]	; (82438 <main+0x334>)
   8228c:	2201      	movs	r2, #1
   8228e:	601a      	str	r2, [r3, #0]
						}
				
					}
					prev_status= status;
   82290:	4b5e      	ldr	r3, [pc, #376]	; (8240c <main+0x308>)
   82292:	681b      	ldr	r3, [r3, #0]
   82294:	4a6a      	ldr	r2, [pc, #424]	; (82440 <main+0x33c>)
   82296:	6013      	str	r3, [r2, #0]
				}
				if((flag_1b==0) && (flag_1==1))
   82298:	4b6d      	ldr	r3, [pc, #436]	; (82450 <main+0x34c>)
   8229a:	681b      	ldr	r3, [r3, #0]
   8229c:	2b00      	cmp	r3, #0
   8229e:	d129      	bne.n	822f4 <main+0x1f0>
   822a0:	4b65      	ldr	r3, [pc, #404]	; (82438 <main+0x334>)
   822a2:	681b      	ldr	r3, [r3, #0]
   822a4:	2b01      	cmp	r3, #1
   822a6:	d125      	bne.n	822f4 <main+0x1f0>
				{
			                    
					status_bic=(((PIOA->PIO_PDSR)>>15)&1);
   822a8:	4b64      	ldr	r3, [pc, #400]	; (8243c <main+0x338>)
   822aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   822ac:	0bdb      	lsrs	r3, r3, #15
   822ae:	f003 0301 	and.w	r3, r3, #1
   822b2:	4a58      	ldr	r2, [pc, #352]	; (82414 <main+0x310>)
   822b4:	6013      	str	r3, [r2, #0]
			
					if (status_bic==1 && prev_status_bic ==0)
   822b6:	4b57      	ldr	r3, [pc, #348]	; (82414 <main+0x310>)
   822b8:	681b      	ldr	r3, [r3, #0]
   822ba:	2b01      	cmp	r3, #1
   822bc:	d116      	bne.n	822ec <main+0x1e8>
   822be:	4b57      	ldr	r3, [pc, #348]	; (8241c <main+0x318>)
   822c0:	681b      	ldr	r3, [r3, #0]
   822c2:	2b00      	cmp	r3, #0
   822c4:	d112      	bne.n	822ec <main+0x1e8>
					{
						dummy_1b++;
   822c6:	4b63      	ldr	r3, [pc, #396]	; (82454 <main+0x350>)
   822c8:	681b      	ldr	r3, [r3, #0]
   822ca:	3301      	adds	r3, #1
   822cc:	4a61      	ldr	r2, [pc, #388]	; (82454 <main+0x350>)
   822ce:	6013      	str	r3, [r2, #0]
						if (dummy_1b==2)
   822d0:	4b60      	ldr	r3, [pc, #384]	; (82454 <main+0x350>)
   822d2:	681b      	ldr	r3, [r3, #0]
   822d4:	2b02      	cmp	r3, #2
   822d6:	d109      	bne.n	822ec <main+0x1e8>
						{
							tc_stop(TC0,1);
   822d8:	485b      	ldr	r0, [pc, #364]	; (82448 <main+0x344>)
   822da:	2101      	movs	r1, #1
   822dc:	4b5b      	ldr	r3, [pc, #364]	; (8244c <main+0x348>)
   822de:	4798      	blx	r3
							dummy_1b=0;
   822e0:	4b5c      	ldr	r3, [pc, #368]	; (82454 <main+0x350>)
   822e2:	2200      	movs	r2, #0
   822e4:	601a      	str	r2, [r3, #0]
							flag_1b=1;
   822e6:	4b5a      	ldr	r3, [pc, #360]	; (82450 <main+0x34c>)
   822e8:	2201      	movs	r2, #1
   822ea:	601a      	str	r2, [r3, #0]
						}
				
					}
					prev_status_bic= status_bic;
   822ec:	4b49      	ldr	r3, [pc, #292]	; (82414 <main+0x310>)
   822ee:	681b      	ldr	r3, [r3, #0]
   822f0:	4a4a      	ldr	r2, [pc, #296]	; (8241c <main+0x318>)
   822f2:	6013      	str	r3, [r2, #0]
				}
		}
	
		
		if(feedcount_flag == 1)
   822f4:	4b58      	ldr	r3, [pc, #352]	; (82458 <main+0x354>)
   822f6:	781b      	ldrb	r3, [r3, #0]
   822f8:	2b01      	cmp	r3, #1
   822fa:	d13d      	bne.n	82378 <main+0x274>
		{
			
				status=(((PIOA->PIO_PDSR)>>14)&1);
   822fc:	4b4f      	ldr	r3, [pc, #316]	; (8243c <main+0x338>)
   822fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82300:	0b9b      	lsrs	r3, r3, #14
   82302:	f003 0301 	and.w	r3, r3, #1
   82306:	4a41      	ldr	r2, [pc, #260]	; (8240c <main+0x308>)
   82308:	6013      	str	r3, [r2, #0]
				if (status==1 && prev_status ==0)
   8230a:	4b40      	ldr	r3, [pc, #256]	; (8240c <main+0x308>)
   8230c:	681b      	ldr	r3, [r3, #0]
   8230e:	2b01      	cmp	r3, #1
   82310:	d10f      	bne.n	82332 <main+0x22e>
   82312:	4b4b      	ldr	r3, [pc, #300]	; (82440 <main+0x33c>)
   82314:	681b      	ldr	r3, [r3, #0]
   82316:	2b00      	cmp	r3, #0
   82318:	d10b      	bne.n	82332 <main+0x22e>
				{
					acid_count++;
   8231a:	4b50      	ldr	r3, [pc, #320]	; (8245c <main+0x358>)
   8231c:	681b      	ldr	r3, [r3, #0]
   8231e:	3301      	adds	r3, #1
   82320:	4a4e      	ldr	r2, [pc, #312]	; (8245c <main+0x358>)
   82322:	6013      	str	r3, [r2, #0]
					acid_f_b = acid_count;
   82324:	4b4d      	ldr	r3, [pc, #308]	; (8245c <main+0x358>)
   82326:	681b      	ldr	r3, [r3, #0]
   82328:	4a4d      	ldr	r2, [pc, #308]	; (82460 <main+0x35c>)
   8232a:	6013      	str	r3, [r2, #0]
					TC1_cnt = 0;
   8232c:	4b4d      	ldr	r3, [pc, #308]	; (82464 <main+0x360>)
   8232e:	2200      	movs	r2, #0
   82330:	601a      	str	r2, [r3, #0]
					
				}
				prev_status= status;
   82332:	4b36      	ldr	r3, [pc, #216]	; (8240c <main+0x308>)
   82334:	681b      	ldr	r3, [r3, #0]
   82336:	4a42      	ldr	r2, [pc, #264]	; (82440 <main+0x33c>)
   82338:	6013      	str	r3, [r2, #0]
				
					
					
			
			
				status_bic=(((PIOA->PIO_PDSR)>>15)&1);
   8233a:	4b40      	ldr	r3, [pc, #256]	; (8243c <main+0x338>)
   8233c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8233e:	0bdb      	lsrs	r3, r3, #15
   82340:	f003 0301 	and.w	r3, r3, #1
   82344:	4a33      	ldr	r2, [pc, #204]	; (82414 <main+0x310>)
   82346:	6013      	str	r3, [r2, #0]
				
				if (status_bic==1 && prev_status_bic ==0)
   82348:	4b32      	ldr	r3, [pc, #200]	; (82414 <main+0x310>)
   8234a:	681b      	ldr	r3, [r3, #0]
   8234c:	2b01      	cmp	r3, #1
   8234e:	d10f      	bne.n	82370 <main+0x26c>
   82350:	4b32      	ldr	r3, [pc, #200]	; (8241c <main+0x318>)
   82352:	681b      	ldr	r3, [r3, #0]
   82354:	2b00      	cmp	r3, #0
   82356:	d10b      	bne.n	82370 <main+0x26c>
				{
				      bicarb_count ++;
   82358:	4b43      	ldr	r3, [pc, #268]	; (82468 <main+0x364>)
   8235a:	681b      	ldr	r3, [r3, #0]
   8235c:	3301      	adds	r3, #1
   8235e:	4a42      	ldr	r2, [pc, #264]	; (82468 <main+0x364>)
   82360:	6013      	str	r3, [r2, #0]
					  bicarb_f_b = bicarb_count;
   82362:	4b41      	ldr	r3, [pc, #260]	; (82468 <main+0x364>)
   82364:	681b      	ldr	r3, [r3, #0]
   82366:	4a41      	ldr	r2, [pc, #260]	; (8246c <main+0x368>)
   82368:	6013      	str	r3, [r2, #0]
				 TC2_cnt = 0;
   8236a:	4b41      	ldr	r3, [pc, #260]	; (82470 <main+0x36c>)
   8236c:	2200      	movs	r2, #0
   8236e:	601a      	str	r2, [r3, #0]
				 
				}
				prev_status_bic= status_bic;
   82370:	4b28      	ldr	r3, [pc, #160]	; (82414 <main+0x310>)
   82372:	681b      	ldr	r3, [r3, #0]
   82374:	4a29      	ldr	r2, [pc, #164]	; (8241c <main+0x318>)
   82376:	6013      	str	r3, [r2, #0]
				
				
				
		}
 		if ((flag_nrmal == 1) && (flag_1 == 1) && (flag_1b == 1) && (OneSecFlag == 1)  )   // 
   82378:	4b3e      	ldr	r3, [pc, #248]	; (82474 <main+0x370>)
   8237a:	781b      	ldrb	r3, [r3, #0]
   8237c:	b2db      	uxtb	r3, r3
   8237e:	2b01      	cmp	r3, #1
   82380:	d137      	bne.n	823f2 <main+0x2ee>
   82382:	4b2d      	ldr	r3, [pc, #180]	; (82438 <main+0x334>)
   82384:	681b      	ldr	r3, [r3, #0]
   82386:	2b01      	cmp	r3, #1
   82388:	d133      	bne.n	823f2 <main+0x2ee>
   8238a:	4b31      	ldr	r3, [pc, #196]	; (82450 <main+0x34c>)
   8238c:	681b      	ldr	r3, [r3, #0]
   8238e:	2b01      	cmp	r3, #1
   82390:	d12f      	bne.n	823f2 <main+0x2ee>
   82392:	4b39      	ldr	r3, [pc, #228]	; (82478 <main+0x374>)
   82394:	781b      	ldrb	r3, [r3, #0]
   82396:	2b01      	cmp	r3, #1
   82398:	d12b      	bne.n	823f2 <main+0x2ee>
		{
			status_fdbck=(((PIOC->PIO_PDSR)>>26)&1);
   8239a:	4b1d      	ldr	r3, [pc, #116]	; (82410 <main+0x30c>)
   8239c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8239e:	0e9b      	lsrs	r3, r3, #26
   823a0:	f003 0301 	and.w	r3, r3, #1
   823a4:	4a1c      	ldr	r2, [pc, #112]	; (82418 <main+0x314>)
   823a6:	6013      	str	r3, [r2, #0]
			
//			if (status_fdbck==0 && prev_status_fdbck ==1)
			if (status_fdbck==1 && prev_status_fdbck ==0)
   823a8:	4b1b      	ldr	r3, [pc, #108]	; (82418 <main+0x314>)
   823aa:	681b      	ldr	r3, [r3, #0]
   823ac:	2b01      	cmp	r3, #1
   823ae:	d11c      	bne.n	823ea <main+0x2e6>
   823b0:	4b1b      	ldr	r3, [pc, #108]	; (82420 <main+0x31c>)
   823b2:	681b      	ldr	r3, [r3, #0]
   823b4:	2b00      	cmp	r3, #0
   823b6:	d118      	bne.n	823ea <main+0x2e6>
			{
				stop_pump();
   823b8:	4b30      	ldr	r3, [pc, #192]	; (8247c <main+0x378>)
   823ba:	4798      	blx	r3
				Correction_Count++;
   823bc:	4b30      	ldr	r3, [pc, #192]	; (82480 <main+0x37c>)
   823be:	781b      	ldrb	r3, [r3, #0]
   823c0:	3301      	adds	r3, #1
   823c2:	b2da      	uxtb	r2, r3
   823c4:	4b2e      	ldr	r3, [pc, #184]	; (82480 <main+0x37c>)
   823c6:	701a      	strb	r2, [r3, #0]
// 				}
// 				}
// 				}

//				rc=Set_RC;
				start_pump();
   823c8:	4b2e      	ldr	r3, [pc, #184]	; (82484 <main+0x380>)
   823ca:	4798      	blx	r3
				OneSecFlag = 0;
   823cc:	4b2a      	ldr	r3, [pc, #168]	; (82478 <main+0x374>)
   823ce:	2200      	movs	r2, #0
   823d0:	701a      	strb	r2, [r3, #0]
				
				startTimer1(TC0,2,TC2_IRQn,stepcount);
   823d2:	481d      	ldr	r0, [pc, #116]	; (82448 <main+0x344>)
   823d4:	2102      	movs	r1, #2
   823d6:	221d      	movs	r2, #29
   823d8:	693b      	ldr	r3, [r7, #16]
   823da:	4c2b      	ldr	r4, [pc, #172]	; (82488 <main+0x384>)
   823dc:	47a0      	blx	r4
				startTimer2(TC1,0,TC3_IRQn,secondcount);
   823de:	482b      	ldr	r0, [pc, #172]	; (8248c <main+0x388>)
   823e0:	2100      	movs	r1, #0
   823e2:	221e      	movs	r2, #30
   823e4:	68fb      	ldr	r3, [r7, #12]
   823e6:	4c2a      	ldr	r4, [pc, #168]	; (82490 <main+0x38c>)
   823e8:	47a0      	blx	r4
			}
			prev_status_fdbck= status_fdbck;
   823ea:	4b0b      	ldr	r3, [pc, #44]	; (82418 <main+0x314>)
   823ec:	681b      	ldr	r3, [r3, #0]
   823ee:	4a0c      	ldr	r2, [pc, #48]	; (82420 <main+0x31c>)
   823f0:	6013      	str	r3, [r2, #0]
		}

			switch (state_3)
   823f2:	4b28      	ldr	r3, [pc, #160]	; (82494 <main+0x390>)
   823f4:	781b      	ldrb	r3, [r3, #0]
   823f6:	e04f      	b.n	82498 <main+0x394>
   823f8:	0001869f 	.word	0x0001869f
   823fc:	00086dc4 	.word	0x00086dc4
   82400:	00083e31 	.word	0x00083e31
   82404:	000835dd 	.word	0x000835dd
   82408:	400e1000 	.word	0x400e1000
   8240c:	20070cf0 	.word	0x20070cf0
   82410:	400e1200 	.word	0x400e1200
   82414:	20070cf4 	.word	0x20070cf4
   82418:	20070cf8 	.word	0x20070cf8
   8241c:	20070cfc 	.word	0x20070cfc
   82420:	20070d00 	.word	0x20070d00
   82424:	001406f3 	.word	0x001406f3
   82428:	000f0535 	.word	0x000f0535
   8242c:	400e0800 	.word	0x400e0800
   82430:	00081845 	.word	0x00081845
   82434:	20070cdc 	.word	0x20070cdc
   82438:	20070d04 	.word	0x20070d04
   8243c:	400e0e00 	.word	0x400e0e00
   82440:	20070d08 	.word	0x20070d08
   82444:	20070d0c 	.word	0x20070d0c
   82448:	40080000 	.word	0x40080000
   8244c:	00081709 	.word	0x00081709
   82450:	20070d10 	.word	0x20070d10
   82454:	20070d14 	.word	0x20070d14
   82458:	20070ce3 	.word	0x20070ce3
   8245c:	20070ce4 	.word	0x20070ce4
   82460:	200711f8 	.word	0x200711f8
   82464:	20070ca8 	.word	0x20070ca8
   82468:	20070ce8 	.word	0x20070ce8
   8246c:	200711fa 	.word	0x200711fa
   82470:	20070cac 	.word	0x20070cac
   82474:	20070cdd 	.word	0x20070cdd
   82478:	20070cb8 	.word	0x20070cb8
   8247c:	00082a35 	.word	0x00082a35
   82480:	20070ce2 	.word	0x20070ce2
   82484:	00082885 	.word	0x00082885
   82488:	00081395 	.word	0x00081395
   8248c:	40084000 	.word	0x40084000
   82490:	00081405 	.word	0x00081405
   82494:	20070400 	.word	0x20070400
   82498:	2b05      	cmp	r3, #5
   8249a:	f63f aecf 	bhi.w	8223c <main+0x138>
   8249e:	a201      	add	r2, pc, #4	; (adr r2, 824a4 <main+0x3a0>)
   824a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   824a4:	000824bd 	.word	0x000824bd
   824a8:	000824ed 	.word	0x000824ed
   824ac:	0008223d 	.word	0x0008223d
   824b0:	000824d7 	.word	0x000824d7
   824b4:	00082507 	.word	0x00082507
   824b8:	0008251d 	.word	0x0008251d
			{
				case IDLE_ACID:
					//printf("acid alignment\n");
					rc = 1000;
   824bc:	4ba6      	ldr	r3, [pc, #664]	; (82758 <main+0x654>)
   824be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   824c2:	801a      	strh	r2, [r3, #0]
					start_acidpump();
   824c4:	4ba5      	ldr	r3, [pc, #660]	; (8275c <main+0x658>)
   824c6:	4798      	blx	r3
					state_3 = ALIGNMENT_ACID;
   824c8:	4ba5      	ldr	r3, [pc, #660]	; (82760 <main+0x65c>)
   824ca:	2203      	movs	r2, #3
   824cc:	701a      	strb	r2, [r3, #0]
					flag_nrmal=0;
   824ce:	4ba5      	ldr	r3, [pc, #660]	; (82764 <main+0x660>)
   824d0:	2200      	movs	r2, #0
   824d2:	701a      	strb	r2, [r3, #0]
				break;
   824d4:	e179      	b.n	827ca <main+0x6c6>
				
				case ALIGNMENT_ACID:
					if (flag_1==1)
   824d6:	4ba4      	ldr	r3, [pc, #656]	; (82768 <main+0x664>)
   824d8:	681b      	ldr	r3, [r3, #0]
   824da:	2b01      	cmp	r3, #1
   824dc:	d102      	bne.n	824e4 <main+0x3e0>
					{
						//printf("done acid alignment\n");
						state_3 = IDLE_BICAR;
   824de:	4ba0      	ldr	r3, [pc, #640]	; (82760 <main+0x65c>)
   824e0:	2201      	movs	r2, #1
   824e2:	701a      	strb	r2, [r3, #0]
					}
					flag_nrmal=0;
   824e4:	4b9f      	ldr	r3, [pc, #636]	; (82764 <main+0x660>)
   824e6:	2200      	movs	r2, #0
   824e8:	701a      	strb	r2, [r3, #0]
				break;
   824ea:	e16e      	b.n	827ca <main+0x6c6>
				
				case IDLE_BICAR:
					//printf("bicar alignment\n");
					bic_rc = 1000;
   824ec:	4b9f      	ldr	r3, [pc, #636]	; (8276c <main+0x668>)
   824ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   824f2:	801a      	strh	r2, [r3, #0]
					start_bicarpump();
   824f4:	4b9e      	ldr	r3, [pc, #632]	; (82770 <main+0x66c>)
   824f6:	4798      	blx	r3
					state_3 = ALIGNMENT_BICAR;
   824f8:	4b99      	ldr	r3, [pc, #612]	; (82760 <main+0x65c>)
   824fa:	2204      	movs	r2, #4
   824fc:	701a      	strb	r2, [r3, #0]
					flag_nrmal=0;
   824fe:	4b99      	ldr	r3, [pc, #612]	; (82764 <main+0x660>)
   82500:	2200      	movs	r2, #0
   82502:	701a      	strb	r2, [r3, #0]
				break;
   82504:	e161      	b.n	827ca <main+0x6c6>
				
				case ALIGNMENT_BICAR:
						
					if (flag_1b==1)
   82506:	4b9b      	ldr	r3, [pc, #620]	; (82774 <main+0x670>)
   82508:	681b      	ldr	r3, [r3, #0]
   8250a:	2b01      	cmp	r3, #1
   8250c:	d102      	bne.n	82514 <main+0x410>
					{
						//printf("Done with bicar alignment\n");
						state_3 = CPU3_STANDBY;
   8250e:	4b94      	ldr	r3, [pc, #592]	; (82760 <main+0x65c>)
   82510:	2205      	movs	r2, #5
   82512:	701a      	strb	r2, [r3, #0]
					}
					flag_nrmal=0;
   82514:	4b93      	ldr	r3, [pc, #588]	; (82764 <main+0x660>)
   82516:	2200      	movs	r2, #0
   82518:	701a      	strb	r2, [r3, #0]
				break;
   8251a:	e156      	b.n	827ca <main+0x6c6>
				case CPU3_STANDBY:
	
					if(flag_buff==1)
   8251c:	4b96      	ldr	r3, [pc, #600]	; (82778 <main+0x674>)
   8251e:	781b      	ldrb	r3, [r3, #0]
   82520:	b2db      	uxtb	r3, r3
   82522:	2b01      	cmp	r3, #1
   82524:	f040 8151 	bne.w	827ca <main+0x6c6>
					{
						Master_cpu_command_type dummy;
						dummy=data_buff[0];
   82528:	4b94      	ldr	r3, [pc, #592]	; (8277c <main+0x678>)
   8252a:	781b      	ldrb	r3, [r3, #0]
   8252c:	71fb      	strb	r3, [r7, #7]
						switch (dummy)
   8252e:	79fb      	ldrb	r3, [r7, #7]
   82530:	3b01      	subs	r3, #1
   82532:	2b12      	cmp	r3, #18
   82534:	f200 813e 	bhi.w	827b4 <main+0x6b0>
   82538:	a201      	add	r2, pc, #4	; (adr r2, 82540 <main+0x43c>)
   8253a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8253e:	bf00      	nop
   82540:	000825f7 	.word	0x000825f7
   82544:	00082685 	.word	0x00082685
   82548:	00082747 	.word	0x00082747
   8254c:	00082611 	.word	0x00082611
   82550:	00082623 	.word	0x00082623
   82554:	0008262f 	.word	0x0008262f
   82558:	00082641 	.word	0x00082641
   8255c:	000825a5 	.word	0x000825a5
   82560:	000825cd 	.word	0x000825cd
   82564:	000827b5 	.word	0x000827b5
   82568:	000827b5 	.word	0x000827b5
   8256c:	0008258d 	.word	0x0008258d
   82570:	00082599 	.word	0x00082599
   82574:	000827b5 	.word	0x000827b5
   82578:	000827b5 	.word	0x000827b5
   8257c:	000827b5 	.word	0x000827b5
   82580:	000827b5 	.word	0x000827b5
   82584:	0008264d 	.word	0x0008264d
   82588:	0008267d 	.word	0x0008267d
						{ 
							case PROP_START_ACID_PUMP:
															rc=210;
   8258c:	4b72      	ldr	r3, [pc, #456]	; (82758 <main+0x654>)
   8258e:	22d2      	movs	r2, #210	; 0xd2
   82590:	801a      	strh	r2, [r3, #0]
															start_acidpump();
   82592:	4b72      	ldr	r3, [pc, #456]	; (8275c <main+0x658>)
   82594:	4798      	blx	r3
							
							break;
   82596:	e10e      	b.n	827b6 <main+0x6b2>
							
							case PROP_START_BICARB_PUMP:
															bic_rc=210;
   82598:	4b74      	ldr	r3, [pc, #464]	; (8276c <main+0x668>)
   8259a:	22d2      	movs	r2, #210	; 0xd2
   8259c:	801a      	strh	r2, [r3, #0]
															start_bicarpump();
   8259e:	4b74      	ldr	r3, [pc, #464]	; (82770 <main+0x66c>)
   825a0:	4798      	blx	r3
							
							break;
   825a2:	e108      	b.n	827b6 <main+0x6b2>
							case PROP_START_OPENFILL:
					//		startTimer1(TC0,2,TC2_IRQn,stepcount);
					feedcount_flag = 1; 
   825a4:	4b76      	ldr	r3, [pc, #472]	; (82780 <main+0x67c>)
   825a6:	2201      	movs	r2, #1
   825a8:	701a      	strb	r2, [r3, #0]
								rc=210;
   825aa:	4b6b      	ldr	r3, [pc, #428]	; (82758 <main+0x654>)
   825ac:	22d2      	movs	r2, #210	; 0xd2
   825ae:	801a      	strh	r2, [r3, #0]
								bic_rc=210;
   825b0:	4b6e      	ldr	r3, [pc, #440]	; (8276c <main+0x668>)
   825b2:	22d2      	movs	r2, #210	; 0xd2
   825b4:	801a      	strh	r2, [r3, #0]
								start_acidpump();
   825b6:	4b69      	ldr	r3, [pc, #420]	; (8275c <main+0x658>)
   825b8:	4798      	blx	r3
								start_bicarpump();
   825ba:	4b6d      	ldr	r3, [pc, #436]	; (82770 <main+0x66c>)
   825bc:	4798      	blx	r3
								state_3 =CPU3_STANDBY;
   825be:	4b68      	ldr	r3, [pc, #416]	; (82760 <main+0x65c>)
   825c0:	2205      	movs	r2, #5
   825c2:	701a      	strb	r2, [r3, #0]
								openfillstate = STATE_OPEN_FILL; 
   825c4:	4b6f      	ldr	r3, [pc, #444]	; (82784 <main+0x680>)
   825c6:	2201      	movs	r2, #1
   825c8:	701a      	strb	r2, [r3, #0]
							break;
   825ca:	e0f4      	b.n	827b6 <main+0x6b2>
							case PROP_STOP_OPENFILL:
							//printf("stop_openfill\n");
							feedcount_flag = 0; 
   825cc:	4b6c      	ldr	r3, [pc, #432]	; (82780 <main+0x67c>)
   825ce:	2200      	movs	r2, #0
   825d0:	701a      	strb	r2, [r3, #0]
							acid_count = 0;
   825d2:	4b6d      	ldr	r3, [pc, #436]	; (82788 <main+0x684>)
   825d4:	2200      	movs	r2, #0
   825d6:	601a      	str	r2, [r3, #0]
							bicarb_count = 0;
   825d8:	4b6c      	ldr	r3, [pc, #432]	; (8278c <main+0x688>)
   825da:	2200      	movs	r2, #0
   825dc:	601a      	str	r2, [r3, #0]
								stop_pump();
   825de:	4b6c      	ldr	r3, [pc, #432]	; (82790 <main+0x68c>)
   825e0:	4798      	blx	r3
								state_3 =CPU3_STANDBY;
   825e2:	4b5f      	ldr	r3, [pc, #380]	; (82760 <main+0x65c>)
   825e4:	2205      	movs	r2, #5
   825e6:	701a      	strb	r2, [r3, #0]
								flag_nrmal=0;
   825e8:	4b5e      	ldr	r3, [pc, #376]	; (82764 <main+0x660>)
   825ea:	2200      	movs	r2, #0
   825ec:	701a      	strb	r2, [r3, #0]
								openfillstate = STATE_IDLE;
   825ee:	4b65      	ldr	r3, [pc, #404]	; (82784 <main+0x680>)
   825f0:	2200      	movs	r2, #0
   825f2:	701a      	strb	r2, [r3, #0]
							break;
   825f4:	e0df      	b.n	827b6 <main+0x6b2>
							case PROP_START_ALIGMENT:
		//					printf("start_aligment\n");
							flag_1=0;
   825f6:	4b5c      	ldr	r3, [pc, #368]	; (82768 <main+0x664>)
   825f8:	2200      	movs	r2, #0
   825fa:	601a      	str	r2, [r3, #0]
							flag_1b=0;
   825fc:	4b5d      	ldr	r3, [pc, #372]	; (82774 <main+0x670>)
   825fe:	2200      	movs	r2, #0
   82600:	601a      	str	r2, [r3, #0]
							flag_nrmal=0;
   82602:	4b58      	ldr	r3, [pc, #352]	; (82764 <main+0x660>)
   82604:	2200      	movs	r2, #0
   82606:	701a      	strb	r2, [r3, #0]
								state_3 = IDLE_ACID;
   82608:	4b55      	ldr	r3, [pc, #340]	; (82760 <main+0x65c>)
   8260a:	2200      	movs	r2, #0
   8260c:	701a      	strb	r2, [r3, #0]
							break;
   8260e:	e0d2      	b.n	827b6 <main+0x6b2>
							case PROP_START_DISINFECTION:
								rc=210;
   82610:	4b51      	ldr	r3, [pc, #324]	; (82758 <main+0x654>)
   82612:	22d2      	movs	r2, #210	; 0xd2
   82614:	801a      	strh	r2, [r3, #0]
								start_acidpump();
   82616:	4b51      	ldr	r3, [pc, #324]	; (8275c <main+0x658>)
   82618:	4798      	blx	r3
								state_3 = CPU3_STANDBY;
   8261a:	4b51      	ldr	r3, [pc, #324]	; (82760 <main+0x65c>)
   8261c:	2205      	movs	r2, #5
   8261e:	701a      	strb	r2, [r3, #0]
							break;
   82620:	e0c9      	b.n	827b6 <main+0x6b2>
							case PROP_STOP_DISINFECTION:
								stop_pump();
   82622:	4b5b      	ldr	r3, [pc, #364]	; (82790 <main+0x68c>)
   82624:	4798      	blx	r3
								state_3 = CPU3_STANDBY;
   82626:	4b4e      	ldr	r3, [pc, #312]	; (82760 <main+0x65c>)
   82628:	2205      	movs	r2, #5
   8262a:	701a      	strb	r2, [r3, #0]
							break;
   8262c:	e0c3      	b.n	827b6 <main+0x6b2>
							case PROP_START_CITRIC_DISINFECTION:
								bic_rc=210;
   8262e:	4b4f      	ldr	r3, [pc, #316]	; (8276c <main+0x668>)
   82630:	22d2      	movs	r2, #210	; 0xd2
   82632:	801a      	strh	r2, [r3, #0]
								start_bicarpump();
   82634:	4b4e      	ldr	r3, [pc, #312]	; (82770 <main+0x66c>)
   82636:	4798      	blx	r3
								state_3 = CPU3_STANDBY;
   82638:	4b49      	ldr	r3, [pc, #292]	; (82760 <main+0x65c>)
   8263a:	2205      	movs	r2, #5
   8263c:	701a      	strb	r2, [r3, #0]
							break;
   8263e:	e0ba      	b.n	827b6 <main+0x6b2>
							case PROP_STOP_CITRIC_DISINFECTION:
								stop_pump();
   82640:	4b53      	ldr	r3, [pc, #332]	; (82790 <main+0x68c>)
   82642:	4798      	blx	r3
								state_3 = CPU3_STANDBY;
   82644:	4b46      	ldr	r3, [pc, #280]	; (82760 <main+0x65c>)
   82646:	2205      	movs	r2, #5
   82648:	701a      	strb	r2, [r3, #0]
							break;
   8264a:	e0b4      	b.n	827b6 <main+0x6b2>
							
							case prop_BICAR_FEED_BACK:   //selftest bicar
							//   bic_rc = 210; 
							rc= 210;
   8264c:	4b42      	ldr	r3, [pc, #264]	; (82758 <main+0x654>)
   8264e:	22d2      	movs	r2, #210	; 0xd2
   82650:	801a      	strh	r2, [r3, #0]
							bic_rc = 210;
   82652:	4b46      	ldr	r3, [pc, #280]	; (8276c <main+0x668>)
   82654:	22d2      	movs	r2, #210	; 0xd2
   82656:	801a      	strh	r2, [r3, #0]
							
							   feedcount_flag = 1; 
   82658:	4b49      	ldr	r3, [pc, #292]	; (82780 <main+0x67c>)
   8265a:	2201      	movs	r2, #1
   8265c:	701a      	strb	r2, [r3, #0]
							   startTimer1(TC0,2,TC2_IRQn,stepcount);
   8265e:	484d      	ldr	r0, [pc, #308]	; (82794 <main+0x690>)
   82660:	2102      	movs	r1, #2
   82662:	221d      	movs	r2, #29
   82664:	693b      	ldr	r3, [r7, #16]
   82666:	4c4c      	ldr	r4, [pc, #304]	; (82798 <main+0x694>)
   82668:	47a0      	blx	r4
							    start_pump();
   8266a:	4b4c      	ldr	r3, [pc, #304]	; (8279c <main+0x698>)
   8266c:	4798      	blx	r3
						
							   flag_nrmal=0;  // 1
   8266e:	4b3d      	ldr	r3, [pc, #244]	; (82764 <main+0x660>)
   82670:	2200      	movs	r2, #0
   82672:	701a      	strb	r2, [r3, #0]
							   state_3 = CPU3_STANDBY;
   82674:	4b3a      	ldr	r3, [pc, #232]	; (82760 <main+0x65c>)
   82676:	2205      	movs	r2, #5
   82678:	701a      	strb	r2, [r3, #0]
							break;
   8267a:	e09c      	b.n	827b6 <main+0x6b2>
							case prop_BICAR_FEED_BACK_STATUS:
						//	uint8_t acid_feed_back_counter = 0;
					//		        bicarb_f_b_counter = bicarb_count;
					//				acid_feed_back_counter = acid_count;
					SV_put_sensor_data(&sv_sys_statbuffer);
   8267c:	4848      	ldr	r0, [pc, #288]	; (827a0 <main+0x69c>)
   8267e:	4b49      	ldr	r3, [pc, #292]	; (827a4 <main+0x6a0>)
   82680:	4798      	blx	r3
// 								stop_pump();
// 									flag_1=0;
// 									flag_1b=0;
// 									flag_nrmal=0;
// 									state_3 = CPU3_STANDBY;
							break;
   82682:	e098      	b.n	827b6 <main+0x6b2>
							case PROP_START_MIXING:
							OneSecFlag = 1 ;
   82684:	4b48      	ldr	r3, [pc, #288]	; (827a8 <main+0x6a4>)
   82686:	2201      	movs	r2, #1
   82688:	701a      	strb	r2, [r3, #0]
								switch(User_setConductivity)
   8268a:	4b48      	ldr	r3, [pc, #288]	; (827ac <main+0x6a8>)
   8268c:	881b      	ldrh	r3, [r3, #0]
   8268e:	3b87      	subs	r3, #135	; 0x87
   82690:	2b06      	cmp	r3, #6
   82692:	d842      	bhi.n	8271a <main+0x616>
   82694:	a201      	add	r2, pc, #4	; (adr r2, 8269c <main+0x598>)
   82696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8269a:	bf00      	nop
   8269c:	000826b9 	.word	0x000826b9
   826a0:	000826c7 	.word	0x000826c7
   826a4:	000826d5 	.word	0x000826d5
   826a8:	000826e3 	.word	0x000826e3
   826ac:	000826f1 	.word	0x000826f1
   826b0:	000826ff 	.word	0x000826ff
   826b4:	0008270d 	.word	0x0008270d
									{
										case 135:
										Set_RC= 200;
   826b8:	4b3d      	ldr	r3, [pc, #244]	; (827b0 <main+0x6ac>)
   826ba:	22c8      	movs	r2, #200	; 0xc8
   826bc:	801a      	strh	r2, [r3, #0]
										bic_rc = 200;
   826be:	4b2b      	ldr	r3, [pc, #172]	; (8276c <main+0x668>)
   826c0:	22c8      	movs	r2, #200	; 0xc8
   826c2:	801a      	strh	r2, [r3, #0]
										break;
   826c4:	e029      	b.n	8271a <main+0x616>
										
										case 136:
										Set_RC= 197;
   826c6:	4b3a      	ldr	r3, [pc, #232]	; (827b0 <main+0x6ac>)
   826c8:	22c5      	movs	r2, #197	; 0xc5
   826ca:	801a      	strh	r2, [r3, #0]
										bic_rc = 197;
   826cc:	4b27      	ldr	r3, [pc, #156]	; (8276c <main+0x668>)
   826ce:	22c5      	movs	r2, #197	; 0xc5
   826d0:	801a      	strh	r2, [r3, #0]
										break;
   826d2:	e022      	b.n	8271a <main+0x616>
										
										case 137:
										Set_RC= 194;
   826d4:	4b36      	ldr	r3, [pc, #216]	; (827b0 <main+0x6ac>)
   826d6:	22c2      	movs	r2, #194	; 0xc2
   826d8:	801a      	strh	r2, [r3, #0]
										bic_rc = 194;
   826da:	4b24      	ldr	r3, [pc, #144]	; (8276c <main+0x668>)
   826dc:	22c2      	movs	r2, #194	; 0xc2
   826de:	801a      	strh	r2, [r3, #0]
										break;
   826e0:	e01b      	b.n	8271a <main+0x616>
										
										case 138:
										Set_RC= 191;
   826e2:	4b33      	ldr	r3, [pc, #204]	; (827b0 <main+0x6ac>)
   826e4:	22bf      	movs	r2, #191	; 0xbf
   826e6:	801a      	strh	r2, [r3, #0]
										bic_rc = 191;
   826e8:	4b20      	ldr	r3, [pc, #128]	; (8276c <main+0x668>)
   826ea:	22bf      	movs	r2, #191	; 0xbf
   826ec:	801a      	strh	r2, [r3, #0]
										break;
   826ee:	e014      	b.n	8271a <main+0x616>
										
										case 139:
										Set_RC= 188;
   826f0:	4b2f      	ldr	r3, [pc, #188]	; (827b0 <main+0x6ac>)
   826f2:	22bc      	movs	r2, #188	; 0xbc
   826f4:	801a      	strh	r2, [r3, #0]
										bic_rc = 188;
   826f6:	4b1d      	ldr	r3, [pc, #116]	; (8276c <main+0x668>)
   826f8:	22bc      	movs	r2, #188	; 0xbc
   826fa:	801a      	strh	r2, [r3, #0]
										break;
   826fc:	e00d      	b.n	8271a <main+0x616>
										
										case 140:
										Set_RC= 184;
   826fe:	4b2c      	ldr	r3, [pc, #176]	; (827b0 <main+0x6ac>)
   82700:	22b8      	movs	r2, #184	; 0xb8
   82702:	801a      	strh	r2, [r3, #0]
										bic_rc = 184;
   82704:	4b19      	ldr	r3, [pc, #100]	; (8276c <main+0x668>)
   82706:	22b8      	movs	r2, #184	; 0xb8
   82708:	801a      	strh	r2, [r3, #0]
										break;
   8270a:	e006      	b.n	8271a <main+0x616>
										
										case 141:
										Set_RC= 181;
   8270c:	4b28      	ldr	r3, [pc, #160]	; (827b0 <main+0x6ac>)
   8270e:	22b5      	movs	r2, #181	; 0xb5
   82710:	801a      	strh	r2, [r3, #0]
										bic_rc = 181;
   82712:	4b16      	ldr	r3, [pc, #88]	; (8276c <main+0x668>)
   82714:	22b5      	movs	r2, #181	; 0xb5
   82716:	801a      	strh	r2, [r3, #0]
										break;
   82718:	bf00      	nop
										// 												break;
												
														
									}
						
							feedcount_flag = 1; // test - to be removed
   8271a:	4b19      	ldr	r3, [pc, #100]	; (82780 <main+0x67c>)
   8271c:	2201      	movs	r2, #1
   8271e:	701a      	strb	r2, [r3, #0]
							rc = Set_RC;
   82720:	4b23      	ldr	r3, [pc, #140]	; (827b0 <main+0x6ac>)
   82722:	881a      	ldrh	r2, [r3, #0]
   82724:	4b0c      	ldr	r3, [pc, #48]	; (82758 <main+0x654>)
   82726:	801a      	strh	r2, [r3, #0]
							startTimer1(TC0,2,TC2_IRQn,stepcount);
   82728:	481a      	ldr	r0, [pc, #104]	; (82794 <main+0x690>)
   8272a:	2102      	movs	r1, #2
   8272c:	221d      	movs	r2, #29
   8272e:	693b      	ldr	r3, [r7, #16]
   82730:	4c19      	ldr	r4, [pc, #100]	; (82798 <main+0x694>)
   82732:	47a0      	blx	r4
						
// 								start_acidpump();
// 								start_bicarpump();

								start_pump();
   82734:	4b19      	ldr	r3, [pc, #100]	; (8279c <main+0x698>)
   82736:	4798      	blx	r3
								flag_nrmal=1;
   82738:	4b0a      	ldr	r3, [pc, #40]	; (82764 <main+0x660>)
   8273a:	2201      	movs	r2, #1
   8273c:	701a      	strb	r2, [r3, #0]
								state_3 = CPU3_STANDBY;
   8273e:	4b08      	ldr	r3, [pc, #32]	; (82760 <main+0x65c>)
   82740:	2205      	movs	r2, #5
   82742:	701a      	strb	r2, [r3, #0]
							break;
   82744:	e037      	b.n	827b6 <main+0x6b2>
							case PROP_STOP_MIXING:
								//printf("stop\n");
								stop_pump();
   82746:	4b12      	ldr	r3, [pc, #72]	; (82790 <main+0x68c>)
   82748:	4798      	blx	r3
								state_3 =CPU3_STANDBY;
   8274a:	4b05      	ldr	r3, [pc, #20]	; (82760 <main+0x65c>)
   8274c:	2205      	movs	r2, #5
   8274e:	701a      	strb	r2, [r3, #0]
								flag_nrmal=0;
   82750:	4b04      	ldr	r3, [pc, #16]	; (82764 <main+0x660>)
   82752:	2200      	movs	r2, #0
   82754:	701a      	strb	r2, [r3, #0]
							break;
   82756:	e02e      	b.n	827b6 <main+0x6b2>
   82758:	20070cde 	.word	0x20070cde
   8275c:	000827d9 	.word	0x000827d9
   82760:	20070400 	.word	0x20070400
   82764:	20070cdd 	.word	0x20070cdd
   82768:	20070d04 	.word	0x20070d04
   8276c:	20071220 	.word	0x20071220
   82770:	00082999 	.word	0x00082999
   82774:	20070d10 	.word	0x20070d10
   82778:	20070df4 	.word	0x20070df4
   8277c:	20070c94 	.word	0x20070c94
   82780:	20070ce3 	.word	0x20070ce3
   82784:	20070cdc 	.word	0x20070cdc
   82788:	20070ce4 	.word	0x20070ce4
   8278c:	20070ce8 	.word	0x20070ce8
   82790:	00082a35 	.word	0x00082a35
   82794:	40080000 	.word	0x40080000
   82798:	00081395 	.word	0x00081395
   8279c:	00082885 	.word	0x00082885
   827a0:	20071214 	.word	0x20071214
   827a4:	00081495 	.word	0x00081495
   827a8:	20070cb8 	.word	0x20070cb8
   827ac:	20070dce 	.word	0x20070dce
   827b0:	20070ce0 	.word	0x20070ce0
								count_start = 0;
								count_stop = 0;*/
							
							break;
						default:
							break;
   827b4:	bf00      	nop
						}
						
					data_buff[0] = (uint8_t)0;
   827b6:	4b05      	ldr	r3, [pc, #20]	; (827cc <main+0x6c8>)
   827b8:	2200      	movs	r2, #0
   827ba:	701a      	strb	r2, [r3, #0]
					flag_buff = 0;
   827bc:	4b04      	ldr	r3, [pc, #16]	; (827d0 <main+0x6cc>)
   827be:	2200      	movs	r2, #0
   827c0:	701a      	strb	r2, [r3, #0]
					data_count = 0;
   827c2:	4b04      	ldr	r3, [pc, #16]	; (827d4 <main+0x6d0>)
   827c4:	2200      	movs	r2, #0
   827c6:	601a      	str	r2, [r3, #0]
				break;
   827c8:	bf00      	nop
				break;
			}
		}*/
	}
 	}
	}
   827ca:	e537      	b.n	8223c <main+0x138>
   827cc:	20070c94 	.word	0x20070c94
   827d0:	20070df4 	.word	0x20070df4
   827d4:	20070c8e 	.word	0x20070c8e

000827d8 <start_acidpump>:
	}


void start_acidpump()
{
   827d8:	b598      	push	{r3, r4, r7, lr}
   827da:	af00      	add	r7, sp, #0
	PIOA->PIO_CODR  = 0x00180000;				// brake clear
   827dc:	4b1f      	ldr	r3, [pc, #124]	; (8285c <start_acidpump+0x84>)
   827de:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   827e2:	635a      	str	r2, [r3, #52]	; 0x34
	PIOD->PIO_PER   = 0x00000003;
   827e4:	4b1e      	ldr	r3, [pc, #120]	; (82860 <start_acidpump+0x88>)
   827e6:	2203      	movs	r2, #3
   827e8:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER  = 0x000001FE;
   827ea:	4b1e      	ldr	r3, [pc, #120]	; (82864 <start_acidpump+0x8c>)
   827ec:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   827f0:	601a      	str	r2, [r3, #0]
	PIOD->PIO_WPMR	= 0x50494F00;
   827f2:	4b1b      	ldr	r3, [pc, #108]	; (82860 <start_acidpump+0x88>)
   827f4:	4a1c      	ldr	r2, [pc, #112]	; (82868 <start_acidpump+0x90>)
   827f6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR  = 0x50494F00;
   827fa:	4b1a      	ldr	r3, [pc, #104]	; (82864 <start_acidpump+0x8c>)
   827fc:	4a1a      	ldr	r2, [pc, #104]	; (82868 <start_acidpump+0x90>)
   827fe:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_OWER  = 0x00000003;
   82802:	4b17      	ldr	r3, [pc, #92]	; (82860 <start_acidpump+0x88>)
   82804:	2203      	movs	r2, #3
   82806:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOD->PIO_OWDR  = 0x0000000C;
   8280a:	4b15      	ldr	r3, [pc, #84]	; (82860 <start_acidpump+0x88>)
   8280c:	220c      	movs	r2, #12
   8280e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOC->PIO_OWER  = 0x000001FE;
   82812:	4b14      	ldr	r3, [pc, #80]	; (82864 <start_acidpump+0x8c>)
   82814:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   82818:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_OWDR  = 0x000FF000;
   8281c:	4b11      	ldr	r3, [pc, #68]	; (82864 <start_acidpump+0x8c>)
   8281e:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   82822:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	
	PIOD->PIO_ODSR = array_acid[count].dir;
   82826:	4a0e      	ldr	r2, [pc, #56]	; (82860 <start_acidpump+0x88>)
   82828:	4b10      	ldr	r3, [pc, #64]	; (8286c <start_acidpump+0x94>)
   8282a:	681b      	ldr	r3, [r3, #0]
   8282c:	4910      	ldr	r1, [pc, #64]	; (82870 <start_acidpump+0x98>)
   8282e:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   82832:	6393      	str	r3, [r2, #56]	; 0x38
	PIOC->PIO_ODSR = array_acid[count].AB;
   82834:	4a0b      	ldr	r2, [pc, #44]	; (82864 <start_acidpump+0x8c>)
   82836:	4b0d      	ldr	r3, [pc, #52]	; (8286c <start_acidpump+0x94>)
   82838:	681b      	ldr	r3, [r3, #0]
   8283a:	490d      	ldr	r1, [pc, #52]	; (82870 <start_acidpump+0x98>)
   8283c:	00db      	lsls	r3, r3, #3
   8283e:	440b      	add	r3, r1
   82840:	685b      	ldr	r3, [r3, #4]
   82842:	6393      	str	r3, [r2, #56]	; 0x38
	
	cpu3_sv_cntrl_activatepump(ACID_PUMP);
   82844:	2001      	movs	r0, #1
   82846:	4b0b      	ldr	r3, [pc, #44]	; (82874 <start_acidpump+0x9c>)
   82848:	4798      	blx	r3
	acid_startTimer1(TC0,0,TC0_IRQn,rc);
   8284a:	4b0b      	ldr	r3, [pc, #44]	; (82878 <start_acidpump+0xa0>)
   8284c:	881b      	ldrh	r3, [r3, #0]
   8284e:	480b      	ldr	r0, [pc, #44]	; (8287c <start_acidpump+0xa4>)
   82850:	2100      	movs	r1, #0
   82852:	221b      	movs	r2, #27
   82854:	4c0a      	ldr	r4, [pc, #40]	; (82880 <start_acidpump+0xa8>)
   82856:	47a0      	blx	r4
}
   82858:	bd98      	pop	{r3, r4, r7, pc}
   8285a:	bf00      	nop
   8285c:	400e0e00 	.word	0x400e0e00
   82860:	400e1400 	.word	0x400e1400
   82864:	400e1200 	.word	0x400e1200
   82868:	50494f00 	.word	0x50494f00
   8286c:	20070cd4 	.word	0x20070cd4
   82870:	20070000 	.word	0x20070000
   82874:	00081475 	.word	0x00081475
   82878:	20070cde 	.word	0x20070cde
   8287c:	40080000 	.word	0x40080000
   82880:	000812b5 	.word	0x000812b5

00082884 <start_pump>:


	
void start_pump()
{
   82884:	b598      	push	{r3, r4, r7, lr}
   82886:	af00      	add	r7, sp, #0
	PIOA->PIO_CODR  = 0x00180000;				// brake clear
   82888:	4b37      	ldr	r3, [pc, #220]	; (82968 <start_pump+0xe4>)
   8288a:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   8288e:	635a      	str	r2, [r3, #52]	; 0x34
	PIOD->PIO_PER   = 0x00000003;
   82890:	4b36      	ldr	r3, [pc, #216]	; (8296c <start_pump+0xe8>)
   82892:	2203      	movs	r2, #3
   82894:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER  = 0x000001FE;
   82896:	4b36      	ldr	r3, [pc, #216]	; (82970 <start_pump+0xec>)
   82898:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   8289c:	601a      	str	r2, [r3, #0]
	PIOD->PIO_WPMR	= 0x50494F00;
   8289e:	4b33      	ldr	r3, [pc, #204]	; (8296c <start_pump+0xe8>)
   828a0:	4a34      	ldr	r2, [pc, #208]	; (82974 <start_pump+0xf0>)
   828a2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR  = 0x50494F00;
   828a6:	4b32      	ldr	r3, [pc, #200]	; (82970 <start_pump+0xec>)
   828a8:	4a32      	ldr	r2, [pc, #200]	; (82974 <start_pump+0xf0>)
   828aa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_OWER  = 0x00000003;
   828ae:	4b2f      	ldr	r3, [pc, #188]	; (8296c <start_pump+0xe8>)
   828b0:	2203      	movs	r2, #3
   828b2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOD->PIO_OWDR  = 0x0000000C;
   828b6:	4b2d      	ldr	r3, [pc, #180]	; (8296c <start_pump+0xe8>)
   828b8:	220c      	movs	r2, #12
   828ba:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOC->PIO_OWER  = 0x000001FE;
   828be:	4b2c      	ldr	r3, [pc, #176]	; (82970 <start_pump+0xec>)
   828c0:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   828c4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_OWDR  = 0x000FF000;
   828c8:	4b29      	ldr	r3, [pc, #164]	; (82970 <start_pump+0xec>)
   828ca:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   828ce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	
	PIOD->PIO_ODSR = array_acid[count].dir;
   828d2:	4a26      	ldr	r2, [pc, #152]	; (8296c <start_pump+0xe8>)
   828d4:	4b28      	ldr	r3, [pc, #160]	; (82978 <start_pump+0xf4>)
   828d6:	681b      	ldr	r3, [r3, #0]
   828d8:	4928      	ldr	r1, [pc, #160]	; (8297c <start_pump+0xf8>)
   828da:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   828de:	6393      	str	r3, [r2, #56]	; 0x38
	PIOC->PIO_ODSR = array_acid[count].AB;
   828e0:	4a23      	ldr	r2, [pc, #140]	; (82970 <start_pump+0xec>)
   828e2:	4b25      	ldr	r3, [pc, #148]	; (82978 <start_pump+0xf4>)
   828e4:	681b      	ldr	r3, [r3, #0]
   828e6:	4925      	ldr	r1, [pc, #148]	; (8297c <start_pump+0xf8>)
   828e8:	00db      	lsls	r3, r3, #3
   828ea:	440b      	add	r3, r1
   828ec:	685b      	ldr	r3, [r3, #4]
   828ee:	6393      	str	r3, [r2, #56]	; 0x38
	
	
	
	PIOD->PIO_WPMR	= 0x50494F00;
   828f0:	4b1e      	ldr	r3, [pc, #120]	; (8296c <start_pump+0xe8>)
   828f2:	4a20      	ldr	r2, [pc, #128]	; (82974 <start_pump+0xf0>)
   828f4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR  = 0x50494F00;
   828f8:	4b1d      	ldr	r3, [pc, #116]	; (82970 <start_pump+0xec>)
   828fa:	4a1e      	ldr	r2, [pc, #120]	; (82974 <start_pump+0xf0>)
   828fc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_OWER  = 0x0000000C;
   82900:	4b1a      	ldr	r3, [pc, #104]	; (8296c <start_pump+0xe8>)
   82902:	220c      	movs	r2, #12
   82904:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOD->PIO_OWDR = 0x000000003;
   82908:	4b18      	ldr	r3, [pc, #96]	; (8296c <start_pump+0xe8>)
   8290a:	2203      	movs	r2, #3
   8290c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOC->PIO_OWER  = 0x000FF000;
   82910:	4b17      	ldr	r3, [pc, #92]	; (82970 <start_pump+0xec>)
   82912:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   82916:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_OWDR  = 0x000001FE;
   8291a:	4b15      	ldr	r3, [pc, #84]	; (82970 <start_pump+0xec>)
   8291c:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   82920:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOB->PIO_CODR  = 0x00204000;			// brake clear
   82924:	4b16      	ldr	r3, [pc, #88]	; (82980 <start_pump+0xfc>)
   82926:	f44f 1201 	mov.w	r2, #2113536	; 0x204000
   8292a:	635a      	str	r2, [r3, #52]	; 0x34
			
	PIOD->PIO_ODSR = array_bicar[count].dir;
   8292c:	4a0f      	ldr	r2, [pc, #60]	; (8296c <start_pump+0xe8>)
   8292e:	4b12      	ldr	r3, [pc, #72]	; (82978 <start_pump+0xf4>)
   82930:	681b      	ldr	r3, [r3, #0]
   82932:	4914      	ldr	r1, [pc, #80]	; (82984 <start_pump+0x100>)
   82934:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   82938:	6393      	str	r3, [r2, #56]	; 0x38
	PIOC->PIO_ODSR = array_bicar[count].AB;
   8293a:	4a0d      	ldr	r2, [pc, #52]	; (82970 <start_pump+0xec>)
   8293c:	4b0e      	ldr	r3, [pc, #56]	; (82978 <start_pump+0xf4>)
   8293e:	681b      	ldr	r3, [r3, #0]
   82940:	4910      	ldr	r1, [pc, #64]	; (82984 <start_pump+0x100>)
   82942:	00db      	lsls	r3, r3, #3
   82944:	440b      	add	r3, r1
   82946:	685b      	ldr	r3, [r3, #4]
   82948:	6393      	str	r3, [r2, #56]	; 0x38
			
	cpu3_sv_cntrl_activatepump(ACID_PUMP);
   8294a:	2001      	movs	r0, #1
   8294c:	4b0e      	ldr	r3, [pc, #56]	; (82988 <start_pump+0x104>)
   8294e:	4798      	blx	r3
	cpu3_sv_cntrl_activatepump(BICAR_PUMP);
   82950:	2002      	movs	r0, #2
   82952:	4b0d      	ldr	r3, [pc, #52]	; (82988 <start_pump+0x104>)
   82954:	4798      	blx	r3
	
	
	acid_startTimer1(TC0,0,TC0_IRQn,rc);	
   82956:	4b0d      	ldr	r3, [pc, #52]	; (8298c <start_pump+0x108>)
   82958:	881b      	ldrh	r3, [r3, #0]
   8295a:	480d      	ldr	r0, [pc, #52]	; (82990 <start_pump+0x10c>)
   8295c:	2100      	movs	r1, #0
   8295e:	221b      	movs	r2, #27
   82960:	4c0c      	ldr	r4, [pc, #48]	; (82994 <start_pump+0x110>)
   82962:	47a0      	blx	r4
}
   82964:	bd98      	pop	{r3, r4, r7, pc}
   82966:	bf00      	nop
   82968:	400e0e00 	.word	0x400e0e00
   8296c:	400e1400 	.word	0x400e1400
   82970:	400e1200 	.word	0x400e1200
   82974:	50494f00 	.word	0x50494f00
   82978:	20070cd4 	.word	0x20070cd4
   8297c:	20070000 	.word	0x20070000
   82980:	400e1000 	.word	0x400e1000
   82984:	20070200 	.word	0x20070200
   82988:	00081475 	.word	0x00081475
   8298c:	20070cde 	.word	0x20070cde
   82990:	40080000 	.word	0x40080000
   82994:	000812b5 	.word	0x000812b5

00082998 <start_bicarpump>:


void start_bicarpump()
{
   82998:	b598      	push	{r3, r4, r7, lr}
   8299a:	af00      	add	r7, sp, #0
	//printf("start bicar pump\n");
		//cpu3_sv_cntrl_deactivate_pin(BICARBONATE_VALVE);
		PIOD->PIO_WPMR	= 0x50494F00;
   8299c:	4b1b      	ldr	r3, [pc, #108]	; (82a0c <start_bicarpump+0x74>)
   8299e:	4a1c      	ldr	r2, [pc, #112]	; (82a10 <start_bicarpump+0x78>)
   829a0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		PIOC->PIO_WPMR  = 0x50494F00;
   829a4:	4b1b      	ldr	r3, [pc, #108]	; (82a14 <start_bicarpump+0x7c>)
   829a6:	4a1a      	ldr	r2, [pc, #104]	; (82a10 <start_bicarpump+0x78>)
   829a8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		PIOD->PIO_OWER  = 0x0000000C;
   829ac:	4b17      	ldr	r3, [pc, #92]	; (82a0c <start_bicarpump+0x74>)
   829ae:	220c      	movs	r2, #12
   829b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		PIOD->PIO_OWDR = 0x000000003;
   829b4:	4b15      	ldr	r3, [pc, #84]	; (82a0c <start_bicarpump+0x74>)
   829b6:	2203      	movs	r2, #3
   829b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		PIOC->PIO_OWER  = 0x000FF000;
   829bc:	4b15      	ldr	r3, [pc, #84]	; (82a14 <start_bicarpump+0x7c>)
   829be:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   829c2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		PIOC->PIO_OWDR  = 0x000001FE;
   829c6:	4b13      	ldr	r3, [pc, #76]	; (82a14 <start_bicarpump+0x7c>)
   829c8:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   829cc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		PIOB->PIO_CODR  = 0x00204000;			// brake clear
   829d0:	4b11      	ldr	r3, [pc, #68]	; (82a18 <start_bicarpump+0x80>)
   829d2:	f44f 1201 	mov.w	r2, #2113536	; 0x204000
   829d6:	635a      	str	r2, [r3, #52]	; 0x34
		
		PIOD->PIO_ODSR = array_bicar[count1].dir;
   829d8:	4a0c      	ldr	r2, [pc, #48]	; (82a0c <start_bicarpump+0x74>)
   829da:	4b10      	ldr	r3, [pc, #64]	; (82a1c <start_bicarpump+0x84>)
   829dc:	681b      	ldr	r3, [r3, #0]
   829de:	4910      	ldr	r1, [pc, #64]	; (82a20 <start_bicarpump+0x88>)
   829e0:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   829e4:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_bicar[count1].AB;
   829e6:	4a0b      	ldr	r2, [pc, #44]	; (82a14 <start_bicarpump+0x7c>)
   829e8:	4b0c      	ldr	r3, [pc, #48]	; (82a1c <start_bicarpump+0x84>)
   829ea:	681b      	ldr	r3, [r3, #0]
   829ec:	490c      	ldr	r1, [pc, #48]	; (82a20 <start_bicarpump+0x88>)
   829ee:	00db      	lsls	r3, r3, #3
   829f0:	440b      	add	r3, r1
   829f2:	685b      	ldr	r3, [r3, #4]
   829f4:	6393      	str	r3, [r2, #56]	; 0x38
		
		cpu3_sv_cntrl_activatepump(BICAR_PUMP);
   829f6:	2002      	movs	r0, #2
   829f8:	4b0a      	ldr	r3, [pc, #40]	; (82a24 <start_bicarpump+0x8c>)
   829fa:	4798      	blx	r3
		bicar_startTimer1(TC0,1,TC1_IRQn,bic_rc);
   829fc:	4b0a      	ldr	r3, [pc, #40]	; (82a28 <start_bicarpump+0x90>)
   829fe:	881b      	ldrh	r3, [r3, #0]
   82a00:	480a      	ldr	r0, [pc, #40]	; (82a2c <start_bicarpump+0x94>)
   82a02:	2101      	movs	r1, #1
   82a04:	221c      	movs	r2, #28
   82a06:	4c0a      	ldr	r4, [pc, #40]	; (82a30 <start_bicarpump+0x98>)
   82a08:	47a0      	blx	r4
}
   82a0a:	bd98      	pop	{r3, r4, r7, pc}
   82a0c:	400e1400 	.word	0x400e1400
   82a10:	50494f00 	.word	0x50494f00
   82a14:	400e1200 	.word	0x400e1200
   82a18:	400e1000 	.word	0x400e1000
   82a1c:	20070cd8 	.word	0x20070cd8
   82a20:	20070200 	.word	0x20070200
   82a24:	00081475 	.word	0x00081475
   82a28:	20071220 	.word	0x20071220
   82a2c:	40080000 	.word	0x40080000
   82a30:	00081325 	.word	0x00081325

00082a34 <stop_pump>:

void stop_pump()
{
   82a34:	b580      	push	{r7, lr}
   82a36:	af00      	add	r7, sp, #0
	CPU3_S_STOP_TIMER(0);
   82a38:	2000      	movs	r0, #0
   82a3a:	4b06      	ldr	r3, [pc, #24]	; (82a54 <stop_pump+0x20>)
   82a3c:	4798      	blx	r3
	CPU3_S_STOP_TIMER(1);
   82a3e:	2001      	movs	r0, #1
   82a40:	4b04      	ldr	r3, [pc, #16]	; (82a54 <stop_pump+0x20>)
   82a42:	4798      	blx	r3
	CPU3_S_STOP_TIMER(3);
   82a44:	2003      	movs	r0, #3
   82a46:	4b03      	ldr	r3, [pc, #12]	; (82a54 <stop_pump+0x20>)
   82a48:	4798      	blx	r3
	CPU3_S_STOP_TIMER(4);
   82a4a:	2004      	movs	r0, #4
   82a4c:	4b01      	ldr	r3, [pc, #4]	; (82a54 <stop_pump+0x20>)
   82a4e:	4798      	blx	r3
}
   82a50:	bd80      	pop	{r7, pc}
   82a52:	bf00      	nop
   82a54:	000815c9 	.word	0x000815c9

00082a58 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   82a58:	b580      	push	{r7, lr}
   82a5a:	b082      	sub	sp, #8
   82a5c:	af00      	add	r7, sp, #0
   82a5e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82a60:	687b      	ldr	r3, [r7, #4]
   82a62:	2b07      	cmp	r3, #7
   82a64:	d830      	bhi.n	82ac8 <osc_enable+0x70>
   82a66:	a201      	add	r2, pc, #4	; (adr r2, 82a6c <osc_enable+0x14>)
   82a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82a6c:	00082ac9 	.word	0x00082ac9
   82a70:	00082a8d 	.word	0x00082a8d
   82a74:	00082a95 	.word	0x00082a95
   82a78:	00082a9d 	.word	0x00082a9d
   82a7c:	00082aa5 	.word	0x00082aa5
   82a80:	00082aad 	.word	0x00082aad
   82a84:	00082ab5 	.word	0x00082ab5
   82a88:	00082abf 	.word	0x00082abf
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   82a8c:	2000      	movs	r0, #0
   82a8e:	4b10      	ldr	r3, [pc, #64]	; (82ad0 <osc_enable+0x78>)
   82a90:	4798      	blx	r3
		break;
   82a92:	e019      	b.n	82ac8 <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   82a94:	2001      	movs	r0, #1
   82a96:	4b0e      	ldr	r3, [pc, #56]	; (82ad0 <osc_enable+0x78>)
   82a98:	4798      	blx	r3
		break;
   82a9a:	e015      	b.n	82ac8 <osc_enable+0x70>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   82a9c:	2000      	movs	r0, #0
   82a9e:	4b0d      	ldr	r3, [pc, #52]	; (82ad4 <osc_enable+0x7c>)
   82aa0:	4798      	blx	r3
		break;
   82aa2:	e011      	b.n	82ac8 <osc_enable+0x70>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   82aa4:	2010      	movs	r0, #16
   82aa6:	4b0b      	ldr	r3, [pc, #44]	; (82ad4 <osc_enable+0x7c>)
   82aa8:	4798      	blx	r3
		break;
   82aaa:	e00d      	b.n	82ac8 <osc_enable+0x70>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   82aac:	2020      	movs	r0, #32
   82aae:	4b09      	ldr	r3, [pc, #36]	; (82ad4 <osc_enable+0x7c>)
   82ab0:	4798      	blx	r3
		break;
   82ab2:	e009      	b.n	82ac8 <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   82ab4:	2000      	movs	r0, #0
   82ab6:	213e      	movs	r1, #62	; 0x3e
   82ab8:	4b07      	ldr	r3, [pc, #28]	; (82ad8 <osc_enable+0x80>)
   82aba:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   82abc:	e004      	b.n	82ac8 <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   82abe:	2001      	movs	r0, #1
   82ac0:	213e      	movs	r1, #62	; 0x3e
   82ac2:	4b05      	ldr	r3, [pc, #20]	; (82ad8 <osc_enable+0x80>)
   82ac4:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   82ac6:	bf00      	nop
	}
}
   82ac8:	3708      	adds	r7, #8
   82aca:	46bd      	mov	sp, r7
   82acc:	bd80      	pop	{r7, pc}
   82ace:	bf00      	nop
   82ad0:	000833ed 	.word	0x000833ed
   82ad4:	00083459 	.word	0x00083459
   82ad8:	000834f9 	.word	0x000834f9

00082adc <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   82adc:	b580      	push	{r7, lr}
   82ade:	b082      	sub	sp, #8
   82ae0:	af00      	add	r7, sp, #0
   82ae2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82ae4:	687b      	ldr	r3, [r7, #4]
   82ae6:	2b07      	cmp	r3, #7
   82ae8:	d826      	bhi.n	82b38 <osc_is_ready+0x5c>
   82aea:	a201      	add	r2, pc, #4	; (adr r2, 82af0 <osc_is_ready+0x14>)
   82aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82af0:	00082b11 	.word	0x00082b11
   82af4:	00082b15 	.word	0x00082b15
   82af8:	00082b15 	.word	0x00082b15
   82afc:	00082b27 	.word	0x00082b27
   82b00:	00082b27 	.word	0x00082b27
   82b04:	00082b27 	.word	0x00082b27
   82b08:	00082b27 	.word	0x00082b27
   82b0c:	00082b27 	.word	0x00082b27
	case OSC_SLCK_32K_RC:
		return 1;
   82b10:	2301      	movs	r3, #1
   82b12:	e012      	b.n	82b3a <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   82b14:	4b0b      	ldr	r3, [pc, #44]	; (82b44 <osc_is_ready+0x68>)
   82b16:	4798      	blx	r3
   82b18:	4603      	mov	r3, r0
   82b1a:	2b00      	cmp	r3, #0
   82b1c:	bf14      	ite	ne
   82b1e:	2301      	movne	r3, #1
   82b20:	2300      	moveq	r3, #0
   82b22:	b2db      	uxtb	r3, r3
   82b24:	e009      	b.n	82b3a <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   82b26:	4b08      	ldr	r3, [pc, #32]	; (82b48 <osc_is_ready+0x6c>)
   82b28:	4798      	blx	r3
   82b2a:	4603      	mov	r3, r0
   82b2c:	2b00      	cmp	r3, #0
   82b2e:	bf14      	ite	ne
   82b30:	2301      	movne	r3, #1
   82b32:	2300      	moveq	r3, #0
   82b34:	b2db      	uxtb	r3, r3
   82b36:	e000      	b.n	82b3a <osc_is_ready+0x5e>
	}

	return 0;
   82b38:	2300      	movs	r3, #0
}
   82b3a:	4618      	mov	r0, r3
   82b3c:	3708      	adds	r7, #8
   82b3e:	46bd      	mov	sp, r7
   82b40:	bd80      	pop	{r7, pc}
   82b42:	bf00      	nop
   82b44:	00083425 	.word	0x00083425
   82b48:	00083571 	.word	0x00083571

00082b4c <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   82b4c:	b480      	push	{r7}
   82b4e:	b083      	sub	sp, #12
   82b50:	af00      	add	r7, sp, #0
   82b52:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82b54:	687b      	ldr	r3, [r7, #4]
   82b56:	2b07      	cmp	r3, #7
   82b58:	d825      	bhi.n	82ba6 <osc_get_rate+0x5a>
   82b5a:	a201      	add	r2, pc, #4	; (adr r2, 82b60 <osc_get_rate+0x14>)
   82b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82b60:	00082b81 	.word	0x00082b81
   82b64:	00082b87 	.word	0x00082b87
   82b68:	00082b8d 	.word	0x00082b8d
   82b6c:	00082b93 	.word	0x00082b93
   82b70:	00082b97 	.word	0x00082b97
   82b74:	00082b9b 	.word	0x00082b9b
   82b78:	00082b9f 	.word	0x00082b9f
   82b7c:	00082ba3 	.word	0x00082ba3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   82b80:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   82b84:	e010      	b.n	82ba8 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   82b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   82b8a:	e00d      	b.n	82ba8 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   82b8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   82b90:	e00a      	b.n	82ba8 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   82b92:	4b08      	ldr	r3, [pc, #32]	; (82bb4 <osc_get_rate+0x68>)
   82b94:	e008      	b.n	82ba8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   82b96:	4b08      	ldr	r3, [pc, #32]	; (82bb8 <osc_get_rate+0x6c>)
   82b98:	e006      	b.n	82ba8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   82b9a:	4b08      	ldr	r3, [pc, #32]	; (82bbc <osc_get_rate+0x70>)
   82b9c:	e004      	b.n	82ba8 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   82b9e:	4b07      	ldr	r3, [pc, #28]	; (82bbc <osc_get_rate+0x70>)
   82ba0:	e002      	b.n	82ba8 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   82ba2:	4b06      	ldr	r3, [pc, #24]	; (82bbc <osc_get_rate+0x70>)
   82ba4:	e000      	b.n	82ba8 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   82ba6:	2300      	movs	r3, #0
}
   82ba8:	4618      	mov	r0, r3
   82baa:	370c      	adds	r7, #12
   82bac:	46bd      	mov	sp, r7
   82bae:	f85d 7b04 	ldr.w	r7, [sp], #4
   82bb2:	4770      	bx	lr
   82bb4:	003d0900 	.word	0x003d0900
   82bb8:	007a1200 	.word	0x007a1200
   82bbc:	00b71b00 	.word	0x00b71b00

00082bc0 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   82bc0:	b580      	push	{r7, lr}
   82bc2:	b082      	sub	sp, #8
   82bc4:	af00      	add	r7, sp, #0
   82bc6:	4603      	mov	r3, r0
   82bc8:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   82bca:	bf00      	nop
   82bcc:	79fb      	ldrb	r3, [r7, #7]
   82bce:	4618      	mov	r0, r3
   82bd0:	4b05      	ldr	r3, [pc, #20]	; (82be8 <osc_wait_ready+0x28>)
   82bd2:	4798      	blx	r3
   82bd4:	4603      	mov	r3, r0
   82bd6:	f083 0301 	eor.w	r3, r3, #1
   82bda:	b2db      	uxtb	r3, r3
   82bdc:	2b00      	cmp	r3, #0
   82bde:	d1f5      	bne.n	82bcc <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   82be0:	3708      	adds	r7, #8
   82be2:	46bd      	mov	sp, r7
   82be4:	bd80      	pop	{r7, pc}
   82be6:	bf00      	nop
   82be8:	00082add 	.word	0x00082add

00082bec <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   82bec:	b580      	push	{r7, lr}
   82bee:	b086      	sub	sp, #24
   82bf0:	af00      	add	r7, sp, #0
   82bf2:	60f8      	str	r0, [r7, #12]
   82bf4:	607a      	str	r2, [r7, #4]
   82bf6:	603b      	str	r3, [r7, #0]
   82bf8:	460b      	mov	r3, r1
   82bfa:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   82bfc:	687b      	ldr	r3, [r7, #4]
   82bfe:	2b00      	cmp	r3, #0
   82c00:	d107      	bne.n	82c12 <pll_config_init+0x26>
   82c02:	683b      	ldr	r3, [r7, #0]
   82c04:	2b00      	cmp	r3, #0
   82c06:	d104      	bne.n	82c12 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   82c08:	68fb      	ldr	r3, [r7, #12]
   82c0a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   82c0e:	601a      	str	r2, [r3, #0]
   82c10:	e019      	b.n	82c46 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   82c12:	7afb      	ldrb	r3, [r7, #11]
   82c14:	4618      	mov	r0, r3
   82c16:	4b0d      	ldr	r3, [pc, #52]	; (82c4c <pll_config_init+0x60>)
   82c18:	4798      	blx	r3
   82c1a:	4602      	mov	r2, r0
   82c1c:	687b      	ldr	r3, [r7, #4]
   82c1e:	fbb2 f3f3 	udiv	r3, r2, r3
   82c22:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   82c24:	697b      	ldr	r3, [r7, #20]
   82c26:	683a      	ldr	r2, [r7, #0]
   82c28:	fb02 f303 	mul.w	r3, r2, r3
   82c2c:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   82c2e:	683b      	ldr	r3, [r7, #0]
   82c30:	3b01      	subs	r3, #1
   82c32:	041a      	lsls	r2, r3, #16
   82c34:	4b06      	ldr	r3, [pc, #24]	; (82c50 <pll_config_init+0x64>)
   82c36:	4013      	ands	r3, r2
   82c38:	687a      	ldr	r2, [r7, #4]
   82c3a:	b2d2      	uxtb	r2, r2
   82c3c:	4313      	orrs	r3, r2
   82c3e:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   82c42:	68fb      	ldr	r3, [r7, #12]
   82c44:	601a      	str	r2, [r3, #0]
	}
}
   82c46:	3718      	adds	r7, #24
   82c48:	46bd      	mov	sp, r7
   82c4a:	bd80      	pop	{r7, pc}
   82c4c:	00082b4d 	.word	0x00082b4d
   82c50:	07ff0000 	.word	0x07ff0000

00082c54 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   82c54:	b580      	push	{r7, lr}
   82c56:	b082      	sub	sp, #8
   82c58:	af00      	add	r7, sp, #0
   82c5a:	6078      	str	r0, [r7, #4]
   82c5c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   82c5e:	683b      	ldr	r3, [r7, #0]
   82c60:	2b00      	cmp	r3, #0
   82c62:	d108      	bne.n	82c76 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   82c64:	4b08      	ldr	r3, [pc, #32]	; (82c88 <pll_enable+0x34>)
   82c66:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82c68:	4a08      	ldr	r2, [pc, #32]	; (82c8c <pll_enable+0x38>)
   82c6a:	687b      	ldr	r3, [r7, #4]
   82c6c:	681b      	ldr	r3, [r3, #0]
   82c6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   82c72:	6293      	str	r3, [r2, #40]	; 0x28
   82c74:	e005      	b.n	82c82 <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   82c76:	4a05      	ldr	r2, [pc, #20]	; (82c8c <pll_enable+0x38>)
   82c78:	687b      	ldr	r3, [r7, #4]
   82c7a:	681b      	ldr	r3, [r3, #0]
   82c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82c80:	61d3      	str	r3, [r2, #28]
	}
}
   82c82:	3708      	adds	r7, #8
   82c84:	46bd      	mov	sp, r7
   82c86:	bd80      	pop	{r7, pc}
   82c88:	0008358d 	.word	0x0008358d
   82c8c:	400e0600 	.word	0x400e0600

00082c90 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   82c90:	b580      	push	{r7, lr}
   82c92:	b082      	sub	sp, #8
   82c94:	af00      	add	r7, sp, #0
   82c96:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   82c98:	687b      	ldr	r3, [r7, #4]
   82c9a:	2b00      	cmp	r3, #0
   82c9c:	d103      	bne.n	82ca6 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   82c9e:	4b05      	ldr	r3, [pc, #20]	; (82cb4 <pll_is_locked+0x24>)
   82ca0:	4798      	blx	r3
   82ca2:	4603      	mov	r3, r0
   82ca4:	e002      	b.n	82cac <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   82ca6:	4b04      	ldr	r3, [pc, #16]	; (82cb8 <pll_is_locked+0x28>)
   82ca8:	4798      	blx	r3
   82caa:	4603      	mov	r3, r0
	}
}
   82cac:	4618      	mov	r0, r3
   82cae:	3708      	adds	r7, #8
   82cb0:	46bd      	mov	sp, r7
   82cb2:	bd80      	pop	{r7, pc}
   82cb4:	000835a5 	.word	0x000835a5
   82cb8:	000835c1 	.word	0x000835c1

00082cbc <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   82cbc:	b580      	push	{r7, lr}
   82cbe:	b082      	sub	sp, #8
   82cc0:	af00      	add	r7, sp, #0
   82cc2:	4603      	mov	r3, r0
   82cc4:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   82cc6:	79fb      	ldrb	r3, [r7, #7]
   82cc8:	3b03      	subs	r3, #3
   82cca:	2b04      	cmp	r3, #4
   82ccc:	d808      	bhi.n	82ce0 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   82cce:	79fb      	ldrb	r3, [r7, #7]
   82cd0:	4618      	mov	r0, r3
   82cd2:	4b05      	ldr	r3, [pc, #20]	; (82ce8 <pll_enable_source+0x2c>)
   82cd4:	4798      	blx	r3
		osc_wait_ready(e_src);
   82cd6:	79fb      	ldrb	r3, [r7, #7]
   82cd8:	4618      	mov	r0, r3
   82cda:	4b04      	ldr	r3, [pc, #16]	; (82cec <pll_enable_source+0x30>)
   82cdc:	4798      	blx	r3
		break;
   82cde:	e000      	b.n	82ce2 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   82ce0:	bf00      	nop
	}
}
   82ce2:	3708      	adds	r7, #8
   82ce4:	46bd      	mov	sp, r7
   82ce6:	bd80      	pop	{r7, pc}
   82ce8:	00082a59 	.word	0x00082a59
   82cec:	00082bc1 	.word	0x00082bc1

00082cf0 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   82cf0:	b580      	push	{r7, lr}
   82cf2:	b082      	sub	sp, #8
   82cf4:	af00      	add	r7, sp, #0
   82cf6:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82cf8:	bf00      	nop
   82cfa:	6878      	ldr	r0, [r7, #4]
   82cfc:	4b04      	ldr	r3, [pc, #16]	; (82d10 <pll_wait_for_lock+0x20>)
   82cfe:	4798      	blx	r3
   82d00:	4603      	mov	r3, r0
   82d02:	2b00      	cmp	r3, #0
   82d04:	d0f9      	beq.n	82cfa <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   82d06:	2300      	movs	r3, #0
}
   82d08:	4618      	mov	r0, r3
   82d0a:	3708      	adds	r7, #8
   82d0c:	46bd      	mov	sp, r7
   82d0e:	bd80      	pop	{r7, pc}
   82d10:	00082c91 	.word	0x00082c91

00082d14 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   82d14:	b580      	push	{r7, lr}
   82d16:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   82d18:	2006      	movs	r0, #6
   82d1a:	4b04      	ldr	r3, [pc, #16]	; (82d2c <sysclk_get_main_hz+0x18>)
   82d1c:	4798      	blx	r3
   82d1e:	4602      	mov	r2, r0
   82d20:	4613      	mov	r3, r2
   82d22:	00db      	lsls	r3, r3, #3
   82d24:	1a9b      	subs	r3, r3, r2
   82d26:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   82d28:	4618      	mov	r0, r3
   82d2a:	bd80      	pop	{r7, pc}
   82d2c:	00082b4d 	.word	0x00082b4d

00082d30 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   82d30:	b580      	push	{r7, lr}
   82d32:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   82d34:	4b02      	ldr	r3, [pc, #8]	; (82d40 <sysclk_get_cpu_hz+0x10>)
   82d36:	4798      	blx	r3
   82d38:	4603      	mov	r3, r0
   82d3a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   82d3c:	4618      	mov	r0, r3
   82d3e:	bd80      	pop	{r7, pc}
   82d40:	00082d15 	.word	0x00082d15

00082d44 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   82d44:	b590      	push	{r4, r7, lr}
   82d46:	b083      	sub	sp, #12
   82d48:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82d4a:	4b10      	ldr	r3, [pc, #64]	; (82d8c <sysclk_init+0x48>)
   82d4c:	4798      	blx	r3
   82d4e:	4603      	mov	r3, r0
   82d50:	4618      	mov	r0, r3
   82d52:	4b0f      	ldr	r3, [pc, #60]	; (82d90 <sysclk_init+0x4c>)
   82d54:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   82d56:	2006      	movs	r0, #6
   82d58:	4b0e      	ldr	r3, [pc, #56]	; (82d94 <sysclk_init+0x50>)
   82d5a:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   82d5c:	1d3b      	adds	r3, r7, #4
   82d5e:	4618      	mov	r0, r3
   82d60:	2106      	movs	r1, #6
   82d62:	2201      	movs	r2, #1
   82d64:	230e      	movs	r3, #14
   82d66:	4c0c      	ldr	r4, [pc, #48]	; (82d98 <sysclk_init+0x54>)
   82d68:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   82d6a:	1d3b      	adds	r3, r7, #4
   82d6c:	4618      	mov	r0, r3
   82d6e:	2100      	movs	r1, #0
   82d70:	4b0a      	ldr	r3, [pc, #40]	; (82d9c <sysclk_init+0x58>)
   82d72:	4798      	blx	r3
		pll_wait_for_lock(0);
   82d74:	2000      	movs	r0, #0
   82d76:	4b0a      	ldr	r3, [pc, #40]	; (82da0 <sysclk_init+0x5c>)
   82d78:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82d7a:	2010      	movs	r0, #16
   82d7c:	4b09      	ldr	r3, [pc, #36]	; (82da4 <sysclk_init+0x60>)
   82d7e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82d80:	4b09      	ldr	r3, [pc, #36]	; (82da8 <sysclk_init+0x64>)
   82d82:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   82d84:	370c      	adds	r7, #12
   82d86:	46bd      	mov	sp, r7
   82d88:	bd90      	pop	{r4, r7, pc}
   82d8a:	bf00      	nop
   82d8c:	00082d31 	.word	0x00082d31
   82d90:	000838c9 	.word	0x000838c9
   82d94:	00082cbd 	.word	0x00082cbd
   82d98:	00082bed 	.word	0x00082bed
   82d9c:	00082c55 	.word	0x00082c55
   82da0:	00082cf1 	.word	0x00082cf1
   82da4:	00083369 	.word	0x00083369
   82da8:	00083749 	.word	0x00083749

00082dac <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   82dac:	b580      	push	{r7, lr}
   82dae:	b082      	sub	sp, #8
   82db0:	af00      	add	r7, sp, #0
   82db2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   82db4:	6878      	ldr	r0, [r7, #4]
   82db6:	4b02      	ldr	r3, [pc, #8]	; (82dc0 <sysclk_enable_peripheral_clock+0x14>)
   82db8:	4798      	blx	r3
}
   82dba:	3708      	adds	r7, #8
   82dbc:	46bd      	mov	sp, r7
   82dbe:	bd80      	pop	{r7, pc}
   82dc0:	000835dd 	.word	0x000835dd

00082dc4 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
   82dc4:	b580      	push	{r7, lr}
   82dc6:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
   82dc8:	200b      	movs	r0, #11
   82dca:	4b06      	ldr	r3, [pc, #24]	; (82de4 <ioport_init+0x20>)
   82dcc:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
   82dce:	200c      	movs	r0, #12
   82dd0:	4b04      	ldr	r3, [pc, #16]	; (82de4 <ioport_init+0x20>)
   82dd2:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
   82dd4:	200d      	movs	r0, #13
   82dd6:	4b03      	ldr	r3, [pc, #12]	; (82de4 <ioport_init+0x20>)
   82dd8:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
   82dda:	200e      	movs	r0, #14
   82ddc:	4b01      	ldr	r3, [pc, #4]	; (82de4 <ioport_init+0x20>)
   82dde:	4798      	blx	r3
	arch_ioport_init();
}
   82de0:	bd80      	pop	{r7, pc}
   82de2:	bf00      	nop
   82de4:	00082dad 	.word	0x00082dad

00082de8 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   82de8:	b580      	push	{r7, lr}
   82dea:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   82dec:	4b17      	ldr	r3, [pc, #92]	; (82e4c <board_init+0x64>)
   82dee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82df2:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   82df4:	4b16      	ldr	r3, [pc, #88]	; (82e50 <board_init+0x68>)
   82df6:	4798      	blx	r3
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   82df8:	203b      	movs	r0, #59	; 0x3b
   82dfa:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82dfe:	4b15      	ldr	r3, [pc, #84]	; (82e54 <board_init+0x6c>)
   82e00:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   82e02:	2055      	movs	r0, #85	; 0x55
   82e04:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82e08:	4b12      	ldr	r3, [pc, #72]	; (82e54 <board_init+0x6c>)
   82e0a:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   82e0c:	2056      	movs	r0, #86	; 0x56
   82e0e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82e12:	4b10      	ldr	r3, [pc, #64]	; (82e54 <board_init+0x6c>)
   82e14:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   82e16:	2068      	movs	r0, #104	; 0x68
   82e18:	490f      	ldr	r1, [pc, #60]	; (82e58 <board_init+0x70>)
   82e1a:	4b0e      	ldr	r3, [pc, #56]	; (82e54 <board_init+0x6c>)
   82e1c:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   82e1e:	205c      	movs	r0, #92	; 0x5c
   82e20:	490e      	ldr	r1, [pc, #56]	; (82e5c <board_init+0x74>)
   82e22:	4b0c      	ldr	r3, [pc, #48]	; (82e54 <board_init+0x6c>)
   82e24:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   82e26:	480e      	ldr	r0, [pc, #56]	; (82e60 <board_init+0x78>)
   82e28:	f44f 7140 	mov.w	r1, #768	; 0x300
   82e2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   82e30:	4b0c      	ldr	r3, [pc, #48]	; (82e64 <board_init+0x7c>)
   82e32:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   82e34:	202b      	movs	r0, #43	; 0x2b
   82e36:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82e3a:	4b06      	ldr	r3, [pc, #24]	; (82e54 <board_init+0x6c>)
   82e3c:	4798      	blx	r3
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   82e3e:	202a      	movs	r0, #42	; 0x2a
   82e40:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82e44:	4b03      	ldr	r3, [pc, #12]	; (82e54 <board_init+0x6c>)
   82e46:	4798      	blx	r3
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
	gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
#endif
}
   82e48:	bd80      	pop	{r7, pc}
   82e4a:	bf00      	nop
   82e4c:	400e1a50 	.word	0x400e1a50
   82e50:	00082dc5 	.word	0x00082dc5
   82e54:	00083041 	.word	0x00083041
   82e58:	28000079 	.word	0x28000079
   82e5c:	28000001 	.word	0x28000001
   82e60:	400e0e00 	.word	0x400e0e00
   82e64:	00083181 	.word	0x00083181

00082e68 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   82e68:	b480      	push	{r7}
   82e6a:	b085      	sub	sp, #20
   82e6c:	af00      	add	r7, sp, #0
   82e6e:	60f8      	str	r0, [r7, #12]
   82e70:	60b9      	str	r1, [r7, #8]
   82e72:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82e74:	687b      	ldr	r3, [r7, #4]
   82e76:	2b00      	cmp	r3, #0
   82e78:	d003      	beq.n	82e82 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   82e7a:	68fb      	ldr	r3, [r7, #12]
   82e7c:	68ba      	ldr	r2, [r7, #8]
   82e7e:	665a      	str	r2, [r3, #100]	; 0x64
   82e80:	e002      	b.n	82e88 <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82e82:	68fb      	ldr	r3, [r7, #12]
   82e84:	68ba      	ldr	r2, [r7, #8]
   82e86:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   82e88:	3714      	adds	r7, #20
   82e8a:	46bd      	mov	sp, r7
   82e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
   82e90:	4770      	bx	lr
   82e92:	bf00      	nop

00082e94 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   82e94:	b480      	push	{r7}
   82e96:	b087      	sub	sp, #28
   82e98:	af00      	add	r7, sp, #0
   82e9a:	60f8      	str	r0, [r7, #12]
   82e9c:	60b9      	str	r1, [r7, #8]
   82e9e:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82ea0:	68fb      	ldr	r3, [r7, #12]
   82ea2:	687a      	ldr	r2, [r7, #4]
   82ea4:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   82ea6:	68bb      	ldr	r3, [r7, #8]
   82ea8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82eac:	d01f      	beq.n	82eee <pio_set_peripheral+0x5a>
   82eae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82eb2:	d805      	bhi.n	82ec0 <pio_set_peripheral+0x2c>
   82eb4:	2b00      	cmp	r3, #0
   82eb6:	d027      	beq.n	82f08 <pio_set_peripheral+0x74>
   82eb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82ebc:	d00a      	beq.n	82ed4 <pio_set_peripheral+0x40>
   82ebe:	e01f      	b.n	82f00 <pio_set_peripheral+0x6c>
   82ec0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82ec4:	d020      	beq.n	82f08 <pio_set_peripheral+0x74>
   82ec6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82eca:	d01d      	beq.n	82f08 <pio_set_peripheral+0x74>
   82ecc:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82ed0:	d01a      	beq.n	82f08 <pio_set_peripheral+0x74>
   82ed2:	e015      	b.n	82f00 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   82ed4:	68fb      	ldr	r3, [r7, #12]
   82ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82ed8:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   82eda:	68fb      	ldr	r3, [r7, #12]
   82edc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   82ede:	687b      	ldr	r3, [r7, #4]
   82ee0:	43d9      	mvns	r1, r3
   82ee2:	697b      	ldr	r3, [r7, #20]
   82ee4:	400b      	ands	r3, r1
   82ee6:	401a      	ands	r2, r3
   82ee8:	68fb      	ldr	r3, [r7, #12]
   82eea:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   82eec:	e008      	b.n	82f00 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   82eee:	68fb      	ldr	r3, [r7, #12]
   82ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82ef2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   82ef4:	687a      	ldr	r2, [r7, #4]
   82ef6:	697b      	ldr	r3, [r7, #20]
   82ef8:	431a      	orrs	r2, r3
   82efa:	68fb      	ldr	r3, [r7, #12]
   82efc:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   82efe:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   82f00:	68fb      	ldr	r3, [r7, #12]
   82f02:	687a      	ldr	r2, [r7, #4]
   82f04:	605a      	str	r2, [r3, #4]
   82f06:	e000      	b.n	82f0a <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   82f08:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
   82f0a:	371c      	adds	r7, #28
   82f0c:	46bd      	mov	sp, r7
   82f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82f12:	4770      	bx	lr

00082f14 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   82f14:	b580      	push	{r7, lr}
   82f16:	b084      	sub	sp, #16
   82f18:	af00      	add	r7, sp, #0
   82f1a:	60f8      	str	r0, [r7, #12]
   82f1c:	60b9      	str	r1, [r7, #8]
   82f1e:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   82f20:	68f8      	ldr	r0, [r7, #12]
   82f22:	68b9      	ldr	r1, [r7, #8]
   82f24:	4b18      	ldr	r3, [pc, #96]	; (82f88 <pio_set_input+0x74>)
   82f26:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   82f28:	687b      	ldr	r3, [r7, #4]
   82f2a:	f003 0301 	and.w	r3, r3, #1
   82f2e:	68f8      	ldr	r0, [r7, #12]
   82f30:	68b9      	ldr	r1, [r7, #8]
   82f32:	461a      	mov	r2, r3
   82f34:	4b15      	ldr	r3, [pc, #84]	; (82f8c <pio_set_input+0x78>)
   82f36:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82f38:	687b      	ldr	r3, [r7, #4]
   82f3a:	f003 030a 	and.w	r3, r3, #10
   82f3e:	2b00      	cmp	r3, #0
   82f40:	d003      	beq.n	82f4a <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   82f42:	68fb      	ldr	r3, [r7, #12]
   82f44:	68ba      	ldr	r2, [r7, #8]
   82f46:	621a      	str	r2, [r3, #32]
   82f48:	e002      	b.n	82f50 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   82f4a:	68fb      	ldr	r3, [r7, #12]
   82f4c:	68ba      	ldr	r2, [r7, #8]
   82f4e:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   82f50:	687b      	ldr	r3, [r7, #4]
   82f52:	f003 0302 	and.w	r3, r3, #2
   82f56:	2b00      	cmp	r3, #0
   82f58:	d004      	beq.n	82f64 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   82f5a:	68fb      	ldr	r3, [r7, #12]
   82f5c:	68ba      	ldr	r2, [r7, #8]
   82f5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   82f62:	e008      	b.n	82f76 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   82f64:	687b      	ldr	r3, [r7, #4]
   82f66:	f003 0308 	and.w	r3, r3, #8
   82f6a:	2b00      	cmp	r3, #0
   82f6c:	d003      	beq.n	82f76 <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   82f6e:	68fb      	ldr	r3, [r7, #12]
   82f70:	68ba      	ldr	r2, [r7, #8]
   82f72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   82f76:	68fb      	ldr	r3, [r7, #12]
   82f78:	68ba      	ldr	r2, [r7, #8]
   82f7a:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   82f7c:	68fb      	ldr	r3, [r7, #12]
   82f7e:	68ba      	ldr	r2, [r7, #8]
   82f80:	601a      	str	r2, [r3, #0]
}
   82f82:	3710      	adds	r7, #16
   82f84:	46bd      	mov	sp, r7
   82f86:	bd80      	pop	{r7, pc}
   82f88:	00082ff5 	.word	0x00082ff5
   82f8c:	00082e69 	.word	0x00082e69

00082f90 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   82f90:	b580      	push	{r7, lr}
   82f92:	b084      	sub	sp, #16
   82f94:	af00      	add	r7, sp, #0
   82f96:	60f8      	str	r0, [r7, #12]
   82f98:	60b9      	str	r1, [r7, #8]
   82f9a:	607a      	str	r2, [r7, #4]
   82f9c:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   82f9e:	68f8      	ldr	r0, [r7, #12]
   82fa0:	68b9      	ldr	r1, [r7, #8]
   82fa2:	4b12      	ldr	r3, [pc, #72]	; (82fec <pio_set_output+0x5c>)
   82fa4:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   82fa6:	68f8      	ldr	r0, [r7, #12]
   82fa8:	68b9      	ldr	r1, [r7, #8]
   82faa:	69ba      	ldr	r2, [r7, #24]
   82fac:	4b10      	ldr	r3, [pc, #64]	; (82ff0 <pio_set_output+0x60>)
   82fae:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   82fb0:	683b      	ldr	r3, [r7, #0]
   82fb2:	2b00      	cmp	r3, #0
   82fb4:	d003      	beq.n	82fbe <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   82fb6:	68fb      	ldr	r3, [r7, #12]
   82fb8:	68ba      	ldr	r2, [r7, #8]
   82fba:	651a      	str	r2, [r3, #80]	; 0x50
   82fbc:	e002      	b.n	82fc4 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   82fbe:	68fb      	ldr	r3, [r7, #12]
   82fc0:	68ba      	ldr	r2, [r7, #8]
   82fc2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   82fc4:	687b      	ldr	r3, [r7, #4]
   82fc6:	2b00      	cmp	r3, #0
   82fc8:	d003      	beq.n	82fd2 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   82fca:	68fb      	ldr	r3, [r7, #12]
   82fcc:	68ba      	ldr	r2, [r7, #8]
   82fce:	631a      	str	r2, [r3, #48]	; 0x30
   82fd0:	e002      	b.n	82fd8 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   82fd2:	68fb      	ldr	r3, [r7, #12]
   82fd4:	68ba      	ldr	r2, [r7, #8]
   82fd6:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   82fd8:	68fb      	ldr	r3, [r7, #12]
   82fda:	68ba      	ldr	r2, [r7, #8]
   82fdc:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   82fde:	68fb      	ldr	r3, [r7, #12]
   82fe0:	68ba      	ldr	r2, [r7, #8]
   82fe2:	601a      	str	r2, [r3, #0]
}
   82fe4:	3710      	adds	r7, #16
   82fe6:	46bd      	mov	sp, r7
   82fe8:	bd80      	pop	{r7, pc}
   82fea:	bf00      	nop
   82fec:	00082ff5 	.word	0x00082ff5
   82ff0:	00082e69 	.word	0x00082e69

00082ff4 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   82ff4:	b480      	push	{r7}
   82ff6:	b083      	sub	sp, #12
   82ff8:	af00      	add	r7, sp, #0
   82ffa:	6078      	str	r0, [r7, #4]
   82ffc:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   82ffe:	687b      	ldr	r3, [r7, #4]
   83000:	683a      	ldr	r2, [r7, #0]
   83002:	645a      	str	r2, [r3, #68]	; 0x44
}
   83004:	370c      	adds	r7, #12
   83006:	46bd      	mov	sp, r7
   83008:	f85d 7b04 	ldr.w	r7, [sp], #4
   8300c:	4770      	bx	lr
   8300e:	bf00      	nop

00083010 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   83010:	b480      	push	{r7}
   83012:	b083      	sub	sp, #12
   83014:	af00      	add	r7, sp, #0
   83016:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   83018:	687b      	ldr	r3, [r7, #4]
   8301a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   8301c:	4618      	mov	r0, r3
   8301e:	370c      	adds	r7, #12
   83020:	46bd      	mov	sp, r7
   83022:	f85d 7b04 	ldr.w	r7, [sp], #4
   83026:	4770      	bx	lr

00083028 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   83028:	b480      	push	{r7}
   8302a:	b083      	sub	sp, #12
   8302c:	af00      	add	r7, sp, #0
   8302e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   83030:	687b      	ldr	r3, [r7, #4]
   83032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   83034:	4618      	mov	r0, r3
   83036:	370c      	adds	r7, #12
   83038:	46bd      	mov	sp, r7
   8303a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8303e:	4770      	bx	lr

00083040 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   83040:	b590      	push	{r4, r7, lr}
   83042:	b087      	sub	sp, #28
   83044:	af02      	add	r7, sp, #8
   83046:	6078      	str	r0, [r7, #4]
   83048:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8304a:	687b      	ldr	r3, [r7, #4]
   8304c:	095b      	lsrs	r3, r3, #5
   8304e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83052:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83056:	025b      	lsls	r3, r3, #9
   83058:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8305a:	683b      	ldr	r3, [r7, #0]
   8305c:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   83060:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83064:	d048      	beq.n	830f8 <pio_configure_pin+0xb8>
   83066:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8306a:	d806      	bhi.n	8307a <pio_configure_pin+0x3a>
   8306c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   83070:	d00a      	beq.n	83088 <pio_configure_pin+0x48>
   83072:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   83076:	d023      	beq.n	830c0 <pio_configure_pin+0x80>
   83078:	e072      	b.n	83160 <pio_configure_pin+0x120>
   8307a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8307e:	d047      	beq.n	83110 <pio_configure_pin+0xd0>
   83080:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83084:	d044      	beq.n	83110 <pio_configure_pin+0xd0>
   83086:	e06b      	b.n	83160 <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   83088:	687b      	ldr	r3, [r7, #4]
   8308a:	f003 031f 	and.w	r3, r3, #31
   8308e:	2201      	movs	r2, #1
   83090:	fa02 f303 	lsl.w	r3, r2, r3
   83094:	68f8      	ldr	r0, [r7, #12]
   83096:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8309a:	461a      	mov	r2, r3
   8309c:	4b34      	ldr	r3, [pc, #208]	; (83170 <pio_configure_pin+0x130>)
   8309e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   830a0:	687b      	ldr	r3, [r7, #4]
   830a2:	f003 031f 	and.w	r3, r3, #31
   830a6:	2201      	movs	r2, #1
   830a8:	fa02 f303 	lsl.w	r3, r2, r3
   830ac:	461a      	mov	r2, r3
   830ae:	683b      	ldr	r3, [r7, #0]
   830b0:	f003 0301 	and.w	r3, r3, #1
   830b4:	68f8      	ldr	r0, [r7, #12]
   830b6:	4611      	mov	r1, r2
   830b8:	461a      	mov	r2, r3
   830ba:	4b2e      	ldr	r3, [pc, #184]	; (83174 <pio_configure_pin+0x134>)
   830bc:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   830be:	e051      	b.n	83164 <pio_configure_pin+0x124>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   830c0:	687b      	ldr	r3, [r7, #4]
   830c2:	f003 031f 	and.w	r3, r3, #31
   830c6:	2201      	movs	r2, #1
   830c8:	fa02 f303 	lsl.w	r3, r2, r3
   830cc:	68f8      	ldr	r0, [r7, #12]
   830ce:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   830d2:	461a      	mov	r2, r3
   830d4:	4b26      	ldr	r3, [pc, #152]	; (83170 <pio_configure_pin+0x130>)
   830d6:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   830d8:	687b      	ldr	r3, [r7, #4]
   830da:	f003 031f 	and.w	r3, r3, #31
   830de:	2201      	movs	r2, #1
   830e0:	fa02 f303 	lsl.w	r3, r2, r3
   830e4:	461a      	mov	r2, r3
   830e6:	683b      	ldr	r3, [r7, #0]
   830e8:	f003 0301 	and.w	r3, r3, #1
   830ec:	68f8      	ldr	r0, [r7, #12]
   830ee:	4611      	mov	r1, r2
   830f0:	461a      	mov	r2, r3
   830f2:	4b20      	ldr	r3, [pc, #128]	; (83174 <pio_configure_pin+0x134>)
   830f4:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   830f6:	e035      	b.n	83164 <pio_configure_pin+0x124>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   830f8:	687b      	ldr	r3, [r7, #4]
   830fa:	f003 031f 	and.w	r3, r3, #31
   830fe:	2201      	movs	r2, #1
   83100:	fa02 f303 	lsl.w	r3, r2, r3
   83104:	68f8      	ldr	r0, [r7, #12]
   83106:	4619      	mov	r1, r3
   83108:	683a      	ldr	r2, [r7, #0]
   8310a:	4b1b      	ldr	r3, [pc, #108]	; (83178 <pio_configure_pin+0x138>)
   8310c:	4798      	blx	r3
		break;
   8310e:	e029      	b.n	83164 <pio_configure_pin+0x124>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83110:	687b      	ldr	r3, [r7, #4]
   83112:	f003 031f 	and.w	r3, r3, #31
   83116:	2201      	movs	r2, #1
   83118:	fa02 f303 	lsl.w	r3, r2, r3
   8311c:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8311e:	683b      	ldr	r3, [r7, #0]
   83120:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83124:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83128:	bf0c      	ite	eq
   8312a:	2301      	moveq	r3, #1
   8312c:	2300      	movne	r3, #0
   8312e:	b2db      	uxtb	r3, r3
   83130:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   83132:	683b      	ldr	r3, [r7, #0]
   83134:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83138:	2b00      	cmp	r3, #0
   8313a:	bf14      	ite	ne
   8313c:	2301      	movne	r3, #1
   8313e:	2300      	moveq	r3, #0
   83140:	b2db      	uxtb	r3, r3
   83142:	461c      	mov	r4, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   83144:	683b      	ldr	r3, [r7, #0]
   83146:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8314a:	2b00      	cmp	r3, #0
   8314c:	bf14      	ite	ne
   8314e:	2301      	movne	r3, #1
   83150:	2300      	moveq	r3, #0
   83152:	b2db      	uxtb	r3, r3
   83154:	9300      	str	r3, [sp, #0]
   83156:	68f8      	ldr	r0, [r7, #12]
   83158:	4623      	mov	r3, r4
   8315a:	4c08      	ldr	r4, [pc, #32]	; (8317c <pio_configure_pin+0x13c>)
   8315c:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8315e:	e001      	b.n	83164 <pio_configure_pin+0x124>

	default:
		return 0;
   83160:	2300      	movs	r3, #0
   83162:	e000      	b.n	83166 <pio_configure_pin+0x126>
	}

	return 1;
   83164:	2301      	movs	r3, #1
}
   83166:	4618      	mov	r0, r3
   83168:	3714      	adds	r7, #20
   8316a:	46bd      	mov	sp, r7
   8316c:	bd90      	pop	{r4, r7, pc}
   8316e:	bf00      	nop
   83170:	00082e95 	.word	0x00082e95
   83174:	00082e69 	.word	0x00082e69
   83178:	00082f15 	.word	0x00082f15
   8317c:	00082f91 	.word	0x00082f91

00083180 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   83180:	b590      	push	{r4, r7, lr}
   83182:	b087      	sub	sp, #28
   83184:	af02      	add	r7, sp, #8
   83186:	60f8      	str	r0, [r7, #12]
   83188:	60b9      	str	r1, [r7, #8]
   8318a:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8318c:	687b      	ldr	r3, [r7, #4]
   8318e:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   83192:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83196:	d02e      	beq.n	831f6 <pio_configure_pin_group+0x76>
   83198:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8319c:	d806      	bhi.n	831ac <pio_configure_pin_group+0x2c>
   8319e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   831a2:	d00a      	beq.n	831ba <pio_configure_pin_group+0x3a>
   831a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   831a8:	d016      	beq.n	831d8 <pio_configure_pin_group+0x58>
   831aa:	e04c      	b.n	83246 <pio_configure_pin_group+0xc6>
   831ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   831b0:	d027      	beq.n	83202 <pio_configure_pin_group+0x82>
   831b2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   831b6:	d024      	beq.n	83202 <pio_configure_pin_group+0x82>
   831b8:	e045      	b.n	83246 <pio_configure_pin_group+0xc6>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   831ba:	68f8      	ldr	r0, [r7, #12]
   831bc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   831c0:	68ba      	ldr	r2, [r7, #8]
   831c2:	4b24      	ldr	r3, [pc, #144]	; (83254 <pio_configure_pin_group+0xd4>)
   831c4:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   831c6:	687b      	ldr	r3, [r7, #4]
   831c8:	f003 0301 	and.w	r3, r3, #1
   831cc:	68f8      	ldr	r0, [r7, #12]
   831ce:	68b9      	ldr	r1, [r7, #8]
   831d0:	461a      	mov	r2, r3
   831d2:	4b21      	ldr	r3, [pc, #132]	; (83258 <pio_configure_pin_group+0xd8>)
   831d4:	4798      	blx	r3
		break;
   831d6:	e038      	b.n	8324a <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   831d8:	68f8      	ldr	r0, [r7, #12]
   831da:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   831de:	68ba      	ldr	r2, [r7, #8]
   831e0:	4b1c      	ldr	r3, [pc, #112]	; (83254 <pio_configure_pin_group+0xd4>)
   831e2:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   831e4:	687b      	ldr	r3, [r7, #4]
   831e6:	f003 0301 	and.w	r3, r3, #1
   831ea:	68f8      	ldr	r0, [r7, #12]
   831ec:	68b9      	ldr	r1, [r7, #8]
   831ee:	461a      	mov	r2, r3
   831f0:	4b19      	ldr	r3, [pc, #100]	; (83258 <pio_configure_pin_group+0xd8>)
   831f2:	4798      	blx	r3
		break;
   831f4:	e029      	b.n	8324a <pio_configure_pin_group+0xca>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   831f6:	68f8      	ldr	r0, [r7, #12]
   831f8:	68b9      	ldr	r1, [r7, #8]
   831fa:	687a      	ldr	r2, [r7, #4]
   831fc:	4b17      	ldr	r3, [pc, #92]	; (8325c <pio_configure_pin_group+0xdc>)
   831fe:	4798      	blx	r3
		break;
   83200:	e023      	b.n	8324a <pio_configure_pin_group+0xca>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   83202:	687b      	ldr	r3, [r7, #4]
   83204:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   83208:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8320c:	bf0c      	ite	eq
   8320e:	2301      	moveq	r3, #1
   83210:	2300      	movne	r3, #0
   83212:	b2db      	uxtb	r3, r3
   83214:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   83216:	687b      	ldr	r3, [r7, #4]
   83218:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8321c:	2b00      	cmp	r3, #0
   8321e:	bf14      	ite	ne
   83220:	2301      	movne	r3, #1
   83222:	2300      	moveq	r3, #0
   83224:	b2db      	uxtb	r3, r3
   83226:	461c      	mov	r4, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   83228:	687b      	ldr	r3, [r7, #4]
   8322a:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8322e:	2b00      	cmp	r3, #0
   83230:	bf14      	ite	ne
   83232:	2301      	movne	r3, #1
   83234:	2300      	moveq	r3, #0
   83236:	b2db      	uxtb	r3, r3
   83238:	9300      	str	r3, [sp, #0]
   8323a:	68f8      	ldr	r0, [r7, #12]
   8323c:	68b9      	ldr	r1, [r7, #8]
   8323e:	4623      	mov	r3, r4
   83240:	4c07      	ldr	r4, [pc, #28]	; (83260 <pio_configure_pin_group+0xe0>)
   83242:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   83244:	e001      	b.n	8324a <pio_configure_pin_group+0xca>

	default:
		return 0;
   83246:	2300      	movs	r3, #0
   83248:	e000      	b.n	8324c <pio_configure_pin_group+0xcc>
	}

	return 1;
   8324a:	2301      	movs	r3, #1
}
   8324c:	4618      	mov	r0, r3
   8324e:	3714      	adds	r7, #20
   83250:	46bd      	mov	sp, r7
   83252:	bd90      	pop	{r4, r7, pc}
   83254:	00082e95 	.word	0x00082e95
   83258:	00082e69 	.word	0x00082e69
   8325c:	00082f15 	.word	0x00082f15
   83260:	00082f91 	.word	0x00082f91

00083264 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   83264:	b580      	push	{r7, lr}
   83266:	b084      	sub	sp, #16
   83268:	af00      	add	r7, sp, #0
   8326a:	6078      	str	r0, [r7, #4]
   8326c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8326e:	6878      	ldr	r0, [r7, #4]
   83270:	4b22      	ldr	r3, [pc, #136]	; (832fc <pio_handler_process+0x98>)
   83272:	4798      	blx	r3
   83274:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   83276:	6878      	ldr	r0, [r7, #4]
   83278:	4b21      	ldr	r3, [pc, #132]	; (83300 <pio_handler_process+0x9c>)
   8327a:	4798      	blx	r3
   8327c:	4602      	mov	r2, r0
   8327e:	68fb      	ldr	r3, [r7, #12]
   83280:	4013      	ands	r3, r2
   83282:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   83284:	68fb      	ldr	r3, [r7, #12]
   83286:	2b00      	cmp	r3, #0
   83288:	d034      	beq.n	832f4 <pio_handler_process+0x90>
		/* Find triggering source */
		i = 0;
   8328a:	2300      	movs	r3, #0
   8328c:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   8328e:	e02e      	b.n	832ee <pio_handler_process+0x8a>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   83290:	4a1c      	ldr	r2, [pc, #112]	; (83304 <pio_handler_process+0xa0>)
   83292:	68bb      	ldr	r3, [r7, #8]
   83294:	011b      	lsls	r3, r3, #4
   83296:	4413      	add	r3, r2
   83298:	681a      	ldr	r2, [r3, #0]
   8329a:	683b      	ldr	r3, [r7, #0]
   8329c:	429a      	cmp	r2, r3
   8329e:	d123      	bne.n	832e8 <pio_handler_process+0x84>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   832a0:	4a18      	ldr	r2, [pc, #96]	; (83304 <pio_handler_process+0xa0>)
   832a2:	68bb      	ldr	r3, [r7, #8]
   832a4:	011b      	lsls	r3, r3, #4
   832a6:	4413      	add	r3, r2
   832a8:	685a      	ldr	r2, [r3, #4]
   832aa:	68fb      	ldr	r3, [r7, #12]
   832ac:	4013      	ands	r3, r2
   832ae:	2b00      	cmp	r3, #0
   832b0:	d01a      	beq.n	832e8 <pio_handler_process+0x84>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   832b2:	4a14      	ldr	r2, [pc, #80]	; (83304 <pio_handler_process+0xa0>)
   832b4:	68bb      	ldr	r3, [r7, #8]
   832b6:	011b      	lsls	r3, r3, #4
   832b8:	4413      	add	r3, r2
   832ba:	3308      	adds	r3, #8
   832bc:	685b      	ldr	r3, [r3, #4]
   832be:	4911      	ldr	r1, [pc, #68]	; (83304 <pio_handler_process+0xa0>)
   832c0:	68ba      	ldr	r2, [r7, #8]
   832c2:	0112      	lsls	r2, r2, #4
   832c4:	440a      	add	r2, r1
   832c6:	6810      	ldr	r0, [r2, #0]
   832c8:	490e      	ldr	r1, [pc, #56]	; (83304 <pio_handler_process+0xa0>)
   832ca:	68ba      	ldr	r2, [r7, #8]
   832cc:	0112      	lsls	r2, r2, #4
   832ce:	440a      	add	r2, r1
   832d0:	6852      	ldr	r2, [r2, #4]
   832d2:	4611      	mov	r1, r2
   832d4:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   832d6:	4a0b      	ldr	r2, [pc, #44]	; (83304 <pio_handler_process+0xa0>)
   832d8:	68bb      	ldr	r3, [r7, #8]
   832da:	011b      	lsls	r3, r3, #4
   832dc:	4413      	add	r3, r2
   832de:	685b      	ldr	r3, [r3, #4]
   832e0:	43db      	mvns	r3, r3
   832e2:	68fa      	ldr	r2, [r7, #12]
   832e4:	4013      	ands	r3, r2
   832e6:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   832e8:	68bb      	ldr	r3, [r7, #8]
   832ea:	3301      	adds	r3, #1
   832ec:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   832ee:	68fb      	ldr	r3, [r7, #12]
   832f0:	2b00      	cmp	r3, #0
   832f2:	d1cd      	bne.n	83290 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   832f4:	3710      	adds	r7, #16
   832f6:	46bd      	mov	sp, r7
   832f8:	bd80      	pop	{r7, pc}
   832fa:	bf00      	nop
   832fc:	00083011 	.word	0x00083011
   83300:	00083029 	.word	0x00083029
   83304:	20070d18 	.word	0x20070d18

00083308 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   83308:	b580      	push	{r7, lr}
   8330a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   8330c:	4802      	ldr	r0, [pc, #8]	; (83318 <PIOA_Handler+0x10>)
   8330e:	210b      	movs	r1, #11
   83310:	4b02      	ldr	r3, [pc, #8]	; (8331c <PIOA_Handler+0x14>)
   83312:	4798      	blx	r3
}
   83314:	bd80      	pop	{r7, pc}
   83316:	bf00      	nop
   83318:	400e0e00 	.word	0x400e0e00
   8331c:	00083265 	.word	0x00083265

00083320 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   83320:	b580      	push	{r7, lr}
   83322:	af00      	add	r7, sp, #0
	//PIOB_Handler_interrupt(PIOB,25);
    pio_handler_process(PIOB, ID_PIOB);
   83324:	4802      	ldr	r0, [pc, #8]	; (83330 <PIOB_Handler+0x10>)
   83326:	210c      	movs	r1, #12
   83328:	4b02      	ldr	r3, [pc, #8]	; (83334 <PIOB_Handler+0x14>)
   8332a:	4798      	blx	r3
}
   8332c:	bd80      	pop	{r7, pc}
   8332e:	bf00      	nop
   83330:	400e1000 	.word	0x400e1000
   83334:	00083265 	.word	0x00083265

00083338 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   83338:	b580      	push	{r7, lr}
   8333a:	af00      	add	r7, sp, #0
	//PIOC_Handler_interrupt(PIOC);
	pio_handler_process(PIOC, ID_PIOC);
   8333c:	4802      	ldr	r0, [pc, #8]	; (83348 <PIOC_Handler+0x10>)
   8333e:	210d      	movs	r1, #13
   83340:	4b02      	ldr	r3, [pc, #8]	; (8334c <PIOC_Handler+0x14>)
   83342:	4798      	blx	r3
}
   83344:	bd80      	pop	{r7, pc}
   83346:	bf00      	nop
   83348:	400e1200 	.word	0x400e1200
   8334c:	00083265 	.word	0x00083265

00083350 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   83350:	b580      	push	{r7, lr}
   83352:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   83354:	4802      	ldr	r0, [pc, #8]	; (83360 <PIOD_Handler+0x10>)
   83356:	210e      	movs	r1, #14
   83358:	4b02      	ldr	r3, [pc, #8]	; (83364 <PIOD_Handler+0x14>)
   8335a:	4798      	blx	r3
}
   8335c:	bd80      	pop	{r7, pc}
   8335e:	bf00      	nop
   83360:	400e1400 	.word	0x400e1400
   83364:	00083265 	.word	0x00083265

00083368 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   83368:	b480      	push	{r7}
   8336a:	b085      	sub	sp, #20
   8336c:	af00      	add	r7, sp, #0
   8336e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83370:	491d      	ldr	r1, [pc, #116]	; (833e8 <pmc_switch_mck_to_pllack+0x80>)
   83372:	4b1d      	ldr	r3, [pc, #116]	; (833e8 <pmc_switch_mck_to_pllack+0x80>)
   83374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83376:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   8337a:	687b      	ldr	r3, [r7, #4]
   8337c:	4313      	orrs	r3, r2
   8337e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83380:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83384:	60fb      	str	r3, [r7, #12]
   83386:	e007      	b.n	83398 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83388:	68fb      	ldr	r3, [r7, #12]
   8338a:	2b00      	cmp	r3, #0
   8338c:	d101      	bne.n	83392 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   8338e:	2301      	movs	r3, #1
   83390:	e023      	b.n	833da <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   83392:	68fb      	ldr	r3, [r7, #12]
   83394:	3b01      	subs	r3, #1
   83396:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83398:	4b13      	ldr	r3, [pc, #76]	; (833e8 <pmc_switch_mck_to_pllack+0x80>)
   8339a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8339c:	f003 0308 	and.w	r3, r3, #8
   833a0:	2b00      	cmp	r3, #0
   833a2:	d0f1      	beq.n	83388 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   833a4:	4a10      	ldr	r2, [pc, #64]	; (833e8 <pmc_switch_mck_to_pllack+0x80>)
   833a6:	4b10      	ldr	r3, [pc, #64]	; (833e8 <pmc_switch_mck_to_pllack+0x80>)
   833a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   833aa:	f023 0303 	bic.w	r3, r3, #3
   833ae:	f043 0302 	orr.w	r3, r3, #2
   833b2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   833b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   833b8:	60fb      	str	r3, [r7, #12]
   833ba:	e007      	b.n	833cc <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   833bc:	68fb      	ldr	r3, [r7, #12]
   833be:	2b00      	cmp	r3, #0
   833c0:	d101      	bne.n	833c6 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   833c2:	2301      	movs	r3, #1
   833c4:	e009      	b.n	833da <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   833c6:	68fb      	ldr	r3, [r7, #12]
   833c8:	3b01      	subs	r3, #1
   833ca:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   833cc:	4b06      	ldr	r3, [pc, #24]	; (833e8 <pmc_switch_mck_to_pllack+0x80>)
   833ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   833d0:	f003 0308 	and.w	r3, r3, #8
   833d4:	2b00      	cmp	r3, #0
   833d6:	d0f1      	beq.n	833bc <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   833d8:	2300      	movs	r3, #0
}
   833da:	4618      	mov	r0, r3
   833dc:	3714      	adds	r7, #20
   833de:	46bd      	mov	sp, r7
   833e0:	f85d 7b04 	ldr.w	r7, [sp], #4
   833e4:	4770      	bx	lr
   833e6:	bf00      	nop
   833e8:	400e0600 	.word	0x400e0600

000833ec <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   833ec:	b480      	push	{r7}
   833ee:	b083      	sub	sp, #12
   833f0:	af00      	add	r7, sp, #0
   833f2:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   833f4:	687b      	ldr	r3, [r7, #4]
   833f6:	2b01      	cmp	r3, #1
   833f8:	d107      	bne.n	8340a <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   833fa:	4a08      	ldr	r2, [pc, #32]	; (8341c <pmc_switch_sclk_to_32kxtal+0x30>)
   833fc:	4b07      	ldr	r3, [pc, #28]	; (8341c <pmc_switch_sclk_to_32kxtal+0x30>)
   833fe:	689b      	ldr	r3, [r3, #8]
   83400:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   83404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83408:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   8340a:	4b04      	ldr	r3, [pc, #16]	; (8341c <pmc_switch_sclk_to_32kxtal+0x30>)
   8340c:	4a04      	ldr	r2, [pc, #16]	; (83420 <pmc_switch_sclk_to_32kxtal+0x34>)
   8340e:	601a      	str	r2, [r3, #0]
}
   83410:	370c      	adds	r7, #12
   83412:	46bd      	mov	sp, r7
   83414:	f85d 7b04 	ldr.w	r7, [sp], #4
   83418:	4770      	bx	lr
   8341a:	bf00      	nop
   8341c:	400e1a10 	.word	0x400e1a10
   83420:	a5000008 	.word	0xa5000008

00083424 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   83424:	b480      	push	{r7}
   83426:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   83428:	4b09      	ldr	r3, [pc, #36]	; (83450 <pmc_osc_is_ready_32kxtal+0x2c>)
   8342a:	695b      	ldr	r3, [r3, #20]
   8342c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   83430:	2b00      	cmp	r3, #0
   83432:	d007      	beq.n	83444 <pmc_osc_is_ready_32kxtal+0x20>
   83434:	4b07      	ldr	r3, [pc, #28]	; (83454 <pmc_osc_is_ready_32kxtal+0x30>)
   83436:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83438:	f003 0380 	and.w	r3, r3, #128	; 0x80
   8343c:	2b00      	cmp	r3, #0
   8343e:	d001      	beq.n	83444 <pmc_osc_is_ready_32kxtal+0x20>
   83440:	2301      	movs	r3, #1
   83442:	e000      	b.n	83446 <pmc_osc_is_ready_32kxtal+0x22>
   83444:	2300      	movs	r3, #0
}
   83446:	4618      	mov	r0, r3
   83448:	46bd      	mov	sp, r7
   8344a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8344e:	4770      	bx	lr
   83450:	400e1a10 	.word	0x400e1a10
   83454:	400e0600 	.word	0x400e0600

00083458 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   83458:	b480      	push	{r7}
   8345a:	b085      	sub	sp, #20
   8345c:	af00      	add	r7, sp, #0
   8345e:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   83460:	2300      	movs	r3, #0
   83462:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   83464:	4b21      	ldr	r3, [pc, #132]	; (834ec <pmc_switch_mainck_to_fastrc+0x94>)
   83466:	6a1b      	ldr	r3, [r3, #32]
   83468:	f003 0301 	and.w	r3, r3, #1
   8346c:	2b00      	cmp	r3, #0
   8346e:	d00e      	beq.n	8348e <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83470:	491e      	ldr	r1, [pc, #120]	; (834ec <pmc_switch_mainck_to_fastrc+0x94>)
   83472:	4b1e      	ldr	r3, [pc, #120]	; (834ec <pmc_switch_mainck_to_fastrc+0x94>)
   83474:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   83476:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8347a:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   8347e:	687a      	ldr	r2, [r7, #4]
   83480:	4313      	orrs	r3, r2
   83482:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83486:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8348a:	620b      	str	r3, [r1, #32]
   8348c:	e00b      	b.n	834a6 <pmc_switch_mainck_to_fastrc+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   8348e:	2301      	movs	r3, #1
   83490:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83492:	4916      	ldr	r1, [pc, #88]	; (834ec <pmc_switch_mainck_to_fastrc+0x94>)
   83494:	4b15      	ldr	r3, [pc, #84]	; (834ec <pmc_switch_mainck_to_fastrc+0x94>)
   83496:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
   83498:	4b15      	ldr	r3, [pc, #84]	; (834f0 <pmc_switch_mainck_to_fastrc+0x98>)
   8349a:	4013      	ands	r3, r2
   8349c:	687a      	ldr	r2, [r7, #4]
   8349e:	431a      	orrs	r2, r3
   834a0:	4b14      	ldr	r3, [pc, #80]	; (834f4 <pmc_switch_mainck_to_fastrc+0x9c>)
   834a2:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   834a4:	620b      	str	r3, [r1, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   834a6:	bf00      	nop
   834a8:	4b10      	ldr	r3, [pc, #64]	; (834ec <pmc_switch_mainck_to_fastrc+0x94>)
   834aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   834ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   834b0:	2b00      	cmp	r3, #0
   834b2:	d0f9      	beq.n	834a8 <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   834b4:	4a0d      	ldr	r2, [pc, #52]	; (834ec <pmc_switch_mainck_to_fastrc+0x94>)
   834b6:	4b0d      	ldr	r3, [pc, #52]	; (834ec <pmc_switch_mainck_to_fastrc+0x94>)
   834b8:	6a1b      	ldr	r3, [r3, #32]
   834ba:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   834be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   834c2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   834c6:	6213      	str	r3, [r2, #32]
			PMC_CKGR_MOR_KEY_VALUE;

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   834c8:	68fb      	ldr	r3, [r7, #12]
   834ca:	2b00      	cmp	r3, #0
   834cc:	d009      	beq.n	834e2 <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   834ce:	4a07      	ldr	r2, [pc, #28]	; (834ec <pmc_switch_mainck_to_fastrc+0x94>)
   834d0:	4b06      	ldr	r3, [pc, #24]	; (834ec <pmc_switch_mainck_to_fastrc+0x94>)
   834d2:	6a1b      	ldr	r3, [r3, #32]
   834d4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   834d8:	f023 0301 	bic.w	r3, r3, #1
   834dc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   834e0:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   834e2:	3714      	adds	r7, #20
   834e4:	46bd      	mov	sp, r7
   834e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   834ea:	4770      	bx	lr
   834ec:	400e0600 	.word	0x400e0600
   834f0:	ffc80086 	.word	0xffc80086
   834f4:	0037ff09 	.word	0x0037ff09

000834f8 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   834f8:	b480      	push	{r7}
   834fa:	b083      	sub	sp, #12
   834fc:	af00      	add	r7, sp, #0
   834fe:	6078      	str	r0, [r7, #4]
   83500:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   83502:	687b      	ldr	r3, [r7, #4]
   83504:	2b00      	cmp	r3, #0
   83506:	d008      	beq.n	8351a <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83508:	4916      	ldr	r1, [pc, #88]	; (83564 <pmc_switch_mainck_to_xtal+0x6c>)
   8350a:	4b16      	ldr	r3, [pc, #88]	; (83564 <pmc_switch_mainck_to_xtal+0x6c>)
   8350c:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   8350e:	4a16      	ldr	r2, [pc, #88]	; (83568 <pmc_switch_mainck_to_xtal+0x70>)
   83510:	401a      	ands	r2, r3
   83512:	4b16      	ldr	r3, [pc, #88]	; (8356c <pmc_switch_mainck_to_xtal+0x74>)
   83514:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83516:	620b      	str	r3, [r1, #32]
   83518:	e01e      	b.n	83558 <pmc_switch_mainck_to_xtal+0x60>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8351a:	4912      	ldr	r1, [pc, #72]	; (83564 <pmc_switch_mainck_to_xtal+0x6c>)
   8351c:	4b11      	ldr	r3, [pc, #68]	; (83564 <pmc_switch_mainck_to_xtal+0x6c>)
   8351e:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   83520:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83524:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   83528:	683a      	ldr	r2, [r7, #0]
   8352a:	0212      	lsls	r2, r2, #8
   8352c:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   8352e:	4313      	orrs	r3, r2
   83530:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83534:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83538:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8353a:	bf00      	nop
   8353c:	4b09      	ldr	r3, [pc, #36]	; (83564 <pmc_switch_mainck_to_xtal+0x6c>)
   8353e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83540:	f003 0301 	and.w	r3, r3, #1
   83544:	2b00      	cmp	r3, #0
   83546:	d0f9      	beq.n	8353c <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   83548:	4a06      	ldr	r2, [pc, #24]	; (83564 <pmc_switch_mainck_to_xtal+0x6c>)
   8354a:	4b06      	ldr	r3, [pc, #24]	; (83564 <pmc_switch_mainck_to_xtal+0x6c>)
   8354c:	6a1b      	ldr	r3, [r3, #32]
   8354e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   83552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83556:	6213      	str	r3, [r2, #32]
	}
}
   83558:	370c      	adds	r7, #12
   8355a:	46bd      	mov	sp, r7
   8355c:	f85d 7b04 	ldr.w	r7, [sp], #4
   83560:	4770      	bx	lr
   83562:	bf00      	nop
   83564:	400e0600 	.word	0x400e0600
   83568:	fec8fffc 	.word	0xfec8fffc
   8356c:	01370002 	.word	0x01370002

00083570 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   83570:	b480      	push	{r7}
   83572:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   83574:	4b04      	ldr	r3, [pc, #16]	; (83588 <pmc_osc_is_ready_mainck+0x18>)
   83576:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   8357c:	4618      	mov	r0, r3
   8357e:	46bd      	mov	sp, r7
   83580:	f85d 7b04 	ldr.w	r7, [sp], #4
   83584:	4770      	bx	lr
   83586:	bf00      	nop
   83588:	400e0600 	.word	0x400e0600

0008358c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   8358c:	b480      	push	{r7}
   8358e:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   83590:	4b03      	ldr	r3, [pc, #12]	; (835a0 <pmc_disable_pllack+0x14>)
   83592:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   83596:	629a      	str	r2, [r3, #40]	; 0x28
}
   83598:	46bd      	mov	sp, r7
   8359a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8359e:	4770      	bx	lr
   835a0:	400e0600 	.word	0x400e0600

000835a4 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   835a4:	b480      	push	{r7}
   835a6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   835a8:	4b04      	ldr	r3, [pc, #16]	; (835bc <pmc_is_locked_pllack+0x18>)
   835aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   835ac:	f003 0302 	and.w	r3, r3, #2
}
   835b0:	4618      	mov	r0, r3
   835b2:	46bd      	mov	sp, r7
   835b4:	f85d 7b04 	ldr.w	r7, [sp], #4
   835b8:	4770      	bx	lr
   835ba:	bf00      	nop
   835bc:	400e0600 	.word	0x400e0600

000835c0 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   835c0:	b480      	push	{r7}
   835c2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   835c4:	4b04      	ldr	r3, [pc, #16]	; (835d8 <pmc_is_locked_upll+0x18>)
   835c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   835c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   835cc:	4618      	mov	r0, r3
   835ce:	46bd      	mov	sp, r7
   835d0:	f85d 7b04 	ldr.w	r7, [sp], #4
   835d4:	4770      	bx	lr
   835d6:	bf00      	nop
   835d8:	400e0600 	.word	0x400e0600

000835dc <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   835dc:	b480      	push	{r7}
   835de:	b083      	sub	sp, #12
   835e0:	af00      	add	r7, sp, #0
   835e2:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   835e4:	687b      	ldr	r3, [r7, #4]
   835e6:	2b2c      	cmp	r3, #44	; 0x2c
   835e8:	d901      	bls.n	835ee <pmc_enable_periph_clk+0x12>
		return 1;
   835ea:	2301      	movs	r3, #1
   835ec:	e02f      	b.n	8364e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   835ee:	687b      	ldr	r3, [r7, #4]
   835f0:	2b1f      	cmp	r3, #31
   835f2:	d813      	bhi.n	8361c <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   835f4:	4b19      	ldr	r3, [pc, #100]	; (8365c <pmc_enable_periph_clk+0x80>)
   835f6:	699a      	ldr	r2, [r3, #24]
   835f8:	687b      	ldr	r3, [r7, #4]
   835fa:	2101      	movs	r1, #1
   835fc:	fa01 f303 	lsl.w	r3, r1, r3
   83600:	401a      	ands	r2, r3
   83602:	687b      	ldr	r3, [r7, #4]
   83604:	2101      	movs	r1, #1
   83606:	fa01 f303 	lsl.w	r3, r1, r3
   8360a:	429a      	cmp	r2, r3
   8360c:	d01e      	beq.n	8364c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   8360e:	4a13      	ldr	r2, [pc, #76]	; (8365c <pmc_enable_periph_clk+0x80>)
   83610:	687b      	ldr	r3, [r7, #4]
   83612:	2101      	movs	r1, #1
   83614:	fa01 f303 	lsl.w	r3, r1, r3
   83618:	6113      	str	r3, [r2, #16]
   8361a:	e017      	b.n	8364c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   8361c:	687b      	ldr	r3, [r7, #4]
   8361e:	3b20      	subs	r3, #32
   83620:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   83622:	4b0e      	ldr	r3, [pc, #56]	; (8365c <pmc_enable_periph_clk+0x80>)
   83624:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   83628:	687b      	ldr	r3, [r7, #4]
   8362a:	2101      	movs	r1, #1
   8362c:	fa01 f303 	lsl.w	r3, r1, r3
   83630:	401a      	ands	r2, r3
   83632:	687b      	ldr	r3, [r7, #4]
   83634:	2101      	movs	r1, #1
   83636:	fa01 f303 	lsl.w	r3, r1, r3
   8363a:	429a      	cmp	r2, r3
   8363c:	d006      	beq.n	8364c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   8363e:	4a07      	ldr	r2, [pc, #28]	; (8365c <pmc_enable_periph_clk+0x80>)
   83640:	687b      	ldr	r3, [r7, #4]
   83642:	2101      	movs	r1, #1
   83644:	fa01 f303 	lsl.w	r3, r1, r3
   83648:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   8364c:	2300      	movs	r3, #0
}
   8364e:	4618      	mov	r0, r3
   83650:	370c      	adds	r7, #12
   83652:	46bd      	mov	sp, r7
   83654:	f85d 7b04 	ldr.w	r7, [sp], #4
   83658:	4770      	bx	lr
   8365a:	bf00      	nop
   8365c:	400e0600 	.word	0x400e0600

00083660 <pmc_set_writeprotect>:
 * \brief Enable or disable write protect of PMC registers.
 *
 * \param ul_enable 1 to enable, 0 to disable.
 */
void pmc_set_writeprotect(uint32_t ul_enable)
{
   83660:	b480      	push	{r7}
   83662:	b083      	sub	sp, #12
   83664:	af00      	add	r7, sp, #0
   83666:	6078      	str	r0, [r7, #4]
	if (ul_enable) {
   83668:	687b      	ldr	r3, [r7, #4]
   8366a:	2b00      	cmp	r3, #0
   8366c:	d004      	beq.n	83678 <pmc_set_writeprotect+0x18>
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE | PMC_WPMR_WPEN;
   8366e:	4b07      	ldr	r3, [pc, #28]	; (8368c <pmc_set_writeprotect+0x2c>)
   83670:	4a07      	ldr	r2, [pc, #28]	; (83690 <pmc_set_writeprotect+0x30>)
   83672:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   83676:	e003      	b.n	83680 <pmc_set_writeprotect+0x20>
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE;
   83678:	4b04      	ldr	r3, [pc, #16]	; (8368c <pmc_set_writeprotect+0x2c>)
   8367a:	4a06      	ldr	r2, [pc, #24]	; (83694 <pmc_set_writeprotect+0x34>)
   8367c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	}
}
   83680:	370c      	adds	r7, #12
   83682:	46bd      	mov	sp, r7
   83684:	f85d 7b04 	ldr.w	r7, [sp], #4
   83688:	4770      	bx	lr
   8368a:	bf00      	nop
   8368c:	400e0600 	.word	0x400e0600
   83690:	504d4301 	.word	0x504d4301
   83694:	504d4300 	.word	0x504d4300

00083698 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   83698:	b480      	push	{r7}
   8369a:	af00      	add	r7, sp, #0
	while (1) {
	}
   8369c:	e7fe      	b.n	8369c <Dummy_Handler+0x4>
   8369e:	bf00      	nop

000836a0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   836a0:	b580      	push	{r7, lr}
   836a2:	b082      	sub	sp, #8
   836a4:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   836a6:	4b1e      	ldr	r3, [pc, #120]	; (83720 <Reset_Handler+0x80>)
   836a8:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   836aa:	4b1e      	ldr	r3, [pc, #120]	; (83724 <Reset_Handler+0x84>)
   836ac:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   836ae:	687a      	ldr	r2, [r7, #4]
   836b0:	683b      	ldr	r3, [r7, #0]
   836b2:	429a      	cmp	r2, r3
   836b4:	d00c      	beq.n	836d0 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   836b6:	e007      	b.n	836c8 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   836b8:	683b      	ldr	r3, [r7, #0]
   836ba:	1d1a      	adds	r2, r3, #4
   836bc:	603a      	str	r2, [r7, #0]
   836be:	687a      	ldr	r2, [r7, #4]
   836c0:	1d11      	adds	r1, r2, #4
   836c2:	6079      	str	r1, [r7, #4]
   836c4:	6812      	ldr	r2, [r2, #0]
   836c6:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   836c8:	683b      	ldr	r3, [r7, #0]
   836ca:	4a17      	ldr	r2, [pc, #92]	; (83728 <Reset_Handler+0x88>)
   836cc:	4293      	cmp	r3, r2
   836ce:	d3f3      	bcc.n	836b8 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   836d0:	4b16      	ldr	r3, [pc, #88]	; (8372c <Reset_Handler+0x8c>)
   836d2:	603b      	str	r3, [r7, #0]
   836d4:	e004      	b.n	836e0 <Reset_Handler+0x40>
		*pDest++ = 0;
   836d6:	683b      	ldr	r3, [r7, #0]
   836d8:	1d1a      	adds	r2, r3, #4
   836da:	603a      	str	r2, [r7, #0]
   836dc:	2200      	movs	r2, #0
   836de:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   836e0:	683b      	ldr	r3, [r7, #0]
   836e2:	4a13      	ldr	r2, [pc, #76]	; (83730 <Reset_Handler+0x90>)
   836e4:	4293      	cmp	r3, r2
   836e6:	d3f6      	bcc.n	836d6 <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   836e8:	4b12      	ldr	r3, [pc, #72]	; (83734 <Reset_Handler+0x94>)
   836ea:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   836ec:	4a12      	ldr	r2, [pc, #72]	; (83738 <Reset_Handler+0x98>)
   836ee:	687b      	ldr	r3, [r7, #4]
   836f0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   836f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   836f8:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   836fa:	687b      	ldr	r3, [r7, #4]
   836fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   83700:	d309      	bcc.n	83716 <Reset_Handler+0x76>
   83702:	687b      	ldr	r3, [r7, #4]
   83704:	4a0d      	ldr	r2, [pc, #52]	; (8373c <Reset_Handler+0x9c>)
   83706:	4293      	cmp	r3, r2
   83708:	d805      	bhi.n	83716 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8370a:	4a0b      	ldr	r2, [pc, #44]	; (83738 <Reset_Handler+0x98>)
   8370c:	4b0a      	ldr	r3, [pc, #40]	; (83738 <Reset_Handler+0x98>)
   8370e:	689b      	ldr	r3, [r3, #8]
   83710:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83714:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   83716:	4b0a      	ldr	r3, [pc, #40]	; (83740 <Reset_Handler+0xa0>)
   83718:	4798      	blx	r3

	/* Branch to main function */
	main();
   8371a:	4b0a      	ldr	r3, [pc, #40]	; (83744 <Reset_Handler+0xa4>)
   8371c:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   8371e:	e7fe      	b.n	8371e <Reset_Handler+0x7e>
   83720:	00086e54 	.word	0x00086e54
   83724:	20070000 	.word	0x20070000
   83728:	20070c6c 	.word	0x20070c6c
   8372c:	20070c6c 	.word	0x20070c6c
   83730:	2007125c 	.word	0x2007125c
   83734:	00080000 	.word	0x00080000
   83738:	e000ed00 	.word	0xe000ed00
   8373c:	200fffff 	.word	0x200fffff
   83740:	00083de1 	.word	0x00083de1
   83744:	00082105 	.word	0x00082105

00083748 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   83748:	b480      	push	{r7}
   8374a:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   8374c:	4b56      	ldr	r3, [pc, #344]	; (838a8 <SystemCoreClockUpdate+0x160>)
   8374e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83750:	f003 0303 	and.w	r3, r3, #3
   83754:	2b03      	cmp	r3, #3
   83756:	f200 808a 	bhi.w	8386e <SystemCoreClockUpdate+0x126>
   8375a:	a201      	add	r2, pc, #4	; (adr r2, 83760 <SystemCoreClockUpdate+0x18>)
   8375c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83760:	00083771 	.word	0x00083771
   83764:	00083791 	.word	0x00083791
   83768:	000837e1 	.word	0x000837e1
   8376c:	000837e1 	.word	0x000837e1
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   83770:	4b4e      	ldr	r3, [pc, #312]	; (838ac <SystemCoreClockUpdate+0x164>)
   83772:	695b      	ldr	r3, [r3, #20]
   83774:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83778:	2b00      	cmp	r3, #0
   8377a:	d004      	beq.n	83786 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   8377c:	4b4c      	ldr	r3, [pc, #304]	; (838b0 <SystemCoreClockUpdate+0x168>)
   8377e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83782:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   83784:	e073      	b.n	8386e <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   83786:	4b4a      	ldr	r3, [pc, #296]	; (838b0 <SystemCoreClockUpdate+0x168>)
   83788:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   8378c:	601a      	str	r2, [r3, #0]
		}
		break;
   8378e:	e06e      	b.n	8386e <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83790:	4b45      	ldr	r3, [pc, #276]	; (838a8 <SystemCoreClockUpdate+0x160>)
   83792:	6a1b      	ldr	r3, [r3, #32]
   83794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83798:	2b00      	cmp	r3, #0
   8379a:	d003      	beq.n	837a4 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8379c:	4b44      	ldr	r3, [pc, #272]	; (838b0 <SystemCoreClockUpdate+0x168>)
   8379e:	4a45      	ldr	r2, [pc, #276]	; (838b4 <SystemCoreClockUpdate+0x16c>)
   837a0:	601a      	str	r2, [r3, #0]
   837a2:	e01c      	b.n	837de <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   837a4:	4b42      	ldr	r3, [pc, #264]	; (838b0 <SystemCoreClockUpdate+0x168>)
   837a6:	4a44      	ldr	r2, [pc, #272]	; (838b8 <SystemCoreClockUpdate+0x170>)
   837a8:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   837aa:	4b3f      	ldr	r3, [pc, #252]	; (838a8 <SystemCoreClockUpdate+0x160>)
   837ac:	6a1b      	ldr	r3, [r3, #32]
   837ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
   837b2:	2b10      	cmp	r3, #16
   837b4:	d004      	beq.n	837c0 <SystemCoreClockUpdate+0x78>
   837b6:	2b20      	cmp	r3, #32
   837b8:	d008      	beq.n	837cc <SystemCoreClockUpdate+0x84>
   837ba:	2b00      	cmp	r3, #0
   837bc:	d00e      	beq.n	837dc <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   837be:	e00e      	b.n	837de <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   837c0:	4b3b      	ldr	r3, [pc, #236]	; (838b0 <SystemCoreClockUpdate+0x168>)
   837c2:	681b      	ldr	r3, [r3, #0]
   837c4:	005b      	lsls	r3, r3, #1
   837c6:	4a3a      	ldr	r2, [pc, #232]	; (838b0 <SystemCoreClockUpdate+0x168>)
   837c8:	6013      	str	r3, [r2, #0]
				break;
   837ca:	e008      	b.n	837de <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   837cc:	4b38      	ldr	r3, [pc, #224]	; (838b0 <SystemCoreClockUpdate+0x168>)
   837ce:	681a      	ldr	r2, [r3, #0]
   837d0:	4613      	mov	r3, r2
   837d2:	005b      	lsls	r3, r3, #1
   837d4:	4413      	add	r3, r2
   837d6:	4a36      	ldr	r2, [pc, #216]	; (838b0 <SystemCoreClockUpdate+0x168>)
   837d8:	6013      	str	r3, [r2, #0]
				break;
   837da:	e000      	b.n	837de <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   837dc:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   837de:	e046      	b.n	8386e <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   837e0:	4b31      	ldr	r3, [pc, #196]	; (838a8 <SystemCoreClockUpdate+0x160>)
   837e2:	6a1b      	ldr	r3, [r3, #32]
   837e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   837e8:	2b00      	cmp	r3, #0
   837ea:	d003      	beq.n	837f4 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   837ec:	4b30      	ldr	r3, [pc, #192]	; (838b0 <SystemCoreClockUpdate+0x168>)
   837ee:	4a31      	ldr	r2, [pc, #196]	; (838b4 <SystemCoreClockUpdate+0x16c>)
   837f0:	601a      	str	r2, [r3, #0]
   837f2:	e01c      	b.n	8382e <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   837f4:	4b2e      	ldr	r3, [pc, #184]	; (838b0 <SystemCoreClockUpdate+0x168>)
   837f6:	4a30      	ldr	r2, [pc, #192]	; (838b8 <SystemCoreClockUpdate+0x170>)
   837f8:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   837fa:	4b2b      	ldr	r3, [pc, #172]	; (838a8 <SystemCoreClockUpdate+0x160>)
   837fc:	6a1b      	ldr	r3, [r3, #32]
   837fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83802:	2b10      	cmp	r3, #16
   83804:	d004      	beq.n	83810 <SystemCoreClockUpdate+0xc8>
   83806:	2b20      	cmp	r3, #32
   83808:	d008      	beq.n	8381c <SystemCoreClockUpdate+0xd4>
   8380a:	2b00      	cmp	r3, #0
   8380c:	d00e      	beq.n	8382c <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   8380e:	e00e      	b.n	8382e <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   83810:	4b27      	ldr	r3, [pc, #156]	; (838b0 <SystemCoreClockUpdate+0x168>)
   83812:	681b      	ldr	r3, [r3, #0]
   83814:	005b      	lsls	r3, r3, #1
   83816:	4a26      	ldr	r2, [pc, #152]	; (838b0 <SystemCoreClockUpdate+0x168>)
   83818:	6013      	str	r3, [r2, #0]
				break;
   8381a:	e008      	b.n	8382e <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8381c:	4b24      	ldr	r3, [pc, #144]	; (838b0 <SystemCoreClockUpdate+0x168>)
   8381e:	681a      	ldr	r2, [r3, #0]
   83820:	4613      	mov	r3, r2
   83822:	005b      	lsls	r3, r3, #1
   83824:	4413      	add	r3, r2
   83826:	4a22      	ldr	r2, [pc, #136]	; (838b0 <SystemCoreClockUpdate+0x168>)
   83828:	6013      	str	r3, [r2, #0]
				break;
   8382a:	e000      	b.n	8382e <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   8382c:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8382e:	4b1e      	ldr	r3, [pc, #120]	; (838a8 <SystemCoreClockUpdate+0x160>)
   83830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83832:	f003 0303 	and.w	r3, r3, #3
   83836:	2b02      	cmp	r3, #2
   83838:	d115      	bne.n	83866 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8383a:	4b1b      	ldr	r3, [pc, #108]	; (838a8 <SystemCoreClockUpdate+0x160>)
   8383c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   8383e:	4b1f      	ldr	r3, [pc, #124]	; (838bc <SystemCoreClockUpdate+0x174>)
   83840:	4013      	ands	r3, r2
   83842:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   83844:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83846:	4a1a      	ldr	r2, [pc, #104]	; (838b0 <SystemCoreClockUpdate+0x168>)
   83848:	6812      	ldr	r2, [r2, #0]
   8384a:	fb02 f303 	mul.w	r3, r2, r3
   8384e:	4a18      	ldr	r2, [pc, #96]	; (838b0 <SystemCoreClockUpdate+0x168>)
   83850:	6013      	str	r3, [r2, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   83852:	4b15      	ldr	r3, [pc, #84]	; (838a8 <SystemCoreClockUpdate+0x160>)
   83854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   83856:	b2db      	uxtb	r3, r3
   83858:	4a15      	ldr	r2, [pc, #84]	; (838b0 <SystemCoreClockUpdate+0x168>)
   8385a:	6812      	ldr	r2, [r2, #0]
   8385c:	fbb2 f3f3 	udiv	r3, r2, r3
   83860:	4a13      	ldr	r2, [pc, #76]	; (838b0 <SystemCoreClockUpdate+0x168>)
   83862:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   83864:	e002      	b.n	8386c <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   83866:	4b12      	ldr	r3, [pc, #72]	; (838b0 <SystemCoreClockUpdate+0x168>)
   83868:	4a15      	ldr	r2, [pc, #84]	; (838c0 <SystemCoreClockUpdate+0x178>)
   8386a:	601a      	str	r2, [r3, #0]
		}
		break;
   8386c:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8386e:	4b0e      	ldr	r3, [pc, #56]	; (838a8 <SystemCoreClockUpdate+0x160>)
   83870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83872:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83876:	2b70      	cmp	r3, #112	; 0x70
   83878:	d108      	bne.n	8388c <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   8387a:	4b0d      	ldr	r3, [pc, #52]	; (838b0 <SystemCoreClockUpdate+0x168>)
   8387c:	681b      	ldr	r3, [r3, #0]
   8387e:	4a11      	ldr	r2, [pc, #68]	; (838c4 <SystemCoreClockUpdate+0x17c>)
   83880:	fba2 2303 	umull	r2, r3, r2, r3
   83884:	085b      	lsrs	r3, r3, #1
   83886:	4a0a      	ldr	r2, [pc, #40]	; (838b0 <SystemCoreClockUpdate+0x168>)
   83888:	6013      	str	r3, [r2, #0]
   8388a:	e009      	b.n	838a0 <SystemCoreClockUpdate+0x158>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8388c:	4b06      	ldr	r3, [pc, #24]	; (838a8 <SystemCoreClockUpdate+0x160>)
   8388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83890:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83894:	091a      	lsrs	r2, r3, #4
   83896:	4b06      	ldr	r3, [pc, #24]	; (838b0 <SystemCoreClockUpdate+0x168>)
   83898:	681b      	ldr	r3, [r3, #0]
   8389a:	40d3      	lsrs	r3, r2
   8389c:	4a04      	ldr	r2, [pc, #16]	; (838b0 <SystemCoreClockUpdate+0x168>)
   8389e:	6013      	str	r3, [r2, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   838a0:	46bd      	mov	sp, r7
   838a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   838a6:	4770      	bx	lr
   838a8:	400e0600 	.word	0x400e0600
   838ac:	400e1a10 	.word	0x400e1a10
   838b0:	20070404 	.word	0x20070404
   838b4:	00b71b00 	.word	0x00b71b00
   838b8:	003d0900 	.word	0x003d0900
   838bc:	07ff0000 	.word	0x07ff0000
   838c0:	0e4e1c00 	.word	0x0e4e1c00
   838c4:	aaaaaaab 	.word	0xaaaaaaab

000838c8 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   838c8:	b480      	push	{r7}
   838ca:	b083      	sub	sp, #12
   838cc:	af00      	add	r7, sp, #0
   838ce:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   838d0:	687b      	ldr	r3, [r7, #4]
   838d2:	4a25      	ldr	r2, [pc, #148]	; (83968 <system_init_flash+0xa0>)
   838d4:	4293      	cmp	r3, r2
   838d6:	d806      	bhi.n	838e6 <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   838d8:	4b24      	ldr	r3, [pc, #144]	; (8396c <system_init_flash+0xa4>)
   838da:	2200      	movs	r2, #0
   838dc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   838de:	4b24      	ldr	r3, [pc, #144]	; (83970 <system_init_flash+0xa8>)
   838e0:	2200      	movs	r2, #0
   838e2:	601a      	str	r2, [r3, #0]
   838e4:	e03b      	b.n	8395e <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   838e6:	687b      	ldr	r3, [r7, #4]
   838e8:	4a22      	ldr	r2, [pc, #136]	; (83974 <system_init_flash+0xac>)
   838ea:	4293      	cmp	r3, r2
   838ec:	d808      	bhi.n	83900 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   838ee:	4b1f      	ldr	r3, [pc, #124]	; (8396c <system_init_flash+0xa4>)
   838f0:	f44f 7280 	mov.w	r2, #256	; 0x100
   838f4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   838f6:	4b1e      	ldr	r3, [pc, #120]	; (83970 <system_init_flash+0xa8>)
   838f8:	f44f 7280 	mov.w	r2, #256	; 0x100
   838fc:	601a      	str	r2, [r3, #0]
   838fe:	e02e      	b.n	8395e <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   83900:	687b      	ldr	r3, [r7, #4]
   83902:	4a1d      	ldr	r2, [pc, #116]	; (83978 <system_init_flash+0xb0>)
   83904:	4293      	cmp	r3, r2
   83906:	d808      	bhi.n	8391a <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   83908:	4b18      	ldr	r3, [pc, #96]	; (8396c <system_init_flash+0xa4>)
   8390a:	f44f 7200 	mov.w	r2, #512	; 0x200
   8390e:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   83910:	4b17      	ldr	r3, [pc, #92]	; (83970 <system_init_flash+0xa8>)
   83912:	f44f 7200 	mov.w	r2, #512	; 0x200
   83916:	601a      	str	r2, [r3, #0]
   83918:	e021      	b.n	8395e <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   8391a:	687b      	ldr	r3, [r7, #4]
   8391c:	4a17      	ldr	r2, [pc, #92]	; (8397c <system_init_flash+0xb4>)
   8391e:	4293      	cmp	r3, r2
   83920:	d808      	bhi.n	83934 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   83922:	4b12      	ldr	r3, [pc, #72]	; (8396c <system_init_flash+0xa4>)
   83924:	f44f 7240 	mov.w	r2, #768	; 0x300
   83928:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   8392a:	4b11      	ldr	r3, [pc, #68]	; (83970 <system_init_flash+0xa8>)
   8392c:	f44f 7240 	mov.w	r2, #768	; 0x300
   83930:	601a      	str	r2, [r3, #0]
   83932:	e014      	b.n	8395e <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   83934:	687b      	ldr	r3, [r7, #4]
   83936:	4a12      	ldr	r2, [pc, #72]	; (83980 <system_init_flash+0xb8>)
   83938:	4293      	cmp	r3, r2
   8393a:	d808      	bhi.n	8394e <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   8393c:	4b0b      	ldr	r3, [pc, #44]	; (8396c <system_init_flash+0xa4>)
   8393e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83942:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
   83944:	4b0a      	ldr	r3, [pc, #40]	; (83970 <system_init_flash+0xa8>)
   83946:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8394a:	601a      	str	r2, [r3, #0]
   8394c:	e007      	b.n	8395e <system_init_flash+0x96>
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   8394e:	4b07      	ldr	r3, [pc, #28]	; (8396c <system_init_flash+0xa4>)
   83950:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   83954:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   83956:	4b06      	ldr	r3, [pc, #24]	; (83970 <system_init_flash+0xa8>)
   83958:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   8395c:	601a      	str	r2, [r3, #0]
	}
}
   8395e:	370c      	adds	r7, #12
   83960:	46bd      	mov	sp, r7
   83962:	f85d 7b04 	ldr.w	r7, [sp], #4
   83966:	4770      	bx	lr
   83968:	0121eabf 	.word	0x0121eabf
   8396c:	400e0a00 	.word	0x400e0a00
   83970:	400e0c00 	.word	0x400e0c00
   83974:	02faf07f 	.word	0x02faf07f
   83978:	03d08fff 	.word	0x03d08fff
   8397c:	04c4b3ff 	.word	0x04c4b3ff
   83980:	055d4a7f 	.word	0x055d4a7f

00083984 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   83984:	b480      	push	{r7}
   83986:	b085      	sub	sp, #20
   83988:	af00      	add	r7, sp, #0
   8398a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   8398c:	4b0b      	ldr	r3, [pc, #44]	; (839bc <_sbrk+0x38>)
   8398e:	681b      	ldr	r3, [r3, #0]
   83990:	2b00      	cmp	r3, #0
   83992:	d102      	bne.n	8399a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   83994:	4b09      	ldr	r3, [pc, #36]	; (839bc <_sbrk+0x38>)
   83996:	4a0a      	ldr	r2, [pc, #40]	; (839c0 <_sbrk+0x3c>)
   83998:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   8399a:	4b08      	ldr	r3, [pc, #32]	; (839bc <_sbrk+0x38>)
   8399c:	681b      	ldr	r3, [r3, #0]
   8399e:	60fb      	str	r3, [r7, #12]

	heap += incr;
   839a0:	4b06      	ldr	r3, [pc, #24]	; (839bc <_sbrk+0x38>)
   839a2:	681a      	ldr	r2, [r3, #0]
   839a4:	687b      	ldr	r3, [r7, #4]
   839a6:	4413      	add	r3, r2
   839a8:	4a04      	ldr	r2, [pc, #16]	; (839bc <_sbrk+0x38>)
   839aa:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   839ac:	68fb      	ldr	r3, [r7, #12]
}
   839ae:	4618      	mov	r0, r3
   839b0:	3714      	adds	r7, #20
   839b2:	46bd      	mov	sp, r7
   839b4:	f85d 7b04 	ldr.w	r7, [sp], #4
   839b8:	4770      	bx	lr
   839ba:	bf00      	nop
   839bc:	20070d88 	.word	0x20070d88
   839c0:	20073260 	.word	0x20073260

000839c4 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   839c4:	b480      	push	{r7}
   839c6:	b083      	sub	sp, #12
   839c8:	af00      	add	r7, sp, #0
   839ca:	6078      	str	r0, [r7, #4]
	return -1;
   839cc:	f04f 33ff 	mov.w	r3, #4294967295
}
   839d0:	4618      	mov	r0, r3
   839d2:	370c      	adds	r7, #12
   839d4:	46bd      	mov	sp, r7
   839d6:	f85d 7b04 	ldr.w	r7, [sp], #4
   839da:	4770      	bx	lr

000839dc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   839dc:	b480      	push	{r7}
   839de:	b083      	sub	sp, #12
   839e0:	af00      	add	r7, sp, #0
   839e2:	6078      	str	r0, [r7, #4]
   839e4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   839e6:	683b      	ldr	r3, [r7, #0]
   839e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   839ec:	605a      	str	r2, [r3, #4]

	return 0;
   839ee:	2300      	movs	r3, #0
}
   839f0:	4618      	mov	r0, r3
   839f2:	370c      	adds	r7, #12
   839f4:	46bd      	mov	sp, r7
   839f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   839fa:	4770      	bx	lr

000839fc <_isatty>:

extern int _isatty(int file)
{
   839fc:	b480      	push	{r7}
   839fe:	b083      	sub	sp, #12
   83a00:	af00      	add	r7, sp, #0
   83a02:	6078      	str	r0, [r7, #4]
	return 1;
   83a04:	2301      	movs	r3, #1
}
   83a06:	4618      	mov	r0, r3
   83a08:	370c      	adds	r7, #12
   83a0a:	46bd      	mov	sp, r7
   83a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
   83a10:	4770      	bx	lr
   83a12:	bf00      	nop

00083a14 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   83a14:	b480      	push	{r7}
   83a16:	b085      	sub	sp, #20
   83a18:	af00      	add	r7, sp, #0
   83a1a:	60f8      	str	r0, [r7, #12]
   83a1c:	60b9      	str	r1, [r7, #8]
   83a1e:	607a      	str	r2, [r7, #4]
	return 0;
   83a20:	2300      	movs	r3, #0
}
   83a22:	4618      	mov	r0, r3
   83a24:	3714      	adds	r7, #20
   83a26:	46bd      	mov	sp, r7
   83a28:	f85d 7b04 	ldr.w	r7, [sp], #4
   83a2c:	4770      	bx	lr
   83a2e:	bf00      	nop

00083a30 <__aeabi_drsub>:
   83a30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   83a34:	e002      	b.n	83a3c <__adddf3>
   83a36:	bf00      	nop

00083a38 <__aeabi_dsub>:
   83a38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00083a3c <__adddf3>:
   83a3c:	b530      	push	{r4, r5, lr}
   83a3e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   83a42:	ea4f 0543 	mov.w	r5, r3, lsl #1
   83a46:	ea94 0f05 	teq	r4, r5
   83a4a:	bf08      	it	eq
   83a4c:	ea90 0f02 	teqeq	r0, r2
   83a50:	bf1f      	itttt	ne
   83a52:	ea54 0c00 	orrsne.w	ip, r4, r0
   83a56:	ea55 0c02 	orrsne.w	ip, r5, r2
   83a5a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   83a5e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   83a62:	f000 80e2 	beq.w	83c2a <__adddf3+0x1ee>
   83a66:	ea4f 5454 	mov.w	r4, r4, lsr #21
   83a6a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   83a6e:	bfb8      	it	lt
   83a70:	426d      	neglt	r5, r5
   83a72:	dd0c      	ble.n	83a8e <__adddf3+0x52>
   83a74:	442c      	add	r4, r5
   83a76:	ea80 0202 	eor.w	r2, r0, r2
   83a7a:	ea81 0303 	eor.w	r3, r1, r3
   83a7e:	ea82 0000 	eor.w	r0, r2, r0
   83a82:	ea83 0101 	eor.w	r1, r3, r1
   83a86:	ea80 0202 	eor.w	r2, r0, r2
   83a8a:	ea81 0303 	eor.w	r3, r1, r3
   83a8e:	2d36      	cmp	r5, #54	; 0x36
   83a90:	bf88      	it	hi
   83a92:	bd30      	pophi	{r4, r5, pc}
   83a94:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   83a98:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83a9c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   83aa0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   83aa4:	d002      	beq.n	83aac <__adddf3+0x70>
   83aa6:	4240      	negs	r0, r0
   83aa8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83aac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   83ab0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   83ab4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   83ab8:	d002      	beq.n	83ac0 <__adddf3+0x84>
   83aba:	4252      	negs	r2, r2
   83abc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83ac0:	ea94 0f05 	teq	r4, r5
   83ac4:	f000 80a7 	beq.w	83c16 <__adddf3+0x1da>
   83ac8:	f1a4 0401 	sub.w	r4, r4, #1
   83acc:	f1d5 0e20 	rsbs	lr, r5, #32
   83ad0:	db0d      	blt.n	83aee <__adddf3+0xb2>
   83ad2:	fa02 fc0e 	lsl.w	ip, r2, lr
   83ad6:	fa22 f205 	lsr.w	r2, r2, r5
   83ada:	1880      	adds	r0, r0, r2
   83adc:	f141 0100 	adc.w	r1, r1, #0
   83ae0:	fa03 f20e 	lsl.w	r2, r3, lr
   83ae4:	1880      	adds	r0, r0, r2
   83ae6:	fa43 f305 	asr.w	r3, r3, r5
   83aea:	4159      	adcs	r1, r3
   83aec:	e00e      	b.n	83b0c <__adddf3+0xd0>
   83aee:	f1a5 0520 	sub.w	r5, r5, #32
   83af2:	f10e 0e20 	add.w	lr, lr, #32
   83af6:	2a01      	cmp	r2, #1
   83af8:	fa03 fc0e 	lsl.w	ip, r3, lr
   83afc:	bf28      	it	cs
   83afe:	f04c 0c02 	orrcs.w	ip, ip, #2
   83b02:	fa43 f305 	asr.w	r3, r3, r5
   83b06:	18c0      	adds	r0, r0, r3
   83b08:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   83b0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83b10:	d507      	bpl.n	83b22 <__adddf3+0xe6>
   83b12:	f04f 0e00 	mov.w	lr, #0
   83b16:	f1dc 0c00 	rsbs	ip, ip, #0
   83b1a:	eb7e 0000 	sbcs.w	r0, lr, r0
   83b1e:	eb6e 0101 	sbc.w	r1, lr, r1
   83b22:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   83b26:	d31b      	bcc.n	83b60 <__adddf3+0x124>
   83b28:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   83b2c:	d30c      	bcc.n	83b48 <__adddf3+0x10c>
   83b2e:	0849      	lsrs	r1, r1, #1
   83b30:	ea5f 0030 	movs.w	r0, r0, rrx
   83b34:	ea4f 0c3c 	mov.w	ip, ip, rrx
   83b38:	f104 0401 	add.w	r4, r4, #1
   83b3c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   83b40:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   83b44:	f080 809a 	bcs.w	83c7c <__adddf3+0x240>
   83b48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   83b4c:	bf08      	it	eq
   83b4e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   83b52:	f150 0000 	adcs.w	r0, r0, #0
   83b56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83b5a:	ea41 0105 	orr.w	r1, r1, r5
   83b5e:	bd30      	pop	{r4, r5, pc}
   83b60:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   83b64:	4140      	adcs	r0, r0
   83b66:	eb41 0101 	adc.w	r1, r1, r1
   83b6a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83b6e:	f1a4 0401 	sub.w	r4, r4, #1
   83b72:	d1e9      	bne.n	83b48 <__adddf3+0x10c>
   83b74:	f091 0f00 	teq	r1, #0
   83b78:	bf04      	itt	eq
   83b7a:	4601      	moveq	r1, r0
   83b7c:	2000      	moveq	r0, #0
   83b7e:	fab1 f381 	clz	r3, r1
   83b82:	bf08      	it	eq
   83b84:	3320      	addeq	r3, #32
   83b86:	f1a3 030b 	sub.w	r3, r3, #11
   83b8a:	f1b3 0220 	subs.w	r2, r3, #32
   83b8e:	da0c      	bge.n	83baa <__adddf3+0x16e>
   83b90:	320c      	adds	r2, #12
   83b92:	dd08      	ble.n	83ba6 <__adddf3+0x16a>
   83b94:	f102 0c14 	add.w	ip, r2, #20
   83b98:	f1c2 020c 	rsb	r2, r2, #12
   83b9c:	fa01 f00c 	lsl.w	r0, r1, ip
   83ba0:	fa21 f102 	lsr.w	r1, r1, r2
   83ba4:	e00c      	b.n	83bc0 <__adddf3+0x184>
   83ba6:	f102 0214 	add.w	r2, r2, #20
   83baa:	bfd8      	it	le
   83bac:	f1c2 0c20 	rsble	ip, r2, #32
   83bb0:	fa01 f102 	lsl.w	r1, r1, r2
   83bb4:	fa20 fc0c 	lsr.w	ip, r0, ip
   83bb8:	bfdc      	itt	le
   83bba:	ea41 010c 	orrle.w	r1, r1, ip
   83bbe:	4090      	lslle	r0, r2
   83bc0:	1ae4      	subs	r4, r4, r3
   83bc2:	bfa2      	ittt	ge
   83bc4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   83bc8:	4329      	orrge	r1, r5
   83bca:	bd30      	popge	{r4, r5, pc}
   83bcc:	ea6f 0404 	mvn.w	r4, r4
   83bd0:	3c1f      	subs	r4, #31
   83bd2:	da1c      	bge.n	83c0e <__adddf3+0x1d2>
   83bd4:	340c      	adds	r4, #12
   83bd6:	dc0e      	bgt.n	83bf6 <__adddf3+0x1ba>
   83bd8:	f104 0414 	add.w	r4, r4, #20
   83bdc:	f1c4 0220 	rsb	r2, r4, #32
   83be0:	fa20 f004 	lsr.w	r0, r0, r4
   83be4:	fa01 f302 	lsl.w	r3, r1, r2
   83be8:	ea40 0003 	orr.w	r0, r0, r3
   83bec:	fa21 f304 	lsr.w	r3, r1, r4
   83bf0:	ea45 0103 	orr.w	r1, r5, r3
   83bf4:	bd30      	pop	{r4, r5, pc}
   83bf6:	f1c4 040c 	rsb	r4, r4, #12
   83bfa:	f1c4 0220 	rsb	r2, r4, #32
   83bfe:	fa20 f002 	lsr.w	r0, r0, r2
   83c02:	fa01 f304 	lsl.w	r3, r1, r4
   83c06:	ea40 0003 	orr.w	r0, r0, r3
   83c0a:	4629      	mov	r1, r5
   83c0c:	bd30      	pop	{r4, r5, pc}
   83c0e:	fa21 f004 	lsr.w	r0, r1, r4
   83c12:	4629      	mov	r1, r5
   83c14:	bd30      	pop	{r4, r5, pc}
   83c16:	f094 0f00 	teq	r4, #0
   83c1a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   83c1e:	bf06      	itte	eq
   83c20:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   83c24:	3401      	addeq	r4, #1
   83c26:	3d01      	subne	r5, #1
   83c28:	e74e      	b.n	83ac8 <__adddf3+0x8c>
   83c2a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   83c2e:	bf18      	it	ne
   83c30:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   83c34:	d029      	beq.n	83c8a <__adddf3+0x24e>
   83c36:	ea94 0f05 	teq	r4, r5
   83c3a:	bf08      	it	eq
   83c3c:	ea90 0f02 	teqeq	r0, r2
   83c40:	d005      	beq.n	83c4e <__adddf3+0x212>
   83c42:	ea54 0c00 	orrs.w	ip, r4, r0
   83c46:	bf04      	itt	eq
   83c48:	4619      	moveq	r1, r3
   83c4a:	4610      	moveq	r0, r2
   83c4c:	bd30      	pop	{r4, r5, pc}
   83c4e:	ea91 0f03 	teq	r1, r3
   83c52:	bf1e      	ittt	ne
   83c54:	2100      	movne	r1, #0
   83c56:	2000      	movne	r0, #0
   83c58:	bd30      	popne	{r4, r5, pc}
   83c5a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   83c5e:	d105      	bne.n	83c6c <__adddf3+0x230>
   83c60:	0040      	lsls	r0, r0, #1
   83c62:	4149      	adcs	r1, r1
   83c64:	bf28      	it	cs
   83c66:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   83c6a:	bd30      	pop	{r4, r5, pc}
   83c6c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   83c70:	bf3c      	itt	cc
   83c72:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   83c76:	bd30      	popcc	{r4, r5, pc}
   83c78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83c7c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   83c80:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   83c84:	f04f 0000 	mov.w	r0, #0
   83c88:	bd30      	pop	{r4, r5, pc}
   83c8a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   83c8e:	bf1a      	itte	ne
   83c90:	4619      	movne	r1, r3
   83c92:	4610      	movne	r0, r2
   83c94:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   83c98:	bf1c      	itt	ne
   83c9a:	460b      	movne	r3, r1
   83c9c:	4602      	movne	r2, r0
   83c9e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   83ca2:	bf06      	itte	eq
   83ca4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   83ca8:	ea91 0f03 	teqeq	r1, r3
   83cac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   83cb0:	bd30      	pop	{r4, r5, pc}
   83cb2:	bf00      	nop

00083cb4 <__aeabi_ui2d>:
   83cb4:	f090 0f00 	teq	r0, #0
   83cb8:	bf04      	itt	eq
   83cba:	2100      	moveq	r1, #0
   83cbc:	4770      	bxeq	lr
   83cbe:	b530      	push	{r4, r5, lr}
   83cc0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83cc4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83cc8:	f04f 0500 	mov.w	r5, #0
   83ccc:	f04f 0100 	mov.w	r1, #0
   83cd0:	e750      	b.n	83b74 <__adddf3+0x138>
   83cd2:	bf00      	nop

00083cd4 <__aeabi_i2d>:
   83cd4:	f090 0f00 	teq	r0, #0
   83cd8:	bf04      	itt	eq
   83cda:	2100      	moveq	r1, #0
   83cdc:	4770      	bxeq	lr
   83cde:	b530      	push	{r4, r5, lr}
   83ce0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83ce4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83ce8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   83cec:	bf48      	it	mi
   83cee:	4240      	negmi	r0, r0
   83cf0:	f04f 0100 	mov.w	r1, #0
   83cf4:	e73e      	b.n	83b74 <__adddf3+0x138>
   83cf6:	bf00      	nop

00083cf8 <__aeabi_f2d>:
   83cf8:	0042      	lsls	r2, r0, #1
   83cfa:	ea4f 01e2 	mov.w	r1, r2, asr #3
   83cfe:	ea4f 0131 	mov.w	r1, r1, rrx
   83d02:	ea4f 7002 	mov.w	r0, r2, lsl #28
   83d06:	bf1f      	itttt	ne
   83d08:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   83d0c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   83d10:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   83d14:	4770      	bxne	lr
   83d16:	f092 0f00 	teq	r2, #0
   83d1a:	bf14      	ite	ne
   83d1c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   83d20:	4770      	bxeq	lr
   83d22:	b530      	push	{r4, r5, lr}
   83d24:	f44f 7460 	mov.w	r4, #896	; 0x380
   83d28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83d2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   83d30:	e720      	b.n	83b74 <__adddf3+0x138>
   83d32:	bf00      	nop

00083d34 <__aeabi_ul2d>:
   83d34:	ea50 0201 	orrs.w	r2, r0, r1
   83d38:	bf08      	it	eq
   83d3a:	4770      	bxeq	lr
   83d3c:	b530      	push	{r4, r5, lr}
   83d3e:	f04f 0500 	mov.w	r5, #0
   83d42:	e00a      	b.n	83d5a <__aeabi_l2d+0x16>

00083d44 <__aeabi_l2d>:
   83d44:	ea50 0201 	orrs.w	r2, r0, r1
   83d48:	bf08      	it	eq
   83d4a:	4770      	bxeq	lr
   83d4c:	b530      	push	{r4, r5, lr}
   83d4e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   83d52:	d502      	bpl.n	83d5a <__aeabi_l2d+0x16>
   83d54:	4240      	negs	r0, r0
   83d56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83d5a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83d5e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83d62:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   83d66:	f43f aedc 	beq.w	83b22 <__adddf3+0xe6>
   83d6a:	f04f 0203 	mov.w	r2, #3
   83d6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83d72:	bf18      	it	ne
   83d74:	3203      	addne	r2, #3
   83d76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83d7a:	bf18      	it	ne
   83d7c:	3203      	addne	r2, #3
   83d7e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   83d82:	f1c2 0320 	rsb	r3, r2, #32
   83d86:	fa00 fc03 	lsl.w	ip, r0, r3
   83d8a:	fa20 f002 	lsr.w	r0, r0, r2
   83d8e:	fa01 fe03 	lsl.w	lr, r1, r3
   83d92:	ea40 000e 	orr.w	r0, r0, lr
   83d96:	fa21 f102 	lsr.w	r1, r1, r2
   83d9a:	4414      	add	r4, r2
   83d9c:	e6c1      	b.n	83b22 <__adddf3+0xe6>
   83d9e:	bf00      	nop

00083da0 <__aeabi_d2uiz>:
   83da0:	004a      	lsls	r2, r1, #1
   83da2:	d211      	bcs.n	83dc8 <__aeabi_d2uiz+0x28>
   83da4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   83da8:	d211      	bcs.n	83dce <__aeabi_d2uiz+0x2e>
   83daa:	d50d      	bpl.n	83dc8 <__aeabi_d2uiz+0x28>
   83dac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   83db0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   83db4:	d40e      	bmi.n	83dd4 <__aeabi_d2uiz+0x34>
   83db6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   83dba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   83dbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   83dc2:	fa23 f002 	lsr.w	r0, r3, r2
   83dc6:	4770      	bx	lr
   83dc8:	f04f 0000 	mov.w	r0, #0
   83dcc:	4770      	bx	lr
   83dce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   83dd2:	d102      	bne.n	83dda <__aeabi_d2uiz+0x3a>
   83dd4:	f04f 30ff 	mov.w	r0, #4294967295
   83dd8:	4770      	bx	lr
   83dda:	f04f 0000 	mov.w	r0, #0
   83dde:	4770      	bx	lr

00083de0 <__libc_init_array>:
   83de0:	b570      	push	{r4, r5, r6, lr}
   83de2:	4e0f      	ldr	r6, [pc, #60]	; (83e20 <__libc_init_array+0x40>)
   83de4:	4d0f      	ldr	r5, [pc, #60]	; (83e24 <__libc_init_array+0x44>)
   83de6:	1b76      	subs	r6, r6, r5
   83de8:	10b6      	asrs	r6, r6, #2
   83dea:	bf18      	it	ne
   83dec:	2400      	movne	r4, #0
   83dee:	d005      	beq.n	83dfc <__libc_init_array+0x1c>
   83df0:	3401      	adds	r4, #1
   83df2:	f855 3b04 	ldr.w	r3, [r5], #4
   83df6:	4798      	blx	r3
   83df8:	42a6      	cmp	r6, r4
   83dfa:	d1f9      	bne.n	83df0 <__libc_init_array+0x10>
   83dfc:	4e0a      	ldr	r6, [pc, #40]	; (83e28 <__libc_init_array+0x48>)
   83dfe:	4d0b      	ldr	r5, [pc, #44]	; (83e2c <__libc_init_array+0x4c>)
   83e00:	f003 f812 	bl	86e28 <_init>
   83e04:	1b76      	subs	r6, r6, r5
   83e06:	10b6      	asrs	r6, r6, #2
   83e08:	bf18      	it	ne
   83e0a:	2400      	movne	r4, #0
   83e0c:	d006      	beq.n	83e1c <__libc_init_array+0x3c>
   83e0e:	3401      	adds	r4, #1
   83e10:	f855 3b04 	ldr.w	r3, [r5], #4
   83e14:	4798      	blx	r3
   83e16:	42a6      	cmp	r6, r4
   83e18:	d1f9      	bne.n	83e0e <__libc_init_array+0x2e>
   83e1a:	bd70      	pop	{r4, r5, r6, pc}
   83e1c:	bd70      	pop	{r4, r5, r6, pc}
   83e1e:	bf00      	nop
   83e20:	00086e34 	.word	0x00086e34
   83e24:	00086e34 	.word	0x00086e34
   83e28:	00086e3c 	.word	0x00086e3c
   83e2c:	00086e34 	.word	0x00086e34

00083e30 <iprintf>:
   83e30:	b40f      	push	{r0, r1, r2, r3}
   83e32:	b510      	push	{r4, lr}
   83e34:	4b07      	ldr	r3, [pc, #28]	; (83e54 <iprintf+0x24>)
   83e36:	b082      	sub	sp, #8
   83e38:	ac04      	add	r4, sp, #16
   83e3a:	f854 2b04 	ldr.w	r2, [r4], #4
   83e3e:	6818      	ldr	r0, [r3, #0]
   83e40:	4623      	mov	r3, r4
   83e42:	6881      	ldr	r1, [r0, #8]
   83e44:	9401      	str	r4, [sp, #4]
   83e46:	f000 f943 	bl	840d0 <_vfiprintf_r>
   83e4a:	b002      	add	sp, #8
   83e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83e50:	b004      	add	sp, #16
   83e52:	4770      	bx	lr
   83e54:	20070830 	.word	0x20070830

00083e58 <memset>:
   83e58:	b470      	push	{r4, r5, r6}
   83e5a:	0784      	lsls	r4, r0, #30
   83e5c:	d046      	beq.n	83eec <memset+0x94>
   83e5e:	1e54      	subs	r4, r2, #1
   83e60:	2a00      	cmp	r2, #0
   83e62:	d041      	beq.n	83ee8 <memset+0x90>
   83e64:	b2cd      	uxtb	r5, r1
   83e66:	4603      	mov	r3, r0
   83e68:	e002      	b.n	83e70 <memset+0x18>
   83e6a:	1e62      	subs	r2, r4, #1
   83e6c:	b3e4      	cbz	r4, 83ee8 <memset+0x90>
   83e6e:	4614      	mov	r4, r2
   83e70:	f803 5b01 	strb.w	r5, [r3], #1
   83e74:	079a      	lsls	r2, r3, #30
   83e76:	d1f8      	bne.n	83e6a <memset+0x12>
   83e78:	2c03      	cmp	r4, #3
   83e7a:	d92e      	bls.n	83eda <memset+0x82>
   83e7c:	b2cd      	uxtb	r5, r1
   83e7e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   83e82:	2c0f      	cmp	r4, #15
   83e84:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   83e88:	d919      	bls.n	83ebe <memset+0x66>
   83e8a:	4626      	mov	r6, r4
   83e8c:	f103 0210 	add.w	r2, r3, #16
   83e90:	3e10      	subs	r6, #16
   83e92:	2e0f      	cmp	r6, #15
   83e94:	f842 5c10 	str.w	r5, [r2, #-16]
   83e98:	f842 5c0c 	str.w	r5, [r2, #-12]
   83e9c:	f842 5c08 	str.w	r5, [r2, #-8]
   83ea0:	f842 5c04 	str.w	r5, [r2, #-4]
   83ea4:	f102 0210 	add.w	r2, r2, #16
   83ea8:	d8f2      	bhi.n	83e90 <memset+0x38>
   83eaa:	f1a4 0210 	sub.w	r2, r4, #16
   83eae:	f022 020f 	bic.w	r2, r2, #15
   83eb2:	f004 040f 	and.w	r4, r4, #15
   83eb6:	3210      	adds	r2, #16
   83eb8:	2c03      	cmp	r4, #3
   83eba:	4413      	add	r3, r2
   83ebc:	d90d      	bls.n	83eda <memset+0x82>
   83ebe:	461e      	mov	r6, r3
   83ec0:	4622      	mov	r2, r4
   83ec2:	3a04      	subs	r2, #4
   83ec4:	2a03      	cmp	r2, #3
   83ec6:	f846 5b04 	str.w	r5, [r6], #4
   83eca:	d8fa      	bhi.n	83ec2 <memset+0x6a>
   83ecc:	1f22      	subs	r2, r4, #4
   83ece:	f022 0203 	bic.w	r2, r2, #3
   83ed2:	3204      	adds	r2, #4
   83ed4:	4413      	add	r3, r2
   83ed6:	f004 0403 	and.w	r4, r4, #3
   83eda:	b12c      	cbz	r4, 83ee8 <memset+0x90>
   83edc:	b2c9      	uxtb	r1, r1
   83ede:	441c      	add	r4, r3
   83ee0:	f803 1b01 	strb.w	r1, [r3], #1
   83ee4:	42a3      	cmp	r3, r4
   83ee6:	d1fb      	bne.n	83ee0 <memset+0x88>
   83ee8:	bc70      	pop	{r4, r5, r6}
   83eea:	4770      	bx	lr
   83eec:	4614      	mov	r4, r2
   83eee:	4603      	mov	r3, r0
   83ef0:	e7c2      	b.n	83e78 <memset+0x20>
   83ef2:	bf00      	nop

00083ef4 <setbuf>:
   83ef4:	2900      	cmp	r1, #0
   83ef6:	bf0c      	ite	eq
   83ef8:	2202      	moveq	r2, #2
   83efa:	2200      	movne	r2, #0
   83efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83f00:	f000 b800 	b.w	83f04 <setvbuf>

00083f04 <setvbuf>:
   83f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83f08:	4d3a      	ldr	r5, [pc, #232]	; (83ff4 <setvbuf+0xf0>)
   83f0a:	4604      	mov	r4, r0
   83f0c:	682e      	ldr	r6, [r5, #0]
   83f0e:	4690      	mov	r8, r2
   83f10:	460d      	mov	r5, r1
   83f12:	461f      	mov	r7, r3
   83f14:	b116      	cbz	r6, 83f1c <setvbuf+0x18>
   83f16:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   83f18:	2b00      	cmp	r3, #0
   83f1a:	d03c      	beq.n	83f96 <setvbuf+0x92>
   83f1c:	f1b8 0f02 	cmp.w	r8, #2
   83f20:	d82f      	bhi.n	83f82 <setvbuf+0x7e>
   83f22:	2f00      	cmp	r7, #0
   83f24:	db2d      	blt.n	83f82 <setvbuf+0x7e>
   83f26:	4621      	mov	r1, r4
   83f28:	4630      	mov	r0, r6
   83f2a:	f001 f82d 	bl	84f88 <_fflush_r>
   83f2e:	89a1      	ldrh	r1, [r4, #12]
   83f30:	2300      	movs	r3, #0
   83f32:	6063      	str	r3, [r4, #4]
   83f34:	61a3      	str	r3, [r4, #24]
   83f36:	060b      	lsls	r3, r1, #24
   83f38:	d427      	bmi.n	83f8a <setvbuf+0x86>
   83f3a:	f021 0183 	bic.w	r1, r1, #131	; 0x83
   83f3e:	b289      	uxth	r1, r1
   83f40:	f1b8 0f02 	cmp.w	r8, #2
   83f44:	81a1      	strh	r1, [r4, #12]
   83f46:	d02a      	beq.n	83f9e <setvbuf+0x9a>
   83f48:	2d00      	cmp	r5, #0
   83f4a:	d036      	beq.n	83fba <setvbuf+0xb6>
   83f4c:	f1b8 0f01 	cmp.w	r8, #1
   83f50:	d011      	beq.n	83f76 <setvbuf+0x72>
   83f52:	b289      	uxth	r1, r1
   83f54:	f001 0008 	and.w	r0, r1, #8
   83f58:	4b27      	ldr	r3, [pc, #156]	; (83ff8 <setvbuf+0xf4>)
   83f5a:	b280      	uxth	r0, r0
   83f5c:	63f3      	str	r3, [r6, #60]	; 0x3c
   83f5e:	6025      	str	r5, [r4, #0]
   83f60:	6125      	str	r5, [r4, #16]
   83f62:	6167      	str	r7, [r4, #20]
   83f64:	b178      	cbz	r0, 83f86 <setvbuf+0x82>
   83f66:	f011 0f03 	tst.w	r1, #3
   83f6a:	bf18      	it	ne
   83f6c:	2700      	movne	r7, #0
   83f6e:	2000      	movs	r0, #0
   83f70:	60a7      	str	r7, [r4, #8]
   83f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83f76:	f041 0101 	orr.w	r1, r1, #1
   83f7a:	427b      	negs	r3, r7
   83f7c:	81a1      	strh	r1, [r4, #12]
   83f7e:	61a3      	str	r3, [r4, #24]
   83f80:	e7e7      	b.n	83f52 <setvbuf+0x4e>
   83f82:	f04f 30ff 	mov.w	r0, #4294967295
   83f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83f8a:	6921      	ldr	r1, [r4, #16]
   83f8c:	4630      	mov	r0, r6
   83f8e:	f001 f967 	bl	85260 <_free_r>
   83f92:	89a1      	ldrh	r1, [r4, #12]
   83f94:	e7d1      	b.n	83f3a <setvbuf+0x36>
   83f96:	4630      	mov	r0, r6
   83f98:	f001 f88a 	bl	850b0 <__sinit>
   83f9c:	e7be      	b.n	83f1c <setvbuf+0x18>
   83f9e:	2000      	movs	r0, #0
   83fa0:	f104 0343 	add.w	r3, r4, #67	; 0x43
   83fa4:	f041 0102 	orr.w	r1, r1, #2
   83fa8:	2500      	movs	r5, #0
   83faa:	2201      	movs	r2, #1
   83fac:	81a1      	strh	r1, [r4, #12]
   83fae:	60a5      	str	r5, [r4, #8]
   83fb0:	6023      	str	r3, [r4, #0]
   83fb2:	6123      	str	r3, [r4, #16]
   83fb4:	6162      	str	r2, [r4, #20]
   83fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83fba:	2f00      	cmp	r7, #0
   83fbc:	bf08      	it	eq
   83fbe:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   83fc2:	4638      	mov	r0, r7
   83fc4:	f001 fc56 	bl	85874 <malloc>
   83fc8:	4605      	mov	r5, r0
   83fca:	b128      	cbz	r0, 83fd8 <setvbuf+0xd4>
   83fcc:	89a1      	ldrh	r1, [r4, #12]
   83fce:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   83fd2:	b289      	uxth	r1, r1
   83fd4:	81a1      	strh	r1, [r4, #12]
   83fd6:	e7b9      	b.n	83f4c <setvbuf+0x48>
   83fd8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   83fdc:	f001 fc4a 	bl	85874 <malloc>
   83fe0:	4605      	mov	r5, r0
   83fe2:	b918      	cbnz	r0, 83fec <setvbuf+0xe8>
   83fe4:	89a1      	ldrh	r1, [r4, #12]
   83fe6:	f04f 30ff 	mov.w	r0, #4294967295
   83fea:	e7d9      	b.n	83fa0 <setvbuf+0x9c>
   83fec:	f44f 6780 	mov.w	r7, #1024	; 0x400
   83ff0:	e7ec      	b.n	83fcc <setvbuf+0xc8>
   83ff2:	bf00      	nop
   83ff4:	20070830 	.word	0x20070830
   83ff8:	00084fb5 	.word	0x00084fb5

00083ffc <strlen>:
   83ffc:	f020 0103 	bic.w	r1, r0, #3
   84000:	f010 0003 	ands.w	r0, r0, #3
   84004:	f1c0 0000 	rsb	r0, r0, #0
   84008:	f851 3b04 	ldr.w	r3, [r1], #4
   8400c:	f100 0c04 	add.w	ip, r0, #4
   84010:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   84014:	f06f 0200 	mvn.w	r2, #0
   84018:	bf1c      	itt	ne
   8401a:	fa22 f20c 	lsrne.w	r2, r2, ip
   8401e:	4313      	orrne	r3, r2
   84020:	f04f 0c01 	mov.w	ip, #1
   84024:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   84028:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8402c:	eba3 020c 	sub.w	r2, r3, ip
   84030:	ea22 0203 	bic.w	r2, r2, r3
   84034:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   84038:	bf04      	itt	eq
   8403a:	f851 3b04 	ldreq.w	r3, [r1], #4
   8403e:	3004      	addeq	r0, #4
   84040:	d0f4      	beq.n	8402c <strlen+0x30>
   84042:	f1c2 0100 	rsb	r1, r2, #0
   84046:	ea02 0201 	and.w	r2, r2, r1
   8404a:	fab2 f282 	clz	r2, r2
   8404e:	f1c2 021f 	rsb	r2, r2, #31
   84052:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   84056:	4770      	bx	lr

00084058 <__sprint_r.part.0>:
   84058:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8405a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8405e:	049c      	lsls	r4, r3, #18
   84060:	460f      	mov	r7, r1
   84062:	4692      	mov	sl, r2
   84064:	d52b      	bpl.n	840be <__sprint_r.part.0+0x66>
   84066:	6893      	ldr	r3, [r2, #8]
   84068:	6812      	ldr	r2, [r2, #0]
   8406a:	b333      	cbz	r3, 840ba <__sprint_r.part.0+0x62>
   8406c:	4680      	mov	r8, r0
   8406e:	f102 0908 	add.w	r9, r2, #8
   84072:	e919 0060 	ldmdb	r9, {r5, r6}
   84076:	08b6      	lsrs	r6, r6, #2
   84078:	d017      	beq.n	840aa <__sprint_r.part.0+0x52>
   8407a:	3d04      	subs	r5, #4
   8407c:	2400      	movs	r4, #0
   8407e:	e001      	b.n	84084 <__sprint_r.part.0+0x2c>
   84080:	42a6      	cmp	r6, r4
   84082:	d010      	beq.n	840a6 <__sprint_r.part.0+0x4e>
   84084:	4640      	mov	r0, r8
   84086:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8408a:	463a      	mov	r2, r7
   8408c:	f001 f888 	bl	851a0 <_fputwc_r>
   84090:	1c43      	adds	r3, r0, #1
   84092:	f104 0401 	add.w	r4, r4, #1
   84096:	d1f3      	bne.n	84080 <__sprint_r.part.0+0x28>
   84098:	2300      	movs	r3, #0
   8409a:	f8ca 3008 	str.w	r3, [sl, #8]
   8409e:	f8ca 3004 	str.w	r3, [sl, #4]
   840a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   840a6:	f8da 3008 	ldr.w	r3, [sl, #8]
   840aa:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   840ae:	f8ca 3008 	str.w	r3, [sl, #8]
   840b2:	f109 0908 	add.w	r9, r9, #8
   840b6:	2b00      	cmp	r3, #0
   840b8:	d1db      	bne.n	84072 <__sprint_r.part.0+0x1a>
   840ba:	2000      	movs	r0, #0
   840bc:	e7ec      	b.n	84098 <__sprint_r.part.0+0x40>
   840be:	f001 f9a7 	bl	85410 <__sfvwrite_r>
   840c2:	2300      	movs	r3, #0
   840c4:	f8ca 3008 	str.w	r3, [sl, #8]
   840c8:	f8ca 3004 	str.w	r3, [sl, #4]
   840cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000840d0 <_vfiprintf_r>:
   840d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   840d4:	b0ab      	sub	sp, #172	; 0xac
   840d6:	461c      	mov	r4, r3
   840d8:	9100      	str	r1, [sp, #0]
   840da:	4693      	mov	fp, r2
   840dc:	9304      	str	r3, [sp, #16]
   840de:	9001      	str	r0, [sp, #4]
   840e0:	b118      	cbz	r0, 840ea <_vfiprintf_r+0x1a>
   840e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   840e4:	2b00      	cmp	r3, #0
   840e6:	f000 80e3 	beq.w	842b0 <_vfiprintf_r+0x1e0>
   840ea:	9b00      	ldr	r3, [sp, #0]
   840ec:	8999      	ldrh	r1, [r3, #12]
   840ee:	b28a      	uxth	r2, r1
   840f0:	0490      	lsls	r0, r2, #18
   840f2:	d408      	bmi.n	84106 <_vfiprintf_r+0x36>
   840f4:	4618      	mov	r0, r3
   840f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   840f8:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   840fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   84100:	8182      	strh	r2, [r0, #12]
   84102:	6643      	str	r3, [r0, #100]	; 0x64
   84104:	b292      	uxth	r2, r2
   84106:	0711      	lsls	r1, r2, #28
   84108:	f140 80b2 	bpl.w	84270 <_vfiprintf_r+0x1a0>
   8410c:	9b00      	ldr	r3, [sp, #0]
   8410e:	691b      	ldr	r3, [r3, #16]
   84110:	2b00      	cmp	r3, #0
   84112:	f000 80ad 	beq.w	84270 <_vfiprintf_r+0x1a0>
   84116:	f002 021a 	and.w	r2, r2, #26
   8411a:	2a0a      	cmp	r2, #10
   8411c:	f000 80b4 	beq.w	84288 <_vfiprintf_r+0x1b8>
   84120:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   84124:	4654      	mov	r4, sl
   84126:	2300      	movs	r3, #0
   84128:	9309      	str	r3, [sp, #36]	; 0x24
   8412a:	9302      	str	r3, [sp, #8]
   8412c:	930f      	str	r3, [sp, #60]	; 0x3c
   8412e:	930e      	str	r3, [sp, #56]	; 0x38
   84130:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   84134:	f89b 3000 	ldrb.w	r3, [fp]
   84138:	2b00      	cmp	r3, #0
   8413a:	f000 84a3 	beq.w	84a84 <_vfiprintf_r+0x9b4>
   8413e:	2b25      	cmp	r3, #37	; 0x25
   84140:	f000 84a0 	beq.w	84a84 <_vfiprintf_r+0x9b4>
   84144:	465a      	mov	r2, fp
   84146:	e001      	b.n	8414c <_vfiprintf_r+0x7c>
   84148:	2b25      	cmp	r3, #37	; 0x25
   8414a:	d003      	beq.n	84154 <_vfiprintf_r+0x84>
   8414c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   84150:	2b00      	cmp	r3, #0
   84152:	d1f9      	bne.n	84148 <_vfiprintf_r+0x78>
   84154:	ebcb 0602 	rsb	r6, fp, r2
   84158:	4615      	mov	r5, r2
   8415a:	b196      	cbz	r6, 84182 <_vfiprintf_r+0xb2>
   8415c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8415e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84160:	3301      	adds	r3, #1
   84162:	4432      	add	r2, r6
   84164:	2b07      	cmp	r3, #7
   84166:	f8c4 b000 	str.w	fp, [r4]
   8416a:	6066      	str	r6, [r4, #4]
   8416c:	920f      	str	r2, [sp, #60]	; 0x3c
   8416e:	930e      	str	r3, [sp, #56]	; 0x38
   84170:	dd79      	ble.n	84266 <_vfiprintf_r+0x196>
   84172:	2a00      	cmp	r2, #0
   84174:	f040 84ad 	bne.w	84ad2 <_vfiprintf_r+0xa02>
   84178:	4654      	mov	r4, sl
   8417a:	9b02      	ldr	r3, [sp, #8]
   8417c:	920e      	str	r2, [sp, #56]	; 0x38
   8417e:	4433      	add	r3, r6
   84180:	9302      	str	r3, [sp, #8]
   84182:	782b      	ldrb	r3, [r5, #0]
   84184:	2b00      	cmp	r3, #0
   84186:	f000 835f 	beq.w	84848 <_vfiprintf_r+0x778>
   8418a:	f04f 0300 	mov.w	r3, #0
   8418e:	2100      	movs	r1, #0
   84190:	f04f 3cff 	mov.w	ip, #4294967295
   84194:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84198:	1c68      	adds	r0, r5, #1
   8419a:	786b      	ldrb	r3, [r5, #1]
   8419c:	4688      	mov	r8, r1
   8419e:	460d      	mov	r5, r1
   841a0:	4666      	mov	r6, ip
   841a2:	f100 0b01 	add.w	fp, r0, #1
   841a6:	f1a3 0220 	sub.w	r2, r3, #32
   841aa:	2a58      	cmp	r2, #88	; 0x58
   841ac:	f200 82aa 	bhi.w	84704 <_vfiprintf_r+0x634>
   841b0:	e8df f012 	tbh	[pc, r2, lsl #1]
   841b4:	02a8029a 	.word	0x02a8029a
   841b8:	02a202a8 	.word	0x02a202a8
   841bc:	02a802a8 	.word	0x02a802a8
   841c0:	02a802a8 	.word	0x02a802a8
   841c4:	02a802a8 	.word	0x02a802a8
   841c8:	02600254 	.word	0x02600254
   841cc:	010d02a8 	.word	0x010d02a8
   841d0:	02a8026c 	.word	0x02a8026c
   841d4:	012f0129 	.word	0x012f0129
   841d8:	012f012f 	.word	0x012f012f
   841dc:	012f012f 	.word	0x012f012f
   841e0:	012f012f 	.word	0x012f012f
   841e4:	012f012f 	.word	0x012f012f
   841e8:	02a802a8 	.word	0x02a802a8
   841ec:	02a802a8 	.word	0x02a802a8
   841f0:	02a802a8 	.word	0x02a802a8
   841f4:	02a802a8 	.word	0x02a802a8
   841f8:	02a802a8 	.word	0x02a802a8
   841fc:	02a8013d 	.word	0x02a8013d
   84200:	02a802a8 	.word	0x02a802a8
   84204:	02a802a8 	.word	0x02a802a8
   84208:	02a802a8 	.word	0x02a802a8
   8420c:	02a802a8 	.word	0x02a802a8
   84210:	017402a8 	.word	0x017402a8
   84214:	02a802a8 	.word	0x02a802a8
   84218:	02a802a8 	.word	0x02a802a8
   8421c:	018b02a8 	.word	0x018b02a8
   84220:	02a802a8 	.word	0x02a802a8
   84224:	02a801a3 	.word	0x02a801a3
   84228:	02a802a8 	.word	0x02a802a8
   8422c:	02a802a8 	.word	0x02a802a8
   84230:	02a802a8 	.word	0x02a802a8
   84234:	02a802a8 	.word	0x02a802a8
   84238:	01c702a8 	.word	0x01c702a8
   8423c:	02a801da 	.word	0x02a801da
   84240:	02a802a8 	.word	0x02a802a8
   84244:	01da0123 	.word	0x01da0123
   84248:	02a802a8 	.word	0x02a802a8
   8424c:	02a8024b 	.word	0x02a8024b
   84250:	01130288 	.word	0x01130288
   84254:	020701f4 	.word	0x020701f4
   84258:	020d02a8 	.word	0x020d02a8
   8425c:	008102a8 	.word	0x008102a8
   84260:	02a802a8 	.word	0x02a802a8
   84264:	0232      	.short	0x0232
   84266:	3408      	adds	r4, #8
   84268:	9b02      	ldr	r3, [sp, #8]
   8426a:	4433      	add	r3, r6
   8426c:	9302      	str	r3, [sp, #8]
   8426e:	e788      	b.n	84182 <_vfiprintf_r+0xb2>
   84270:	9801      	ldr	r0, [sp, #4]
   84272:	9900      	ldr	r1, [sp, #0]
   84274:	f000 fd72 	bl	84d5c <__swsetup_r>
   84278:	b9a8      	cbnz	r0, 842a6 <_vfiprintf_r+0x1d6>
   8427a:	9b00      	ldr	r3, [sp, #0]
   8427c:	899a      	ldrh	r2, [r3, #12]
   8427e:	f002 021a 	and.w	r2, r2, #26
   84282:	2a0a      	cmp	r2, #10
   84284:	f47f af4c 	bne.w	84120 <_vfiprintf_r+0x50>
   84288:	9b00      	ldr	r3, [sp, #0]
   8428a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
   8428e:	2b00      	cmp	r3, #0
   84290:	f6ff af46 	blt.w	84120 <_vfiprintf_r+0x50>
   84294:	9801      	ldr	r0, [sp, #4]
   84296:	9900      	ldr	r1, [sp, #0]
   84298:	465a      	mov	r2, fp
   8429a:	4623      	mov	r3, r4
   8429c:	f000 fd20 	bl	84ce0 <__sbprintf>
   842a0:	b02b      	add	sp, #172	; 0xac
   842a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   842a6:	f04f 30ff 	mov.w	r0, #4294967295
   842aa:	b02b      	add	sp, #172	; 0xac
   842ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   842b0:	f000 fefe 	bl	850b0 <__sinit>
   842b4:	e719      	b.n	840ea <_vfiprintf_r+0x1a>
   842b6:	f018 0f20 	tst.w	r8, #32
   842ba:	9503      	str	r5, [sp, #12]
   842bc:	46b4      	mov	ip, r6
   842be:	f000 810c 	beq.w	844da <_vfiprintf_r+0x40a>
   842c2:	9b04      	ldr	r3, [sp, #16]
   842c4:	3307      	adds	r3, #7
   842c6:	f023 0307 	bic.w	r3, r3, #7
   842ca:	f103 0208 	add.w	r2, r3, #8
   842ce:	e9d3 6700 	ldrd	r6, r7, [r3]
   842d2:	9204      	str	r2, [sp, #16]
   842d4:	2301      	movs	r3, #1
   842d6:	f04f 0200 	mov.w	r2, #0
   842da:	46e1      	mov	r9, ip
   842dc:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   842e0:	2500      	movs	r5, #0
   842e2:	f1bc 0f00 	cmp.w	ip, #0
   842e6:	bfa8      	it	ge
   842e8:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   842ec:	ea56 0207 	orrs.w	r2, r6, r7
   842f0:	f040 80c4 	bne.w	8447c <_vfiprintf_r+0x3ac>
   842f4:	f1bc 0f00 	cmp.w	ip, #0
   842f8:	f000 8380 	beq.w	849fc <_vfiprintf_r+0x92c>
   842fc:	2b01      	cmp	r3, #1
   842fe:	f000 80c5 	beq.w	8448c <_vfiprintf_r+0x3bc>
   84302:	2b02      	cmp	r3, #2
   84304:	f000 8386 	beq.w	84a14 <_vfiprintf_r+0x944>
   84308:	4651      	mov	r1, sl
   8430a:	08f2      	lsrs	r2, r6, #3
   8430c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   84310:	08f8      	lsrs	r0, r7, #3
   84312:	f006 0307 	and.w	r3, r6, #7
   84316:	4607      	mov	r7, r0
   84318:	4616      	mov	r6, r2
   8431a:	3330      	adds	r3, #48	; 0x30
   8431c:	ea56 0207 	orrs.w	r2, r6, r7
   84320:	f801 3d01 	strb.w	r3, [r1, #-1]!
   84324:	d1f1      	bne.n	8430a <_vfiprintf_r+0x23a>
   84326:	f018 0f01 	tst.w	r8, #1
   8432a:	9107      	str	r1, [sp, #28]
   8432c:	f040 83fa 	bne.w	84b24 <_vfiprintf_r+0xa54>
   84330:	ebc1 090a 	rsb	r9, r1, sl
   84334:	45e1      	cmp	r9, ip
   84336:	464e      	mov	r6, r9
   84338:	bfb8      	it	lt
   8433a:	4666      	movlt	r6, ip
   8433c:	b105      	cbz	r5, 84340 <_vfiprintf_r+0x270>
   8433e:	3601      	adds	r6, #1
   84340:	f018 0302 	ands.w	r3, r8, #2
   84344:	9305      	str	r3, [sp, #20]
   84346:	bf18      	it	ne
   84348:	3602      	addne	r6, #2
   8434a:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   8434e:	9306      	str	r3, [sp, #24]
   84350:	f040 81f9 	bne.w	84746 <_vfiprintf_r+0x676>
   84354:	9b03      	ldr	r3, [sp, #12]
   84356:	1b9d      	subs	r5, r3, r6
   84358:	2d00      	cmp	r5, #0
   8435a:	f340 81f4 	ble.w	84746 <_vfiprintf_r+0x676>
   8435e:	2d10      	cmp	r5, #16
   84360:	f340 848a 	ble.w	84c78 <_vfiprintf_r+0xba8>
   84364:	4620      	mov	r0, r4
   84366:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   8436a:	4664      	mov	r4, ip
   8436c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8436e:	4fc4      	ldr	r7, [pc, #784]	; (84680 <_vfiprintf_r+0x5b0>)
   84370:	2310      	movs	r3, #16
   84372:	4671      	mov	r1, lr
   84374:	4684      	mov	ip, r0
   84376:	e007      	b.n	84388 <_vfiprintf_r+0x2b8>
   84378:	f101 0e02 	add.w	lr, r1, #2
   8437c:	4601      	mov	r1, r0
   8437e:	f10c 0c08 	add.w	ip, ip, #8
   84382:	3d10      	subs	r5, #16
   84384:	2d10      	cmp	r5, #16
   84386:	dd13      	ble.n	843b0 <_vfiprintf_r+0x2e0>
   84388:	1c48      	adds	r0, r1, #1
   8438a:	3210      	adds	r2, #16
   8438c:	2807      	cmp	r0, #7
   8438e:	920f      	str	r2, [sp, #60]	; 0x3c
   84390:	f8cc 7000 	str.w	r7, [ip]
   84394:	f8cc 3004 	str.w	r3, [ip, #4]
   84398:	900e      	str	r0, [sp, #56]	; 0x38
   8439a:	dded      	ble.n	84378 <_vfiprintf_r+0x2a8>
   8439c:	2a00      	cmp	r2, #0
   8439e:	f040 81c2 	bne.w	84726 <_vfiprintf_r+0x656>
   843a2:	3d10      	subs	r5, #16
   843a4:	2d10      	cmp	r5, #16
   843a6:	4611      	mov	r1, r2
   843a8:	f04f 0e01 	mov.w	lr, #1
   843ac:	46d4      	mov	ip, sl
   843ae:	dceb      	bgt.n	84388 <_vfiprintf_r+0x2b8>
   843b0:	4663      	mov	r3, ip
   843b2:	4671      	mov	r1, lr
   843b4:	46a4      	mov	ip, r4
   843b6:	461c      	mov	r4, r3
   843b8:	442a      	add	r2, r5
   843ba:	2907      	cmp	r1, #7
   843bc:	920f      	str	r2, [sp, #60]	; 0x3c
   843be:	6027      	str	r7, [r4, #0]
   843c0:	6065      	str	r5, [r4, #4]
   843c2:	910e      	str	r1, [sp, #56]	; 0x38
   843c4:	f300 8346 	bgt.w	84a54 <_vfiprintf_r+0x984>
   843c8:	3408      	adds	r4, #8
   843ca:	1c48      	adds	r0, r1, #1
   843cc:	e1be      	b.n	8474c <_vfiprintf_r+0x67c>
   843ce:	4658      	mov	r0, fp
   843d0:	f048 0804 	orr.w	r8, r8, #4
   843d4:	f89b 3000 	ldrb.w	r3, [fp]
   843d8:	e6e3      	b.n	841a2 <_vfiprintf_r+0xd2>
   843da:	f018 0320 	ands.w	r3, r8, #32
   843de:	9503      	str	r5, [sp, #12]
   843e0:	46b4      	mov	ip, r6
   843e2:	d062      	beq.n	844aa <_vfiprintf_r+0x3da>
   843e4:	9b04      	ldr	r3, [sp, #16]
   843e6:	3307      	adds	r3, #7
   843e8:	f023 0307 	bic.w	r3, r3, #7
   843ec:	f103 0208 	add.w	r2, r3, #8
   843f0:	e9d3 6700 	ldrd	r6, r7, [r3]
   843f4:	9204      	str	r2, [sp, #16]
   843f6:	2300      	movs	r3, #0
   843f8:	e76d      	b.n	842d6 <_vfiprintf_r+0x206>
   843fa:	f048 0840 	orr.w	r8, r8, #64	; 0x40
   843fe:	f89b 3000 	ldrb.w	r3, [fp]
   84402:	4658      	mov	r0, fp
   84404:	e6cd      	b.n	841a2 <_vfiprintf_r+0xd2>
   84406:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   8440a:	f89b 3000 	ldrb.w	r3, [fp]
   8440e:	4658      	mov	r0, fp
   84410:	e6c7      	b.n	841a2 <_vfiprintf_r+0xd2>
   84412:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84416:	2500      	movs	r5, #0
   84418:	f81b 3b01 	ldrb.w	r3, [fp], #1
   8441c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   84420:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   84424:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84428:	2a09      	cmp	r2, #9
   8442a:	d9f5      	bls.n	84418 <_vfiprintf_r+0x348>
   8442c:	e6bb      	b.n	841a6 <_vfiprintf_r+0xd6>
   8442e:	f048 0810 	orr.w	r8, r8, #16
   84432:	f018 0f20 	tst.w	r8, #32
   84436:	9503      	str	r5, [sp, #12]
   84438:	46b4      	mov	ip, r6
   8443a:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   8443e:	f000 809b 	beq.w	84578 <_vfiprintf_r+0x4a8>
   84442:	9904      	ldr	r1, [sp, #16]
   84444:	3107      	adds	r1, #7
   84446:	f021 0107 	bic.w	r1, r1, #7
   8444a:	e9d1 2300 	ldrd	r2, r3, [r1]
   8444e:	4616      	mov	r6, r2
   84450:	461f      	mov	r7, r3
   84452:	3108      	adds	r1, #8
   84454:	9104      	str	r1, [sp, #16]
   84456:	2a00      	cmp	r2, #0
   84458:	f173 0300 	sbcs.w	r3, r3, #0
   8445c:	f2c0 83a4 	blt.w	84ba8 <_vfiprintf_r+0xad8>
   84460:	f1bc 0f00 	cmp.w	ip, #0
   84464:	bfa8      	it	ge
   84466:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   8446a:	ea56 0207 	orrs.w	r2, r6, r7
   8446e:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   84472:	46e1      	mov	r9, ip
   84474:	f04f 0301 	mov.w	r3, #1
   84478:	f43f af3c 	beq.w	842f4 <_vfiprintf_r+0x224>
   8447c:	2b01      	cmp	r3, #1
   8447e:	f47f af40 	bne.w	84302 <_vfiprintf_r+0x232>
   84482:	2f00      	cmp	r7, #0
   84484:	bf08      	it	eq
   84486:	2e0a      	cmpeq	r6, #10
   84488:	f080 8332 	bcs.w	84af0 <_vfiprintf_r+0xa20>
   8448c:	ab2a      	add	r3, sp, #168	; 0xa8
   8448e:	3630      	adds	r6, #48	; 0x30
   84490:	f803 6d41 	strb.w	r6, [r3, #-65]!
   84494:	ebc3 090a 	rsb	r9, r3, sl
   84498:	9307      	str	r3, [sp, #28]
   8449a:	e74b      	b.n	84334 <_vfiprintf_r+0x264>
   8449c:	f048 0810 	orr.w	r8, r8, #16
   844a0:	f018 0320 	ands.w	r3, r8, #32
   844a4:	9503      	str	r5, [sp, #12]
   844a6:	46b4      	mov	ip, r6
   844a8:	d19c      	bne.n	843e4 <_vfiprintf_r+0x314>
   844aa:	f018 0210 	ands.w	r2, r8, #16
   844ae:	f040 82f7 	bne.w	84aa0 <_vfiprintf_r+0x9d0>
   844b2:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   844b6:	f000 82f3 	beq.w	84aa0 <_vfiprintf_r+0x9d0>
   844ba:	9904      	ldr	r1, [sp, #16]
   844bc:	4613      	mov	r3, r2
   844be:	460a      	mov	r2, r1
   844c0:	3204      	adds	r2, #4
   844c2:	880e      	ldrh	r6, [r1, #0]
   844c4:	2700      	movs	r7, #0
   844c6:	9204      	str	r2, [sp, #16]
   844c8:	e705      	b.n	842d6 <_vfiprintf_r+0x206>
   844ca:	f048 0810 	orr.w	r8, r8, #16
   844ce:	f018 0f20 	tst.w	r8, #32
   844d2:	9503      	str	r5, [sp, #12]
   844d4:	46b4      	mov	ip, r6
   844d6:	f47f aef4 	bne.w	842c2 <_vfiprintf_r+0x1f2>
   844da:	9a04      	ldr	r2, [sp, #16]
   844dc:	f018 0f10 	tst.w	r8, #16
   844e0:	4613      	mov	r3, r2
   844e2:	f040 82e4 	bne.w	84aae <_vfiprintf_r+0x9de>
   844e6:	f018 0f40 	tst.w	r8, #64	; 0x40
   844ea:	f000 82e0 	beq.w	84aae <_vfiprintf_r+0x9de>
   844ee:	8816      	ldrh	r6, [r2, #0]
   844f0:	3204      	adds	r2, #4
   844f2:	2700      	movs	r7, #0
   844f4:	2301      	movs	r3, #1
   844f6:	9204      	str	r2, [sp, #16]
   844f8:	e6ed      	b.n	842d6 <_vfiprintf_r+0x206>
   844fa:	4a62      	ldr	r2, [pc, #392]	; (84684 <_vfiprintf_r+0x5b4>)
   844fc:	f018 0f20 	tst.w	r8, #32
   84500:	9503      	str	r5, [sp, #12]
   84502:	46b4      	mov	ip, r6
   84504:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   84508:	9209      	str	r2, [sp, #36]	; 0x24
   8450a:	f000 808f 	beq.w	8462c <_vfiprintf_r+0x55c>
   8450e:	9a04      	ldr	r2, [sp, #16]
   84510:	3207      	adds	r2, #7
   84512:	f022 0207 	bic.w	r2, r2, #7
   84516:	f102 0108 	add.w	r1, r2, #8
   8451a:	9104      	str	r1, [sp, #16]
   8451c:	e9d2 6700 	ldrd	r6, r7, [r2]
   84520:	f018 0f01 	tst.w	r8, #1
   84524:	f000 828f 	beq.w	84a46 <_vfiprintf_r+0x976>
   84528:	ea56 0207 	orrs.w	r2, r6, r7
   8452c:	f000 828b 	beq.w	84a46 <_vfiprintf_r+0x976>
   84530:	2230      	movs	r2, #48	; 0x30
   84532:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   84536:	f048 0802 	orr.w	r8, r8, #2
   8453a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   8453e:	2302      	movs	r3, #2
   84540:	e6c9      	b.n	842d6 <_vfiprintf_r+0x206>
   84542:	9a04      	ldr	r2, [sp, #16]
   84544:	2601      	movs	r6, #1
   84546:	6813      	ldr	r3, [r2, #0]
   84548:	f04f 0100 	mov.w	r1, #0
   8454c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   84550:	4613      	mov	r3, r2
   84552:	46b1      	mov	r9, r6
   84554:	3304      	adds	r3, #4
   84556:	9304      	str	r3, [sp, #16]
   84558:	ab10      	add	r3, sp, #64	; 0x40
   8455a:	9503      	str	r5, [sp, #12]
   8455c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   84560:	9307      	str	r3, [sp, #28]
   84562:	f04f 0c00 	mov.w	ip, #0
   84566:	e6eb      	b.n	84340 <_vfiprintf_r+0x270>
   84568:	f018 0f20 	tst.w	r8, #32
   8456c:	9503      	str	r5, [sp, #12]
   8456e:	46b4      	mov	ip, r6
   84570:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   84574:	f47f af65 	bne.w	84442 <_vfiprintf_r+0x372>
   84578:	9a04      	ldr	r2, [sp, #16]
   8457a:	f018 0f10 	tst.w	r8, #16
   8457e:	4613      	mov	r3, r2
   84580:	f040 82a0 	bne.w	84ac4 <_vfiprintf_r+0x9f4>
   84584:	f018 0f40 	tst.w	r8, #64	; 0x40
   84588:	f000 829c 	beq.w	84ac4 <_vfiprintf_r+0x9f4>
   8458c:	f9b2 6000 	ldrsh.w	r6, [r2]
   84590:	3304      	adds	r3, #4
   84592:	17f7      	asrs	r7, r6, #31
   84594:	9304      	str	r3, [sp, #16]
   84596:	4632      	mov	r2, r6
   84598:	463b      	mov	r3, r7
   8459a:	e75c      	b.n	84456 <_vfiprintf_r+0x386>
   8459c:	9904      	ldr	r1, [sp, #16]
   8459e:	2378      	movs	r3, #120	; 0x78
   845a0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   845a4:	4b38      	ldr	r3, [pc, #224]	; (84688 <_vfiprintf_r+0x5b8>)
   845a6:	46b4      	mov	ip, r6
   845a8:	2230      	movs	r2, #48	; 0x30
   845aa:	680e      	ldr	r6, [r1, #0]
   845ac:	3104      	adds	r1, #4
   845ae:	9309      	str	r3, [sp, #36]	; 0x24
   845b0:	9503      	str	r5, [sp, #12]
   845b2:	f048 0802 	orr.w	r8, r8, #2
   845b6:	9104      	str	r1, [sp, #16]
   845b8:	2700      	movs	r7, #0
   845ba:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   845be:	2302      	movs	r3, #2
   845c0:	e689      	b.n	842d6 <_vfiprintf_r+0x206>
   845c2:	f048 0820 	orr.w	r8, r8, #32
   845c6:	f89b 3000 	ldrb.w	r3, [fp]
   845ca:	4658      	mov	r0, fp
   845cc:	e5e9      	b.n	841a2 <_vfiprintf_r+0xd2>
   845ce:	f04f 0100 	mov.w	r1, #0
   845d2:	9a04      	ldr	r2, [sp, #16]
   845d4:	9503      	str	r5, [sp, #12]
   845d6:	6813      	ldr	r3, [r2, #0]
   845d8:	46b4      	mov	ip, r6
   845da:	9307      	str	r3, [sp, #28]
   845dc:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   845e0:	1d15      	adds	r5, r2, #4
   845e2:	2b00      	cmp	r3, #0
   845e4:	f000 834e 	beq.w	84c84 <_vfiprintf_r+0xbb4>
   845e8:	2e00      	cmp	r6, #0
   845ea:	f2c0 8329 	blt.w	84c40 <_vfiprintf_r+0xb70>
   845ee:	9e07      	ldr	r6, [sp, #28]
   845f0:	4662      	mov	r2, ip
   845f2:	4630      	mov	r0, r6
   845f4:	2100      	movs	r1, #0
   845f6:	f8cd c010 	str.w	ip, [sp, #16]
   845fa:	f001 fbc9 	bl	85d90 <memchr>
   845fe:	f8dd c010 	ldr.w	ip, [sp, #16]
   84602:	2800      	cmp	r0, #0
   84604:	f000 834e 	beq.w	84ca4 <_vfiprintf_r+0xbd4>
   84608:	9504      	str	r5, [sp, #16]
   8460a:	ebc6 0900 	rsb	r9, r6, r0
   8460e:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   84612:	f04f 0c00 	mov.w	ip, #0
   84616:	e68d      	b.n	84334 <_vfiprintf_r+0x264>
   84618:	4a1b      	ldr	r2, [pc, #108]	; (84688 <_vfiprintf_r+0x5b8>)
   8461a:	f018 0f20 	tst.w	r8, #32
   8461e:	9503      	str	r5, [sp, #12]
   84620:	46b4      	mov	ip, r6
   84622:	9209      	str	r2, [sp, #36]	; 0x24
   84624:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   84628:	f47f af71 	bne.w	8450e <_vfiprintf_r+0x43e>
   8462c:	9904      	ldr	r1, [sp, #16]
   8462e:	f018 0f10 	tst.w	r8, #16
   84632:	460a      	mov	r2, r1
   84634:	f040 8241 	bne.w	84aba <_vfiprintf_r+0x9ea>
   84638:	f018 0f40 	tst.w	r8, #64	; 0x40
   8463c:	f000 823d 	beq.w	84aba <_vfiprintf_r+0x9ea>
   84640:	3204      	adds	r2, #4
   84642:	880e      	ldrh	r6, [r1, #0]
   84644:	2700      	movs	r7, #0
   84646:	9204      	str	r2, [sp, #16]
   84648:	e76a      	b.n	84520 <_vfiprintf_r+0x450>
   8464a:	f89b 3000 	ldrb.w	r3, [fp]
   8464e:	2b6c      	cmp	r3, #108	; 0x6c
   84650:	f000 82e9 	beq.w	84c26 <_vfiprintf_r+0xb56>
   84654:	f048 0810 	orr.w	r8, r8, #16
   84658:	4658      	mov	r0, fp
   8465a:	e5a2      	b.n	841a2 <_vfiprintf_r+0xd2>
   8465c:	9a04      	ldr	r2, [sp, #16]
   8465e:	4613      	mov	r3, r2
   84660:	6815      	ldr	r5, [r2, #0]
   84662:	3304      	adds	r3, #4
   84664:	2d00      	cmp	r5, #0
   84666:	f2c0 82e6 	blt.w	84c36 <_vfiprintf_r+0xb66>
   8466a:	9304      	str	r3, [sp, #16]
   8466c:	f89b 3000 	ldrb.w	r3, [fp]
   84670:	4658      	mov	r0, fp
   84672:	e596      	b.n	841a2 <_vfiprintf_r+0xd2>
   84674:	f89b 3000 	ldrb.w	r3, [fp]
   84678:	4658      	mov	r0, fp
   8467a:	212b      	movs	r1, #43	; 0x2b
   8467c:	e591      	b.n	841a2 <_vfiprintf_r+0xd2>
   8467e:	bf00      	nop
   84680:	00086e18 	.word	0x00086e18
   84684:	00086de8 	.word	0x00086de8
   84688:	00086dfc 	.word	0x00086dfc
   8468c:	f89b 3000 	ldrb.w	r3, [fp]
   84690:	f10b 0001 	add.w	r0, fp, #1
   84694:	2b2a      	cmp	r3, #42	; 0x2a
   84696:	f000 830f 	beq.w	84cb8 <_vfiprintf_r+0xbe8>
   8469a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8469e:	2a09      	cmp	r2, #9
   846a0:	4683      	mov	fp, r0
   846a2:	f04f 0600 	mov.w	r6, #0
   846a6:	f63f ad7e 	bhi.w	841a6 <_vfiprintf_r+0xd6>
   846aa:	f81b 3b01 	ldrb.w	r3, [fp], #1
   846ae:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   846b2:	eb02 0646 	add.w	r6, r2, r6, lsl #1
   846b6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   846ba:	2a09      	cmp	r2, #9
   846bc:	d9f5      	bls.n	846aa <_vfiprintf_r+0x5da>
   846be:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
   846c2:	e570      	b.n	841a6 <_vfiprintf_r+0xd6>
   846c4:	f018 0f20 	tst.w	r8, #32
   846c8:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   846cc:	f000 8283 	beq.w	84bd6 <_vfiprintf_r+0xb06>
   846d0:	9a04      	ldr	r2, [sp, #16]
   846d2:	4613      	mov	r3, r2
   846d4:	3304      	adds	r3, #4
   846d6:	9304      	str	r3, [sp, #16]
   846d8:	9b02      	ldr	r3, [sp, #8]
   846da:	6811      	ldr	r1, [r2, #0]
   846dc:	17df      	asrs	r7, r3, #31
   846de:	461a      	mov	r2, r3
   846e0:	463b      	mov	r3, r7
   846e2:	e9c1 2300 	strd	r2, r3, [r1]
   846e6:	e525      	b.n	84134 <_vfiprintf_r+0x64>
   846e8:	4658      	mov	r0, fp
   846ea:	f89b 3000 	ldrb.w	r3, [fp]
   846ee:	2900      	cmp	r1, #0
   846f0:	f47f ad57 	bne.w	841a2 <_vfiprintf_r+0xd2>
   846f4:	2120      	movs	r1, #32
   846f6:	e554      	b.n	841a2 <_vfiprintf_r+0xd2>
   846f8:	f048 0801 	orr.w	r8, r8, #1
   846fc:	4658      	mov	r0, fp
   846fe:	f89b 3000 	ldrb.w	r3, [fp]
   84702:	e54e      	b.n	841a2 <_vfiprintf_r+0xd2>
   84704:	9503      	str	r5, [sp, #12]
   84706:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   8470a:	2b00      	cmp	r3, #0
   8470c:	f000 809c 	beq.w	84848 <_vfiprintf_r+0x778>
   84710:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   84714:	f04f 0300 	mov.w	r3, #0
   84718:	2601      	movs	r6, #1
   8471a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   8471e:	ab10      	add	r3, sp, #64	; 0x40
   84720:	46b1      	mov	r9, r6
   84722:	9307      	str	r3, [sp, #28]
   84724:	e71d      	b.n	84562 <_vfiprintf_r+0x492>
   84726:	9801      	ldr	r0, [sp, #4]
   84728:	9900      	ldr	r1, [sp, #0]
   8472a:	aa0d      	add	r2, sp, #52	; 0x34
   8472c:	9308      	str	r3, [sp, #32]
   8472e:	f7ff fc93 	bl	84058 <__sprint_r.part.0>
   84732:	2800      	cmp	r0, #0
   84734:	f040 808f 	bne.w	84856 <_vfiprintf_r+0x786>
   84738:	990e      	ldr	r1, [sp, #56]	; 0x38
   8473a:	46d4      	mov	ip, sl
   8473c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8473e:	f101 0e01 	add.w	lr, r1, #1
   84742:	9b08      	ldr	r3, [sp, #32]
   84744:	e61d      	b.n	84382 <_vfiprintf_r+0x2b2>
   84746:	990e      	ldr	r1, [sp, #56]	; 0x38
   84748:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8474a:	1c48      	adds	r0, r1, #1
   8474c:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   84750:	b16b      	cbz	r3, 8476e <_vfiprintf_r+0x69e>
   84752:	3201      	adds	r2, #1
   84754:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
   84758:	2101      	movs	r1, #1
   8475a:	2807      	cmp	r0, #7
   8475c:	920f      	str	r2, [sp, #60]	; 0x3c
   8475e:	900e      	str	r0, [sp, #56]	; 0x38
   84760:	6023      	str	r3, [r4, #0]
   84762:	6061      	str	r1, [r4, #4]
   84764:	f300 8134 	bgt.w	849d0 <_vfiprintf_r+0x900>
   84768:	4601      	mov	r1, r0
   8476a:	3408      	adds	r4, #8
   8476c:	3001      	adds	r0, #1
   8476e:	9b05      	ldr	r3, [sp, #20]
   84770:	b163      	cbz	r3, 8478c <_vfiprintf_r+0x6bc>
   84772:	3202      	adds	r2, #2
   84774:	a90c      	add	r1, sp, #48	; 0x30
   84776:	2302      	movs	r3, #2
   84778:	2807      	cmp	r0, #7
   8477a:	920f      	str	r2, [sp, #60]	; 0x3c
   8477c:	900e      	str	r0, [sp, #56]	; 0x38
   8477e:	e884 000a 	stmia.w	r4, {r1, r3}
   84782:	f300 8134 	bgt.w	849ee <_vfiprintf_r+0x91e>
   84786:	4601      	mov	r1, r0
   84788:	3408      	adds	r4, #8
   8478a:	3001      	adds	r0, #1
   8478c:	9b06      	ldr	r3, [sp, #24]
   8478e:	2b80      	cmp	r3, #128	; 0x80
   84790:	f000 80d4 	beq.w	8493c <_vfiprintf_r+0x86c>
   84794:	ebc9 070c 	rsb	r7, r9, ip
   84798:	2f00      	cmp	r7, #0
   8479a:	dd2b      	ble.n	847f4 <_vfiprintf_r+0x724>
   8479c:	2f10      	cmp	r7, #16
   8479e:	4dab      	ldr	r5, [pc, #684]	; (84a4c <_vfiprintf_r+0x97c>)
   847a0:	dd1f      	ble.n	847e2 <_vfiprintf_r+0x712>
   847a2:	46a6      	mov	lr, r4
   847a4:	2310      	movs	r3, #16
   847a6:	9c01      	ldr	r4, [sp, #4]
   847a8:	e007      	b.n	847ba <_vfiprintf_r+0x6ea>
   847aa:	f101 0c02 	add.w	ip, r1, #2
   847ae:	4601      	mov	r1, r0
   847b0:	f10e 0e08 	add.w	lr, lr, #8
   847b4:	3f10      	subs	r7, #16
   847b6:	2f10      	cmp	r7, #16
   847b8:	dd11      	ble.n	847de <_vfiprintf_r+0x70e>
   847ba:	1c48      	adds	r0, r1, #1
   847bc:	3210      	adds	r2, #16
   847be:	2807      	cmp	r0, #7
   847c0:	920f      	str	r2, [sp, #60]	; 0x3c
   847c2:	f8ce 5000 	str.w	r5, [lr]
   847c6:	f8ce 3004 	str.w	r3, [lr, #4]
   847ca:	900e      	str	r0, [sp, #56]	; 0x38
   847cc:	dded      	ble.n	847aa <_vfiprintf_r+0x6da>
   847ce:	bb6a      	cbnz	r2, 8482c <_vfiprintf_r+0x75c>
   847d0:	3f10      	subs	r7, #16
   847d2:	2f10      	cmp	r7, #16
   847d4:	f04f 0c01 	mov.w	ip, #1
   847d8:	4611      	mov	r1, r2
   847da:	46d6      	mov	lr, sl
   847dc:	dced      	bgt.n	847ba <_vfiprintf_r+0x6ea>
   847de:	4674      	mov	r4, lr
   847e0:	4660      	mov	r0, ip
   847e2:	443a      	add	r2, r7
   847e4:	2807      	cmp	r0, #7
   847e6:	920f      	str	r2, [sp, #60]	; 0x3c
   847e8:	e884 00a0 	stmia.w	r4, {r5, r7}
   847ec:	900e      	str	r0, [sp, #56]	; 0x38
   847ee:	dc3b      	bgt.n	84868 <_vfiprintf_r+0x798>
   847f0:	3408      	adds	r4, #8
   847f2:	3001      	adds	r0, #1
   847f4:	eb02 0309 	add.w	r3, r2, r9
   847f8:	9a07      	ldr	r2, [sp, #28]
   847fa:	2807      	cmp	r0, #7
   847fc:	930f      	str	r3, [sp, #60]	; 0x3c
   847fe:	e884 0204 	stmia.w	r4, {r2, r9}
   84802:	900e      	str	r0, [sp, #56]	; 0x38
   84804:	dd3d      	ble.n	84882 <_vfiprintf_r+0x7b2>
   84806:	2b00      	cmp	r3, #0
   84808:	f040 813f 	bne.w	84a8a <_vfiprintf_r+0x9ba>
   8480c:	f018 0f04 	tst.w	r8, #4
   84810:	930e      	str	r3, [sp, #56]	; 0x38
   84812:	f040 8130 	bne.w	84a76 <_vfiprintf_r+0x9a6>
   84816:	9b02      	ldr	r3, [sp, #8]
   84818:	9a03      	ldr	r2, [sp, #12]
   8481a:	4296      	cmp	r6, r2
   8481c:	bfac      	ite	ge
   8481e:	199b      	addge	r3, r3, r6
   84820:	189b      	addlt	r3, r3, r2
   84822:	9302      	str	r3, [sp, #8]
   84824:	2300      	movs	r3, #0
   84826:	930e      	str	r3, [sp, #56]	; 0x38
   84828:	4654      	mov	r4, sl
   8482a:	e483      	b.n	84134 <_vfiprintf_r+0x64>
   8482c:	4620      	mov	r0, r4
   8482e:	9900      	ldr	r1, [sp, #0]
   84830:	aa0d      	add	r2, sp, #52	; 0x34
   84832:	9305      	str	r3, [sp, #20]
   84834:	f7ff fc10 	bl	84058 <__sprint_r.part.0>
   84838:	b968      	cbnz	r0, 84856 <_vfiprintf_r+0x786>
   8483a:	990e      	ldr	r1, [sp, #56]	; 0x38
   8483c:	46d6      	mov	lr, sl
   8483e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84840:	f101 0c01 	add.w	ip, r1, #1
   84844:	9b05      	ldr	r3, [sp, #20]
   84846:	e7b5      	b.n	847b4 <_vfiprintf_r+0x6e4>
   84848:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8484a:	b123      	cbz	r3, 84856 <_vfiprintf_r+0x786>
   8484c:	9801      	ldr	r0, [sp, #4]
   8484e:	9900      	ldr	r1, [sp, #0]
   84850:	aa0d      	add	r2, sp, #52	; 0x34
   84852:	f7ff fc01 	bl	84058 <__sprint_r.part.0>
   84856:	9b00      	ldr	r3, [sp, #0]
   84858:	899b      	ldrh	r3, [r3, #12]
   8485a:	065b      	lsls	r3, r3, #25
   8485c:	f53f ad23 	bmi.w	842a6 <_vfiprintf_r+0x1d6>
   84860:	9802      	ldr	r0, [sp, #8]
   84862:	b02b      	add	sp, #172	; 0xac
   84864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84868:	2a00      	cmp	r2, #0
   8486a:	f040 8190 	bne.w	84b8e <_vfiprintf_r+0xabe>
   8486e:	464b      	mov	r3, r9
   84870:	4654      	mov	r4, sl
   84872:	9907      	ldr	r1, [sp, #28]
   84874:	2201      	movs	r2, #1
   84876:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
   8487a:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   8487e:	911a      	str	r1, [sp, #104]	; 0x68
   84880:	920e      	str	r2, [sp, #56]	; 0x38
   84882:	f104 0208 	add.w	r2, r4, #8
   84886:	f018 0f04 	tst.w	r8, #4
   8488a:	d039      	beq.n	84900 <_vfiprintf_r+0x830>
   8488c:	9903      	ldr	r1, [sp, #12]
   8488e:	1b8d      	subs	r5, r1, r6
   84890:	2d00      	cmp	r5, #0
   84892:	dd35      	ble.n	84900 <_vfiprintf_r+0x830>
   84894:	2d10      	cmp	r5, #16
   84896:	f340 8200 	ble.w	84c9a <_vfiprintf_r+0xbca>
   8489a:	980e      	ldr	r0, [sp, #56]	; 0x38
   8489c:	4f6c      	ldr	r7, [pc, #432]	; (84a50 <_vfiprintf_r+0x980>)
   8489e:	2410      	movs	r4, #16
   848a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
   848a4:	f8dd 9000 	ldr.w	r9, [sp]
   848a8:	e006      	b.n	848b8 <_vfiprintf_r+0x7e8>
   848aa:	f100 0e02 	add.w	lr, r0, #2
   848ae:	4608      	mov	r0, r1
   848b0:	3208      	adds	r2, #8
   848b2:	3d10      	subs	r5, #16
   848b4:	2d10      	cmp	r5, #16
   848b6:	dd10      	ble.n	848da <_vfiprintf_r+0x80a>
   848b8:	1c41      	adds	r1, r0, #1
   848ba:	3310      	adds	r3, #16
   848bc:	2907      	cmp	r1, #7
   848be:	930f      	str	r3, [sp, #60]	; 0x3c
   848c0:	6017      	str	r7, [r2, #0]
   848c2:	6054      	str	r4, [r2, #4]
   848c4:	910e      	str	r1, [sp, #56]	; 0x38
   848c6:	ddf0      	ble.n	848aa <_vfiprintf_r+0x7da>
   848c8:	2b00      	cmp	r3, #0
   848ca:	d12a      	bne.n	84922 <_vfiprintf_r+0x852>
   848cc:	3d10      	subs	r5, #16
   848ce:	2d10      	cmp	r5, #16
   848d0:	f04f 0e01 	mov.w	lr, #1
   848d4:	4618      	mov	r0, r3
   848d6:	4652      	mov	r2, sl
   848d8:	dcee      	bgt.n	848b8 <_vfiprintf_r+0x7e8>
   848da:	442b      	add	r3, r5
   848dc:	f1be 0f07 	cmp.w	lr, #7
   848e0:	930f      	str	r3, [sp, #60]	; 0x3c
   848e2:	6017      	str	r7, [r2, #0]
   848e4:	6055      	str	r5, [r2, #4]
   848e6:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   848ea:	dd09      	ble.n	84900 <_vfiprintf_r+0x830>
   848ec:	2b00      	cmp	r3, #0
   848ee:	d092      	beq.n	84816 <_vfiprintf_r+0x746>
   848f0:	9801      	ldr	r0, [sp, #4]
   848f2:	9900      	ldr	r1, [sp, #0]
   848f4:	aa0d      	add	r2, sp, #52	; 0x34
   848f6:	f7ff fbaf 	bl	84058 <__sprint_r.part.0>
   848fa:	2800      	cmp	r0, #0
   848fc:	d1ab      	bne.n	84856 <_vfiprintf_r+0x786>
   848fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84900:	9a02      	ldr	r2, [sp, #8]
   84902:	9903      	ldr	r1, [sp, #12]
   84904:	428e      	cmp	r6, r1
   84906:	bfac      	ite	ge
   84908:	1992      	addge	r2, r2, r6
   8490a:	1852      	addlt	r2, r2, r1
   8490c:	9202      	str	r2, [sp, #8]
   8490e:	2b00      	cmp	r3, #0
   84910:	d088      	beq.n	84824 <_vfiprintf_r+0x754>
   84912:	9801      	ldr	r0, [sp, #4]
   84914:	9900      	ldr	r1, [sp, #0]
   84916:	aa0d      	add	r2, sp, #52	; 0x34
   84918:	f7ff fb9e 	bl	84058 <__sprint_r.part.0>
   8491c:	2800      	cmp	r0, #0
   8491e:	d081      	beq.n	84824 <_vfiprintf_r+0x754>
   84920:	e799      	b.n	84856 <_vfiprintf_r+0x786>
   84922:	4640      	mov	r0, r8
   84924:	4649      	mov	r1, r9
   84926:	aa0d      	add	r2, sp, #52	; 0x34
   84928:	f7ff fb96 	bl	84058 <__sprint_r.part.0>
   8492c:	2800      	cmp	r0, #0
   8492e:	d192      	bne.n	84856 <_vfiprintf_r+0x786>
   84930:	980e      	ldr	r0, [sp, #56]	; 0x38
   84932:	4652      	mov	r2, sl
   84934:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84936:	f100 0e01 	add.w	lr, r0, #1
   8493a:	e7ba      	b.n	848b2 <_vfiprintf_r+0x7e2>
   8493c:	9b03      	ldr	r3, [sp, #12]
   8493e:	1b9f      	subs	r7, r3, r6
   84940:	2f00      	cmp	r7, #0
   84942:	f77f af27 	ble.w	84794 <_vfiprintf_r+0x6c4>
   84946:	2f10      	cmp	r7, #16
   84948:	f340 81b3 	ble.w	84cb2 <_vfiprintf_r+0xbe2>
   8494c:	4620      	mov	r0, r4
   8494e:	4d3f      	ldr	r5, [pc, #252]	; (84a4c <_vfiprintf_r+0x97c>)
   84950:	4664      	mov	r4, ip
   84952:	2310      	movs	r3, #16
   84954:	4684      	mov	ip, r0
   84956:	e007      	b.n	84968 <_vfiprintf_r+0x898>
   84958:	f101 0e02 	add.w	lr, r1, #2
   8495c:	4601      	mov	r1, r0
   8495e:	f10c 0c08 	add.w	ip, ip, #8
   84962:	3f10      	subs	r7, #16
   84964:	2f10      	cmp	r7, #16
   84966:	dd11      	ble.n	8498c <_vfiprintf_r+0x8bc>
   84968:	1c48      	adds	r0, r1, #1
   8496a:	3210      	adds	r2, #16
   8496c:	2807      	cmp	r0, #7
   8496e:	920f      	str	r2, [sp, #60]	; 0x3c
   84970:	f8cc 5000 	str.w	r5, [ip]
   84974:	f8cc 3004 	str.w	r3, [ip, #4]
   84978:	900e      	str	r0, [sp, #56]	; 0x38
   8497a:	dded      	ble.n	84958 <_vfiprintf_r+0x888>
   8497c:	b9c2      	cbnz	r2, 849b0 <_vfiprintf_r+0x8e0>
   8497e:	3f10      	subs	r7, #16
   84980:	2f10      	cmp	r7, #16
   84982:	f04f 0e01 	mov.w	lr, #1
   84986:	4611      	mov	r1, r2
   84988:	46d4      	mov	ip, sl
   8498a:	dced      	bgt.n	84968 <_vfiprintf_r+0x898>
   8498c:	4663      	mov	r3, ip
   8498e:	46a4      	mov	ip, r4
   84990:	461c      	mov	r4, r3
   84992:	443a      	add	r2, r7
   84994:	f1be 0f07 	cmp.w	lr, #7
   84998:	920f      	str	r2, [sp, #60]	; 0x3c
   8499a:	e884 00a0 	stmia.w	r4, {r5, r7}
   8499e:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   849a2:	f300 80ee 	bgt.w	84b82 <_vfiprintf_r+0xab2>
   849a6:	3408      	adds	r4, #8
   849a8:	f10e 0001 	add.w	r0, lr, #1
   849ac:	4671      	mov	r1, lr
   849ae:	e6f1      	b.n	84794 <_vfiprintf_r+0x6c4>
   849b0:	9801      	ldr	r0, [sp, #4]
   849b2:	9900      	ldr	r1, [sp, #0]
   849b4:	aa0d      	add	r2, sp, #52	; 0x34
   849b6:	9305      	str	r3, [sp, #20]
   849b8:	f7ff fb4e 	bl	84058 <__sprint_r.part.0>
   849bc:	2800      	cmp	r0, #0
   849be:	f47f af4a 	bne.w	84856 <_vfiprintf_r+0x786>
   849c2:	990e      	ldr	r1, [sp, #56]	; 0x38
   849c4:	46d4      	mov	ip, sl
   849c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   849c8:	f101 0e01 	add.w	lr, r1, #1
   849cc:	9b05      	ldr	r3, [sp, #20]
   849ce:	e7c8      	b.n	84962 <_vfiprintf_r+0x892>
   849d0:	2a00      	cmp	r2, #0
   849d2:	f040 80c5 	bne.w	84b60 <_vfiprintf_r+0xa90>
   849d6:	9b05      	ldr	r3, [sp, #20]
   849d8:	2b00      	cmp	r3, #0
   849da:	f000 8085 	beq.w	84ae8 <_vfiprintf_r+0xa18>
   849de:	aa0c      	add	r2, sp, #48	; 0x30
   849e0:	2302      	movs	r3, #2
   849e2:	921a      	str	r2, [sp, #104]	; 0x68
   849e4:	4608      	mov	r0, r1
   849e6:	931b      	str	r3, [sp, #108]	; 0x6c
   849e8:	461a      	mov	r2, r3
   849ea:	4654      	mov	r4, sl
   849ec:	e6cb      	b.n	84786 <_vfiprintf_r+0x6b6>
   849ee:	2a00      	cmp	r2, #0
   849f0:	f040 80a5 	bne.w	84b3e <_vfiprintf_r+0xa6e>
   849f4:	2001      	movs	r0, #1
   849f6:	4611      	mov	r1, r2
   849f8:	4654      	mov	r4, sl
   849fa:	e6c7      	b.n	8478c <_vfiprintf_r+0x6bc>
   849fc:	bb03      	cbnz	r3, 84a40 <_vfiprintf_r+0x970>
   849fe:	f018 0f01 	tst.w	r8, #1
   84a02:	d01d      	beq.n	84a40 <_vfiprintf_r+0x970>
   84a04:	ab2a      	add	r3, sp, #168	; 0xa8
   84a06:	2230      	movs	r2, #48	; 0x30
   84a08:	f803 2d41 	strb.w	r2, [r3, #-65]!
   84a0c:	ebc3 090a 	rsb	r9, r3, sl
   84a10:	9307      	str	r3, [sp, #28]
   84a12:	e48f      	b.n	84334 <_vfiprintf_r+0x264>
   84a14:	46d1      	mov	r9, sl
   84a16:	9809      	ldr	r0, [sp, #36]	; 0x24
   84a18:	0933      	lsrs	r3, r6, #4
   84a1a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   84a1e:	0939      	lsrs	r1, r7, #4
   84a20:	f006 020f 	and.w	r2, r6, #15
   84a24:	460f      	mov	r7, r1
   84a26:	461e      	mov	r6, r3
   84a28:	5c83      	ldrb	r3, [r0, r2]
   84a2a:	f809 3d01 	strb.w	r3, [r9, #-1]!
   84a2e:	ea56 0307 	orrs.w	r3, r6, r7
   84a32:	d1f1      	bne.n	84a18 <_vfiprintf_r+0x948>
   84a34:	464b      	mov	r3, r9
   84a36:	f8cd 901c 	str.w	r9, [sp, #28]
   84a3a:	ebc3 090a 	rsb	r9, r3, sl
   84a3e:	e479      	b.n	84334 <_vfiprintf_r+0x264>
   84a40:	f8cd a01c 	str.w	sl, [sp, #28]
   84a44:	e476      	b.n	84334 <_vfiprintf_r+0x264>
   84a46:	2302      	movs	r3, #2
   84a48:	e445      	b.n	842d6 <_vfiprintf_r+0x206>
   84a4a:	bf00      	nop
   84a4c:	00086dd8 	.word	0x00086dd8
   84a50:	00086e18 	.word	0x00086e18
   84a54:	2a00      	cmp	r2, #0
   84a56:	f040 80d5 	bne.w	84c04 <_vfiprintf_r+0xb34>
   84a5a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   84a5e:	2b00      	cmp	r3, #0
   84a60:	f000 80ac 	beq.w	84bbc <_vfiprintf_r+0xaec>
   84a64:	2301      	movs	r3, #1
   84a66:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   84a6a:	4618      	mov	r0, r3
   84a6c:	931b      	str	r3, [sp, #108]	; 0x6c
   84a6e:	461a      	mov	r2, r3
   84a70:	911a      	str	r1, [sp, #104]	; 0x68
   84a72:	4654      	mov	r4, sl
   84a74:	e678      	b.n	84768 <_vfiprintf_r+0x698>
   84a76:	9a03      	ldr	r2, [sp, #12]
   84a78:	1b95      	subs	r5, r2, r6
   84a7a:	2d00      	cmp	r5, #0
   84a7c:	4652      	mov	r2, sl
   84a7e:	f73f af09 	bgt.w	84894 <_vfiprintf_r+0x7c4>
   84a82:	e6c8      	b.n	84816 <_vfiprintf_r+0x746>
   84a84:	465d      	mov	r5, fp
   84a86:	f7ff bb7c 	b.w	84182 <_vfiprintf_r+0xb2>
   84a8a:	9801      	ldr	r0, [sp, #4]
   84a8c:	9900      	ldr	r1, [sp, #0]
   84a8e:	aa0d      	add	r2, sp, #52	; 0x34
   84a90:	f7ff fae2 	bl	84058 <__sprint_r.part.0>
   84a94:	2800      	cmp	r0, #0
   84a96:	f47f aede 	bne.w	84856 <_vfiprintf_r+0x786>
   84a9a:	4652      	mov	r2, sl
   84a9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84a9e:	e6f2      	b.n	84886 <_vfiprintf_r+0x7b6>
   84aa0:	9904      	ldr	r1, [sp, #16]
   84aa2:	2700      	movs	r7, #0
   84aa4:	460a      	mov	r2, r1
   84aa6:	3204      	adds	r2, #4
   84aa8:	680e      	ldr	r6, [r1, #0]
   84aaa:	9204      	str	r2, [sp, #16]
   84aac:	e413      	b.n	842d6 <_vfiprintf_r+0x206>
   84aae:	3204      	adds	r2, #4
   84ab0:	681e      	ldr	r6, [r3, #0]
   84ab2:	2700      	movs	r7, #0
   84ab4:	2301      	movs	r3, #1
   84ab6:	9204      	str	r2, [sp, #16]
   84ab8:	e40d      	b.n	842d6 <_vfiprintf_r+0x206>
   84aba:	6816      	ldr	r6, [r2, #0]
   84abc:	3204      	adds	r2, #4
   84abe:	9204      	str	r2, [sp, #16]
   84ac0:	2700      	movs	r7, #0
   84ac2:	e52d      	b.n	84520 <_vfiprintf_r+0x450>
   84ac4:	681e      	ldr	r6, [r3, #0]
   84ac6:	3304      	adds	r3, #4
   84ac8:	17f7      	asrs	r7, r6, #31
   84aca:	9304      	str	r3, [sp, #16]
   84acc:	4632      	mov	r2, r6
   84ace:	463b      	mov	r3, r7
   84ad0:	e4c1      	b.n	84456 <_vfiprintf_r+0x386>
   84ad2:	9801      	ldr	r0, [sp, #4]
   84ad4:	9900      	ldr	r1, [sp, #0]
   84ad6:	aa0d      	add	r2, sp, #52	; 0x34
   84ad8:	f7ff fabe 	bl	84058 <__sprint_r.part.0>
   84adc:	2800      	cmp	r0, #0
   84ade:	f47f aeba 	bne.w	84856 <_vfiprintf_r+0x786>
   84ae2:	4654      	mov	r4, sl
   84ae4:	f7ff bbc0 	b.w	84268 <_vfiprintf_r+0x198>
   84ae8:	4608      	mov	r0, r1
   84aea:	4654      	mov	r4, sl
   84aec:	4611      	mov	r1, r2
   84aee:	e64d      	b.n	8478c <_vfiprintf_r+0x6bc>
   84af0:	46d1      	mov	r9, sl
   84af2:	f8cd c014 	str.w	ip, [sp, #20]
   84af6:	4630      	mov	r0, r6
   84af8:	4639      	mov	r1, r7
   84afa:	220a      	movs	r2, #10
   84afc:	2300      	movs	r3, #0
   84afe:	f001 fe47 	bl	86790 <__aeabi_uldivmod>
   84b02:	3230      	adds	r2, #48	; 0x30
   84b04:	4630      	mov	r0, r6
   84b06:	4639      	mov	r1, r7
   84b08:	f809 2d01 	strb.w	r2, [r9, #-1]!
   84b0c:	2300      	movs	r3, #0
   84b0e:	220a      	movs	r2, #10
   84b10:	f001 fe3e 	bl	86790 <__aeabi_uldivmod>
   84b14:	4606      	mov	r6, r0
   84b16:	460f      	mov	r7, r1
   84b18:	ea56 0307 	orrs.w	r3, r6, r7
   84b1c:	d1eb      	bne.n	84af6 <_vfiprintf_r+0xa26>
   84b1e:	f8dd c014 	ldr.w	ip, [sp, #20]
   84b22:	e787      	b.n	84a34 <_vfiprintf_r+0x964>
   84b24:	2b30      	cmp	r3, #48	; 0x30
   84b26:	9b07      	ldr	r3, [sp, #28]
   84b28:	d087      	beq.n	84a3a <_vfiprintf_r+0x96a>
   84b2a:	3b01      	subs	r3, #1
   84b2c:	461a      	mov	r2, r3
   84b2e:	9307      	str	r3, [sp, #28]
   84b30:	2330      	movs	r3, #48	; 0x30
   84b32:	ebc2 090a 	rsb	r9, r2, sl
   84b36:	f801 3c01 	strb.w	r3, [r1, #-1]
   84b3a:	f7ff bbfb 	b.w	84334 <_vfiprintf_r+0x264>
   84b3e:	9801      	ldr	r0, [sp, #4]
   84b40:	9900      	ldr	r1, [sp, #0]
   84b42:	aa0d      	add	r2, sp, #52	; 0x34
   84b44:	f8cd c014 	str.w	ip, [sp, #20]
   84b48:	f7ff fa86 	bl	84058 <__sprint_r.part.0>
   84b4c:	2800      	cmp	r0, #0
   84b4e:	f47f ae82 	bne.w	84856 <_vfiprintf_r+0x786>
   84b52:	990e      	ldr	r1, [sp, #56]	; 0x38
   84b54:	4654      	mov	r4, sl
   84b56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84b58:	1c48      	adds	r0, r1, #1
   84b5a:	f8dd c014 	ldr.w	ip, [sp, #20]
   84b5e:	e615      	b.n	8478c <_vfiprintf_r+0x6bc>
   84b60:	9801      	ldr	r0, [sp, #4]
   84b62:	9900      	ldr	r1, [sp, #0]
   84b64:	aa0d      	add	r2, sp, #52	; 0x34
   84b66:	f8cd c020 	str.w	ip, [sp, #32]
   84b6a:	f7ff fa75 	bl	84058 <__sprint_r.part.0>
   84b6e:	2800      	cmp	r0, #0
   84b70:	f47f ae71 	bne.w	84856 <_vfiprintf_r+0x786>
   84b74:	990e      	ldr	r1, [sp, #56]	; 0x38
   84b76:	4654      	mov	r4, sl
   84b78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84b7a:	1c48      	adds	r0, r1, #1
   84b7c:	f8dd c020 	ldr.w	ip, [sp, #32]
   84b80:	e5f5      	b.n	8476e <_vfiprintf_r+0x69e>
   84b82:	2a00      	cmp	r2, #0
   84b84:	d167      	bne.n	84c56 <_vfiprintf_r+0xb86>
   84b86:	2001      	movs	r0, #1
   84b88:	4611      	mov	r1, r2
   84b8a:	4654      	mov	r4, sl
   84b8c:	e602      	b.n	84794 <_vfiprintf_r+0x6c4>
   84b8e:	9801      	ldr	r0, [sp, #4]
   84b90:	9900      	ldr	r1, [sp, #0]
   84b92:	aa0d      	add	r2, sp, #52	; 0x34
   84b94:	f7ff fa60 	bl	84058 <__sprint_r.part.0>
   84b98:	2800      	cmp	r0, #0
   84b9a:	f47f ae5c 	bne.w	84856 <_vfiprintf_r+0x786>
   84b9e:	980e      	ldr	r0, [sp, #56]	; 0x38
   84ba0:	4654      	mov	r4, sl
   84ba2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84ba4:	3001      	adds	r0, #1
   84ba6:	e625      	b.n	847f4 <_vfiprintf_r+0x724>
   84ba8:	252d      	movs	r5, #45	; 0x2d
   84baa:	4276      	negs	r6, r6
   84bac:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   84bb0:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
   84bb4:	46e1      	mov	r9, ip
   84bb6:	2301      	movs	r3, #1
   84bb8:	f7ff bb93 	b.w	842e2 <_vfiprintf_r+0x212>
   84bbc:	9b05      	ldr	r3, [sp, #20]
   84bbe:	4611      	mov	r1, r2
   84bc0:	2001      	movs	r0, #1
   84bc2:	4654      	mov	r4, sl
   84bc4:	2b00      	cmp	r3, #0
   84bc6:	f43f ade5 	beq.w	84794 <_vfiprintf_r+0x6c4>
   84bca:	aa0c      	add	r2, sp, #48	; 0x30
   84bcc:	2302      	movs	r3, #2
   84bce:	e88a 000c 	stmia.w	sl, {r2, r3}
   84bd2:	461a      	mov	r2, r3
   84bd4:	e5d7      	b.n	84786 <_vfiprintf_r+0x6b6>
   84bd6:	f018 0f10 	tst.w	r8, #16
   84bda:	d10b      	bne.n	84bf4 <_vfiprintf_r+0xb24>
   84bdc:	f018 0f40 	tst.w	r8, #64	; 0x40
   84be0:	d008      	beq.n	84bf4 <_vfiprintf_r+0xb24>
   84be2:	9a04      	ldr	r2, [sp, #16]
   84be4:	6813      	ldr	r3, [r2, #0]
   84be6:	3204      	adds	r2, #4
   84be8:	9204      	str	r2, [sp, #16]
   84bea:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   84bee:	801a      	strh	r2, [r3, #0]
   84bf0:	f7ff baa0 	b.w	84134 <_vfiprintf_r+0x64>
   84bf4:	9a04      	ldr	r2, [sp, #16]
   84bf6:	6813      	ldr	r3, [r2, #0]
   84bf8:	3204      	adds	r2, #4
   84bfa:	9204      	str	r2, [sp, #16]
   84bfc:	9a02      	ldr	r2, [sp, #8]
   84bfe:	601a      	str	r2, [r3, #0]
   84c00:	f7ff ba98 	b.w	84134 <_vfiprintf_r+0x64>
   84c04:	9801      	ldr	r0, [sp, #4]
   84c06:	9900      	ldr	r1, [sp, #0]
   84c08:	aa0d      	add	r2, sp, #52	; 0x34
   84c0a:	f8cd c020 	str.w	ip, [sp, #32]
   84c0e:	f7ff fa23 	bl	84058 <__sprint_r.part.0>
   84c12:	2800      	cmp	r0, #0
   84c14:	f47f ae1f 	bne.w	84856 <_vfiprintf_r+0x786>
   84c18:	990e      	ldr	r1, [sp, #56]	; 0x38
   84c1a:	4654      	mov	r4, sl
   84c1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84c1e:	1c48      	adds	r0, r1, #1
   84c20:	f8dd c020 	ldr.w	ip, [sp, #32]
   84c24:	e592      	b.n	8474c <_vfiprintf_r+0x67c>
   84c26:	f048 0820 	orr.w	r8, r8, #32
   84c2a:	f10b 0001 	add.w	r0, fp, #1
   84c2e:	f89b 3001 	ldrb.w	r3, [fp, #1]
   84c32:	f7ff bab6 	b.w	841a2 <_vfiprintf_r+0xd2>
   84c36:	426d      	negs	r5, r5
   84c38:	9304      	str	r3, [sp, #16]
   84c3a:	4658      	mov	r0, fp
   84c3c:	f7ff bbc8 	b.w	843d0 <_vfiprintf_r+0x300>
   84c40:	9807      	ldr	r0, [sp, #28]
   84c42:	9504      	str	r5, [sp, #16]
   84c44:	f7ff f9da 	bl	83ffc <strlen>
   84c48:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   84c4c:	4681      	mov	r9, r0
   84c4e:	f04f 0c00 	mov.w	ip, #0
   84c52:	f7ff bb6f 	b.w	84334 <_vfiprintf_r+0x264>
   84c56:	9801      	ldr	r0, [sp, #4]
   84c58:	9900      	ldr	r1, [sp, #0]
   84c5a:	aa0d      	add	r2, sp, #52	; 0x34
   84c5c:	f8cd c014 	str.w	ip, [sp, #20]
   84c60:	f7ff f9fa 	bl	84058 <__sprint_r.part.0>
   84c64:	2800      	cmp	r0, #0
   84c66:	f47f adf6 	bne.w	84856 <_vfiprintf_r+0x786>
   84c6a:	990e      	ldr	r1, [sp, #56]	; 0x38
   84c6c:	4654      	mov	r4, sl
   84c6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84c70:	1c48      	adds	r0, r1, #1
   84c72:	f8dd c014 	ldr.w	ip, [sp, #20]
   84c76:	e58d      	b.n	84794 <_vfiprintf_r+0x6c4>
   84c78:	990e      	ldr	r1, [sp, #56]	; 0x38
   84c7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84c7c:	3101      	adds	r1, #1
   84c7e:	4f15      	ldr	r7, [pc, #84]	; (84cd4 <_vfiprintf_r+0xc04>)
   84c80:	f7ff bb9a 	b.w	843b8 <_vfiprintf_r+0x2e8>
   84c84:	2e06      	cmp	r6, #6
   84c86:	4b14      	ldr	r3, [pc, #80]	; (84cd8 <_vfiprintf_r+0xc08>)
   84c88:	bf28      	it	cs
   84c8a:	f04f 0c06 	movcs.w	ip, #6
   84c8e:	46e1      	mov	r9, ip
   84c90:	9504      	str	r5, [sp, #16]
   84c92:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
   84c96:	9307      	str	r3, [sp, #28]
   84c98:	e463      	b.n	84562 <_vfiprintf_r+0x492>
   84c9a:	990e      	ldr	r1, [sp, #56]	; 0x38
   84c9c:	4f0d      	ldr	r7, [pc, #52]	; (84cd4 <_vfiprintf_r+0xc04>)
   84c9e:	f101 0e01 	add.w	lr, r1, #1
   84ca2:	e61a      	b.n	848da <_vfiprintf_r+0x80a>
   84ca4:	46e1      	mov	r9, ip
   84ca6:	9504      	str	r5, [sp, #16]
   84ca8:	4684      	mov	ip, r0
   84caa:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   84cae:	f7ff bb41 	b.w	84334 <_vfiprintf_r+0x264>
   84cb2:	4686      	mov	lr, r0
   84cb4:	4d09      	ldr	r5, [pc, #36]	; (84cdc <_vfiprintf_r+0xc0c>)
   84cb6:	e66c      	b.n	84992 <_vfiprintf_r+0x8c2>
   84cb8:	9a04      	ldr	r2, [sp, #16]
   84cba:	f89b 3001 	ldrb.w	r3, [fp, #1]
   84cbe:	6816      	ldr	r6, [r2, #0]
   84cc0:	3204      	adds	r2, #4
   84cc2:	2e00      	cmp	r6, #0
   84cc4:	9204      	str	r2, [sp, #16]
   84cc6:	f6bf aa6c 	bge.w	841a2 <_vfiprintf_r+0xd2>
   84cca:	f04f 36ff 	mov.w	r6, #4294967295
   84cce:	f7ff ba68 	b.w	841a2 <_vfiprintf_r+0xd2>
   84cd2:	bf00      	nop
   84cd4:	00086e18 	.word	0x00086e18
   84cd8:	00086e10 	.word	0x00086e10
   84cdc:	00086dd8 	.word	0x00086dd8

00084ce0 <__sbprintf>:
   84ce0:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
   84ce4:	4688      	mov	r8, r1
   84ce6:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   84ce8:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   84cec:	9719      	str	r7, [sp, #100]	; 0x64
   84cee:	f8d8 701c 	ldr.w	r7, [r8, #28]
   84cf2:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   84cf6:	f8b1 a00e 	ldrh.w	sl, [r1, #14]
   84cfa:	9707      	str	r7, [sp, #28]
   84cfc:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   84d00:	ac1a      	add	r4, sp, #104	; 0x68
   84d02:	f44f 6580 	mov.w	r5, #1024	; 0x400
   84d06:	f02e 0e02 	bic.w	lr, lr, #2
   84d0a:	2600      	movs	r6, #0
   84d0c:	4669      	mov	r1, sp
   84d0e:	9400      	str	r4, [sp, #0]
   84d10:	9404      	str	r4, [sp, #16]
   84d12:	9502      	str	r5, [sp, #8]
   84d14:	9505      	str	r5, [sp, #20]
   84d16:	f8ad e00c 	strh.w	lr, [sp, #12]
   84d1a:	f8ad a00e 	strh.w	sl, [sp, #14]
   84d1e:	9709      	str	r7, [sp, #36]	; 0x24
   84d20:	9606      	str	r6, [sp, #24]
   84d22:	4605      	mov	r5, r0
   84d24:	f7ff f9d4 	bl	840d0 <_vfiprintf_r>
   84d28:	1e04      	subs	r4, r0, #0
   84d2a:	db07      	blt.n	84d3c <__sbprintf+0x5c>
   84d2c:	4628      	mov	r0, r5
   84d2e:	4669      	mov	r1, sp
   84d30:	f000 f92a 	bl	84f88 <_fflush_r>
   84d34:	42b0      	cmp	r0, r6
   84d36:	bf18      	it	ne
   84d38:	f04f 34ff 	movne.w	r4, #4294967295
   84d3c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   84d40:	065b      	lsls	r3, r3, #25
   84d42:	d505      	bpl.n	84d50 <__sbprintf+0x70>
   84d44:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   84d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84d4c:	f8a8 300c 	strh.w	r3, [r8, #12]
   84d50:	4620      	mov	r0, r4
   84d52:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   84d56:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
   84d5a:	bf00      	nop

00084d5c <__swsetup_r>:
   84d5c:	b538      	push	{r3, r4, r5, lr}
   84d5e:	4b2f      	ldr	r3, [pc, #188]	; (84e1c <__swsetup_r+0xc0>)
   84d60:	4605      	mov	r5, r0
   84d62:	6818      	ldr	r0, [r3, #0]
   84d64:	460c      	mov	r4, r1
   84d66:	b110      	cbz	r0, 84d6e <__swsetup_r+0x12>
   84d68:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84d6a:	2b00      	cmp	r3, #0
   84d6c:	d036      	beq.n	84ddc <__swsetup_r+0x80>
   84d6e:	89a2      	ldrh	r2, [r4, #12]
   84d70:	b293      	uxth	r3, r2
   84d72:	0718      	lsls	r0, r3, #28
   84d74:	d50c      	bpl.n	84d90 <__swsetup_r+0x34>
   84d76:	6920      	ldr	r0, [r4, #16]
   84d78:	b1a8      	cbz	r0, 84da6 <__swsetup_r+0x4a>
   84d7a:	f013 0201 	ands.w	r2, r3, #1
   84d7e:	d01e      	beq.n	84dbe <__swsetup_r+0x62>
   84d80:	6963      	ldr	r3, [r4, #20]
   84d82:	2200      	movs	r2, #0
   84d84:	425b      	negs	r3, r3
   84d86:	61a3      	str	r3, [r4, #24]
   84d88:	60a2      	str	r2, [r4, #8]
   84d8a:	b1f0      	cbz	r0, 84dca <__swsetup_r+0x6e>
   84d8c:	2000      	movs	r0, #0
   84d8e:	bd38      	pop	{r3, r4, r5, pc}
   84d90:	06d9      	lsls	r1, r3, #27
   84d92:	d53a      	bpl.n	84e0a <__swsetup_r+0xae>
   84d94:	0758      	lsls	r0, r3, #29
   84d96:	d424      	bmi.n	84de2 <__swsetup_r+0x86>
   84d98:	6920      	ldr	r0, [r4, #16]
   84d9a:	f042 0308 	orr.w	r3, r2, #8
   84d9e:	81a3      	strh	r3, [r4, #12]
   84da0:	b29b      	uxth	r3, r3
   84da2:	2800      	cmp	r0, #0
   84da4:	d1e9      	bne.n	84d7a <__swsetup_r+0x1e>
   84da6:	f403 7220 	and.w	r2, r3, #640	; 0x280
   84daa:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   84dae:	d0e4      	beq.n	84d7a <__swsetup_r+0x1e>
   84db0:	4628      	mov	r0, r5
   84db2:	4621      	mov	r1, r4
   84db4:	f000 fcee 	bl	85794 <__smakebuf_r>
   84db8:	89a3      	ldrh	r3, [r4, #12]
   84dba:	6920      	ldr	r0, [r4, #16]
   84dbc:	e7dd      	b.n	84d7a <__swsetup_r+0x1e>
   84dbe:	0799      	lsls	r1, r3, #30
   84dc0:	bf58      	it	pl
   84dc2:	6962      	ldrpl	r2, [r4, #20]
   84dc4:	60a2      	str	r2, [r4, #8]
   84dc6:	2800      	cmp	r0, #0
   84dc8:	d1e0      	bne.n	84d8c <__swsetup_r+0x30>
   84dca:	89a3      	ldrh	r3, [r4, #12]
   84dcc:	061a      	lsls	r2, r3, #24
   84dce:	d5de      	bpl.n	84d8e <__swsetup_r+0x32>
   84dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84dd4:	81a3      	strh	r3, [r4, #12]
   84dd6:	f04f 30ff 	mov.w	r0, #4294967295
   84dda:	bd38      	pop	{r3, r4, r5, pc}
   84ddc:	f000 f968 	bl	850b0 <__sinit>
   84de0:	e7c5      	b.n	84d6e <__swsetup_r+0x12>
   84de2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84de4:	b149      	cbz	r1, 84dfa <__swsetup_r+0x9e>
   84de6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84dea:	4299      	cmp	r1, r3
   84dec:	d003      	beq.n	84df6 <__swsetup_r+0x9a>
   84dee:	4628      	mov	r0, r5
   84df0:	f000 fa36 	bl	85260 <_free_r>
   84df4:	89a2      	ldrh	r2, [r4, #12]
   84df6:	2300      	movs	r3, #0
   84df8:	6323      	str	r3, [r4, #48]	; 0x30
   84dfa:	6920      	ldr	r0, [r4, #16]
   84dfc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   84e00:	2300      	movs	r3, #0
   84e02:	b292      	uxth	r2, r2
   84e04:	e884 0009 	stmia.w	r4, {r0, r3}
   84e08:	e7c7      	b.n	84d9a <__swsetup_r+0x3e>
   84e0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   84e0e:	2309      	movs	r3, #9
   84e10:	602b      	str	r3, [r5, #0]
   84e12:	f04f 30ff 	mov.w	r0, #4294967295
   84e16:	81a2      	strh	r2, [r4, #12]
   84e18:	bd38      	pop	{r3, r4, r5, pc}
   84e1a:	bf00      	nop
   84e1c:	20070830 	.word	0x20070830

00084e20 <register_fini>:
   84e20:	4b02      	ldr	r3, [pc, #8]	; (84e2c <register_fini+0xc>)
   84e22:	b113      	cbz	r3, 84e2a <register_fini+0xa>
   84e24:	4802      	ldr	r0, [pc, #8]	; (84e30 <register_fini+0x10>)
   84e26:	f000 b805 	b.w	84e34 <atexit>
   84e2a:	4770      	bx	lr
   84e2c:	00000000 	.word	0x00000000
   84e30:	000850c5 	.word	0x000850c5

00084e34 <atexit>:
   84e34:	4601      	mov	r1, r0
   84e36:	2000      	movs	r0, #0
   84e38:	4602      	mov	r2, r0
   84e3a:	4603      	mov	r3, r0
   84e3c:	f001 bbb4 	b.w	865a8 <__register_exitproc>

00084e40 <__sflush_r>:
   84e40:	898b      	ldrh	r3, [r1, #12]
   84e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84e46:	b29a      	uxth	r2, r3
   84e48:	460d      	mov	r5, r1
   84e4a:	0711      	lsls	r1, r2, #28
   84e4c:	4680      	mov	r8, r0
   84e4e:	d43c      	bmi.n	84eca <__sflush_r+0x8a>
   84e50:	686a      	ldr	r2, [r5, #4]
   84e52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84e56:	2a00      	cmp	r2, #0
   84e58:	81ab      	strh	r3, [r5, #12]
   84e5a:	dd65      	ble.n	84f28 <__sflush_r+0xe8>
   84e5c:	6aae      	ldr	r6, [r5, #40]	; 0x28
   84e5e:	2e00      	cmp	r6, #0
   84e60:	d04b      	beq.n	84efa <__sflush_r+0xba>
   84e62:	b29b      	uxth	r3, r3
   84e64:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   84e68:	2100      	movs	r1, #0
   84e6a:	b292      	uxth	r2, r2
   84e6c:	f8d8 4000 	ldr.w	r4, [r8]
   84e70:	f8c8 1000 	str.w	r1, [r8]
   84e74:	2a00      	cmp	r2, #0
   84e76:	d05b      	beq.n	84f30 <__sflush_r+0xf0>
   84e78:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   84e7a:	075f      	lsls	r7, r3, #29
   84e7c:	d505      	bpl.n	84e8a <__sflush_r+0x4a>
   84e7e:	6869      	ldr	r1, [r5, #4]
   84e80:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   84e82:	1a52      	subs	r2, r2, r1
   84e84:	b10b      	cbz	r3, 84e8a <__sflush_r+0x4a>
   84e86:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   84e88:	1ad2      	subs	r2, r2, r3
   84e8a:	4640      	mov	r0, r8
   84e8c:	69e9      	ldr	r1, [r5, #28]
   84e8e:	2300      	movs	r3, #0
   84e90:	47b0      	blx	r6
   84e92:	1c46      	adds	r6, r0, #1
   84e94:	d056      	beq.n	84f44 <__sflush_r+0x104>
   84e96:	89ab      	ldrh	r3, [r5, #12]
   84e98:	692a      	ldr	r2, [r5, #16]
   84e9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84e9e:	b29b      	uxth	r3, r3
   84ea0:	2100      	movs	r1, #0
   84ea2:	602a      	str	r2, [r5, #0]
   84ea4:	04da      	lsls	r2, r3, #19
   84ea6:	81ab      	strh	r3, [r5, #12]
   84ea8:	6069      	str	r1, [r5, #4]
   84eaa:	d43b      	bmi.n	84f24 <__sflush_r+0xe4>
   84eac:	6b29      	ldr	r1, [r5, #48]	; 0x30
   84eae:	f8c8 4000 	str.w	r4, [r8]
   84eb2:	b311      	cbz	r1, 84efa <__sflush_r+0xba>
   84eb4:	f105 0340 	add.w	r3, r5, #64	; 0x40
   84eb8:	4299      	cmp	r1, r3
   84eba:	d002      	beq.n	84ec2 <__sflush_r+0x82>
   84ebc:	4640      	mov	r0, r8
   84ebe:	f000 f9cf 	bl	85260 <_free_r>
   84ec2:	2000      	movs	r0, #0
   84ec4:	6328      	str	r0, [r5, #48]	; 0x30
   84ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84eca:	692e      	ldr	r6, [r5, #16]
   84ecc:	b1ae      	cbz	r6, 84efa <__sflush_r+0xba>
   84ece:	0791      	lsls	r1, r2, #30
   84ed0:	682c      	ldr	r4, [r5, #0]
   84ed2:	bf0c      	ite	eq
   84ed4:	696b      	ldreq	r3, [r5, #20]
   84ed6:	2300      	movne	r3, #0
   84ed8:	602e      	str	r6, [r5, #0]
   84eda:	1ba4      	subs	r4, r4, r6
   84edc:	60ab      	str	r3, [r5, #8]
   84ede:	e00a      	b.n	84ef6 <__sflush_r+0xb6>
   84ee0:	4632      	mov	r2, r6
   84ee2:	4623      	mov	r3, r4
   84ee4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   84ee6:	4640      	mov	r0, r8
   84ee8:	69e9      	ldr	r1, [r5, #28]
   84eea:	47b8      	blx	r7
   84eec:	2800      	cmp	r0, #0
   84eee:	eba4 0400 	sub.w	r4, r4, r0
   84ef2:	4406      	add	r6, r0
   84ef4:	dd04      	ble.n	84f00 <__sflush_r+0xc0>
   84ef6:	2c00      	cmp	r4, #0
   84ef8:	dcf2      	bgt.n	84ee0 <__sflush_r+0xa0>
   84efa:	2000      	movs	r0, #0
   84efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84f00:	89ab      	ldrh	r3, [r5, #12]
   84f02:	f04f 30ff 	mov.w	r0, #4294967295
   84f06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84f0a:	81ab      	strh	r3, [r5, #12]
   84f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84f10:	89ab      	ldrh	r3, [r5, #12]
   84f12:	692a      	ldr	r2, [r5, #16]
   84f14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84f18:	b29b      	uxth	r3, r3
   84f1a:	81ab      	strh	r3, [r5, #12]
   84f1c:	04db      	lsls	r3, r3, #19
   84f1e:	6069      	str	r1, [r5, #4]
   84f20:	602a      	str	r2, [r5, #0]
   84f22:	d5c3      	bpl.n	84eac <__sflush_r+0x6c>
   84f24:	6528      	str	r0, [r5, #80]	; 0x50
   84f26:	e7c1      	b.n	84eac <__sflush_r+0x6c>
   84f28:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   84f2a:	2a00      	cmp	r2, #0
   84f2c:	dc96      	bgt.n	84e5c <__sflush_r+0x1c>
   84f2e:	e7e4      	b.n	84efa <__sflush_r+0xba>
   84f30:	2301      	movs	r3, #1
   84f32:	4640      	mov	r0, r8
   84f34:	69e9      	ldr	r1, [r5, #28]
   84f36:	47b0      	blx	r6
   84f38:	1c43      	adds	r3, r0, #1
   84f3a:	4602      	mov	r2, r0
   84f3c:	d019      	beq.n	84f72 <__sflush_r+0x132>
   84f3e:	89ab      	ldrh	r3, [r5, #12]
   84f40:	6aae      	ldr	r6, [r5, #40]	; 0x28
   84f42:	e79a      	b.n	84e7a <__sflush_r+0x3a>
   84f44:	f8d8 1000 	ldr.w	r1, [r8]
   84f48:	2900      	cmp	r1, #0
   84f4a:	d0e1      	beq.n	84f10 <__sflush_r+0xd0>
   84f4c:	291d      	cmp	r1, #29
   84f4e:	d007      	beq.n	84f60 <__sflush_r+0x120>
   84f50:	2916      	cmp	r1, #22
   84f52:	d005      	beq.n	84f60 <__sflush_r+0x120>
   84f54:	89ab      	ldrh	r3, [r5, #12]
   84f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84f5a:	81ab      	strh	r3, [r5, #12]
   84f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84f60:	89ab      	ldrh	r3, [r5, #12]
   84f62:	6929      	ldr	r1, [r5, #16]
   84f64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84f68:	2200      	movs	r2, #0
   84f6a:	81ab      	strh	r3, [r5, #12]
   84f6c:	e885 0006 	stmia.w	r5, {r1, r2}
   84f70:	e79c      	b.n	84eac <__sflush_r+0x6c>
   84f72:	f8d8 3000 	ldr.w	r3, [r8]
   84f76:	2b00      	cmp	r3, #0
   84f78:	d0e1      	beq.n	84f3e <__sflush_r+0xfe>
   84f7a:	2b1d      	cmp	r3, #29
   84f7c:	d001      	beq.n	84f82 <__sflush_r+0x142>
   84f7e:	2b16      	cmp	r3, #22
   84f80:	d1be      	bne.n	84f00 <__sflush_r+0xc0>
   84f82:	f8c8 4000 	str.w	r4, [r8]
   84f86:	e7b8      	b.n	84efa <__sflush_r+0xba>

00084f88 <_fflush_r>:
   84f88:	b510      	push	{r4, lr}
   84f8a:	4604      	mov	r4, r0
   84f8c:	b082      	sub	sp, #8
   84f8e:	b108      	cbz	r0, 84f94 <_fflush_r+0xc>
   84f90:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84f92:	b153      	cbz	r3, 84faa <_fflush_r+0x22>
   84f94:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   84f98:	b908      	cbnz	r0, 84f9e <_fflush_r+0x16>
   84f9a:	b002      	add	sp, #8
   84f9c:	bd10      	pop	{r4, pc}
   84f9e:	4620      	mov	r0, r4
   84fa0:	b002      	add	sp, #8
   84fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   84fa6:	f7ff bf4b 	b.w	84e40 <__sflush_r>
   84faa:	9101      	str	r1, [sp, #4]
   84fac:	f000 f880 	bl	850b0 <__sinit>
   84fb0:	9901      	ldr	r1, [sp, #4]
   84fb2:	e7ef      	b.n	84f94 <_fflush_r+0xc>

00084fb4 <_cleanup_r>:
   84fb4:	4901      	ldr	r1, [pc, #4]	; (84fbc <_cleanup_r+0x8>)
   84fb6:	f000 bbbb 	b.w	85730 <_fwalk_reent>
   84fba:	bf00      	nop
   84fbc:	00086671 	.word	0x00086671

00084fc0 <__sinit.part.1>:
   84fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84fc4:	4607      	mov	r7, r0
   84fc6:	4835      	ldr	r0, [pc, #212]	; (8509c <__sinit.part.1+0xdc>)
   84fc8:	687d      	ldr	r5, [r7, #4]
   84fca:	2400      	movs	r4, #0
   84fcc:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   84fd0:	2304      	movs	r3, #4
   84fd2:	2103      	movs	r1, #3
   84fd4:	63f8      	str	r0, [r7, #60]	; 0x3c
   84fd6:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   84fda:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   84fde:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   84fe2:	b083      	sub	sp, #12
   84fe4:	602c      	str	r4, [r5, #0]
   84fe6:	606c      	str	r4, [r5, #4]
   84fe8:	60ac      	str	r4, [r5, #8]
   84fea:	666c      	str	r4, [r5, #100]	; 0x64
   84fec:	81ec      	strh	r4, [r5, #14]
   84fee:	612c      	str	r4, [r5, #16]
   84ff0:	616c      	str	r4, [r5, #20]
   84ff2:	61ac      	str	r4, [r5, #24]
   84ff4:	81ab      	strh	r3, [r5, #12]
   84ff6:	4621      	mov	r1, r4
   84ff8:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   84ffc:	2208      	movs	r2, #8
   84ffe:	f7fe ff2b 	bl	83e58 <memset>
   85002:	f8df b09c 	ldr.w	fp, [pc, #156]	; 850a0 <__sinit.part.1+0xe0>
   85006:	68be      	ldr	r6, [r7, #8]
   85008:	f8df a098 	ldr.w	sl, [pc, #152]	; 850a4 <__sinit.part.1+0xe4>
   8500c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 850a8 <__sinit.part.1+0xe8>
   85010:	f8df 8098 	ldr.w	r8, [pc, #152]	; 850ac <__sinit.part.1+0xec>
   85014:	2301      	movs	r3, #1
   85016:	2209      	movs	r2, #9
   85018:	f8c5 b020 	str.w	fp, [r5, #32]
   8501c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   85020:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   85024:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   85028:	61ed      	str	r5, [r5, #28]
   8502a:	4621      	mov	r1, r4
   8502c:	81f3      	strh	r3, [r6, #14]
   8502e:	81b2      	strh	r2, [r6, #12]
   85030:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   85034:	6034      	str	r4, [r6, #0]
   85036:	6074      	str	r4, [r6, #4]
   85038:	60b4      	str	r4, [r6, #8]
   8503a:	6674      	str	r4, [r6, #100]	; 0x64
   8503c:	6134      	str	r4, [r6, #16]
   8503e:	6174      	str	r4, [r6, #20]
   85040:	61b4      	str	r4, [r6, #24]
   85042:	2208      	movs	r2, #8
   85044:	9301      	str	r3, [sp, #4]
   85046:	f7fe ff07 	bl	83e58 <memset>
   8504a:	68fd      	ldr	r5, [r7, #12]
   8504c:	2012      	movs	r0, #18
   8504e:	2202      	movs	r2, #2
   85050:	61f6      	str	r6, [r6, #28]
   85052:	f8c6 b020 	str.w	fp, [r6, #32]
   85056:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   8505a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   8505e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   85062:	4621      	mov	r1, r4
   85064:	81a8      	strh	r0, [r5, #12]
   85066:	81ea      	strh	r2, [r5, #14]
   85068:	602c      	str	r4, [r5, #0]
   8506a:	606c      	str	r4, [r5, #4]
   8506c:	60ac      	str	r4, [r5, #8]
   8506e:	666c      	str	r4, [r5, #100]	; 0x64
   85070:	612c      	str	r4, [r5, #16]
   85072:	616c      	str	r4, [r5, #20]
   85074:	61ac      	str	r4, [r5, #24]
   85076:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8507a:	2208      	movs	r2, #8
   8507c:	f7fe feec 	bl	83e58 <memset>
   85080:	9b01      	ldr	r3, [sp, #4]
   85082:	61ed      	str	r5, [r5, #28]
   85084:	f8c5 b020 	str.w	fp, [r5, #32]
   85088:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   8508c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   85090:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   85094:	63bb      	str	r3, [r7, #56]	; 0x38
   85096:	b003      	add	sp, #12
   85098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8509c:	00084fb5 	.word	0x00084fb5
   850a0:	000863e5 	.word	0x000863e5
   850a4:	00086409 	.word	0x00086409
   850a8:	00086441 	.word	0x00086441
   850ac:	00086461 	.word	0x00086461

000850b0 <__sinit>:
   850b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   850b2:	b103      	cbz	r3, 850b6 <__sinit+0x6>
   850b4:	4770      	bx	lr
   850b6:	f7ff bf83 	b.w	84fc0 <__sinit.part.1>
   850ba:	bf00      	nop

000850bc <__sfp_lock_acquire>:
   850bc:	4770      	bx	lr
   850be:	bf00      	nop

000850c0 <__sfp_lock_release>:
   850c0:	4770      	bx	lr
   850c2:	bf00      	nop

000850c4 <__libc_fini_array>:
   850c4:	b538      	push	{r3, r4, r5, lr}
   850c6:	4b08      	ldr	r3, [pc, #32]	; (850e8 <__libc_fini_array+0x24>)
   850c8:	4d08      	ldr	r5, [pc, #32]	; (850ec <__libc_fini_array+0x28>)
   850ca:	1aed      	subs	r5, r5, r3
   850cc:	10ac      	asrs	r4, r5, #2
   850ce:	bf18      	it	ne
   850d0:	18ed      	addne	r5, r5, r3
   850d2:	d005      	beq.n	850e0 <__libc_fini_array+0x1c>
   850d4:	3c01      	subs	r4, #1
   850d6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   850da:	4798      	blx	r3
   850dc:	2c00      	cmp	r4, #0
   850de:	d1f9      	bne.n	850d4 <__libc_fini_array+0x10>
   850e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   850e4:	f001 beaa 	b.w	86e3c <_fini>
   850e8:	00086e48 	.word	0x00086e48
   850ec:	00086e4c 	.word	0x00086e4c

000850f0 <__fputwc>:
   850f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   850f4:	b082      	sub	sp, #8
   850f6:	4607      	mov	r7, r0
   850f8:	460e      	mov	r6, r1
   850fa:	4614      	mov	r4, r2
   850fc:	f000 fb44 	bl	85788 <__locale_mb_cur_max>
   85100:	2801      	cmp	r0, #1
   85102:	d040      	beq.n	85186 <__fputwc+0x96>
   85104:	4638      	mov	r0, r7
   85106:	a901      	add	r1, sp, #4
   85108:	4632      	mov	r2, r6
   8510a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8510e:	f001 f9ff 	bl	86510 <_wcrtomb_r>
   85112:	f1b0 3fff 	cmp.w	r0, #4294967295
   85116:	4680      	mov	r8, r0
   85118:	d02e      	beq.n	85178 <__fputwc+0x88>
   8511a:	2800      	cmp	r0, #0
   8511c:	d03b      	beq.n	85196 <__fputwc+0xa6>
   8511e:	f89d 1004 	ldrb.w	r1, [sp, #4]
   85122:	2500      	movs	r5, #0
   85124:	e009      	b.n	8513a <__fputwc+0x4a>
   85126:	6823      	ldr	r3, [r4, #0]
   85128:	7019      	strb	r1, [r3, #0]
   8512a:	6823      	ldr	r3, [r4, #0]
   8512c:	3301      	adds	r3, #1
   8512e:	6023      	str	r3, [r4, #0]
   85130:	3501      	adds	r5, #1
   85132:	45a8      	cmp	r8, r5
   85134:	d92f      	bls.n	85196 <__fputwc+0xa6>
   85136:	ab01      	add	r3, sp, #4
   85138:	5d59      	ldrb	r1, [r3, r5]
   8513a:	68a3      	ldr	r3, [r4, #8]
   8513c:	3b01      	subs	r3, #1
   8513e:	2b00      	cmp	r3, #0
   85140:	60a3      	str	r3, [r4, #8]
   85142:	daf0      	bge.n	85126 <__fputwc+0x36>
   85144:	69a2      	ldr	r2, [r4, #24]
   85146:	4293      	cmp	r3, r2
   85148:	db06      	blt.n	85158 <__fputwc+0x68>
   8514a:	6823      	ldr	r3, [r4, #0]
   8514c:	7019      	strb	r1, [r3, #0]
   8514e:	6823      	ldr	r3, [r4, #0]
   85150:	7819      	ldrb	r1, [r3, #0]
   85152:	3301      	adds	r3, #1
   85154:	290a      	cmp	r1, #10
   85156:	d1ea      	bne.n	8512e <__fputwc+0x3e>
   85158:	4638      	mov	r0, r7
   8515a:	4622      	mov	r2, r4
   8515c:	f001 f984 	bl	86468 <__swbuf_r>
   85160:	f1a0 30ff 	sub.w	r0, r0, #4294967295
   85164:	fab0 f080 	clz	r0, r0
   85168:	0940      	lsrs	r0, r0, #5
   8516a:	2800      	cmp	r0, #0
   8516c:	d0e0      	beq.n	85130 <__fputwc+0x40>
   8516e:	f04f 30ff 	mov.w	r0, #4294967295
   85172:	b002      	add	sp, #8
   85174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85178:	89a3      	ldrh	r3, [r4, #12]
   8517a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8517e:	81a3      	strh	r3, [r4, #12]
   85180:	b002      	add	sp, #8
   85182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85186:	1e73      	subs	r3, r6, #1
   85188:	2bfe      	cmp	r3, #254	; 0xfe
   8518a:	d8bb      	bhi.n	85104 <__fputwc+0x14>
   8518c:	b2f1      	uxtb	r1, r6
   8518e:	4680      	mov	r8, r0
   85190:	f88d 1004 	strb.w	r1, [sp, #4]
   85194:	e7c5      	b.n	85122 <__fputwc+0x32>
   85196:	4630      	mov	r0, r6
   85198:	b002      	add	sp, #8
   8519a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8519e:	bf00      	nop

000851a0 <_fputwc_r>:
   851a0:	8993      	ldrh	r3, [r2, #12]
   851a2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   851a6:	d10b      	bne.n	851c0 <_fputwc_r+0x20>
   851a8:	b410      	push	{r4}
   851aa:	6e54      	ldr	r4, [r2, #100]	; 0x64
   851ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   851b0:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   851b4:	6654      	str	r4, [r2, #100]	; 0x64
   851b6:	8193      	strh	r3, [r2, #12]
   851b8:	f85d 4b04 	ldr.w	r4, [sp], #4
   851bc:	f7ff bf98 	b.w	850f0 <__fputwc>
   851c0:	f7ff bf96 	b.w	850f0 <__fputwc>

000851c4 <_malloc_trim_r>:
   851c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   851c6:	460c      	mov	r4, r1
   851c8:	4f22      	ldr	r7, [pc, #136]	; (85254 <_malloc_trim_r+0x90>)
   851ca:	4606      	mov	r6, r0
   851cc:	f000 ff04 	bl	85fd8 <__malloc_lock>
   851d0:	68bb      	ldr	r3, [r7, #8]
   851d2:	685d      	ldr	r5, [r3, #4]
   851d4:	f025 0503 	bic.w	r5, r5, #3
   851d8:	1b29      	subs	r1, r5, r4
   851da:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   851de:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   851e2:	f021 010f 	bic.w	r1, r1, #15
   851e6:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   851ea:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   851ee:	db07      	blt.n	85200 <_malloc_trim_r+0x3c>
   851f0:	4630      	mov	r0, r6
   851f2:	2100      	movs	r1, #0
   851f4:	f001 f8e4 	bl	863c0 <_sbrk_r>
   851f8:	68bb      	ldr	r3, [r7, #8]
   851fa:	442b      	add	r3, r5
   851fc:	4298      	cmp	r0, r3
   851fe:	d004      	beq.n	8520a <_malloc_trim_r+0x46>
   85200:	4630      	mov	r0, r6
   85202:	f000 feeb 	bl	85fdc <__malloc_unlock>
   85206:	2000      	movs	r0, #0
   85208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8520a:	4630      	mov	r0, r6
   8520c:	4261      	negs	r1, r4
   8520e:	f001 f8d7 	bl	863c0 <_sbrk_r>
   85212:	3001      	adds	r0, #1
   85214:	d00d      	beq.n	85232 <_malloc_trim_r+0x6e>
   85216:	4b10      	ldr	r3, [pc, #64]	; (85258 <_malloc_trim_r+0x94>)
   85218:	68ba      	ldr	r2, [r7, #8]
   8521a:	6819      	ldr	r1, [r3, #0]
   8521c:	1b2d      	subs	r5, r5, r4
   8521e:	f045 0501 	orr.w	r5, r5, #1
   85222:	4630      	mov	r0, r6
   85224:	1b09      	subs	r1, r1, r4
   85226:	6055      	str	r5, [r2, #4]
   85228:	6019      	str	r1, [r3, #0]
   8522a:	f000 fed7 	bl	85fdc <__malloc_unlock>
   8522e:	2001      	movs	r0, #1
   85230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85232:	4630      	mov	r0, r6
   85234:	2100      	movs	r1, #0
   85236:	f001 f8c3 	bl	863c0 <_sbrk_r>
   8523a:	68ba      	ldr	r2, [r7, #8]
   8523c:	1a83      	subs	r3, r0, r2
   8523e:	2b0f      	cmp	r3, #15
   85240:	ddde      	ble.n	85200 <_malloc_trim_r+0x3c>
   85242:	4c06      	ldr	r4, [pc, #24]	; (8525c <_malloc_trim_r+0x98>)
   85244:	4904      	ldr	r1, [pc, #16]	; (85258 <_malloc_trim_r+0x94>)
   85246:	6824      	ldr	r4, [r4, #0]
   85248:	f043 0301 	orr.w	r3, r3, #1
   8524c:	1b00      	subs	r0, r0, r4
   8524e:	6053      	str	r3, [r2, #4]
   85250:	6008      	str	r0, [r1, #0]
   85252:	e7d5      	b.n	85200 <_malloc_trim_r+0x3c>
   85254:	20070858 	.word	0x20070858
   85258:	20070d98 	.word	0x20070d98
   8525c:	20070c64 	.word	0x20070c64

00085260 <_free_r>:
   85260:	2900      	cmp	r1, #0
   85262:	d04e      	beq.n	85302 <_free_r+0xa2>
   85264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85268:	460c      	mov	r4, r1
   8526a:	4680      	mov	r8, r0
   8526c:	f000 feb4 	bl	85fd8 <__malloc_lock>
   85270:	f854 7c04 	ldr.w	r7, [r4, #-4]
   85274:	4962      	ldr	r1, [pc, #392]	; (85400 <_free_r+0x1a0>)
   85276:	f1a4 0508 	sub.w	r5, r4, #8
   8527a:	f027 0201 	bic.w	r2, r7, #1
   8527e:	18ab      	adds	r3, r5, r2
   85280:	688e      	ldr	r6, [r1, #8]
   85282:	6858      	ldr	r0, [r3, #4]
   85284:	429e      	cmp	r6, r3
   85286:	f020 0003 	bic.w	r0, r0, #3
   8528a:	d05a      	beq.n	85342 <_free_r+0xe2>
   8528c:	07fe      	lsls	r6, r7, #31
   8528e:	6058      	str	r0, [r3, #4]
   85290:	d40b      	bmi.n	852aa <_free_r+0x4a>
   85292:	f854 7c08 	ldr.w	r7, [r4, #-8]
   85296:	f101 0e08 	add.w	lr, r1, #8
   8529a:	1bed      	subs	r5, r5, r7
   8529c:	68ac      	ldr	r4, [r5, #8]
   8529e:	443a      	add	r2, r7
   852a0:	4574      	cmp	r4, lr
   852a2:	d067      	beq.n	85374 <_free_r+0x114>
   852a4:	68ef      	ldr	r7, [r5, #12]
   852a6:	60e7      	str	r7, [r4, #12]
   852a8:	60bc      	str	r4, [r7, #8]
   852aa:	181c      	adds	r4, r3, r0
   852ac:	6864      	ldr	r4, [r4, #4]
   852ae:	07e4      	lsls	r4, r4, #31
   852b0:	d40c      	bmi.n	852cc <_free_r+0x6c>
   852b2:	4f54      	ldr	r7, [pc, #336]	; (85404 <_free_r+0x1a4>)
   852b4:	689c      	ldr	r4, [r3, #8]
   852b6:	4402      	add	r2, r0
   852b8:	42bc      	cmp	r4, r7
   852ba:	d07c      	beq.n	853b6 <_free_r+0x156>
   852bc:	68d8      	ldr	r0, [r3, #12]
   852be:	f042 0301 	orr.w	r3, r2, #1
   852c2:	60e0      	str	r0, [r4, #12]
   852c4:	6084      	str	r4, [r0, #8]
   852c6:	606b      	str	r3, [r5, #4]
   852c8:	50aa      	str	r2, [r5, r2]
   852ca:	e003      	b.n	852d4 <_free_r+0x74>
   852cc:	f042 0301 	orr.w	r3, r2, #1
   852d0:	606b      	str	r3, [r5, #4]
   852d2:	50aa      	str	r2, [r5, r2]
   852d4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   852d8:	d214      	bcs.n	85304 <_free_r+0xa4>
   852da:	08d2      	lsrs	r2, r2, #3
   852dc:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   852e0:	2401      	movs	r4, #1
   852e2:	6848      	ldr	r0, [r1, #4]
   852e4:	1092      	asrs	r2, r2, #2
   852e6:	fa04 f202 	lsl.w	r2, r4, r2
   852ea:	689c      	ldr	r4, [r3, #8]
   852ec:	4310      	orrs	r0, r2
   852ee:	60ac      	str	r4, [r5, #8]
   852f0:	60eb      	str	r3, [r5, #12]
   852f2:	6048      	str	r0, [r1, #4]
   852f4:	609d      	str	r5, [r3, #8]
   852f6:	60e5      	str	r5, [r4, #12]
   852f8:	4640      	mov	r0, r8
   852fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   852fe:	f000 be6d 	b.w	85fdc <__malloc_unlock>
   85302:	4770      	bx	lr
   85304:	0a53      	lsrs	r3, r2, #9
   85306:	2b04      	cmp	r3, #4
   85308:	d847      	bhi.n	8539a <_free_r+0x13a>
   8530a:	0993      	lsrs	r3, r2, #6
   8530c:	f103 0438 	add.w	r4, r3, #56	; 0x38
   85310:	0060      	lsls	r0, r4, #1
   85312:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   85316:	6883      	ldr	r3, [r0, #8]
   85318:	4939      	ldr	r1, [pc, #228]	; (85400 <_free_r+0x1a0>)
   8531a:	4283      	cmp	r3, r0
   8531c:	d043      	beq.n	853a6 <_free_r+0x146>
   8531e:	6859      	ldr	r1, [r3, #4]
   85320:	f021 0103 	bic.w	r1, r1, #3
   85324:	4291      	cmp	r1, r2
   85326:	d902      	bls.n	8532e <_free_r+0xce>
   85328:	689b      	ldr	r3, [r3, #8]
   8532a:	4298      	cmp	r0, r3
   8532c:	d1f7      	bne.n	8531e <_free_r+0xbe>
   8532e:	68da      	ldr	r2, [r3, #12]
   85330:	60ea      	str	r2, [r5, #12]
   85332:	60ab      	str	r3, [r5, #8]
   85334:	4640      	mov	r0, r8
   85336:	6095      	str	r5, [r2, #8]
   85338:	60dd      	str	r5, [r3, #12]
   8533a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8533e:	f000 be4d 	b.w	85fdc <__malloc_unlock>
   85342:	07ff      	lsls	r7, r7, #31
   85344:	4402      	add	r2, r0
   85346:	d407      	bmi.n	85358 <_free_r+0xf8>
   85348:	f854 4c08 	ldr.w	r4, [r4, #-8]
   8534c:	1b2d      	subs	r5, r5, r4
   8534e:	68eb      	ldr	r3, [r5, #12]
   85350:	68a8      	ldr	r0, [r5, #8]
   85352:	4422      	add	r2, r4
   85354:	60c3      	str	r3, [r0, #12]
   85356:	6098      	str	r0, [r3, #8]
   85358:	4b2b      	ldr	r3, [pc, #172]	; (85408 <_free_r+0x1a8>)
   8535a:	f042 0001 	orr.w	r0, r2, #1
   8535e:	681b      	ldr	r3, [r3, #0]
   85360:	6068      	str	r0, [r5, #4]
   85362:	429a      	cmp	r2, r3
   85364:	608d      	str	r5, [r1, #8]
   85366:	d3c7      	bcc.n	852f8 <_free_r+0x98>
   85368:	4b28      	ldr	r3, [pc, #160]	; (8540c <_free_r+0x1ac>)
   8536a:	4640      	mov	r0, r8
   8536c:	6819      	ldr	r1, [r3, #0]
   8536e:	f7ff ff29 	bl	851c4 <_malloc_trim_r>
   85372:	e7c1      	b.n	852f8 <_free_r+0x98>
   85374:	1819      	adds	r1, r3, r0
   85376:	6849      	ldr	r1, [r1, #4]
   85378:	07c9      	lsls	r1, r1, #31
   8537a:	d409      	bmi.n	85390 <_free_r+0x130>
   8537c:	68d9      	ldr	r1, [r3, #12]
   8537e:	4402      	add	r2, r0
   85380:	689b      	ldr	r3, [r3, #8]
   85382:	f042 0001 	orr.w	r0, r2, #1
   85386:	60d9      	str	r1, [r3, #12]
   85388:	608b      	str	r3, [r1, #8]
   8538a:	6068      	str	r0, [r5, #4]
   8538c:	50aa      	str	r2, [r5, r2]
   8538e:	e7b3      	b.n	852f8 <_free_r+0x98>
   85390:	f042 0301 	orr.w	r3, r2, #1
   85394:	606b      	str	r3, [r5, #4]
   85396:	50aa      	str	r2, [r5, r2]
   85398:	e7ae      	b.n	852f8 <_free_r+0x98>
   8539a:	2b14      	cmp	r3, #20
   8539c:	d814      	bhi.n	853c8 <_free_r+0x168>
   8539e:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   853a2:	0060      	lsls	r0, r4, #1
   853a4:	e7b5      	b.n	85312 <_free_r+0xb2>
   853a6:	684a      	ldr	r2, [r1, #4]
   853a8:	10a4      	asrs	r4, r4, #2
   853aa:	2001      	movs	r0, #1
   853ac:	40a0      	lsls	r0, r4
   853ae:	4302      	orrs	r2, r0
   853b0:	604a      	str	r2, [r1, #4]
   853b2:	461a      	mov	r2, r3
   853b4:	e7bc      	b.n	85330 <_free_r+0xd0>
   853b6:	f042 0301 	orr.w	r3, r2, #1
   853ba:	614d      	str	r5, [r1, #20]
   853bc:	610d      	str	r5, [r1, #16]
   853be:	60ec      	str	r4, [r5, #12]
   853c0:	60ac      	str	r4, [r5, #8]
   853c2:	606b      	str	r3, [r5, #4]
   853c4:	50aa      	str	r2, [r5, r2]
   853c6:	e797      	b.n	852f8 <_free_r+0x98>
   853c8:	2b54      	cmp	r3, #84	; 0x54
   853ca:	d804      	bhi.n	853d6 <_free_r+0x176>
   853cc:	0b13      	lsrs	r3, r2, #12
   853ce:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   853d2:	0060      	lsls	r0, r4, #1
   853d4:	e79d      	b.n	85312 <_free_r+0xb2>
   853d6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   853da:	d804      	bhi.n	853e6 <_free_r+0x186>
   853dc:	0bd3      	lsrs	r3, r2, #15
   853de:	f103 0477 	add.w	r4, r3, #119	; 0x77
   853e2:	0060      	lsls	r0, r4, #1
   853e4:	e795      	b.n	85312 <_free_r+0xb2>
   853e6:	f240 5054 	movw	r0, #1364	; 0x554
   853ea:	4283      	cmp	r3, r0
   853ec:	d804      	bhi.n	853f8 <_free_r+0x198>
   853ee:	0c93      	lsrs	r3, r2, #18
   853f0:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   853f4:	0060      	lsls	r0, r4, #1
   853f6:	e78c      	b.n	85312 <_free_r+0xb2>
   853f8:	20fc      	movs	r0, #252	; 0xfc
   853fa:	247e      	movs	r4, #126	; 0x7e
   853fc:	e789      	b.n	85312 <_free_r+0xb2>
   853fe:	bf00      	nop
   85400:	20070858 	.word	0x20070858
   85404:	20070860 	.word	0x20070860
   85408:	20070c60 	.word	0x20070c60
   8540c:	20070d94 	.word	0x20070d94

00085410 <__sfvwrite_r>:
   85410:	6893      	ldr	r3, [r2, #8]
   85412:	2b00      	cmp	r3, #0
   85414:	f000 80b1 	beq.w	8557a <__sfvwrite_r+0x16a>
   85418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8541c:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   85420:	b083      	sub	sp, #12
   85422:	f01e 0f08 	tst.w	lr, #8
   85426:	460c      	mov	r4, r1
   85428:	4681      	mov	r9, r0
   8542a:	4616      	mov	r6, r2
   8542c:	d028      	beq.n	85480 <__sfvwrite_r+0x70>
   8542e:	690b      	ldr	r3, [r1, #16]
   85430:	b333      	cbz	r3, 85480 <__sfvwrite_r+0x70>
   85432:	f00e 0802 	and.w	r8, lr, #2
   85436:	fa1f f088 	uxth.w	r0, r8
   8543a:	6835      	ldr	r5, [r6, #0]
   8543c:	b380      	cbz	r0, 854a0 <__sfvwrite_r+0x90>
   8543e:	f04f 0b00 	mov.w	fp, #0
   85442:	46d8      	mov	r8, fp
   85444:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 8572c <__sfvwrite_r+0x31c>
   85448:	f1b8 0f00 	cmp.w	r8, #0
   8544c:	f000 808f 	beq.w	8556e <__sfvwrite_r+0x15e>
   85450:	45d0      	cmp	r8, sl
   85452:	4643      	mov	r3, r8
   85454:	4648      	mov	r0, r9
   85456:	bf28      	it	cs
   85458:	4653      	movcs	r3, sl
   8545a:	69e1      	ldr	r1, [r4, #28]
   8545c:	465a      	mov	r2, fp
   8545e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   85460:	47b8      	blx	r7
   85462:	2800      	cmp	r0, #0
   85464:	f340 80a8 	ble.w	855b8 <__sfvwrite_r+0x1a8>
   85468:	68b3      	ldr	r3, [r6, #8]
   8546a:	4483      	add	fp, r0
   8546c:	1a1b      	subs	r3, r3, r0
   8546e:	ebc0 0808 	rsb	r8, r0, r8
   85472:	60b3      	str	r3, [r6, #8]
   85474:	2b00      	cmp	r3, #0
   85476:	d1e7      	bne.n	85448 <__sfvwrite_r+0x38>
   85478:	2000      	movs	r0, #0
   8547a:	b003      	add	sp, #12
   8547c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85480:	4648      	mov	r0, r9
   85482:	4621      	mov	r1, r4
   85484:	f7ff fc6a 	bl	84d5c <__swsetup_r>
   85488:	2800      	cmp	r0, #0
   8548a:	f040 8146 	bne.w	8571a <__sfvwrite_r+0x30a>
   8548e:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   85492:	6835      	ldr	r5, [r6, #0]
   85494:	f00e 0802 	and.w	r8, lr, #2
   85498:	fa1f f088 	uxth.w	r0, r8
   8549c:	2800      	cmp	r0, #0
   8549e:	d1ce      	bne.n	8543e <__sfvwrite_r+0x2e>
   854a0:	f01e 0b01 	ands.w	fp, lr, #1
   854a4:	f040 8091 	bne.w	855ca <__sfvwrite_r+0x1ba>
   854a8:	46d8      	mov	r8, fp
   854aa:	f1b8 0f00 	cmp.w	r8, #0
   854ae:	d058      	beq.n	85562 <__sfvwrite_r+0x152>
   854b0:	f41e 7f00 	tst.w	lr, #512	; 0x200
   854b4:	68a7      	ldr	r7, [r4, #8]
   854b6:	d062      	beq.n	8557e <__sfvwrite_r+0x16e>
   854b8:	45b8      	cmp	r8, r7
   854ba:	46ba      	mov	sl, r7
   854bc:	f0c0 80c2 	bcc.w	85644 <__sfvwrite_r+0x234>
   854c0:	f41e 6f90 	tst.w	lr, #1152	; 0x480
   854c4:	f000 80c0 	beq.w	85648 <__sfvwrite_r+0x238>
   854c8:	6967      	ldr	r7, [r4, #20]
   854ca:	6921      	ldr	r1, [r4, #16]
   854cc:	6823      	ldr	r3, [r4, #0]
   854ce:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   854d2:	1a5b      	subs	r3, r3, r1
   854d4:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   854d8:	1c58      	adds	r0, r3, #1
   854da:	107f      	asrs	r7, r7, #1
   854dc:	4440      	add	r0, r8
   854de:	4287      	cmp	r7, r0
   854e0:	463a      	mov	r2, r7
   854e2:	bf3c      	itt	cc
   854e4:	4607      	movcc	r7, r0
   854e6:	463a      	movcc	r2, r7
   854e8:	f41e 6f80 	tst.w	lr, #1024	; 0x400
   854ec:	9300      	str	r3, [sp, #0]
   854ee:	f000 80fb 	beq.w	856e8 <__sfvwrite_r+0x2d8>
   854f2:	4611      	mov	r1, r2
   854f4:	4648      	mov	r0, r9
   854f6:	f000 f9c5 	bl	85884 <_malloc_r>
   854fa:	9b00      	ldr	r3, [sp, #0]
   854fc:	4682      	mov	sl, r0
   854fe:	2800      	cmp	r0, #0
   85500:	f000 810e 	beq.w	85720 <__sfvwrite_r+0x310>
   85504:	461a      	mov	r2, r3
   85506:	6921      	ldr	r1, [r4, #16]
   85508:	9300      	str	r3, [sp, #0]
   8550a:	f000 fc8b 	bl	85e24 <memcpy>
   8550e:	89a2      	ldrh	r2, [r4, #12]
   85510:	9b00      	ldr	r3, [sp, #0]
   85512:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   85516:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8551a:	81a2      	strh	r2, [r4, #12]
   8551c:	eb0a 0003 	add.w	r0, sl, r3
   85520:	f8c4 a010 	str.w	sl, [r4, #16]
   85524:	1afb      	subs	r3, r7, r3
   85526:	6167      	str	r7, [r4, #20]
   85528:	46c2      	mov	sl, r8
   8552a:	4647      	mov	r7, r8
   8552c:	6020      	str	r0, [r4, #0]
   8552e:	60a3      	str	r3, [r4, #8]
   85530:	4652      	mov	r2, sl
   85532:	4659      	mov	r1, fp
   85534:	f000 fcec 	bl	85f10 <memmove>
   85538:	68a0      	ldr	r0, [r4, #8]
   8553a:	6822      	ldr	r2, [r4, #0]
   8553c:	1bc0      	subs	r0, r0, r7
   8553e:	60a0      	str	r0, [r4, #8]
   85540:	4640      	mov	r0, r8
   85542:	eb02 030a 	add.w	r3, r2, sl
   85546:	6023      	str	r3, [r4, #0]
   85548:	68b3      	ldr	r3, [r6, #8]
   8554a:	4483      	add	fp, r0
   8554c:	1a1b      	subs	r3, r3, r0
   8554e:	ebc0 0808 	rsb	r8, r0, r8
   85552:	60b3      	str	r3, [r6, #8]
   85554:	2b00      	cmp	r3, #0
   85556:	d08f      	beq.n	85478 <__sfvwrite_r+0x68>
   85558:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   8555c:	f1b8 0f00 	cmp.w	r8, #0
   85560:	d1a6      	bne.n	854b0 <__sfvwrite_r+0xa0>
   85562:	f8d5 b000 	ldr.w	fp, [r5]
   85566:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8556a:	3508      	adds	r5, #8
   8556c:	e79d      	b.n	854aa <__sfvwrite_r+0x9a>
   8556e:	f8d5 b000 	ldr.w	fp, [r5]
   85572:	f8d5 8004 	ldr.w	r8, [r5, #4]
   85576:	3508      	adds	r5, #8
   85578:	e766      	b.n	85448 <__sfvwrite_r+0x38>
   8557a:	2000      	movs	r0, #0
   8557c:	4770      	bx	lr
   8557e:	6820      	ldr	r0, [r4, #0]
   85580:	6923      	ldr	r3, [r4, #16]
   85582:	4298      	cmp	r0, r3
   85584:	d803      	bhi.n	8558e <__sfvwrite_r+0x17e>
   85586:	6962      	ldr	r2, [r4, #20]
   85588:	4590      	cmp	r8, r2
   8558a:	f080 8085 	bcs.w	85698 <__sfvwrite_r+0x288>
   8558e:	4547      	cmp	r7, r8
   85590:	bf28      	it	cs
   85592:	4647      	movcs	r7, r8
   85594:	4659      	mov	r1, fp
   85596:	463a      	mov	r2, r7
   85598:	f000 fcba 	bl	85f10 <memmove>
   8559c:	68a3      	ldr	r3, [r4, #8]
   8559e:	6822      	ldr	r2, [r4, #0]
   855a0:	1bdb      	subs	r3, r3, r7
   855a2:	443a      	add	r2, r7
   855a4:	60a3      	str	r3, [r4, #8]
   855a6:	6022      	str	r2, [r4, #0]
   855a8:	2b00      	cmp	r3, #0
   855aa:	d149      	bne.n	85640 <__sfvwrite_r+0x230>
   855ac:	4648      	mov	r0, r9
   855ae:	4621      	mov	r1, r4
   855b0:	f7ff fcea 	bl	84f88 <_fflush_r>
   855b4:	2800      	cmp	r0, #0
   855b6:	d043      	beq.n	85640 <__sfvwrite_r+0x230>
   855b8:	89a3      	ldrh	r3, [r4, #12]
   855ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   855be:	f04f 30ff 	mov.w	r0, #4294967295
   855c2:	81a3      	strh	r3, [r4, #12]
   855c4:	b003      	add	sp, #12
   855c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   855ca:	4680      	mov	r8, r0
   855cc:	4683      	mov	fp, r0
   855ce:	4682      	mov	sl, r0
   855d0:	9000      	str	r0, [sp, #0]
   855d2:	f1ba 0f00 	cmp.w	sl, #0
   855d6:	d02b      	beq.n	85630 <__sfvwrite_r+0x220>
   855d8:	9b00      	ldr	r3, [sp, #0]
   855da:	2b00      	cmp	r3, #0
   855dc:	d04f      	beq.n	8567e <__sfvwrite_r+0x26e>
   855de:	45d0      	cmp	r8, sl
   855e0:	4643      	mov	r3, r8
   855e2:	bf28      	it	cs
   855e4:	4653      	movcs	r3, sl
   855e6:	6820      	ldr	r0, [r4, #0]
   855e8:	6921      	ldr	r1, [r4, #16]
   855ea:	461f      	mov	r7, r3
   855ec:	4288      	cmp	r0, r1
   855ee:	f8d4 e008 	ldr.w	lr, [r4, #8]
   855f2:	6962      	ldr	r2, [r4, #20]
   855f4:	d903      	bls.n	855fe <__sfvwrite_r+0x1ee>
   855f6:	eb0e 0c02 	add.w	ip, lr, r2
   855fa:	4563      	cmp	r3, ip
   855fc:	dc5e      	bgt.n	856bc <__sfvwrite_r+0x2ac>
   855fe:	4293      	cmp	r3, r2
   85600:	db24      	blt.n	8564c <__sfvwrite_r+0x23c>
   85602:	4613      	mov	r3, r2
   85604:	6a67      	ldr	r7, [r4, #36]	; 0x24
   85606:	4648      	mov	r0, r9
   85608:	69e1      	ldr	r1, [r4, #28]
   8560a:	465a      	mov	r2, fp
   8560c:	47b8      	blx	r7
   8560e:	1e07      	subs	r7, r0, #0
   85610:	ddd2      	ble.n	855b8 <__sfvwrite_r+0x1a8>
   85612:	ebb8 0807 	subs.w	r8, r8, r7
   85616:	d029      	beq.n	8566c <__sfvwrite_r+0x25c>
   85618:	68b3      	ldr	r3, [r6, #8]
   8561a:	44bb      	add	fp, r7
   8561c:	1bdb      	subs	r3, r3, r7
   8561e:	ebc7 0a0a 	rsb	sl, r7, sl
   85622:	60b3      	str	r3, [r6, #8]
   85624:	2b00      	cmp	r3, #0
   85626:	f43f af27 	beq.w	85478 <__sfvwrite_r+0x68>
   8562a:	f1ba 0f00 	cmp.w	sl, #0
   8562e:	d1d3      	bne.n	855d8 <__sfvwrite_r+0x1c8>
   85630:	2300      	movs	r3, #0
   85632:	f8d5 b000 	ldr.w	fp, [r5]
   85636:	f8d5 a004 	ldr.w	sl, [r5, #4]
   8563a:	9300      	str	r3, [sp, #0]
   8563c:	3508      	adds	r5, #8
   8563e:	e7c8      	b.n	855d2 <__sfvwrite_r+0x1c2>
   85640:	4638      	mov	r0, r7
   85642:	e781      	b.n	85548 <__sfvwrite_r+0x138>
   85644:	4647      	mov	r7, r8
   85646:	46c2      	mov	sl, r8
   85648:	6820      	ldr	r0, [r4, #0]
   8564a:	e771      	b.n	85530 <__sfvwrite_r+0x120>
   8564c:	461a      	mov	r2, r3
   8564e:	4659      	mov	r1, fp
   85650:	9301      	str	r3, [sp, #4]
   85652:	f000 fc5d 	bl	85f10 <memmove>
   85656:	68a2      	ldr	r2, [r4, #8]
   85658:	6821      	ldr	r1, [r4, #0]
   8565a:	9b01      	ldr	r3, [sp, #4]
   8565c:	ebb8 0807 	subs.w	r8, r8, r7
   85660:	eba2 0203 	sub.w	r2, r2, r3
   85664:	440b      	add	r3, r1
   85666:	60a2      	str	r2, [r4, #8]
   85668:	6023      	str	r3, [r4, #0]
   8566a:	d1d5      	bne.n	85618 <__sfvwrite_r+0x208>
   8566c:	4648      	mov	r0, r9
   8566e:	4621      	mov	r1, r4
   85670:	f7ff fc8a 	bl	84f88 <_fflush_r>
   85674:	2800      	cmp	r0, #0
   85676:	d19f      	bne.n	855b8 <__sfvwrite_r+0x1a8>
   85678:	f8cd 8000 	str.w	r8, [sp]
   8567c:	e7cc      	b.n	85618 <__sfvwrite_r+0x208>
   8567e:	4658      	mov	r0, fp
   85680:	210a      	movs	r1, #10
   85682:	4652      	mov	r2, sl
   85684:	f000 fb84 	bl	85d90 <memchr>
   85688:	2800      	cmp	r0, #0
   8568a:	d041      	beq.n	85710 <__sfvwrite_r+0x300>
   8568c:	3001      	adds	r0, #1
   8568e:	2301      	movs	r3, #1
   85690:	ebcb 0800 	rsb	r8, fp, r0
   85694:	9300      	str	r3, [sp, #0]
   85696:	e7a2      	b.n	855de <__sfvwrite_r+0x1ce>
   85698:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   8569c:	4543      	cmp	r3, r8
   8569e:	bf28      	it	cs
   856a0:	4643      	movcs	r3, r8
   856a2:	fb93 f3f2 	sdiv	r3, r3, r2
   856a6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   856a8:	fb03 f302 	mul.w	r3, r3, r2
   856ac:	4648      	mov	r0, r9
   856ae:	69e1      	ldr	r1, [r4, #28]
   856b0:	465a      	mov	r2, fp
   856b2:	47b8      	blx	r7
   856b4:	2800      	cmp	r0, #0
   856b6:	f73f af47 	bgt.w	85548 <__sfvwrite_r+0x138>
   856ba:	e77d      	b.n	855b8 <__sfvwrite_r+0x1a8>
   856bc:	4662      	mov	r2, ip
   856be:	4659      	mov	r1, fp
   856c0:	f8cd c004 	str.w	ip, [sp, #4]
   856c4:	f000 fc24 	bl	85f10 <memmove>
   856c8:	6823      	ldr	r3, [r4, #0]
   856ca:	f8dd c004 	ldr.w	ip, [sp, #4]
   856ce:	4648      	mov	r0, r9
   856d0:	4463      	add	r3, ip
   856d2:	6023      	str	r3, [r4, #0]
   856d4:	4621      	mov	r1, r4
   856d6:	f7ff fc57 	bl	84f88 <_fflush_r>
   856da:	f8dd c004 	ldr.w	ip, [sp, #4]
   856de:	2800      	cmp	r0, #0
   856e0:	f47f af6a 	bne.w	855b8 <__sfvwrite_r+0x1a8>
   856e4:	4667      	mov	r7, ip
   856e6:	e794      	b.n	85612 <__sfvwrite_r+0x202>
   856e8:	4648      	mov	r0, r9
   856ea:	f000 fc79 	bl	85fe0 <_realloc_r>
   856ee:	9b00      	ldr	r3, [sp, #0]
   856f0:	4682      	mov	sl, r0
   856f2:	2800      	cmp	r0, #0
   856f4:	f47f af12 	bne.w	8551c <__sfvwrite_r+0x10c>
   856f8:	4648      	mov	r0, r9
   856fa:	6921      	ldr	r1, [r4, #16]
   856fc:	f7ff fdb0 	bl	85260 <_free_r>
   85700:	89a3      	ldrh	r3, [r4, #12]
   85702:	220c      	movs	r2, #12
   85704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   85708:	b29b      	uxth	r3, r3
   8570a:	f8c9 2000 	str.w	r2, [r9]
   8570e:	e754      	b.n	855ba <__sfvwrite_r+0x1aa>
   85710:	2301      	movs	r3, #1
   85712:	f10a 0801 	add.w	r8, sl, #1
   85716:	9300      	str	r3, [sp, #0]
   85718:	e761      	b.n	855de <__sfvwrite_r+0x1ce>
   8571a:	f04f 30ff 	mov.w	r0, #4294967295
   8571e:	e6ac      	b.n	8547a <__sfvwrite_r+0x6a>
   85720:	230c      	movs	r3, #12
   85722:	f8c9 3000 	str.w	r3, [r9]
   85726:	89a3      	ldrh	r3, [r4, #12]
   85728:	e747      	b.n	855ba <__sfvwrite_r+0x1aa>
   8572a:	bf00      	nop
   8572c:	7ffffc00 	.word	0x7ffffc00

00085730 <_fwalk_reent>:
   85730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   85734:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   85738:	d01e      	beq.n	85778 <_fwalk_reent+0x48>
   8573a:	4688      	mov	r8, r1
   8573c:	4607      	mov	r7, r0
   8573e:	f04f 0900 	mov.w	r9, #0
   85742:	6875      	ldr	r5, [r6, #4]
   85744:	68b4      	ldr	r4, [r6, #8]
   85746:	3d01      	subs	r5, #1
   85748:	d410      	bmi.n	8576c <_fwalk_reent+0x3c>
   8574a:	89a3      	ldrh	r3, [r4, #12]
   8574c:	3d01      	subs	r5, #1
   8574e:	2b01      	cmp	r3, #1
   85750:	d908      	bls.n	85764 <_fwalk_reent+0x34>
   85752:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   85756:	3301      	adds	r3, #1
   85758:	d004      	beq.n	85764 <_fwalk_reent+0x34>
   8575a:	4638      	mov	r0, r7
   8575c:	4621      	mov	r1, r4
   8575e:	47c0      	blx	r8
   85760:	ea49 0900 	orr.w	r9, r9, r0
   85764:	1c6b      	adds	r3, r5, #1
   85766:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8576a:	d1ee      	bne.n	8574a <_fwalk_reent+0x1a>
   8576c:	6836      	ldr	r6, [r6, #0]
   8576e:	2e00      	cmp	r6, #0
   85770:	d1e7      	bne.n	85742 <_fwalk_reent+0x12>
   85772:	4648      	mov	r0, r9
   85774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85778:	46b1      	mov	r9, r6
   8577a:	4648      	mov	r0, r9
   8577c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00085780 <__locale_charset>:
   85780:	4800      	ldr	r0, [pc, #0]	; (85784 <__locale_charset+0x4>)
   85782:	4770      	bx	lr
   85784:	20070834 	.word	0x20070834

00085788 <__locale_mb_cur_max>:
   85788:	4b01      	ldr	r3, [pc, #4]	; (85790 <__locale_mb_cur_max+0x8>)
   8578a:	6818      	ldr	r0, [r3, #0]
   8578c:	4770      	bx	lr
   8578e:	bf00      	nop
   85790:	20070854 	.word	0x20070854

00085794 <__smakebuf_r>:
   85794:	898b      	ldrh	r3, [r1, #12]
   85796:	b29a      	uxth	r2, r3
   85798:	f012 0f02 	tst.w	r2, #2
   8579c:	d13c      	bne.n	85818 <__smakebuf_r+0x84>
   8579e:	b5f0      	push	{r4, r5, r6, r7, lr}
   857a0:	460c      	mov	r4, r1
   857a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   857a6:	b091      	sub	sp, #68	; 0x44
   857a8:	2900      	cmp	r1, #0
   857aa:	4605      	mov	r5, r0
   857ac:	db19      	blt.n	857e2 <__smakebuf_r+0x4e>
   857ae:	aa01      	add	r2, sp, #4
   857b0:	f000 ffa0 	bl	866f4 <_fstat_r>
   857b4:	2800      	cmp	r0, #0
   857b6:	db12      	blt.n	857de <__smakebuf_r+0x4a>
   857b8:	9b02      	ldr	r3, [sp, #8]
   857ba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   857be:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
   857c2:	fab7 f787 	clz	r7, r7
   857c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   857ca:	ea4f 1757 	mov.w	r7, r7, lsr #5
   857ce:	d02a      	beq.n	85826 <__smakebuf_r+0x92>
   857d0:	89a3      	ldrh	r3, [r4, #12]
   857d2:	f44f 6680 	mov.w	r6, #1024	; 0x400
   857d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   857da:	81a3      	strh	r3, [r4, #12]
   857dc:	e00b      	b.n	857f6 <__smakebuf_r+0x62>
   857de:	89a3      	ldrh	r3, [r4, #12]
   857e0:	b29a      	uxth	r2, r3
   857e2:	f012 0f80 	tst.w	r2, #128	; 0x80
   857e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   857ea:	81a3      	strh	r3, [r4, #12]
   857ec:	bf0c      	ite	eq
   857ee:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   857f2:	2640      	movne	r6, #64	; 0x40
   857f4:	2700      	movs	r7, #0
   857f6:	4628      	mov	r0, r5
   857f8:	4631      	mov	r1, r6
   857fa:	f000 f843 	bl	85884 <_malloc_r>
   857fe:	89a3      	ldrh	r3, [r4, #12]
   85800:	b340      	cbz	r0, 85854 <__smakebuf_r+0xc0>
   85802:	4a1a      	ldr	r2, [pc, #104]	; (8586c <__smakebuf_r+0xd8>)
   85804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   85808:	63ea      	str	r2, [r5, #60]	; 0x3c
   8580a:	81a3      	strh	r3, [r4, #12]
   8580c:	6020      	str	r0, [r4, #0]
   8580e:	6120      	str	r0, [r4, #16]
   85810:	6166      	str	r6, [r4, #20]
   85812:	b99f      	cbnz	r7, 8583c <__smakebuf_r+0xa8>
   85814:	b011      	add	sp, #68	; 0x44
   85816:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85818:	f101 0343 	add.w	r3, r1, #67	; 0x43
   8581c:	2201      	movs	r2, #1
   8581e:	600b      	str	r3, [r1, #0]
   85820:	610b      	str	r3, [r1, #16]
   85822:	614a      	str	r2, [r1, #20]
   85824:	4770      	bx	lr
   85826:	4b12      	ldr	r3, [pc, #72]	; (85870 <__smakebuf_r+0xdc>)
   85828:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   8582a:	429a      	cmp	r2, r3
   8582c:	d1d0      	bne.n	857d0 <__smakebuf_r+0x3c>
   8582e:	89a3      	ldrh	r3, [r4, #12]
   85830:	f44f 6680 	mov.w	r6, #1024	; 0x400
   85834:	4333      	orrs	r3, r6
   85836:	81a3      	strh	r3, [r4, #12]
   85838:	64e6      	str	r6, [r4, #76]	; 0x4c
   8583a:	e7dc      	b.n	857f6 <__smakebuf_r+0x62>
   8583c:	4628      	mov	r0, r5
   8583e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85842:	f000 ff6b 	bl	8671c <_isatty_r>
   85846:	2800      	cmp	r0, #0
   85848:	d0e4      	beq.n	85814 <__smakebuf_r+0x80>
   8584a:	89a3      	ldrh	r3, [r4, #12]
   8584c:	f043 0301 	orr.w	r3, r3, #1
   85850:	81a3      	strh	r3, [r4, #12]
   85852:	e7df      	b.n	85814 <__smakebuf_r+0x80>
   85854:	059a      	lsls	r2, r3, #22
   85856:	d4dd      	bmi.n	85814 <__smakebuf_r+0x80>
   85858:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8585c:	f043 0302 	orr.w	r3, r3, #2
   85860:	2101      	movs	r1, #1
   85862:	81a3      	strh	r3, [r4, #12]
   85864:	6022      	str	r2, [r4, #0]
   85866:	6122      	str	r2, [r4, #16]
   85868:	6161      	str	r1, [r4, #20]
   8586a:	e7d3      	b.n	85814 <__smakebuf_r+0x80>
   8586c:	00084fb5 	.word	0x00084fb5
   85870:	00086441 	.word	0x00086441

00085874 <malloc>:
   85874:	4b02      	ldr	r3, [pc, #8]	; (85880 <malloc+0xc>)
   85876:	4601      	mov	r1, r0
   85878:	6818      	ldr	r0, [r3, #0]
   8587a:	f000 b803 	b.w	85884 <_malloc_r>
   8587e:	bf00      	nop
   85880:	20070830 	.word	0x20070830

00085884 <_malloc_r>:
   85884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85888:	f101 050b 	add.w	r5, r1, #11
   8588c:	2d16      	cmp	r5, #22
   8588e:	b083      	sub	sp, #12
   85890:	4606      	mov	r6, r0
   85892:	d927      	bls.n	858e4 <_malloc_r+0x60>
   85894:	f035 0507 	bics.w	r5, r5, #7
   85898:	f100 80b6 	bmi.w	85a08 <_malloc_r+0x184>
   8589c:	42a9      	cmp	r1, r5
   8589e:	f200 80b3 	bhi.w	85a08 <_malloc_r+0x184>
   858a2:	f000 fb99 	bl	85fd8 <__malloc_lock>
   858a6:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   858aa:	d222      	bcs.n	858f2 <_malloc_r+0x6e>
   858ac:	4fbc      	ldr	r7, [pc, #752]	; (85ba0 <_malloc_r+0x31c>)
   858ae:	08e8      	lsrs	r0, r5, #3
   858b0:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
   858b4:	68dc      	ldr	r4, [r3, #12]
   858b6:	429c      	cmp	r4, r3
   858b8:	f000 81bc 	beq.w	85c34 <_malloc_r+0x3b0>
   858bc:	6863      	ldr	r3, [r4, #4]
   858be:	68e1      	ldr	r1, [r4, #12]
   858c0:	f023 0303 	bic.w	r3, r3, #3
   858c4:	4423      	add	r3, r4
   858c6:	685a      	ldr	r2, [r3, #4]
   858c8:	68a5      	ldr	r5, [r4, #8]
   858ca:	f042 0201 	orr.w	r2, r2, #1
   858ce:	60e9      	str	r1, [r5, #12]
   858d0:	4630      	mov	r0, r6
   858d2:	608d      	str	r5, [r1, #8]
   858d4:	605a      	str	r2, [r3, #4]
   858d6:	f000 fb81 	bl	85fdc <__malloc_unlock>
   858da:	3408      	adds	r4, #8
   858dc:	4620      	mov	r0, r4
   858de:	b003      	add	sp, #12
   858e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   858e4:	2910      	cmp	r1, #16
   858e6:	f200 808f 	bhi.w	85a08 <_malloc_r+0x184>
   858ea:	f000 fb75 	bl	85fd8 <__malloc_lock>
   858ee:	2510      	movs	r5, #16
   858f0:	e7dc      	b.n	858ac <_malloc_r+0x28>
   858f2:	0a68      	lsrs	r0, r5, #9
   858f4:	f000 808f 	beq.w	85a16 <_malloc_r+0x192>
   858f8:	2804      	cmp	r0, #4
   858fa:	f200 8147 	bhi.w	85b8c <_malloc_r+0x308>
   858fe:	09a8      	lsrs	r0, r5, #6
   85900:	3038      	adds	r0, #56	; 0x38
   85902:	0041      	lsls	r1, r0, #1
   85904:	4fa6      	ldr	r7, [pc, #664]	; (85ba0 <_malloc_r+0x31c>)
   85906:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   8590a:	68cc      	ldr	r4, [r1, #12]
   8590c:	42a1      	cmp	r1, r4
   8590e:	d106      	bne.n	8591e <_malloc_r+0x9a>
   85910:	e00c      	b.n	8592c <_malloc_r+0xa8>
   85912:	2a00      	cmp	r2, #0
   85914:	f280 8082 	bge.w	85a1c <_malloc_r+0x198>
   85918:	68e4      	ldr	r4, [r4, #12]
   8591a:	42a1      	cmp	r1, r4
   8591c:	d006      	beq.n	8592c <_malloc_r+0xa8>
   8591e:	6863      	ldr	r3, [r4, #4]
   85920:	f023 0303 	bic.w	r3, r3, #3
   85924:	1b5a      	subs	r2, r3, r5
   85926:	2a0f      	cmp	r2, #15
   85928:	ddf3      	ble.n	85912 <_malloc_r+0x8e>
   8592a:	3801      	subs	r0, #1
   8592c:	3001      	adds	r0, #1
   8592e:	499c      	ldr	r1, [pc, #624]	; (85ba0 <_malloc_r+0x31c>)
   85930:	693c      	ldr	r4, [r7, #16]
   85932:	f101 0e08 	add.w	lr, r1, #8
   85936:	4574      	cmp	r4, lr
   85938:	f000 8171 	beq.w	85c1e <_malloc_r+0x39a>
   8593c:	6863      	ldr	r3, [r4, #4]
   8593e:	f023 0303 	bic.w	r3, r3, #3
   85942:	1b5a      	subs	r2, r3, r5
   85944:	2a0f      	cmp	r2, #15
   85946:	f300 8157 	bgt.w	85bf8 <_malloc_r+0x374>
   8594a:	2a00      	cmp	r2, #0
   8594c:	f8c1 e014 	str.w	lr, [r1, #20]
   85950:	f8c1 e010 	str.w	lr, [r1, #16]
   85954:	da66      	bge.n	85a24 <_malloc_r+0x1a0>
   85956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8595a:	f080 812d 	bcs.w	85bb8 <_malloc_r+0x334>
   8595e:	08db      	lsrs	r3, r3, #3
   85960:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
   85964:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   85968:	684a      	ldr	r2, [r1, #4]
   8596a:	2301      	movs	r3, #1
   8596c:	fa03 f30c 	lsl.w	r3, r3, ip
   85970:	f8d8 c008 	ldr.w	ip, [r8, #8]
   85974:	4313      	orrs	r3, r2
   85976:	f8c4 c008 	str.w	ip, [r4, #8]
   8597a:	f8c4 800c 	str.w	r8, [r4, #12]
   8597e:	604b      	str	r3, [r1, #4]
   85980:	f8c8 4008 	str.w	r4, [r8, #8]
   85984:	f8cc 400c 	str.w	r4, [ip, #12]
   85988:	1082      	asrs	r2, r0, #2
   8598a:	2401      	movs	r4, #1
   8598c:	4094      	lsls	r4, r2
   8598e:	429c      	cmp	r4, r3
   85990:	d855      	bhi.n	85a3e <_malloc_r+0x1ba>
   85992:	4223      	tst	r3, r4
   85994:	d106      	bne.n	859a4 <_malloc_r+0x120>
   85996:	f020 0003 	bic.w	r0, r0, #3
   8599a:	0064      	lsls	r4, r4, #1
   8599c:	4223      	tst	r3, r4
   8599e:	f100 0004 	add.w	r0, r0, #4
   859a2:	d0fa      	beq.n	8599a <_malloc_r+0x116>
   859a4:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
   859a8:	46c4      	mov	ip, r8
   859aa:	4681      	mov	r9, r0
   859ac:	f8dc 300c 	ldr.w	r3, [ip, #12]
   859b0:	459c      	cmp	ip, r3
   859b2:	d107      	bne.n	859c4 <_malloc_r+0x140>
   859b4:	e135      	b.n	85c22 <_malloc_r+0x39e>
   859b6:	2900      	cmp	r1, #0
   859b8:	f280 8145 	bge.w	85c46 <_malloc_r+0x3c2>
   859bc:	68db      	ldr	r3, [r3, #12]
   859be:	459c      	cmp	ip, r3
   859c0:	f000 812f 	beq.w	85c22 <_malloc_r+0x39e>
   859c4:	685a      	ldr	r2, [r3, #4]
   859c6:	f022 0203 	bic.w	r2, r2, #3
   859ca:	1b51      	subs	r1, r2, r5
   859cc:	290f      	cmp	r1, #15
   859ce:	ddf2      	ble.n	859b6 <_malloc_r+0x132>
   859d0:	461c      	mov	r4, r3
   859d2:	68da      	ldr	r2, [r3, #12]
   859d4:	f854 cf08 	ldr.w	ip, [r4, #8]!
   859d8:	f045 0901 	orr.w	r9, r5, #1
   859dc:	f041 0801 	orr.w	r8, r1, #1
   859e0:	441d      	add	r5, r3
   859e2:	f8c3 9004 	str.w	r9, [r3, #4]
   859e6:	4630      	mov	r0, r6
   859e8:	f8cc 200c 	str.w	r2, [ip, #12]
   859ec:	f8c2 c008 	str.w	ip, [r2, #8]
   859f0:	617d      	str	r5, [r7, #20]
   859f2:	613d      	str	r5, [r7, #16]
   859f4:	f8c5 e00c 	str.w	lr, [r5, #12]
   859f8:	f8c5 e008 	str.w	lr, [r5, #8]
   859fc:	f8c5 8004 	str.w	r8, [r5, #4]
   85a00:	5069      	str	r1, [r5, r1]
   85a02:	f000 faeb 	bl	85fdc <__malloc_unlock>
   85a06:	e769      	b.n	858dc <_malloc_r+0x58>
   85a08:	2400      	movs	r4, #0
   85a0a:	4620      	mov	r0, r4
   85a0c:	230c      	movs	r3, #12
   85a0e:	6033      	str	r3, [r6, #0]
   85a10:	b003      	add	sp, #12
   85a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85a16:	217e      	movs	r1, #126	; 0x7e
   85a18:	203f      	movs	r0, #63	; 0x3f
   85a1a:	e773      	b.n	85904 <_malloc_r+0x80>
   85a1c:	4423      	add	r3, r4
   85a1e:	685a      	ldr	r2, [r3, #4]
   85a20:	68e1      	ldr	r1, [r4, #12]
   85a22:	e751      	b.n	858c8 <_malloc_r+0x44>
   85a24:	4423      	add	r3, r4
   85a26:	685a      	ldr	r2, [r3, #4]
   85a28:	4630      	mov	r0, r6
   85a2a:	f042 0201 	orr.w	r2, r2, #1
   85a2e:	605a      	str	r2, [r3, #4]
   85a30:	3408      	adds	r4, #8
   85a32:	f000 fad3 	bl	85fdc <__malloc_unlock>
   85a36:	4620      	mov	r0, r4
   85a38:	b003      	add	sp, #12
   85a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85a3e:	68bc      	ldr	r4, [r7, #8]
   85a40:	6863      	ldr	r3, [r4, #4]
   85a42:	f023 0803 	bic.w	r8, r3, #3
   85a46:	4545      	cmp	r5, r8
   85a48:	d804      	bhi.n	85a54 <_malloc_r+0x1d0>
   85a4a:	ebc5 0308 	rsb	r3, r5, r8
   85a4e:	2b0f      	cmp	r3, #15
   85a50:	f300 808c 	bgt.w	85b6c <_malloc_r+0x2e8>
   85a54:	4b53      	ldr	r3, [pc, #332]	; (85ba4 <_malloc_r+0x320>)
   85a56:	f8df a15c 	ldr.w	sl, [pc, #348]	; 85bb4 <_malloc_r+0x330>
   85a5a:	681a      	ldr	r2, [r3, #0]
   85a5c:	f8da 3000 	ldr.w	r3, [sl]
   85a60:	442a      	add	r2, r5
   85a62:	3301      	adds	r3, #1
   85a64:	eb04 0b08 	add.w	fp, r4, r8
   85a68:	f000 8151 	beq.w	85d0e <_malloc_r+0x48a>
   85a6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   85a70:	320f      	adds	r2, #15
   85a72:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   85a76:	f022 020f 	bic.w	r2, r2, #15
   85a7a:	4611      	mov	r1, r2
   85a7c:	4630      	mov	r0, r6
   85a7e:	9201      	str	r2, [sp, #4]
   85a80:	f000 fc9e 	bl	863c0 <_sbrk_r>
   85a84:	f1b0 3fff 	cmp.w	r0, #4294967295
   85a88:	4681      	mov	r9, r0
   85a8a:	9a01      	ldr	r2, [sp, #4]
   85a8c:	f000 8148 	beq.w	85d20 <_malloc_r+0x49c>
   85a90:	4583      	cmp	fp, r0
   85a92:	f200 80ef 	bhi.w	85c74 <_malloc_r+0x3f0>
   85a96:	4b44      	ldr	r3, [pc, #272]	; (85ba8 <_malloc_r+0x324>)
   85a98:	45cb      	cmp	fp, r9
   85a9a:	6819      	ldr	r1, [r3, #0]
   85a9c:	4411      	add	r1, r2
   85a9e:	6019      	str	r1, [r3, #0]
   85aa0:	f000 8143 	beq.w	85d2a <_malloc_r+0x4a6>
   85aa4:	f8da 0000 	ldr.w	r0, [sl]
   85aa8:	f8df e108 	ldr.w	lr, [pc, #264]	; 85bb4 <_malloc_r+0x330>
   85aac:	3001      	adds	r0, #1
   85aae:	bf1b      	ittet	ne
   85ab0:	ebcb 0b09 	rsbne	fp, fp, r9
   85ab4:	4459      	addne	r1, fp
   85ab6:	f8ce 9000 	streq.w	r9, [lr]
   85aba:	6019      	strne	r1, [r3, #0]
   85abc:	f019 0107 	ands.w	r1, r9, #7
   85ac0:	f000 8108 	beq.w	85cd4 <_malloc_r+0x450>
   85ac4:	f1c1 0008 	rsb	r0, r1, #8
   85ac8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   85acc:	4481      	add	r9, r0
   85ace:	3108      	adds	r1, #8
   85ad0:	444a      	add	r2, r9
   85ad2:	f3c2 020b 	ubfx	r2, r2, #0, #12
   85ad6:	ebc2 0a01 	rsb	sl, r2, r1
   85ada:	4651      	mov	r1, sl
   85adc:	4630      	mov	r0, r6
   85ade:	9301      	str	r3, [sp, #4]
   85ae0:	f000 fc6e 	bl	863c0 <_sbrk_r>
   85ae4:	1c43      	adds	r3, r0, #1
   85ae6:	9b01      	ldr	r3, [sp, #4]
   85ae8:	f000 812d 	beq.w	85d46 <_malloc_r+0x4c2>
   85aec:	ebc9 0200 	rsb	r2, r9, r0
   85af0:	4452      	add	r2, sl
   85af2:	f042 0201 	orr.w	r2, r2, #1
   85af6:	6819      	ldr	r1, [r3, #0]
   85af8:	42bc      	cmp	r4, r7
   85afa:	4451      	add	r1, sl
   85afc:	f8c7 9008 	str.w	r9, [r7, #8]
   85b00:	6019      	str	r1, [r3, #0]
   85b02:	f8c9 2004 	str.w	r2, [r9, #4]
   85b06:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 85ba8 <_malloc_r+0x324>
   85b0a:	d016      	beq.n	85b3a <_malloc_r+0x2b6>
   85b0c:	f1b8 0f0f 	cmp.w	r8, #15
   85b10:	f240 80ef 	bls.w	85cf2 <_malloc_r+0x46e>
   85b14:	6862      	ldr	r2, [r4, #4]
   85b16:	f1a8 030c 	sub.w	r3, r8, #12
   85b1a:	f023 0307 	bic.w	r3, r3, #7
   85b1e:	f002 0201 	and.w	r2, r2, #1
   85b22:	18e0      	adds	r0, r4, r3
   85b24:	f04f 0e05 	mov.w	lr, #5
   85b28:	431a      	orrs	r2, r3
   85b2a:	2b0f      	cmp	r3, #15
   85b2c:	6062      	str	r2, [r4, #4]
   85b2e:	f8c0 e004 	str.w	lr, [r0, #4]
   85b32:	f8c0 e008 	str.w	lr, [r0, #8]
   85b36:	f200 810a 	bhi.w	85d4e <_malloc_r+0x4ca>
   85b3a:	4b1c      	ldr	r3, [pc, #112]	; (85bac <_malloc_r+0x328>)
   85b3c:	68bc      	ldr	r4, [r7, #8]
   85b3e:	681a      	ldr	r2, [r3, #0]
   85b40:	4291      	cmp	r1, r2
   85b42:	bf88      	it	hi
   85b44:	6019      	strhi	r1, [r3, #0]
   85b46:	4b1a      	ldr	r3, [pc, #104]	; (85bb0 <_malloc_r+0x32c>)
   85b48:	681a      	ldr	r2, [r3, #0]
   85b4a:	4291      	cmp	r1, r2
   85b4c:	6862      	ldr	r2, [r4, #4]
   85b4e:	bf88      	it	hi
   85b50:	6019      	strhi	r1, [r3, #0]
   85b52:	f022 0203 	bic.w	r2, r2, #3
   85b56:	4295      	cmp	r5, r2
   85b58:	eba2 0305 	sub.w	r3, r2, r5
   85b5c:	d801      	bhi.n	85b62 <_malloc_r+0x2de>
   85b5e:	2b0f      	cmp	r3, #15
   85b60:	dc04      	bgt.n	85b6c <_malloc_r+0x2e8>
   85b62:	4630      	mov	r0, r6
   85b64:	f000 fa3a 	bl	85fdc <__malloc_unlock>
   85b68:	2400      	movs	r4, #0
   85b6a:	e6b7      	b.n	858dc <_malloc_r+0x58>
   85b6c:	f045 0201 	orr.w	r2, r5, #1
   85b70:	f043 0301 	orr.w	r3, r3, #1
   85b74:	4425      	add	r5, r4
   85b76:	6062      	str	r2, [r4, #4]
   85b78:	4630      	mov	r0, r6
   85b7a:	60bd      	str	r5, [r7, #8]
   85b7c:	3408      	adds	r4, #8
   85b7e:	606b      	str	r3, [r5, #4]
   85b80:	f000 fa2c 	bl	85fdc <__malloc_unlock>
   85b84:	4620      	mov	r0, r4
   85b86:	b003      	add	sp, #12
   85b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85b8c:	2814      	cmp	r0, #20
   85b8e:	d969      	bls.n	85c64 <_malloc_r+0x3e0>
   85b90:	2854      	cmp	r0, #84	; 0x54
   85b92:	f200 8098 	bhi.w	85cc6 <_malloc_r+0x442>
   85b96:	0b28      	lsrs	r0, r5, #12
   85b98:	306e      	adds	r0, #110	; 0x6e
   85b9a:	0041      	lsls	r1, r0, #1
   85b9c:	e6b2      	b.n	85904 <_malloc_r+0x80>
   85b9e:	bf00      	nop
   85ba0:	20070858 	.word	0x20070858
   85ba4:	20070d94 	.word	0x20070d94
   85ba8:	20070d98 	.word	0x20070d98
   85bac:	20070d90 	.word	0x20070d90
   85bb0:	20070d8c 	.word	0x20070d8c
   85bb4:	20070c64 	.word	0x20070c64
   85bb8:	0a5a      	lsrs	r2, r3, #9
   85bba:	2a04      	cmp	r2, #4
   85bbc:	d955      	bls.n	85c6a <_malloc_r+0x3e6>
   85bbe:	2a14      	cmp	r2, #20
   85bc0:	f200 80a7 	bhi.w	85d12 <_malloc_r+0x48e>
   85bc4:	325b      	adds	r2, #91	; 0x5b
   85bc6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   85bca:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
   85bce:	f8dc 1008 	ldr.w	r1, [ip, #8]
   85bd2:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 85d8c <_malloc_r+0x508>
   85bd6:	4561      	cmp	r1, ip
   85bd8:	d07f      	beq.n	85cda <_malloc_r+0x456>
   85bda:	684a      	ldr	r2, [r1, #4]
   85bdc:	f022 0203 	bic.w	r2, r2, #3
   85be0:	4293      	cmp	r3, r2
   85be2:	d202      	bcs.n	85bea <_malloc_r+0x366>
   85be4:	6889      	ldr	r1, [r1, #8]
   85be6:	458c      	cmp	ip, r1
   85be8:	d1f7      	bne.n	85bda <_malloc_r+0x356>
   85bea:	68ca      	ldr	r2, [r1, #12]
   85bec:	687b      	ldr	r3, [r7, #4]
   85bee:	60e2      	str	r2, [r4, #12]
   85bf0:	60a1      	str	r1, [r4, #8]
   85bf2:	6094      	str	r4, [r2, #8]
   85bf4:	60cc      	str	r4, [r1, #12]
   85bf6:	e6c7      	b.n	85988 <_malloc_r+0x104>
   85bf8:	f045 0701 	orr.w	r7, r5, #1
   85bfc:	f042 0301 	orr.w	r3, r2, #1
   85c00:	4425      	add	r5, r4
   85c02:	6067      	str	r7, [r4, #4]
   85c04:	4630      	mov	r0, r6
   85c06:	614d      	str	r5, [r1, #20]
   85c08:	610d      	str	r5, [r1, #16]
   85c0a:	f8c5 e00c 	str.w	lr, [r5, #12]
   85c0e:	f8c5 e008 	str.w	lr, [r5, #8]
   85c12:	606b      	str	r3, [r5, #4]
   85c14:	50aa      	str	r2, [r5, r2]
   85c16:	3408      	adds	r4, #8
   85c18:	f000 f9e0 	bl	85fdc <__malloc_unlock>
   85c1c:	e65e      	b.n	858dc <_malloc_r+0x58>
   85c1e:	684b      	ldr	r3, [r1, #4]
   85c20:	e6b2      	b.n	85988 <_malloc_r+0x104>
   85c22:	f109 0901 	add.w	r9, r9, #1
   85c26:	f019 0f03 	tst.w	r9, #3
   85c2a:	f10c 0c08 	add.w	ip, ip, #8
   85c2e:	f47f aebd 	bne.w	859ac <_malloc_r+0x128>
   85c32:	e02c      	b.n	85c8e <_malloc_r+0x40a>
   85c34:	f104 0308 	add.w	r3, r4, #8
   85c38:	6964      	ldr	r4, [r4, #20]
   85c3a:	42a3      	cmp	r3, r4
   85c3c:	bf08      	it	eq
   85c3e:	3002      	addeq	r0, #2
   85c40:	f43f ae75 	beq.w	8592e <_malloc_r+0xaa>
   85c44:	e63a      	b.n	858bc <_malloc_r+0x38>
   85c46:	461c      	mov	r4, r3
   85c48:	441a      	add	r2, r3
   85c4a:	6851      	ldr	r1, [r2, #4]
   85c4c:	68db      	ldr	r3, [r3, #12]
   85c4e:	f854 5f08 	ldr.w	r5, [r4, #8]!
   85c52:	f041 0101 	orr.w	r1, r1, #1
   85c56:	6051      	str	r1, [r2, #4]
   85c58:	4630      	mov	r0, r6
   85c5a:	60eb      	str	r3, [r5, #12]
   85c5c:	609d      	str	r5, [r3, #8]
   85c5e:	f000 f9bd 	bl	85fdc <__malloc_unlock>
   85c62:	e63b      	b.n	858dc <_malloc_r+0x58>
   85c64:	305b      	adds	r0, #91	; 0x5b
   85c66:	0041      	lsls	r1, r0, #1
   85c68:	e64c      	b.n	85904 <_malloc_r+0x80>
   85c6a:	099a      	lsrs	r2, r3, #6
   85c6c:	3238      	adds	r2, #56	; 0x38
   85c6e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   85c72:	e7aa      	b.n	85bca <_malloc_r+0x346>
   85c74:	42bc      	cmp	r4, r7
   85c76:	4b45      	ldr	r3, [pc, #276]	; (85d8c <_malloc_r+0x508>)
   85c78:	f43f af0d 	beq.w	85a96 <_malloc_r+0x212>
   85c7c:	689c      	ldr	r4, [r3, #8]
   85c7e:	6862      	ldr	r2, [r4, #4]
   85c80:	f022 0203 	bic.w	r2, r2, #3
   85c84:	e767      	b.n	85b56 <_malloc_r+0x2d2>
   85c86:	f8d8 8000 	ldr.w	r8, [r8]
   85c8a:	4598      	cmp	r8, r3
   85c8c:	d17c      	bne.n	85d88 <_malloc_r+0x504>
   85c8e:	f010 0f03 	tst.w	r0, #3
   85c92:	f1a8 0308 	sub.w	r3, r8, #8
   85c96:	f100 30ff 	add.w	r0, r0, #4294967295
   85c9a:	d1f4      	bne.n	85c86 <_malloc_r+0x402>
   85c9c:	687b      	ldr	r3, [r7, #4]
   85c9e:	ea23 0304 	bic.w	r3, r3, r4
   85ca2:	607b      	str	r3, [r7, #4]
   85ca4:	0064      	lsls	r4, r4, #1
   85ca6:	429c      	cmp	r4, r3
   85ca8:	f63f aec9 	bhi.w	85a3e <_malloc_r+0x1ba>
   85cac:	2c00      	cmp	r4, #0
   85cae:	f43f aec6 	beq.w	85a3e <_malloc_r+0x1ba>
   85cb2:	4223      	tst	r3, r4
   85cb4:	4648      	mov	r0, r9
   85cb6:	f47f ae75 	bne.w	859a4 <_malloc_r+0x120>
   85cba:	0064      	lsls	r4, r4, #1
   85cbc:	4223      	tst	r3, r4
   85cbe:	f100 0004 	add.w	r0, r0, #4
   85cc2:	d0fa      	beq.n	85cba <_malloc_r+0x436>
   85cc4:	e66e      	b.n	859a4 <_malloc_r+0x120>
   85cc6:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   85cca:	d818      	bhi.n	85cfe <_malloc_r+0x47a>
   85ccc:	0be8      	lsrs	r0, r5, #15
   85cce:	3077      	adds	r0, #119	; 0x77
   85cd0:	0041      	lsls	r1, r0, #1
   85cd2:	e617      	b.n	85904 <_malloc_r+0x80>
   85cd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   85cd8:	e6fa      	b.n	85ad0 <_malloc_r+0x24c>
   85cda:	f8d8 3004 	ldr.w	r3, [r8, #4]
   85cde:	1092      	asrs	r2, r2, #2
   85ce0:	f04f 0c01 	mov.w	ip, #1
   85ce4:	fa0c f202 	lsl.w	r2, ip, r2
   85ce8:	4313      	orrs	r3, r2
   85cea:	f8c8 3004 	str.w	r3, [r8, #4]
   85cee:	460a      	mov	r2, r1
   85cf0:	e77d      	b.n	85bee <_malloc_r+0x36a>
   85cf2:	2301      	movs	r3, #1
   85cf4:	f8c9 3004 	str.w	r3, [r9, #4]
   85cf8:	464c      	mov	r4, r9
   85cfa:	2200      	movs	r2, #0
   85cfc:	e72b      	b.n	85b56 <_malloc_r+0x2d2>
   85cfe:	f240 5354 	movw	r3, #1364	; 0x554
   85d02:	4298      	cmp	r0, r3
   85d04:	d81c      	bhi.n	85d40 <_malloc_r+0x4bc>
   85d06:	0ca8      	lsrs	r0, r5, #18
   85d08:	307c      	adds	r0, #124	; 0x7c
   85d0a:	0041      	lsls	r1, r0, #1
   85d0c:	e5fa      	b.n	85904 <_malloc_r+0x80>
   85d0e:	3210      	adds	r2, #16
   85d10:	e6b3      	b.n	85a7a <_malloc_r+0x1f6>
   85d12:	2a54      	cmp	r2, #84	; 0x54
   85d14:	d823      	bhi.n	85d5e <_malloc_r+0x4da>
   85d16:	0b1a      	lsrs	r2, r3, #12
   85d18:	326e      	adds	r2, #110	; 0x6e
   85d1a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   85d1e:	e754      	b.n	85bca <_malloc_r+0x346>
   85d20:	68bc      	ldr	r4, [r7, #8]
   85d22:	6862      	ldr	r2, [r4, #4]
   85d24:	f022 0203 	bic.w	r2, r2, #3
   85d28:	e715      	b.n	85b56 <_malloc_r+0x2d2>
   85d2a:	f3cb 000b 	ubfx	r0, fp, #0, #12
   85d2e:	2800      	cmp	r0, #0
   85d30:	f47f aeb8 	bne.w	85aa4 <_malloc_r+0x220>
   85d34:	4442      	add	r2, r8
   85d36:	68bb      	ldr	r3, [r7, #8]
   85d38:	f042 0201 	orr.w	r2, r2, #1
   85d3c:	605a      	str	r2, [r3, #4]
   85d3e:	e6fc      	b.n	85b3a <_malloc_r+0x2b6>
   85d40:	21fc      	movs	r1, #252	; 0xfc
   85d42:	207e      	movs	r0, #126	; 0x7e
   85d44:	e5de      	b.n	85904 <_malloc_r+0x80>
   85d46:	2201      	movs	r2, #1
   85d48:	f04f 0a00 	mov.w	sl, #0
   85d4c:	e6d3      	b.n	85af6 <_malloc_r+0x272>
   85d4e:	f104 0108 	add.w	r1, r4, #8
   85d52:	4630      	mov	r0, r6
   85d54:	f7ff fa84 	bl	85260 <_free_r>
   85d58:	f8da 1000 	ldr.w	r1, [sl]
   85d5c:	e6ed      	b.n	85b3a <_malloc_r+0x2b6>
   85d5e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   85d62:	d804      	bhi.n	85d6e <_malloc_r+0x4ea>
   85d64:	0bda      	lsrs	r2, r3, #15
   85d66:	3277      	adds	r2, #119	; 0x77
   85d68:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   85d6c:	e72d      	b.n	85bca <_malloc_r+0x346>
   85d6e:	f240 5154 	movw	r1, #1364	; 0x554
   85d72:	428a      	cmp	r2, r1
   85d74:	d804      	bhi.n	85d80 <_malloc_r+0x4fc>
   85d76:	0c9a      	lsrs	r2, r3, #18
   85d78:	327c      	adds	r2, #124	; 0x7c
   85d7a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   85d7e:	e724      	b.n	85bca <_malloc_r+0x346>
   85d80:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
   85d84:	227e      	movs	r2, #126	; 0x7e
   85d86:	e720      	b.n	85bca <_malloc_r+0x346>
   85d88:	687b      	ldr	r3, [r7, #4]
   85d8a:	e78b      	b.n	85ca4 <_malloc_r+0x420>
   85d8c:	20070858 	.word	0x20070858

00085d90 <memchr>:
   85d90:	0783      	lsls	r3, r0, #30
   85d92:	b470      	push	{r4, r5, r6}
   85d94:	b2c9      	uxtb	r1, r1
   85d96:	d040      	beq.n	85e1a <memchr+0x8a>
   85d98:	1e54      	subs	r4, r2, #1
   85d9a:	2a00      	cmp	r2, #0
   85d9c:	d03f      	beq.n	85e1e <memchr+0x8e>
   85d9e:	7803      	ldrb	r3, [r0, #0]
   85da0:	428b      	cmp	r3, r1
   85da2:	bf18      	it	ne
   85da4:	1c43      	addne	r3, r0, #1
   85da6:	d105      	bne.n	85db4 <memchr+0x24>
   85da8:	e01c      	b.n	85de4 <memchr+0x54>
   85daa:	b1ec      	cbz	r4, 85de8 <memchr+0x58>
   85dac:	7802      	ldrb	r2, [r0, #0]
   85dae:	3c01      	subs	r4, #1
   85db0:	428a      	cmp	r2, r1
   85db2:	d017      	beq.n	85de4 <memchr+0x54>
   85db4:	f013 0f03 	tst.w	r3, #3
   85db8:	4618      	mov	r0, r3
   85dba:	f103 0301 	add.w	r3, r3, #1
   85dbe:	d1f4      	bne.n	85daa <memchr+0x1a>
   85dc0:	2c03      	cmp	r4, #3
   85dc2:	d814      	bhi.n	85dee <memchr+0x5e>
   85dc4:	b184      	cbz	r4, 85de8 <memchr+0x58>
   85dc6:	7803      	ldrb	r3, [r0, #0]
   85dc8:	428b      	cmp	r3, r1
   85dca:	d00b      	beq.n	85de4 <memchr+0x54>
   85dcc:	1905      	adds	r5, r0, r4
   85dce:	1c43      	adds	r3, r0, #1
   85dd0:	e002      	b.n	85dd8 <memchr+0x48>
   85dd2:	7802      	ldrb	r2, [r0, #0]
   85dd4:	428a      	cmp	r2, r1
   85dd6:	d005      	beq.n	85de4 <memchr+0x54>
   85dd8:	42ab      	cmp	r3, r5
   85dda:	4618      	mov	r0, r3
   85ddc:	f103 0301 	add.w	r3, r3, #1
   85de0:	d1f7      	bne.n	85dd2 <memchr+0x42>
   85de2:	2000      	movs	r0, #0
   85de4:	bc70      	pop	{r4, r5, r6}
   85de6:	4770      	bx	lr
   85de8:	4620      	mov	r0, r4
   85dea:	bc70      	pop	{r4, r5, r6}
   85dec:	4770      	bx	lr
   85dee:	4602      	mov	r2, r0
   85df0:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   85df4:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   85df8:	6813      	ldr	r3, [r2, #0]
   85dfa:	4610      	mov	r0, r2
   85dfc:	4073      	eors	r3, r6
   85dfe:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
   85e02:	ea25 0303 	bic.w	r3, r5, r3
   85e06:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   85e0a:	f102 0204 	add.w	r2, r2, #4
   85e0e:	d1d9      	bne.n	85dc4 <memchr+0x34>
   85e10:	3c04      	subs	r4, #4
   85e12:	2c03      	cmp	r4, #3
   85e14:	4610      	mov	r0, r2
   85e16:	d8ef      	bhi.n	85df8 <memchr+0x68>
   85e18:	e7d4      	b.n	85dc4 <memchr+0x34>
   85e1a:	4614      	mov	r4, r2
   85e1c:	e7d0      	b.n	85dc0 <memchr+0x30>
   85e1e:	4610      	mov	r0, r2
   85e20:	e7e0      	b.n	85de4 <memchr+0x54>
   85e22:	bf00      	nop

00085e24 <memcpy>:
   85e24:	4684      	mov	ip, r0
   85e26:	ea41 0300 	orr.w	r3, r1, r0
   85e2a:	f013 0303 	ands.w	r3, r3, #3
   85e2e:	d149      	bne.n	85ec4 <memcpy+0xa0>
   85e30:	3a40      	subs	r2, #64	; 0x40
   85e32:	d323      	bcc.n	85e7c <memcpy+0x58>
   85e34:	680b      	ldr	r3, [r1, #0]
   85e36:	6003      	str	r3, [r0, #0]
   85e38:	684b      	ldr	r3, [r1, #4]
   85e3a:	6043      	str	r3, [r0, #4]
   85e3c:	688b      	ldr	r3, [r1, #8]
   85e3e:	6083      	str	r3, [r0, #8]
   85e40:	68cb      	ldr	r3, [r1, #12]
   85e42:	60c3      	str	r3, [r0, #12]
   85e44:	690b      	ldr	r3, [r1, #16]
   85e46:	6103      	str	r3, [r0, #16]
   85e48:	694b      	ldr	r3, [r1, #20]
   85e4a:	6143      	str	r3, [r0, #20]
   85e4c:	698b      	ldr	r3, [r1, #24]
   85e4e:	6183      	str	r3, [r0, #24]
   85e50:	69cb      	ldr	r3, [r1, #28]
   85e52:	61c3      	str	r3, [r0, #28]
   85e54:	6a0b      	ldr	r3, [r1, #32]
   85e56:	6203      	str	r3, [r0, #32]
   85e58:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   85e5a:	6243      	str	r3, [r0, #36]	; 0x24
   85e5c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   85e5e:	6283      	str	r3, [r0, #40]	; 0x28
   85e60:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   85e62:	62c3      	str	r3, [r0, #44]	; 0x2c
   85e64:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   85e66:	6303      	str	r3, [r0, #48]	; 0x30
   85e68:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   85e6a:	6343      	str	r3, [r0, #52]	; 0x34
   85e6c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   85e6e:	6383      	str	r3, [r0, #56]	; 0x38
   85e70:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   85e72:	63c3      	str	r3, [r0, #60]	; 0x3c
   85e74:	3040      	adds	r0, #64	; 0x40
   85e76:	3140      	adds	r1, #64	; 0x40
   85e78:	3a40      	subs	r2, #64	; 0x40
   85e7a:	d2db      	bcs.n	85e34 <memcpy+0x10>
   85e7c:	3230      	adds	r2, #48	; 0x30
   85e7e:	d30b      	bcc.n	85e98 <memcpy+0x74>
   85e80:	680b      	ldr	r3, [r1, #0]
   85e82:	6003      	str	r3, [r0, #0]
   85e84:	684b      	ldr	r3, [r1, #4]
   85e86:	6043      	str	r3, [r0, #4]
   85e88:	688b      	ldr	r3, [r1, #8]
   85e8a:	6083      	str	r3, [r0, #8]
   85e8c:	68cb      	ldr	r3, [r1, #12]
   85e8e:	60c3      	str	r3, [r0, #12]
   85e90:	3010      	adds	r0, #16
   85e92:	3110      	adds	r1, #16
   85e94:	3a10      	subs	r2, #16
   85e96:	d2f3      	bcs.n	85e80 <memcpy+0x5c>
   85e98:	320c      	adds	r2, #12
   85e9a:	d305      	bcc.n	85ea8 <memcpy+0x84>
   85e9c:	f851 3b04 	ldr.w	r3, [r1], #4
   85ea0:	f840 3b04 	str.w	r3, [r0], #4
   85ea4:	3a04      	subs	r2, #4
   85ea6:	d2f9      	bcs.n	85e9c <memcpy+0x78>
   85ea8:	3204      	adds	r2, #4
   85eaa:	d008      	beq.n	85ebe <memcpy+0x9a>
   85eac:	07d2      	lsls	r2, r2, #31
   85eae:	bf1c      	itt	ne
   85eb0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85eb4:	f800 3b01 	strbne.w	r3, [r0], #1
   85eb8:	d301      	bcc.n	85ebe <memcpy+0x9a>
   85eba:	880b      	ldrh	r3, [r1, #0]
   85ebc:	8003      	strh	r3, [r0, #0]
   85ebe:	4660      	mov	r0, ip
   85ec0:	4770      	bx	lr
   85ec2:	bf00      	nop
   85ec4:	2a08      	cmp	r2, #8
   85ec6:	d313      	bcc.n	85ef0 <memcpy+0xcc>
   85ec8:	078b      	lsls	r3, r1, #30
   85eca:	d0b1      	beq.n	85e30 <memcpy+0xc>
   85ecc:	f010 0303 	ands.w	r3, r0, #3
   85ed0:	d0ae      	beq.n	85e30 <memcpy+0xc>
   85ed2:	f1c3 0304 	rsb	r3, r3, #4
   85ed6:	1ad2      	subs	r2, r2, r3
   85ed8:	07db      	lsls	r3, r3, #31
   85eda:	bf1c      	itt	ne
   85edc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85ee0:	f800 3b01 	strbne.w	r3, [r0], #1
   85ee4:	d3a4      	bcc.n	85e30 <memcpy+0xc>
   85ee6:	f831 3b02 	ldrh.w	r3, [r1], #2
   85eea:	f820 3b02 	strh.w	r3, [r0], #2
   85eee:	e79f      	b.n	85e30 <memcpy+0xc>
   85ef0:	3a04      	subs	r2, #4
   85ef2:	d3d9      	bcc.n	85ea8 <memcpy+0x84>
   85ef4:	3a01      	subs	r2, #1
   85ef6:	f811 3b01 	ldrb.w	r3, [r1], #1
   85efa:	f800 3b01 	strb.w	r3, [r0], #1
   85efe:	d2f9      	bcs.n	85ef4 <memcpy+0xd0>
   85f00:	780b      	ldrb	r3, [r1, #0]
   85f02:	7003      	strb	r3, [r0, #0]
   85f04:	784b      	ldrb	r3, [r1, #1]
   85f06:	7043      	strb	r3, [r0, #1]
   85f08:	788b      	ldrb	r3, [r1, #2]
   85f0a:	7083      	strb	r3, [r0, #2]
   85f0c:	4660      	mov	r0, ip
   85f0e:	4770      	bx	lr

00085f10 <memmove>:
   85f10:	4288      	cmp	r0, r1
   85f12:	b5f0      	push	{r4, r5, r6, r7, lr}
   85f14:	d90d      	bls.n	85f32 <memmove+0x22>
   85f16:	188b      	adds	r3, r1, r2
   85f18:	4298      	cmp	r0, r3
   85f1a:	d20a      	bcs.n	85f32 <memmove+0x22>
   85f1c:	1881      	adds	r1, r0, r2
   85f1e:	2a00      	cmp	r2, #0
   85f20:	d054      	beq.n	85fcc <memmove+0xbc>
   85f22:	1a9a      	subs	r2, r3, r2
   85f24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   85f28:	4293      	cmp	r3, r2
   85f2a:	f801 4d01 	strb.w	r4, [r1, #-1]!
   85f2e:	d1f9      	bne.n	85f24 <memmove+0x14>
   85f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85f32:	2a0f      	cmp	r2, #15
   85f34:	d948      	bls.n	85fc8 <memmove+0xb8>
   85f36:	ea40 0301 	orr.w	r3, r0, r1
   85f3a:	079b      	lsls	r3, r3, #30
   85f3c:	d147      	bne.n	85fce <memmove+0xbe>
   85f3e:	4615      	mov	r5, r2
   85f40:	f100 0410 	add.w	r4, r0, #16
   85f44:	f101 0310 	add.w	r3, r1, #16
   85f48:	f853 6c10 	ldr.w	r6, [r3, #-16]
   85f4c:	3d10      	subs	r5, #16
   85f4e:	f844 6c10 	str.w	r6, [r4, #-16]
   85f52:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   85f56:	2d0f      	cmp	r5, #15
   85f58:	f844 6c0c 	str.w	r6, [r4, #-12]
   85f5c:	f853 6c08 	ldr.w	r6, [r3, #-8]
   85f60:	f104 0410 	add.w	r4, r4, #16
   85f64:	f844 6c18 	str.w	r6, [r4, #-24]
   85f68:	f853 6c04 	ldr.w	r6, [r3, #-4]
   85f6c:	f103 0310 	add.w	r3, r3, #16
   85f70:	f844 6c14 	str.w	r6, [r4, #-20]
   85f74:	d8e8      	bhi.n	85f48 <memmove+0x38>
   85f76:	f1a2 0310 	sub.w	r3, r2, #16
   85f7a:	f023 030f 	bic.w	r3, r3, #15
   85f7e:	f002 0e0f 	and.w	lr, r2, #15
   85f82:	3310      	adds	r3, #16
   85f84:	f1be 0f03 	cmp.w	lr, #3
   85f88:	4419      	add	r1, r3
   85f8a:	4403      	add	r3, r0
   85f8c:	d921      	bls.n	85fd2 <memmove+0xc2>
   85f8e:	460e      	mov	r6, r1
   85f90:	4674      	mov	r4, lr
   85f92:	1f1d      	subs	r5, r3, #4
   85f94:	f856 7b04 	ldr.w	r7, [r6], #4
   85f98:	3c04      	subs	r4, #4
   85f9a:	2c03      	cmp	r4, #3
   85f9c:	f845 7f04 	str.w	r7, [r5, #4]!
   85fa0:	d8f8      	bhi.n	85f94 <memmove+0x84>
   85fa2:	f1ae 0404 	sub.w	r4, lr, #4
   85fa6:	f024 0403 	bic.w	r4, r4, #3
   85faa:	3404      	adds	r4, #4
   85fac:	4423      	add	r3, r4
   85fae:	4421      	add	r1, r4
   85fb0:	f002 0203 	and.w	r2, r2, #3
   85fb4:	b152      	cbz	r2, 85fcc <memmove+0xbc>
   85fb6:	3b01      	subs	r3, #1
   85fb8:	440a      	add	r2, r1
   85fba:	f811 4b01 	ldrb.w	r4, [r1], #1
   85fbe:	4291      	cmp	r1, r2
   85fc0:	f803 4f01 	strb.w	r4, [r3, #1]!
   85fc4:	d1f9      	bne.n	85fba <memmove+0xaa>
   85fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85fc8:	4603      	mov	r3, r0
   85fca:	e7f3      	b.n	85fb4 <memmove+0xa4>
   85fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85fce:	4603      	mov	r3, r0
   85fd0:	e7f1      	b.n	85fb6 <memmove+0xa6>
   85fd2:	4672      	mov	r2, lr
   85fd4:	e7ee      	b.n	85fb4 <memmove+0xa4>
   85fd6:	bf00      	nop

00085fd8 <__malloc_lock>:
   85fd8:	4770      	bx	lr
   85fda:	bf00      	nop

00085fdc <__malloc_unlock>:
   85fdc:	4770      	bx	lr
   85fde:	bf00      	nop

00085fe0 <_realloc_r>:
   85fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85fe4:	4617      	mov	r7, r2
   85fe6:	b083      	sub	sp, #12
   85fe8:	460d      	mov	r5, r1
   85fea:	2900      	cmp	r1, #0
   85fec:	f000 80e2 	beq.w	861b4 <_realloc_r+0x1d4>
   85ff0:	4681      	mov	r9, r0
   85ff2:	f107 040b 	add.w	r4, r7, #11
   85ff6:	f7ff ffef 	bl	85fd8 <__malloc_lock>
   85ffa:	f855 3c04 	ldr.w	r3, [r5, #-4]
   85ffe:	2c16      	cmp	r4, #22
   86000:	f023 0603 	bic.w	r6, r3, #3
   86004:	f1a5 0808 	sub.w	r8, r5, #8
   86008:	d84b      	bhi.n	860a2 <_realloc_r+0xc2>
   8600a:	2210      	movs	r2, #16
   8600c:	4614      	mov	r4, r2
   8600e:	42a7      	cmp	r7, r4
   86010:	d84c      	bhi.n	860ac <_realloc_r+0xcc>
   86012:	4296      	cmp	r6, r2
   86014:	da51      	bge.n	860ba <_realloc_r+0xda>
   86016:	f8df b3a4 	ldr.w	fp, [pc, #932]	; 863bc <_realloc_r+0x3dc>
   8601a:	eb08 0106 	add.w	r1, r8, r6
   8601e:	f8db 0008 	ldr.w	r0, [fp, #8]
   86022:	4288      	cmp	r0, r1
   86024:	f000 80d3 	beq.w	861ce <_realloc_r+0x1ee>
   86028:	6848      	ldr	r0, [r1, #4]
   8602a:	f020 0e01 	bic.w	lr, r0, #1
   8602e:	448e      	add	lr, r1
   86030:	f8de e004 	ldr.w	lr, [lr, #4]
   86034:	f01e 0f01 	tst.w	lr, #1
   86038:	d154      	bne.n	860e4 <_realloc_r+0x104>
   8603a:	f020 0003 	bic.w	r0, r0, #3
   8603e:	4430      	add	r0, r6
   86040:	4290      	cmp	r0, r2
   86042:	f280 80bd 	bge.w	861c0 <_realloc_r+0x1e0>
   86046:	07db      	lsls	r3, r3, #31
   86048:	f100 8090 	bmi.w	8616c <_realloc_r+0x18c>
   8604c:	f855 3c08 	ldr.w	r3, [r5, #-8]
   86050:	ebc3 0a08 	rsb	sl, r3, r8
   86054:	f8da 3004 	ldr.w	r3, [sl, #4]
   86058:	f023 0303 	bic.w	r3, r3, #3
   8605c:	eb00 0e03 	add.w	lr, r0, r3
   86060:	4596      	cmp	lr, r2
   86062:	db49      	blt.n	860f8 <_realloc_r+0x118>
   86064:	4657      	mov	r7, sl
   86066:	68cb      	ldr	r3, [r1, #12]
   86068:	6889      	ldr	r1, [r1, #8]
   8606a:	1f32      	subs	r2, r6, #4
   8606c:	60cb      	str	r3, [r1, #12]
   8606e:	6099      	str	r1, [r3, #8]
   86070:	f857 1f08 	ldr.w	r1, [r7, #8]!
   86074:	f8da 300c 	ldr.w	r3, [sl, #12]
   86078:	2a24      	cmp	r2, #36	; 0x24
   8607a:	60cb      	str	r3, [r1, #12]
   8607c:	6099      	str	r1, [r3, #8]
   8607e:	f200 8133 	bhi.w	862e8 <_realloc_r+0x308>
   86082:	2a13      	cmp	r2, #19
   86084:	f240 80fa 	bls.w	8627c <_realloc_r+0x29c>
   86088:	682b      	ldr	r3, [r5, #0]
   8608a:	2a1b      	cmp	r2, #27
   8608c:	f8ca 3008 	str.w	r3, [sl, #8]
   86090:	686b      	ldr	r3, [r5, #4]
   86092:	f8ca 300c 	str.w	r3, [sl, #12]
   86096:	f200 813b 	bhi.w	86310 <_realloc_r+0x330>
   8609a:	3508      	adds	r5, #8
   8609c:	f10a 0310 	add.w	r3, sl, #16
   860a0:	e0ed      	b.n	8627e <_realloc_r+0x29e>
   860a2:	f024 0407 	bic.w	r4, r4, #7
   860a6:	2c00      	cmp	r4, #0
   860a8:	4622      	mov	r2, r4
   860aa:	dab0      	bge.n	8600e <_realloc_r+0x2e>
   860ac:	230c      	movs	r3, #12
   860ae:	2000      	movs	r0, #0
   860b0:	f8c9 3000 	str.w	r3, [r9]
   860b4:	b003      	add	sp, #12
   860b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   860ba:	462f      	mov	r7, r5
   860bc:	1b32      	subs	r2, r6, r4
   860be:	2a0f      	cmp	r2, #15
   860c0:	f003 0301 	and.w	r3, r3, #1
   860c4:	d840      	bhi.n	86148 <_realloc_r+0x168>
   860c6:	4333      	orrs	r3, r6
   860c8:	f8c8 3004 	str.w	r3, [r8, #4]
   860cc:	4446      	add	r6, r8
   860ce:	6873      	ldr	r3, [r6, #4]
   860d0:	f043 0301 	orr.w	r3, r3, #1
   860d4:	6073      	str	r3, [r6, #4]
   860d6:	4648      	mov	r0, r9
   860d8:	f7ff ff80 	bl	85fdc <__malloc_unlock>
   860dc:	4638      	mov	r0, r7
   860de:	b003      	add	sp, #12
   860e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   860e4:	07d9      	lsls	r1, r3, #31
   860e6:	d441      	bmi.n	8616c <_realloc_r+0x18c>
   860e8:	f855 3c08 	ldr.w	r3, [r5, #-8]
   860ec:	ebc3 0a08 	rsb	sl, r3, r8
   860f0:	f8da 3004 	ldr.w	r3, [sl, #4]
   860f4:	f023 0303 	bic.w	r3, r3, #3
   860f8:	4433      	add	r3, r6
   860fa:	4293      	cmp	r3, r2
   860fc:	db36      	blt.n	8616c <_realloc_r+0x18c>
   860fe:	4657      	mov	r7, sl
   86100:	f8da 100c 	ldr.w	r1, [sl, #12]
   86104:	f857 0f08 	ldr.w	r0, [r7, #8]!
   86108:	1f32      	subs	r2, r6, #4
   8610a:	2a24      	cmp	r2, #36	; 0x24
   8610c:	60c1      	str	r1, [r0, #12]
   8610e:	6088      	str	r0, [r1, #8]
   86110:	f200 80f5 	bhi.w	862fe <_realloc_r+0x31e>
   86114:	2a13      	cmp	r2, #19
   86116:	f240 80f0 	bls.w	862fa <_realloc_r+0x31a>
   8611a:	6829      	ldr	r1, [r5, #0]
   8611c:	2a1b      	cmp	r2, #27
   8611e:	f8ca 1008 	str.w	r1, [sl, #8]
   86122:	6869      	ldr	r1, [r5, #4]
   86124:	f8ca 100c 	str.w	r1, [sl, #12]
   86128:	f200 8107 	bhi.w	8633a <_realloc_r+0x35a>
   8612c:	3508      	adds	r5, #8
   8612e:	f10a 0210 	add.w	r2, sl, #16
   86132:	6829      	ldr	r1, [r5, #0]
   86134:	461e      	mov	r6, r3
   86136:	6011      	str	r1, [r2, #0]
   86138:	6869      	ldr	r1, [r5, #4]
   8613a:	46d0      	mov	r8, sl
   8613c:	6051      	str	r1, [r2, #4]
   8613e:	68ab      	ldr	r3, [r5, #8]
   86140:	6093      	str	r3, [r2, #8]
   86142:	f8da 3004 	ldr.w	r3, [sl, #4]
   86146:	e7b9      	b.n	860bc <_realloc_r+0xdc>
   86148:	eb08 0104 	add.w	r1, r8, r4
   8614c:	4323      	orrs	r3, r4
   8614e:	f042 0001 	orr.w	r0, r2, #1
   86152:	f8c8 3004 	str.w	r3, [r8, #4]
   86156:	440a      	add	r2, r1
   86158:	6048      	str	r0, [r1, #4]
   8615a:	6853      	ldr	r3, [r2, #4]
   8615c:	3108      	adds	r1, #8
   8615e:	f043 0301 	orr.w	r3, r3, #1
   86162:	6053      	str	r3, [r2, #4]
   86164:	4648      	mov	r0, r9
   86166:	f7ff f87b 	bl	85260 <_free_r>
   8616a:	e7b4      	b.n	860d6 <_realloc_r+0xf6>
   8616c:	4639      	mov	r1, r7
   8616e:	4648      	mov	r0, r9
   86170:	f7ff fb88 	bl	85884 <_malloc_r>
   86174:	4607      	mov	r7, r0
   86176:	2800      	cmp	r0, #0
   86178:	d0ad      	beq.n	860d6 <_realloc_r+0xf6>
   8617a:	f855 3c04 	ldr.w	r3, [r5, #-4]
   8617e:	f1a0 0108 	sub.w	r1, r0, #8
   86182:	f023 0201 	bic.w	r2, r3, #1
   86186:	4442      	add	r2, r8
   86188:	4291      	cmp	r1, r2
   8618a:	f000 80a6 	beq.w	862da <_realloc_r+0x2fa>
   8618e:	1f32      	subs	r2, r6, #4
   86190:	2a24      	cmp	r2, #36	; 0x24
   86192:	f200 8093 	bhi.w	862bc <_realloc_r+0x2dc>
   86196:	2a13      	cmp	r2, #19
   86198:	d865      	bhi.n	86266 <_realloc_r+0x286>
   8619a:	4603      	mov	r3, r0
   8619c:	462a      	mov	r2, r5
   8619e:	6811      	ldr	r1, [r2, #0]
   861a0:	6019      	str	r1, [r3, #0]
   861a2:	6851      	ldr	r1, [r2, #4]
   861a4:	6059      	str	r1, [r3, #4]
   861a6:	6892      	ldr	r2, [r2, #8]
   861a8:	609a      	str	r2, [r3, #8]
   861aa:	4629      	mov	r1, r5
   861ac:	4648      	mov	r0, r9
   861ae:	f7ff f857 	bl	85260 <_free_r>
   861b2:	e790      	b.n	860d6 <_realloc_r+0xf6>
   861b4:	4611      	mov	r1, r2
   861b6:	b003      	add	sp, #12
   861b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   861bc:	f7ff bb62 	b.w	85884 <_malloc_r>
   861c0:	68ca      	ldr	r2, [r1, #12]
   861c2:	6889      	ldr	r1, [r1, #8]
   861c4:	462f      	mov	r7, r5
   861c6:	60ca      	str	r2, [r1, #12]
   861c8:	4606      	mov	r6, r0
   861ca:	6091      	str	r1, [r2, #8]
   861cc:	e776      	b.n	860bc <_realloc_r+0xdc>
   861ce:	6841      	ldr	r1, [r0, #4]
   861d0:	f104 0010 	add.w	r0, r4, #16
   861d4:	f021 0103 	bic.w	r1, r1, #3
   861d8:	4431      	add	r1, r6
   861da:	4281      	cmp	r1, r0
   861dc:	da5a      	bge.n	86294 <_realloc_r+0x2b4>
   861de:	07db      	lsls	r3, r3, #31
   861e0:	d4c4      	bmi.n	8616c <_realloc_r+0x18c>
   861e2:	f855 3c08 	ldr.w	r3, [r5, #-8]
   861e6:	ebc3 0a08 	rsb	sl, r3, r8
   861ea:	f8da 3004 	ldr.w	r3, [sl, #4]
   861ee:	f023 0303 	bic.w	r3, r3, #3
   861f2:	eb01 0c03 	add.w	ip, r1, r3
   861f6:	4560      	cmp	r0, ip
   861f8:	f73f af7e 	bgt.w	860f8 <_realloc_r+0x118>
   861fc:	4657      	mov	r7, sl
   861fe:	f8da 300c 	ldr.w	r3, [sl, #12]
   86202:	f857 1f08 	ldr.w	r1, [r7, #8]!
   86206:	1f32      	subs	r2, r6, #4
   86208:	2a24      	cmp	r2, #36	; 0x24
   8620a:	60cb      	str	r3, [r1, #12]
   8620c:	6099      	str	r1, [r3, #8]
   8620e:	f200 80b6 	bhi.w	8637e <_realloc_r+0x39e>
   86212:	2a13      	cmp	r2, #19
   86214:	f240 80a7 	bls.w	86366 <_realloc_r+0x386>
   86218:	682b      	ldr	r3, [r5, #0]
   8621a:	2a1b      	cmp	r2, #27
   8621c:	f8ca 3008 	str.w	r3, [sl, #8]
   86220:	686b      	ldr	r3, [r5, #4]
   86222:	f8ca 300c 	str.w	r3, [sl, #12]
   86226:	f200 80b3 	bhi.w	86390 <_realloc_r+0x3b0>
   8622a:	3508      	adds	r5, #8
   8622c:	f10a 0310 	add.w	r3, sl, #16
   86230:	682a      	ldr	r2, [r5, #0]
   86232:	601a      	str	r2, [r3, #0]
   86234:	686a      	ldr	r2, [r5, #4]
   86236:	605a      	str	r2, [r3, #4]
   86238:	68aa      	ldr	r2, [r5, #8]
   8623a:	609a      	str	r2, [r3, #8]
   8623c:	ebc4 030c 	rsb	r3, r4, ip
   86240:	eb0a 0204 	add.w	r2, sl, r4
   86244:	f043 0301 	orr.w	r3, r3, #1
   86248:	f8cb 2008 	str.w	r2, [fp, #8]
   8624c:	6053      	str	r3, [r2, #4]
   8624e:	f8da 3004 	ldr.w	r3, [sl, #4]
   86252:	4648      	mov	r0, r9
   86254:	f003 0301 	and.w	r3, r3, #1
   86258:	431c      	orrs	r4, r3
   8625a:	f8ca 4004 	str.w	r4, [sl, #4]
   8625e:	f7ff febd 	bl	85fdc <__malloc_unlock>
   86262:	4638      	mov	r0, r7
   86264:	e73b      	b.n	860de <_realloc_r+0xfe>
   86266:	682b      	ldr	r3, [r5, #0]
   86268:	2a1b      	cmp	r2, #27
   8626a:	6003      	str	r3, [r0, #0]
   8626c:	686b      	ldr	r3, [r5, #4]
   8626e:	6043      	str	r3, [r0, #4]
   86270:	d828      	bhi.n	862c4 <_realloc_r+0x2e4>
   86272:	f100 0308 	add.w	r3, r0, #8
   86276:	f105 0208 	add.w	r2, r5, #8
   8627a:	e790      	b.n	8619e <_realloc_r+0x1be>
   8627c:	463b      	mov	r3, r7
   8627e:	682a      	ldr	r2, [r5, #0]
   86280:	4676      	mov	r6, lr
   86282:	601a      	str	r2, [r3, #0]
   86284:	686a      	ldr	r2, [r5, #4]
   86286:	46d0      	mov	r8, sl
   86288:	605a      	str	r2, [r3, #4]
   8628a:	68aa      	ldr	r2, [r5, #8]
   8628c:	609a      	str	r2, [r3, #8]
   8628e:	f8da 3004 	ldr.w	r3, [sl, #4]
   86292:	e713      	b.n	860bc <_realloc_r+0xdc>
   86294:	1b0b      	subs	r3, r1, r4
   86296:	eb08 0204 	add.w	r2, r8, r4
   8629a:	f043 0301 	orr.w	r3, r3, #1
   8629e:	f8cb 2008 	str.w	r2, [fp, #8]
   862a2:	6053      	str	r3, [r2, #4]
   862a4:	f855 3c04 	ldr.w	r3, [r5, #-4]
   862a8:	4648      	mov	r0, r9
   862aa:	f003 0301 	and.w	r3, r3, #1
   862ae:	431c      	orrs	r4, r3
   862b0:	f845 4c04 	str.w	r4, [r5, #-4]
   862b4:	f7ff fe92 	bl	85fdc <__malloc_unlock>
   862b8:	4628      	mov	r0, r5
   862ba:	e710      	b.n	860de <_realloc_r+0xfe>
   862bc:	4629      	mov	r1, r5
   862be:	f7ff fe27 	bl	85f10 <memmove>
   862c2:	e772      	b.n	861aa <_realloc_r+0x1ca>
   862c4:	68ab      	ldr	r3, [r5, #8]
   862c6:	2a24      	cmp	r2, #36	; 0x24
   862c8:	6083      	str	r3, [r0, #8]
   862ca:	68eb      	ldr	r3, [r5, #12]
   862cc:	60c3      	str	r3, [r0, #12]
   862ce:	d02b      	beq.n	86328 <_realloc_r+0x348>
   862d0:	f100 0310 	add.w	r3, r0, #16
   862d4:	f105 0210 	add.w	r2, r5, #16
   862d8:	e761      	b.n	8619e <_realloc_r+0x1be>
   862da:	f850 2c04 	ldr.w	r2, [r0, #-4]
   862de:	462f      	mov	r7, r5
   862e0:	f022 0203 	bic.w	r2, r2, #3
   862e4:	4416      	add	r6, r2
   862e6:	e6e9      	b.n	860bc <_realloc_r+0xdc>
   862e8:	4629      	mov	r1, r5
   862ea:	4638      	mov	r0, r7
   862ec:	4676      	mov	r6, lr
   862ee:	46d0      	mov	r8, sl
   862f0:	f7ff fe0e 	bl	85f10 <memmove>
   862f4:	f8da 3004 	ldr.w	r3, [sl, #4]
   862f8:	e6e0      	b.n	860bc <_realloc_r+0xdc>
   862fa:	463a      	mov	r2, r7
   862fc:	e719      	b.n	86132 <_realloc_r+0x152>
   862fe:	4629      	mov	r1, r5
   86300:	4638      	mov	r0, r7
   86302:	461e      	mov	r6, r3
   86304:	46d0      	mov	r8, sl
   86306:	f7ff fe03 	bl	85f10 <memmove>
   8630a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8630e:	e6d5      	b.n	860bc <_realloc_r+0xdc>
   86310:	68ab      	ldr	r3, [r5, #8]
   86312:	2a24      	cmp	r2, #36	; 0x24
   86314:	f8ca 3010 	str.w	r3, [sl, #16]
   86318:	68eb      	ldr	r3, [r5, #12]
   8631a:	f8ca 3014 	str.w	r3, [sl, #20]
   8631e:	d018      	beq.n	86352 <_realloc_r+0x372>
   86320:	3510      	adds	r5, #16
   86322:	f10a 0318 	add.w	r3, sl, #24
   86326:	e7aa      	b.n	8627e <_realloc_r+0x29e>
   86328:	692a      	ldr	r2, [r5, #16]
   8632a:	f100 0318 	add.w	r3, r0, #24
   8632e:	6102      	str	r2, [r0, #16]
   86330:	6969      	ldr	r1, [r5, #20]
   86332:	f105 0218 	add.w	r2, r5, #24
   86336:	6141      	str	r1, [r0, #20]
   86338:	e731      	b.n	8619e <_realloc_r+0x1be>
   8633a:	68a9      	ldr	r1, [r5, #8]
   8633c:	2a24      	cmp	r2, #36	; 0x24
   8633e:	f8ca 1010 	str.w	r1, [sl, #16]
   86342:	68e9      	ldr	r1, [r5, #12]
   86344:	f8ca 1014 	str.w	r1, [sl, #20]
   86348:	d00f      	beq.n	8636a <_realloc_r+0x38a>
   8634a:	3510      	adds	r5, #16
   8634c:	f10a 0218 	add.w	r2, sl, #24
   86350:	e6ef      	b.n	86132 <_realloc_r+0x152>
   86352:	692a      	ldr	r2, [r5, #16]
   86354:	f10a 0320 	add.w	r3, sl, #32
   86358:	f8ca 2018 	str.w	r2, [sl, #24]
   8635c:	696a      	ldr	r2, [r5, #20]
   8635e:	3518      	adds	r5, #24
   86360:	f8ca 201c 	str.w	r2, [sl, #28]
   86364:	e78b      	b.n	8627e <_realloc_r+0x29e>
   86366:	463b      	mov	r3, r7
   86368:	e762      	b.n	86230 <_realloc_r+0x250>
   8636a:	6929      	ldr	r1, [r5, #16]
   8636c:	f10a 0220 	add.w	r2, sl, #32
   86370:	f8ca 1018 	str.w	r1, [sl, #24]
   86374:	6969      	ldr	r1, [r5, #20]
   86376:	3518      	adds	r5, #24
   86378:	f8ca 101c 	str.w	r1, [sl, #28]
   8637c:	e6d9      	b.n	86132 <_realloc_r+0x152>
   8637e:	4629      	mov	r1, r5
   86380:	4638      	mov	r0, r7
   86382:	f8cd c004 	str.w	ip, [sp, #4]
   86386:	f7ff fdc3 	bl	85f10 <memmove>
   8638a:	f8dd c004 	ldr.w	ip, [sp, #4]
   8638e:	e755      	b.n	8623c <_realloc_r+0x25c>
   86390:	68ab      	ldr	r3, [r5, #8]
   86392:	2a24      	cmp	r2, #36	; 0x24
   86394:	f8ca 3010 	str.w	r3, [sl, #16]
   86398:	68eb      	ldr	r3, [r5, #12]
   8639a:	f8ca 3014 	str.w	r3, [sl, #20]
   8639e:	d003      	beq.n	863a8 <_realloc_r+0x3c8>
   863a0:	3510      	adds	r5, #16
   863a2:	f10a 0318 	add.w	r3, sl, #24
   863a6:	e743      	b.n	86230 <_realloc_r+0x250>
   863a8:	692a      	ldr	r2, [r5, #16]
   863aa:	f10a 0320 	add.w	r3, sl, #32
   863ae:	f8ca 2018 	str.w	r2, [sl, #24]
   863b2:	696a      	ldr	r2, [r5, #20]
   863b4:	3518      	adds	r5, #24
   863b6:	f8ca 201c 	str.w	r2, [sl, #28]
   863ba:	e739      	b.n	86230 <_realloc_r+0x250>
   863bc:	20070858 	.word	0x20070858

000863c0 <_sbrk_r>:
   863c0:	b538      	push	{r3, r4, r5, lr}
   863c2:	4c07      	ldr	r4, [pc, #28]	; (863e0 <_sbrk_r+0x20>)
   863c4:	2300      	movs	r3, #0
   863c6:	4605      	mov	r5, r0
   863c8:	4608      	mov	r0, r1
   863ca:	6023      	str	r3, [r4, #0]
   863cc:	f7fd fada 	bl	83984 <_sbrk>
   863d0:	1c43      	adds	r3, r0, #1
   863d2:	d000      	beq.n	863d6 <_sbrk_r+0x16>
   863d4:	bd38      	pop	{r3, r4, r5, pc}
   863d6:	6823      	ldr	r3, [r4, #0]
   863d8:	2b00      	cmp	r3, #0
   863da:	d0fb      	beq.n	863d4 <_sbrk_r+0x14>
   863dc:	602b      	str	r3, [r5, #0]
   863de:	bd38      	pop	{r3, r4, r5, pc}
   863e0:	20071258 	.word	0x20071258

000863e4 <__sread>:
   863e4:	b510      	push	{r4, lr}
   863e6:	460c      	mov	r4, r1
   863e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   863ec:	f000 f9bc 	bl	86768 <_read_r>
   863f0:	2800      	cmp	r0, #0
   863f2:	db03      	blt.n	863fc <__sread+0x18>
   863f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   863f6:	4403      	add	r3, r0
   863f8:	6523      	str	r3, [r4, #80]	; 0x50
   863fa:	bd10      	pop	{r4, pc}
   863fc:	89a3      	ldrh	r3, [r4, #12]
   863fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   86402:	81a3      	strh	r3, [r4, #12]
   86404:	bd10      	pop	{r4, pc}
   86406:	bf00      	nop

00086408 <__swrite>:
   86408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8640c:	460c      	mov	r4, r1
   8640e:	8989      	ldrh	r1, [r1, #12]
   86410:	461d      	mov	r5, r3
   86412:	05cb      	lsls	r3, r1, #23
   86414:	4616      	mov	r6, r2
   86416:	4607      	mov	r7, r0
   86418:	d506      	bpl.n	86428 <__swrite+0x20>
   8641a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8641e:	2200      	movs	r2, #0
   86420:	2302      	movs	r3, #2
   86422:	f000 f98d 	bl	86740 <_lseek_r>
   86426:	89a1      	ldrh	r1, [r4, #12]
   86428:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8642c:	81a1      	strh	r1, [r4, #12]
   8642e:	4638      	mov	r0, r7
   86430:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   86434:	4632      	mov	r2, r6
   86436:	462b      	mov	r3, r5
   86438:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8643c:	f000 b8a0 	b.w	86580 <_write_r>

00086440 <__sseek>:
   86440:	b510      	push	{r4, lr}
   86442:	460c      	mov	r4, r1
   86444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86448:	f000 f97a 	bl	86740 <_lseek_r>
   8644c:	89a3      	ldrh	r3, [r4, #12]
   8644e:	1c42      	adds	r2, r0, #1
   86450:	bf0e      	itee	eq
   86452:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   86456:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8645a:	6520      	strne	r0, [r4, #80]	; 0x50
   8645c:	81a3      	strh	r3, [r4, #12]
   8645e:	bd10      	pop	{r4, pc}

00086460 <__sclose>:
   86460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86464:	f000 b8f2 	b.w	8664c <_close_r>

00086468 <__swbuf_r>:
   86468:	b570      	push	{r4, r5, r6, lr}
   8646a:	460d      	mov	r5, r1
   8646c:	4614      	mov	r4, r2
   8646e:	4606      	mov	r6, r0
   86470:	b110      	cbz	r0, 86478 <__swbuf_r+0x10>
   86472:	6b83      	ldr	r3, [r0, #56]	; 0x38
   86474:	2b00      	cmp	r3, #0
   86476:	d048      	beq.n	8650a <__swbuf_r+0xa2>
   86478:	89a2      	ldrh	r2, [r4, #12]
   8647a:	69a3      	ldr	r3, [r4, #24]
   8647c:	b291      	uxth	r1, r2
   8647e:	0708      	lsls	r0, r1, #28
   86480:	60a3      	str	r3, [r4, #8]
   86482:	d538      	bpl.n	864f6 <__swbuf_r+0x8e>
   86484:	6923      	ldr	r3, [r4, #16]
   86486:	2b00      	cmp	r3, #0
   86488:	d035      	beq.n	864f6 <__swbuf_r+0x8e>
   8648a:	0489      	lsls	r1, r1, #18
   8648c:	b2ed      	uxtb	r5, r5
   8648e:	d515      	bpl.n	864bc <__swbuf_r+0x54>
   86490:	6822      	ldr	r2, [r4, #0]
   86492:	6961      	ldr	r1, [r4, #20]
   86494:	1ad3      	subs	r3, r2, r3
   86496:	428b      	cmp	r3, r1
   86498:	da1c      	bge.n	864d4 <__swbuf_r+0x6c>
   8649a:	3301      	adds	r3, #1
   8649c:	68a1      	ldr	r1, [r4, #8]
   8649e:	1c50      	adds	r0, r2, #1
   864a0:	3901      	subs	r1, #1
   864a2:	60a1      	str	r1, [r4, #8]
   864a4:	6020      	str	r0, [r4, #0]
   864a6:	7015      	strb	r5, [r2, #0]
   864a8:	6962      	ldr	r2, [r4, #20]
   864aa:	429a      	cmp	r2, r3
   864ac:	d01a      	beq.n	864e4 <__swbuf_r+0x7c>
   864ae:	89a3      	ldrh	r3, [r4, #12]
   864b0:	07db      	lsls	r3, r3, #31
   864b2:	d501      	bpl.n	864b8 <__swbuf_r+0x50>
   864b4:	2d0a      	cmp	r5, #10
   864b6:	d015      	beq.n	864e4 <__swbuf_r+0x7c>
   864b8:	4628      	mov	r0, r5
   864ba:	bd70      	pop	{r4, r5, r6, pc}
   864bc:	6e61      	ldr	r1, [r4, #100]	; 0x64
   864be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   864c2:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   864c6:	81a2      	strh	r2, [r4, #12]
   864c8:	6822      	ldr	r2, [r4, #0]
   864ca:	6661      	str	r1, [r4, #100]	; 0x64
   864cc:	6961      	ldr	r1, [r4, #20]
   864ce:	1ad3      	subs	r3, r2, r3
   864d0:	428b      	cmp	r3, r1
   864d2:	dbe2      	blt.n	8649a <__swbuf_r+0x32>
   864d4:	4630      	mov	r0, r6
   864d6:	4621      	mov	r1, r4
   864d8:	f7fe fd56 	bl	84f88 <_fflush_r>
   864dc:	b940      	cbnz	r0, 864f0 <__swbuf_r+0x88>
   864de:	6822      	ldr	r2, [r4, #0]
   864e0:	2301      	movs	r3, #1
   864e2:	e7db      	b.n	8649c <__swbuf_r+0x34>
   864e4:	4630      	mov	r0, r6
   864e6:	4621      	mov	r1, r4
   864e8:	f7fe fd4e 	bl	84f88 <_fflush_r>
   864ec:	2800      	cmp	r0, #0
   864ee:	d0e3      	beq.n	864b8 <__swbuf_r+0x50>
   864f0:	f04f 30ff 	mov.w	r0, #4294967295
   864f4:	bd70      	pop	{r4, r5, r6, pc}
   864f6:	4630      	mov	r0, r6
   864f8:	4621      	mov	r1, r4
   864fa:	f7fe fc2f 	bl	84d5c <__swsetup_r>
   864fe:	2800      	cmp	r0, #0
   86500:	d1f6      	bne.n	864f0 <__swbuf_r+0x88>
   86502:	89a2      	ldrh	r2, [r4, #12]
   86504:	6923      	ldr	r3, [r4, #16]
   86506:	b291      	uxth	r1, r2
   86508:	e7bf      	b.n	8648a <__swbuf_r+0x22>
   8650a:	f7fe fdd1 	bl	850b0 <__sinit>
   8650e:	e7b3      	b.n	86478 <__swbuf_r+0x10>

00086510 <_wcrtomb_r>:
   86510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86514:	4605      	mov	r5, r0
   86516:	b086      	sub	sp, #24
   86518:	461e      	mov	r6, r3
   8651a:	460c      	mov	r4, r1
   8651c:	b1a1      	cbz	r1, 86548 <_wcrtomb_r+0x38>
   8651e:	4b10      	ldr	r3, [pc, #64]	; (86560 <_wcrtomb_r+0x50>)
   86520:	4617      	mov	r7, r2
   86522:	f8d3 8000 	ldr.w	r8, [r3]
   86526:	f7ff f92b 	bl	85780 <__locale_charset>
   8652a:	9600      	str	r6, [sp, #0]
   8652c:	4603      	mov	r3, r0
   8652e:	4621      	mov	r1, r4
   86530:	463a      	mov	r2, r7
   86532:	4628      	mov	r0, r5
   86534:	47c0      	blx	r8
   86536:	1c43      	adds	r3, r0, #1
   86538:	d103      	bne.n	86542 <_wcrtomb_r+0x32>
   8653a:	2200      	movs	r2, #0
   8653c:	238a      	movs	r3, #138	; 0x8a
   8653e:	6032      	str	r2, [r6, #0]
   86540:	602b      	str	r3, [r5, #0]
   86542:	b006      	add	sp, #24
   86544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86548:	4b05      	ldr	r3, [pc, #20]	; (86560 <_wcrtomb_r+0x50>)
   8654a:	681f      	ldr	r7, [r3, #0]
   8654c:	f7ff f918 	bl	85780 <__locale_charset>
   86550:	9600      	str	r6, [sp, #0]
   86552:	4603      	mov	r3, r0
   86554:	4622      	mov	r2, r4
   86556:	4628      	mov	r0, r5
   86558:	a903      	add	r1, sp, #12
   8655a:	47b8      	blx	r7
   8655c:	e7eb      	b.n	86536 <_wcrtomb_r+0x26>
   8655e:	bf00      	nop
   86560:	20070c68 	.word	0x20070c68

00086564 <__ascii_wctomb>:
   86564:	b121      	cbz	r1, 86570 <__ascii_wctomb+0xc>
   86566:	2aff      	cmp	r2, #255	; 0xff
   86568:	d804      	bhi.n	86574 <__ascii_wctomb+0x10>
   8656a:	700a      	strb	r2, [r1, #0]
   8656c:	2001      	movs	r0, #1
   8656e:	4770      	bx	lr
   86570:	4608      	mov	r0, r1
   86572:	4770      	bx	lr
   86574:	238a      	movs	r3, #138	; 0x8a
   86576:	6003      	str	r3, [r0, #0]
   86578:	f04f 30ff 	mov.w	r0, #4294967295
   8657c:	4770      	bx	lr
   8657e:	bf00      	nop

00086580 <_write_r>:
   86580:	b570      	push	{r4, r5, r6, lr}
   86582:	4c08      	ldr	r4, [pc, #32]	; (865a4 <_write_r+0x24>)
   86584:	4606      	mov	r6, r0
   86586:	2500      	movs	r5, #0
   86588:	4608      	mov	r0, r1
   8658a:	4611      	mov	r1, r2
   8658c:	461a      	mov	r2, r3
   8658e:	6025      	str	r5, [r4, #0]
   86590:	f7fb f856 	bl	81640 <_write>
   86594:	1c43      	adds	r3, r0, #1
   86596:	d000      	beq.n	8659a <_write_r+0x1a>
   86598:	bd70      	pop	{r4, r5, r6, pc}
   8659a:	6823      	ldr	r3, [r4, #0]
   8659c:	2b00      	cmp	r3, #0
   8659e:	d0fb      	beq.n	86598 <_write_r+0x18>
   865a0:	6033      	str	r3, [r6, #0]
   865a2:	bd70      	pop	{r4, r5, r6, pc}
   865a4:	20071258 	.word	0x20071258

000865a8 <__register_exitproc>:
   865a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   865ac:	4c25      	ldr	r4, [pc, #148]	; (86644 <__register_exitproc+0x9c>)
   865ae:	4606      	mov	r6, r0
   865b0:	6825      	ldr	r5, [r4, #0]
   865b2:	4688      	mov	r8, r1
   865b4:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   865b8:	4692      	mov	sl, r2
   865ba:	4699      	mov	r9, r3
   865bc:	b3c4      	cbz	r4, 86630 <__register_exitproc+0x88>
   865be:	6860      	ldr	r0, [r4, #4]
   865c0:	281f      	cmp	r0, #31
   865c2:	dc17      	bgt.n	865f4 <__register_exitproc+0x4c>
   865c4:	1c41      	adds	r1, r0, #1
   865c6:	b176      	cbz	r6, 865e6 <__register_exitproc+0x3e>
   865c8:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   865cc:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   865d0:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   865d4:	2201      	movs	r2, #1
   865d6:	4082      	lsls	r2, r0
   865d8:	4315      	orrs	r5, r2
   865da:	2e02      	cmp	r6, #2
   865dc:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   865e0:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   865e4:	d01e      	beq.n	86624 <__register_exitproc+0x7c>
   865e6:	1c83      	adds	r3, r0, #2
   865e8:	6061      	str	r1, [r4, #4]
   865ea:	2000      	movs	r0, #0
   865ec:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   865f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   865f4:	4b14      	ldr	r3, [pc, #80]	; (86648 <__register_exitproc+0xa0>)
   865f6:	b303      	cbz	r3, 8663a <__register_exitproc+0x92>
   865f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   865fc:	f7ff f93a 	bl	85874 <malloc>
   86600:	4604      	mov	r4, r0
   86602:	b1d0      	cbz	r0, 8663a <__register_exitproc+0x92>
   86604:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   86608:	2700      	movs	r7, #0
   8660a:	e884 0088 	stmia.w	r4, {r3, r7}
   8660e:	4638      	mov	r0, r7
   86610:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   86614:	2101      	movs	r1, #1
   86616:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   8661a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   8661e:	2e00      	cmp	r6, #0
   86620:	d0e1      	beq.n	865e6 <__register_exitproc+0x3e>
   86622:	e7d1      	b.n	865c8 <__register_exitproc+0x20>
   86624:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   86628:	431a      	orrs	r2, r3
   8662a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   8662e:	e7da      	b.n	865e6 <__register_exitproc+0x3e>
   86630:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   86634:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   86638:	e7c1      	b.n	865be <__register_exitproc+0x16>
   8663a:	f04f 30ff 	mov.w	r0, #4294967295
   8663e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86642:	bf00      	nop
   86644:	00086dd4 	.word	0x00086dd4
   86648:	00085875 	.word	0x00085875

0008664c <_close_r>:
   8664c:	b538      	push	{r3, r4, r5, lr}
   8664e:	4c07      	ldr	r4, [pc, #28]	; (8666c <_close_r+0x20>)
   86650:	2300      	movs	r3, #0
   86652:	4605      	mov	r5, r0
   86654:	4608      	mov	r0, r1
   86656:	6023      	str	r3, [r4, #0]
   86658:	f7fd f9b4 	bl	839c4 <_close>
   8665c:	1c43      	adds	r3, r0, #1
   8665e:	d000      	beq.n	86662 <_close_r+0x16>
   86660:	bd38      	pop	{r3, r4, r5, pc}
   86662:	6823      	ldr	r3, [r4, #0]
   86664:	2b00      	cmp	r3, #0
   86666:	d0fb      	beq.n	86660 <_close_r+0x14>
   86668:	602b      	str	r3, [r5, #0]
   8666a:	bd38      	pop	{r3, r4, r5, pc}
   8666c:	20071258 	.word	0x20071258

00086670 <_fclose_r>:
   86670:	2900      	cmp	r1, #0
   86672:	d03d      	beq.n	866f0 <_fclose_r+0x80>
   86674:	b570      	push	{r4, r5, r6, lr}
   86676:	4605      	mov	r5, r0
   86678:	460c      	mov	r4, r1
   8667a:	b108      	cbz	r0, 86680 <_fclose_r+0x10>
   8667c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8667e:	b37b      	cbz	r3, 866e0 <_fclose_r+0x70>
   86680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   86684:	b90b      	cbnz	r3, 8668a <_fclose_r+0x1a>
   86686:	2000      	movs	r0, #0
   86688:	bd70      	pop	{r4, r5, r6, pc}
   8668a:	4628      	mov	r0, r5
   8668c:	4621      	mov	r1, r4
   8668e:	f7fe fbd7 	bl	84e40 <__sflush_r>
   86692:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   86694:	4606      	mov	r6, r0
   86696:	b133      	cbz	r3, 866a6 <_fclose_r+0x36>
   86698:	4628      	mov	r0, r5
   8669a:	69e1      	ldr	r1, [r4, #28]
   8669c:	4798      	blx	r3
   8669e:	2800      	cmp	r0, #0
   866a0:	bfb8      	it	lt
   866a2:	f04f 36ff 	movlt.w	r6, #4294967295
   866a6:	89a3      	ldrh	r3, [r4, #12]
   866a8:	061b      	lsls	r3, r3, #24
   866aa:	d41c      	bmi.n	866e6 <_fclose_r+0x76>
   866ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
   866ae:	b141      	cbz	r1, 866c2 <_fclose_r+0x52>
   866b0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   866b4:	4299      	cmp	r1, r3
   866b6:	d002      	beq.n	866be <_fclose_r+0x4e>
   866b8:	4628      	mov	r0, r5
   866ba:	f7fe fdd1 	bl	85260 <_free_r>
   866be:	2300      	movs	r3, #0
   866c0:	6323      	str	r3, [r4, #48]	; 0x30
   866c2:	6c61      	ldr	r1, [r4, #68]	; 0x44
   866c4:	b121      	cbz	r1, 866d0 <_fclose_r+0x60>
   866c6:	4628      	mov	r0, r5
   866c8:	f7fe fdca 	bl	85260 <_free_r>
   866cc:	2300      	movs	r3, #0
   866ce:	6463      	str	r3, [r4, #68]	; 0x44
   866d0:	f7fe fcf4 	bl	850bc <__sfp_lock_acquire>
   866d4:	2300      	movs	r3, #0
   866d6:	81a3      	strh	r3, [r4, #12]
   866d8:	f7fe fcf2 	bl	850c0 <__sfp_lock_release>
   866dc:	4630      	mov	r0, r6
   866de:	bd70      	pop	{r4, r5, r6, pc}
   866e0:	f7fe fce6 	bl	850b0 <__sinit>
   866e4:	e7cc      	b.n	86680 <_fclose_r+0x10>
   866e6:	4628      	mov	r0, r5
   866e8:	6921      	ldr	r1, [r4, #16]
   866ea:	f7fe fdb9 	bl	85260 <_free_r>
   866ee:	e7dd      	b.n	866ac <_fclose_r+0x3c>
   866f0:	2000      	movs	r0, #0
   866f2:	4770      	bx	lr

000866f4 <_fstat_r>:
   866f4:	b538      	push	{r3, r4, r5, lr}
   866f6:	4c08      	ldr	r4, [pc, #32]	; (86718 <_fstat_r+0x24>)
   866f8:	2300      	movs	r3, #0
   866fa:	4605      	mov	r5, r0
   866fc:	4608      	mov	r0, r1
   866fe:	4611      	mov	r1, r2
   86700:	6023      	str	r3, [r4, #0]
   86702:	f7fd f96b 	bl	839dc <_fstat>
   86706:	1c43      	adds	r3, r0, #1
   86708:	d000      	beq.n	8670c <_fstat_r+0x18>
   8670a:	bd38      	pop	{r3, r4, r5, pc}
   8670c:	6823      	ldr	r3, [r4, #0]
   8670e:	2b00      	cmp	r3, #0
   86710:	d0fb      	beq.n	8670a <_fstat_r+0x16>
   86712:	602b      	str	r3, [r5, #0]
   86714:	bd38      	pop	{r3, r4, r5, pc}
   86716:	bf00      	nop
   86718:	20071258 	.word	0x20071258

0008671c <_isatty_r>:
   8671c:	b538      	push	{r3, r4, r5, lr}
   8671e:	4c07      	ldr	r4, [pc, #28]	; (8673c <_isatty_r+0x20>)
   86720:	2300      	movs	r3, #0
   86722:	4605      	mov	r5, r0
   86724:	4608      	mov	r0, r1
   86726:	6023      	str	r3, [r4, #0]
   86728:	f7fd f968 	bl	839fc <_isatty>
   8672c:	1c43      	adds	r3, r0, #1
   8672e:	d000      	beq.n	86732 <_isatty_r+0x16>
   86730:	bd38      	pop	{r3, r4, r5, pc}
   86732:	6823      	ldr	r3, [r4, #0]
   86734:	2b00      	cmp	r3, #0
   86736:	d0fb      	beq.n	86730 <_isatty_r+0x14>
   86738:	602b      	str	r3, [r5, #0]
   8673a:	bd38      	pop	{r3, r4, r5, pc}
   8673c:	20071258 	.word	0x20071258

00086740 <_lseek_r>:
   86740:	b570      	push	{r4, r5, r6, lr}
   86742:	4c08      	ldr	r4, [pc, #32]	; (86764 <_lseek_r+0x24>)
   86744:	4606      	mov	r6, r0
   86746:	2500      	movs	r5, #0
   86748:	4608      	mov	r0, r1
   8674a:	4611      	mov	r1, r2
   8674c:	461a      	mov	r2, r3
   8674e:	6025      	str	r5, [r4, #0]
   86750:	f7fd f960 	bl	83a14 <_lseek>
   86754:	1c43      	adds	r3, r0, #1
   86756:	d000      	beq.n	8675a <_lseek_r+0x1a>
   86758:	bd70      	pop	{r4, r5, r6, pc}
   8675a:	6823      	ldr	r3, [r4, #0]
   8675c:	2b00      	cmp	r3, #0
   8675e:	d0fb      	beq.n	86758 <_lseek_r+0x18>
   86760:	6033      	str	r3, [r6, #0]
   86762:	bd70      	pop	{r4, r5, r6, pc}
   86764:	20071258 	.word	0x20071258

00086768 <_read_r>:
   86768:	b570      	push	{r4, r5, r6, lr}
   8676a:	4c08      	ldr	r4, [pc, #32]	; (8678c <_read_r+0x24>)
   8676c:	4606      	mov	r6, r0
   8676e:	2500      	movs	r5, #0
   86770:	4608      	mov	r0, r1
   86772:	4611      	mov	r1, r2
   86774:	461a      	mov	r2, r3
   86776:	6025      	str	r5, [r4, #0]
   86778:	f7fa ff36 	bl	815e8 <_read>
   8677c:	1c43      	adds	r3, r0, #1
   8677e:	d000      	beq.n	86782 <_read_r+0x1a>
   86780:	bd70      	pop	{r4, r5, r6, pc}
   86782:	6823      	ldr	r3, [r4, #0]
   86784:	2b00      	cmp	r3, #0
   86786:	d0fb      	beq.n	86780 <_read_r+0x18>
   86788:	6033      	str	r3, [r6, #0]
   8678a:	bd70      	pop	{r4, r5, r6, pc}
   8678c:	20071258 	.word	0x20071258

00086790 <__aeabi_uldivmod>:
   86790:	b953      	cbnz	r3, 867a8 <__aeabi_uldivmod+0x18>
   86792:	b94a      	cbnz	r2, 867a8 <__aeabi_uldivmod+0x18>
   86794:	2900      	cmp	r1, #0
   86796:	bf08      	it	eq
   86798:	2800      	cmpeq	r0, #0
   8679a:	bf1c      	itt	ne
   8679c:	f04f 31ff 	movne.w	r1, #4294967295
   867a0:	f04f 30ff 	movne.w	r0, #4294967295
   867a4:	f000 b83c 	b.w	86820 <__aeabi_idiv0>
   867a8:	b082      	sub	sp, #8
   867aa:	46ec      	mov	ip, sp
   867ac:	e92d 5000 	stmdb	sp!, {ip, lr}
   867b0:	f000 f81e 	bl	867f0 <__gnu_uldivmod_helper>
   867b4:	f8dd e004 	ldr.w	lr, [sp, #4]
   867b8:	b002      	add	sp, #8
   867ba:	bc0c      	pop	{r2, r3}
   867bc:	4770      	bx	lr
   867be:	bf00      	nop

000867c0 <__gnu_ldivmod_helper>:
   867c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   867c4:	9c06      	ldr	r4, [sp, #24]
   867c6:	4690      	mov	r8, r2
   867c8:	4606      	mov	r6, r0
   867ca:	460f      	mov	r7, r1
   867cc:	461d      	mov	r5, r3
   867ce:	f000 f829 	bl	86824 <__divdi3>
   867d2:	fb08 fc01 	mul.w	ip, r8, r1
   867d6:	fba8 2300 	umull	r2, r3, r8, r0
   867da:	fb00 c505 	mla	r5, r0, r5, ip
   867de:	1ab2      	subs	r2, r6, r2
   867e0:	442b      	add	r3, r5
   867e2:	eb67 0303 	sbc.w	r3, r7, r3
   867e6:	4686      	mov	lr, r0
   867e8:	e9c4 2300 	strd	r2, r3, [r4]
   867ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000867f0 <__gnu_uldivmod_helper>:
   867f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   867f4:	9e08      	ldr	r6, [sp, #32]
   867f6:	4617      	mov	r7, r2
   867f8:	4680      	mov	r8, r0
   867fa:	4689      	mov	r9, r1
   867fc:	461d      	mov	r5, r3
   867fe:	f000 f967 	bl	86ad0 <__udivdi3>
   86802:	fb00 f305 	mul.w	r3, r0, r5
   86806:	fba0 4507 	umull	r4, r5, r0, r7
   8680a:	fb07 3701 	mla	r7, r7, r1, r3
   8680e:	ebb8 0404 	subs.w	r4, r8, r4
   86812:	443d      	add	r5, r7
   86814:	eb69 0505 	sbc.w	r5, r9, r5
   86818:	e9c6 4500 	strd	r4, r5, [r6]
   8681c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00086820 <__aeabi_idiv0>:
   86820:	4770      	bx	lr
   86822:	bf00      	nop

00086824 <__divdi3>:
   86824:	2900      	cmp	r1, #0
   86826:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8682a:	f2c0 80a8 	blt.w	8697e <__divdi3+0x15a>
   8682e:	2600      	movs	r6, #0
   86830:	2b00      	cmp	r3, #0
   86832:	f2c0 809e 	blt.w	86972 <__divdi3+0x14e>
   86836:	4681      	mov	r9, r0
   86838:	468e      	mov	lr, r1
   8683a:	4690      	mov	r8, r2
   8683c:	469c      	mov	ip, r3
   8683e:	4617      	mov	r7, r2
   86840:	4604      	mov	r4, r0
   86842:	460d      	mov	r5, r1
   86844:	2b00      	cmp	r3, #0
   86846:	d13d      	bne.n	868c4 <__divdi3+0xa0>
   86848:	428a      	cmp	r2, r1
   8684a:	d959      	bls.n	86900 <__divdi3+0xdc>
   8684c:	fab2 f382 	clz	r3, r2
   86850:	b13b      	cbz	r3, 86862 <__divdi3+0x3e>
   86852:	f1c3 0220 	rsb	r2, r3, #32
   86856:	409d      	lsls	r5, r3
   86858:	fa20 f202 	lsr.w	r2, r0, r2
   8685c:	409f      	lsls	r7, r3
   8685e:	4315      	orrs	r5, r2
   86860:	409c      	lsls	r4, r3
   86862:	0c39      	lsrs	r1, r7, #16
   86864:	fbb5 f0f1 	udiv	r0, r5, r1
   86868:	fa1f fe87 	uxth.w	lr, r7
   8686c:	fb01 5510 	mls	r5, r1, r0, r5
   86870:	fb0e f300 	mul.w	r3, lr, r0
   86874:	0c22      	lsrs	r2, r4, #16
   86876:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   8687a:	42ab      	cmp	r3, r5
   8687c:	d909      	bls.n	86892 <__divdi3+0x6e>
   8687e:	19ed      	adds	r5, r5, r7
   86880:	f100 32ff 	add.w	r2, r0, #4294967295
   86884:	f080 810b 	bcs.w	86a9e <__divdi3+0x27a>
   86888:	42ab      	cmp	r3, r5
   8688a:	f240 8108 	bls.w	86a9e <__divdi3+0x27a>
   8688e:	3802      	subs	r0, #2
   86890:	443d      	add	r5, r7
   86892:	1aed      	subs	r5, r5, r3
   86894:	fbb5 f3f1 	udiv	r3, r5, r1
   86898:	fb01 5513 	mls	r5, r1, r3, r5
   8689c:	fb0e fe03 	mul.w	lr, lr, r3
   868a0:	b2a4      	uxth	r4, r4
   868a2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   868a6:	45ae      	cmp	lr, r5
   868a8:	d908      	bls.n	868bc <__divdi3+0x98>
   868aa:	19ed      	adds	r5, r5, r7
   868ac:	f103 32ff 	add.w	r2, r3, #4294967295
   868b0:	f080 80f7 	bcs.w	86aa2 <__divdi3+0x27e>
   868b4:	45ae      	cmp	lr, r5
   868b6:	f240 80f4 	bls.w	86aa2 <__divdi3+0x27e>
   868ba:	3b02      	subs	r3, #2
   868bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   868c0:	2200      	movs	r2, #0
   868c2:	e003      	b.n	868cc <__divdi3+0xa8>
   868c4:	428b      	cmp	r3, r1
   868c6:	d90f      	bls.n	868e8 <__divdi3+0xc4>
   868c8:	2200      	movs	r2, #0
   868ca:	4613      	mov	r3, r2
   868cc:	1c34      	adds	r4, r6, #0
   868ce:	bf18      	it	ne
   868d0:	2401      	movne	r4, #1
   868d2:	4260      	negs	r0, r4
   868d4:	f04f 0500 	mov.w	r5, #0
   868d8:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
   868dc:	4058      	eors	r0, r3
   868de:	4051      	eors	r1, r2
   868e0:	1900      	adds	r0, r0, r4
   868e2:	4169      	adcs	r1, r5
   868e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   868e8:	fab3 f283 	clz	r2, r3
   868ec:	2a00      	cmp	r2, #0
   868ee:	f040 8089 	bne.w	86a04 <__divdi3+0x1e0>
   868f2:	428b      	cmp	r3, r1
   868f4:	d302      	bcc.n	868fc <__divdi3+0xd8>
   868f6:	4580      	cmp	r8, r0
   868f8:	f200 80e2 	bhi.w	86ac0 <__divdi3+0x29c>
   868fc:	2301      	movs	r3, #1
   868fe:	e7e5      	b.n	868cc <__divdi3+0xa8>
   86900:	b912      	cbnz	r2, 86908 <__divdi3+0xe4>
   86902:	2301      	movs	r3, #1
   86904:	fbb3 f7f2 	udiv	r7, r3, r2
   86908:	fab7 f887 	clz	r8, r7
   8690c:	f1b8 0f00 	cmp.w	r8, #0
   86910:	d13b      	bne.n	8698a <__divdi3+0x166>
   86912:	1bed      	subs	r5, r5, r7
   86914:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   86918:	fa1f fe87 	uxth.w	lr, r7
   8691c:	2201      	movs	r2, #1
   8691e:	fbb5 f0fc 	udiv	r0, r5, ip
   86922:	fb0c 5510 	mls	r5, ip, r0, r5
   86926:	fb0e f300 	mul.w	r3, lr, r0
   8692a:	0c21      	lsrs	r1, r4, #16
   8692c:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   86930:	42ab      	cmp	r3, r5
   86932:	d907      	bls.n	86944 <__divdi3+0x120>
   86934:	19ed      	adds	r5, r5, r7
   86936:	f100 31ff 	add.w	r1, r0, #4294967295
   8693a:	d202      	bcs.n	86942 <__divdi3+0x11e>
   8693c:	42ab      	cmp	r3, r5
   8693e:	f200 80c3 	bhi.w	86ac8 <__divdi3+0x2a4>
   86942:	4608      	mov	r0, r1
   86944:	1aed      	subs	r5, r5, r3
   86946:	fbb5 f3fc 	udiv	r3, r5, ip
   8694a:	fb0c 5513 	mls	r5, ip, r3, r5
   8694e:	fb0e fe03 	mul.w	lr, lr, r3
   86952:	b2a4      	uxth	r4, r4
   86954:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   86958:	45ae      	cmp	lr, r5
   8695a:	d907      	bls.n	8696c <__divdi3+0x148>
   8695c:	19ed      	adds	r5, r5, r7
   8695e:	f103 31ff 	add.w	r1, r3, #4294967295
   86962:	d202      	bcs.n	8696a <__divdi3+0x146>
   86964:	45ae      	cmp	lr, r5
   86966:	f200 80ad 	bhi.w	86ac4 <__divdi3+0x2a0>
   8696a:	460b      	mov	r3, r1
   8696c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   86970:	e7ac      	b.n	868cc <__divdi3+0xa8>
   86972:	4252      	negs	r2, r2
   86974:	ea6f 0606 	mvn.w	r6, r6
   86978:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8697c:	e75b      	b.n	86836 <__divdi3+0x12>
   8697e:	4240      	negs	r0, r0
   86980:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   86984:	f04f 36ff 	mov.w	r6, #4294967295
   86988:	e752      	b.n	86830 <__divdi3+0xc>
   8698a:	fa07 f708 	lsl.w	r7, r7, r8
   8698e:	f1c8 0220 	rsb	r2, r8, #32
   86992:	fa25 f302 	lsr.w	r3, r5, r2
   86996:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   8699a:	fbb3 f1fc 	udiv	r1, r3, ip
   8699e:	fa1f fe87 	uxth.w	lr, r7
   869a2:	fb0c 3311 	mls	r3, ip, r1, r3
   869a6:	fa24 f202 	lsr.w	r2, r4, r2
   869aa:	fa05 f508 	lsl.w	r5, r5, r8
   869ae:	fb0e f901 	mul.w	r9, lr, r1
   869b2:	432a      	orrs	r2, r5
   869b4:	0c10      	lsrs	r0, r2, #16
   869b6:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   869ba:	4599      	cmp	r9, r3
   869bc:	fa04 f408 	lsl.w	r4, r4, r8
   869c0:	d907      	bls.n	869d2 <__divdi3+0x1ae>
   869c2:	19db      	adds	r3, r3, r7
   869c4:	f101 30ff 	add.w	r0, r1, #4294967295
   869c8:	d278      	bcs.n	86abc <__divdi3+0x298>
   869ca:	4599      	cmp	r9, r3
   869cc:	d976      	bls.n	86abc <__divdi3+0x298>
   869ce:	3902      	subs	r1, #2
   869d0:	443b      	add	r3, r7
   869d2:	ebc9 0303 	rsb	r3, r9, r3
   869d6:	fbb3 f0fc 	udiv	r0, r3, ip
   869da:	fb0c 3310 	mls	r3, ip, r0, r3
   869de:	fb0e f500 	mul.w	r5, lr, r0
   869e2:	b292      	uxth	r2, r2
   869e4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   869e8:	429d      	cmp	r5, r3
   869ea:	d907      	bls.n	869fc <__divdi3+0x1d8>
   869ec:	19db      	adds	r3, r3, r7
   869ee:	f100 32ff 	add.w	r2, r0, #4294967295
   869f2:	d25f      	bcs.n	86ab4 <__divdi3+0x290>
   869f4:	429d      	cmp	r5, r3
   869f6:	d95d      	bls.n	86ab4 <__divdi3+0x290>
   869f8:	3802      	subs	r0, #2
   869fa:	443b      	add	r3, r7
   869fc:	1b5d      	subs	r5, r3, r5
   869fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
   86a02:	e78c      	b.n	8691e <__divdi3+0xfa>
   86a04:	f1c2 0320 	rsb	r3, r2, #32
   86a08:	fa28 f103 	lsr.w	r1, r8, r3
   86a0c:	fa0c fc02 	lsl.w	ip, ip, r2
   86a10:	ea41 0c0c 	orr.w	ip, r1, ip
   86a14:	ea4f 401c 	mov.w	r0, ip, lsr #16
   86a18:	fa2e f103 	lsr.w	r1, lr, r3
   86a1c:	fbb1 f5f0 	udiv	r5, r1, r0
   86a20:	fa1f f78c 	uxth.w	r7, ip
   86a24:	fb00 1115 	mls	r1, r0, r5, r1
   86a28:	fa29 f303 	lsr.w	r3, r9, r3
   86a2c:	fa0e fe02 	lsl.w	lr, lr, r2
   86a30:	fb07 f905 	mul.w	r9, r7, r5
   86a34:	ea43 0e0e 	orr.w	lr, r3, lr
   86a38:	ea4f 431e 	mov.w	r3, lr, lsr #16
   86a3c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   86a40:	4589      	cmp	r9, r1
   86a42:	fa08 f802 	lsl.w	r8, r8, r2
   86a46:	d908      	bls.n	86a5a <__divdi3+0x236>
   86a48:	eb11 010c 	adds.w	r1, r1, ip
   86a4c:	f105 33ff 	add.w	r3, r5, #4294967295
   86a50:	d232      	bcs.n	86ab8 <__divdi3+0x294>
   86a52:	4589      	cmp	r9, r1
   86a54:	d930      	bls.n	86ab8 <__divdi3+0x294>
   86a56:	3d02      	subs	r5, #2
   86a58:	4461      	add	r1, ip
   86a5a:	ebc9 0101 	rsb	r1, r9, r1
   86a5e:	fbb1 f3f0 	udiv	r3, r1, r0
   86a62:	fb00 1113 	mls	r1, r0, r3, r1
   86a66:	fb07 f703 	mul.w	r7, r7, r3
   86a6a:	fa1f fe8e 	uxth.w	lr, lr
   86a6e:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   86a72:	4577      	cmp	r7, lr
   86a74:	d908      	bls.n	86a88 <__divdi3+0x264>
   86a76:	eb1e 0e0c 	adds.w	lr, lr, ip
   86a7a:	f103 31ff 	add.w	r1, r3, #4294967295
   86a7e:	d217      	bcs.n	86ab0 <__divdi3+0x28c>
   86a80:	4577      	cmp	r7, lr
   86a82:	d915      	bls.n	86ab0 <__divdi3+0x28c>
   86a84:	3b02      	subs	r3, #2
   86a86:	44e6      	add	lr, ip
   86a88:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   86a8c:	fba3 8908 	umull	r8, r9, r3, r8
   86a90:	ebc7 0e0e 	rsb	lr, r7, lr
   86a94:	45ce      	cmp	lr, r9
   86a96:	d309      	bcc.n	86aac <__divdi3+0x288>
   86a98:	d005      	beq.n	86aa6 <__divdi3+0x282>
   86a9a:	2200      	movs	r2, #0
   86a9c:	e716      	b.n	868cc <__divdi3+0xa8>
   86a9e:	4610      	mov	r0, r2
   86aa0:	e6f7      	b.n	86892 <__divdi3+0x6e>
   86aa2:	4613      	mov	r3, r2
   86aa4:	e70a      	b.n	868bc <__divdi3+0x98>
   86aa6:	4094      	lsls	r4, r2
   86aa8:	4544      	cmp	r4, r8
   86aaa:	d2f6      	bcs.n	86a9a <__divdi3+0x276>
   86aac:	3b01      	subs	r3, #1
   86aae:	e7f4      	b.n	86a9a <__divdi3+0x276>
   86ab0:	460b      	mov	r3, r1
   86ab2:	e7e9      	b.n	86a88 <__divdi3+0x264>
   86ab4:	4610      	mov	r0, r2
   86ab6:	e7a1      	b.n	869fc <__divdi3+0x1d8>
   86ab8:	461d      	mov	r5, r3
   86aba:	e7ce      	b.n	86a5a <__divdi3+0x236>
   86abc:	4601      	mov	r1, r0
   86abe:	e788      	b.n	869d2 <__divdi3+0x1ae>
   86ac0:	4613      	mov	r3, r2
   86ac2:	e703      	b.n	868cc <__divdi3+0xa8>
   86ac4:	3b02      	subs	r3, #2
   86ac6:	e751      	b.n	8696c <__divdi3+0x148>
   86ac8:	3802      	subs	r0, #2
   86aca:	443d      	add	r5, r7
   86acc:	e73a      	b.n	86944 <__divdi3+0x120>
   86ace:	bf00      	nop

00086ad0 <__udivdi3>:
   86ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   86ad4:	2b00      	cmp	r3, #0
   86ad6:	d144      	bne.n	86b62 <__udivdi3+0x92>
   86ad8:	428a      	cmp	r2, r1
   86ada:	4615      	mov	r5, r2
   86adc:	4604      	mov	r4, r0
   86ade:	d94f      	bls.n	86b80 <__udivdi3+0xb0>
   86ae0:	fab2 f782 	clz	r7, r2
   86ae4:	460e      	mov	r6, r1
   86ae6:	b14f      	cbz	r7, 86afc <__udivdi3+0x2c>
   86ae8:	f1c7 0320 	rsb	r3, r7, #32
   86aec:	40b9      	lsls	r1, r7
   86aee:	fa20 f603 	lsr.w	r6, r0, r3
   86af2:	fa02 f507 	lsl.w	r5, r2, r7
   86af6:	430e      	orrs	r6, r1
   86af8:	fa00 f407 	lsl.w	r4, r0, r7
   86afc:	0c2f      	lsrs	r7, r5, #16
   86afe:	fbb6 f0f7 	udiv	r0, r6, r7
   86b02:	fa1f fe85 	uxth.w	lr, r5
   86b06:	fb07 6210 	mls	r2, r7, r0, r6
   86b0a:	fb0e f100 	mul.w	r1, lr, r0
   86b0e:	0c26      	lsrs	r6, r4, #16
   86b10:	ea46 4302 	orr.w	r3, r6, r2, lsl #16
   86b14:	4299      	cmp	r1, r3
   86b16:	d909      	bls.n	86b2c <__udivdi3+0x5c>
   86b18:	195b      	adds	r3, r3, r5
   86b1a:	f100 32ff 	add.w	r2, r0, #4294967295
   86b1e:	f080 80ee 	bcs.w	86cfe <__udivdi3+0x22e>
   86b22:	4299      	cmp	r1, r3
   86b24:	f240 80eb 	bls.w	86cfe <__udivdi3+0x22e>
   86b28:	3802      	subs	r0, #2
   86b2a:	442b      	add	r3, r5
   86b2c:	1a59      	subs	r1, r3, r1
   86b2e:	fbb1 f3f7 	udiv	r3, r1, r7
   86b32:	fb07 1113 	mls	r1, r7, r3, r1
   86b36:	fb0e fe03 	mul.w	lr, lr, r3
   86b3a:	b2a4      	uxth	r4, r4
   86b3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   86b40:	458e      	cmp	lr, r1
   86b42:	d908      	bls.n	86b56 <__udivdi3+0x86>
   86b44:	1949      	adds	r1, r1, r5
   86b46:	f103 32ff 	add.w	r2, r3, #4294967295
   86b4a:	f080 80da 	bcs.w	86d02 <__udivdi3+0x232>
   86b4e:	458e      	cmp	lr, r1
   86b50:	f240 80d7 	bls.w	86d02 <__udivdi3+0x232>
   86b54:	3b02      	subs	r3, #2
   86b56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   86b5a:	2600      	movs	r6, #0
   86b5c:	4631      	mov	r1, r6
   86b5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86b62:	428b      	cmp	r3, r1
   86b64:	d847      	bhi.n	86bf6 <__udivdi3+0x126>
   86b66:	fab3 f683 	clz	r6, r3
   86b6a:	2e00      	cmp	r6, #0
   86b6c:	d148      	bne.n	86c00 <__udivdi3+0x130>
   86b6e:	428b      	cmp	r3, r1
   86b70:	d302      	bcc.n	86b78 <__udivdi3+0xa8>
   86b72:	4282      	cmp	r2, r0
   86b74:	f200 80cf 	bhi.w	86d16 <__udivdi3+0x246>
   86b78:	2001      	movs	r0, #1
   86b7a:	4631      	mov	r1, r6
   86b7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86b80:	b912      	cbnz	r2, 86b88 <__udivdi3+0xb8>
   86b82:	2501      	movs	r5, #1
   86b84:	fbb5 f5f2 	udiv	r5, r5, r2
   86b88:	fab5 fc85 	clz	ip, r5
   86b8c:	f1bc 0f00 	cmp.w	ip, #0
   86b90:	d178      	bne.n	86c84 <__udivdi3+0x1b4>
   86b92:	1b49      	subs	r1, r1, r5
   86b94:	0c2f      	lsrs	r7, r5, #16
   86b96:	fa1f fe85 	uxth.w	lr, r5
   86b9a:	2601      	movs	r6, #1
   86b9c:	fbb1 f0f7 	udiv	r0, r1, r7
   86ba0:	fb07 1110 	mls	r1, r7, r0, r1
   86ba4:	fb0e f200 	mul.w	r2, lr, r0
   86ba8:	0c23      	lsrs	r3, r4, #16
   86baa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   86bae:	428a      	cmp	r2, r1
   86bb0:	d907      	bls.n	86bc2 <__udivdi3+0xf2>
   86bb2:	1949      	adds	r1, r1, r5
   86bb4:	f100 33ff 	add.w	r3, r0, #4294967295
   86bb8:	d202      	bcs.n	86bc0 <__udivdi3+0xf0>
   86bba:	428a      	cmp	r2, r1
   86bbc:	f200 80bc 	bhi.w	86d38 <__udivdi3+0x268>
   86bc0:	4618      	mov	r0, r3
   86bc2:	1a89      	subs	r1, r1, r2
   86bc4:	fbb1 f3f7 	udiv	r3, r1, r7
   86bc8:	fb07 1113 	mls	r1, r7, r3, r1
   86bcc:	fb0e fe03 	mul.w	lr, lr, r3
   86bd0:	b2a4      	uxth	r4, r4
   86bd2:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   86bd6:	4596      	cmp	lr, r2
   86bd8:	d908      	bls.n	86bec <__udivdi3+0x11c>
   86bda:	1952      	adds	r2, r2, r5
   86bdc:	f103 31ff 	add.w	r1, r3, #4294967295
   86be0:	f080 8091 	bcs.w	86d06 <__udivdi3+0x236>
   86be4:	4596      	cmp	lr, r2
   86be6:	f240 808e 	bls.w	86d06 <__udivdi3+0x236>
   86bea:	3b02      	subs	r3, #2
   86bec:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   86bf0:	4631      	mov	r1, r6
   86bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86bf6:	2600      	movs	r6, #0
   86bf8:	4630      	mov	r0, r6
   86bfa:	4631      	mov	r1, r6
   86bfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86c00:	f1c6 0420 	rsb	r4, r6, #32
   86c04:	fa22 f504 	lsr.w	r5, r2, r4
   86c08:	40b3      	lsls	r3, r6
   86c0a:	432b      	orrs	r3, r5
   86c0c:	fa21 f704 	lsr.w	r7, r1, r4
   86c10:	ea4f 4813 	mov.w	r8, r3, lsr #16
   86c14:	fbb7 fcf8 	udiv	ip, r7, r8
   86c18:	fa1f f983 	uxth.w	r9, r3
   86c1c:	fb08 771c 	mls	r7, r8, ip, r7
   86c20:	fa20 fe04 	lsr.w	lr, r0, r4
   86c24:	fa01 f506 	lsl.w	r5, r1, r6
   86c28:	fb09 f40c 	mul.w	r4, r9, ip
   86c2c:	ea4e 0505 	orr.w	r5, lr, r5
   86c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   86c34:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
   86c38:	42bc      	cmp	r4, r7
   86c3a:	fa02 f206 	lsl.w	r2, r2, r6
   86c3e:	d904      	bls.n	86c4a <__udivdi3+0x17a>
   86c40:	18ff      	adds	r7, r7, r3
   86c42:	f10c 31ff 	add.w	r1, ip, #4294967295
   86c46:	d368      	bcc.n	86d1a <__udivdi3+0x24a>
   86c48:	468c      	mov	ip, r1
   86c4a:	1b3f      	subs	r7, r7, r4
   86c4c:	fbb7 f4f8 	udiv	r4, r7, r8
   86c50:	fb08 7714 	mls	r7, r8, r4, r7
   86c54:	fb09 f904 	mul.w	r9, r9, r4
   86c58:	b2ad      	uxth	r5, r5
   86c5a:	ea45 4107 	orr.w	r1, r5, r7, lsl #16
   86c5e:	4589      	cmp	r9, r1
   86c60:	d904      	bls.n	86c6c <__udivdi3+0x19c>
   86c62:	18c9      	adds	r1, r1, r3
   86c64:	f104 35ff 	add.w	r5, r4, #4294967295
   86c68:	d35d      	bcc.n	86d26 <__udivdi3+0x256>
   86c6a:	462c      	mov	r4, r5
   86c6c:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
   86c70:	fba4 2302 	umull	r2, r3, r4, r2
   86c74:	ebc9 0101 	rsb	r1, r9, r1
   86c78:	4299      	cmp	r1, r3
   86c7a:	d349      	bcc.n	86d10 <__udivdi3+0x240>
   86c7c:	d045      	beq.n	86d0a <__udivdi3+0x23a>
   86c7e:	4620      	mov	r0, r4
   86c80:	2600      	movs	r6, #0
   86c82:	e76b      	b.n	86b5c <__udivdi3+0x8c>
   86c84:	f1cc 0420 	rsb	r4, ip, #32
   86c88:	fa05 f50c 	lsl.w	r5, r5, ip
   86c8c:	fa21 f304 	lsr.w	r3, r1, r4
   86c90:	0c2a      	lsrs	r2, r5, #16
   86c92:	fbb3 f6f2 	udiv	r6, r3, r2
   86c96:	fa1f fe85 	uxth.w	lr, r5
   86c9a:	fb02 3816 	mls	r8, r2, r6, r3
   86c9e:	fa20 f704 	lsr.w	r7, r0, r4
   86ca2:	fa01 f10c 	lsl.w	r1, r1, ip
   86ca6:	fb0e f906 	mul.w	r9, lr, r6
   86caa:	430f      	orrs	r7, r1
   86cac:	0c3c      	lsrs	r4, r7, #16
   86cae:	ea44 4308 	orr.w	r3, r4, r8, lsl #16
   86cb2:	4599      	cmp	r9, r3
   86cb4:	fa00 f40c 	lsl.w	r4, r0, ip
   86cb8:	d907      	bls.n	86cca <__udivdi3+0x1fa>
   86cba:	195b      	adds	r3, r3, r5
   86cbc:	f106 31ff 	add.w	r1, r6, #4294967295
   86cc0:	d238      	bcs.n	86d34 <__udivdi3+0x264>
   86cc2:	4599      	cmp	r9, r3
   86cc4:	d936      	bls.n	86d34 <__udivdi3+0x264>
   86cc6:	3e02      	subs	r6, #2
   86cc8:	442b      	add	r3, r5
   86cca:	ebc9 0303 	rsb	r3, r9, r3
   86cce:	fbb3 f0f2 	udiv	r0, r3, r2
   86cd2:	fb02 3310 	mls	r3, r2, r0, r3
   86cd6:	fb0e f100 	mul.w	r1, lr, r0
   86cda:	b2bf      	uxth	r7, r7
   86cdc:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   86ce0:	4299      	cmp	r1, r3
   86ce2:	d907      	bls.n	86cf4 <__udivdi3+0x224>
   86ce4:	195b      	adds	r3, r3, r5
   86ce6:	f100 37ff 	add.w	r7, r0, #4294967295
   86cea:	d221      	bcs.n	86d30 <__udivdi3+0x260>
   86cec:	4299      	cmp	r1, r3
   86cee:	d91f      	bls.n	86d30 <__udivdi3+0x260>
   86cf0:	3802      	subs	r0, #2
   86cf2:	442b      	add	r3, r5
   86cf4:	4617      	mov	r7, r2
   86cf6:	1a59      	subs	r1, r3, r1
   86cf8:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   86cfc:	e74e      	b.n	86b9c <__udivdi3+0xcc>
   86cfe:	4610      	mov	r0, r2
   86d00:	e714      	b.n	86b2c <__udivdi3+0x5c>
   86d02:	4613      	mov	r3, r2
   86d04:	e727      	b.n	86b56 <__udivdi3+0x86>
   86d06:	460b      	mov	r3, r1
   86d08:	e770      	b.n	86bec <__udivdi3+0x11c>
   86d0a:	40b0      	lsls	r0, r6
   86d0c:	4290      	cmp	r0, r2
   86d0e:	d2b6      	bcs.n	86c7e <__udivdi3+0x1ae>
   86d10:	1e60      	subs	r0, r4, #1
   86d12:	2600      	movs	r6, #0
   86d14:	e722      	b.n	86b5c <__udivdi3+0x8c>
   86d16:	4630      	mov	r0, r6
   86d18:	e720      	b.n	86b5c <__udivdi3+0x8c>
   86d1a:	42bc      	cmp	r4, r7
   86d1c:	d994      	bls.n	86c48 <__udivdi3+0x178>
   86d1e:	f1ac 0c02 	sub.w	ip, ip, #2
   86d22:	441f      	add	r7, r3
   86d24:	e791      	b.n	86c4a <__udivdi3+0x17a>
   86d26:	4589      	cmp	r9, r1
   86d28:	d99f      	bls.n	86c6a <__udivdi3+0x19a>
   86d2a:	3c02      	subs	r4, #2
   86d2c:	4419      	add	r1, r3
   86d2e:	e79d      	b.n	86c6c <__udivdi3+0x19c>
   86d30:	4638      	mov	r0, r7
   86d32:	e7df      	b.n	86cf4 <__udivdi3+0x224>
   86d34:	460e      	mov	r6, r1
   86d36:	e7c8      	b.n	86cca <__udivdi3+0x1fa>
   86d38:	3802      	subs	r0, #2
   86d3a:	4429      	add	r1, r5
   86d3c:	e741      	b.n	86bc2 <__udivdi3+0xf2>
   86d3e:	bf00      	nop

00086d40 <can_bit_time>:
   86d40:	0308 0202 4b03 0209 0303 4302 030a 0303     .....K.....C....
   86d50:	4603 040b 0303 4804 030c 0404 4304 040d     .F.....H.....C..
   86d60:	0404 4d04 040e 0504 4004 040f 0505 4304     ...M.....@.....C
   86d70:	0510 0505 4504 0611 0505 4704 0512 0606     .....E.....G....
   86d80:	4304 0613 0606 4404 0714 0606 4604 0815     .C.....D.....F..
   86d90:	0606 4704 0716 0707 4404 0817 0708 4604     ...G.....D.....F
   86da0:	0718 0808 4304 0819 0808 4404               .....C.....D

00086dac <uart_serial_options>:
   86dac:	c200 0001 0000 0000 0800 0000 0001 0000     ................
   86dbc:	6425 2520 0a64 0000 6577 636c 6d6f 0a65     %d %d...welcome.
   86dcc:	0000 0000 0043 0000                         ....C...

00086dd4 <_global_impure_ptr>:
   86dd4:	0408 2007                                   ... 

00086dd8 <zeroes.6869>:
   86dd8:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   86de8:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
   86df8:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
   86e08:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..

00086e18 <blanks.6868>:
   86e18:	2020 2020 2020 2020 2020 2020 2020 2020                     

00086e28 <_init>:
   86e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86e2a:	bf00      	nop
   86e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86e2e:	bc08      	pop	{r3}
   86e30:	469e      	mov	lr, r3
   86e32:	4770      	bx	lr

00086e34 <__init_array_start>:
   86e34:	00084e21 	.word	0x00084e21

00086e38 <__frame_dummy_init_array_entry>:
   86e38:	00080119                                ....

00086e3c <_fini>:
   86e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86e3e:	bf00      	nop
   86e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86e42:	bc08      	pop	{r3}
   86e44:	469e      	mov	lr, r3
   86e46:	4770      	bx	lr

00086e48 <__fini_array_start>:
   86e48:	000800f5 	.word	0x000800f5
