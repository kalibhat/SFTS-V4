
CPU2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000774c  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008774c  0008774c  0001774c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000914  20070000  00087754  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000005e0  20070914  00088068  00020914  2**2
                  ALLOC
  4 .stack        00002004  20070ef4  00088648  00020914  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020914  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002093d  2**0
                  CONTENTS, READONLY
  7 .debug_info   000199fd  00000000  00000000  00020996  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003939  00000000  00000000  0003a393  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000082be  00000000  00000000  0003dccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000f30  00000000  00000000  00045f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d80  00000000  00000000  00046eba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001d7cd  00000000  00000000  00047c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001b860  00000000  00000000  00065407  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00063bbb  00000000  00000000  00080c67  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004900  00000000  00000000  000e4824  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072ef8 	.word	0x20072ef8
   80004:	00083fa9 	.word	0x00083fa9
   80008:	00083fa1 	.word	0x00083fa1
   8000c:	00083fa1 	.word	0x00083fa1
   80010:	00083fa1 	.word	0x00083fa1
   80014:	00083fa1 	.word	0x00083fa1
   80018:	00083fa1 	.word	0x00083fa1
	...
   8002c:	00083fa1 	.word	0x00083fa1
   80030:	00083fa1 	.word	0x00083fa1
   80034:	00000000 	.word	0x00000000
   80038:	00083fa1 	.word	0x00083fa1
   8003c:	00083fa1 	.word	0x00083fa1
   80040:	00083fa1 	.word	0x00083fa1
   80044:	00083fa1 	.word	0x00083fa1
   80048:	00083fa1 	.word	0x00083fa1
   8004c:	00083fa1 	.word	0x00083fa1
   80050:	00083fa1 	.word	0x00083fa1
   80054:	00083fa1 	.word	0x00083fa1
   80058:	00083fa1 	.word	0x00083fa1
   8005c:	00083fa1 	.word	0x00083fa1
   80060:	00083fa1 	.word	0x00083fa1
   80064:	00083fa1 	.word	0x00083fa1
   80068:	00000000 	.word	0x00000000
   8006c:	00083c25 	.word	0x00083c25
   80070:	00083c3d 	.word	0x00083c3d
   80074:	00083c55 	.word	0x00083c55
   80078:	00083c6d 	.word	0x00083c6d
	...
   80084:	00083fa1 	.word	0x00083fa1
   80088:	00083fa1 	.word	0x00083fa1
   8008c:	00083fa1 	.word	0x00083fa1
   80090:	00083fa1 	.word	0x00083fa1
   80094:	00083fa1 	.word	0x00083fa1
   80098:	00083fa1 	.word	0x00083fa1
   8009c:	00083fa1 	.word	0x00083fa1
   800a0:	00083fa1 	.word	0x00083fa1
   800a4:	00000000 	.word	0x00000000
   800a8:	00083fa1 	.word	0x00083fa1
   800ac:	00081539 	.word	0x00081539
   800b0:	000815c9 	.word	0x000815c9
   800b4:	00081699 	.word	0x00081699
   800b8:	00083fa1 	.word	0x00083fa1
   800bc:	00083fa1 	.word	0x00083fa1
   800c0:	00083fa1 	.word	0x00083fa1
   800c4:	000816c1 	.word	0x000816c1
   800c8:	00083fa1 	.word	0x00083fa1
   800cc:	00083fa1 	.word	0x00083fa1
   800d0:	00083fa1 	.word	0x00083fa1
   800d4:	00083fa1 	.word	0x00083fa1
   800d8:	00083fa1 	.word	0x00083fa1
   800dc:	00083fa1 	.word	0x00083fa1
   800e0:	00083fa1 	.word	0x00083fa1
   800e4:	00083fa1 	.word	0x00083fa1
   800e8:	00083fa1 	.word	0x00083fa1
   800ec:	000802a1 	.word	0x000802a1
   800f0:	00083fa1 	.word	0x00083fa1

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070914 	.word	0x20070914
   80110:	00000000 	.word	0x00000000
   80114:	00087754 	.word	0x00087754

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4908      	ldr	r1, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4808      	ldr	r0, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	20070918 	.word	0x20070918
   80144:	00087754 	.word	0x00087754
   80148:	00087754 	.word	0x00087754
   8014c:	00000000 	.word	0x00000000

00080150 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80150:	b580      	push	{r7, lr}
   80152:	b082      	sub	sp, #8
   80154:	af00      	add	r7, sp, #0
   80156:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   80158:	6878      	ldr	r0, [r7, #4]
   8015a:	4b03      	ldr	r3, [pc, #12]	; (80168 <sysclk_enable_peripheral_clock+0x18>)
   8015c:	4798      	blx	r3
}
   8015e:	bf00      	nop
   80160:	3708      	adds	r7, #8
   80162:	46bd      	mov	sp, r7
   80164:	bd80      	pop	{r7, pc}
   80166:	bf00      	nop
   80168:	00083ee9 	.word	0x00083ee9

0008016c <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   8016c:	b580      	push	{r7, lr}
   8016e:	b082      	sub	sp, #8
   80170:	af00      	add	r7, sp, #0
   80172:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM)
	if (p_spi == SPI0) {
   80174:	687b      	ldr	r3, [r7, #4]
   80176:	4a05      	ldr	r2, [pc, #20]	; (8018c <spi_enable_clock+0x20>)
   80178:	4293      	cmp	r3, r2
   8017a:	d102      	bne.n	80182 <spi_enable_clock+0x16>
		sysclk_enable_peripheral_clock(ID_SPI0);
   8017c:	2018      	movs	r0, #24
   8017e:	4b04      	ldr	r3, [pc, #16]	; (80190 <spi_enable_clock+0x24>)
   80180:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   80182:	bf00      	nop
   80184:	3708      	adds	r7, #8
   80186:	46bd      	mov	sp, r7
   80188:	bd80      	pop	{r7, pc}
   8018a:	bf00      	nop
   8018c:	40008000 	.word	0x40008000
   80190:	00080151 	.word	0x00080151

00080194 <CPU2_D_INIT_CLOCK>:
 *  Author: wid7
 */ 
#include "CLOCK.h"

void CPU2_D_INIT_CLOCK()
{
   80194:	b580      	push	{r7, lr}
   80196:	af00      	add	r7, sp, #0
	sysclk_init();
   80198:	4b07      	ldr	r3, [pc, #28]	; (801b8 <CPU2_D_INIT_CLOCK+0x24>)
   8019a:	4798      	blx	r3
	PMC->PMC_WPMR  = 0x504D4300;
   8019c:	4b07      	ldr	r3, [pc, #28]	; (801bc <CPU2_D_INIT_CLOCK+0x28>)
   8019e:	4a08      	ldr	r2, [pc, #32]	; (801c0 <CPU2_D_INIT_CLOCK+0x2c>)
   801a0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PMC->PMC_PCER0 = 0xF8407900;
   801a4:	4b05      	ldr	r3, [pc, #20]	; (801bc <CPU2_D_INIT_CLOCK+0x28>)
   801a6:	4a07      	ldr	r2, [pc, #28]	; (801c4 <CPU2_D_INIT_CLOCK+0x30>)
   801a8:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER1 = 0x0000083F;
   801aa:	4b04      	ldr	r3, [pc, #16]	; (801bc <CPU2_D_INIT_CLOCK+0x28>)
   801ac:	f640 023f 	movw	r2, #2111	; 0x83f
   801b0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   801b4:	bf00      	nop
   801b6:	bd80      	pop	{r7, pc}
   801b8:	0008362d 	.word	0x0008362d
   801bc:	400e0600 	.word	0x400e0600
   801c0:	504d4300 	.word	0x504d4300
   801c4:	f8407900 	.word	0xf8407900

000801c8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   801c8:	b480      	push	{r7}
   801ca:	b083      	sub	sp, #12
   801cc:	af00      	add	r7, sp, #0
   801ce:	4603      	mov	r3, r0
   801d0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   801d2:	4908      	ldr	r1, [pc, #32]	; (801f4 <NVIC_EnableIRQ+0x2c>)
   801d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   801d8:	095b      	lsrs	r3, r3, #5
   801da:	79fa      	ldrb	r2, [r7, #7]
   801dc:	f002 021f 	and.w	r2, r2, #31
   801e0:	2001      	movs	r0, #1
   801e2:	fa00 f202 	lsl.w	r2, r0, r2
   801e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   801ea:	bf00      	nop
   801ec:	370c      	adds	r7, #12
   801ee:	46bd      	mov	sp, r7
   801f0:	bc80      	pop	{r7}
   801f2:	4770      	bx	lr
   801f4:	e000e100 	.word	0xe000e100

000801f8 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
   801f8:	b480      	push	{r7}
   801fa:	b08b      	sub	sp, #44	; 0x2c
   801fc:	af00      	add	r7, sp, #0
   801fe:	6078      	str	r0, [r7, #4]
   80200:	460b      	mov	r3, r1
   80202:	70fb      	strb	r3, [r7, #3]
   80204:	687b      	ldr	r3, [r7, #4]
   80206:	627b      	str	r3, [r7, #36]	; 0x24
   80208:	78fb      	ldrb	r3, [r7, #3]
   8020a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   8020e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80210:	61fb      	str	r3, [r7, #28]
   80212:	69fb      	ldr	r3, [r7, #28]
   80214:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   80216:	69bb      	ldr	r3, [r7, #24]
   80218:	095b      	lsrs	r3, r3, #5
   8021a:	617b      	str	r3, [r7, #20]
}

__always_inline static Pio *arch_ioport_port_to_base(ioport_port_t port)
{
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8021c:	697b      	ldr	r3, [r7, #20]
   8021e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80222:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80226:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   80228:	613b      	str	r3, [r7, #16]

	if (level) {
   8022a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   8022e:	2b00      	cmp	r3, #0
   80230:	d009      	beq.n	80246 <ioport_set_pin_level+0x4e>
   80232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80234:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   80236:	68fb      	ldr	r3, [r7, #12]
   80238:	f003 031f 	and.w	r3, r3, #31
   8023c:	2201      	movs	r2, #1
   8023e:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80240:	693b      	ldr	r3, [r7, #16]
   80242:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
   80244:	e008      	b.n	80258 <ioport_set_pin_level+0x60>
   80246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80248:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   8024a:	68bb      	ldr	r3, [r7, #8]
   8024c:	f003 031f 	and.w	r3, r3, #31
   80250:	2201      	movs	r2, #1
   80252:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80254:	693b      	ldr	r3, [r7, #16]
   80256:	635a      	str	r2, [r3, #52]	; 0x34
   80258:	bf00      	nop
   8025a:	372c      	adds	r7, #44	; 0x2c
   8025c:	46bd      	mov	sp, r7
   8025e:	bc80      	pop	{r7}
   80260:	4770      	bx	lr
   80262:	bf00      	nop

00080264 <sn65hvda540_set_en>:
uint32_t bp_speed;

DD_Sensor_status_type sensor_data;
     
void sn65hvda540_set_en(sn65hvda540_ctrl_t *p_component, uint32_t pin_idx)
{
   80264:	b480      	push	{r7}
   80266:	b083      	sub	sp, #12
   80268:	af00      	add	r7, sp, #0
   8026a:	6078      	str	r0, [r7, #4]
   8026c:	6039      	str	r1, [r7, #0]
	p_component->pio_en_idx = pin_idx;
   8026e:	687b      	ldr	r3, [r7, #4]
   80270:	683a      	ldr	r2, [r7, #0]
   80272:	601a      	str	r2, [r3, #0]
}
   80274:	bf00      	nop
   80276:	370c      	adds	r7, #12
   80278:	46bd      	mov	sp, r7
   8027a:	bc80      	pop	{r7}
   8027c:	4770      	bx	lr
   8027e:	bf00      	nop

00080280 <sn65hvda540_normal_mode>:

void sn65hvda540_normal_mode(sn65hvda540_ctrl_t *p_component)
{
   80280:	b580      	push	{r7, lr}
   80282:	b082      	sub	sp, #8
   80284:	af00      	add	r7, sp, #0
   80286:	6078      	str	r0, [r7, #4]
	/* Raise EN pin of SN65HVD234 to High Level (Vcc). */
	ioport_set_pin_level(p_component->pio_en_idx, CAN_NORMAL_MODE);
   80288:	687b      	ldr	r3, [r7, #4]
   8028a:	681b      	ldr	r3, [r3, #0]
   8028c:	2100      	movs	r1, #0
   8028e:	4618      	mov	r0, r3
   80290:	4b02      	ldr	r3, [pc, #8]	; (8029c <sn65hvda540_normal_mode+0x1c>)
   80292:	4798      	blx	r3
}
   80294:	bf00      	nop
   80296:	3708      	adds	r7, #8
   80298:	46bd      	mov	sp, r7
   8029a:	bd80      	pop	{r7, pc}
   8029c:	000801f9 	.word	0x000801f9

000802a0 <CAN0_Handler>:
can_mb_conf_t can0_mailbox;
volatile uint32_t g_ul_recv_status = 0;
temp_struct_type  temp_struct;


void CAN0_Handler(void)   {
   802a0:	b580      	push	{r7, lr}
   802a2:	b082      	sub	sp, #8
   802a4:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	ul_status = (CAN0 -> CAN_SR);
   802a6:	4b11      	ldr	r3, [pc, #68]	; (802ec <CAN0_Handler+0x4c>)
   802a8:	691b      	ldr	r3, [r3, #16]
   802aa:	607b      	str	r3, [r7, #4]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   802ac:	687b      	ldr	r3, [r7, #4]
   802ae:	b2db      	uxtb	r3, r3
   802b0:	2b00      	cmp	r3, #0
   802b2:	d017      	beq.n	802e4 <CAN0_Handler+0x44>
		ul_status = CAN0->CAN_MB[1].CAN_MSR ;
   802b4:	4b0d      	ldr	r3, [pc, #52]	; (802ec <CAN0_Handler+0x4c>)
   802b6:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
   802ba:	607b      	str	r3, [r7, #4]
		if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   802bc:	687b      	ldr	r3, [r7, #4]
   802be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   802c2:	2b00      	cmp	r3, #0
   802c4:	d00e      	beq.n	802e4 <CAN0_Handler+0x44>
			can0_mailbox.ul_mb_idx = 1;
   802c6:	4b0a      	ldr	r3, [pc, #40]	; (802f0 <CAN0_Handler+0x50>)
   802c8:	2201      	movs	r2, #1
   802ca:	601a      	str	r2, [r3, #0]
			can0_mailbox.ul_status = ul_status;
   802cc:	4a08      	ldr	r2, [pc, #32]	; (802f0 <CAN0_Handler+0x50>)
   802ce:	687b      	ldr	r3, [r7, #4]
   802d0:	6093      	str	r3, [r2, #8]
			dd_can_mailbox_read(&can0_mailbox);
   802d2:	4807      	ldr	r0, [pc, #28]	; (802f0 <CAN0_Handler+0x50>)
   802d4:	4b07      	ldr	r3, [pc, #28]	; (802f4 <CAN0_Handler+0x54>)
   802d6:	4798      	blx	r3
			dd_can_extract_mailbox_data(&can0_mailbox);
   802d8:	4805      	ldr	r0, [pc, #20]	; (802f0 <CAN0_Handler+0x50>)
   802da:	4b07      	ldr	r3, [pc, #28]	; (802f8 <CAN0_Handler+0x58>)
   802dc:	4798      	blx	r3
			g_ul_recv_status = 1;
   802de:	4b07      	ldr	r3, [pc, #28]	; (802fc <CAN0_Handler+0x5c>)
   802e0:	2201      	movs	r2, #1
   802e2:	601a      	str	r2, [r3, #0]
		}
		
	}
}
   802e4:	bf00      	nop
   802e6:	3708      	adds	r7, #8
   802e8:	46bd      	mov	sp, r7
   802ea:	bd80      	pop	{r7, pc}
   802ec:	400b4000 	.word	0x400b4000
   802f0:	20070a58 	.word	0x20070a58
   802f4:	000804d1 	.word	0x000804d1
   802f8:	00080301 	.word	0x00080301
   802fc:	20070944 	.word	0x20070944

00080300 <dd_can_extract_mailbox_data>:
	p_mailbox->ul_datal = 0;
	p_mailbox->ul_datah = 0;
}


static void dd_can_extract_mailbox_data(can_mb_conf_t *p_mailbox )   {
   80300:	b480      	push	{r7}
   80302:	b085      	sub	sp, #20
   80304:	af00      	add	r7, sp, #0
   80306:	6078      	str	r0, [r7, #4]
		 uint32_t ul_reg;
		 uint16_t speed;
	     uint8_t master_command_byte, master_data_byte;
		 
	
	   temp_struct.temp_reg_32 = (p_mailbox->ul_datal);
   80308:	687b      	ldr	r3, [r7, #4]
   8030a:	699b      	ldr	r3, [r3, #24]
   8030c:	4a65      	ldr	r2, [pc, #404]	; (804a4 <dd_can_extract_mailbox_data+0x1a4>)
   8030e:	6013      	str	r3, [r2, #0]
	   if (temp_struct.temp_reg_8[0] == MASTER_CPU_id)
   80310:	4b64      	ldr	r3, [pc, #400]	; (804a4 <dd_can_extract_mailbox_data+0x1a4>)
   80312:	781b      	ldrb	r3, [r3, #0]
   80314:	2b0a      	cmp	r3, #10
   80316:	f040 80bf 	bne.w	80498 <dd_can_extract_mailbox_data+0x198>
	   {
	  
	   master_command_byte  =  temp_struct.temp_reg_8[1]  ;
   8031a:	4b62      	ldr	r3, [pc, #392]	; (804a4 <dd_can_extract_mailbox_data+0x1a4>)
   8031c:	785b      	ldrb	r3, [r3, #1]
   8031e:	73fb      	strb	r3, [r7, #15]
	   data_buff[0] = master_command_byte;
   80320:	4a61      	ldr	r2, [pc, #388]	; (804a8 <dd_can_extract_mailbox_data+0x1a8>)
   80322:	7bfb      	ldrb	r3, [r7, #15]
   80324:	7013      	strb	r3, [r2, #0]
	       //master_data_byte     =  temp_struct.temp_reg_8[1]  ;
	 //  sv_rxrdy_flag = true;
	
	   speed = temp_struct.temp_reg_16[1];				//temp_struct.temp_reg_16[0];
   80326:	4b5f      	ldr	r3, [pc, #380]	; (804a4 <dd_can_extract_mailbox_data+0x1a4>)
   80328:	885b      	ldrh	r3, [r3, #2]
   8032a:	81bb      	strh	r3, [r7, #12]
			switch (state)
   8032c:	4b5f      	ldr	r3, [pc, #380]	; (804ac <dd_can_extract_mailbox_data+0x1ac>)
   8032e:	781b      	ldrb	r3, [r3, #0]
   80330:	2b00      	cmp	r3, #0
   80332:	d003      	beq.n	8033c <dd_can_extract_mailbox_data+0x3c>
   80334:	2b01      	cmp	r3, #1
   80336:	f000 8096 	beq.w	80466 <dd_can_extract_mailbox_data+0x166>
// 				twi_enable_interrupt(BOARD_BASE_TWI_SLAVE, TWI_SR_SVACC);
// 				twi_disable_interrupt(BOARD_BASE_TWI_SLAVE, TWI_IDR_RXRDY | TWI_IDR_GACC |
// 				TWI_IDR_NACK | TWI_IDR_EOSACC | TWI_IDR_SCL_WS |TWI_SR_TXRDY);
// 			}
// 		}
}
   8033a:	e0ad      	b.n	80498 <dd_can_extract_mailbox_data+0x198>
				
// 				data[data_count] = twi_read_byte(BOARD_BASE_TWI_SLAVE);
// 				data_buff[data_count] = data[data_count];
// 				
// 				start_c[0] =data_buff[0];
				switch (master_command_byte)
   8033c:	7bfb      	ldrb	r3, [r7, #15]
   8033e:	3b20      	subs	r3, #32
   80340:	2b09      	cmp	r3, #9
   80342:	f200 808c 	bhi.w	8045e <dd_can_extract_mailbox_data+0x15e>
   80346:	a201      	add	r2, pc, #4	; (adr r2, 8034c <dd_can_extract_mailbox_data+0x4c>)
   80348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8034c:	00080375 	.word	0x00080375
   80350:	000803ad 	.word	0x000803ad
   80354:	000803c9 	.word	0x000803c9
   80358:	00080407 	.word	0x00080407
   8035c:	0008044b 	.word	0x0008044b
   80360:	000803d7 	.word	0x000803d7
   80364:	000803eb 	.word	0x000803eb
   80368:	00080435 	.word	0x00080435
   8036c:	000803f9 	.word	0x000803f9
   80370:	00080391 	.word	0x00080391
					case BP_START_BLOOD_PUMP:
					//printf("%d\n",var);
					//printf("s\n");
					//flag = 1;
					//count_start++;
					flag_buff++;
   80374:	4b4e      	ldr	r3, [pc, #312]	; (804b0 <dd_can_extract_mailbox_data+0x1b0>)
   80376:	781b      	ldrb	r3, [r3, #0]
   80378:	b2db      	uxtb	r3, r3
   8037a:	3301      	adds	r3, #1
   8037c:	b2da      	uxtb	r2, r3
   8037e:	4b4c      	ldr	r3, [pc, #304]	; (804b0 <dd_can_extract_mailbox_data+0x1b0>)
   80380:	701a      	strb	r2, [r3, #0]
					bp_start_command = master_command_byte;
   80382:	4a4c      	ldr	r2, [pc, #304]	; (804b4 <dd_can_extract_mailbox_data+0x1b4>)
   80384:	7bfb      	ldrb	r3, [r7, #15]
   80386:	7013      	strb	r3, [r2, #0]
					state = HEMO_IDLE;
   80388:	4b48      	ldr	r3, [pc, #288]	; (804ac <dd_can_extract_mailbox_data+0x1ac>)
   8038a:	2200      	movs	r2, #0
   8038c:	701a      	strb	r2, [r3, #0]
					break;
   8038e:	e069      	b.n	80464 <dd_can_extract_mailbox_data+0x164>
					case BD_CALIBRATION:
					flag_buff++;
   80390:	4b47      	ldr	r3, [pc, #284]	; (804b0 <dd_can_extract_mailbox_data+0x1b0>)
   80392:	781b      	ldrb	r3, [r3, #0]
   80394:	b2db      	uxtb	r3, r3
   80396:	3301      	adds	r3, #1
   80398:	b2da      	uxtb	r2, r3
   8039a:	4b45      	ldr	r3, [pc, #276]	; (804b0 <dd_can_extract_mailbox_data+0x1b0>)
   8039c:	701a      	strb	r2, [r3, #0]
					bd_start_calibration = master_command_byte;
   8039e:	4a46      	ldr	r2, [pc, #280]	; (804b8 <dd_can_extract_mailbox_data+0x1b8>)
   803a0:	7bfb      	ldrb	r3, [r7, #15]
   803a2:	7013      	strb	r3, [r2, #0]
					state = HEMO_IDLE;
   803a4:	4b41      	ldr	r3, [pc, #260]	; (804ac <dd_can_extract_mailbox_data+0x1ac>)
   803a6:	2200      	movs	r2, #0
   803a8:	701a      	strb	r2, [r3, #0]
					break;
   803aa:	e05b      	b.n	80464 <dd_can_extract_mailbox_data+0x164>
					case BP_STOP_PUMP:
					//printf("%d\n",var);
					//printf("st\n");
					//flag = 1;
					//count_stop++;
					flag_buff++;
   803ac:	4b40      	ldr	r3, [pc, #256]	; (804b0 <dd_can_extract_mailbox_data+0x1b0>)
   803ae:	781b      	ldrb	r3, [r3, #0]
   803b0:	b2db      	uxtb	r3, r3
   803b2:	3301      	adds	r3, #1
   803b4:	b2da      	uxtb	r2, r3
   803b6:	4b3e      	ldr	r3, [pc, #248]	; (804b0 <dd_can_extract_mailbox_data+0x1b0>)
   803b8:	701a      	strb	r2, [r3, #0]
					bp_stop_command = master_command_byte;
   803ba:	4a40      	ldr	r2, [pc, #256]	; (804bc <dd_can_extract_mailbox_data+0x1bc>)
   803bc:	7bfb      	ldrb	r3, [r7, #15]
   803be:	7013      	strb	r3, [r2, #0]
					state =  HEMO_IDLE;
   803c0:	4b3a      	ldr	r3, [pc, #232]	; (804ac <dd_can_extract_mailbox_data+0x1ac>)
   803c2:	2200      	movs	r2, #0
   803c4:	701a      	strb	r2, [r3, #0]
					break;
   803c6:	e04d      	b.n	80464 <dd_can_extract_mailbox_data+0x164>
					case BP_COMPLETED:
					//flag = 1;
						flag_buff = 1;
   803c8:	4b39      	ldr	r3, [pc, #228]	; (804b0 <dd_can_extract_mailbox_data+0x1b0>)
   803ca:	2201      	movs	r2, #1
   803cc:	701a      	strb	r2, [r3, #0]
					state =  HEMO_IDLE;
   803ce:	4b37      	ldr	r3, [pc, #220]	; (804ac <dd_can_extract_mailbox_data+0x1ac>)
   803d0:	2200      	movs	r2, #0
   803d2:	701a      	strb	r2, [r3, #0]
					break;
   803d4:	e046      	b.n	80464 <dd_can_extract_mailbox_data+0x164>
					case BP_INC:
					//flag = 1;
					bp_inc = master_command_byte;
   803d6:	4a3a      	ldr	r2, [pc, #232]	; (804c0 <dd_can_extract_mailbox_data+0x1c0>)
   803d8:	7bfb      	ldrb	r3, [r7, #15]
   803da:	7013      	strb	r3, [r2, #0]
						flag_buff = 1;
   803dc:	4b34      	ldr	r3, [pc, #208]	; (804b0 <dd_can_extract_mailbox_data+0x1b0>)
   803de:	2201      	movs	r2, #1
   803e0:	701a      	strb	r2, [r3, #0]
					state =  HEMO_IDLE;
   803e2:	4b32      	ldr	r3, [pc, #200]	; (804ac <dd_can_extract_mailbox_data+0x1ac>)
   803e4:	2200      	movs	r2, #0
   803e6:	701a      	strb	r2, [r3, #0]
					break;
   803e8:	e03c      	b.n	80464 <dd_can_extract_mailbox_data+0x164>
					case BP_DEC:
					//flag = 1;
						flag_buff = 1;
   803ea:	4b31      	ldr	r3, [pc, #196]	; (804b0 <dd_can_extract_mailbox_data+0x1b0>)
   803ec:	2201      	movs	r2, #1
   803ee:	701a      	strb	r2, [r3, #0]
					state =  HEMO_IDLE;
   803f0:	4b2e      	ldr	r3, [pc, #184]	; (804ac <dd_can_extract_mailbox_data+0x1ac>)
   803f2:	2200      	movs	r2, #0
   803f4:	701a      	strb	r2, [r3, #0]
					break;
   803f6:	e035      	b.n	80464 <dd_can_extract_mailbox_data+0x164>
					case BP_RECOVER:
					//flag = 1;
						flag_buff = 1;
   803f8:	4b2d      	ldr	r3, [pc, #180]	; (804b0 <dd_can_extract_mailbox_data+0x1b0>)
   803fa:	2201      	movs	r2, #1
   803fc:	701a      	strb	r2, [r3, #0]
					state =  HEMO_IDLE;
   803fe:	4b2b      	ldr	r3, [pc, #172]	; (804ac <dd_can_extract_mailbox_data+0x1ac>)
   80400:	2200      	movs	r2, #0
   80402:	701a      	strb	r2, [r3, #0]
					break;
   80404:	e02e      	b.n	80464 <dd_can_extract_mailbox_data+0x164>
					case BP_SPEED_CHANGE:

					
					if(speed > 0)
   80406:	89bb      	ldrh	r3, [r7, #12]
   80408:	2b00      	cmp	r3, #0
   8040a:	d02a      	beq.n	80462 <dd_can_extract_mailbox_data+0x162>
					{

						bp_speed = speed;						
   8040c:	89bb      	ldrh	r3, [r7, #12]
   8040e:	4a2d      	ldr	r2, [pc, #180]	; (804c4 <dd_can_extract_mailbox_data+0x1c4>)
   80410:	6013      	str	r3, [r2, #0]
							flag = 1;
   80412:	4b2d      	ldr	r3, [pc, #180]	; (804c8 <dd_can_extract_mailbox_data+0x1c8>)
   80414:	2201      	movs	r2, #1
   80416:	701a      	strb	r2, [r3, #0]
							flag_buff++;
   80418:	4b25      	ldr	r3, [pc, #148]	; (804b0 <dd_can_extract_mailbox_data+0x1b0>)
   8041a:	781b      	ldrb	r3, [r3, #0]
   8041c:	b2db      	uxtb	r3, r3
   8041e:	3301      	adds	r3, #1
   80420:	b2da      	uxtb	r2, r3
   80422:	4b23      	ldr	r3, [pc, #140]	; (804b0 <dd_can_extract_mailbox_data+0x1b0>)
   80424:	701a      	strb	r2, [r3, #0]
							bp_Speed_change_command = master_command_byte;
   80426:	4a29      	ldr	r2, [pc, #164]	; (804cc <dd_can_extract_mailbox_data+0x1cc>)
   80428:	7bfb      	ldrb	r3, [r7, #15]
   8042a:	7013      	strb	r3, [r2, #0]
							state =  HEMO_IDLE;
   8042c:	4b1f      	ldr	r3, [pc, #124]	; (804ac <dd_can_extract_mailbox_data+0x1ac>)
   8042e:	2200      	movs	r2, #0
   80430:	701a      	strb	r2, [r3, #0]

					}
				
				
					break;
   80432:	e016      	b.n	80462 <dd_can_extract_mailbox_data+0x162>
					case BP_APT_VPT_SEND_TO_MASTER:
					//printf("speed\n");
					//state = HEMO_IDLE;
					flag = 0;
   80434:	4b24      	ldr	r3, [pc, #144]	; (804c8 <dd_can_extract_mailbox_data+0x1c8>)
   80436:	2200      	movs	r2, #0
   80438:	701a      	strb	r2, [r3, #0]
					flag_buff ++;
   8043a:	4b1d      	ldr	r3, [pc, #116]	; (804b0 <dd_can_extract_mailbox_data+0x1b0>)
   8043c:	781b      	ldrb	r3, [r3, #0]
   8043e:	b2db      	uxtb	r3, r3
   80440:	3301      	adds	r3, #1
   80442:	b2da      	uxtb	r2, r3
   80444:	4b1a      	ldr	r3, [pc, #104]	; (804b0 <dd_can_extract_mailbox_data+0x1b0>)
   80446:	701a      	strb	r2, [r3, #0]
					break;
   80448:	e00c      	b.n	80464 <dd_can_extract_mailbox_data+0x164>
					case BP_DAC_REF:
					state =  HEMO_WAIT;
   8044a:	4b18      	ldr	r3, [pc, #96]	; (804ac <dd_can_extract_mailbox_data+0x1ac>)
   8044c:	2201      	movs	r2, #1
   8044e:	701a      	strb	r2, [r3, #0]
					flag = 0;
   80450:	4b1d      	ldr	r3, [pc, #116]	; (804c8 <dd_can_extract_mailbox_data+0x1c8>)
   80452:	2200      	movs	r2, #0
   80454:	701a      	strb	r2, [r3, #0]
					flag_buff = 0;
   80456:	4b16      	ldr	r3, [pc, #88]	; (804b0 <dd_can_extract_mailbox_data+0x1b0>)
   80458:	2200      	movs	r2, #0
   8045a:	701a      	strb	r2, [r3, #0]
					break;
   8045c:	e002      	b.n	80464 <dd_can_extract_mailbox_data+0x164>
					default:
					break;
   8045e:	bf00      	nop
   80460:	e01a      	b.n	80498 <dd_can_extract_mailbox_data+0x198>
							state =  HEMO_IDLE;

					}
				
				
					break;
   80462:	bf00      	nop
					flag_buff = 0;
					break;
					default:
					break;
				}
				break;
   80464:	e018      	b.n	80498 <dd_can_extract_mailbox_data+0x198>
				
				case HEMO_WAIT:
				
//				if (data_count <= 2)

				if(speed > 0)
   80466:	89bb      	ldrh	r3, [r7, #12]
   80468:	2b00      	cmp	r3, #0
   8046a:	d014      	beq.n	80496 <dd_can_extract_mailbox_data+0x196>
				{
// 					data[data_count] = twi_read_byte(BOARD_BASE_TWI_SLAVE);
// 					data_buff[data_count] = data[data_count];
// 					start_c[data_count]= data_buff[data_count];
//					bp_speed = temp_struct.temp_reg_16[1];
					bp_speed = speed;
   8046c:	89bb      	ldrh	r3, [r7, #12]
   8046e:	4a15      	ldr	r2, [pc, #84]	; (804c4 <dd_can_extract_mailbox_data+0x1c4>)
   80470:	6013      	str	r3, [r2, #0]
					state =  HEMO_WAIT;
   80472:	4b0e      	ldr	r3, [pc, #56]	; (804ac <dd_can_extract_mailbox_data+0x1ac>)
   80474:	2201      	movs	r2, #1
   80476:	701a      	strb	r2, [r3, #0]
					flag = 0;
   80478:	4b13      	ldr	r3, [pc, #76]	; (804c8 <dd_can_extract_mailbox_data+0x1c8>)
   8047a:	2200      	movs	r2, #0
   8047c:	701a      	strb	r2, [r3, #0]
					flag_buff = 0;
   8047e:	4b0c      	ldr	r3, [pc, #48]	; (804b0 <dd_can_extract_mailbox_data+0x1b0>)
   80480:	2200      	movs	r2, #0
   80482:	701a      	strb	r2, [r3, #0]
					
					
					{
						//printf("%d \t %d \t %d\n",data_buff[0],data_buff[1],data_buff[2]);
						
						flag = 1;
   80484:	4b10      	ldr	r3, [pc, #64]	; (804c8 <dd_can_extract_mailbox_data+0x1c8>)
   80486:	2201      	movs	r2, #1
   80488:	701a      	strb	r2, [r3, #0]
								flag_buff = 1;
   8048a:	4b09      	ldr	r3, [pc, #36]	; (804b0 <dd_can_extract_mailbox_data+0x1b0>)
   8048c:	2201      	movs	r2, #1
   8048e:	701a      	strb	r2, [r3, #0]
						state =  HEMO_IDLE;
   80490:	4b06      	ldr	r3, [pc, #24]	; (804ac <dd_can_extract_mailbox_data+0x1ac>)
   80492:	2200      	movs	r2, #0
   80494:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
   80496:	bf00      	nop
// 				twi_enable_interrupt(BOARD_BASE_TWI_SLAVE, TWI_SR_SVACC);
// 				twi_disable_interrupt(BOARD_BASE_TWI_SLAVE, TWI_IDR_RXRDY | TWI_IDR_GACC |
// 				TWI_IDR_NACK | TWI_IDR_EOSACC | TWI_IDR_SCL_WS |TWI_SR_TXRDY);
// 			}
// 		}
}
   80498:	bf00      	nop
   8049a:	3714      	adds	r7, #20
   8049c:	46bd      	mov	sp, r7
   8049e:	bc80      	pop	{r7}
   804a0:	4770      	bx	lr
   804a2:	bf00      	nop
   804a4:	20070a50 	.word	0x20070a50
   804a8:	20070938 	.word	0x20070938
   804ac:	20070930 	.word	0x20070930
   804b0:	20070a78 	.word	0x20070a78
   804b4:	2007093c 	.word	0x2007093c
   804b8:	2007093b 	.word	0x2007093b
   804bc:	2007093d 	.word	0x2007093d
   804c0:	2007093f 	.word	0x2007093f
   804c4:	20070a7c 	.word	0x20070a7c
   804c8:	20070a4c 	.word	0x20070a4c
   804cc:	2007093e 	.word	0x2007093e

000804d0 <dd_can_mailbox_read>:
	   
	 
	


static uint32_t dd_can_mailbox_read(can_mb_conf_t *p_mailbox)   {
   804d0:	b480      	push	{r7}
   804d2:	b087      	sub	sp, #28
   804d4:	af00      	add	r7, sp, #0
   804d6:	6078      	str	r0, [r7, #4]

	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   804d8:	2300      	movs	r3, #0
   804da:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   804dc:	687b      	ldr	r3, [r7, #4]
   804de:	681b      	ldr	r3, [r3, #0]
   804e0:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   804e2:	687b      	ldr	r3, [r7, #4]
   804e4:	689b      	ldr	r3, [r3, #8]
   804e6:	60fb      	str	r3, [r7, #12]
	 /* Check whether there is overwriting happening in Receive with * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	 
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {	ul_retval = CAN_MAILBOX_RX_OVER;	}
   804e8:	68fb      	ldr	r3, [r7, #12]
   804ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   804ee:	2b00      	cmp	r3, #0
   804f0:	d006      	beq.n	80500 <dd_can_mailbox_read+0x30>
   804f2:	68fb      	ldr	r3, [r7, #12]
   804f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   804f8:	2b00      	cmp	r3, #0
   804fa:	d001      	beq.n	80500 <dd_can_mailbox_read+0x30>
   804fc:	2302      	movs	r3, #2
   804fe:	617b      	str	r3, [r7, #20]

	/* Read the message family ID. */
	p_mailbox->ul_fid =	CAN0->CAN_MB[uc_index].CAN_MFID & CAN_MFID_MFID_Msk;	
   80500:	4a26      	ldr	r2, [pc, #152]	; (8059c <dd_can_mailbox_read+0xcc>)
   80502:	7cfb      	ldrb	r3, [r7, #19]
   80504:	015b      	lsls	r3, r3, #5
   80506:	4413      	add	r3, r2
   80508:	f503 7303 	add.w	r3, r3, #524	; 0x20c
   8050c:	681b      	ldr	r3, [r3, #0]
   8050e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80512:	687b      	ldr	r3, [r7, #4]
   80514:	615a      	str	r2, [r3, #20]

	/* Read received data length. */
	p_mailbox->uc_length = (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   80516:	68fb      	ldr	r3, [r7, #12]
   80518:	0c1b      	lsrs	r3, r3, #16
   8051a:	b2db      	uxtb	r3, r3
   8051c:	f003 030f 	and.w	r3, r3, #15
   80520:	b2da      	uxtb	r2, r3
   80522:	687b      	ldr	r3, [r7, #4]
   80524:	719a      	strb	r2, [r3, #6]
	
	/* Read received data. */
	p_mailbox->ul_datal = CAN0->CAN_MB[uc_index].CAN_MDL;
   80526:	4a1d      	ldr	r2, [pc, #116]	; (8059c <dd_can_mailbox_read+0xcc>)
   80528:	7cfb      	ldrb	r3, [r7, #19]
   8052a:	015b      	lsls	r3, r3, #5
   8052c:	4413      	add	r3, r2
   8052e:	f503 7305 	add.w	r3, r3, #532	; 0x214
   80532:	681a      	ldr	r2, [r3, #0]
   80534:	687b      	ldr	r3, [r7, #4]
   80536:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = CAN0->CAN_MB[uc_index].CAN_MDH;
   80538:	4a18      	ldr	r2, [pc, #96]	; (8059c <dd_can_mailbox_read+0xcc>)
   8053a:	7cfb      	ldrb	r3, [r7, #19]
   8053c:	015b      	lsls	r3, r3, #5
   8053e:	4413      	add	r3, r2
   80540:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80544:	681a      	ldr	r2, [r3, #0]
   80546:	687b      	ldr	r3, [r7, #4]
   80548:	61da      	str	r2, [r3, #28]
	
	
	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   8054a:	4a14      	ldr	r2, [pc, #80]	; (8059c <dd_can_mailbox_read+0xcc>)
   8054c:	7cfb      	ldrb	r3, [r7, #19]
   8054e:	015b      	lsls	r3, r3, #5
   80550:	4413      	add	r3, r2
   80552:	f503 7304 	add.w	r3, r3, #528	; 0x210
   80556:	681a      	ldr	r2, [r3, #0]
   80558:	687b      	ldr	r3, [r7, #4]
   8055a:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   8055c:	687b      	ldr	r3, [r7, #4]
   8055e:	689b      	ldr	r3, [r3, #8]
   80560:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;	}
   80562:	68fb      	ldr	r3, [r7, #12]
   80564:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80568:	2b00      	cmp	r3, #0
   8056a:	d003      	beq.n	80574 <dd_can_mailbox_read+0xa4>
   8056c:	697b      	ldr	r3, [r7, #20]
   8056e:	f043 0304 	orr.w	r3, r3, #4
   80572:	617b      	str	r3, [r7, #20]
	else { ul_retval |= CAN_MAILBOX_TRANSFER_OK; }		
		
	/* Enable next receive process. */	 // Allows the reception of the next message
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |CAN_MCR_MDLC(p_mailbox->uc_length);    
   80574:	4909      	ldr	r1, [pc, #36]	; (8059c <dd_can_mailbox_read+0xcc>)
   80576:	7cfb      	ldrb	r3, [r7, #19]
   80578:	687a      	ldr	r2, [r7, #4]
   8057a:	7992      	ldrb	r2, [r2, #6]
   8057c:	0412      	lsls	r2, r2, #16
   8057e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   80582:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   80586:	015b      	lsls	r3, r3, #5
   80588:	440b      	add	r3, r1
   8058a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   8058e:	601a      	str	r2, [r3, #0]
	return ul_retval;
   80590:	697b      	ldr	r3, [r7, #20]
}
   80592:	4618      	mov	r0, r3
   80594:	371c      	adds	r7, #28
   80596:	46bd      	mov	sp, r7
   80598:	bc80      	pop	{r7}
   8059a:	4770      	bx	lr
   8059c:	400b4000 	.word	0x400b4000

000805a0 <dd_can_mailbox_write>:

		
 uint32_t dd_can_mailbox_write(can_mb_conf_t *p_mailbox)
{
   805a0:	b480      	push	{r7}
   805a2:	b085      	sub	sp, #20
   805a4:	af00      	add	r7, sp, #0
   805a6:	6078      	str	r0, [r7, #4]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   805a8:	687b      	ldr	r3, [r7, #4]
   805aa:	681b      	ldr	r3, [r3, #0]
   805ac:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   805ae:	4a2a      	ldr	r2, [pc, #168]	; (80658 <dd_can_mailbox_write+0xb8>)
   805b0:	7bfb      	ldrb	r3, [r7, #15]
   805b2:	015b      	lsls	r3, r3, #5
   805b4:	4413      	add	r3, r2
   805b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
   805ba:	681a      	ldr	r2, [r3, #0]
   805bc:	687b      	ldr	r3, [r7, #4]
   805be:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   805c0:	687b      	ldr	r3, [r7, #4]
   805c2:	689b      	ldr	r3, [r3, #8]
   805c4:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
   805c6:	68bb      	ldr	r3, [r7, #8]
   805c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   805cc:	2b00      	cmp	r3, #0
   805ce:	d101      	bne.n	805d4 <dd_can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
   805d0:	2301      	movs	r3, #1
   805d2:	e03b      	b.n	8064c <dd_can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) { 
   805d4:	687b      	ldr	r3, [r7, #4]
   805d6:	795b      	ldrb	r3, [r3, #5]
   805d8:	2b00      	cmp	r3, #0
   805da:	d00b      	beq.n	805f4 <dd_can_mailbox_write+0x54>
		CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id | CAN_MAM_MIDE;
   805dc:	491e      	ldr	r1, [pc, #120]	; (80658 <dd_can_mailbox_write+0xb8>)
   805de:	7bfb      	ldrb	r3, [r7, #15]
   805e0:	687a      	ldr	r2, [r7, #4]
   805e2:	6912      	ldr	r2, [r2, #16]
   805e4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   805e8:	015b      	lsls	r3, r3, #5
   805ea:	440b      	add	r3, r1
   805ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
   805f0:	601a      	str	r2, [r3, #0]
   805f2:	e008      	b.n	80606 <dd_can_mailbox_write+0x66>
	} else {
		CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   805f4:	4918      	ldr	r1, [pc, #96]	; (80658 <dd_can_mailbox_write+0xb8>)
   805f6:	7bfb      	ldrb	r3, [r7, #15]
   805f8:	687a      	ldr	r2, [r7, #4]
   805fa:	6912      	ldr	r2, [r2, #16]
   805fc:	015b      	lsls	r3, r3, #5
   805fe:	440b      	add	r3, r1
   80600:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80604:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	CAN0->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
   80606:	4914      	ldr	r1, [pc, #80]	; (80658 <dd_can_mailbox_write+0xb8>)
   80608:	7bfb      	ldrb	r3, [r7, #15]
   8060a:	687a      	ldr	r2, [r7, #4]
   8060c:	6992      	ldr	r2, [r2, #24]
   8060e:	015b      	lsls	r3, r3, #5
   80610:	440b      	add	r3, r1
   80612:	f503 7305 	add.w	r3, r3, #532	; 0x214
   80616:	601a      	str	r2, [r3, #0]
	if (p_mailbox->uc_length > 4) {  CAN0->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
   80618:	687b      	ldr	r3, [r7, #4]
   8061a:	799b      	ldrb	r3, [r3, #6]
   8061c:	2b04      	cmp	r3, #4
   8061e:	d908      	bls.n	80632 <dd_can_mailbox_write+0x92>
   80620:	490d      	ldr	r1, [pc, #52]	; (80658 <dd_can_mailbox_write+0xb8>)
   80622:	7bfb      	ldrb	r3, [r7, #15]
   80624:	687a      	ldr	r2, [r7, #4]
   80626:	69d2      	ldr	r2, [r2, #28]
   80628:	015b      	lsls	r3, r3, #5
   8062a:	440b      	add	r3, r1
   8062c:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80630:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
   80632:	4909      	ldr	r1, [pc, #36]	; (80658 <dd_can_mailbox_write+0xb8>)
   80634:	7bfb      	ldrb	r3, [r7, #15]
   80636:	687a      	ldr	r2, [r7, #4]
   80638:	7992      	ldrb	r2, [r2, #6]
   8063a:	0412      	lsls	r2, r2, #16
   8063c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   80640:	015b      	lsls	r3, r3, #5
   80642:	440b      	add	r3, r1
   80644:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   80648:	601a      	str	r2, [r3, #0]

	return CAN_MAILBOX_TRANSFER_OK;
   8064a:	2300      	movs	r3, #0
}
   8064c:	4618      	mov	r0, r3
   8064e:	3714      	adds	r7, #20
   80650:	46bd      	mov	sp, r7
   80652:	bc80      	pop	{r7}
   80654:	4770      	bx	lr
   80656:	bf00      	nop
   80658:	400b4000 	.word	0x400b4000

0008065c <dd_can_global_send_transfer_cmd>:

void dd_can_global_send_transfer_cmd(uint8_t uc_mask)
{
   8065c:	b480      	push	{r7}
   8065e:	b085      	sub	sp, #20
   80660:	af00      	add	r7, sp, #0
   80662:	4603      	mov	r3, r0
   80664:	71fb      	strb	r3, [r7, #7]
	uint32_t ul_reg;

	ul_reg = CAN0->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
   80666:	4b07      	ldr	r3, [pc, #28]	; (80684 <dd_can_global_send_transfer_cmd+0x28>)
   80668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   8066a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   8066e:	60fb      	str	r3, [r7, #12]
	CAN0->CAN_TCR = ul_reg | uc_mask;
   80670:	4904      	ldr	r1, [pc, #16]	; (80684 <dd_can_global_send_transfer_cmd+0x28>)
   80672:	79fa      	ldrb	r2, [r7, #7]
   80674:	68fb      	ldr	r3, [r7, #12]
   80676:	4313      	orrs	r3, r2
   80678:	624b      	str	r3, [r1, #36]	; 0x24
}
   8067a:	bf00      	nop
   8067c:	3714      	adds	r7, #20
   8067e:	46bd      	mov	sp, r7
   80680:	bc80      	pop	{r7}
   80682:	4770      	bx	lr
   80684:	400b4000 	.word	0x400b4000

00080688 <dd_can_mailbox_conf>:



 void dd_can_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   80688:	b480      	push	{r7}
   8068a:	b085      	sub	sp, #20
   8068c:	af00      	add	r7, sp, #0
   8068e:	6078      	str	r0, [r7, #4]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80690:	687b      	ldr	r3, [r7, #4]
   80692:	681b      	ldr	r3, [r3, #0]
   80694:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   80696:	687b      	ldr	r3, [r7, #4]
   80698:	791b      	ldrb	r3, [r3, #4]
   8069a:	2b00      	cmp	r3, #0
   8069c:	d12f      	bne.n	806fe <dd_can_mailbox_conf+0x76>
		CAN0->CAN_MB[uc_index].CAN_MMR = 0;
   8069e:	4a35      	ldr	r2, [pc, #212]	; (80774 <dd_can_mailbox_conf+0xec>)
   806a0:	7bfb      	ldrb	r3, [r7, #15]
   806a2:	3310      	adds	r3, #16
   806a4:	015b      	lsls	r3, r3, #5
   806a6:	4413      	add	r3, r2
   806a8:	2200      	movs	r2, #0
   806aa:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MAM = 0;
   806ac:	4a31      	ldr	r2, [pc, #196]	; (80774 <dd_can_mailbox_conf+0xec>)
   806ae:	7bfb      	ldrb	r3, [r7, #15]
   806b0:	3310      	adds	r3, #16
   806b2:	015b      	lsls	r3, r3, #5
   806b4:	4413      	add	r3, r2
   806b6:	3304      	adds	r3, #4
   806b8:	2200      	movs	r2, #0
   806ba:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MID = 0;
   806bc:	4a2d      	ldr	r2, [pc, #180]	; (80774 <dd_can_mailbox_conf+0xec>)
   806be:	7bfb      	ldrb	r3, [r7, #15]
   806c0:	015b      	lsls	r3, r3, #5
   806c2:	4413      	add	r3, r2
   806c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
   806c8:	2200      	movs	r2, #0
   806ca:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDL = 0;
   806cc:	4a29      	ldr	r2, [pc, #164]	; (80774 <dd_can_mailbox_conf+0xec>)
   806ce:	7bfb      	ldrb	r3, [r7, #15]
   806d0:	015b      	lsls	r3, r3, #5
   806d2:	4413      	add	r3, r2
   806d4:	f503 7305 	add.w	r3, r3, #532	; 0x214
   806d8:	2200      	movs	r2, #0
   806da:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDH = 0;
   806dc:	4a25      	ldr	r2, [pc, #148]	; (80774 <dd_can_mailbox_conf+0xec>)
   806de:	7bfb      	ldrb	r3, [r7, #15]
   806e0:	015b      	lsls	r3, r3, #5
   806e2:	4413      	add	r3, r2
   806e4:	f503 7306 	add.w	r3, r3, #536	; 0x218
   806e8:	2200      	movs	r2, #0
   806ea:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MCR = 0;
   806ec:	4a21      	ldr	r2, [pc, #132]	; (80774 <dd_can_mailbox_conf+0xec>)
   806ee:	7bfb      	ldrb	r3, [r7, #15]
   806f0:	015b      	lsls	r3, r3, #5
   806f2:	4413      	add	r3, r2
   806f4:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   806f8:	2200      	movs	r2, #0
   806fa:	601a      	str	r2, [r3, #0]
		return;
   806fc:	e035      	b.n	8076a <dd_can_mailbox_conf+0xe2>
	}
	
	/* Set the priority in Transmit mode. */                                                                   
	CAN0->CAN_MB[uc_index].CAN_MMR = (CAN0->CAN_MB[uc_index].CAN_MMR &  ~CAN_MMR_PRIOR_Msk) | (p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);  
   806fe:	481d      	ldr	r0, [pc, #116]	; (80774 <dd_can_mailbox_conf+0xec>)
   80700:	7bfb      	ldrb	r3, [r7, #15]
   80702:	491c      	ldr	r1, [pc, #112]	; (80774 <dd_can_mailbox_conf+0xec>)
   80704:	7bfa      	ldrb	r2, [r7, #15]
   80706:	3210      	adds	r2, #16
   80708:	0152      	lsls	r2, r2, #5
   8070a:	440a      	add	r2, r1
   8070c:	6812      	ldr	r2, [r2, #0]
   8070e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
   80712:	6879      	ldr	r1, [r7, #4]
   80714:	79c9      	ldrb	r1, [r1, #7]
   80716:	0409      	lsls	r1, r1, #16
   80718:	430a      	orrs	r2, r1
   8071a:	3310      	adds	r3, #16
   8071c:	015b      	lsls	r3, r3, #5
   8071e:	4403      	add	r3, r0
   80720:	601a      	str	r2, [r3, #0]
	/* Set the message ID and message acceptance mask for the mailbox in * other modes. */	
		CAN0 ->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   80722:	4914      	ldr	r1, [pc, #80]	; (80774 <dd_can_mailbox_conf+0xec>)
   80724:	7bfb      	ldrb	r3, [r7, #15]
   80726:	687a      	ldr	r2, [r7, #4]
   80728:	68d2      	ldr	r2, [r2, #12]
   8072a:	3310      	adds	r3, #16
   8072c:	015b      	lsls	r3, r3, #5
   8072e:	440b      	add	r3, r1
   80730:	3304      	adds	r3, #4
   80732:	601a      	str	r2, [r3, #0]
		CAN0 ->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;	
   80734:	490f      	ldr	r1, [pc, #60]	; (80774 <dd_can_mailbox_conf+0xec>)
   80736:	7bfb      	ldrb	r3, [r7, #15]
   80738:	687a      	ldr	r2, [r7, #4]
   8073a:	6912      	ldr	r2, [r2, #16]
   8073c:	015b      	lsls	r3, r3, #5
   8073e:	440b      	add	r3, r1
   80740:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80744:	601a      	str	r2, [r3, #0]

	/* Set up mailbox in one of the five different modes. */                                                      
	CAN0 ->CAN_MB[uc_index].CAN_MMR = (CAN0 ->CAN_MB[uc_index].CAN_MMR & ~CAN_MMR_MOT_Msk) | (p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);		
   80746:	480b      	ldr	r0, [pc, #44]	; (80774 <dd_can_mailbox_conf+0xec>)
   80748:	7bfb      	ldrb	r3, [r7, #15]
   8074a:	490a      	ldr	r1, [pc, #40]	; (80774 <dd_can_mailbox_conf+0xec>)
   8074c:	7bfa      	ldrb	r2, [r7, #15]
   8074e:	3210      	adds	r2, #16
   80750:	0152      	lsls	r2, r2, #5
   80752:	440a      	add	r2, r1
   80754:	6812      	ldr	r2, [r2, #0]
   80756:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
   8075a:	6879      	ldr	r1, [r7, #4]
   8075c:	7909      	ldrb	r1, [r1, #4]
   8075e:	0609      	lsls	r1, r1, #24
   80760:	430a      	orrs	r2, r1
   80762:	3310      	adds	r3, #16
   80764:	015b      	lsls	r3, r3, #5
   80766:	4403      	add	r3, r0
   80768:	601a      	str	r2, [r3, #0]
}
   8076a:	3714      	adds	r7, #20
   8076c:	46bd      	mov	sp, r7
   8076e:	bc80      	pop	{r7}
   80770:	4770      	bx	lr
   80772:	bf00      	nop
   80774:	400b4000 	.word	0x400b4000

00080778 <DD_INIT_CAN>:
	p_mailbox->ul_fid = 0;
	p_mailbox->ul_datal = 0;
	p_mailbox->ul_datah = 0;
}

void DD_INIT_CAN()     {
   80778:	b580      	push	{r7, lr}
   8077a:	b08e      	sub	sp, #56	; 0x38
   8077c:	af00      	add	r7, sp, #0
	can_bit_timing_t  *p_bit_time ;
	p_bit_time = (can_bit_timing_t *)&can_bit_time[6];
   8077e:	4b4f      	ldr	r3, [pc, #316]	; (808bc <DD_INIT_CAN+0x144>)
   80780:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ul_flag;
	uint32_t ul_tick;
	uint8_t uc_prescale = 120;
   80782:	2378      	movs	r3, #120	; 0x78
   80784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t ul_sysclk;
	CAN0 ->CAN_WPMR = 0x43414E00;  //Can write protection disabled
   80788:	4b4d      	ldr	r3, [pc, #308]	; (808c0 <DD_INIT_CAN+0x148>)
   8078a:	4a4e      	ldr	r2, [pc, #312]	; (808c4 <DD_INIT_CAN+0x14c>)
   8078c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	CAN0 ->CAN_MR &= ~CAN_MR_CANEN ;  //0xFFFFFFFE; // DISABLE CAN0
   80790:	4a4b      	ldr	r2, [pc, #300]	; (808c0 <DD_INIT_CAN+0x148>)
   80792:	4b4b      	ldr	r3, [pc, #300]	; (808c0 <DD_INIT_CAN+0x148>)
   80794:	681b      	ldr	r3, [r3, #0]
   80796:	f023 0301 	bic.w	r3, r3, #1
   8079a:	6013      	str	r3, [r2, #0]
	CAN0->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) | CAN_BR_PROPAG(p_bit_time->uc_prog - 1) | CAN_BR_SJW(p_bit_time->uc_sjw - 1) |	CAN_BR_BRP(uc_prescale - 1);
   8079c:	4948      	ldr	r1, [pc, #288]	; (808c0 <DD_INIT_CAN+0x148>)
   8079e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   807a0:	78db      	ldrb	r3, [r3, #3]
   807a2:	3b01      	subs	r3, #1
   807a4:	f003 0207 	and.w	r2, r3, #7
   807a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   807aa:	789b      	ldrb	r3, [r3, #2]
   807ac:	3b01      	subs	r3, #1
   807ae:	011b      	lsls	r3, r3, #4
   807b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   807b4:	431a      	orrs	r2, r3
   807b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   807b8:	785b      	ldrb	r3, [r3, #1]
   807ba:	3b01      	subs	r3, #1
   807bc:	021b      	lsls	r3, r3, #8
   807be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   807c2:	431a      	orrs	r2, r3
   807c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   807c6:	791b      	ldrb	r3, [r3, #4]
   807c8:	3b01      	subs	r3, #1
   807ca:	031b      	lsls	r3, r3, #12
   807cc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   807d0:	431a      	orrs	r2, r3
   807d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   807d6:	3b01      	subs	r3, #1
   807d8:	041b      	lsls	r3, r3, #16
   807da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   807de:	4313      	orrs	r3, r2
   807e0:	614b      	str	r3, [r1, #20]
	can_mb_conf_t mb_config_t;
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   807e2:	2300      	movs	r3, #0
   807e4:	723b      	strb	r3, [r7, #8]
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   807e6:	2300      	movs	r3, #0
   807e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   807ec:	e00b      	b.n	80806 <DD_INIT_CAN+0x8e>
		mb_config_t.ul_mb_idx = i;
   807ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   807f2:	607b      	str	r3, [r7, #4]
		dd_can_mailbox_conf(&mb_config_t);
   807f4:	1d3b      	adds	r3, r7, #4
   807f6:	4618      	mov	r0, r3
   807f8:	4b33      	ldr	r3, [pc, #204]	; (808c8 <DD_INIT_CAN+0x150>)
   807fa:	4798      	blx	r3
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   807fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   80800:	3301      	adds	r3, #1
   80802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   80806:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   8080a:	2b07      	cmp	r3, #7
   8080c:	d9ef      	bls.n	807ee <DD_INIT_CAN+0x76>
		mb_config_t.ul_mb_idx = i;
		dd_can_mailbox_conf(&mb_config_t);
	}
	// ALL MAIL BOX HAS BEEN RESET
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
   8080e:	4a2c      	ldr	r2, [pc, #176]	; (808c0 <DD_INIT_CAN+0x148>)
   80810:	4b2b      	ldr	r3, [pc, #172]	; (808c0 <DD_INIT_CAN+0x148>)
   80812:	681b      	ldr	r3, [r3, #0]
   80814:	f043 0301 	orr.w	r3, r3, #1
   80818:	6013      	str	r3, [r2, #0]
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   8081a:	2300      	movs	r3, #0
   8081c:	637b      	str	r3, [r7, #52]	; 0x34
	ul_tick = 0;
   8081e:	2300      	movs	r3, #0
   80820:	633b      	str	r3, [r7, #48]	; 0x30
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   80822:	e005      	b.n	80830 <DD_INIT_CAN+0xb8>
		ul_flag = (CAN0->CAN_SR);
   80824:	4b26      	ldr	r3, [pc, #152]	; (808c0 <DD_INIT_CAN+0x148>)
   80826:	691b      	ldr	r3, [r3, #16]
   80828:	637b      	str	r3, [r7, #52]	; 0x34
		ul_tick++;
   8082a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   8082c:	3301      	adds	r3, #1
   8082e:	633b      	str	r3, [r7, #48]	; 0x30
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   80830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   80832:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   80836:	2b00      	cmp	r3, #0
   80838:	d103      	bne.n	80842 <DD_INIT_CAN+0xca>
   8083a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   8083c:	4a23      	ldr	r2, [pc, #140]	; (808cc <DD_INIT_CAN+0x154>)
   8083e:	4293      	cmp	r3, r2
   80840:	d9f0      	bls.n	80824 <DD_INIT_CAN+0xac>
	/* Timeout or the CAN module has been synchronized with the bus. */
/*	if (CAN_TIMEOUT == ul_tick) { puts("CAN initialization (sync) ERROR" STRING_EOL);	}
	else {	puts("CAN initialization is completed." STRING_EOL);
	}*/
	//NVIC-> ISER reset_mailbox_conf(&can0_mailbox);
	can0_mailbox.ul_mb_idx =   MAILBOX_1;
   80842:	4b23      	ldr	r3, [pc, #140]	; (808d0 <DD_INIT_CAN+0x158>)
   80844:	2201      	movs	r2, #1
   80846:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_RX_MODE ;
   80848:	4b21      	ldr	r3, [pc, #132]	; (808d0 <DD_INIT_CAN+0x158>)
   8084a:	2201      	movs	r2, #1
   8084c:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 0;
   8084e:	4b20      	ldr	r3, [pc, #128]	; (808d0 <DD_INIT_CAN+0x158>)
   80850:	2200      	movs	r2, #0
   80852:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   80854:	4b1e      	ldr	r3, [pc, #120]	; (808d0 <DD_INIT_CAN+0x158>)
   80856:	2200      	movs	r2, #0
   80858:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk =  CAN_MFID_MFID_VA_dd(CAN_MASK);   // 0x7FC | CAN_MAM_MIDvA_Msk ;
   8085a:	4b1d      	ldr	r3, [pc, #116]	; (808d0 <DD_INIT_CAN+0x158>)
   8085c:	4a1d      	ldr	r2, [pc, #116]	; (808d4 <DD_INIT_CAN+0x15c>)
   8085e:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(HEMO_CPU_id) ;
   80860:	4b1b      	ldr	r3, [pc, #108]	; (808d0 <DD_INIT_CAN+0x158>)
   80862:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   80866:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);
   80868:	4819      	ldr	r0, [pc, #100]	; (808d0 <DD_INIT_CAN+0x158>)
   8086a:	4b17      	ldr	r3, [pc, #92]	; (808c8 <DD_INIT_CAN+0x150>)
   8086c:	4798      	blx	r3
	NVIC_EnableIRQ(CAN0_IRQn);
   8086e:	202b      	movs	r0, #43	; 0x2b
   80870:	4b19      	ldr	r3, [pc, #100]	; (808d8 <DD_INIT_CAN+0x160>)
   80872:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   80874:	4b12      	ldr	r3, [pc, #72]	; (808c0 <DD_INIT_CAN+0x148>)
   80876:	2202      	movs	r2, #2
   80878:	605a      	str	r2, [r3, #4]
	
	can0_mailbox.ul_mb_idx =   MAILBOX_0;
   8087a:	4b15      	ldr	r3, [pc, #84]	; (808d0 <DD_INIT_CAN+0x158>)
   8087c:	2200      	movs	r2, #0
   8087e:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;
   80880:	4b13      	ldr	r3, [pc, #76]	; (808d0 <DD_INIT_CAN+0x158>)
   80882:	2203      	movs	r2, #3
   80884:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 1;
   80886:	4b12      	ldr	r3, [pc, #72]	; (808d0 <DD_INIT_CAN+0x158>)
   80888:	2201      	movs	r2, #1
   8088a:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   8088c:	4b10      	ldr	r3, [pc, #64]	; (808d0 <DD_INIT_CAN+0x158>)
   8088e:	2200      	movs	r2, #0
   80890:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = CAN_MFID_MFID_VA_dd(CAN_MASK);// 0x7FC | CAN_MAM_MIDvA_Msk | CAN_MAM_MIDvB_Msk ;
   80892:	4b0f      	ldr	r3, [pc, #60]	; (808d0 <DD_INIT_CAN+0x158>)
   80894:	4a0f      	ldr	r2, [pc, #60]	; (808d4 <DD_INIT_CAN+0x15c>)
   80896:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(MASTER_CPU_id);
   80898:	4b0d      	ldr	r3, [pc, #52]	; (808d0 <DD_INIT_CAN+0x158>)
   8089a:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   8089e:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);	
   808a0:	480b      	ldr	r0, [pc, #44]	; (808d0 <DD_INIT_CAN+0x158>)
   808a2:	4b09      	ldr	r3, [pc, #36]	; (808c8 <DD_INIT_CAN+0x150>)
   808a4:	4798      	blx	r3
	
		sn65hvda540_set_en(&can0_transceiver ,PIN_CAN0_STANDBY_IDX);
   808a6:	2102      	movs	r1, #2
   808a8:	480c      	ldr	r0, [pc, #48]	; (808dc <DD_INIT_CAN+0x164>)
   808aa:	4b0d      	ldr	r3, [pc, #52]	; (808e0 <DD_INIT_CAN+0x168>)
   808ac:	4798      	blx	r3
		sn65hvda540_normal_mode(&can0_transceiver);
   808ae:	480b      	ldr	r0, [pc, #44]	; (808dc <DD_INIT_CAN+0x164>)
   808b0:	4b0c      	ldr	r3, [pc, #48]	; (808e4 <DD_INIT_CAN+0x16c>)
   808b2:	4798      	blx	r3
}
   808b4:	bf00      	nop
   808b6:	3738      	adds	r7, #56	; 0x38
   808b8:	46bd      	mov	sp, r7
   808ba:	bd80      	pop	{r7, pc}
   808bc:	00087634 	.word	0x00087634
   808c0:	400b4000 	.word	0x400b4000
   808c4:	43414e00 	.word	0x43414e00
   808c8:	00080689 	.word	0x00080689
   808cc:	0001869f 	.word	0x0001869f
   808d0:	20070a58 	.word	0x20070a58
   808d4:	1ffc0000 	.word	0x1ffc0000
   808d8:	000801c9 	.word	0x000801c9
   808dc:	20070a84 	.word	0x20070a84
   808e0:	00080265 	.word	0x00080265
   808e4:	00080281 	.word	0x00080281

000808e8 <dd_APT_REG_INIT>:
#include  "Platform/Driver/CPU2_DD_SPI/D_SPI.h"
uint16_t command_data_array[5];
	

void dd_APT_REG_INIT()
     	{
   808e8:	b580      	push	{r7, lr}
   808ea:	b084      	sub	sp, #16
   808ec:	af00      	add	r7, sp, #0
    	
		command_data_array[0] = ADS1120_RESET;
   808ee:	4b1e      	ldr	r3, [pc, #120]	; (80968 <dd_APT_REG_INIT+0x80>)
   808f0:	2206      	movs	r2, #6
   808f2:	801a      	strh	r2, [r3, #0]
     	dd_spi_master_transfer(&command_data_array, 1);
   808f4:	2101      	movs	r1, #1
   808f6:	481c      	ldr	r0, [pc, #112]	; (80968 <dd_APT_REG_INIT+0x80>)
   808f8:	4b1c      	ldr	r3, [pc, #112]	; (8096c <dd_APT_REG_INIT+0x84>)
   808fa:	4798      	blx	r3
		 
		 
		 for (int i=0;i<10000;i++)
   808fc:	2300      	movs	r3, #0
   808fe:	60fb      	str	r3, [r7, #12]
   80900:	e002      	b.n	80908 <dd_APT_REG_INIT+0x20>
   80902:	68fb      	ldr	r3, [r7, #12]
   80904:	3301      	adds	r3, #1
   80906:	60fb      	str	r3, [r7, #12]
   80908:	68fb      	ldr	r3, [r7, #12]
   8090a:	f242 720f 	movw	r2, #9999	; 0x270f
   8090e:	4293      	cmp	r3, r2
   80910:	ddf7      	ble.n	80902 <dd_APT_REG_INIT+0x1a>
		 {
	;
		 }
		 		 
		 command_data_array[0] = ADS1120_WREG_COMMAND | ADS1120_WREG_START_REG_ADR(0) | ADS1120_WREG_NO_OF_BYTES(3) ; //0x43;
   80912:	4b15      	ldr	r3, [pc, #84]	; (80968 <dd_APT_REG_INIT+0x80>)
   80914:	2243      	movs	r2, #67	; 0x43
   80916:	801a      	strh	r2, [r3, #0]
		 command_data_array[1] = ADS1120_CONFIG_REG0_MUX(ADS1120_MUX_AIN1_AIN2) |  ADS1120_CONFIG_REG0_GAIN(ADS1120_DEVICE_GAIN_32) ;    //3E                                      //0b00110001;
   80918:	4b13      	ldr	r3, [pc, #76]	; (80968 <dd_APT_REG_INIT+0x80>)
   8091a:	223a      	movs	r2, #58	; 0x3a
   8091c:	805a      	strh	r2, [r3, #2]
		 command_data_array[2] = 0x04;      //ADS1120_CONFIG_REG1_CM | ADS1120_CONFIG_REG1_MODE(ADS1120_MODE_MORMAL) | ADS1120_CONFIG_REG1_DR(ADS1120_DR_20_SPS);//0b00000100; 04
   8091e:	4b12      	ldr	r3, [pc, #72]	; (80968 <dd_APT_REG_INIT+0x80>)
   80920:	2204      	movs	r2, #4
   80922:	809a      	strh	r2, [r3, #4]
		 command_data_array[3] = 0x98;                  //ADS1120_CONFIG_REG2_IDAC(ADS1120_IDAC_OFF) | ADS1120_CONFIG_REG2_50_60(ADS1120_FIR_50_60_REJECTION) | ADS1120_CONFIG_REG2_VREF(ADS1120_EXTERNAL_REF_REFP1_REFN1); //0b10011000   98;
   80924:	4b10      	ldr	r3, [pc, #64]	; (80968 <dd_APT_REG_INIT+0x80>)
   80926:	2298      	movs	r2, #152	; 0x98
   80928:	80da      	strh	r2, [r3, #6]
		 command_data_array[4] = 0;                       //0b00000000;
   8092a:	4b0f      	ldr	r3, [pc, #60]	; (80968 <dd_APT_REG_INIT+0x80>)
   8092c:	2200      	movs	r2, #0
   8092e:	811a      	strh	r2, [r3, #8]
		 // 							  dd_spi_set_peripheral_chip_select_value(PS1_CS_N_ID);
		 // 					 	  dd_spi_master_transfer(&command_data_array, sizeof(command_data_array), PS1_CS_N_ID);
		 dd_spi_master_transfer(&command_data_array, 5);
   80930:	2105      	movs	r1, #5
   80932:	480d      	ldr	r0, [pc, #52]	; (80968 <dd_APT_REG_INIT+0x80>)
   80934:	4b0d      	ldr	r3, [pc, #52]	; (8096c <dd_APT_REG_INIT+0x84>)
   80936:	4798      	blx	r3
		 
		 
										  
										  
						
		  command_data_array[0] = ADS1120_START_OR_SYNC;
   80938:	4b0b      	ldr	r3, [pc, #44]	; (80968 <dd_APT_REG_INIT+0x80>)
   8093a:	2208      	movs	r2, #8
   8093c:	801a      	strh	r2, [r3, #0]
		dd_spi_master_transfer(&command_data_array, 1);
   8093e:	2101      	movs	r1, #1
   80940:	4809      	ldr	r0, [pc, #36]	; (80968 <dd_APT_REG_INIT+0x80>)
   80942:	4b0a      	ldr	r3, [pc, #40]	; (8096c <dd_APT_REG_INIT+0x84>)
   80944:	4798      	blx	r3
  
		 
		   for (int i=0;i<10000;i++)
   80946:	2300      	movs	r3, #0
   80948:	60bb      	str	r3, [r7, #8]
   8094a:	e002      	b.n	80952 <dd_APT_REG_INIT+0x6a>
   8094c:	68bb      	ldr	r3, [r7, #8]
   8094e:	3301      	adds	r3, #1
   80950:	60bb      	str	r3, [r7, #8]
   80952:	68bb      	ldr	r3, [r7, #8]
   80954:	f242 720f 	movw	r2, #9999	; 0x270f
   80958:	4293      	cmp	r3, r2
   8095a:	ddf7      	ble.n	8094c <dd_APT_REG_INIT+0x64>
		   {
			   ;
		   }   
		   int i = 0;
   8095c:	2300      	movs	r3, #0
   8095e:	607b      	str	r3, [r7, #4]
 }
   80960:	bf00      	nop
   80962:	3710      	adds	r7, #16
   80964:	46bd      	mov	sp, r7
   80966:	bd80      	pop	{r7, pc}
   80968:	20070e78 	.word	0x20070e78
   8096c:	00080ba9 	.word	0x00080ba9

00080970 <dd_VPT_REG_INIT>:
		   
		   
		   void dd_VPT_REG_INIT()
		   {
   80970:	b580      	push	{r7, lr}
   80972:	b084      	sub	sp, #16
   80974:	af00      	add	r7, sp, #0
			   command_data_array[0] = ADS1120_RESET;
   80976:	4b1e      	ldr	r3, [pc, #120]	; (809f0 <dd_VPT_REG_INIT+0x80>)
   80978:	2206      	movs	r2, #6
   8097a:	801a      	strh	r2, [r3, #0]
			   dd_spi_master_transfer(&command_data_array, 1);
   8097c:	2101      	movs	r1, #1
   8097e:	481c      	ldr	r0, [pc, #112]	; (809f0 <dd_VPT_REG_INIT+0x80>)
   80980:	4b1c      	ldr	r3, [pc, #112]	; (809f4 <dd_VPT_REG_INIT+0x84>)
   80982:	4798      	blx	r3
			   
			   
			   for (int i=0;i<10000;i++)
   80984:	2300      	movs	r3, #0
   80986:	60fb      	str	r3, [r7, #12]
   80988:	e002      	b.n	80990 <dd_VPT_REG_INIT+0x20>
   8098a:	68fb      	ldr	r3, [r7, #12]
   8098c:	3301      	adds	r3, #1
   8098e:	60fb      	str	r3, [r7, #12]
   80990:	68fb      	ldr	r3, [r7, #12]
   80992:	f242 720f 	movw	r2, #9999	; 0x270f
   80996:	4293      	cmp	r3, r2
   80998:	ddf7      	ble.n	8098a <dd_VPT_REG_INIT+0x1a>
			   {
				   ;
			   }
			   			   
			   command_data_array[0] = ADS1120_WREG_COMMAND | ADS1120_WREG_START_REG_ADR(0) | ADS1120_WREG_NO_OF_BYTES(3) ; //0x43;
   8099a:	4b15      	ldr	r3, [pc, #84]	; (809f0 <dd_VPT_REG_INIT+0x80>)
   8099c:	2243      	movs	r2, #67	; 0x43
   8099e:	801a      	strh	r2, [r3, #0]
			   command_data_array[1] = ADS1120_CONFIG_REG0_MUX(ADS1120_MUX_AIN1_AIN2) |  ADS1120_CONFIG_REG0_GAIN(ADS1120_DEVICE_GAIN_32) ;    //3E                                      //0b00110001;
   809a0:	4b13      	ldr	r3, [pc, #76]	; (809f0 <dd_VPT_REG_INIT+0x80>)
   809a2:	223a      	movs	r2, #58	; 0x3a
   809a4:	805a      	strh	r2, [r3, #2]
			   command_data_array[2] = 0x04;      //ADS1120_CONFIG_REG1_CM | ADS1120_CONFIG_REG1_MODE(ADS1120_MODE_MORMAL) | ADS1120_CONFIG_REG1_DR(ADS1120_DR_20_SPS);//0b00000100; 04
   809a6:	4b12      	ldr	r3, [pc, #72]	; (809f0 <dd_VPT_REG_INIT+0x80>)
   809a8:	2204      	movs	r2, #4
   809aa:	809a      	strh	r2, [r3, #4]
			   command_data_array[3] = 0x98;                  //ADS1120_CONFIG_REG2_IDAC(ADS1120_IDAC_OFF) | ADS1120_CONFIG_REG2_50_60(ADS1120_FIR_50_60_REJECTION) | ADS1120_CONFIG_REG2_VREF(ADS1120_EXTERNAL_REF_REFP1_REFN1); //0b10011000   98;
   809ac:	4b10      	ldr	r3, [pc, #64]	; (809f0 <dd_VPT_REG_INIT+0x80>)
   809ae:	2298      	movs	r2, #152	; 0x98
   809b0:	80da      	strh	r2, [r3, #6]
			   command_data_array[4] = 0;                       //0b00000000;
   809b2:	4b0f      	ldr	r3, [pc, #60]	; (809f0 <dd_VPT_REG_INIT+0x80>)
   809b4:	2200      	movs	r2, #0
   809b6:	811a      	strh	r2, [r3, #8]
			   // 							  dd_spi_set_peripheral_chip_select_value(PS1_CS_N_ID);
			   // 					 	  dd_spi_master_transfer(&command_data_array, sizeof(command_data_array), PS1_CS_N_ID);
			   dd_spi_master_transfer(&command_data_array, 5);
   809b8:	2105      	movs	r1, #5
   809ba:	480d      	ldr	r0, [pc, #52]	; (809f0 <dd_VPT_REG_INIT+0x80>)
   809bc:	4b0d      	ldr	r3, [pc, #52]	; (809f4 <dd_VPT_REG_INIT+0x84>)
   809be:	4798      	blx	r3
			   
			   
			   command_data_array[0] = ADS1120_START_OR_SYNC;
   809c0:	4b0b      	ldr	r3, [pc, #44]	; (809f0 <dd_VPT_REG_INIT+0x80>)
   809c2:	2208      	movs	r2, #8
   809c4:	801a      	strh	r2, [r3, #0]
			   dd_spi_master_transfer(&command_data_array, 1);
   809c6:	2101      	movs	r1, #1
   809c8:	4809      	ldr	r0, [pc, #36]	; (809f0 <dd_VPT_REG_INIT+0x80>)
   809ca:	4b0a      	ldr	r3, [pc, #40]	; (809f4 <dd_VPT_REG_INIT+0x84>)
   809cc:	4798      	blx	r3
			   
			   
			   for (int i=0;i<10000;i++)
   809ce:	2300      	movs	r3, #0
   809d0:	60bb      	str	r3, [r7, #8]
   809d2:	e002      	b.n	809da <dd_VPT_REG_INIT+0x6a>
   809d4:	68bb      	ldr	r3, [r7, #8]
   809d6:	3301      	adds	r3, #1
   809d8:	60bb      	str	r3, [r7, #8]
   809da:	68bb      	ldr	r3, [r7, #8]
   809dc:	f242 720f 	movw	r2, #9999	; 0x270f
   809e0:	4293      	cmp	r3, r2
   809e2:	ddf7      	ble.n	809d4 <dd_VPT_REG_INIT+0x64>
			   {
				   ;
			   }
			   int i = 0;
   809e4:	2300      	movs	r3, #0
   809e6:	607b      	str	r3, [r7, #4]
   809e8:	bf00      	nop
   809ea:	3710      	adds	r7, #16
   809ec:	46bd      	mov	sp, r7
   809ee:	bd80      	pop	{r7, pc}
   809f0:	20070e78 	.word	0x20070e78
   809f4:	00080ba9 	.word	0x00080ba9

000809f8 <dd_spi_set_transfer_delay>:
   809f8:	b490      	push	{r4, r7}
   809fa:	b082      	sub	sp, #8
   809fc:	af00      	add	r7, sp, #0
   809fe:	4603      	mov	r3, r0
   80a00:	80fb      	strh	r3, [r7, #6]
   80a02:	460b      	mov	r3, r1
   80a04:	717b      	strb	r3, [r7, #5]
   80a06:	4613      	mov	r3, r2
   80a08:	713b      	strb	r3, [r7, #4]
   80a0a:	4911      	ldr	r1, [pc, #68]	; (80a50 <dd_spi_set_transfer_delay+0x58>)
   80a0c:	88fb      	ldrh	r3, [r7, #6]
   80a0e:	4810      	ldr	r0, [pc, #64]	; (80a50 <dd_spi_set_transfer_delay+0x58>)
   80a10:	88fa      	ldrh	r2, [r7, #6]
   80a12:	320c      	adds	r2, #12
   80a14:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   80a18:	b292      	uxth	r2, r2
   80a1a:	330c      	adds	r3, #12
   80a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   80a20:	4c0b      	ldr	r4, [pc, #44]	; (80a50 <dd_spi_set_transfer_delay+0x58>)
   80a22:	88fb      	ldrh	r3, [r7, #6]
   80a24:	490a      	ldr	r1, [pc, #40]	; (80a50 <dd_spi_set_transfer_delay+0x58>)
   80a26:	88fa      	ldrh	r2, [r7, #6]
   80a28:	320c      	adds	r2, #12
   80a2a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   80a2e:	797a      	ldrb	r2, [r7, #5]
   80a30:	0412      	lsls	r2, r2, #16
   80a32:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   80a36:	7938      	ldrb	r0, [r7, #4]
   80a38:	0600      	lsls	r0, r0, #24
   80a3a:	4302      	orrs	r2, r0
   80a3c:	430a      	orrs	r2, r1
   80a3e:	330c      	adds	r3, #12
   80a40:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   80a44:	bf00      	nop
   80a46:	3708      	adds	r7, #8
   80a48:	46bd      	mov	sp, r7
   80a4a:	bc90      	pop	{r4, r7}
   80a4c:	4770      	bx	lr
   80a4e:	bf00      	nop
   80a50:	40008000 	.word	0x40008000

00080a54 <dd_spi_set_bits_per_transfer>:
   80a54:	b480      	push	{r7}
   80a56:	b083      	sub	sp, #12
   80a58:	af00      	add	r7, sp, #0
   80a5a:	4603      	mov	r3, r0
   80a5c:	6039      	str	r1, [r7, #0]
   80a5e:	80fb      	strh	r3, [r7, #6]
   80a60:	490e      	ldr	r1, [pc, #56]	; (80a9c <dd_spi_set_bits_per_transfer+0x48>)
   80a62:	88fb      	ldrh	r3, [r7, #6]
   80a64:	480d      	ldr	r0, [pc, #52]	; (80a9c <dd_spi_set_bits_per_transfer+0x48>)
   80a66:	88fa      	ldrh	r2, [r7, #6]
   80a68:	320c      	adds	r2, #12
   80a6a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   80a6e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
   80a72:	330c      	adds	r3, #12
   80a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   80a78:	4808      	ldr	r0, [pc, #32]	; (80a9c <dd_spi_set_bits_per_transfer+0x48>)
   80a7a:	88fb      	ldrh	r3, [r7, #6]
   80a7c:	4907      	ldr	r1, [pc, #28]	; (80a9c <dd_spi_set_bits_per_transfer+0x48>)
   80a7e:	88fa      	ldrh	r2, [r7, #6]
   80a80:	320c      	adds	r2, #12
   80a82:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   80a86:	683a      	ldr	r2, [r7, #0]
   80a88:	430a      	orrs	r2, r1
   80a8a:	330c      	adds	r3, #12
   80a8c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
   80a90:	bf00      	nop
   80a92:	370c      	adds	r7, #12
   80a94:	46bd      	mov	sp, r7
   80a96:	bc80      	pop	{r7}
   80a98:	4770      	bx	lr
   80a9a:	bf00      	nop
   80a9c:	40008000 	.word	0x40008000

00080aa0 <dd_spi_set_clock_polarity>:
   80aa0:	b480      	push	{r7}
   80aa2:	b083      	sub	sp, #12
   80aa4:	af00      	add	r7, sp, #0
   80aa6:	4603      	mov	r3, r0
   80aa8:	6039      	str	r1, [r7, #0]
   80aaa:	80fb      	strh	r3, [r7, #6]
   80aac:	683b      	ldr	r3, [r7, #0]
   80aae:	2b00      	cmp	r3, #0
   80ab0:	d00c      	beq.n	80acc <dd_spi_set_clock_polarity+0x2c>
   80ab2:	490f      	ldr	r1, [pc, #60]	; (80af0 <dd_spi_set_clock_polarity+0x50>)
   80ab4:	88fb      	ldrh	r3, [r7, #6]
   80ab6:	480e      	ldr	r0, [pc, #56]	; (80af0 <dd_spi_set_clock_polarity+0x50>)
   80ab8:	88fa      	ldrh	r2, [r7, #6]
   80aba:	320c      	adds	r2, #12
   80abc:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   80ac0:	f042 0201 	orr.w	r2, r2, #1
   80ac4:	330c      	adds	r3, #12
   80ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   80aca:	e00b      	b.n	80ae4 <dd_spi_set_clock_polarity+0x44>
   80acc:	4908      	ldr	r1, [pc, #32]	; (80af0 <dd_spi_set_clock_polarity+0x50>)
   80ace:	88fb      	ldrh	r3, [r7, #6]
   80ad0:	4807      	ldr	r0, [pc, #28]	; (80af0 <dd_spi_set_clock_polarity+0x50>)
   80ad2:	88fa      	ldrh	r2, [r7, #6]
   80ad4:	320c      	adds	r2, #12
   80ad6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   80ada:	f022 0201 	bic.w	r2, r2, #1
   80ade:	330c      	adds	r3, #12
   80ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   80ae4:	bf00      	nop
   80ae6:	370c      	adds	r7, #12
   80ae8:	46bd      	mov	sp, r7
   80aea:	bc80      	pop	{r7}
   80aec:	4770      	bx	lr
   80aee:	bf00      	nop
   80af0:	40008000 	.word	0x40008000

00080af4 <dd_spi_set_clock_phase>:
   80af4:	b480      	push	{r7}
   80af6:	b083      	sub	sp, #12
   80af8:	af00      	add	r7, sp, #0
   80afa:	4603      	mov	r3, r0
   80afc:	6039      	str	r1, [r7, #0]
   80afe:	80fb      	strh	r3, [r7, #6]
   80b00:	683b      	ldr	r3, [r7, #0]
   80b02:	2b00      	cmp	r3, #0
   80b04:	d00c      	beq.n	80b20 <dd_spi_set_clock_phase+0x2c>
   80b06:	490f      	ldr	r1, [pc, #60]	; (80b44 <dd_spi_set_clock_phase+0x50>)
   80b08:	88fb      	ldrh	r3, [r7, #6]
   80b0a:	480e      	ldr	r0, [pc, #56]	; (80b44 <dd_spi_set_clock_phase+0x50>)
   80b0c:	88fa      	ldrh	r2, [r7, #6]
   80b0e:	320c      	adds	r2, #12
   80b10:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   80b14:	f042 0202 	orr.w	r2, r2, #2
   80b18:	330c      	adds	r3, #12
   80b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   80b1e:	e00b      	b.n	80b38 <dd_spi_set_clock_phase+0x44>
   80b20:	4908      	ldr	r1, [pc, #32]	; (80b44 <dd_spi_set_clock_phase+0x50>)
   80b22:	88fb      	ldrh	r3, [r7, #6]
   80b24:	4807      	ldr	r0, [pc, #28]	; (80b44 <dd_spi_set_clock_phase+0x50>)
   80b26:	88fa      	ldrh	r2, [r7, #6]
   80b28:	320c      	adds	r2, #12
   80b2a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   80b2e:	f022 0202 	bic.w	r2, r2, #2
   80b32:	330c      	adds	r3, #12
   80b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   80b38:	bf00      	nop
   80b3a:	370c      	adds	r7, #12
   80b3c:	46bd      	mov	sp, r7
   80b3e:	bc80      	pop	{r7}
   80b40:	4770      	bx	lr
   80b42:	bf00      	nop
   80b44:	40008000 	.word	0x40008000

00080b48 <dd_spi_set_baudrate_div>:
   80b48:	b480      	push	{r7}
   80b4a:	b083      	sub	sp, #12
   80b4c:	af00      	add	r7, sp, #0
   80b4e:	4603      	mov	r3, r0
   80b50:	460a      	mov	r2, r1
   80b52:	80fb      	strh	r3, [r7, #6]
   80b54:	4613      	mov	r3, r2
   80b56:	717b      	strb	r3, [r7, #5]
   80b58:	797b      	ldrb	r3, [r7, #5]
   80b5a:	2b00      	cmp	r3, #0
   80b5c:	d102      	bne.n	80b64 <dd_spi_set_baudrate_div+0x1c>
   80b5e:	f04f 33ff 	mov.w	r3, #4294967295
   80b62:	e01a      	b.n	80b9a <dd_spi_set_baudrate_div+0x52>
   80b64:	490f      	ldr	r1, [pc, #60]	; (80ba4 <dd_spi_set_baudrate_div+0x5c>)
   80b66:	88fb      	ldrh	r3, [r7, #6]
   80b68:	480e      	ldr	r0, [pc, #56]	; (80ba4 <dd_spi_set_baudrate_div+0x5c>)
   80b6a:	88fa      	ldrh	r2, [r7, #6]
   80b6c:	320c      	adds	r2, #12
   80b6e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   80b72:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
   80b76:	330c      	adds	r3, #12
   80b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   80b7c:	4809      	ldr	r0, [pc, #36]	; (80ba4 <dd_spi_set_baudrate_div+0x5c>)
   80b7e:	88fb      	ldrh	r3, [r7, #6]
   80b80:	4908      	ldr	r1, [pc, #32]	; (80ba4 <dd_spi_set_baudrate_div+0x5c>)
   80b82:	88fa      	ldrh	r2, [r7, #6]
   80b84:	320c      	adds	r2, #12
   80b86:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   80b8a:	797a      	ldrb	r2, [r7, #5]
   80b8c:	0212      	lsls	r2, r2, #8
   80b8e:	b292      	uxth	r2, r2
   80b90:	430a      	orrs	r2, r1
   80b92:	330c      	adds	r3, #12
   80b94:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
   80b98:	2300      	movs	r3, #0
   80b9a:	4618      	mov	r0, r3
   80b9c:	370c      	adds	r7, #12
   80b9e:	46bd      	mov	sp, r7
   80ba0:	bc80      	pop	{r7}
   80ba2:	4770      	bx	lr
   80ba4:	40008000 	.word	0x40008000

00080ba8 <dd_spi_master_transfer>:
   80ba8:	b580      	push	{r7, lr}
   80baa:	b086      	sub	sp, #24
   80bac:	af00      	add	r7, sp, #0
   80bae:	6078      	str	r0, [r7, #4]
   80bb0:	6039      	str	r1, [r7, #0]
   80bb2:	f643 2398 	movw	r3, #15000	; 0x3a98
   80bb6:	613b      	str	r3, [r7, #16]
   80bb8:	687b      	ldr	r3, [r7, #4]
   80bba:	60fb      	str	r3, [r7, #12]
   80bbc:	2300      	movs	r3, #0
   80bbe:	617b      	str	r3, [r7, #20]
   80bc0:	e022      	b.n	80c08 <dd_spi_master_transfer+0x60>
   80bc2:	697b      	ldr	r3, [r7, #20]
   80bc4:	005b      	lsls	r3, r3, #1
   80bc6:	68fa      	ldr	r2, [r7, #12]
   80bc8:	4413      	add	r3, r2
   80bca:	881b      	ldrh	r3, [r3, #0]
   80bcc:	b2db      	uxtb	r3, r3
   80bce:	4618      	mov	r0, r3
   80bd0:	4b12      	ldr	r3, [pc, #72]	; (80c1c <dd_spi_master_transfer+0x74>)
   80bd2:	4798      	blx	r3
   80bd4:	e004      	b.n	80be0 <dd_spi_master_transfer+0x38>
   80bd6:	693b      	ldr	r3, [r7, #16]
   80bd8:	1e5a      	subs	r2, r3, #1
   80bda:	613a      	str	r2, [r7, #16]
   80bdc:	2b00      	cmp	r3, #0
   80bde:	d018      	beq.n	80c12 <dd_spi_master_transfer+0x6a>
   80be0:	4b0f      	ldr	r3, [pc, #60]	; (80c20 <dd_spi_master_transfer+0x78>)
   80be2:	691b      	ldr	r3, [r3, #16]
   80be4:	f003 0301 	and.w	r3, r3, #1
   80be8:	2b00      	cmp	r3, #0
   80bea:	d0f4      	beq.n	80bd6 <dd_spi_master_transfer+0x2e>
   80bec:	480d      	ldr	r0, [pc, #52]	; (80c24 <dd_spi_master_transfer+0x7c>)
   80bee:	4b0e      	ldr	r3, [pc, #56]	; (80c28 <dd_spi_master_transfer+0x80>)
   80bf0:	4798      	blx	r3
   80bf2:	697b      	ldr	r3, [r7, #20]
   80bf4:	005b      	lsls	r3, r3, #1
   80bf6:	68fa      	ldr	r2, [r7, #12]
   80bf8:	4413      	add	r3, r2
   80bfa:	4a0a      	ldr	r2, [pc, #40]	; (80c24 <dd_spi_master_transfer+0x7c>)
   80bfc:	7812      	ldrb	r2, [r2, #0]
   80bfe:	b292      	uxth	r2, r2
   80c00:	801a      	strh	r2, [r3, #0]
   80c02:	697b      	ldr	r3, [r7, #20]
   80c04:	3301      	adds	r3, #1
   80c06:	617b      	str	r3, [r7, #20]
   80c08:	697a      	ldr	r2, [r7, #20]
   80c0a:	683b      	ldr	r3, [r7, #0]
   80c0c:	429a      	cmp	r2, r3
   80c0e:	d3d8      	bcc.n	80bc2 <dd_spi_master_transfer+0x1a>
   80c10:	e000      	b.n	80c14 <dd_spi_master_transfer+0x6c>
   80c12:	bf00      	nop
   80c14:	3718      	adds	r7, #24
   80c16:	46bd      	mov	sp, r7
   80c18:	bd80      	pop	{r7, pc}
   80c1a:	bf00      	nop
   80c1c:	00080c89 	.word	0x00080c89
   80c20:	40008000 	.word	0x40008000
   80c24:	20070949 	.word	0x20070949
   80c28:	00080c2d 	.word	0x00080c2d

00080c2c <dd_spi_read>:
   80c2c:	b480      	push	{r7}
   80c2e:	b085      	sub	sp, #20
   80c30:	af00      	add	r7, sp, #0
   80c32:	6078      	str	r0, [r7, #4]
   80c34:	f643 2398 	movw	r3, #15000	; 0x3a98
   80c38:	60fb      	str	r3, [r7, #12]
   80c3a:	e006      	b.n	80c4a <dd_spi_read+0x1e>
   80c3c:	68fb      	ldr	r3, [r7, #12]
   80c3e:	1e5a      	subs	r2, r3, #1
   80c40:	60fa      	str	r2, [r7, #12]
   80c42:	2b00      	cmp	r3, #0
   80c44:	d101      	bne.n	80c4a <dd_spi_read+0x1e>
   80c46:	2301      	movs	r3, #1
   80c48:	e015      	b.n	80c76 <dd_spi_read+0x4a>
   80c4a:	4b0d      	ldr	r3, [pc, #52]	; (80c80 <dd_spi_read+0x54>)
   80c4c:	691b      	ldr	r3, [r3, #16]
   80c4e:	f003 0301 	and.w	r3, r3, #1
   80c52:	2b00      	cmp	r3, #0
   80c54:	d0f2      	beq.n	80c3c <dd_spi_read+0x10>
   80c56:	4b0a      	ldr	r3, [pc, #40]	; (80c80 <dd_spi_read+0x54>)
   80c58:	691b      	ldr	r3, [r3, #16]
   80c5a:	f003 0301 	and.w	r3, r3, #1
   80c5e:	2b00      	cmp	r3, #0
   80c60:	d003      	beq.n	80c6a <dd_spi_read+0x3e>
   80c62:	4b07      	ldr	r3, [pc, #28]	; (80c80 <dd_spi_read+0x54>)
   80c64:	689b      	ldr	r3, [r3, #8]
   80c66:	4a07      	ldr	r2, [pc, #28]	; (80c84 <dd_spi_read+0x58>)
   80c68:	6013      	str	r3, [r2, #0]
   80c6a:	4b06      	ldr	r3, [pc, #24]	; (80c84 <dd_spi_read+0x58>)
   80c6c:	681b      	ldr	r3, [r3, #0]
   80c6e:	b2da      	uxtb	r2, r3
   80c70:	687b      	ldr	r3, [r7, #4]
   80c72:	701a      	strb	r2, [r3, #0]
   80c74:	2300      	movs	r3, #0
   80c76:	4618      	mov	r0, r3
   80c78:	3714      	adds	r7, #20
   80c7a:	46bd      	mov	sp, r7
   80c7c:	bc80      	pop	{r7}
   80c7e:	4770      	bx	lr
   80c80:	40008000 	.word	0x40008000
   80c84:	2007094c 	.word	0x2007094c

00080c88 <dd_spi_write>:
   80c88:	b480      	push	{r7}
   80c8a:	b085      	sub	sp, #20
   80c8c:	af00      	add	r7, sp, #0
   80c8e:	4603      	mov	r3, r0
   80c90:	71fb      	strb	r3, [r7, #7]
   80c92:	f643 2398 	movw	r3, #15000	; 0x3a98
   80c96:	60fb      	str	r3, [r7, #12]
   80c98:	e006      	b.n	80ca8 <dd_spi_write+0x20>
   80c9a:	68fb      	ldr	r3, [r7, #12]
   80c9c:	1e5a      	subs	r2, r3, #1
   80c9e:	60fa      	str	r2, [r7, #12]
   80ca0:	2b00      	cmp	r3, #0
   80ca2:	d101      	bne.n	80ca8 <dd_spi_write+0x20>
   80ca4:	2301      	movs	r3, #1
   80ca6:	e00b      	b.n	80cc0 <dd_spi_write+0x38>
   80ca8:	4b08      	ldr	r3, [pc, #32]	; (80ccc <dd_spi_write+0x44>)
   80caa:	691b      	ldr	r3, [r3, #16]
   80cac:	f003 0302 	and.w	r3, r3, #2
   80cb0:	2b00      	cmp	r3, #0
   80cb2:	d0f2      	beq.n	80c9a <dd_spi_write+0x12>
   80cb4:	79fb      	ldrb	r3, [r7, #7]
   80cb6:	60bb      	str	r3, [r7, #8]
   80cb8:	4a04      	ldr	r2, [pc, #16]	; (80ccc <dd_spi_write+0x44>)
   80cba:	68bb      	ldr	r3, [r7, #8]
   80cbc:	60d3      	str	r3, [r2, #12]
   80cbe:	2300      	movs	r3, #0
   80cc0:	4618      	mov	r0, r3
   80cc2:	3714      	adds	r7, #20
   80cc4:	46bd      	mov	sp, r7
   80cc6:	bc80      	pop	{r7}
   80cc8:	4770      	bx	lr
   80cca:	bf00      	nop
   80ccc:	40008000 	.word	0x40008000

00080cd0 <dd_spi_master_read>:
   80cd0:	b580      	push	{r7, lr}
   80cd2:	b086      	sub	sp, #24
   80cd4:	af00      	add	r7, sp, #0
   80cd6:	6078      	str	r0, [r7, #4]
   80cd8:	6039      	str	r1, [r7, #0]
   80cda:	f643 2398 	movw	r3, #15000	; 0x3a98
   80cde:	613b      	str	r3, [r7, #16]
   80ce0:	687b      	ldr	r3, [r7, #4]
   80ce2:	60fb      	str	r3, [r7, #12]
   80ce4:	2300      	movs	r3, #0
   80ce6:	617b      	str	r3, [r7, #20]
   80ce8:	e01f      	b.n	80d2a <dd_spi_master_read+0x5a>
   80cea:	68fa      	ldr	r2, [r7, #12]
   80cec:	697b      	ldr	r3, [r7, #20]
   80cee:	4413      	add	r3, r2
   80cf0:	781b      	ldrb	r3, [r3, #0]
   80cf2:	b2db      	uxtb	r3, r3
   80cf4:	4618      	mov	r0, r3
   80cf6:	4b11      	ldr	r3, [pc, #68]	; (80d3c <dd_spi_master_read+0x6c>)
   80cf8:	4798      	blx	r3
   80cfa:	e004      	b.n	80d06 <dd_spi_master_read+0x36>
   80cfc:	693b      	ldr	r3, [r7, #16]
   80cfe:	1e5a      	subs	r2, r3, #1
   80d00:	613a      	str	r2, [r7, #16]
   80d02:	2b00      	cmp	r3, #0
   80d04:	d016      	beq.n	80d34 <dd_spi_master_read+0x64>
   80d06:	4b0e      	ldr	r3, [pc, #56]	; (80d40 <dd_spi_master_read+0x70>)
   80d08:	691b      	ldr	r3, [r3, #16]
   80d0a:	f003 0301 	and.w	r3, r3, #1
   80d0e:	2b00      	cmp	r3, #0
   80d10:	d0f4      	beq.n	80cfc <dd_spi_master_read+0x2c>
   80d12:	480c      	ldr	r0, [pc, #48]	; (80d44 <dd_spi_master_read+0x74>)
   80d14:	4b0c      	ldr	r3, [pc, #48]	; (80d48 <dd_spi_master_read+0x78>)
   80d16:	4798      	blx	r3
   80d18:	68fa      	ldr	r2, [r7, #12]
   80d1a:	697b      	ldr	r3, [r7, #20]
   80d1c:	4413      	add	r3, r2
   80d1e:	4a09      	ldr	r2, [pc, #36]	; (80d44 <dd_spi_master_read+0x74>)
   80d20:	7812      	ldrb	r2, [r2, #0]
   80d22:	701a      	strb	r2, [r3, #0]
   80d24:	697b      	ldr	r3, [r7, #20]
   80d26:	3301      	adds	r3, #1
   80d28:	617b      	str	r3, [r7, #20]
   80d2a:	697a      	ldr	r2, [r7, #20]
   80d2c:	683b      	ldr	r3, [r7, #0]
   80d2e:	429a      	cmp	r2, r3
   80d30:	d3db      	bcc.n	80cea <dd_spi_master_read+0x1a>
   80d32:	e000      	b.n	80d36 <dd_spi_master_read+0x66>
   80d34:	bf00      	nop
   80d36:	3718      	adds	r7, #24
   80d38:	46bd      	mov	sp, r7
   80d3a:	bd80      	pop	{r7, pc}
   80d3c:	00080c89 	.word	0x00080c89
   80d40:	40008000 	.word	0x40008000
   80d44:	20070950 	.word	0x20070950
   80d48:	00080c2d 	.word	0x00080c2d

00080d4c <CPU2_DD_INIT_SPI>:
   80d4c:	b580      	push	{r7, lr}
   80d4e:	b082      	sub	sp, #8
   80d50:	af00      	add	r7, sp, #0
   80d52:	4b43      	ldr	r3, [pc, #268]	; (80e60 <CPU2_DD_INIT_SPI+0x114>)
   80d54:	4a43      	ldr	r2, [pc, #268]	; (80e64 <CPU2_DD_INIT_SPI+0x118>)
   80d56:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   80d5a:	4b43      	ldr	r3, [pc, #268]	; (80e68 <CPU2_DD_INIT_SPI+0x11c>)
   80d5c:	4a43      	ldr	r2, [pc, #268]	; (80e6c <CPU2_DD_INIT_SPI+0x120>)
   80d5e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   80d62:	483f      	ldr	r0, [pc, #252]	; (80e60 <CPU2_DD_INIT_SPI+0x114>)
   80d64:	4b42      	ldr	r3, [pc, #264]	; (80e70 <CPU2_DD_INIT_SPI+0x124>)
   80d66:	4798      	blx	r3
   80d68:	4b3d      	ldr	r3, [pc, #244]	; (80e60 <CPU2_DD_INIT_SPI+0x114>)
   80d6a:	2202      	movs	r2, #2
   80d6c:	601a      	str	r2, [r3, #0]
   80d6e:	4b3c      	ldr	r3, [pc, #240]	; (80e60 <CPU2_DD_INIT_SPI+0x114>)
   80d70:	2280      	movs	r2, #128	; 0x80
   80d72:	601a      	str	r2, [r3, #0]
   80d74:	4b3a      	ldr	r3, [pc, #232]	; (80e60 <CPU2_DD_INIT_SPI+0x114>)
   80d76:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   80d7a:	601a      	str	r2, [r3, #0]
   80d7c:	4a38      	ldr	r2, [pc, #224]	; (80e60 <CPU2_DD_INIT_SPI+0x114>)
   80d7e:	4b38      	ldr	r3, [pc, #224]	; (80e60 <CPU2_DD_INIT_SPI+0x114>)
   80d80:	685b      	ldr	r3, [r3, #4]
   80d82:	f043 0301 	orr.w	r3, r3, #1
   80d86:	6053      	str	r3, [r2, #4]
   80d88:	4a35      	ldr	r2, [pc, #212]	; (80e60 <CPU2_DD_INIT_SPI+0x114>)
   80d8a:	4b35      	ldr	r3, [pc, #212]	; (80e60 <CPU2_DD_INIT_SPI+0x114>)
   80d8c:	685b      	ldr	r3, [r3, #4]
   80d8e:	f043 0310 	orr.w	r3, r3, #16
   80d92:	6053      	str	r3, [r2, #4]
   80d94:	4b37      	ldr	r3, [pc, #220]	; (80e74 <CPU2_DD_INIT_SPI+0x128>)
   80d96:	781b      	ldrb	r3, [r3, #0]
   80d98:	b29b      	uxth	r3, r3
   80d9a:	2100      	movs	r1, #0
   80d9c:	4618      	mov	r0, r3
   80d9e:	4b36      	ldr	r3, [pc, #216]	; (80e78 <CPU2_DD_INIT_SPI+0x12c>)
   80da0:	4798      	blx	r3
   80da2:	4b34      	ldr	r3, [pc, #208]	; (80e74 <CPU2_DD_INIT_SPI+0x128>)
   80da4:	781b      	ldrb	r3, [r3, #0]
   80da6:	b29b      	uxth	r3, r3
   80da8:	2101      	movs	r1, #1
   80daa:	4618      	mov	r0, r3
   80dac:	4b33      	ldr	r3, [pc, #204]	; (80e7c <CPU2_DD_INIT_SPI+0x130>)
   80dae:	4798      	blx	r3
   80db0:	4b30      	ldr	r3, [pc, #192]	; (80e74 <CPU2_DD_INIT_SPI+0x128>)
   80db2:	781b      	ldrb	r3, [r3, #0]
   80db4:	b29b      	uxth	r3, r3
   80db6:	2100      	movs	r1, #0
   80db8:	4618      	mov	r0, r3
   80dba:	4b31      	ldr	r3, [pc, #196]	; (80e80 <CPU2_DD_INIT_SPI+0x134>)
   80dbc:	4798      	blx	r3
   80dbe:	4b2d      	ldr	r3, [pc, #180]	; (80e74 <CPU2_DD_INIT_SPI+0x128>)
   80dc0:	781b      	ldrb	r3, [r3, #0]
   80dc2:	b29b      	uxth	r3, r3
   80dc4:	21ff      	movs	r1, #255	; 0xff
   80dc6:	4618      	mov	r0, r3
   80dc8:	4b2e      	ldr	r3, [pc, #184]	; (80e84 <CPU2_DD_INIT_SPI+0x138>)
   80dca:	4798      	blx	r3
   80dcc:	4b29      	ldr	r3, [pc, #164]	; (80e74 <CPU2_DD_INIT_SPI+0x128>)
   80dce:	781b      	ldrb	r3, [r3, #0]
   80dd0:	b29b      	uxth	r3, r3
   80dd2:	2230      	movs	r2, #48	; 0x30
   80dd4:	21ff      	movs	r1, #255	; 0xff
   80dd6:	4618      	mov	r0, r3
   80dd8:	4b2b      	ldr	r3, [pc, #172]	; (80e88 <CPU2_DD_INIT_SPI+0x13c>)
   80dda:	4798      	blx	r3
   80ddc:	4b2b      	ldr	r3, [pc, #172]	; (80e8c <CPU2_DD_INIT_SPI+0x140>)
   80dde:	781b      	ldrb	r3, [r3, #0]
   80de0:	b29b      	uxth	r3, r3
   80de2:	2100      	movs	r1, #0
   80de4:	4618      	mov	r0, r3
   80de6:	4b24      	ldr	r3, [pc, #144]	; (80e78 <CPU2_DD_INIT_SPI+0x12c>)
   80de8:	4798      	blx	r3
   80dea:	4b28      	ldr	r3, [pc, #160]	; (80e8c <CPU2_DD_INIT_SPI+0x140>)
   80dec:	781b      	ldrb	r3, [r3, #0]
   80dee:	b29b      	uxth	r3, r3
   80df0:	2101      	movs	r1, #1
   80df2:	4618      	mov	r0, r3
   80df4:	4b21      	ldr	r3, [pc, #132]	; (80e7c <CPU2_DD_INIT_SPI+0x130>)
   80df6:	4798      	blx	r3
   80df8:	4b24      	ldr	r3, [pc, #144]	; (80e8c <CPU2_DD_INIT_SPI+0x140>)
   80dfa:	781b      	ldrb	r3, [r3, #0]
   80dfc:	b29b      	uxth	r3, r3
   80dfe:	2100      	movs	r1, #0
   80e00:	4618      	mov	r0, r3
   80e02:	4b1f      	ldr	r3, [pc, #124]	; (80e80 <CPU2_DD_INIT_SPI+0x134>)
   80e04:	4798      	blx	r3
   80e06:	4b21      	ldr	r3, [pc, #132]	; (80e8c <CPU2_DD_INIT_SPI+0x140>)
   80e08:	781b      	ldrb	r3, [r3, #0]
   80e0a:	b29b      	uxth	r3, r3
   80e0c:	21ff      	movs	r1, #255	; 0xff
   80e0e:	4618      	mov	r0, r3
   80e10:	4b1c      	ldr	r3, [pc, #112]	; (80e84 <CPU2_DD_INIT_SPI+0x138>)
   80e12:	4798      	blx	r3
   80e14:	4b1d      	ldr	r3, [pc, #116]	; (80e8c <CPU2_DD_INIT_SPI+0x140>)
   80e16:	781b      	ldrb	r3, [r3, #0]
   80e18:	b29b      	uxth	r3, r3
   80e1a:	2230      	movs	r2, #48	; 0x30
   80e1c:	21ff      	movs	r1, #255	; 0xff
   80e1e:	4618      	mov	r0, r3
   80e20:	4b19      	ldr	r3, [pc, #100]	; (80e88 <CPU2_DD_INIT_SPI+0x13c>)
   80e22:	4798      	blx	r3
   80e24:	4b0e      	ldr	r3, [pc, #56]	; (80e60 <CPU2_DD_INIT_SPI+0x114>)
   80e26:	2201      	movs	r2, #1
   80e28:	601a      	str	r2, [r3, #0]
   80e2a:	4b19      	ldr	r3, [pc, #100]	; (80e90 <CPU2_DD_INIT_SPI+0x144>)
   80e2c:	4798      	blx	r3
   80e2e:	4b19      	ldr	r3, [pc, #100]	; (80e94 <CPU2_DD_INIT_SPI+0x148>)
   80e30:	4798      	blx	r3
   80e32:	2300      	movs	r3, #0
   80e34:	607b      	str	r3, [r7, #4]
   80e36:	e002      	b.n	80e3e <CPU2_DD_INIT_SPI+0xf2>
   80e38:	687b      	ldr	r3, [r7, #4]
   80e3a:	3301      	adds	r3, #1
   80e3c:	607b      	str	r3, [r7, #4]
   80e3e:	687b      	ldr	r3, [r7, #4]
   80e40:	4a15      	ldr	r2, [pc, #84]	; (80e98 <CPU2_DD_INIT_SPI+0x14c>)
   80e42:	4293      	cmp	r3, r2
   80e44:	d9f8      	bls.n	80e38 <CPU2_DD_INIT_SPI+0xec>
   80e46:	2102      	movs	r1, #2
   80e48:	4814      	ldr	r0, [pc, #80]	; (80e9c <CPU2_DD_INIT_SPI+0x150>)
   80e4a:	4b15      	ldr	r3, [pc, #84]	; (80ea0 <CPU2_DD_INIT_SPI+0x154>)
   80e4c:	4798      	blx	r3
   80e4e:	4b15      	ldr	r3, [pc, #84]	; (80ea4 <CPU2_DD_INIT_SPI+0x158>)
   80e50:	4798      	blx	r3
   80e52:	4b15      	ldr	r3, [pc, #84]	; (80ea8 <CPU2_DD_INIT_SPI+0x15c>)
   80e54:	4798      	blx	r3
   80e56:	bf00      	nop
   80e58:	3708      	adds	r7, #8
   80e5a:	46bd      	mov	sp, r7
   80e5c:	bd80      	pop	{r7, pc}
   80e5e:	bf00      	nop
   80e60:	40008000 	.word	0x40008000
   80e64:	53504900 	.word	0x53504900
   80e68:	400e0600 	.word	0x400e0600
   80e6c:	504d4300 	.word	0x504d4300
   80e70:	0008016d 	.word	0x0008016d
   80e74:	20070948 	.word	0x20070948
   80e78:	00080aa1 	.word	0x00080aa1
   80e7c:	00080af5 	.word	0x00080af5
   80e80:	00080a55 	.word	0x00080a55
   80e84:	00080b49 	.word	0x00080b49
   80e88:	000809f9 	.word	0x000809f9
   80e8c:	20070000 	.word	0x20070000
   80e90:	00080ead 	.word	0x00080ead
   80e94:	000808e9 	.word	0x000808e9
   80e98:	0001869f 	.word	0x0001869f
   80e9c:	20070e8c 	.word	0x20070e8c
   80ea0:	00080cd1 	.word	0x00080cd1
   80ea4:	00080f01 	.word	0x00080f01
   80ea8:	00080971 	.word	0x00080971

00080eac <dd_APT_CS>:
   80eac:	b480      	push	{r7}
   80eae:	af00      	add	r7, sp, #0
   80eb0:	4a11      	ldr	r2, [pc, #68]	; (80ef8 <dd_APT_CS+0x4c>)
   80eb2:	4b11      	ldr	r3, [pc, #68]	; (80ef8 <dd_APT_CS+0x4c>)
   80eb4:	685b      	ldr	r3, [r3, #4]
   80eb6:	f023 0302 	bic.w	r3, r3, #2
   80eba:	6053      	str	r3, [r2, #4]
   80ebc:	4a0e      	ldr	r2, [pc, #56]	; (80ef8 <dd_APT_CS+0x4c>)
   80ebe:	4b0e      	ldr	r3, [pc, #56]	; (80ef8 <dd_APT_CS+0x4c>)
   80ec0:	685b      	ldr	r3, [r3, #4]
   80ec2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
   80ec6:	6053      	str	r3, [r2, #4]
   80ec8:	4a0b      	ldr	r2, [pc, #44]	; (80ef8 <dd_APT_CS+0x4c>)
   80eca:	4b0b      	ldr	r3, [pc, #44]	; (80ef8 <dd_APT_CS+0x4c>)
   80ecc:	685b      	ldr	r3, [r3, #4]
   80ece:	f023 0304 	bic.w	r3, r3, #4
   80ed2:	6053      	str	r3, [r2, #4]
   80ed4:	4908      	ldr	r1, [pc, #32]	; (80ef8 <dd_APT_CS+0x4c>)
   80ed6:	4b08      	ldr	r3, [pc, #32]	; (80ef8 <dd_APT_CS+0x4c>)
   80ed8:	685a      	ldr	r2, [r3, #4]
   80eda:	4b08      	ldr	r3, [pc, #32]	; (80efc <dd_APT_CS+0x50>)
   80edc:	781b      	ldrb	r3, [r3, #0]
   80ede:	4618      	mov	r0, r3
   80ee0:	2301      	movs	r3, #1
   80ee2:	4083      	lsls	r3, r0
   80ee4:	43db      	mvns	r3, r3
   80ee6:	041b      	lsls	r3, r3, #16
   80ee8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   80eec:	4313      	orrs	r3, r2
   80eee:	604b      	str	r3, [r1, #4]
   80ef0:	bf00      	nop
   80ef2:	46bd      	mov	sp, r7
   80ef4:	bc80      	pop	{r7}
   80ef6:	4770      	bx	lr
   80ef8:	40008000 	.word	0x40008000
   80efc:	20070948 	.word	0x20070948

00080f00 <dd_VPT_CS>:
   80f00:	b480      	push	{r7}
   80f02:	af00      	add	r7, sp, #0
   80f04:	4a11      	ldr	r2, [pc, #68]	; (80f4c <dd_VPT_CS+0x4c>)
   80f06:	4b11      	ldr	r3, [pc, #68]	; (80f4c <dd_VPT_CS+0x4c>)
   80f08:	685b      	ldr	r3, [r3, #4]
   80f0a:	f023 0302 	bic.w	r3, r3, #2
   80f0e:	6053      	str	r3, [r2, #4]
   80f10:	4a0e      	ldr	r2, [pc, #56]	; (80f4c <dd_VPT_CS+0x4c>)
   80f12:	4b0e      	ldr	r3, [pc, #56]	; (80f4c <dd_VPT_CS+0x4c>)
   80f14:	685b      	ldr	r3, [r3, #4]
   80f16:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
   80f1a:	6053      	str	r3, [r2, #4]
   80f1c:	4a0b      	ldr	r2, [pc, #44]	; (80f4c <dd_VPT_CS+0x4c>)
   80f1e:	4b0b      	ldr	r3, [pc, #44]	; (80f4c <dd_VPT_CS+0x4c>)
   80f20:	685b      	ldr	r3, [r3, #4]
   80f22:	f023 0304 	bic.w	r3, r3, #4
   80f26:	6053      	str	r3, [r2, #4]
   80f28:	4908      	ldr	r1, [pc, #32]	; (80f4c <dd_VPT_CS+0x4c>)
   80f2a:	4b08      	ldr	r3, [pc, #32]	; (80f4c <dd_VPT_CS+0x4c>)
   80f2c:	685a      	ldr	r2, [r3, #4]
   80f2e:	4b08      	ldr	r3, [pc, #32]	; (80f50 <dd_VPT_CS+0x50>)
   80f30:	781b      	ldrb	r3, [r3, #0]
   80f32:	4618      	mov	r0, r3
   80f34:	2301      	movs	r3, #1
   80f36:	4083      	lsls	r3, r0
   80f38:	43db      	mvns	r3, r3
   80f3a:	041b      	lsls	r3, r3, #16
   80f3c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   80f40:	4313      	orrs	r3, r2
   80f42:	604b      	str	r3, [r1, #4]
   80f44:	bf00      	nop
   80f46:	46bd      	mov	sp, r7
   80f48:	bc80      	pop	{r7}
   80f4a:	4770      	bx	lr
   80f4c:	40008000 	.word	0x40008000
   80f50:	20070000 	.word	0x20070000

00080f54 <DD_READ_SENSORS>:
   80f54:	b580      	push	{r7, lr}
   80f56:	b084      	sub	sp, #16
   80f58:	af00      	add	r7, sp, #0
   80f5a:	4603      	mov	r3, r0
   80f5c:	71fb      	strb	r3, [r7, #7]
   80f5e:	2300      	movs	r3, #0
   80f60:	81fb      	strh	r3, [r7, #14]
   80f62:	4b29      	ldr	r3, [pc, #164]	; (81008 <DD_READ_SENSORS+0xb4>)
   80f64:	2201      	movs	r2, #1
   80f66:	701a      	strb	r2, [r3, #0]
   80f68:	4b27      	ldr	r3, [pc, #156]	; (81008 <DD_READ_SENSORS+0xb4>)
   80f6a:	2207      	movs	r2, #7
   80f6c:	705a      	strb	r2, [r3, #1]
   80f6e:	79fb      	ldrb	r3, [r7, #7]
   80f70:	2b01      	cmp	r3, #1
   80f72:	d003      	beq.n	80f7c <DD_READ_SENSORS+0x28>
   80f74:	2b02      	cmp	r3, #2
   80f76:	d022      	beq.n	80fbe <DD_READ_SENSORS+0x6a>
   80f78:	bf00      	nop
   80f7a:	e040      	b.n	80ffe <DD_READ_SENSORS+0xaa>
   80f7c:	bf00      	nop
   80f7e:	4b23      	ldr	r3, [pc, #140]	; (8100c <DD_READ_SENSORS+0xb8>)
   80f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   80f82:	099b      	lsrs	r3, r3, #6
   80f84:	f003 0301 	and.w	r3, r3, #1
   80f88:	2b00      	cmp	r3, #0
   80f8a:	d1f8      	bne.n	80f7e <DD_READ_SENSORS+0x2a>
   80f8c:	4b20      	ldr	r3, [pc, #128]	; (81010 <DD_READ_SENSORS+0xbc>)
   80f8e:	4798      	blx	r3
   80f90:	4b20      	ldr	r3, [pc, #128]	; (81014 <DD_READ_SENSORS+0xc0>)
   80f92:	2200      	movs	r2, #0
   80f94:	701a      	strb	r2, [r3, #0]
   80f96:	4b1f      	ldr	r3, [pc, #124]	; (81014 <DD_READ_SENSORS+0xc0>)
   80f98:	2200      	movs	r2, #0
   80f9a:	705a      	strb	r2, [r3, #1]
   80f9c:	2102      	movs	r1, #2
   80f9e:	481d      	ldr	r0, [pc, #116]	; (81014 <DD_READ_SENSORS+0xc0>)
   80fa0:	4b1d      	ldr	r3, [pc, #116]	; (81018 <DD_READ_SENSORS+0xc4>)
   80fa2:	4798      	blx	r3
   80fa4:	4b1b      	ldr	r3, [pc, #108]	; (81014 <DD_READ_SENSORS+0xc0>)
   80fa6:	781a      	ldrb	r2, [r3, #0]
   80fa8:	4b1c      	ldr	r3, [pc, #112]	; (8101c <DD_READ_SENSORS+0xc8>)
   80faa:	705a      	strb	r2, [r3, #1]
   80fac:	4b19      	ldr	r3, [pc, #100]	; (81014 <DD_READ_SENSORS+0xc0>)
   80fae:	785a      	ldrb	r2, [r3, #1]
   80fb0:	4b1a      	ldr	r3, [pc, #104]	; (8101c <DD_READ_SENSORS+0xc8>)
   80fb2:	701a      	strb	r2, [r3, #0]
   80fb4:	4b19      	ldr	r3, [pc, #100]	; (8101c <DD_READ_SENSORS+0xc8>)
   80fb6:	881b      	ldrh	r3, [r3, #0]
   80fb8:	81fb      	strh	r3, [r7, #14]
   80fba:	89fb      	ldrh	r3, [r7, #14]
   80fbc:	e01f      	b.n	80ffe <DD_READ_SENSORS+0xaa>
   80fbe:	bf00      	nop
   80fc0:	4b12      	ldr	r3, [pc, #72]	; (8100c <DD_READ_SENSORS+0xb8>)
   80fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   80fc4:	095b      	lsrs	r3, r3, #5
   80fc6:	f003 0301 	and.w	r3, r3, #1
   80fca:	2b00      	cmp	r3, #0
   80fcc:	d1f8      	bne.n	80fc0 <DD_READ_SENSORS+0x6c>
   80fce:	4b14      	ldr	r3, [pc, #80]	; (81020 <DD_READ_SENSORS+0xcc>)
   80fd0:	4798      	blx	r3
   80fd2:	4b10      	ldr	r3, [pc, #64]	; (81014 <DD_READ_SENSORS+0xc0>)
   80fd4:	2200      	movs	r2, #0
   80fd6:	701a      	strb	r2, [r3, #0]
   80fd8:	4b0e      	ldr	r3, [pc, #56]	; (81014 <DD_READ_SENSORS+0xc0>)
   80fda:	2200      	movs	r2, #0
   80fdc:	705a      	strb	r2, [r3, #1]
   80fde:	2102      	movs	r1, #2
   80fe0:	480c      	ldr	r0, [pc, #48]	; (81014 <DD_READ_SENSORS+0xc0>)
   80fe2:	4b0d      	ldr	r3, [pc, #52]	; (81018 <DD_READ_SENSORS+0xc4>)
   80fe4:	4798      	blx	r3
   80fe6:	4b0b      	ldr	r3, [pc, #44]	; (81014 <DD_READ_SENSORS+0xc0>)
   80fe8:	781a      	ldrb	r2, [r3, #0]
   80fea:	4b0c      	ldr	r3, [pc, #48]	; (8101c <DD_READ_SENSORS+0xc8>)
   80fec:	705a      	strb	r2, [r3, #1]
   80fee:	4b09      	ldr	r3, [pc, #36]	; (81014 <DD_READ_SENSORS+0xc0>)
   80ff0:	785a      	ldrb	r2, [r3, #1]
   80ff2:	4b0a      	ldr	r3, [pc, #40]	; (8101c <DD_READ_SENSORS+0xc8>)
   80ff4:	701a      	strb	r2, [r3, #0]
   80ff6:	4b09      	ldr	r3, [pc, #36]	; (8101c <DD_READ_SENSORS+0xc8>)
   80ff8:	881b      	ldrh	r3, [r3, #0]
   80ffa:	81fb      	strh	r3, [r7, #14]
   80ffc:	89fb      	ldrh	r3, [r7, #14]
   80ffe:	4618      	mov	r0, r3
   81000:	3710      	adds	r7, #16
   81002:	46bd      	mov	sp, r7
   81004:	bd80      	pop	{r7, pc}
   81006:	bf00      	nop
   81008:	20070a40 	.word	0x20070a40
   8100c:	400e1200 	.word	0x400e1200
   81010:	00080ead 	.word	0x00080ead
   81014:	20070e8c 	.word	0x20070e8c
   81018:	00080cd1 	.word	0x00080cd1
   8101c:	20070e84 	.word	0x20070e84
   81020:	00080f01 	.word	0x00080f01

00081024 <CPU2_D_INIT_PIO>:
 *  Author: wid7
 */ 
#include "GPIO.h"

void CPU2_D_INIT_PIO()
{
   81024:	b580      	push	{r7, lr}
   81026:	af00      	add	r7, sp, #0
	/*pmc_enable_periph_clk(ID_PIOA);
	pmc_enable_periph_clk(ID_PIOB);
	pmc_enable_periph_clk(ID_PIOC);
	pmc_enable_periph_clk(ID_PIOD);*/
	
	PIOA->PIO_WPMR = 0x50494F00;
   81028:	4b3b      	ldr	r3, [pc, #236]	; (81118 <CPU2_D_INIT_PIO+0xf4>)
   8102a:	4a3c      	ldr	r2, [pc, #240]	; (8111c <CPU2_D_INIT_PIO+0xf8>)
   8102c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOB->PIO_WPMR = 0x50494F00;
   81030:	4b3b      	ldr	r3, [pc, #236]	; (81120 <CPU2_D_INIT_PIO+0xfc>)
   81032:	4a3a      	ldr	r2, [pc, #232]	; (8111c <CPU2_D_INIT_PIO+0xf8>)
   81034:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR = 0x50494F00;
   81038:	4b3a      	ldr	r3, [pc, #232]	; (81124 <CPU2_D_INIT_PIO+0x100>)
   8103a:	4a38      	ldr	r2, [pc, #224]	; (8111c <CPU2_D_INIT_PIO+0xf8>)
   8103c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_WPMR = 0x50494F00;
   81040:	4b39      	ldr	r3, [pc, #228]	; (81128 <CPU2_D_INIT_PIO+0x104>)
   81042:	4a36      	ldr	r2, [pc, #216]	; (8111c <CPU2_D_INIT_PIO+0xf8>)
   81044:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	PIOA->PIO_PUER = 0x00060000;			
   81048:	4b33      	ldr	r3, [pc, #204]	; (81118 <CPU2_D_INIT_PIO+0xf4>)
   8104a:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   8104e:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PDR =	 0x3E060000;				// initialization for TWI //
   81050:	4b31      	ldr	r3, [pc, #196]	; (81118 <CPU2_D_INIT_PIO+0xf4>)
   81052:	4a36      	ldr	r2, [pc, #216]	; (8112c <CPU2_D_INIT_PIO+0x108>)
   81054:	605a      	str	r2, [r3, #4]
	//PIOA->PIO_ABSR = 0x00090000;
	
	PIOA->PIO_PUER = 0x00000300;			// for scanf statement//
   81056:	4b30      	ldr	r3, [pc, #192]	; (81118 <CPU2_D_INIT_PIO+0xf4>)
   81058:	f44f 7240 	mov.w	r2, #768	; 0x300
   8105c:	665a      	str	r2, [r3, #100]	; 0x64
	
	PIOA->PIO_PER  = 0x00007C00;
   8105e:	4b2e      	ldr	r3, [pc, #184]	; (81118 <CPU2_D_INIT_PIO+0xf4>)
   81060:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
   81064:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER  = 0x00002800;
   81066:	4b2c      	ldr	r3, [pc, #176]	; (81118 <CPU2_D_INIT_PIO+0xf4>)
   81068:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   8106c:	611a      	str	r2, [r3, #16]
	PIOA->PIO_ODR  = 0x00005400;
   8106e:	4b2a      	ldr	r3, [pc, #168]	; (81118 <CPU2_D_INIT_PIO+0xf4>)
   81070:	f44f 42a8 	mov.w	r2, #21504	; 0x5400
   81074:	615a      	str	r2, [r3, #20]
	PIOA->PIO_SODR = 0x00000800;
   81076:	4b28      	ldr	r3, [pc, #160]	; (81118 <CPU2_D_INIT_PIO+0xf4>)
   81078:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8107c:	631a      	str	r2, [r3, #48]	; 0x30
	PIOA->PIO_CODR = 0x00002000;
   8107e:	4b26      	ldr	r3, [pc, #152]	; (81118 <CPU2_D_INIT_PIO+0xf4>)
   81080:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   81084:	635a      	str	r2, [r3, #52]	; 0x34
	PIOA->PIO_PUER = 0x00002800;
   81086:	4b24      	ldr	r3, [pc, #144]	; (81118 <CPU2_D_INIT_PIO+0xf4>)
   81088:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   8108c:	665a      	str	r2, [r3, #100]	; 0x64
	
	
	PIOB->PIO_PER  = 0x06008000;
   8108e:	4b24      	ldr	r3, [pc, #144]	; (81120 <CPU2_D_INIT_PIO+0xfc>)
   81090:	4a27      	ldr	r2, [pc, #156]	; (81130 <CPU2_D_INIT_PIO+0x10c>)
   81092:	601a      	str	r2, [r3, #0]
	PIOB->PIO_OER  = 0x06000000;
   81094:	4b22      	ldr	r3, [pc, #136]	; (81120 <CPU2_D_INIT_PIO+0xfc>)
   81096:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
   8109a:	611a      	str	r2, [r3, #16]
	PIOB->PIO_ODR  = 0x00008000;
   8109c:	4b20      	ldr	r3, [pc, #128]	; (81120 <CPU2_D_INIT_PIO+0xfc>)
   8109e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   810a2:	615a      	str	r2, [r3, #20]
	PIOB->PIO_SODR = 0x06000000;
   810a4:	4b1e      	ldr	r3, [pc, #120]	; (81120 <CPU2_D_INIT_PIO+0xfc>)
   810a6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
   810aa:	631a      	str	r2, [r3, #48]	; 0x30
	
	PIOC->PIO_PER  = 0x018FF06A;
   810ac:	4b1d      	ldr	r3, [pc, #116]	; (81124 <CPU2_D_INIT_PIO+0x100>)
   810ae:	4a21      	ldr	r2, [pc, #132]	; (81134 <CPU2_D_INIT_PIO+0x110>)
   810b0:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER  = 0x408FF002;
   810b2:	4b1c      	ldr	r3, [pc, #112]	; (81124 <CPU2_D_INIT_PIO+0x100>)
   810b4:	4a20      	ldr	r2, [pc, #128]	; (81138 <CPU2_D_INIT_PIO+0x114>)
   810b6:	611a      	str	r2, [r3, #16]
	PIOC->PIO_ODR  = 0x01000068;
   810b8:	4b1a      	ldr	r3, [pc, #104]	; (81124 <CPU2_D_INIT_PIO+0x100>)
   810ba:	4a20      	ldr	r2, [pc, #128]	; (8113c <CPU2_D_INIT_PIO+0x118>)
   810bc:	615a      	str	r2, [r3, #20]
	PIOC->PIO_SODR = 0x000BF002;
   810be:	4b19      	ldr	r3, [pc, #100]	; (81124 <CPU2_D_INIT_PIO+0x100>)
   810c0:	4a1f      	ldr	r2, [pc, #124]	; (81140 <CPU2_D_INIT_PIO+0x11c>)
   810c2:	631a      	str	r2, [r3, #48]	; 0x30
	PIOC->PIO_PUER = 0x408FF002;
   810c4:	4b17      	ldr	r3, [pc, #92]	; (81124 <CPU2_D_INIT_PIO+0x100>)
   810c6:	4a1c      	ldr	r2, [pc, #112]	; (81138 <CPU2_D_INIT_PIO+0x114>)
   810c8:	665a      	str	r2, [r3, #100]	; 0x64
	PIOC->PIO_CODR = 0x00840000;
   810ca:	4b16      	ldr	r3, [pc, #88]	; (81124 <CPU2_D_INIT_PIO+0x100>)
   810cc:	f44f 0204 	mov.w	r2, #8650752	; 0x840000
   810d0:	635a      	str	r2, [r3, #52]	; 0x34

	PIOD->PIO_PER  = 0x000006EF;
   810d2:	4b15      	ldr	r3, [pc, #84]	; (81128 <CPU2_D_INIT_PIO+0x104>)
   810d4:	f240 62ef 	movw	r2, #1775	; 0x6ef
   810d8:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER  = 0x0000064F;
   810da:	4b13      	ldr	r3, [pc, #76]	; (81128 <CPU2_D_INIT_PIO+0x104>)
   810dc:	f240 624f 	movw	r2, #1615	; 0x64f
   810e0:	611a      	str	r2, [r3, #16]
	PIOD->PIO_ODR  = 0x00000020;
   810e2:	4b11      	ldr	r3, [pc, #68]	; (81128 <CPU2_D_INIT_PIO+0x104>)
   810e4:	2220      	movs	r2, #32
   810e6:	615a      	str	r2, [r3, #20]
	PIOD->PIO_SODR = 0x0000064F;
   810e8:	4b0f      	ldr	r3, [pc, #60]	; (81128 <CPU2_D_INIT_PIO+0x104>)
   810ea:	f240 624f 	movw	r2, #1615	; 0x64f
   810ee:	631a      	str	r2, [r3, #48]	; 0x30
	PIOD->PIO_PUER = 0x0000064F;
   810f0:	4b0d      	ldr	r3, [pc, #52]	; (81128 <CPU2_D_INIT_PIO+0x104>)
   810f2:	f240 624f 	movw	r2, #1615	; 0x64f
   810f6:	665a      	str	r2, [r3, #100]	; 0x64
	
	gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   810f8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   810fc:	2001      	movs	r0, #1
   810fe:	4b11      	ldr	r3, [pc, #68]	; (81144 <CPU2_D_INIT_PIO+0x120>)
   81100:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   81102:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81106:	2000      	movs	r0, #0
   81108:	4b0e      	ldr	r3, [pc, #56]	; (81144 <CPU2_D_INIT_PIO+0x120>)
   8110a:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_STANDBY_IDX, PIN_CAN0_STANDBY_FLAGS);
   8110c:	490e      	ldr	r1, [pc, #56]	; (81148 <CPU2_D_INIT_PIO+0x124>)
   8110e:	2002      	movs	r0, #2
   81110:	4b0c      	ldr	r3, [pc, #48]	; (81144 <CPU2_D_INIT_PIO+0x120>)
   81112:	4798      	blx	r3
	
//	sn65hvda540_set_en(&can0_transceiver ,PIN_CAN0_STANDBY_IDX);
//	sn65hvda540_normal_mode(&can0_transceiver);
}
   81114:	bf00      	nop
   81116:	bd80      	pop	{r7, pc}
   81118:	400e0e00 	.word	0x400e0e00
   8111c:	50494f00 	.word	0x50494f00
   81120:	400e1000 	.word	0x400e1000
   81124:	400e1200 	.word	0x400e1200
   81128:	400e1400 	.word	0x400e1400
   8112c:	3e060000 	.word	0x3e060000
   81130:	06008000 	.word	0x06008000
   81134:	018ff06a 	.word	0x018ff06a
   81138:	408ff002 	.word	0x408ff002
   8113c:	01000068 	.word	0x01000068
   81140:	000bf002 	.word	0x000bf002
   81144:	00083959 	.word	0x00083959
   81148:	30000001 	.word	0x30000001

0008114c <CPU2_D_SET_PIO>:



uint8_t CPU2_D_SET_PIO(pio_type peripheral,uint32_t pio)
{
   8114c:	b480      	push	{r7}
   8114e:	b083      	sub	sp, #12
   81150:	af00      	add	r7, sp, #0
   81152:	6078      	str	r0, [r7, #4]
   81154:	6039      	str	r1, [r7, #0]
	switch (peripheral)
   81156:	687b      	ldr	r3, [r7, #4]
   81158:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8115c:	d014      	beq.n	81188 <CPU2_D_SET_PIO+0x3c>
   8115e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81162:	d803      	bhi.n	8116c <CPU2_D_SET_PIO+0x20>
   81164:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81168:	d007      	beq.n	8117a <CPU2_D_SET_PIO+0x2e>
   8116a:	e022      	b.n	811b2 <CPU2_D_SET_PIO+0x66>
   8116c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   81170:	d011      	beq.n	81196 <CPU2_D_SET_PIO+0x4a>
   81172:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   81176:	d015      	beq.n	811a4 <CPU2_D_SET_PIO+0x58>
   81178:	e01b      	b.n	811b2 <CPU2_D_SET_PIO+0x66>
	{
		case PA:
		PIOA->PIO_SODR = 1<<pio;
   8117a:	4a11      	ldr	r2, [pc, #68]	; (811c0 <CPU2_D_SET_PIO+0x74>)
   8117c:	2101      	movs	r1, #1
   8117e:	683b      	ldr	r3, [r7, #0]
   81180:	fa01 f303 	lsl.w	r3, r1, r3
   81184:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   81186:	e014      	b.n	811b2 <CPU2_D_SET_PIO+0x66>
		case PB:
		PIOB->PIO_SODR = 1<<pio;
   81188:	4a0e      	ldr	r2, [pc, #56]	; (811c4 <CPU2_D_SET_PIO+0x78>)
   8118a:	2101      	movs	r1, #1
   8118c:	683b      	ldr	r3, [r7, #0]
   8118e:	fa01 f303 	lsl.w	r3, r1, r3
   81192:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   81194:	e00d      	b.n	811b2 <CPU2_D_SET_PIO+0x66>
		case PC:
		PIOC->PIO_SODR = 1<<pio;
   81196:	4a0c      	ldr	r2, [pc, #48]	; (811c8 <CPU2_D_SET_PIO+0x7c>)
   81198:	2101      	movs	r1, #1
   8119a:	683b      	ldr	r3, [r7, #0]
   8119c:	fa01 f303 	lsl.w	r3, r1, r3
   811a0:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   811a2:	e006      	b.n	811b2 <CPU2_D_SET_PIO+0x66>
		case PD:
		PIOD->PIO_SODR = 1<<pio;
   811a4:	4a09      	ldr	r2, [pc, #36]	; (811cc <CPU2_D_SET_PIO+0x80>)
   811a6:	2101      	movs	r1, #1
   811a8:	683b      	ldr	r3, [r7, #0]
   811aa:	fa01 f303 	lsl.w	r3, r1, r3
   811ae:	6313      	str	r3, [r2, #48]	; 0x30
		break;	
   811b0:	bf00      	nop
	}
	return 0;
   811b2:	2300      	movs	r3, #0
}
   811b4:	4618      	mov	r0, r3
   811b6:	370c      	adds	r7, #12
   811b8:	46bd      	mov	sp, r7
   811ba:	bc80      	pop	{r7}
   811bc:	4770      	bx	lr
   811be:	bf00      	nop
   811c0:	400e0e00 	.word	0x400e0e00
   811c4:	400e1000 	.word	0x400e1000
   811c8:	400e1200 	.word	0x400e1200
   811cc:	400e1400 	.word	0x400e1400

000811d0 <CPU2_D_RESET_PIO>:

uint8_t CPU2_D_RESET_PIO(const pio_type peripheral,uint32_t pio)
  {
   811d0:	b480      	push	{r7}
   811d2:	b083      	sub	sp, #12
   811d4:	af00      	add	r7, sp, #0
   811d6:	6078      	str	r0, [r7, #4]
   811d8:	6039      	str	r1, [r7, #0]
	  switch (peripheral)
   811da:	687b      	ldr	r3, [r7, #4]
   811dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   811e0:	d014      	beq.n	8120c <CPU2_D_RESET_PIO+0x3c>
   811e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   811e6:	d803      	bhi.n	811f0 <CPU2_D_RESET_PIO+0x20>
   811e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   811ec:	d007      	beq.n	811fe <CPU2_D_RESET_PIO+0x2e>
   811ee:	e022      	b.n	81236 <CPU2_D_RESET_PIO+0x66>
   811f0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   811f4:	d011      	beq.n	8121a <CPU2_D_RESET_PIO+0x4a>
   811f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   811fa:	d015      	beq.n	81228 <CPU2_D_RESET_PIO+0x58>
   811fc:	e01b      	b.n	81236 <CPU2_D_RESET_PIO+0x66>
	  {
		  case PA:
		  PIOA->PIO_CODR = 1<<pio;
   811fe:	4a11      	ldr	r2, [pc, #68]	; (81244 <CPU2_D_RESET_PIO+0x74>)
   81200:	2101      	movs	r1, #1
   81202:	683b      	ldr	r3, [r7, #0]
   81204:	fa01 f303 	lsl.w	r3, r1, r3
   81208:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   8120a:	e014      	b.n	81236 <CPU2_D_RESET_PIO+0x66>
		  case PB:
		  PIOB->PIO_CODR = 1<<pio;
   8120c:	4a0e      	ldr	r2, [pc, #56]	; (81248 <CPU2_D_RESET_PIO+0x78>)
   8120e:	2101      	movs	r1, #1
   81210:	683b      	ldr	r3, [r7, #0]
   81212:	fa01 f303 	lsl.w	r3, r1, r3
   81216:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   81218:	e00d      	b.n	81236 <CPU2_D_RESET_PIO+0x66>
		  case PC:
		  PIOC->PIO_CODR = 1<<pio;
   8121a:	4a0c      	ldr	r2, [pc, #48]	; (8124c <CPU2_D_RESET_PIO+0x7c>)
   8121c:	2101      	movs	r1, #1
   8121e:	683b      	ldr	r3, [r7, #0]
   81220:	fa01 f303 	lsl.w	r3, r1, r3
   81224:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   81226:	e006      	b.n	81236 <CPU2_D_RESET_PIO+0x66>
		  case PD:
		  PIOD->PIO_CODR = 1<<pio;
   81228:	4a09      	ldr	r2, [pc, #36]	; (81250 <CPU2_D_RESET_PIO+0x80>)
   8122a:	2101      	movs	r1, #1
   8122c:	683b      	ldr	r3, [r7, #0]
   8122e:	fa01 f303 	lsl.w	r3, r1, r3
   81232:	6353      	str	r3, [r2, #52]	; 0x34
		  break;  
   81234:	bf00      	nop
	  }
	  return 0;
   81236:	2300      	movs	r3, #0
  }
   81238:	4618      	mov	r0, r3
   8123a:	370c      	adds	r7, #12
   8123c:	46bd      	mov	sp, r7
   8123e:	bc80      	pop	{r7}
   81240:	4770      	bx	lr
   81242:	bf00      	nop
   81244:	400e0e00 	.word	0x400e0e00
   81248:	400e1000 	.word	0x400e1000
   8124c:	400e1200 	.word	0x400e1200
   81250:	400e1400 	.word	0x400e1400

00081254 <CPU2_D_READ_PIO>:
  
  uint16_t CPU2_D_READ_PIO( pio_type peripheral,uint32_t pio)
  {
   81254:	b480      	push	{r7}
   81256:	b085      	sub	sp, #20
   81258:	af00      	add	r7, sp, #0
   8125a:	6078      	str	r0, [r7, #4]
   8125c:	6039      	str	r1, [r7, #0]
	  uint16_t ret_val=0;
   8125e:	2300      	movs	r3, #0
   81260:	81fb      	strh	r3, [r7, #14]
	  switch (peripheral)
   81262:	687b      	ldr	r3, [r7, #4]
   81264:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81268:	d01a      	beq.n	812a0 <CPU2_D_READ_PIO+0x4c>
   8126a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8126e:	d803      	bhi.n	81278 <CPU2_D_READ_PIO+0x24>
   81270:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81274:	d007      	beq.n	81286 <CPU2_D_READ_PIO+0x32>
   81276:	e03c      	b.n	812f2 <CPU2_D_READ_PIO+0x9e>
   81278:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   8127c:	d01d      	beq.n	812ba <CPU2_D_READ_PIO+0x66>
   8127e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   81282:	d029      	beq.n	812d8 <CPU2_D_READ_PIO+0x84>
   81284:	e035      	b.n	812f2 <CPU2_D_READ_PIO+0x9e>
	  {
		  case PA:
		  
		  if( (PIOA->PIO_PDSR & (1<<pio)) == 0)
   81286:	4b1d      	ldr	r3, [pc, #116]	; (812fc <CPU2_D_READ_PIO+0xa8>)
   81288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8128a:	2101      	movs	r1, #1
   8128c:	683a      	ldr	r2, [r7, #0]
   8128e:	fa01 f202 	lsl.w	r2, r1, r2
   81292:	4013      	ands	r3, r2
   81294:	2b00      	cmp	r3, #0
   81296:	d101      	bne.n	8129c <CPU2_D_READ_PIO+0x48>
		  {
			  return 0;
   81298:	2300      	movs	r3, #0
   8129a:	e02a      	b.n	812f2 <CPU2_D_READ_PIO+0x9e>
		  }
		  else
		  {
			  return 1;
   8129c:	2301      	movs	r3, #1
   8129e:	e028      	b.n	812f2 <CPU2_D_READ_PIO+0x9e>
		  } 
		  break;
		  case PB:
		  if( (PIOB->PIO_PDSR & (1<<pio)) == 0)
   812a0:	4b17      	ldr	r3, [pc, #92]	; (81300 <CPU2_D_READ_PIO+0xac>)
   812a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   812a4:	2101      	movs	r1, #1
   812a6:	683a      	ldr	r2, [r7, #0]
   812a8:	fa01 f202 	lsl.w	r2, r1, r2
   812ac:	4013      	ands	r3, r2
   812ae:	2b00      	cmp	r3, #0
   812b0:	d101      	bne.n	812b6 <CPU2_D_READ_PIO+0x62>
		  {
			  return 0;
   812b2:	2300      	movs	r3, #0
   812b4:	e01d      	b.n	812f2 <CPU2_D_READ_PIO+0x9e>
		  }
		  else
		  {
			  return 1;
   812b6:	2301      	movs	r3, #1
   812b8:	e01b      	b.n	812f2 <CPU2_D_READ_PIO+0x9e>
		  }
		  break;
		  case PC:
		  if( (PIOC->PIO_PDSR & (1<<pio)) == 0)
   812ba:	4b12      	ldr	r3, [pc, #72]	; (81304 <CPU2_D_READ_PIO+0xb0>)
   812bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   812be:	2101      	movs	r1, #1
   812c0:	683a      	ldr	r2, [r7, #0]
   812c2:	fa01 f202 	lsl.w	r2, r1, r2
   812c6:	4013      	ands	r3, r2
   812c8:	2b00      	cmp	r3, #0
   812ca:	d101      	bne.n	812d0 <CPU2_D_READ_PIO+0x7c>
		  {
			  return 0;
   812cc:	2300      	movs	r3, #0
   812ce:	e010      	b.n	812f2 <CPU2_D_READ_PIO+0x9e>
		  }
		  else
		  {
			 ret_val = 1;
   812d0:	2301      	movs	r3, #1
   812d2:	81fb      	strh	r3, [r7, #14]
			 return(ret_val);
   812d4:	89fb      	ldrh	r3, [r7, #14]
   812d6:	e00c      	b.n	812f2 <CPU2_D_READ_PIO+0x9e>
			 
		  }
		  break;
		  case PD:
		  if( (PIOD->PIO_PDSR & (1<<pio)) == 0)
   812d8:	4b0b      	ldr	r3, [pc, #44]	; (81308 <CPU2_D_READ_PIO+0xb4>)
   812da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   812dc:	2101      	movs	r1, #1
   812de:	683a      	ldr	r2, [r7, #0]
   812e0:	fa01 f202 	lsl.w	r2, r1, r2
   812e4:	4013      	ands	r3, r2
   812e6:	2b00      	cmp	r3, #0
   812e8:	d101      	bne.n	812ee <CPU2_D_READ_PIO+0x9a>
		  {
			  return 0;
   812ea:	2300      	movs	r3, #0
   812ec:	e001      	b.n	812f2 <CPU2_D_READ_PIO+0x9e>
		  }
		  else
		  {
			  return 1;
   812ee:	2301      	movs	r3, #1
   812f0:	e7ff      	b.n	812f2 <CPU2_D_READ_PIO+0x9e>
		  }
		  break; 
	  }
   812f2:	4618      	mov	r0, r3
   812f4:	3714      	adds	r7, #20
   812f6:	46bd      	mov	sp, r7
   812f8:	bc80      	pop	{r7}
   812fa:	4770      	bx	lr
   812fc:	400e0e00 	.word	0x400e0e00
   81300:	400e1000 	.word	0x400e1000
   81304:	400e1200 	.word	0x400e1200
   81308:	400e1400 	.word	0x400e1400

0008130c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   8130c:	b480      	push	{r7}
   8130e:	b083      	sub	sp, #12
   81310:	af00      	add	r7, sp, #0
   81312:	4603      	mov	r3, r0
   81314:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   81316:	4908      	ldr	r1, [pc, #32]	; (81338 <NVIC_EnableIRQ+0x2c>)
   81318:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8131c:	095b      	lsrs	r3, r3, #5
   8131e:	79fa      	ldrb	r2, [r7, #7]
   81320:	f002 021f 	and.w	r2, r2, #31
   81324:	2001      	movs	r0, #1
   81326:	fa00 f202 	lsl.w	r2, r0, r2
   8132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   8132e:	bf00      	nop
   81330:	370c      	adds	r7, #12
   81332:	46bd      	mov	sp, r7
   81334:	bc80      	pop	{r7}
   81336:	4770      	bx	lr
   81338:	e000e100 	.word	0xe000e100

0008133c <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   8133c:	b480      	push	{r7}
   8133e:	b083      	sub	sp, #12
   81340:	af00      	add	r7, sp, #0
   81342:	4603      	mov	r3, r0
   81344:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   81346:	4909      	ldr	r1, [pc, #36]	; (8136c <NVIC_DisableIRQ+0x30>)
   81348:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8134c:	095b      	lsrs	r3, r3, #5
   8134e:	79fa      	ldrb	r2, [r7, #7]
   81350:	f002 021f 	and.w	r2, r2, #31
   81354:	2001      	movs	r0, #1
   81356:	fa00 f202 	lsl.w	r2, r0, r2
   8135a:	3320      	adds	r3, #32
   8135c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   81360:	bf00      	nop
   81362:	370c      	adds	r7, #12
   81364:	46bd      	mov	sp, r7
   81366:	bc80      	pop	{r7}
   81368:	4770      	bx	lr
   8136a:	bf00      	nop
   8136c:	e000e100 	.word	0xe000e100

00081370 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   81370:	b480      	push	{r7}
   81372:	b083      	sub	sp, #12
   81374:	af00      	add	r7, sp, #0
   81376:	4603      	mov	r3, r0
   81378:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8137a:	4909      	ldr	r1, [pc, #36]	; (813a0 <NVIC_ClearPendingIRQ+0x30>)
   8137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81380:	095b      	lsrs	r3, r3, #5
   81382:	79fa      	ldrb	r2, [r7, #7]
   81384:	f002 021f 	and.w	r2, r2, #31
   81388:	2001      	movs	r0, #1
   8138a:	fa00 f202 	lsl.w	r2, r0, r2
   8138e:	3360      	adds	r3, #96	; 0x60
   81390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   81394:	bf00      	nop
   81396:	370c      	adds	r7, #12
   81398:	46bd      	mov	sp, r7
   8139a:	bc80      	pop	{r7}
   8139c:	4770      	bx	lr
   8139e:	bf00      	nop
   813a0:	e000e100 	.word	0xe000e100

000813a4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   813a4:	b480      	push	{r7}
   813a6:	b083      	sub	sp, #12
   813a8:	af00      	add	r7, sp, #0
   813aa:	4603      	mov	r3, r0
   813ac:	6039      	str	r1, [r7, #0]
   813ae:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   813b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   813b4:	2b00      	cmp	r3, #0
   813b6:	da0b      	bge.n	813d0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   813b8:	490d      	ldr	r1, [pc, #52]	; (813f0 <NVIC_SetPriority+0x4c>)
   813ba:	79fb      	ldrb	r3, [r7, #7]
   813bc:	f003 030f 	and.w	r3, r3, #15
   813c0:	3b04      	subs	r3, #4
   813c2:	683a      	ldr	r2, [r7, #0]
   813c4:	b2d2      	uxtb	r2, r2
   813c6:	0112      	lsls	r2, r2, #4
   813c8:	b2d2      	uxtb	r2, r2
   813ca:	440b      	add	r3, r1
   813cc:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   813ce:	e009      	b.n	813e4 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   813d0:	4908      	ldr	r1, [pc, #32]	; (813f4 <NVIC_SetPriority+0x50>)
   813d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
   813d6:	683a      	ldr	r2, [r7, #0]
   813d8:	b2d2      	uxtb	r2, r2
   813da:	0112      	lsls	r2, r2, #4
   813dc:	b2d2      	uxtb	r2, r2
   813de:	440b      	add	r3, r1
   813e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   813e4:	bf00      	nop
   813e6:	370c      	adds	r7, #12
   813e8:	46bd      	mov	sp, r7
   813ea:	bc80      	pop	{r7}
   813ec:	4770      	bx	lr
   813ee:	bf00      	nop
   813f0:	e000ed00 	.word	0xe000ed00
   813f4:	e000e100 	.word	0xe000e100

000813f8 <CPU2_D_INIT_INT>:
#include "INT.h"

#define BOARD_TWI_IRQn          TWI0_IRQn

void CPU2_D_INIT_INT()
{
   813f8:	b580      	push	{r7, lr}
   813fa:	af00      	add	r7, sp, #0
	
	NVIC_DisableIRQ(BOARD_TWI_IRQn);
   813fc:	2016      	movs	r0, #22
   813fe:	4b29      	ldr	r3, [pc, #164]	; (814a4 <CPU2_D_INIT_INT+0xac>)
   81400:	4798      	blx	r3
	NVIC_ClearPendingIRQ(BOARD_TWI_IRQn);
   81402:	2016      	movs	r0, #22
   81404:	4b28      	ldr	r3, [pc, #160]	; (814a8 <CPU2_D_INIT_INT+0xb0>)
   81406:	4798      	blx	r3
	NVIC_SetPriority(BOARD_TWI_IRQn, 0);
   81408:	2100      	movs	r1, #0
   8140a:	2016      	movs	r0, #22
   8140c:	4b27      	ldr	r3, [pc, #156]	; (814ac <CPU2_D_INIT_INT+0xb4>)
   8140e:	4798      	blx	r3
	NVIC_EnableIRQ(BOARD_TWI_IRQn);
   81410:	2016      	movs	r0, #22
   81412:	4b27      	ldr	r3, [pc, #156]	; (814b0 <CPU2_D_INIT_INT+0xb8>)
   81414:	4798      	blx	r3
	
	NVIC_DisableIRQ(UART_IRQn);
   81416:	2008      	movs	r0, #8
   81418:	4b22      	ldr	r3, [pc, #136]	; (814a4 <CPU2_D_INIT_INT+0xac>)
   8141a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(UART_IRQn);
   8141c:	2008      	movs	r0, #8
   8141e:	4b22      	ldr	r3, [pc, #136]	; (814a8 <CPU2_D_INIT_INT+0xb0>)
   81420:	4798      	blx	r3
	NVIC_SetPriority(UART_IRQn,0);
   81422:	2100      	movs	r1, #0
   81424:	2008      	movs	r0, #8
   81426:	4b21      	ldr	r3, [pc, #132]	; (814ac <CPU2_D_INIT_INT+0xb4>)
   81428:	4798      	blx	r3
	NVIC_EnableIRQ(UART_IRQn);
   8142a:	2008      	movs	r0, #8
   8142c:	4b20      	ldr	r3, [pc, #128]	; (814b0 <CPU2_D_INIT_INT+0xb8>)
   8142e:	4798      	blx	r3
	uart_enable_interrupt(UART,UART_SR_RXRDY);
   81430:	2101      	movs	r1, #1
   81432:	4820      	ldr	r0, [pc, #128]	; (814b4 <CPU2_D_INIT_INT+0xbc>)
   81434:	4b20      	ldr	r3, [pc, #128]	; (814b8 <CPU2_D_INIT_INT+0xc0>)
   81436:	4798      	blx	r3
		
	NVIC_DisableIRQ(TC0_IRQn);
   81438:	201b      	movs	r0, #27
   8143a:	4b1a      	ldr	r3, [pc, #104]	; (814a4 <CPU2_D_INIT_INT+0xac>)
   8143c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC0_IRQn);
   8143e:	201b      	movs	r0, #27
   81440:	4b19      	ldr	r3, [pc, #100]	; (814a8 <CPU2_D_INIT_INT+0xb0>)
   81442:	4798      	blx	r3
	NVIC_SetPriority(TC0_IRQn,0);
   81444:	2100      	movs	r1, #0
   81446:	201b      	movs	r0, #27
   81448:	4b18      	ldr	r3, [pc, #96]	; (814ac <CPU2_D_INIT_INT+0xb4>)
   8144a:	4798      	blx	r3
	NVIC_EnableIRQ(TC0_IRQn);
   8144c:	201b      	movs	r0, #27
   8144e:	4b18      	ldr	r3, [pc, #96]	; (814b0 <CPU2_D_INIT_INT+0xb8>)
   81450:	4798      	blx	r3

	NVIC_DisableIRQ(TC1_IRQn);
   81452:	201c      	movs	r0, #28
   81454:	4b13      	ldr	r3, [pc, #76]	; (814a4 <CPU2_D_INIT_INT+0xac>)
   81456:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC1_IRQn);
   81458:	201c      	movs	r0, #28
   8145a:	4b13      	ldr	r3, [pc, #76]	; (814a8 <CPU2_D_INIT_INT+0xb0>)
   8145c:	4798      	blx	r3
	NVIC_SetPriority(TC1_IRQn,0);
   8145e:	2100      	movs	r1, #0
   81460:	201c      	movs	r0, #28
   81462:	4b12      	ldr	r3, [pc, #72]	; (814ac <CPU2_D_INIT_INT+0xb4>)
   81464:	4798      	blx	r3
	NVIC_EnableIRQ(TC1_IRQn);
   81466:	201c      	movs	r0, #28
   81468:	4b11      	ldr	r3, [pc, #68]	; (814b0 <CPU2_D_INIT_INT+0xb8>)
   8146a:	4798      	blx	r3
// 	NVIC_DisableIRQ(TC2_IRQn);
// 	NVIC_ClearPendingIRQ(TC2_IRQn);
// 	NVIC_SetPriority(TC2_IRQn,0);
// 	NVIC_EnableIRQ(TC2_IRQn);
	
	NVIC_DisableIRQ(TC3_IRQn);
   8146c:	201e      	movs	r0, #30
   8146e:	4b0d      	ldr	r3, [pc, #52]	; (814a4 <CPU2_D_INIT_INT+0xac>)
   81470:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC3_IRQn);
   81472:	201e      	movs	r0, #30
   81474:	4b0c      	ldr	r3, [pc, #48]	; (814a8 <CPU2_D_INIT_INT+0xb0>)
   81476:	4798      	blx	r3
	NVIC_SetPriority(TC3_IRQn,0);
   81478:	2100      	movs	r1, #0
   8147a:	201e      	movs	r0, #30
   8147c:	4b0b      	ldr	r3, [pc, #44]	; (814ac <CPU2_D_INIT_INT+0xb4>)
   8147e:	4798      	blx	r3
	NVIC_EnableIRQ(TC3_IRQn);
   81480:	201e      	movs	r0, #30
   81482:	4b0b      	ldr	r3, [pc, #44]	; (814b0 <CPU2_D_INIT_INT+0xb8>)
   81484:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC6_IRQn);
   81486:	2021      	movs	r0, #33	; 0x21
   81488:	4b06      	ldr	r3, [pc, #24]	; (814a4 <CPU2_D_INIT_INT+0xac>)
   8148a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC6_IRQn);
   8148c:	2021      	movs	r0, #33	; 0x21
   8148e:	4b06      	ldr	r3, [pc, #24]	; (814a8 <CPU2_D_INIT_INT+0xb0>)
   81490:	4798      	blx	r3
	NVIC_SetPriority(TC6_IRQn,0);
   81492:	2100      	movs	r1, #0
   81494:	2021      	movs	r0, #33	; 0x21
   81496:	4b05      	ldr	r3, [pc, #20]	; (814ac <CPU2_D_INIT_INT+0xb4>)
   81498:	4798      	blx	r3
	NVIC_EnableIRQ(TC6_IRQn);
   8149a:	2021      	movs	r0, #33	; 0x21
   8149c:	4b04      	ldr	r3, [pc, #16]	; (814b0 <CPU2_D_INIT_INT+0xb8>)
   8149e:	4798      	blx	r3
	
   814a0:	bf00      	nop
   814a2:	bd80      	pop	{r7, pc}
   814a4:	0008133d 	.word	0x0008133d
   814a8:	00081371 	.word	0x00081371
   814ac:	000813a5 	.word	0x000813a5
   814b0:	0008130d 	.word	0x0008130d
   814b4:	400e0800 	.word	0x400e0800
   814b8:	000821cd 	.word	0x000821cd

000814bc <CPU2_D_INIT_PWM>:
 *  Author: wid7
 */ 
#include "PWM.h"

void CPU2_D_INIT_PWM()
{
   814bc:	b480      	push	{r7}
   814be:	af00      	add	r7, sp, #0
	PWM->PWM_WPCR = 0x50574D00;
   814c0:	4b0d      	ldr	r3, [pc, #52]	; (814f8 <CPU2_D_INIT_PWM+0x3c>)
   814c2:	4a0e      	ldr	r2, [pc, #56]	; (814fc <CPU2_D_INIT_PWM+0x40>)
   814c4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	PWM->PWM_CH_NUM[4].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   814c8:	4b0b      	ldr	r3, [pc, #44]	; (814f8 <CPU2_D_INIT_PWM+0x3c>)
   814ca:	4a0d      	ldr	r2, [pc, #52]	; (81500 <CPU2_D_INIT_PWM+0x44>)
   814cc:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

	PWM->PWM_DIS = 0x000000FF;
   814d0:	4b09      	ldr	r3, [pc, #36]	; (814f8 <CPU2_D_INIT_PWM+0x3c>)
   814d2:	22ff      	movs	r2, #255	; 0xff
   814d4:	609a      	str	r2, [r3, #8]
	
	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x00000A41;
   814d6:	4b08      	ldr	r3, [pc, #32]	; (814f8 <CPU2_D_INIT_PWM+0x3c>)
   814d8:	f640 2241 	movw	r2, #2625	; 0xa41
   814dc:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x00000397;
   814e0:	4b05      	ldr	r3, [pc, #20]	; (814f8 <CPU2_D_INIT_PWM+0x3c>)
   814e2:	f240 3297 	movw	r2, #919	; 0x397
   814e6:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
	
	PWM->PWM_ENA = 0x00000010;
   814ea:	4b03      	ldr	r3, [pc, #12]	; (814f8 <CPU2_D_INIT_PWM+0x3c>)
   814ec:	2210      	movs	r2, #16
   814ee:	605a      	str	r2, [r3, #4]
}
   814f0:	bf00      	nop
   814f2:	46bd      	mov	sp, r7
   814f4:	bc80      	pop	{r7}
   814f6:	4770      	bx	lr
   814f8:	40094000 	.word	0x40094000
   814fc:	50574d00 	.word	0x50574d00
   81500:	00070605 	.word	0x00070605

00081504 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   81504:	b480      	push	{r7}
   81506:	b083      	sub	sp, #12
   81508:	af00      	add	r7, sp, #0
   8150a:	4603      	mov	r3, r0
   8150c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8150e:	4909      	ldr	r1, [pc, #36]	; (81534 <NVIC_ClearPendingIRQ+0x30>)
   81510:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81514:	095b      	lsrs	r3, r3, #5
   81516:	79fa      	ldrb	r2, [r7, #7]
   81518:	f002 021f 	and.w	r2, r2, #31
   8151c:	2001      	movs	r0, #1
   8151e:	fa00 f202 	lsl.w	r2, r0, r2
   81522:	3360      	adds	r3, #96	; 0x60
   81524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   81528:	bf00      	nop
   8152a:	370c      	adds	r7, #12
   8152c:	46bd      	mov	sp, r7
   8152e:	bc80      	pop	{r7}
   81530:	4770      	bx	lr
   81532:	bf00      	nop
   81534:	e000e100 	.word	0xe000e100

00081538 <TC0_Handler>:
uint32_t newfbcnt =0;
uint32_t mscnt5 = 0;
static uint32_t statusnew=0;
	static uint32_t prev_statusnew=0;
void TC0_Handler()
{
   81538:	b580      	push	{r7, lr}
   8153a:	af00      	add	r7, sp, #0
	spi_count++;
   8153c:	4b16      	ldr	r3, [pc, #88]	; (81598 <TC0_Handler+0x60>)
   8153e:	781b      	ldrb	r3, [r3, #0]
   81540:	b2db      	uxtb	r3, r3
   81542:	3301      	adds	r3, #1
   81544:	b2da      	uxtb	r2, r3
   81546:	4b14      	ldr	r3, [pc, #80]	; (81598 <TC0_Handler+0x60>)
   81548:	701a      	strb	r2, [r3, #0]
	//printf("test string handler");
	printf("count = \t%d\n",newfbcnt);
   8154a:	4b14      	ldr	r3, [pc, #80]	; (8159c <TC0_Handler+0x64>)
   8154c:	681b      	ldr	r3, [r3, #0]
   8154e:	4619      	mov	r1, r3
   81550:	4813      	ldr	r0, [pc, #76]	; (815a0 <TC0_Handler+0x68>)
   81552:	4b14      	ldr	r3, [pc, #80]	; (815a4 <TC0_Handler+0x6c>)
   81554:	4798      	blx	r3
	//fedbck_cnt1=fedbck_cnt;
	fedbck_cnt1 = newfbcnt;
   81556:	4b11      	ldr	r3, [pc, #68]	; (8159c <TC0_Handler+0x64>)
   81558:	681b      	ldr	r3, [r3, #0]
   8155a:	b29a      	uxth	r2, r3
   8155c:	4b12      	ldr	r3, [pc, #72]	; (815a8 <TC0_Handler+0x70>)
   8155e:	801a      	strh	r2, [r3, #0]
	//printf("5mscount = %d\n",mscnt5);
	
	
	if (modify==1)                                   // Timer interrupt every 10 sec
   81560:	4b12      	ldr	r3, [pc, #72]	; (815ac <TC0_Handler+0x74>)
   81562:	781b      	ldrb	r3, [r3, #0]
   81564:	b2db      	uxtb	r3, r3
   81566:	2b01      	cmp	r3, #1
   81568:	d110      	bne.n	8158c <TC0_Handler+0x54>
	{
		mscnt5 = 0;
   8156a:	4b11      	ldr	r3, [pc, #68]	; (815b0 <TC0_Handler+0x78>)
   8156c:	2200      	movs	r2, #0
   8156e:	601a      	str	r2, [r3, #0]
		newfbcnt = 0;
   81570:	4b0a      	ldr	r3, [pc, #40]	; (8159c <TC0_Handler+0x64>)
   81572:	2200      	movs	r2, #0
   81574:	601a      	str	r2, [r3, #0]
		count_2++;
   81576:	4b0f      	ldr	r3, [pc, #60]	; (815b4 <TC0_Handler+0x7c>)
   81578:	681b      	ldr	r3, [r3, #0]
   8157a:	3301      	adds	r3, #1
   8157c:	4a0d      	ldr	r2, [pc, #52]	; (815b4 <TC0_Handler+0x7c>)
   8157e:	6013      	str	r3, [r2, #0]
		flag_1=1;
   81580:	4b0d      	ldr	r3, [pc, #52]	; (815b8 <TC0_Handler+0x80>)
   81582:	2201      	movs	r2, #1
   81584:	701a      	strb	r2, [r3, #0]
		fedbck_cnt=0;
   81586:	4b0d      	ldr	r3, [pc, #52]	; (815bc <TC0_Handler+0x84>)
   81588:	2200      	movs	r2, #0
   8158a:	601a      	str	r2, [r3, #0]
	{
		count = 0;
		PIOD->PIO_ODSR = array[count].A;
		PIOC->PIO_ODSR = array[count].B;
	}*/
	if ((tc_get_status(TC0, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   8158c:	2100      	movs	r1, #0
   8158e:	480c      	ldr	r0, [pc, #48]	; (815c0 <TC0_Handler+0x88>)
   81590:	4b0c      	ldr	r3, [pc, #48]	; (815c4 <TC0_Handler+0x8c>)
   81592:	4798      	blx	r3
	{
		
	}
}
   81594:	bf00      	nop
   81596:	bd80      	pop	{r7, pc}
   81598:	20070966 	.word	0x20070966
   8159c:	2007096c 	.word	0x2007096c
   815a0:	0008767c 	.word	0x0008767c
   815a4:	00084731 	.word	0x00084731
   815a8:	20070964 	.word	0x20070964
   815ac:	20070983 	.word	0x20070983
   815b0:	20070970 	.word	0x20070970
   815b4:	20070960 	.word	0x20070960
   815b8:	20070958 	.word	0x20070958
   815bc:	2007095c 	.word	0x2007095c
   815c0:	40080000 	.word	0x40080000
   815c4:	00082149 	.word	0x00082149

000815c8 <TC1_Handler>:

void TC1_Handler()
{
   815c8:	b598      	push	{r3, r4, r7, lr}
   815ca:	af00      	add	r7, sp, #0
	cnt++;
   815cc:	4b29      	ldr	r3, [pc, #164]	; (81674 <TC1_Handler+0xac>)
   815ce:	681b      	ldr	r3, [r3, #0]
   815d0:	3301      	adds	r3, #1
   815d2:	4a28      	ldr	r2, [pc, #160]	; (81674 <TC1_Handler+0xac>)
   815d4:	6013      	str	r3, [r2, #0]
	if (mode == 1)
   815d6:	4b28      	ldr	r3, [pc, #160]	; (81678 <TC1_Handler+0xb0>)
   815d8:	681b      	ldr	r3, [r3, #0]
   815da:	2b01      	cmp	r3, #1
   815dc:	d122      	bne.n	81624 <TC1_Handler+0x5c>
	{
		if ( rc == default_speed)
   815de:	4b27      	ldr	r3, [pc, #156]	; (8167c <TC1_Handler+0xb4>)
   815e0:	681a      	ldr	r2, [r3, #0]
   815e2:	4b27      	ldr	r3, [pc, #156]	; (81680 <TC1_Handler+0xb8>)
   815e4:	681b      	ldr	r3, [r3, #0]
   815e6:	429a      	cmp	r2, r3
   815e8:	d104      	bne.n	815f4 <TC1_Handler+0x2c>
		{
		//printf("timer stop\n");
			tc_stop(TC0,1);                                   // Timer interrupt based on RC value
   815ea:	2101      	movs	r1, #1
   815ec:	4825      	ldr	r0, [pc, #148]	; (81684 <TC1_Handler+0xbc>)
   815ee:	4b26      	ldr	r3, [pc, #152]	; (81688 <TC1_Handler+0xc0>)
   815f0:	4798      	blx	r3
   815f2:	e039      	b.n	81668 <TC1_Handler+0xa0>
		}
		else
		{
			if (cnt == 2)
   815f4:	4b1f      	ldr	r3, [pc, #124]	; (81674 <TC1_Handler+0xac>)
   815f6:	681b      	ldr	r3, [r3, #0]
   815f8:	2b02      	cmp	r3, #2
   815fa:	d135      	bne.n	81668 <TC1_Handler+0xa0>
			{
				//printf("temer2\n");
				rc = rc-1;
   815fc:	4b1f      	ldr	r3, [pc, #124]	; (8167c <TC1_Handler+0xb4>)
   815fe:	681b      	ldr	r3, [r3, #0]
   81600:	3b01      	subs	r3, #1
   81602:	4a1e      	ldr	r2, [pc, #120]	; (8167c <TC1_Handler+0xb4>)
   81604:	6013      	str	r3, [r2, #0]
				tc_stop(TC0,0);
   81606:	2100      	movs	r1, #0
   81608:	481e      	ldr	r0, [pc, #120]	; (81684 <TC1_Handler+0xbc>)
   8160a:	4b1f      	ldr	r3, [pc, #124]	; (81688 <TC1_Handler+0xc0>)
   8160c:	4798      	blx	r3
				//tc_write_rc(TC0,0,rc);
				startTimer1(TC0,0,TC0_IRQn,rc);
   8160e:	4b1b      	ldr	r3, [pc, #108]	; (8167c <TC1_Handler+0xb4>)
   81610:	681b      	ldr	r3, [r3, #0]
   81612:	221b      	movs	r2, #27
   81614:	2100      	movs	r1, #0
   81616:	481b      	ldr	r0, [pc, #108]	; (81684 <TC1_Handler+0xbc>)
   81618:	4c1c      	ldr	r4, [pc, #112]	; (8168c <TC1_Handler+0xc4>)
   8161a:	47a0      	blx	r4
				cnt = 0;
   8161c:	4b15      	ldr	r3, [pc, #84]	; (81674 <TC1_Handler+0xac>)
   8161e:	2200      	movs	r2, #0
   81620:	601a      	str	r2, [r3, #0]
   81622:	e021      	b.n	81668 <TC1_Handler+0xa0>
			}
		}
	}
	else if (mode == 0)
   81624:	4b14      	ldr	r3, [pc, #80]	; (81678 <TC1_Handler+0xb0>)
   81626:	681b      	ldr	r3, [r3, #0]
   81628:	2b00      	cmp	r3, #0
   8162a:	d11d      	bne.n	81668 <TC1_Handler+0xa0>
	{
		if ( rc == default_speed)
   8162c:	4b13      	ldr	r3, [pc, #76]	; (8167c <TC1_Handler+0xb4>)
   8162e:	681a      	ldr	r2, [r3, #0]
   81630:	4b13      	ldr	r3, [pc, #76]	; (81680 <TC1_Handler+0xb8>)
   81632:	681b      	ldr	r3, [r3, #0]
   81634:	429a      	cmp	r2, r3
   81636:	d104      	bne.n	81642 <TC1_Handler+0x7a>
		{
			tc_stop(TC0,1);
   81638:	2101      	movs	r1, #1
   8163a:	4812      	ldr	r0, [pc, #72]	; (81684 <TC1_Handler+0xbc>)
   8163c:	4b12      	ldr	r3, [pc, #72]	; (81688 <TC1_Handler+0xc0>)
   8163e:	4798      	blx	r3
   81640:	e012      	b.n	81668 <TC1_Handler+0xa0>
		}
		else
		{
			if (cnt == 2)
   81642:	4b0c      	ldr	r3, [pc, #48]	; (81674 <TC1_Handler+0xac>)
   81644:	681b      	ldr	r3, [r3, #0]
   81646:	2b02      	cmp	r3, #2
   81648:	d10e      	bne.n	81668 <TC1_Handler+0xa0>
			{
				
				rc = rc+1;
   8164a:	4b0c      	ldr	r3, [pc, #48]	; (8167c <TC1_Handler+0xb4>)
   8164c:	681b      	ldr	r3, [r3, #0]
   8164e:	3301      	adds	r3, #1
   81650:	4a0a      	ldr	r2, [pc, #40]	; (8167c <TC1_Handler+0xb4>)
   81652:	6013      	str	r3, [r2, #0]
				tc_write_rc(TC0,0,rc);
   81654:	4b09      	ldr	r3, [pc, #36]	; (8167c <TC1_Handler+0xb4>)
   81656:	681b      	ldr	r3, [r3, #0]
   81658:	461a      	mov	r2, r3
   8165a:	2100      	movs	r1, #0
   8165c:	4809      	ldr	r0, [pc, #36]	; (81684 <TC1_Handler+0xbc>)
   8165e:	4b0c      	ldr	r3, [pc, #48]	; (81690 <TC1_Handler+0xc8>)
   81660:	4798      	blx	r3
				cnt = 0;
   81662:	4b04      	ldr	r3, [pc, #16]	; (81674 <TC1_Handler+0xac>)
   81664:	2200      	movs	r2, #0
   81666:	601a      	str	r2, [r3, #0]
			}
		}
	}
	if ((tc_get_status(TC0, 1) & TC_SR_CPCS) == TC_SR_CPCS)
   81668:	2101      	movs	r1, #1
   8166a:	4806      	ldr	r0, [pc, #24]	; (81684 <TC1_Handler+0xbc>)
   8166c:	4b09      	ldr	r3, [pc, #36]	; (81694 <TC1_Handler+0xcc>)
   8166e:	4798      	blx	r3
	{
		
	}
}
   81670:	bf00      	nop
   81672:	bd98      	pop	{r3, r4, r7, pc}
   81674:	20070e94 	.word	0x20070e94
   81678:	20070ec4 	.word	0x20070ec4
   8167c:	20070ea8 	.word	0x20070ea8
   81680:	20070004 	.word	0x20070004
   81684:	40080000 	.word	0x40080000
   81688:	000820dd 	.word	0x000820dd
   8168c:	00081bf9 	.word	0x00081bf9
   81690:	000820fd 	.word	0x000820fd
   81694:	00082149 	.word	0x00082149

00081698 <TC2_Handler>:

void TC2_Handler()
{
   81698:	b480      	push	{r7}
   8169a:	af00      	add	r7, sp, #0
	
	
	if(time_tick++ > 65000)
   8169c:	4b07      	ldr	r3, [pc, #28]	; (816bc <TC2_Handler+0x24>)
   8169e:	681b      	ldr	r3, [r3, #0]
   816a0:	1c5a      	adds	r2, r3, #1
   816a2:	4906      	ldr	r1, [pc, #24]	; (816bc <TC2_Handler+0x24>)
   816a4:	600a      	str	r2, [r1, #0]
   816a6:	f64f 52e8 	movw	r2, #65000	; 0xfde8
   816aa:	4293      	cmp	r3, r2
   816ac:	d902      	bls.n	816b4 <TC2_Handler+0x1c>
	{
		time_tick = 0;
   816ae:	4b03      	ldr	r3, [pc, #12]	; (816bc <TC2_Handler+0x24>)
   816b0:	2200      	movs	r2, #0
   816b2:	601a      	str	r2, [r3, #0]
// 	}
// 	if ((tc_get_status(TC0, 2) & TC_SR_CPCS) == TC_SR_CPCS)
// 	{
// 		
// 	}
}
   816b4:	bf00      	nop
   816b6:	46bd      	mov	sp, r7
   816b8:	bc80      	pop	{r7}
   816ba:	4770      	bx	lr
   816bc:	20070954 	.word	0x20070954

000816c0 <TC6_Handler>:
void TC6_Handler()
{
   816c0:	b580      	push	{r7, lr}
   816c2:	b086      	sub	sp, #24
   816c4:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TC6_IRQn);
   816c6:	2021      	movs	r0, #33	; 0x21
   816c8:	4b3b      	ldr	r3, [pc, #236]	; (817b8 <TC6_Handler+0xf8>)
   816ca:	4798      	blx	r3
	uint32_t tick =0,tick_10 = 0,tick_50=0,tick_100=0,tick_500=0;                       // Timer interrupt every 1 msec
   816cc:	2300      	movs	r3, #0
   816ce:	617b      	str	r3, [r7, #20]
   816d0:	2300      	movs	r3, #0
   816d2:	613b      	str	r3, [r7, #16]
   816d4:	2300      	movs	r3, #0
   816d6:	60fb      	str	r3, [r7, #12]
   816d8:	2300      	movs	r3, #0
   816da:	60bb      	str	r3, [r7, #8]
   816dc:	2300      	movs	r3, #0
   816de:	607b      	str	r3, [r7, #4]
	tick_5++;
   816e0:	4b36      	ldr	r3, [pc, #216]	; (817bc <TC6_Handler+0xfc>)
   816e2:	681b      	ldr	r3, [r3, #0]
   816e4:	3301      	adds	r3, #1
   816e6:	4a35      	ldr	r2, [pc, #212]	; (817bc <TC6_Handler+0xfc>)
   816e8:	6013      	str	r3, [r2, #0]
	
	// CPU2_D_RESET_PIO(PIO_TYPE_PIO_C,16);
	if(tick_5 == 1){
   816ea:	4b34      	ldr	r3, [pc, #208]	; (817bc <TC6_Handler+0xfc>)
   816ec:	681b      	ldr	r3, [r3, #0]
   816ee:	2b01      	cmp	r3, #1
   816f0:	d125      	bne.n	8173e <TC6_Handler+0x7e>
		
		
	//	 CPU2_D_SET_PIO(PIO_TYPE_PIO_C,16);
		
		// manav05 i9ncrement a variable
		mscnt5++ ;
   816f2:	4b33      	ldr	r3, [pc, #204]	; (817c0 <TC6_Handler+0x100>)
   816f4:	681b      	ldr	r3, [r3, #0]
   816f6:	3301      	adds	r3, #1
   816f8:	4a31      	ldr	r2, [pc, #196]	; (817c0 <TC6_Handler+0x100>)
   816fa:	6013      	str	r3, [r2, #0]
		
		statusnew=(((PIOC->PIO_PDSR)>>9)&1);
   816fc:	4b31      	ldr	r3, [pc, #196]	; (817c4 <TC6_Handler+0x104>)
   816fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81700:	0a5b      	lsrs	r3, r3, #9
   81702:	f003 0301 	and.w	r3, r3, #1
   81706:	4a30      	ldr	r2, [pc, #192]	; (817c8 <TC6_Handler+0x108>)
   81708:	6013      	str	r3, [r2, #0]
			if (statusnew==1 && prev_statusnew ==0)
   8170a:	4b2f      	ldr	r3, [pc, #188]	; (817c8 <TC6_Handler+0x108>)
   8170c:	681b      	ldr	r3, [r3, #0]
   8170e:	2b01      	cmp	r3, #1
   81710:	d108      	bne.n	81724 <TC6_Handler+0x64>
   81712:	4b2e      	ldr	r3, [pc, #184]	; (817cc <TC6_Handler+0x10c>)
   81714:	681b      	ldr	r3, [r3, #0]
   81716:	2b00      	cmp	r3, #0
   81718:	d104      	bne.n	81724 <TC6_Handler+0x64>
			{
				newfbcnt++;
   8171a:	4b2d      	ldr	r3, [pc, #180]	; (817d0 <TC6_Handler+0x110>)
   8171c:	681b      	ldr	r3, [r3, #0]
   8171e:	3301      	adds	r3, #1
   81720:	4a2b      	ldr	r2, [pc, #172]	; (817d0 <TC6_Handler+0x110>)
   81722:	6013      	str	r3, [r2, #0]
			}
			prev_statusnew= statusnew;
   81724:	4b28      	ldr	r3, [pc, #160]	; (817c8 <TC6_Handler+0x108>)
   81726:	681b      	ldr	r3, [r3, #0]
   81728:	4a28      	ldr	r2, [pc, #160]	; (817cc <TC6_Handler+0x10c>)
   8172a:	6013      	str	r3, [r2, #0]
		
		tick++;
   8172c:	697b      	ldr	r3, [r7, #20]
   8172e:	3301      	adds	r3, #1
   81730:	617b      	str	r3, [r7, #20]
		tick_5 = 0;
   81732:	4b22      	ldr	r3, [pc, #136]	; (817bc <TC6_Handler+0xfc>)
   81734:	2200      	movs	r2, #0
   81736:	601a      	str	r2, [r3, #0]
		time_tick = TICK_5MS;
   81738:	4b26      	ldr	r3, [pc, #152]	; (817d4 <TC6_Handler+0x114>)
   8173a:	2205      	movs	r2, #5
   8173c:	601a      	str	r2, [r3, #0]
		
	}
	
	if (tick == 2)
   8173e:	697b      	ldr	r3, [r7, #20]
   81740:	2b02      	cmp	r3, #2
   81742:	d107      	bne.n	81754 <TC6_Handler+0x94>
	{
		tick_10++;
   81744:	693b      	ldr	r3, [r7, #16]
   81746:	3301      	adds	r3, #1
   81748:	613b      	str	r3, [r7, #16]
		tick = 0;
   8174a:	2300      	movs	r3, #0
   8174c:	617b      	str	r3, [r7, #20]
		time_tick = TICK_10MS;                                            
   8174e:	4b21      	ldr	r3, [pc, #132]	; (817d4 <TC6_Handler+0x114>)
   81750:	2200      	movs	r2, #0
   81752:	601a      	str	r2, [r3, #0]
	}
	if (tick_10 == 5)
   81754:	693b      	ldr	r3, [r7, #16]
   81756:	2b05      	cmp	r3, #5
   81758:	d107      	bne.n	8176a <TC6_Handler+0xaa>
	{
		tick_50++;
   8175a:	68fb      	ldr	r3, [r7, #12]
   8175c:	3301      	adds	r3, #1
   8175e:	60fb      	str	r3, [r7, #12]
		tick_10 = 0;
   81760:	2300      	movs	r3, #0
   81762:	613b      	str	r3, [r7, #16]
		time_tick = TICK_50MS;
   81764:	4b1b      	ldr	r3, [pc, #108]	; (817d4 <TC6_Handler+0x114>)
   81766:	2201      	movs	r2, #1
   81768:	601a      	str	r2, [r3, #0]
	}
	if (tick_50 == 2)
   8176a:	68fb      	ldr	r3, [r7, #12]
   8176c:	2b02      	cmp	r3, #2
   8176e:	d107      	bne.n	81780 <TC6_Handler+0xc0>
	{
		tick_100++;
   81770:	68bb      	ldr	r3, [r7, #8]
   81772:	3301      	adds	r3, #1
   81774:	60bb      	str	r3, [r7, #8]
		tick_50 = 0;
   81776:	2300      	movs	r3, #0
   81778:	60fb      	str	r3, [r7, #12]
		time_tick = TICK_100MS;
   8177a:	4b16      	ldr	r3, [pc, #88]	; (817d4 <TC6_Handler+0x114>)
   8177c:	2202      	movs	r2, #2
   8177e:	601a      	str	r2, [r3, #0]
	}
	if (tick_100 == 5)
   81780:	68bb      	ldr	r3, [r7, #8]
   81782:	2b05      	cmp	r3, #5
   81784:	d107      	bne.n	81796 <TC6_Handler+0xd6>
	{
		tick_500++;
   81786:	687b      	ldr	r3, [r7, #4]
   81788:	3301      	adds	r3, #1
   8178a:	607b      	str	r3, [r7, #4]
		tick_100 = 0;
   8178c:	2300      	movs	r3, #0
   8178e:	60bb      	str	r3, [r7, #8]
		time_tick = TICK_500MS;
   81790:	4b10      	ldr	r3, [pc, #64]	; (817d4 <TC6_Handler+0x114>)
   81792:	2203      	movs	r2, #3
   81794:	601a      	str	r2, [r3, #0]
	}
	if (tick_500 == 2)
   81796:	687b      	ldr	r3, [r7, #4]
   81798:	2b02      	cmp	r3, #2
   8179a:	d104      	bne.n	817a6 <TC6_Handler+0xe6>
	{
		tick_500 = 0;
   8179c:	2300      	movs	r3, #0
   8179e:	607b      	str	r3, [r7, #4]
		time_tick = TICK_SEC;
   817a0:	4b0c      	ldr	r3, [pc, #48]	; (817d4 <TC6_Handler+0x114>)
   817a2:	2204      	movs	r2, #4
   817a4:	601a      	str	r2, [r3, #0]
	}
	
	if ((tc_get_status(TC2, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   817a6:	2100      	movs	r1, #0
   817a8:	480b      	ldr	r0, [pc, #44]	; (817d8 <TC6_Handler+0x118>)
   817aa:	4b0c      	ldr	r3, [pc, #48]	; (817dc <TC6_Handler+0x11c>)
   817ac:	4798      	blx	r3
	{
		//printf("i m in handler tc6\n");
	}
}
   817ae:	bf00      	nop
   817b0:	3718      	adds	r7, #24
   817b2:	46bd      	mov	sp, r7
   817b4:	bd80      	pop	{r7, pc}
   817b6:	bf00      	nop
   817b8:	00081505 	.word	0x00081505
   817bc:	20070968 	.word	0x20070968
   817c0:	20070970 	.word	0x20070970
   817c4:	400e1200 	.word	0x400e1200
   817c8:	20070974 	.word	0x20070974
   817cc:	20070978 	.word	0x20070978
   817d0:	2007096c 	.word	0x2007096c
   817d4:	20070954 	.word	0x20070954
   817d8:	40088000 	.word	0x40088000
   817dc:	00082149 	.word	0x00082149

000817e0 <CPU2_D_SET_PUMP>:

#include "D_SYS.h"
#include "Platform/Service/CPU2_S_interface.h"
extern uint32_t DUTY;
uint8_t CPU2_D_SET_PUMP(sv_pumptype id_pump)
{
   817e0:	b580      	push	{r7, lr}
   817e2:	b082      	sub	sp, #8
   817e4:	af00      	add	r7, sp, #0
   817e6:	4603      	mov	r3, r0
   817e8:	71fb      	strb	r3, [r7, #7]
	switch (id_pump)
   817ea:	79fb      	ldrb	r3, [r7, #7]
   817ec:	2b01      	cmp	r3, #1
   817ee:	d000      	beq.n	817f2 <CPU2_D_SET_PUMP+0x12>
			PWM->PWM_CH_NUM[4].PWM_CDTY = DUTY;			//35% duty cycle
			PWM->PWM_ENA =0x00000010;
			gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
		break;
		default:
		break;
   817f0:	e012      	b.n	81818 <CPU2_D_SET_PUMP+0x38>
{
	switch (id_pump)
	{
		
		case BLOODPUMP: //BLOOD PUMP
			PWM->PWM_CH_NUM[4].PWM_CPRD = 0x00000A41;
   817f2:	4b0c      	ldr	r3, [pc, #48]	; (81824 <CPU2_D_SET_PUMP+0x44>)
   817f4:	f640 2241 	movw	r2, #2625	; 0xa41
   817f8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
			PWM->PWM_CH_NUM[4].PWM_CDTY = DUTY;			//35% duty cycle
   817fc:	4a09      	ldr	r2, [pc, #36]	; (81824 <CPU2_D_SET_PUMP+0x44>)
   817fe:	4b0a      	ldr	r3, [pc, #40]	; (81828 <CPU2_D_SET_PUMP+0x48>)
   81800:	681b      	ldr	r3, [r3, #0]
   81802:	f8c2 3284 	str.w	r3, [r2, #644]	; 0x284
			PWM->PWM_ENA =0x00000010;
   81806:	4b07      	ldr	r3, [pc, #28]	; (81824 <CPU2_D_SET_PUMP+0x44>)
   81808:	2210      	movs	r2, #16
   8180a:	605a      	str	r2, [r3, #4]
			gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
   8180c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81810:	2055      	movs	r0, #85	; 0x55
   81812:	4b06      	ldr	r3, [pc, #24]	; (8182c <CPU2_D_SET_PUMP+0x4c>)
   81814:	4798      	blx	r3
		break;
   81816:	bf00      	nop
		default:
		break;
	}
	
	return 0;
   81818:	2300      	movs	r3, #0
}
   8181a:	4618      	mov	r0, r3
   8181c:	3708      	adds	r7, #8
   8181e:	46bd      	mov	sp, r7
   81820:	bd80      	pop	{r7, pc}
   81822:	bf00      	nop
   81824:	40094000 	.word	0x40094000
   81828:	20070008 	.word	0x20070008
   8182c:	00083959 	.word	0x00083959

00081830 <CPU2_D_RESET_PUMP>:

uint8_t CPU2_D_RESET_PUMP(sv_pumptype id_pump)
{
   81830:	b480      	push	{r7}
   81832:	b083      	sub	sp, #12
   81834:	af00      	add	r7, sp, #0
   81836:	4603      	mov	r3, r0
   81838:	71fb      	strb	r3, [r7, #7]
	switch (id_pump)
   8183a:	79fb      	ldrb	r3, [r7, #7]
   8183c:	2b01      	cmp	r3, #1
   8183e:	d000      	beq.n	81842 <CPU2_D_RESET_PUMP+0x12>
		case BLOODPUMP: //BLOOD PUMP
			PWM->PWM_DIS =0x00000010;
		break;
		
		default:
		break;
   81840:	e003      	b.n	8184a <CPU2_D_RESET_PUMP+0x1a>
{
	switch (id_pump)
	{
		
		case BLOODPUMP: //BLOOD PUMP
			PWM->PWM_DIS =0x00000010;
   81842:	4b05      	ldr	r3, [pc, #20]	; (81858 <CPU2_D_RESET_PUMP+0x28>)
   81844:	2210      	movs	r2, #16
   81846:	609a      	str	r2, [r3, #8]
		break;
   81848:	bf00      	nop
		
		default:
		break;
		
	}
	return 0;
   8184a:	2300      	movs	r3, #0
}
   8184c:	4618      	mov	r0, r3
   8184e:	370c      	adds	r7, #12
   81850:	46bd      	mov	sp, r7
   81852:	bc80      	pop	{r7}
   81854:	4770      	bx	lr
   81856:	bf00      	nop
   81858:	40094000 	.word	0x40094000

0008185c <CPU2_D_SET_VALVE>:


uint8_t CPU2_D_SET_VALVE(sv_valvetype id_valve)
{
   8185c:	b580      	push	{r7, lr}
   8185e:	b084      	sub	sp, #16
   81860:	af00      	add	r7, sp, #0
   81862:	4603      	mov	r3, r0
   81864:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io = 0, peri;
   81866:	2300      	movs	r3, #0
   81868:	60fb      	str	r3, [r7, #12]
	switch(id_valve)
   8186a:	79fb      	ldrb	r3, [r7, #7]
   8186c:	3b01      	subs	r3, #1
   8186e:	2b07      	cmp	r3, #7
   81870:	d836      	bhi.n	818e0 <CPU2_D_SET_VALVE+0x84>
   81872:	a201      	add	r2, pc, #4	; (adr r2, 81878 <CPU2_D_SET_VALVE+0x1c>)
   81874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81878:	00081899 	.word	0x00081899
   8187c:	000818b1 	.word	0x000818b1
   81880:	000818e1 	.word	0x000818e1
   81884:	000818e1 	.word	0x000818e1
   81888:	000818a5 	.word	0x000818a5
   8188c:	000818bd 	.word	0x000818bd
   81890:	000818c9 	.word	0x000818c9
   81894:	000818d5 	.word	0x000818d5
	{
		
		case HEMO_IF4:
		p_io = 21;
   81898:	2315      	movs	r3, #21
   8189a:	60fb      	str	r3, [r7, #12]
		peri = PA;
   8189c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   818a0:	60bb      	str	r3, [r7, #8]
		break;
   818a2:	e01e      	b.n	818e2 <CPU2_D_SET_VALVE+0x86>
		
		case CLAMP_PWR:
		p_io = 13;
   818a4:	230d      	movs	r3, #13
   818a6:	60fb      	str	r3, [r7, #12]
		peri = PA;
   818a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   818ac:	60bb      	str	r3, [r7, #8]
		break;
   818ae:	e018      	b.n	818e2 <CPU2_D_SET_VALVE+0x86>
		
		case HEMO_IF3:
		p_io = 22;
   818b0:	2316      	movs	r3, #22
   818b2:	60fb      	str	r3, [r7, #12]
		peri = PA;
   818b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   818b8:	60bb      	str	r3, [r7, #8]
		break;
   818ba:	e012      	b.n	818e2 <CPU2_D_SET_VALVE+0x86>
		
		case BYPS_PWR:
		p_io = 11;
   818bc:	230b      	movs	r3, #11
   818be:	60fb      	str	r3, [r7, #12]
		peri = PA;
   818c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   818c4:	60bb      	str	r3, [r7, #8]
		break;
   818c6:	e00c      	b.n	818e2 <CPU2_D_SET_VALVE+0x86>
		
		case RUDNCY_INT:
		p_io = 23;
   818c8:	2317      	movs	r3, #23
   818ca:	60fb      	str	r3, [r7, #12]
		peri = PC;
   818cc:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   818d0:	60bb      	str	r3, [r7, #8]
		break;
   818d2:	e006      	b.n	818e2 <CPU2_D_SET_VALVE+0x86>
		
		case CPU_INT:
		p_io = 18;
   818d4:	2312      	movs	r3, #18
   818d6:	60fb      	str	r3, [r7, #12]
		peri = PC;
   818d8:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   818dc:	60bb      	str	r3, [r7, #8]
		break;
   818de:	e000      	b.n	818e2 <CPU2_D_SET_VALVE+0x86>
		
		default:
		break;
   818e0:	bf00      	nop
	}
	
	CPU2_D_SET_PIO(peri,p_io);
   818e2:	68f9      	ldr	r1, [r7, #12]
   818e4:	68b8      	ldr	r0, [r7, #8]
   818e6:	4b03      	ldr	r3, [pc, #12]	; (818f4 <CPU2_D_SET_VALVE+0x98>)
   818e8:	4798      	blx	r3
	return 0;
   818ea:	2300      	movs	r3, #0
}
   818ec:	4618      	mov	r0, r3
   818ee:	3710      	adds	r7, #16
   818f0:	46bd      	mov	sp, r7
   818f2:	bd80      	pop	{r7, pc}
   818f4:	0008114d 	.word	0x0008114d

000818f8 <CPU2_D_RESET_VALVE>:


uint8_t CPU2_D_RESET_VALVE(sv_valvetype id_valve)
{
   818f8:	b580      	push	{r7, lr}
   818fa:	b084      	sub	sp, #16
   818fc:	af00      	add	r7, sp, #0
   818fe:	4603      	mov	r3, r0
   81900:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io = 0, peri;
   81902:	2300      	movs	r3, #0
   81904:	60fb      	str	r3, [r7, #12]
	switch(id_valve)
   81906:	79fb      	ldrb	r3, [r7, #7]
   81908:	3b01      	subs	r3, #1
   8190a:	2b07      	cmp	r3, #7
   8190c:	d836      	bhi.n	8197c <CPU2_D_RESET_VALVE+0x84>
   8190e:	a201      	add	r2, pc, #4	; (adr r2, 81914 <CPU2_D_RESET_VALVE+0x1c>)
   81910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81914:	00081935 	.word	0x00081935
   81918:	0008194d 	.word	0x0008194d
   8191c:	0008197d 	.word	0x0008197d
   81920:	0008197d 	.word	0x0008197d
   81924:	00081941 	.word	0x00081941
   81928:	00081959 	.word	0x00081959
   8192c:	00081965 	.word	0x00081965
   81930:	00081971 	.word	0x00081971
// 		p_io = 10;
// 		peri = PD;
// 		break;
// 		
		case HEMO_IF4:
		p_io = 21;
   81934:	2315      	movs	r3, #21
   81936:	60fb      	str	r3, [r7, #12]
		peri = PA;
   81938:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   8193c:	60bb      	str	r3, [r7, #8]
		break;
   8193e:	e01e      	b.n	8197e <CPU2_D_RESET_VALVE+0x86>
		
		case CLAMP_PWR:
		p_io = 13;
   81940:	230d      	movs	r3, #13
   81942:	60fb      	str	r3, [r7, #12]
		peri = PA;
   81944:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   81948:	60bb      	str	r3, [r7, #8]
		break;
   8194a:	e018      	b.n	8197e <CPU2_D_RESET_VALVE+0x86>
		
		case HEMO_IF3:
		p_io = 22;
   8194c:	2316      	movs	r3, #22
   8194e:	60fb      	str	r3, [r7, #12]
		peri = PA;
   81950:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   81954:	60bb      	str	r3, [r7, #8]
 		break;
   81956:	e012      	b.n	8197e <CPU2_D_RESET_VALVE+0x86>
		
		case BYPS_PWR:
		p_io = 11;
   81958:	230b      	movs	r3, #11
   8195a:	60fb      	str	r3, [r7, #12]
		peri = PA;
   8195c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   81960:	60bb      	str	r3, [r7, #8]
		break;
   81962:	e00c      	b.n	8197e <CPU2_D_RESET_VALVE+0x86>
		
		case RUDNCY_INT:
		p_io = 23;
   81964:	2317      	movs	r3, #23
   81966:	60fb      	str	r3, [r7, #12]
		peri = PC;
   81968:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   8196c:	60bb      	str	r3, [r7, #8]
		break;
   8196e:	e006      	b.n	8197e <CPU2_D_RESET_VALVE+0x86>
		
		case CPU_INT:
		p_io = 18;
   81970:	2312      	movs	r3, #18
   81972:	60fb      	str	r3, [r7, #12]
		peri = PC;
   81974:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   81978:	60bb      	str	r3, [r7, #8]
		break;
   8197a:	e000      	b.n	8197e <CPU2_D_RESET_VALVE+0x86>
		
		default:
		break;
   8197c:	bf00      	nop
	}
	CPU2_D_RESET_PIO(peri,p_io);
   8197e:	68f9      	ldr	r1, [r7, #12]
   81980:	68b8      	ldr	r0, [r7, #8]
   81982:	4b03      	ldr	r3, [pc, #12]	; (81990 <CPU2_D_RESET_VALVE+0x98>)
   81984:	4798      	blx	r3
	return 0;
   81986:	2300      	movs	r3, #0
}
   81988:	4618      	mov	r0, r3
   8198a:	3710      	adds	r7, #16
   8198c:	46bd      	mov	sp, r7
   8198e:	bd80      	pop	{r7, pc}
   81990:	000811d1 	.word	0x000811d1

00081994 <CPU2_D_RD_SENSIN>:

uint8_t CPU2_D_RD_SENSIN(sv_sensintype id_sensein)
{
   81994:	b580      	push	{r7, lr}
   81996:	b086      	sub	sp, #24
   81998:	af00      	add	r7, sp, #0
   8199a:	4603      	mov	r3, r0
   8199c:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io, peri;
	uint8_t pio_val= 0;
   8199e:	2300      	movs	r3, #0
   819a0:	73fb      	strb	r3, [r7, #15]
	switch(id_sensein)
   819a2:	79fb      	ldrb	r3, [r7, #7]
   819a4:	3b01      	subs	r3, #1
   819a6:	2b06      	cmp	r3, #6
   819a8:	d83a      	bhi.n	81a20 <CPU2_D_RD_SENSIN+0x8c>
   819aa:	a201      	add	r2, pc, #4	; (adr r2, 819b0 <CPU2_D_RD_SENSIN+0x1c>)
   819ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   819b0:	000819cd 	.word	0x000819cd
   819b4:	000819d9 	.word	0x000819d9
   819b8:	000819e5 	.word	0x000819e5
   819bc:	000819f1 	.word	0x000819f1
   819c0:	000819fd 	.word	0x000819fd
   819c4:	00081a09 	.word	0x00081a09
   819c8:	00081a15 	.word	0x00081a15
	{
		case SV_BP_DOOR:
		p_io = 10;               // bp_door
   819cc:	230a      	movs	r3, #10
   819ce:	617b      	str	r3, [r7, #20]
		peri = PC;
   819d0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   819d4:	613b      	str	r3, [r7, #16]
		break;
   819d6:	e024      	b.n	81a22 <CPU2_D_RD_SENSIN+0x8e>
		
		case SV_BP_FB:					// pump_sense
		p_io = 9;
   819d8:	2309      	movs	r3, #9
   819da:	617b      	str	r3, [r7, #20]
		peri = PC;
   819dc:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   819e0:	613b      	str	r3, [r7, #16]
		break;
   819e2:	e01e      	b.n	81a22 <CPU2_D_RD_SENSIN+0x8e>
		
		case SV_CLAMP_FB:					// clamp_feedback
		p_io = 7;
   819e4:	2307      	movs	r3, #7
   819e6:	617b      	str	r3, [r7, #20]
		peri = PC;
   819e8:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   819ec:	613b      	str	r3, [r7, #16]
		break;
   819ee:	e018      	b.n	81a22 <CPU2_D_RD_SENSIN+0x8e>
		
		case SV_CLAMP_DOOR:					// clamp_door
		
		p_io = 7;
   819f0:	2307      	movs	r3, #7
   819f2:	617b      	str	r3, [r7, #20]
		peri = PC;
   819f4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   819f8:	613b      	str	r3, [r7, #16]
		break;
   819fa:	e012      	b.n	81a22 <CPU2_D_RD_SENSIN+0x8e>
		
		case SV_BD:					// blood dectector
		
		p_io = 12;
   819fc:	230c      	movs	r3, #12
   819fe:	617b      	str	r3, [r7, #20]
		peri = PB;
   81a00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81a04:	613b      	str	r3, [r7, #16]
		break;
   81a06:	e00c      	b.n	81a22 <CPU2_D_RD_SENSIN+0x8e>
		
		case SV_ABD:					// ABD
		
		p_io = 8;
   81a08:	2308      	movs	r3, #8
   81a0a:	617b      	str	r3, [r7, #20]
		peri = PC;
   81a0c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   81a10:	613b      	str	r3, [r7, #16]
		break;
   81a12:	e006      	b.n	81a22 <CPU2_D_RD_SENSIN+0x8e>
		
		case SV_REDUNDANCY_IRQ:					//Redundancy_irq
		p_io = 24;
   81a14:	2318      	movs	r3, #24
   81a16:	617b      	str	r3, [r7, #20]
		peri = PC;
   81a18:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   81a1c:	613b      	str	r3, [r7, #16]
		break;
   81a1e:	e000      	b.n	81a22 <CPU2_D_RD_SENSIN+0x8e>
		
		default:
		break;
   81a20:	bf00      	nop
	}
	
	pio_val = CPU2_D_READ_PIO(peri, p_io);
   81a22:	6979      	ldr	r1, [r7, #20]
   81a24:	6938      	ldr	r0, [r7, #16]
   81a26:	4b04      	ldr	r3, [pc, #16]	; (81a38 <CPU2_D_RD_SENSIN+0xa4>)
   81a28:	4798      	blx	r3
   81a2a:	4603      	mov	r3, r0
   81a2c:	73fb      	strb	r3, [r7, #15]
	
	return pio_val;
   81a2e:	7bfb      	ldrb	r3, [r7, #15]
	
}
   81a30:	4618      	mov	r0, r3
   81a32:	3718      	adds	r7, #24
   81a34:	46bd      	mov	sp, r7
   81a36:	bd80      	pop	{r7, pc}
   81a38:	00081255 	.word	0x00081255

00081a3c <CPU2_D_READ_SENSORS>:


uint16_t CPU2_D_READ_SENSORS(sv_sensortype ID_SENSOR)
{
   81a3c:	b580      	push	{r7, lr}
   81a3e:	b084      	sub	sp, #16
   81a40:	af00      	add	r7, sp, #0
   81a42:	4603      	mov	r3, r0
   81a44:	71fb      	strb	r3, [r7, #7]
	int16_t SENSOR_VAL;
	 uint8_t channel = 0;
   81a46:	2300      	movs	r3, #0
   81a48:	737b      	strb	r3, [r7, #13]
	//adc_chnl channel = channel_0;
	 switch(ID_SENSOR)
   81a4a:	79fb      	ldrb	r3, [r7, #7]
   81a4c:	2b01      	cmp	r3, #1
   81a4e:	d002      	beq.n	81a56 <CPU2_D_READ_SENSORS+0x1a>
   81a50:	2b02      	cmp	r3, #2
   81a52:	d008      	beq.n	81a66 <CPU2_D_READ_SENSORS+0x2a>
// 		 //channel = channel_3;
// 		 channel =  4;
// 		 break;
		 
		 default:
		 break;
   81a54:	e00f      	b.n	81a76 <CPU2_D_READ_SENSORS+0x3a>
	//adc_chnl channel = channel_0;
	 switch(ID_SENSOR)
	 {
		 case SV_APT:
		 //channel = channel_7;
		 SENSOR_VAL = DD_READ_SENSORS(SV_APT);
   81a56:	2001      	movs	r0, #1
   81a58:	4b09      	ldr	r3, [pc, #36]	; (81a80 <CPU2_D_READ_SENSORS+0x44>)
   81a5a:	4798      	blx	r3
   81a5c:	4603      	mov	r3, r0
   81a5e:	81fb      	strh	r3, [r7, #14]
		 channel = 0;
   81a60:	2300      	movs	r3, #0
   81a62:	737b      	strb	r3, [r7, #13]
		 break;
   81a64:	e007      	b.n	81a76 <CPU2_D_READ_SENSORS+0x3a>
		 
		 case SV_VPT:
		SENSOR_VAL = DD_READ_SENSORS(SV_VPT);
   81a66:	2002      	movs	r0, #2
   81a68:	4b05      	ldr	r3, [pc, #20]	; (81a80 <CPU2_D_READ_SENSORS+0x44>)
   81a6a:	4798      	blx	r3
   81a6c:	4603      	mov	r3, r0
   81a6e:	81fb      	strh	r3, [r7, #14]
		 channel =  1;
   81a70:	2301      	movs	r3, #1
   81a72:	737b      	strb	r3, [r7, #13]
		 break;
   81a74:	bf00      	nop
		 
	 }
	
//	SENSOR_VAL= CPU2_D_READ_ADC(channel);
	
	return SENSOR_VAL;
   81a76:	89fb      	ldrh	r3, [r7, #14]
	
}
   81a78:	4618      	mov	r0, r3
   81a7a:	3710      	adds	r7, #16
   81a7c:	46bd      	mov	sp, r7
   81a7e:	bd80      	pop	{r7, pc}
   81a80:	00080f55 	.word	0x00080f55

00081a84 <CPU2_D_CONFIG_TIMER>:

uint8_t CPU2_D_CONFIG_TIMER(uint8_t timer_no, uint8_t timer_res)
{
   81a84:	b590      	push	{r4, r7, lr}
   81a86:	b089      	sub	sp, #36	; 0x24
   81a88:	af00      	add	r7, sp, #0
   81a8a:	4603      	mov	r3, r0
   81a8c:	460a      	mov	r2, r1
   81a8e:	71fb      	strb	r3, [r7, #7]
   81a90:	4613      	mov	r3, r2
   81a92:	71bb      	strb	r3, [r7, #6]
	uint32_t ch_no=0,rc;
   81a94:	2300      	movs	r3, #0
   81a96:	61fb      	str	r3, [r7, #28]
	double rc_cal;
	rc_cal = ((84000000/(128 * timer_res)) -1);
   81a98:	79bb      	ldrb	r3, [r7, #6]
   81a9a:	01db      	lsls	r3, r3, #7
   81a9c:	4a1b      	ldr	r2, [pc, #108]	; (81b0c <CPU2_D_CONFIG_TIMER+0x88>)
   81a9e:	fb92 f3f3 	sdiv	r3, r2, r3
   81aa2:	1e5a      	subs	r2, r3, #1
   81aa4:	4b1a      	ldr	r3, [pc, #104]	; (81b10 <CPU2_D_CONFIG_TIMER+0x8c>)
   81aa6:	4610      	mov	r0, r2
   81aa8:	4798      	blx	r3
   81aaa:	4603      	mov	r3, r0
   81aac:	460c      	mov	r4, r1
   81aae:	e9c7 3404 	strd	r3, r4, [r7, #16]
	rc = rc_cal;
   81ab2:	4b18      	ldr	r3, [pc, #96]	; (81b14 <CPU2_D_CONFIG_TIMER+0x90>)
   81ab4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   81ab8:	4798      	blx	r3
   81aba:	4603      	mov	r3, r0
   81abc:	60fb      	str	r3, [r7, #12]

	switch (timer_no)
   81abe:	79fb      	ldrb	r3, [r7, #7]
   81ac0:	2b01      	cmp	r3, #1
   81ac2:	d00b      	beq.n	81adc <CPU2_D_CONFIG_TIMER+0x58>
   81ac4:	2b02      	cmp	r3, #2
   81ac6:	d012      	beq.n	81aee <CPU2_D_CONFIG_TIMER+0x6a>
   81ac8:	2b00      	cmp	r3, #0
   81aca:	d000      	beq.n	81ace <CPU2_D_CONFIG_TIMER+0x4a>
		rc = timer_res;
		startTimer2(TC0,1,TC1_IRQn,rc);
		break;
		
		default:
		break;
   81acc:	e018      	b.n	81b00 <CPU2_D_CONFIG_TIMER+0x7c>
	rc = rc_cal;

	switch (timer_no)
	{
		case 0:
		CPU2_D_MAIN_TIMER( TC2, ch_no, TC6_IRQn, rc);
   81ace:	68fb      	ldr	r3, [r7, #12]
   81ad0:	2221      	movs	r2, #33	; 0x21
   81ad2:	69f9      	ldr	r1, [r7, #28]
   81ad4:	4810      	ldr	r0, [pc, #64]	; (81b18 <CPU2_D_CONFIG_TIMER+0x94>)
   81ad6:	4c11      	ldr	r4, [pc, #68]	; (81b1c <CPU2_D_CONFIG_TIMER+0x98>)
   81ad8:	47a0      	blx	r4
		break;
   81ada:	e011      	b.n	81b00 <CPU2_D_CONFIG_TIMER+0x7c>
		
		case 1:
		rc = timer_res;
   81adc:	79bb      	ldrb	r3, [r7, #6]
   81ade:	60fb      	str	r3, [r7, #12]
		startTimer1(TC0,0,TC0_IRQn,rc);
   81ae0:	68fb      	ldr	r3, [r7, #12]
   81ae2:	221b      	movs	r2, #27
   81ae4:	2100      	movs	r1, #0
   81ae6:	480e      	ldr	r0, [pc, #56]	; (81b20 <CPU2_D_CONFIG_TIMER+0x9c>)
   81ae8:	4c0e      	ldr	r4, [pc, #56]	; (81b24 <CPU2_D_CONFIG_TIMER+0xa0>)
   81aea:	47a0      	blx	r4
		break;
   81aec:	e008      	b.n	81b00 <CPU2_D_CONFIG_TIMER+0x7c>
		
		case 2:
		rc = timer_res;
   81aee:	79bb      	ldrb	r3, [r7, #6]
   81af0:	60fb      	str	r3, [r7, #12]
		startTimer2(TC0,1,TC1_IRQn,rc);
   81af2:	68fb      	ldr	r3, [r7, #12]
   81af4:	221c      	movs	r2, #28
   81af6:	2101      	movs	r1, #1
   81af8:	4809      	ldr	r0, [pc, #36]	; (81b20 <CPU2_D_CONFIG_TIMER+0x9c>)
   81afa:	4c0b      	ldr	r4, [pc, #44]	; (81b28 <CPU2_D_CONFIG_TIMER+0xa4>)
   81afc:	47a0      	blx	r4
		break;
   81afe:	bf00      	nop
		
		default:
		break;
		
	}
}
   81b00:	bf00      	nop
   81b02:	4618      	mov	r0, r3
   81b04:	3724      	adds	r7, #36	; 0x24
   81b06:	46bd      	mov	sp, r7
   81b08:	bd90      	pop	{r4, r7, pc}
   81b0a:	bf00      	nop
   81b0c:	0501bd00 	.word	0x0501bd00
   81b10:	000845d5 	.word	0x000845d5
   81b14:	000846a1 	.word	0x000846a1
   81b18:	40088000 	.word	0x40088000
   81b1c:	00081b9d 	.word	0x00081b9d
   81b20:	40080000 	.word	0x40080000
   81b24:	00081bf9 	.word	0x00081bf9
   81b28:	00081c69 	.word	0x00081c69

00081b2c <CPU2_D_INIT_TIMER>:


extern uint32_t ra,rc;

void CPU2_D_INIT_TIMER()
{
   81b2c:	b580      	push	{r7, lr}
   81b2e:	af00      	add	r7, sp, #0
	TC0->TC_WPMR = 0x54494D00;
   81b30:	4b16      	ldr	r3, [pc, #88]	; (81b8c <CPU2_D_INIT_TIMER+0x60>)
   81b32:	4a17      	ldr	r2, [pc, #92]	; (81b90 <CPU2_D_INIT_TIMER+0x64>)
   81b34:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC1->TC_WPMR = 0x54494D00;
   81b38:	4b16      	ldr	r3, [pc, #88]	; (81b94 <CPU2_D_INIT_TIMER+0x68>)
   81b3a:	4a15      	ldr	r2, [pc, #84]	; (81b90 <CPU2_D_INIT_TIMER+0x64>)
   81b3c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
//	TC2->TC_WPMR = 0x54494D00;
	pmc_enable_periph_clk(ID_TC0);
   81b40:	201b      	movs	r0, #27
   81b42:	4b15      	ldr	r3, [pc, #84]	; (81b98 <CPU2_D_INIT_TIMER+0x6c>)
   81b44:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC1);
   81b46:	201c      	movs	r0, #28
   81b48:	4b13      	ldr	r3, [pc, #76]	; (81b98 <CPU2_D_INIT_TIMER+0x6c>)
   81b4a:	4798      	blx	r3
//	pmc_enable_periph_clk(ID_TC2);
	pmc_enable_periph_clk(ID_TC6);
   81b4c:	2021      	movs	r0, #33	; 0x21
   81b4e:	4b12      	ldr	r3, [pc, #72]	; (81b98 <CPU2_D_INIT_TIMER+0x6c>)
   81b50:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81b52:	4b0e      	ldr	r3, [pc, #56]	; (81b8c <CPU2_D_INIT_TIMER+0x60>)
   81b54:	f24c 0203 	movw	r2, #49155	; 0xc003
   81b58:	605a      	str	r2, [r3, #4]
	TC0->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81b5a:	4b0c      	ldr	r3, [pc, #48]	; (81b8c <CPU2_D_INIT_TIMER+0x60>)
   81b5c:	f24c 0203 	movw	r2, #49155	; 0xc003
   81b60:	645a      	str	r2, [r3, #68]	; 0x44
	TC0->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81b62:	4b0a      	ldr	r3, [pc, #40]	; (81b8c <CPU2_D_INIT_TIMER+0x60>)
   81b64:	f24c 0203 	movw	r2, #49155	; 0xc003
   81b68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
//	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	
	TC0->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   81b6c:	4b07      	ldr	r3, [pc, #28]	; (81b8c <CPU2_D_INIT_TIMER+0x60>)
   81b6e:	2210      	movs	r2, #16
   81b70:	625a      	str	r2, [r3, #36]	; 0x24
	TC0->TC_CHANNEL[1].TC_IER = TC_IER_CPCS;
   81b72:	4b06      	ldr	r3, [pc, #24]	; (81b8c <CPU2_D_INIT_TIMER+0x60>)
   81b74:	2210      	movs	r2, #16
   81b76:	665a      	str	r2, [r3, #100]	; 0x64
	TC0->TC_CHANNEL[2].TC_IER = TC_IER_CPCS;
   81b78:	4b04      	ldr	r3, [pc, #16]	; (81b8c <CPU2_D_INIT_TIMER+0x60>)
   81b7a:	2210      	movs	r2, #16
   81b7c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	TC1->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   81b80:	4b04      	ldr	r3, [pc, #16]	; (81b94 <CPU2_D_INIT_TIMER+0x68>)
   81b82:	2210      	movs	r2, #16
   81b84:	625a      	str	r2, [r3, #36]	; 0x24
//	TC2->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
}
   81b86:	bf00      	nop
   81b88:	bd80      	pop	{r7, pc}
   81b8a:	bf00      	nop
   81b8c:	40080000 	.word	0x40080000
   81b90:	54494d00 	.word	0x54494d00
   81b94:	40084000 	.word	0x40084000
   81b98:	00083ee9 	.word	0x00083ee9

00081b9c <CPU2_D_MAIN_TIMER>:


uint8_t CPU2_D_MAIN_TIMER(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t fre)
{
   81b9c:	b580      	push	{r7, lr}
   81b9e:	b084      	sub	sp, #16
   81ba0:	af00      	add	r7, sp, #0
   81ba2:	60f8      	str	r0, [r7, #12]
   81ba4:	60b9      	str	r1, [r7, #8]
   81ba6:	603b      	str	r3, [r7, #0]
   81ba8:	4613      	mov	r3, r2
   81baa:	71fb      	strb	r3, [r7, #7]
	pmc_set_writeprotect(0);
   81bac:	2000      	movs	r0, #0
   81bae:	4b0d      	ldr	r3, [pc, #52]	; (81be4 <CPU2_D_MAIN_TIMER+0x48>)
   81bb0:	4798      	blx	r3
	channel=0;
   81bb2:	2300      	movs	r3, #0
   81bb4:	60bb      	str	r3, [r7, #8]
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81bb6:	4b0c      	ldr	r3, [pc, #48]	; (81be8 <CPU2_D_MAIN_TIMER+0x4c>)
   81bb8:	f24c 0203 	movw	r2, #49155	; 0xc003
   81bbc:	605a      	str	r2, [r3, #4]
	tc_write_rc(tc, channel, fre);
   81bbe:	683a      	ldr	r2, [r7, #0]
   81bc0:	68b9      	ldr	r1, [r7, #8]
   81bc2:	68f8      	ldr	r0, [r7, #12]
   81bc4:	4b09      	ldr	r3, [pc, #36]	; (81bec <CPU2_D_MAIN_TIMER+0x50>)
   81bc6:	4798      	blx	r3
	tc_start(tc, channel);
   81bc8:	68b9      	ldr	r1, [r7, #8]
   81bca:	68f8      	ldr	r0, [r7, #12]
   81bcc:	4b08      	ldr	r3, [pc, #32]	; (81bf0 <CPU2_D_MAIN_TIMER+0x54>)
   81bce:	4798      	blx	r3
	tc_enable_interrupt(tc, channel, TC_IER_CPCS);
   81bd0:	2210      	movs	r2, #16
   81bd2:	68b9      	ldr	r1, [r7, #8]
   81bd4:	68f8      	ldr	r0, [r7, #12]
   81bd6:	4b07      	ldr	r3, [pc, #28]	; (81bf4 <CPU2_D_MAIN_TIMER+0x58>)
   81bd8:	4798      	blx	r3
	/*if (SysTick_Config(sysclk_get_cpu_hz() / 1000)) {
		puts("-F- Systick configuration error\r");
		while (1);
	}*/
}
   81bda:	bf00      	nop
   81bdc:	4618      	mov	r0, r3
   81bde:	3710      	adds	r7, #16
   81be0:	46bd      	mov	sp, r7
   81be2:	bd80      	pop	{r7, pc}
   81be4:	00083f69 	.word	0x00083f69
   81be8:	40088000 	.word	0x40088000
   81bec:	000820fd 	.word	0x000820fd
   81bf0:	000820bd 	.word	0x000820bd
   81bf4:	00082121 	.word	0x00082121

00081bf8 <startTimer1>:

void startTimer1(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t stepcount)
{
   81bf8:	b580      	push	{r7, lr}
   81bfa:	b084      	sub	sp, #16
   81bfc:	af00      	add	r7, sp, #0
   81bfe:	60f8      	str	r0, [r7, #12]
   81c00:	60b9      	str	r1, [r7, #8]
   81c02:	603b      	str	r3, [r7, #0]
   81c04:	4613      	mov	r3, r2
   81c06:	71fb      	strb	r3, [r7, #7]
	pmc_set_writeprotect(0);
   81c08:	2000      	movs	r0, #0
   81c0a:	4b10      	ldr	r3, [pc, #64]	; (81c4c <startTimer1+0x54>)
   81c0c:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC0);
   81c0e:	201b      	movs	r0, #27
   81c10:	4b0f      	ldr	r3, [pc, #60]	; (81c50 <startTimer1+0x58>)
   81c12:	4798      	blx	r3
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4);
   81c14:	f24c 0203 	movw	r2, #49155	; 0xc003
   81c18:	68b9      	ldr	r1, [r7, #8]
   81c1a:	68f8      	ldr	r0, [r7, #12]
   81c1c:	4b0d      	ldr	r3, [pc, #52]	; (81c54 <startTimer1+0x5c>)
   81c1e:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81c20:	4b0d      	ldr	r3, [pc, #52]	; (81c58 <startTimer1+0x60>)
   81c22:	f24c 0203 	movw	r2, #49155	; 0xc003
   81c26:	605a      	str	r2, [r3, #4]
	tc_write_rc(tc, channel, stepcount);
   81c28:	683a      	ldr	r2, [r7, #0]
   81c2a:	68b9      	ldr	r1, [r7, #8]
   81c2c:	68f8      	ldr	r0, [r7, #12]
   81c2e:	4b0b      	ldr	r3, [pc, #44]	; (81c5c <startTimer1+0x64>)
   81c30:	4798      	blx	r3
	tc_enable_interrupt(TC0,0,TC_IER_CPCS);
   81c32:	2210      	movs	r2, #16
   81c34:	2100      	movs	r1, #0
   81c36:	4808      	ldr	r0, [pc, #32]	; (81c58 <startTimer1+0x60>)
   81c38:	4b09      	ldr	r3, [pc, #36]	; (81c60 <startTimer1+0x68>)
   81c3a:	4798      	blx	r3
	tc_start(tc, channel);
   81c3c:	68b9      	ldr	r1, [r7, #8]
   81c3e:	68f8      	ldr	r0, [r7, #12]
   81c40:	4b08      	ldr	r3, [pc, #32]	; (81c64 <startTimer1+0x6c>)
   81c42:	4798      	blx	r3
}
   81c44:	bf00      	nop
   81c46:	3710      	adds	r7, #16
   81c48:	46bd      	mov	sp, r7
   81c4a:	bd80      	pop	{r7, pc}
   81c4c:	00083f69 	.word	0x00083f69
   81c50:	00083ee9 	.word	0x00083ee9
   81c54:	00082085 	.word	0x00082085
   81c58:	40080000 	.word	0x40080000
   81c5c:	000820fd 	.word	0x000820fd
   81c60:	00082121 	.word	0x00082121
   81c64:	000820bd 	.word	0x000820bd

00081c68 <startTimer2>:

void startTimer2(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t rampingcount)
{
   81c68:	b580      	push	{r7, lr}
   81c6a:	b084      	sub	sp, #16
   81c6c:	af00      	add	r7, sp, #0
   81c6e:	60f8      	str	r0, [r7, #12]
   81c70:	60b9      	str	r1, [r7, #8]
   81c72:	603b      	str	r3, [r7, #0]
   81c74:	4613      	mov	r3, r2
   81c76:	71fb      	strb	r3, [r7, #7]
	pmc_set_writeprotect(0);
   81c78:	2000      	movs	r0, #0
   81c7a:	4b10      	ldr	r3, [pc, #64]	; (81cbc <startTimer2+0x54>)
   81c7c:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC1);
   81c7e:	201c      	movs	r0, #28
   81c80:	4b0f      	ldr	r3, [pc, #60]	; (81cc0 <startTimer2+0x58>)
   81c82:	4798      	blx	r3
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4);
   81c84:	f24c 0203 	movw	r2, #49155	; 0xc003
   81c88:	68b9      	ldr	r1, [r7, #8]
   81c8a:	68f8      	ldr	r0, [r7, #12]
   81c8c:	4b0d      	ldr	r3, [pc, #52]	; (81cc4 <startTimer2+0x5c>)
   81c8e:	4798      	blx	r3
	TC0->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81c90:	4b0d      	ldr	r3, [pc, #52]	; (81cc8 <startTimer2+0x60>)
   81c92:	f24c 0203 	movw	r2, #49155	; 0xc003
   81c96:	645a      	str	r2, [r3, #68]	; 0x44
	tc_write_rc(tc, channel, rampingcount);
   81c98:	683a      	ldr	r2, [r7, #0]
   81c9a:	68b9      	ldr	r1, [r7, #8]
   81c9c:	68f8      	ldr	r0, [r7, #12]
   81c9e:	4b0b      	ldr	r3, [pc, #44]	; (81ccc <startTimer2+0x64>)
   81ca0:	4798      	blx	r3
	tc_enable_interrupt(TC0,1,TC_IER_CPCS);
   81ca2:	2210      	movs	r2, #16
   81ca4:	2101      	movs	r1, #1
   81ca6:	4808      	ldr	r0, [pc, #32]	; (81cc8 <startTimer2+0x60>)
   81ca8:	4b09      	ldr	r3, [pc, #36]	; (81cd0 <startTimer2+0x68>)
   81caa:	4798      	blx	r3
	tc_start(tc, channel);
   81cac:	68b9      	ldr	r1, [r7, #8]
   81cae:	68f8      	ldr	r0, [r7, #12]
   81cb0:	4b08      	ldr	r3, [pc, #32]	; (81cd4 <startTimer2+0x6c>)
   81cb2:	4798      	blx	r3
}
   81cb4:	bf00      	nop
   81cb6:	3710      	adds	r7, #16
   81cb8:	46bd      	mov	sp, r7
   81cba:	bd80      	pop	{r7, pc}
   81cbc:	00083f69 	.word	0x00083f69
   81cc0:	00083ee9 	.word	0x00083ee9
   81cc4:	00082085 	.word	0x00082085
   81cc8:	40080000 	.word	0x40080000
   81ccc:	000820fd 	.word	0x000820fd
   81cd0:	00082121 	.word	0x00082121
   81cd4:	000820bd 	.word	0x000820bd

00081cd8 <startTimer3>:
void startTimer3(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t rampingcount)
{
   81cd8:	b580      	push	{r7, lr}
   81cda:	b084      	sub	sp, #16
   81cdc:	af00      	add	r7, sp, #0
   81cde:	60f8      	str	r0, [r7, #12]
   81ce0:	60b9      	str	r1, [r7, #8]
   81ce2:	603b      	str	r3, [r7, #0]
   81ce4:	4613      	mov	r3, r2
   81ce6:	71fb      	strb	r3, [r7, #7]
	pmc_set_writeprotect(0);
   81ce8:	2000      	movs	r0, #0
   81cea:	4b11      	ldr	r3, [pc, #68]	; (81d30 <startTimer3+0x58>)
   81cec:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC2);
   81cee:	201d      	movs	r0, #29
   81cf0:	4b10      	ldr	r3, [pc, #64]	; (81d34 <startTimer3+0x5c>)
   81cf2:	4798      	blx	r3
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4);
   81cf4:	f24c 0203 	movw	r2, #49155	; 0xc003
   81cf8:	68b9      	ldr	r1, [r7, #8]
   81cfa:	68f8      	ldr	r0, [r7, #12]
   81cfc:	4b0e      	ldr	r3, [pc, #56]	; (81d38 <startTimer3+0x60>)
   81cfe:	4798      	blx	r3
	TC0->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81d00:	4b0e      	ldr	r3, [pc, #56]	; (81d3c <startTimer3+0x64>)
   81d02:	f24c 0203 	movw	r2, #49155	; 0xc003
   81d06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	tc_write_rc(tc, channel, rampingcount);
   81d0a:	683a      	ldr	r2, [r7, #0]
   81d0c:	68b9      	ldr	r1, [r7, #8]
   81d0e:	68f8      	ldr	r0, [r7, #12]
   81d10:	4b0b      	ldr	r3, [pc, #44]	; (81d40 <startTimer3+0x68>)
   81d12:	4798      	blx	r3
	tc_enable_interrupt(TC0,2,TC_IER_CPCS);
   81d14:	2210      	movs	r2, #16
   81d16:	2102      	movs	r1, #2
   81d18:	4808      	ldr	r0, [pc, #32]	; (81d3c <startTimer3+0x64>)
   81d1a:	4b0a      	ldr	r3, [pc, #40]	; (81d44 <startTimer3+0x6c>)
   81d1c:	4798      	blx	r3
	tc_start(tc, channel);
   81d1e:	68b9      	ldr	r1, [r7, #8]
   81d20:	68f8      	ldr	r0, [r7, #12]
   81d22:	4b09      	ldr	r3, [pc, #36]	; (81d48 <startTimer3+0x70>)
   81d24:	4798      	blx	r3
   81d26:	bf00      	nop
   81d28:	3710      	adds	r7, #16
   81d2a:	46bd      	mov	sp, r7
   81d2c:	bd80      	pop	{r7, pc}
   81d2e:	bf00      	nop
   81d30:	00083f69 	.word	0x00083f69
   81d34:	00083ee9 	.word	0x00083ee9
   81d38:	00082085 	.word	0x00082085
   81d3c:	40080000 	.word	0x40080000
   81d40:	000820fd 	.word	0x000820fd
   81d44:	00082121 	.word	0x00082121
   81d48:	000820bd 	.word	0x000820bd

00081d4c <cpu2_sv_cntrl_activatepump>:
 */ 
#include "CNTRL.h"


uint8_t cpu2_sv_cntrl_activatepump(sv_pumptype sv_pump_id)
{
   81d4c:	b580      	push	{r7, lr}
   81d4e:	b082      	sub	sp, #8
   81d50:	af00      	add	r7, sp, #0
   81d52:	4603      	mov	r3, r0
   81d54:	71fb      	strb	r3, [r7, #7]
	CPU2_D_SET_PUMP(sv_pump_id);
   81d56:	79fb      	ldrb	r3, [r7, #7]
   81d58:	4618      	mov	r0, r3
   81d5a:	4b03      	ldr	r3, [pc, #12]	; (81d68 <cpu2_sv_cntrl_activatepump+0x1c>)
   81d5c:	4798      	blx	r3
	
	return 0;
   81d5e:	2300      	movs	r3, #0
}
   81d60:	4618      	mov	r0, r3
   81d62:	3708      	adds	r7, #8
   81d64:	46bd      	mov	sp, r7
   81d66:	bd80      	pop	{r7, pc}
   81d68:	000817e1 	.word	0x000817e1

00081d6c <cpu2_sv_cntrl_deactivatepump>:

uint8_t cpu2_sv_cntrl_deactivatepump(sv_pumptype sv_pump_id)
{
   81d6c:	b580      	push	{r7, lr}
   81d6e:	b082      	sub	sp, #8
   81d70:	af00      	add	r7, sp, #0
   81d72:	4603      	mov	r3, r0
   81d74:	71fb      	strb	r3, [r7, #7]
	CPU2_D_RESET_PUMP(sv_pump_id);
   81d76:	79fb      	ldrb	r3, [r7, #7]
   81d78:	4618      	mov	r0, r3
   81d7a:	4b03      	ldr	r3, [pc, #12]	; (81d88 <cpu2_sv_cntrl_deactivatepump+0x1c>)
   81d7c:	4798      	blx	r3
	
	return 0;
   81d7e:	2300      	movs	r3, #0
}
   81d80:	4618      	mov	r0, r3
   81d82:	3708      	adds	r7, #8
   81d84:	46bd      	mov	sp, r7
   81d86:	bd80      	pop	{r7, pc}
   81d88:	00081831 	.word	0x00081831

00081d8c <cpu2_sv_cntrl_activate_pin>:


uint8_t cpu2_sv_cntrl_activate_pin(sv_valvetype sv_pin_id)
{
   81d8c:	b580      	push	{r7, lr}
   81d8e:	b082      	sub	sp, #8
   81d90:	af00      	add	r7, sp, #0
   81d92:	4603      	mov	r3, r0
   81d94:	71fb      	strb	r3, [r7, #7]
	CPU2_D_SET_VALVE(sv_pin_id);
   81d96:	79fb      	ldrb	r3, [r7, #7]
   81d98:	4618      	mov	r0, r3
   81d9a:	4b03      	ldr	r3, [pc, #12]	; (81da8 <cpu2_sv_cntrl_activate_pin+0x1c>)
   81d9c:	4798      	blx	r3
	
	return 0;
   81d9e:	2300      	movs	r3, #0
}
   81da0:	4618      	mov	r0, r3
   81da2:	3708      	adds	r7, #8
   81da4:	46bd      	mov	sp, r7
   81da6:	bd80      	pop	{r7, pc}
   81da8:	0008185d 	.word	0x0008185d

00081dac <cpu2_sv_cntrl_deactivate_pin>:

uint8_t cpu2_sv_cntrl_deactivate_pin(sv_valvetype sv_pin_id)
{
   81dac:	b580      	push	{r7, lr}
   81dae:	b082      	sub	sp, #8
   81db0:	af00      	add	r7, sp, #0
   81db2:	4603      	mov	r3, r0
   81db4:	71fb      	strb	r3, [r7, #7]
	CPU2_D_RESET_VALVE(sv_pin_id);
   81db6:	79fb      	ldrb	r3, [r7, #7]
   81db8:	4618      	mov	r0, r3
   81dba:	4b03      	ldr	r3, [pc, #12]	; (81dc8 <cpu2_sv_cntrl_deactivate_pin+0x1c>)
   81dbc:	4798      	blx	r3
	
	return 0;
   81dbe:	2300      	movs	r3, #0
   81dc0:	4618      	mov	r0, r3
   81dc2:	3708      	adds	r7, #8
   81dc4:	46bd      	mov	sp, r7
   81dc6:	bd80      	pop	{r7, pc}
   81dc8:	000818f9 	.word	0x000818f9

00081dcc <cpu2_sv_status_getsystemstatus>:
#include "STATUS.h"
#define CAN_MID_MIDvA_dd(value) ((0x1FFC0000 & ((value) << 18)))
extern can_mb_conf_t can0_mailbox;
extern uint16_t fedbck_cnt1;
uint16_t cpu2_sv_status_getsystemstatus(Sys_statusType* sensor_struct)
{
   81dcc:	b580      	push	{r7, lr}
   81dce:	b088      	sub	sp, #32
   81dd0:	af00      	add	r7, sp, #0
   81dd2:	6078      	str	r0, [r7, #4]
	
	 Sys_statusType sensor_struct1;

	sensor_struct1.vptstatus			= CPU2_D_READ_SENSORS(SV_VPT);
   81dd4:	2002      	movs	r0, #2
   81dd6:	4b29      	ldr	r3, [pc, #164]	; (81e7c <cpu2_sv_status_getsystemstatus+0xb0>)
   81dd8:	4798      	blx	r3
   81dda:	4603      	mov	r3, r0
   81ddc:	81fb      	strh	r3, [r7, #14]
	sensor_struct1.aptstatus			= CPU2_D_READ_SENSORS(SV_APT);
   81dde:	2001      	movs	r0, #1
   81de0:	4b26      	ldr	r3, [pc, #152]	; (81e7c <cpu2_sv_status_getsystemstatus+0xb0>)
   81de2:	4798      	blx	r3
   81de4:	4603      	mov	r3, r0
   81de6:	81bb      	strh	r3, [r7, #12]
// 	sensor_struct1.Tempstatus			= CPU2_D_READ_SENSORS(SV_SENSOR_ID3);
// 	sensor_struct1.cond1_status			= CPU2_D_READ_SENSORS(SV_SENSOR_ID4);
// 	sensor_struct1.cond2_status			= CPU2_D_READ_SENSORS(SV_SENSOR_ID5);
	
	sensor_struct1.bp_door			= CPU2_D_RD_SENSIN(SV_BP_DOOR);
   81de8:	2001      	movs	r0, #1
   81dea:	4b25      	ldr	r3, [pc, #148]	; (81e80 <cpu2_sv_status_getsystemstatus+0xb4>)
   81dec:	4798      	blx	r3
   81dee:	4603      	mov	r3, r0
   81df0:	b29b      	uxth	r3, r3
   81df2:	82bb      	strh	r3, [r7, #20]
	sensor_struct1.bp_sense			= CPU2_D_RD_SENSIN(SV_BP_FB);
   81df4:	2002      	movs	r0, #2
   81df6:	4b22      	ldr	r3, [pc, #136]	; (81e80 <cpu2_sv_status_getsystemstatus+0xb4>)
   81df8:	4798      	blx	r3
   81dfa:	4603      	mov	r3, r0
   81dfc:	b29b      	uxth	r3, r3
   81dfe:	82fb      	strh	r3, [r7, #22]
	sensor_struct1.clamp_fdbk		= CPU2_D_RD_SENSIN(SV_CLAMP_FB);
   81e00:	2003      	movs	r0, #3
   81e02:	4b1f      	ldr	r3, [pc, #124]	; (81e80 <cpu2_sv_status_getsystemstatus+0xb4>)
   81e04:	4798      	blx	r3
   81e06:	4603      	mov	r3, r0
   81e08:	b29b      	uxth	r3, r3
   81e0a:	833b      	strh	r3, [r7, #24]
	sensor_struct1.clamp_door			= CPU2_D_RD_SENSIN(SV_CLAMP_DOOR);
   81e0c:	2004      	movs	r0, #4
   81e0e:	4b1c      	ldr	r3, [pc, #112]	; (81e80 <cpu2_sv_status_getsystemstatus+0xb4>)
   81e10:	4798      	blx	r3
   81e12:	4603      	mov	r3, r0
   81e14:	b29b      	uxth	r3, r3
   81e16:	837b      	strh	r3, [r7, #26]
	sensor_struct1.bdstatus				= CPU2_D_RD_SENSIN(SV_BD);
   81e18:	2005      	movs	r0, #5
   81e1a:	4b19      	ldr	r3, [pc, #100]	; (81e80 <cpu2_sv_status_getsystemstatus+0xb4>)
   81e1c:	4798      	blx	r3
   81e1e:	4603      	mov	r3, r0
   81e20:	b29b      	uxth	r3, r3
   81e22:	827b      	strh	r3, [r7, #18]
	sensor_struct1.abdstatus			= CPU2_D_RD_SENSIN(SV_ABD);
   81e24:	2006      	movs	r0, #6
   81e26:	4b16      	ldr	r3, [pc, #88]	; (81e80 <cpu2_sv_status_getsystemstatus+0xb4>)
   81e28:	4798      	blx	r3
   81e2a:	4603      	mov	r3, r0
   81e2c:	b29b      	uxth	r3, r3
   81e2e:	823b      	strh	r3, [r7, #16]
	sensor_struct1.rudncy_irq			= CPU2_D_RD_SENSIN(SV_REDUNDANCY_IRQ);
   81e30:	2007      	movs	r0, #7
   81e32:	4b13      	ldr	r3, [pc, #76]	; (81e80 <cpu2_sv_status_getsystemstatus+0xb4>)
   81e34:	4798      	blx	r3
   81e36:	4603      	mov	r3, r0
   81e38:	b29b      	uxth	r3, r3
   81e3a:	83bb      	strh	r3, [r7, #28]
	
	
// 	sensor_struct->cond1_status			= sensor_struct1.cond1_status;
// 	sensor_struct->cond2_status			= sensor_struct1.cond2_status;
// 	sensor_struct->Tempstatus			= sensor_struct1.Tempstatus;
	sensor_struct->aptstatus			= sensor_struct1.aptstatus;
   81e3c:	89ba      	ldrh	r2, [r7, #12]
   81e3e:	687b      	ldr	r3, [r7, #4]
   81e40:	801a      	strh	r2, [r3, #0]
	sensor_struct->vptstatus			= sensor_struct1.vptstatus;
   81e42:	89fa      	ldrh	r2, [r7, #14]
   81e44:	687b      	ldr	r3, [r7, #4]
   81e46:	805a      	strh	r2, [r3, #2]
	
	
	sensor_struct->bdstatus				= sensor_struct1.bdstatus;
   81e48:	8a7a      	ldrh	r2, [r7, #18]
   81e4a:	687b      	ldr	r3, [r7, #4]
   81e4c:	80da      	strh	r2, [r3, #6]
	sensor_struct->abdstatus			= sensor_struct1.abdstatus;
   81e4e:	8a3a      	ldrh	r2, [r7, #16]
   81e50:	687b      	ldr	r3, [r7, #4]
   81e52:	809a      	strh	r2, [r3, #4]
	sensor_struct->bp_door				= sensor_struct1.bp_door;
   81e54:	8aba      	ldrh	r2, [r7, #20]
   81e56:	687b      	ldr	r3, [r7, #4]
   81e58:	811a      	strh	r2, [r3, #8]
	sensor_struct->bp_sense				= sensor_struct1.bp_sense;
   81e5a:	8afa      	ldrh	r2, [r7, #22]
   81e5c:	687b      	ldr	r3, [r7, #4]
   81e5e:	815a      	strh	r2, [r3, #10]
	sensor_struct->clamp_fdbk			= sensor_struct1.clamp_fdbk;
   81e60:	8b3a      	ldrh	r2, [r7, #24]
   81e62:	687b      	ldr	r3, [r7, #4]
   81e64:	819a      	strh	r2, [r3, #12]
	sensor_struct->clamp_door			= sensor_struct1.clamp_door;
   81e66:	8b7a      	ldrh	r2, [r7, #26]
   81e68:	687b      	ldr	r3, [r7, #4]
   81e6a:	81da      	strh	r2, [r3, #14]
	sensor_struct->rudncy_irq			= sensor_struct1.rudncy_irq;
   81e6c:	8bba      	ldrh	r2, [r7, #28]
   81e6e:	687b      	ldr	r3, [r7, #4]
   81e70:	821a      	strh	r2, [r3, #16]
	
	return 0;
   81e72:	2300      	movs	r3, #0

}
   81e74:	4618      	mov	r0, r3
   81e76:	3720      	adds	r7, #32
   81e78:	46bd      	mov	sp, r7
   81e7a:	bd80      	pop	{r7, pc}
   81e7c:	00081a3d 	.word	0x00081a3d
   81e80:	00081995 	.word	0x00081995

00081e84 <SV_put_sensor_data>:

bool SV_put_sensor_data(Sys_statusType* sensor_struct)   {
   81e84:	b580      	push	{r7, lr}
   81e86:	b084      	sub	sp, #16
   81e88:	af00      	add	r7, sp, #0
   81e8a:	6078      	str	r0, [r7, #4]
	
 DD_CAN_MAILBOX_SENSOR_DATA_REG_TYPE  SV_CAN_MAILBOX_SENSOR_DATA_REG;
	
	
	SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = HEMO_CPU_id ;
   81e8c:	2301      	movs	r3, #1
   81e8e:	723b      	strb	r3, [r7, #8]
	SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = GROUP_ID_7 ;
   81e90:	2307      	movs	r3, #7
   81e92:	727b      	strb	r3, [r7, #9]
	SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   = sensor_struct->aptstatus;
   81e94:	687b      	ldr	r3, [r7, #4]
   81e96:	881b      	ldrh	r3, [r3, #0]
   81e98:	817b      	strh	r3, [r7, #10]
	SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  = sensor_struct->vptstatus;
   81e9a:	687b      	ldr	r3, [r7, #4]
   81e9c:	885b      	ldrh	r3, [r3, #2]
   81e9e:	81bb      	strh	r3, [r7, #12]
	SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = fedbck_cnt1;
   81ea0:	4b06      	ldr	r3, [pc, #24]	; (81ebc <SV_put_sensor_data+0x38>)
   81ea2:	881b      	ldrh	r3, [r3, #0]
   81ea4:	81fb      	strh	r3, [r7, #14]
	SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG);
   81ea6:	f107 0308 	add.w	r3, r7, #8
   81eaa:	4618      	mov	r0, r3
   81eac:	4b04      	ldr	r3, [pc, #16]	; (81ec0 <SV_put_sensor_data+0x3c>)
   81eae:	4798      	blx	r3
	
	return ;
   81eb0:	bf00      	nop
   81eb2:	bf00      	nop
}
   81eb4:	4618      	mov	r0, r3
   81eb6:	3710      	adds	r7, #16
   81eb8:	46bd      	mov	sp, r7
   81eba:	bd80      	pop	{r7, pc}
   81ebc:	20070964 	.word	0x20070964
   81ec0:	00081ec5 	.word	0x00081ec5

00081ec4 <SV_SEND_CAN_MAILBOX>:


void SV_SEND_CAN_MAILBOX(DD_CAN_MAILBOX_SENSOR_DATA_REG_TYPE*  SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE)   {
   81ec4:	b580      	push	{r7, lr}
   81ec6:	b084      	sub	sp, #16
   81ec8:	af00      	add	r7, sp, #0
   81eca:	6078      	str	r0, [r7, #4]
	sv_data_size_type  sv_data_size;
	sv_data_size.bytearray[0]                                =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->CPU_SENDER_type_reg;
   81ecc:	687b      	ldr	r3, [r7, #4]
   81ece:	781b      	ldrb	r3, [r3, #0]
   81ed0:	723b      	strb	r3, [r7, #8]
	sv_data_size.bytearray[1]                                =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_GROUP_ID_type_reg;
   81ed2:	687b      	ldr	r3, [r7, #4]
   81ed4:	785b      	ldrb	r3, [r3, #1]
   81ed6:	727b      	strb	r3, [r7, #9]
	
	sv_data_size.Twobyte[1]                                  =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_1;
   81ed8:	687b      	ldr	r3, [r7, #4]
   81eda:	885b      	ldrh	r3, [r3, #2]
   81edc:	817b      	strh	r3, [r7, #10]
	sv_data_size.Twobyte[2]                                  =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_2;
   81ede:	687b      	ldr	r3, [r7, #4]
   81ee0:	889b      	ldrh	r3, [r3, #4]
   81ee2:	81bb      	strh	r3, [r7, #12]
	sv_data_size.Twobyte[3]                                  =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_3;
   81ee4:	687b      	ldr	r3, [r7, #4]
   81ee6:	88db      	ldrh	r3, [r3, #6]
   81ee8:	81fb      	strh	r3, [r7, #14]
	
	can0_mailbox.ul_datal                                    =sv_data_size.fourbyte[0];
   81eea:	68bb      	ldr	r3, [r7, #8]
   81eec:	4a14      	ldr	r2, [pc, #80]	; (81f40 <SV_SEND_CAN_MAILBOX+0x7c>)
   81eee:	6193      	str	r3, [r2, #24]
	can0_mailbox.ul_datah                                    =sv_data_size.fourbyte[1];
   81ef0:	68fb      	ldr	r3, [r7, #12]
   81ef2:	4a13      	ldr	r2, [pc, #76]	; (81f40 <SV_SEND_CAN_MAILBOX+0x7c>)
   81ef4:	61d3      	str	r3, [r2, #28]
	can0_mailbox.uc_length                                  = 8;
   81ef6:	4b12      	ldr	r3, [pc, #72]	; (81f40 <SV_SEND_CAN_MAILBOX+0x7c>)
   81ef8:	2208      	movs	r2, #8
   81efa:	719a      	strb	r2, [r3, #6]
	can0_mailbox.ul_mb_idx =   MAILBOX_0;
   81efc:	4b10      	ldr	r3, [pc, #64]	; (81f40 <SV_SEND_CAN_MAILBOX+0x7c>)
   81efe:	2200      	movs	r2, #0
   81f00:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;
   81f02:	4b0f      	ldr	r3, [pc, #60]	; (81f40 <SV_SEND_CAN_MAILBOX+0x7c>)
   81f04:	2203      	movs	r2, #3
   81f06:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 1;
   81f08:	4b0d      	ldr	r3, [pc, #52]	; (81f40 <SV_SEND_CAN_MAILBOX+0x7c>)
   81f0a:	2201      	movs	r2, #1
   81f0c:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   81f0e:	4b0c      	ldr	r3, [pc, #48]	; (81f40 <SV_SEND_CAN_MAILBOX+0x7c>)
   81f10:	2200      	movs	r2, #0
   81f12:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0x7FC ;
   81f14:	4b0a      	ldr	r3, [pc, #40]	; (81f40 <SV_SEND_CAN_MAILBOX+0x7c>)
   81f16:	f240 72fc 	movw	r2, #2044	; 0x7fc
   81f1a:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(MASTER_CPU_id); ;
   81f1c:	4b08      	ldr	r3, [pc, #32]	; (81f40 <SV_SEND_CAN_MAILBOX+0x7c>)
   81f1e:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   81f22:	611a      	str	r2, [r3, #16]
	while (CAN_MAILBOX_NOT_READY == dd_can_mailbox_write(&can0_mailbox));	
   81f24:	bf00      	nop
   81f26:	4806      	ldr	r0, [pc, #24]	; (81f40 <SV_SEND_CAN_MAILBOX+0x7c>)
   81f28:	4b06      	ldr	r3, [pc, #24]	; (81f44 <SV_SEND_CAN_MAILBOX+0x80>)
   81f2a:	4798      	blx	r3
   81f2c:	4603      	mov	r3, r0
   81f2e:	2b01      	cmp	r3, #1
   81f30:	d0f9      	beq.n	81f26 <SV_SEND_CAN_MAILBOX+0x62>
	//dd_can_mailbox_write(&can0_mailbox);
	dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
   81f32:	2001      	movs	r0, #1
   81f34:	4b04      	ldr	r3, [pc, #16]	; (81f48 <SV_SEND_CAN_MAILBOX+0x84>)
   81f36:	4798      	blx	r3
   81f38:	bf00      	nop
   81f3a:	3710      	adds	r7, #16
   81f3c:	46bd      	mov	sp, r7
   81f3e:	bd80      	pop	{r7, pc}
   81f40:	20070a58 	.word	0x20070a58
   81f44:	000805a1 	.word	0x000805a1
   81f48:	0008065d 	.word	0x0008065d

00081f4c <CPU2_S_SYSTEM_INIT>:
#include "S_SYS.h"
#include "Platform/Service/CPU2_S_TIMER/S_TIMER.h"
#include "Platform/Driver/Driver_calls.h"

void CPU2_S_SYSTEM_INIT()
{
   81f4c:	b580      	push	{r7, lr}
   81f4e:	af00      	add	r7, sp, #0
	CPU2_D_INIT_CLOCK();
   81f50:	4b0a      	ldr	r3, [pc, #40]	; (81f7c <CPU2_S_SYSTEM_INIT+0x30>)
   81f52:	4798      	blx	r3
//	CPU2_D_INIT_ADC();
	CPU2_D_INIT_INT();
   81f54:	4b0a      	ldr	r3, [pc, #40]	; (81f80 <CPU2_S_SYSTEM_INIT+0x34>)
   81f56:	4798      	blx	r3
	CPU2_D_INIT_PIO();
   81f58:	4b0a      	ldr	r3, [pc, #40]	; (81f84 <CPU2_S_SYSTEM_INIT+0x38>)
   81f5a:	4798      	blx	r3
	CPU2_D_INIT_PWM();
   81f5c:	4b0a      	ldr	r3, [pc, #40]	; (81f88 <CPU2_S_SYSTEM_INIT+0x3c>)
   81f5e:	4798      	blx	r3
	CPU2_D_INIT_TIMER();
   81f60:	4b0a      	ldr	r3, [pc, #40]	; (81f8c <CPU2_S_SYSTEM_INIT+0x40>)
   81f62:	4798      	blx	r3
	DD_INIT_CAN();
   81f64:	4b0a      	ldr	r3, [pc, #40]	; (81f90 <CPU2_S_SYSTEM_INIT+0x44>)
   81f66:	4798      	blx	r3
	CPU2_DD_INIT_SPI();
   81f68:	4b0a      	ldr	r3, [pc, #40]	; (81f94 <CPU2_S_SYSTEM_INIT+0x48>)
   81f6a:	4798      	blx	r3
	//CPU2_D_INIT_IIC();
	
	CPU2_S_START_TIMER(0,1000);			//1ms means 1000Hz interrupt frequency
   81f6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   81f70:	2000      	movs	r0, #0
   81f72:	4b09      	ldr	r3, [pc, #36]	; (81f98 <CPU2_S_SYSTEM_INIT+0x4c>)
   81f74:	4798      	blx	r3
}
   81f76:	bf00      	nop
   81f78:	bd80      	pop	{r7, pc}
   81f7a:	bf00      	nop
   81f7c:	00080195 	.word	0x00080195
   81f80:	000813f9 	.word	0x000813f9
   81f84:	00081025 	.word	0x00081025
   81f88:	000814bd 	.word	0x000814bd
   81f8c:	00081b2d 	.word	0x00081b2d
   81f90:	00080779 	.word	0x00080779
   81f94:	00080d4d 	.word	0x00080d4d
   81f98:	00081f9d 	.word	0x00081f9d

00081f9c <CPU2_S_START_TIMER>:
 */ 
#include "S_TIMER.h"


uint8_t CPU2_S_START_TIMER(uint8_t timer_no, uint32_t timer_res)
{
   81f9c:	b580      	push	{r7, lr}
   81f9e:	b082      	sub	sp, #8
   81fa0:	af00      	add	r7, sp, #0
   81fa2:	4603      	mov	r3, r0
   81fa4:	6039      	str	r1, [r7, #0]
   81fa6:	71fb      	strb	r3, [r7, #7]
	// 	timer_no = 2;
	// 	timer_res = 100;
	// 	printf("inside sv start");
	CPU2_D_CONFIG_TIMER(timer_no, timer_res);
   81fa8:	683b      	ldr	r3, [r7, #0]
   81faa:	b2da      	uxtb	r2, r3
   81fac:	79fb      	ldrb	r3, [r7, #7]
   81fae:	4611      	mov	r1, r2
   81fb0:	4618      	mov	r0, r3
   81fb2:	4b03      	ldr	r3, [pc, #12]	; (81fc0 <CPU2_S_START_TIMER+0x24>)
   81fb4:	4798      	blx	r3
	
	return 0;
   81fb6:	2300      	movs	r3, #0
}
   81fb8:	4618      	mov	r0, r3
   81fba:	3708      	adds	r7, #8
   81fbc:	46bd      	mov	sp, r7
   81fbe:	bd80      	pop	{r7, pc}
   81fc0:	00081a85 	.word	0x00081a85

00081fc4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   81fc4:	b580      	push	{r7, lr}
   81fc6:	b086      	sub	sp, #24
   81fc8:	af00      	add	r7, sp, #0
   81fca:	60f8      	str	r0, [r7, #12]
   81fcc:	60b9      	str	r1, [r7, #8]
   81fce:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   81fd0:	2300      	movs	r3, #0
   81fd2:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   81fd4:	68fb      	ldr	r3, [r7, #12]
   81fd6:	2b00      	cmp	r3, #0
   81fd8:	d012      	beq.n	82000 <_read+0x3c>
		return -1;
   81fda:	f04f 33ff 	mov.w	r3, #4294967295
   81fde:	e013      	b.n	82008 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   81fe0:	4b0b      	ldr	r3, [pc, #44]	; (82010 <_read+0x4c>)
   81fe2:	681b      	ldr	r3, [r3, #0]
   81fe4:	4a0b      	ldr	r2, [pc, #44]	; (82014 <_read+0x50>)
   81fe6:	6812      	ldr	r2, [r2, #0]
   81fe8:	68b9      	ldr	r1, [r7, #8]
   81fea:	4610      	mov	r0, r2
   81fec:	4798      	blx	r3
		ptr++;
   81fee:	68bb      	ldr	r3, [r7, #8]
   81ff0:	3301      	adds	r3, #1
   81ff2:	60bb      	str	r3, [r7, #8]
		nChars++;
   81ff4:	697b      	ldr	r3, [r7, #20]
   81ff6:	3301      	adds	r3, #1
   81ff8:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   81ffa:	687b      	ldr	r3, [r7, #4]
   81ffc:	3b01      	subs	r3, #1
   81ffe:	607b      	str	r3, [r7, #4]
   82000:	687b      	ldr	r3, [r7, #4]
   82002:	2b00      	cmp	r3, #0
   82004:	dcec      	bgt.n	81fe0 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   82006:	697b      	ldr	r3, [r7, #20]
}
   82008:	4618      	mov	r0, r3
   8200a:	3718      	adds	r7, #24
   8200c:	46bd      	mov	sp, r7
   8200e:	bd80      	pop	{r7, pc}
   82010:	20070e9c 	.word	0x20070e9c
   82014:	20070ea4 	.word	0x20070ea4

00082018 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   82018:	b580      	push	{r7, lr}
   8201a:	b086      	sub	sp, #24
   8201c:	af00      	add	r7, sp, #0
   8201e:	60f8      	str	r0, [r7, #12]
   82020:	60b9      	str	r1, [r7, #8]
   82022:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   82024:	2300      	movs	r3, #0
   82026:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   82028:	68fb      	ldr	r3, [r7, #12]
   8202a:	2b01      	cmp	r3, #1
   8202c:	d01e      	beq.n	8206c <_write+0x54>
   8202e:	68fb      	ldr	r3, [r7, #12]
   82030:	2b02      	cmp	r3, #2
   82032:	d01b      	beq.n	8206c <_write+0x54>
   82034:	68fb      	ldr	r3, [r7, #12]
   82036:	2b03      	cmp	r3, #3
   82038:	d018      	beq.n	8206c <_write+0x54>
		return -1;
   8203a:	f04f 33ff 	mov.w	r3, #4294967295
   8203e:	e019      	b.n	82074 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   82040:	4b0e      	ldr	r3, [pc, #56]	; (8207c <_write+0x64>)
   82042:	681a      	ldr	r2, [r3, #0]
   82044:	4b0e      	ldr	r3, [pc, #56]	; (82080 <_write+0x68>)
   82046:	6818      	ldr	r0, [r3, #0]
   82048:	68bb      	ldr	r3, [r7, #8]
   8204a:	1c59      	adds	r1, r3, #1
   8204c:	60b9      	str	r1, [r7, #8]
   8204e:	781b      	ldrb	r3, [r3, #0]
   82050:	4619      	mov	r1, r3
   82052:	4790      	blx	r2
   82054:	4603      	mov	r3, r0
   82056:	2b00      	cmp	r3, #0
   82058:	da02      	bge.n	82060 <_write+0x48>
			return -1;
   8205a:	f04f 33ff 	mov.w	r3, #4294967295
   8205e:	e009      	b.n	82074 <_write+0x5c>
		}
		++nChars;
   82060:	697b      	ldr	r3, [r7, #20]
   82062:	3301      	adds	r3, #1
   82064:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   82066:	687b      	ldr	r3, [r7, #4]
   82068:	3b01      	subs	r3, #1
   8206a:	607b      	str	r3, [r7, #4]
   8206c:	687b      	ldr	r3, [r7, #4]
   8206e:	2b00      	cmp	r3, #0
   82070:	d1e6      	bne.n	82040 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   82072:	697b      	ldr	r3, [r7, #20]
}
   82074:	4618      	mov	r0, r3
   82076:	3718      	adds	r7, #24
   82078:	46bd      	mov	sp, r7
   8207a:	bd80      	pop	{r7, pc}
   8207c:	20070ea0 	.word	0x20070ea0
   82080:	20070ea4 	.word	0x20070ea4

00082084 <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
   82084:	b480      	push	{r7}
   82086:	b087      	sub	sp, #28
   82088:	af00      	add	r7, sp, #0
   8208a:	60f8      	str	r0, [r7, #12]
   8208c:	60b9      	str	r1, [r7, #8]
   8208e:	607a      	str	r2, [r7, #4]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   82090:	68fa      	ldr	r2, [r7, #12]
   82092:	68bb      	ldr	r3, [r7, #8]
   82094:	019b      	lsls	r3, r3, #6
   82096:	4413      	add	r3, r2
   82098:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   8209a:	697b      	ldr	r3, [r7, #20]
   8209c:	2202      	movs	r2, #2
   8209e:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   820a0:	697b      	ldr	r3, [r7, #20]
   820a2:	f04f 32ff 	mov.w	r2, #4294967295
   820a6:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   820a8:	697b      	ldr	r3, [r7, #20]
   820aa:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   820ac:	697b      	ldr	r3, [r7, #20]
   820ae:	687a      	ldr	r2, [r7, #4]
   820b0:	605a      	str	r2, [r3, #4]
}
   820b2:	bf00      	nop
   820b4:	371c      	adds	r7, #28
   820b6:	46bd      	mov	sp, r7
   820b8:	bc80      	pop	{r7}
   820ba:	4770      	bx	lr

000820bc <tc_start>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 */
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
   820bc:	b480      	push	{r7}
   820be:	b083      	sub	sp, #12
   820c0:	af00      	add	r7, sp, #0
   820c2:	6078      	str	r0, [r7, #4]
   820c4:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   820c6:	687a      	ldr	r2, [r7, #4]
   820c8:	683b      	ldr	r3, [r7, #0]
   820ca:	019b      	lsls	r3, r3, #6
   820cc:	4413      	add	r3, r2
   820ce:	2205      	movs	r2, #5
   820d0:	601a      	str	r2, [r3, #0]
}
   820d2:	bf00      	nop
   820d4:	370c      	adds	r7, #12
   820d6:	46bd      	mov	sp, r7
   820d8:	bc80      	pop	{r7}
   820da:	4770      	bx	lr

000820dc <tc_stop>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 */
void tc_stop(Tc *p_tc, uint32_t ul_channel)
{
   820dc:	b480      	push	{r7}
   820de:	b083      	sub	sp, #12
   820e0:	af00      	add	r7, sp, #0
   820e2:	6078      	str	r0, [r7, #4]
   820e4:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   820e6:	687a      	ldr	r2, [r7, #4]
   820e8:	683b      	ldr	r3, [r7, #0]
   820ea:	019b      	lsls	r3, r3, #6
   820ec:	4413      	add	r3, r2
   820ee:	2202      	movs	r2, #2
   820f0:	601a      	str	r2, [r3, #0]
}
   820f2:	bf00      	nop
   820f4:	370c      	adds	r7, #12
   820f6:	46bd      	mov	sp, r7
   820f8:	bc80      	pop	{r7}
   820fa:	4770      	bx	lr

000820fc <tc_write_rc>:
 * \param ul_channel Channel to configure.
 * \param ul_value Value to set in register.
 */
void tc_write_rc(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_value)
{
   820fc:	b480      	push	{r7}
   820fe:	b085      	sub	sp, #20
   82100:	af00      	add	r7, sp, #0
   82102:	60f8      	str	r0, [r7, #12]
   82104:	60b9      	str	r1, [r7, #8]
   82106:	607a      	str	r2, [r7, #4]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   82108:	68fa      	ldr	r2, [r7, #12]
   8210a:	68bb      	ldr	r3, [r7, #8]
   8210c:	019b      	lsls	r3, r3, #6
   8210e:	4413      	add	r3, r2
   82110:	331c      	adds	r3, #28
   82112:	687a      	ldr	r2, [r7, #4]
   82114:	601a      	str	r2, [r3, #0]
}
   82116:	bf00      	nop
   82118:	3714      	adds	r7, #20
   8211a:	46bd      	mov	sp, r7
   8211c:	bc80      	pop	{r7}
   8211e:	4770      	bx	lr

00082120 <tc_enable_interrupt>:
 * \param ul_channel Channel to configure.
 * \param ul_sources Interrupt sources bit map.
 */
void tc_enable_interrupt(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_sources)
{
   82120:	b480      	push	{r7}
   82122:	b087      	sub	sp, #28
   82124:	af00      	add	r7, sp, #0
   82126:	60f8      	str	r0, [r7, #12]
   82128:	60b9      	str	r1, [r7, #8]
   8212a:	607a      	str	r2, [r7, #4]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8212c:	68fa      	ldr	r2, [r7, #12]
   8212e:	68bb      	ldr	r3, [r7, #8]
   82130:	019b      	lsls	r3, r3, #6
   82132:	4413      	add	r3, r2
   82134:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
   82136:	697b      	ldr	r3, [r7, #20]
   82138:	687a      	ldr	r2, [r7, #4]
   8213a:	625a      	str	r2, [r3, #36]	; 0x24
}
   8213c:	bf00      	nop
   8213e:	371c      	adds	r7, #28
   82140:	46bd      	mov	sp, r7
   82142:	bc80      	pop	{r7}
   82144:	4770      	bx	lr
   82146:	bf00      	nop

00082148 <tc_get_status>:
 * \param ul_channel Channel to configure.
 *
 * \return The current TC status.
 */
uint32_t tc_get_status(Tc *p_tc, uint32_t ul_channel)
{
   82148:	b480      	push	{r7}
   8214a:	b085      	sub	sp, #20
   8214c:	af00      	add	r7, sp, #0
   8214e:	6078      	str	r0, [r7, #4]
   82150:	6039      	str	r1, [r7, #0]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   82152:	687a      	ldr	r2, [r7, #4]
   82154:	683b      	ldr	r3, [r7, #0]
   82156:	019b      	lsls	r3, r3, #6
   82158:	4413      	add	r3, r2
   8215a:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
   8215c:	68fb      	ldr	r3, [r7, #12]
   8215e:	6a1b      	ldr	r3, [r3, #32]
}
   82160:	4618      	mov	r0, r3
   82162:	3714      	adds	r7, #20
   82164:	46bd      	mov	sp, r7
   82166:	bc80      	pop	{r7}
   82168:	4770      	bx	lr
   8216a:	bf00      	nop

0008216c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   8216c:	b480      	push	{r7}
   8216e:	b085      	sub	sp, #20
   82170:	af00      	add	r7, sp, #0
   82172:	6078      	str	r0, [r7, #4]
   82174:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
   82176:	2300      	movs	r3, #0
   82178:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8217a:	687b      	ldr	r3, [r7, #4]
   8217c:	22ac      	movs	r2, #172	; 0xac
   8217e:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   82180:	683b      	ldr	r3, [r7, #0]
   82182:	681a      	ldr	r2, [r3, #0]
   82184:	683b      	ldr	r3, [r7, #0]
   82186:	685b      	ldr	r3, [r3, #4]
   82188:	fbb2 f3f3 	udiv	r3, r2, r3
   8218c:	091b      	lsrs	r3, r3, #4
   8218e:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   82190:	68fb      	ldr	r3, [r7, #12]
   82192:	2b00      	cmp	r3, #0
   82194:	d003      	beq.n	8219e <uart_init+0x32>
   82196:	68fb      	ldr	r3, [r7, #12]
   82198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   8219c:	d301      	bcc.n	821a2 <uart_init+0x36>
		return 1;
   8219e:	2301      	movs	r3, #1
   821a0:	e00f      	b.n	821c2 <uart_init+0x56>

	p_uart->UART_BRGR = cd;
   821a2:	687b      	ldr	r3, [r7, #4]
   821a4:	68fa      	ldr	r2, [r7, #12]
   821a6:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   821a8:	683b      	ldr	r3, [r7, #0]
   821aa:	689a      	ldr	r2, [r3, #8]
   821ac:	687b      	ldr	r3, [r7, #4]
   821ae:	605a      	str	r2, [r3, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   821b0:	687b      	ldr	r3, [r7, #4]
   821b2:	f240 2202 	movw	r2, #514	; 0x202
   821b6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   821ba:	687b      	ldr	r3, [r7, #4]
   821bc:	2250      	movs	r2, #80	; 0x50
   821be:	601a      	str	r2, [r3, #0]

	return 0;
   821c0:	2300      	movs	r3, #0
}
   821c2:	4618      	mov	r0, r3
   821c4:	3714      	adds	r7, #20
   821c6:	46bd      	mov	sp, r7
   821c8:	bc80      	pop	{r7}
   821ca:	4770      	bx	lr

000821cc <uart_enable_interrupt>:
 *
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
   821cc:	b480      	push	{r7}
   821ce:	b083      	sub	sp, #12
   821d0:	af00      	add	r7, sp, #0
   821d2:	6078      	str	r0, [r7, #4]
   821d4:	6039      	str	r1, [r7, #0]
	p_uart->UART_IER = ul_sources;
   821d6:	687b      	ldr	r3, [r7, #4]
   821d8:	683a      	ldr	r2, [r7, #0]
   821da:	609a      	str	r2, [r3, #8]
}
   821dc:	bf00      	nop
   821de:	370c      	adds	r7, #12
   821e0:	46bd      	mov	sp, r7
   821e2:	bc80      	pop	{r7}
   821e4:	4770      	bx	lr
   821e6:	bf00      	nop

000821e8 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
   821e8:	b480      	push	{r7}
   821ea:	b083      	sub	sp, #12
   821ec:	af00      	add	r7, sp, #0
   821ee:	6078      	str	r0, [r7, #4]
   821f0:	460b      	mov	r3, r1
   821f2:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   821f4:	687b      	ldr	r3, [r7, #4]
   821f6:	695b      	ldr	r3, [r3, #20]
   821f8:	f003 0302 	and.w	r3, r3, #2
   821fc:	2b00      	cmp	r3, #0
   821fe:	d101      	bne.n	82204 <uart_write+0x1c>
		return 1;
   82200:	2301      	movs	r3, #1
   82202:	e003      	b.n	8220c <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
   82204:	78fa      	ldrb	r2, [r7, #3]
   82206:	687b      	ldr	r3, [r7, #4]
   82208:	61da      	str	r2, [r3, #28]
	return 0;
   8220a:	2300      	movs	r3, #0
}
   8220c:	4618      	mov	r0, r3
   8220e:	370c      	adds	r7, #12
   82210:	46bd      	mov	sp, r7
   82212:	bc80      	pop	{r7}
   82214:	4770      	bx	lr
   82216:	bf00      	nop

00082218 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
   82218:	b480      	push	{r7}
   8221a:	b083      	sub	sp, #12
   8221c:	af00      	add	r7, sp, #0
   8221e:	6078      	str	r0, [r7, #4]
   82220:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   82222:	687b      	ldr	r3, [r7, #4]
   82224:	695b      	ldr	r3, [r3, #20]
   82226:	f003 0301 	and.w	r3, r3, #1
   8222a:	2b00      	cmp	r3, #0
   8222c:	d101      	bne.n	82232 <uart_read+0x1a>
		return 1;
   8222e:	2301      	movs	r3, #1
   82230:	e005      	b.n	8223e <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   82232:	687b      	ldr	r3, [r7, #4]
   82234:	699b      	ldr	r3, [r3, #24]
   82236:	b2da      	uxtb	r2, r3
   82238:	683b      	ldr	r3, [r7, #0]
   8223a:	701a      	strb	r2, [r3, #0]
	return 0;
   8223c:	2300      	movs	r3, #0
}
   8223e:	4618      	mov	r0, r3
   82240:	370c      	adds	r7, #12
   82242:	46bd      	mov	sp, r7
   82244:	bc80      	pop	{r7}
   82246:	4770      	bx	lr

00082248 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   82248:	b480      	push	{r7}
   8224a:	b089      	sub	sp, #36	; 0x24
   8224c:	af00      	add	r7, sp, #0
   8224e:	60f8      	str	r0, [r7, #12]
   82250:	60b9      	str	r1, [r7, #8]
   82252:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   82254:	68bb      	ldr	r3, [r7, #8]
   82256:	011a      	lsls	r2, r3, #4
   82258:	687b      	ldr	r3, [r7, #4]
   8225a:	429a      	cmp	r2, r3
   8225c:	d802      	bhi.n	82264 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   8225e:	2310      	movs	r3, #16
   82260:	61fb      	str	r3, [r7, #28]
   82262:	e001      	b.n	82268 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   82264:	2308      	movs	r3, #8
   82266:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   82268:	687b      	ldr	r3, [r7, #4]
   8226a:	00da      	lsls	r2, r3, #3
   8226c:	69fb      	ldr	r3, [r7, #28]
   8226e:	68b9      	ldr	r1, [r7, #8]
   82270:	fb01 f303 	mul.w	r3, r1, r3
   82274:	085b      	lsrs	r3, r3, #1
   82276:	441a      	add	r2, r3
   82278:	69fb      	ldr	r3, [r7, #28]
   8227a:	68b9      	ldr	r1, [r7, #8]
   8227c:	fb01 f303 	mul.w	r3, r1, r3
   82280:	fbb2 f3f3 	udiv	r3, r2, r3
   82284:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   82286:	69bb      	ldr	r3, [r7, #24]
   82288:	08db      	lsrs	r3, r3, #3
   8228a:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   8228c:	69bb      	ldr	r3, [r7, #24]
   8228e:	f003 0307 	and.w	r3, r3, #7
   82292:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   82294:	697b      	ldr	r3, [r7, #20]
   82296:	2b00      	cmp	r3, #0
   82298:	d003      	beq.n	822a2 <usart_set_async_baudrate+0x5a>
   8229a:	697b      	ldr	r3, [r7, #20]
   8229c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   822a0:	d301      	bcc.n	822a6 <usart_set_async_baudrate+0x5e>
		return 1;
   822a2:	2301      	movs	r3, #1
   822a4:	e00f      	b.n	822c6 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   822a6:	69fb      	ldr	r3, [r7, #28]
   822a8:	2b08      	cmp	r3, #8
   822aa:	d105      	bne.n	822b8 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   822ac:	68fb      	ldr	r3, [r7, #12]
   822ae:	685b      	ldr	r3, [r3, #4]
   822b0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   822b4:	68fb      	ldr	r3, [r7, #12]
   822b6:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   822b8:	693b      	ldr	r3, [r7, #16]
   822ba:	041a      	lsls	r2, r3, #16
   822bc:	697b      	ldr	r3, [r7, #20]
   822be:	431a      	orrs	r2, r3
   822c0:	68fb      	ldr	r3, [r7, #12]
   822c2:	621a      	str	r2, [r3, #32]

	return 0;
   822c4:	2300      	movs	r3, #0
}
   822c6:	4618      	mov	r0, r3
   822c8:	3724      	adds	r7, #36	; 0x24
   822ca:	46bd      	mov	sp, r7
   822cc:	bc80      	pop	{r7}
   822ce:	4770      	bx	lr

000822d0 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   822d0:	b580      	push	{r7, lr}
   822d2:	b082      	sub	sp, #8
   822d4:	af00      	add	r7, sp, #0
   822d6:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   822d8:	6878      	ldr	r0, [r7, #4]
   822da:	4b0d      	ldr	r3, [pc, #52]	; (82310 <usart_reset+0x40>)
   822dc:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   822de:	687b      	ldr	r3, [r7, #4]
   822e0:	2200      	movs	r2, #0
   822e2:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   822e4:	687b      	ldr	r3, [r7, #4]
   822e6:	2200      	movs	r2, #0
   822e8:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   822ea:	687b      	ldr	r3, [r7, #4]
   822ec:	2200      	movs	r2, #0
   822ee:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   822f0:	6878      	ldr	r0, [r7, #4]
   822f2:	4b08      	ldr	r3, [pc, #32]	; (82314 <usart_reset+0x44>)
   822f4:	4798      	blx	r3
	usart_reset_rx(p_usart);
   822f6:	6878      	ldr	r0, [r7, #4]
   822f8:	4b07      	ldr	r3, [pc, #28]	; (82318 <usart_reset+0x48>)
   822fa:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   822fc:	6878      	ldr	r0, [r7, #4]
   822fe:	4b07      	ldr	r3, [pc, #28]	; (8231c <usart_reset+0x4c>)
   82300:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   82302:	6878      	ldr	r0, [r7, #4]
   82304:	4b06      	ldr	r3, [pc, #24]	; (82320 <usart_reset+0x50>)
   82306:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   82308:	bf00      	nop
   8230a:	3708      	adds	r7, #8
   8230c:	46bd      	mov	sp, r7
   8230e:	bd80      	pop	{r7, pc}
   82310:	000824a5 	.word	0x000824a5
   82314:	000823c1 	.word	0x000823c1
   82318:	000823f1 	.word	0x000823f1
   8231c:	00082409 	.word	0x00082409
   82320:	00082425 	.word	0x00082425

00082324 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   82324:	b580      	push	{r7, lr}
   82326:	b084      	sub	sp, #16
   82328:	af00      	add	r7, sp, #0
   8232a:	60f8      	str	r0, [r7, #12]
   8232c:	60b9      	str	r1, [r7, #8]
   8232e:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   82330:	68f8      	ldr	r0, [r7, #12]
   82332:	4b1a      	ldr	r3, [pc, #104]	; (8239c <usart_init_rs232+0x78>)
   82334:	4798      	blx	r3

	ul_reg_val = 0;
   82336:	4b1a      	ldr	r3, [pc, #104]	; (823a0 <usart_init_rs232+0x7c>)
   82338:	2200      	movs	r2, #0
   8233a:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   8233c:	68bb      	ldr	r3, [r7, #8]
   8233e:	2b00      	cmp	r3, #0
   82340:	d009      	beq.n	82356 <usart_init_rs232+0x32>
   82342:	68bb      	ldr	r3, [r7, #8]
   82344:	681b      	ldr	r3, [r3, #0]
   82346:	687a      	ldr	r2, [r7, #4]
   82348:	4619      	mov	r1, r3
   8234a:	68f8      	ldr	r0, [r7, #12]
   8234c:	4b15      	ldr	r3, [pc, #84]	; (823a4 <usart_init_rs232+0x80>)
   8234e:	4798      	blx	r3
   82350:	4603      	mov	r3, r0
   82352:	2b00      	cmp	r3, #0
   82354:	d001      	beq.n	8235a <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   82356:	2301      	movs	r3, #1
   82358:	e01b      	b.n	82392 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   8235a:	68bb      	ldr	r3, [r7, #8]
   8235c:	685a      	ldr	r2, [r3, #4]
   8235e:	68bb      	ldr	r3, [r7, #8]
   82360:	689b      	ldr	r3, [r3, #8]
   82362:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   82364:	68bb      	ldr	r3, [r7, #8]
   82366:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   82368:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   8236a:	68bb      	ldr	r3, [r7, #8]
   8236c:	68db      	ldr	r3, [r3, #12]
   8236e:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   82370:	4b0b      	ldr	r3, [pc, #44]	; (823a0 <usart_init_rs232+0x7c>)
   82372:	681b      	ldr	r3, [r3, #0]
   82374:	4313      	orrs	r3, r2
   82376:	4a0a      	ldr	r2, [pc, #40]	; (823a0 <usart_init_rs232+0x7c>)
   82378:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   8237a:	4b09      	ldr	r3, [pc, #36]	; (823a0 <usart_init_rs232+0x7c>)
   8237c:	681b      	ldr	r3, [r3, #0]
   8237e:	4a08      	ldr	r2, [pc, #32]	; (823a0 <usart_init_rs232+0x7c>)
   82380:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
   82382:	68fb      	ldr	r3, [r7, #12]
   82384:	685a      	ldr	r2, [r3, #4]
   82386:	4b06      	ldr	r3, [pc, #24]	; (823a0 <usart_init_rs232+0x7c>)
   82388:	681b      	ldr	r3, [r3, #0]
   8238a:	431a      	orrs	r2, r3
   8238c:	68fb      	ldr	r3, [r7, #12]
   8238e:	605a      	str	r2, [r3, #4]

	return 0;
   82390:	2300      	movs	r3, #0
}
   82392:	4618      	mov	r0, r3
   82394:	3710      	adds	r7, #16
   82396:	46bd      	mov	sp, r7
   82398:	bd80      	pop	{r7, pc}
   8239a:	bf00      	nop
   8239c:	000822d1 	.word	0x000822d1
   823a0:	2007097c 	.word	0x2007097c
   823a4:	00082249 	.word	0x00082249

000823a8 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   823a8:	b480      	push	{r7}
   823aa:	b083      	sub	sp, #12
   823ac:	af00      	add	r7, sp, #0
   823ae:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   823b0:	687b      	ldr	r3, [r7, #4]
   823b2:	2240      	movs	r2, #64	; 0x40
   823b4:	601a      	str	r2, [r3, #0]
}
   823b6:	bf00      	nop
   823b8:	370c      	adds	r7, #12
   823ba:	46bd      	mov	sp, r7
   823bc:	bc80      	pop	{r7}
   823be:	4770      	bx	lr

000823c0 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   823c0:	b480      	push	{r7}
   823c2:	b083      	sub	sp, #12
   823c4:	af00      	add	r7, sp, #0
   823c6:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   823c8:	687b      	ldr	r3, [r7, #4]
   823ca:	2288      	movs	r2, #136	; 0x88
   823cc:	601a      	str	r2, [r3, #0]
}
   823ce:	bf00      	nop
   823d0:	370c      	adds	r7, #12
   823d2:	46bd      	mov	sp, r7
   823d4:	bc80      	pop	{r7}
   823d6:	4770      	bx	lr

000823d8 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   823d8:	b480      	push	{r7}
   823da:	b083      	sub	sp, #12
   823dc:	af00      	add	r7, sp, #0
   823de:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   823e0:	687b      	ldr	r3, [r7, #4]
   823e2:	2210      	movs	r2, #16
   823e4:	601a      	str	r2, [r3, #0]
}
   823e6:	bf00      	nop
   823e8:	370c      	adds	r7, #12
   823ea:	46bd      	mov	sp, r7
   823ec:	bc80      	pop	{r7}
   823ee:	4770      	bx	lr

000823f0 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   823f0:	b480      	push	{r7}
   823f2:	b083      	sub	sp, #12
   823f4:	af00      	add	r7, sp, #0
   823f6:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   823f8:	687b      	ldr	r3, [r7, #4]
   823fa:	2224      	movs	r2, #36	; 0x24
   823fc:	601a      	str	r2, [r3, #0]
}
   823fe:	bf00      	nop
   82400:	370c      	adds	r7, #12
   82402:	46bd      	mov	sp, r7
   82404:	bc80      	pop	{r7}
   82406:	4770      	bx	lr

00082408 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   82408:	b480      	push	{r7}
   8240a:	b083      	sub	sp, #12
   8240c:	af00      	add	r7, sp, #0
   8240e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   82410:	687b      	ldr	r3, [r7, #4]
   82412:	f44f 7280 	mov.w	r2, #256	; 0x100
   82416:	601a      	str	r2, [r3, #0]
}
   82418:	bf00      	nop
   8241a:	370c      	adds	r7, #12
   8241c:	46bd      	mov	sp, r7
   8241e:	bc80      	pop	{r7}
   82420:	4770      	bx	lr
   82422:	bf00      	nop

00082424 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   82424:	b480      	push	{r7}
   82426:	b083      	sub	sp, #12
   82428:	af00      	add	r7, sp, #0
   8242a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   8242c:	687b      	ldr	r3, [r7, #4]
   8242e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   82432:	601a      	str	r2, [r3, #0]
}
   82434:	bf00      	nop
   82436:	370c      	adds	r7, #12
   82438:	46bd      	mov	sp, r7
   8243a:	bc80      	pop	{r7}
   8243c:	4770      	bx	lr
   8243e:	bf00      	nop

00082440 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   82440:	b480      	push	{r7}
   82442:	b083      	sub	sp, #12
   82444:	af00      	add	r7, sp, #0
   82446:	6078      	str	r0, [r7, #4]
   82448:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8244a:	687b      	ldr	r3, [r7, #4]
   8244c:	695b      	ldr	r3, [r3, #20]
   8244e:	f003 0302 	and.w	r3, r3, #2
   82452:	2b00      	cmp	r3, #0
   82454:	d101      	bne.n	8245a <usart_write+0x1a>
		return 1;
   82456:	2301      	movs	r3, #1
   82458:	e005      	b.n	82466 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8245a:	683b      	ldr	r3, [r7, #0]
   8245c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   82460:	687b      	ldr	r3, [r7, #4]
   82462:	61da      	str	r2, [r3, #28]
	return 0;
   82464:	2300      	movs	r3, #0
}
   82466:	4618      	mov	r0, r3
   82468:	370c      	adds	r7, #12
   8246a:	46bd      	mov	sp, r7
   8246c:	bc80      	pop	{r7}
   8246e:	4770      	bx	lr

00082470 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
   82470:	b480      	push	{r7}
   82472:	b083      	sub	sp, #12
   82474:	af00      	add	r7, sp, #0
   82476:	6078      	str	r0, [r7, #4]
   82478:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8247a:	687b      	ldr	r3, [r7, #4]
   8247c:	695b      	ldr	r3, [r3, #20]
   8247e:	f003 0301 	and.w	r3, r3, #1
   82482:	2b00      	cmp	r3, #0
   82484:	d101      	bne.n	8248a <usart_read+0x1a>
		return 1;
   82486:	2301      	movs	r3, #1
   82488:	e006      	b.n	82498 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   8248a:	687b      	ldr	r3, [r7, #4]
   8248c:	699b      	ldr	r3, [r3, #24]
   8248e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   82492:	683b      	ldr	r3, [r7, #0]
   82494:	601a      	str	r2, [r3, #0]

	return 0;
   82496:	2300      	movs	r3, #0
}
   82498:	4618      	mov	r0, r3
   8249a:	370c      	adds	r7, #12
   8249c:	46bd      	mov	sp, r7
   8249e:	bc80      	pop	{r7}
   824a0:	4770      	bx	lr
   824a2:	bf00      	nop

000824a4 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   824a4:	b480      	push	{r7}
   824a6:	b083      	sub	sp, #12
   824a8:	af00      	add	r7, sp, #0
   824aa:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
   824ac:	687b      	ldr	r3, [r7, #4]
   824ae:	4a04      	ldr	r2, [pc, #16]	; (824c0 <usart_disable_writeprotect+0x1c>)
   824b0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   824b4:	bf00      	nop
   824b6:	370c      	adds	r7, #12
   824b8:	46bd      	mov	sp, r7
   824ba:	bc80      	pop	{r7}
   824bc:	4770      	bx	lr
   824be:	bf00      	nop
   824c0:	55534100 	.word	0x55534100

000824c4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   824c4:	b480      	push	{r7}
   824c6:	b083      	sub	sp, #12
   824c8:	af00      	add	r7, sp, #0
   824ca:	4603      	mov	r3, r0
   824cc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   824ce:	4908      	ldr	r1, [pc, #32]	; (824f0 <NVIC_EnableIRQ+0x2c>)
   824d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   824d4:	095b      	lsrs	r3, r3, #5
   824d6:	79fa      	ldrb	r2, [r7, #7]
   824d8:	f002 021f 	and.w	r2, r2, #31
   824dc:	2001      	movs	r0, #1
   824de:	fa00 f202 	lsl.w	r2, r0, r2
   824e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   824e6:	bf00      	nop
   824e8:	370c      	adds	r7, #12
   824ea:	46bd      	mov	sp, r7
   824ec:	bc80      	pop	{r7}
   824ee:	4770      	bx	lr
   824f0:	e000e100 	.word	0xe000e100

000824f4 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   824f4:	b480      	push	{r7}
   824f6:	b083      	sub	sp, #12
   824f8:	af00      	add	r7, sp, #0
   824fa:	4603      	mov	r3, r0
   824fc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   824fe:	4909      	ldr	r1, [pc, #36]	; (82524 <NVIC_DisableIRQ+0x30>)
   82500:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82504:	095b      	lsrs	r3, r3, #5
   82506:	79fa      	ldrb	r2, [r7, #7]
   82508:	f002 021f 	and.w	r2, r2, #31
   8250c:	2001      	movs	r0, #1
   8250e:	fa00 f202 	lsl.w	r2, r0, r2
   82512:	3320      	adds	r3, #32
   82514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   82518:	bf00      	nop
   8251a:	370c      	adds	r7, #12
   8251c:	46bd      	mov	sp, r7
   8251e:	bc80      	pop	{r7}
   82520:	4770      	bx	lr
   82522:	bf00      	nop
   82524:	e000e100 	.word	0xe000e100

00082528 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   82528:	b480      	push	{r7}
   8252a:	b083      	sub	sp, #12
   8252c:	af00      	add	r7, sp, #0
   8252e:	4603      	mov	r3, r0
   82530:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   82532:	4909      	ldr	r1, [pc, #36]	; (82558 <NVIC_ClearPendingIRQ+0x30>)
   82534:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82538:	095b      	lsrs	r3, r3, #5
   8253a:	79fa      	ldrb	r2, [r7, #7]
   8253c:	f002 021f 	and.w	r2, r2, #31
   82540:	2001      	movs	r0, #1
   82542:	fa00 f202 	lsl.w	r2, r0, r2
   82546:	3360      	adds	r3, #96	; 0x60
   82548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   8254c:	bf00      	nop
   8254e:	370c      	adds	r7, #12
   82550:	46bd      	mov	sp, r7
   82552:	bc80      	pop	{r7}
   82554:	4770      	bx	lr
   82556:	bf00      	nop
   82558:	e000e100 	.word	0xe000e100

0008255c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   8255c:	b480      	push	{r7}
   8255e:	b083      	sub	sp, #12
   82560:	af00      	add	r7, sp, #0
   82562:	4603      	mov	r3, r0
   82564:	6039      	str	r1, [r7, #0]
   82566:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   82568:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8256c:	2b00      	cmp	r3, #0
   8256e:	da0b      	bge.n	82588 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   82570:	490d      	ldr	r1, [pc, #52]	; (825a8 <NVIC_SetPriority+0x4c>)
   82572:	79fb      	ldrb	r3, [r7, #7]
   82574:	f003 030f 	and.w	r3, r3, #15
   82578:	3b04      	subs	r3, #4
   8257a:	683a      	ldr	r2, [r7, #0]
   8257c:	b2d2      	uxtb	r2, r2
   8257e:	0112      	lsls	r2, r2, #4
   82580:	b2d2      	uxtb	r2, r2
   82582:	440b      	add	r3, r1
   82584:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   82586:	e009      	b.n	8259c <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   82588:	4908      	ldr	r1, [pc, #32]	; (825ac <NVIC_SetPriority+0x50>)
   8258a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8258e:	683a      	ldr	r2, [r7, #0]
   82590:	b2d2      	uxtb	r2, r2
   82592:	0112      	lsls	r2, r2, #4
   82594:	b2d2      	uxtb	r2, r2
   82596:	440b      	add	r3, r1
   82598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   8259c:	bf00      	nop
   8259e:	370c      	adds	r7, #12
   825a0:	46bd      	mov	sp, r7
   825a2:	bc80      	pop	{r7}
   825a4:	4770      	bx	lr
   825a6:	bf00      	nop
   825a8:	e000ed00 	.word	0xe000ed00
   825ac:	e000e100 	.word	0xe000e100

000825b0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   825b0:	b480      	push	{r7}
   825b2:	b083      	sub	sp, #12
   825b4:	af00      	add	r7, sp, #0
   825b6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   825b8:	687b      	ldr	r3, [r7, #4]
   825ba:	2b07      	cmp	r3, #7
   825bc:	d825      	bhi.n	8260a <osc_get_rate+0x5a>
   825be:	a201      	add	r2, pc, #4	; (adr r2, 825c4 <osc_get_rate+0x14>)
   825c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   825c4:	000825e5 	.word	0x000825e5
   825c8:	000825eb 	.word	0x000825eb
   825cc:	000825f1 	.word	0x000825f1
   825d0:	000825f7 	.word	0x000825f7
   825d4:	000825fb 	.word	0x000825fb
   825d8:	000825ff 	.word	0x000825ff
   825dc:	00082603 	.word	0x00082603
   825e0:	00082607 	.word	0x00082607
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   825e4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   825e8:	e010      	b.n	8260c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   825ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   825ee:	e00d      	b.n	8260c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   825f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   825f4:	e00a      	b.n	8260c <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   825f6:	4b08      	ldr	r3, [pc, #32]	; (82618 <osc_get_rate+0x68>)
   825f8:	e008      	b.n	8260c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   825fa:	4b08      	ldr	r3, [pc, #32]	; (8261c <osc_get_rate+0x6c>)
   825fc:	e006      	b.n	8260c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   825fe:	4b08      	ldr	r3, [pc, #32]	; (82620 <osc_get_rate+0x70>)
   82600:	e004      	b.n	8260c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   82602:	4b07      	ldr	r3, [pc, #28]	; (82620 <osc_get_rate+0x70>)
   82604:	e002      	b.n	8260c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   82606:	4b06      	ldr	r3, [pc, #24]	; (82620 <osc_get_rate+0x70>)
   82608:	e000      	b.n	8260c <osc_get_rate+0x5c>
#endif
	}

	return 0;
   8260a:	2300      	movs	r3, #0
}
   8260c:	4618      	mov	r0, r3
   8260e:	370c      	adds	r7, #12
   82610:	46bd      	mov	sp, r7
   82612:	bc80      	pop	{r7}
   82614:	4770      	bx	lr
   82616:	bf00      	nop
   82618:	003d0900 	.word	0x003d0900
   8261c:	007a1200 	.word	0x007a1200
   82620:	00b71b00 	.word	0x00b71b00

00082624 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   82624:	b580      	push	{r7, lr}
   82626:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   82628:	2006      	movs	r0, #6
   8262a:	4b04      	ldr	r3, [pc, #16]	; (8263c <sysclk_get_main_hz+0x18>)
   8262c:	4798      	blx	r3
   8262e:	4602      	mov	r2, r0
   82630:	4613      	mov	r3, r2
   82632:	00db      	lsls	r3, r3, #3
   82634:	1a9b      	subs	r3, r3, r2
   82636:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   82638:	4618      	mov	r0, r3
   8263a:	bd80      	pop	{r7, pc}
   8263c:	000825b1 	.word	0x000825b1

00082640 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   82640:	b580      	push	{r7, lr}
   82642:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   82644:	4b02      	ldr	r3, [pc, #8]	; (82650 <sysclk_get_peripheral_hz+0x10>)
   82646:	4798      	blx	r3
   82648:	4603      	mov	r3, r0
   8264a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   8264c:	4618      	mov	r0, r3
   8264e:	bd80      	pop	{r7, pc}
   82650:	00082625 	.word	0x00082625

00082654 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   82654:	b580      	push	{r7, lr}
   82656:	b082      	sub	sp, #8
   82658:	af00      	add	r7, sp, #0
   8265a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   8265c:	6878      	ldr	r0, [r7, #4]
   8265e:	4b03      	ldr	r3, [pc, #12]	; (8266c <sysclk_enable_peripheral_clock+0x18>)
   82660:	4798      	blx	r3
}
   82662:	bf00      	nop
   82664:	3708      	adds	r7, #8
   82666:	46bd      	mov	sp, r7
   82668:	bd80      	pop	{r7, pc}
   8266a:	bf00      	nop
   8266c:	00083ee9 	.word	0x00083ee9

00082670 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
   82670:	b580      	push	{r7, lr}
   82672:	b08c      	sub	sp, #48	; 0x30
   82674:	af00      	add	r7, sp, #0
   82676:	6078      	str	r0, [r7, #4]
   82678:	6039      	str	r1, [r7, #0]
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   8267a:	4b40      	ldr	r3, [pc, #256]	; (8277c <usart_serial_init+0x10c>)
   8267c:	4798      	blx	r3
   8267e:	4603      	mov	r3, r0
   82680:	623b      	str	r3, [r7, #32]
	uart_settings.ul_baudrate = opt->baudrate;
   82682:	683b      	ldr	r3, [r7, #0]
   82684:	681b      	ldr	r3, [r3, #0]
   82686:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_mode = opt->paritytype;
   82688:	683b      	ldr	r3, [r7, #0]
   8268a:	689b      	ldr	r3, [r3, #8]
   8268c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
   8268e:	683b      	ldr	r3, [r7, #0]
   82690:	681b      	ldr	r3, [r3, #0]
   82692:	60bb      	str	r3, [r7, #8]
	usart_settings.char_length = opt->charlength;
   82694:	683b      	ldr	r3, [r7, #0]
   82696:	685b      	ldr	r3, [r3, #4]
   82698:	60fb      	str	r3, [r7, #12]
	usart_settings.parity_type = opt->paritytype;
   8269a:	683b      	ldr	r3, [r7, #0]
   8269c:	689b      	ldr	r3, [r3, #8]
   8269e:	613b      	str	r3, [r7, #16]
	usart_settings.stop_bits= opt->stopbits;
   826a0:	683b      	ldr	r3, [r7, #0]
   826a2:	7b1b      	ldrb	r3, [r3, #12]
   826a4:	617b      	str	r3, [r7, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
   826a6:	2300      	movs	r3, #0
   826a8:	61bb      	str	r3, [r7, #24]
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
   826aa:	687b      	ldr	r3, [r7, #4]
   826ac:	4a34      	ldr	r2, [pc, #208]	; (82780 <usart_serial_init+0x110>)
   826ae:	4293      	cmp	r3, r2
   826b0:	d108      	bne.n	826c4 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART);
   826b2:	2008      	movs	r0, #8
   826b4:	4b33      	ldr	r3, [pc, #204]	; (82784 <usart_serial_init+0x114>)
   826b6:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   826b8:	f107 0320 	add.w	r3, r7, #32
   826bc:	4619      	mov	r1, r3
   826be:	6878      	ldr	r0, [r7, #4]
   826c0:	4b31      	ldr	r3, [pc, #196]	; (82788 <usart_serial_init+0x118>)
   826c2:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   826c4:	687b      	ldr	r3, [r7, #4]
   826c6:	4a31      	ldr	r2, [pc, #196]	; (8278c <usart_serial_init+0x11c>)
   826c8:	4293      	cmp	r3, r2
   826ca:	d111      	bne.n	826f0 <usart_serial_init+0x80>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART0);
   826cc:	2011      	movs	r0, #17
   826ce:	4b2d      	ldr	r3, [pc, #180]	; (82784 <usart_serial_init+0x114>)
   826d0:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   826d2:	4b2a      	ldr	r3, [pc, #168]	; (8277c <usart_serial_init+0x10c>)
   826d4:	4798      	blx	r3
   826d6:	4602      	mov	r2, r0
   826d8:	f107 0308 	add.w	r3, r7, #8
   826dc:	4619      	mov	r1, r3
   826de:	6878      	ldr	r0, [r7, #4]
   826e0:	4b2b      	ldr	r3, [pc, #172]	; (82790 <usart_serial_init+0x120>)
   826e2:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   826e4:	6878      	ldr	r0, [r7, #4]
   826e6:	4b2b      	ldr	r3, [pc, #172]	; (82794 <usart_serial_init+0x124>)
   826e8:	4798      	blx	r3
		usart_enable_rx(p_usart);
   826ea:	6878      	ldr	r0, [r7, #4]
   826ec:	4b2a      	ldr	r3, [pc, #168]	; (82798 <usart_serial_init+0x128>)
   826ee:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   826f0:	687b      	ldr	r3, [r7, #4]
   826f2:	4a2a      	ldr	r2, [pc, #168]	; (8279c <usart_serial_init+0x12c>)
   826f4:	4293      	cmp	r3, r2
   826f6:	d111      	bne.n	8271c <usart_serial_init+0xac>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART1);
   826f8:	2012      	movs	r0, #18
   826fa:	4b22      	ldr	r3, [pc, #136]	; (82784 <usart_serial_init+0x114>)
   826fc:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   826fe:	4b1f      	ldr	r3, [pc, #124]	; (8277c <usart_serial_init+0x10c>)
   82700:	4798      	blx	r3
   82702:	4602      	mov	r2, r0
   82704:	f107 0308 	add.w	r3, r7, #8
   82708:	4619      	mov	r1, r3
   8270a:	6878      	ldr	r0, [r7, #4]
   8270c:	4b20      	ldr	r3, [pc, #128]	; (82790 <usart_serial_init+0x120>)
   8270e:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   82710:	6878      	ldr	r0, [r7, #4]
   82712:	4b20      	ldr	r3, [pc, #128]	; (82794 <usart_serial_init+0x124>)
   82714:	4798      	blx	r3
		usart_enable_rx(p_usart);
   82716:	6878      	ldr	r0, [r7, #4]
   82718:	4b1f      	ldr	r3, [pc, #124]	; (82798 <usart_serial_init+0x128>)
   8271a:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8271c:	687b      	ldr	r3, [r7, #4]
   8271e:	4a20      	ldr	r2, [pc, #128]	; (827a0 <usart_serial_init+0x130>)
   82720:	4293      	cmp	r3, r2
   82722:	d111      	bne.n	82748 <usart_serial_init+0xd8>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART2);
   82724:	2013      	movs	r0, #19
   82726:	4b17      	ldr	r3, [pc, #92]	; (82784 <usart_serial_init+0x114>)
   82728:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   8272a:	4b14      	ldr	r3, [pc, #80]	; (8277c <usart_serial_init+0x10c>)
   8272c:	4798      	blx	r3
   8272e:	4602      	mov	r2, r0
   82730:	f107 0308 	add.w	r3, r7, #8
   82734:	4619      	mov	r1, r3
   82736:	6878      	ldr	r0, [r7, #4]
   82738:	4b15      	ldr	r3, [pc, #84]	; (82790 <usart_serial_init+0x120>)
   8273a:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   8273c:	6878      	ldr	r0, [r7, #4]
   8273e:	4b15      	ldr	r3, [pc, #84]	; (82794 <usart_serial_init+0x124>)
   82740:	4798      	blx	r3
		usart_enable_rx(p_usart);
   82742:	6878      	ldr	r0, [r7, #4]
   82744:	4b14      	ldr	r3, [pc, #80]	; (82798 <usart_serial_init+0x128>)
   82746:	4798      	blx	r3
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   82748:	687b      	ldr	r3, [r7, #4]
   8274a:	4a16      	ldr	r2, [pc, #88]	; (827a4 <usart_serial_init+0x134>)
   8274c:	4293      	cmp	r3, r2
   8274e:	d111      	bne.n	82774 <usart_serial_init+0x104>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART3);
   82750:	2014      	movs	r0, #20
   82752:	4b0c      	ldr	r3, [pc, #48]	; (82784 <usart_serial_init+0x114>)
   82754:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   82756:	4b09      	ldr	r3, [pc, #36]	; (8277c <usart_serial_init+0x10c>)
   82758:	4798      	blx	r3
   8275a:	4602      	mov	r2, r0
   8275c:	f107 0308 	add.w	r3, r7, #8
   82760:	4619      	mov	r1, r3
   82762:	6878      	ldr	r0, [r7, #4]
   82764:	4b0a      	ldr	r3, [pc, #40]	; (82790 <usart_serial_init+0x120>)
   82766:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   82768:	6878      	ldr	r0, [r7, #4]
   8276a:	4b0a      	ldr	r3, [pc, #40]	; (82794 <usart_serial_init+0x124>)
   8276c:	4798      	blx	r3
		usart_enable_rx(p_usart);
   8276e:	6878      	ldr	r0, [r7, #4]
   82770:	4b09      	ldr	r3, [pc, #36]	; (82798 <usart_serial_init+0x128>)
   82772:	4798      	blx	r3
		usart_enable_rx(p_usart);
	}
# endif
#endif /* ifdef USART */

}
   82774:	bf00      	nop
   82776:	3730      	adds	r7, #48	; 0x30
   82778:	46bd      	mov	sp, r7
   8277a:	bd80      	pop	{r7, pc}
   8277c:	00082641 	.word	0x00082641
   82780:	400e0800 	.word	0x400e0800
   82784:	00082655 	.word	0x00082655
   82788:	0008216d 	.word	0x0008216d
   8278c:	40098000 	.word	0x40098000
   82790:	00082325 	.word	0x00082325
   82794:	000823a9 	.word	0x000823a9
   82798:	000823d9 	.word	0x000823d9
   8279c:	4009c000 	.word	0x4009c000
   827a0:	400a0000 	.word	0x400a0000
   827a4:	400a4000 	.word	0x400a4000

000827a8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   827a8:	b580      	push	{r7, lr}
   827aa:	b082      	sub	sp, #8
   827ac:	af00      	add	r7, sp, #0
   827ae:	6078      	str	r0, [r7, #4]
   827b0:	460b      	mov	r3, r1
   827b2:	70fb      	strb	r3, [r7, #3]
#ifdef UART
	if (UART == (Uart*)p_usart) {
   827b4:	687b      	ldr	r3, [r7, #4]
   827b6:	4a27      	ldr	r2, [pc, #156]	; (82854 <usart_serial_putchar+0xac>)
   827b8:	4293      	cmp	r3, r2
   827ba:	d10a      	bne.n	827d2 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
   827bc:	bf00      	nop
   827be:	78fb      	ldrb	r3, [r7, #3]
   827c0:	4619      	mov	r1, r3
   827c2:	6878      	ldr	r0, [r7, #4]
   827c4:	4b24      	ldr	r3, [pc, #144]	; (82858 <usart_serial_putchar+0xb0>)
   827c6:	4798      	blx	r3
   827c8:	4603      	mov	r3, r0
   827ca:	2b00      	cmp	r3, #0
   827cc:	d1f7      	bne.n	827be <usart_serial_putchar+0x16>
		return 1;
   827ce:	2301      	movs	r3, #1
   827d0:	e03c      	b.n	8284c <usart_serial_putchar+0xa4>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   827d2:	687b      	ldr	r3, [r7, #4]
   827d4:	4a21      	ldr	r2, [pc, #132]	; (8285c <usart_serial_putchar+0xb4>)
   827d6:	4293      	cmp	r3, r2
   827d8:	d10a      	bne.n	827f0 <usart_serial_putchar+0x48>
		while (usart_write(p_usart, c)!=0);
   827da:	bf00      	nop
   827dc:	78fb      	ldrb	r3, [r7, #3]
   827de:	4619      	mov	r1, r3
   827e0:	6878      	ldr	r0, [r7, #4]
   827e2:	4b1f      	ldr	r3, [pc, #124]	; (82860 <usart_serial_putchar+0xb8>)
   827e4:	4798      	blx	r3
   827e6:	4603      	mov	r3, r0
   827e8:	2b00      	cmp	r3, #0
   827ea:	d1f7      	bne.n	827dc <usart_serial_putchar+0x34>
		return 1;
   827ec:	2301      	movs	r3, #1
   827ee:	e02d      	b.n	8284c <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   827f0:	687b      	ldr	r3, [r7, #4]
   827f2:	4a1c      	ldr	r2, [pc, #112]	; (82864 <usart_serial_putchar+0xbc>)
   827f4:	4293      	cmp	r3, r2
   827f6:	d10a      	bne.n	8280e <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
   827f8:	bf00      	nop
   827fa:	78fb      	ldrb	r3, [r7, #3]
   827fc:	4619      	mov	r1, r3
   827fe:	6878      	ldr	r0, [r7, #4]
   82800:	4b17      	ldr	r3, [pc, #92]	; (82860 <usart_serial_putchar+0xb8>)
   82802:	4798      	blx	r3
   82804:	4603      	mov	r3, r0
   82806:	2b00      	cmp	r3, #0
   82808:	d1f7      	bne.n	827fa <usart_serial_putchar+0x52>
		return 1;
   8280a:	2301      	movs	r3, #1
   8280c:	e01e      	b.n	8284c <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8280e:	687b      	ldr	r3, [r7, #4]
   82810:	4a15      	ldr	r2, [pc, #84]	; (82868 <usart_serial_putchar+0xc0>)
   82812:	4293      	cmp	r3, r2
   82814:	d10a      	bne.n	8282c <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
   82816:	bf00      	nop
   82818:	78fb      	ldrb	r3, [r7, #3]
   8281a:	4619      	mov	r1, r3
   8281c:	6878      	ldr	r0, [r7, #4]
   8281e:	4b10      	ldr	r3, [pc, #64]	; (82860 <usart_serial_putchar+0xb8>)
   82820:	4798      	blx	r3
   82822:	4603      	mov	r3, r0
   82824:	2b00      	cmp	r3, #0
   82826:	d1f7      	bne.n	82818 <usart_serial_putchar+0x70>
		return 1;
   82828:	2301      	movs	r3, #1
   8282a:	e00f      	b.n	8284c <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8282c:	687b      	ldr	r3, [r7, #4]
   8282e:	4a0f      	ldr	r2, [pc, #60]	; (8286c <usart_serial_putchar+0xc4>)
   82830:	4293      	cmp	r3, r2
   82832:	d10a      	bne.n	8284a <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
   82834:	bf00      	nop
   82836:	78fb      	ldrb	r3, [r7, #3]
   82838:	4619      	mov	r1, r3
   8283a:	6878      	ldr	r0, [r7, #4]
   8283c:	4b08      	ldr	r3, [pc, #32]	; (82860 <usart_serial_putchar+0xb8>)
   8283e:	4798      	blx	r3
   82840:	4603      	mov	r3, r0
   82842:	2b00      	cmp	r3, #0
   82844:	d1f7      	bne.n	82836 <usart_serial_putchar+0x8e>
		return 1;
   82846:	2301      	movs	r3, #1
   82848:	e000      	b.n	8284c <usart_serial_putchar+0xa4>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   8284a:	2300      	movs	r3, #0
}
   8284c:	4618      	mov	r0, r3
   8284e:	3708      	adds	r7, #8
   82850:	46bd      	mov	sp, r7
   82852:	bd80      	pop	{r7, pc}
   82854:	400e0800 	.word	0x400e0800
   82858:	000821e9 	.word	0x000821e9
   8285c:	40098000 	.word	0x40098000
   82860:	00082441 	.word	0x00082441
   82864:	4009c000 	.word	0x4009c000
   82868:	400a0000 	.word	0x400a0000
   8286c:	400a4000 	.word	0x400a4000

00082870 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   82870:	b580      	push	{r7, lr}
   82872:	b084      	sub	sp, #16
   82874:	af00      	add	r7, sp, #0
   82876:	6078      	str	r0, [r7, #4]
   82878:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
   8287a:	2300      	movs	r3, #0
   8287c:	60fb      	str	r3, [r7, #12]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8287e:	687b      	ldr	r3, [r7, #4]
   82880:	4a2b      	ldr	r2, [pc, #172]	; (82930 <usart_serial_getchar+0xc0>)
   82882:	4293      	cmp	r3, r2
   82884:	d107      	bne.n	82896 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
   82886:	bf00      	nop
   82888:	6839      	ldr	r1, [r7, #0]
   8288a:	6878      	ldr	r0, [r7, #4]
   8288c:	4b29      	ldr	r3, [pc, #164]	; (82934 <usart_serial_getchar+0xc4>)
   8288e:	4798      	blx	r3
   82890:	4603      	mov	r3, r0
   82892:	2b00      	cmp	r3, #0
   82894:	d1f8      	bne.n	82888 <usart_serial_getchar+0x18>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   82896:	687b      	ldr	r3, [r7, #4]
   82898:	4a27      	ldr	r2, [pc, #156]	; (82938 <usart_serial_getchar+0xc8>)
   8289a:	4293      	cmp	r3, r2
   8289c:	d10d      	bne.n	828ba <usart_serial_getchar+0x4a>
		while (usart_read(p_usart, &val));
   8289e:	bf00      	nop
   828a0:	f107 030c 	add.w	r3, r7, #12
   828a4:	4619      	mov	r1, r3
   828a6:	6878      	ldr	r0, [r7, #4]
   828a8:	4b24      	ldr	r3, [pc, #144]	; (8293c <usart_serial_getchar+0xcc>)
   828aa:	4798      	blx	r3
   828ac:	4603      	mov	r3, r0
   828ae:	2b00      	cmp	r3, #0
   828b0:	d1f6      	bne.n	828a0 <usart_serial_getchar+0x30>
		*data = (uint8_t)(val & 0xFF);
   828b2:	68fb      	ldr	r3, [r7, #12]
   828b4:	b2da      	uxtb	r2, r3
   828b6:	683b      	ldr	r3, [r7, #0]
   828b8:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   828ba:	687b      	ldr	r3, [r7, #4]
   828bc:	4a20      	ldr	r2, [pc, #128]	; (82940 <usart_serial_getchar+0xd0>)
   828be:	4293      	cmp	r3, r2
   828c0:	d10d      	bne.n	828de <usart_serial_getchar+0x6e>
		while (usart_read(p_usart, &val));
   828c2:	bf00      	nop
   828c4:	f107 030c 	add.w	r3, r7, #12
   828c8:	4619      	mov	r1, r3
   828ca:	6878      	ldr	r0, [r7, #4]
   828cc:	4b1b      	ldr	r3, [pc, #108]	; (8293c <usart_serial_getchar+0xcc>)
   828ce:	4798      	blx	r3
   828d0:	4603      	mov	r3, r0
   828d2:	2b00      	cmp	r3, #0
   828d4:	d1f6      	bne.n	828c4 <usart_serial_getchar+0x54>
		*data = (uint8_t)(val & 0xFF);
   828d6:	68fb      	ldr	r3, [r7, #12]
   828d8:	b2da      	uxtb	r2, r3
   828da:	683b      	ldr	r3, [r7, #0]
   828dc:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   828de:	687b      	ldr	r3, [r7, #4]
   828e0:	4a18      	ldr	r2, [pc, #96]	; (82944 <usart_serial_getchar+0xd4>)
   828e2:	4293      	cmp	r3, r2
   828e4:	d10d      	bne.n	82902 <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
   828e6:	bf00      	nop
   828e8:	f107 030c 	add.w	r3, r7, #12
   828ec:	4619      	mov	r1, r3
   828ee:	6878      	ldr	r0, [r7, #4]
   828f0:	4b12      	ldr	r3, [pc, #72]	; (8293c <usart_serial_getchar+0xcc>)
   828f2:	4798      	blx	r3
   828f4:	4603      	mov	r3, r0
   828f6:	2b00      	cmp	r3, #0
   828f8:	d1f6      	bne.n	828e8 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
   828fa:	68fb      	ldr	r3, [r7, #12]
   828fc:	b2da      	uxtb	r2, r3
   828fe:	683b      	ldr	r3, [r7, #0]
   82900:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   82902:	687b      	ldr	r3, [r7, #4]
   82904:	4a10      	ldr	r2, [pc, #64]	; (82948 <usart_serial_getchar+0xd8>)
   82906:	4293      	cmp	r3, r2
   82908:	d10d      	bne.n	82926 <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
   8290a:	bf00      	nop
   8290c:	f107 030c 	add.w	r3, r7, #12
   82910:	4619      	mov	r1, r3
   82912:	6878      	ldr	r0, [r7, #4]
   82914:	4b09      	ldr	r3, [pc, #36]	; (8293c <usart_serial_getchar+0xcc>)
   82916:	4798      	blx	r3
   82918:	4603      	mov	r3, r0
   8291a:	2b00      	cmp	r3, #0
   8291c:	d1f6      	bne.n	8290c <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
   8291e:	68fb      	ldr	r3, [r7, #12]
   82920:	b2da      	uxtb	r2, r3
   82922:	683b      	ldr	r3, [r7, #0]
   82924:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   82926:	bf00      	nop
   82928:	3710      	adds	r7, #16
   8292a:	46bd      	mov	sp, r7
   8292c:	bd80      	pop	{r7, pc}
   8292e:	bf00      	nop
   82930:	400e0800 	.word	0x400e0800
   82934:	00082219 	.word	0x00082219
   82938:	40098000 	.word	0x40098000
   8293c:	00082471 	.word	0x00082471
   82940:	4009c000 	.word	0x4009c000
   82944:	400a0000 	.word	0x400a0000
   82948:	400a4000 	.word	0x400a4000

0008294c <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
   8294c:	b580      	push	{r7, lr}
   8294e:	b082      	sub	sp, #8
   82950:	af00      	add	r7, sp, #0
   82952:	6078      	str	r0, [r7, #4]
   82954:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
   82956:	4a0f      	ldr	r2, [pc, #60]	; (82994 <stdio_serial_init+0x48>)
   82958:	687b      	ldr	r3, [r7, #4]
   8295a:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   8295c:	4b0e      	ldr	r3, [pc, #56]	; (82998 <stdio_serial_init+0x4c>)
   8295e:	4a0f      	ldr	r2, [pc, #60]	; (8299c <stdio_serial_init+0x50>)
   82960:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   82962:	4b0f      	ldr	r3, [pc, #60]	; (829a0 <stdio_serial_init+0x54>)
   82964:	4a0f      	ldr	r2, [pc, #60]	; (829a4 <stdio_serial_init+0x58>)
   82966:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
   82968:	6839      	ldr	r1, [r7, #0]
   8296a:	6878      	ldr	r0, [r7, #4]
   8296c:	4b0e      	ldr	r3, [pc, #56]	; (829a8 <stdio_serial_init+0x5c>)
   8296e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   82970:	4b0e      	ldr	r3, [pc, #56]	; (829ac <stdio_serial_init+0x60>)
   82972:	681b      	ldr	r3, [r3, #0]
   82974:	689b      	ldr	r3, [r3, #8]
   82976:	2100      	movs	r1, #0
   82978:	4618      	mov	r0, r3
   8297a:	4b0d      	ldr	r3, [pc, #52]	; (829b0 <stdio_serial_init+0x64>)
   8297c:	4798      	blx	r3
	setbuf(stdin, NULL);
   8297e:	4b0b      	ldr	r3, [pc, #44]	; (829ac <stdio_serial_init+0x60>)
   82980:	681b      	ldr	r3, [r3, #0]
   82982:	685b      	ldr	r3, [r3, #4]
   82984:	2100      	movs	r1, #0
   82986:	4618      	mov	r0, r3
   82988:	4b09      	ldr	r3, [pc, #36]	; (829b0 <stdio_serial_init+0x64>)
   8298a:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
   8298c:	bf00      	nop
   8298e:	3708      	adds	r7, #8
   82990:	46bd      	mov	sp, r7
   82992:	bd80      	pop	{r7, pc}
   82994:	20070ea4 	.word	0x20070ea4
   82998:	20070ea0 	.word	0x20070ea0
   8299c:	000827a9 	.word	0x000827a9
   829a0:	20070e9c 	.word	0x20070e9c
   829a4:	00082871 	.word	0x00082871
   829a8:	00082671 	.word	0x00082671
   829ac:	200704d8 	.word	0x200704d8
   829b0:	000847f5 	.word	0x000847f5

000829b4 <configure_console>:
{
	{50,700,50},{60,750,57},{65,750,64},{70,750,70},{75,750,74},{80,750,78},{85,750,82},{90,750,86},{95,750,90},{100,760,100},{110,780,110},{120,810,120},
	{140,810,140},{150,850,150},{200,970,200},{300,1200,290},{400,1250,350}	
};
static void configure_console(void)
{
   829b4:	b580      	push	{r7, lr}
   829b6:	b084      	sub	sp, #16
   829b8:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = {
   829ba:	463b      	mov	r3, r7
   829bc:	2200      	movs	r2, #0
   829be:	601a      	str	r2, [r3, #0]
   829c0:	605a      	str	r2, [r3, #4]
   829c2:	609a      	str	r2, [r3, #8]
   829c4:	60da      	str	r2, [r3, #12]
   829c6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   829ca:	603b      	str	r3, [r7, #0]
   829cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   829d0:	60bb      	str	r3, [r7, #8]
		.baudrate = 115200,
		.paritytype = UART_MR_PAR_NO
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
   829d2:	2008      	movs	r0, #8
   829d4:	4b05      	ldr	r3, [pc, #20]	; (829ec <configure_console+0x38>)
   829d6:	4798      	blx	r3
	stdio_serial_init(CONSOLE_UART, &uart_serial_options);
   829d8:	463b      	mov	r3, r7
   829da:	4619      	mov	r1, r3
   829dc:	4804      	ldr	r0, [pc, #16]	; (829f0 <configure_console+0x3c>)
   829de:	4b05      	ldr	r3, [pc, #20]	; (829f4 <configure_console+0x40>)
   829e0:	4798      	blx	r3
}
   829e2:	bf00      	nop
   829e4:	3710      	adds	r7, #16
   829e6:	46bd      	mov	sp, r7
   829e8:	bd80      	pop	{r7, pc}
   829ea:	bf00      	nop
   829ec:	00082655 	.word	0x00082655
   829f0:	400e0800 	.word	0x400e0800
   829f4:	0008294d 	.word	0x0008294d

000829f8 <main>:
volatile uint32_t fed_value=0;
extern uint32_t array_dummy[100];
extern uint32_t var;
uint8_t command =  0;
int main (void)
 {
   829f8:	b590      	push	{r4, r7, lr}
   829fa:	b087      	sub	sp, #28
   829fc:	af00      	add	r7, sp, #0
	
	speed_data speed_d;
	static uint32_t status=0;
	static uint32_t prev_status=0;
	sysclk_init();
   829fe:	4ba5      	ldr	r3, [pc, #660]	; (82c94 <main+0x29c>)
   82a00:	4798      	blx	r3
	board_init();
   82a02:	4ba5      	ldr	r3, [pc, #660]	; (82c98 <main+0x2a0>)
   82a04:	4798      	blx	r3
	CPU2_S_SYSTEM_INIT();
   82a06:	4ba5      	ldr	r3, [pc, #660]	; (82c9c <main+0x2a4>)
   82a08:	4798      	blx	r3
	configure_console();
   82a0a:	4ba5      	ldr	r3, [pc, #660]	; (82ca0 <main+0x2a8>)
   82a0c:	4798      	blx	r3
	//CPU2_S_START_TIMER(0,);
	printf("welcome\n");
   82a0e:	48a5      	ldr	r0, [pc, #660]	; (82ca4 <main+0x2ac>)
   82a10:	4ba5      	ldr	r3, [pc, #660]	; (82ca8 <main+0x2b0>)
   82a12:	4798      	blx	r3
	printf("Version1.1\n");
   82a14:	48a5      	ldr	r0, [pc, #660]	; (82cac <main+0x2b4>)
   82a16:	4ba4      	ldr	r3, [pc, #656]	; (82ca8 <main+0x2b0>)
   82a18:	4798      	blx	r3
	PIOA->PIO_WPMR = 0x50494F00;
   82a1a:	4ba5      	ldr	r3, [pc, #660]	; (82cb0 <main+0x2b8>)
   82a1c:	4aa5      	ldr	r2, [pc, #660]	; (82cb4 <main+0x2bc>)
   82a1e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOA->PIO_PUER = 0x00000300;
   82a22:	4ba3      	ldr	r3, [pc, #652]	; (82cb0 <main+0x2b8>)
   82a24:	f44f 7240 	mov.w	r2, #768	; 0x300
   82a28:	665a      	str	r2, [r3, #100]	; 0x64
	//PIOA->PIO_PUER = 0x00060000;
	PIOA->PIO_PDR =	 0x00060000;
   82a2a:	4ba1      	ldr	r3, [pc, #644]	; (82cb0 <main+0x2b8>)
   82a2c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   82a30:	605a      	str	r2, [r3, #4]
	PIOA->PIO_ABSR = 0x00090000;
   82a32:	4b9f      	ldr	r3, [pc, #636]	; (82cb0 <main+0x2b8>)
   82a34:	f44f 2210 	mov.w	r2, #589824	; 0x90000
   82a38:	671a      	str	r2, [r3, #112]	; 0x70
	pmc_enable_periph_clk(ID_PIOD);
   82a3a:	200e      	movs	r0, #14
   82a3c:	4b9e      	ldr	r3, [pc, #632]	; (82cb8 <main+0x2c0>)
   82a3e:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOC);
   82a40:	200d      	movs	r0, #13
   82a42:	4b9d      	ldr	r3, [pc, #628]	; (82cb8 <main+0x2c0>)
   82a44:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PWM);
   82a46:	2024      	movs	r0, #36	; 0x24
   82a48:	4b9b      	ldr	r3, [pc, #620]	; (82cb8 <main+0x2c0>)
   82a4a:	4798      	blx	r3

	PIOD->PIO_WPMR = 0x50494F00;
   82a4c:	4b9b      	ldr	r3, [pc, #620]	; (82cbc <main+0x2c4>)
   82a4e:	4a99      	ldr	r2, [pc, #612]	; (82cb4 <main+0x2bc>)
   82a50:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_PER  = 0x000002CF;
   82a54:	4b99      	ldr	r3, [pc, #612]	; (82cbc <main+0x2c4>)
   82a56:	f240 22cf 	movw	r2, #719	; 0x2cf
   82a5a:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER  = 0x0000024F;
   82a5c:	4b97      	ldr	r3, [pc, #604]	; (82cbc <main+0x2c4>)
   82a5e:	f240 224f 	movw	r2, #591	; 0x24f
   82a62:	611a      	str	r2, [r3, #16]
	PIOD->PIO_ODR  = 0x00000080;				//m1,m2,m3,m4,directionA,BrakeA
   82a64:	4b95      	ldr	r3, [pc, #596]	; (82cbc <main+0x2c4>)
   82a66:	2280      	movs	r2, #128	; 0x80
   82a68:	615a      	str	r2, [r3, #20]
	PIOD->PIO_CODR = 0x0000024F;
   82a6a:	4b94      	ldr	r3, [pc, #592]	; (82cbc <main+0x2c4>)
   82a6c:	f240 224f 	movw	r2, #591	; 0x24f
   82a70:	635a      	str	r2, [r3, #52]	; 0x34
	PIOD->PIO_PUER = 0x0000024F;
   82a72:	4b92      	ldr	r3, [pc, #584]	; (82cbc <main+0x2c4>)
   82a74:	f240 224f 	movw	r2, #591	; 0x24f
   82a78:	665a      	str	r2, [r3, #100]	; 0x64

	PIOC->PIO_WPMR = 0x50494F00;
   82a7a:	4b91      	ldr	r3, [pc, #580]	; (82cc0 <main+0x2c8>)
   82a7c:	4a8d      	ldr	r2, [pc, #564]	; (82cb4 <main+0x2bc>)
   82a7e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_PER  = 0x0007F800;
   82a82:	4b8f      	ldr	r3, [pc, #572]	; (82cc0 <main+0x2c8>)
   82a84:	f44f 22ff 	mov.w	r2, #522240	; 0x7f800
   82a88:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER  = 0x4007F800;				//m1,m2,m3,m4,directionB,BrakeB
   82a8a:	4b8d      	ldr	r3, [pc, #564]	; (82cc0 <main+0x2c8>)
   82a8c:	4a8d      	ldr	r2, [pc, #564]	; (82cc4 <main+0x2cc>)
   82a8e:	611a      	str	r2, [r3, #16]
	PIOC->PIO_CODR = 0x0007F000;
   82a90:	4b8b      	ldr	r3, [pc, #556]	; (82cc0 <main+0x2c8>)
   82a92:	f44f 22fe 	mov.w	r2, #520192	; 0x7f000
   82a96:	635a      	str	r2, [r3, #52]	; 0x34
	PIOC->PIO_PUER = 0x4007F000;
   82a98:	4b89      	ldr	r3, [pc, #548]	; (82cc0 <main+0x2c8>)
   82a9a:	4a8b      	ldr	r2, [pc, #556]	; (82cc8 <main+0x2d0>)
   82a9c:	665a      	str	r2, [r3, #100]	; 0x64

	PIOA->PIO_PUER = 0x00000300;
   82a9e:	4b84      	ldr	r3, [pc, #528]	; (82cb0 <main+0x2b8>)
   82aa0:	f44f 7240 	mov.w	r2, #768	; 0x300
   82aa4:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PUER = 0x00060000;
   82aa6:	4b82      	ldr	r3, [pc, #520]	; (82cb0 <main+0x2b8>)
   82aa8:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   82aac:	665a      	str	r2, [r3, #100]	; 0x64
	
	PWM->PWM_WPCR = 0x50574D00;
   82aae:	4b87      	ldr	r3, [pc, #540]	; (82ccc <main+0x2d4>)
   82ab0:	4a87      	ldr	r2, [pc, #540]	; (82cd0 <main+0x2d8>)
   82ab2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//PWM->PWM_DIS = 0x000000FF;
	
	PWM->PWM_CH_NUM[4].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   82ab6:	4b85      	ldr	r3, [pc, #532]	; (82ccc <main+0x2d4>)
   82ab8:	4a86      	ldr	r2, [pc, #536]	; (82cd4 <main+0x2dc>)
   82aba:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x00000A41;
   82abe:	4b83      	ldr	r3, [pc, #524]	; (82ccc <main+0x2d4>)
   82ac0:	f640 2241 	movw	r2, #2625	; 0xa41
   82ac4:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	PWM->PWM_CH_NUM[4].PWM_CDTY = DUTY;			//35% duty cycle
   82ac8:	4a80      	ldr	r2, [pc, #512]	; (82ccc <main+0x2d4>)
   82aca:	4b83      	ldr	r3, [pc, #524]	; (82cd8 <main+0x2e0>)
   82acc:	681b      	ldr	r3, [r3, #0]
   82ace:	f8c2 3284 	str.w	r3, [r2, #644]	; 0x284
	PIOD->PIO_WPMR	= 0x50494F00;
   82ad2:	4b7a      	ldr	r3, [pc, #488]	; (82cbc <main+0x2c4>)
   82ad4:	4a77      	ldr	r2, [pc, #476]	; (82cb4 <main+0x2bc>)
   82ad6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_PER   = 0x0000024F;
   82ada:	4b78      	ldr	r3, [pc, #480]	; (82cbc <main+0x2c4>)
   82adc:	f240 224f 	movw	r2, #591	; 0x24f
   82ae0:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER   = 0x0000024F;
   82ae2:	4b76      	ldr	r3, [pc, #472]	; (82cbc <main+0x2c4>)
   82ae4:	f240 224f 	movw	r2, #591	; 0x24f
   82ae8:	611a      	str	r2, [r3, #16]
	PIOD->PIO_PUER  = 0x0000000F;
   82aea:	4b74      	ldr	r3, [pc, #464]	; (82cbc <main+0x2c4>)
   82aec:	220f      	movs	r2, #15
   82aee:	665a      	str	r2, [r3, #100]	; 0x64
	PIOD->PIO_SODR  = 0x00000200;
   82af0:	4b72      	ldr	r3, [pc, #456]	; (82cbc <main+0x2c4>)
   82af2:	f44f 7200 	mov.w	r2, #512	; 0x200
   82af6:	631a      	str	r2, [r3, #48]	; 0x30
	status=(((PIOA->PIO_PDSR)>>14)&1);
   82af8:	4b6d      	ldr	r3, [pc, #436]	; (82cb0 <main+0x2b8>)
   82afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82afc:	0b9b      	lsrs	r3, r3, #14
   82afe:	f003 0301 	and.w	r3, r3, #1
   82b02:	4a76      	ldr	r2, [pc, #472]	; (82cdc <main+0x2e4>)
   82b04:	6013      	str	r3, [r2, #0]
	prev_status=status;
   82b06:	4b75      	ldr	r3, [pc, #468]	; (82cdc <main+0x2e4>)
   82b08:	681b      	ldr	r3, [r3, #0]
   82b0a:	4a75      	ldr	r2, [pc, #468]	; (82ce0 <main+0x2e8>)
   82b0c:	6013      	str	r3, [r2, #0]
	NVIC_DisableIRQ(SPI_IRQn);
   82b0e:	2018      	movs	r0, #24
   82b10:	4b74      	ldr	r3, [pc, #464]	; (82ce4 <main+0x2ec>)
   82b12:	4798      	blx	r3
	NVIC_ClearPendingIRQ(SPI_IRQn);
   82b14:	2018      	movs	r0, #24
   82b16:	4b74      	ldr	r3, [pc, #464]	; (82ce8 <main+0x2f0>)
   82b18:	4798      	blx	r3
	NVIC_SetPriority(SPI_IRQn, 0);
   82b1a:	2100      	movs	r1, #0
   82b1c:	2018      	movs	r0, #24
   82b1e:	4b73      	ldr	r3, [pc, #460]	; (82cec <main+0x2f4>)
   82b20:	4798      	blx	r3
	NVIC_EnableIRQ(SPI_IRQn);
   82b22:	2018      	movs	r0, #24
   82b24:	4b72      	ldr	r3, [pc, #456]	; (82cf0 <main+0x2f8>)
   82b26:	4798      	blx	r3

//	spi_slave_initialize();
	//spi_master_initialize();
	//pio_enable_interrupt(PIOA,PIO_IER_P14);
	uint32_t expire_time = 6562490;			//10 sec
   82b28:	4b72      	ldr	r3, [pc, #456]	; (82cf4 <main+0x2fc>)
   82b2a:	613b      	str	r3, [r7, #16]
	uint32_t stepcount = 6562;			//10 sec
   82b2c:	f641 13a2 	movw	r3, #6562	; 0x19a2
   82b30:	60fb      	str	r3, [r7, #12]
	startTimer1(TC0,0,TC0_IRQn,expire_time);
   82b32:	693b      	ldr	r3, [r7, #16]
   82b34:	221b      	movs	r2, #27
   82b36:	2100      	movs	r1, #0
   82b38:	486f      	ldr	r0, [pc, #444]	; (82cf8 <main+0x300>)
   82b3a:	4c70      	ldr	r4, [pc, #448]	; (82cfc <main+0x304>)
   82b3c:	47a0      	blx	r4
	int i=0;
   82b3e:	2300      	movs	r3, #0
   82b40:	60bb      	str	r3, [r7, #8]
	startTimer3(TC0,2,TC2_IRQn,stepcount);
   82b42:	68fb      	ldr	r3, [r7, #12]
   82b44:	221d      	movs	r2, #29
   82b46:	2102      	movs	r1, #2
   82b48:	486b      	ldr	r0, [pc, #428]	; (82cf8 <main+0x300>)
   82b4a:	4c6d      	ldr	r4, [pc, #436]	; (82d00 <main+0x308>)
   82b4c:	47a0      	blx	r4
// 	  for(int i=0; i<10000000; i++)
// 	  {
// 		  ;
// 	  }
// 	  
 	   CPU2_D_SET_PIO(PIO_TYPE_PIO_C,11);
   82b4e:	210b      	movs	r1, #11
   82b50:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
   82b54:	4b6b      	ldr	r3, [pc, #428]	; (82d04 <main+0x30c>)
   82b56:	4798      	blx	r3
 	  
	  
	
	CPU2_D_SET_PIO(PIO_TYPE_PIO_A,13);      // VENOUS CLAMP POWER ENABLED
   82b58:	210d      	movs	r1, #13
   82b5a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   82b5e:	4b69      	ldr	r3, [pc, #420]	; (82d04 <main+0x30c>)
   82b60:	4798      	blx	r3
	CPU2_D_SET_PIO(PIO_TYPE_PIO_A,11);     // BYPASS VALVE POWER ENABLED
   82b62:	210b      	movs	r1, #11
   82b64:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   82b68:	4b66      	ldr	r3, [pc, #408]	; (82d04 <main+0x30c>)
   82b6a:	4798      	blx	r3
			/*if ()				// fpr conductivity and temp
			{
			}*/
		//}
		
		while (flag_buff >= 1)
   82b6c:	e189      	b.n	82e82 <main+0x48a>
		{ 
			command = data_buff[0];
   82b6e:	4b66      	ldr	r3, [pc, #408]	; (82d08 <main+0x310>)
   82b70:	781a      	ldrb	r2, [r3, #0]
   82b72:	4b66      	ldr	r3, [pc, #408]	; (82d0c <main+0x314>)
   82b74:	701a      	strb	r2, [r3, #0]
				if (command == BP_APT_VPT_SEND_TO_MASTER)
   82b76:	4b65      	ldr	r3, [pc, #404]	; (82d0c <main+0x314>)
   82b78:	781b      	ldrb	r3, [r3, #0]
   82b7a:	2b27      	cmp	r3, #39	; 0x27
   82b7c:	d105      	bne.n	82b8a <main+0x192>
				{
					//printf("start\n");
									
					//send CAN Message for APT and VPT
					SV_put_sensor_data(&sv_sys_statbuffer);
   82b7e:	4864      	ldr	r0, [pc, #400]	; (82d10 <main+0x318>)
   82b80:	4b64      	ldr	r3, [pc, #400]	; (82d14 <main+0x31c>)
   82b82:	4798      	blx	r3
					command = (uint8_t)0;
   82b84:	4b61      	ldr	r3, [pc, #388]	; (82d0c <main+0x314>)
   82b86:	2200      	movs	r2, #0
   82b88:	701a      	strb	r2, [r3, #0]
				//	flag_buff--;
				}
				
				if(command == BD_CALIBRATION){
   82b8a:	4b60      	ldr	r3, [pc, #384]	; (82d0c <main+0x314>)
   82b8c:	781b      	ldrb	r3, [r3, #0]
   82b8e:	2b29      	cmp	r3, #41	; 0x29
   82b90:	d116      	bne.n	82bc0 <main+0x1c8>
					
					CPU2_D_RESET_PIO(PIO_TYPE_PIO_C,11);    // reseting calibrate pin for BD/ABD 4july2017
   82b92:	210b      	movs	r1, #11
   82b94:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
   82b98:	4b5f      	ldr	r3, [pc, #380]	; (82d18 <main+0x320>)
   82b9a:	4798      	blx	r3
					// 	 /* int i=0;*/
					 	  for(int i=0; i<10000000; i++)
   82b9c:	2300      	movs	r3, #0
   82b9e:	617b      	str	r3, [r7, #20]
   82ba0:	e002      	b.n	82ba8 <main+0x1b0>
   82ba2:	697b      	ldr	r3, [r7, #20]
   82ba4:	3301      	adds	r3, #1
   82ba6:	617b      	str	r3, [r7, #20]
   82ba8:	697b      	ldr	r3, [r7, #20]
   82baa:	4a5c      	ldr	r2, [pc, #368]	; (82d1c <main+0x324>)
   82bac:	4293      	cmp	r3, r2
   82bae:	ddf8      	ble.n	82ba2 <main+0x1aa>
						  {
					 		  ;
					 	  }
					
					 	   CPU2_D_SET_PIO(PIO_TYPE_PIO_C,11);
   82bb0:	210b      	movs	r1, #11
   82bb2:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
   82bb6:	4b53      	ldr	r3, [pc, #332]	; (82d04 <main+0x30c>)
   82bb8:	4798      	blx	r3
					command = (uint8_t)0;
   82bba:	4b54      	ldr	r3, [pc, #336]	; (82d0c <main+0x314>)
   82bbc:	2200      	movs	r2, #0
   82bbe:	701a      	strb	r2, [r3, #0]
					
				}
			//	continue;
								
			//printf("enter\n");
			switch (states_2)
   82bc0:	4b57      	ldr	r3, [pc, #348]	; (82d20 <main+0x328>)
   82bc2:	781b      	ldrb	r3, [r3, #0]
   82bc4:	2b26      	cmp	r3, #38	; 0x26
   82bc6:	f200 8151 	bhi.w	82e6c <main+0x474>
   82bca:	a201      	add	r2, pc, #4	; (adr r2, 82bd0 <main+0x1d8>)
   82bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82bd0:	00082c6d 	.word	0x00082c6d
   82bd4:	00082d31 	.word	0x00082d31
   82bd8:	00082e25 	.word	0x00082e25
   82bdc:	00082e6d 	.word	0x00082e6d
   82be0:	00082e6d 	.word	0x00082e6d
   82be4:	00082e6d 	.word	0x00082e6d
   82be8:	00082e6d 	.word	0x00082e6d
   82bec:	00082e6d 	.word	0x00082e6d
   82bf0:	00082e6d 	.word	0x00082e6d
   82bf4:	00082e6d 	.word	0x00082e6d
   82bf8:	00082e6d 	.word	0x00082e6d
   82bfc:	00082e6d 	.word	0x00082e6d
   82c00:	00082e6d 	.word	0x00082e6d
   82c04:	00082e6d 	.word	0x00082e6d
   82c08:	00082e6d 	.word	0x00082e6d
   82c0c:	00082e6d 	.word	0x00082e6d
   82c10:	00082e6d 	.word	0x00082e6d
   82c14:	00082e6d 	.word	0x00082e6d
   82c18:	00082e6d 	.word	0x00082e6d
   82c1c:	00082e6d 	.word	0x00082e6d
   82c20:	00082e6d 	.word	0x00082e6d
   82c24:	00082e6d 	.word	0x00082e6d
   82c28:	00082e6d 	.word	0x00082e6d
   82c2c:	00082e6d 	.word	0x00082e6d
   82c30:	00082e6d 	.word	0x00082e6d
   82c34:	00082e6d 	.word	0x00082e6d
   82c38:	00082e6d 	.word	0x00082e6d
   82c3c:	00082e6d 	.word	0x00082e6d
   82c40:	00082e6d 	.word	0x00082e6d
   82c44:	00082e6d 	.word	0x00082e6d
   82c48:	00082e6d 	.word	0x00082e6d
   82c4c:	00082e6d 	.word	0x00082e6d
   82c50:	00082e6d 	.word	0x00082e6d
   82c54:	00082e6d 	.word	0x00082e6d
   82c58:	00082e6d 	.word	0x00082e6d
   82c5c:	00082e6d 	.word	0x00082e6d
   82c60:	00082e6d 	.word	0x00082e6d
   82c64:	00082e6d 	.word	0x00082e6d
   82c68:	00082dfd 	.word	0x00082dfd
			{
				case CPU2_STANDBY:
				
					if (bp_start_command == BP_START_BLOOD_PUMP)
   82c6c:	4b2d      	ldr	r3, [pc, #180]	; (82d24 <main+0x32c>)
   82c6e:	781b      	ldrb	r3, [r3, #0]
   82c70:	b2db      	uxtb	r3, r3
   82c72:	2b20      	cmp	r3, #32
   82c74:	d107      	bne.n	82c86 <main+0x28e>
					{
						//printf("start\n");
						bp_start_command = 0;
   82c76:	4b2b      	ldr	r3, [pc, #172]	; (82d24 <main+0x32c>)
   82c78:	2200      	movs	r2, #0
   82c7a:	701a      	strb	r2, [r3, #0]
						start_bloodpump();
   82c7c:	4b2a      	ldr	r3, [pc, #168]	; (82d28 <main+0x330>)
   82c7e:	4798      	blx	r3
						states_2 = CPU2_BLOODPUMP;
   82c80:	4b27      	ldr	r3, [pc, #156]	; (82d20 <main+0x328>)
   82c82:	2201      	movs	r2, #1
   82c84:	701a      	strb	r2, [r3, #0]
					}
					command = (uint8_t)0;
   82c86:	4b21      	ldr	r3, [pc, #132]	; (82d0c <main+0x314>)
   82c88:	2200      	movs	r2, #0
   82c8a:	701a      	strb	r2, [r3, #0]
				//	flag_buff = 0;
					data_count = 0;			
   82c8c:	4b27      	ldr	r3, [pc, #156]	; (82d2c <main+0x334>)
   82c8e:	2200      	movs	r2, #0
   82c90:	601a      	str	r2, [r3, #0]
					
				break;
   82c92:	e0ec      	b.n	82e6e <main+0x476>
   82c94:	0008362d 	.word	0x0008362d
   82c98:	000836d5 	.word	0x000836d5
   82c9c:	00081f4d 	.word	0x00081f4d
   82ca0:	000829b5 	.word	0x000829b5
   82ca4:	0008768c 	.word	0x0008768c
   82ca8:	00084731 	.word	0x00084731
   82cac:	00087698 	.word	0x00087698
   82cb0:	400e0e00 	.word	0x400e0e00
   82cb4:	50494f00 	.word	0x50494f00
   82cb8:	00083ee9 	.word	0x00083ee9
   82cbc:	400e1400 	.word	0x400e1400
   82cc0:	400e1200 	.word	0x400e1200
   82cc4:	4007f800 	.word	0x4007f800
   82cc8:	4007f000 	.word	0x4007f000
   82ccc:	40094000 	.word	0x40094000
   82cd0:	50574d00 	.word	0x50574d00
   82cd4:	00070605 	.word	0x00070605
   82cd8:	20070008 	.word	0x20070008
   82cdc:	20070990 	.word	0x20070990
   82ce0:	20070994 	.word	0x20070994
   82ce4:	000824f5 	.word	0x000824f5
   82ce8:	00082529 	.word	0x00082529
   82cec:	0008255d 	.word	0x0008255d
   82cf0:	000824c5 	.word	0x000824c5
   82cf4:	006422ba 	.word	0x006422ba
   82cf8:	40080000 	.word	0x40080000
   82cfc:	00081bf9 	.word	0x00081bf9
   82d00:	00081cd9 	.word	0x00081cd9
   82d04:	0008114d 	.word	0x0008114d
   82d08:	20070938 	.word	0x20070938
   82d0c:	2007098c 	.word	0x2007098c
   82d10:	20070eb0 	.word	0x20070eb0
   82d14:	00081e85 	.word	0x00081e85
   82d18:	000811d1 	.word	0x000811d1
   82d1c:	0098967f 	.word	0x0098967f
   82d20:	20070980 	.word	0x20070980
   82d24:	2007093c 	.word	0x2007093c
   82d28:	000830a1 	.word	0x000830a1
   82d2c:	20070931 	.word	0x20070931
				
// 
// 					switch (command)
// 					{

						if (bp_start_command == BP_START_BLOOD_PUMP)
   82d30:	4b9b      	ldr	r3, [pc, #620]	; (82fa0 <main+0x5a8>)
   82d32:	781b      	ldrb	r3, [r3, #0]
   82d34:	b2db      	uxtb	r3, r3
   82d36:	2b20      	cmp	r3, #32
   82d38:	d11b      	bne.n	82d72 <main+0x37a>
						{	
							bp_start_command =  0;
   82d3a:	4b99      	ldr	r3, [pc, #612]	; (82fa0 <main+0x5a8>)
   82d3c:	2200      	movs	r2, #0
   82d3e:	701a      	strb	r2, [r3, #0]
							start_bloodpump();
   82d40:	4b98      	ldr	r3, [pc, #608]	; (82fa4 <main+0x5ac>)
   82d42:	4798      	blx	r3
							//printf("start\n");
							if (modify_1==1)
   82d44:	4b98      	ldr	r3, [pc, #608]	; (82fa8 <main+0x5b0>)
   82d46:	781b      	ldrb	r3, [r3, #0]
   82d48:	b2db      	uxtb	r3, r3
   82d4a:	2b01      	cmp	r3, #1
   82d4c:	d10e      	bne.n	82d6c <main+0x374>
							{
								modify=1;
   82d4e:	4b97      	ldr	r3, [pc, #604]	; (82fac <main+0x5b4>)
   82d50:	2201      	movs	r2, #1
   82d52:	701a      	strb	r2, [r3, #0]
								flag_3=1;
   82d54:	4b96      	ldr	r3, [pc, #600]	; (82fb0 <main+0x5b8>)
   82d56:	2201      	movs	r2, #1
   82d58:	701a      	strb	r2, [r3, #0]
								flag_1=1;
   82d5a:	4b96      	ldr	r3, [pc, #600]	; (82fb4 <main+0x5bc>)
   82d5c:	2201      	movs	r2, #1
   82d5e:	701a      	strb	r2, [r3, #0]
								flag_2=1;
   82d60:	4b95      	ldr	r3, [pc, #596]	; (82fb8 <main+0x5c0>)
   82d62:	2201      	movs	r2, #1
   82d64:	701a      	strb	r2, [r3, #0]
								count_2=2;
   82d66:	4b95      	ldr	r3, [pc, #596]	; (82fbc <main+0x5c4>)
   82d68:	2202      	movs	r2, #2
   82d6a:	701a      	strb	r2, [r3, #0]
							}
						//	flag_buff--;
							states_2 = CPU2_BLOODPUMP;
   82d6c:	4b94      	ldr	r3, [pc, #592]	; (82fc0 <main+0x5c8>)
   82d6e:	2201      	movs	r2, #1
   82d70:	701a      	strb	r2, [r3, #0]
						}
					//	break;

						if (bp_stop_command == BP_STOP_PUMP)
   82d72:	4b94      	ldr	r3, [pc, #592]	; (82fc4 <main+0x5cc>)
   82d74:	781b      	ldrb	r3, [r3, #0]
   82d76:	b2db      	uxtb	r3, r3
   82d78:	2b21      	cmp	r3, #33	; 0x21
   82d7a:	d119      	bne.n	82db0 <main+0x3b8>
						{
							
						bp_stop_command = 0;
   82d7c:	4b91      	ldr	r3, [pc, #580]	; (82fc4 <main+0x5cc>)
   82d7e:	2200      	movs	r2, #0
   82d80:	701a      	strb	r2, [r3, #0]
						//printf("stop\n");
							stop_bloodpump();
   82d82:	4b91      	ldr	r3, [pc, #580]	; (82fc8 <main+0x5d0>)
   82d84:	4798      	blx	r3
							//states_2 = CPU2_STANDBY;
							fedbck_cnt=0;
   82d86:	4b91      	ldr	r3, [pc, #580]	; (82fcc <main+0x5d4>)
   82d88:	2200      	movs	r2, #0
   82d8a:	601a      	str	r2, [r3, #0]
							modify=0;
   82d8c:	4b87      	ldr	r3, [pc, #540]	; (82fac <main+0x5b4>)
   82d8e:	2200      	movs	r2, #0
   82d90:	701a      	strb	r2, [r3, #0]
							flag_3=0;
   82d92:	4b87      	ldr	r3, [pc, #540]	; (82fb0 <main+0x5b8>)
   82d94:	2200      	movs	r2, #0
   82d96:	701a      	strb	r2, [r3, #0]
							flag_1=0;
   82d98:	4b86      	ldr	r3, [pc, #536]	; (82fb4 <main+0x5bc>)
   82d9a:	2200      	movs	r2, #0
   82d9c:	701a      	strb	r2, [r3, #0]
							flag_2=0;
   82d9e:	4b86      	ldr	r3, [pc, #536]	; (82fb8 <main+0x5c0>)
   82da0:	2200      	movs	r2, #0
   82da2:	701a      	strb	r2, [r3, #0]
							count_2=0;
   82da4:	4b85      	ldr	r3, [pc, #532]	; (82fbc <main+0x5c4>)
   82da6:	2200      	movs	r2, #0
   82da8:	701a      	strb	r2, [r3, #0]
							states_2 = CPU2_BLOODPUMP;
   82daa:	4b85      	ldr	r3, [pc, #532]	; (82fc0 <main+0x5c8>)
   82dac:	2201      	movs	r2, #1
   82dae:	701a      	strb	r2, [r3, #0]
							count_stop = 0;
							
							//CPU2_D_INIT_IIC();
							states_2 = CPU2_STANDBY;
						break;*/
							if (bp_Speed_change_command == BP_SPEED_CHANGE)
   82db0:	4b87      	ldr	r3, [pc, #540]	; (82fd0 <main+0x5d8>)
   82db2:	781b      	ldrb	r3, [r3, #0]
   82db4:	b2db      	uxtb	r3, r3
   82db6:	2b23      	cmp	r3, #35	; 0x23
   82db8:	d113      	bne.n	82de2 <main+0x3ea>
							{
								
							bp_Speed_change_command = 0;
   82dba:	4b85      	ldr	r3, [pc, #532]	; (82fd0 <main+0x5d8>)
   82dbc:	2200      	movs	r2, #0
   82dbe:	701a      	strb	r2, [r3, #0]
// 								data_stream.bytearray[0] = data_buff[1];
// 								data_stream.bytearray[1] = data_buff[2];
// 								speed_d.byte[0]= data_stream.bytearray[0];
// 								speed_d.byte[1]= data_stream.bytearray[1];
// 								//printf("%d\n",data_stream.Twobyte);
								speedchange_bloodpump(bp_speed);
   82dc0:	4b84      	ldr	r3, [pc, #528]	; (82fd4 <main+0x5dc>)
   82dc2:	681b      	ldr	r3, [r3, #0]
   82dc4:	4618      	mov	r0, r3
   82dc6:	4b84      	ldr	r3, [pc, #528]	; (82fd8 <main+0x5e0>)
   82dc8:	4798      	blx	r3
								states_2 = CPU2_BLOODPUMP;
   82dca:	4b7d      	ldr	r3, [pc, #500]	; (82fc0 <main+0x5c8>)
   82dcc:	2201      	movs	r2, #1
   82dce:	701a      	strb	r2, [r3, #0]
								modify=1;
   82dd0:	4b76      	ldr	r3, [pc, #472]	; (82fac <main+0x5b4>)
   82dd2:	2201      	movs	r2, #1
   82dd4:	701a      	strb	r2, [r3, #0]
								modify_1=1;
   82dd6:	4b74      	ldr	r3, [pc, #464]	; (82fa8 <main+0x5b0>)
   82dd8:	2201      	movs	r2, #1
   82dda:	701a      	strb	r2, [r3, #0]
								data_count1=0;
   82ddc:	4b7f      	ldr	r3, [pc, #508]	; (82fdc <main+0x5e4>)
   82dde:	2200      	movs	r2, #0
   82de0:	601a      	str	r2, [r3, #0]
							}			
							//}
					//	break;
						
							if (bp_inc == BP_INC)
   82de2:	4b7f      	ldr	r3, [pc, #508]	; (82fe0 <main+0x5e8>)
   82de4:	781b      	ldrb	r3, [r3, #0]
   82de6:	b2db      	uxtb	r3, r3
   82de8:	2b25      	cmp	r3, #37	; 0x25
   82dea:	d107      	bne.n	82dfc <main+0x404>
							{
								bp_inc = 0;
   82dec:	4b7c      	ldr	r3, [pc, #496]	; (82fe0 <main+0x5e8>)
   82dee:	2200      	movs	r2, #0
   82df0:	701a      	strb	r2, [r3, #0]
						//	}
						//	printf("inc\n");
							fed_value = fed_value+10;
   82df2:	4b7c      	ldr	r3, [pc, #496]	; (82fe4 <main+0x5ec>)
   82df4:	681b      	ldr	r3, [r3, #0]
   82df6:	330a      	adds	r3, #10
   82df8:	4a7a      	ldr	r2, [pc, #488]	; (82fe4 <main+0x5ec>)
   82dfa:	6013      	str	r3, [r2, #0]
							//printf("%d\n",fed_value);
							}
					//	break;
						case BP_DEC:
							if (bp_dec == BP_DEC)
   82dfc:	4b7a      	ldr	r3, [pc, #488]	; (82fe8 <main+0x5f0>)
   82dfe:	781b      	ldrb	r3, [r3, #0]
   82e00:	b2db      	uxtb	r3, r3
   82e02:	2b26      	cmp	r3, #38	; 0x26
   82e04:	d107      	bne.n	82e16 <main+0x41e>
							{
								bp_dec = 0;
   82e06:	4b78      	ldr	r3, [pc, #480]	; (82fe8 <main+0x5f0>)
   82e08:	2200      	movs	r2, #0
   82e0a:	701a      	strb	r2, [r3, #0]
					//	printf("dec\n");
							fed_value = fed_value-10;
   82e0c:	4b75      	ldr	r3, [pc, #468]	; (82fe4 <main+0x5ec>)
   82e0e:	681b      	ldr	r3, [r3, #0]
   82e10:	3b0a      	subs	r3, #10
   82e12:	4a74      	ldr	r2, [pc, #464]	; (82fe4 <main+0x5ec>)
   82e14:	6013      	str	r3, [r2, #0]
// 						break;
// 						
// 						default:
// 						break;
			//		}
					command = (uint8_t)0;
   82e16:	4b75      	ldr	r3, [pc, #468]	; (82fec <main+0x5f4>)
   82e18:	2200      	movs	r2, #0
   82e1a:	701a      	strb	r2, [r3, #0]
					//flag_buff = 0;
					data_count = 0;
   82e1c:	4b74      	ldr	r3, [pc, #464]	; (82ff0 <main+0x5f8>)
   82e1e:	2200      	movs	r2, #0
   82e20:	601a      	str	r2, [r3, #0]
				break;
   82e22:	e024      	b.n	82e6e <main+0x476>
				
				case CPU2_SAFETYSTATE:
				//printf("%d\n",data_buff[0]);
				switch (command)
   82e24:	4b71      	ldr	r3, [pc, #452]	; (82fec <main+0x5f4>)
   82e26:	781b      	ldrb	r3, [r3, #0]
   82e28:	2b28      	cmp	r3, #40	; 0x28
   82e2a:	d000      	beq.n	82e2e <main+0x436>
						states_2 = CPU2_SAFETYSTATE;
					}
					break;
					
					default:
					break;
   82e2c:	e01d      	b.n	82e6a <main+0x472>
				case CPU2_SAFETYSTATE:
				//printf("%d\n",data_buff[0]);
				switch (command)
				{
					case BP_RECOVER:
					cpu2_sensorstatus();
   82e2e:	4b71      	ldr	r3, [pc, #452]	; (82ff4 <main+0x5fc>)
   82e30:	4798      	blx	r3
					
					if (sensor_status.bldpump_door == 0)
   82e32:	4b71      	ldr	r3, [pc, #452]	; (82ff8 <main+0x600>)
   82e34:	789b      	ldrb	r3, [r3, #2]
   82e36:	2b00      	cmp	r3, #0
   82e38:	d10b      	bne.n	82e52 <main+0x45a>
					{
						states_2 = CPU2_BLOODPUMP;
   82e3a:	4b61      	ldr	r3, [pc, #388]	; (82fc0 <main+0x5c8>)
   82e3c:	2201      	movs	r2, #1
   82e3e:	701a      	strb	r2, [r3, #0]
						cpu2_sv_cntrl_deactivate_pin(RUDNCY_INT);
   82e40:	2007      	movs	r0, #7
   82e42:	4b6e      	ldr	r3, [pc, #440]	; (82ffc <main+0x604>)
   82e44:	4798      	blx	r3
						cpu2_sv_cntrl_deactivate_pin(CPU_INT);
   82e46:	2008      	movs	r0, #8
   82e48:	4b6c      	ldr	r3, [pc, #432]	; (82ffc <main+0x604>)
   82e4a:	4798      	blx	r3
						safety_measure_deactivate();
   82e4c:	4b6c      	ldr	r3, [pc, #432]	; (83000 <main+0x608>)
   82e4e:	4798      	blx	r3
						cpu2_sv_cntrl_activate_pin(RUDNCY_INT);
						cpu2_sv_cntrl_activate_pin(CPU_INT);
						safety_measure_activate();
						states_2 = CPU2_SAFETYSTATE;
					}
					break;
   82e50:	e00a      	b.n	82e68 <main+0x470>
						cpu2_sv_cntrl_deactivate_pin(CPU_INT);
						safety_measure_deactivate();
					}
					else
					{
						cpu2_sv_cntrl_activate_pin(RUDNCY_INT);
   82e52:	2007      	movs	r0, #7
   82e54:	4b6b      	ldr	r3, [pc, #428]	; (83004 <main+0x60c>)
   82e56:	4798      	blx	r3
						cpu2_sv_cntrl_activate_pin(CPU_INT);
   82e58:	2008      	movs	r0, #8
   82e5a:	4b6a      	ldr	r3, [pc, #424]	; (83004 <main+0x60c>)
   82e5c:	4798      	blx	r3
						safety_measure_activate();
   82e5e:	4b6a      	ldr	r3, [pc, #424]	; (83008 <main+0x610>)
   82e60:	4798      	blx	r3
						states_2 = CPU2_SAFETYSTATE;
   82e62:	4b57      	ldr	r3, [pc, #348]	; (82fc0 <main+0x5c8>)
   82e64:	2202      	movs	r2, #2
   82e66:	701a      	strb	r2, [r3, #0]
					}
					break;
   82e68:	bf00      	nop
					
					default:
					break;
					//similarly for the temp and conductivity
				}
				break;
   82e6a:	e000      	b.n	82e6e <main+0x476>
				
				default:
				break;
   82e6c:	bf00      	nop
				
			}
			command = (uint8_t)0;
   82e6e:	4b5f      	ldr	r3, [pc, #380]	; (82fec <main+0x5f4>)
   82e70:	2200      	movs	r2, #0
   82e72:	701a      	strb	r2, [r3, #0]
			//data_buff[1] = (uint8_t)0;
			//data_buff[2] = (uint8_t)0;
		//	flag_buff = 0;
		flag_buff--;
   82e74:	4b65      	ldr	r3, [pc, #404]	; (8300c <main+0x614>)
   82e76:	781b      	ldrb	r3, [r3, #0]
   82e78:	b2db      	uxtb	r3, r3
   82e7a:	3b01      	subs	r3, #1
   82e7c:	b2da      	uxtb	r2, r3
   82e7e:	4b63      	ldr	r3, [pc, #396]	; (8300c <main+0x614>)
   82e80:	701a      	strb	r2, [r3, #0]
			/*if ()				// fpr conductivity and temp
			{
			}*/
		//}
		
		while (flag_buff >= 1)
   82e82:	4b62      	ldr	r3, [pc, #392]	; (8300c <main+0x614>)
   82e84:	781b      	ldrb	r3, [r3, #0]
   82e86:	b2db      	uxtb	r3, r3
   82e88:	2b00      	cmp	r3, #0
   82e8a:	f47f ae70 	bne.w	82b6e <main+0x176>
//			data_count = 0;
		}
		
		
				
		if (!( time_tick % 5))
   82e8e:	4b60      	ldr	r3, [pc, #384]	; (83010 <main+0x618>)
   82e90:	6819      	ldr	r1, [r3, #0]
   82e92:	4b60      	ldr	r3, [pc, #384]	; (83014 <main+0x61c>)
   82e94:	fba3 2301 	umull	r2, r3, r3, r1
   82e98:	089a      	lsrs	r2, r3, #2
   82e9a:	4613      	mov	r3, r2
   82e9c:	009b      	lsls	r3, r3, #2
   82e9e:	4413      	add	r3, r2
   82ea0:	1aca      	subs	r2, r1, r3
   82ea2:	2a00      	cmp	r2, #0
   82ea4:	d101      	bne.n	82eaa <main+0x4b2>
		{
			// read APT and VPT from spi
			cpu2_sensorstatus();
   82ea6:	4b53      	ldr	r3, [pc, #332]	; (82ff4 <main+0x5fc>)
   82ea8:	4798      	blx	r3
		}
		if(modify==1)
   82eaa:	4b40      	ldr	r3, [pc, #256]	; (82fac <main+0x5b4>)
   82eac:	781b      	ldrb	r3, [r3, #0]
   82eae:	b2db      	uxtb	r3, r3
   82eb0:	2b01      	cmp	r3, #1
   82eb2:	f47f ae5b 	bne.w	82b6c <main+0x174>
// 				fedbck_cnt++;
// 			}
// 			prev_status= status;
// 		
//
			if (flag_1==1 && flag_2==1)
   82eb6:	4b3f      	ldr	r3, [pc, #252]	; (82fb4 <main+0x5bc>)
   82eb8:	781b      	ldrb	r3, [r3, #0]
   82eba:	2b01      	cmp	r3, #1
   82ebc:	f47f ae56 	bne.w	82b6c <main+0x174>
   82ec0:	4b3d      	ldr	r3, [pc, #244]	; (82fb8 <main+0x5c0>)
   82ec2:	781b      	ldrb	r3, [r3, #0]
   82ec4:	b2db      	uxtb	r3, r3
   82ec6:	2b01      	cmp	r3, #1
   82ec8:	f47f ae50 	bne.w	82b6c <main+0x174>
			{
	//			printf("test string forever = %d\n",fedbck_cnt1);
				if (count_2==2)
   82ecc:	4b3b      	ldr	r3, [pc, #236]	; (82fbc <main+0x5c4>)
   82ece:	781b      	ldrb	r3, [r3, #0]
   82ed0:	b2db      	uxtb	r3, r3
   82ed2:	2b02      	cmp	r3, #2
   82ed4:	d102      	bne.n	82edc <main+0x4e4>
				{
					flag_3=1;
   82ed6:	4b36      	ldr	r3, [pc, #216]	; (82fb0 <main+0x5b8>)
   82ed8:	2201      	movs	r2, #1
   82eda:	701a      	strb	r2, [r3, #0]
				}
				if (flag_3==1)
   82edc:	4b34      	ldr	r3, [pc, #208]	; (82fb0 <main+0x5b8>)
   82ede:	781b      	ldrb	r3, [r3, #0]
   82ee0:	b2db      	uxtb	r3, r3
   82ee2:	2b01      	cmp	r3, #1
   82ee4:	f040 80cd 	bne.w	83082 <main+0x68a>
				{
					if (fedbck_cnt1 > fed_value )
   82ee8:	4b4b      	ldr	r3, [pc, #300]	; (83018 <main+0x620>)
   82eea:	881b      	ldrh	r3, [r3, #0]
   82eec:	461a      	mov	r2, r3
   82eee:	4b3d      	ldr	r3, [pc, #244]	; (82fe4 <main+0x5ec>)
   82ef0:	681b      	ldr	r3, [r3, #0]
   82ef2:	429a      	cmp	r2, r3
   82ef4:	f240 80b4 	bls.w	83060 <main+0x668>
						{
							DUTY=DUTY-2;
							PWM->PWM_CH_NUM[4].PWM_CDTYUPD = DUTY;
							printf("DUTY=%d\n",DUTY);
						}*/
								if (fedbck_cnt1 > fed_value+100)
   82ef8:	4b47      	ldr	r3, [pc, #284]	; (83018 <main+0x620>)
   82efa:	881b      	ldrh	r3, [r3, #0]
   82efc:	461a      	mov	r2, r3
   82efe:	4b39      	ldr	r3, [pc, #228]	; (82fe4 <main+0x5ec>)
   82f00:	681b      	ldr	r3, [r3, #0]
   82f02:	3364      	adds	r3, #100	; 0x64
   82f04:	429a      	cmp	r2, r3
   82f06:	d90a      	bls.n	82f1e <main+0x526>
								{
									//printf("decrment by 60....\n");
									DUTY=DUTY-60;
   82f08:	4b44      	ldr	r3, [pc, #272]	; (8301c <main+0x624>)
   82f0a:	681b      	ldr	r3, [r3, #0]
   82f0c:	3b3c      	subs	r3, #60	; 0x3c
   82f0e:	4a43      	ldr	r2, [pc, #268]	; (8301c <main+0x624>)
   82f10:	6013      	str	r3, [r2, #0]
									PWM->PWM_CH_NUM[4].PWM_CDTYUPD = DUTY;
   82f12:	4a43      	ldr	r2, [pc, #268]	; (83020 <main+0x628>)
   82f14:	4b41      	ldr	r3, [pc, #260]	; (8301c <main+0x624>)
   82f16:	681b      	ldr	r3, [r3, #0]
   82f18:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   82f1c:	e0b1      	b.n	83082 <main+0x68a>
							//		printf("DUTY=%d\n",DUTY);
								}
								else if (fedbck_cnt1 > fed_value+80)
   82f1e:	4b3e      	ldr	r3, [pc, #248]	; (83018 <main+0x620>)
   82f20:	881b      	ldrh	r3, [r3, #0]
   82f22:	461a      	mov	r2, r3
   82f24:	4b2f      	ldr	r3, [pc, #188]	; (82fe4 <main+0x5ec>)
   82f26:	681b      	ldr	r3, [r3, #0]
   82f28:	3350      	adds	r3, #80	; 0x50
   82f2a:	429a      	cmp	r2, r3
   82f2c:	d90a      	bls.n	82f44 <main+0x54c>
								{
									//printf("decrment by 50....\n");
									DUTY=DUTY-50;
   82f2e:	4b3b      	ldr	r3, [pc, #236]	; (8301c <main+0x624>)
   82f30:	681b      	ldr	r3, [r3, #0]
   82f32:	3b32      	subs	r3, #50	; 0x32
   82f34:	4a39      	ldr	r2, [pc, #228]	; (8301c <main+0x624>)
   82f36:	6013      	str	r3, [r2, #0]
									PWM->PWM_CH_NUM[4].PWM_CDTYUPD = DUTY;
   82f38:	4a39      	ldr	r2, [pc, #228]	; (83020 <main+0x628>)
   82f3a:	4b38      	ldr	r3, [pc, #224]	; (8301c <main+0x624>)
   82f3c:	681b      	ldr	r3, [r3, #0]
   82f3e:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   82f42:	e09e      	b.n	83082 <main+0x68a>
								//	printf("DUTY=%d\n",DUTY);
								}
								else if ((fedbck_cnt1 >= fed_value+20) && (fedbck_cnt1 <=fed_value+80))
   82f44:	4b34      	ldr	r3, [pc, #208]	; (83018 <main+0x620>)
   82f46:	881b      	ldrh	r3, [r3, #0]
   82f48:	461a      	mov	r2, r3
   82f4a:	4b26      	ldr	r3, [pc, #152]	; (82fe4 <main+0x5ec>)
   82f4c:	681b      	ldr	r3, [r3, #0]
   82f4e:	3314      	adds	r3, #20
   82f50:	429a      	cmp	r2, r3
   82f52:	d312      	bcc.n	82f7a <main+0x582>
   82f54:	4b30      	ldr	r3, [pc, #192]	; (83018 <main+0x620>)
   82f56:	881b      	ldrh	r3, [r3, #0]
   82f58:	461a      	mov	r2, r3
   82f5a:	4b22      	ldr	r3, [pc, #136]	; (82fe4 <main+0x5ec>)
   82f5c:	681b      	ldr	r3, [r3, #0]
   82f5e:	3350      	adds	r3, #80	; 0x50
   82f60:	429a      	cmp	r2, r3
   82f62:	d80a      	bhi.n	82f7a <main+0x582>
								{
									//printf("decrment by 40....\n");
									DUTY=DUTY-40;
   82f64:	4b2d      	ldr	r3, [pc, #180]	; (8301c <main+0x624>)
   82f66:	681b      	ldr	r3, [r3, #0]
   82f68:	3b28      	subs	r3, #40	; 0x28
   82f6a:	4a2c      	ldr	r2, [pc, #176]	; (8301c <main+0x624>)
   82f6c:	6013      	str	r3, [r2, #0]
									PWM->PWM_CH_NUM[4].PWM_CDTYUPD = DUTY;
   82f6e:	4a2c      	ldr	r2, [pc, #176]	; (83020 <main+0x628>)
   82f70:	4b2a      	ldr	r3, [pc, #168]	; (8301c <main+0x624>)
   82f72:	681b      	ldr	r3, [r3, #0]
   82f74:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   82f78:	e083      	b.n	83082 <main+0x68a>
								//	printf("DUTY=%d\n",DUTY);
								}
								else if (fedbck_cnt1 > fed_value+10)
   82f7a:	4b27      	ldr	r3, [pc, #156]	; (83018 <main+0x620>)
   82f7c:	881b      	ldrh	r3, [r3, #0]
   82f7e:	461a      	mov	r2, r3
   82f80:	4b18      	ldr	r3, [pc, #96]	; (82fe4 <main+0x5ec>)
   82f82:	681b      	ldr	r3, [r3, #0]
   82f84:	330a      	adds	r3, #10
   82f86:	429a      	cmp	r2, r3
   82f88:	d94c      	bls.n	83024 <main+0x62c>
								{
									//printf("decrment by 20....\n");
									DUTY=DUTY-20;
   82f8a:	4b24      	ldr	r3, [pc, #144]	; (8301c <main+0x624>)
   82f8c:	681b      	ldr	r3, [r3, #0]
   82f8e:	3b14      	subs	r3, #20
   82f90:	4a22      	ldr	r2, [pc, #136]	; (8301c <main+0x624>)
   82f92:	6013      	str	r3, [r2, #0]
									PWM->PWM_CH_NUM[4].PWM_CDTYUPD = DUTY;
   82f94:	4a22      	ldr	r2, [pc, #136]	; (83020 <main+0x628>)
   82f96:	4b21      	ldr	r3, [pc, #132]	; (8301c <main+0x624>)
   82f98:	681b      	ldr	r3, [r3, #0]
   82f9a:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   82f9e:	e070      	b.n	83082 <main+0x68a>
   82fa0:	2007093c 	.word	0x2007093c
   82fa4:	000830a1 	.word	0x000830a1
   82fa8:	20070984 	.word	0x20070984
   82fac:	20070983 	.word	0x20070983
   82fb0:	20070982 	.word	0x20070982
   82fb4:	20070958 	.word	0x20070958
   82fb8:	20070981 	.word	0x20070981
   82fbc:	20070960 	.word	0x20070960
   82fc0:	20070980 	.word	0x20070980
   82fc4:	2007093d 	.word	0x2007093d
   82fc8:	000830cd 	.word	0x000830cd
   82fcc:	2007095c 	.word	0x2007095c
   82fd0:	2007093e 	.word	0x2007093e
   82fd4:	20070a7c 	.word	0x20070a7c
   82fd8:	000830f1 	.word	0x000830f1
   82fdc:	20070934 	.word	0x20070934
   82fe0:	2007093f 	.word	0x2007093f
   82fe4:	20070988 	.word	0x20070988
   82fe8:	20070940 	.word	0x20070940
   82fec:	2007098c 	.word	0x2007098c
   82ff0:	20070931 	.word	0x20070931
   82ff4:	0008327d 	.word	0x0008327d
   82ff8:	20070ec8 	.word	0x20070ec8
   82ffc:	00081dad 	.word	0x00081dad
   83000:	00083311 	.word	0x00083311
   83004:	00081d8d 	.word	0x00081d8d
   83008:	000832f1 	.word	0x000832f1
   8300c:	20070a78 	.word	0x20070a78
   83010:	20070954 	.word	0x20070954
   83014:	cccccccd 	.word	0xcccccccd
   83018:	20070964 	.word	0x20070964
   8301c:	20070008 	.word	0x20070008
   83020:	40094000 	.word	0x40094000
								//	printf("DUTY=%d\n",DUTY);
								}
								
								else if (fedbck_cnt1 > fed_value+5)
   83024:	4b19      	ldr	r3, [pc, #100]	; (8308c <main+0x694>)
   83026:	881b      	ldrh	r3, [r3, #0]
   83028:	461a      	mov	r2, r3
   8302a:	4b19      	ldr	r3, [pc, #100]	; (83090 <main+0x698>)
   8302c:	681b      	ldr	r3, [r3, #0]
   8302e:	3305      	adds	r3, #5
   83030:	429a      	cmp	r2, r3
   83032:	d90a      	bls.n	8304a <main+0x652>
								{
									//printf("decrment by 10....\n");
									DUTY=DUTY-10;
   83034:	4b17      	ldr	r3, [pc, #92]	; (83094 <main+0x69c>)
   83036:	681b      	ldr	r3, [r3, #0]
   83038:	3b0a      	subs	r3, #10
   8303a:	4a16      	ldr	r2, [pc, #88]	; (83094 <main+0x69c>)
   8303c:	6013      	str	r3, [r2, #0]
									PWM->PWM_CH_NUM[4].PWM_CDTYUPD = DUTY;
   8303e:	4a16      	ldr	r2, [pc, #88]	; (83098 <main+0x6a0>)
   83040:	4b14      	ldr	r3, [pc, #80]	; (83094 <main+0x69c>)
   83042:	681b      	ldr	r3, [r3, #0]
   83044:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   83048:	e01b      	b.n	83082 <main+0x68a>
								//	printf("DUTY=%d\n",DUTY);
								}
								else
								{
									//printf("decrment by 2....\n");
									DUTY=DUTY-2;
   8304a:	4b12      	ldr	r3, [pc, #72]	; (83094 <main+0x69c>)
   8304c:	681b      	ldr	r3, [r3, #0]
   8304e:	3b02      	subs	r3, #2
   83050:	4a10      	ldr	r2, [pc, #64]	; (83094 <main+0x69c>)
   83052:	6013      	str	r3, [r2, #0]
									PWM->PWM_CH_NUM[4].PWM_CDTYUPD = DUTY;
   83054:	4a10      	ldr	r2, [pc, #64]	; (83098 <main+0x6a0>)
   83056:	4b0f      	ldr	r3, [pc, #60]	; (83094 <main+0x69c>)
   83058:	681b      	ldr	r3, [r3, #0]
   8305a:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   8305e:	e010      	b.n	83082 <main+0x68a>
								
						}
							
						//fedbck_cnt2=fedbck_cnt1;
						
					else if (fedbck_cnt1 < fed_value)
   83060:	4b0a      	ldr	r3, [pc, #40]	; (8308c <main+0x694>)
   83062:	881b      	ldrh	r3, [r3, #0]
   83064:	461a      	mov	r2, r3
   83066:	4b0a      	ldr	r3, [pc, #40]	; (83090 <main+0x698>)
   83068:	681b      	ldr	r3, [r3, #0]
   8306a:	429a      	cmp	r2, r3
   8306c:	d209      	bcs.n	83082 <main+0x68a>
					{
						//	printf("less...\n");
							DUTY=DUTY+1;
   8306e:	4b09      	ldr	r3, [pc, #36]	; (83094 <main+0x69c>)
   83070:	681b      	ldr	r3, [r3, #0]
   83072:	3301      	adds	r3, #1
   83074:	4a07      	ldr	r2, [pc, #28]	; (83094 <main+0x69c>)
   83076:	6013      	str	r3, [r2, #0]
							PWM->PWM_CH_NUM[4].PWM_CDTYUPD = DUTY;
   83078:	4a07      	ldr	r2, [pc, #28]	; (83098 <main+0x6a0>)
   8307a:	4b06      	ldr	r3, [pc, #24]	; (83094 <main+0x69c>)
   8307c:	681b      	ldr	r3, [r3, #0]
   8307e:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
						//	printf("DUTY=%d\n",DUTY);
						
					}
				}
				//fedbck_cnt1=0;
				flag_1=0;
   83082:	4b06      	ldr	r3, [pc, #24]	; (8309c <main+0x6a4>)
   83084:	2200      	movs	r2, #0
   83086:	701a      	strb	r2, [r3, #0]
		}
		
		
		
		
	}	
   83088:	e570      	b.n	82b6c <main+0x174>
   8308a:	bf00      	nop
   8308c:	20070964 	.word	0x20070964
   83090:	20070988 	.word	0x20070988
   83094:	20070008 	.word	0x20070008
   83098:	40094000 	.word	0x40094000
   8309c:	20070958 	.word	0x20070958

000830a0 <start_bloodpump>:
}

void start_bloodpump()
{
   830a0:	b580      	push	{r7, lr}
   830a2:	af00      	add	r7, sp, #0
	//startTimer1(TC0,0,TC0_IRQn,rc);
	//startTimer2(TC0,1,TC1_IRQn,ra);
	defaultspeed_bloodpump(rc);				// 10 rotation rc count is 231
	rampingspeed_bloodpump(ra);	*/
	
	PIOD->PIO_SODR = 0x00000008;				// setting of dac input that is 8
   830a4:	4b07      	ldr	r3, [pc, #28]	; (830c4 <start_bloodpump+0x24>)
   830a6:	2208      	movs	r2, #8
   830a8:	631a      	str	r2, [r3, #48]	; 0x30
	PIOD->PIO_CODR = 0x00000040;
   830aa:	4b06      	ldr	r3, [pc, #24]	; (830c4 <start_bloodpump+0x24>)
   830ac:	2240      	movs	r2, #64	; 0x40
   830ae:	635a      	str	r2, [r3, #52]	; 0x34
	PIOD->PIO_CODR = 0x00000200;
   830b0:	4b04      	ldr	r3, [pc, #16]	; (830c4 <start_bloodpump+0x24>)
   830b2:	f44f 7200 	mov.w	r2, #512	; 0x200
   830b6:	635a      	str	r2, [r3, #52]	; 0x34
	cpu2_sv_cntrl_activatepump(BLOODPUMP);		//35 rotation ra count will be 4179	
   830b8:	2001      	movs	r0, #1
   830ba:	4b03      	ldr	r3, [pc, #12]	; (830c8 <start_bloodpump+0x28>)
   830bc:	4798      	blx	r3
	
}
   830be:	bf00      	nop
   830c0:	bd80      	pop	{r7, pc}
   830c2:	bf00      	nop
   830c4:	400e1400 	.word	0x400e1400
   830c8:	00081d4d 	.word	0x00081d4d

000830cc <stop_bloodpump>:
void stop_bloodpump()
{
   830cc:	b580      	push	{r7, lr}
   830ce:	af00      	add	r7, sp, #0
	cpu2_sv_cntrl_deactivatepump(BLOODPUMP);
   830d0:	2001      	movs	r0, #1
   830d2:	4b05      	ldr	r3, [pc, #20]	; (830e8 <stop_bloodpump+0x1c>)
   830d4:	4798      	blx	r3
	PIOD->PIO_CODR = 0x0000000F;
   830d6:	4b05      	ldr	r3, [pc, #20]	; (830ec <stop_bloodpump+0x20>)
   830d8:	220f      	movs	r2, #15
   830da:	635a      	str	r2, [r3, #52]	; 0x34
	PIOD->PIO_SODR = 0x00000200;
   830dc:	4b03      	ldr	r3, [pc, #12]	; (830ec <stop_bloodpump+0x20>)
   830de:	f44f 7200 	mov.w	r2, #512	; 0x200
   830e2:	631a      	str	r2, [r3, #48]	; 0x30
	/*PIOD->PIO_SODR = 0x00000200;
	PIOC->PIO_SODR = 0x00001000;
	cpu2_sv_cntrl_deactivatepump(BLOODPUMP);
	CPU2_S_STOP_TIMER(0);
	CPU2_S_STOP_TIMER(1);*/
}
   830e4:	bf00      	nop
   830e6:	bd80      	pop	{r7, pc}
   830e8:	00081d6d 	.word	0x00081d6d
   830ec:	400e1400 	.word	0x400e1400

000830f0 <speedchange_bloodpump>:
void speedchange_bloodpump(uint32_t spd_change)
{
   830f0:	b590      	push	{r4, r7, lr}
   830f2:	b085      	sub	sp, #20
   830f4:	af00      	add	r7, sp, #0
   830f6:	6078      	str	r0, [r7, #4]
	int i;
	
	//printf("Before %d\n",spd_change);
	
	for(i=0;i<20;i++)
   830f8:	2300      	movs	r3, #0
   830fa:	60fb      	str	r3, [r7, #12]
   830fc:	e096      	b.n	8322c <speedchange_bloodpump+0x13c>
	{
		if(spd_change == blood_array[i].ml)
   830fe:	4a56      	ldr	r2, [pc, #344]	; (83258 <speedchange_bloodpump+0x168>)
   83100:	68fb      	ldr	r3, [r7, #12]
   83102:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
   83106:	b29b      	uxth	r3, r3
   83108:	461a      	mov	r2, r3
   8310a:	687b      	ldr	r3, [r7, #4]
   8310c:	429a      	cmp	r2, r3
   8310e:	d113      	bne.n	83138 <speedchange_bloodpump+0x48>
		{
			printf("value matched\n");
   83110:	4852      	ldr	r0, [pc, #328]	; (8325c <speedchange_bloodpump+0x16c>)
   83112:	4b53      	ldr	r3, [pc, #332]	; (83260 <speedchange_bloodpump+0x170>)
   83114:	4798      	blx	r3
			DUTY=blood_array[i].duty_value;
   83116:	4a50      	ldr	r2, [pc, #320]	; (83258 <speedchange_bloodpump+0x168>)
   83118:	68fb      	ldr	r3, [r7, #12]
   8311a:	00db      	lsls	r3, r3, #3
   8311c:	4413      	add	r3, r2
   8311e:	885b      	ldrh	r3, [r3, #2]
   83120:	b29b      	uxth	r3, r3
   83122:	461a      	mov	r2, r3
   83124:	4b4f      	ldr	r3, [pc, #316]	; (83264 <speedchange_bloodpump+0x174>)
   83126:	601a      	str	r2, [r3, #0]
			fed_value=blood_array[i].fdbck;
   83128:	4a4b      	ldr	r2, [pc, #300]	; (83258 <speedchange_bloodpump+0x168>)
   8312a:	68fb      	ldr	r3, [r7, #12]
   8312c:	00db      	lsls	r3, r3, #3
   8312e:	4413      	add	r3, r2
   83130:	685b      	ldr	r3, [r3, #4]
   83132:	4a4d      	ldr	r2, [pc, #308]	; (83268 <speedchange_bloodpump+0x178>)
   83134:	6013      	str	r3, [r2, #0]
			//value=i;
			break;
   83136:	e07d      	b.n	83234 <speedchange_bloodpump+0x144>
		}
		else if((spd_change > blood_array[i].ml) && (spd_change < blood_array[i+1].ml))
   83138:	4a47      	ldr	r2, [pc, #284]	; (83258 <speedchange_bloodpump+0x168>)
   8313a:	68fb      	ldr	r3, [r7, #12]
   8313c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
   83140:	b29b      	uxth	r3, r3
   83142:	461a      	mov	r2, r3
   83144:	687b      	ldr	r3, [r7, #4]
   83146:	429a      	cmp	r2, r3
   83148:	d26d      	bcs.n	83226 <speedchange_bloodpump+0x136>
   8314a:	68fb      	ldr	r3, [r7, #12]
   8314c:	3301      	adds	r3, #1
   8314e:	4a42      	ldr	r2, [pc, #264]	; (83258 <speedchange_bloodpump+0x168>)
   83150:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
   83154:	b29b      	uxth	r3, r3
   83156:	461a      	mov	r2, r3
   83158:	687b      	ldr	r3, [r7, #4]
   8315a:	429a      	cmp	r2, r3
   8315c:	d963      	bls.n	83226 <speedchange_bloodpump+0x136>
		{
			printf("manipulation\n");
   8315e:	4843      	ldr	r0, [pc, #268]	; (8326c <speedchange_bloodpump+0x17c>)
   83160:	4b3f      	ldr	r3, [pc, #252]	; (83260 <speedchange_bloodpump+0x170>)
   83162:	4798      	blx	r3
			DUTY = blood_array[i].duty_value+((blood_array[i+1].duty_value-blood_array[i].duty_value)/(blood_array[i+1].ml-blood_array[i].ml))*(spd_change-blood_array[i].ml);
   83164:	4a3c      	ldr	r2, [pc, #240]	; (83258 <speedchange_bloodpump+0x168>)
   83166:	68fb      	ldr	r3, [r7, #12]
   83168:	00db      	lsls	r3, r3, #3
   8316a:	4413      	add	r3, r2
   8316c:	885b      	ldrh	r3, [r3, #2]
   8316e:	b29b      	uxth	r3, r3
   83170:	4618      	mov	r0, r3
   83172:	68fb      	ldr	r3, [r7, #12]
   83174:	3301      	adds	r3, #1
   83176:	4a38      	ldr	r2, [pc, #224]	; (83258 <speedchange_bloodpump+0x168>)
   83178:	00db      	lsls	r3, r3, #3
   8317a:	4413      	add	r3, r2
   8317c:	885b      	ldrh	r3, [r3, #2]
   8317e:	b29b      	uxth	r3, r3
   83180:	4619      	mov	r1, r3
   83182:	4a35      	ldr	r2, [pc, #212]	; (83258 <speedchange_bloodpump+0x168>)
   83184:	68fb      	ldr	r3, [r7, #12]
   83186:	00db      	lsls	r3, r3, #3
   83188:	4413      	add	r3, r2
   8318a:	885b      	ldrh	r3, [r3, #2]
   8318c:	b29b      	uxth	r3, r3
   8318e:	1aca      	subs	r2, r1, r3
   83190:	68fb      	ldr	r3, [r7, #12]
   83192:	3301      	adds	r3, #1
   83194:	4930      	ldr	r1, [pc, #192]	; (83258 <speedchange_bloodpump+0x168>)
   83196:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
   8319a:	b29b      	uxth	r3, r3
   8319c:	461c      	mov	r4, r3
   8319e:	492e      	ldr	r1, [pc, #184]	; (83258 <speedchange_bloodpump+0x168>)
   831a0:	68fb      	ldr	r3, [r7, #12]
   831a2:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
   831a6:	b29b      	uxth	r3, r3
   831a8:	1ae3      	subs	r3, r4, r3
   831aa:	fb92 f3f3 	sdiv	r3, r2, r3
   831ae:	4619      	mov	r1, r3
   831b0:	4a29      	ldr	r2, [pc, #164]	; (83258 <speedchange_bloodpump+0x168>)
   831b2:	68fb      	ldr	r3, [r7, #12]
   831b4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
   831b8:	b29b      	uxth	r3, r3
   831ba:	461a      	mov	r2, r3
   831bc:	687b      	ldr	r3, [r7, #4]
   831be:	1a9b      	subs	r3, r3, r2
   831c0:	fb03 f301 	mul.w	r3, r3, r1
   831c4:	4403      	add	r3, r0
   831c6:	4a27      	ldr	r2, [pc, #156]	; (83264 <speedchange_bloodpump+0x174>)
   831c8:	6013      	str	r3, [r2, #0]
			//value=19;
			//fed_value = blood_array[i].fdbck+((blood_array[i+1].fdbck-blood_array[i].fdbck)/(blood_array[i+1].ml-blood_array[i].ml))*(spd_change-blood_array[i].ml);
			fed_value = ((spd_change-blood_array[i].ml)*(blood_array[i+1].fdbck-blood_array[i].fdbck)/(blood_array[i+1].ml-blood_array[i].ml))+blood_array[i].fdbck;
   831ca:	4a23      	ldr	r2, [pc, #140]	; (83258 <speedchange_bloodpump+0x168>)
   831cc:	68fb      	ldr	r3, [r7, #12]
   831ce:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
   831d2:	b29b      	uxth	r3, r3
   831d4:	461a      	mov	r2, r3
   831d6:	687b      	ldr	r3, [r7, #4]
   831d8:	1a9a      	subs	r2, r3, r2
   831da:	68fb      	ldr	r3, [r7, #12]
   831dc:	3301      	adds	r3, #1
   831de:	491e      	ldr	r1, [pc, #120]	; (83258 <speedchange_bloodpump+0x168>)
   831e0:	00db      	lsls	r3, r3, #3
   831e2:	440b      	add	r3, r1
   831e4:	6859      	ldr	r1, [r3, #4]
   831e6:	481c      	ldr	r0, [pc, #112]	; (83258 <speedchange_bloodpump+0x168>)
   831e8:	68fb      	ldr	r3, [r7, #12]
   831ea:	00db      	lsls	r3, r3, #3
   831ec:	4403      	add	r3, r0
   831ee:	685b      	ldr	r3, [r3, #4]
   831f0:	1acb      	subs	r3, r1, r3
   831f2:	fb03 f302 	mul.w	r3, r3, r2
   831f6:	68fa      	ldr	r2, [r7, #12]
   831f8:	3201      	adds	r2, #1
   831fa:	4917      	ldr	r1, [pc, #92]	; (83258 <speedchange_bloodpump+0x168>)
   831fc:	f831 2032 	ldrh.w	r2, [r1, r2, lsl #3]
   83200:	b292      	uxth	r2, r2
   83202:	4610      	mov	r0, r2
   83204:	4914      	ldr	r1, [pc, #80]	; (83258 <speedchange_bloodpump+0x168>)
   83206:	68fa      	ldr	r2, [r7, #12]
   83208:	f831 2032 	ldrh.w	r2, [r1, r2, lsl #3]
   8320c:	b292      	uxth	r2, r2
   8320e:	1a82      	subs	r2, r0, r2
   83210:	fbb3 f2f2 	udiv	r2, r3, r2
   83214:	4910      	ldr	r1, [pc, #64]	; (83258 <speedchange_bloodpump+0x168>)
   83216:	68fb      	ldr	r3, [r7, #12]
   83218:	00db      	lsls	r3, r3, #3
   8321a:	440b      	add	r3, r1
   8321c:	685b      	ldr	r3, [r3, #4]
   8321e:	4413      	add	r3, r2
   83220:	4a11      	ldr	r2, [pc, #68]	; (83268 <speedchange_bloodpump+0x178>)
   83222:	6013      	str	r3, [r2, #0]
			//blood_array[value].fdbck=fed_value;
			//printf("After %d\n",fed_value);
			break;
   83224:	e006      	b.n	83234 <speedchange_bloodpump+0x144>
{
	int i;
	
	//printf("Before %d\n",spd_change);
	
	for(i=0;i<20;i++)
   83226:	68fb      	ldr	r3, [r7, #12]
   83228:	3301      	adds	r3, #1
   8322a:	60fb      	str	r3, [r7, #12]
   8322c:	68fb      	ldr	r3, [r7, #12]
   8322e:	2b13      	cmp	r3, #19
   83230:	f77f af65 	ble.w	830fe <speedchange_bloodpump+0xe>
			//printf("After %d\n",fed_value);
			break;
		}
	}
	//spd_change=spd_change+200;
	printf("After %d\n",DUTY);
   83234:	4b0b      	ldr	r3, [pc, #44]	; (83264 <speedchange_bloodpump+0x174>)
   83236:	681b      	ldr	r3, [r3, #0]
   83238:	4619      	mov	r1, r3
   8323a:	480d      	ldr	r0, [pc, #52]	; (83270 <speedchange_bloodpump+0x180>)
   8323c:	4b08      	ldr	r3, [pc, #32]	; (83260 <speedchange_bloodpump+0x170>)
   8323e:	4798      	blx	r3
	PWM->PWM_CH_NUM[4].PWM_CDTYUPD = DUTY;
   83240:	4a0c      	ldr	r2, [pc, #48]	; (83274 <speedchange_bloodpump+0x184>)
   83242:	4b08      	ldr	r3, [pc, #32]	; (83264 <speedchange_bloodpump+0x174>)
   83244:	681b      	ldr	r3, [r3, #0]
   83246:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
	flag_2=1;
   8324a:	4b0b      	ldr	r3, [pc, #44]	; (83278 <speedchange_bloodpump+0x188>)
   8324c:	2201      	movs	r2, #1
   8324e:	701a      	strb	r2, [r3, #0]
		ra = (84000000/(128*val))-1;
		//startTimer2(TC0,1,TC1_IRQn,ra);
		rampingspeed_bloodpump(ra);
	}*/
	
}
   83250:	bf00      	nop
   83252:	3714      	adds	r7, #20
   83254:	46bd      	mov	sp, r7
   83256:	bd90      	pop	{r4, r7, pc}
   83258:	2007000c 	.word	0x2007000c
   8325c:	000876a4 	.word	0x000876a4
   83260:	00084731 	.word	0x00084731
   83264:	20070008 	.word	0x20070008
   83268:	20070988 	.word	0x20070988
   8326c:	000876b4 	.word	0x000876b4
   83270:	000876c4 	.word	0x000876c4
   83274:	40094000 	.word	0x40094000
   83278:	20070981 	.word	0x20070981

0008327c <cpu2_sensorstatus>:
{
	CPU2_S_START_TIMER(2,rampingspeed);
}

void cpu2_sensorstatus(void)
{
   8327c:	b580      	push	{r7, lr}
   8327e:	af00      	add	r7, sp, #0
	
	
	cpu2_sv_status_getsystemstatus(&sv_sys_statbuffer);
   83280:	4818      	ldr	r0, [pc, #96]	; (832e4 <cpu2_sensorstatus+0x68>)
   83282:	4b19      	ldr	r3, [pc, #100]	; (832e8 <cpu2_sensorstatus+0x6c>)
   83284:	4798      	blx	r3
	
	sensor_status.abd=sv_sys_statbuffer.abdstatus;
   83286:	4b17      	ldr	r3, [pc, #92]	; (832e4 <cpu2_sensorstatus+0x68>)
   83288:	889b      	ldrh	r3, [r3, #4]
   8328a:	b2da      	uxtb	r2, r3
   8328c:	4b17      	ldr	r3, [pc, #92]	; (832ec <cpu2_sensorstatus+0x70>)
   8328e:	701a      	strb	r2, [r3, #0]
	sensor_status.bd=sv_sys_statbuffer.bdstatus;
   83290:	4b14      	ldr	r3, [pc, #80]	; (832e4 <cpu2_sensorstatus+0x68>)
   83292:	88db      	ldrh	r3, [r3, #6]
   83294:	b2da      	uxtb	r2, r3
   83296:	4b15      	ldr	r3, [pc, #84]	; (832ec <cpu2_sensorstatus+0x70>)
   83298:	705a      	strb	r2, [r3, #1]
	sensor_status.bldpump_door=sv_sys_statbuffer.bp_door;
   8329a:	4b12      	ldr	r3, [pc, #72]	; (832e4 <cpu2_sensorstatus+0x68>)
   8329c:	891b      	ldrh	r3, [r3, #8]
   8329e:	b2da      	uxtb	r2, r3
   832a0:	4b12      	ldr	r3, [pc, #72]	; (832ec <cpu2_sensorstatus+0x70>)
   832a2:	709a      	strb	r2, [r3, #2]
	sensor_status.bldpump_sense=sv_sys_statbuffer.bp_sense;
   832a4:	4b0f      	ldr	r3, [pc, #60]	; (832e4 <cpu2_sensorstatus+0x68>)
   832a6:	895b      	ldrh	r3, [r3, #10]
   832a8:	b2da      	uxtb	r2, r3
   832aa:	4b10      	ldr	r3, [pc, #64]	; (832ec <cpu2_sensorstatus+0x70>)
   832ac:	70da      	strb	r2, [r3, #3]
	sensor_status.clamp_fdbk=sv_sys_statbuffer.clamp_fdbk;
   832ae:	4b0d      	ldr	r3, [pc, #52]	; (832e4 <cpu2_sensorstatus+0x68>)
   832b0:	899b      	ldrh	r3, [r3, #12]
   832b2:	b2da      	uxtb	r2, r3
   832b4:	4b0d      	ldr	r3, [pc, #52]	; (832ec <cpu2_sensorstatus+0x70>)
   832b6:	711a      	strb	r2, [r3, #4]
	sensor_status.clamp_door=sv_sys_statbuffer.clamp_door;
   832b8:	4b0a      	ldr	r3, [pc, #40]	; (832e4 <cpu2_sensorstatus+0x68>)
   832ba:	89db      	ldrh	r3, [r3, #14]
   832bc:	b2da      	uxtb	r2, r3
   832be:	4b0b      	ldr	r3, [pc, #44]	; (832ec <cpu2_sensorstatus+0x70>)
   832c0:	715a      	strb	r2, [r3, #5]
	sensor_status.rdncy_irq=sv_sys_statbuffer.rudncy_irq;
   832c2:	4b08      	ldr	r3, [pc, #32]	; (832e4 <cpu2_sensorstatus+0x68>)
   832c4:	8a1b      	ldrh	r3, [r3, #16]
   832c6:	b2da      	uxtb	r2, r3
   832c8:	4b08      	ldr	r3, [pc, #32]	; (832ec <cpu2_sensorstatus+0x70>)
   832ca:	719a      	strb	r2, [r3, #6]
// 	sensor_status.cond1=sv_sys_statbuffer.cond1_status;
// 	sensor_status.cond2=sv_sys_statbuffer.cond2_status;
// 	sensor_status.temp=sv_sys_statbuffer.Tempstatus;
	sensor_status.apt=sv_sys_statbuffer.aptstatus;
   832cc:	4b05      	ldr	r3, [pc, #20]	; (832e4 <cpu2_sensorstatus+0x68>)
   832ce:	881b      	ldrh	r3, [r3, #0]
   832d0:	461a      	mov	r2, r3
   832d2:	4b06      	ldr	r3, [pc, #24]	; (832ec <cpu2_sensorstatus+0x70>)
   832d4:	615a      	str	r2, [r3, #20]
	sensor_status.vpt=sv_sys_statbuffer.vptstatus;	
   832d6:	4b03      	ldr	r3, [pc, #12]	; (832e4 <cpu2_sensorstatus+0x68>)
   832d8:	885b      	ldrh	r3, [r3, #2]
   832da:	461a      	mov	r2, r3
   832dc:	4b03      	ldr	r3, [pc, #12]	; (832ec <cpu2_sensorstatus+0x70>)
   832de:	619a      	str	r2, [r3, #24]
}
   832e0:	bf00      	nop
   832e2:	bd80      	pop	{r7, pc}
   832e4:	20070eb0 	.word	0x20070eb0
   832e8:	00081dcd 	.word	0x00081dcd
   832ec:	20070ec8 	.word	0x20070ec8

000832f0 <safety_measure_activate>:

void safety_measure_activate(void)
{
   832f0:	b580      	push	{r7, lr}
   832f2:	af00      	add	r7, sp, #0
	cpu2_sv_cntrl_activate_pin(CLAMP_PWR);
   832f4:	2005      	movs	r0, #5
   832f6:	4b04      	ldr	r3, [pc, #16]	; (83308 <safety_measure_activate+0x18>)
   832f8:	4798      	blx	r3
	stop_bloodpump();
   832fa:	4b04      	ldr	r3, [pc, #16]	; (8330c <safety_measure_activate+0x1c>)
   832fc:	4798      	blx	r3
	cpu2_sv_cntrl_activate_pin(BYPS_PWR);
   832fe:	2006      	movs	r0, #6
   83300:	4b01      	ldr	r3, [pc, #4]	; (83308 <safety_measure_activate+0x18>)
   83302:	4798      	blx	r3
}
   83304:	bf00      	nop
   83306:	bd80      	pop	{r7, pc}
   83308:	00081d8d 	.word	0x00081d8d
   8330c:	000830cd 	.word	0x000830cd

00083310 <safety_measure_deactivate>:
void safety_measure_deactivate(void)
{
   83310:	b580      	push	{r7, lr}
   83312:	af00      	add	r7, sp, #0
	cpu2_sv_cntrl_deactivate_pin(CLAMP_PWR);
   83314:	2005      	movs	r0, #5
   83316:	4b04      	ldr	r3, [pc, #16]	; (83328 <safety_measure_deactivate+0x18>)
   83318:	4798      	blx	r3
	start_bloodpump();
   8331a:	4b04      	ldr	r3, [pc, #16]	; (8332c <safety_measure_deactivate+0x1c>)
   8331c:	4798      	blx	r3
	cpu2_sv_cntrl_deactivate_pin(BYPS_PWR);
   8331e:	2006      	movs	r0, #6
   83320:	4b01      	ldr	r3, [pc, #4]	; (83328 <safety_measure_deactivate+0x18>)
   83322:	4798      	blx	r3
	//states_2= CPU2_BLOODPUMP;
}
   83324:	bf00      	nop
   83326:	bd80      	pop	{r7, pc}
   83328:	00081dad 	.word	0x00081dad
   8332c:	000830a1 	.word	0x000830a1

00083330 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   83330:	b580      	push	{r7, lr}
   83332:	b082      	sub	sp, #8
   83334:	af00      	add	r7, sp, #0
   83336:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83338:	687b      	ldr	r3, [r7, #4]
   8333a:	2b07      	cmp	r3, #7
   8333c:	d831      	bhi.n	833a2 <osc_enable+0x72>
   8333e:	a201      	add	r2, pc, #4	; (adr r2, 83344 <osc_enable+0x14>)
   83340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83344:	000833a1 	.word	0x000833a1
   83348:	00083365 	.word	0x00083365
   8334c:	0008336d 	.word	0x0008336d
   83350:	00083375 	.word	0x00083375
   83354:	0008337d 	.word	0x0008337d
   83358:	00083385 	.word	0x00083385
   8335c:	0008338d 	.word	0x0008338d
   83360:	00083397 	.word	0x00083397
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   83364:	2000      	movs	r0, #0
   83366:	4b11      	ldr	r3, [pc, #68]	; (833ac <osc_enable+0x7c>)
   83368:	4798      	blx	r3
		break;
   8336a:	e01a      	b.n	833a2 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   8336c:	2001      	movs	r0, #1
   8336e:	4b0f      	ldr	r3, [pc, #60]	; (833ac <osc_enable+0x7c>)
   83370:	4798      	blx	r3
		break;
   83372:	e016      	b.n	833a2 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   83374:	2000      	movs	r0, #0
   83376:	4b0e      	ldr	r3, [pc, #56]	; (833b0 <osc_enable+0x80>)
   83378:	4798      	blx	r3
		break;
   8337a:	e012      	b.n	833a2 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   8337c:	2010      	movs	r0, #16
   8337e:	4b0c      	ldr	r3, [pc, #48]	; (833b0 <osc_enable+0x80>)
   83380:	4798      	blx	r3
		break;
   83382:	e00e      	b.n	833a2 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   83384:	2020      	movs	r0, #32
   83386:	4b0a      	ldr	r3, [pc, #40]	; (833b0 <osc_enable+0x80>)
   83388:	4798      	blx	r3
		break;
   8338a:	e00a      	b.n	833a2 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   8338c:	213e      	movs	r1, #62	; 0x3e
   8338e:	2000      	movs	r0, #0
   83390:	4b08      	ldr	r3, [pc, #32]	; (833b4 <osc_enable+0x84>)
   83392:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   83394:	e005      	b.n	833a2 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   83396:	213e      	movs	r1, #62	; 0x3e
   83398:	2001      	movs	r0, #1
   8339a:	4b06      	ldr	r3, [pc, #24]	; (833b4 <osc_enable+0x84>)
   8339c:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   8339e:	e000      	b.n	833a2 <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
   833a0:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
   833a2:	bf00      	nop
   833a4:	3708      	adds	r7, #8
   833a6:	46bd      	mov	sp, r7
   833a8:	bd80      	pop	{r7, pc}
   833aa:	bf00      	nop
   833ac:	00083d05 	.word	0x00083d05
   833b0:	00083d71 	.word	0x00083d71
   833b4:	00083e11 	.word	0x00083e11

000833b8 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   833b8:	b580      	push	{r7, lr}
   833ba:	b082      	sub	sp, #8
   833bc:	af00      	add	r7, sp, #0
   833be:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   833c0:	687b      	ldr	r3, [r7, #4]
   833c2:	2b07      	cmp	r3, #7
   833c4:	d826      	bhi.n	83414 <osc_is_ready+0x5c>
   833c6:	a201      	add	r2, pc, #4	; (adr r2, 833cc <osc_is_ready+0x14>)
   833c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   833cc:	000833ed 	.word	0x000833ed
   833d0:	000833f1 	.word	0x000833f1
   833d4:	000833f1 	.word	0x000833f1
   833d8:	00083403 	.word	0x00083403
   833dc:	00083403 	.word	0x00083403
   833e0:	00083403 	.word	0x00083403
   833e4:	00083403 	.word	0x00083403
   833e8:	00083403 	.word	0x00083403
	case OSC_SLCK_32K_RC:
		return 1;
   833ec:	2301      	movs	r3, #1
   833ee:	e012      	b.n	83416 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   833f0:	4b0b      	ldr	r3, [pc, #44]	; (83420 <osc_is_ready+0x68>)
   833f2:	4798      	blx	r3
   833f4:	4603      	mov	r3, r0
   833f6:	2b00      	cmp	r3, #0
   833f8:	bf14      	ite	ne
   833fa:	2301      	movne	r3, #1
   833fc:	2300      	moveq	r3, #0
   833fe:	b2db      	uxtb	r3, r3
   83400:	e009      	b.n	83416 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   83402:	4b08      	ldr	r3, [pc, #32]	; (83424 <osc_is_ready+0x6c>)
   83404:	4798      	blx	r3
   83406:	4603      	mov	r3, r0
   83408:	2b00      	cmp	r3, #0
   8340a:	bf14      	ite	ne
   8340c:	2301      	movne	r3, #1
   8340e:	2300      	moveq	r3, #0
   83410:	b2db      	uxtb	r3, r3
   83412:	e000      	b.n	83416 <osc_is_ready+0x5e>
	}

	return 0;
   83414:	2300      	movs	r3, #0
}
   83416:	4618      	mov	r0, r3
   83418:	3708      	adds	r7, #8
   8341a:	46bd      	mov	sp, r7
   8341c:	bd80      	pop	{r7, pc}
   8341e:	bf00      	nop
   83420:	00083d3d 	.word	0x00083d3d
   83424:	00083e89 	.word	0x00083e89

00083428 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   83428:	b480      	push	{r7}
   8342a:	b083      	sub	sp, #12
   8342c:	af00      	add	r7, sp, #0
   8342e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83430:	687b      	ldr	r3, [r7, #4]
   83432:	2b07      	cmp	r3, #7
   83434:	d825      	bhi.n	83482 <osc_get_rate+0x5a>
   83436:	a201      	add	r2, pc, #4	; (adr r2, 8343c <osc_get_rate+0x14>)
   83438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8343c:	0008345d 	.word	0x0008345d
   83440:	00083463 	.word	0x00083463
   83444:	00083469 	.word	0x00083469
   83448:	0008346f 	.word	0x0008346f
   8344c:	00083473 	.word	0x00083473
   83450:	00083477 	.word	0x00083477
   83454:	0008347b 	.word	0x0008347b
   83458:	0008347f 	.word	0x0008347f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   8345c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   83460:	e010      	b.n	83484 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   83462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   83466:	e00d      	b.n	83484 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   83468:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8346c:	e00a      	b.n	83484 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8346e:	4b08      	ldr	r3, [pc, #32]	; (83490 <osc_get_rate+0x68>)
   83470:	e008      	b.n	83484 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   83472:	4b08      	ldr	r3, [pc, #32]	; (83494 <osc_get_rate+0x6c>)
   83474:	e006      	b.n	83484 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   83476:	4b08      	ldr	r3, [pc, #32]	; (83498 <osc_get_rate+0x70>)
   83478:	e004      	b.n	83484 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8347a:	4b07      	ldr	r3, [pc, #28]	; (83498 <osc_get_rate+0x70>)
   8347c:	e002      	b.n	83484 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8347e:	4b06      	ldr	r3, [pc, #24]	; (83498 <osc_get_rate+0x70>)
   83480:	e000      	b.n	83484 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   83482:	2300      	movs	r3, #0
}
   83484:	4618      	mov	r0, r3
   83486:	370c      	adds	r7, #12
   83488:	46bd      	mov	sp, r7
   8348a:	bc80      	pop	{r7}
   8348c:	4770      	bx	lr
   8348e:	bf00      	nop
   83490:	003d0900 	.word	0x003d0900
   83494:	007a1200 	.word	0x007a1200
   83498:	00b71b00 	.word	0x00b71b00

0008349c <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   8349c:	b580      	push	{r7, lr}
   8349e:	b082      	sub	sp, #8
   834a0:	af00      	add	r7, sp, #0
   834a2:	4603      	mov	r3, r0
   834a4:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   834a6:	bf00      	nop
   834a8:	79fb      	ldrb	r3, [r7, #7]
   834aa:	4618      	mov	r0, r3
   834ac:	4b05      	ldr	r3, [pc, #20]	; (834c4 <osc_wait_ready+0x28>)
   834ae:	4798      	blx	r3
   834b0:	4603      	mov	r3, r0
   834b2:	f083 0301 	eor.w	r3, r3, #1
   834b6:	b2db      	uxtb	r3, r3
   834b8:	2b00      	cmp	r3, #0
   834ba:	d1f5      	bne.n	834a8 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   834bc:	bf00      	nop
   834be:	3708      	adds	r7, #8
   834c0:	46bd      	mov	sp, r7
   834c2:	bd80      	pop	{r7, pc}
   834c4:	000833b9 	.word	0x000833b9

000834c8 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   834c8:	b580      	push	{r7, lr}
   834ca:	b086      	sub	sp, #24
   834cc:	af00      	add	r7, sp, #0
   834ce:	60f8      	str	r0, [r7, #12]
   834d0:	607a      	str	r2, [r7, #4]
   834d2:	603b      	str	r3, [r7, #0]
   834d4:	460b      	mov	r3, r1
   834d6:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   834d8:	687b      	ldr	r3, [r7, #4]
   834da:	2b00      	cmp	r3, #0
   834dc:	d107      	bne.n	834ee <pll_config_init+0x26>
   834de:	683b      	ldr	r3, [r7, #0]
   834e0:	2b00      	cmp	r3, #0
   834e2:	d104      	bne.n	834ee <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   834e4:	68fb      	ldr	r3, [r7, #12]
   834e6:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   834ea:	601a      	str	r2, [r3, #0]
   834ec:	e019      	b.n	83522 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   834ee:	7afb      	ldrb	r3, [r7, #11]
   834f0:	4618      	mov	r0, r3
   834f2:	4b0e      	ldr	r3, [pc, #56]	; (8352c <pll_config_init+0x64>)
   834f4:	4798      	blx	r3
   834f6:	4602      	mov	r2, r0
   834f8:	687b      	ldr	r3, [r7, #4]
   834fa:	fbb2 f3f3 	udiv	r3, r2, r3
   834fe:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   83500:	697b      	ldr	r3, [r7, #20]
   83502:	683a      	ldr	r2, [r7, #0]
   83504:	fb02 f303 	mul.w	r3, r2, r3
   83508:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   8350a:	683b      	ldr	r3, [r7, #0]
   8350c:	3b01      	subs	r3, #1
   8350e:	041a      	lsls	r2, r3, #16
   83510:	4b07      	ldr	r3, [pc, #28]	; (83530 <pll_config_init+0x68>)
   83512:	4013      	ands	r3, r2
   83514:	687a      	ldr	r2, [r7, #4]
   83516:	b2d2      	uxtb	r2, r2
   83518:	4313      	orrs	r3, r2
   8351a:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   8351e:	68fb      	ldr	r3, [r7, #12]
   83520:	601a      	str	r2, [r3, #0]
	}
}
   83522:	bf00      	nop
   83524:	3718      	adds	r7, #24
   83526:	46bd      	mov	sp, r7
   83528:	bd80      	pop	{r7, pc}
   8352a:	bf00      	nop
   8352c:	00083429 	.word	0x00083429
   83530:	07ff0000 	.word	0x07ff0000

00083534 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   83534:	b580      	push	{r7, lr}
   83536:	b082      	sub	sp, #8
   83538:	af00      	add	r7, sp, #0
   8353a:	6078      	str	r0, [r7, #4]
   8353c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8353e:	683b      	ldr	r3, [r7, #0]
   83540:	2b00      	cmp	r3, #0
   83542:	d108      	bne.n	83556 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   83544:	4b09      	ldr	r3, [pc, #36]	; (8356c <pll_enable+0x38>)
   83546:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   83548:	4a09      	ldr	r2, [pc, #36]	; (83570 <pll_enable+0x3c>)
   8354a:	687b      	ldr	r3, [r7, #4]
   8354c:	681b      	ldr	r3, [r3, #0]
   8354e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83552:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   83554:	e005      	b.n	83562 <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   83556:	4a06      	ldr	r2, [pc, #24]	; (83570 <pll_enable+0x3c>)
   83558:	687b      	ldr	r3, [r7, #4]
   8355a:	681b      	ldr	r3, [r3, #0]
   8355c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83560:	61d3      	str	r3, [r2, #28]
	}
}
   83562:	bf00      	nop
   83564:	3708      	adds	r7, #8
   83566:	46bd      	mov	sp, r7
   83568:	bd80      	pop	{r7, pc}
   8356a:	bf00      	nop
   8356c:	00083ea1 	.word	0x00083ea1
   83570:	400e0600 	.word	0x400e0600

00083574 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   83574:	b580      	push	{r7, lr}
   83576:	b082      	sub	sp, #8
   83578:	af00      	add	r7, sp, #0
   8357a:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8357c:	687b      	ldr	r3, [r7, #4]
   8357e:	2b00      	cmp	r3, #0
   83580:	d103      	bne.n	8358a <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   83582:	4b05      	ldr	r3, [pc, #20]	; (83598 <pll_is_locked+0x24>)
   83584:	4798      	blx	r3
   83586:	4603      	mov	r3, r0
   83588:	e002      	b.n	83590 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   8358a:	4b04      	ldr	r3, [pc, #16]	; (8359c <pll_is_locked+0x28>)
   8358c:	4798      	blx	r3
   8358e:	4603      	mov	r3, r0
	}
}
   83590:	4618      	mov	r0, r3
   83592:	3708      	adds	r7, #8
   83594:	46bd      	mov	sp, r7
   83596:	bd80      	pop	{r7, pc}
   83598:	00083eb9 	.word	0x00083eb9
   8359c:	00083ed1 	.word	0x00083ed1

000835a0 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   835a0:	b580      	push	{r7, lr}
   835a2:	b082      	sub	sp, #8
   835a4:	af00      	add	r7, sp, #0
   835a6:	4603      	mov	r3, r0
   835a8:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   835aa:	79fb      	ldrb	r3, [r7, #7]
   835ac:	3b03      	subs	r3, #3
   835ae:	2b04      	cmp	r3, #4
   835b0:	d808      	bhi.n	835c4 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   835b2:	79fb      	ldrb	r3, [r7, #7]
   835b4:	4618      	mov	r0, r3
   835b6:	4b06      	ldr	r3, [pc, #24]	; (835d0 <pll_enable_source+0x30>)
   835b8:	4798      	blx	r3
		osc_wait_ready(e_src);
   835ba:	79fb      	ldrb	r3, [r7, #7]
   835bc:	4618      	mov	r0, r3
   835be:	4b05      	ldr	r3, [pc, #20]	; (835d4 <pll_enable_source+0x34>)
   835c0:	4798      	blx	r3
		break;
   835c2:	e000      	b.n	835c6 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   835c4:	bf00      	nop
	}
}
   835c6:	bf00      	nop
   835c8:	3708      	adds	r7, #8
   835ca:	46bd      	mov	sp, r7
   835cc:	bd80      	pop	{r7, pc}
   835ce:	bf00      	nop
   835d0:	00083331 	.word	0x00083331
   835d4:	0008349d 	.word	0x0008349d

000835d8 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   835d8:	b580      	push	{r7, lr}
   835da:	b082      	sub	sp, #8
   835dc:	af00      	add	r7, sp, #0
   835de:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   835e0:	bf00      	nop
   835e2:	6878      	ldr	r0, [r7, #4]
   835e4:	4b04      	ldr	r3, [pc, #16]	; (835f8 <pll_wait_for_lock+0x20>)
   835e6:	4798      	blx	r3
   835e8:	4603      	mov	r3, r0
   835ea:	2b00      	cmp	r3, #0
   835ec:	d0f9      	beq.n	835e2 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   835ee:	2300      	movs	r3, #0
}
   835f0:	4618      	mov	r0, r3
   835f2:	3708      	adds	r7, #8
   835f4:	46bd      	mov	sp, r7
   835f6:	bd80      	pop	{r7, pc}
   835f8:	00083575 	.word	0x00083575

000835fc <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   835fc:	b580      	push	{r7, lr}
   835fe:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   83600:	2006      	movs	r0, #6
   83602:	4b04      	ldr	r3, [pc, #16]	; (83614 <sysclk_get_main_hz+0x18>)
   83604:	4798      	blx	r3
   83606:	4602      	mov	r2, r0
   83608:	4613      	mov	r3, r2
   8360a:	00db      	lsls	r3, r3, #3
   8360c:	1a9b      	subs	r3, r3, r2
   8360e:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   83610:	4618      	mov	r0, r3
   83612:	bd80      	pop	{r7, pc}
   83614:	00083429 	.word	0x00083429

00083618 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   83618:	b580      	push	{r7, lr}
   8361a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   8361c:	4b02      	ldr	r3, [pc, #8]	; (83628 <sysclk_get_cpu_hz+0x10>)
   8361e:	4798      	blx	r3
   83620:	4603      	mov	r3, r0
   83622:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   83624:	4618      	mov	r0, r3
   83626:	bd80      	pop	{r7, pc}
   83628:	000835fd 	.word	0x000835fd

0008362c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8362c:	b590      	push	{r4, r7, lr}
   8362e:	b083      	sub	sp, #12
   83630:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   83632:	4b10      	ldr	r3, [pc, #64]	; (83674 <sysclk_init+0x48>)
   83634:	4798      	blx	r3
   83636:	4603      	mov	r3, r0
   83638:	4618      	mov	r0, r3
   8363a:	4b0f      	ldr	r3, [pc, #60]	; (83678 <sysclk_init+0x4c>)
   8363c:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   8363e:	2006      	movs	r0, #6
   83640:	4b0e      	ldr	r3, [pc, #56]	; (8367c <sysclk_init+0x50>)
   83642:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   83644:	1d38      	adds	r0, r7, #4
   83646:	230e      	movs	r3, #14
   83648:	2201      	movs	r2, #1
   8364a:	2106      	movs	r1, #6
   8364c:	4c0c      	ldr	r4, [pc, #48]	; (83680 <sysclk_init+0x54>)
   8364e:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   83650:	1d3b      	adds	r3, r7, #4
   83652:	2100      	movs	r1, #0
   83654:	4618      	mov	r0, r3
   83656:	4b0b      	ldr	r3, [pc, #44]	; (83684 <sysclk_init+0x58>)
   83658:	4798      	blx	r3
		pll_wait_for_lock(0);
   8365a:	2000      	movs	r0, #0
   8365c:	4b0a      	ldr	r3, [pc, #40]	; (83688 <sysclk_init+0x5c>)
   8365e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   83660:	2010      	movs	r0, #16
   83662:	4b0a      	ldr	r3, [pc, #40]	; (8368c <sysclk_init+0x60>)
   83664:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   83666:	4b0a      	ldr	r3, [pc, #40]	; (83690 <sysclk_init+0x64>)
   83668:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   8366a:	bf00      	nop
   8366c:	370c      	adds	r7, #12
   8366e:	46bd      	mov	sp, r7
   83670:	bd90      	pop	{r4, r7, pc}
   83672:	bf00      	nop
   83674:	00083619 	.word	0x00083619
   83678:	000841d5 	.word	0x000841d5
   8367c:	000835a1 	.word	0x000835a1
   83680:	000834c9 	.word	0x000834c9
   83684:	00083535 	.word	0x00083535
   83688:	000835d9 	.word	0x000835d9
   8368c:	00083c85 	.word	0x00083c85
   83690:	00084051 	.word	0x00084051

00083694 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   83694:	b580      	push	{r7, lr}
   83696:	b082      	sub	sp, #8
   83698:	af00      	add	r7, sp, #0
   8369a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   8369c:	6878      	ldr	r0, [r7, #4]
   8369e:	4b03      	ldr	r3, [pc, #12]	; (836ac <sysclk_enable_peripheral_clock+0x18>)
   836a0:	4798      	blx	r3
}
   836a2:	bf00      	nop
   836a4:	3708      	adds	r7, #8
   836a6:	46bd      	mov	sp, r7
   836a8:	bd80      	pop	{r7, pc}
   836aa:	bf00      	nop
   836ac:	00083ee9 	.word	0x00083ee9

000836b0 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
   836b0:	b580      	push	{r7, lr}
   836b2:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
   836b4:	200b      	movs	r0, #11
   836b6:	4b06      	ldr	r3, [pc, #24]	; (836d0 <ioport_init+0x20>)
   836b8:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
   836ba:	200c      	movs	r0, #12
   836bc:	4b04      	ldr	r3, [pc, #16]	; (836d0 <ioport_init+0x20>)
   836be:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
   836c0:	200d      	movs	r0, #13
   836c2:	4b03      	ldr	r3, [pc, #12]	; (836d0 <ioport_init+0x20>)
   836c4:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
   836c6:	200e      	movs	r0, #14
   836c8:	4b01      	ldr	r3, [pc, #4]	; (836d0 <ioport_init+0x20>)
   836ca:	4798      	blx	r3
	arch_ioport_init();
}
   836cc:	bf00      	nop
   836ce:	bd80      	pop	{r7, pc}
   836d0:	00083695 	.word	0x00083695

000836d4 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   836d4:	b580      	push	{r7, lr}
   836d6:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   836d8:	4b21      	ldr	r3, [pc, #132]	; (83760 <board_init+0x8c>)
   836da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   836de:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   836e0:	4b20      	ldr	r3, [pc, #128]	; (83764 <board_init+0x90>)
   836e2:	4798      	blx	r3
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   836e4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   836e8:	203b      	movs	r0, #59	; 0x3b
   836ea:	4b1f      	ldr	r3, [pc, #124]	; (83768 <board_init+0x94>)
   836ec:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   836ee:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   836f2:	2055      	movs	r0, #85	; 0x55
   836f4:	4b1c      	ldr	r3, [pc, #112]	; (83768 <board_init+0x94>)
   836f6:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   836f8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   836fc:	2056      	movs	r0, #86	; 0x56
   836fe:	4b1a      	ldr	r3, [pc, #104]	; (83768 <board_init+0x94>)
   83700:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   83702:	491a      	ldr	r1, [pc, #104]	; (8376c <board_init+0x98>)
   83704:	2068      	movs	r0, #104	; 0x68
   83706:	4b18      	ldr	r3, [pc, #96]	; (83768 <board_init+0x94>)
   83708:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   8370a:	4919      	ldr	r1, [pc, #100]	; (83770 <board_init+0x9c>)
   8370c:	205c      	movs	r0, #92	; 0x5c
   8370e:	4b16      	ldr	r3, [pc, #88]	; (83768 <board_init+0x94>)
   83710:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   83712:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   83716:	f44f 7140 	mov.w	r1, #768	; 0x300
   8371a:	4816      	ldr	r0, [pc, #88]	; (83774 <board_init+0xa0>)
   8371c:	4b16      	ldr	r3, [pc, #88]	; (83778 <board_init+0xa4>)
   8371e:	4798      	blx	r3
	gpio_configure_pin(PIN_PWM_LED2_GPIO, PIN_PWM_LED2_FLAGS);
#endif

	/* Configure SPI0 pins */
#ifdef CONF_BOARD_SPI0
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
   83720:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83724:	2019      	movs	r0, #25
   83726:	4b10      	ldr	r3, [pc, #64]	; (83768 <board_init+0x94>)
   83728:	4798      	blx	r3
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
   8372a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8372e:	201a      	movs	r0, #26
   83730:	4b0d      	ldr	r3, [pc, #52]	; (83768 <board_init+0x94>)
   83732:	4798      	blx	r3
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
   83734:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83738:	201b      	movs	r0, #27
   8373a:	4b0b      	ldr	r3, [pc, #44]	; (83768 <board_init+0x94>)
   8373c:	4798      	blx	r3
	 * CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */

#   ifdef CONF_BOARD_SPI0_NPCS0
		gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
   8373e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83742:	201c      	movs	r0, #28
   83744:	4b08      	ldr	r3, [pc, #32]	; (83768 <board_init+0x94>)
   83746:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   83748:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8374c:	202b      	movs	r0, #43	; 0x2b
   8374e:	4b06      	ldr	r3, [pc, #24]	; (83768 <board_init+0x94>)
   83750:	4798      	blx	r3
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   83752:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83756:	202a      	movs	r0, #42	; 0x2a
   83758:	4b03      	ldr	r3, [pc, #12]	; (83768 <board_init+0x94>)
   8375a:	4798      	blx	r3
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
	gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
#endif
}
   8375c:	bf00      	nop
   8375e:	bd80      	pop	{r7, pc}
   83760:	400e1a50 	.word	0x400e1a50
   83764:	000836b1 	.word	0x000836b1
   83768:	00083959 	.word	0x00083959
   8376c:	28000079 	.word	0x28000079
   83770:	28000001 	.word	0x28000001
   83774:	400e0e00 	.word	0x400e0e00
   83778:	00083a95 	.word	0x00083a95

0008377c <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   8377c:	b480      	push	{r7}
   8377e:	b085      	sub	sp, #20
   83780:	af00      	add	r7, sp, #0
   83782:	60f8      	str	r0, [r7, #12]
   83784:	60b9      	str	r1, [r7, #8]
   83786:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   83788:	687b      	ldr	r3, [r7, #4]
   8378a:	2b00      	cmp	r3, #0
   8378c:	d003      	beq.n	83796 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   8378e:	68fb      	ldr	r3, [r7, #12]
   83790:	68ba      	ldr	r2, [r7, #8]
   83792:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   83794:	e002      	b.n	8379c <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
   83796:	68fb      	ldr	r3, [r7, #12]
   83798:	68ba      	ldr	r2, [r7, #8]
   8379a:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   8379c:	bf00      	nop
   8379e:	3714      	adds	r7, #20
   837a0:	46bd      	mov	sp, r7
   837a2:	bc80      	pop	{r7}
   837a4:	4770      	bx	lr
   837a6:	bf00      	nop

000837a8 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   837a8:	b480      	push	{r7}
   837aa:	b087      	sub	sp, #28
   837ac:	af00      	add	r7, sp, #0
   837ae:	60f8      	str	r0, [r7, #12]
   837b0:	60b9      	str	r1, [r7, #8]
   837b2:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   837b4:	68fb      	ldr	r3, [r7, #12]
   837b6:	687a      	ldr	r2, [r7, #4]
   837b8:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   837ba:	68bb      	ldr	r3, [r7, #8]
   837bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   837c0:	d01f      	beq.n	83802 <pio_set_peripheral+0x5a>
   837c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   837c6:	d805      	bhi.n	837d4 <pio_set_peripheral+0x2c>
   837c8:	2b00      	cmp	r3, #0
   837ca:	d027      	beq.n	8381c <pio_set_peripheral+0x74>
   837cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   837d0:	d00a      	beq.n	837e8 <pio_set_peripheral+0x40>
   837d2:	e01f      	b.n	83814 <pio_set_peripheral+0x6c>
   837d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   837d8:	d020      	beq.n	8381c <pio_set_peripheral+0x74>
   837da:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   837de:	d01d      	beq.n	8381c <pio_set_peripheral+0x74>
   837e0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   837e4:	d01a      	beq.n	8381c <pio_set_peripheral+0x74>
   837e6:	e015      	b.n	83814 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   837e8:	68fb      	ldr	r3, [r7, #12]
   837ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   837ec:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   837ee:	68fb      	ldr	r3, [r7, #12]
   837f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   837f2:	687b      	ldr	r3, [r7, #4]
   837f4:	43d9      	mvns	r1, r3
   837f6:	697b      	ldr	r3, [r7, #20]
   837f8:	400b      	ands	r3, r1
   837fa:	401a      	ands	r2, r3
   837fc:	68fb      	ldr	r3, [r7, #12]
   837fe:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   83800:	e008      	b.n	83814 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   83802:	68fb      	ldr	r3, [r7, #12]
   83804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   83806:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   83808:	687a      	ldr	r2, [r7, #4]
   8380a:	697b      	ldr	r3, [r7, #20]
   8380c:	431a      	orrs	r2, r3
   8380e:	68fb      	ldr	r3, [r7, #12]
   83810:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   83812:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   83814:	68fb      	ldr	r3, [r7, #12]
   83816:	687a      	ldr	r2, [r7, #4]
   83818:	605a      	str	r2, [r3, #4]
   8381a:	e000      	b.n	8381e <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   8381c:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
   8381e:	371c      	adds	r7, #28
   83820:	46bd      	mov	sp, r7
   83822:	bc80      	pop	{r7}
   83824:	4770      	bx	lr
   83826:	bf00      	nop

00083828 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   83828:	b580      	push	{r7, lr}
   8382a:	b084      	sub	sp, #16
   8382c:	af00      	add	r7, sp, #0
   8382e:	60f8      	str	r0, [r7, #12]
   83830:	60b9      	str	r1, [r7, #8]
   83832:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   83834:	68b9      	ldr	r1, [r7, #8]
   83836:	68f8      	ldr	r0, [r7, #12]
   83838:	4b19      	ldr	r3, [pc, #100]	; (838a0 <pio_set_input+0x78>)
   8383a:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   8383c:	687b      	ldr	r3, [r7, #4]
   8383e:	f003 0301 	and.w	r3, r3, #1
   83842:	461a      	mov	r2, r3
   83844:	68b9      	ldr	r1, [r7, #8]
   83846:	68f8      	ldr	r0, [r7, #12]
   83848:	4b16      	ldr	r3, [pc, #88]	; (838a4 <pio_set_input+0x7c>)
   8384a:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8384c:	687b      	ldr	r3, [r7, #4]
   8384e:	f003 030a 	and.w	r3, r3, #10
   83852:	2b00      	cmp	r3, #0
   83854:	d003      	beq.n	8385e <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   83856:	68fb      	ldr	r3, [r7, #12]
   83858:	68ba      	ldr	r2, [r7, #8]
   8385a:	621a      	str	r2, [r3, #32]
   8385c:	e002      	b.n	83864 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   8385e:	68fb      	ldr	r3, [r7, #12]
   83860:	68ba      	ldr	r2, [r7, #8]
   83862:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   83864:	687b      	ldr	r3, [r7, #4]
   83866:	f003 0302 	and.w	r3, r3, #2
   8386a:	2b00      	cmp	r3, #0
   8386c:	d004      	beq.n	83878 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   8386e:	68fb      	ldr	r3, [r7, #12]
   83870:	68ba      	ldr	r2, [r7, #8]
   83872:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   83876:	e008      	b.n	8388a <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   83878:	687b      	ldr	r3, [r7, #4]
   8387a:	f003 0308 	and.w	r3, r3, #8
   8387e:	2b00      	cmp	r3, #0
   83880:	d003      	beq.n	8388a <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   83882:	68fb      	ldr	r3, [r7, #12]
   83884:	68ba      	ldr	r2, [r7, #8]
   83886:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   8388a:	68fb      	ldr	r3, [r7, #12]
   8388c:	68ba      	ldr	r2, [r7, #8]
   8388e:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   83890:	68fb      	ldr	r3, [r7, #12]
   83892:	68ba      	ldr	r2, [r7, #8]
   83894:	601a      	str	r2, [r3, #0]
}
   83896:	bf00      	nop
   83898:	3710      	adds	r7, #16
   8389a:	46bd      	mov	sp, r7
   8389c:	bd80      	pop	{r7, pc}
   8389e:	bf00      	nop
   838a0:	0008390d 	.word	0x0008390d
   838a4:	0008377d 	.word	0x0008377d

000838a8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   838a8:	b580      	push	{r7, lr}
   838aa:	b084      	sub	sp, #16
   838ac:	af00      	add	r7, sp, #0
   838ae:	60f8      	str	r0, [r7, #12]
   838b0:	60b9      	str	r1, [r7, #8]
   838b2:	607a      	str	r2, [r7, #4]
   838b4:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   838b6:	68b9      	ldr	r1, [r7, #8]
   838b8:	68f8      	ldr	r0, [r7, #12]
   838ba:	4b12      	ldr	r3, [pc, #72]	; (83904 <pio_set_output+0x5c>)
   838bc:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   838be:	69ba      	ldr	r2, [r7, #24]
   838c0:	68b9      	ldr	r1, [r7, #8]
   838c2:	68f8      	ldr	r0, [r7, #12]
   838c4:	4b10      	ldr	r3, [pc, #64]	; (83908 <pio_set_output+0x60>)
   838c6:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   838c8:	683b      	ldr	r3, [r7, #0]
   838ca:	2b00      	cmp	r3, #0
   838cc:	d003      	beq.n	838d6 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   838ce:	68fb      	ldr	r3, [r7, #12]
   838d0:	68ba      	ldr	r2, [r7, #8]
   838d2:	651a      	str	r2, [r3, #80]	; 0x50
   838d4:	e002      	b.n	838dc <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   838d6:	68fb      	ldr	r3, [r7, #12]
   838d8:	68ba      	ldr	r2, [r7, #8]
   838da:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   838dc:	687b      	ldr	r3, [r7, #4]
   838de:	2b00      	cmp	r3, #0
   838e0:	d003      	beq.n	838ea <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   838e2:	68fb      	ldr	r3, [r7, #12]
   838e4:	68ba      	ldr	r2, [r7, #8]
   838e6:	631a      	str	r2, [r3, #48]	; 0x30
   838e8:	e002      	b.n	838f0 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   838ea:	68fb      	ldr	r3, [r7, #12]
   838ec:	68ba      	ldr	r2, [r7, #8]
   838ee:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   838f0:	68fb      	ldr	r3, [r7, #12]
   838f2:	68ba      	ldr	r2, [r7, #8]
   838f4:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   838f6:	68fb      	ldr	r3, [r7, #12]
   838f8:	68ba      	ldr	r2, [r7, #8]
   838fa:	601a      	str	r2, [r3, #0]
}
   838fc:	bf00      	nop
   838fe:	3710      	adds	r7, #16
   83900:	46bd      	mov	sp, r7
   83902:	bd80      	pop	{r7, pc}
   83904:	0008390d 	.word	0x0008390d
   83908:	0008377d 	.word	0x0008377d

0008390c <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   8390c:	b480      	push	{r7}
   8390e:	b083      	sub	sp, #12
   83910:	af00      	add	r7, sp, #0
   83912:	6078      	str	r0, [r7, #4]
   83914:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   83916:	687b      	ldr	r3, [r7, #4]
   83918:	683a      	ldr	r2, [r7, #0]
   8391a:	645a      	str	r2, [r3, #68]	; 0x44
}
   8391c:	bf00      	nop
   8391e:	370c      	adds	r7, #12
   83920:	46bd      	mov	sp, r7
   83922:	bc80      	pop	{r7}
   83924:	4770      	bx	lr
   83926:	bf00      	nop

00083928 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   83928:	b480      	push	{r7}
   8392a:	b083      	sub	sp, #12
   8392c:	af00      	add	r7, sp, #0
   8392e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   83930:	687b      	ldr	r3, [r7, #4]
   83932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   83934:	4618      	mov	r0, r3
   83936:	370c      	adds	r7, #12
   83938:	46bd      	mov	sp, r7
   8393a:	bc80      	pop	{r7}
   8393c:	4770      	bx	lr
   8393e:	bf00      	nop

00083940 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   83940:	b480      	push	{r7}
   83942:	b083      	sub	sp, #12
   83944:	af00      	add	r7, sp, #0
   83946:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   83948:	687b      	ldr	r3, [r7, #4]
   8394a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   8394c:	4618      	mov	r0, r3
   8394e:	370c      	adds	r7, #12
   83950:	46bd      	mov	sp, r7
   83952:	bc80      	pop	{r7}
   83954:	4770      	bx	lr
   83956:	bf00      	nop

00083958 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   83958:	b590      	push	{r4, r7, lr}
   8395a:	b087      	sub	sp, #28
   8395c:	af02      	add	r7, sp, #8
   8395e:	6078      	str	r0, [r7, #4]
   83960:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83962:	687b      	ldr	r3, [r7, #4]
   83964:	095b      	lsrs	r3, r3, #5
   83966:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8396a:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8396e:	025b      	lsls	r3, r3, #9
   83970:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   83972:	683b      	ldr	r3, [r7, #0]
   83974:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   83978:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8397c:	d046      	beq.n	83a0c <pio_configure_pin+0xb4>
   8397e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83982:	d806      	bhi.n	83992 <pio_configure_pin+0x3a>
   83984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   83988:	d00a      	beq.n	839a0 <pio_configure_pin+0x48>
   8398a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8398e:	d022      	beq.n	839d6 <pio_configure_pin+0x7e>
   83990:	e070      	b.n	83a74 <pio_configure_pin+0x11c>
   83992:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   83996:	d045      	beq.n	83a24 <pio_configure_pin+0xcc>
   83998:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8399c:	d042      	beq.n	83a24 <pio_configure_pin+0xcc>
   8399e:	e069      	b.n	83a74 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   839a0:	687b      	ldr	r3, [r7, #4]
   839a2:	f003 031f 	and.w	r3, r3, #31
   839a6:	2201      	movs	r2, #1
   839a8:	fa02 f303 	lsl.w	r3, r2, r3
   839ac:	461a      	mov	r2, r3
   839ae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   839b2:	68f8      	ldr	r0, [r7, #12]
   839b4:	4b33      	ldr	r3, [pc, #204]	; (83a84 <pio_configure_pin+0x12c>)
   839b6:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   839b8:	687b      	ldr	r3, [r7, #4]
   839ba:	f003 031f 	and.w	r3, r3, #31
   839be:	2201      	movs	r2, #1
   839c0:	fa02 f303 	lsl.w	r3, r2, r3
   839c4:	4619      	mov	r1, r3
   839c6:	683b      	ldr	r3, [r7, #0]
   839c8:	f003 0301 	and.w	r3, r3, #1
   839cc:	461a      	mov	r2, r3
   839ce:	68f8      	ldr	r0, [r7, #12]
   839d0:	4b2d      	ldr	r3, [pc, #180]	; (83a88 <pio_configure_pin+0x130>)
   839d2:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   839d4:	e050      	b.n	83a78 <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   839d6:	687b      	ldr	r3, [r7, #4]
   839d8:	f003 031f 	and.w	r3, r3, #31
   839dc:	2201      	movs	r2, #1
   839de:	fa02 f303 	lsl.w	r3, r2, r3
   839e2:	461a      	mov	r2, r3
   839e4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   839e8:	68f8      	ldr	r0, [r7, #12]
   839ea:	4b26      	ldr	r3, [pc, #152]	; (83a84 <pio_configure_pin+0x12c>)
   839ec:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   839ee:	687b      	ldr	r3, [r7, #4]
   839f0:	f003 031f 	and.w	r3, r3, #31
   839f4:	2201      	movs	r2, #1
   839f6:	fa02 f303 	lsl.w	r3, r2, r3
   839fa:	4619      	mov	r1, r3
   839fc:	683b      	ldr	r3, [r7, #0]
   839fe:	f003 0301 	and.w	r3, r3, #1
   83a02:	461a      	mov	r2, r3
   83a04:	68f8      	ldr	r0, [r7, #12]
   83a06:	4b20      	ldr	r3, [pc, #128]	; (83a88 <pio_configure_pin+0x130>)
   83a08:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   83a0a:	e035      	b.n	83a78 <pio_configure_pin+0x120>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   83a0c:	687b      	ldr	r3, [r7, #4]
   83a0e:	f003 031f 	and.w	r3, r3, #31
   83a12:	2201      	movs	r2, #1
   83a14:	fa02 f303 	lsl.w	r3, r2, r3
   83a18:	683a      	ldr	r2, [r7, #0]
   83a1a:	4619      	mov	r1, r3
   83a1c:	68f8      	ldr	r0, [r7, #12]
   83a1e:	4b1b      	ldr	r3, [pc, #108]	; (83a8c <pio_configure_pin+0x134>)
   83a20:	4798      	blx	r3
		break;
   83a22:	e029      	b.n	83a78 <pio_configure_pin+0x120>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83a24:	687b      	ldr	r3, [r7, #4]
   83a26:	f003 031f 	and.w	r3, r3, #31
   83a2a:	2201      	movs	r2, #1
   83a2c:	fa02 f303 	lsl.w	r3, r2, r3
   83a30:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   83a32:	683b      	ldr	r3, [r7, #0]
   83a34:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83a38:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83a3c:	bf0c      	ite	eq
   83a3e:	2301      	moveq	r3, #1
   83a40:	2300      	movne	r3, #0
   83a42:	b2db      	uxtb	r3, r3
   83a44:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   83a46:	683b      	ldr	r3, [r7, #0]
   83a48:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83a4c:	2b00      	cmp	r3, #0
   83a4e:	bf14      	ite	ne
   83a50:	2301      	movne	r3, #1
   83a52:	2300      	moveq	r3, #0
   83a54:	b2db      	uxtb	r3, r3
   83a56:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   83a58:	683b      	ldr	r3, [r7, #0]
   83a5a:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83a5e:	2b00      	cmp	r3, #0
   83a60:	bf14      	ite	ne
   83a62:	2301      	movne	r3, #1
   83a64:	2300      	moveq	r3, #0
   83a66:	b2db      	uxtb	r3, r3
   83a68:	9300      	str	r3, [sp, #0]
   83a6a:	4603      	mov	r3, r0
   83a6c:	68f8      	ldr	r0, [r7, #12]
   83a6e:	4c08      	ldr	r4, [pc, #32]	; (83a90 <pio_configure_pin+0x138>)
   83a70:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   83a72:	e001      	b.n	83a78 <pio_configure_pin+0x120>

	default:
		return 0;
   83a74:	2300      	movs	r3, #0
   83a76:	e000      	b.n	83a7a <pio_configure_pin+0x122>
	}

	return 1;
   83a78:	2301      	movs	r3, #1
}
   83a7a:	4618      	mov	r0, r3
   83a7c:	3714      	adds	r7, #20
   83a7e:	46bd      	mov	sp, r7
   83a80:	bd90      	pop	{r4, r7, pc}
   83a82:	bf00      	nop
   83a84:	000837a9 	.word	0x000837a9
   83a88:	0008377d 	.word	0x0008377d
   83a8c:	00083829 	.word	0x00083829
   83a90:	000838a9 	.word	0x000838a9

00083a94 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   83a94:	b590      	push	{r4, r7, lr}
   83a96:	b087      	sub	sp, #28
   83a98:	af02      	add	r7, sp, #8
   83a9a:	60f8      	str	r0, [r7, #12]
   83a9c:	60b9      	str	r1, [r7, #8]
   83a9e:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   83aa0:	687b      	ldr	r3, [r7, #4]
   83aa2:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   83aa6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83aaa:	d02e      	beq.n	83b0a <pio_configure_pin_group+0x76>
   83aac:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83ab0:	d806      	bhi.n	83ac0 <pio_configure_pin_group+0x2c>
   83ab2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   83ab6:	d00a      	beq.n	83ace <pio_configure_pin_group+0x3a>
   83ab8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   83abc:	d016      	beq.n	83aec <pio_configure_pin_group+0x58>
   83abe:	e04c      	b.n	83b5a <pio_configure_pin_group+0xc6>
   83ac0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   83ac4:	d027      	beq.n	83b16 <pio_configure_pin_group+0x82>
   83ac6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83aca:	d024      	beq.n	83b16 <pio_configure_pin_group+0x82>
   83acc:	e045      	b.n	83b5a <pio_configure_pin_group+0xc6>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   83ace:	68ba      	ldr	r2, [r7, #8]
   83ad0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83ad4:	68f8      	ldr	r0, [r7, #12]
   83ad6:	4b24      	ldr	r3, [pc, #144]	; (83b68 <pio_configure_pin_group+0xd4>)
   83ad8:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   83ada:	687b      	ldr	r3, [r7, #4]
   83adc:	f003 0301 	and.w	r3, r3, #1
   83ae0:	461a      	mov	r2, r3
   83ae2:	68b9      	ldr	r1, [r7, #8]
   83ae4:	68f8      	ldr	r0, [r7, #12]
   83ae6:	4b21      	ldr	r3, [pc, #132]	; (83b6c <pio_configure_pin_group+0xd8>)
   83ae8:	4798      	blx	r3
		break;
   83aea:	e038      	b.n	83b5e <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   83aec:	68ba      	ldr	r2, [r7, #8]
   83aee:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   83af2:	68f8      	ldr	r0, [r7, #12]
   83af4:	4b1c      	ldr	r3, [pc, #112]	; (83b68 <pio_configure_pin_group+0xd4>)
   83af6:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   83af8:	687b      	ldr	r3, [r7, #4]
   83afa:	f003 0301 	and.w	r3, r3, #1
   83afe:	461a      	mov	r2, r3
   83b00:	68b9      	ldr	r1, [r7, #8]
   83b02:	68f8      	ldr	r0, [r7, #12]
   83b04:	4b19      	ldr	r3, [pc, #100]	; (83b6c <pio_configure_pin_group+0xd8>)
   83b06:	4798      	blx	r3
		break;
   83b08:	e029      	b.n	83b5e <pio_configure_pin_group+0xca>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   83b0a:	687a      	ldr	r2, [r7, #4]
   83b0c:	68b9      	ldr	r1, [r7, #8]
   83b0e:	68f8      	ldr	r0, [r7, #12]
   83b10:	4b17      	ldr	r3, [pc, #92]	; (83b70 <pio_configure_pin_group+0xdc>)
   83b12:	4798      	blx	r3
		break;
   83b14:	e023      	b.n	83b5e <pio_configure_pin_group+0xca>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   83b16:	687b      	ldr	r3, [r7, #4]
   83b18:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   83b1c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83b20:	bf0c      	ite	eq
   83b22:	2301      	moveq	r3, #1
   83b24:	2300      	movne	r3, #0
   83b26:	b2db      	uxtb	r3, r3
   83b28:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   83b2a:	687b      	ldr	r3, [r7, #4]
   83b2c:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   83b30:	2b00      	cmp	r3, #0
   83b32:	bf14      	ite	ne
   83b34:	2301      	movne	r3, #1
   83b36:	2300      	moveq	r3, #0
   83b38:	b2db      	uxtb	r3, r3
   83b3a:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   83b3c:	687b      	ldr	r3, [r7, #4]
   83b3e:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   83b42:	2b00      	cmp	r3, #0
   83b44:	bf14      	ite	ne
   83b46:	2301      	movne	r3, #1
   83b48:	2300      	moveq	r3, #0
   83b4a:	b2db      	uxtb	r3, r3
   83b4c:	9300      	str	r3, [sp, #0]
   83b4e:	460b      	mov	r3, r1
   83b50:	68b9      	ldr	r1, [r7, #8]
   83b52:	68f8      	ldr	r0, [r7, #12]
   83b54:	4c07      	ldr	r4, [pc, #28]	; (83b74 <pio_configure_pin_group+0xe0>)
   83b56:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   83b58:	e001      	b.n	83b5e <pio_configure_pin_group+0xca>

	default:
		return 0;
   83b5a:	2300      	movs	r3, #0
   83b5c:	e000      	b.n	83b60 <pio_configure_pin_group+0xcc>
	}

	return 1;
   83b5e:	2301      	movs	r3, #1
}
   83b60:	4618      	mov	r0, r3
   83b62:	3714      	adds	r7, #20
   83b64:	46bd      	mov	sp, r7
   83b66:	bd90      	pop	{r4, r7, pc}
   83b68:	000837a9 	.word	0x000837a9
   83b6c:	0008377d 	.word	0x0008377d
   83b70:	00083829 	.word	0x00083829
   83b74:	000838a9 	.word	0x000838a9

00083b78 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   83b78:	b580      	push	{r7, lr}
   83b7a:	b084      	sub	sp, #16
   83b7c:	af00      	add	r7, sp, #0
   83b7e:	6078      	str	r0, [r7, #4]
   83b80:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   83b82:	6878      	ldr	r0, [r7, #4]
   83b84:	4b24      	ldr	r3, [pc, #144]	; (83c18 <pio_handler_process+0xa0>)
   83b86:	4798      	blx	r3
   83b88:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   83b8a:	6878      	ldr	r0, [r7, #4]
   83b8c:	4b23      	ldr	r3, [pc, #140]	; (83c1c <pio_handler_process+0xa4>)
   83b8e:	4798      	blx	r3
   83b90:	4602      	mov	r2, r0
   83b92:	68fb      	ldr	r3, [r7, #12]
   83b94:	4013      	ands	r3, r2
   83b96:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   83b98:	68fb      	ldr	r3, [r7, #12]
   83b9a:	2b00      	cmp	r3, #0
   83b9c:	d037      	beq.n	83c0e <pio_handler_process+0x96>
		/* Find triggering source */
		i = 0;
   83b9e:	2300      	movs	r3, #0
   83ba0:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   83ba2:	e031      	b.n	83c08 <pio_handler_process+0x90>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   83ba4:	4a1e      	ldr	r2, [pc, #120]	; (83c20 <pio_handler_process+0xa8>)
   83ba6:	68bb      	ldr	r3, [r7, #8]
   83ba8:	011b      	lsls	r3, r3, #4
   83baa:	4413      	add	r3, r2
   83bac:	681a      	ldr	r2, [r3, #0]
   83bae:	683b      	ldr	r3, [r7, #0]
   83bb0:	429a      	cmp	r2, r3
   83bb2:	d126      	bne.n	83c02 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   83bb4:	4a1a      	ldr	r2, [pc, #104]	; (83c20 <pio_handler_process+0xa8>)
   83bb6:	68bb      	ldr	r3, [r7, #8]
   83bb8:	011b      	lsls	r3, r3, #4
   83bba:	4413      	add	r3, r2
   83bbc:	3304      	adds	r3, #4
   83bbe:	681a      	ldr	r2, [r3, #0]
   83bc0:	68fb      	ldr	r3, [r7, #12]
   83bc2:	4013      	ands	r3, r2
   83bc4:	2b00      	cmp	r3, #0
   83bc6:	d01c      	beq.n	83c02 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   83bc8:	4a15      	ldr	r2, [pc, #84]	; (83c20 <pio_handler_process+0xa8>)
   83bca:	68bb      	ldr	r3, [r7, #8]
   83bcc:	011b      	lsls	r3, r3, #4
   83bce:	4413      	add	r3, r2
   83bd0:	330c      	adds	r3, #12
   83bd2:	681b      	ldr	r3, [r3, #0]
   83bd4:	4912      	ldr	r1, [pc, #72]	; (83c20 <pio_handler_process+0xa8>)
   83bd6:	68ba      	ldr	r2, [r7, #8]
   83bd8:	0112      	lsls	r2, r2, #4
   83bda:	440a      	add	r2, r1
   83bdc:	6810      	ldr	r0, [r2, #0]
   83bde:	4910      	ldr	r1, [pc, #64]	; (83c20 <pio_handler_process+0xa8>)
   83be0:	68ba      	ldr	r2, [r7, #8]
   83be2:	0112      	lsls	r2, r2, #4
   83be4:	440a      	add	r2, r1
   83be6:	3204      	adds	r2, #4
   83be8:	6812      	ldr	r2, [r2, #0]
   83bea:	4611      	mov	r1, r2
   83bec:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   83bee:	4a0c      	ldr	r2, [pc, #48]	; (83c20 <pio_handler_process+0xa8>)
   83bf0:	68bb      	ldr	r3, [r7, #8]
   83bf2:	011b      	lsls	r3, r3, #4
   83bf4:	4413      	add	r3, r2
   83bf6:	3304      	adds	r3, #4
   83bf8:	681b      	ldr	r3, [r3, #0]
   83bfa:	43db      	mvns	r3, r3
   83bfc:	68fa      	ldr	r2, [r7, #12]
   83bfe:	4013      	ands	r3, r2
   83c00:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   83c02:	68bb      	ldr	r3, [r7, #8]
   83c04:	3301      	adds	r3, #1
   83c06:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   83c08:	68fb      	ldr	r3, [r7, #12]
   83c0a:	2b00      	cmp	r3, #0
   83c0c:	d1ca      	bne.n	83ba4 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   83c0e:	bf00      	nop
   83c10:	3710      	adds	r7, #16
   83c12:	46bd      	mov	sp, r7
   83c14:	bd80      	pop	{r7, pc}
   83c16:	bf00      	nop
   83c18:	00083929 	.word	0x00083929
   83c1c:	00083941 	.word	0x00083941
   83c20:	20070998 	.word	0x20070998

00083c24 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   83c24:	b580      	push	{r7, lr}
   83c26:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   83c28:	210b      	movs	r1, #11
   83c2a:	4802      	ldr	r0, [pc, #8]	; (83c34 <PIOA_Handler+0x10>)
   83c2c:	4b02      	ldr	r3, [pc, #8]	; (83c38 <PIOA_Handler+0x14>)
   83c2e:	4798      	blx	r3
}
   83c30:	bf00      	nop
   83c32:	bd80      	pop	{r7, pc}
   83c34:	400e0e00 	.word	0x400e0e00
   83c38:	00083b79 	.word	0x00083b79

00083c3c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   83c3c:	b580      	push	{r7, lr}
   83c3e:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   83c40:	210c      	movs	r1, #12
   83c42:	4802      	ldr	r0, [pc, #8]	; (83c4c <PIOB_Handler+0x10>)
   83c44:	4b02      	ldr	r3, [pc, #8]	; (83c50 <PIOB_Handler+0x14>)
   83c46:	4798      	blx	r3
}
   83c48:	bf00      	nop
   83c4a:	bd80      	pop	{r7, pc}
   83c4c:	400e1000 	.word	0x400e1000
   83c50:	00083b79 	.word	0x00083b79

00083c54 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   83c54:	b580      	push	{r7, lr}
   83c56:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   83c58:	210d      	movs	r1, #13
   83c5a:	4802      	ldr	r0, [pc, #8]	; (83c64 <PIOC_Handler+0x10>)
   83c5c:	4b02      	ldr	r3, [pc, #8]	; (83c68 <PIOC_Handler+0x14>)
   83c5e:	4798      	blx	r3
}
   83c60:	bf00      	nop
   83c62:	bd80      	pop	{r7, pc}
   83c64:	400e1200 	.word	0x400e1200
   83c68:	00083b79 	.word	0x00083b79

00083c6c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   83c6c:	b580      	push	{r7, lr}
   83c6e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   83c70:	210e      	movs	r1, #14
   83c72:	4802      	ldr	r0, [pc, #8]	; (83c7c <PIOD_Handler+0x10>)
   83c74:	4b02      	ldr	r3, [pc, #8]	; (83c80 <PIOD_Handler+0x14>)
   83c76:	4798      	blx	r3
}
   83c78:	bf00      	nop
   83c7a:	bd80      	pop	{r7, pc}
   83c7c:	400e1400 	.word	0x400e1400
   83c80:	00083b79 	.word	0x00083b79

00083c84 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   83c84:	b480      	push	{r7}
   83c86:	b085      	sub	sp, #20
   83c88:	af00      	add	r7, sp, #0
   83c8a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83c8c:	491c      	ldr	r1, [pc, #112]	; (83d00 <pmc_switch_mck_to_pllack+0x7c>)
   83c8e:	4b1c      	ldr	r3, [pc, #112]	; (83d00 <pmc_switch_mck_to_pllack+0x7c>)
   83c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83c92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   83c96:	687b      	ldr	r3, [r7, #4]
   83c98:	4313      	orrs	r3, r2
   83c9a:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83c9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83ca0:	60fb      	str	r3, [r7, #12]
   83ca2:	e007      	b.n	83cb4 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83ca4:	68fb      	ldr	r3, [r7, #12]
   83ca6:	2b00      	cmp	r3, #0
   83ca8:	d101      	bne.n	83cae <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   83caa:	2301      	movs	r3, #1
   83cac:	e023      	b.n	83cf6 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   83cae:	68fb      	ldr	r3, [r7, #12]
   83cb0:	3b01      	subs	r3, #1
   83cb2:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83cb4:	4b12      	ldr	r3, [pc, #72]	; (83d00 <pmc_switch_mck_to_pllack+0x7c>)
   83cb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83cb8:	f003 0308 	and.w	r3, r3, #8
   83cbc:	2b00      	cmp	r3, #0
   83cbe:	d0f1      	beq.n	83ca4 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83cc0:	4a0f      	ldr	r2, [pc, #60]	; (83d00 <pmc_switch_mck_to_pllack+0x7c>)
   83cc2:	4b0f      	ldr	r3, [pc, #60]	; (83d00 <pmc_switch_mck_to_pllack+0x7c>)
   83cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83cc6:	f023 0303 	bic.w	r3, r3, #3
   83cca:	f043 0302 	orr.w	r3, r3, #2
   83cce:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83cd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83cd4:	60fb      	str	r3, [r7, #12]
   83cd6:	e007      	b.n	83ce8 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83cd8:	68fb      	ldr	r3, [r7, #12]
   83cda:	2b00      	cmp	r3, #0
   83cdc:	d101      	bne.n	83ce2 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   83cde:	2301      	movs	r3, #1
   83ce0:	e009      	b.n	83cf6 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   83ce2:	68fb      	ldr	r3, [r7, #12]
   83ce4:	3b01      	subs	r3, #1
   83ce6:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83ce8:	4b05      	ldr	r3, [pc, #20]	; (83d00 <pmc_switch_mck_to_pllack+0x7c>)
   83cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83cec:	f003 0308 	and.w	r3, r3, #8
   83cf0:	2b00      	cmp	r3, #0
   83cf2:	d0f1      	beq.n	83cd8 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   83cf4:	2300      	movs	r3, #0
}
   83cf6:	4618      	mov	r0, r3
   83cf8:	3714      	adds	r7, #20
   83cfa:	46bd      	mov	sp, r7
   83cfc:	bc80      	pop	{r7}
   83cfe:	4770      	bx	lr
   83d00:	400e0600 	.word	0x400e0600

00083d04 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   83d04:	b480      	push	{r7}
   83d06:	b083      	sub	sp, #12
   83d08:	af00      	add	r7, sp, #0
   83d0a:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   83d0c:	687b      	ldr	r3, [r7, #4]
   83d0e:	2b01      	cmp	r3, #1
   83d10:	d107      	bne.n	83d22 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   83d12:	4a08      	ldr	r2, [pc, #32]	; (83d34 <pmc_switch_sclk_to_32kxtal+0x30>)
   83d14:	4b07      	ldr	r3, [pc, #28]	; (83d34 <pmc_switch_sclk_to_32kxtal+0x30>)
   83d16:	689b      	ldr	r3, [r3, #8]
   83d18:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   83d1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83d20:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   83d22:	4b04      	ldr	r3, [pc, #16]	; (83d34 <pmc_switch_sclk_to_32kxtal+0x30>)
   83d24:	4a04      	ldr	r2, [pc, #16]	; (83d38 <pmc_switch_sclk_to_32kxtal+0x34>)
   83d26:	601a      	str	r2, [r3, #0]
}
   83d28:	bf00      	nop
   83d2a:	370c      	adds	r7, #12
   83d2c:	46bd      	mov	sp, r7
   83d2e:	bc80      	pop	{r7}
   83d30:	4770      	bx	lr
   83d32:	bf00      	nop
   83d34:	400e1a10 	.word	0x400e1a10
   83d38:	a5000008 	.word	0xa5000008

00083d3c <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   83d3c:	b480      	push	{r7}
   83d3e:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   83d40:	4b09      	ldr	r3, [pc, #36]	; (83d68 <pmc_osc_is_ready_32kxtal+0x2c>)
   83d42:	695b      	ldr	r3, [r3, #20]
   83d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   83d48:	2b00      	cmp	r3, #0
   83d4a:	d007      	beq.n	83d5c <pmc_osc_is_ready_32kxtal+0x20>
   83d4c:	4b07      	ldr	r3, [pc, #28]	; (83d6c <pmc_osc_is_ready_32kxtal+0x30>)
   83d4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83d54:	2b00      	cmp	r3, #0
   83d56:	d001      	beq.n	83d5c <pmc_osc_is_ready_32kxtal+0x20>
   83d58:	2301      	movs	r3, #1
   83d5a:	e000      	b.n	83d5e <pmc_osc_is_ready_32kxtal+0x22>
   83d5c:	2300      	movs	r3, #0
}
   83d5e:	4618      	mov	r0, r3
   83d60:	46bd      	mov	sp, r7
   83d62:	bc80      	pop	{r7}
   83d64:	4770      	bx	lr
   83d66:	bf00      	nop
   83d68:	400e1a10 	.word	0x400e1a10
   83d6c:	400e0600 	.word	0x400e0600

00083d70 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   83d70:	b480      	push	{r7}
   83d72:	b085      	sub	sp, #20
   83d74:	af00      	add	r7, sp, #0
   83d76:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   83d78:	2300      	movs	r3, #0
   83d7a:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   83d7c:	4b21      	ldr	r3, [pc, #132]	; (83e04 <pmc_switch_mainck_to_fastrc+0x94>)
   83d7e:	6a1b      	ldr	r3, [r3, #32]
   83d80:	f003 0301 	and.w	r3, r3, #1
   83d84:	2b00      	cmp	r3, #0
   83d86:	d00e      	beq.n	83da6 <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83d88:	491e      	ldr	r1, [pc, #120]	; (83e04 <pmc_switch_mainck_to_fastrc+0x94>)
   83d8a:	4b1e      	ldr	r3, [pc, #120]	; (83e04 <pmc_switch_mainck_to_fastrc+0x94>)
   83d8c:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   83d8e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83d92:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   83d96:	687a      	ldr	r2, [r7, #4]
   83d98:	4313      	orrs	r3, r2
   83d9a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83d9e:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83da2:	620b      	str	r3, [r1, #32]
   83da4:	e00b      	b.n	83dbe <pmc_switch_mainck_to_fastrc+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   83da6:	2301      	movs	r3, #1
   83da8:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83daa:	4916      	ldr	r1, [pc, #88]	; (83e04 <pmc_switch_mainck_to_fastrc+0x94>)
   83dac:	4b15      	ldr	r3, [pc, #84]	; (83e04 <pmc_switch_mainck_to_fastrc+0x94>)
   83dae:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
   83db0:	4b15      	ldr	r3, [pc, #84]	; (83e08 <pmc_switch_mainck_to_fastrc+0x98>)
   83db2:	4013      	ands	r3, r2
   83db4:	687a      	ldr	r2, [r7, #4]
   83db6:	431a      	orrs	r2, r3
   83db8:	4b14      	ldr	r3, [pc, #80]	; (83e0c <pmc_switch_mainck_to_fastrc+0x9c>)
   83dba:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83dbc:	620b      	str	r3, [r1, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   83dbe:	bf00      	nop
   83dc0:	4b10      	ldr	r3, [pc, #64]	; (83e04 <pmc_switch_mainck_to_fastrc+0x94>)
   83dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   83dc8:	2b00      	cmp	r3, #0
   83dca:	d0f9      	beq.n	83dc0 <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   83dcc:	4a0d      	ldr	r2, [pc, #52]	; (83e04 <pmc_switch_mainck_to_fastrc+0x94>)
   83dce:	4b0d      	ldr	r3, [pc, #52]	; (83e04 <pmc_switch_mainck_to_fastrc+0x94>)
   83dd0:	6a1b      	ldr	r3, [r3, #32]
   83dd2:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   83dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   83dda:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83dde:	6213      	str	r3, [r2, #32]
			PMC_CKGR_MOR_KEY_VALUE;

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   83de0:	68fb      	ldr	r3, [r7, #12]
   83de2:	2b00      	cmp	r3, #0
   83de4:	d009      	beq.n	83dfa <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83de6:	4a07      	ldr	r2, [pc, #28]	; (83e04 <pmc_switch_mainck_to_fastrc+0x94>)
   83de8:	4b06      	ldr	r3, [pc, #24]	; (83e04 <pmc_switch_mainck_to_fastrc+0x94>)
   83dea:	6a1b      	ldr	r3, [r3, #32]
   83dec:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83df0:	f023 0301 	bic.w	r3, r3, #1
   83df4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83df8:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   83dfa:	bf00      	nop
   83dfc:	3714      	adds	r7, #20
   83dfe:	46bd      	mov	sp, r7
   83e00:	bc80      	pop	{r7}
   83e02:	4770      	bx	lr
   83e04:	400e0600 	.word	0x400e0600
   83e08:	ffc80086 	.word	0xffc80086
   83e0c:	0037ff09 	.word	0x0037ff09

00083e10 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   83e10:	b480      	push	{r7}
   83e12:	b083      	sub	sp, #12
   83e14:	af00      	add	r7, sp, #0
   83e16:	6078      	str	r0, [r7, #4]
   83e18:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   83e1a:	687b      	ldr	r3, [r7, #4]
   83e1c:	2b00      	cmp	r3, #0
   83e1e:	d008      	beq.n	83e32 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83e20:	4916      	ldr	r1, [pc, #88]	; (83e7c <pmc_switch_mainck_to_xtal+0x6c>)
   83e22:	4b16      	ldr	r3, [pc, #88]	; (83e7c <pmc_switch_mainck_to_xtal+0x6c>)
   83e24:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   83e26:	4a16      	ldr	r2, [pc, #88]	; (83e80 <pmc_switch_mainck_to_xtal+0x70>)
   83e28:	401a      	ands	r2, r3
   83e2a:	4b16      	ldr	r3, [pc, #88]	; (83e84 <pmc_switch_mainck_to_xtal+0x74>)
   83e2c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83e2e:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
	}
}
   83e30:	e01e      	b.n	83e70 <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83e32:	4912      	ldr	r1, [pc, #72]	; (83e7c <pmc_switch_mainck_to_xtal+0x6c>)
   83e34:	4b11      	ldr	r3, [pc, #68]	; (83e7c <pmc_switch_mainck_to_xtal+0x6c>)
   83e36:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   83e38:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83e3c:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   83e40:	683a      	ldr	r2, [r7, #0]
   83e42:	0212      	lsls	r2, r2, #8
   83e44:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   83e46:	4313      	orrs	r3, r2
   83e48:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83e4c:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83e50:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   83e52:	bf00      	nop
   83e54:	4b09      	ldr	r3, [pc, #36]	; (83e7c <pmc_switch_mainck_to_xtal+0x6c>)
   83e56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83e58:	f003 0301 	and.w	r3, r3, #1
   83e5c:	2b00      	cmp	r3, #0
   83e5e:	d0f9      	beq.n	83e54 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   83e60:	4a06      	ldr	r2, [pc, #24]	; (83e7c <pmc_switch_mainck_to_xtal+0x6c>)
   83e62:	4b06      	ldr	r3, [pc, #24]	; (83e7c <pmc_switch_mainck_to_xtal+0x6c>)
   83e64:	6a1b      	ldr	r3, [r3, #32]
   83e66:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   83e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83e6e:	6213      	str	r3, [r2, #32]
	}
}
   83e70:	bf00      	nop
   83e72:	370c      	adds	r7, #12
   83e74:	46bd      	mov	sp, r7
   83e76:	bc80      	pop	{r7}
   83e78:	4770      	bx	lr
   83e7a:	bf00      	nop
   83e7c:	400e0600 	.word	0x400e0600
   83e80:	fec8fffc 	.word	0xfec8fffc
   83e84:	01370002 	.word	0x01370002

00083e88 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   83e88:	b480      	push	{r7}
   83e8a:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   83e8c:	4b03      	ldr	r3, [pc, #12]	; (83e9c <pmc_osc_is_ready_mainck+0x14>)
   83e8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   83e94:	4618      	mov	r0, r3
   83e96:	46bd      	mov	sp, r7
   83e98:	bc80      	pop	{r7}
   83e9a:	4770      	bx	lr
   83e9c:	400e0600 	.word	0x400e0600

00083ea0 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   83ea0:	b480      	push	{r7}
   83ea2:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   83ea4:	4b03      	ldr	r3, [pc, #12]	; (83eb4 <pmc_disable_pllack+0x14>)
   83ea6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   83eaa:	629a      	str	r2, [r3, #40]	; 0x28
}
   83eac:	bf00      	nop
   83eae:	46bd      	mov	sp, r7
   83eb0:	bc80      	pop	{r7}
   83eb2:	4770      	bx	lr
   83eb4:	400e0600 	.word	0x400e0600

00083eb8 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   83eb8:	b480      	push	{r7}
   83eba:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   83ebc:	4b03      	ldr	r3, [pc, #12]	; (83ecc <pmc_is_locked_pllack+0x14>)
   83ebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83ec0:	f003 0302 	and.w	r3, r3, #2
}
   83ec4:	4618      	mov	r0, r3
   83ec6:	46bd      	mov	sp, r7
   83ec8:	bc80      	pop	{r7}
   83eca:	4770      	bx	lr
   83ecc:	400e0600 	.word	0x400e0600

00083ed0 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   83ed0:	b480      	push	{r7}
   83ed2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   83ed4:	4b03      	ldr	r3, [pc, #12]	; (83ee4 <pmc_is_locked_upll+0x14>)
   83ed6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   83edc:	4618      	mov	r0, r3
   83ede:	46bd      	mov	sp, r7
   83ee0:	bc80      	pop	{r7}
   83ee2:	4770      	bx	lr
   83ee4:	400e0600 	.word	0x400e0600

00083ee8 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   83ee8:	b480      	push	{r7}
   83eea:	b083      	sub	sp, #12
   83eec:	af00      	add	r7, sp, #0
   83eee:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   83ef0:	687b      	ldr	r3, [r7, #4]
   83ef2:	2b2c      	cmp	r3, #44	; 0x2c
   83ef4:	d901      	bls.n	83efa <pmc_enable_periph_clk+0x12>
		return 1;
   83ef6:	2301      	movs	r3, #1
   83ef8:	e02f      	b.n	83f5a <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   83efa:	687b      	ldr	r3, [r7, #4]
   83efc:	2b1f      	cmp	r3, #31
   83efe:	d813      	bhi.n	83f28 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   83f00:	4b18      	ldr	r3, [pc, #96]	; (83f64 <pmc_enable_periph_clk+0x7c>)
   83f02:	699a      	ldr	r2, [r3, #24]
   83f04:	2101      	movs	r1, #1
   83f06:	687b      	ldr	r3, [r7, #4]
   83f08:	fa01 f303 	lsl.w	r3, r1, r3
   83f0c:	401a      	ands	r2, r3
   83f0e:	2101      	movs	r1, #1
   83f10:	687b      	ldr	r3, [r7, #4]
   83f12:	fa01 f303 	lsl.w	r3, r1, r3
   83f16:	429a      	cmp	r2, r3
   83f18:	d01e      	beq.n	83f58 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   83f1a:	4a12      	ldr	r2, [pc, #72]	; (83f64 <pmc_enable_periph_clk+0x7c>)
   83f1c:	2101      	movs	r1, #1
   83f1e:	687b      	ldr	r3, [r7, #4]
   83f20:	fa01 f303 	lsl.w	r3, r1, r3
   83f24:	6113      	str	r3, [r2, #16]
   83f26:	e017      	b.n	83f58 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   83f28:	687b      	ldr	r3, [r7, #4]
   83f2a:	3b20      	subs	r3, #32
   83f2c:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   83f2e:	4b0d      	ldr	r3, [pc, #52]	; (83f64 <pmc_enable_periph_clk+0x7c>)
   83f30:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   83f34:	2101      	movs	r1, #1
   83f36:	687b      	ldr	r3, [r7, #4]
   83f38:	fa01 f303 	lsl.w	r3, r1, r3
   83f3c:	401a      	ands	r2, r3
   83f3e:	2101      	movs	r1, #1
   83f40:	687b      	ldr	r3, [r7, #4]
   83f42:	fa01 f303 	lsl.w	r3, r1, r3
   83f46:	429a      	cmp	r2, r3
   83f48:	d006      	beq.n	83f58 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   83f4a:	4a06      	ldr	r2, [pc, #24]	; (83f64 <pmc_enable_periph_clk+0x7c>)
   83f4c:	2101      	movs	r1, #1
   83f4e:	687b      	ldr	r3, [r7, #4]
   83f50:	fa01 f303 	lsl.w	r3, r1, r3
   83f54:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   83f58:	2300      	movs	r3, #0
}
   83f5a:	4618      	mov	r0, r3
   83f5c:	370c      	adds	r7, #12
   83f5e:	46bd      	mov	sp, r7
   83f60:	bc80      	pop	{r7}
   83f62:	4770      	bx	lr
   83f64:	400e0600 	.word	0x400e0600

00083f68 <pmc_set_writeprotect>:
 * \brief Enable or disable write protect of PMC registers.
 *
 * \param ul_enable 1 to enable, 0 to disable.
 */
void pmc_set_writeprotect(uint32_t ul_enable)
{
   83f68:	b480      	push	{r7}
   83f6a:	b083      	sub	sp, #12
   83f6c:	af00      	add	r7, sp, #0
   83f6e:	6078      	str	r0, [r7, #4]
	if (ul_enable) {
   83f70:	687b      	ldr	r3, [r7, #4]
   83f72:	2b00      	cmp	r3, #0
   83f74:	d004      	beq.n	83f80 <pmc_set_writeprotect+0x18>
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE | PMC_WPMR_WPEN;
   83f76:	4b07      	ldr	r3, [pc, #28]	; (83f94 <pmc_set_writeprotect+0x2c>)
   83f78:	4a07      	ldr	r2, [pc, #28]	; (83f98 <pmc_set_writeprotect+0x30>)
   83f7a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE;
	}
}
   83f7e:	e003      	b.n	83f88 <pmc_set_writeprotect+0x20>
void pmc_set_writeprotect(uint32_t ul_enable)
{
	if (ul_enable) {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE | PMC_WPMR_WPEN;
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE;
   83f80:	4b04      	ldr	r3, [pc, #16]	; (83f94 <pmc_set_writeprotect+0x2c>)
   83f82:	4a06      	ldr	r2, [pc, #24]	; (83f9c <pmc_set_writeprotect+0x34>)
   83f84:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	}
}
   83f88:	bf00      	nop
   83f8a:	370c      	adds	r7, #12
   83f8c:	46bd      	mov	sp, r7
   83f8e:	bc80      	pop	{r7}
   83f90:	4770      	bx	lr
   83f92:	bf00      	nop
   83f94:	400e0600 	.word	0x400e0600
   83f98:	504d4301 	.word	0x504d4301
   83f9c:	504d4300 	.word	0x504d4300

00083fa0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   83fa0:	b480      	push	{r7}
   83fa2:	af00      	add	r7, sp, #0
	//printf("dummy\n");
	while (1) {
	}
   83fa4:	e7fe      	b.n	83fa4 <Dummy_Handler+0x4>
   83fa6:	bf00      	nop

00083fa8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   83fa8:	b580      	push	{r7, lr}
   83faa:	b082      	sub	sp, #8
   83fac:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   83fae:	4b1e      	ldr	r3, [pc, #120]	; (84028 <Reset_Handler+0x80>)
   83fb0:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   83fb2:	4b1e      	ldr	r3, [pc, #120]	; (8402c <Reset_Handler+0x84>)
   83fb4:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   83fb6:	687a      	ldr	r2, [r7, #4]
   83fb8:	683b      	ldr	r3, [r7, #0]
   83fba:	429a      	cmp	r2, r3
   83fbc:	d00c      	beq.n	83fd8 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   83fbe:	e007      	b.n	83fd0 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   83fc0:	683b      	ldr	r3, [r7, #0]
   83fc2:	1d1a      	adds	r2, r3, #4
   83fc4:	603a      	str	r2, [r7, #0]
   83fc6:	687a      	ldr	r2, [r7, #4]
   83fc8:	1d11      	adds	r1, r2, #4
   83fca:	6079      	str	r1, [r7, #4]
   83fcc:	6812      	ldr	r2, [r2, #0]
   83fce:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   83fd0:	683b      	ldr	r3, [r7, #0]
   83fd2:	4a17      	ldr	r2, [pc, #92]	; (84030 <Reset_Handler+0x88>)
   83fd4:	4293      	cmp	r3, r2
   83fd6:	d3f3      	bcc.n	83fc0 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83fd8:	4b16      	ldr	r3, [pc, #88]	; (84034 <Reset_Handler+0x8c>)
   83fda:	603b      	str	r3, [r7, #0]
   83fdc:	e004      	b.n	83fe8 <Reset_Handler+0x40>
		*pDest++ = 0;
   83fde:	683b      	ldr	r3, [r7, #0]
   83fe0:	1d1a      	adds	r2, r3, #4
   83fe2:	603a      	str	r2, [r7, #0]
   83fe4:	2200      	movs	r2, #0
   83fe6:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83fe8:	683b      	ldr	r3, [r7, #0]
   83fea:	4a13      	ldr	r2, [pc, #76]	; (84038 <Reset_Handler+0x90>)
   83fec:	4293      	cmp	r3, r2
   83fee:	d3f6      	bcc.n	83fde <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   83ff0:	4b12      	ldr	r3, [pc, #72]	; (8403c <Reset_Handler+0x94>)
   83ff2:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   83ff4:	4a12      	ldr	r2, [pc, #72]	; (84040 <Reset_Handler+0x98>)
   83ff6:	687b      	ldr	r3, [r7, #4]
   83ff8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   83ffc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   84000:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   84002:	687b      	ldr	r3, [r7, #4]
   84004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   84008:	d309      	bcc.n	8401e <Reset_Handler+0x76>
   8400a:	687b      	ldr	r3, [r7, #4]
   8400c:	4a0d      	ldr	r2, [pc, #52]	; (84044 <Reset_Handler+0x9c>)
   8400e:	4293      	cmp	r3, r2
   84010:	d805      	bhi.n	8401e <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   84012:	4a0b      	ldr	r2, [pc, #44]	; (84040 <Reset_Handler+0x98>)
   84014:	4b0a      	ldr	r3, [pc, #40]	; (84040 <Reset_Handler+0x98>)
   84016:	689b      	ldr	r3, [r3, #8]
   84018:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8401c:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8401e:	4b0a      	ldr	r3, [pc, #40]	; (84048 <Reset_Handler+0xa0>)
   84020:	4798      	blx	r3

	/* Branch to main function */
	main();
   84022:	4b0a      	ldr	r3, [pc, #40]	; (8404c <Reset_Handler+0xa4>)
   84024:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   84026:	e7fe      	b.n	84026 <Reset_Handler+0x7e>
   84028:	00087754 	.word	0x00087754
   8402c:	20070000 	.word	0x20070000
   84030:	20070914 	.word	0x20070914
   84034:	20070914 	.word	0x20070914
   84038:	20070ef4 	.word	0x20070ef4
   8403c:	00080000 	.word	0x00080000
   84040:	e000ed00 	.word	0xe000ed00
   84044:	200fffff 	.word	0x200fffff
   84048:	000846e1 	.word	0x000846e1
   8404c:	000829f9 	.word	0x000829f9

00084050 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   84050:	b480      	push	{r7}
   84052:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   84054:	4b57      	ldr	r3, [pc, #348]	; (841b4 <SystemCoreClockUpdate+0x164>)
   84056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84058:	f003 0303 	and.w	r3, r3, #3
   8405c:	2b03      	cmp	r3, #3
   8405e:	f200 808a 	bhi.w	84176 <SystemCoreClockUpdate+0x126>
   84062:	a201      	add	r2, pc, #4	; (adr r2, 84068 <SystemCoreClockUpdate+0x18>)
   84064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84068:	00084079 	.word	0x00084079
   8406c:	00084099 	.word	0x00084099
   84070:	000840e9 	.word	0x000840e9
   84074:	000840e9 	.word	0x000840e9
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   84078:	4b4f      	ldr	r3, [pc, #316]	; (841b8 <SystemCoreClockUpdate+0x168>)
   8407a:	695b      	ldr	r3, [r3, #20]
   8407c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   84080:	2b00      	cmp	r3, #0
   84082:	d004      	beq.n	8408e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   84084:	4b4d      	ldr	r3, [pc, #308]	; (841bc <SystemCoreClockUpdate+0x16c>)
   84086:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8408a:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   8408c:	e073      	b.n	84176 <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8408e:	4b4b      	ldr	r3, [pc, #300]	; (841bc <SystemCoreClockUpdate+0x16c>)
   84090:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   84094:	601a      	str	r2, [r3, #0]
		}
		break;
   84096:	e06e      	b.n	84176 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   84098:	4b46      	ldr	r3, [pc, #280]	; (841b4 <SystemCoreClockUpdate+0x164>)
   8409a:	6a1b      	ldr	r3, [r3, #32]
   8409c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   840a0:	2b00      	cmp	r3, #0
   840a2:	d003      	beq.n	840ac <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   840a4:	4b45      	ldr	r3, [pc, #276]	; (841bc <SystemCoreClockUpdate+0x16c>)
   840a6:	4a46      	ldr	r2, [pc, #280]	; (841c0 <SystemCoreClockUpdate+0x170>)
   840a8:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   840aa:	e064      	b.n	84176 <SystemCoreClockUpdate+0x126>
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   840ac:	4b43      	ldr	r3, [pc, #268]	; (841bc <SystemCoreClockUpdate+0x16c>)
   840ae:	4a45      	ldr	r2, [pc, #276]	; (841c4 <SystemCoreClockUpdate+0x174>)
   840b0:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   840b2:	4b40      	ldr	r3, [pc, #256]	; (841b4 <SystemCoreClockUpdate+0x164>)
   840b4:	6a1b      	ldr	r3, [r3, #32]
   840b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   840ba:	2b10      	cmp	r3, #16
   840bc:	d004      	beq.n	840c8 <SystemCoreClockUpdate+0x78>
   840be:	2b20      	cmp	r3, #32
   840c0:	d008      	beq.n	840d4 <SystemCoreClockUpdate+0x84>
   840c2:	2b00      	cmp	r3, #0
   840c4:	d00e      	beq.n	840e4 <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   840c6:	e00e      	b.n	840e6 <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   840c8:	4b3c      	ldr	r3, [pc, #240]	; (841bc <SystemCoreClockUpdate+0x16c>)
   840ca:	681b      	ldr	r3, [r3, #0]
   840cc:	005b      	lsls	r3, r3, #1
   840ce:	4a3b      	ldr	r2, [pc, #236]	; (841bc <SystemCoreClockUpdate+0x16c>)
   840d0:	6013      	str	r3, [r2, #0]
				break;
   840d2:	e008      	b.n	840e6 <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   840d4:	4b39      	ldr	r3, [pc, #228]	; (841bc <SystemCoreClockUpdate+0x16c>)
   840d6:	681a      	ldr	r2, [r3, #0]
   840d8:	4613      	mov	r3, r2
   840da:	005b      	lsls	r3, r3, #1
   840dc:	4413      	add	r3, r2
   840de:	4a37      	ldr	r2, [pc, #220]	; (841bc <SystemCoreClockUpdate+0x16c>)
   840e0:	6013      	str	r3, [r2, #0]
				break;
   840e2:	e000      	b.n	840e6 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   840e4:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   840e6:	e046      	b.n	84176 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   840e8:	4b32      	ldr	r3, [pc, #200]	; (841b4 <SystemCoreClockUpdate+0x164>)
   840ea:	6a1b      	ldr	r3, [r3, #32]
   840ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   840f0:	2b00      	cmp	r3, #0
   840f2:	d003      	beq.n	840fc <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   840f4:	4b31      	ldr	r3, [pc, #196]	; (841bc <SystemCoreClockUpdate+0x16c>)
   840f6:	4a32      	ldr	r2, [pc, #200]	; (841c0 <SystemCoreClockUpdate+0x170>)
   840f8:	601a      	str	r2, [r3, #0]
   840fa:	e01c      	b.n	84136 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   840fc:	4b2f      	ldr	r3, [pc, #188]	; (841bc <SystemCoreClockUpdate+0x16c>)
   840fe:	4a31      	ldr	r2, [pc, #196]	; (841c4 <SystemCoreClockUpdate+0x174>)
   84100:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   84102:	4b2c      	ldr	r3, [pc, #176]	; (841b4 <SystemCoreClockUpdate+0x164>)
   84104:	6a1b      	ldr	r3, [r3, #32]
   84106:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8410a:	2b10      	cmp	r3, #16
   8410c:	d004      	beq.n	84118 <SystemCoreClockUpdate+0xc8>
   8410e:	2b20      	cmp	r3, #32
   84110:	d008      	beq.n	84124 <SystemCoreClockUpdate+0xd4>
   84112:	2b00      	cmp	r3, #0
   84114:	d00e      	beq.n	84134 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   84116:	e00e      	b.n	84136 <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   84118:	4b28      	ldr	r3, [pc, #160]	; (841bc <SystemCoreClockUpdate+0x16c>)
   8411a:	681b      	ldr	r3, [r3, #0]
   8411c:	005b      	lsls	r3, r3, #1
   8411e:	4a27      	ldr	r2, [pc, #156]	; (841bc <SystemCoreClockUpdate+0x16c>)
   84120:	6013      	str	r3, [r2, #0]
				break;
   84122:	e008      	b.n	84136 <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   84124:	4b25      	ldr	r3, [pc, #148]	; (841bc <SystemCoreClockUpdate+0x16c>)
   84126:	681a      	ldr	r2, [r3, #0]
   84128:	4613      	mov	r3, r2
   8412a:	005b      	lsls	r3, r3, #1
   8412c:	4413      	add	r3, r2
   8412e:	4a23      	ldr	r2, [pc, #140]	; (841bc <SystemCoreClockUpdate+0x16c>)
   84130:	6013      	str	r3, [r2, #0]
				break;
   84132:	e000      	b.n	84136 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   84134:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   84136:	4b1f      	ldr	r3, [pc, #124]	; (841b4 <SystemCoreClockUpdate+0x164>)
   84138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8413a:	f003 0303 	and.w	r3, r3, #3
   8413e:	2b02      	cmp	r3, #2
   84140:	d115      	bne.n	8416e <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   84142:	4b1c      	ldr	r3, [pc, #112]	; (841b4 <SystemCoreClockUpdate+0x164>)
   84144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   84146:	4b20      	ldr	r3, [pc, #128]	; (841c8 <SystemCoreClockUpdate+0x178>)
   84148:	4013      	ands	r3, r2
   8414a:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   8414c:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8414e:	4a1b      	ldr	r2, [pc, #108]	; (841bc <SystemCoreClockUpdate+0x16c>)
   84150:	6812      	ldr	r2, [r2, #0]
   84152:	fb02 f303 	mul.w	r3, r2, r3
   84156:	4a19      	ldr	r2, [pc, #100]	; (841bc <SystemCoreClockUpdate+0x16c>)
   84158:	6013      	str	r3, [r2, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8415a:	4b16      	ldr	r3, [pc, #88]	; (841b4 <SystemCoreClockUpdate+0x164>)
   8415c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   8415e:	b2db      	uxtb	r3, r3
   84160:	4a16      	ldr	r2, [pc, #88]	; (841bc <SystemCoreClockUpdate+0x16c>)
   84162:	6812      	ldr	r2, [r2, #0]
   84164:	fbb2 f3f3 	udiv	r3, r2, r3
   84168:	4a14      	ldr	r2, [pc, #80]	; (841bc <SystemCoreClockUpdate+0x16c>)
   8416a:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   8416c:	e002      	b.n	84174 <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8416e:	4b13      	ldr	r3, [pc, #76]	; (841bc <SystemCoreClockUpdate+0x16c>)
   84170:	4a16      	ldr	r2, [pc, #88]	; (841cc <SystemCoreClockUpdate+0x17c>)
   84172:	601a      	str	r2, [r3, #0]
		}
		break;
   84174:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   84176:	4b0f      	ldr	r3, [pc, #60]	; (841b4 <SystemCoreClockUpdate+0x164>)
   84178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8417a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8417e:	2b70      	cmp	r3, #112	; 0x70
   84180:	d108      	bne.n	84194 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   84182:	4b0e      	ldr	r3, [pc, #56]	; (841bc <SystemCoreClockUpdate+0x16c>)
   84184:	681b      	ldr	r3, [r3, #0]
   84186:	4a12      	ldr	r2, [pc, #72]	; (841d0 <SystemCoreClockUpdate+0x180>)
   84188:	fba2 2303 	umull	r2, r3, r2, r3
   8418c:	085b      	lsrs	r3, r3, #1
   8418e:	4a0b      	ldr	r2, [pc, #44]	; (841bc <SystemCoreClockUpdate+0x16c>)
   84190:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                          PMC_MCKR_PRES_Pos);
	}
}
   84192:	e00a      	b.n	841aa <SystemCoreClockUpdate+0x15a>
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   84194:	4b07      	ldr	r3, [pc, #28]	; (841b4 <SystemCoreClockUpdate+0x164>)
   84196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84198:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8419c:	091b      	lsrs	r3, r3, #4
   8419e:	4a07      	ldr	r2, [pc, #28]	; (841bc <SystemCoreClockUpdate+0x16c>)
   841a0:	6812      	ldr	r2, [r2, #0]
   841a2:	fa22 f303 	lsr.w	r3, r2, r3
   841a6:	4a05      	ldr	r2, [pc, #20]	; (841bc <SystemCoreClockUpdate+0x16c>)
   841a8:	6013      	str	r3, [r2, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   841aa:	bf00      	nop
   841ac:	46bd      	mov	sp, r7
   841ae:	bc80      	pop	{r7}
   841b0:	4770      	bx	lr
   841b2:	bf00      	nop
   841b4:	400e0600 	.word	0x400e0600
   841b8:	400e1a10 	.word	0x400e1a10
   841bc:	200700ac 	.word	0x200700ac
   841c0:	00b71b00 	.word	0x00b71b00
   841c4:	003d0900 	.word	0x003d0900
   841c8:	07ff0000 	.word	0x07ff0000
   841cc:	0e4e1c00 	.word	0x0e4e1c00
   841d0:	aaaaaaab 	.word	0xaaaaaaab

000841d4 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   841d4:	b480      	push	{r7}
   841d6:	b083      	sub	sp, #12
   841d8:	af00      	add	r7, sp, #0
   841da:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   841dc:	687b      	ldr	r3, [r7, #4]
   841de:	4a25      	ldr	r2, [pc, #148]	; (84274 <system_init_flash+0xa0>)
   841e0:	4293      	cmp	r3, r2
   841e2:	d806      	bhi.n	841f2 <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   841e4:	4b24      	ldr	r3, [pc, #144]	; (84278 <system_init_flash+0xa4>)
   841e6:	2200      	movs	r2, #0
   841e8:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   841ea:	4b24      	ldr	r3, [pc, #144]	; (8427c <system_init_flash+0xa8>)
   841ec:	2200      	movs	r2, #0
   841ee:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   841f0:	e03b      	b.n	8426a <system_init_flash+0x96>
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   841f2:	687b      	ldr	r3, [r7, #4]
   841f4:	4a22      	ldr	r2, [pc, #136]	; (84280 <system_init_flash+0xac>)
   841f6:	4293      	cmp	r3, r2
   841f8:	d808      	bhi.n	8420c <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   841fa:	4b1f      	ldr	r3, [pc, #124]	; (84278 <system_init_flash+0xa4>)
   841fc:	f44f 7280 	mov.w	r2, #256	; 0x100
   84200:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   84202:	4b1e      	ldr	r3, [pc, #120]	; (8427c <system_init_flash+0xa8>)
   84204:	f44f 7280 	mov.w	r2, #256	; 0x100
   84208:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   8420a:	e02e      	b.n	8426a <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   8420c:	687b      	ldr	r3, [r7, #4]
   8420e:	4a1d      	ldr	r2, [pc, #116]	; (84284 <system_init_flash+0xb0>)
   84210:	4293      	cmp	r3, r2
   84212:	d808      	bhi.n	84226 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   84214:	4b18      	ldr	r3, [pc, #96]	; (84278 <system_init_flash+0xa4>)
   84216:	f44f 7200 	mov.w	r2, #512	; 0x200
   8421a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   8421c:	4b17      	ldr	r3, [pc, #92]	; (8427c <system_init_flash+0xa8>)
   8421e:	f44f 7200 	mov.w	r2, #512	; 0x200
   84222:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   84224:	e021      	b.n	8426a <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   84226:	687b      	ldr	r3, [r7, #4]
   84228:	4a17      	ldr	r2, [pc, #92]	; (84288 <system_init_flash+0xb4>)
   8422a:	4293      	cmp	r3, r2
   8422c:	d808      	bhi.n	84240 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   8422e:	4b12      	ldr	r3, [pc, #72]	; (84278 <system_init_flash+0xa4>)
   84230:	f44f 7240 	mov.w	r2, #768	; 0x300
   84234:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   84236:	4b11      	ldr	r3, [pc, #68]	; (8427c <system_init_flash+0xa8>)
   84238:	f44f 7240 	mov.w	r2, #768	; 0x300
   8423c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   8423e:	e014      	b.n	8426a <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   84240:	687b      	ldr	r3, [r7, #4]
   84242:	4a12      	ldr	r2, [pc, #72]	; (8428c <system_init_flash+0xb8>)
   84244:	4293      	cmp	r3, r2
   84246:	d808      	bhi.n	8425a <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   84248:	4b0b      	ldr	r3, [pc, #44]	; (84278 <system_init_flash+0xa4>)
   8424a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8424e:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
   84250:	4b0a      	ldr	r3, [pc, #40]	; (8427c <system_init_flash+0xa8>)
   84252:	f44f 6280 	mov.w	r2, #1024	; 0x400
   84256:	601a      	str	r2, [r3, #0]
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   84258:	e007      	b.n	8426a <system_init_flash+0x96>
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   8425a:	4b07      	ldr	r3, [pc, #28]	; (84278 <system_init_flash+0xa4>)
   8425c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   84260:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   84262:	4b06      	ldr	r3, [pc, #24]	; (8427c <system_init_flash+0xa8>)
   84264:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   84268:	601a      	str	r2, [r3, #0]
	}
}
   8426a:	bf00      	nop
   8426c:	370c      	adds	r7, #12
   8426e:	46bd      	mov	sp, r7
   84270:	bc80      	pop	{r7}
   84272:	4770      	bx	lr
   84274:	0121eabf 	.word	0x0121eabf
   84278:	400e0a00 	.word	0x400e0a00
   8427c:	400e0c00 	.word	0x400e0c00
   84280:	02faf07f 	.word	0x02faf07f
   84284:	03d08fff 	.word	0x03d08fff
   84288:	04c4b3ff 	.word	0x04c4b3ff
   8428c:	055d4a7f 	.word	0x055d4a7f

00084290 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   84290:	b480      	push	{r7}
   84292:	b085      	sub	sp, #20
   84294:	af00      	add	r7, sp, #0
   84296:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   84298:	4b0a      	ldr	r3, [pc, #40]	; (842c4 <_sbrk+0x34>)
   8429a:	681b      	ldr	r3, [r3, #0]
   8429c:	2b00      	cmp	r3, #0
   8429e:	d102      	bne.n	842a6 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   842a0:	4b08      	ldr	r3, [pc, #32]	; (842c4 <_sbrk+0x34>)
   842a2:	4a09      	ldr	r2, [pc, #36]	; (842c8 <_sbrk+0x38>)
   842a4:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   842a6:	4b07      	ldr	r3, [pc, #28]	; (842c4 <_sbrk+0x34>)
   842a8:	681b      	ldr	r3, [r3, #0]
   842aa:	60fb      	str	r3, [r7, #12]

	heap += incr;
   842ac:	4b05      	ldr	r3, [pc, #20]	; (842c4 <_sbrk+0x34>)
   842ae:	681a      	ldr	r2, [r3, #0]
   842b0:	687b      	ldr	r3, [r7, #4]
   842b2:	4413      	add	r3, r2
   842b4:	4a03      	ldr	r2, [pc, #12]	; (842c4 <_sbrk+0x34>)
   842b6:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   842b8:	68fb      	ldr	r3, [r7, #12]
}
   842ba:	4618      	mov	r0, r3
   842bc:	3714      	adds	r7, #20
   842be:	46bd      	mov	sp, r7
   842c0:	bc80      	pop	{r7}
   842c2:	4770      	bx	lr
   842c4:	20070a08 	.word	0x20070a08
   842c8:	20072ef8 	.word	0x20072ef8

000842cc <_close>:
{
	return -1;
}

extern int _close(int file)
{
   842cc:	b480      	push	{r7}
   842ce:	b083      	sub	sp, #12
   842d0:	af00      	add	r7, sp, #0
   842d2:	6078      	str	r0, [r7, #4]
	return -1;
   842d4:	f04f 33ff 	mov.w	r3, #4294967295
}
   842d8:	4618      	mov	r0, r3
   842da:	370c      	adds	r7, #12
   842dc:	46bd      	mov	sp, r7
   842de:	bc80      	pop	{r7}
   842e0:	4770      	bx	lr
   842e2:	bf00      	nop

000842e4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   842e4:	b480      	push	{r7}
   842e6:	b083      	sub	sp, #12
   842e8:	af00      	add	r7, sp, #0
   842ea:	6078      	str	r0, [r7, #4]
   842ec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   842ee:	683b      	ldr	r3, [r7, #0]
   842f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   842f4:	605a      	str	r2, [r3, #4]

	return 0;
   842f6:	2300      	movs	r3, #0
}
   842f8:	4618      	mov	r0, r3
   842fa:	370c      	adds	r7, #12
   842fc:	46bd      	mov	sp, r7
   842fe:	bc80      	pop	{r7}
   84300:	4770      	bx	lr
   84302:	bf00      	nop

00084304 <_isatty>:

extern int _isatty(int file)
{
   84304:	b480      	push	{r7}
   84306:	b083      	sub	sp, #12
   84308:	af00      	add	r7, sp, #0
   8430a:	6078      	str	r0, [r7, #4]
	return 1;
   8430c:	2301      	movs	r3, #1
}
   8430e:	4618      	mov	r0, r3
   84310:	370c      	adds	r7, #12
   84312:	46bd      	mov	sp, r7
   84314:	bc80      	pop	{r7}
   84316:	4770      	bx	lr

00084318 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   84318:	b480      	push	{r7}
   8431a:	b085      	sub	sp, #20
   8431c:	af00      	add	r7, sp, #0
   8431e:	60f8      	str	r0, [r7, #12]
   84320:	60b9      	str	r1, [r7, #8]
   84322:	607a      	str	r2, [r7, #4]
	return 0;
   84324:	2300      	movs	r3, #0
}
   84326:	4618      	mov	r0, r3
   84328:	3714      	adds	r7, #20
   8432a:	46bd      	mov	sp, r7
   8432c:	bc80      	pop	{r7}
   8432e:	4770      	bx	lr

00084330 <__aeabi_drsub>:
   84330:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   84334:	e002      	b.n	8433c <__adddf3>
   84336:	bf00      	nop

00084338 <__aeabi_dsub>:
   84338:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008433c <__adddf3>:
   8433c:	b530      	push	{r4, r5, lr}
   8433e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   84342:	ea4f 0543 	mov.w	r5, r3, lsl #1
   84346:	ea94 0f05 	teq	r4, r5
   8434a:	bf08      	it	eq
   8434c:	ea90 0f02 	teqeq	r0, r2
   84350:	bf1f      	itttt	ne
   84352:	ea54 0c00 	orrsne.w	ip, r4, r0
   84356:	ea55 0c02 	orrsne.w	ip, r5, r2
   8435a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8435e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   84362:	f000 80e2 	beq.w	8452a <__adddf3+0x1ee>
   84366:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8436a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8436e:	bfb8      	it	lt
   84370:	426d      	neglt	r5, r5
   84372:	dd0c      	ble.n	8438e <__adddf3+0x52>
   84374:	442c      	add	r4, r5
   84376:	ea80 0202 	eor.w	r2, r0, r2
   8437a:	ea81 0303 	eor.w	r3, r1, r3
   8437e:	ea82 0000 	eor.w	r0, r2, r0
   84382:	ea83 0101 	eor.w	r1, r3, r1
   84386:	ea80 0202 	eor.w	r2, r0, r2
   8438a:	ea81 0303 	eor.w	r3, r1, r3
   8438e:	2d36      	cmp	r5, #54	; 0x36
   84390:	bf88      	it	hi
   84392:	bd30      	pophi	{r4, r5, pc}
   84394:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   84398:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8439c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   843a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   843a4:	d002      	beq.n	843ac <__adddf3+0x70>
   843a6:	4240      	negs	r0, r0
   843a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   843ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   843b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   843b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   843b8:	d002      	beq.n	843c0 <__adddf3+0x84>
   843ba:	4252      	negs	r2, r2
   843bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   843c0:	ea94 0f05 	teq	r4, r5
   843c4:	f000 80a7 	beq.w	84516 <__adddf3+0x1da>
   843c8:	f1a4 0401 	sub.w	r4, r4, #1
   843cc:	f1d5 0e20 	rsbs	lr, r5, #32
   843d0:	db0d      	blt.n	843ee <__adddf3+0xb2>
   843d2:	fa02 fc0e 	lsl.w	ip, r2, lr
   843d6:	fa22 f205 	lsr.w	r2, r2, r5
   843da:	1880      	adds	r0, r0, r2
   843dc:	f141 0100 	adc.w	r1, r1, #0
   843e0:	fa03 f20e 	lsl.w	r2, r3, lr
   843e4:	1880      	adds	r0, r0, r2
   843e6:	fa43 f305 	asr.w	r3, r3, r5
   843ea:	4159      	adcs	r1, r3
   843ec:	e00e      	b.n	8440c <__adddf3+0xd0>
   843ee:	f1a5 0520 	sub.w	r5, r5, #32
   843f2:	f10e 0e20 	add.w	lr, lr, #32
   843f6:	2a01      	cmp	r2, #1
   843f8:	fa03 fc0e 	lsl.w	ip, r3, lr
   843fc:	bf28      	it	cs
   843fe:	f04c 0c02 	orrcs.w	ip, ip, #2
   84402:	fa43 f305 	asr.w	r3, r3, r5
   84406:	18c0      	adds	r0, r0, r3
   84408:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8440c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   84410:	d507      	bpl.n	84422 <__adddf3+0xe6>
   84412:	f04f 0e00 	mov.w	lr, #0
   84416:	f1dc 0c00 	rsbs	ip, ip, #0
   8441a:	eb7e 0000 	sbcs.w	r0, lr, r0
   8441e:	eb6e 0101 	sbc.w	r1, lr, r1
   84422:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   84426:	d31b      	bcc.n	84460 <__adddf3+0x124>
   84428:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8442c:	d30c      	bcc.n	84448 <__adddf3+0x10c>
   8442e:	0849      	lsrs	r1, r1, #1
   84430:	ea5f 0030 	movs.w	r0, r0, rrx
   84434:	ea4f 0c3c 	mov.w	ip, ip, rrx
   84438:	f104 0401 	add.w	r4, r4, #1
   8443c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   84440:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   84444:	f080 809a 	bcs.w	8457c <__adddf3+0x240>
   84448:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8444c:	bf08      	it	eq
   8444e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   84452:	f150 0000 	adcs.w	r0, r0, #0
   84456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8445a:	ea41 0105 	orr.w	r1, r1, r5
   8445e:	bd30      	pop	{r4, r5, pc}
   84460:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   84464:	4140      	adcs	r0, r0
   84466:	eb41 0101 	adc.w	r1, r1, r1
   8446a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8446e:	f1a4 0401 	sub.w	r4, r4, #1
   84472:	d1e9      	bne.n	84448 <__adddf3+0x10c>
   84474:	f091 0f00 	teq	r1, #0
   84478:	bf04      	itt	eq
   8447a:	4601      	moveq	r1, r0
   8447c:	2000      	moveq	r0, #0
   8447e:	fab1 f381 	clz	r3, r1
   84482:	bf08      	it	eq
   84484:	3320      	addeq	r3, #32
   84486:	f1a3 030b 	sub.w	r3, r3, #11
   8448a:	f1b3 0220 	subs.w	r2, r3, #32
   8448e:	da0c      	bge.n	844aa <__adddf3+0x16e>
   84490:	320c      	adds	r2, #12
   84492:	dd08      	ble.n	844a6 <__adddf3+0x16a>
   84494:	f102 0c14 	add.w	ip, r2, #20
   84498:	f1c2 020c 	rsb	r2, r2, #12
   8449c:	fa01 f00c 	lsl.w	r0, r1, ip
   844a0:	fa21 f102 	lsr.w	r1, r1, r2
   844a4:	e00c      	b.n	844c0 <__adddf3+0x184>
   844a6:	f102 0214 	add.w	r2, r2, #20
   844aa:	bfd8      	it	le
   844ac:	f1c2 0c20 	rsble	ip, r2, #32
   844b0:	fa01 f102 	lsl.w	r1, r1, r2
   844b4:	fa20 fc0c 	lsr.w	ip, r0, ip
   844b8:	bfdc      	itt	le
   844ba:	ea41 010c 	orrle.w	r1, r1, ip
   844be:	4090      	lslle	r0, r2
   844c0:	1ae4      	subs	r4, r4, r3
   844c2:	bfa2      	ittt	ge
   844c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   844c8:	4329      	orrge	r1, r5
   844ca:	bd30      	popge	{r4, r5, pc}
   844cc:	ea6f 0404 	mvn.w	r4, r4
   844d0:	3c1f      	subs	r4, #31
   844d2:	da1c      	bge.n	8450e <__adddf3+0x1d2>
   844d4:	340c      	adds	r4, #12
   844d6:	dc0e      	bgt.n	844f6 <__adddf3+0x1ba>
   844d8:	f104 0414 	add.w	r4, r4, #20
   844dc:	f1c4 0220 	rsb	r2, r4, #32
   844e0:	fa20 f004 	lsr.w	r0, r0, r4
   844e4:	fa01 f302 	lsl.w	r3, r1, r2
   844e8:	ea40 0003 	orr.w	r0, r0, r3
   844ec:	fa21 f304 	lsr.w	r3, r1, r4
   844f0:	ea45 0103 	orr.w	r1, r5, r3
   844f4:	bd30      	pop	{r4, r5, pc}
   844f6:	f1c4 040c 	rsb	r4, r4, #12
   844fa:	f1c4 0220 	rsb	r2, r4, #32
   844fe:	fa20 f002 	lsr.w	r0, r0, r2
   84502:	fa01 f304 	lsl.w	r3, r1, r4
   84506:	ea40 0003 	orr.w	r0, r0, r3
   8450a:	4629      	mov	r1, r5
   8450c:	bd30      	pop	{r4, r5, pc}
   8450e:	fa21 f004 	lsr.w	r0, r1, r4
   84512:	4629      	mov	r1, r5
   84514:	bd30      	pop	{r4, r5, pc}
   84516:	f094 0f00 	teq	r4, #0
   8451a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8451e:	bf06      	itte	eq
   84520:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   84524:	3401      	addeq	r4, #1
   84526:	3d01      	subne	r5, #1
   84528:	e74e      	b.n	843c8 <__adddf3+0x8c>
   8452a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8452e:	bf18      	it	ne
   84530:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   84534:	d029      	beq.n	8458a <__adddf3+0x24e>
   84536:	ea94 0f05 	teq	r4, r5
   8453a:	bf08      	it	eq
   8453c:	ea90 0f02 	teqeq	r0, r2
   84540:	d005      	beq.n	8454e <__adddf3+0x212>
   84542:	ea54 0c00 	orrs.w	ip, r4, r0
   84546:	bf04      	itt	eq
   84548:	4619      	moveq	r1, r3
   8454a:	4610      	moveq	r0, r2
   8454c:	bd30      	pop	{r4, r5, pc}
   8454e:	ea91 0f03 	teq	r1, r3
   84552:	bf1e      	ittt	ne
   84554:	2100      	movne	r1, #0
   84556:	2000      	movne	r0, #0
   84558:	bd30      	popne	{r4, r5, pc}
   8455a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8455e:	d105      	bne.n	8456c <__adddf3+0x230>
   84560:	0040      	lsls	r0, r0, #1
   84562:	4149      	adcs	r1, r1
   84564:	bf28      	it	cs
   84566:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8456a:	bd30      	pop	{r4, r5, pc}
   8456c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   84570:	bf3c      	itt	cc
   84572:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   84576:	bd30      	popcc	{r4, r5, pc}
   84578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8457c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   84580:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   84584:	f04f 0000 	mov.w	r0, #0
   84588:	bd30      	pop	{r4, r5, pc}
   8458a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8458e:	bf1a      	itte	ne
   84590:	4619      	movne	r1, r3
   84592:	4610      	movne	r0, r2
   84594:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   84598:	bf1c      	itt	ne
   8459a:	460b      	movne	r3, r1
   8459c:	4602      	movne	r2, r0
   8459e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   845a2:	bf06      	itte	eq
   845a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   845a8:	ea91 0f03 	teqeq	r1, r3
   845ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   845b0:	bd30      	pop	{r4, r5, pc}
   845b2:	bf00      	nop

000845b4 <__aeabi_ui2d>:
   845b4:	f090 0f00 	teq	r0, #0
   845b8:	bf04      	itt	eq
   845ba:	2100      	moveq	r1, #0
   845bc:	4770      	bxeq	lr
   845be:	b530      	push	{r4, r5, lr}
   845c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   845c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   845c8:	f04f 0500 	mov.w	r5, #0
   845cc:	f04f 0100 	mov.w	r1, #0
   845d0:	e750      	b.n	84474 <__adddf3+0x138>
   845d2:	bf00      	nop

000845d4 <__aeabi_i2d>:
   845d4:	f090 0f00 	teq	r0, #0
   845d8:	bf04      	itt	eq
   845da:	2100      	moveq	r1, #0
   845dc:	4770      	bxeq	lr
   845de:	b530      	push	{r4, r5, lr}
   845e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   845e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   845e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   845ec:	bf48      	it	mi
   845ee:	4240      	negmi	r0, r0
   845f0:	f04f 0100 	mov.w	r1, #0
   845f4:	e73e      	b.n	84474 <__adddf3+0x138>
   845f6:	bf00      	nop

000845f8 <__aeabi_f2d>:
   845f8:	0042      	lsls	r2, r0, #1
   845fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
   845fe:	ea4f 0131 	mov.w	r1, r1, rrx
   84602:	ea4f 7002 	mov.w	r0, r2, lsl #28
   84606:	bf1f      	itttt	ne
   84608:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8460c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   84610:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   84614:	4770      	bxne	lr
   84616:	f092 0f00 	teq	r2, #0
   8461a:	bf14      	ite	ne
   8461c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   84620:	4770      	bxeq	lr
   84622:	b530      	push	{r4, r5, lr}
   84624:	f44f 7460 	mov.w	r4, #896	; 0x380
   84628:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8462c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   84630:	e720      	b.n	84474 <__adddf3+0x138>
   84632:	bf00      	nop

00084634 <__aeabi_ul2d>:
   84634:	ea50 0201 	orrs.w	r2, r0, r1
   84638:	bf08      	it	eq
   8463a:	4770      	bxeq	lr
   8463c:	b530      	push	{r4, r5, lr}
   8463e:	f04f 0500 	mov.w	r5, #0
   84642:	e00a      	b.n	8465a <__aeabi_l2d+0x16>

00084644 <__aeabi_l2d>:
   84644:	ea50 0201 	orrs.w	r2, r0, r1
   84648:	bf08      	it	eq
   8464a:	4770      	bxeq	lr
   8464c:	b530      	push	{r4, r5, lr}
   8464e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   84652:	d502      	bpl.n	8465a <__aeabi_l2d+0x16>
   84654:	4240      	negs	r0, r0
   84656:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8465a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8465e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   84662:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   84666:	f43f aedc 	beq.w	84422 <__adddf3+0xe6>
   8466a:	f04f 0203 	mov.w	r2, #3
   8466e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   84672:	bf18      	it	ne
   84674:	3203      	addne	r2, #3
   84676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8467a:	bf18      	it	ne
   8467c:	3203      	addne	r2, #3
   8467e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   84682:	f1c2 0320 	rsb	r3, r2, #32
   84686:	fa00 fc03 	lsl.w	ip, r0, r3
   8468a:	fa20 f002 	lsr.w	r0, r0, r2
   8468e:	fa01 fe03 	lsl.w	lr, r1, r3
   84692:	ea40 000e 	orr.w	r0, r0, lr
   84696:	fa21 f102 	lsr.w	r1, r1, r2
   8469a:	4414      	add	r4, r2
   8469c:	e6c1      	b.n	84422 <__adddf3+0xe6>
   8469e:	bf00      	nop

000846a0 <__aeabi_d2uiz>:
   846a0:	004a      	lsls	r2, r1, #1
   846a2:	d211      	bcs.n	846c8 <__aeabi_d2uiz+0x28>
   846a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   846a8:	d211      	bcs.n	846ce <__aeabi_d2uiz+0x2e>
   846aa:	d50d      	bpl.n	846c8 <__aeabi_d2uiz+0x28>
   846ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   846b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   846b4:	d40e      	bmi.n	846d4 <__aeabi_d2uiz+0x34>
   846b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   846ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   846be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   846c2:	fa23 f002 	lsr.w	r0, r3, r2
   846c6:	4770      	bx	lr
   846c8:	f04f 0000 	mov.w	r0, #0
   846cc:	4770      	bx	lr
   846ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   846d2:	d102      	bne.n	846da <__aeabi_d2uiz+0x3a>
   846d4:	f04f 30ff 	mov.w	r0, #4294967295
   846d8:	4770      	bx	lr
   846da:	f04f 0000 	mov.w	r0, #0
   846de:	4770      	bx	lr

000846e0 <__libc_init_array>:
   846e0:	b570      	push	{r4, r5, r6, lr}
   846e2:	4e0f      	ldr	r6, [pc, #60]	; (84720 <__libc_init_array+0x40>)
   846e4:	4d0f      	ldr	r5, [pc, #60]	; (84724 <__libc_init_array+0x44>)
   846e6:	1b76      	subs	r6, r6, r5
   846e8:	10b6      	asrs	r6, r6, #2
   846ea:	bf18      	it	ne
   846ec:	2400      	movne	r4, #0
   846ee:	d005      	beq.n	846fc <__libc_init_array+0x1c>
   846f0:	3401      	adds	r4, #1
   846f2:	f855 3b04 	ldr.w	r3, [r5], #4
   846f6:	4798      	blx	r3
   846f8:	42a6      	cmp	r6, r4
   846fa:	d1f9      	bne.n	846f0 <__libc_init_array+0x10>
   846fc:	4e0a      	ldr	r6, [pc, #40]	; (84728 <__libc_init_array+0x48>)
   846fe:	4d0b      	ldr	r5, [pc, #44]	; (8472c <__libc_init_array+0x4c>)
   84700:	f003 f812 	bl	87728 <_init>
   84704:	1b76      	subs	r6, r6, r5
   84706:	10b6      	asrs	r6, r6, #2
   84708:	bf18      	it	ne
   8470a:	2400      	movne	r4, #0
   8470c:	d006      	beq.n	8471c <__libc_init_array+0x3c>
   8470e:	3401      	adds	r4, #1
   84710:	f855 3b04 	ldr.w	r3, [r5], #4
   84714:	4798      	blx	r3
   84716:	42a6      	cmp	r6, r4
   84718:	d1f9      	bne.n	8470e <__libc_init_array+0x2e>
   8471a:	bd70      	pop	{r4, r5, r6, pc}
   8471c:	bd70      	pop	{r4, r5, r6, pc}
   8471e:	bf00      	nop
   84720:	00087734 	.word	0x00087734
   84724:	00087734 	.word	0x00087734
   84728:	0008773c 	.word	0x0008773c
   8472c:	00087734 	.word	0x00087734

00084730 <iprintf>:
   84730:	b40f      	push	{r0, r1, r2, r3}
   84732:	b510      	push	{r4, lr}
   84734:	4b07      	ldr	r3, [pc, #28]	; (84754 <iprintf+0x24>)
   84736:	b082      	sub	sp, #8
   84738:	ac04      	add	r4, sp, #16
   8473a:	f854 2b04 	ldr.w	r2, [r4], #4
   8473e:	6818      	ldr	r0, [r3, #0]
   84740:	4623      	mov	r3, r4
   84742:	6881      	ldr	r1, [r0, #8]
   84744:	9401      	str	r4, [sp, #4]
   84746:	f000 f96f 	bl	84a28 <_vfiprintf_r>
   8474a:	b002      	add	sp, #8
   8474c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   84750:	b004      	add	sp, #16
   84752:	4770      	bx	lr
   84754:	200704d8 	.word	0x200704d8

00084758 <memset>:
   84758:	b470      	push	{r4, r5, r6}
   8475a:	0784      	lsls	r4, r0, #30
   8475c:	d046      	beq.n	847ec <memset+0x94>
   8475e:	1e54      	subs	r4, r2, #1
   84760:	2a00      	cmp	r2, #0
   84762:	d041      	beq.n	847e8 <memset+0x90>
   84764:	b2cd      	uxtb	r5, r1
   84766:	4603      	mov	r3, r0
   84768:	e002      	b.n	84770 <memset+0x18>
   8476a:	1e62      	subs	r2, r4, #1
   8476c:	b3e4      	cbz	r4, 847e8 <memset+0x90>
   8476e:	4614      	mov	r4, r2
   84770:	f803 5b01 	strb.w	r5, [r3], #1
   84774:	079a      	lsls	r2, r3, #30
   84776:	d1f8      	bne.n	8476a <memset+0x12>
   84778:	2c03      	cmp	r4, #3
   8477a:	d92e      	bls.n	847da <memset+0x82>
   8477c:	b2cd      	uxtb	r5, r1
   8477e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   84782:	2c0f      	cmp	r4, #15
   84784:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   84788:	d919      	bls.n	847be <memset+0x66>
   8478a:	4626      	mov	r6, r4
   8478c:	f103 0210 	add.w	r2, r3, #16
   84790:	3e10      	subs	r6, #16
   84792:	2e0f      	cmp	r6, #15
   84794:	f842 5c10 	str.w	r5, [r2, #-16]
   84798:	f842 5c0c 	str.w	r5, [r2, #-12]
   8479c:	f842 5c08 	str.w	r5, [r2, #-8]
   847a0:	f842 5c04 	str.w	r5, [r2, #-4]
   847a4:	f102 0210 	add.w	r2, r2, #16
   847a8:	d8f2      	bhi.n	84790 <memset+0x38>
   847aa:	f1a4 0210 	sub.w	r2, r4, #16
   847ae:	f022 020f 	bic.w	r2, r2, #15
   847b2:	f004 040f 	and.w	r4, r4, #15
   847b6:	3210      	adds	r2, #16
   847b8:	2c03      	cmp	r4, #3
   847ba:	4413      	add	r3, r2
   847bc:	d90d      	bls.n	847da <memset+0x82>
   847be:	461e      	mov	r6, r3
   847c0:	4622      	mov	r2, r4
   847c2:	3a04      	subs	r2, #4
   847c4:	2a03      	cmp	r2, #3
   847c6:	f846 5b04 	str.w	r5, [r6], #4
   847ca:	d8fa      	bhi.n	847c2 <memset+0x6a>
   847cc:	1f22      	subs	r2, r4, #4
   847ce:	f022 0203 	bic.w	r2, r2, #3
   847d2:	3204      	adds	r2, #4
   847d4:	4413      	add	r3, r2
   847d6:	f004 0403 	and.w	r4, r4, #3
   847da:	b12c      	cbz	r4, 847e8 <memset+0x90>
   847dc:	b2c9      	uxtb	r1, r1
   847de:	441c      	add	r4, r3
   847e0:	f803 1b01 	strb.w	r1, [r3], #1
   847e4:	42a3      	cmp	r3, r4
   847e6:	d1fb      	bne.n	847e0 <memset+0x88>
   847e8:	bc70      	pop	{r4, r5, r6}
   847ea:	4770      	bx	lr
   847ec:	4614      	mov	r4, r2
   847ee:	4603      	mov	r3, r0
   847f0:	e7c2      	b.n	84778 <memset+0x20>
   847f2:	bf00      	nop

000847f4 <setbuf>:
   847f4:	2900      	cmp	r1, #0
   847f6:	bf0c      	ite	eq
   847f8:	2202      	moveq	r2, #2
   847fa:	2200      	movne	r2, #0
   847fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   84800:	f000 b800 	b.w	84804 <setvbuf>

00084804 <setvbuf>:
   84804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   84808:	4d51      	ldr	r5, [pc, #324]	; (84950 <setvbuf+0x14c>)
   8480a:	b083      	sub	sp, #12
   8480c:	682d      	ldr	r5, [r5, #0]
   8480e:	4604      	mov	r4, r0
   84810:	460f      	mov	r7, r1
   84812:	4690      	mov	r8, r2
   84814:	461e      	mov	r6, r3
   84816:	b115      	cbz	r5, 8481e <setvbuf+0x1a>
   84818:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8481a:	2b00      	cmp	r3, #0
   8481c:	d079      	beq.n	84912 <setvbuf+0x10e>
   8481e:	f1b8 0f02 	cmp.w	r8, #2
   84822:	d004      	beq.n	8482e <setvbuf+0x2a>
   84824:	f1b8 0f01 	cmp.w	r8, #1
   84828:	d87f      	bhi.n	8492a <setvbuf+0x126>
   8482a:	2e00      	cmp	r6, #0
   8482c:	db7d      	blt.n	8492a <setvbuf+0x126>
   8482e:	4621      	mov	r1, r4
   84830:	4628      	mov	r0, r5
   84832:	f001 f93b 	bl	85aac <_fflush_r>
   84836:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84838:	b141      	cbz	r1, 8484c <setvbuf+0x48>
   8483a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8483e:	4299      	cmp	r1, r3
   84840:	d002      	beq.n	84848 <setvbuf+0x44>
   84842:	4628      	mov	r0, r5
   84844:	f001 fa8e 	bl	85d64 <_free_r>
   84848:	2300      	movs	r3, #0
   8484a:	6323      	str	r3, [r4, #48]	; 0x30
   8484c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84850:	2200      	movs	r2, #0
   84852:	61a2      	str	r2, [r4, #24]
   84854:	6062      	str	r2, [r4, #4]
   84856:	061a      	lsls	r2, r3, #24
   84858:	d454      	bmi.n	84904 <setvbuf+0x100>
   8485a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   8485e:	f023 0303 	bic.w	r3, r3, #3
   84862:	f1b8 0f02 	cmp.w	r8, #2
   84866:	81a3      	strh	r3, [r4, #12]
   84868:	d039      	beq.n	848de <setvbuf+0xda>
   8486a:	ab01      	add	r3, sp, #4
   8486c:	466a      	mov	r2, sp
   8486e:	4621      	mov	r1, r4
   84870:	4628      	mov	r0, r5
   84872:	f001 fd15 	bl	862a0 <__swhatbuf_r>
   84876:	89a3      	ldrh	r3, [r4, #12]
   84878:	4318      	orrs	r0, r3
   8487a:	81a0      	strh	r0, [r4, #12]
   8487c:	b326      	cbz	r6, 848c8 <setvbuf+0xc4>
   8487e:	b327      	cbz	r7, 848ca <setvbuf+0xc6>
   84880:	6bab      	ldr	r3, [r5, #56]	; 0x38
   84882:	2b00      	cmp	r3, #0
   84884:	d04d      	beq.n	84922 <setvbuf+0x11e>
   84886:	9b00      	ldr	r3, [sp, #0]
   84888:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8488c:	429e      	cmp	r6, r3
   8488e:	bf1c      	itt	ne
   84890:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
   84894:	81a0      	strhne	r0, [r4, #12]
   84896:	f1b8 0f01 	cmp.w	r8, #1
   8489a:	bf08      	it	eq
   8489c:	f040 0001 	orreq.w	r0, r0, #1
   848a0:	b283      	uxth	r3, r0
   848a2:	bf08      	it	eq
   848a4:	81a0      	strheq	r0, [r4, #12]
   848a6:	f003 0008 	and.w	r0, r3, #8
   848aa:	b280      	uxth	r0, r0
   848ac:	6027      	str	r7, [r4, #0]
   848ae:	6127      	str	r7, [r4, #16]
   848b0:	6166      	str	r6, [r4, #20]
   848b2:	b318      	cbz	r0, 848fc <setvbuf+0xf8>
   848b4:	f013 0001 	ands.w	r0, r3, #1
   848b8:	d02f      	beq.n	8491a <setvbuf+0x116>
   848ba:	2000      	movs	r0, #0
   848bc:	4276      	negs	r6, r6
   848be:	61a6      	str	r6, [r4, #24]
   848c0:	60a0      	str	r0, [r4, #8]
   848c2:	b003      	add	sp, #12
   848c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   848c8:	9e00      	ldr	r6, [sp, #0]
   848ca:	4630      	mov	r0, r6
   848cc:	f001 fd5c 	bl	86388 <malloc>
   848d0:	4607      	mov	r7, r0
   848d2:	b368      	cbz	r0, 84930 <setvbuf+0x12c>
   848d4:	89a3      	ldrh	r3, [r4, #12]
   848d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   848da:	81a3      	strh	r3, [r4, #12]
   848dc:	e7d0      	b.n	84880 <setvbuf+0x7c>
   848de:	2000      	movs	r0, #0
   848e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   848e4:	f043 0302 	orr.w	r3, r3, #2
   848e8:	2500      	movs	r5, #0
   848ea:	2101      	movs	r1, #1
   848ec:	81a3      	strh	r3, [r4, #12]
   848ee:	60a5      	str	r5, [r4, #8]
   848f0:	6022      	str	r2, [r4, #0]
   848f2:	6122      	str	r2, [r4, #16]
   848f4:	6161      	str	r1, [r4, #20]
   848f6:	b003      	add	sp, #12
   848f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   848fc:	60a0      	str	r0, [r4, #8]
   848fe:	b003      	add	sp, #12
   84900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   84904:	6921      	ldr	r1, [r4, #16]
   84906:	4628      	mov	r0, r5
   84908:	f001 fa2c 	bl	85d64 <_free_r>
   8490c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84910:	e7a3      	b.n	8485a <setvbuf+0x56>
   84912:	4628      	mov	r0, r5
   84914:	f001 f95e 	bl	85bd4 <__sinit>
   84918:	e781      	b.n	8481e <setvbuf+0x1a>
   8491a:	60a6      	str	r6, [r4, #8]
   8491c:	b003      	add	sp, #12
   8491e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   84922:	4628      	mov	r0, r5
   84924:	f001 f956 	bl	85bd4 <__sinit>
   84928:	e7ad      	b.n	84886 <setvbuf+0x82>
   8492a:	f04f 30ff 	mov.w	r0, #4294967295
   8492e:	e7e2      	b.n	848f6 <setvbuf+0xf2>
   84930:	f8dd 9000 	ldr.w	r9, [sp]
   84934:	45b1      	cmp	r9, r6
   84936:	d006      	beq.n	84946 <setvbuf+0x142>
   84938:	4648      	mov	r0, r9
   8493a:	f001 fd25 	bl	86388 <malloc>
   8493e:	4607      	mov	r7, r0
   84940:	b108      	cbz	r0, 84946 <setvbuf+0x142>
   84942:	464e      	mov	r6, r9
   84944:	e7c6      	b.n	848d4 <setvbuf+0xd0>
   84946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8494a:	f04f 30ff 	mov.w	r0, #4294967295
   8494e:	e7c7      	b.n	848e0 <setvbuf+0xdc>
   84950:	200704d8 	.word	0x200704d8

00084954 <strlen>:
   84954:	f020 0103 	bic.w	r1, r0, #3
   84958:	f010 0003 	ands.w	r0, r0, #3
   8495c:	f1c0 0000 	rsb	r0, r0, #0
   84960:	f851 3b04 	ldr.w	r3, [r1], #4
   84964:	f100 0c04 	add.w	ip, r0, #4
   84968:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8496c:	f06f 0200 	mvn.w	r2, #0
   84970:	bf1c      	itt	ne
   84972:	fa22 f20c 	lsrne.w	r2, r2, ip
   84976:	4313      	orrne	r3, r2
   84978:	f04f 0c01 	mov.w	ip, #1
   8497c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   84980:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   84984:	eba3 020c 	sub.w	r2, r3, ip
   84988:	ea22 0203 	bic.w	r2, r2, r3
   8498c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   84990:	bf04      	itt	eq
   84992:	f851 3b04 	ldreq.w	r3, [r1], #4
   84996:	3004      	addeq	r0, #4
   84998:	d0f4      	beq.n	84984 <strlen+0x30>
   8499a:	f1c2 0100 	rsb	r1, r2, #0
   8499e:	ea02 0201 	and.w	r2, r2, r1
   849a2:	fab2 f282 	clz	r2, r2
   849a6:	f1c2 021f 	rsb	r2, r2, #31
   849aa:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   849ae:	4770      	bx	lr

000849b0 <__sprint_r.part.0>:
   849b0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   849b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   849b6:	049c      	lsls	r4, r3, #18
   849b8:	4692      	mov	sl, r2
   849ba:	d52c      	bpl.n	84a16 <__sprint_r.part.0+0x66>
   849bc:	6893      	ldr	r3, [r2, #8]
   849be:	6812      	ldr	r2, [r2, #0]
   849c0:	b33b      	cbz	r3, 84a12 <__sprint_r.part.0+0x62>
   849c2:	460f      	mov	r7, r1
   849c4:	4680      	mov	r8, r0
   849c6:	f102 0908 	add.w	r9, r2, #8
   849ca:	e919 0060 	ldmdb	r9, {r5, r6}
   849ce:	08b6      	lsrs	r6, r6, #2
   849d0:	d017      	beq.n	84a02 <__sprint_r.part.0+0x52>
   849d2:	3d04      	subs	r5, #4
   849d4:	2400      	movs	r4, #0
   849d6:	e001      	b.n	849dc <__sprint_r.part.0+0x2c>
   849d8:	42a6      	cmp	r6, r4
   849da:	d010      	beq.n	849fe <__sprint_r.part.0+0x4e>
   849dc:	463a      	mov	r2, r7
   849de:	f855 1f04 	ldr.w	r1, [r5, #4]!
   849e2:	4640      	mov	r0, r8
   849e4:	f001 f95e 	bl	85ca4 <_fputwc_r>
   849e8:	1c43      	adds	r3, r0, #1
   849ea:	f104 0401 	add.w	r4, r4, #1
   849ee:	d1f3      	bne.n	849d8 <__sprint_r.part.0+0x28>
   849f0:	2300      	movs	r3, #0
   849f2:	f8ca 3008 	str.w	r3, [sl, #8]
   849f6:	f8ca 3004 	str.w	r3, [sl, #4]
   849fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   849fe:	f8da 3008 	ldr.w	r3, [sl, #8]
   84a02:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   84a06:	f8ca 3008 	str.w	r3, [sl, #8]
   84a0a:	f109 0908 	add.w	r9, r9, #8
   84a0e:	2b00      	cmp	r3, #0
   84a10:	d1db      	bne.n	849ca <__sprint_r.part.0+0x1a>
   84a12:	2000      	movs	r0, #0
   84a14:	e7ec      	b.n	849f0 <__sprint_r.part.0+0x40>
   84a16:	f001 fa8d 	bl	85f34 <__sfvwrite_r>
   84a1a:	2300      	movs	r3, #0
   84a1c:	f8ca 3008 	str.w	r3, [sl, #8]
   84a20:	f8ca 3004 	str.w	r3, [sl, #4]
   84a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00084a28 <_vfiprintf_r>:
   84a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84a2c:	b0ab      	sub	sp, #172	; 0xac
   84a2e:	461c      	mov	r4, r3
   84a30:	9100      	str	r1, [sp, #0]
   84a32:	4690      	mov	r8, r2
   84a34:	9304      	str	r3, [sp, #16]
   84a36:	9005      	str	r0, [sp, #20]
   84a38:	b118      	cbz	r0, 84a42 <_vfiprintf_r+0x1a>
   84a3a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84a3c:	2b00      	cmp	r3, #0
   84a3e:	f000 80de 	beq.w	84bfe <_vfiprintf_r+0x1d6>
   84a42:	9800      	ldr	r0, [sp, #0]
   84a44:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   84a48:	b28a      	uxth	r2, r1
   84a4a:	0495      	lsls	r5, r2, #18
   84a4c:	d407      	bmi.n	84a5e <_vfiprintf_r+0x36>
   84a4e:	6e43      	ldr	r3, [r0, #100]	; 0x64
   84a50:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   84a54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   84a58:	8182      	strh	r2, [r0, #12]
   84a5a:	6643      	str	r3, [r0, #100]	; 0x64
   84a5c:	b292      	uxth	r2, r2
   84a5e:	0711      	lsls	r1, r2, #28
   84a60:	f140 80b1 	bpl.w	84bc6 <_vfiprintf_r+0x19e>
   84a64:	9b00      	ldr	r3, [sp, #0]
   84a66:	691b      	ldr	r3, [r3, #16]
   84a68:	2b00      	cmp	r3, #0
   84a6a:	f000 80ac 	beq.w	84bc6 <_vfiprintf_r+0x19e>
   84a6e:	f002 021a 	and.w	r2, r2, #26
   84a72:	2a0a      	cmp	r2, #10
   84a74:	f000 80b5 	beq.w	84be2 <_vfiprintf_r+0x1ba>
   84a78:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   84a7c:	46d3      	mov	fp, sl
   84a7e:	2300      	movs	r3, #0
   84a80:	9302      	str	r3, [sp, #8]
   84a82:	930f      	str	r3, [sp, #60]	; 0x3c
   84a84:	930e      	str	r3, [sp, #56]	; 0x38
   84a86:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   84a8a:	f898 3000 	ldrb.w	r3, [r8]
   84a8e:	4644      	mov	r4, r8
   84a90:	b1fb      	cbz	r3, 84ad2 <_vfiprintf_r+0xaa>
   84a92:	2b25      	cmp	r3, #37	; 0x25
   84a94:	d102      	bne.n	84a9c <_vfiprintf_r+0x74>
   84a96:	e01c      	b.n	84ad2 <_vfiprintf_r+0xaa>
   84a98:	2b25      	cmp	r3, #37	; 0x25
   84a9a:	d003      	beq.n	84aa4 <_vfiprintf_r+0x7c>
   84a9c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   84aa0:	2b00      	cmp	r3, #0
   84aa2:	d1f9      	bne.n	84a98 <_vfiprintf_r+0x70>
   84aa4:	ebc8 0504 	rsb	r5, r8, r4
   84aa8:	b19d      	cbz	r5, 84ad2 <_vfiprintf_r+0xaa>
   84aaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84aac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84aae:	3301      	adds	r3, #1
   84ab0:	442a      	add	r2, r5
   84ab2:	2b07      	cmp	r3, #7
   84ab4:	f8cb 8000 	str.w	r8, [fp]
   84ab8:	f8cb 5004 	str.w	r5, [fp, #4]
   84abc:	920f      	str	r2, [sp, #60]	; 0x3c
   84abe:	930e      	str	r3, [sp, #56]	; 0x38
   84ac0:	dd7b      	ble.n	84bba <_vfiprintf_r+0x192>
   84ac2:	2a00      	cmp	r2, #0
   84ac4:	f040 851f 	bne.w	85506 <_vfiprintf_r+0xade>
   84ac8:	46d3      	mov	fp, sl
   84aca:	9b02      	ldr	r3, [sp, #8]
   84acc:	920e      	str	r2, [sp, #56]	; 0x38
   84ace:	442b      	add	r3, r5
   84ad0:	9302      	str	r3, [sp, #8]
   84ad2:	7823      	ldrb	r3, [r4, #0]
   84ad4:	2b00      	cmp	r3, #0
   84ad6:	f000 843b 	beq.w	85350 <_vfiprintf_r+0x928>
   84ada:	f04f 0300 	mov.w	r3, #0
   84ade:	2100      	movs	r1, #0
   84ae0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84ae4:	f104 0801 	add.w	r8, r4, #1
   84ae8:	7863      	ldrb	r3, [r4, #1]
   84aea:	4608      	mov	r0, r1
   84aec:	460e      	mov	r6, r1
   84aee:	460c      	mov	r4, r1
   84af0:	f04f 32ff 	mov.w	r2, #4294967295
   84af4:	9201      	str	r2, [sp, #4]
   84af6:	f108 0801 	add.w	r8, r8, #1
   84afa:	f1a3 0220 	sub.w	r2, r3, #32
   84afe:	2a58      	cmp	r2, #88	; 0x58
   84b00:	f200 838b 	bhi.w	8521a <_vfiprintf_r+0x7f2>
   84b04:	e8df f012 	tbh	[pc, r2, lsl #1]
   84b08:	0389033d 	.word	0x0389033d
   84b0c:	03450389 	.word	0x03450389
   84b10:	03890389 	.word	0x03890389
   84b14:	03890389 	.word	0x03890389
   84b18:	03890389 	.word	0x03890389
   84b1c:	026b007e 	.word	0x026b007e
   84b20:	00860389 	.word	0x00860389
   84b24:	03890270 	.word	0x03890270
   84b28:	025d01cc 	.word	0x025d01cc
   84b2c:	025d025d 	.word	0x025d025d
   84b30:	025d025d 	.word	0x025d025d
   84b34:	025d025d 	.word	0x025d025d
   84b38:	025d025d 	.word	0x025d025d
   84b3c:	03890389 	.word	0x03890389
   84b40:	03890389 	.word	0x03890389
   84b44:	03890389 	.word	0x03890389
   84b48:	03890389 	.word	0x03890389
   84b4c:	03890389 	.word	0x03890389
   84b50:	038901d1 	.word	0x038901d1
   84b54:	03890389 	.word	0x03890389
   84b58:	03890389 	.word	0x03890389
   84b5c:	03890389 	.word	0x03890389
   84b60:	03890389 	.word	0x03890389
   84b64:	021a0389 	.word	0x021a0389
   84b68:	03890389 	.word	0x03890389
   84b6c:	03890389 	.word	0x03890389
   84b70:	02e50389 	.word	0x02e50389
   84b74:	03890389 	.word	0x03890389
   84b78:	03890308 	.word	0x03890308
   84b7c:	03890389 	.word	0x03890389
   84b80:	03890389 	.word	0x03890389
   84b84:	03890389 	.word	0x03890389
   84b88:	03890389 	.word	0x03890389
   84b8c:	032b0389 	.word	0x032b0389
   84b90:	03890382 	.word	0x03890382
   84b94:	03890389 	.word	0x03890389
   84b98:	0382035e 	.word	0x0382035e
   84b9c:	03890389 	.word	0x03890389
   84ba0:	03890363 	.word	0x03890363
   84ba4:	028d0370 	.word	0x028d0370
   84ba8:	02e0008b 	.word	0x02e0008b
   84bac:	02930389 	.word	0x02930389
   84bb0:	02b20389 	.word	0x02b20389
   84bb4:	03890389 	.word	0x03890389
   84bb8:	034a      	.short	0x034a
   84bba:	f10b 0b08 	add.w	fp, fp, #8
   84bbe:	9b02      	ldr	r3, [sp, #8]
   84bc0:	442b      	add	r3, r5
   84bc2:	9302      	str	r3, [sp, #8]
   84bc4:	e785      	b.n	84ad2 <_vfiprintf_r+0xaa>
   84bc6:	9900      	ldr	r1, [sp, #0]
   84bc8:	9805      	ldr	r0, [sp, #20]
   84bca:	f000 fe57 	bl	8587c <__swsetup_r>
   84bce:	2800      	cmp	r0, #0
   84bd0:	f040 8545 	bne.w	8565e <_vfiprintf_r+0xc36>
   84bd4:	9b00      	ldr	r3, [sp, #0]
   84bd6:	899a      	ldrh	r2, [r3, #12]
   84bd8:	f002 021a 	and.w	r2, r2, #26
   84bdc:	2a0a      	cmp	r2, #10
   84bde:	f47f af4b 	bne.w	84a78 <_vfiprintf_r+0x50>
   84be2:	9900      	ldr	r1, [sp, #0]
   84be4:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   84be8:	2b00      	cmp	r3, #0
   84bea:	f6ff af45 	blt.w	84a78 <_vfiprintf_r+0x50>
   84bee:	4623      	mov	r3, r4
   84bf0:	4642      	mov	r2, r8
   84bf2:	9805      	ldr	r0, [sp, #20]
   84bf4:	f000 fe0c 	bl	85810 <__sbprintf>
   84bf8:	b02b      	add	sp, #172	; 0xac
   84bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84bfe:	f000 ffe9 	bl	85bd4 <__sinit>
   84c02:	e71e      	b.n	84a42 <_vfiprintf_r+0x1a>
   84c04:	9a04      	ldr	r2, [sp, #16]
   84c06:	4613      	mov	r3, r2
   84c08:	6814      	ldr	r4, [r2, #0]
   84c0a:	3304      	adds	r3, #4
   84c0c:	2c00      	cmp	r4, #0
   84c0e:	9304      	str	r3, [sp, #16]
   84c10:	da02      	bge.n	84c18 <_vfiprintf_r+0x1f0>
   84c12:	4264      	negs	r4, r4
   84c14:	f046 0604 	orr.w	r6, r6, #4
   84c18:	f898 3000 	ldrb.w	r3, [r8]
   84c1c:	e76b      	b.n	84af6 <_vfiprintf_r+0xce>
   84c1e:	f04f 0300 	mov.w	r3, #0
   84c22:	9804      	ldr	r0, [sp, #16]
   84c24:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84c28:	4603      	mov	r3, r0
   84c2a:	2130      	movs	r1, #48	; 0x30
   84c2c:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   84c30:	9901      	ldr	r1, [sp, #4]
   84c32:	2278      	movs	r2, #120	; 0x78
   84c34:	2900      	cmp	r1, #0
   84c36:	9406      	str	r4, [sp, #24]
   84c38:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   84c3c:	6804      	ldr	r4, [r0, #0]
   84c3e:	f103 0304 	add.w	r3, r3, #4
   84c42:	f04f 0500 	mov.w	r5, #0
   84c46:	f046 0202 	orr.w	r2, r6, #2
   84c4a:	f2c0 850c 	blt.w	85666 <_vfiprintf_r+0xc3e>
   84c4e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84c52:	ea54 0205 	orrs.w	r2, r4, r5
   84c56:	f046 0602 	orr.w	r6, r6, #2
   84c5a:	9304      	str	r3, [sp, #16]
   84c5c:	f040 84b5 	bne.w	855ca <_vfiprintf_r+0xba2>
   84c60:	48b3      	ldr	r0, [pc, #716]	; (84f30 <_vfiprintf_r+0x508>)
   84c62:	9b01      	ldr	r3, [sp, #4]
   84c64:	2b00      	cmp	r3, #0
   84c66:	f040 8462 	bne.w	8552e <_vfiprintf_r+0xb06>
   84c6a:	4699      	mov	r9, r3
   84c6c:	4657      	mov	r7, sl
   84c6e:	2300      	movs	r3, #0
   84c70:	9301      	str	r3, [sp, #4]
   84c72:	9303      	str	r3, [sp, #12]
   84c74:	9b01      	ldr	r3, [sp, #4]
   84c76:	9a03      	ldr	r2, [sp, #12]
   84c78:	4293      	cmp	r3, r2
   84c7a:	bfb8      	it	lt
   84c7c:	4613      	movlt	r3, r2
   84c7e:	461d      	mov	r5, r3
   84c80:	f1b9 0f00 	cmp.w	r9, #0
   84c84:	d000      	beq.n	84c88 <_vfiprintf_r+0x260>
   84c86:	3501      	adds	r5, #1
   84c88:	f016 0302 	ands.w	r3, r6, #2
   84c8c:	9307      	str	r3, [sp, #28]
   84c8e:	bf18      	it	ne
   84c90:	3502      	addne	r5, #2
   84c92:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   84c96:	9308      	str	r3, [sp, #32]
   84c98:	f040 82e8 	bne.w	8526c <_vfiprintf_r+0x844>
   84c9c:	9b06      	ldr	r3, [sp, #24]
   84c9e:	1b5c      	subs	r4, r3, r5
   84ca0:	2c00      	cmp	r4, #0
   84ca2:	f340 82e3 	ble.w	8526c <_vfiprintf_r+0x844>
   84ca6:	2c10      	cmp	r4, #16
   84ca8:	f340 853c 	ble.w	85724 <_vfiprintf_r+0xcfc>
   84cac:	f8df 9284 	ldr.w	r9, [pc, #644]	; 84f34 <_vfiprintf_r+0x50c>
   84cb0:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   84cb4:	46dc      	mov	ip, fp
   84cb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84cb8:	46c3      	mov	fp, r8
   84cba:	2310      	movs	r3, #16
   84cbc:	46a8      	mov	r8, r5
   84cbe:	4670      	mov	r0, lr
   84cc0:	464d      	mov	r5, r9
   84cc2:	f8dd 9014 	ldr.w	r9, [sp, #20]
   84cc6:	e007      	b.n	84cd8 <_vfiprintf_r+0x2b0>
   84cc8:	f100 0e02 	add.w	lr, r0, #2
   84ccc:	4608      	mov	r0, r1
   84cce:	f10c 0c08 	add.w	ip, ip, #8
   84cd2:	3c10      	subs	r4, #16
   84cd4:	2c10      	cmp	r4, #16
   84cd6:	dd13      	ble.n	84d00 <_vfiprintf_r+0x2d8>
   84cd8:	1c41      	adds	r1, r0, #1
   84cda:	3210      	adds	r2, #16
   84cdc:	2907      	cmp	r1, #7
   84cde:	920f      	str	r2, [sp, #60]	; 0x3c
   84ce0:	f8cc 5000 	str.w	r5, [ip]
   84ce4:	f8cc 3004 	str.w	r3, [ip, #4]
   84ce8:	910e      	str	r1, [sp, #56]	; 0x38
   84cea:	dded      	ble.n	84cc8 <_vfiprintf_r+0x2a0>
   84cec:	2a00      	cmp	r2, #0
   84cee:	f040 82a5 	bne.w	8523c <_vfiprintf_r+0x814>
   84cf2:	3c10      	subs	r4, #16
   84cf4:	2c10      	cmp	r4, #16
   84cf6:	4610      	mov	r0, r2
   84cf8:	f04f 0e01 	mov.w	lr, #1
   84cfc:	46d4      	mov	ip, sl
   84cfe:	dceb      	bgt.n	84cd8 <_vfiprintf_r+0x2b0>
   84d00:	46a9      	mov	r9, r5
   84d02:	4670      	mov	r0, lr
   84d04:	4645      	mov	r5, r8
   84d06:	46d8      	mov	r8, fp
   84d08:	46e3      	mov	fp, ip
   84d0a:	4422      	add	r2, r4
   84d0c:	2807      	cmp	r0, #7
   84d0e:	920f      	str	r2, [sp, #60]	; 0x3c
   84d10:	f8cb 9000 	str.w	r9, [fp]
   84d14:	f8cb 4004 	str.w	r4, [fp, #4]
   84d18:	900e      	str	r0, [sp, #56]	; 0x38
   84d1a:	f300 836d 	bgt.w	853f8 <_vfiprintf_r+0x9d0>
   84d1e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   84d22:	f10b 0b08 	add.w	fp, fp, #8
   84d26:	f100 0e01 	add.w	lr, r0, #1
   84d2a:	2b00      	cmp	r3, #0
   84d2c:	f040 82a7 	bne.w	8527e <_vfiprintf_r+0x856>
   84d30:	9b07      	ldr	r3, [sp, #28]
   84d32:	2b00      	cmp	r3, #0
   84d34:	f000 82ba 	beq.w	852ac <_vfiprintf_r+0x884>
   84d38:	3202      	adds	r2, #2
   84d3a:	a90c      	add	r1, sp, #48	; 0x30
   84d3c:	2302      	movs	r3, #2
   84d3e:	f1be 0f07 	cmp.w	lr, #7
   84d42:	920f      	str	r2, [sp, #60]	; 0x3c
   84d44:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   84d48:	e88b 000a 	stmia.w	fp, {r1, r3}
   84d4c:	f340 8370 	ble.w	85430 <_vfiprintf_r+0xa08>
   84d50:	2a00      	cmp	r2, #0
   84d52:	f040 8400 	bne.w	85556 <_vfiprintf_r+0xb2e>
   84d56:	9b08      	ldr	r3, [sp, #32]
   84d58:	f04f 0e01 	mov.w	lr, #1
   84d5c:	2b80      	cmp	r3, #128	; 0x80
   84d5e:	4610      	mov	r0, r2
   84d60:	46d3      	mov	fp, sl
   84d62:	f040 82a7 	bne.w	852b4 <_vfiprintf_r+0x88c>
   84d66:	9b06      	ldr	r3, [sp, #24]
   84d68:	1b5c      	subs	r4, r3, r5
   84d6a:	2c00      	cmp	r4, #0
   84d6c:	f340 82a2 	ble.w	852b4 <_vfiprintf_r+0x88c>
   84d70:	2c10      	cmp	r4, #16
   84d72:	f340 84f8 	ble.w	85766 <_vfiprintf_r+0xd3e>
   84d76:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 84f38 <_vfiprintf_r+0x510>
   84d7a:	46de      	mov	lr, fp
   84d7c:	2310      	movs	r3, #16
   84d7e:	46c3      	mov	fp, r8
   84d80:	46a8      	mov	r8, r5
   84d82:	464d      	mov	r5, r9
   84d84:	f8dd 9014 	ldr.w	r9, [sp, #20]
   84d88:	e007      	b.n	84d9a <_vfiprintf_r+0x372>
   84d8a:	f100 0c02 	add.w	ip, r0, #2
   84d8e:	4608      	mov	r0, r1
   84d90:	f10e 0e08 	add.w	lr, lr, #8
   84d94:	3c10      	subs	r4, #16
   84d96:	2c10      	cmp	r4, #16
   84d98:	dd13      	ble.n	84dc2 <_vfiprintf_r+0x39a>
   84d9a:	1c41      	adds	r1, r0, #1
   84d9c:	3210      	adds	r2, #16
   84d9e:	2907      	cmp	r1, #7
   84da0:	920f      	str	r2, [sp, #60]	; 0x3c
   84da2:	f8ce 5000 	str.w	r5, [lr]
   84da6:	f8ce 3004 	str.w	r3, [lr, #4]
   84daa:	910e      	str	r1, [sp, #56]	; 0x38
   84dac:	dded      	ble.n	84d8a <_vfiprintf_r+0x362>
   84dae:	2a00      	cmp	r2, #0
   84db0:	f040 830c 	bne.w	853cc <_vfiprintf_r+0x9a4>
   84db4:	3c10      	subs	r4, #16
   84db6:	2c10      	cmp	r4, #16
   84db8:	f04f 0c01 	mov.w	ip, #1
   84dbc:	4610      	mov	r0, r2
   84dbe:	46d6      	mov	lr, sl
   84dc0:	dceb      	bgt.n	84d9a <_vfiprintf_r+0x372>
   84dc2:	46a9      	mov	r9, r5
   84dc4:	4645      	mov	r5, r8
   84dc6:	46d8      	mov	r8, fp
   84dc8:	46f3      	mov	fp, lr
   84dca:	4422      	add	r2, r4
   84dcc:	f1bc 0f07 	cmp.w	ip, #7
   84dd0:	920f      	str	r2, [sp, #60]	; 0x3c
   84dd2:	f8cb 9000 	str.w	r9, [fp]
   84dd6:	f8cb 4004 	str.w	r4, [fp, #4]
   84dda:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   84dde:	f300 83c8 	bgt.w	85572 <_vfiprintf_r+0xb4a>
   84de2:	9b01      	ldr	r3, [sp, #4]
   84de4:	9903      	ldr	r1, [sp, #12]
   84de6:	f10b 0b08 	add.w	fp, fp, #8
   84dea:	1a5c      	subs	r4, r3, r1
   84dec:	2c00      	cmp	r4, #0
   84dee:	f10c 0e01 	add.w	lr, ip, #1
   84df2:	4660      	mov	r0, ip
   84df4:	f300 8264 	bgt.w	852c0 <_vfiprintf_r+0x898>
   84df8:	9903      	ldr	r1, [sp, #12]
   84dfa:	f1be 0f07 	cmp.w	lr, #7
   84dfe:	440a      	add	r2, r1
   84e00:	920f      	str	r2, [sp, #60]	; 0x3c
   84e02:	f8cb 7000 	str.w	r7, [fp]
   84e06:	f8cb 1004 	str.w	r1, [fp, #4]
   84e0a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   84e0e:	f340 82c5 	ble.w	8539c <_vfiprintf_r+0x974>
   84e12:	2a00      	cmp	r2, #0
   84e14:	f040 8332 	bne.w	8547c <_vfiprintf_r+0xa54>
   84e18:	0770      	lsls	r0, r6, #29
   84e1a:	920e      	str	r2, [sp, #56]	; 0x38
   84e1c:	d538      	bpl.n	84e90 <_vfiprintf_r+0x468>
   84e1e:	9b06      	ldr	r3, [sp, #24]
   84e20:	1b5c      	subs	r4, r3, r5
   84e22:	2c00      	cmp	r4, #0
   84e24:	dd34      	ble.n	84e90 <_vfiprintf_r+0x468>
   84e26:	46d3      	mov	fp, sl
   84e28:	2c10      	cmp	r4, #16
   84e2a:	f340 8496 	ble.w	8575a <_vfiprintf_r+0xd32>
   84e2e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 84f34 <_vfiprintf_r+0x50c>
   84e32:	990e      	ldr	r1, [sp, #56]	; 0x38
   84e34:	464f      	mov	r7, r9
   84e36:	2610      	movs	r6, #16
   84e38:	f8dd 9014 	ldr.w	r9, [sp, #20]
   84e3c:	e006      	b.n	84e4c <_vfiprintf_r+0x424>
   84e3e:	1c88      	adds	r0, r1, #2
   84e40:	4619      	mov	r1, r3
   84e42:	f10b 0b08 	add.w	fp, fp, #8
   84e46:	3c10      	subs	r4, #16
   84e48:	2c10      	cmp	r4, #16
   84e4a:	dd13      	ble.n	84e74 <_vfiprintf_r+0x44c>
   84e4c:	1c4b      	adds	r3, r1, #1
   84e4e:	3210      	adds	r2, #16
   84e50:	2b07      	cmp	r3, #7
   84e52:	920f      	str	r2, [sp, #60]	; 0x3c
   84e54:	f8cb 7000 	str.w	r7, [fp]
   84e58:	f8cb 6004 	str.w	r6, [fp, #4]
   84e5c:	930e      	str	r3, [sp, #56]	; 0x38
   84e5e:	ddee      	ble.n	84e3e <_vfiprintf_r+0x416>
   84e60:	2a00      	cmp	r2, #0
   84e62:	f040 8285 	bne.w	85370 <_vfiprintf_r+0x948>
   84e66:	3c10      	subs	r4, #16
   84e68:	2c10      	cmp	r4, #16
   84e6a:	f04f 0001 	mov.w	r0, #1
   84e6e:	4611      	mov	r1, r2
   84e70:	46d3      	mov	fp, sl
   84e72:	dceb      	bgt.n	84e4c <_vfiprintf_r+0x424>
   84e74:	46b9      	mov	r9, r7
   84e76:	4422      	add	r2, r4
   84e78:	2807      	cmp	r0, #7
   84e7a:	920f      	str	r2, [sp, #60]	; 0x3c
   84e7c:	f8cb 9000 	str.w	r9, [fp]
   84e80:	f8cb 4004 	str.w	r4, [fp, #4]
   84e84:	900e      	str	r0, [sp, #56]	; 0x38
   84e86:	f340 8292 	ble.w	853ae <_vfiprintf_r+0x986>
   84e8a:	2a00      	cmp	r2, #0
   84e8c:	f040 840c 	bne.w	856a8 <_vfiprintf_r+0xc80>
   84e90:	9b02      	ldr	r3, [sp, #8]
   84e92:	9a06      	ldr	r2, [sp, #24]
   84e94:	42aa      	cmp	r2, r5
   84e96:	bfac      	ite	ge
   84e98:	189b      	addge	r3, r3, r2
   84e9a:	195b      	addlt	r3, r3, r5
   84e9c:	9302      	str	r3, [sp, #8]
   84e9e:	e290      	b.n	853c2 <_vfiprintf_r+0x99a>
   84ea0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   84ea4:	f898 3000 	ldrb.w	r3, [r8]
   84ea8:	e625      	b.n	84af6 <_vfiprintf_r+0xce>
   84eaa:	9406      	str	r4, [sp, #24]
   84eac:	2900      	cmp	r1, #0
   84eae:	f040 8485 	bne.w	857bc <_vfiprintf_r+0xd94>
   84eb2:	f046 0610 	orr.w	r6, r6, #16
   84eb6:	06b3      	lsls	r3, r6, #26
   84eb8:	f140 8304 	bpl.w	854c4 <_vfiprintf_r+0xa9c>
   84ebc:	9904      	ldr	r1, [sp, #16]
   84ebe:	3107      	adds	r1, #7
   84ec0:	f021 0107 	bic.w	r1, r1, #7
   84ec4:	e9d1 2300 	ldrd	r2, r3, [r1]
   84ec8:	4614      	mov	r4, r2
   84eca:	461d      	mov	r5, r3
   84ecc:	3108      	adds	r1, #8
   84ece:	9104      	str	r1, [sp, #16]
   84ed0:	2a00      	cmp	r2, #0
   84ed2:	f173 0300 	sbcs.w	r3, r3, #0
   84ed6:	f2c0 837c 	blt.w	855d2 <_vfiprintf_r+0xbaa>
   84eda:	9b01      	ldr	r3, [sp, #4]
   84edc:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   84ee0:	2b00      	cmp	r3, #0
   84ee2:	f2c0 830b 	blt.w	854fc <_vfiprintf_r+0xad4>
   84ee6:	ea54 0305 	orrs.w	r3, r4, r5
   84eea:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84eee:	f000 80de 	beq.w	850ae <_vfiprintf_r+0x686>
   84ef2:	2d00      	cmp	r5, #0
   84ef4:	bf08      	it	eq
   84ef6:	2c0a      	cmpeq	r4, #10
   84ef8:	f0c0 80de 	bcc.w	850b8 <_vfiprintf_r+0x690>
   84efc:	4657      	mov	r7, sl
   84efe:	4620      	mov	r0, r4
   84f00:	4629      	mov	r1, r5
   84f02:	220a      	movs	r2, #10
   84f04:	2300      	movs	r3, #0
   84f06:	f002 f9f3 	bl	872f0 <__aeabi_uldivmod>
   84f0a:	3230      	adds	r2, #48	; 0x30
   84f0c:	f807 2d01 	strb.w	r2, [r7, #-1]!
   84f10:	4620      	mov	r0, r4
   84f12:	4629      	mov	r1, r5
   84f14:	2300      	movs	r3, #0
   84f16:	220a      	movs	r2, #10
   84f18:	f002 f9ea 	bl	872f0 <__aeabi_uldivmod>
   84f1c:	4604      	mov	r4, r0
   84f1e:	460d      	mov	r5, r1
   84f20:	ea54 0305 	orrs.w	r3, r4, r5
   84f24:	d1eb      	bne.n	84efe <_vfiprintf_r+0x4d6>
   84f26:	ebc7 030a 	rsb	r3, r7, sl
   84f2a:	9303      	str	r3, [sp, #12]
   84f2c:	e6a2      	b.n	84c74 <_vfiprintf_r+0x24c>
   84f2e:	bf00      	nop
   84f30:	000876fc 	.word	0x000876fc
   84f34:	00087718 	.word	0x00087718
   84f38:	000876d8 	.word	0x000876d8
   84f3c:	9406      	str	r4, [sp, #24]
   84f3e:	2900      	cmp	r1, #0
   84f40:	f040 8438 	bne.w	857b4 <_vfiprintf_r+0xd8c>
   84f44:	f046 0610 	orr.w	r6, r6, #16
   84f48:	f016 0320 	ands.w	r3, r6, #32
   84f4c:	f000 82a1 	beq.w	85492 <_vfiprintf_r+0xa6a>
   84f50:	f04f 0200 	mov.w	r2, #0
   84f54:	9b04      	ldr	r3, [sp, #16]
   84f56:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   84f5a:	3307      	adds	r3, #7
   84f5c:	f023 0307 	bic.w	r3, r3, #7
   84f60:	f103 0208 	add.w	r2, r3, #8
   84f64:	e9d3 4500 	ldrd	r4, r5, [r3]
   84f68:	9b01      	ldr	r3, [sp, #4]
   84f6a:	9204      	str	r2, [sp, #16]
   84f6c:	2b00      	cmp	r3, #0
   84f6e:	db0a      	blt.n	84f86 <_vfiprintf_r+0x55e>
   84f70:	ea54 0305 	orrs.w	r3, r4, r5
   84f74:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84f78:	d105      	bne.n	84f86 <_vfiprintf_r+0x55e>
   84f7a:	9b01      	ldr	r3, [sp, #4]
   84f7c:	2b00      	cmp	r3, #0
   84f7e:	f000 8427 	beq.w	857d0 <_vfiprintf_r+0xda8>
   84f82:	2400      	movs	r4, #0
   84f84:	2500      	movs	r5, #0
   84f86:	f04f 0900 	mov.w	r9, #0
   84f8a:	4657      	mov	r7, sl
   84f8c:	08e2      	lsrs	r2, r4, #3
   84f8e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   84f92:	08e9      	lsrs	r1, r5, #3
   84f94:	f004 0307 	and.w	r3, r4, #7
   84f98:	460d      	mov	r5, r1
   84f9a:	4614      	mov	r4, r2
   84f9c:	3330      	adds	r3, #48	; 0x30
   84f9e:	ea54 0205 	orrs.w	r2, r4, r5
   84fa2:	f807 3d01 	strb.w	r3, [r7, #-1]!
   84fa6:	d1f1      	bne.n	84f8c <_vfiprintf_r+0x564>
   84fa8:	07f4      	lsls	r4, r6, #31
   84faa:	d5bc      	bpl.n	84f26 <_vfiprintf_r+0x4fe>
   84fac:	2b30      	cmp	r3, #48	; 0x30
   84fae:	d0ba      	beq.n	84f26 <_vfiprintf_r+0x4fe>
   84fb0:	2230      	movs	r2, #48	; 0x30
   84fb2:	1e7b      	subs	r3, r7, #1
   84fb4:	f807 2c01 	strb.w	r2, [r7, #-1]
   84fb8:	ebc3 020a 	rsb	r2, r3, sl
   84fbc:	9203      	str	r2, [sp, #12]
   84fbe:	461f      	mov	r7, r3
   84fc0:	e658      	b.n	84c74 <_vfiprintf_r+0x24c>
   84fc2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84fc6:	2400      	movs	r4, #0
   84fc8:	f818 3b01 	ldrb.w	r3, [r8], #1
   84fcc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   84fd0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
   84fd4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84fd8:	2a09      	cmp	r2, #9
   84fda:	d9f5      	bls.n	84fc8 <_vfiprintf_r+0x5a0>
   84fdc:	e58d      	b.n	84afa <_vfiprintf_r+0xd2>
   84fde:	f898 3000 	ldrb.w	r3, [r8]
   84fe2:	2101      	movs	r1, #1
   84fe4:	202b      	movs	r0, #43	; 0x2b
   84fe6:	e586      	b.n	84af6 <_vfiprintf_r+0xce>
   84fe8:	f898 3000 	ldrb.w	r3, [r8]
   84fec:	f108 0501 	add.w	r5, r8, #1
   84ff0:	2b2a      	cmp	r3, #42	; 0x2a
   84ff2:	f000 83cc 	beq.w	8578e <_vfiprintf_r+0xd66>
   84ff6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84ffa:	2a09      	cmp	r2, #9
   84ffc:	46a8      	mov	r8, r5
   84ffe:	bf98      	it	ls
   85000:	2500      	movls	r5, #0
   85002:	f200 83b5 	bhi.w	85770 <_vfiprintf_r+0xd48>
   85006:	f818 3b01 	ldrb.w	r3, [r8], #1
   8500a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   8500e:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   85012:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   85016:	2a09      	cmp	r2, #9
   85018:	d9f5      	bls.n	85006 <_vfiprintf_r+0x5de>
   8501a:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
   8501e:	9201      	str	r2, [sp, #4]
   85020:	e56b      	b.n	84afa <_vfiprintf_r+0xd2>
   85022:	9406      	str	r4, [sp, #24]
   85024:	2900      	cmp	r1, #0
   85026:	d08f      	beq.n	84f48 <_vfiprintf_r+0x520>
   85028:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   8502c:	e78c      	b.n	84f48 <_vfiprintf_r+0x520>
   8502e:	f04f 0300 	mov.w	r3, #0
   85032:	9a04      	ldr	r2, [sp, #16]
   85034:	9406      	str	r4, [sp, #24]
   85036:	6817      	ldr	r7, [r2, #0]
   85038:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   8503c:	1d14      	adds	r4, r2, #4
   8503e:	9b01      	ldr	r3, [sp, #4]
   85040:	2f00      	cmp	r7, #0
   85042:	f000 837f 	beq.w	85744 <_vfiprintf_r+0xd1c>
   85046:	2b00      	cmp	r3, #0
   85048:	f2c0 8353 	blt.w	856f2 <_vfiprintf_r+0xcca>
   8504c:	461a      	mov	r2, r3
   8504e:	2100      	movs	r1, #0
   85050:	4638      	mov	r0, r7
   85052:	f001 fc4d 	bl	868f0 <memchr>
   85056:	2800      	cmp	r0, #0
   85058:	f000 838e 	beq.w	85778 <_vfiprintf_r+0xd50>
   8505c:	1bc3      	subs	r3, r0, r7
   8505e:	9303      	str	r3, [sp, #12]
   85060:	2300      	movs	r3, #0
   85062:	9404      	str	r4, [sp, #16]
   85064:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   85068:	9301      	str	r3, [sp, #4]
   8506a:	e603      	b.n	84c74 <_vfiprintf_r+0x24c>
   8506c:	9406      	str	r4, [sp, #24]
   8506e:	2900      	cmp	r1, #0
   85070:	f040 839d 	bne.w	857ae <_vfiprintf_r+0xd86>
   85074:	f016 0920 	ands.w	r9, r6, #32
   85078:	d134      	bne.n	850e4 <_vfiprintf_r+0x6bc>
   8507a:	f016 0310 	ands.w	r3, r6, #16
   8507e:	d103      	bne.n	85088 <_vfiprintf_r+0x660>
   85080:	f016 0940 	ands.w	r9, r6, #64	; 0x40
   85084:	f040 831f 	bne.w	856c6 <_vfiprintf_r+0xc9e>
   85088:	9a04      	ldr	r2, [sp, #16]
   8508a:	2500      	movs	r5, #0
   8508c:	4613      	mov	r3, r2
   8508e:	6814      	ldr	r4, [r2, #0]
   85090:	9a01      	ldr	r2, [sp, #4]
   85092:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   85096:	2a00      	cmp	r2, #0
   85098:	f103 0304 	add.w	r3, r3, #4
   8509c:	f2c0 8327 	blt.w	856ee <_vfiprintf_r+0xcc6>
   850a0:	ea54 0205 	orrs.w	r2, r4, r5
   850a4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   850a8:	9304      	str	r3, [sp, #16]
   850aa:	f47f af22 	bne.w	84ef2 <_vfiprintf_r+0x4ca>
   850ae:	9b01      	ldr	r3, [sp, #4]
   850b0:	2b00      	cmp	r3, #0
   850b2:	f43f addb 	beq.w	84c6c <_vfiprintf_r+0x244>
   850b6:	2400      	movs	r4, #0
   850b8:	af2a      	add	r7, sp, #168	; 0xa8
   850ba:	3430      	adds	r4, #48	; 0x30
   850bc:	f807 4d41 	strb.w	r4, [r7, #-65]!
   850c0:	ebc7 030a 	rsb	r3, r7, sl
   850c4:	9303      	str	r3, [sp, #12]
   850c6:	e5d5      	b.n	84c74 <_vfiprintf_r+0x24c>
   850c8:	f046 0620 	orr.w	r6, r6, #32
   850cc:	f898 3000 	ldrb.w	r3, [r8]
   850d0:	e511      	b.n	84af6 <_vfiprintf_r+0xce>
   850d2:	9406      	str	r4, [sp, #24]
   850d4:	2900      	cmp	r1, #0
   850d6:	f040 8375 	bne.w	857c4 <_vfiprintf_r+0xd9c>
   850da:	f046 0610 	orr.w	r6, r6, #16
   850de:	f016 0920 	ands.w	r9, r6, #32
   850e2:	d0ca      	beq.n	8507a <_vfiprintf_r+0x652>
   850e4:	f04f 0200 	mov.w	r2, #0
   850e8:	9b04      	ldr	r3, [sp, #16]
   850ea:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   850ee:	3307      	adds	r3, #7
   850f0:	f023 0307 	bic.w	r3, r3, #7
   850f4:	f103 0208 	add.w	r2, r3, #8
   850f8:	e9d3 4500 	ldrd	r4, r5, [r3]
   850fc:	9b01      	ldr	r3, [sp, #4]
   850fe:	9204      	str	r2, [sp, #16]
   85100:	2b00      	cmp	r3, #0
   85102:	f2c0 81f9 	blt.w	854f8 <_vfiprintf_r+0xad0>
   85106:	ea54 0305 	orrs.w	r3, r4, r5
   8510a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8510e:	f04f 0900 	mov.w	r9, #0
   85112:	f47f aeee 	bne.w	84ef2 <_vfiprintf_r+0x4ca>
   85116:	e7ca      	b.n	850ae <_vfiprintf_r+0x686>
   85118:	9406      	str	r4, [sp, #24]
   8511a:	2900      	cmp	r1, #0
   8511c:	f040 8355 	bne.w	857ca <_vfiprintf_r+0xda2>
   85120:	06b2      	lsls	r2, r6, #26
   85122:	48b2      	ldr	r0, [pc, #712]	; (853ec <_vfiprintf_r+0x9c4>)
   85124:	d541      	bpl.n	851aa <_vfiprintf_r+0x782>
   85126:	9a04      	ldr	r2, [sp, #16]
   85128:	3207      	adds	r2, #7
   8512a:	f022 0207 	bic.w	r2, r2, #7
   8512e:	f102 0108 	add.w	r1, r2, #8
   85132:	9104      	str	r1, [sp, #16]
   85134:	e9d2 4500 	ldrd	r4, r5, [r2]
   85138:	f016 0901 	ands.w	r9, r6, #1
   8513c:	f000 817e 	beq.w	8543c <_vfiprintf_r+0xa14>
   85140:	ea54 0205 	orrs.w	r2, r4, r5
   85144:	f040 822b 	bne.w	8559e <_vfiprintf_r+0xb76>
   85148:	f04f 0300 	mov.w	r3, #0
   8514c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   85150:	9b01      	ldr	r3, [sp, #4]
   85152:	2b00      	cmp	r3, #0
   85154:	f2c0 82f3 	blt.w	8573e <_vfiprintf_r+0xd16>
   85158:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8515c:	e581      	b.n	84c62 <_vfiprintf_r+0x23a>
   8515e:	9a04      	ldr	r2, [sp, #16]
   85160:	f04f 0100 	mov.w	r1, #0
   85164:	6813      	ldr	r3, [r2, #0]
   85166:	2501      	movs	r5, #1
   85168:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   8516c:	4613      	mov	r3, r2
   8516e:	3304      	adds	r3, #4
   85170:	9406      	str	r4, [sp, #24]
   85172:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   85176:	9304      	str	r3, [sp, #16]
   85178:	9503      	str	r5, [sp, #12]
   8517a:	af10      	add	r7, sp, #64	; 0x40
   8517c:	2300      	movs	r3, #0
   8517e:	9301      	str	r3, [sp, #4]
   85180:	e582      	b.n	84c88 <_vfiprintf_r+0x260>
   85182:	f898 3000 	ldrb.w	r3, [r8]
   85186:	2800      	cmp	r0, #0
   85188:	f47f acb5 	bne.w	84af6 <_vfiprintf_r+0xce>
   8518c:	2101      	movs	r1, #1
   8518e:	2020      	movs	r0, #32
   85190:	e4b1      	b.n	84af6 <_vfiprintf_r+0xce>
   85192:	f046 0601 	orr.w	r6, r6, #1
   85196:	f898 3000 	ldrb.w	r3, [r8]
   8519a:	e4ac      	b.n	84af6 <_vfiprintf_r+0xce>
   8519c:	9406      	str	r4, [sp, #24]
   8519e:	2900      	cmp	r1, #0
   851a0:	f040 832a 	bne.w	857f8 <_vfiprintf_r+0xdd0>
   851a4:	06b2      	lsls	r2, r6, #26
   851a6:	4892      	ldr	r0, [pc, #584]	; (853f0 <_vfiprintf_r+0x9c8>)
   851a8:	d4bd      	bmi.n	85126 <_vfiprintf_r+0x6fe>
   851aa:	9904      	ldr	r1, [sp, #16]
   851ac:	06f7      	lsls	r7, r6, #27
   851ae:	460a      	mov	r2, r1
   851b0:	f100 819d 	bmi.w	854ee <_vfiprintf_r+0xac6>
   851b4:	0675      	lsls	r5, r6, #25
   851b6:	f140 819a 	bpl.w	854ee <_vfiprintf_r+0xac6>
   851ba:	3204      	adds	r2, #4
   851bc:	880c      	ldrh	r4, [r1, #0]
   851be:	9204      	str	r2, [sp, #16]
   851c0:	2500      	movs	r5, #0
   851c2:	e7b9      	b.n	85138 <_vfiprintf_r+0x710>
   851c4:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   851c8:	f898 3000 	ldrb.w	r3, [r8]
   851cc:	e493      	b.n	84af6 <_vfiprintf_r+0xce>
   851ce:	f898 3000 	ldrb.w	r3, [r8]
   851d2:	2b6c      	cmp	r3, #108	; 0x6c
   851d4:	bf03      	ittte	eq
   851d6:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   851da:	f046 0620 	orreq.w	r6, r6, #32
   851de:	f108 0801 	addeq.w	r8, r8, #1
   851e2:	f046 0610 	orrne.w	r6, r6, #16
   851e6:	e486      	b.n	84af6 <_vfiprintf_r+0xce>
   851e8:	2900      	cmp	r1, #0
   851ea:	f040 8302 	bne.w	857f2 <_vfiprintf_r+0xdca>
   851ee:	06b4      	lsls	r4, r6, #26
   851f0:	f140 8220 	bpl.w	85634 <_vfiprintf_r+0xc0c>
   851f4:	9a04      	ldr	r2, [sp, #16]
   851f6:	4613      	mov	r3, r2
   851f8:	3304      	adds	r3, #4
   851fa:	9304      	str	r3, [sp, #16]
   851fc:	9b02      	ldr	r3, [sp, #8]
   851fe:	6811      	ldr	r1, [r2, #0]
   85200:	17dd      	asrs	r5, r3, #31
   85202:	461a      	mov	r2, r3
   85204:	462b      	mov	r3, r5
   85206:	e9c1 2300 	strd	r2, r3, [r1]
   8520a:	e43e      	b.n	84a8a <_vfiprintf_r+0x62>
   8520c:	9406      	str	r4, [sp, #24]
   8520e:	2900      	cmp	r1, #0
   85210:	f43f ae51 	beq.w	84eb6 <_vfiprintf_r+0x48e>
   85214:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   85218:	e64d      	b.n	84eb6 <_vfiprintf_r+0x48e>
   8521a:	9406      	str	r4, [sp, #24]
   8521c:	2900      	cmp	r1, #0
   8521e:	f040 82e5 	bne.w	857ec <_vfiprintf_r+0xdc4>
   85222:	2b00      	cmp	r3, #0
   85224:	f000 8094 	beq.w	85350 <_vfiprintf_r+0x928>
   85228:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   8522c:	f04f 0300 	mov.w	r3, #0
   85230:	2501      	movs	r5, #1
   85232:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   85236:	9503      	str	r5, [sp, #12]
   85238:	af10      	add	r7, sp, #64	; 0x40
   8523a:	e79f      	b.n	8517c <_vfiprintf_r+0x754>
   8523c:	aa0d      	add	r2, sp, #52	; 0x34
   8523e:	9900      	ldr	r1, [sp, #0]
   85240:	4648      	mov	r0, r9
   85242:	9309      	str	r3, [sp, #36]	; 0x24
   85244:	f7ff fbb4 	bl	849b0 <__sprint_r.part.0>
   85248:	2800      	cmp	r0, #0
   8524a:	f040 8088 	bne.w	8535e <_vfiprintf_r+0x936>
   8524e:	980e      	ldr	r0, [sp, #56]	; 0x38
   85250:	46d4      	mov	ip, sl
   85252:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85254:	f100 0e01 	add.w	lr, r0, #1
   85258:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8525a:	e53a      	b.n	84cd2 <_vfiprintf_r+0x2aa>
   8525c:	aa0d      	add	r2, sp, #52	; 0x34
   8525e:	9900      	ldr	r1, [sp, #0]
   85260:	9805      	ldr	r0, [sp, #20]
   85262:	f7ff fba5 	bl	849b0 <__sprint_r.part.0>
   85266:	2800      	cmp	r0, #0
   85268:	d179      	bne.n	8535e <_vfiprintf_r+0x936>
   8526a:	46d3      	mov	fp, sl
   8526c:	980e      	ldr	r0, [sp, #56]	; 0x38
   8526e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   85272:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85274:	f100 0e01 	add.w	lr, r0, #1
   85278:	2b00      	cmp	r3, #0
   8527a:	f43f ad59 	beq.w	84d30 <_vfiprintf_r+0x308>
   8527e:	3201      	adds	r2, #1
   85280:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   85284:	2301      	movs	r3, #1
   85286:	f1be 0f07 	cmp.w	lr, #7
   8528a:	920f      	str	r2, [sp, #60]	; 0x3c
   8528c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   85290:	e88b 000a 	stmia.w	fp, {r1, r3}
   85294:	f340 80c0 	ble.w	85418 <_vfiprintf_r+0x9f0>
   85298:	2a00      	cmp	r2, #0
   8529a:	f040 814d 	bne.w	85538 <_vfiprintf_r+0xb10>
   8529e:	9907      	ldr	r1, [sp, #28]
   852a0:	2900      	cmp	r1, #0
   852a2:	f040 80bf 	bne.w	85424 <_vfiprintf_r+0x9fc>
   852a6:	469e      	mov	lr, r3
   852a8:	4610      	mov	r0, r2
   852aa:	46d3      	mov	fp, sl
   852ac:	9b08      	ldr	r3, [sp, #32]
   852ae:	2b80      	cmp	r3, #128	; 0x80
   852b0:	f43f ad59 	beq.w	84d66 <_vfiprintf_r+0x33e>
   852b4:	9b01      	ldr	r3, [sp, #4]
   852b6:	9903      	ldr	r1, [sp, #12]
   852b8:	1a5c      	subs	r4, r3, r1
   852ba:	2c00      	cmp	r4, #0
   852bc:	f77f ad9c 	ble.w	84df8 <_vfiprintf_r+0x3d0>
   852c0:	2c10      	cmp	r4, #16
   852c2:	f8df 9130 	ldr.w	r9, [pc, #304]	; 853f4 <_vfiprintf_r+0x9cc>
   852c6:	dd25      	ble.n	85314 <_vfiprintf_r+0x8ec>
   852c8:	46dc      	mov	ip, fp
   852ca:	2310      	movs	r3, #16
   852cc:	46c3      	mov	fp, r8
   852ce:	46a8      	mov	r8, r5
   852d0:	464d      	mov	r5, r9
   852d2:	f8dd 9014 	ldr.w	r9, [sp, #20]
   852d6:	e007      	b.n	852e8 <_vfiprintf_r+0x8c0>
   852d8:	f100 0e02 	add.w	lr, r0, #2
   852dc:	4608      	mov	r0, r1
   852de:	f10c 0c08 	add.w	ip, ip, #8
   852e2:	3c10      	subs	r4, #16
   852e4:	2c10      	cmp	r4, #16
   852e6:	dd11      	ble.n	8530c <_vfiprintf_r+0x8e4>
   852e8:	1c41      	adds	r1, r0, #1
   852ea:	3210      	adds	r2, #16
   852ec:	2907      	cmp	r1, #7
   852ee:	920f      	str	r2, [sp, #60]	; 0x3c
   852f0:	f8cc 5000 	str.w	r5, [ip]
   852f4:	f8cc 3004 	str.w	r3, [ip, #4]
   852f8:	910e      	str	r1, [sp, #56]	; 0x38
   852fa:	dded      	ble.n	852d8 <_vfiprintf_r+0x8b0>
   852fc:	b9d2      	cbnz	r2, 85334 <_vfiprintf_r+0x90c>
   852fe:	3c10      	subs	r4, #16
   85300:	2c10      	cmp	r4, #16
   85302:	f04f 0e01 	mov.w	lr, #1
   85306:	4610      	mov	r0, r2
   85308:	46d4      	mov	ip, sl
   8530a:	dced      	bgt.n	852e8 <_vfiprintf_r+0x8c0>
   8530c:	46a9      	mov	r9, r5
   8530e:	4645      	mov	r5, r8
   85310:	46d8      	mov	r8, fp
   85312:	46e3      	mov	fp, ip
   85314:	4422      	add	r2, r4
   85316:	f1be 0f07 	cmp.w	lr, #7
   8531a:	920f      	str	r2, [sp, #60]	; 0x3c
   8531c:	f8cb 9000 	str.w	r9, [fp]
   85320:	f8cb 4004 	str.w	r4, [fp, #4]
   85324:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   85328:	dc2e      	bgt.n	85388 <_vfiprintf_r+0x960>
   8532a:	f10b 0b08 	add.w	fp, fp, #8
   8532e:	f10e 0e01 	add.w	lr, lr, #1
   85332:	e561      	b.n	84df8 <_vfiprintf_r+0x3d0>
   85334:	aa0d      	add	r2, sp, #52	; 0x34
   85336:	9900      	ldr	r1, [sp, #0]
   85338:	4648      	mov	r0, r9
   8533a:	9301      	str	r3, [sp, #4]
   8533c:	f7ff fb38 	bl	849b0 <__sprint_r.part.0>
   85340:	b968      	cbnz	r0, 8535e <_vfiprintf_r+0x936>
   85342:	980e      	ldr	r0, [sp, #56]	; 0x38
   85344:	46d4      	mov	ip, sl
   85346:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85348:	f100 0e01 	add.w	lr, r0, #1
   8534c:	9b01      	ldr	r3, [sp, #4]
   8534e:	e7c8      	b.n	852e2 <_vfiprintf_r+0x8ba>
   85350:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85352:	b123      	cbz	r3, 8535e <_vfiprintf_r+0x936>
   85354:	9805      	ldr	r0, [sp, #20]
   85356:	aa0d      	add	r2, sp, #52	; 0x34
   85358:	9900      	ldr	r1, [sp, #0]
   8535a:	f7ff fb29 	bl	849b0 <__sprint_r.part.0>
   8535e:	9b00      	ldr	r3, [sp, #0]
   85360:	899b      	ldrh	r3, [r3, #12]
   85362:	065a      	lsls	r2, r3, #25
   85364:	f100 817b 	bmi.w	8565e <_vfiprintf_r+0xc36>
   85368:	9802      	ldr	r0, [sp, #8]
   8536a:	b02b      	add	sp, #172	; 0xac
   8536c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85370:	aa0d      	add	r2, sp, #52	; 0x34
   85372:	9900      	ldr	r1, [sp, #0]
   85374:	4648      	mov	r0, r9
   85376:	f7ff fb1b 	bl	849b0 <__sprint_r.part.0>
   8537a:	2800      	cmp	r0, #0
   8537c:	d1ef      	bne.n	8535e <_vfiprintf_r+0x936>
   8537e:	990e      	ldr	r1, [sp, #56]	; 0x38
   85380:	46d3      	mov	fp, sl
   85382:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85384:	1c48      	adds	r0, r1, #1
   85386:	e55e      	b.n	84e46 <_vfiprintf_r+0x41e>
   85388:	2a00      	cmp	r2, #0
   8538a:	f040 80fa 	bne.w	85582 <_vfiprintf_r+0xb5a>
   8538e:	46d3      	mov	fp, sl
   85390:	9a03      	ldr	r2, [sp, #12]
   85392:	2301      	movs	r3, #1
   85394:	921b      	str	r2, [sp, #108]	; 0x6c
   85396:	920f      	str	r2, [sp, #60]	; 0x3c
   85398:	971a      	str	r7, [sp, #104]	; 0x68
   8539a:	930e      	str	r3, [sp, #56]	; 0x38
   8539c:	f10b 0b08 	add.w	fp, fp, #8
   853a0:	0771      	lsls	r1, r6, #29
   853a2:	d504      	bpl.n	853ae <_vfiprintf_r+0x986>
   853a4:	9b06      	ldr	r3, [sp, #24]
   853a6:	1b5c      	subs	r4, r3, r5
   853a8:	2c00      	cmp	r4, #0
   853aa:	f73f ad3d 	bgt.w	84e28 <_vfiprintf_r+0x400>
   853ae:	9b02      	ldr	r3, [sp, #8]
   853b0:	9906      	ldr	r1, [sp, #24]
   853b2:	42a9      	cmp	r1, r5
   853b4:	bfac      	ite	ge
   853b6:	185b      	addge	r3, r3, r1
   853b8:	195b      	addlt	r3, r3, r5
   853ba:	9302      	str	r3, [sp, #8]
   853bc:	2a00      	cmp	r2, #0
   853be:	f040 80ad 	bne.w	8551c <_vfiprintf_r+0xaf4>
   853c2:	2300      	movs	r3, #0
   853c4:	930e      	str	r3, [sp, #56]	; 0x38
   853c6:	46d3      	mov	fp, sl
   853c8:	f7ff bb5f 	b.w	84a8a <_vfiprintf_r+0x62>
   853cc:	aa0d      	add	r2, sp, #52	; 0x34
   853ce:	9900      	ldr	r1, [sp, #0]
   853d0:	4648      	mov	r0, r9
   853d2:	9307      	str	r3, [sp, #28]
   853d4:	f7ff faec 	bl	849b0 <__sprint_r.part.0>
   853d8:	2800      	cmp	r0, #0
   853da:	d1c0      	bne.n	8535e <_vfiprintf_r+0x936>
   853dc:	980e      	ldr	r0, [sp, #56]	; 0x38
   853de:	46d6      	mov	lr, sl
   853e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   853e2:	f100 0c01 	add.w	ip, r0, #1
   853e6:	9b07      	ldr	r3, [sp, #28]
   853e8:	e4d4      	b.n	84d94 <_vfiprintf_r+0x36c>
   853ea:	bf00      	nop
   853ec:	000876e8 	.word	0x000876e8
   853f0:	000876fc 	.word	0x000876fc
   853f4:	000876d8 	.word	0x000876d8
   853f8:	2a00      	cmp	r2, #0
   853fa:	f47f af2f 	bne.w	8525c <_vfiprintf_r+0x834>
   853fe:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   85402:	2b00      	cmp	r3, #0
   85404:	f000 80f3 	beq.w	855ee <_vfiprintf_r+0xbc6>
   85408:	2301      	movs	r3, #1
   8540a:	461a      	mov	r2, r3
   8540c:	469e      	mov	lr, r3
   8540e:	46d3      	mov	fp, sl
   85410:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   85414:	931b      	str	r3, [sp, #108]	; 0x6c
   85416:	911a      	str	r1, [sp, #104]	; 0x68
   85418:	4670      	mov	r0, lr
   8541a:	f10b 0b08 	add.w	fp, fp, #8
   8541e:	f10e 0e01 	add.w	lr, lr, #1
   85422:	e485      	b.n	84d30 <_vfiprintf_r+0x308>
   85424:	469e      	mov	lr, r3
   85426:	46d3      	mov	fp, sl
   85428:	a90c      	add	r1, sp, #48	; 0x30
   8542a:	2202      	movs	r2, #2
   8542c:	911a      	str	r1, [sp, #104]	; 0x68
   8542e:	921b      	str	r2, [sp, #108]	; 0x6c
   85430:	4670      	mov	r0, lr
   85432:	f10b 0b08 	add.w	fp, fp, #8
   85436:	f10e 0e01 	add.w	lr, lr, #1
   8543a:	e737      	b.n	852ac <_vfiprintf_r+0x884>
   8543c:	9b01      	ldr	r3, [sp, #4]
   8543e:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   85442:	2b00      	cmp	r3, #0
   85444:	f2c0 811b 	blt.w	8567e <_vfiprintf_r+0xc56>
   85448:	ea54 0305 	orrs.w	r3, r4, r5
   8544c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   85450:	f43f ac07 	beq.w	84c62 <_vfiprintf_r+0x23a>
   85454:	4657      	mov	r7, sl
   85456:	0923      	lsrs	r3, r4, #4
   85458:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   8545c:	0929      	lsrs	r1, r5, #4
   8545e:	f004 020f 	and.w	r2, r4, #15
   85462:	460d      	mov	r5, r1
   85464:	461c      	mov	r4, r3
   85466:	5c83      	ldrb	r3, [r0, r2]
   85468:	f807 3d01 	strb.w	r3, [r7, #-1]!
   8546c:	ea54 0305 	orrs.w	r3, r4, r5
   85470:	d1f1      	bne.n	85456 <_vfiprintf_r+0xa2e>
   85472:	ebc7 030a 	rsb	r3, r7, sl
   85476:	9303      	str	r3, [sp, #12]
   85478:	f7ff bbfc 	b.w	84c74 <_vfiprintf_r+0x24c>
   8547c:	aa0d      	add	r2, sp, #52	; 0x34
   8547e:	9900      	ldr	r1, [sp, #0]
   85480:	9805      	ldr	r0, [sp, #20]
   85482:	f7ff fa95 	bl	849b0 <__sprint_r.part.0>
   85486:	2800      	cmp	r0, #0
   85488:	f47f af69 	bne.w	8535e <_vfiprintf_r+0x936>
   8548c:	46d3      	mov	fp, sl
   8548e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85490:	e786      	b.n	853a0 <_vfiprintf_r+0x978>
   85492:	f016 0210 	ands.w	r2, r6, #16
   85496:	f000 80b5 	beq.w	85604 <_vfiprintf_r+0xbdc>
   8549a:	9904      	ldr	r1, [sp, #16]
   8549c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   854a0:	460a      	mov	r2, r1
   854a2:	680c      	ldr	r4, [r1, #0]
   854a4:	9901      	ldr	r1, [sp, #4]
   854a6:	3204      	adds	r2, #4
   854a8:	2900      	cmp	r1, #0
   854aa:	f04f 0500 	mov.w	r5, #0
   854ae:	f2c0 8152 	blt.w	85756 <_vfiprintf_r+0xd2e>
   854b2:	ea54 0105 	orrs.w	r1, r4, r5
   854b6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   854ba:	9204      	str	r2, [sp, #16]
   854bc:	f43f ad5d 	beq.w	84f7a <_vfiprintf_r+0x552>
   854c0:	4699      	mov	r9, r3
   854c2:	e562      	b.n	84f8a <_vfiprintf_r+0x562>
   854c4:	9a04      	ldr	r2, [sp, #16]
   854c6:	06f7      	lsls	r7, r6, #27
   854c8:	4613      	mov	r3, r2
   854ca:	d409      	bmi.n	854e0 <_vfiprintf_r+0xab8>
   854cc:	0675      	lsls	r5, r6, #25
   854ce:	d507      	bpl.n	854e0 <_vfiprintf_r+0xab8>
   854d0:	f9b2 4000 	ldrsh.w	r4, [r2]
   854d4:	3304      	adds	r3, #4
   854d6:	17e5      	asrs	r5, r4, #31
   854d8:	9304      	str	r3, [sp, #16]
   854da:	4622      	mov	r2, r4
   854dc:	462b      	mov	r3, r5
   854de:	e4f7      	b.n	84ed0 <_vfiprintf_r+0x4a8>
   854e0:	681c      	ldr	r4, [r3, #0]
   854e2:	3304      	adds	r3, #4
   854e4:	17e5      	asrs	r5, r4, #31
   854e6:	9304      	str	r3, [sp, #16]
   854e8:	4622      	mov	r2, r4
   854ea:	462b      	mov	r3, r5
   854ec:	e4f0      	b.n	84ed0 <_vfiprintf_r+0x4a8>
   854ee:	6814      	ldr	r4, [r2, #0]
   854f0:	3204      	adds	r2, #4
   854f2:	9204      	str	r2, [sp, #16]
   854f4:	2500      	movs	r5, #0
   854f6:	e61f      	b.n	85138 <_vfiprintf_r+0x710>
   854f8:	f04f 0900 	mov.w	r9, #0
   854fc:	ea54 0305 	orrs.w	r3, r4, r5
   85500:	f47f acf7 	bne.w	84ef2 <_vfiprintf_r+0x4ca>
   85504:	e5d8      	b.n	850b8 <_vfiprintf_r+0x690>
   85506:	aa0d      	add	r2, sp, #52	; 0x34
   85508:	9900      	ldr	r1, [sp, #0]
   8550a:	9805      	ldr	r0, [sp, #20]
   8550c:	f7ff fa50 	bl	849b0 <__sprint_r.part.0>
   85510:	2800      	cmp	r0, #0
   85512:	f47f af24 	bne.w	8535e <_vfiprintf_r+0x936>
   85516:	46d3      	mov	fp, sl
   85518:	f7ff bb51 	b.w	84bbe <_vfiprintf_r+0x196>
   8551c:	aa0d      	add	r2, sp, #52	; 0x34
   8551e:	9900      	ldr	r1, [sp, #0]
   85520:	9805      	ldr	r0, [sp, #20]
   85522:	f7ff fa45 	bl	849b0 <__sprint_r.part.0>
   85526:	2800      	cmp	r0, #0
   85528:	f43f af4b 	beq.w	853c2 <_vfiprintf_r+0x99a>
   8552c:	e717      	b.n	8535e <_vfiprintf_r+0x936>
   8552e:	2400      	movs	r4, #0
   85530:	2500      	movs	r5, #0
   85532:	f04f 0900 	mov.w	r9, #0
   85536:	e78d      	b.n	85454 <_vfiprintf_r+0xa2c>
   85538:	aa0d      	add	r2, sp, #52	; 0x34
   8553a:	9900      	ldr	r1, [sp, #0]
   8553c:	9805      	ldr	r0, [sp, #20]
   8553e:	f7ff fa37 	bl	849b0 <__sprint_r.part.0>
   85542:	2800      	cmp	r0, #0
   85544:	f47f af0b 	bne.w	8535e <_vfiprintf_r+0x936>
   85548:	980e      	ldr	r0, [sp, #56]	; 0x38
   8554a:	46d3      	mov	fp, sl
   8554c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8554e:	f100 0e01 	add.w	lr, r0, #1
   85552:	f7ff bbed 	b.w	84d30 <_vfiprintf_r+0x308>
   85556:	aa0d      	add	r2, sp, #52	; 0x34
   85558:	9900      	ldr	r1, [sp, #0]
   8555a:	9805      	ldr	r0, [sp, #20]
   8555c:	f7ff fa28 	bl	849b0 <__sprint_r.part.0>
   85560:	2800      	cmp	r0, #0
   85562:	f47f aefc 	bne.w	8535e <_vfiprintf_r+0x936>
   85566:	980e      	ldr	r0, [sp, #56]	; 0x38
   85568:	46d3      	mov	fp, sl
   8556a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8556c:	f100 0e01 	add.w	lr, r0, #1
   85570:	e69c      	b.n	852ac <_vfiprintf_r+0x884>
   85572:	2a00      	cmp	r2, #0
   85574:	f040 80c8 	bne.w	85708 <_vfiprintf_r+0xce0>
   85578:	f04f 0e01 	mov.w	lr, #1
   8557c:	4610      	mov	r0, r2
   8557e:	46d3      	mov	fp, sl
   85580:	e698      	b.n	852b4 <_vfiprintf_r+0x88c>
   85582:	aa0d      	add	r2, sp, #52	; 0x34
   85584:	9900      	ldr	r1, [sp, #0]
   85586:	9805      	ldr	r0, [sp, #20]
   85588:	f7ff fa12 	bl	849b0 <__sprint_r.part.0>
   8558c:	2800      	cmp	r0, #0
   8558e:	f47f aee6 	bne.w	8535e <_vfiprintf_r+0x936>
   85592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85594:	46d3      	mov	fp, sl
   85596:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85598:	f103 0e01 	add.w	lr, r3, #1
   8559c:	e42c      	b.n	84df8 <_vfiprintf_r+0x3d0>
   8559e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   855a2:	f04f 0300 	mov.w	r3, #0
   855a6:	2230      	movs	r2, #48	; 0x30
   855a8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   855ac:	9a01      	ldr	r2, [sp, #4]
   855ae:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   855b2:	2a00      	cmp	r2, #0
   855b4:	f046 0302 	orr.w	r3, r6, #2
   855b8:	f2c0 80bb 	blt.w	85732 <_vfiprintf_r+0xd0a>
   855bc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   855c0:	f046 0602 	orr.w	r6, r6, #2
   855c4:	f04f 0900 	mov.w	r9, #0
   855c8:	e744      	b.n	85454 <_vfiprintf_r+0xa2c>
   855ca:	f04f 0900 	mov.w	r9, #0
   855ce:	488c      	ldr	r0, [pc, #560]	; (85800 <_vfiprintf_r+0xdd8>)
   855d0:	e740      	b.n	85454 <_vfiprintf_r+0xa2c>
   855d2:	9b01      	ldr	r3, [sp, #4]
   855d4:	4264      	negs	r4, r4
   855d6:	f04f 092d 	mov.w	r9, #45	; 0x2d
   855da:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   855de:	2b00      	cmp	r3, #0
   855e0:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   855e4:	f6ff ac85 	blt.w	84ef2 <_vfiprintf_r+0x4ca>
   855e8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   855ec:	e481      	b.n	84ef2 <_vfiprintf_r+0x4ca>
   855ee:	9b07      	ldr	r3, [sp, #28]
   855f0:	2b00      	cmp	r3, #0
   855f2:	d063      	beq.n	856bc <_vfiprintf_r+0xc94>
   855f4:	ab0c      	add	r3, sp, #48	; 0x30
   855f6:	2202      	movs	r2, #2
   855f8:	931a      	str	r3, [sp, #104]	; 0x68
   855fa:	921b      	str	r2, [sp, #108]	; 0x6c
   855fc:	f04f 0e01 	mov.w	lr, #1
   85600:	46d3      	mov	fp, sl
   85602:	e715      	b.n	85430 <_vfiprintf_r+0xa08>
   85604:	f016 0940 	ands.w	r9, r6, #64	; 0x40
   85608:	d03b      	beq.n	85682 <_vfiprintf_r+0xc5a>
   8560a:	9904      	ldr	r1, [sp, #16]
   8560c:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   85610:	460b      	mov	r3, r1
   85612:	880c      	ldrh	r4, [r1, #0]
   85614:	9901      	ldr	r1, [sp, #4]
   85616:	3304      	adds	r3, #4
   85618:	2900      	cmp	r1, #0
   8561a:	f04f 0500 	mov.w	r5, #0
   8561e:	f2c0 808c 	blt.w	8573a <_vfiprintf_r+0xd12>
   85622:	ea54 0105 	orrs.w	r1, r4, r5
   85626:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8562a:	9304      	str	r3, [sp, #16]
   8562c:	f43f aca5 	beq.w	84f7a <_vfiprintf_r+0x552>
   85630:	4691      	mov	r9, r2
   85632:	e4aa      	b.n	84f8a <_vfiprintf_r+0x562>
   85634:	06f0      	lsls	r0, r6, #27
   85636:	d40a      	bmi.n	8564e <_vfiprintf_r+0xc26>
   85638:	0671      	lsls	r1, r6, #25
   8563a:	d508      	bpl.n	8564e <_vfiprintf_r+0xc26>
   8563c:	9a04      	ldr	r2, [sp, #16]
   8563e:	6813      	ldr	r3, [r2, #0]
   85640:	3204      	adds	r2, #4
   85642:	9204      	str	r2, [sp, #16]
   85644:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   85648:	801a      	strh	r2, [r3, #0]
   8564a:	f7ff ba1e 	b.w	84a8a <_vfiprintf_r+0x62>
   8564e:	9a04      	ldr	r2, [sp, #16]
   85650:	6813      	ldr	r3, [r2, #0]
   85652:	3204      	adds	r2, #4
   85654:	9204      	str	r2, [sp, #16]
   85656:	9a02      	ldr	r2, [sp, #8]
   85658:	601a      	str	r2, [r3, #0]
   8565a:	f7ff ba16 	b.w	84a8a <_vfiprintf_r+0x62>
   8565e:	f04f 30ff 	mov.w	r0, #4294967295
   85662:	f7ff bac9 	b.w	84bf8 <_vfiprintf_r+0x1d0>
   85666:	4616      	mov	r6, r2
   85668:	4865      	ldr	r0, [pc, #404]	; (85800 <_vfiprintf_r+0xdd8>)
   8566a:	ea54 0205 	orrs.w	r2, r4, r5
   8566e:	9304      	str	r3, [sp, #16]
   85670:	f04f 0900 	mov.w	r9, #0
   85674:	f47f aeee 	bne.w	85454 <_vfiprintf_r+0xa2c>
   85678:	2400      	movs	r4, #0
   8567a:	2500      	movs	r5, #0
   8567c:	e6ea      	b.n	85454 <_vfiprintf_r+0xa2c>
   8567e:	9b04      	ldr	r3, [sp, #16]
   85680:	e7f3      	b.n	8566a <_vfiprintf_r+0xc42>
   85682:	9a04      	ldr	r2, [sp, #16]
   85684:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   85688:	4613      	mov	r3, r2
   8568a:	6814      	ldr	r4, [r2, #0]
   8568c:	9a01      	ldr	r2, [sp, #4]
   8568e:	3304      	adds	r3, #4
   85690:	2a00      	cmp	r2, #0
   85692:	f04f 0500 	mov.w	r5, #0
   85696:	db50      	blt.n	8573a <_vfiprintf_r+0xd12>
   85698:	ea54 0205 	orrs.w	r2, r4, r5
   8569c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   856a0:	9304      	str	r3, [sp, #16]
   856a2:	f47f ac72 	bne.w	84f8a <_vfiprintf_r+0x562>
   856a6:	e468      	b.n	84f7a <_vfiprintf_r+0x552>
   856a8:	aa0d      	add	r2, sp, #52	; 0x34
   856aa:	9900      	ldr	r1, [sp, #0]
   856ac:	9805      	ldr	r0, [sp, #20]
   856ae:	f7ff f97f 	bl	849b0 <__sprint_r.part.0>
   856b2:	2800      	cmp	r0, #0
   856b4:	f47f ae53 	bne.w	8535e <_vfiprintf_r+0x936>
   856b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   856ba:	e678      	b.n	853ae <_vfiprintf_r+0x986>
   856bc:	4610      	mov	r0, r2
   856be:	f04f 0e01 	mov.w	lr, #1
   856c2:	46d3      	mov	fp, sl
   856c4:	e5f6      	b.n	852b4 <_vfiprintf_r+0x88c>
   856c6:	9904      	ldr	r1, [sp, #16]
   856c8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   856cc:	460a      	mov	r2, r1
   856ce:	880c      	ldrh	r4, [r1, #0]
   856d0:	9901      	ldr	r1, [sp, #4]
   856d2:	3204      	adds	r2, #4
   856d4:	2900      	cmp	r1, #0
   856d6:	f04f 0500 	mov.w	r5, #0
   856da:	db55      	blt.n	85788 <_vfiprintf_r+0xd60>
   856dc:	ea54 0105 	orrs.w	r1, r4, r5
   856e0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   856e4:	9204      	str	r2, [sp, #16]
   856e6:	4699      	mov	r9, r3
   856e8:	f47f ac03 	bne.w	84ef2 <_vfiprintf_r+0x4ca>
   856ec:	e4df      	b.n	850ae <_vfiprintf_r+0x686>
   856ee:	9304      	str	r3, [sp, #16]
   856f0:	e704      	b.n	854fc <_vfiprintf_r+0xad4>
   856f2:	4638      	mov	r0, r7
   856f4:	9404      	str	r4, [sp, #16]
   856f6:	f7ff f92d 	bl	84954 <strlen>
   856fa:	2300      	movs	r3, #0
   856fc:	9003      	str	r0, [sp, #12]
   856fe:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   85702:	9301      	str	r3, [sp, #4]
   85704:	f7ff bab6 	b.w	84c74 <_vfiprintf_r+0x24c>
   85708:	aa0d      	add	r2, sp, #52	; 0x34
   8570a:	9900      	ldr	r1, [sp, #0]
   8570c:	9805      	ldr	r0, [sp, #20]
   8570e:	f7ff f94f 	bl	849b0 <__sprint_r.part.0>
   85712:	2800      	cmp	r0, #0
   85714:	f47f ae23 	bne.w	8535e <_vfiprintf_r+0x936>
   85718:	980e      	ldr	r0, [sp, #56]	; 0x38
   8571a:	46d3      	mov	fp, sl
   8571c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8571e:	f100 0e01 	add.w	lr, r0, #1
   85722:	e5c7      	b.n	852b4 <_vfiprintf_r+0x88c>
   85724:	980e      	ldr	r0, [sp, #56]	; 0x38
   85726:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85728:	3001      	adds	r0, #1
   8572a:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 85808 <_vfiprintf_r+0xde0>
   8572e:	f7ff baec 	b.w	84d0a <_vfiprintf_r+0x2e2>
   85732:	461e      	mov	r6, r3
   85734:	f04f 0900 	mov.w	r9, #0
   85738:	e68c      	b.n	85454 <_vfiprintf_r+0xa2c>
   8573a:	9304      	str	r3, [sp, #16]
   8573c:	e423      	b.n	84f86 <_vfiprintf_r+0x55e>
   8573e:	f04f 0900 	mov.w	r9, #0
   85742:	e799      	b.n	85678 <_vfiprintf_r+0xc50>
   85744:	2b06      	cmp	r3, #6
   85746:	bf28      	it	cs
   85748:	2306      	movcs	r3, #6
   8574a:	9303      	str	r3, [sp, #12]
   8574c:	9404      	str	r4, [sp, #16]
   8574e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
   85752:	4f2c      	ldr	r7, [pc, #176]	; (85804 <_vfiprintf_r+0xddc>)
   85754:	e512      	b.n	8517c <_vfiprintf_r+0x754>
   85756:	9204      	str	r2, [sp, #16]
   85758:	e415      	b.n	84f86 <_vfiprintf_r+0x55e>
   8575a:	980e      	ldr	r0, [sp, #56]	; 0x38
   8575c:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 85808 <_vfiprintf_r+0xde0>
   85760:	3001      	adds	r0, #1
   85762:	f7ff bb88 	b.w	84e76 <_vfiprintf_r+0x44e>
   85766:	46f4      	mov	ip, lr
   85768:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8580c <_vfiprintf_r+0xde4>
   8576c:	f7ff bb2d 	b.w	84dca <_vfiprintf_r+0x3a2>
   85770:	2200      	movs	r2, #0
   85772:	9201      	str	r2, [sp, #4]
   85774:	f7ff b9c1 	b.w	84afa <_vfiprintf_r+0xd2>
   85778:	9b01      	ldr	r3, [sp, #4]
   8577a:	9404      	str	r4, [sp, #16]
   8577c:	9303      	str	r3, [sp, #12]
   8577e:	9001      	str	r0, [sp, #4]
   85780:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   85784:	f7ff ba76 	b.w	84c74 <_vfiprintf_r+0x24c>
   85788:	9204      	str	r2, [sp, #16]
   8578a:	4699      	mov	r9, r3
   8578c:	e6b6      	b.n	854fc <_vfiprintf_r+0xad4>
   8578e:	9a04      	ldr	r2, [sp, #16]
   85790:	6813      	ldr	r3, [r2, #0]
   85792:	3204      	adds	r2, #4
   85794:	2b00      	cmp	r3, #0
   85796:	9301      	str	r3, [sp, #4]
   85798:	9204      	str	r2, [sp, #16]
   8579a:	f898 3001 	ldrb.w	r3, [r8, #1]
   8579e:	46a8      	mov	r8, r5
   857a0:	f6bf a9a9 	bge.w	84af6 <_vfiprintf_r+0xce>
   857a4:	f04f 32ff 	mov.w	r2, #4294967295
   857a8:	9201      	str	r2, [sp, #4]
   857aa:	f7ff b9a4 	b.w	84af6 <_vfiprintf_r+0xce>
   857ae:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   857b2:	e45f      	b.n	85074 <_vfiprintf_r+0x64c>
   857b4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   857b8:	f7ff bbc4 	b.w	84f44 <_vfiprintf_r+0x51c>
   857bc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   857c0:	f7ff bb77 	b.w	84eb2 <_vfiprintf_r+0x48a>
   857c4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   857c8:	e487      	b.n	850da <_vfiprintf_r+0x6b2>
   857ca:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   857ce:	e4a7      	b.n	85120 <_vfiprintf_r+0x6f8>
   857d0:	4699      	mov	r9, r3
   857d2:	07f3      	lsls	r3, r6, #31
   857d4:	d505      	bpl.n	857e2 <_vfiprintf_r+0xdba>
   857d6:	af2a      	add	r7, sp, #168	; 0xa8
   857d8:	2330      	movs	r3, #48	; 0x30
   857da:	f807 3d41 	strb.w	r3, [r7, #-65]!
   857de:	f7ff bba2 	b.w	84f26 <_vfiprintf_r+0x4fe>
   857e2:	9b01      	ldr	r3, [sp, #4]
   857e4:	4657      	mov	r7, sl
   857e6:	9303      	str	r3, [sp, #12]
   857e8:	f7ff ba44 	b.w	84c74 <_vfiprintf_r+0x24c>
   857ec:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   857f0:	e517      	b.n	85222 <_vfiprintf_r+0x7fa>
   857f2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   857f6:	e4fa      	b.n	851ee <_vfiprintf_r+0x7c6>
   857f8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   857fc:	e4d2      	b.n	851a4 <_vfiprintf_r+0x77c>
   857fe:	bf00      	nop
   85800:	000876fc 	.word	0x000876fc
   85804:	00087710 	.word	0x00087710
   85808:	00087718 	.word	0x00087718
   8580c:	000876d8 	.word	0x000876d8

00085810 <__sbprintf>:
   85810:	b5f0      	push	{r4, r5, r6, r7, lr}
   85812:	460c      	mov	r4, r1
   85814:	8989      	ldrh	r1, [r1, #12]
   85816:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   8581a:	6e65      	ldr	r5, [r4, #100]	; 0x64
   8581c:	f021 0102 	bic.w	r1, r1, #2
   85820:	6a66      	ldr	r6, [r4, #36]	; 0x24
   85822:	f8ad 100c 	strh.w	r1, [sp, #12]
   85826:	69e1      	ldr	r1, [r4, #28]
   85828:	89e7      	ldrh	r7, [r4, #14]
   8582a:	9519      	str	r5, [sp, #100]	; 0x64
   8582c:	2500      	movs	r5, #0
   8582e:	9107      	str	r1, [sp, #28]
   85830:	9609      	str	r6, [sp, #36]	; 0x24
   85832:	9506      	str	r5, [sp, #24]
   85834:	ae1a      	add	r6, sp, #104	; 0x68
   85836:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8583a:	4669      	mov	r1, sp
   8583c:	9600      	str	r6, [sp, #0]
   8583e:	9604      	str	r6, [sp, #16]
   85840:	9502      	str	r5, [sp, #8]
   85842:	9505      	str	r5, [sp, #20]
   85844:	f8ad 700e 	strh.w	r7, [sp, #14]
   85848:	4606      	mov	r6, r0
   8584a:	f7ff f8ed 	bl	84a28 <_vfiprintf_r>
   8584e:	1e05      	subs	r5, r0, #0
   85850:	db07      	blt.n	85862 <__sbprintf+0x52>
   85852:	4630      	mov	r0, r6
   85854:	4669      	mov	r1, sp
   85856:	f000 f929 	bl	85aac <_fflush_r>
   8585a:	2800      	cmp	r0, #0
   8585c:	bf18      	it	ne
   8585e:	f04f 35ff 	movne.w	r5, #4294967295
   85862:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   85866:	065b      	lsls	r3, r3, #25
   85868:	d503      	bpl.n	85872 <__sbprintf+0x62>
   8586a:	89a3      	ldrh	r3, [r4, #12]
   8586c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85870:	81a3      	strh	r3, [r4, #12]
   85872:	4628      	mov	r0, r5
   85874:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   85878:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8587a:	bf00      	nop

0008587c <__swsetup_r>:
   8587c:	b538      	push	{r3, r4, r5, lr}
   8587e:	4b30      	ldr	r3, [pc, #192]	; (85940 <__swsetup_r+0xc4>)
   85880:	4605      	mov	r5, r0
   85882:	6818      	ldr	r0, [r3, #0]
   85884:	460c      	mov	r4, r1
   85886:	b110      	cbz	r0, 8588e <__swsetup_r+0x12>
   85888:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8588a:	2b00      	cmp	r3, #0
   8588c:	d038      	beq.n	85900 <__swsetup_r+0x84>
   8588e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   85892:	b293      	uxth	r3, r2
   85894:	0718      	lsls	r0, r3, #28
   85896:	d50c      	bpl.n	858b2 <__swsetup_r+0x36>
   85898:	6920      	ldr	r0, [r4, #16]
   8589a:	b1a8      	cbz	r0, 858c8 <__swsetup_r+0x4c>
   8589c:	f013 0201 	ands.w	r2, r3, #1
   858a0:	d01e      	beq.n	858e0 <__swsetup_r+0x64>
   858a2:	6963      	ldr	r3, [r4, #20]
   858a4:	2200      	movs	r2, #0
   858a6:	425b      	negs	r3, r3
   858a8:	61a3      	str	r3, [r4, #24]
   858aa:	60a2      	str	r2, [r4, #8]
   858ac:	b1f0      	cbz	r0, 858ec <__swsetup_r+0x70>
   858ae:	2000      	movs	r0, #0
   858b0:	bd38      	pop	{r3, r4, r5, pc}
   858b2:	06d9      	lsls	r1, r3, #27
   858b4:	d53b      	bpl.n	8592e <__swsetup_r+0xb2>
   858b6:	0758      	lsls	r0, r3, #29
   858b8:	d425      	bmi.n	85906 <__swsetup_r+0x8a>
   858ba:	6920      	ldr	r0, [r4, #16]
   858bc:	f042 0308 	orr.w	r3, r2, #8
   858c0:	81a3      	strh	r3, [r4, #12]
   858c2:	b29b      	uxth	r3, r3
   858c4:	2800      	cmp	r0, #0
   858c6:	d1e9      	bne.n	8589c <__swsetup_r+0x20>
   858c8:	f403 7220 	and.w	r2, r3, #640	; 0x280
   858cc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   858d0:	d0e4      	beq.n	8589c <__swsetup_r+0x20>
   858d2:	4628      	mov	r0, r5
   858d4:	4621      	mov	r1, r4
   858d6:	f000 fd13 	bl	86300 <__smakebuf_r>
   858da:	89a3      	ldrh	r3, [r4, #12]
   858dc:	6920      	ldr	r0, [r4, #16]
   858de:	e7dd      	b.n	8589c <__swsetup_r+0x20>
   858e0:	0799      	lsls	r1, r3, #30
   858e2:	bf58      	it	pl
   858e4:	6962      	ldrpl	r2, [r4, #20]
   858e6:	60a2      	str	r2, [r4, #8]
   858e8:	2800      	cmp	r0, #0
   858ea:	d1e0      	bne.n	858ae <__swsetup_r+0x32>
   858ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   858f0:	061a      	lsls	r2, r3, #24
   858f2:	d5dd      	bpl.n	858b0 <__swsetup_r+0x34>
   858f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   858f8:	81a3      	strh	r3, [r4, #12]
   858fa:	f04f 30ff 	mov.w	r0, #4294967295
   858fe:	bd38      	pop	{r3, r4, r5, pc}
   85900:	f000 f968 	bl	85bd4 <__sinit>
   85904:	e7c3      	b.n	8588e <__swsetup_r+0x12>
   85906:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85908:	b151      	cbz	r1, 85920 <__swsetup_r+0xa4>
   8590a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8590e:	4299      	cmp	r1, r3
   85910:	d004      	beq.n	8591c <__swsetup_r+0xa0>
   85912:	4628      	mov	r0, r5
   85914:	f000 fa26 	bl	85d64 <_free_r>
   85918:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8591c:	2300      	movs	r3, #0
   8591e:	6323      	str	r3, [r4, #48]	; 0x30
   85920:	6920      	ldr	r0, [r4, #16]
   85922:	2300      	movs	r3, #0
   85924:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   85928:	e884 0009 	stmia.w	r4, {r0, r3}
   8592c:	e7c6      	b.n	858bc <__swsetup_r+0x40>
   8592e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   85932:	2309      	movs	r3, #9
   85934:	602b      	str	r3, [r5, #0]
   85936:	f04f 30ff 	mov.w	r0, #4294967295
   8593a:	81a2      	strh	r2, [r4, #12]
   8593c:	bd38      	pop	{r3, r4, r5, pc}
   8593e:	bf00      	nop
   85940:	200704d8 	.word	0x200704d8

00085944 <register_fini>:
   85944:	4b02      	ldr	r3, [pc, #8]	; (85950 <register_fini+0xc>)
   85946:	b113      	cbz	r3, 8594e <register_fini+0xa>
   85948:	4802      	ldr	r0, [pc, #8]	; (85954 <register_fini+0x10>)
   8594a:	f000 b805 	b.w	85958 <atexit>
   8594e:	4770      	bx	lr
   85950:	00000000 	.word	0x00000000
   85954:	00085be9 	.word	0x00085be9

00085958 <atexit>:
   85958:	2300      	movs	r3, #0
   8595a:	4601      	mov	r1, r0
   8595c:	461a      	mov	r2, r3
   8595e:	4618      	mov	r0, r3
   85960:	f001 bbce 	b.w	87100 <__register_exitproc>

00085964 <__sflush_r>:
   85964:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   85968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8596c:	b29a      	uxth	r2, r3
   8596e:	460d      	mov	r5, r1
   85970:	0711      	lsls	r1, r2, #28
   85972:	4680      	mov	r8, r0
   85974:	d43c      	bmi.n	859f0 <__sflush_r+0x8c>
   85976:	686a      	ldr	r2, [r5, #4]
   85978:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8597c:	2a00      	cmp	r2, #0
   8597e:	81ab      	strh	r3, [r5, #12]
   85980:	dd73      	ble.n	85a6a <__sflush_r+0x106>
   85982:	6aac      	ldr	r4, [r5, #40]	; 0x28
   85984:	2c00      	cmp	r4, #0
   85986:	d04b      	beq.n	85a20 <__sflush_r+0xbc>
   85988:	b29b      	uxth	r3, r3
   8598a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   8598e:	2100      	movs	r1, #0
   85990:	b292      	uxth	r2, r2
   85992:	f8d8 6000 	ldr.w	r6, [r8]
   85996:	f8c8 1000 	str.w	r1, [r8]
   8599a:	2a00      	cmp	r2, #0
   8599c:	d069      	beq.n	85a72 <__sflush_r+0x10e>
   8599e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   859a0:	075f      	lsls	r7, r3, #29
   859a2:	d505      	bpl.n	859b0 <__sflush_r+0x4c>
   859a4:	6869      	ldr	r1, [r5, #4]
   859a6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   859a8:	1a52      	subs	r2, r2, r1
   859aa:	b10b      	cbz	r3, 859b0 <__sflush_r+0x4c>
   859ac:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   859ae:	1ad2      	subs	r2, r2, r3
   859b0:	2300      	movs	r3, #0
   859b2:	69e9      	ldr	r1, [r5, #28]
   859b4:	4640      	mov	r0, r8
   859b6:	47a0      	blx	r4
   859b8:	1c44      	adds	r4, r0, #1
   859ba:	d03c      	beq.n	85a36 <__sflush_r+0xd2>
   859bc:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   859c0:	6929      	ldr	r1, [r5, #16]
   859c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   859c6:	2200      	movs	r2, #0
   859c8:	81ab      	strh	r3, [r5, #12]
   859ca:	04db      	lsls	r3, r3, #19
   859cc:	e885 0006 	stmia.w	r5, {r1, r2}
   859d0:	d449      	bmi.n	85a66 <__sflush_r+0x102>
   859d2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   859d4:	f8c8 6000 	str.w	r6, [r8]
   859d8:	b311      	cbz	r1, 85a20 <__sflush_r+0xbc>
   859da:	f105 0340 	add.w	r3, r5, #64	; 0x40
   859de:	4299      	cmp	r1, r3
   859e0:	d002      	beq.n	859e8 <__sflush_r+0x84>
   859e2:	4640      	mov	r0, r8
   859e4:	f000 f9be 	bl	85d64 <_free_r>
   859e8:	2000      	movs	r0, #0
   859ea:	6328      	str	r0, [r5, #48]	; 0x30
   859ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   859f0:	692e      	ldr	r6, [r5, #16]
   859f2:	b1ae      	cbz	r6, 85a20 <__sflush_r+0xbc>
   859f4:	0790      	lsls	r0, r2, #30
   859f6:	682c      	ldr	r4, [r5, #0]
   859f8:	bf0c      	ite	eq
   859fa:	696b      	ldreq	r3, [r5, #20]
   859fc:	2300      	movne	r3, #0
   859fe:	602e      	str	r6, [r5, #0]
   85a00:	1ba4      	subs	r4, r4, r6
   85a02:	60ab      	str	r3, [r5, #8]
   85a04:	e00a      	b.n	85a1c <__sflush_r+0xb8>
   85a06:	4623      	mov	r3, r4
   85a08:	4632      	mov	r2, r6
   85a0a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   85a0c:	69e9      	ldr	r1, [r5, #28]
   85a0e:	4640      	mov	r0, r8
   85a10:	47b8      	blx	r7
   85a12:	2800      	cmp	r0, #0
   85a14:	eba4 0400 	sub.w	r4, r4, r0
   85a18:	4406      	add	r6, r0
   85a1a:	dd04      	ble.n	85a26 <__sflush_r+0xc2>
   85a1c:	2c00      	cmp	r4, #0
   85a1e:	dcf2      	bgt.n	85a06 <__sflush_r+0xa2>
   85a20:	2000      	movs	r0, #0
   85a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85a26:	89ab      	ldrh	r3, [r5, #12]
   85a28:	f04f 30ff 	mov.w	r0, #4294967295
   85a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85a30:	81ab      	strh	r3, [r5, #12]
   85a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85a36:	f8d8 2000 	ldr.w	r2, [r8]
   85a3a:	2a1d      	cmp	r2, #29
   85a3c:	d8f3      	bhi.n	85a26 <__sflush_r+0xc2>
   85a3e:	4b1a      	ldr	r3, [pc, #104]	; (85aa8 <__sflush_r+0x144>)
   85a40:	40d3      	lsrs	r3, r2
   85a42:	f003 0301 	and.w	r3, r3, #1
   85a46:	f083 0401 	eor.w	r4, r3, #1
   85a4a:	2b00      	cmp	r3, #0
   85a4c:	d0eb      	beq.n	85a26 <__sflush_r+0xc2>
   85a4e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   85a52:	6929      	ldr	r1, [r5, #16]
   85a54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   85a58:	6029      	str	r1, [r5, #0]
   85a5a:	04d9      	lsls	r1, r3, #19
   85a5c:	606c      	str	r4, [r5, #4]
   85a5e:	81ab      	strh	r3, [r5, #12]
   85a60:	d5b7      	bpl.n	859d2 <__sflush_r+0x6e>
   85a62:	2a00      	cmp	r2, #0
   85a64:	d1b5      	bne.n	859d2 <__sflush_r+0x6e>
   85a66:	6528      	str	r0, [r5, #80]	; 0x50
   85a68:	e7b3      	b.n	859d2 <__sflush_r+0x6e>
   85a6a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   85a6c:	2a00      	cmp	r2, #0
   85a6e:	dc88      	bgt.n	85982 <__sflush_r+0x1e>
   85a70:	e7d6      	b.n	85a20 <__sflush_r+0xbc>
   85a72:	2301      	movs	r3, #1
   85a74:	69e9      	ldr	r1, [r5, #28]
   85a76:	4640      	mov	r0, r8
   85a78:	47a0      	blx	r4
   85a7a:	1c43      	adds	r3, r0, #1
   85a7c:	4602      	mov	r2, r0
   85a7e:	d002      	beq.n	85a86 <__sflush_r+0x122>
   85a80:	89ab      	ldrh	r3, [r5, #12]
   85a82:	6aac      	ldr	r4, [r5, #40]	; 0x28
   85a84:	e78c      	b.n	859a0 <__sflush_r+0x3c>
   85a86:	f8d8 3000 	ldr.w	r3, [r8]
   85a8a:	2b00      	cmp	r3, #0
   85a8c:	d0f8      	beq.n	85a80 <__sflush_r+0x11c>
   85a8e:	2b1d      	cmp	r3, #29
   85a90:	d001      	beq.n	85a96 <__sflush_r+0x132>
   85a92:	2b16      	cmp	r3, #22
   85a94:	d102      	bne.n	85a9c <__sflush_r+0x138>
   85a96:	f8c8 6000 	str.w	r6, [r8]
   85a9a:	e7c1      	b.n	85a20 <__sflush_r+0xbc>
   85a9c:	89ab      	ldrh	r3, [r5, #12]
   85a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85aa2:	81ab      	strh	r3, [r5, #12]
   85aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85aa8:	20400001 	.word	0x20400001

00085aac <_fflush_r>:
   85aac:	b510      	push	{r4, lr}
   85aae:	4604      	mov	r4, r0
   85ab0:	b082      	sub	sp, #8
   85ab2:	b108      	cbz	r0, 85ab8 <_fflush_r+0xc>
   85ab4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85ab6:	b153      	cbz	r3, 85ace <_fflush_r+0x22>
   85ab8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   85abc:	b908      	cbnz	r0, 85ac2 <_fflush_r+0x16>
   85abe:	b002      	add	sp, #8
   85ac0:	bd10      	pop	{r4, pc}
   85ac2:	4620      	mov	r0, r4
   85ac4:	b002      	add	sp, #8
   85ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   85aca:	f7ff bf4b 	b.w	85964 <__sflush_r>
   85ace:	9101      	str	r1, [sp, #4]
   85ad0:	f000 f880 	bl	85bd4 <__sinit>
   85ad4:	9901      	ldr	r1, [sp, #4]
   85ad6:	e7ef      	b.n	85ab8 <_fflush_r+0xc>

00085ad8 <_cleanup_r>:
   85ad8:	4901      	ldr	r1, [pc, #4]	; (85ae0 <_cleanup_r+0x8>)
   85ada:	f000 bbaf 	b.w	8623c <_fwalk_reent>
   85ade:	bf00      	nop
   85ae0:	000871c9 	.word	0x000871c9

00085ae4 <__sinit.part.1>:
   85ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85ae8:	4607      	mov	r7, r0
   85aea:	4835      	ldr	r0, [pc, #212]	; (85bc0 <__sinit.part.1+0xdc>)
   85aec:	687d      	ldr	r5, [r7, #4]
   85aee:	2400      	movs	r4, #0
   85af0:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   85af4:	2304      	movs	r3, #4
   85af6:	2103      	movs	r1, #3
   85af8:	63f8      	str	r0, [r7, #60]	; 0x3c
   85afa:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   85afe:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   85b02:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   85b06:	b083      	sub	sp, #12
   85b08:	602c      	str	r4, [r5, #0]
   85b0a:	606c      	str	r4, [r5, #4]
   85b0c:	60ac      	str	r4, [r5, #8]
   85b0e:	666c      	str	r4, [r5, #100]	; 0x64
   85b10:	81ec      	strh	r4, [r5, #14]
   85b12:	612c      	str	r4, [r5, #16]
   85b14:	616c      	str	r4, [r5, #20]
   85b16:	61ac      	str	r4, [r5, #24]
   85b18:	81ab      	strh	r3, [r5, #12]
   85b1a:	4621      	mov	r1, r4
   85b1c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   85b20:	2208      	movs	r2, #8
   85b22:	f7fe fe19 	bl	84758 <memset>
   85b26:	f8df b09c 	ldr.w	fp, [pc, #156]	; 85bc4 <__sinit.part.1+0xe0>
   85b2a:	68be      	ldr	r6, [r7, #8]
   85b2c:	f8df a098 	ldr.w	sl, [pc, #152]	; 85bc8 <__sinit.part.1+0xe4>
   85b30:	f8df 9098 	ldr.w	r9, [pc, #152]	; 85bcc <__sinit.part.1+0xe8>
   85b34:	f8df 8098 	ldr.w	r8, [pc, #152]	; 85bd0 <__sinit.part.1+0xec>
   85b38:	2301      	movs	r3, #1
   85b3a:	2209      	movs	r2, #9
   85b3c:	f8c5 b020 	str.w	fp, [r5, #32]
   85b40:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   85b44:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   85b48:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   85b4c:	61ed      	str	r5, [r5, #28]
   85b4e:	4621      	mov	r1, r4
   85b50:	81f3      	strh	r3, [r6, #14]
   85b52:	81b2      	strh	r2, [r6, #12]
   85b54:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   85b58:	6034      	str	r4, [r6, #0]
   85b5a:	6074      	str	r4, [r6, #4]
   85b5c:	60b4      	str	r4, [r6, #8]
   85b5e:	6674      	str	r4, [r6, #100]	; 0x64
   85b60:	6134      	str	r4, [r6, #16]
   85b62:	6174      	str	r4, [r6, #20]
   85b64:	61b4      	str	r4, [r6, #24]
   85b66:	2208      	movs	r2, #8
   85b68:	9301      	str	r3, [sp, #4]
   85b6a:	f7fe fdf5 	bl	84758 <memset>
   85b6e:	68fd      	ldr	r5, [r7, #12]
   85b70:	2012      	movs	r0, #18
   85b72:	2202      	movs	r2, #2
   85b74:	61f6      	str	r6, [r6, #28]
   85b76:	f8c6 b020 	str.w	fp, [r6, #32]
   85b7a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   85b7e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   85b82:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   85b86:	4621      	mov	r1, r4
   85b88:	81a8      	strh	r0, [r5, #12]
   85b8a:	81ea      	strh	r2, [r5, #14]
   85b8c:	602c      	str	r4, [r5, #0]
   85b8e:	606c      	str	r4, [r5, #4]
   85b90:	60ac      	str	r4, [r5, #8]
   85b92:	666c      	str	r4, [r5, #100]	; 0x64
   85b94:	612c      	str	r4, [r5, #16]
   85b96:	616c      	str	r4, [r5, #20]
   85b98:	61ac      	str	r4, [r5, #24]
   85b9a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   85b9e:	2208      	movs	r2, #8
   85ba0:	f7fe fdda 	bl	84758 <memset>
   85ba4:	9b01      	ldr	r3, [sp, #4]
   85ba6:	61ed      	str	r5, [r5, #28]
   85ba8:	f8c5 b020 	str.w	fp, [r5, #32]
   85bac:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   85bb0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   85bb4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   85bb8:	63bb      	str	r3, [r7, #56]	; 0x38
   85bba:	b003      	add	sp, #12
   85bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85bc0:	00085ad9 	.word	0x00085ad9
   85bc4:	00086f31 	.word	0x00086f31
   85bc8:	00086f55 	.word	0x00086f55
   85bcc:	00086f91 	.word	0x00086f91
   85bd0:	00086fb1 	.word	0x00086fb1

00085bd4 <__sinit>:
   85bd4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85bd6:	b103      	cbz	r3, 85bda <__sinit+0x6>
   85bd8:	4770      	bx	lr
   85bda:	f7ff bf83 	b.w	85ae4 <__sinit.part.1>
   85bde:	bf00      	nop

00085be0 <__sfp_lock_acquire>:
   85be0:	4770      	bx	lr
   85be2:	bf00      	nop

00085be4 <__sfp_lock_release>:
   85be4:	4770      	bx	lr
   85be6:	bf00      	nop

00085be8 <__libc_fini_array>:
   85be8:	b538      	push	{r3, r4, r5, lr}
   85bea:	4d07      	ldr	r5, [pc, #28]	; (85c08 <__libc_fini_array+0x20>)
   85bec:	4c07      	ldr	r4, [pc, #28]	; (85c0c <__libc_fini_array+0x24>)
   85bee:	1b2c      	subs	r4, r5, r4
   85bf0:	10a4      	asrs	r4, r4, #2
   85bf2:	d005      	beq.n	85c00 <__libc_fini_array+0x18>
   85bf4:	3c01      	subs	r4, #1
   85bf6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   85bfa:	4798      	blx	r3
   85bfc:	2c00      	cmp	r4, #0
   85bfe:	d1f9      	bne.n	85bf4 <__libc_fini_array+0xc>
   85c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   85c04:	f001 bd9a 	b.w	8773c <_fini>
   85c08:	0008774c 	.word	0x0008774c
   85c0c:	00087748 	.word	0x00087748

00085c10 <__fputwc>:
   85c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85c14:	b082      	sub	sp, #8
   85c16:	4606      	mov	r6, r0
   85c18:	460f      	mov	r7, r1
   85c1a:	4614      	mov	r4, r2
   85c1c:	f000 fb3a 	bl	86294 <__locale_mb_cur_max>
   85c20:	2801      	cmp	r0, #1
   85c22:	d032      	beq.n	85c8a <__fputwc+0x7a>
   85c24:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   85c28:	463a      	mov	r2, r7
   85c2a:	a901      	add	r1, sp, #4
   85c2c:	4630      	mov	r0, r6
   85c2e:	f001 fa19 	bl	87064 <_wcrtomb_r>
   85c32:	f1b0 3fff 	cmp.w	r0, #4294967295
   85c36:	4680      	mov	r8, r0
   85c38:	d020      	beq.n	85c7c <__fputwc+0x6c>
   85c3a:	b370      	cbz	r0, 85c9a <__fputwc+0x8a>
   85c3c:	f89d 1004 	ldrb.w	r1, [sp, #4]
   85c40:	2500      	movs	r5, #0
   85c42:	e008      	b.n	85c56 <__fputwc+0x46>
   85c44:	6823      	ldr	r3, [r4, #0]
   85c46:	1c5a      	adds	r2, r3, #1
   85c48:	6022      	str	r2, [r4, #0]
   85c4a:	7019      	strb	r1, [r3, #0]
   85c4c:	3501      	adds	r5, #1
   85c4e:	4545      	cmp	r5, r8
   85c50:	d223      	bcs.n	85c9a <__fputwc+0x8a>
   85c52:	ab01      	add	r3, sp, #4
   85c54:	5d59      	ldrb	r1, [r3, r5]
   85c56:	68a3      	ldr	r3, [r4, #8]
   85c58:	3b01      	subs	r3, #1
   85c5a:	2b00      	cmp	r3, #0
   85c5c:	60a3      	str	r3, [r4, #8]
   85c5e:	daf1      	bge.n	85c44 <__fputwc+0x34>
   85c60:	69a2      	ldr	r2, [r4, #24]
   85c62:	4293      	cmp	r3, r2
   85c64:	db01      	blt.n	85c6a <__fputwc+0x5a>
   85c66:	290a      	cmp	r1, #10
   85c68:	d1ec      	bne.n	85c44 <__fputwc+0x34>
   85c6a:	4622      	mov	r2, r4
   85c6c:	4630      	mov	r0, r6
   85c6e:	f001 f9a3 	bl	86fb8 <__swbuf_r>
   85c72:	1c43      	adds	r3, r0, #1
   85c74:	d1ea      	bne.n	85c4c <__fputwc+0x3c>
   85c76:	b002      	add	sp, #8
   85c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85c7c:	89a3      	ldrh	r3, [r4, #12]
   85c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85c82:	81a3      	strh	r3, [r4, #12]
   85c84:	b002      	add	sp, #8
   85c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85c8a:	1e7b      	subs	r3, r7, #1
   85c8c:	2bfe      	cmp	r3, #254	; 0xfe
   85c8e:	d8c9      	bhi.n	85c24 <__fputwc+0x14>
   85c90:	b2f9      	uxtb	r1, r7
   85c92:	4680      	mov	r8, r0
   85c94:	f88d 1004 	strb.w	r1, [sp, #4]
   85c98:	e7d2      	b.n	85c40 <__fputwc+0x30>
   85c9a:	4638      	mov	r0, r7
   85c9c:	b002      	add	sp, #8
   85c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85ca2:	bf00      	nop

00085ca4 <_fputwc_r>:
   85ca4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   85ca8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   85cac:	d10a      	bne.n	85cc4 <_fputwc_r+0x20>
   85cae:	b410      	push	{r4}
   85cb0:	6e54      	ldr	r4, [r2, #100]	; 0x64
   85cb2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   85cb6:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   85cba:	6654      	str	r4, [r2, #100]	; 0x64
   85cbc:	8193      	strh	r3, [r2, #12]
   85cbe:	bc10      	pop	{r4}
   85cc0:	f7ff bfa6 	b.w	85c10 <__fputwc>
   85cc4:	f7ff bfa4 	b.w	85c10 <__fputwc>

00085cc8 <_malloc_trim_r>:
   85cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85cca:	460c      	mov	r4, r1
   85ccc:	4f22      	ldr	r7, [pc, #136]	; (85d58 <_malloc_trim_r+0x90>)
   85cce:	4606      	mov	r6, r0
   85cd0:	f000 ff2e 	bl	86b30 <__malloc_lock>
   85cd4:	68bb      	ldr	r3, [r7, #8]
   85cd6:	685d      	ldr	r5, [r3, #4]
   85cd8:	f025 0503 	bic.w	r5, r5, #3
   85cdc:	1b29      	subs	r1, r5, r4
   85cde:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   85ce2:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   85ce6:	f021 010f 	bic.w	r1, r1, #15
   85cea:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   85cee:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   85cf2:	db07      	blt.n	85d04 <_malloc_trim_r+0x3c>
   85cf4:	2100      	movs	r1, #0
   85cf6:	4630      	mov	r0, r6
   85cf8:	f001 f908 	bl	86f0c <_sbrk_r>
   85cfc:	68bb      	ldr	r3, [r7, #8]
   85cfe:	442b      	add	r3, r5
   85d00:	4298      	cmp	r0, r3
   85d02:	d004      	beq.n	85d0e <_malloc_trim_r+0x46>
   85d04:	4630      	mov	r0, r6
   85d06:	f000 ff15 	bl	86b34 <__malloc_unlock>
   85d0a:	2000      	movs	r0, #0
   85d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85d0e:	4261      	negs	r1, r4
   85d10:	4630      	mov	r0, r6
   85d12:	f001 f8fb 	bl	86f0c <_sbrk_r>
   85d16:	3001      	adds	r0, #1
   85d18:	d00d      	beq.n	85d36 <_malloc_trim_r+0x6e>
   85d1a:	4b10      	ldr	r3, [pc, #64]	; (85d5c <_malloc_trim_r+0x94>)
   85d1c:	68ba      	ldr	r2, [r7, #8]
   85d1e:	6819      	ldr	r1, [r3, #0]
   85d20:	1b2d      	subs	r5, r5, r4
   85d22:	f045 0501 	orr.w	r5, r5, #1
   85d26:	4630      	mov	r0, r6
   85d28:	1b09      	subs	r1, r1, r4
   85d2a:	6055      	str	r5, [r2, #4]
   85d2c:	6019      	str	r1, [r3, #0]
   85d2e:	f000 ff01 	bl	86b34 <__malloc_unlock>
   85d32:	2001      	movs	r0, #1
   85d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85d36:	2100      	movs	r1, #0
   85d38:	4630      	mov	r0, r6
   85d3a:	f001 f8e7 	bl	86f0c <_sbrk_r>
   85d3e:	68ba      	ldr	r2, [r7, #8]
   85d40:	1a83      	subs	r3, r0, r2
   85d42:	2b0f      	cmp	r3, #15
   85d44:	ddde      	ble.n	85d04 <_malloc_trim_r+0x3c>
   85d46:	4c06      	ldr	r4, [pc, #24]	; (85d60 <_malloc_trim_r+0x98>)
   85d48:	4904      	ldr	r1, [pc, #16]	; (85d5c <_malloc_trim_r+0x94>)
   85d4a:	6824      	ldr	r4, [r4, #0]
   85d4c:	f043 0301 	orr.w	r3, r3, #1
   85d50:	1b00      	subs	r0, r0, r4
   85d52:	6053      	str	r3, [r2, #4]
   85d54:	6008      	str	r0, [r1, #0]
   85d56:	e7d5      	b.n	85d04 <_malloc_trim_r+0x3c>
   85d58:	20070500 	.word	0x20070500
   85d5c:	20070a18 	.word	0x20070a18
   85d60:	2007090c 	.word	0x2007090c

00085d64 <_free_r>:
   85d64:	2900      	cmp	r1, #0
   85d66:	d045      	beq.n	85df4 <_free_r+0x90>
   85d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85d6c:	460d      	mov	r5, r1
   85d6e:	4680      	mov	r8, r0
   85d70:	f000 fede 	bl	86b30 <__malloc_lock>
   85d74:	f855 7c04 	ldr.w	r7, [r5, #-4]
   85d78:	496a      	ldr	r1, [pc, #424]	; (85f24 <_free_r+0x1c0>)
   85d7a:	f1a5 0408 	sub.w	r4, r5, #8
   85d7e:	f027 0301 	bic.w	r3, r7, #1
   85d82:	18e2      	adds	r2, r4, r3
   85d84:	688e      	ldr	r6, [r1, #8]
   85d86:	6850      	ldr	r0, [r2, #4]
   85d88:	42b2      	cmp	r2, r6
   85d8a:	f020 0003 	bic.w	r0, r0, #3
   85d8e:	d062      	beq.n	85e56 <_free_r+0xf2>
   85d90:	07fe      	lsls	r6, r7, #31
   85d92:	6050      	str	r0, [r2, #4]
   85d94:	d40b      	bmi.n	85dae <_free_r+0x4a>
   85d96:	f855 7c08 	ldr.w	r7, [r5, #-8]
   85d9a:	f101 0e08 	add.w	lr, r1, #8
   85d9e:	1be4      	subs	r4, r4, r7
   85da0:	68a5      	ldr	r5, [r4, #8]
   85da2:	443b      	add	r3, r7
   85da4:	4575      	cmp	r5, lr
   85da6:	d06f      	beq.n	85e88 <_free_r+0x124>
   85da8:	68e7      	ldr	r7, [r4, #12]
   85daa:	60ef      	str	r7, [r5, #12]
   85dac:	60bd      	str	r5, [r7, #8]
   85dae:	1815      	adds	r5, r2, r0
   85db0:	686d      	ldr	r5, [r5, #4]
   85db2:	07ed      	lsls	r5, r5, #31
   85db4:	d542      	bpl.n	85e3c <_free_r+0xd8>
   85db6:	f043 0201 	orr.w	r2, r3, #1
   85dba:	6062      	str	r2, [r4, #4]
   85dbc:	50e3      	str	r3, [r4, r3]
   85dbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85dc2:	d218      	bcs.n	85df6 <_free_r+0x92>
   85dc4:	08db      	lsrs	r3, r3, #3
   85dc6:	6848      	ldr	r0, [r1, #4]
   85dc8:	109d      	asrs	r5, r3, #2
   85dca:	2201      	movs	r2, #1
   85dcc:	3301      	adds	r3, #1
   85dce:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   85dd2:	fa02 f505 	lsl.w	r5, r2, r5
   85dd6:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   85dda:	4328      	orrs	r0, r5
   85ddc:	3a08      	subs	r2, #8
   85dde:	60e2      	str	r2, [r4, #12]
   85de0:	60a7      	str	r7, [r4, #8]
   85de2:	6048      	str	r0, [r1, #4]
   85de4:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   85de8:	60fc      	str	r4, [r7, #12]
   85dea:	4640      	mov	r0, r8
   85dec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85df0:	f000 bea0 	b.w	86b34 <__malloc_unlock>
   85df4:	4770      	bx	lr
   85df6:	0a5a      	lsrs	r2, r3, #9
   85df8:	2a04      	cmp	r2, #4
   85dfa:	d853      	bhi.n	85ea4 <_free_r+0x140>
   85dfc:	099a      	lsrs	r2, r3, #6
   85dfe:	f102 0739 	add.w	r7, r2, #57	; 0x39
   85e02:	007f      	lsls	r7, r7, #1
   85e04:	f102 0538 	add.w	r5, r2, #56	; 0x38
   85e08:	eb01 0087 	add.w	r0, r1, r7, lsl #2
   85e0c:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
   85e10:	3808      	subs	r0, #8
   85e12:	4290      	cmp	r0, r2
   85e14:	4943      	ldr	r1, [pc, #268]	; (85f24 <_free_r+0x1c0>)
   85e16:	d04d      	beq.n	85eb4 <_free_r+0x150>
   85e18:	6851      	ldr	r1, [r2, #4]
   85e1a:	f021 0103 	bic.w	r1, r1, #3
   85e1e:	428b      	cmp	r3, r1
   85e20:	d202      	bcs.n	85e28 <_free_r+0xc4>
   85e22:	6892      	ldr	r2, [r2, #8]
   85e24:	4290      	cmp	r0, r2
   85e26:	d1f7      	bne.n	85e18 <_free_r+0xb4>
   85e28:	68d0      	ldr	r0, [r2, #12]
   85e2a:	60e0      	str	r0, [r4, #12]
   85e2c:	60a2      	str	r2, [r4, #8]
   85e2e:	6084      	str	r4, [r0, #8]
   85e30:	60d4      	str	r4, [r2, #12]
   85e32:	4640      	mov	r0, r8
   85e34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85e38:	f000 be7c 	b.w	86b34 <__malloc_unlock>
   85e3c:	6895      	ldr	r5, [r2, #8]
   85e3e:	4f3a      	ldr	r7, [pc, #232]	; (85f28 <_free_r+0x1c4>)
   85e40:	4403      	add	r3, r0
   85e42:	42bd      	cmp	r5, r7
   85e44:	d03f      	beq.n	85ec6 <_free_r+0x162>
   85e46:	68d0      	ldr	r0, [r2, #12]
   85e48:	f043 0201 	orr.w	r2, r3, #1
   85e4c:	60e8      	str	r0, [r5, #12]
   85e4e:	6085      	str	r5, [r0, #8]
   85e50:	6062      	str	r2, [r4, #4]
   85e52:	50e3      	str	r3, [r4, r3]
   85e54:	e7b3      	b.n	85dbe <_free_r+0x5a>
   85e56:	07ff      	lsls	r7, r7, #31
   85e58:	4403      	add	r3, r0
   85e5a:	d407      	bmi.n	85e6c <_free_r+0x108>
   85e5c:	f855 5c08 	ldr.w	r5, [r5, #-8]
   85e60:	1b64      	subs	r4, r4, r5
   85e62:	68e2      	ldr	r2, [r4, #12]
   85e64:	68a0      	ldr	r0, [r4, #8]
   85e66:	442b      	add	r3, r5
   85e68:	60c2      	str	r2, [r0, #12]
   85e6a:	6090      	str	r0, [r2, #8]
   85e6c:	4a2f      	ldr	r2, [pc, #188]	; (85f2c <_free_r+0x1c8>)
   85e6e:	f043 0001 	orr.w	r0, r3, #1
   85e72:	6812      	ldr	r2, [r2, #0]
   85e74:	6060      	str	r0, [r4, #4]
   85e76:	4293      	cmp	r3, r2
   85e78:	608c      	str	r4, [r1, #8]
   85e7a:	d3b6      	bcc.n	85dea <_free_r+0x86>
   85e7c:	4b2c      	ldr	r3, [pc, #176]	; (85f30 <_free_r+0x1cc>)
   85e7e:	4640      	mov	r0, r8
   85e80:	6819      	ldr	r1, [r3, #0]
   85e82:	f7ff ff21 	bl	85cc8 <_malloc_trim_r>
   85e86:	e7b0      	b.n	85dea <_free_r+0x86>
   85e88:	1811      	adds	r1, r2, r0
   85e8a:	6849      	ldr	r1, [r1, #4]
   85e8c:	07c9      	lsls	r1, r1, #31
   85e8e:	d444      	bmi.n	85f1a <_free_r+0x1b6>
   85e90:	6891      	ldr	r1, [r2, #8]
   85e92:	4403      	add	r3, r0
   85e94:	68d2      	ldr	r2, [r2, #12]
   85e96:	f043 0001 	orr.w	r0, r3, #1
   85e9a:	60ca      	str	r2, [r1, #12]
   85e9c:	6091      	str	r1, [r2, #8]
   85e9e:	6060      	str	r0, [r4, #4]
   85ea0:	50e3      	str	r3, [r4, r3]
   85ea2:	e7a2      	b.n	85dea <_free_r+0x86>
   85ea4:	2a14      	cmp	r2, #20
   85ea6:	d817      	bhi.n	85ed8 <_free_r+0x174>
   85ea8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   85eac:	007f      	lsls	r7, r7, #1
   85eae:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   85eb2:	e7a9      	b.n	85e08 <_free_r+0xa4>
   85eb4:	10aa      	asrs	r2, r5, #2
   85eb6:	684b      	ldr	r3, [r1, #4]
   85eb8:	2501      	movs	r5, #1
   85eba:	fa05 f202 	lsl.w	r2, r5, r2
   85ebe:	4313      	orrs	r3, r2
   85ec0:	604b      	str	r3, [r1, #4]
   85ec2:	4602      	mov	r2, r0
   85ec4:	e7b1      	b.n	85e2a <_free_r+0xc6>
   85ec6:	f043 0201 	orr.w	r2, r3, #1
   85eca:	614c      	str	r4, [r1, #20]
   85ecc:	610c      	str	r4, [r1, #16]
   85ece:	60e5      	str	r5, [r4, #12]
   85ed0:	60a5      	str	r5, [r4, #8]
   85ed2:	6062      	str	r2, [r4, #4]
   85ed4:	50e3      	str	r3, [r4, r3]
   85ed6:	e788      	b.n	85dea <_free_r+0x86>
   85ed8:	2a54      	cmp	r2, #84	; 0x54
   85eda:	d806      	bhi.n	85eea <_free_r+0x186>
   85edc:	0b1a      	lsrs	r2, r3, #12
   85ede:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   85ee2:	007f      	lsls	r7, r7, #1
   85ee4:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   85ee8:	e78e      	b.n	85e08 <_free_r+0xa4>
   85eea:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   85eee:	d806      	bhi.n	85efe <_free_r+0x19a>
   85ef0:	0bda      	lsrs	r2, r3, #15
   85ef2:	f102 0778 	add.w	r7, r2, #120	; 0x78
   85ef6:	007f      	lsls	r7, r7, #1
   85ef8:	f102 0577 	add.w	r5, r2, #119	; 0x77
   85efc:	e784      	b.n	85e08 <_free_r+0xa4>
   85efe:	f240 5054 	movw	r0, #1364	; 0x554
   85f02:	4282      	cmp	r2, r0
   85f04:	d806      	bhi.n	85f14 <_free_r+0x1b0>
   85f06:	0c9a      	lsrs	r2, r3, #18
   85f08:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   85f0c:	007f      	lsls	r7, r7, #1
   85f0e:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   85f12:	e779      	b.n	85e08 <_free_r+0xa4>
   85f14:	27fe      	movs	r7, #254	; 0xfe
   85f16:	257e      	movs	r5, #126	; 0x7e
   85f18:	e776      	b.n	85e08 <_free_r+0xa4>
   85f1a:	f043 0201 	orr.w	r2, r3, #1
   85f1e:	6062      	str	r2, [r4, #4]
   85f20:	50e3      	str	r3, [r4, r3]
   85f22:	e762      	b.n	85dea <_free_r+0x86>
   85f24:	20070500 	.word	0x20070500
   85f28:	20070508 	.word	0x20070508
   85f2c:	20070908 	.word	0x20070908
   85f30:	20070a14 	.word	0x20070a14

00085f34 <__sfvwrite_r>:
   85f34:	6893      	ldr	r3, [r2, #8]
   85f36:	2b00      	cmp	r3, #0
   85f38:	f000 80ab 	beq.w	86092 <__sfvwrite_r+0x15e>
   85f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85f40:	898b      	ldrh	r3, [r1, #12]
   85f42:	b085      	sub	sp, #20
   85f44:	460c      	mov	r4, r1
   85f46:	0719      	lsls	r1, r3, #28
   85f48:	9002      	str	r0, [sp, #8]
   85f4a:	4616      	mov	r6, r2
   85f4c:	d528      	bpl.n	85fa0 <__sfvwrite_r+0x6c>
   85f4e:	6922      	ldr	r2, [r4, #16]
   85f50:	b332      	cbz	r2, 85fa0 <__sfvwrite_r+0x6c>
   85f52:	f003 0802 	and.w	r8, r3, #2
   85f56:	fa1f f088 	uxth.w	r0, r8
   85f5a:	6835      	ldr	r5, [r6, #0]
   85f5c:	b378      	cbz	r0, 85fbe <__sfvwrite_r+0x8a>
   85f5e:	f04f 0900 	mov.w	r9, #0
   85f62:	46c8      	mov	r8, r9
   85f64:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 86238 <__sfvwrite_r+0x304>
   85f68:	f1b8 0f00 	cmp.w	r8, #0
   85f6c:	f000 808b 	beq.w	86086 <__sfvwrite_r+0x152>
   85f70:	45d0      	cmp	r8, sl
   85f72:	4643      	mov	r3, r8
   85f74:	464a      	mov	r2, r9
   85f76:	bf28      	it	cs
   85f78:	4653      	movcs	r3, sl
   85f7a:	69e1      	ldr	r1, [r4, #28]
   85f7c:	9802      	ldr	r0, [sp, #8]
   85f7e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   85f80:	47b8      	blx	r7
   85f82:	2800      	cmp	r0, #0
   85f84:	f340 80a5 	ble.w	860d2 <__sfvwrite_r+0x19e>
   85f88:	68b3      	ldr	r3, [r6, #8]
   85f8a:	4481      	add	r9, r0
   85f8c:	1a1b      	subs	r3, r3, r0
   85f8e:	ebc0 0808 	rsb	r8, r0, r8
   85f92:	60b3      	str	r3, [r6, #8]
   85f94:	2b00      	cmp	r3, #0
   85f96:	d1e7      	bne.n	85f68 <__sfvwrite_r+0x34>
   85f98:	2000      	movs	r0, #0
   85f9a:	b005      	add	sp, #20
   85f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85fa0:	4621      	mov	r1, r4
   85fa2:	9802      	ldr	r0, [sp, #8]
   85fa4:	f7ff fc6a 	bl	8587c <__swsetup_r>
   85fa8:	2800      	cmp	r0, #0
   85faa:	f040 813c 	bne.w	86226 <__sfvwrite_r+0x2f2>
   85fae:	89a3      	ldrh	r3, [r4, #12]
   85fb0:	6835      	ldr	r5, [r6, #0]
   85fb2:	f003 0802 	and.w	r8, r3, #2
   85fb6:	fa1f f088 	uxth.w	r0, r8
   85fba:	2800      	cmp	r0, #0
   85fbc:	d1cf      	bne.n	85f5e <__sfvwrite_r+0x2a>
   85fbe:	f013 0901 	ands.w	r9, r3, #1
   85fc2:	f040 8090 	bne.w	860e6 <__sfvwrite_r+0x1b2>
   85fc6:	464f      	mov	r7, r9
   85fc8:	9601      	str	r6, [sp, #4]
   85fca:	2f00      	cmp	r7, #0
   85fcc:	d056      	beq.n	8607c <__sfvwrite_r+0x148>
   85fce:	059a      	lsls	r2, r3, #22
   85fd0:	f8d4 8008 	ldr.w	r8, [r4, #8]
   85fd4:	d55f      	bpl.n	86096 <__sfvwrite_r+0x162>
   85fd6:	4547      	cmp	r7, r8
   85fd8:	46c2      	mov	sl, r8
   85fda:	f0c0 80bf 	bcc.w	8615c <__sfvwrite_r+0x228>
   85fde:	f413 6f90 	tst.w	r3, #1152	; 0x480
   85fe2:	f000 80bd 	beq.w	86160 <__sfvwrite_r+0x22c>
   85fe6:	6962      	ldr	r2, [r4, #20]
   85fe8:	6820      	ldr	r0, [r4, #0]
   85fea:	6921      	ldr	r1, [r4, #16]
   85fec:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   85ff0:	ebc1 0a00 	rsb	sl, r1, r0
   85ff4:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   85ff8:	f10a 0001 	add.w	r0, sl, #1
   85ffc:	ea4f 0868 	mov.w	r8, r8, asr #1
   86000:	4438      	add	r0, r7
   86002:	4540      	cmp	r0, r8
   86004:	4642      	mov	r2, r8
   86006:	bf84      	itt	hi
   86008:	4680      	movhi	r8, r0
   8600a:	4642      	movhi	r2, r8
   8600c:	055b      	lsls	r3, r3, #21
   8600e:	f140 80f2 	bpl.w	861f6 <__sfvwrite_r+0x2c2>
   86012:	4611      	mov	r1, r2
   86014:	9802      	ldr	r0, [sp, #8]
   86016:	f000 f9bf 	bl	86398 <_malloc_r>
   8601a:	4683      	mov	fp, r0
   8601c:	2800      	cmp	r0, #0
   8601e:	f000 8105 	beq.w	8622c <__sfvwrite_r+0x2f8>
   86022:	4652      	mov	r2, sl
   86024:	6921      	ldr	r1, [r4, #16]
   86026:	f000 fca9 	bl	8697c <memcpy>
   8602a:	89a3      	ldrh	r3, [r4, #12]
   8602c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   86030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   86034:	81a3      	strh	r3, [r4, #12]
   86036:	ebca 0308 	rsb	r3, sl, r8
   8603a:	eb0b 000a 	add.w	r0, fp, sl
   8603e:	f8c4 8014 	str.w	r8, [r4, #20]
   86042:	46ba      	mov	sl, r7
   86044:	46b8      	mov	r8, r7
   86046:	f8c4 b010 	str.w	fp, [r4, #16]
   8604a:	6020      	str	r0, [r4, #0]
   8604c:	60a3      	str	r3, [r4, #8]
   8604e:	4652      	mov	r2, sl
   86050:	4649      	mov	r1, r9
   86052:	f000 fd09 	bl	86a68 <memmove>
   86056:	68a0      	ldr	r0, [r4, #8]
   86058:	6823      	ldr	r3, [r4, #0]
   8605a:	ebc8 0000 	rsb	r0, r8, r0
   8605e:	60a0      	str	r0, [r4, #8]
   86060:	4638      	mov	r0, r7
   86062:	4453      	add	r3, sl
   86064:	6023      	str	r3, [r4, #0]
   86066:	9a01      	ldr	r2, [sp, #4]
   86068:	4481      	add	r9, r0
   8606a:	6893      	ldr	r3, [r2, #8]
   8606c:	1a3f      	subs	r7, r7, r0
   8606e:	1a1b      	subs	r3, r3, r0
   86070:	6093      	str	r3, [r2, #8]
   86072:	2b00      	cmp	r3, #0
   86074:	d090      	beq.n	85f98 <__sfvwrite_r+0x64>
   86076:	89a3      	ldrh	r3, [r4, #12]
   86078:	2f00      	cmp	r7, #0
   8607a:	d1a8      	bne.n	85fce <__sfvwrite_r+0x9a>
   8607c:	f8d5 9000 	ldr.w	r9, [r5]
   86080:	686f      	ldr	r7, [r5, #4]
   86082:	3508      	adds	r5, #8
   86084:	e7a1      	b.n	85fca <__sfvwrite_r+0x96>
   86086:	f8d5 9000 	ldr.w	r9, [r5]
   8608a:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8608e:	3508      	adds	r5, #8
   86090:	e76a      	b.n	85f68 <__sfvwrite_r+0x34>
   86092:	2000      	movs	r0, #0
   86094:	4770      	bx	lr
   86096:	6820      	ldr	r0, [r4, #0]
   86098:	6923      	ldr	r3, [r4, #16]
   8609a:	4298      	cmp	r0, r3
   8609c:	d803      	bhi.n	860a6 <__sfvwrite_r+0x172>
   8609e:	6962      	ldr	r2, [r4, #20]
   860a0:	4297      	cmp	r7, r2
   860a2:	f080 8083 	bcs.w	861ac <__sfvwrite_r+0x278>
   860a6:	45b8      	cmp	r8, r7
   860a8:	bf28      	it	cs
   860aa:	46b8      	movcs	r8, r7
   860ac:	4649      	mov	r1, r9
   860ae:	4642      	mov	r2, r8
   860b0:	f000 fcda 	bl	86a68 <memmove>
   860b4:	68a3      	ldr	r3, [r4, #8]
   860b6:	6822      	ldr	r2, [r4, #0]
   860b8:	ebc8 0303 	rsb	r3, r8, r3
   860bc:	4442      	add	r2, r8
   860be:	60a3      	str	r3, [r4, #8]
   860c0:	6022      	str	r2, [r4, #0]
   860c2:	2b00      	cmp	r3, #0
   860c4:	d148      	bne.n	86158 <__sfvwrite_r+0x224>
   860c6:	4621      	mov	r1, r4
   860c8:	9802      	ldr	r0, [sp, #8]
   860ca:	f7ff fcef 	bl	85aac <_fflush_r>
   860ce:	2800      	cmp	r0, #0
   860d0:	d042      	beq.n	86158 <__sfvwrite_r+0x224>
   860d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   860d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   860da:	f04f 30ff 	mov.w	r0, #4294967295
   860de:	81a3      	strh	r3, [r4, #12]
   860e0:	b005      	add	sp, #20
   860e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   860e6:	4680      	mov	r8, r0
   860e8:	4682      	mov	sl, r0
   860ea:	4681      	mov	r9, r0
   860ec:	9001      	str	r0, [sp, #4]
   860ee:	f1b9 0f00 	cmp.w	r9, #0
   860f2:	d029      	beq.n	86148 <__sfvwrite_r+0x214>
   860f4:	9b01      	ldr	r3, [sp, #4]
   860f6:	2b00      	cmp	r3, #0
   860f8:	d04b      	beq.n	86192 <__sfvwrite_r+0x25e>
   860fa:	45c8      	cmp	r8, r9
   860fc:	46c3      	mov	fp, r8
   860fe:	bf28      	it	cs
   86100:	46cb      	movcs	fp, r9
   86102:	6820      	ldr	r0, [r4, #0]
   86104:	6923      	ldr	r3, [r4, #16]
   86106:	465f      	mov	r7, fp
   86108:	4298      	cmp	r0, r3
   8610a:	6962      	ldr	r2, [r4, #20]
   8610c:	d903      	bls.n	86116 <__sfvwrite_r+0x1e2>
   8610e:	68a3      	ldr	r3, [r4, #8]
   86110:	4413      	add	r3, r2
   86112:	459b      	cmp	fp, r3
   86114:	dc5c      	bgt.n	861d0 <__sfvwrite_r+0x29c>
   86116:	4593      	cmp	fp, r2
   86118:	db24      	blt.n	86164 <__sfvwrite_r+0x230>
   8611a:	4613      	mov	r3, r2
   8611c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8611e:	4652      	mov	r2, sl
   86120:	69e1      	ldr	r1, [r4, #28]
   86122:	9802      	ldr	r0, [sp, #8]
   86124:	47b8      	blx	r7
   86126:	1e07      	subs	r7, r0, #0
   86128:	ddd3      	ble.n	860d2 <__sfvwrite_r+0x19e>
   8612a:	ebb8 0807 	subs.w	r8, r8, r7
   8612e:	d027      	beq.n	86180 <__sfvwrite_r+0x24c>
   86130:	68b3      	ldr	r3, [r6, #8]
   86132:	44ba      	add	sl, r7
   86134:	1bdb      	subs	r3, r3, r7
   86136:	ebc7 0909 	rsb	r9, r7, r9
   8613a:	60b3      	str	r3, [r6, #8]
   8613c:	2b00      	cmp	r3, #0
   8613e:	f43f af2b 	beq.w	85f98 <__sfvwrite_r+0x64>
   86142:	f1b9 0f00 	cmp.w	r9, #0
   86146:	d1d5      	bne.n	860f4 <__sfvwrite_r+0x1c0>
   86148:	2300      	movs	r3, #0
   8614a:	f8d5 a000 	ldr.w	sl, [r5]
   8614e:	f8d5 9004 	ldr.w	r9, [r5, #4]
   86152:	9301      	str	r3, [sp, #4]
   86154:	3508      	adds	r5, #8
   86156:	e7ca      	b.n	860ee <__sfvwrite_r+0x1ba>
   86158:	4640      	mov	r0, r8
   8615a:	e784      	b.n	86066 <__sfvwrite_r+0x132>
   8615c:	46b8      	mov	r8, r7
   8615e:	46ba      	mov	sl, r7
   86160:	6820      	ldr	r0, [r4, #0]
   86162:	e774      	b.n	8604e <__sfvwrite_r+0x11a>
   86164:	465a      	mov	r2, fp
   86166:	4651      	mov	r1, sl
   86168:	f000 fc7e 	bl	86a68 <memmove>
   8616c:	68a2      	ldr	r2, [r4, #8]
   8616e:	6823      	ldr	r3, [r4, #0]
   86170:	ebcb 0202 	rsb	r2, fp, r2
   86174:	445b      	add	r3, fp
   86176:	ebb8 0807 	subs.w	r8, r8, r7
   8617a:	60a2      	str	r2, [r4, #8]
   8617c:	6023      	str	r3, [r4, #0]
   8617e:	d1d7      	bne.n	86130 <__sfvwrite_r+0x1fc>
   86180:	4621      	mov	r1, r4
   86182:	9802      	ldr	r0, [sp, #8]
   86184:	f7ff fc92 	bl	85aac <_fflush_r>
   86188:	2800      	cmp	r0, #0
   8618a:	d1a2      	bne.n	860d2 <__sfvwrite_r+0x19e>
   8618c:	f8cd 8004 	str.w	r8, [sp, #4]
   86190:	e7ce      	b.n	86130 <__sfvwrite_r+0x1fc>
   86192:	464a      	mov	r2, r9
   86194:	210a      	movs	r1, #10
   86196:	4650      	mov	r0, sl
   86198:	f000 fbaa 	bl	868f0 <memchr>
   8619c:	2800      	cmp	r0, #0
   8619e:	d03d      	beq.n	8621c <__sfvwrite_r+0x2e8>
   861a0:	3001      	adds	r0, #1
   861a2:	2301      	movs	r3, #1
   861a4:	ebca 0800 	rsb	r8, sl, r0
   861a8:	9301      	str	r3, [sp, #4]
   861aa:	e7a6      	b.n	860fa <__sfvwrite_r+0x1c6>
   861ac:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   861b0:	42bb      	cmp	r3, r7
   861b2:	bf28      	it	cs
   861b4:	463b      	movcs	r3, r7
   861b6:	fb93 f3f2 	sdiv	r3, r3, r2
   861ba:	69e1      	ldr	r1, [r4, #28]
   861bc:	fb02 f303 	mul.w	r3, r2, r3
   861c0:	9802      	ldr	r0, [sp, #8]
   861c2:	464a      	mov	r2, r9
   861c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   861c6:	47b0      	blx	r6
   861c8:	2800      	cmp	r0, #0
   861ca:	f73f af4c 	bgt.w	86066 <__sfvwrite_r+0x132>
   861ce:	e780      	b.n	860d2 <__sfvwrite_r+0x19e>
   861d0:	461a      	mov	r2, r3
   861d2:	4651      	mov	r1, sl
   861d4:	9303      	str	r3, [sp, #12]
   861d6:	f000 fc47 	bl	86a68 <memmove>
   861da:	6822      	ldr	r2, [r4, #0]
   861dc:	9b03      	ldr	r3, [sp, #12]
   861de:	4621      	mov	r1, r4
   861e0:	441a      	add	r2, r3
   861e2:	6022      	str	r2, [r4, #0]
   861e4:	9802      	ldr	r0, [sp, #8]
   861e6:	f7ff fc61 	bl	85aac <_fflush_r>
   861ea:	9b03      	ldr	r3, [sp, #12]
   861ec:	2800      	cmp	r0, #0
   861ee:	f47f af70 	bne.w	860d2 <__sfvwrite_r+0x19e>
   861f2:	461f      	mov	r7, r3
   861f4:	e799      	b.n	8612a <__sfvwrite_r+0x1f6>
   861f6:	9802      	ldr	r0, [sp, #8]
   861f8:	f000 fc9e 	bl	86b38 <_realloc_r>
   861fc:	4683      	mov	fp, r0
   861fe:	2800      	cmp	r0, #0
   86200:	f47f af19 	bne.w	86036 <__sfvwrite_r+0x102>
   86204:	9d02      	ldr	r5, [sp, #8]
   86206:	6921      	ldr	r1, [r4, #16]
   86208:	4628      	mov	r0, r5
   8620a:	f7ff fdab 	bl	85d64 <_free_r>
   8620e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   86212:	220c      	movs	r2, #12
   86214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   86218:	602a      	str	r2, [r5, #0]
   8621a:	e75c      	b.n	860d6 <__sfvwrite_r+0x1a2>
   8621c:	2301      	movs	r3, #1
   8621e:	f109 0801 	add.w	r8, r9, #1
   86222:	9301      	str	r3, [sp, #4]
   86224:	e769      	b.n	860fa <__sfvwrite_r+0x1c6>
   86226:	f04f 30ff 	mov.w	r0, #4294967295
   8622a:	e6b6      	b.n	85f9a <__sfvwrite_r+0x66>
   8622c:	9a02      	ldr	r2, [sp, #8]
   8622e:	230c      	movs	r3, #12
   86230:	6013      	str	r3, [r2, #0]
   86232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   86236:	e74e      	b.n	860d6 <__sfvwrite_r+0x1a2>
   86238:	7ffffc00 	.word	0x7ffffc00

0008623c <_fwalk_reent>:
   8623c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   86240:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   86244:	d01e      	beq.n	86284 <_fwalk_reent+0x48>
   86246:	4688      	mov	r8, r1
   86248:	4607      	mov	r7, r0
   8624a:	f04f 0900 	mov.w	r9, #0
   8624e:	6875      	ldr	r5, [r6, #4]
   86250:	68b4      	ldr	r4, [r6, #8]
   86252:	3d01      	subs	r5, #1
   86254:	d410      	bmi.n	86278 <_fwalk_reent+0x3c>
   86256:	89a3      	ldrh	r3, [r4, #12]
   86258:	3d01      	subs	r5, #1
   8625a:	2b01      	cmp	r3, #1
   8625c:	d908      	bls.n	86270 <_fwalk_reent+0x34>
   8625e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   86262:	3301      	adds	r3, #1
   86264:	d004      	beq.n	86270 <_fwalk_reent+0x34>
   86266:	4621      	mov	r1, r4
   86268:	4638      	mov	r0, r7
   8626a:	47c0      	blx	r8
   8626c:	ea49 0900 	orr.w	r9, r9, r0
   86270:	1c6b      	adds	r3, r5, #1
   86272:	f104 0468 	add.w	r4, r4, #104	; 0x68
   86276:	d1ee      	bne.n	86256 <_fwalk_reent+0x1a>
   86278:	6836      	ldr	r6, [r6, #0]
   8627a:	2e00      	cmp	r6, #0
   8627c:	d1e7      	bne.n	8624e <_fwalk_reent+0x12>
   8627e:	4648      	mov	r0, r9
   86280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   86284:	46b1      	mov	r9, r6
   86286:	4648      	mov	r0, r9
   86288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0008628c <__locale_charset>:
   8628c:	4800      	ldr	r0, [pc, #0]	; (86290 <__locale_charset+0x4>)
   8628e:	4770      	bx	lr
   86290:	200704dc 	.word	0x200704dc

00086294 <__locale_mb_cur_max>:
   86294:	4b01      	ldr	r3, [pc, #4]	; (8629c <__locale_mb_cur_max+0x8>)
   86296:	6818      	ldr	r0, [r3, #0]
   86298:	4770      	bx	lr
   8629a:	bf00      	nop
   8629c:	200704fc 	.word	0x200704fc

000862a0 <__swhatbuf_r>:
   862a0:	b570      	push	{r4, r5, r6, lr}
   862a2:	460e      	mov	r6, r1
   862a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   862a8:	b090      	sub	sp, #64	; 0x40
   862aa:	2900      	cmp	r1, #0
   862ac:	4614      	mov	r4, r2
   862ae:	461d      	mov	r5, r3
   862b0:	db14      	blt.n	862dc <__swhatbuf_r+0x3c>
   862b2:	aa01      	add	r2, sp, #4
   862b4:	f000 ffca 	bl	8724c <_fstat_r>
   862b8:	2800      	cmp	r0, #0
   862ba:	db0f      	blt.n	862dc <__swhatbuf_r+0x3c>
   862bc:	9a02      	ldr	r2, [sp, #8]
   862be:	f44f 6380 	mov.w	r3, #1024	; 0x400
   862c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   862c6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   862ca:	fab2 f282 	clz	r2, r2
   862ce:	f44f 6000 	mov.w	r0, #2048	; 0x800
   862d2:	0952      	lsrs	r2, r2, #5
   862d4:	602a      	str	r2, [r5, #0]
   862d6:	6023      	str	r3, [r4, #0]
   862d8:	b010      	add	sp, #64	; 0x40
   862da:	bd70      	pop	{r4, r5, r6, pc}
   862dc:	89b2      	ldrh	r2, [r6, #12]
   862de:	2000      	movs	r0, #0
   862e0:	f002 0280 	and.w	r2, r2, #128	; 0x80
   862e4:	b292      	uxth	r2, r2
   862e6:	6028      	str	r0, [r5, #0]
   862e8:	b11a      	cbz	r2, 862f2 <__swhatbuf_r+0x52>
   862ea:	2340      	movs	r3, #64	; 0x40
   862ec:	6023      	str	r3, [r4, #0]
   862ee:	b010      	add	sp, #64	; 0x40
   862f0:	bd70      	pop	{r4, r5, r6, pc}
   862f2:	4610      	mov	r0, r2
   862f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   862f8:	6023      	str	r3, [r4, #0]
   862fa:	b010      	add	sp, #64	; 0x40
   862fc:	bd70      	pop	{r4, r5, r6, pc}
   862fe:	bf00      	nop

00086300 <__smakebuf_r>:
   86300:	898a      	ldrh	r2, [r1, #12]
   86302:	460b      	mov	r3, r1
   86304:	0792      	lsls	r2, r2, #30
   86306:	d506      	bpl.n	86316 <__smakebuf_r+0x16>
   86308:	f101 0243 	add.w	r2, r1, #67	; 0x43
   8630c:	2101      	movs	r1, #1
   8630e:	601a      	str	r2, [r3, #0]
   86310:	611a      	str	r2, [r3, #16]
   86312:	6159      	str	r1, [r3, #20]
   86314:	4770      	bx	lr
   86316:	b5f0      	push	{r4, r5, r6, r7, lr}
   86318:	b083      	sub	sp, #12
   8631a:	ab01      	add	r3, sp, #4
   8631c:	466a      	mov	r2, sp
   8631e:	460c      	mov	r4, r1
   86320:	4605      	mov	r5, r0
   86322:	f7ff ffbd 	bl	862a0 <__swhatbuf_r>
   86326:	9900      	ldr	r1, [sp, #0]
   86328:	4606      	mov	r6, r0
   8632a:	4628      	mov	r0, r5
   8632c:	f000 f834 	bl	86398 <_malloc_r>
   86330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   86334:	b1d0      	cbz	r0, 8636c <__smakebuf_r+0x6c>
   86336:	e89d 0006 	ldmia.w	sp, {r1, r2}
   8633a:	4f12      	ldr	r7, [pc, #72]	; (86384 <__smakebuf_r+0x84>)
   8633c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   86340:	63ef      	str	r7, [r5, #60]	; 0x3c
   86342:	81a3      	strh	r3, [r4, #12]
   86344:	6020      	str	r0, [r4, #0]
   86346:	6120      	str	r0, [r4, #16]
   86348:	6161      	str	r1, [r4, #20]
   8634a:	b91a      	cbnz	r2, 86354 <__smakebuf_r+0x54>
   8634c:	4333      	orrs	r3, r6
   8634e:	81a3      	strh	r3, [r4, #12]
   86350:	b003      	add	sp, #12
   86352:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86354:	4628      	mov	r0, r5
   86356:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8635a:	f000 ff8b 	bl	87274 <_isatty_r>
   8635e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   86362:	2800      	cmp	r0, #0
   86364:	d0f2      	beq.n	8634c <__smakebuf_r+0x4c>
   86366:	f043 0301 	orr.w	r3, r3, #1
   8636a:	e7ef      	b.n	8634c <__smakebuf_r+0x4c>
   8636c:	059a      	lsls	r2, r3, #22
   8636e:	d4ef      	bmi.n	86350 <__smakebuf_r+0x50>
   86370:	f104 0243 	add.w	r2, r4, #67	; 0x43
   86374:	f043 0302 	orr.w	r3, r3, #2
   86378:	2101      	movs	r1, #1
   8637a:	81a3      	strh	r3, [r4, #12]
   8637c:	6022      	str	r2, [r4, #0]
   8637e:	6122      	str	r2, [r4, #16]
   86380:	6161      	str	r1, [r4, #20]
   86382:	e7e5      	b.n	86350 <__smakebuf_r+0x50>
   86384:	00085ad9 	.word	0x00085ad9

00086388 <malloc>:
   86388:	4b02      	ldr	r3, [pc, #8]	; (86394 <malloc+0xc>)
   8638a:	4601      	mov	r1, r0
   8638c:	6818      	ldr	r0, [r3, #0]
   8638e:	f000 b803 	b.w	86398 <_malloc_r>
   86392:	bf00      	nop
   86394:	200704d8 	.word	0x200704d8

00086398 <_malloc_r>:
   86398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8639c:	f101 050b 	add.w	r5, r1, #11
   863a0:	2d16      	cmp	r5, #22
   863a2:	b083      	sub	sp, #12
   863a4:	4606      	mov	r6, r0
   863a6:	f240 80a0 	bls.w	864ea <_malloc_r+0x152>
   863aa:	f035 0507 	bics.w	r5, r5, #7
   863ae:	f100 80c0 	bmi.w	86532 <_malloc_r+0x19a>
   863b2:	42a9      	cmp	r1, r5
   863b4:	f200 80bd 	bhi.w	86532 <_malloc_r+0x19a>
   863b8:	f000 fbba 	bl	86b30 <__malloc_lock>
   863bc:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   863c0:	f0c0 8290 	bcc.w	868e4 <_malloc_r+0x54c>
   863c4:	0a6b      	lsrs	r3, r5, #9
   863c6:	f000 80bb 	beq.w	86540 <_malloc_r+0x1a8>
   863ca:	2b04      	cmp	r3, #4
   863cc:	f200 8177 	bhi.w	866be <_malloc_r+0x326>
   863d0:	09a8      	lsrs	r0, r5, #6
   863d2:	f100 0e39 	add.w	lr, r0, #57	; 0x39
   863d6:	ea4f 014e 	mov.w	r1, lr, lsl #1
   863da:	3038      	adds	r0, #56	; 0x38
   863dc:	4fbe      	ldr	r7, [pc, #760]	; (866d8 <_malloc_r+0x340>)
   863de:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   863e2:	684c      	ldr	r4, [r1, #4]
   863e4:	3908      	subs	r1, #8
   863e6:	42a1      	cmp	r1, r4
   863e8:	d107      	bne.n	863fa <_malloc_r+0x62>
   863ea:	e0ae      	b.n	8654a <_malloc_r+0x1b2>
   863ec:	2a00      	cmp	r2, #0
   863ee:	f280 80ae 	bge.w	8654e <_malloc_r+0x1b6>
   863f2:	68e4      	ldr	r4, [r4, #12]
   863f4:	42a1      	cmp	r1, r4
   863f6:	f000 80a8 	beq.w	8654a <_malloc_r+0x1b2>
   863fa:	6863      	ldr	r3, [r4, #4]
   863fc:	f023 0303 	bic.w	r3, r3, #3
   86400:	1b5a      	subs	r2, r3, r5
   86402:	2a0f      	cmp	r2, #15
   86404:	ddf2      	ble.n	863ec <_malloc_r+0x54>
   86406:	49b4      	ldr	r1, [pc, #720]	; (866d8 <_malloc_r+0x340>)
   86408:	693c      	ldr	r4, [r7, #16]
   8640a:	f101 0e08 	add.w	lr, r1, #8
   8640e:	4574      	cmp	r4, lr
   86410:	f000 81a8 	beq.w	86764 <_malloc_r+0x3cc>
   86414:	6863      	ldr	r3, [r4, #4]
   86416:	f023 0303 	bic.w	r3, r3, #3
   8641a:	1b5a      	subs	r2, r3, r5
   8641c:	2a0f      	cmp	r2, #15
   8641e:	f300 818e 	bgt.w	8673e <_malloc_r+0x3a6>
   86422:	2a00      	cmp	r2, #0
   86424:	f8c1 e014 	str.w	lr, [r1, #20]
   86428:	f8c1 e010 	str.w	lr, [r1, #16]
   8642c:	f280 8093 	bge.w	86556 <_malloc_r+0x1be>
   86430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   86434:	f080 815c 	bcs.w	866f0 <_malloc_r+0x358>
   86438:	08db      	lsrs	r3, r3, #3
   8643a:	684a      	ldr	r2, [r1, #4]
   8643c:	ea4f 09a3 	mov.w	r9, r3, asr #2
   86440:	f04f 0c01 	mov.w	ip, #1
   86444:	3301      	adds	r3, #1
   86446:	f851 8033 	ldr.w	r8, [r1, r3, lsl #3]
   8644a:	fa0c f909 	lsl.w	r9, ip, r9
   8644e:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
   86452:	ea49 0202 	orr.w	r2, r9, r2
   86456:	f1ac 0c08 	sub.w	ip, ip, #8
   8645a:	f8c4 c00c 	str.w	ip, [r4, #12]
   8645e:	f8c4 8008 	str.w	r8, [r4, #8]
   86462:	604a      	str	r2, [r1, #4]
   86464:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   86468:	f8c8 400c 	str.w	r4, [r8, #12]
   8646c:	1083      	asrs	r3, r0, #2
   8646e:	2401      	movs	r4, #1
   86470:	409c      	lsls	r4, r3
   86472:	4294      	cmp	r4, r2
   86474:	d87c      	bhi.n	86570 <_malloc_r+0x1d8>
   86476:	4214      	tst	r4, r2
   86478:	d106      	bne.n	86488 <_malloc_r+0xf0>
   8647a:	f020 0003 	bic.w	r0, r0, #3
   8647e:	0064      	lsls	r4, r4, #1
   86480:	4214      	tst	r4, r2
   86482:	f100 0004 	add.w	r0, r0, #4
   86486:	d0fa      	beq.n	8647e <_malloc_r+0xe6>
   86488:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   8648c:	46cc      	mov	ip, r9
   8648e:	4680      	mov	r8, r0
   86490:	f8dc 100c 	ldr.w	r1, [ip, #12]
   86494:	458c      	cmp	ip, r1
   86496:	d107      	bne.n	864a8 <_malloc_r+0x110>
   86498:	e166      	b.n	86768 <_malloc_r+0x3d0>
   8649a:	2a00      	cmp	r2, #0
   8649c:	f280 8174 	bge.w	86788 <_malloc_r+0x3f0>
   864a0:	68c9      	ldr	r1, [r1, #12]
   864a2:	458c      	cmp	ip, r1
   864a4:	f000 8160 	beq.w	86768 <_malloc_r+0x3d0>
   864a8:	684b      	ldr	r3, [r1, #4]
   864aa:	f023 0303 	bic.w	r3, r3, #3
   864ae:	1b5a      	subs	r2, r3, r5
   864b0:	2a0f      	cmp	r2, #15
   864b2:	ddf2      	ble.n	8649a <_malloc_r+0x102>
   864b4:	460c      	mov	r4, r1
   864b6:	68cb      	ldr	r3, [r1, #12]
   864b8:	f854 cf08 	ldr.w	ip, [r4, #8]!
   864bc:	f045 0801 	orr.w	r8, r5, #1
   864c0:	f8c1 8004 	str.w	r8, [r1, #4]
   864c4:	440d      	add	r5, r1
   864c6:	f042 0101 	orr.w	r1, r2, #1
   864ca:	f8cc 300c 	str.w	r3, [ip, #12]
   864ce:	4630      	mov	r0, r6
   864d0:	f8c3 c008 	str.w	ip, [r3, #8]
   864d4:	617d      	str	r5, [r7, #20]
   864d6:	613d      	str	r5, [r7, #16]
   864d8:	f8c5 e00c 	str.w	lr, [r5, #12]
   864dc:	f8c5 e008 	str.w	lr, [r5, #8]
   864e0:	6069      	str	r1, [r5, #4]
   864e2:	50aa      	str	r2, [r5, r2]
   864e4:	f000 fb26 	bl	86b34 <__malloc_unlock>
   864e8:	e01f      	b.n	8652a <_malloc_r+0x192>
   864ea:	2910      	cmp	r1, #16
   864ec:	d821      	bhi.n	86532 <_malloc_r+0x19a>
   864ee:	f000 fb1f 	bl	86b30 <__malloc_lock>
   864f2:	2510      	movs	r5, #16
   864f4:	2306      	movs	r3, #6
   864f6:	2002      	movs	r0, #2
   864f8:	4f77      	ldr	r7, [pc, #476]	; (866d8 <_malloc_r+0x340>)
   864fa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   864fe:	685c      	ldr	r4, [r3, #4]
   86500:	f1a3 0208 	sub.w	r2, r3, #8
   86504:	4294      	cmp	r4, r2
   86506:	f000 8138 	beq.w	8677a <_malloc_r+0x3e2>
   8650a:	6863      	ldr	r3, [r4, #4]
   8650c:	68e1      	ldr	r1, [r4, #12]
   8650e:	f023 0303 	bic.w	r3, r3, #3
   86512:	4423      	add	r3, r4
   86514:	685a      	ldr	r2, [r3, #4]
   86516:	68a5      	ldr	r5, [r4, #8]
   86518:	f042 0201 	orr.w	r2, r2, #1
   8651c:	60e9      	str	r1, [r5, #12]
   8651e:	4630      	mov	r0, r6
   86520:	608d      	str	r5, [r1, #8]
   86522:	605a      	str	r2, [r3, #4]
   86524:	f000 fb06 	bl	86b34 <__malloc_unlock>
   86528:	3408      	adds	r4, #8
   8652a:	4620      	mov	r0, r4
   8652c:	b003      	add	sp, #12
   8652e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86532:	2400      	movs	r4, #0
   86534:	4620      	mov	r0, r4
   86536:	230c      	movs	r3, #12
   86538:	6033      	str	r3, [r6, #0]
   8653a:	b003      	add	sp, #12
   8653c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86540:	2180      	movs	r1, #128	; 0x80
   86542:	f04f 0e40 	mov.w	lr, #64	; 0x40
   86546:	203f      	movs	r0, #63	; 0x3f
   86548:	e748      	b.n	863dc <_malloc_r+0x44>
   8654a:	4670      	mov	r0, lr
   8654c:	e75b      	b.n	86406 <_malloc_r+0x6e>
   8654e:	4423      	add	r3, r4
   86550:	685a      	ldr	r2, [r3, #4]
   86552:	68e1      	ldr	r1, [r4, #12]
   86554:	e7df      	b.n	86516 <_malloc_r+0x17e>
   86556:	4423      	add	r3, r4
   86558:	685a      	ldr	r2, [r3, #4]
   8655a:	4630      	mov	r0, r6
   8655c:	f042 0201 	orr.w	r2, r2, #1
   86560:	605a      	str	r2, [r3, #4]
   86562:	3408      	adds	r4, #8
   86564:	f000 fae6 	bl	86b34 <__malloc_unlock>
   86568:	4620      	mov	r0, r4
   8656a:	b003      	add	sp, #12
   8656c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86570:	68bc      	ldr	r4, [r7, #8]
   86572:	6863      	ldr	r3, [r4, #4]
   86574:	f023 0803 	bic.w	r8, r3, #3
   86578:	45a8      	cmp	r8, r5
   8657a:	d304      	bcc.n	86586 <_malloc_r+0x1ee>
   8657c:	ebc5 0308 	rsb	r3, r5, r8
   86580:	2b0f      	cmp	r3, #15
   86582:	f300 808c 	bgt.w	8669e <_malloc_r+0x306>
   86586:	4b55      	ldr	r3, [pc, #340]	; (866dc <_malloc_r+0x344>)
   86588:	f8df 9160 	ldr.w	r9, [pc, #352]	; 866ec <_malloc_r+0x354>
   8658c:	681a      	ldr	r2, [r3, #0]
   8658e:	f8d9 3000 	ldr.w	r3, [r9]
   86592:	442a      	add	r2, r5
   86594:	3301      	adds	r3, #1
   86596:	eb04 0a08 	add.w	sl, r4, r8
   8659a:	f000 8160 	beq.w	8685e <_malloc_r+0x4c6>
   8659e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   865a2:	320f      	adds	r2, #15
   865a4:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   865a8:	f022 020f 	bic.w	r2, r2, #15
   865ac:	4611      	mov	r1, r2
   865ae:	4630      	mov	r0, r6
   865b0:	9201      	str	r2, [sp, #4]
   865b2:	f000 fcab 	bl	86f0c <_sbrk_r>
   865b6:	f1b0 3fff 	cmp.w	r0, #4294967295
   865ba:	4683      	mov	fp, r0
   865bc:	9a01      	ldr	r2, [sp, #4]
   865be:	f000 8158 	beq.w	86872 <_malloc_r+0x4da>
   865c2:	4582      	cmp	sl, r0
   865c4:	f200 80fc 	bhi.w	867c0 <_malloc_r+0x428>
   865c8:	4b45      	ldr	r3, [pc, #276]	; (866e0 <_malloc_r+0x348>)
   865ca:	45da      	cmp	sl, fp
   865cc:	6819      	ldr	r1, [r3, #0]
   865ce:	4411      	add	r1, r2
   865d0:	6019      	str	r1, [r3, #0]
   865d2:	f000 8153 	beq.w	8687c <_malloc_r+0x4e4>
   865d6:	f8d9 0000 	ldr.w	r0, [r9]
   865da:	f8df e110 	ldr.w	lr, [pc, #272]	; 866ec <_malloc_r+0x354>
   865de:	3001      	adds	r0, #1
   865e0:	bf1b      	ittet	ne
   865e2:	ebca 0a0b 	rsbne	sl, sl, fp
   865e6:	4451      	addne	r1, sl
   865e8:	f8ce b000 	streq.w	fp, [lr]
   865ec:	6019      	strne	r1, [r3, #0]
   865ee:	f01b 0107 	ands.w	r1, fp, #7
   865f2:	f000 8117 	beq.w	86824 <_malloc_r+0x48c>
   865f6:	f1c1 0008 	rsb	r0, r1, #8
   865fa:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   865fe:	4483      	add	fp, r0
   86600:	3108      	adds	r1, #8
   86602:	445a      	add	r2, fp
   86604:	f3c2 020b 	ubfx	r2, r2, #0, #12
   86608:	ebc2 0901 	rsb	r9, r2, r1
   8660c:	4649      	mov	r1, r9
   8660e:	4630      	mov	r0, r6
   86610:	9301      	str	r3, [sp, #4]
   86612:	f000 fc7b 	bl	86f0c <_sbrk_r>
   86616:	1c43      	adds	r3, r0, #1
   86618:	9b01      	ldr	r3, [sp, #4]
   8661a:	f000 813f 	beq.w	8689c <_malloc_r+0x504>
   8661e:	ebcb 0200 	rsb	r2, fp, r0
   86622:	444a      	add	r2, r9
   86624:	f042 0201 	orr.w	r2, r2, #1
   86628:	6819      	ldr	r1, [r3, #0]
   8662a:	42bc      	cmp	r4, r7
   8662c:	4449      	add	r1, r9
   8662e:	f8c7 b008 	str.w	fp, [r7, #8]
   86632:	6019      	str	r1, [r3, #0]
   86634:	f8cb 2004 	str.w	r2, [fp, #4]
   86638:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 866e0 <_malloc_r+0x348>
   8663c:	d016      	beq.n	8666c <_malloc_r+0x2d4>
   8663e:	f1b8 0f0f 	cmp.w	r8, #15
   86642:	f240 80fd 	bls.w	86840 <_malloc_r+0x4a8>
   86646:	6862      	ldr	r2, [r4, #4]
   86648:	f1a8 030c 	sub.w	r3, r8, #12
   8664c:	f023 0307 	bic.w	r3, r3, #7
   86650:	f002 0201 	and.w	r2, r2, #1
   86654:	18e0      	adds	r0, r4, r3
   86656:	f04f 0e05 	mov.w	lr, #5
   8665a:	431a      	orrs	r2, r3
   8665c:	2b0f      	cmp	r3, #15
   8665e:	6062      	str	r2, [r4, #4]
   86660:	f8c0 e004 	str.w	lr, [r0, #4]
   86664:	f8c0 e008 	str.w	lr, [r0, #8]
   86668:	f200 811c 	bhi.w	868a4 <_malloc_r+0x50c>
   8666c:	4b1d      	ldr	r3, [pc, #116]	; (866e4 <_malloc_r+0x34c>)
   8666e:	68bc      	ldr	r4, [r7, #8]
   86670:	681a      	ldr	r2, [r3, #0]
   86672:	4291      	cmp	r1, r2
   86674:	bf88      	it	hi
   86676:	6019      	strhi	r1, [r3, #0]
   86678:	4b1b      	ldr	r3, [pc, #108]	; (866e8 <_malloc_r+0x350>)
   8667a:	681a      	ldr	r2, [r3, #0]
   8667c:	4291      	cmp	r1, r2
   8667e:	6862      	ldr	r2, [r4, #4]
   86680:	bf88      	it	hi
   86682:	6019      	strhi	r1, [r3, #0]
   86684:	f022 0203 	bic.w	r2, r2, #3
   86688:	4295      	cmp	r5, r2
   8668a:	eba2 0305 	sub.w	r3, r2, r5
   8668e:	d801      	bhi.n	86694 <_malloc_r+0x2fc>
   86690:	2b0f      	cmp	r3, #15
   86692:	dc04      	bgt.n	8669e <_malloc_r+0x306>
   86694:	4630      	mov	r0, r6
   86696:	f000 fa4d 	bl	86b34 <__malloc_unlock>
   8669a:	2400      	movs	r4, #0
   8669c:	e745      	b.n	8652a <_malloc_r+0x192>
   8669e:	f045 0201 	orr.w	r2, r5, #1
   866a2:	f043 0301 	orr.w	r3, r3, #1
   866a6:	4425      	add	r5, r4
   866a8:	6062      	str	r2, [r4, #4]
   866aa:	4630      	mov	r0, r6
   866ac:	60bd      	str	r5, [r7, #8]
   866ae:	3408      	adds	r4, #8
   866b0:	606b      	str	r3, [r5, #4]
   866b2:	f000 fa3f 	bl	86b34 <__malloc_unlock>
   866b6:	4620      	mov	r0, r4
   866b8:	b003      	add	sp, #12
   866ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   866be:	2b14      	cmp	r3, #20
   866c0:	d971      	bls.n	867a6 <_malloc_r+0x40e>
   866c2:	2b54      	cmp	r3, #84	; 0x54
   866c4:	f200 80a4 	bhi.w	86810 <_malloc_r+0x478>
   866c8:	0b28      	lsrs	r0, r5, #12
   866ca:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
   866ce:	ea4f 014e 	mov.w	r1, lr, lsl #1
   866d2:	306e      	adds	r0, #110	; 0x6e
   866d4:	e682      	b.n	863dc <_malloc_r+0x44>
   866d6:	bf00      	nop
   866d8:	20070500 	.word	0x20070500
   866dc:	20070a14 	.word	0x20070a14
   866e0:	20070a18 	.word	0x20070a18
   866e4:	20070a10 	.word	0x20070a10
   866e8:	20070a0c 	.word	0x20070a0c
   866ec:	2007090c 	.word	0x2007090c
   866f0:	0a5a      	lsrs	r2, r3, #9
   866f2:	2a04      	cmp	r2, #4
   866f4:	d95e      	bls.n	867b4 <_malloc_r+0x41c>
   866f6:	2a14      	cmp	r2, #20
   866f8:	f200 80b3 	bhi.w	86862 <_malloc_r+0x4ca>
   866fc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   86700:	0049      	lsls	r1, r1, #1
   86702:	325b      	adds	r2, #91	; 0x5b
   86704:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   86708:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   8670c:	f1ac 0c08 	sub.w	ip, ip, #8
   86710:	458c      	cmp	ip, r1
   86712:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 868ec <_malloc_r+0x554>
   86716:	f000 8088 	beq.w	8682a <_malloc_r+0x492>
   8671a:	684a      	ldr	r2, [r1, #4]
   8671c:	f022 0203 	bic.w	r2, r2, #3
   86720:	4293      	cmp	r3, r2
   86722:	d202      	bcs.n	8672a <_malloc_r+0x392>
   86724:	6889      	ldr	r1, [r1, #8]
   86726:	458c      	cmp	ip, r1
   86728:	d1f7      	bne.n	8671a <_malloc_r+0x382>
   8672a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   8672e:	687a      	ldr	r2, [r7, #4]
   86730:	f8c4 c00c 	str.w	ip, [r4, #12]
   86734:	60a1      	str	r1, [r4, #8]
   86736:	f8cc 4008 	str.w	r4, [ip, #8]
   8673a:	60cc      	str	r4, [r1, #12]
   8673c:	e696      	b.n	8646c <_malloc_r+0xd4>
   8673e:	f045 0701 	orr.w	r7, r5, #1
   86742:	f042 0301 	orr.w	r3, r2, #1
   86746:	4425      	add	r5, r4
   86748:	6067      	str	r7, [r4, #4]
   8674a:	4630      	mov	r0, r6
   8674c:	614d      	str	r5, [r1, #20]
   8674e:	610d      	str	r5, [r1, #16]
   86750:	f8c5 e00c 	str.w	lr, [r5, #12]
   86754:	f8c5 e008 	str.w	lr, [r5, #8]
   86758:	606b      	str	r3, [r5, #4]
   8675a:	50aa      	str	r2, [r5, r2]
   8675c:	3408      	adds	r4, #8
   8675e:	f000 f9e9 	bl	86b34 <__malloc_unlock>
   86762:	e6e2      	b.n	8652a <_malloc_r+0x192>
   86764:	684a      	ldr	r2, [r1, #4]
   86766:	e681      	b.n	8646c <_malloc_r+0xd4>
   86768:	f108 0801 	add.w	r8, r8, #1
   8676c:	f018 0f03 	tst.w	r8, #3
   86770:	f10c 0c08 	add.w	ip, ip, #8
   86774:	f47f ae8c 	bne.w	86490 <_malloc_r+0xf8>
   86778:	e030      	b.n	867dc <_malloc_r+0x444>
   8677a:	68dc      	ldr	r4, [r3, #12]
   8677c:	42a3      	cmp	r3, r4
   8677e:	bf08      	it	eq
   86780:	3002      	addeq	r0, #2
   86782:	f43f ae40 	beq.w	86406 <_malloc_r+0x6e>
   86786:	e6c0      	b.n	8650a <_malloc_r+0x172>
   86788:	460c      	mov	r4, r1
   8678a:	440b      	add	r3, r1
   8678c:	685a      	ldr	r2, [r3, #4]
   8678e:	68c9      	ldr	r1, [r1, #12]
   86790:	f854 5f08 	ldr.w	r5, [r4, #8]!
   86794:	f042 0201 	orr.w	r2, r2, #1
   86798:	605a      	str	r2, [r3, #4]
   8679a:	4630      	mov	r0, r6
   8679c:	60e9      	str	r1, [r5, #12]
   8679e:	608d      	str	r5, [r1, #8]
   867a0:	f000 f9c8 	bl	86b34 <__malloc_unlock>
   867a4:	e6c1      	b.n	8652a <_malloc_r+0x192>
   867a6:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
   867aa:	f103 005b 	add.w	r0, r3, #91	; 0x5b
   867ae:	ea4f 014e 	mov.w	r1, lr, lsl #1
   867b2:	e613      	b.n	863dc <_malloc_r+0x44>
   867b4:	099a      	lsrs	r2, r3, #6
   867b6:	f102 0139 	add.w	r1, r2, #57	; 0x39
   867ba:	0049      	lsls	r1, r1, #1
   867bc:	3238      	adds	r2, #56	; 0x38
   867be:	e7a1      	b.n	86704 <_malloc_r+0x36c>
   867c0:	42bc      	cmp	r4, r7
   867c2:	4b4a      	ldr	r3, [pc, #296]	; (868ec <_malloc_r+0x554>)
   867c4:	f43f af00 	beq.w	865c8 <_malloc_r+0x230>
   867c8:	689c      	ldr	r4, [r3, #8]
   867ca:	6862      	ldr	r2, [r4, #4]
   867cc:	f022 0203 	bic.w	r2, r2, #3
   867d0:	e75a      	b.n	86688 <_malloc_r+0x2f0>
   867d2:	f859 3908 	ldr.w	r3, [r9], #-8
   867d6:	4599      	cmp	r9, r3
   867d8:	f040 8082 	bne.w	868e0 <_malloc_r+0x548>
   867dc:	f010 0f03 	tst.w	r0, #3
   867e0:	f100 30ff 	add.w	r0, r0, #4294967295
   867e4:	d1f5      	bne.n	867d2 <_malloc_r+0x43a>
   867e6:	687b      	ldr	r3, [r7, #4]
   867e8:	ea23 0304 	bic.w	r3, r3, r4
   867ec:	607b      	str	r3, [r7, #4]
   867ee:	0064      	lsls	r4, r4, #1
   867f0:	429c      	cmp	r4, r3
   867f2:	f63f aebd 	bhi.w	86570 <_malloc_r+0x1d8>
   867f6:	2c00      	cmp	r4, #0
   867f8:	f43f aeba 	beq.w	86570 <_malloc_r+0x1d8>
   867fc:	421c      	tst	r4, r3
   867fe:	4640      	mov	r0, r8
   86800:	f47f ae42 	bne.w	86488 <_malloc_r+0xf0>
   86804:	0064      	lsls	r4, r4, #1
   86806:	421c      	tst	r4, r3
   86808:	f100 0004 	add.w	r0, r0, #4
   8680c:	d0fa      	beq.n	86804 <_malloc_r+0x46c>
   8680e:	e63b      	b.n	86488 <_malloc_r+0xf0>
   86810:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   86814:	d818      	bhi.n	86848 <_malloc_r+0x4b0>
   86816:	0be8      	lsrs	r0, r5, #15
   86818:	f100 0e78 	add.w	lr, r0, #120	; 0x78
   8681c:	ea4f 014e 	mov.w	r1, lr, lsl #1
   86820:	3077      	adds	r0, #119	; 0x77
   86822:	e5db      	b.n	863dc <_malloc_r+0x44>
   86824:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   86828:	e6eb      	b.n	86602 <_malloc_r+0x26a>
   8682a:	2101      	movs	r1, #1
   8682c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   86830:	1092      	asrs	r2, r2, #2
   86832:	fa01 f202 	lsl.w	r2, r1, r2
   86836:	431a      	orrs	r2, r3
   86838:	f8c8 2004 	str.w	r2, [r8, #4]
   8683c:	4661      	mov	r1, ip
   8683e:	e777      	b.n	86730 <_malloc_r+0x398>
   86840:	2301      	movs	r3, #1
   86842:	f8cb 3004 	str.w	r3, [fp, #4]
   86846:	e725      	b.n	86694 <_malloc_r+0x2fc>
   86848:	f240 5254 	movw	r2, #1364	; 0x554
   8684c:	4293      	cmp	r3, r2
   8684e:	d820      	bhi.n	86892 <_malloc_r+0x4fa>
   86850:	0ca8      	lsrs	r0, r5, #18
   86852:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
   86856:	ea4f 014e 	mov.w	r1, lr, lsl #1
   8685a:	307c      	adds	r0, #124	; 0x7c
   8685c:	e5be      	b.n	863dc <_malloc_r+0x44>
   8685e:	3210      	adds	r2, #16
   86860:	e6a4      	b.n	865ac <_malloc_r+0x214>
   86862:	2a54      	cmp	r2, #84	; 0x54
   86864:	d826      	bhi.n	868b4 <_malloc_r+0x51c>
   86866:	0b1a      	lsrs	r2, r3, #12
   86868:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   8686c:	0049      	lsls	r1, r1, #1
   8686e:	326e      	adds	r2, #110	; 0x6e
   86870:	e748      	b.n	86704 <_malloc_r+0x36c>
   86872:	68bc      	ldr	r4, [r7, #8]
   86874:	6862      	ldr	r2, [r4, #4]
   86876:	f022 0203 	bic.w	r2, r2, #3
   8687a:	e705      	b.n	86688 <_malloc_r+0x2f0>
   8687c:	f3ca 000b 	ubfx	r0, sl, #0, #12
   86880:	2800      	cmp	r0, #0
   86882:	f47f aea8 	bne.w	865d6 <_malloc_r+0x23e>
   86886:	4442      	add	r2, r8
   86888:	68bb      	ldr	r3, [r7, #8]
   8688a:	f042 0201 	orr.w	r2, r2, #1
   8688e:	605a      	str	r2, [r3, #4]
   86890:	e6ec      	b.n	8666c <_malloc_r+0x2d4>
   86892:	21fe      	movs	r1, #254	; 0xfe
   86894:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
   86898:	207e      	movs	r0, #126	; 0x7e
   8689a:	e59f      	b.n	863dc <_malloc_r+0x44>
   8689c:	2201      	movs	r2, #1
   8689e:	f04f 0900 	mov.w	r9, #0
   868a2:	e6c1      	b.n	86628 <_malloc_r+0x290>
   868a4:	f104 0108 	add.w	r1, r4, #8
   868a8:	4630      	mov	r0, r6
   868aa:	f7ff fa5b 	bl	85d64 <_free_r>
   868ae:	f8d9 1000 	ldr.w	r1, [r9]
   868b2:	e6db      	b.n	8666c <_malloc_r+0x2d4>
   868b4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   868b8:	d805      	bhi.n	868c6 <_malloc_r+0x52e>
   868ba:	0bda      	lsrs	r2, r3, #15
   868bc:	f102 0178 	add.w	r1, r2, #120	; 0x78
   868c0:	0049      	lsls	r1, r1, #1
   868c2:	3277      	adds	r2, #119	; 0x77
   868c4:	e71e      	b.n	86704 <_malloc_r+0x36c>
   868c6:	f240 5154 	movw	r1, #1364	; 0x554
   868ca:	428a      	cmp	r2, r1
   868cc:	d805      	bhi.n	868da <_malloc_r+0x542>
   868ce:	0c9a      	lsrs	r2, r3, #18
   868d0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   868d4:	0049      	lsls	r1, r1, #1
   868d6:	327c      	adds	r2, #124	; 0x7c
   868d8:	e714      	b.n	86704 <_malloc_r+0x36c>
   868da:	21fe      	movs	r1, #254	; 0xfe
   868dc:	227e      	movs	r2, #126	; 0x7e
   868de:	e711      	b.n	86704 <_malloc_r+0x36c>
   868e0:	687b      	ldr	r3, [r7, #4]
   868e2:	e784      	b.n	867ee <_malloc_r+0x456>
   868e4:	08e8      	lsrs	r0, r5, #3
   868e6:	1c43      	adds	r3, r0, #1
   868e8:	005b      	lsls	r3, r3, #1
   868ea:	e605      	b.n	864f8 <_malloc_r+0x160>
   868ec:	20070500 	.word	0x20070500

000868f0 <memchr>:
   868f0:	0783      	lsls	r3, r0, #30
   868f2:	b470      	push	{r4, r5, r6}
   868f4:	b2cd      	uxtb	r5, r1
   868f6:	d03d      	beq.n	86974 <memchr+0x84>
   868f8:	1e53      	subs	r3, r2, #1
   868fa:	b302      	cbz	r2, 8693e <memchr+0x4e>
   868fc:	7802      	ldrb	r2, [r0, #0]
   868fe:	42aa      	cmp	r2, r5
   86900:	d01e      	beq.n	86940 <memchr+0x50>
   86902:	1c42      	adds	r2, r0, #1
   86904:	e004      	b.n	86910 <memchr+0x20>
   86906:	b1d3      	cbz	r3, 8693e <memchr+0x4e>
   86908:	7804      	ldrb	r4, [r0, #0]
   8690a:	3b01      	subs	r3, #1
   8690c:	42ac      	cmp	r4, r5
   8690e:	d017      	beq.n	86940 <memchr+0x50>
   86910:	f012 0f03 	tst.w	r2, #3
   86914:	4610      	mov	r0, r2
   86916:	f102 0201 	add.w	r2, r2, #1
   8691a:	d1f4      	bne.n	86906 <memchr+0x16>
   8691c:	2b03      	cmp	r3, #3
   8691e:	d811      	bhi.n	86944 <memchr+0x54>
   86920:	b353      	cbz	r3, 86978 <memchr+0x88>
   86922:	7802      	ldrb	r2, [r0, #0]
   86924:	42aa      	cmp	r2, r5
   86926:	d00b      	beq.n	86940 <memchr+0x50>
   86928:	4403      	add	r3, r0
   8692a:	1c42      	adds	r2, r0, #1
   8692c:	e002      	b.n	86934 <memchr+0x44>
   8692e:	7801      	ldrb	r1, [r0, #0]
   86930:	42a9      	cmp	r1, r5
   86932:	d005      	beq.n	86940 <memchr+0x50>
   86934:	4293      	cmp	r3, r2
   86936:	4610      	mov	r0, r2
   86938:	f102 0201 	add.w	r2, r2, #1
   8693c:	d1f7      	bne.n	8692e <memchr+0x3e>
   8693e:	2000      	movs	r0, #0
   86940:	bc70      	pop	{r4, r5, r6}
   86942:	4770      	bx	lr
   86944:	4604      	mov	r4, r0
   86946:	020e      	lsls	r6, r1, #8
   86948:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   8694c:	432e      	orrs	r6, r5
   8694e:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   86952:	6822      	ldr	r2, [r4, #0]
   86954:	4620      	mov	r0, r4
   86956:	4072      	eors	r2, r6
   86958:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
   8695c:	ea21 0202 	bic.w	r2, r1, r2
   86960:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   86964:	f104 0404 	add.w	r4, r4, #4
   86968:	d1db      	bne.n	86922 <memchr+0x32>
   8696a:	3b04      	subs	r3, #4
   8696c:	2b03      	cmp	r3, #3
   8696e:	4620      	mov	r0, r4
   86970:	d8ef      	bhi.n	86952 <memchr+0x62>
   86972:	e7d5      	b.n	86920 <memchr+0x30>
   86974:	4613      	mov	r3, r2
   86976:	e7d1      	b.n	8691c <memchr+0x2c>
   86978:	4618      	mov	r0, r3
   8697a:	e7e1      	b.n	86940 <memchr+0x50>

0008697c <memcpy>:
   8697c:	4684      	mov	ip, r0
   8697e:	ea41 0300 	orr.w	r3, r1, r0
   86982:	f013 0303 	ands.w	r3, r3, #3
   86986:	d149      	bne.n	86a1c <memcpy+0xa0>
   86988:	3a40      	subs	r2, #64	; 0x40
   8698a:	d323      	bcc.n	869d4 <memcpy+0x58>
   8698c:	680b      	ldr	r3, [r1, #0]
   8698e:	6003      	str	r3, [r0, #0]
   86990:	684b      	ldr	r3, [r1, #4]
   86992:	6043      	str	r3, [r0, #4]
   86994:	688b      	ldr	r3, [r1, #8]
   86996:	6083      	str	r3, [r0, #8]
   86998:	68cb      	ldr	r3, [r1, #12]
   8699a:	60c3      	str	r3, [r0, #12]
   8699c:	690b      	ldr	r3, [r1, #16]
   8699e:	6103      	str	r3, [r0, #16]
   869a0:	694b      	ldr	r3, [r1, #20]
   869a2:	6143      	str	r3, [r0, #20]
   869a4:	698b      	ldr	r3, [r1, #24]
   869a6:	6183      	str	r3, [r0, #24]
   869a8:	69cb      	ldr	r3, [r1, #28]
   869aa:	61c3      	str	r3, [r0, #28]
   869ac:	6a0b      	ldr	r3, [r1, #32]
   869ae:	6203      	str	r3, [r0, #32]
   869b0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   869b2:	6243      	str	r3, [r0, #36]	; 0x24
   869b4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   869b6:	6283      	str	r3, [r0, #40]	; 0x28
   869b8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   869ba:	62c3      	str	r3, [r0, #44]	; 0x2c
   869bc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   869be:	6303      	str	r3, [r0, #48]	; 0x30
   869c0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   869c2:	6343      	str	r3, [r0, #52]	; 0x34
   869c4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   869c6:	6383      	str	r3, [r0, #56]	; 0x38
   869c8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   869ca:	63c3      	str	r3, [r0, #60]	; 0x3c
   869cc:	3040      	adds	r0, #64	; 0x40
   869ce:	3140      	adds	r1, #64	; 0x40
   869d0:	3a40      	subs	r2, #64	; 0x40
   869d2:	d2db      	bcs.n	8698c <memcpy+0x10>
   869d4:	3230      	adds	r2, #48	; 0x30
   869d6:	d30b      	bcc.n	869f0 <memcpy+0x74>
   869d8:	680b      	ldr	r3, [r1, #0]
   869da:	6003      	str	r3, [r0, #0]
   869dc:	684b      	ldr	r3, [r1, #4]
   869de:	6043      	str	r3, [r0, #4]
   869e0:	688b      	ldr	r3, [r1, #8]
   869e2:	6083      	str	r3, [r0, #8]
   869e4:	68cb      	ldr	r3, [r1, #12]
   869e6:	60c3      	str	r3, [r0, #12]
   869e8:	3010      	adds	r0, #16
   869ea:	3110      	adds	r1, #16
   869ec:	3a10      	subs	r2, #16
   869ee:	d2f3      	bcs.n	869d8 <memcpy+0x5c>
   869f0:	320c      	adds	r2, #12
   869f2:	d305      	bcc.n	86a00 <memcpy+0x84>
   869f4:	f851 3b04 	ldr.w	r3, [r1], #4
   869f8:	f840 3b04 	str.w	r3, [r0], #4
   869fc:	3a04      	subs	r2, #4
   869fe:	d2f9      	bcs.n	869f4 <memcpy+0x78>
   86a00:	3204      	adds	r2, #4
   86a02:	d008      	beq.n	86a16 <memcpy+0x9a>
   86a04:	07d2      	lsls	r2, r2, #31
   86a06:	bf1c      	itt	ne
   86a08:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86a0c:	f800 3b01 	strbne.w	r3, [r0], #1
   86a10:	d301      	bcc.n	86a16 <memcpy+0x9a>
   86a12:	880b      	ldrh	r3, [r1, #0]
   86a14:	8003      	strh	r3, [r0, #0]
   86a16:	4660      	mov	r0, ip
   86a18:	4770      	bx	lr
   86a1a:	bf00      	nop
   86a1c:	2a08      	cmp	r2, #8
   86a1e:	d313      	bcc.n	86a48 <memcpy+0xcc>
   86a20:	078b      	lsls	r3, r1, #30
   86a22:	d0b1      	beq.n	86988 <memcpy+0xc>
   86a24:	f010 0303 	ands.w	r3, r0, #3
   86a28:	d0ae      	beq.n	86988 <memcpy+0xc>
   86a2a:	f1c3 0304 	rsb	r3, r3, #4
   86a2e:	1ad2      	subs	r2, r2, r3
   86a30:	07db      	lsls	r3, r3, #31
   86a32:	bf1c      	itt	ne
   86a34:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86a38:	f800 3b01 	strbne.w	r3, [r0], #1
   86a3c:	d3a4      	bcc.n	86988 <memcpy+0xc>
   86a3e:	f831 3b02 	ldrh.w	r3, [r1], #2
   86a42:	f820 3b02 	strh.w	r3, [r0], #2
   86a46:	e79f      	b.n	86988 <memcpy+0xc>
   86a48:	3a04      	subs	r2, #4
   86a4a:	d3d9      	bcc.n	86a00 <memcpy+0x84>
   86a4c:	3a01      	subs	r2, #1
   86a4e:	f811 3b01 	ldrb.w	r3, [r1], #1
   86a52:	f800 3b01 	strb.w	r3, [r0], #1
   86a56:	d2f9      	bcs.n	86a4c <memcpy+0xd0>
   86a58:	780b      	ldrb	r3, [r1, #0]
   86a5a:	7003      	strb	r3, [r0, #0]
   86a5c:	784b      	ldrb	r3, [r1, #1]
   86a5e:	7043      	strb	r3, [r0, #1]
   86a60:	788b      	ldrb	r3, [r1, #2]
   86a62:	7083      	strb	r3, [r0, #2]
   86a64:	4660      	mov	r0, ip
   86a66:	4770      	bx	lr

00086a68 <memmove>:
   86a68:	4288      	cmp	r0, r1
   86a6a:	b5f0      	push	{r4, r5, r6, r7, lr}
   86a6c:	d90d      	bls.n	86a8a <memmove+0x22>
   86a6e:	188b      	adds	r3, r1, r2
   86a70:	4298      	cmp	r0, r3
   86a72:	d20a      	bcs.n	86a8a <memmove+0x22>
   86a74:	1881      	adds	r1, r0, r2
   86a76:	2a00      	cmp	r2, #0
   86a78:	d051      	beq.n	86b1e <memmove+0xb6>
   86a7a:	1a9a      	subs	r2, r3, r2
   86a7c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   86a80:	4293      	cmp	r3, r2
   86a82:	f801 4d01 	strb.w	r4, [r1, #-1]!
   86a86:	d1f9      	bne.n	86a7c <memmove+0x14>
   86a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86a8a:	2a0f      	cmp	r2, #15
   86a8c:	d948      	bls.n	86b20 <memmove+0xb8>
   86a8e:	ea41 0300 	orr.w	r3, r1, r0
   86a92:	079b      	lsls	r3, r3, #30
   86a94:	d146      	bne.n	86b24 <memmove+0xbc>
   86a96:	4615      	mov	r5, r2
   86a98:	f100 0410 	add.w	r4, r0, #16
   86a9c:	f101 0310 	add.w	r3, r1, #16
   86aa0:	f853 6c10 	ldr.w	r6, [r3, #-16]
   86aa4:	3d10      	subs	r5, #16
   86aa6:	f844 6c10 	str.w	r6, [r4, #-16]
   86aaa:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   86aae:	2d0f      	cmp	r5, #15
   86ab0:	f844 6c0c 	str.w	r6, [r4, #-12]
   86ab4:	f853 6c08 	ldr.w	r6, [r3, #-8]
   86ab8:	f104 0410 	add.w	r4, r4, #16
   86abc:	f844 6c18 	str.w	r6, [r4, #-24]
   86ac0:	f853 6c04 	ldr.w	r6, [r3, #-4]
   86ac4:	f103 0310 	add.w	r3, r3, #16
   86ac8:	f844 6c14 	str.w	r6, [r4, #-20]
   86acc:	d8e8      	bhi.n	86aa0 <memmove+0x38>
   86ace:	f1a2 0310 	sub.w	r3, r2, #16
   86ad2:	f023 030f 	bic.w	r3, r3, #15
   86ad6:	f002 0e0f 	and.w	lr, r2, #15
   86ada:	3310      	adds	r3, #16
   86adc:	f1be 0f03 	cmp.w	lr, #3
   86ae0:	4419      	add	r1, r3
   86ae2:	4403      	add	r3, r0
   86ae4:	d921      	bls.n	86b2a <memmove+0xc2>
   86ae6:	460e      	mov	r6, r1
   86ae8:	4674      	mov	r4, lr
   86aea:	1f1d      	subs	r5, r3, #4
   86aec:	f856 7b04 	ldr.w	r7, [r6], #4
   86af0:	3c04      	subs	r4, #4
   86af2:	2c03      	cmp	r4, #3
   86af4:	f845 7f04 	str.w	r7, [r5, #4]!
   86af8:	d8f8      	bhi.n	86aec <memmove+0x84>
   86afa:	f1ae 0404 	sub.w	r4, lr, #4
   86afe:	f024 0403 	bic.w	r4, r4, #3
   86b02:	3404      	adds	r4, #4
   86b04:	4423      	add	r3, r4
   86b06:	4421      	add	r1, r4
   86b08:	f002 0203 	and.w	r2, r2, #3
   86b0c:	b162      	cbz	r2, 86b28 <memmove+0xc0>
   86b0e:	3b01      	subs	r3, #1
   86b10:	440a      	add	r2, r1
   86b12:	f811 4b01 	ldrb.w	r4, [r1], #1
   86b16:	428a      	cmp	r2, r1
   86b18:	f803 4f01 	strb.w	r4, [r3, #1]!
   86b1c:	d1f9      	bne.n	86b12 <memmove+0xaa>
   86b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86b20:	4603      	mov	r3, r0
   86b22:	e7f3      	b.n	86b0c <memmove+0xa4>
   86b24:	4603      	mov	r3, r0
   86b26:	e7f2      	b.n	86b0e <memmove+0xa6>
   86b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86b2a:	4672      	mov	r2, lr
   86b2c:	e7ee      	b.n	86b0c <memmove+0xa4>
   86b2e:	bf00      	nop

00086b30 <__malloc_lock>:
   86b30:	4770      	bx	lr
   86b32:	bf00      	nop

00086b34 <__malloc_unlock>:
   86b34:	4770      	bx	lr
   86b36:	bf00      	nop

00086b38 <_realloc_r>:
   86b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86b3c:	4617      	mov	r7, r2
   86b3e:	b083      	sub	sp, #12
   86b40:	2900      	cmp	r1, #0
   86b42:	f000 808f 	beq.w	86c64 <_realloc_r+0x12c>
   86b46:	460d      	mov	r5, r1
   86b48:	4681      	mov	r9, r0
   86b4a:	f107 040b 	add.w	r4, r7, #11
   86b4e:	f7ff ffef 	bl	86b30 <__malloc_lock>
   86b52:	f855 ec04 	ldr.w	lr, [r5, #-4]
   86b56:	2c16      	cmp	r4, #22
   86b58:	f02e 0603 	bic.w	r6, lr, #3
   86b5c:	f1a5 0808 	sub.w	r8, r5, #8
   86b60:	d83c      	bhi.n	86bdc <_realloc_r+0xa4>
   86b62:	2210      	movs	r2, #16
   86b64:	4614      	mov	r4, r2
   86b66:	42a7      	cmp	r7, r4
   86b68:	d83d      	bhi.n	86be6 <_realloc_r+0xae>
   86b6a:	4296      	cmp	r6, r2
   86b6c:	da42      	bge.n	86bf4 <_realloc_r+0xbc>
   86b6e:	4bc6      	ldr	r3, [pc, #792]	; (86e88 <_realloc_r+0x350>)
   86b70:	eb08 0006 	add.w	r0, r8, r6
   86b74:	6899      	ldr	r1, [r3, #8]
   86b76:	4288      	cmp	r0, r1
   86b78:	6841      	ldr	r1, [r0, #4]
   86b7a:	f000 80d7 	beq.w	86d2c <_realloc_r+0x1f4>
   86b7e:	f021 0301 	bic.w	r3, r1, #1
   86b82:	4403      	add	r3, r0
   86b84:	685b      	ldr	r3, [r3, #4]
   86b86:	07db      	lsls	r3, r3, #31
   86b88:	d54c      	bpl.n	86c24 <_realloc_r+0xec>
   86b8a:	f01e 0f01 	tst.w	lr, #1
   86b8e:	f000 809d 	beq.w	86ccc <_realloc_r+0x194>
   86b92:	4639      	mov	r1, r7
   86b94:	4648      	mov	r0, r9
   86b96:	f7ff fbff 	bl	86398 <_malloc_r>
   86b9a:	4607      	mov	r7, r0
   86b9c:	2800      	cmp	r0, #0
   86b9e:	d03a      	beq.n	86c16 <_realloc_r+0xde>
   86ba0:	f855 3c04 	ldr.w	r3, [r5, #-4]
   86ba4:	f1a0 0208 	sub.w	r2, r0, #8
   86ba8:	f023 0301 	bic.w	r3, r3, #1
   86bac:	4443      	add	r3, r8
   86bae:	429a      	cmp	r2, r3
   86bb0:	f000 813e 	beq.w	86e30 <_realloc_r+0x2f8>
   86bb4:	1f32      	subs	r2, r6, #4
   86bb6:	2a24      	cmp	r2, #36	; 0x24
   86bb8:	f200 812b 	bhi.w	86e12 <_realloc_r+0x2da>
   86bbc:	2a13      	cmp	r2, #19
   86bbe:	f200 80ff 	bhi.w	86dc0 <_realloc_r+0x288>
   86bc2:	4603      	mov	r3, r0
   86bc4:	462a      	mov	r2, r5
   86bc6:	6811      	ldr	r1, [r2, #0]
   86bc8:	6019      	str	r1, [r3, #0]
   86bca:	6851      	ldr	r1, [r2, #4]
   86bcc:	6059      	str	r1, [r3, #4]
   86bce:	6892      	ldr	r2, [r2, #8]
   86bd0:	609a      	str	r2, [r3, #8]
   86bd2:	4629      	mov	r1, r5
   86bd4:	4648      	mov	r0, r9
   86bd6:	f7ff f8c5 	bl	85d64 <_free_r>
   86bda:	e01c      	b.n	86c16 <_realloc_r+0xde>
   86bdc:	f024 0407 	bic.w	r4, r4, #7
   86be0:	2c00      	cmp	r4, #0
   86be2:	4622      	mov	r2, r4
   86be4:	dabf      	bge.n	86b66 <_realloc_r+0x2e>
   86be6:	230c      	movs	r3, #12
   86be8:	2000      	movs	r0, #0
   86bea:	f8c9 3000 	str.w	r3, [r9]
   86bee:	b003      	add	sp, #12
   86bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86bf4:	462f      	mov	r7, r5
   86bf6:	1b33      	subs	r3, r6, r4
   86bf8:	2b0f      	cmp	r3, #15
   86bfa:	f8d8 2004 	ldr.w	r2, [r8, #4]
   86bfe:	d81d      	bhi.n	86c3c <_realloc_r+0x104>
   86c00:	f002 0201 	and.w	r2, r2, #1
   86c04:	4332      	orrs	r2, r6
   86c06:	eb08 0106 	add.w	r1, r8, r6
   86c0a:	f8c8 2004 	str.w	r2, [r8, #4]
   86c0e:	684b      	ldr	r3, [r1, #4]
   86c10:	f043 0301 	orr.w	r3, r3, #1
   86c14:	604b      	str	r3, [r1, #4]
   86c16:	4648      	mov	r0, r9
   86c18:	f7ff ff8c 	bl	86b34 <__malloc_unlock>
   86c1c:	4638      	mov	r0, r7
   86c1e:	b003      	add	sp, #12
   86c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86c24:	f021 0103 	bic.w	r1, r1, #3
   86c28:	4431      	add	r1, r6
   86c2a:	4291      	cmp	r1, r2
   86c2c:	db20      	blt.n	86c70 <_realloc_r+0x138>
   86c2e:	68c3      	ldr	r3, [r0, #12]
   86c30:	6882      	ldr	r2, [r0, #8]
   86c32:	462f      	mov	r7, r5
   86c34:	60d3      	str	r3, [r2, #12]
   86c36:	460e      	mov	r6, r1
   86c38:	609a      	str	r2, [r3, #8]
   86c3a:	e7dc      	b.n	86bf6 <_realloc_r+0xbe>
   86c3c:	f002 0201 	and.w	r2, r2, #1
   86c40:	eb08 0104 	add.w	r1, r8, r4
   86c44:	4314      	orrs	r4, r2
   86c46:	f043 0201 	orr.w	r2, r3, #1
   86c4a:	f8c8 4004 	str.w	r4, [r8, #4]
   86c4e:	440b      	add	r3, r1
   86c50:	604a      	str	r2, [r1, #4]
   86c52:	685a      	ldr	r2, [r3, #4]
   86c54:	3108      	adds	r1, #8
   86c56:	f042 0201 	orr.w	r2, r2, #1
   86c5a:	605a      	str	r2, [r3, #4]
   86c5c:	4648      	mov	r0, r9
   86c5e:	f7ff f881 	bl	85d64 <_free_r>
   86c62:	e7d8      	b.n	86c16 <_realloc_r+0xde>
   86c64:	4611      	mov	r1, r2
   86c66:	b003      	add	sp, #12
   86c68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86c6c:	f7ff bb94 	b.w	86398 <_malloc_r>
   86c70:	f01e 0f01 	tst.w	lr, #1
   86c74:	d18d      	bne.n	86b92 <_realloc_r+0x5a>
   86c76:	f855 3c08 	ldr.w	r3, [r5, #-8]
   86c7a:	ebc3 0a08 	rsb	sl, r3, r8
   86c7e:	f8da 3004 	ldr.w	r3, [sl, #4]
   86c82:	f023 0c03 	bic.w	ip, r3, #3
   86c86:	eb01 0e0c 	add.w	lr, r1, ip
   86c8a:	4596      	cmp	lr, r2
   86c8c:	db26      	blt.n	86cdc <_realloc_r+0x1a4>
   86c8e:	4657      	mov	r7, sl
   86c90:	68c3      	ldr	r3, [r0, #12]
   86c92:	6881      	ldr	r1, [r0, #8]
   86c94:	1f32      	subs	r2, r6, #4
   86c96:	60cb      	str	r3, [r1, #12]
   86c98:	6099      	str	r1, [r3, #8]
   86c9a:	f857 1f08 	ldr.w	r1, [r7, #8]!
   86c9e:	f8da 300c 	ldr.w	r3, [sl, #12]
   86ca2:	2a24      	cmp	r2, #36	; 0x24
   86ca4:	60cb      	str	r3, [r1, #12]
   86ca6:	6099      	str	r1, [r3, #8]
   86ca8:	f200 80c9 	bhi.w	86e3e <_realloc_r+0x306>
   86cac:	2a13      	cmp	r2, #19
   86cae:	f240 8092 	bls.w	86dd6 <_realloc_r+0x29e>
   86cb2:	682b      	ldr	r3, [r5, #0]
   86cb4:	2a1b      	cmp	r2, #27
   86cb6:	f8ca 3008 	str.w	r3, [sl, #8]
   86cba:	686b      	ldr	r3, [r5, #4]
   86cbc:	f8ca 300c 	str.w	r3, [sl, #12]
   86cc0:	f200 80cd 	bhi.w	86e5e <_realloc_r+0x326>
   86cc4:	3508      	adds	r5, #8
   86cc6:	f10a 0310 	add.w	r3, sl, #16
   86cca:	e085      	b.n	86dd8 <_realloc_r+0x2a0>
   86ccc:	f855 3c08 	ldr.w	r3, [r5, #-8]
   86cd0:	ebc3 0a08 	rsb	sl, r3, r8
   86cd4:	f8da 3004 	ldr.w	r3, [sl, #4]
   86cd8:	f023 0c03 	bic.w	ip, r3, #3
   86cdc:	eb06 030c 	add.w	r3, r6, ip
   86ce0:	4293      	cmp	r3, r2
   86ce2:	f6ff af56 	blt.w	86b92 <_realloc_r+0x5a>
   86ce6:	4657      	mov	r7, sl
   86ce8:	f8da 100c 	ldr.w	r1, [sl, #12]
   86cec:	f857 0f08 	ldr.w	r0, [r7, #8]!
   86cf0:	1f32      	subs	r2, r6, #4
   86cf2:	2a24      	cmp	r2, #36	; 0x24
   86cf4:	60c1      	str	r1, [r0, #12]
   86cf6:	6088      	str	r0, [r1, #8]
   86cf8:	f200 80aa 	bhi.w	86e50 <_realloc_r+0x318>
   86cfc:	2a13      	cmp	r2, #19
   86cfe:	f240 80a5 	bls.w	86e4c <_realloc_r+0x314>
   86d02:	6829      	ldr	r1, [r5, #0]
   86d04:	2a1b      	cmp	r2, #27
   86d06:	f8ca 1008 	str.w	r1, [sl, #8]
   86d0a:	6869      	ldr	r1, [r5, #4]
   86d0c:	f8ca 100c 	str.w	r1, [sl, #12]
   86d10:	f200 80bc 	bhi.w	86e8c <_realloc_r+0x354>
   86d14:	3508      	adds	r5, #8
   86d16:	f10a 0210 	add.w	r2, sl, #16
   86d1a:	6829      	ldr	r1, [r5, #0]
   86d1c:	461e      	mov	r6, r3
   86d1e:	6011      	str	r1, [r2, #0]
   86d20:	6869      	ldr	r1, [r5, #4]
   86d22:	46d0      	mov	r8, sl
   86d24:	6051      	str	r1, [r2, #4]
   86d26:	68ab      	ldr	r3, [r5, #8]
   86d28:	6093      	str	r3, [r2, #8]
   86d2a:	e764      	b.n	86bf6 <_realloc_r+0xbe>
   86d2c:	f021 0b03 	bic.w	fp, r1, #3
   86d30:	f104 0010 	add.w	r0, r4, #16
   86d34:	44b3      	add	fp, r6
   86d36:	4583      	cmp	fp, r0
   86d38:	da57      	bge.n	86dea <_realloc_r+0x2b2>
   86d3a:	f01e 0f01 	tst.w	lr, #1
   86d3e:	f47f af28 	bne.w	86b92 <_realloc_r+0x5a>
   86d42:	f855 1c08 	ldr.w	r1, [r5, #-8]
   86d46:	ebc1 0a08 	rsb	sl, r1, r8
   86d4a:	f8da 1004 	ldr.w	r1, [sl, #4]
   86d4e:	f021 0c03 	bic.w	ip, r1, #3
   86d52:	44e3      	add	fp, ip
   86d54:	4558      	cmp	r0, fp
   86d56:	dcc1      	bgt.n	86cdc <_realloc_r+0x1a4>
   86d58:	4657      	mov	r7, sl
   86d5a:	f8da 100c 	ldr.w	r1, [sl, #12]
   86d5e:	f857 0f08 	ldr.w	r0, [r7, #8]!
   86d62:	1f32      	subs	r2, r6, #4
   86d64:	2a24      	cmp	r2, #36	; 0x24
   86d66:	60c1      	str	r1, [r0, #12]
   86d68:	6088      	str	r0, [r1, #8]
   86d6a:	f200 80b1 	bhi.w	86ed0 <_realloc_r+0x398>
   86d6e:	2a13      	cmp	r2, #19
   86d70:	f240 80a2 	bls.w	86eb8 <_realloc_r+0x380>
   86d74:	6829      	ldr	r1, [r5, #0]
   86d76:	2a1b      	cmp	r2, #27
   86d78:	f8ca 1008 	str.w	r1, [sl, #8]
   86d7c:	6869      	ldr	r1, [r5, #4]
   86d7e:	f8ca 100c 	str.w	r1, [sl, #12]
   86d82:	f200 80ac 	bhi.w	86ede <_realloc_r+0x3a6>
   86d86:	3508      	adds	r5, #8
   86d88:	f10a 0210 	add.w	r2, sl, #16
   86d8c:	6829      	ldr	r1, [r5, #0]
   86d8e:	6011      	str	r1, [r2, #0]
   86d90:	6869      	ldr	r1, [r5, #4]
   86d92:	6051      	str	r1, [r2, #4]
   86d94:	68a9      	ldr	r1, [r5, #8]
   86d96:	6091      	str	r1, [r2, #8]
   86d98:	ebc4 020b 	rsb	r2, r4, fp
   86d9c:	eb0a 0104 	add.w	r1, sl, r4
   86da0:	f042 0201 	orr.w	r2, r2, #1
   86da4:	6099      	str	r1, [r3, #8]
   86da6:	604a      	str	r2, [r1, #4]
   86da8:	f8da 3004 	ldr.w	r3, [sl, #4]
   86dac:	4648      	mov	r0, r9
   86dae:	f003 0301 	and.w	r3, r3, #1
   86db2:	431c      	orrs	r4, r3
   86db4:	f8ca 4004 	str.w	r4, [sl, #4]
   86db8:	f7ff febc 	bl	86b34 <__malloc_unlock>
   86dbc:	4638      	mov	r0, r7
   86dbe:	e72e      	b.n	86c1e <_realloc_r+0xe6>
   86dc0:	682b      	ldr	r3, [r5, #0]
   86dc2:	2a1b      	cmp	r2, #27
   86dc4:	6003      	str	r3, [r0, #0]
   86dc6:	686b      	ldr	r3, [r5, #4]
   86dc8:	6043      	str	r3, [r0, #4]
   86dca:	d826      	bhi.n	86e1a <_realloc_r+0x2e2>
   86dcc:	f100 0308 	add.w	r3, r0, #8
   86dd0:	f105 0208 	add.w	r2, r5, #8
   86dd4:	e6f7      	b.n	86bc6 <_realloc_r+0x8e>
   86dd6:	463b      	mov	r3, r7
   86dd8:	682a      	ldr	r2, [r5, #0]
   86dda:	4676      	mov	r6, lr
   86ddc:	601a      	str	r2, [r3, #0]
   86dde:	686a      	ldr	r2, [r5, #4]
   86de0:	46d0      	mov	r8, sl
   86de2:	605a      	str	r2, [r3, #4]
   86de4:	68aa      	ldr	r2, [r5, #8]
   86de6:	609a      	str	r2, [r3, #8]
   86de8:	e705      	b.n	86bf6 <_realloc_r+0xbe>
   86dea:	ebc4 0b0b 	rsb	fp, r4, fp
   86dee:	eb08 0104 	add.w	r1, r8, r4
   86df2:	f04b 0201 	orr.w	r2, fp, #1
   86df6:	6099      	str	r1, [r3, #8]
   86df8:	604a      	str	r2, [r1, #4]
   86dfa:	f855 3c04 	ldr.w	r3, [r5, #-4]
   86dfe:	4648      	mov	r0, r9
   86e00:	f003 0301 	and.w	r3, r3, #1
   86e04:	431c      	orrs	r4, r3
   86e06:	f845 4c04 	str.w	r4, [r5, #-4]
   86e0a:	f7ff fe93 	bl	86b34 <__malloc_unlock>
   86e0e:	4628      	mov	r0, r5
   86e10:	e705      	b.n	86c1e <_realloc_r+0xe6>
   86e12:	4629      	mov	r1, r5
   86e14:	f7ff fe28 	bl	86a68 <memmove>
   86e18:	e6db      	b.n	86bd2 <_realloc_r+0x9a>
   86e1a:	68ab      	ldr	r3, [r5, #8]
   86e1c:	2a24      	cmp	r2, #36	; 0x24
   86e1e:	6083      	str	r3, [r0, #8]
   86e20:	68eb      	ldr	r3, [r5, #12]
   86e22:	60c3      	str	r3, [r0, #12]
   86e24:	d027      	beq.n	86e76 <_realloc_r+0x33e>
   86e26:	f100 0310 	add.w	r3, r0, #16
   86e2a:	f105 0210 	add.w	r2, r5, #16
   86e2e:	e6ca      	b.n	86bc6 <_realloc_r+0x8e>
   86e30:	f850 3c04 	ldr.w	r3, [r0, #-4]
   86e34:	462f      	mov	r7, r5
   86e36:	f023 0303 	bic.w	r3, r3, #3
   86e3a:	441e      	add	r6, r3
   86e3c:	e6db      	b.n	86bf6 <_realloc_r+0xbe>
   86e3e:	4629      	mov	r1, r5
   86e40:	4638      	mov	r0, r7
   86e42:	4676      	mov	r6, lr
   86e44:	46d0      	mov	r8, sl
   86e46:	f7ff fe0f 	bl	86a68 <memmove>
   86e4a:	e6d4      	b.n	86bf6 <_realloc_r+0xbe>
   86e4c:	463a      	mov	r2, r7
   86e4e:	e764      	b.n	86d1a <_realloc_r+0x1e2>
   86e50:	4629      	mov	r1, r5
   86e52:	4638      	mov	r0, r7
   86e54:	461e      	mov	r6, r3
   86e56:	46d0      	mov	r8, sl
   86e58:	f7ff fe06 	bl	86a68 <memmove>
   86e5c:	e6cb      	b.n	86bf6 <_realloc_r+0xbe>
   86e5e:	68ab      	ldr	r3, [r5, #8]
   86e60:	2a24      	cmp	r2, #36	; 0x24
   86e62:	f8ca 3010 	str.w	r3, [sl, #16]
   86e66:	68eb      	ldr	r3, [r5, #12]
   86e68:	f8ca 3014 	str.w	r3, [sl, #20]
   86e6c:	d01a      	beq.n	86ea4 <_realloc_r+0x36c>
   86e6e:	3510      	adds	r5, #16
   86e70:	f10a 0318 	add.w	r3, sl, #24
   86e74:	e7b0      	b.n	86dd8 <_realloc_r+0x2a0>
   86e76:	692a      	ldr	r2, [r5, #16]
   86e78:	f100 0318 	add.w	r3, r0, #24
   86e7c:	6102      	str	r2, [r0, #16]
   86e7e:	6969      	ldr	r1, [r5, #20]
   86e80:	f105 0218 	add.w	r2, r5, #24
   86e84:	6141      	str	r1, [r0, #20]
   86e86:	e69e      	b.n	86bc6 <_realloc_r+0x8e>
   86e88:	20070500 	.word	0x20070500
   86e8c:	68a9      	ldr	r1, [r5, #8]
   86e8e:	2a24      	cmp	r2, #36	; 0x24
   86e90:	f8ca 1010 	str.w	r1, [sl, #16]
   86e94:	68e9      	ldr	r1, [r5, #12]
   86e96:	f8ca 1014 	str.w	r1, [sl, #20]
   86e9a:	d00f      	beq.n	86ebc <_realloc_r+0x384>
   86e9c:	3510      	adds	r5, #16
   86e9e:	f10a 0218 	add.w	r2, sl, #24
   86ea2:	e73a      	b.n	86d1a <_realloc_r+0x1e2>
   86ea4:	692a      	ldr	r2, [r5, #16]
   86ea6:	f10a 0320 	add.w	r3, sl, #32
   86eaa:	f8ca 2018 	str.w	r2, [sl, #24]
   86eae:	696a      	ldr	r2, [r5, #20]
   86eb0:	3518      	adds	r5, #24
   86eb2:	f8ca 201c 	str.w	r2, [sl, #28]
   86eb6:	e78f      	b.n	86dd8 <_realloc_r+0x2a0>
   86eb8:	463a      	mov	r2, r7
   86eba:	e767      	b.n	86d8c <_realloc_r+0x254>
   86ebc:	6929      	ldr	r1, [r5, #16]
   86ebe:	f10a 0220 	add.w	r2, sl, #32
   86ec2:	f8ca 1018 	str.w	r1, [sl, #24]
   86ec6:	6969      	ldr	r1, [r5, #20]
   86ec8:	3518      	adds	r5, #24
   86eca:	f8ca 101c 	str.w	r1, [sl, #28]
   86ece:	e724      	b.n	86d1a <_realloc_r+0x1e2>
   86ed0:	4629      	mov	r1, r5
   86ed2:	4638      	mov	r0, r7
   86ed4:	9301      	str	r3, [sp, #4]
   86ed6:	f7ff fdc7 	bl	86a68 <memmove>
   86eda:	9b01      	ldr	r3, [sp, #4]
   86edc:	e75c      	b.n	86d98 <_realloc_r+0x260>
   86ede:	68a9      	ldr	r1, [r5, #8]
   86ee0:	2a24      	cmp	r2, #36	; 0x24
   86ee2:	f8ca 1010 	str.w	r1, [sl, #16]
   86ee6:	68e9      	ldr	r1, [r5, #12]
   86ee8:	f8ca 1014 	str.w	r1, [sl, #20]
   86eec:	d003      	beq.n	86ef6 <_realloc_r+0x3be>
   86eee:	3510      	adds	r5, #16
   86ef0:	f10a 0218 	add.w	r2, sl, #24
   86ef4:	e74a      	b.n	86d8c <_realloc_r+0x254>
   86ef6:	6929      	ldr	r1, [r5, #16]
   86ef8:	f10a 0220 	add.w	r2, sl, #32
   86efc:	f8ca 1018 	str.w	r1, [sl, #24]
   86f00:	6969      	ldr	r1, [r5, #20]
   86f02:	3518      	adds	r5, #24
   86f04:	f8ca 101c 	str.w	r1, [sl, #28]
   86f08:	e740      	b.n	86d8c <_realloc_r+0x254>
   86f0a:	bf00      	nop

00086f0c <_sbrk_r>:
   86f0c:	b538      	push	{r3, r4, r5, lr}
   86f0e:	4c07      	ldr	r4, [pc, #28]	; (86f2c <_sbrk_r+0x20>)
   86f10:	2300      	movs	r3, #0
   86f12:	4605      	mov	r5, r0
   86f14:	4608      	mov	r0, r1
   86f16:	6023      	str	r3, [r4, #0]
   86f18:	f7fd f9ba 	bl	84290 <_sbrk>
   86f1c:	1c43      	adds	r3, r0, #1
   86f1e:	d000      	beq.n	86f22 <_sbrk_r+0x16>
   86f20:	bd38      	pop	{r3, r4, r5, pc}
   86f22:	6823      	ldr	r3, [r4, #0]
   86f24:	2b00      	cmp	r3, #0
   86f26:	d0fb      	beq.n	86f20 <_sbrk_r+0x14>
   86f28:	602b      	str	r3, [r5, #0]
   86f2a:	bd38      	pop	{r3, r4, r5, pc}
   86f2c:	20070ef0 	.word	0x20070ef0

00086f30 <__sread>:
   86f30:	b510      	push	{r4, lr}
   86f32:	460c      	mov	r4, r1
   86f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86f38:	f000 f9c4 	bl	872c4 <_read_r>
   86f3c:	2800      	cmp	r0, #0
   86f3e:	db03      	blt.n	86f48 <__sread+0x18>
   86f40:	6d23      	ldr	r3, [r4, #80]	; 0x50
   86f42:	4403      	add	r3, r0
   86f44:	6523      	str	r3, [r4, #80]	; 0x50
   86f46:	bd10      	pop	{r4, pc}
   86f48:	89a3      	ldrh	r3, [r4, #12]
   86f4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   86f4e:	81a3      	strh	r3, [r4, #12]
   86f50:	bd10      	pop	{r4, pc}
   86f52:	bf00      	nop

00086f54 <__swrite>:
   86f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86f58:	460c      	mov	r4, r1
   86f5a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   86f5e:	461f      	mov	r7, r3
   86f60:	05cb      	lsls	r3, r1, #23
   86f62:	4616      	mov	r6, r2
   86f64:	4605      	mov	r5, r0
   86f66:	d507      	bpl.n	86f78 <__swrite+0x24>
   86f68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   86f6c:	2302      	movs	r3, #2
   86f6e:	2200      	movs	r2, #0
   86f70:	f000 f992 	bl	87298 <_lseek_r>
   86f74:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   86f78:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   86f7c:	81a1      	strh	r1, [r4, #12]
   86f7e:	463b      	mov	r3, r7
   86f80:	4632      	mov	r2, r6
   86f82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   86f86:	4628      	mov	r0, r5
   86f88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   86f8c:	f000 b8a2 	b.w	870d4 <_write_r>

00086f90 <__sseek>:
   86f90:	b510      	push	{r4, lr}
   86f92:	460c      	mov	r4, r1
   86f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86f98:	f000 f97e 	bl	87298 <_lseek_r>
   86f9c:	89a3      	ldrh	r3, [r4, #12]
   86f9e:	1c42      	adds	r2, r0, #1
   86fa0:	bf0e      	itee	eq
   86fa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   86fa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   86faa:	6520      	strne	r0, [r4, #80]	; 0x50
   86fac:	81a3      	strh	r3, [r4, #12]
   86fae:	bd10      	pop	{r4, pc}

00086fb0 <__sclose>:
   86fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86fb4:	f000 b8f6 	b.w	871a4 <_close_r>

00086fb8 <__swbuf_r>:
   86fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86fba:	460e      	mov	r6, r1
   86fbc:	4614      	mov	r4, r2
   86fbe:	4607      	mov	r7, r0
   86fc0:	b110      	cbz	r0, 86fc8 <__swbuf_r+0x10>
   86fc2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   86fc4:	2b00      	cmp	r3, #0
   86fc6:	d04a      	beq.n	8705e <__swbuf_r+0xa6>
   86fc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   86fcc:	69a3      	ldr	r3, [r4, #24]
   86fce:	b291      	uxth	r1, r2
   86fd0:	0708      	lsls	r0, r1, #28
   86fd2:	60a3      	str	r3, [r4, #8]
   86fd4:	d538      	bpl.n	87048 <__swbuf_r+0x90>
   86fd6:	6923      	ldr	r3, [r4, #16]
   86fd8:	2b00      	cmp	r3, #0
   86fda:	d035      	beq.n	87048 <__swbuf_r+0x90>
   86fdc:	0489      	lsls	r1, r1, #18
   86fde:	b2f5      	uxtb	r5, r6
   86fe0:	d515      	bpl.n	8700e <__swbuf_r+0x56>
   86fe2:	6822      	ldr	r2, [r4, #0]
   86fe4:	6961      	ldr	r1, [r4, #20]
   86fe6:	1ad3      	subs	r3, r2, r3
   86fe8:	428b      	cmp	r3, r1
   86fea:	da1c      	bge.n	87026 <__swbuf_r+0x6e>
   86fec:	3301      	adds	r3, #1
   86fee:	68a1      	ldr	r1, [r4, #8]
   86ff0:	1c50      	adds	r0, r2, #1
   86ff2:	3901      	subs	r1, #1
   86ff4:	60a1      	str	r1, [r4, #8]
   86ff6:	6020      	str	r0, [r4, #0]
   86ff8:	7016      	strb	r6, [r2, #0]
   86ffa:	6962      	ldr	r2, [r4, #20]
   86ffc:	429a      	cmp	r2, r3
   86ffe:	d01a      	beq.n	87036 <__swbuf_r+0x7e>
   87000:	89a3      	ldrh	r3, [r4, #12]
   87002:	07db      	lsls	r3, r3, #31
   87004:	d501      	bpl.n	8700a <__swbuf_r+0x52>
   87006:	2d0a      	cmp	r5, #10
   87008:	d015      	beq.n	87036 <__swbuf_r+0x7e>
   8700a:	4628      	mov	r0, r5
   8700c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8700e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   87010:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   87014:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   87018:	81a2      	strh	r2, [r4, #12]
   8701a:	6822      	ldr	r2, [r4, #0]
   8701c:	6661      	str	r1, [r4, #100]	; 0x64
   8701e:	6961      	ldr	r1, [r4, #20]
   87020:	1ad3      	subs	r3, r2, r3
   87022:	428b      	cmp	r3, r1
   87024:	dbe2      	blt.n	86fec <__swbuf_r+0x34>
   87026:	4621      	mov	r1, r4
   87028:	4638      	mov	r0, r7
   8702a:	f7fe fd3f 	bl	85aac <_fflush_r>
   8702e:	b940      	cbnz	r0, 87042 <__swbuf_r+0x8a>
   87030:	6822      	ldr	r2, [r4, #0]
   87032:	2301      	movs	r3, #1
   87034:	e7db      	b.n	86fee <__swbuf_r+0x36>
   87036:	4621      	mov	r1, r4
   87038:	4638      	mov	r0, r7
   8703a:	f7fe fd37 	bl	85aac <_fflush_r>
   8703e:	2800      	cmp	r0, #0
   87040:	d0e3      	beq.n	8700a <__swbuf_r+0x52>
   87042:	f04f 30ff 	mov.w	r0, #4294967295
   87046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87048:	4621      	mov	r1, r4
   8704a:	4638      	mov	r0, r7
   8704c:	f7fe fc16 	bl	8587c <__swsetup_r>
   87050:	2800      	cmp	r0, #0
   87052:	d1f6      	bne.n	87042 <__swbuf_r+0x8a>
   87054:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   87058:	6923      	ldr	r3, [r4, #16]
   8705a:	b291      	uxth	r1, r2
   8705c:	e7be      	b.n	86fdc <__swbuf_r+0x24>
   8705e:	f7fe fdb9 	bl	85bd4 <__sinit>
   87062:	e7b1      	b.n	86fc8 <__swbuf_r+0x10>

00087064 <_wcrtomb_r>:
   87064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   87068:	4605      	mov	r5, r0
   8706a:	b086      	sub	sp, #24
   8706c:	461e      	mov	r6, r3
   8706e:	460c      	mov	r4, r1
   87070:	b1a1      	cbz	r1, 8709c <_wcrtomb_r+0x38>
   87072:	4b10      	ldr	r3, [pc, #64]	; (870b4 <_wcrtomb_r+0x50>)
   87074:	4617      	mov	r7, r2
   87076:	f8d3 8000 	ldr.w	r8, [r3]
   8707a:	f7ff f907 	bl	8628c <__locale_charset>
   8707e:	9600      	str	r6, [sp, #0]
   87080:	4603      	mov	r3, r0
   87082:	463a      	mov	r2, r7
   87084:	4621      	mov	r1, r4
   87086:	4628      	mov	r0, r5
   87088:	47c0      	blx	r8
   8708a:	1c43      	adds	r3, r0, #1
   8708c:	d103      	bne.n	87096 <_wcrtomb_r+0x32>
   8708e:	2200      	movs	r2, #0
   87090:	238a      	movs	r3, #138	; 0x8a
   87092:	6032      	str	r2, [r6, #0]
   87094:	602b      	str	r3, [r5, #0]
   87096:	b006      	add	sp, #24
   87098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8709c:	4b05      	ldr	r3, [pc, #20]	; (870b4 <_wcrtomb_r+0x50>)
   8709e:	681f      	ldr	r7, [r3, #0]
   870a0:	f7ff f8f4 	bl	8628c <__locale_charset>
   870a4:	9600      	str	r6, [sp, #0]
   870a6:	4603      	mov	r3, r0
   870a8:	4622      	mov	r2, r4
   870aa:	a903      	add	r1, sp, #12
   870ac:	4628      	mov	r0, r5
   870ae:	47b8      	blx	r7
   870b0:	e7eb      	b.n	8708a <_wcrtomb_r+0x26>
   870b2:	bf00      	nop
   870b4:	20070910 	.word	0x20070910

000870b8 <__ascii_wctomb>:
   870b8:	b121      	cbz	r1, 870c4 <__ascii_wctomb+0xc>
   870ba:	2aff      	cmp	r2, #255	; 0xff
   870bc:	d804      	bhi.n	870c8 <__ascii_wctomb+0x10>
   870be:	700a      	strb	r2, [r1, #0]
   870c0:	2001      	movs	r0, #1
   870c2:	4770      	bx	lr
   870c4:	4608      	mov	r0, r1
   870c6:	4770      	bx	lr
   870c8:	238a      	movs	r3, #138	; 0x8a
   870ca:	6003      	str	r3, [r0, #0]
   870cc:	f04f 30ff 	mov.w	r0, #4294967295
   870d0:	4770      	bx	lr
   870d2:	bf00      	nop

000870d4 <_write_r>:
   870d4:	b570      	push	{r4, r5, r6, lr}
   870d6:	460d      	mov	r5, r1
   870d8:	4c08      	ldr	r4, [pc, #32]	; (870fc <_write_r+0x28>)
   870da:	4611      	mov	r1, r2
   870dc:	4606      	mov	r6, r0
   870de:	461a      	mov	r2, r3
   870e0:	4628      	mov	r0, r5
   870e2:	2300      	movs	r3, #0
   870e4:	6023      	str	r3, [r4, #0]
   870e6:	f7fa ff97 	bl	82018 <_write>
   870ea:	1c43      	adds	r3, r0, #1
   870ec:	d000      	beq.n	870f0 <_write_r+0x1c>
   870ee:	bd70      	pop	{r4, r5, r6, pc}
   870f0:	6823      	ldr	r3, [r4, #0]
   870f2:	2b00      	cmp	r3, #0
   870f4:	d0fb      	beq.n	870ee <_write_r+0x1a>
   870f6:	6033      	str	r3, [r6, #0]
   870f8:	bd70      	pop	{r4, r5, r6, pc}
   870fa:	bf00      	nop
   870fc:	20070ef0 	.word	0x20070ef0

00087100 <__register_exitproc>:
   87100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   87104:	4c25      	ldr	r4, [pc, #148]	; (8719c <__register_exitproc+0x9c>)
   87106:	4606      	mov	r6, r0
   87108:	6825      	ldr	r5, [r4, #0]
   8710a:	4688      	mov	r8, r1
   8710c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   87110:	4692      	mov	sl, r2
   87112:	4699      	mov	r9, r3
   87114:	b3c4      	cbz	r4, 87188 <__register_exitproc+0x88>
   87116:	6860      	ldr	r0, [r4, #4]
   87118:	281f      	cmp	r0, #31
   8711a:	dc17      	bgt.n	8714c <__register_exitproc+0x4c>
   8711c:	1c41      	adds	r1, r0, #1
   8711e:	b176      	cbz	r6, 8713e <__register_exitproc+0x3e>
   87120:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   87124:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   87128:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   8712c:	2201      	movs	r2, #1
   8712e:	4082      	lsls	r2, r0
   87130:	4315      	orrs	r5, r2
   87132:	2e02      	cmp	r6, #2
   87134:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   87138:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   8713c:	d01e      	beq.n	8717c <__register_exitproc+0x7c>
   8713e:	1c83      	adds	r3, r0, #2
   87140:	6061      	str	r1, [r4, #4]
   87142:	2000      	movs	r0, #0
   87144:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   87148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8714c:	4b14      	ldr	r3, [pc, #80]	; (871a0 <__register_exitproc+0xa0>)
   8714e:	b303      	cbz	r3, 87192 <__register_exitproc+0x92>
   87150:	f44f 70c8 	mov.w	r0, #400	; 0x190
   87154:	f7ff f918 	bl	86388 <malloc>
   87158:	4604      	mov	r4, r0
   8715a:	b1d0      	cbz	r0, 87192 <__register_exitproc+0x92>
   8715c:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   87160:	2700      	movs	r7, #0
   87162:	e884 0088 	stmia.w	r4, {r3, r7}
   87166:	4638      	mov	r0, r7
   87168:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   8716c:	2101      	movs	r1, #1
   8716e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   87172:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   87176:	2e00      	cmp	r6, #0
   87178:	d0e1      	beq.n	8713e <__register_exitproc+0x3e>
   8717a:	e7d1      	b.n	87120 <__register_exitproc+0x20>
   8717c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   87180:	431a      	orrs	r2, r3
   87182:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   87186:	e7da      	b.n	8713e <__register_exitproc+0x3e>
   87188:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   8718c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   87190:	e7c1      	b.n	87116 <__register_exitproc+0x16>
   87192:	f04f 30ff 	mov.w	r0, #4294967295
   87196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8719a:	bf00      	nop
   8719c:	000876d4 	.word	0x000876d4
   871a0:	00086389 	.word	0x00086389

000871a4 <_close_r>:
   871a4:	b538      	push	{r3, r4, r5, lr}
   871a6:	4c07      	ldr	r4, [pc, #28]	; (871c4 <_close_r+0x20>)
   871a8:	2300      	movs	r3, #0
   871aa:	4605      	mov	r5, r0
   871ac:	4608      	mov	r0, r1
   871ae:	6023      	str	r3, [r4, #0]
   871b0:	f7fd f88c 	bl	842cc <_close>
   871b4:	1c43      	adds	r3, r0, #1
   871b6:	d000      	beq.n	871ba <_close_r+0x16>
   871b8:	bd38      	pop	{r3, r4, r5, pc}
   871ba:	6823      	ldr	r3, [r4, #0]
   871bc:	2b00      	cmp	r3, #0
   871be:	d0fb      	beq.n	871b8 <_close_r+0x14>
   871c0:	602b      	str	r3, [r5, #0]
   871c2:	bd38      	pop	{r3, r4, r5, pc}
   871c4:	20070ef0 	.word	0x20070ef0

000871c8 <_fclose_r>:
   871c8:	2900      	cmp	r1, #0
   871ca:	d03d      	beq.n	87248 <_fclose_r+0x80>
   871cc:	b570      	push	{r4, r5, r6, lr}
   871ce:	4605      	mov	r5, r0
   871d0:	460c      	mov	r4, r1
   871d2:	b108      	cbz	r0, 871d8 <_fclose_r+0x10>
   871d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   871d6:	b37b      	cbz	r3, 87238 <_fclose_r+0x70>
   871d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   871dc:	b90b      	cbnz	r3, 871e2 <_fclose_r+0x1a>
   871de:	2000      	movs	r0, #0
   871e0:	bd70      	pop	{r4, r5, r6, pc}
   871e2:	4621      	mov	r1, r4
   871e4:	4628      	mov	r0, r5
   871e6:	f7fe fbbd 	bl	85964 <__sflush_r>
   871ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   871ec:	4606      	mov	r6, r0
   871ee:	b133      	cbz	r3, 871fe <_fclose_r+0x36>
   871f0:	69e1      	ldr	r1, [r4, #28]
   871f2:	4628      	mov	r0, r5
   871f4:	4798      	blx	r3
   871f6:	2800      	cmp	r0, #0
   871f8:	bfb8      	it	lt
   871fa:	f04f 36ff 	movlt.w	r6, #4294967295
   871fe:	89a3      	ldrh	r3, [r4, #12]
   87200:	061b      	lsls	r3, r3, #24
   87202:	d41c      	bmi.n	8723e <_fclose_r+0x76>
   87204:	6b21      	ldr	r1, [r4, #48]	; 0x30
   87206:	b141      	cbz	r1, 8721a <_fclose_r+0x52>
   87208:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8720c:	4299      	cmp	r1, r3
   8720e:	d002      	beq.n	87216 <_fclose_r+0x4e>
   87210:	4628      	mov	r0, r5
   87212:	f7fe fda7 	bl	85d64 <_free_r>
   87216:	2300      	movs	r3, #0
   87218:	6323      	str	r3, [r4, #48]	; 0x30
   8721a:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8721c:	b121      	cbz	r1, 87228 <_fclose_r+0x60>
   8721e:	4628      	mov	r0, r5
   87220:	f7fe fda0 	bl	85d64 <_free_r>
   87224:	2300      	movs	r3, #0
   87226:	6463      	str	r3, [r4, #68]	; 0x44
   87228:	f7fe fcda 	bl	85be0 <__sfp_lock_acquire>
   8722c:	2300      	movs	r3, #0
   8722e:	81a3      	strh	r3, [r4, #12]
   87230:	f7fe fcd8 	bl	85be4 <__sfp_lock_release>
   87234:	4630      	mov	r0, r6
   87236:	bd70      	pop	{r4, r5, r6, pc}
   87238:	f7fe fccc 	bl	85bd4 <__sinit>
   8723c:	e7cc      	b.n	871d8 <_fclose_r+0x10>
   8723e:	6921      	ldr	r1, [r4, #16]
   87240:	4628      	mov	r0, r5
   87242:	f7fe fd8f 	bl	85d64 <_free_r>
   87246:	e7dd      	b.n	87204 <_fclose_r+0x3c>
   87248:	2000      	movs	r0, #0
   8724a:	4770      	bx	lr

0008724c <_fstat_r>:
   8724c:	b538      	push	{r3, r4, r5, lr}
   8724e:	460b      	mov	r3, r1
   87250:	4c07      	ldr	r4, [pc, #28]	; (87270 <_fstat_r+0x24>)
   87252:	4605      	mov	r5, r0
   87254:	4611      	mov	r1, r2
   87256:	4618      	mov	r0, r3
   87258:	2300      	movs	r3, #0
   8725a:	6023      	str	r3, [r4, #0]
   8725c:	f7fd f842 	bl	842e4 <_fstat>
   87260:	1c43      	adds	r3, r0, #1
   87262:	d000      	beq.n	87266 <_fstat_r+0x1a>
   87264:	bd38      	pop	{r3, r4, r5, pc}
   87266:	6823      	ldr	r3, [r4, #0]
   87268:	2b00      	cmp	r3, #0
   8726a:	d0fb      	beq.n	87264 <_fstat_r+0x18>
   8726c:	602b      	str	r3, [r5, #0]
   8726e:	bd38      	pop	{r3, r4, r5, pc}
   87270:	20070ef0 	.word	0x20070ef0

00087274 <_isatty_r>:
   87274:	b538      	push	{r3, r4, r5, lr}
   87276:	4c07      	ldr	r4, [pc, #28]	; (87294 <_isatty_r+0x20>)
   87278:	2300      	movs	r3, #0
   8727a:	4605      	mov	r5, r0
   8727c:	4608      	mov	r0, r1
   8727e:	6023      	str	r3, [r4, #0]
   87280:	f7fd f840 	bl	84304 <_isatty>
   87284:	1c43      	adds	r3, r0, #1
   87286:	d000      	beq.n	8728a <_isatty_r+0x16>
   87288:	bd38      	pop	{r3, r4, r5, pc}
   8728a:	6823      	ldr	r3, [r4, #0]
   8728c:	2b00      	cmp	r3, #0
   8728e:	d0fb      	beq.n	87288 <_isatty_r+0x14>
   87290:	602b      	str	r3, [r5, #0]
   87292:	bd38      	pop	{r3, r4, r5, pc}
   87294:	20070ef0 	.word	0x20070ef0

00087298 <_lseek_r>:
   87298:	b570      	push	{r4, r5, r6, lr}
   8729a:	460d      	mov	r5, r1
   8729c:	4c08      	ldr	r4, [pc, #32]	; (872c0 <_lseek_r+0x28>)
   8729e:	4611      	mov	r1, r2
   872a0:	4606      	mov	r6, r0
   872a2:	461a      	mov	r2, r3
   872a4:	4628      	mov	r0, r5
   872a6:	2300      	movs	r3, #0
   872a8:	6023      	str	r3, [r4, #0]
   872aa:	f7fd f835 	bl	84318 <_lseek>
   872ae:	1c43      	adds	r3, r0, #1
   872b0:	d000      	beq.n	872b4 <_lseek_r+0x1c>
   872b2:	bd70      	pop	{r4, r5, r6, pc}
   872b4:	6823      	ldr	r3, [r4, #0]
   872b6:	2b00      	cmp	r3, #0
   872b8:	d0fb      	beq.n	872b2 <_lseek_r+0x1a>
   872ba:	6033      	str	r3, [r6, #0]
   872bc:	bd70      	pop	{r4, r5, r6, pc}
   872be:	bf00      	nop
   872c0:	20070ef0 	.word	0x20070ef0

000872c4 <_read_r>:
   872c4:	b570      	push	{r4, r5, r6, lr}
   872c6:	460d      	mov	r5, r1
   872c8:	4c08      	ldr	r4, [pc, #32]	; (872ec <_read_r+0x28>)
   872ca:	4611      	mov	r1, r2
   872cc:	4606      	mov	r6, r0
   872ce:	461a      	mov	r2, r3
   872d0:	4628      	mov	r0, r5
   872d2:	2300      	movs	r3, #0
   872d4:	6023      	str	r3, [r4, #0]
   872d6:	f7fa fe75 	bl	81fc4 <_read>
   872da:	1c43      	adds	r3, r0, #1
   872dc:	d000      	beq.n	872e0 <_read_r+0x1c>
   872de:	bd70      	pop	{r4, r5, r6, pc}
   872e0:	6823      	ldr	r3, [r4, #0]
   872e2:	2b00      	cmp	r3, #0
   872e4:	d0fb      	beq.n	872de <_read_r+0x1a>
   872e6:	6033      	str	r3, [r6, #0]
   872e8:	bd70      	pop	{r4, r5, r6, pc}
   872ea:	bf00      	nop
   872ec:	20070ef0 	.word	0x20070ef0

000872f0 <__aeabi_uldivmod>:
   872f0:	b953      	cbnz	r3, 87308 <__aeabi_uldivmod+0x18>
   872f2:	b94a      	cbnz	r2, 87308 <__aeabi_uldivmod+0x18>
   872f4:	2900      	cmp	r1, #0
   872f6:	bf08      	it	eq
   872f8:	2800      	cmpeq	r0, #0
   872fa:	bf1c      	itt	ne
   872fc:	f04f 31ff 	movne.w	r1, #4294967295
   87300:	f04f 30ff 	movne.w	r0, #4294967295
   87304:	f000 b982 	b.w	8760c <__aeabi_idiv0>
   87308:	f1ad 0c08 	sub.w	ip, sp, #8
   8730c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   87310:	f000 f806 	bl	87320 <__udivmoddi4>
   87314:	f8dd e004 	ldr.w	lr, [sp, #4]
   87318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8731c:	b004      	add	sp, #16
   8731e:	4770      	bx	lr

00087320 <__udivmoddi4>:
   87320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87324:	468c      	mov	ip, r1
   87326:	460c      	mov	r4, r1
   87328:	4605      	mov	r5, r0
   8732a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   8732c:	2b00      	cmp	r3, #0
   8732e:	d14f      	bne.n	873d0 <__udivmoddi4+0xb0>
   87330:	428a      	cmp	r2, r1
   87332:	4617      	mov	r7, r2
   87334:	d96b      	bls.n	8740e <__udivmoddi4+0xee>
   87336:	fab2 fe82 	clz	lr, r2
   8733a:	f1be 0f00 	cmp.w	lr, #0
   8733e:	d00b      	beq.n	87358 <__udivmoddi4+0x38>
   87340:	f1ce 0520 	rsb	r5, lr, #32
   87344:	fa20 f505 	lsr.w	r5, r0, r5
   87348:	fa01 f30e 	lsl.w	r3, r1, lr
   8734c:	ea45 0c03 	orr.w	ip, r5, r3
   87350:	fa02 f70e 	lsl.w	r7, r2, lr
   87354:	fa00 f50e 	lsl.w	r5, r0, lr
   87358:	0c39      	lsrs	r1, r7, #16
   8735a:	fbbc f0f1 	udiv	r0, ip, r1
   8735e:	b2ba      	uxth	r2, r7
   87360:	fb01 c310 	mls	r3, r1, r0, ip
   87364:	fb00 f802 	mul.w	r8, r0, r2
   87368:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   8736c:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
   87370:	45a0      	cmp	r8, r4
   87372:	d909      	bls.n	87388 <__udivmoddi4+0x68>
   87374:	19e4      	adds	r4, r4, r7
   87376:	f100 33ff 	add.w	r3, r0, #4294967295
   8737a:	f080 8128 	bcs.w	875ce <__udivmoddi4+0x2ae>
   8737e:	45a0      	cmp	r8, r4
   87380:	f240 8125 	bls.w	875ce <__udivmoddi4+0x2ae>
   87384:	3802      	subs	r0, #2
   87386:	443c      	add	r4, r7
   87388:	ebc8 0404 	rsb	r4, r8, r4
   8738c:	fbb4 f3f1 	udiv	r3, r4, r1
   87390:	fb01 4c13 	mls	ip, r1, r3, r4
   87394:	fb03 f202 	mul.w	r2, r3, r2
   87398:	b2ac      	uxth	r4, r5
   8739a:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
   8739e:	428a      	cmp	r2, r1
   873a0:	d909      	bls.n	873b6 <__udivmoddi4+0x96>
   873a2:	19c9      	adds	r1, r1, r7
   873a4:	f103 34ff 	add.w	r4, r3, #4294967295
   873a8:	f080 810f 	bcs.w	875ca <__udivmoddi4+0x2aa>
   873ac:	428a      	cmp	r2, r1
   873ae:	f240 810c 	bls.w	875ca <__udivmoddi4+0x2aa>
   873b2:	3b02      	subs	r3, #2
   873b4:	4439      	add	r1, r7
   873b6:	1a8a      	subs	r2, r1, r2
   873b8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   873bc:	2100      	movs	r1, #0
   873be:	2e00      	cmp	r6, #0
   873c0:	d063      	beq.n	8748a <__udivmoddi4+0x16a>
   873c2:	fa22 f20e 	lsr.w	r2, r2, lr
   873c6:	2300      	movs	r3, #0
   873c8:	e886 000c 	stmia.w	r6, {r2, r3}
   873cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   873d0:	428b      	cmp	r3, r1
   873d2:	d907      	bls.n	873e4 <__udivmoddi4+0xc4>
   873d4:	2e00      	cmp	r6, #0
   873d6:	d056      	beq.n	87486 <__udivmoddi4+0x166>
   873d8:	2100      	movs	r1, #0
   873da:	e886 0011 	stmia.w	r6, {r0, r4}
   873de:	4608      	mov	r0, r1
   873e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   873e4:	fab3 f183 	clz	r1, r3
   873e8:	2900      	cmp	r1, #0
   873ea:	f040 8093 	bne.w	87514 <__udivmoddi4+0x1f4>
   873ee:	42a3      	cmp	r3, r4
   873f0:	d302      	bcc.n	873f8 <__udivmoddi4+0xd8>
   873f2:	4282      	cmp	r2, r0
   873f4:	f200 80fe 	bhi.w	875f4 <__udivmoddi4+0x2d4>
   873f8:	1a85      	subs	r5, r0, r2
   873fa:	eb64 0303 	sbc.w	r3, r4, r3
   873fe:	469c      	mov	ip, r3
   87400:	2001      	movs	r0, #1
   87402:	2e00      	cmp	r6, #0
   87404:	d041      	beq.n	8748a <__udivmoddi4+0x16a>
   87406:	e886 1020 	stmia.w	r6, {r5, ip}
   8740a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8740e:	b912      	cbnz	r2, 87416 <__udivmoddi4+0xf6>
   87410:	2701      	movs	r7, #1
   87412:	fbb7 f7f2 	udiv	r7, r7, r2
   87416:	fab7 fe87 	clz	lr, r7
   8741a:	f1be 0f00 	cmp.w	lr, #0
   8741e:	d136      	bne.n	8748e <__udivmoddi4+0x16e>
   87420:	1be4      	subs	r4, r4, r7
   87422:	ea4f 4817 	mov.w	r8, r7, lsr #16
   87426:	fa1f f987 	uxth.w	r9, r7
   8742a:	2101      	movs	r1, #1
   8742c:	fbb4 f3f8 	udiv	r3, r4, r8
   87430:	fb08 4413 	mls	r4, r8, r3, r4
   87434:	fb09 f203 	mul.w	r2, r9, r3
   87438:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   8743c:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
   87440:	42a2      	cmp	r2, r4
   87442:	d907      	bls.n	87454 <__udivmoddi4+0x134>
   87444:	19e4      	adds	r4, r4, r7
   87446:	f103 30ff 	add.w	r0, r3, #4294967295
   8744a:	d202      	bcs.n	87452 <__udivmoddi4+0x132>
   8744c:	42a2      	cmp	r2, r4
   8744e:	f200 80d3 	bhi.w	875f8 <__udivmoddi4+0x2d8>
   87452:	4603      	mov	r3, r0
   87454:	1aa4      	subs	r4, r4, r2
   87456:	fbb4 f0f8 	udiv	r0, r4, r8
   8745a:	fb08 4810 	mls	r8, r8, r0, r4
   8745e:	fb09 f900 	mul.w	r9, r9, r0
   87462:	b2ac      	uxth	r4, r5
   87464:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
   87468:	4591      	cmp	r9, r2
   8746a:	d907      	bls.n	8747c <__udivmoddi4+0x15c>
   8746c:	19d2      	adds	r2, r2, r7
   8746e:	f100 34ff 	add.w	r4, r0, #4294967295
   87472:	d202      	bcs.n	8747a <__udivmoddi4+0x15a>
   87474:	4591      	cmp	r9, r2
   87476:	f200 80ba 	bhi.w	875ee <__udivmoddi4+0x2ce>
   8747a:	4620      	mov	r0, r4
   8747c:	ebc9 0202 	rsb	r2, r9, r2
   87480:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   87484:	e79b      	b.n	873be <__udivmoddi4+0x9e>
   87486:	4631      	mov	r1, r6
   87488:	4630      	mov	r0, r6
   8748a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8748e:	fa07 f70e 	lsl.w	r7, r7, lr
   87492:	f1ce 0c20 	rsb	ip, lr, #32
   87496:	fa24 f30c 	lsr.w	r3, r4, ip
   8749a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   8749e:	fbb3 faf8 	udiv	sl, r3, r8
   874a2:	fa1f f987 	uxth.w	r9, r7
   874a6:	fb08 351a 	mls	r5, r8, sl, r3
   874aa:	fa20 fc0c 	lsr.w	ip, r0, ip
   874ae:	fa04 f40e 	lsl.w	r4, r4, lr
   874b2:	fb0a fb09 	mul.w	fp, sl, r9
   874b6:	ea4c 0c04 	orr.w	ip, ip, r4
   874ba:	ea4f 421c 	mov.w	r2, ip, lsr #16
   874be:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
   874c2:	459b      	cmp	fp, r3
   874c4:	fa00 f50e 	lsl.w	r5, r0, lr
   874c8:	d90a      	bls.n	874e0 <__udivmoddi4+0x1c0>
   874ca:	19db      	adds	r3, r3, r7
   874cc:	f10a 32ff 	add.w	r2, sl, #4294967295
   874d0:	f080 808b 	bcs.w	875ea <__udivmoddi4+0x2ca>
   874d4:	459b      	cmp	fp, r3
   874d6:	f240 8088 	bls.w	875ea <__udivmoddi4+0x2ca>
   874da:	f1aa 0a02 	sub.w	sl, sl, #2
   874de:	443b      	add	r3, r7
   874e0:	ebcb 0303 	rsb	r3, fp, r3
   874e4:	fbb3 f0f8 	udiv	r0, r3, r8
   874e8:	fb08 3310 	mls	r3, r8, r0, r3
   874ec:	fb00 f409 	mul.w	r4, r0, r9
   874f0:	fa1f fc8c 	uxth.w	ip, ip
   874f4:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
   874f8:	429c      	cmp	r4, r3
   874fa:	d907      	bls.n	8750c <__udivmoddi4+0x1ec>
   874fc:	19db      	adds	r3, r3, r7
   874fe:	f100 32ff 	add.w	r2, r0, #4294967295
   87502:	d26e      	bcs.n	875e2 <__udivmoddi4+0x2c2>
   87504:	429c      	cmp	r4, r3
   87506:	d96c      	bls.n	875e2 <__udivmoddi4+0x2c2>
   87508:	3802      	subs	r0, #2
   8750a:	443b      	add	r3, r7
   8750c:	1b1c      	subs	r4, r3, r4
   8750e:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
   87512:	e78b      	b.n	8742c <__udivmoddi4+0x10c>
   87514:	f1c1 0e20 	rsb	lr, r1, #32
   87518:	408b      	lsls	r3, r1
   8751a:	fa22 fc0e 	lsr.w	ip, r2, lr
   8751e:	ea4c 0c03 	orr.w	ip, ip, r3
   87522:	fa24 f70e 	lsr.w	r7, r4, lr
   87526:	ea4f 491c 	mov.w	r9, ip, lsr #16
   8752a:	fbb7 faf9 	udiv	sl, r7, r9
   8752e:	fa1f f38c 	uxth.w	r3, ip
   87532:	fb09 771a 	mls	r7, r9, sl, r7
   87536:	fa20 f80e 	lsr.w	r8, r0, lr
   8753a:	408c      	lsls	r4, r1
   8753c:	fb0a f503 	mul.w	r5, sl, r3
   87540:	ea48 0404 	orr.w	r4, r8, r4
   87544:	ea4f 4814 	mov.w	r8, r4, lsr #16
   87548:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   8754c:	42bd      	cmp	r5, r7
   8754e:	fa02 f201 	lsl.w	r2, r2, r1
   87552:	fa00 fb01 	lsl.w	fp, r0, r1
   87556:	d909      	bls.n	8756c <__udivmoddi4+0x24c>
   87558:	eb17 070c 	adds.w	r7, r7, ip
   8755c:	f10a 30ff 	add.w	r0, sl, #4294967295
   87560:	d241      	bcs.n	875e6 <__udivmoddi4+0x2c6>
   87562:	42bd      	cmp	r5, r7
   87564:	d93f      	bls.n	875e6 <__udivmoddi4+0x2c6>
   87566:	f1aa 0a02 	sub.w	sl, sl, #2
   8756a:	4467      	add	r7, ip
   8756c:	1b7f      	subs	r7, r7, r5
   8756e:	fbb7 f5f9 	udiv	r5, r7, r9
   87572:	fb09 7715 	mls	r7, r9, r5, r7
   87576:	fb05 f303 	mul.w	r3, r5, r3
   8757a:	b2a4      	uxth	r4, r4
   8757c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
   87580:	42bb      	cmp	r3, r7
   87582:	d908      	bls.n	87596 <__udivmoddi4+0x276>
   87584:	eb17 070c 	adds.w	r7, r7, ip
   87588:	f105 30ff 	add.w	r0, r5, #4294967295
   8758c:	d227      	bcs.n	875de <__udivmoddi4+0x2be>
   8758e:	42bb      	cmp	r3, r7
   87590:	d925      	bls.n	875de <__udivmoddi4+0x2be>
   87592:	3d02      	subs	r5, #2
   87594:	4467      	add	r7, ip
   87596:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
   8759a:	fba0 8902 	umull	r8, r9, r0, r2
   8759e:	1aff      	subs	r7, r7, r3
   875a0:	454f      	cmp	r7, r9
   875a2:	4645      	mov	r5, r8
   875a4:	464c      	mov	r4, r9
   875a6:	d314      	bcc.n	875d2 <__udivmoddi4+0x2b2>
   875a8:	d029      	beq.n	875fe <__udivmoddi4+0x2de>
   875aa:	b366      	cbz	r6, 87606 <__udivmoddi4+0x2e6>
   875ac:	ebbb 0305 	subs.w	r3, fp, r5
   875b0:	eb67 0704 	sbc.w	r7, r7, r4
   875b4:	fa07 fe0e 	lsl.w	lr, r7, lr
   875b8:	40cb      	lsrs	r3, r1
   875ba:	40cf      	lsrs	r7, r1
   875bc:	ea4e 0303 	orr.w	r3, lr, r3
   875c0:	e886 0088 	stmia.w	r6, {r3, r7}
   875c4:	2100      	movs	r1, #0
   875c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   875ca:	4623      	mov	r3, r4
   875cc:	e6f3      	b.n	873b6 <__udivmoddi4+0x96>
   875ce:	4618      	mov	r0, r3
   875d0:	e6da      	b.n	87388 <__udivmoddi4+0x68>
   875d2:	ebb8 0502 	subs.w	r5, r8, r2
   875d6:	eb69 040c 	sbc.w	r4, r9, ip
   875da:	3801      	subs	r0, #1
   875dc:	e7e5      	b.n	875aa <__udivmoddi4+0x28a>
   875de:	4605      	mov	r5, r0
   875e0:	e7d9      	b.n	87596 <__udivmoddi4+0x276>
   875e2:	4610      	mov	r0, r2
   875e4:	e792      	b.n	8750c <__udivmoddi4+0x1ec>
   875e6:	4682      	mov	sl, r0
   875e8:	e7c0      	b.n	8756c <__udivmoddi4+0x24c>
   875ea:	4692      	mov	sl, r2
   875ec:	e778      	b.n	874e0 <__udivmoddi4+0x1c0>
   875ee:	3802      	subs	r0, #2
   875f0:	443a      	add	r2, r7
   875f2:	e743      	b.n	8747c <__udivmoddi4+0x15c>
   875f4:	4608      	mov	r0, r1
   875f6:	e704      	b.n	87402 <__udivmoddi4+0xe2>
   875f8:	3b02      	subs	r3, #2
   875fa:	443c      	add	r4, r7
   875fc:	e72a      	b.n	87454 <__udivmoddi4+0x134>
   875fe:	45c3      	cmp	fp, r8
   87600:	d3e7      	bcc.n	875d2 <__udivmoddi4+0x2b2>
   87602:	463c      	mov	r4, r7
   87604:	e7d1      	b.n	875aa <__udivmoddi4+0x28a>
   87606:	4631      	mov	r1, r6
   87608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008760c <__aeabi_idiv0>:
   8760c:	4770      	bx	lr
   8760e:	bf00      	nop

00087610 <can_bit_time>:
   87610:	0308 0202 4b03 0209 0303 4302 030a 0303     .....K.....C....
   87620:	4603 040b 0303 4804 030c 0404 4304 040d     .F.....H.....C..
   87630:	0404 4d04 040e 0504 4004 040f 0505 4304     ...M.....@.....C
   87640:	0510 0505 4504 0611 0505 4704 0512 0606     .....E.....G....
   87650:	4304 0613 0606 4404 0714 0606 4604 0815     .C.....D.....F..
   87660:	0606 4704 0716 0707 4404 0817 0708 4604     ...G.....D.....F
   87670:	0718 0808 4304 0819 0808 4404 6f63 6e75     .....C.....Dcoun
   87680:	2074 203d 2509 0a64 0000 0000 6577 636c     t = .%d.....welc
   87690:	6d6f 0a65 0000 0000 6556 7372 6f69 316e     ome.....Version1
   876a0:	312e 000a 6176 756c 2065 616d 6374 6568     .1..value matche
   876b0:	0a64 0000 616d 696e 7570 616c 6974 6e6f     d...manipulation
   876c0:	000a 0000 6641 6574 2072 6425 000a 0000     ....After %d....
   876d0:	0043 0000                                   C...

000876d4 <_global_impure_ptr>:
   876d4:	00b0 2007                                   ... 

000876d8 <zeroes.6993>:
   876d8:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   876e8:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
   876f8:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
   87708:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..

00087718 <blanks.6992>:
   87718:	2020 2020 2020 2020 2020 2020 2020 2020                     

00087728 <_init>:
   87728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8772a:	bf00      	nop
   8772c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8772e:	bc08      	pop	{r3}
   87730:	469e      	mov	lr, r3
   87732:	4770      	bx	lr

00087734 <__init_array_start>:
   87734:	00085945 	.word	0x00085945

00087738 <__frame_dummy_init_array_entry>:
   87738:	00080119                                ....

0008773c <_fini>:
   8773c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8773e:	bf00      	nop
   87740:	bcf8      	pop	{r3, r4, r5, r6, r7}
   87742:	bc08      	pop	{r3}
   87744:	469e      	mov	lr, r3
   87746:	4770      	bx	lr

00087748 <__fini_array_start>:
   87748:	000800f5 	.word	0x000800f5
