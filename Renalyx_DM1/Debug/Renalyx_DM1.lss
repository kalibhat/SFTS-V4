
Renalyx_DM1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0002a740  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000017d4  20070000  000aa740  00038000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000128c  200717d4  000abf14  000397d4  2**2
                  ALLOC
  3 .stack        00002000  20072a60  000ad1a0  000397d4  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  000397d4  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  000397fd  2**0
                  CONTENTS, READONLY
  6 .debug_info   0005a930  00000000  00000000  00039858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000a1f0  00000000  00000000  00094188  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00011641  00000000  00000000  0009e378  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00002368  00000000  00000000  000af9b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001e98  00000000  00000000  000b1d21  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00034017  00000000  00000000  000b3bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005dfaf  00000000  00000000  000e7bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00075f4f  00000000  00000000  00145b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00008e94  00000000  00000000  001bbad0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20074a60 	.word	0x20074a60
   80004:	0009caa9 	.word	0x0009caa9
   80008:	0009caa1 	.word	0x0009caa1
   8000c:	0009caa1 	.word	0x0009caa1
   80010:	0009caa1 	.word	0x0009caa1
   80014:	0009caa1 	.word	0x0009caa1
   80018:	0009caa1 	.word	0x0009caa1
	...
   8002c:	0009caa1 	.word	0x0009caa1
   80030:	0009caa1 	.word	0x0009caa1
   80034:	00000000 	.word	0x00000000
   80038:	0009caa1 	.word	0x0009caa1
   8003c:	000989f1 	.word	0x000989f1
   80040:	0009caa1 	.word	0x0009caa1
   80044:	0009caa1 	.word	0x0009caa1
   80048:	0009caa1 	.word	0x0009caa1
   8004c:	0009caa1 	.word	0x0009caa1
   80050:	0009caa1 	.word	0x0009caa1
   80054:	0009caa1 	.word	0x0009caa1
   80058:	0009caa1 	.word	0x0009caa1
   8005c:	0009caa1 	.word	0x0009caa1
   80060:	00098941 	.word	0x00098941
   80064:	0009caa1 	.word	0x0009caa1
   80068:	00000000 	.word	0x00000000
   8006c:	0009c2b9 	.word	0x0009c2b9
   80070:	0009c2d1 	.word	0x0009c2d1
   80074:	0009c2e9 	.word	0x0009c2e9
   80078:	0009c301 	.word	0x0009c301
	...
   80084:	0009caa1 	.word	0x0009caa1
   80088:	0009caa1 	.word	0x0009caa1
   8008c:	0009caa1 	.word	0x0009caa1
   80090:	0009caa1 	.word	0x0009caa1
   80094:	0009caa1 	.word	0x0009caa1
   80098:	0009caa1 	.word	0x0009caa1
   8009c:	0009caa1 	.word	0x0009caa1
   800a0:	0009caa1 	.word	0x0009caa1
   800a4:	00000000 	.word	0x00000000
   800a8:	0009caa1 	.word	0x0009caa1
   800ac:	0009897d 	.word	0x0009897d
   800b0:	0009d9c1 	.word	0x0009d9c1
   800b4:	0009caa1 	.word	0x0009caa1
   800b8:	000989d1 	.word	0x000989d1
   800bc:	0009caa1 	.word	0x0009caa1
   800c0:	0009caa1 	.word	0x0009caa1
   800c4:	000989b1 	.word	0x000989b1
   800c8:	0009caa1 	.word	0x0009caa1
   800cc:	0009caa1 	.word	0x0009caa1
   800d0:	0009caa1 	.word	0x0009caa1
   800d4:	0009caa1 	.word	0x0009caa1
   800d8:	0009caa1 	.word	0x0009caa1
   800dc:	0009caa1 	.word	0x0009caa1
   800e0:	0009caa1 	.word	0x0009caa1
   800e4:	0009caa1 	.word	0x0009caa1
   800e8:	0009caa1 	.word	0x0009caa1
   800ec:	00097b3d 	.word	0x00097b3d
   800f0:	0009caa1 	.word	0x0009caa1

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200717d4 	.word	0x200717d4
   80110:	00000000 	.word	0x00000000
   80114:	000aa740 	.word	0x000aa740

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	000aa740 	.word	0x000aa740
   80144:	200717d8 	.word	0x200717d8
   80148:	000aa740 	.word	0x000aa740
   8014c:	00000000 	.word	0x00000000

00080150 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   80150:	b580      	push	{r7, lr}
   80152:	b082      	sub	sp, #8
   80154:	af00      	add	r7, sp, #0
   80156:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80158:	687b      	ldr	r3, [r7, #4]
   8015a:	2b07      	cmp	r3, #7
   8015c:	d830      	bhi.n	801c0 <osc_enable+0x70>
   8015e:	a201      	add	r2, pc, #4	; (adr r2, 80164 <osc_enable+0x14>)
   80160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80164:	000801c1 	.word	0x000801c1
   80168:	00080185 	.word	0x00080185
   8016c:	0008018d 	.word	0x0008018d
   80170:	00080195 	.word	0x00080195
   80174:	0008019d 	.word	0x0008019d
   80178:	000801a5 	.word	0x000801a5
   8017c:	000801ad 	.word	0x000801ad
   80180:	000801b7 	.word	0x000801b7
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80184:	2000      	movs	r0, #0
   80186:	4b10      	ldr	r3, [pc, #64]	; (801c8 <osc_enable+0x78>)
   80188:	4798      	blx	r3
		break;
   8018a:	e019      	b.n	801c0 <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   8018c:	2001      	movs	r0, #1
   8018e:	4b0e      	ldr	r3, [pc, #56]	; (801c8 <osc_enable+0x78>)
   80190:	4798      	blx	r3
		break;
   80192:	e015      	b.n	801c0 <osc_enable+0x70>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80194:	2000      	movs	r0, #0
   80196:	4b0d      	ldr	r3, [pc, #52]	; (801cc <osc_enable+0x7c>)
   80198:	4798      	blx	r3
		break;
   8019a:	e011      	b.n	801c0 <osc_enable+0x70>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   8019c:	2010      	movs	r0, #16
   8019e:	4b0b      	ldr	r3, [pc, #44]	; (801cc <osc_enable+0x7c>)
   801a0:	4798      	blx	r3
		break;
   801a2:	e00d      	b.n	801c0 <osc_enable+0x70>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   801a4:	2020      	movs	r0, #32
   801a6:	4b09      	ldr	r3, [pc, #36]	; (801cc <osc_enable+0x7c>)
   801a8:	4798      	blx	r3
		break;
   801aa:	e009      	b.n	801c0 <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   801ac:	2000      	movs	r0, #0
   801ae:	213e      	movs	r1, #62	; 0x3e
   801b0:	4b07      	ldr	r3, [pc, #28]	; (801d0 <osc_enable+0x80>)
   801b2:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   801b4:	e004      	b.n	801c0 <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   801b6:	2001      	movs	r0, #1
   801b8:	213e      	movs	r1, #62	; 0x3e
   801ba:	4b05      	ldr	r3, [pc, #20]	; (801d0 <osc_enable+0x80>)
   801bc:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   801be:	bf00      	nop
	}
}
   801c0:	3708      	adds	r7, #8
   801c2:	46bd      	mov	sp, r7
   801c4:	bd80      	pop	{r7, pc}
   801c6:	bf00      	nop
   801c8:	0009c39d 	.word	0x0009c39d
   801cc:	0009c409 	.word	0x0009c409
   801d0:	0009c4a9 	.word	0x0009c4a9

000801d4 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   801d4:	b580      	push	{r7, lr}
   801d6:	b082      	sub	sp, #8
   801d8:	af00      	add	r7, sp, #0
   801da:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   801dc:	687b      	ldr	r3, [r7, #4]
   801de:	2b07      	cmp	r3, #7
   801e0:	d826      	bhi.n	80230 <osc_is_ready+0x5c>
   801e2:	a201      	add	r2, pc, #4	; (adr r2, 801e8 <osc_is_ready+0x14>)
   801e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   801e8:	00080209 	.word	0x00080209
   801ec:	0008020d 	.word	0x0008020d
   801f0:	0008020d 	.word	0x0008020d
   801f4:	0008021f 	.word	0x0008021f
   801f8:	0008021f 	.word	0x0008021f
   801fc:	0008021f 	.word	0x0008021f
   80200:	0008021f 	.word	0x0008021f
   80204:	0008021f 	.word	0x0008021f
	case OSC_SLCK_32K_RC:
		return 1;
   80208:	2301      	movs	r3, #1
   8020a:	e012      	b.n	80232 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   8020c:	4b0b      	ldr	r3, [pc, #44]	; (8023c <osc_is_ready+0x68>)
   8020e:	4798      	blx	r3
   80210:	4603      	mov	r3, r0
   80212:	2b00      	cmp	r3, #0
   80214:	bf14      	ite	ne
   80216:	2301      	movne	r3, #1
   80218:	2300      	moveq	r3, #0
   8021a:	b2db      	uxtb	r3, r3
   8021c:	e009      	b.n	80232 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8021e:	4b08      	ldr	r3, [pc, #32]	; (80240 <osc_is_ready+0x6c>)
   80220:	4798      	blx	r3
   80222:	4603      	mov	r3, r0
   80224:	2b00      	cmp	r3, #0
   80226:	bf14      	ite	ne
   80228:	2301      	movne	r3, #1
   8022a:	2300      	moveq	r3, #0
   8022c:	b2db      	uxtb	r3, r3
   8022e:	e000      	b.n	80232 <osc_is_ready+0x5e>
	}

	return 0;
   80230:	2300      	movs	r3, #0
}
   80232:	4618      	mov	r0, r3
   80234:	3708      	adds	r7, #8
   80236:	46bd      	mov	sp, r7
   80238:	bd80      	pop	{r7, pc}
   8023a:	bf00      	nop
   8023c:	0009c3d5 	.word	0x0009c3d5
   80240:	0009c521 	.word	0x0009c521

00080244 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80244:	b480      	push	{r7}
   80246:	b083      	sub	sp, #12
   80248:	af00      	add	r7, sp, #0
   8024a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8024c:	687b      	ldr	r3, [r7, #4]
   8024e:	2b07      	cmp	r3, #7
   80250:	d825      	bhi.n	8029e <osc_get_rate+0x5a>
   80252:	a201      	add	r2, pc, #4	; (adr r2, 80258 <osc_get_rate+0x14>)
   80254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80258:	00080279 	.word	0x00080279
   8025c:	0008027f 	.word	0x0008027f
   80260:	00080285 	.word	0x00080285
   80264:	0008028b 	.word	0x0008028b
   80268:	0008028f 	.word	0x0008028f
   8026c:	00080293 	.word	0x00080293
   80270:	00080297 	.word	0x00080297
   80274:	0008029b 	.word	0x0008029b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80278:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8027c:	e010      	b.n	802a0 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8027e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80282:	e00d      	b.n	802a0 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80284:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80288:	e00a      	b.n	802a0 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8028a:	4b08      	ldr	r3, [pc, #32]	; (802ac <osc_get_rate+0x68>)
   8028c:	e008      	b.n	802a0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8028e:	4b08      	ldr	r3, [pc, #32]	; (802b0 <osc_get_rate+0x6c>)
   80290:	e006      	b.n	802a0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80292:	4b08      	ldr	r3, [pc, #32]	; (802b4 <osc_get_rate+0x70>)
   80294:	e004      	b.n	802a0 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80296:	4b07      	ldr	r3, [pc, #28]	; (802b4 <osc_get_rate+0x70>)
   80298:	e002      	b.n	802a0 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8029a:	4b06      	ldr	r3, [pc, #24]	; (802b4 <osc_get_rate+0x70>)
   8029c:	e000      	b.n	802a0 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   8029e:	2300      	movs	r3, #0
}
   802a0:	4618      	mov	r0, r3
   802a2:	370c      	adds	r7, #12
   802a4:	46bd      	mov	sp, r7
   802a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   802aa:	4770      	bx	lr
   802ac:	003d0900 	.word	0x003d0900
   802b0:	007a1200 	.word	0x007a1200
   802b4:	00b71b00 	.word	0x00b71b00

000802b8 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   802b8:	b580      	push	{r7, lr}
   802ba:	b082      	sub	sp, #8
   802bc:	af00      	add	r7, sp, #0
   802be:	4603      	mov	r3, r0
   802c0:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   802c2:	bf00      	nop
   802c4:	79fb      	ldrb	r3, [r7, #7]
   802c6:	4618      	mov	r0, r3
   802c8:	4b05      	ldr	r3, [pc, #20]	; (802e0 <osc_wait_ready+0x28>)
   802ca:	4798      	blx	r3
   802cc:	4603      	mov	r3, r0
   802ce:	f083 0301 	eor.w	r3, r3, #1
   802d2:	b2db      	uxtb	r3, r3
   802d4:	2b00      	cmp	r3, #0
   802d6:	d1f5      	bne.n	802c4 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   802d8:	3708      	adds	r7, #8
   802da:	46bd      	mov	sp, r7
   802dc:	bd80      	pop	{r7, pc}
   802de:	bf00      	nop
   802e0:	000801d5 	.word	0x000801d5

000802e4 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   802e4:	b580      	push	{r7, lr}
   802e6:	b086      	sub	sp, #24
   802e8:	af00      	add	r7, sp, #0
   802ea:	60f8      	str	r0, [r7, #12]
   802ec:	607a      	str	r2, [r7, #4]
   802ee:	603b      	str	r3, [r7, #0]
   802f0:	460b      	mov	r3, r1
   802f2:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   802f4:	687b      	ldr	r3, [r7, #4]
   802f6:	2b00      	cmp	r3, #0
   802f8:	d107      	bne.n	8030a <pll_config_init+0x26>
   802fa:	683b      	ldr	r3, [r7, #0]
   802fc:	2b00      	cmp	r3, #0
   802fe:	d104      	bne.n	8030a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   80300:	68fb      	ldr	r3, [r7, #12]
   80302:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   80306:	601a      	str	r2, [r3, #0]
   80308:	e019      	b.n	8033e <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   8030a:	7afb      	ldrb	r3, [r7, #11]
   8030c:	4618      	mov	r0, r3
   8030e:	4b0d      	ldr	r3, [pc, #52]	; (80344 <pll_config_init+0x60>)
   80310:	4798      	blx	r3
   80312:	4602      	mov	r2, r0
   80314:	687b      	ldr	r3, [r7, #4]
   80316:	fbb2 f3f3 	udiv	r3, r2, r3
   8031a:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   8031c:	697b      	ldr	r3, [r7, #20]
   8031e:	683a      	ldr	r2, [r7, #0]
   80320:	fb02 f303 	mul.w	r3, r2, r3
   80324:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   80326:	683b      	ldr	r3, [r7, #0]
   80328:	3b01      	subs	r3, #1
   8032a:	041a      	lsls	r2, r3, #16
   8032c:	4b06      	ldr	r3, [pc, #24]	; (80348 <pll_config_init+0x64>)
   8032e:	4013      	ands	r3, r2
   80330:	687a      	ldr	r2, [r7, #4]
   80332:	b2d2      	uxtb	r2, r2
   80334:	4313      	orrs	r3, r2
   80336:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   8033a:	68fb      	ldr	r3, [r7, #12]
   8033c:	601a      	str	r2, [r3, #0]
	}
}
   8033e:	3718      	adds	r7, #24
   80340:	46bd      	mov	sp, r7
   80342:	bd80      	pop	{r7, pc}
   80344:	00080245 	.word	0x00080245
   80348:	07ff0000 	.word	0x07ff0000

0008034c <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   8034c:	b580      	push	{r7, lr}
   8034e:	b082      	sub	sp, #8
   80350:	af00      	add	r7, sp, #0
   80352:	6078      	str	r0, [r7, #4]
   80354:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80356:	683b      	ldr	r3, [r7, #0]
   80358:	2b00      	cmp	r3, #0
   8035a:	d108      	bne.n	8036e <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   8035c:	4b08      	ldr	r3, [pc, #32]	; (80380 <pll_enable+0x34>)
   8035e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80360:	4a08      	ldr	r2, [pc, #32]	; (80384 <pll_enable+0x38>)
   80362:	687b      	ldr	r3, [r7, #4]
   80364:	681b      	ldr	r3, [r3, #0]
   80366:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8036a:	6293      	str	r3, [r2, #40]	; 0x28
   8036c:	e005      	b.n	8037a <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   8036e:	4a05      	ldr	r2, [pc, #20]	; (80384 <pll_enable+0x38>)
   80370:	687b      	ldr	r3, [r7, #4]
   80372:	681b      	ldr	r3, [r3, #0]
   80374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80378:	61d3      	str	r3, [r2, #28]
	}
}
   8037a:	3708      	adds	r7, #8
   8037c:	46bd      	mov	sp, r7
   8037e:	bd80      	pop	{r7, pc}
   80380:	0009c53d 	.word	0x0009c53d
   80384:	400e0600 	.word	0x400e0600

00080388 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   80388:	b580      	push	{r7, lr}
   8038a:	b082      	sub	sp, #8
   8038c:	af00      	add	r7, sp, #0
   8038e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80390:	687b      	ldr	r3, [r7, #4]
   80392:	2b00      	cmp	r3, #0
   80394:	d103      	bne.n	8039e <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   80396:	4b05      	ldr	r3, [pc, #20]	; (803ac <pll_is_locked+0x24>)
   80398:	4798      	blx	r3
   8039a:	4603      	mov	r3, r0
   8039c:	e002      	b.n	803a4 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   8039e:	4b04      	ldr	r3, [pc, #16]	; (803b0 <pll_is_locked+0x28>)
   803a0:	4798      	blx	r3
   803a2:	4603      	mov	r3, r0
	}
}
   803a4:	4618      	mov	r0, r3
   803a6:	3708      	adds	r7, #8
   803a8:	46bd      	mov	sp, r7
   803aa:	bd80      	pop	{r7, pc}
   803ac:	0009c555 	.word	0x0009c555
   803b0:	0009c571 	.word	0x0009c571

000803b4 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   803b4:	b580      	push	{r7, lr}
   803b6:	b082      	sub	sp, #8
   803b8:	af00      	add	r7, sp, #0
   803ba:	4603      	mov	r3, r0
   803bc:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   803be:	79fb      	ldrb	r3, [r7, #7]
   803c0:	3b03      	subs	r3, #3
   803c2:	2b04      	cmp	r3, #4
   803c4:	d808      	bhi.n	803d8 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   803c6:	79fb      	ldrb	r3, [r7, #7]
   803c8:	4618      	mov	r0, r3
   803ca:	4b05      	ldr	r3, [pc, #20]	; (803e0 <pll_enable_source+0x2c>)
   803cc:	4798      	blx	r3
		osc_wait_ready(e_src);
   803ce:	79fb      	ldrb	r3, [r7, #7]
   803d0:	4618      	mov	r0, r3
   803d2:	4b04      	ldr	r3, [pc, #16]	; (803e4 <pll_enable_source+0x30>)
   803d4:	4798      	blx	r3
		break;
   803d6:	e000      	b.n	803da <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   803d8:	bf00      	nop
	}
}
   803da:	3708      	adds	r7, #8
   803dc:	46bd      	mov	sp, r7
   803de:	bd80      	pop	{r7, pc}
   803e0:	00080151 	.word	0x00080151
   803e4:	000802b9 	.word	0x000802b9

000803e8 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   803e8:	b580      	push	{r7, lr}
   803ea:	b082      	sub	sp, #8
   803ec:	af00      	add	r7, sp, #0
   803ee:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   803f0:	bf00      	nop
   803f2:	6878      	ldr	r0, [r7, #4]
   803f4:	4b04      	ldr	r3, [pc, #16]	; (80408 <pll_wait_for_lock+0x20>)
   803f6:	4798      	blx	r3
   803f8:	4603      	mov	r3, r0
   803fa:	2b00      	cmp	r3, #0
   803fc:	d0f9      	beq.n	803f2 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   803fe:	2300      	movs	r3, #0
}
   80400:	4618      	mov	r0, r3
   80402:	3708      	adds	r7, #8
   80404:	46bd      	mov	sp, r7
   80406:	bd80      	pop	{r7, pc}
   80408:	00080389 	.word	0x00080389

0008040c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   8040c:	b580      	push	{r7, lr}
   8040e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   80410:	2006      	movs	r0, #6
   80412:	4b04      	ldr	r3, [pc, #16]	; (80424 <sysclk_get_main_hz+0x18>)
   80414:	4798      	blx	r3
   80416:	4602      	mov	r2, r0
   80418:	4613      	mov	r3, r2
   8041a:	00db      	lsls	r3, r3, #3
   8041c:	1a9b      	subs	r3, r3, r2
   8041e:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80420:	4618      	mov	r0, r3
   80422:	bd80      	pop	{r7, pc}
   80424:	00080245 	.word	0x00080245

00080428 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   80428:	b580      	push	{r7, lr}
   8042a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   8042c:	4b02      	ldr	r3, [pc, #8]	; (80438 <sysclk_get_cpu_hz+0x10>)
   8042e:	4798      	blx	r3
   80430:	4603      	mov	r3, r0
   80432:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   80434:	4618      	mov	r0, r3
   80436:	bd80      	pop	{r7, pc}
   80438:	0008040d 	.word	0x0008040d

0008043c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8043c:	b590      	push	{r4, r7, lr}
   8043e:	b083      	sub	sp, #12
   80440:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80442:	4b10      	ldr	r3, [pc, #64]	; (80484 <sysclk_init+0x48>)
   80444:	4798      	blx	r3
   80446:	4603      	mov	r3, r0
   80448:	4618      	mov	r0, r3
   8044a:	4b0f      	ldr	r3, [pc, #60]	; (80488 <sysclk_init+0x4c>)
   8044c:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   8044e:	2006      	movs	r0, #6
   80450:	4b0e      	ldr	r3, [pc, #56]	; (8048c <sysclk_init+0x50>)
   80452:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   80454:	1d3b      	adds	r3, r7, #4
   80456:	4618      	mov	r0, r3
   80458:	2106      	movs	r1, #6
   8045a:	2201      	movs	r2, #1
   8045c:	230e      	movs	r3, #14
   8045e:	4c0c      	ldr	r4, [pc, #48]	; (80490 <sysclk_init+0x54>)
   80460:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   80462:	1d3b      	adds	r3, r7, #4
   80464:	4618      	mov	r0, r3
   80466:	2100      	movs	r1, #0
   80468:	4b0a      	ldr	r3, [pc, #40]	; (80494 <sysclk_init+0x58>)
   8046a:	4798      	blx	r3
		pll_wait_for_lock(0);
   8046c:	2000      	movs	r0, #0
   8046e:	4b0a      	ldr	r3, [pc, #40]	; (80498 <sysclk_init+0x5c>)
   80470:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80472:	2010      	movs	r0, #16
   80474:	4b09      	ldr	r3, [pc, #36]	; (8049c <sysclk_init+0x60>)
   80476:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80478:	4b09      	ldr	r3, [pc, #36]	; (804a0 <sysclk_init+0x64>)
   8047a:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   8047c:	370c      	adds	r7, #12
   8047e:	46bd      	mov	sp, r7
   80480:	bd90      	pop	{r4, r7, pc}
   80482:	bf00      	nop
   80484:	00080429 	.word	0x00080429
   80488:	0009ccd1 	.word	0x0009ccd1
   8048c:	000803b5 	.word	0x000803b5
   80490:	000802e5 	.word	0x000802e5
   80494:	0008034d 	.word	0x0008034d
   80498:	000803e9 	.word	0x000803e9
   8049c:	0009c319 	.word	0x0009c319
   804a0:	0009cb51 	.word	0x0009cb51

000804a4 <efc_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful.
 */
uint32_t efc_init(Efc *p_efc, uint32_t ul_access_mode, uint32_t ul_fws)
{
   804a4:	b580      	push	{r7, lr}
   804a6:	b084      	sub	sp, #16
   804a8:	af00      	add	r7, sp, #0
   804aa:	60f8      	str	r0, [r7, #12]
   804ac:	60b9      	str	r1, [r7, #8]
   804ae:	607a      	str	r2, [r7, #4]
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws));
   804b0:	687b      	ldr	r3, [r7, #4]
   804b2:	021b      	lsls	r3, r3, #8
   804b4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
   804b8:	68bb      	ldr	r3, [r7, #8]
   804ba:	4313      	orrs	r3, r2
   804bc:	68f8      	ldr	r0, [r7, #12]
   804be:	4619      	mov	r1, r3
   804c0:	4b03      	ldr	r3, [pc, #12]	; (804d0 <efc_init+0x2c>)
   804c2:	4798      	blx	r3
	return EFC_RC_OK;
   804c4:	2300      	movs	r3, #0
}
   804c6:	4618      	mov	r0, r3
   804c8:	3710      	adds	r7, #16
   804ca:	46bd      	mov	sp, r7
   804cc:	bd80      	pop	{r7, pc}
   804ce:	bf00      	nop
   804d0:	200700b9 	.word	0x200700b9

000804d4 <efc_set_wait_state>:
 *
 * \param p_efc Pointer to an EFC instance.
 * \param ul_fws The number of wait states in cycle (no shift).
 */
void efc_set_wait_state(Efc *p_efc, uint32_t ul_fws)
{
   804d4:	b580      	push	{r7, lr}
   804d6:	b084      	sub	sp, #16
   804d8:	af00      	add	r7, sp, #0
   804da:	6078      	str	r0, [r7, #4]
   804dc:	6039      	str	r1, [r7, #0]
	uint32_t ul_fmr = p_efc->EEFC_FMR & (~EEFC_FMR_FWS_Msk);
   804de:	687b      	ldr	r3, [r7, #4]
   804e0:	681b      	ldr	r3, [r3, #0]
   804e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   804e6:	60fb      	str	r3, [r7, #12]

	efc_write_fmr(p_efc, ul_fmr | EEFC_FMR_FWS(ul_fws));
   804e8:	683b      	ldr	r3, [r7, #0]
   804ea:	021b      	lsls	r3, r3, #8
   804ec:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
   804f0:	68fb      	ldr	r3, [r7, #12]
   804f2:	4313      	orrs	r3, r2
   804f4:	6878      	ldr	r0, [r7, #4]
   804f6:	4619      	mov	r1, r3
   804f8:	4b02      	ldr	r3, [pc, #8]	; (80504 <efc_set_wait_state+0x30>)
   804fa:	4798      	blx	r3
}
   804fc:	3710      	adds	r7, #16
   804fe:	46bd      	mov	sp, r7
   80500:	bd80      	pop	{r7, pc}
   80502:	bf00      	nop
   80504:	200700b9 	.word	0x200700b9

00080508 <efc_get_wait_state>:
 * \param p_efc Pointer to an EFC instance.
 *
 * \return The number of wait states in cycle (no shift).
 */
uint32_t efc_get_wait_state(Efc *p_efc)
{
   80508:	b480      	push	{r7}
   8050a:	b083      	sub	sp, #12
   8050c:	af00      	add	r7, sp, #0
   8050e:	6078      	str	r0, [r7, #4]
	return ((p_efc->EEFC_FMR & EEFC_FMR_FWS_Msk) >> EEFC_FMR_FWS_Pos);
   80510:	687b      	ldr	r3, [r7, #4]
   80512:	681b      	ldr	r3, [r3, #0]
   80514:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   80518:	0a1b      	lsrs	r3, r3, #8
}
   8051a:	4618      	mov	r0, r3
   8051c:	370c      	adds	r7, #12
   8051e:	46bd      	mov	sp, r7
   80520:	f85d 7b04 	ldr.w	r7, [sp], #4
   80524:	4770      	bx	lr
   80526:	bf00      	nop

00080528 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   80528:	b580      	push	{r7, lr}
   8052a:	b086      	sub	sp, #24
   8052c:	af00      	add	r7, sp, #0
   8052e:	60f8      	str	r0, [r7, #12]
   80530:	60b9      	str	r1, [r7, #8]
   80532:	607a      	str	r2, [r7, #4]
	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   80534:	68bb      	ldr	r3, [r7, #8]
   80536:	2b0e      	cmp	r3, #14
   80538:	d002      	beq.n	80540 <efc_perform_command+0x18>
   8053a:	68bb      	ldr	r3, [r7, #8]
   8053c:	2b0f      	cmp	r3, #15
   8053e:	d102      	bne.n	80546 <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
   80540:	f04f 33ff 	mov.w	r3, #4294967295
   80544:	e020      	b.n	80588 <efc_perform_command+0x60>
	}

#if (SAM3XA || SAM3U4)
	/* Use IAP function with 2 parameters in ROM. */
	static uint32_t(*iap_perform_command) (uint32_t, uint32_t);
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;
   80546:	68fb      	ldr	r3, [r7, #12]
   80548:	4a11      	ldr	r2, [pc, #68]	; (80590 <efc_perform_command+0x68>)
   8054a:	4293      	cmp	r3, r2
   8054c:	bf14      	ite	ne
   8054e:	2301      	movne	r3, #1
   80550:	2300      	moveq	r3, #0
   80552:	b2db      	uxtb	r3, r3
   80554:	617b      	str	r3, [r7, #20]

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
   80556:	4b0f      	ldr	r3, [pc, #60]	; (80594 <efc_perform_command+0x6c>)
   80558:	681b      	ldr	r3, [r3, #0]
	/* Use IAP function with 2 parameters in ROM. */
	static uint32_t(*iap_perform_command) (uint32_t, uint32_t);
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
   8055a:	461a      	mov	r2, r3
#if (SAM3XA || SAM3U4)
	/* Use IAP function with 2 parameters in ROM. */
	static uint32_t(*iap_perform_command) (uint32_t, uint32_t);
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;

	iap_perform_command =
   8055c:	4b0e      	ldr	r3, [pc, #56]	; (80598 <efc_perform_command+0x70>)
   8055e:	601a      	str	r2, [r3, #0]
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
	iap_perform_command(ul_efc_nb,
   80560:	4b0d      	ldr	r3, [pc, #52]	; (80598 <efc_perform_command+0x70>)
   80562:	681a      	ldr	r2, [r3, #0]
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
   80564:	687b      	ldr	r3, [r7, #4]
   80566:	021b      	lsls	r3, r3, #8
   80568:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   8056c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   80570:	68b9      	ldr	r1, [r7, #8]
   80572:	b2c9      	uxtb	r1, r1

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
	iap_perform_command(ul_efc_nb,
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
   80574:	430b      	orrs	r3, r1
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
	iap_perform_command(ul_efc_nb,
   80576:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
   8057a:	6978      	ldr	r0, [r7, #20]
   8057c:	4619      	mov	r1, r3
   8057e:	4790      	blx	r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
	return (p_efc->EEFC_FSR & EEFC_ERROR_FLAGS);
   80580:	68fb      	ldr	r3, [r7, #12]
   80582:	689b      	ldr	r3, [r3, #8]
   80584:	f003 0306 	and.w	r3, r3, #6
	return efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));

#endif
}
   80588:	4618      	mov	r0, r3
   8058a:	3718      	adds	r7, #24
   8058c:	46bd      	mov	sp, r7
   8058e:	bd80      	pop	{r7, pc}
   80590:	400e0a00 	.word	0x400e0a00
   80594:	00100008 	.word	0x00100008
   80598:	200717f0 	.word	0x200717f0

0008059c <efc_get_result>:
 * \param p_efc Pointer to an EFC instance.
 *
 * \return The result of the last executed command.
 */
uint32_t efc_get_result(Efc *p_efc)
{
   8059c:	b480      	push	{r7}
   8059e:	b083      	sub	sp, #12
   805a0:	af00      	add	r7, sp, #0
   805a2:	6078      	str	r0, [r7, #4]
	return p_efc->EEFC_FRR;
   805a4:	687b      	ldr	r3, [r7, #4]
   805a6:	68db      	ldr	r3, [r3, #12]
}
   805a8:	4618      	mov	r0, r3
   805aa:	370c      	adds	r7, #12
   805ac:	46bd      	mov	sp, r7
   805ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   805b2:	4770      	bx	lr

000805b4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   805b4:	b580      	push	{r7, lr}
   805b6:	b082      	sub	sp, #8
   805b8:	af00      	add	r7, sp, #0
   805ba:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   805bc:	6878      	ldr	r0, [r7, #4]
   805be:	4b02      	ldr	r3, [pc, #8]	; (805c8 <sysclk_enable_peripheral_clock+0x14>)
   805c0:	4798      	blx	r3
}
   805c2:	3708      	adds	r7, #8
   805c4:	46bd      	mov	sp, r7
   805c6:	bd80      	pop	{r7, pc}
   805c8:	0009c58d 	.word	0x0009c58d

000805cc <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   805cc:	b580      	push	{r7, lr}
   805ce:	b082      	sub	sp, #8
   805d0:	af00      	add	r7, sp, #0
   805d2:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM)
	if (p_spi == SPI0) {
   805d4:	687b      	ldr	r3, [r7, #4]
   805d6:	4a04      	ldr	r2, [pc, #16]	; (805e8 <spi_enable_clock+0x1c>)
   805d8:	4293      	cmp	r3, r2
   805da:	d102      	bne.n	805e2 <spi_enable_clock+0x16>
		sysclk_enable_peripheral_clock(ID_SPI0);
   805dc:	2018      	movs	r0, #24
   805de:	4b03      	ldr	r3, [pc, #12]	; (805ec <spi_enable_clock+0x20>)
   805e0:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   805e2:	3708      	adds	r7, #8
   805e4:	46bd      	mov	sp, r7
   805e6:	bd80      	pop	{r7, pc}
   805e8:	40008000 	.word	0x40008000
   805ec:	000805b5 	.word	0x000805b5

000805f0 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
   805f0:	b480      	push	{r7}
   805f2:	b083      	sub	sp, #12
   805f4:	af00      	add	r7, sp, #0
   805f6:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   805f8:	687b      	ldr	r3, [r7, #4]
   805fa:	2208      	movs	r2, #8
   805fc:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   805fe:	687b      	ldr	r3, [r7, #4]
   80600:	2220      	movs	r2, #32
   80602:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   80604:	687b      	ldr	r3, [r7, #4]
   80606:	2204      	movs	r2, #4
   80608:	601a      	str	r2, [r3, #0]
}
   8060a:	370c      	adds	r7, #12
   8060c:	46bd      	mov	sp, r7
   8060e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80612:	4770      	bx	lr

00080614 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   80614:	b580      	push	{r7, lr}
   80616:	b084      	sub	sp, #16
   80618:	af00      	add	r7, sp, #0
   8061a:	6078      	str	r0, [r7, #4]
   8061c:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
   8061e:	2300      	movs	r3, #0
   80620:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   80622:	687b      	ldr	r3, [r7, #4]
   80624:	f04f 32ff 	mov.w	r2, #4294967295
   80628:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   8062a:	687b      	ldr	r3, [r7, #4]
   8062c:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
   8062e:	6878      	ldr	r0, [r7, #4]
   80630:	4b0f      	ldr	r3, [pc, #60]	; (80670 <twi_master_init+0x5c>)
   80632:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
   80634:	6878      	ldr	r0, [r7, #4]
   80636:	4b0f      	ldr	r3, [pc, #60]	; (80674 <twi_master_init+0x60>)
   80638:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   8063a:	683b      	ldr	r3, [r7, #0]
   8063c:	685a      	ldr	r2, [r3, #4]
   8063e:	683b      	ldr	r3, [r7, #0]
   80640:	681b      	ldr	r3, [r3, #0]
   80642:	6878      	ldr	r0, [r7, #4]
   80644:	4611      	mov	r1, r2
   80646:	461a      	mov	r2, r3
   80648:	4b0b      	ldr	r3, [pc, #44]	; (80678 <twi_master_init+0x64>)
   8064a:	4798      	blx	r3
   8064c:	4603      	mov	r3, r0
   8064e:	2b01      	cmp	r3, #1
   80650:	d101      	bne.n	80656 <twi_master_init+0x42>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
   80652:	2301      	movs	r3, #1
   80654:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
   80656:	683b      	ldr	r3, [r7, #0]
   80658:	7a5b      	ldrb	r3, [r3, #9]
   8065a:	2b01      	cmp	r3, #1
   8065c:	d102      	bne.n	80664 <twi_master_init+0x50>
		p_twi->TWI_CR = TWI_CR_QUICK;
   8065e:	687b      	ldr	r3, [r7, #4]
   80660:	2240      	movs	r2, #64	; 0x40
   80662:	601a      	str	r2, [r3, #0]
	}

	return status;
   80664:	68fb      	ldr	r3, [r7, #12]
}
   80666:	4618      	mov	r0, r3
   80668:	3710      	adds	r7, #16
   8066a:	46bd      	mov	sp, r7
   8066c:	bd80      	pop	{r7, pc}
   8066e:	bf00      	nop
   80670:	000806f9 	.word	0x000806f9
   80674:	000805f1 	.word	0x000805f1
   80678:	0008067d 	.word	0x0008067d

0008067c <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
   8067c:	b480      	push	{r7}
   8067e:	b087      	sub	sp, #28
   80680:	af00      	add	r7, sp, #0
   80682:	60f8      	str	r0, [r7, #12]
   80684:	60b9      	str	r1, [r7, #8]
   80686:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
   80688:	2300      	movs	r3, #0
   8068a:	617b      	str	r3, [r7, #20]
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   8068c:	68bb      	ldr	r3, [r7, #8]
   8068e:	4a18      	ldr	r2, [pc, #96]	; (806f0 <twi_set_speed+0x74>)
   80690:	4293      	cmp	r3, r2
   80692:	d901      	bls.n	80698 <twi_set_speed+0x1c>
		return FAIL;
   80694:	2301      	movs	r3, #1
   80696:	e024      	b.n	806e2 <twi_set_speed+0x66>
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80698:	68bb      	ldr	r3, [r7, #8]
   8069a:	005b      	lsls	r3, r3, #1
   8069c:	687a      	ldr	r2, [r7, #4]
   8069e:	fbb2 f3f3 	udiv	r3, r2, r3
   806a2:	3b04      	subs	r3, #4
   806a4:	613b      	str	r3, [r7, #16]

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   806a6:	e005      	b.n	806b4 <twi_set_speed+0x38>
		/* Increase clock divider */
		ckdiv++;
   806a8:	697b      	ldr	r3, [r7, #20]
   806aa:	3301      	adds	r3, #1
   806ac:	617b      	str	r3, [r7, #20]
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   806ae:	693b      	ldr	r3, [r7, #16]
   806b0:	085b      	lsrs	r3, r3, #1
   806b2:	613b      	str	r3, [r7, #16]
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   806b4:	693b      	ldr	r3, [r7, #16]
   806b6:	2bff      	cmp	r3, #255	; 0xff
   806b8:	d902      	bls.n	806c0 <twi_set_speed+0x44>
   806ba:	697b      	ldr	r3, [r7, #20]
   806bc:	2b06      	cmp	r3, #6
   806be:	d9f3      	bls.n	806a8 <twi_set_speed+0x2c>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}
	c_lh_div_backup = c_lh_div;
   806c0:	4a0c      	ldr	r2, [pc, #48]	; (806f4 <twi_set_speed+0x78>)
   806c2:	693b      	ldr	r3, [r7, #16]
   806c4:	6013      	str	r3, [r2, #0]
	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   806c6:	693b      	ldr	r3, [r7, #16]
   806c8:	b2da      	uxtb	r2, r3
   806ca:	693b      	ldr	r3, [r7, #16]
   806cc:	021b      	lsls	r3, r3, #8
   806ce:	b29b      	uxth	r3, r3
   806d0:	431a      	orrs	r2, r3
			TWI_CWGR_CKDIV(ckdiv);
   806d2:	697b      	ldr	r3, [r7, #20]
   806d4:	041b      	lsls	r3, r3, #16
   806d6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}
	c_lh_div_backup = c_lh_div;
	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   806da:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}
	c_lh_div_backup = c_lh_div;
	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   806dc:	68fb      	ldr	r3, [r7, #12]
   806de:	611a      	str	r2, [r3, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   806e0:	2300      	movs	r3, #0
}
   806e2:	4618      	mov	r0, r3
   806e4:	371c      	adds	r7, #28
   806e6:	46bd      	mov	sp, r7
   806e8:	f85d 7b04 	ldr.w	r7, [sp], #4
   806ec:	4770      	bx	lr
   806ee:	bf00      	nop
   806f0:	00061a80 	.word	0x00061a80
   806f4:	200717f4 	.word	0x200717f4

000806f8 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
   806f8:	b480      	push	{r7}
   806fa:	b083      	sub	sp, #12
   806fc:	af00      	add	r7, sp, #0
   806fe:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   80700:	687b      	ldr	r3, [r7, #4]
   80702:	2280      	movs	r2, #128	; 0x80
   80704:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
   80706:	687b      	ldr	r3, [r7, #4]
   80708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   8070a:	370c      	adds	r7, #12
   8070c:	46bd      	mov	sp, r7
   8070e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80712:	4770      	bx	lr

00080714 <translate_address>:
 * \param pus_page The first page accessed.
 * \param pus_offset Byte offset in the first page.
 */
static void translate_address(Efc **pp_efc, uint32_t ul_addr,
		uint16_t *pus_page, uint16_t *pus_offset)
{
   80714:	b480      	push	{r7}
   80716:	b087      	sub	sp, #28
   80718:	af00      	add	r7, sp, #0
   8071a:	60f8      	str	r0, [r7, #12]
   8071c:	60b9      	str	r1, [r7, #8]
   8071e:	607a      	str	r2, [r7, #4]
   80720:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint16_t us_page;
	uint16_t us_offset;

#if (SAM3XA || SAM3U4)
	if (ul_addr >= IFLASH1_ADDR) {
   80722:	68bb      	ldr	r3, [r7, #8]
   80724:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
   80728:	d30b      	bcc.n	80742 <translate_address+0x2e>
		p_efc = EFC1;
   8072a:	4b17      	ldr	r3, [pc, #92]	; (80788 <translate_address+0x74>)
   8072c:	617b      	str	r3, [r7, #20]
		us_page = (ul_addr - IFLASH1_ADDR) / IFLASH1_PAGE_SIZE;
   8072e:	68bb      	ldr	r3, [r7, #8]
   80730:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
   80734:	0a1b      	lsrs	r3, r3, #8
   80736:	827b      	strh	r3, [r7, #18]
		us_offset = (ul_addr - IFLASH1_ADDR) % IFLASH1_PAGE_SIZE;
   80738:	68bb      	ldr	r3, [r7, #8]
   8073a:	b29b      	uxth	r3, r3
   8073c:	b2db      	uxtb	r3, r3
   8073e:	823b      	strh	r3, [r7, #16]
   80740:	e00a      	b.n	80758 <translate_address+0x44>
	} else {
		p_efc = EFC0;
   80742:	4b12      	ldr	r3, [pc, #72]	; (8078c <translate_address+0x78>)
   80744:	617b      	str	r3, [r7, #20]
		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
   80746:	68bb      	ldr	r3, [r7, #8]
   80748:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
   8074c:	0a1b      	lsrs	r3, r3, #8
   8074e:	827b      	strh	r3, [r7, #18]
		us_offset = (ul_addr - IFLASH0_ADDR) % IFLASH0_PAGE_SIZE;
   80750:	68bb      	ldr	r3, [r7, #8]
   80752:	b29b      	uxth	r3, r3
   80754:	b2db      	uxtb	r3, r3
   80756:	823b      	strh	r3, [r7, #16]
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
	us_offset = (ul_addr - IFLASH_ADDR) % IFLASH_PAGE_SIZE;
#endif

	/* Store values */
	if (pp_efc) {
   80758:	68fb      	ldr	r3, [r7, #12]
   8075a:	2b00      	cmp	r3, #0
   8075c:	d002      	beq.n	80764 <translate_address+0x50>
		*pp_efc = p_efc;
   8075e:	68fb      	ldr	r3, [r7, #12]
   80760:	697a      	ldr	r2, [r7, #20]
   80762:	601a      	str	r2, [r3, #0]
	}

	if (pus_page) {
   80764:	687b      	ldr	r3, [r7, #4]
   80766:	2b00      	cmp	r3, #0
   80768:	d002      	beq.n	80770 <translate_address+0x5c>
		*pus_page = us_page;
   8076a:	687b      	ldr	r3, [r7, #4]
   8076c:	8a7a      	ldrh	r2, [r7, #18]
   8076e:	801a      	strh	r2, [r3, #0]
	}

	if (pus_offset) {
   80770:	683b      	ldr	r3, [r7, #0]
   80772:	2b00      	cmp	r3, #0
   80774:	d002      	beq.n	8077c <translate_address+0x68>
		*pus_offset = us_offset;
   80776:	683b      	ldr	r3, [r7, #0]
   80778:	8a3a      	ldrh	r2, [r7, #16]
   8077a:	801a      	strh	r2, [r3, #0]
	}
}
   8077c:	371c      	adds	r7, #28
   8077e:	46bd      	mov	sp, r7
   80780:	f85d 7b04 	ldr.w	r7, [sp], #4
   80784:	4770      	bx	lr
   80786:	bf00      	nop
   80788:	400e0c00 	.word	0x400e0c00
   8078c:	400e0a00 	.word	0x400e0a00

00080790 <compute_address>:
 * \param us_offset Byte offset inside page.
 * \param pul_addr Computed address (optional).
 */
static void compute_address(Efc *p_efc, uint16_t us_page, uint16_t us_offset,
		uint32_t *pul_addr)
{
   80790:	b480      	push	{r7}
   80792:	b087      	sub	sp, #28
   80794:	af00      	add	r7, sp, #0
   80796:	60f8      	str	r0, [r7, #12]
   80798:	607b      	str	r3, [r7, #4]
   8079a:	460b      	mov	r3, r1
   8079c:	817b      	strh	r3, [r7, #10]
   8079e:	4613      	mov	r3, r2
   807a0:	813b      	strh	r3, [r7, #8]
		} else {
			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
		}
	}
#else
	ul_addr = (p_efc == EFC0) ?
   807a2:	68fb      	ldr	r3, [r7, #12]
   807a4:	4a0d      	ldr	r2, [pc, #52]	; (807dc <compute_address+0x4c>)
   807a6:	4293      	cmp	r3, r2
   807a8:	d106      	bne.n	807b8 <compute_address+0x28>
			IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset :
   807aa:	897b      	ldrh	r3, [r7, #10]
   807ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
   807b0:	021a      	lsls	r2, r3, #8
		} else {
			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
		}
	}
#else
	ul_addr = (p_efc == EFC0) ?
   807b2:	893b      	ldrh	r3, [r7, #8]
   807b4:	4413      	add	r3, r2
   807b6:	e005      	b.n	807c4 <compute_address+0x34>
			IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset :
			IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
   807b8:	897b      	ldrh	r3, [r7, #10]
   807ba:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   807be:	021a      	lsls	r2, r3, #8
		} else {
			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
		}
	}
#else
	ul_addr = (p_efc == EFC0) ?
   807c0:	893b      	ldrh	r3, [r7, #8]
   807c2:	4413      	add	r3, r2
   807c4:	617b      	str	r3, [r7, #20]
	/* Compute address */
	ul_addr = IFLASH_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
#endif

	/* Store result */
	if (pul_addr != NULL) {
   807c6:	687b      	ldr	r3, [r7, #4]
   807c8:	2b00      	cmp	r3, #0
   807ca:	d002      	beq.n	807d2 <compute_address+0x42>
		*pul_addr = ul_addr;
   807cc:	687b      	ldr	r3, [r7, #4]
   807ce:	697a      	ldr	r2, [r7, #20]
   807d0:	601a      	str	r2, [r3, #0]
	}
}
   807d2:	371c      	adds	r7, #28
   807d4:	46bd      	mov	sp, r7
   807d6:	f85d 7b04 	ldr.w	r7, [sp], #4
   807da:	4770      	bx	lr
   807dc:	400e0a00 	.word	0x400e0a00

000807e0 <compute_lock_range>:
 * \param pul_actual_start Actual start address of lock range.
 * \param pul_actual_end Actual end address of lock range.
 */
static void compute_lock_range(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   807e0:	b480      	push	{r7}
   807e2:	b087      	sub	sp, #28
   807e4:	af00      	add	r7, sp, #0
   807e6:	60f8      	str	r0, [r7, #12]
   807e8:	60b9      	str	r1, [r7, #8]
   807ea:	607a      	str	r2, [r7, #4]
   807ec:	603b      	str	r3, [r7, #0]
	uint32_t ul_actual_start, ul_actual_end;

	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
   807ee:	68fb      	ldr	r3, [r7, #12]
   807f0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
   807f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   807f8:	617b      	str	r3, [r7, #20]
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
   807fa:	68bb      	ldr	r3, [r7, #8]
   807fc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
   80800:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   80804:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
   80808:	333f      	adds	r3, #63	; 0x3f
   8080a:	613b      	str	r3, [r7, #16]
			IFLASH_LOCK_REGION_SIZE - 1;

	if (pul_actual_start) {
   8080c:	687b      	ldr	r3, [r7, #4]
   8080e:	2b00      	cmp	r3, #0
   80810:	d002      	beq.n	80818 <compute_lock_range+0x38>
		*pul_actual_start = ul_actual_start;
   80812:	687b      	ldr	r3, [r7, #4]
   80814:	697a      	ldr	r2, [r7, #20]
   80816:	601a      	str	r2, [r3, #0]
	}

	if (pul_actual_end) {
   80818:	683b      	ldr	r3, [r7, #0]
   8081a:	2b00      	cmp	r3, #0
   8081c:	d002      	beq.n	80824 <compute_lock_range+0x44>
		*pul_actual_end = ul_actual_end;
   8081e:	683b      	ldr	r3, [r7, #0]
   80820:	693a      	ldr	r2, [r7, #16]
   80822:	601a      	str	r2, [r3, #0]
	}
}
   80824:	371c      	adds	r7, #28
   80826:	46bd      	mov	sp, r7
   80828:	f85d 7b04 	ldr.w	r7, [sp], #4
   8082c:	4770      	bx	lr
   8082e:	bf00      	nop

00080830 <flash_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_init(uint32_t ul_mode, uint32_t ul_fws)
{
   80830:	b580      	push	{r7, lr}
   80832:	b082      	sub	sp, #8
   80834:	af00      	add	r7, sp, #0
   80836:	6078      	str	r0, [r7, #4]
   80838:	6039      	str	r1, [r7, #0]
	efc_init(EFC, ul_mode, ul_fws);
   8083a:	4807      	ldr	r0, [pc, #28]	; (80858 <flash_init+0x28>)
   8083c:	6879      	ldr	r1, [r7, #4]
   8083e:	683a      	ldr	r2, [r7, #0]
   80840:	4b06      	ldr	r3, [pc, #24]	; (8085c <flash_init+0x2c>)
   80842:	4798      	blx	r3

#ifdef EFC1
	efc_init(EFC1, ul_mode, ul_fws);
   80844:	4806      	ldr	r0, [pc, #24]	; (80860 <flash_init+0x30>)
   80846:	6879      	ldr	r1, [r7, #4]
   80848:	683a      	ldr	r2, [r7, #0]
   8084a:	4b04      	ldr	r3, [pc, #16]	; (8085c <flash_init+0x2c>)
   8084c:	4798      	blx	r3
#endif

	return FLASH_RC_OK;
   8084e:	2300      	movs	r3, #0
}
   80850:	4618      	mov	r0, r3
   80852:	3708      	adds	r7, #8
   80854:	46bd      	mov	sp, r7
   80856:	bd80      	pop	{r7, pc}
   80858:	400e0a00 	.word	0x400e0a00
   8085c:	000804a5 	.word	0x000804a5
   80860:	400e0c00 	.word	0x400e0c00

00080864 <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
   80864:	b590      	push	{r4, r7, lr}
   80866:	b08f      	sub	sp, #60	; 0x3c
   80868:	af00      	add	r7, sp, #0
   8086a:	60f8      	str	r0, [r7, #12]
   8086c:	60b9      	str	r1, [r7, #8]
   8086e:	607a      	str	r2, [r7, #4]
   80870:	603b      	str	r3, [r7, #0]
	uint32_t ul_page_addr;
	uint16_t us_padding;
	uint32_t ul_error;
	uint32_t ul_idx;
	uint32_t *p_aligned_dest;
	uint8_t *puc_page_buffer = (uint8_t *) gs_ul_page_buffer;
   80872:	4b4d      	ldr	r3, [pc, #308]	; (809a8 <flash_write+0x144>)
   80874:	62bb      	str	r3, [r7, #40]	; 0x28

	translate_address(&p_efc, ul_address, &us_page, &us_offset);
   80876:	f107 0118 	add.w	r1, r7, #24
   8087a:	f107 0216 	add.w	r2, r7, #22
   8087e:	f107 0314 	add.w	r3, r7, #20
   80882:	4608      	mov	r0, r1
   80884:	68f9      	ldr	r1, [r7, #12]
   80886:	4c49      	ldr	r4, [pc, #292]	; (809ac <flash_write+0x148>)
   80888:	47a0      	blx	r4

	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
   8088a:	69bb      	ldr	r3, [r7, #24]
   8088c:	4618      	mov	r0, r3
   8088e:	4b48      	ldr	r3, [pc, #288]	; (809b0 <flash_write+0x14c>)
   80890:	4798      	blx	r3
   80892:	6278      	str	r0, [r7, #36]	; 0x24
	efc_set_wait_state(p_efc, 6);
   80894:	69bb      	ldr	r3, [r7, #24]
   80896:	4618      	mov	r0, r3
   80898:	2106      	movs	r1, #6
   8089a:	4b46      	ldr	r3, [pc, #280]	; (809b4 <flash_write+0x150>)
   8089c:	4798      	blx	r3

	/* Write all pages */
	while (ul_size > 0) {
   8089e:	e076      	b.n	8098e <flash_write+0x12a>
		/* Copy data in temporary buffer to avoid alignment problems. */
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
   808a0:	8abb      	ldrh	r3, [r7, #20]
   808a2:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
   808a6:	687b      	ldr	r3, [r7, #4]
   808a8:	4293      	cmp	r3, r2
   808aa:	bf28      	it	cs
   808ac:	4613      	movcs	r3, r2
   808ae:	623b      	str	r3, [r7, #32]
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
   808b0:	69b9      	ldr	r1, [r7, #24]
   808b2:	8afa      	ldrh	r2, [r7, #22]
   808b4:	f107 0310 	add.w	r3, r7, #16
   808b8:	4608      	mov	r0, r1
   808ba:	4611      	mov	r1, r2
   808bc:	2200      	movs	r2, #0
   808be:	4c3e      	ldr	r4, [pc, #248]	; (809b8 <flash_write+0x154>)
   808c0:	47a0      	blx	r4
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
   808c2:	8abb      	ldrh	r3, [r7, #20]
   808c4:	425b      	negs	r3, r3
   808c6:	b29a      	uxth	r2, r3
   808c8:	6a3b      	ldr	r3, [r7, #32]
   808ca:	b29b      	uxth	r3, r3
   808cc:	1ad3      	subs	r3, r2, r3
   808ce:	b29b      	uxth	r3, r3
   808d0:	f503 7380 	add.w	r3, r3, #256	; 0x100
   808d4:	83fb      	strh	r3, [r7, #30]

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
   808d6:	693b      	ldr	r3, [r7, #16]
   808d8:	461a      	mov	r2, r3
   808da:	8abb      	ldrh	r3, [r7, #20]
   808dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   808de:	4611      	mov	r1, r2
   808e0:	461a      	mov	r2, r3
   808e2:	4b36      	ldr	r3, [pc, #216]	; (809bc <flash_write+0x158>)
   808e4:	4798      	blx	r3

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
   808e6:	8abb      	ldrh	r3, [r7, #20]
   808e8:	461a      	mov	r2, r3
   808ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   808ec:	4413      	add	r3, r2
   808ee:	4618      	mov	r0, r3
   808f0:	68b9      	ldr	r1, [r7, #8]
   808f2:	6a3a      	ldr	r2, [r7, #32]
   808f4:	4b31      	ldr	r3, [pc, #196]	; (809bc <flash_write+0x158>)
   808f6:	4798      	blx	r3

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
   808f8:	8abb      	ldrh	r3, [r7, #20]
   808fa:	461a      	mov	r2, r3
   808fc:	6a3b      	ldr	r3, [r7, #32]
   808fe:	4413      	add	r3, r2
   80900:	6aba      	ldr	r2, [r7, #40]	; 0x28
   80902:	18d1      	adds	r1, r2, r3
				(void *)(ul_page_addr + us_offset + writeSize),
   80904:	8abb      	ldrh	r3, [r7, #20]
   80906:	461a      	mov	r2, r3
   80908:	693b      	ldr	r3, [r7, #16]
   8090a:	441a      	add	r2, r3
   8090c:	6a3b      	ldr	r3, [r7, #32]
   8090e:	4413      	add	r3, r2

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
   80910:	461a      	mov	r2, r3
   80912:	8bfb      	ldrh	r3, [r7, #30]
   80914:	4608      	mov	r0, r1
   80916:	4611      	mov	r1, r2
   80918:	461a      	mov	r2, r3
   8091a:	4b28      	ldr	r3, [pc, #160]	; (809bc <flash_write+0x158>)
   8091c:	4798      	blx	r3

		/* Write page.
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
   8091e:	693b      	ldr	r3, [r7, #16]
   80920:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
   80922:	2300      	movs	r3, #0
   80924:	633b      	str	r3, [r7, #48]	; 0x30
   80926:	e00a      	b.n	8093e <flash_write+0xda>
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
   80928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8092a:	1d1a      	adds	r2, r3, #4
   8092c:	62fa      	str	r2, [r7, #44]	; 0x2c
   8092e:	491e      	ldr	r1, [pc, #120]	; (809a8 <flash_write+0x144>)
   80930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   80932:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   80936:	601a      	str	r2, [r3, #0]
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
				++ul_idx) {
   80938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   8093a:	3301      	adds	r3, #1
   8093c:	633b      	str	r3, [r7, #48]	; 0x30
		/* Write page.
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
   8093e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   80940:	2b3f      	cmp	r3, #63	; 0x3f
   80942:	d9f1      	bls.n	80928 <flash_write+0xc4>
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
		}

		if (ul_erase_flag) {
   80944:	683b      	ldr	r3, [r7, #0]
   80946:	2b00      	cmp	r3, #0
   80948:	d007      	beq.n	8095a <flash_write+0xf6>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
   8094a:	69bb      	ldr	r3, [r7, #24]
   8094c:	8afa      	ldrh	r2, [r7, #22]
   8094e:	4618      	mov	r0, r3
   80950:	2103      	movs	r1, #3
   80952:	4b1b      	ldr	r3, [pc, #108]	; (809c0 <flash_write+0x15c>)
   80954:	4798      	blx	r3
   80956:	6378      	str	r0, [r7, #52]	; 0x34
   80958:	e006      	b.n	80968 <flash_write+0x104>
					us_page);
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
   8095a:	69bb      	ldr	r3, [r7, #24]
   8095c:	8afa      	ldrh	r2, [r7, #22]
   8095e:	4618      	mov	r0, r3
   80960:	2101      	movs	r1, #1
   80962:	4b17      	ldr	r3, [pc, #92]	; (809c0 <flash_write+0x15c>)
   80964:	4798      	blx	r3
   80966:	6378      	str	r0, [r7, #52]	; 0x34
					us_page);
		}

		if (ul_error) {
   80968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   8096a:	2b00      	cmp	r3, #0
   8096c:	d001      	beq.n	80972 <flash_write+0x10e>
			return ul_error;
   8096e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   80970:	e016      	b.n	809a0 <flash_write+0x13c>
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
   80972:	68ba      	ldr	r2, [r7, #8]
   80974:	6a3b      	ldr	r3, [r7, #32]
   80976:	4413      	add	r3, r2
   80978:	60bb      	str	r3, [r7, #8]
		ul_size -= writeSize;
   8097a:	687a      	ldr	r2, [r7, #4]
   8097c:	6a3b      	ldr	r3, [r7, #32]
   8097e:	1ad3      	subs	r3, r2, r3
   80980:	607b      	str	r3, [r7, #4]
		us_page++;
   80982:	8afb      	ldrh	r3, [r7, #22]
   80984:	3301      	adds	r3, #1
   80986:	b29b      	uxth	r3, r3
   80988:	82fb      	strh	r3, [r7, #22]
		us_offset = 0;
   8098a:	2300      	movs	r3, #0
   8098c:	82bb      	strh	r3, [r7, #20]
	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
	efc_set_wait_state(p_efc, 6);

	/* Write all pages */
	while (ul_size > 0) {
   8098e:	687b      	ldr	r3, [r7, #4]
   80990:	2b00      	cmp	r3, #0
   80992:	d185      	bne.n	808a0 <flash_write+0x3c>
		us_page++;
		us_offset = 0;
	}

	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
   80994:	69bb      	ldr	r3, [r7, #24]
   80996:	4618      	mov	r0, r3
   80998:	6a79      	ldr	r1, [r7, #36]	; 0x24
   8099a:	4b06      	ldr	r3, [pc, #24]	; (809b4 <flash_write+0x150>)
   8099c:	4798      	blx	r3

	return FLASH_RC_OK;
   8099e:	2300      	movs	r3, #0
}
   809a0:	4618      	mov	r0, r3
   809a2:	373c      	adds	r7, #60	; 0x3c
   809a4:	46bd      	mov	sp, r7
   809a6:	bd90      	pop	{r4, r7, pc}
   809a8:	200717f8 	.word	0x200717f8
   809ac:	00080715 	.word	0x00080715
   809b0:	00080509 	.word	0x00080509
   809b4:	000804d5 	.word	0x000804d5
   809b8:	00080791 	.word	0x00080791
   809bc:	000a876d 	.word	0x000a876d
   809c0:	00080529 	.word	0x00080529

000809c4 <flash_lock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_lock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   809c4:	b590      	push	{r4, r7, lr}
   809c6:	b08b      	sub	sp, #44	; 0x2c
   809c8:	af00      	add	r7, sp, #0
   809ca:	60f8      	str	r0, [r7, #12]
   809cc:	60b9      	str	r1, [r7, #8]
   809ce:	607a      	str	r2, [r7, #4]
   809d0:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint32_t ul_actual_start, ul_actual_end;
	uint16_t us_start_page, us_end_page;
	uint32_t ul_error;
	uint16_t us_num_pages_in_region =
   809d2:	2340      	movs	r3, #64	; 0x40
   809d4:	84fb      	strh	r3, [r7, #38]	; 0x26
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual lock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
   809d6:	f107 0218 	add.w	r2, r7, #24
   809da:	f107 0314 	add.w	r3, r7, #20
   809de:	68f8      	ldr	r0, [r7, #12]
   809e0:	68b9      	ldr	r1, [r7, #8]
   809e2:	4c1e      	ldr	r4, [pc, #120]	; (80a5c <flash_lock+0x98>)
   809e4:	47a0      	blx	r4

	if (pul_actual_start != NULL) {
   809e6:	687b      	ldr	r3, [r7, #4]
   809e8:	2b00      	cmp	r3, #0
   809ea:	d002      	beq.n	809f2 <flash_lock+0x2e>
		*pul_actual_start = ul_actual_start;
   809ec:	69ba      	ldr	r2, [r7, #24]
   809ee:	687b      	ldr	r3, [r7, #4]
   809f0:	601a      	str	r2, [r3, #0]
	}

	if (pul_actual_end != NULL) {
   809f2:	683b      	ldr	r3, [r7, #0]
   809f4:	2b00      	cmp	r3, #0
   809f6:	d002      	beq.n	809fe <flash_lock+0x3a>
		*pul_actual_end = ul_actual_end;
   809f8:	697a      	ldr	r2, [r7, #20]
   809fa:	683b      	ldr	r3, [r7, #0]
   809fc:	601a      	str	r2, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
   809fe:	69ba      	ldr	r2, [r7, #24]
   80a00:	f107 011c 	add.w	r1, r7, #28
   80a04:	f107 0312 	add.w	r3, r7, #18
   80a08:	4608      	mov	r0, r1
   80a0a:	4611      	mov	r1, r2
   80a0c:	461a      	mov	r2, r3
   80a0e:	2300      	movs	r3, #0
   80a10:	4c13      	ldr	r4, [pc, #76]	; (80a60 <flash_lock+0x9c>)
   80a12:	47a0      	blx	r4
	translate_address(0, ul_actual_end, &us_end_page, 0);
   80a14:	697a      	ldr	r2, [r7, #20]
   80a16:	f107 0310 	add.w	r3, r7, #16
   80a1a:	2000      	movs	r0, #0
   80a1c:	4611      	mov	r1, r2
   80a1e:	461a      	mov	r2, r3
   80a20:	2300      	movs	r3, #0
   80a22:	4c0f      	ldr	r4, [pc, #60]	; (80a60 <flash_lock+0x9c>)
   80a24:	47a0      	blx	r4

	/* Lock all pages */
	while (us_start_page < us_end_page) {
   80a26:	e010      	b.n	80a4a <flash_lock+0x86>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_SLB, us_start_page);
   80a28:	69fb      	ldr	r3, [r7, #28]
   80a2a:	8a7a      	ldrh	r2, [r7, #18]
   80a2c:	4618      	mov	r0, r3
   80a2e:	2108      	movs	r1, #8
   80a30:	4b0c      	ldr	r3, [pc, #48]	; (80a64 <flash_lock+0xa0>)
   80a32:	4798      	blx	r3
   80a34:	6238      	str	r0, [r7, #32]

		if (ul_error) {
   80a36:	6a3b      	ldr	r3, [r7, #32]
   80a38:	2b00      	cmp	r3, #0
   80a3a:	d001      	beq.n	80a40 <flash_lock+0x7c>
			return ul_error;
   80a3c:	6a3b      	ldr	r3, [r7, #32]
   80a3e:	e009      	b.n	80a54 <flash_lock+0x90>
		}
		us_start_page += us_num_pages_in_region;
   80a40:	8a7a      	ldrh	r2, [r7, #18]
   80a42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   80a44:	4413      	add	r3, r2
   80a46:	b29b      	uxth	r3, r3
   80a48:	827b      	strh	r3, [r7, #18]
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Lock all pages */
	while (us_start_page < us_end_page) {
   80a4a:	8a7a      	ldrh	r2, [r7, #18]
   80a4c:	8a3b      	ldrh	r3, [r7, #16]
   80a4e:	429a      	cmp	r2, r3
   80a50:	d3ea      	bcc.n	80a28 <flash_lock+0x64>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
	}

	return FLASH_RC_OK;
   80a52:	2300      	movs	r3, #0
}
   80a54:	4618      	mov	r0, r3
   80a56:	372c      	adds	r7, #44	; 0x2c
   80a58:	46bd      	mov	sp, r7
   80a5a:	bd90      	pop	{r4, r7, pc}
   80a5c:	000807e1 	.word	0x000807e1
   80a60:	00080715 	.word	0x00080715
   80a64:	00080529 	.word	0x00080529

00080a68 <flash_unlock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_unlock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   80a68:	b590      	push	{r4, r7, lr}
   80a6a:	b08b      	sub	sp, #44	; 0x2c
   80a6c:	af00      	add	r7, sp, #0
   80a6e:	60f8      	str	r0, [r7, #12]
   80a70:	60b9      	str	r1, [r7, #8]
   80a72:	607a      	str	r2, [r7, #4]
   80a74:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint32_t ul_actual_start, ul_actual_end;
	uint16_t us_start_page, us_end_page;
	uint32_t ul_error;
	uint16_t us_num_pages_in_region =
   80a76:	2340      	movs	r3, #64	; 0x40
   80a78:	84fb      	strh	r3, [r7, #38]	; 0x26
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual unlock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
   80a7a:	f107 0218 	add.w	r2, r7, #24
   80a7e:	f107 0314 	add.w	r3, r7, #20
   80a82:	68f8      	ldr	r0, [r7, #12]
   80a84:	68b9      	ldr	r1, [r7, #8]
   80a86:	4c1e      	ldr	r4, [pc, #120]	; (80b00 <flash_unlock+0x98>)
   80a88:	47a0      	blx	r4
	if (pul_actual_start != NULL) {
   80a8a:	687b      	ldr	r3, [r7, #4]
   80a8c:	2b00      	cmp	r3, #0
   80a8e:	d002      	beq.n	80a96 <flash_unlock+0x2e>
		*pul_actual_start = ul_actual_start;
   80a90:	69ba      	ldr	r2, [r7, #24]
   80a92:	687b      	ldr	r3, [r7, #4]
   80a94:	601a      	str	r2, [r3, #0]
	}
	if (pul_actual_end != NULL) {
   80a96:	683b      	ldr	r3, [r7, #0]
   80a98:	2b00      	cmp	r3, #0
   80a9a:	d002      	beq.n	80aa2 <flash_unlock+0x3a>
		*pul_actual_end = ul_actual_end;
   80a9c:	697a      	ldr	r2, [r7, #20]
   80a9e:	683b      	ldr	r3, [r7, #0]
   80aa0:	601a      	str	r2, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
   80aa2:	69ba      	ldr	r2, [r7, #24]
   80aa4:	f107 011c 	add.w	r1, r7, #28
   80aa8:	f107 0312 	add.w	r3, r7, #18
   80aac:	4608      	mov	r0, r1
   80aae:	4611      	mov	r1, r2
   80ab0:	461a      	mov	r2, r3
   80ab2:	2300      	movs	r3, #0
   80ab4:	4c13      	ldr	r4, [pc, #76]	; (80b04 <flash_unlock+0x9c>)
   80ab6:	47a0      	blx	r4
	translate_address(0, ul_actual_end, &us_end_page, 0);
   80ab8:	697a      	ldr	r2, [r7, #20]
   80aba:	f107 0310 	add.w	r3, r7, #16
   80abe:	2000      	movs	r0, #0
   80ac0:	4611      	mov	r1, r2
   80ac2:	461a      	mov	r2, r3
   80ac4:	2300      	movs	r3, #0
   80ac6:	4c0f      	ldr	r4, [pc, #60]	; (80b04 <flash_unlock+0x9c>)
   80ac8:	47a0      	blx	r4

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
   80aca:	e010      	b.n	80aee <flash_unlock+0x86>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_CLB,
   80acc:	69fb      	ldr	r3, [r7, #28]
   80ace:	8a7a      	ldrh	r2, [r7, #18]
   80ad0:	4618      	mov	r0, r3
   80ad2:	2109      	movs	r1, #9
   80ad4:	4b0c      	ldr	r3, [pc, #48]	; (80b08 <flash_unlock+0xa0>)
   80ad6:	4798      	blx	r3
   80ad8:	6238      	str	r0, [r7, #32]
				us_start_page);
		if (ul_error) {
   80ada:	6a3b      	ldr	r3, [r7, #32]
   80adc:	2b00      	cmp	r3, #0
   80ade:	d001      	beq.n	80ae4 <flash_unlock+0x7c>
			return ul_error;
   80ae0:	6a3b      	ldr	r3, [r7, #32]
   80ae2:	e009      	b.n	80af8 <flash_unlock+0x90>
		}
		us_start_page += us_num_pages_in_region;
   80ae4:	8a7a      	ldrh	r2, [r7, #18]
   80ae6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   80ae8:	4413      	add	r3, r2
   80aea:	b29b      	uxth	r3, r3
   80aec:	827b      	strh	r3, [r7, #18]
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
   80aee:	8a7a      	ldrh	r2, [r7, #18]
   80af0:	8a3b      	ldrh	r3, [r7, #16]
   80af2:	429a      	cmp	r2, r3
   80af4:	d3ea      	bcc.n	80acc <flash_unlock+0x64>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
	}

	return FLASH_RC_OK;
   80af6:	2300      	movs	r3, #0
}
   80af8:	4618      	mov	r0, r3
   80afa:	372c      	adds	r7, #44	; 0x2c
   80afc:	46bd      	mov	sp, r7
   80afe:	bd90      	pop	{r4, r7, pc}
   80b00:	000807e1 	.word	0x000807e1
   80b04:	00080715 	.word	0x00080715
   80b08:	00080529 	.word	0x00080529

00080b0c <flash_set_gpnvm>:
 * \param ul_gpnvm GPNVM bit index.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_set_gpnvm(uint32_t ul_gpnvm)
{
   80b0c:	b580      	push	{r7, lr}
   80b0e:	b082      	sub	sp, #8
   80b10:	af00      	add	r7, sp, #0
   80b12:	6078      	str	r0, [r7, #4]
	if (ul_gpnvm >= GPNVM_NUM_MAX) {
   80b14:	687b      	ldr	r3, [r7, #4]
   80b16:	2b02      	cmp	r3, #2
   80b18:	d901      	bls.n	80b1e <flash_set_gpnvm+0x12>
		return FLASH_RC_INVALID;
   80b1a:	2311      	movs	r3, #17
   80b1c:	e012      	b.n	80b44 <flash_set_gpnvm+0x38>
	}

	if (FLASH_RC_YES == flash_is_gpnvm_set(ul_gpnvm)) {
   80b1e:	6878      	ldr	r0, [r7, #4]
   80b20:	4b0a      	ldr	r3, [pc, #40]	; (80b4c <flash_set_gpnvm+0x40>)
   80b22:	4798      	blx	r3
   80b24:	4603      	mov	r3, r0
   80b26:	2b01      	cmp	r3, #1
   80b28:	d101      	bne.n	80b2e <flash_set_gpnvm+0x22>
		return FLASH_RC_OK;
   80b2a:	2300      	movs	r3, #0
   80b2c:	e00a      	b.n	80b44 <flash_set_gpnvm+0x38>
	}

	if (EFC_RC_OK == efc_perform_command(EFC, EFC_FCMD_SGPB, ul_gpnvm)) {
   80b2e:	4808      	ldr	r0, [pc, #32]	; (80b50 <flash_set_gpnvm+0x44>)
   80b30:	210b      	movs	r1, #11
   80b32:	687a      	ldr	r2, [r7, #4]
   80b34:	4b07      	ldr	r3, [pc, #28]	; (80b54 <flash_set_gpnvm+0x48>)
   80b36:	4798      	blx	r3
   80b38:	4603      	mov	r3, r0
   80b3a:	2b00      	cmp	r3, #0
   80b3c:	d101      	bne.n	80b42 <flash_set_gpnvm+0x36>
		return FLASH_RC_OK;
   80b3e:	2300      	movs	r3, #0
   80b40:	e000      	b.n	80b44 <flash_set_gpnvm+0x38>
	}

	return FLASH_RC_ERROR;
   80b42:	2310      	movs	r3, #16
}
   80b44:	4618      	mov	r0, r3
   80b46:	3708      	adds	r7, #8
   80b48:	46bd      	mov	sp, r7
   80b4a:	bd80      	pop	{r7, pc}
   80b4c:	00080b59 	.word	0x00080b59
   80b50:	400e0a00 	.word	0x400e0a00
   80b54:	00080529 	.word	0x00080529

00080b58 <flash_is_gpnvm_set>:
 * \retval 1 If the given GPNVM bit is currently set.
 * \retval 0 If the given GPNVM bit is currently cleared.
 * otherwise returns an error code.
 */
uint32_t flash_is_gpnvm_set(uint32_t ul_gpnvm)
{
   80b58:	b580      	push	{r7, lr}
   80b5a:	b084      	sub	sp, #16
   80b5c:	af00      	add	r7, sp, #0
   80b5e:	6078      	str	r0, [r7, #4]
	uint32_t ul_gpnvm_bits;

	if (ul_gpnvm >= GPNVM_NUM_MAX) {
   80b60:	687b      	ldr	r3, [r7, #4]
   80b62:	2b02      	cmp	r3, #2
   80b64:	d901      	bls.n	80b6a <flash_is_gpnvm_set+0x12>
		return FLASH_RC_INVALID;
   80b66:	2311      	movs	r3, #17
   80b68:	e019      	b.n	80b9e <flash_is_gpnvm_set+0x46>
	}

	if (EFC_RC_OK != efc_perform_command(EFC, EFC_FCMD_GGPB, 0)) {
   80b6a:	480f      	ldr	r0, [pc, #60]	; (80ba8 <flash_is_gpnvm_set+0x50>)
   80b6c:	210d      	movs	r1, #13
   80b6e:	2200      	movs	r2, #0
   80b70:	4b0e      	ldr	r3, [pc, #56]	; (80bac <flash_is_gpnvm_set+0x54>)
   80b72:	4798      	blx	r3
   80b74:	4603      	mov	r3, r0
   80b76:	2b00      	cmp	r3, #0
   80b78:	d001      	beq.n	80b7e <flash_is_gpnvm_set+0x26>
		return FLASH_RC_ERROR;
   80b7a:	2310      	movs	r3, #16
   80b7c:	e00f      	b.n	80b9e <flash_is_gpnvm_set+0x46>
	}

	ul_gpnvm_bits = efc_get_result(EFC);
   80b7e:	480a      	ldr	r0, [pc, #40]	; (80ba8 <flash_is_gpnvm_set+0x50>)
   80b80:	4b0b      	ldr	r3, [pc, #44]	; (80bb0 <flash_is_gpnvm_set+0x58>)
   80b82:	4798      	blx	r3
   80b84:	60f8      	str	r0, [r7, #12]
	if (ul_gpnvm_bits & (1 << ul_gpnvm)) {
   80b86:	687b      	ldr	r3, [r7, #4]
   80b88:	2201      	movs	r2, #1
   80b8a:	fa02 f303 	lsl.w	r3, r2, r3
   80b8e:	461a      	mov	r2, r3
   80b90:	68fb      	ldr	r3, [r7, #12]
   80b92:	4013      	ands	r3, r2
   80b94:	2b00      	cmp	r3, #0
   80b96:	d001      	beq.n	80b9c <flash_is_gpnvm_set+0x44>
		return FLASH_RC_YES;
   80b98:	2301      	movs	r3, #1
   80b9a:	e000      	b.n	80b9e <flash_is_gpnvm_set+0x46>
	}

	return FLASH_RC_NO;
   80b9c:	2300      	movs	r3, #0
}
   80b9e:	4618      	mov	r0, r3
   80ba0:	3710      	adds	r7, #16
   80ba2:	46bd      	mov	sp, r7
   80ba4:	bd80      	pop	{r7, pc}
   80ba6:	bf00      	nop
   80ba8:	400e0a00 	.word	0x400e0a00
   80bac:	00080529 	.word	0x00080529
   80bb0:	0008059d 	.word	0x0008059d

00080bb4 <flash_enable_security_bit>:
 * \brief Set security bit.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_enable_security_bit(void)
{
   80bb4:	b580      	push	{r7, lr}
   80bb6:	af00      	add	r7, sp, #0
	return flash_set_gpnvm(0);
   80bb8:	2000      	movs	r0, #0
   80bba:	4b02      	ldr	r3, [pc, #8]	; (80bc4 <flash_enable_security_bit+0x10>)
   80bbc:	4798      	blx	r3
   80bbe:	4603      	mov	r3, r0
}
   80bc0:	4618      	mov	r0, r3
   80bc2:	bd80      	pop	{r7, pc}
   80bc4:	00080b0d 	.word	0x00080b0d

00080bc8 <Cl_Init_Alarms>:
 * \return CL_OK on success. 
 * \Globals used : 
 */
  
Cl_ReturnCodeType Cl_Init_Alarms(void)
{
   80bc8:	b580      	push	{r7, lr}
   80bca:	b082      	sub	sp, #8
   80bcc:	af00      	add	r7, sp, #0
	powerfailurecount = 0;
   80bce:	4b12      	ldr	r3, [pc, #72]	; (80c18 <Cl_Init_Alarms+0x50>)
   80bd0:	2200      	movs	r2, #0
   80bd2:	601a      	str	r2, [r3, #0]
	Cl_ReturnCodeType cl_Alarm_retVal = CL_ERROR;
   80bd4:	2304      	movs	r3, #4
   80bd6:	71fb      	strb	r3, [r7, #7]
	cl_Alarm_retVal = Cl_LoadAlarmThresholdTable();
   80bd8:	4b10      	ldr	r3, [pc, #64]	; (80c1c <Cl_Init_Alarms+0x54>)
   80bda:	4798      	blx	r3
   80bdc:	4603      	mov	r3, r0
   80bde:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(cl_Alarm_retVal)
   80be0:	79fb      	ldrb	r3, [r7, #7]
   80be2:	2b00      	cmp	r3, #0
   80be4:	d001      	beq.n	80bea <Cl_Init_Alarms+0x22>
   80be6:	4b0e      	ldr	r3, [pc, #56]	; (80c20 <Cl_Init_Alarms+0x58>)
   80be8:	4798      	blx	r3
	cl_Alarm_retVal = Cl_Temperature_Controller_Init();
   80bea:	4b0e      	ldr	r3, [pc, #56]	; (80c24 <Cl_Init_Alarms+0x5c>)
   80bec:	4798      	blx	r3
   80bee:	4603      	mov	r3, r0
   80bf0:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(cl_Alarm_retVal)
   80bf2:	79fb      	ldrb	r3, [r7, #7]
   80bf4:	2b00      	cmp	r3, #0
   80bf6:	d001      	beq.n	80bfc <Cl_Init_Alarms+0x34>
   80bf8:	4b09      	ldr	r3, [pc, #36]	; (80c20 <Cl_Init_Alarms+0x58>)
   80bfa:	4798      	blx	r3
	cl_Alarm_retVal = Cl_Pressure_Controller_Init();
   80bfc:	4b0a      	ldr	r3, [pc, #40]	; (80c28 <Cl_Init_Alarms+0x60>)
   80bfe:	4798      	blx	r3
   80c00:	4603      	mov	r3, r0
   80c02:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(cl_Alarm_retVal)
   80c04:	79fb      	ldrb	r3, [r7, #7]
   80c06:	2b00      	cmp	r3, #0
   80c08:	d001      	beq.n	80c0e <Cl_Init_Alarms+0x46>
   80c0a:	4b05      	ldr	r3, [pc, #20]	; (80c20 <Cl_Init_Alarms+0x58>)
   80c0c:	4798      	blx	r3
	return CL_OK;
   80c0e:	2300      	movs	r3, #0
	
}
   80c10:	4618      	mov	r0, r3
   80c12:	3708      	adds	r7, #8
   80c14:	46bd      	mov	sp, r7
   80c16:	bd80      	pop	{r7, pc}
   80c18:	20071930 	.word	0x20071930
   80c1c:	00080c2d 	.word	0x00080c2d
   80c20:	00088b81 	.word	0x00088b81
   80c24:	000912e5 	.word	0x000912e5
   80c28:	00090e09 	.word	0x00090e09

00080c2c <Cl_LoadAlarmThresholdTable>:
 * \return CL_OK on success. 
 * \Globals used : 
 */
  
Cl_ReturnCodeType Cl_LoadAlarmThresholdTable(void)
{
   80c2c:	b480      	push	{r7}
   80c2e:	af00      	add	r7, sp, #0
		Cl_alarmThresholdTable.cond_low_threshold = 20;   // manav03
   80c30:	4b3f      	ldr	r3, [pc, #252]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80c32:	2214      	movs	r2, #20
   80c34:	801a      	strh	r2, [r3, #0]
		Cl_alarmThresholdTable.cond_high_threshold = 145;  // manav03
   80c36:	4b3e      	ldr	r3, [pc, #248]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80c38:	2291      	movs	r2, #145	; 0x91
   80c3a:	805a      	strh	r2, [r3, #2]
		Cl_alarmThresholdTable.cond_dac_high_threshold = 0;
   80c3c:	4b3c      	ldr	r3, [pc, #240]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80c3e:	2200      	movs	r2, #0
   80c40:	809a      	strh	r2, [r3, #4]
		Cl_alarmThresholdTable.cond_dac_low_threshold = 10000;
   80c42:	4b3b      	ldr	r3, [pc, #236]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80c44:	f242 7210 	movw	r2, #10000	; 0x2710
   80c48:	80da      	strh	r2, [r3, #6]
		Cl_alarmThresholdTable.apt_high_threshold = 1500; // manav03
   80c4a:	4b39      	ldr	r3, [pc, #228]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80c4c:	4a39      	ldr	r2, [pc, #228]	; (80d34 <Cl_LoadAlarmThresholdTable+0x108>)
   80c4e:	609a      	str	r2, [r3, #8]
		Cl_alarmThresholdTable. apt_low_threshold = 700; // manav03
   80c50:	4b37      	ldr	r3, [pc, #220]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80c52:	4a39      	ldr	r2, [pc, #228]	; (80d38 <Cl_LoadAlarmThresholdTable+0x10c>)
   80c54:	60da      	str	r2, [r3, #12]
		Cl_alarmThresholdTable.vpt_high_threshold = 1500;
   80c56:	4b36      	ldr	r3, [pc, #216]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80c58:	4a36      	ldr	r2, [pc, #216]	; (80d34 <Cl_LoadAlarmThresholdTable+0x108>)
   80c5a:	611a      	str	r2, [r3, #16]
		Cl_alarmThresholdTable.vpt_low_threshold = 700;  // manav03
   80c5c:	4b34      	ldr	r3, [pc, #208]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80c5e:	4a36      	ldr	r2, [pc, #216]	; (80d38 <Cl_LoadAlarmThresholdTable+0x10c>)
   80c60:	615a      	str	r2, [r3, #20]
		Cl_alarmThresholdTable.ps1_high_threshold = 400;
   80c62:	4b33      	ldr	r3, [pc, #204]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80c64:	4a35      	ldr	r2, [pc, #212]	; (80d3c <Cl_LoadAlarmThresholdTable+0x110>)
   80c66:	619a      	str	r2, [r3, #24]
		Cl_alarmThresholdTable.ps1_low_threshold = -200;
   80c68:	4b31      	ldr	r3, [pc, #196]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80c6a:	4a35      	ldr	r2, [pc, #212]	; (80d40 <Cl_LoadAlarmThresholdTable+0x114>)
   80c6c:	61da      	str	r2, [r3, #28]
		Cl_alarmThresholdTable.ps2_high_threshold = 400;
   80c6e:	4b30      	ldr	r3, [pc, #192]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80c70:	4a32      	ldr	r2, [pc, #200]	; (80d3c <Cl_LoadAlarmThresholdTable+0x110>)
   80c72:	621a      	str	r2, [r3, #32]
		Cl_alarmThresholdTable.ps2_low_threshold = -300;
   80c74:	4b2e      	ldr	r3, [pc, #184]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80c76:	4a33      	ldr	r2, [pc, #204]	; (80d44 <Cl_LoadAlarmThresholdTable+0x118>)
   80c78:	625a      	str	r2, [r3, #36]	; 0x24
		Cl_alarmThresholdTable.ps3_high_threshold = 1000;
   80c7a:	4b2d      	ldr	r3, [pc, #180]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80c7c:	4a32      	ldr	r2, [pc, #200]	; (80d48 <Cl_LoadAlarmThresholdTable+0x11c>)
   80c7e:	629a      	str	r2, [r3, #40]	; 0x28
		Cl_alarmThresholdTable.ps3_low_threshold = -300;
   80c80:	4b2b      	ldr	r3, [pc, #172]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80c82:	4a30      	ldr	r2, [pc, #192]	; (80d44 <Cl_LoadAlarmThresholdTable+0x118>)
   80c84:	62da      	str	r2, [r3, #44]	; 0x2c
		Cl_alarmThresholdTable.temp1_high_threshold = 37;
   80c86:	4b2a      	ldr	r3, [pc, #168]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80c88:	4a30      	ldr	r2, [pc, #192]	; (80d4c <Cl_LoadAlarmThresholdTable+0x120>)
   80c8a:	639a      	str	r2, [r3, #56]	; 0x38
		Cl_alarmThresholdTable.temp1_low_threshold = 25;
   80c8c:	4b28      	ldr	r3, [pc, #160]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80c8e:	4a30      	ldr	r2, [pc, #192]	; (80d50 <Cl_LoadAlarmThresholdTable+0x124>)
   80c90:	63da      	str	r2, [r3, #60]	; 0x3c
		Cl_alarmThresholdTable.temp2_high_threshold = 80;
   80c92:	4b27      	ldr	r3, [pc, #156]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80c94:	4a2f      	ldr	r2, [pc, #188]	; (80d54 <Cl_LoadAlarmThresholdTable+0x128>)
   80c96:	641a      	str	r2, [r3, #64]	; 0x40
		Cl_alarmThresholdTable.temp2_low_threshold = 25;
   80c98:	4b25      	ldr	r3, [pc, #148]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80c9a:	4a2d      	ldr	r2, [pc, #180]	; (80d50 <Cl_LoadAlarmThresholdTable+0x124>)
   80c9c:	645a      	str	r2, [r3, #68]	; 0x44
		Cl_alarmThresholdTable.temp3_high_threshold = 375;  // manav03
   80c9e:	4b24      	ldr	r3, [pc, #144]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80ca0:	4a2d      	ldr	r2, [pc, #180]	; (80d58 <Cl_LoadAlarmThresholdTable+0x12c>)
   80ca2:	649a      	str	r2, [r3, #72]	; 0x48
		Cl_alarmThresholdTable.temp3_low_threshold = 250;   // manav03
   80ca4:	4b22      	ldr	r3, [pc, #136]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80ca6:	4a2d      	ldr	r2, [pc, #180]	; (80d5c <Cl_LoadAlarmThresholdTable+0x130>)
   80ca8:	64da      	str	r2, [r3, #76]	; 0x4c
		Cl_alarmThresholdTable.heater_high_temp_threshold = 45;
   80caa:	4b21      	ldr	r3, [pc, #132]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80cac:	4a2c      	ldr	r2, [pc, #176]	; (80d60 <Cl_LoadAlarmThresholdTable+0x134>)
   80cae:	651a      	str	r2, [r3, #80]	; 0x50
		Cl_alarmThresholdTable.hp_high_speed_threshold = 10000;
   80cb0:	4b1f      	ldr	r3, [pc, #124]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80cb2:	f242 7210 	movw	r2, #10000	; 0x2710
   80cb6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		Cl_alarmThresholdTable.hp_low_speed_threshold = 0;
   80cba:	4b1d      	ldr	r3, [pc, #116]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80cbc:	2200      	movs	r2, #0
   80cbe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		Cl_alarmThresholdTable.bp_high_speed_threshold = 10000;
   80cc2:	4b1b      	ldr	r3, [pc, #108]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80cc4:	f242 7210 	movw	r2, #10000	; 0x2710
   80cc8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		Cl_alarmThresholdTable.bp_low_speed_threshold = 0;
   80ccc:	4b18      	ldr	r3, [pc, #96]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80cce:	2200      	movs	r2, #0
   80cd0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		Cl_alarmThresholdTable.uf_high_speed_threshold = 10000;
   80cd4:	4b16      	ldr	r3, [pc, #88]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80cd6:	f242 7210 	movw	r2, #10000	; 0x2710
   80cda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		Cl_alarmThresholdTable.uf_low_speed_threshold = 0;
   80cde:	4b14      	ldr	r3, [pc, #80]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80ce0:	2200      	movs	r2, #0
   80ce2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		Cl_alarmThresholdTable.flow_low_threshold = 5;
   80ce6:	4b12      	ldr	r3, [pc, #72]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80ce8:	2205      	movs	r2, #5
   80cea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		Cl_alarmThresholdTable.flow_high_threshold = 20;
   80cee:	4b10      	ldr	r3, [pc, #64]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80cf0:	2214      	movs	r2, #20
   80cf2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		Cl_alarmThresholdTable.ls_toggle_high_threshold = 30;
   80cf6:	4b0e      	ldr	r3, [pc, #56]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80cf8:	221e      	movs	r2, #30
   80cfa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		Cl_alarmThresholdTable.ls_toggle_low_threshold = 5;
   80cfe:	4b0c      	ldr	r3, [pc, #48]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80d00:	2205      	movs	r2, #5
   80d02:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		Cl_alarmThresholdTable.bc_toggle_high_threshold = 30;
   80d06:	4b0a      	ldr	r3, [pc, #40]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80d08:	221e      	movs	r2, #30
   80d0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
		Cl_alarmThresholdTable.bc_toggle_low_threshold = 5;
   80d0e:	4b08      	ldr	r3, [pc, #32]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80d10:	2205      	movs	r2, #5
   80d12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		Cl_alarmThresholdTable.tmp_low_threshold  = -400;
   80d16:	4b06      	ldr	r3, [pc, #24]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80d18:	4a12      	ldr	r2, [pc, #72]	; (80d64 <Cl_LoadAlarmThresholdTable+0x138>)
   80d1a:	635a      	str	r2, [r3, #52]	; 0x34
		Cl_alarmThresholdTable.tmp_high_threshold  = 400;
   80d1c:	4b04      	ldr	r3, [pc, #16]	; (80d30 <Cl_LoadAlarmThresholdTable+0x104>)
   80d1e:	4a07      	ldr	r2, [pc, #28]	; (80d3c <Cl_LoadAlarmThresholdTable+0x110>)
   80d20:	631a      	str	r2, [r3, #48]	; 0x30
		//Cl_alarmThresholdTable.tmp_low_threshold  = 1500;
		return CL_OK ;
   80d22:	2300      	movs	r3, #0
}
   80d24:	4618      	mov	r0, r3
   80d26:	46bd      	mov	sp, r7
   80d28:	f85d 7b04 	ldr.w	r7, [sp], #4
   80d2c:	4770      	bx	lr
   80d2e:	bf00      	nop
   80d30:	200722a8 	.word	0x200722a8
   80d34:	44bb8000 	.word	0x44bb8000
   80d38:	442f0000 	.word	0x442f0000
   80d3c:	43c80000 	.word	0x43c80000
   80d40:	c3480000 	.word	0xc3480000
   80d44:	c3960000 	.word	0xc3960000
   80d48:	447a0000 	.word	0x447a0000
   80d4c:	42140000 	.word	0x42140000
   80d50:	41c80000 	.word	0x41c80000
   80d54:	42a00000 	.word	0x42a00000
   80d58:	43bb8000 	.word	0x43bb8000
   80d5c:	437a0000 	.word	0x437a0000
   80d60:	42340000 	.word	0x42340000
   80d64:	c3c80000 	.word	0xc3c80000

00080d68 <Cl_Alarm_translate_sensor_values>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : test_sensor_status,cl_sys_statbuffer
 */
// manav02 function added
Cl_ReturnCodeType Cl_Alarm_translate_sensor_values(void){
   80d68:	b590      	push	{r4, r7, lr}
   80d6a:	b085      	sub	sp, #20
   80d6c:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType cl_alarm_retval = CL_ERROR;
   80d6e:	2304      	movs	r3, #4
   80d70:	73fb      	strb	r3, [r7, #15]
	float temp;
	Cl_Uint16Type sensordata = 0 , ps1data  = 0 , ps2data  = 0 , ps3data  = 0 ;
   80d72:	2300      	movs	r3, #0
   80d74:	81bb      	strh	r3, [r7, #12]
   80d76:	2300      	movs	r3, #0
   80d78:	817b      	strh	r3, [r7, #10]
   80d7a:	2300      	movs	r3, #0
   80d7c:	813b      	strh	r3, [r7, #8]
   80d7e:	2300      	movs	r3, #0
   80d80:	80fb      	strh	r3, [r7, #6]
	
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&sensordata);
   80d82:	f107 030c 	add.w	r3, r7, #12
   80d86:	2012      	movs	r0, #18
   80d88:	4619      	mov	r1, r3
   80d8a:	4b63      	ldr	r3, [pc, #396]	; (80f18 <Cl_Alarm_translate_sensor_values+0x1b0>)
   80d8c:	4798      	blx	r3
		{
			temp1 = (float)sensordata/10;
   80d8e:	89ba      	ldrh	r2, [r7, #12]
   80d90:	4b62      	ldr	r3, [pc, #392]	; (80f1c <Cl_Alarm_translate_sensor_values+0x1b4>)
   80d92:	4610      	mov	r0, r2
   80d94:	4798      	blx	r3
   80d96:	4602      	mov	r2, r0
   80d98:	4b61      	ldr	r3, [pc, #388]	; (80f20 <Cl_Alarm_translate_sensor_values+0x1b8>)
   80d9a:	4610      	mov	r0, r2
   80d9c:	4961      	ldr	r1, [pc, #388]	; (80f24 <Cl_Alarm_translate_sensor_values+0x1bc>)
   80d9e:	4798      	blx	r3
   80da0:	4603      	mov	r3, r0
   80da2:	461a      	mov	r2, r3
   80da4:	4b60      	ldr	r3, [pc, #384]	; (80f28 <Cl_Alarm_translate_sensor_values+0x1c0>)
   80da6:	601a      	str	r2, [r3, #0]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);
   80da8:	f107 030c 	add.w	r3, r7, #12
   80dac:	2013      	movs	r0, #19
   80dae:	4619      	mov	r1, r3
   80db0:	4b59      	ldr	r3, [pc, #356]	; (80f18 <Cl_Alarm_translate_sensor_values+0x1b0>)
   80db2:	4798      	blx	r3
		{
			temp2 = (float)sensordata/10;
   80db4:	89ba      	ldrh	r2, [r7, #12]
   80db6:	4b59      	ldr	r3, [pc, #356]	; (80f1c <Cl_Alarm_translate_sensor_values+0x1b4>)
   80db8:	4610      	mov	r0, r2
   80dba:	4798      	blx	r3
   80dbc:	4602      	mov	r2, r0
   80dbe:	4b58      	ldr	r3, [pc, #352]	; (80f20 <Cl_Alarm_translate_sensor_values+0x1b8>)
   80dc0:	4610      	mov	r0, r2
   80dc2:	4958      	ldr	r1, [pc, #352]	; (80f24 <Cl_Alarm_translate_sensor_values+0x1bc>)
   80dc4:	4798      	blx	r3
   80dc6:	4603      	mov	r3, r0
   80dc8:	461a      	mov	r2, r3
   80dca:	4b58      	ldr	r3, [pc, #352]	; (80f2c <Cl_Alarm_translate_sensor_values+0x1c4>)
   80dcc:	601a      	str	r2, [r3, #0]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   80dce:	f107 030c 	add.w	r3, r7, #12
   80dd2:	2014      	movs	r0, #20
   80dd4:	4619      	mov	r1, r3
   80dd6:	4b50      	ldr	r3, [pc, #320]	; (80f18 <Cl_Alarm_translate_sensor_values+0x1b0>)
   80dd8:	4798      	blx	r3
		{
			temp3 = (float)sensordata/10;
   80dda:	89ba      	ldrh	r2, [r7, #12]
   80ddc:	4b4f      	ldr	r3, [pc, #316]	; (80f1c <Cl_Alarm_translate_sensor_values+0x1b4>)
   80dde:	4610      	mov	r0, r2
   80de0:	4798      	blx	r3
   80de2:	4602      	mov	r2, r0
   80de4:	4b4e      	ldr	r3, [pc, #312]	; (80f20 <Cl_Alarm_translate_sensor_values+0x1b8>)
   80de6:	4610      	mov	r0, r2
   80de8:	494e      	ldr	r1, [pc, #312]	; (80f24 <Cl_Alarm_translate_sensor_values+0x1bc>)
   80dea:	4798      	blx	r3
   80dec:	4603      	mov	r3, r0
   80dee:	461a      	mov	r2, r3
   80df0:	4b4f      	ldr	r3, [pc, #316]	; (80f30 <Cl_Alarm_translate_sensor_values+0x1c8>)
   80df2:	601a      	str	r2, [r3, #0]
		}
	
		Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&sensordata);
   80df4:	f107 030c 	add.w	r3, r7, #12
   80df8:	2007      	movs	r0, #7
   80dfa:	4619      	mov	r1, r3
   80dfc:	4b46      	ldr	r3, [pc, #280]	; (80f18 <Cl_Alarm_translate_sensor_values+0x1b0>)
   80dfe:	4798      	blx	r3
		{
			cond_final = (float)sensordata/100;
   80e00:	89ba      	ldrh	r2, [r7, #12]
   80e02:	4b46      	ldr	r3, [pc, #280]	; (80f1c <Cl_Alarm_translate_sensor_values+0x1b4>)
   80e04:	4610      	mov	r0, r2
   80e06:	4798      	blx	r3
   80e08:	4602      	mov	r2, r0
   80e0a:	4b45      	ldr	r3, [pc, #276]	; (80f20 <Cl_Alarm_translate_sensor_values+0x1b8>)
   80e0c:	4610      	mov	r0, r2
   80e0e:	4949      	ldr	r1, [pc, #292]	; (80f34 <Cl_Alarm_translate_sensor_values+0x1cc>)
   80e10:	4798      	blx	r3
   80e12:	4603      	mov	r3, r0
   80e14:	461a      	mov	r2, r3
   80e16:	4b48      	ldr	r3, [pc, #288]	; (80f38 <Cl_Alarm_translate_sensor_values+0x1d0>)
   80e18:	601a      	str	r2, [r3, #0]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS,&sensordata);
   80e1a:	f107 030c 	add.w	r3, r7, #12
   80e1e:	200b      	movs	r0, #11
   80e20:	4619      	mov	r1, r3
   80e22:	4b3d      	ldr	r3, [pc, #244]	; (80f18 <Cl_Alarm_translate_sensor_values+0x1b0>)
   80e24:	4798      	blx	r3
		{
			apt = (float)sensordata - 1000;
   80e26:	89ba      	ldrh	r2, [r7, #12]
   80e28:	4b3c      	ldr	r3, [pc, #240]	; (80f1c <Cl_Alarm_translate_sensor_values+0x1b4>)
   80e2a:	4610      	mov	r0, r2
   80e2c:	4798      	blx	r3
   80e2e:	4602      	mov	r2, r0
   80e30:	4b42      	ldr	r3, [pc, #264]	; (80f3c <Cl_Alarm_translate_sensor_values+0x1d4>)
   80e32:	4610      	mov	r0, r2
   80e34:	4942      	ldr	r1, [pc, #264]	; (80f40 <Cl_Alarm_translate_sensor_values+0x1d8>)
   80e36:	4798      	blx	r3
   80e38:	4603      	mov	r3, r0
   80e3a:	461a      	mov	r2, r3
   80e3c:	4b41      	ldr	r3, [pc, #260]	; (80f44 <Cl_Alarm_translate_sensor_values+0x1dc>)
   80e3e:	601a      	str	r2, [r3, #0]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS,&sensordata);
   80e40:	f107 030c 	add.w	r3, r7, #12
   80e44:	200c      	movs	r0, #12
   80e46:	4619      	mov	r1, r3
   80e48:	4b33      	ldr	r3, [pc, #204]	; (80f18 <Cl_Alarm_translate_sensor_values+0x1b0>)
   80e4a:	4798      	blx	r3
		{
			vpt = (float)sensordata - 1000;
   80e4c:	89ba      	ldrh	r2, [r7, #12]
   80e4e:	4b33      	ldr	r3, [pc, #204]	; (80f1c <Cl_Alarm_translate_sensor_values+0x1b4>)
   80e50:	4610      	mov	r0, r2
   80e52:	4798      	blx	r3
   80e54:	4602      	mov	r2, r0
   80e56:	4b39      	ldr	r3, [pc, #228]	; (80f3c <Cl_Alarm_translate_sensor_values+0x1d4>)
   80e58:	4610      	mov	r0, r2
   80e5a:	4939      	ldr	r1, [pc, #228]	; (80f40 <Cl_Alarm_translate_sensor_values+0x1d8>)
   80e5c:	4798      	blx	r3
   80e5e:	4603      	mov	r3, r0
   80e60:	461a      	mov	r2, r3
   80e62:	4b39      	ldr	r3, [pc, #228]	; (80f48 <Cl_Alarm_translate_sensor_values+0x1e0>)
   80e64:	601a      	str	r2, [r3, #0]
		}

		Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&ps1data);
   80e66:	f107 030a 	add.w	r3, r7, #10
   80e6a:	200e      	movs	r0, #14
   80e6c:	4619      	mov	r1, r3
   80e6e:	4b2a      	ldr	r3, [pc, #168]	; (80f18 <Cl_Alarm_translate_sensor_values+0x1b0>)
   80e70:	4798      	blx	r3
		{
			ps1 = 	ps1data - 1000;
   80e72:	897b      	ldrh	r3, [r7, #10]
   80e74:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
   80e78:	4b34      	ldr	r3, [pc, #208]	; (80f4c <Cl_Alarm_translate_sensor_values+0x1e4>)
   80e7a:	4610      	mov	r0, r2
   80e7c:	4798      	blx	r3
   80e7e:	4602      	mov	r2, r0
   80e80:	4b33      	ldr	r3, [pc, #204]	; (80f50 <Cl_Alarm_translate_sensor_values+0x1e8>)
   80e82:	601a      	str	r2, [r3, #0]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS,&ps2data);
   80e84:	f107 0308 	add.w	r3, r7, #8
   80e88:	200f      	movs	r0, #15
   80e8a:	4619      	mov	r1, r3
   80e8c:	4b22      	ldr	r3, [pc, #136]	; (80f18 <Cl_Alarm_translate_sensor_values+0x1b0>)
   80e8e:	4798      	blx	r3
		{
			ps2 = 	ps2data - 1000;
   80e90:	893b      	ldrh	r3, [r7, #8]
   80e92:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
   80e96:	4b2d      	ldr	r3, [pc, #180]	; (80f4c <Cl_Alarm_translate_sensor_values+0x1e4>)
   80e98:	4610      	mov	r0, r2
   80e9a:	4798      	blx	r3
   80e9c:	4602      	mov	r2, r0
   80e9e:	4b2d      	ldr	r3, [pc, #180]	; (80f54 <Cl_Alarm_translate_sensor_values+0x1ec>)
   80ea0:	601a      	str	r2, [r3, #0]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS,&ps3data);
   80ea2:	1dbb      	adds	r3, r7, #6
   80ea4:	2010      	movs	r0, #16
   80ea6:	4619      	mov	r1, r3
   80ea8:	4b1b      	ldr	r3, [pc, #108]	; (80f18 <Cl_Alarm_translate_sensor_values+0x1b0>)
   80eaa:	4798      	blx	r3
		{
			ps3 = 	ps3data - 1000;
   80eac:	88fb      	ldrh	r3, [r7, #6]
   80eae:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
   80eb2:	4b26      	ldr	r3, [pc, #152]	; (80f4c <Cl_Alarm_translate_sensor_values+0x1e4>)
   80eb4:	4610      	mov	r0, r2
   80eb6:	4798      	blx	r3
   80eb8:	4602      	mov	r2, r0
   80eba:	4b27      	ldr	r3, [pc, #156]	; (80f58 <Cl_Alarm_translate_sensor_values+0x1f0>)
   80ebc:	601a      	str	r2, [r3, #0]
		}

		tmpVal = 	(((apt + vpt) - (ps1+ps2))/2)-25;
   80ebe:	4b21      	ldr	r3, [pc, #132]	; (80f44 <Cl_Alarm_translate_sensor_values+0x1dc>)
   80ec0:	6819      	ldr	r1, [r3, #0]
   80ec2:	4b21      	ldr	r3, [pc, #132]	; (80f48 <Cl_Alarm_translate_sensor_values+0x1e0>)
   80ec4:	681a      	ldr	r2, [r3, #0]
   80ec6:	4b25      	ldr	r3, [pc, #148]	; (80f5c <Cl_Alarm_translate_sensor_values+0x1f4>)
   80ec8:	4608      	mov	r0, r1
   80eca:	4611      	mov	r1, r2
   80ecc:	4798      	blx	r3
   80ece:	4603      	mov	r3, r0
   80ed0:	461c      	mov	r4, r3
   80ed2:	4b1f      	ldr	r3, [pc, #124]	; (80f50 <Cl_Alarm_translate_sensor_values+0x1e8>)
   80ed4:	6819      	ldr	r1, [r3, #0]
   80ed6:	4b1f      	ldr	r3, [pc, #124]	; (80f54 <Cl_Alarm_translate_sensor_values+0x1ec>)
   80ed8:	681a      	ldr	r2, [r3, #0]
   80eda:	4b20      	ldr	r3, [pc, #128]	; (80f5c <Cl_Alarm_translate_sensor_values+0x1f4>)
   80edc:	4608      	mov	r0, r1
   80ede:	4611      	mov	r1, r2
   80ee0:	4798      	blx	r3
   80ee2:	4603      	mov	r3, r0
   80ee4:	461a      	mov	r2, r3
   80ee6:	4b15      	ldr	r3, [pc, #84]	; (80f3c <Cl_Alarm_translate_sensor_values+0x1d4>)
   80ee8:	4620      	mov	r0, r4
   80eea:	4611      	mov	r1, r2
   80eec:	4798      	blx	r3
   80eee:	4603      	mov	r3, r0
   80ef0:	461a      	mov	r2, r3
   80ef2:	4b0b      	ldr	r3, [pc, #44]	; (80f20 <Cl_Alarm_translate_sensor_values+0x1b8>)
   80ef4:	4610      	mov	r0, r2
   80ef6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   80efa:	4798      	blx	r3
   80efc:	4603      	mov	r3, r0
   80efe:	461a      	mov	r2, r3
   80f00:	4b0e      	ldr	r3, [pc, #56]	; (80f3c <Cl_Alarm_translate_sensor_values+0x1d4>)
   80f02:	4610      	mov	r0, r2
   80f04:	4916      	ldr	r1, [pc, #88]	; (80f60 <Cl_Alarm_translate_sensor_values+0x1f8>)
   80f06:	4798      	blx	r3
   80f08:	4603      	mov	r3, r0
   80f0a:	461a      	mov	r2, r3
   80f0c:	4b15      	ldr	r3, [pc, #84]	; (80f64 <Cl_Alarm_translate_sensor_values+0x1fc>)
   80f0e:	601a      	str	r2, [r3, #0]
		
		

}
   80f10:	4618      	mov	r0, r3
   80f12:	3714      	adds	r7, #20
   80f14:	46bd      	mov	sp, r7
   80f16:	bd90      	pop	{r4, r7, pc}
   80f18:	0008fd69 	.word	0x0008fd69
   80f1c:	000a8255 	.word	0x000a8255
   80f20:	000a846d 	.word	0x000a846d
   80f24:	41200000 	.word	0x41200000
   80f28:	20071920 	.word	0x20071920
   80f2c:	20071924 	.word	0x20071924
   80f30:	20071928 	.word	0x20071928
   80f34:	42c80000 	.word	0x42c80000
   80f38:	2007192c 	.word	0x2007192c
   80f3c:	000a80f1 	.word	0x000a80f1
   80f40:	447a0000 	.word	0x447a0000
   80f44:	200722a0 	.word	0x200722a0
   80f48:	20071910 	.word	0x20071910
   80f4c:	000a825d 	.word	0x000a825d
   80f50:	20071914 	.word	0x20071914
   80f54:	20071918 	.word	0x20071918
   80f58:	2007191c 	.word	0x2007191c
   80f5c:	000a80f5 	.word	0x000a80f5
   80f60:	41c80000 	.word	0x41c80000
   80f64:	2007190c 	.word	0x2007190c

00080f68 <Cl_alarms_scanforAlarms>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms[]
 */
  
Cl_ReturnCodeType Cl_alarms_scanforAlarms(void)
{
   80f68:	b580      	push	{r7, lr}
   80f6a:	b082      	sub	sp, #8
   80f6c:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_alarms_retcode;
	
	 Cl_alarms_retcode = Cl_Alarm_translate_sensor_values();
   80f6e:	4b98      	ldr	r3, [pc, #608]	; (811d0 <Cl_alarms_scanforAlarms+0x268>)
   80f70:	4798      	blx	r3
   80f72:	4603      	mov	r3, r0
   80f74:	71fb      	strb	r3, [r7, #7]
	 ASSERT_ERROR(Cl_alarms_retcode);
   80f76:	79fb      	ldrb	r3, [r7, #7]
   80f78:	2b00      	cmp	r3, #0
   80f7a:	d001      	beq.n	80f80 <Cl_alarms_scanforAlarms+0x18>
   80f7c:	4b95      	ldr	r3, [pc, #596]	; (811d4 <Cl_alarms_scanforAlarms+0x26c>)
   80f7e:	4798      	blx	r3
	
	if(Cl_alarms_alarms[POWER_FAILURE].cl_is_enabled){
   80f80:	4b95      	ldr	r3, [pc, #596]	; (811d8 <Cl_alarms_scanforAlarms+0x270>)
   80f82:	f893 31de 	ldrb.w	r3, [r3, #478]	; 0x1de
   80f86:	2b00      	cmp	r3, #0
   80f88:	d03b      	beq.n	81002 <Cl_alarms_scanforAlarms+0x9a>
		
		if(cl_sys_statbuffer.PowerFailure)
   80f8a:	4b94      	ldr	r3, [pc, #592]	; (811dc <Cl_alarms_scanforAlarms+0x274>)
   80f8c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
   80f90:	2b00      	cmp	r3, #0
   80f92:	d032      	beq.n	80ffa <Cl_alarms_scanforAlarms+0x92>
		{
			powerfailurecount++;
   80f94:	4b92      	ldr	r3, [pc, #584]	; (811e0 <Cl_alarms_scanforAlarms+0x278>)
   80f96:	681b      	ldr	r3, [r3, #0]
   80f98:	3301      	adds	r3, #1
   80f9a:	4a91      	ldr	r2, [pc, #580]	; (811e0 <Cl_alarms_scanforAlarms+0x278>)
   80f9c:	6013      	str	r3, [r2, #0]

//if(powerfailurecount > 5){
			powerfailurecount = 0 ;
   80f9e:	4b90      	ldr	r3, [pc, #576]	; (811e0 <Cl_alarms_scanforAlarms+0x278>)
   80fa0:	2200      	movs	r2, #0
   80fa2:	601a      	str	r2, [r3, #0]
			Cl_alarms_alarms[POWER_FAILURE].cl_alarmstate = CL_ALARM_DETECTED;
   80fa4:	4b8c      	ldr	r3, [pc, #560]	; (811d8 <Cl_alarms_scanforAlarms+0x270>)
   80fa6:	2201      	movs	r2, #1
   80fa8:	f883 21d2 	strb.w	r2, [r3, #466]	; 0x1d2
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=POWER_FAILURE; 
   80fac:	4b8d      	ldr	r3, [pc, #564]	; (811e4 <Cl_alarms_scanforAlarms+0x27c>)
   80fae:	781b      	ldrb	r3, [r3, #0]
   80fb0:	4a8c      	ldr	r2, [pc, #560]	; (811e4 <Cl_alarms_scanforAlarms+0x27c>)
   80fb2:	3301      	adds	r3, #1
   80fb4:	00db      	lsls	r3, r3, #3
   80fb6:	4413      	add	r3, r2
   80fb8:	221d      	movs	r2, #29
   80fba:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[POWER_FAILURE].cl_detected_count++;
   80fbc:	4b86      	ldr	r3, [pc, #536]	; (811d8 <Cl_alarms_scanforAlarms+0x270>)
   80fbe:	f893 31dd 	ldrb.w	r3, [r3, #477]	; 0x1dd
   80fc2:	3301      	adds	r3, #1
   80fc4:	b2da      	uxtb	r2, r3
   80fc6:	4b84      	ldr	r3, [pc, #528]	; (811d8 <Cl_alarms_scanforAlarms+0x270>)
   80fc8:	f883 21dd 	strb.w	r2, [r3, #477]	; 0x1dd
			cl_alarm_triggered = true;
   80fcc:	4b86      	ldr	r3, [pc, #536]	; (811e8 <Cl_alarms_scanforAlarms+0x280>)
   80fce:	2201      	movs	r2, #1
   80fd0:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = POWER_FAILURE;
   80fd2:	4b86      	ldr	r3, [pc, #536]	; (811ec <Cl_alarms_scanforAlarms+0x284>)
   80fd4:	221d      	movs	r2, #29
   80fd6:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   80fd8:	4b82      	ldr	r3, [pc, #520]	; (811e4 <Cl_alarms_scanforAlarms+0x27c>)
   80fda:	781b      	ldrb	r3, [r3, #0]
   80fdc:	461a      	mov	r2, r3
   80fde:	4b81      	ldr	r3, [pc, #516]	; (811e4 <Cl_alarms_scanforAlarms+0x27c>)
   80fe0:	4413      	add	r3, r2
   80fe2:	222e      	movs	r2, #46	; 0x2e
   80fe4:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   80fe6:	4b82      	ldr	r3, [pc, #520]	; (811f0 <Cl_alarms_scanforAlarms+0x288>)
   80fe8:	4798      	blx	r3
   80fea:	4603      	mov	r3, r0
   80fec:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   80fee:	79fb      	ldrb	r3, [r7, #7]
   80ff0:	2b00      	cmp	r3, #0
   80ff2:	d006      	beq.n	81002 <Cl_alarms_scanforAlarms+0x9a>
   80ff4:	4b77      	ldr	r3, [pc, #476]	; (811d4 <Cl_alarms_scanforAlarms+0x26c>)
   80ff6:	4798      	blx	r3
   80ff8:	e003      	b.n	81002 <Cl_alarms_scanforAlarms+0x9a>
//}
		}
		else
		{
			Cl_alarms_alarms[POWER_FAILURE].cl_alarmstate = CL_ALARM_INACTIVE;
   80ffa:	4b77      	ldr	r3, [pc, #476]	; (811d8 <Cl_alarms_scanforAlarms+0x270>)
   80ffc:	2204      	movs	r2, #4
   80ffe:	f883 21d2 	strb.w	r2, [r3, #466]	; 0x1d2
		
	}
	
	
	
	if (Cl_alarms_alarms[ACID_IN_OPEN].cl_is_enabled)
   81002:	4b75      	ldr	r3, [pc, #468]	; (811d8 <Cl_alarms_scanforAlarms+0x270>)
   81004:	f893 329e 	ldrb.w	r3, [r3, #670]	; 0x29e
   81008:	2b00      	cmp	r3, #0
   8100a:	d048      	beq.n	8109e <Cl_alarms_scanforAlarms+0x136>
	{
		
		if(((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
   8100c:	4b72      	ldr	r3, [pc, #456]	; (811d8 <Cl_alarms_scanforAlarms+0x270>)
   8100e:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
   81012:	2b01      	cmp	r3, #1
   81014:	d104      	bne.n	81020 <Cl_alarms_scanforAlarms+0xb8>
   81016:	4b71      	ldr	r3, [pc, #452]	; (811dc <Cl_alarms_scanforAlarms+0x274>)
   81018:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
   8101c:	2b00      	cmp	r3, #0
   8101e:	d109      	bne.n	81034 <Cl_alarms_scanforAlarms+0xcc>
   81020:	4b6d      	ldr	r3, [pc, #436]	; (811d8 <Cl_alarms_scanforAlarms+0x270>)
   81022:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
   81026:	2b00      	cmp	r3, #0
   81028:	d135      	bne.n	81096 <Cl_alarms_scanforAlarms+0x12e>
   8102a:	4b6c      	ldr	r3, [pc, #432]	; (811dc <Cl_alarms_scanforAlarms+0x274>)
   8102c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
   81030:	2b00      	cmp	r3, #0
   81032:	d130      	bne.n	81096 <Cl_alarms_scanforAlarms+0x12e>
		{
			if(Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   81034:	4b68      	ldr	r3, [pc, #416]	; (811d8 <Cl_alarms_scanforAlarms+0x270>)
   81036:	f893 3292 	ldrb.w	r3, [r3, #658]	; 0x292
   8103a:	2b01      	cmp	r3, #1
   8103c:	d02a      	beq.n	81094 <Cl_alarms_scanforAlarms+0x12c>
			{
			Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   8103e:	4b66      	ldr	r3, [pc, #408]	; (811d8 <Cl_alarms_scanforAlarms+0x270>)
   81040:	2201      	movs	r2, #1
   81042:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=ACID_IN_OPEN;
   81046:	4b67      	ldr	r3, [pc, #412]	; (811e4 <Cl_alarms_scanforAlarms+0x27c>)
   81048:	781b      	ldrb	r3, [r3, #0]
   8104a:	4a66      	ldr	r2, [pc, #408]	; (811e4 <Cl_alarms_scanforAlarms+0x27c>)
   8104c:	3301      	adds	r3, #1
   8104e:	00db      	lsls	r3, r3, #3
   81050:	4413      	add	r3, r2
   81052:	2229      	movs	r2, #41	; 0x29
   81054:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[ACID_IN_OPEN].cl_detected_count++;
   81056:	4b60      	ldr	r3, [pc, #384]	; (811d8 <Cl_alarms_scanforAlarms+0x270>)
   81058:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
   8105c:	3301      	adds	r3, #1
   8105e:	b2da      	uxtb	r2, r3
   81060:	4b5d      	ldr	r3, [pc, #372]	; (811d8 <Cl_alarms_scanforAlarms+0x270>)
   81062:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
			cl_alarm_triggered = true;
   81066:	4b60      	ldr	r3, [pc, #384]	; (811e8 <Cl_alarms_scanforAlarms+0x280>)
   81068:	2201      	movs	r2, #1
   8106a:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = ACID_IN_OPEN;
   8106c:	4b5f      	ldr	r3, [pc, #380]	; (811ec <Cl_alarms_scanforAlarms+0x284>)
   8106e:	2229      	movs	r2, #41	; 0x29
   81070:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81072:	4b5c      	ldr	r3, [pc, #368]	; (811e4 <Cl_alarms_scanforAlarms+0x27c>)
   81074:	781b      	ldrb	r3, [r3, #0]
   81076:	461a      	mov	r2, r3
   81078:	4b5a      	ldr	r3, [pc, #360]	; (811e4 <Cl_alarms_scanforAlarms+0x27c>)
   8107a:	4413      	add	r3, r2
   8107c:	222e      	movs	r2, #46	; 0x2e
   8107e:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81080:	4b5b      	ldr	r3, [pc, #364]	; (811f0 <Cl_alarms_scanforAlarms+0x288>)
   81082:	4798      	blx	r3
   81084:	4603      	mov	r3, r0
   81086:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81088:	79fb      	ldrb	r3, [r7, #7]
   8108a:	2b00      	cmp	r3, #0
   8108c:	d002      	beq.n	81094 <Cl_alarms_scanforAlarms+0x12c>
   8108e:	4b51      	ldr	r3, [pc, #324]	; (811d4 <Cl_alarms_scanforAlarms+0x26c>)
   81090:	4798      	blx	r3
	if (Cl_alarms_alarms[ACID_IN_OPEN].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
		{
			if(Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   81092:	e004      	b.n	8109e <Cl_alarms_scanforAlarms+0x136>
   81094:	e003      	b.n	8109e <Cl_alarms_scanforAlarms+0x136>
			ASSERT_ERROR(Cl_alarms_retcode);
			}
		}
		else
		{
			Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   81096:	4b50      	ldr	r3, [pc, #320]	; (811d8 <Cl_alarms_scanforAlarms+0x270>)
   81098:	2204      	movs	r2, #4
   8109a:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
		}	
	}
	if (Cl_alarms_alarms[ACID_IN_CLOSED].cl_is_enabled)
   8109e:	4b4e      	ldr	r3, [pc, #312]	; (811d8 <Cl_alarms_scanforAlarms+0x270>)
   810a0:	f893 32ae 	ldrb.w	r3, [r3, #686]	; 0x2ae
   810a4:	2b00      	cmp	r3, #0
   810a6:	d048      	beq.n	8113a <Cl_alarms_scanforAlarms+0x1d2>
	{
		
		if(((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
   810a8:	4b4b      	ldr	r3, [pc, #300]	; (811d8 <Cl_alarms_scanforAlarms+0x270>)
   810aa:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
   810ae:	2b01      	cmp	r3, #1
   810b0:	d104      	bne.n	810bc <Cl_alarms_scanforAlarms+0x154>
   810b2:	4b4a      	ldr	r3, [pc, #296]	; (811dc <Cl_alarms_scanforAlarms+0x274>)
   810b4:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
   810b8:	2b00      	cmp	r3, #0
   810ba:	d109      	bne.n	810d0 <Cl_alarms_scanforAlarms+0x168>
   810bc:	4b46      	ldr	r3, [pc, #280]	; (811d8 <Cl_alarms_scanforAlarms+0x270>)
   810be:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
   810c2:	2b00      	cmp	r3, #0
   810c4:	d135      	bne.n	81132 <Cl_alarms_scanforAlarms+0x1ca>
   810c6:	4b45      	ldr	r3, [pc, #276]	; (811dc <Cl_alarms_scanforAlarms+0x274>)
   810c8:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
   810cc:	2b00      	cmp	r3, #0
   810ce:	d130      	bne.n	81132 <Cl_alarms_scanforAlarms+0x1ca>
		{
			if(Cl_alarms_alarms[ACID_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   810d0:	4b41      	ldr	r3, [pc, #260]	; (811d8 <Cl_alarms_scanforAlarms+0x270>)
   810d2:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
   810d6:	2b01      	cmp	r3, #1
   810d8:	d02a      	beq.n	81130 <Cl_alarms_scanforAlarms+0x1c8>
			{
				Cl_alarms_alarms[ACID_IN_CLOSED].cl_alarmstate = CL_ALARM_DETECTED;
   810da:	4b3f      	ldr	r3, [pc, #252]	; (811d8 <Cl_alarms_scanforAlarms+0x270>)
   810dc:	2201      	movs	r2, #1
   810de:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
				Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=ACID_IN_OPEN;
   810e2:	4b40      	ldr	r3, [pc, #256]	; (811e4 <Cl_alarms_scanforAlarms+0x27c>)
   810e4:	781b      	ldrb	r3, [r3, #0]
   810e6:	4a3f      	ldr	r2, [pc, #252]	; (811e4 <Cl_alarms_scanforAlarms+0x27c>)
   810e8:	3301      	adds	r3, #1
   810ea:	00db      	lsls	r3, r3, #3
   810ec:	4413      	add	r3, r2
   810ee:	2229      	movs	r2, #41	; 0x29
   810f0:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[ACID_IN_CLOSED].cl_detected_count++;
   810f2:	4b39      	ldr	r3, [pc, #228]	; (811d8 <Cl_alarms_scanforAlarms+0x270>)
   810f4:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
   810f8:	3301      	adds	r3, #1
   810fa:	b2da      	uxtb	r2, r3
   810fc:	4b36      	ldr	r3, [pc, #216]	; (811d8 <Cl_alarms_scanforAlarms+0x270>)
   810fe:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
				cl_alarm_triggered = true;
   81102:	4b39      	ldr	r3, [pc, #228]	; (811e8 <Cl_alarms_scanforAlarms+0x280>)
   81104:	2201      	movs	r2, #1
   81106:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = ACID_IN_CLOSED;
   81108:	4b38      	ldr	r3, [pc, #224]	; (811ec <Cl_alarms_scanforAlarms+0x284>)
   8110a:	222a      	movs	r2, #42	; 0x2a
   8110c:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8110e:	4b35      	ldr	r3, [pc, #212]	; (811e4 <Cl_alarms_scanforAlarms+0x27c>)
   81110:	781b      	ldrb	r3, [r3, #0]
   81112:	461a      	mov	r2, r3
   81114:	4b33      	ldr	r3, [pc, #204]	; (811e4 <Cl_alarms_scanforAlarms+0x27c>)
   81116:	4413      	add	r3, r2
   81118:	222e      	movs	r2, #46	; 0x2e
   8111a:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   8111c:	4b34      	ldr	r3, [pc, #208]	; (811f0 <Cl_alarms_scanforAlarms+0x288>)
   8111e:	4798      	blx	r3
   81120:	4603      	mov	r3, r0
   81122:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);
   81124:	79fb      	ldrb	r3, [r7, #7]
   81126:	2b00      	cmp	r3, #0
   81128:	d002      	beq.n	81130 <Cl_alarms_scanforAlarms+0x1c8>
   8112a:	4b2a      	ldr	r3, [pc, #168]	; (811d4 <Cl_alarms_scanforAlarms+0x26c>)
   8112c:	4798      	blx	r3
	if (Cl_alarms_alarms[ACID_IN_CLOSED].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
		{
			if(Cl_alarms_alarms[ACID_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   8112e:	e004      	b.n	8113a <Cl_alarms_scanforAlarms+0x1d2>
   81130:	e003      	b.n	8113a <Cl_alarms_scanforAlarms+0x1d2>
				ASSERT_ERROR(Cl_alarms_retcode);
			}
		}
		else
		{
			Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   81132:	4b29      	ldr	r3, [pc, #164]	; (811d8 <Cl_alarms_scanforAlarms+0x270>)
   81134:	2204      	movs	r2, #4
   81136:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
		}
	}
	
	if (Cl_alarms_alarms[BICARB_IN_OPEN].cl_is_enabled)
   8113a:	4b27      	ldr	r3, [pc, #156]	; (811d8 <Cl_alarms_scanforAlarms+0x270>)
   8113c:	f893 32be 	ldrb.w	r3, [r3, #702]	; 0x2be
   81140:	2b00      	cmp	r3, #0
   81142:	d05b      	beq.n	811fc <Cl_alarms_scanforAlarms+0x294>
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
   81144:	4b24      	ldr	r3, [pc, #144]	; (811d8 <Cl_alarms_scanforAlarms+0x270>)
   81146:	f893 32b1 	ldrb.w	r3, [r3, #689]	; 0x2b1
   8114a:	2b01      	cmp	r3, #1
   8114c:	d104      	bne.n	81158 <Cl_alarms_scanforAlarms+0x1f0>
   8114e:	4b23      	ldr	r3, [pc, #140]	; (811dc <Cl_alarms_scanforAlarms+0x274>)
   81150:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
   81154:	2b00      	cmp	r3, #0
   81156:	d109      	bne.n	8116c <Cl_alarms_scanforAlarms+0x204>
   81158:	4b1f      	ldr	r3, [pc, #124]	; (811d8 <Cl_alarms_scanforAlarms+0x270>)
   8115a:	f893 32b1 	ldrb.w	r3, [r3, #689]	; 0x2b1
   8115e:	2b00      	cmp	r3, #0
   81160:	d148      	bne.n	811f4 <Cl_alarms_scanforAlarms+0x28c>
   81162:	4b1e      	ldr	r3, [pc, #120]	; (811dc <Cl_alarms_scanforAlarms+0x274>)
   81164:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
   81168:	2b00      	cmp	r3, #0
   8116a:	d143      	bne.n	811f4 <Cl_alarms_scanforAlarms+0x28c>
		{
			if(Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   8116c:	4b1a      	ldr	r3, [pc, #104]	; (811d8 <Cl_alarms_scanforAlarms+0x270>)
   8116e:	f893 32b2 	ldrb.w	r3, [r3, #690]	; 0x2b2
   81172:	2b01      	cmp	r3, #1
   81174:	d02a      	beq.n	811cc <Cl_alarms_scanforAlarms+0x264>
			{
			Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   81176:	4b18      	ldr	r3, [pc, #96]	; (811d8 <Cl_alarms_scanforAlarms+0x270>)
   81178:	2201      	movs	r2, #1
   8117a:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=BICARB_IN_OPEN;
   8117e:	4b19      	ldr	r3, [pc, #100]	; (811e4 <Cl_alarms_scanforAlarms+0x27c>)
   81180:	781b      	ldrb	r3, [r3, #0]
   81182:	4a18      	ldr	r2, [pc, #96]	; (811e4 <Cl_alarms_scanforAlarms+0x27c>)
   81184:	3301      	adds	r3, #1
   81186:	00db      	lsls	r3, r3, #3
   81188:	4413      	add	r3, r2
   8118a:	222b      	movs	r2, #43	; 0x2b
   8118c:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[BICARB_IN_OPEN].cl_detected_count++;
   8118e:	4b12      	ldr	r3, [pc, #72]	; (811d8 <Cl_alarms_scanforAlarms+0x270>)
   81190:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
   81194:	3301      	adds	r3, #1
   81196:	b2da      	uxtb	r2, r3
   81198:	4b0f      	ldr	r3, [pc, #60]	; (811d8 <Cl_alarms_scanforAlarms+0x270>)
   8119a:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd
			cl_alarm_triggered = true;
   8119e:	4b12      	ldr	r3, [pc, #72]	; (811e8 <Cl_alarms_scanforAlarms+0x280>)
   811a0:	2201      	movs	r2, #1
   811a2:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = BICARB_IN_OPEN;
   811a4:	4b11      	ldr	r3, [pc, #68]	; (811ec <Cl_alarms_scanforAlarms+0x284>)
   811a6:	222b      	movs	r2, #43	; 0x2b
   811a8:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   811aa:	4b0e      	ldr	r3, [pc, #56]	; (811e4 <Cl_alarms_scanforAlarms+0x27c>)
   811ac:	781b      	ldrb	r3, [r3, #0]
   811ae:	461a      	mov	r2, r3
   811b0:	4b0c      	ldr	r3, [pc, #48]	; (811e4 <Cl_alarms_scanforAlarms+0x27c>)
   811b2:	4413      	add	r3, r2
   811b4:	222e      	movs	r2, #46	; 0x2e
   811b6:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   811b8:	4b0d      	ldr	r3, [pc, #52]	; (811f0 <Cl_alarms_scanforAlarms+0x288>)
   811ba:	4798      	blx	r3
   811bc:	4603      	mov	r3, r0
   811be:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   811c0:	79fb      	ldrb	r3, [r7, #7]
   811c2:	2b00      	cmp	r3, #0
   811c4:	d002      	beq.n	811cc <Cl_alarms_scanforAlarms+0x264>
   811c6:	4b03      	ldr	r3, [pc, #12]	; (811d4 <Cl_alarms_scanforAlarms+0x26c>)
   811c8:	4798      	blx	r3
	if (Cl_alarms_alarms[BICARB_IN_OPEN].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
		{
			if(Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   811ca:	e017      	b.n	811fc <Cl_alarms_scanforAlarms+0x294>
   811cc:	e016      	b.n	811fc <Cl_alarms_scanforAlarms+0x294>
   811ce:	bf00      	nop
   811d0:	00080d69 	.word	0x00080d69
   811d4:	00088b81 	.word	0x00088b81
   811d8:	20071e70 	.word	0x20071e70
   811dc:	200723d8 	.word	0x200723d8
   811e0:	20071930 	.word	0x20071930
   811e4:	20072480 	.word	0x20072480
   811e8:	20071909 	.word	0x20071909
   811ec:	200722a4 	.word	0x200722a4
   811f0:	00082965 	.word	0x00082965
			ASSERT_ERROR(Cl_alarms_retcode);
			}
		}
		else
		{
			Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   811f4:	4ba0      	ldr	r3, [pc, #640]	; (81478 <Cl_alarms_scanforAlarms+0x510>)
   811f6:	2204      	movs	r2, #4
   811f8:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
		}
	}
	if (Cl_alarms_alarms[BICARB_IN_CLOSED].cl_is_enabled)
   811fc:	4b9e      	ldr	r3, [pc, #632]	; (81478 <Cl_alarms_scanforAlarms+0x510>)
   811fe:	f893 32ce 	ldrb.w	r3, [r3, #718]	; 0x2ce
   81202:	2b00      	cmp	r3, #0
   81204:	d048      	beq.n	81298 <Cl_alarms_scanforAlarms+0x330>
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
   81206:	4b9c      	ldr	r3, [pc, #624]	; (81478 <Cl_alarms_scanforAlarms+0x510>)
   81208:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
   8120c:	2b01      	cmp	r3, #1
   8120e:	d104      	bne.n	8121a <Cl_alarms_scanforAlarms+0x2b2>
   81210:	4b9a      	ldr	r3, [pc, #616]	; (8147c <Cl_alarms_scanforAlarms+0x514>)
   81212:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
   81216:	2b00      	cmp	r3, #0
   81218:	d109      	bne.n	8122e <Cl_alarms_scanforAlarms+0x2c6>
   8121a:	4b97      	ldr	r3, [pc, #604]	; (81478 <Cl_alarms_scanforAlarms+0x510>)
   8121c:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
   81220:	2b00      	cmp	r3, #0
   81222:	d135      	bne.n	81290 <Cl_alarms_scanforAlarms+0x328>
   81224:	4b95      	ldr	r3, [pc, #596]	; (8147c <Cl_alarms_scanforAlarms+0x514>)
   81226:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
   8122a:	2b00      	cmp	r3, #0
   8122c:	d130      	bne.n	81290 <Cl_alarms_scanforAlarms+0x328>
		{
			if(Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   8122e:	4b92      	ldr	r3, [pc, #584]	; (81478 <Cl_alarms_scanforAlarms+0x510>)
   81230:	f893 32c2 	ldrb.w	r3, [r3, #706]	; 0x2c2
   81234:	2b01      	cmp	r3, #1
   81236:	d02a      	beq.n	8128e <Cl_alarms_scanforAlarms+0x326>
			{
				Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate = CL_ALARM_DETECTED;
   81238:	4b8f      	ldr	r3, [pc, #572]	; (81478 <Cl_alarms_scanforAlarms+0x510>)
   8123a:	2201      	movs	r2, #1
   8123c:	f883 22c2 	strb.w	r2, [r3, #706]	; 0x2c2
				Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=BICARB_IN_CLOSED;
   81240:	4b8f      	ldr	r3, [pc, #572]	; (81480 <Cl_alarms_scanforAlarms+0x518>)
   81242:	781b      	ldrb	r3, [r3, #0]
   81244:	4a8e      	ldr	r2, [pc, #568]	; (81480 <Cl_alarms_scanforAlarms+0x518>)
   81246:	3301      	adds	r3, #1
   81248:	00db      	lsls	r3, r3, #3
   8124a:	4413      	add	r3, r2
   8124c:	222c      	movs	r2, #44	; 0x2c
   8124e:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[BICARB_IN_CLOSED].cl_detected_count++;
   81250:	4b89      	ldr	r3, [pc, #548]	; (81478 <Cl_alarms_scanforAlarms+0x510>)
   81252:	f893 32cd 	ldrb.w	r3, [r3, #717]	; 0x2cd
   81256:	3301      	adds	r3, #1
   81258:	b2da      	uxtb	r2, r3
   8125a:	4b87      	ldr	r3, [pc, #540]	; (81478 <Cl_alarms_scanforAlarms+0x510>)
   8125c:	f883 22cd 	strb.w	r2, [r3, #717]	; 0x2cd
				cl_alarm_triggered = true;
   81260:	4b88      	ldr	r3, [pc, #544]	; (81484 <Cl_alarms_scanforAlarms+0x51c>)
   81262:	2201      	movs	r2, #1
   81264:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = BICARB_IN_CLOSED;
   81266:	4b88      	ldr	r3, [pc, #544]	; (81488 <Cl_alarms_scanforAlarms+0x520>)
   81268:	222c      	movs	r2, #44	; 0x2c
   8126a:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8126c:	4b84      	ldr	r3, [pc, #528]	; (81480 <Cl_alarms_scanforAlarms+0x518>)
   8126e:	781b      	ldrb	r3, [r3, #0]
   81270:	461a      	mov	r2, r3
   81272:	4b83      	ldr	r3, [pc, #524]	; (81480 <Cl_alarms_scanforAlarms+0x518>)
   81274:	4413      	add	r3, r2
   81276:	222e      	movs	r2, #46	; 0x2e
   81278:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   8127a:	4b84      	ldr	r3, [pc, #528]	; (8148c <Cl_alarms_scanforAlarms+0x524>)
   8127c:	4798      	blx	r3
   8127e:	4603      	mov	r3, r0
   81280:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);
   81282:	79fb      	ldrb	r3, [r7, #7]
   81284:	2b00      	cmp	r3, #0
   81286:	d002      	beq.n	8128e <Cl_alarms_scanforAlarms+0x326>
   81288:	4b81      	ldr	r3, [pc, #516]	; (81490 <Cl_alarms_scanforAlarms+0x528>)
   8128a:	4798      	blx	r3
	if (Cl_alarms_alarms[BICARB_IN_CLOSED].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
		{
			if(Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   8128c:	e004      	b.n	81298 <Cl_alarms_scanforAlarms+0x330>
   8128e:	e003      	b.n	81298 <Cl_alarms_scanforAlarms+0x330>
				ASSERT_ERROR(Cl_alarms_retcode);
			}
		}
		else
		{
			Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate = CL_ALARM_INACTIVE;
   81290:	4b79      	ldr	r3, [pc, #484]	; (81478 <Cl_alarms_scanforAlarms+0x510>)
   81292:	2204      	movs	r2, #4
   81294:	f883 22c2 	strb.w	r2, [r3, #706]	; 0x2c2
		}
	}
	
	if(Cl_alarms_alarms[ABD_EVENT].cl_is_enabled)
   81298:	4b77      	ldr	r3, [pc, #476]	; (81478 <Cl_alarms_scanforAlarms+0x510>)
   8129a:	f893 320e 	ldrb.w	r3, [r3, #526]	; 0x20e
   8129e:	2b00      	cmp	r3, #0
   812a0:	d032      	beq.n	81308 <Cl_alarms_scanforAlarms+0x3a0>
	{
		
		if(cl_sys_statbuffer.abdstatus)
   812a2:	4b76      	ldr	r3, [pc, #472]	; (8147c <Cl_alarms_scanforAlarms+0x514>)
   812a4:	8b1b      	ldrh	r3, [r3, #24]
   812a6:	2b00      	cmp	r3, #0
   812a8:	d02a      	beq.n	81300 <Cl_alarms_scanforAlarms+0x398>
		{

			Cl_alarms_alarms[ABD_EVENT].cl_alarmstate = CL_ALARM_DETECTED;
   812aa:	4b73      	ldr	r3, [pc, #460]	; (81478 <Cl_alarms_scanforAlarms+0x510>)
   812ac:	2201      	movs	r2, #1
   812ae:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=ABD_EVENT; 
   812b2:	4b73      	ldr	r3, [pc, #460]	; (81480 <Cl_alarms_scanforAlarms+0x518>)
   812b4:	781b      	ldrb	r3, [r3, #0]
   812b6:	4a72      	ldr	r2, [pc, #456]	; (81480 <Cl_alarms_scanforAlarms+0x518>)
   812b8:	3301      	adds	r3, #1
   812ba:	00db      	lsls	r3, r3, #3
   812bc:	4413      	add	r3, r2
   812be:	2220      	movs	r2, #32
   812c0:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[ABD_EVENT].cl_detected_count++;
   812c2:	4b6d      	ldr	r3, [pc, #436]	; (81478 <Cl_alarms_scanforAlarms+0x510>)
   812c4:	f893 320d 	ldrb.w	r3, [r3, #525]	; 0x20d
   812c8:	3301      	adds	r3, #1
   812ca:	b2da      	uxtb	r2, r3
   812cc:	4b6a      	ldr	r3, [pc, #424]	; (81478 <Cl_alarms_scanforAlarms+0x510>)
   812ce:	f883 220d 	strb.w	r2, [r3, #525]	; 0x20d
			cl_alarm_triggered = true;
   812d2:	4b6c      	ldr	r3, [pc, #432]	; (81484 <Cl_alarms_scanforAlarms+0x51c>)
   812d4:	2201      	movs	r2, #1
   812d6:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = ABD_EVENT;
   812d8:	4b6b      	ldr	r3, [pc, #428]	; (81488 <Cl_alarms_scanforAlarms+0x520>)
   812da:	2220      	movs	r2, #32
   812dc:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   812de:	4b68      	ldr	r3, [pc, #416]	; (81480 <Cl_alarms_scanforAlarms+0x518>)
   812e0:	781b      	ldrb	r3, [r3, #0]
   812e2:	461a      	mov	r2, r3
   812e4:	4b66      	ldr	r3, [pc, #408]	; (81480 <Cl_alarms_scanforAlarms+0x518>)
   812e6:	4413      	add	r3, r2
   812e8:	222e      	movs	r2, #46	; 0x2e
   812ea:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   812ec:	4b67      	ldr	r3, [pc, #412]	; (8148c <Cl_alarms_scanforAlarms+0x524>)
   812ee:	4798      	blx	r3
   812f0:	4603      	mov	r3, r0
   812f2:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   812f4:	79fb      	ldrb	r3, [r7, #7]
   812f6:	2b00      	cmp	r3, #0
   812f8:	d006      	beq.n	81308 <Cl_alarms_scanforAlarms+0x3a0>
   812fa:	4b65      	ldr	r3, [pc, #404]	; (81490 <Cl_alarms_scanforAlarms+0x528>)
   812fc:	4798      	blx	r3
   812fe:	e003      	b.n	81308 <Cl_alarms_scanforAlarms+0x3a0>
		}
		else
		{
			Cl_alarms_alarms[ABD_EVENT].cl_alarmstate = CL_ALARM_INACTIVE;
   81300:	4b5d      	ldr	r3, [pc, #372]	; (81478 <Cl_alarms_scanforAlarms+0x510>)
   81302:	2204      	movs	r2, #4
   81304:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
		}
	
	}
	if(Cl_alarms_alarms[BD_EVENT].cl_is_enabled)
   81308:	4b5b      	ldr	r3, [pc, #364]	; (81478 <Cl_alarms_scanforAlarms+0x510>)
   8130a:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
   8130e:	2b00      	cmp	r3, #0
   81310:	d032      	beq.n	81378 <Cl_alarms_scanforAlarms+0x410>
	{
		
		if(cl_sys_statbuffer.bdstatus)
   81312:	4b5a      	ldr	r3, [pc, #360]	; (8147c <Cl_alarms_scanforAlarms+0x514>)
   81314:	8b5b      	ldrh	r3, [r3, #26]
   81316:	2b00      	cmp	r3, #0
   81318:	d02a      	beq.n	81370 <Cl_alarms_scanforAlarms+0x408>
		{

			Cl_alarms_alarms[BD_EVENT].cl_alarmstate = CL_ALARM_DETECTED;
   8131a:	4b57      	ldr	r3, [pc, #348]	; (81478 <Cl_alarms_scanforAlarms+0x510>)
   8131c:	2201      	movs	r2, #1
   8131e:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=BD_EVENT; 
   81322:	4b57      	ldr	r3, [pc, #348]	; (81480 <Cl_alarms_scanforAlarms+0x518>)
   81324:	781b      	ldrb	r3, [r3, #0]
   81326:	4a56      	ldr	r2, [pc, #344]	; (81480 <Cl_alarms_scanforAlarms+0x518>)
   81328:	3301      	adds	r3, #1
   8132a:	00db      	lsls	r3, r3, #3
   8132c:	4413      	add	r3, r2
   8132e:	2221      	movs	r2, #33	; 0x21
   81330:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[BD_EVENT].cl_detected_count++;
   81332:	4b51      	ldr	r3, [pc, #324]	; (81478 <Cl_alarms_scanforAlarms+0x510>)
   81334:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
   81338:	3301      	adds	r3, #1
   8133a:	b2da      	uxtb	r2, r3
   8133c:	4b4e      	ldr	r3, [pc, #312]	; (81478 <Cl_alarms_scanforAlarms+0x510>)
   8133e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
			cl_alarm_triggered = true;
   81342:	4b50      	ldr	r3, [pc, #320]	; (81484 <Cl_alarms_scanforAlarms+0x51c>)
   81344:	2201      	movs	r2, #1
   81346:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = BD_EVENT;
   81348:	4b4f      	ldr	r3, [pc, #316]	; (81488 <Cl_alarms_scanforAlarms+0x520>)
   8134a:	2221      	movs	r2, #33	; 0x21
   8134c:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8134e:	4b4c      	ldr	r3, [pc, #304]	; (81480 <Cl_alarms_scanforAlarms+0x518>)
   81350:	781b      	ldrb	r3, [r3, #0]
   81352:	461a      	mov	r2, r3
   81354:	4b4a      	ldr	r3, [pc, #296]	; (81480 <Cl_alarms_scanforAlarms+0x518>)
   81356:	4413      	add	r3, r2
   81358:	222e      	movs	r2, #46	; 0x2e
   8135a:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   8135c:	4b4b      	ldr	r3, [pc, #300]	; (8148c <Cl_alarms_scanforAlarms+0x524>)
   8135e:	4798      	blx	r3
   81360:	4603      	mov	r3, r0
   81362:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81364:	79fb      	ldrb	r3, [r7, #7]
   81366:	2b00      	cmp	r3, #0
   81368:	d006      	beq.n	81378 <Cl_alarms_scanforAlarms+0x410>
   8136a:	4b49      	ldr	r3, [pc, #292]	; (81490 <Cl_alarms_scanforAlarms+0x528>)
   8136c:	4798      	blx	r3
   8136e:	e003      	b.n	81378 <Cl_alarms_scanforAlarms+0x410>
		}
		else
		{
			Cl_alarms_alarms[BD_EVENT].cl_alarmstate = CL_ALARM_INACTIVE;
   81370:	4b41      	ldr	r3, [pc, #260]	; (81478 <Cl_alarms_scanforAlarms+0x510>)
   81372:	2204      	movs	r2, #4
   81374:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}
	}
	if(Cl_alarms_alarms[BLD_EVENT].cl_is_enabled)
   81378:	4b3f      	ldr	r3, [pc, #252]	; (81478 <Cl_alarms_scanforAlarms+0x510>)
   8137a:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
   8137e:	2b00      	cmp	r3, #0
   81380:	d033      	beq.n	813ea <Cl_alarms_scanforAlarms+0x482>
	{
				if(cl_sys_statbuffer.bldstatus)
   81382:	4b3e      	ldr	r3, [pc, #248]	; (8147c <Cl_alarms_scanforAlarms+0x514>)
   81384:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
   81388:	2b00      	cmp	r3, #0
   8138a:	d02a      	beq.n	813e2 <Cl_alarms_scanforAlarms+0x47a>
				{
					Cl_alarms_alarms[BLD_EVENT].cl_alarmstate = CL_ALARM_DETECTED;
   8138c:	4b3a      	ldr	r3, [pc, #232]	; (81478 <Cl_alarms_scanforAlarms+0x510>)
   8138e:	2201      	movs	r2, #1
   81390:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=BLD_EVENT; 
   81394:	4b3a      	ldr	r3, [pc, #232]	; (81480 <Cl_alarms_scanforAlarms+0x518>)
   81396:	781b      	ldrb	r3, [r3, #0]
   81398:	4a39      	ldr	r2, [pc, #228]	; (81480 <Cl_alarms_scanforAlarms+0x518>)
   8139a:	3301      	adds	r3, #1
   8139c:	00db      	lsls	r3, r3, #3
   8139e:	4413      	add	r3, r2
   813a0:	2222      	movs	r2, #34	; 0x22
   813a2:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[BLD_EVENT].cl_detected_count++;
   813a4:	4b34      	ldr	r3, [pc, #208]	; (81478 <Cl_alarms_scanforAlarms+0x510>)
   813a6:	f893 322d 	ldrb.w	r3, [r3, #557]	; 0x22d
   813aa:	3301      	adds	r3, #1
   813ac:	b2da      	uxtb	r2, r3
   813ae:	4b32      	ldr	r3, [pc, #200]	; (81478 <Cl_alarms_scanforAlarms+0x510>)
   813b0:	f883 222d 	strb.w	r2, [r3, #557]	; 0x22d
					cl_alarm_triggered = true;
   813b4:	4b33      	ldr	r3, [pc, #204]	; (81484 <Cl_alarms_scanforAlarms+0x51c>)
   813b6:	2201      	movs	r2, #1
   813b8:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = BLD_EVENT;
   813ba:	4b33      	ldr	r3, [pc, #204]	; (81488 <Cl_alarms_scanforAlarms+0x520>)
   813bc:	2222      	movs	r2, #34	; 0x22
   813be:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   813c0:	4b2f      	ldr	r3, [pc, #188]	; (81480 <Cl_alarms_scanforAlarms+0x518>)
   813c2:	781b      	ldrb	r3, [r3, #0]
   813c4:	461a      	mov	r2, r3
   813c6:	4b2e      	ldr	r3, [pc, #184]	; (81480 <Cl_alarms_scanforAlarms+0x518>)
   813c8:	4413      	add	r3, r2
   813ca:	222e      	movs	r2, #46	; 0x2e
   813cc:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   813ce:	4b2f      	ldr	r3, [pc, #188]	; (8148c <Cl_alarms_scanforAlarms+0x524>)
   813d0:	4798      	blx	r3
   813d2:	4603      	mov	r3, r0
   813d4:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   813d6:	79fb      	ldrb	r3, [r7, #7]
   813d8:	2b00      	cmp	r3, #0
   813da:	d006      	beq.n	813ea <Cl_alarms_scanforAlarms+0x482>
   813dc:	4b2c      	ldr	r3, [pc, #176]	; (81490 <Cl_alarms_scanforAlarms+0x528>)
   813de:	4798      	blx	r3
   813e0:	e003      	b.n	813ea <Cl_alarms_scanforAlarms+0x482>
				}
				else
				{

					Cl_alarms_alarms[BLD_EVENT].cl_alarmstate = CL_ALARM_INACTIVE;
   813e2:	4b25      	ldr	r3, [pc, #148]	; (81478 <Cl_alarms_scanforAlarms+0x510>)
   813e4:	2204      	movs	r2, #4
   813e6:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
					
				}
	}
		if(Cl_alarms_alarms[TMP_HIGH].cl_is_enabled)
   813ea:	4b23      	ldr	r3, [pc, #140]	; (81478 <Cl_alarms_scanforAlarms+0x510>)
   813ec:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
   813f0:	2b00      	cmp	r3, #0
   813f2:	d062      	beq.n	814ba <Cl_alarms_scanforAlarms+0x552>
		{
			
			if (Cl_alarms_alarms[TMP_HIGH].cl_alarmstate != CL_ALARM_DETECTED)
   813f4:	4b20      	ldr	r3, [pc, #128]	; (81478 <Cl_alarms_scanforAlarms+0x510>)
   813f6:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
   813fa:	2b01      	cmp	r3, #1
   813fc:	d054      	beq.n	814a8 <Cl_alarms_scanforAlarms+0x540>
			{
				if(tmpVal > Cl_alarmThresholdTable.tmp_high_threshold -1000) //Cl_alarms_alarms[TMP_HIGH].cl_upper - 1000)
   813fe:	4b25      	ldr	r3, [pc, #148]	; (81494 <Cl_alarms_scanforAlarms+0x52c>)
   81400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81402:	4b25      	ldr	r3, [pc, #148]	; (81498 <Cl_alarms_scanforAlarms+0x530>)
   81404:	4610      	mov	r0, r2
   81406:	4925      	ldr	r1, [pc, #148]	; (8149c <Cl_alarms_scanforAlarms+0x534>)
   81408:	4798      	blx	r3
   8140a:	4603      	mov	r3, r0
   8140c:	4619      	mov	r1, r3
   8140e:	4b24      	ldr	r3, [pc, #144]	; (814a0 <Cl_alarms_scanforAlarms+0x538>)
   81410:	681a      	ldr	r2, [r3, #0]
   81412:	4b24      	ldr	r3, [pc, #144]	; (814a4 <Cl_alarms_scanforAlarms+0x53c>)
   81414:	4608      	mov	r0, r1
   81416:	4611      	mov	r1, r2
   81418:	4798      	blx	r3
   8141a:	4603      	mov	r3, r0
   8141c:	2b00      	cmp	r3, #0
   8141e:	d100      	bne.n	81422 <Cl_alarms_scanforAlarms+0x4ba>
   81420:	e04b      	b.n	814ba <Cl_alarms_scanforAlarms+0x552>
					//Cl_Uint16Type temp_ps;
					//temp_ps=ps1;

					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1=",4);
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
					Cl_alarms_alarms[TMP_HIGH].cl_alarmstate = CL_ALARM_DETECTED;
   81422:	4b15      	ldr	r3, [pc, #84]	; (81478 <Cl_alarms_scanforAlarms+0x510>)
   81424:	2201      	movs	r2, #1
   81426:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=TMP_HIGH;
   8142a:	4b15      	ldr	r3, [pc, #84]	; (81480 <Cl_alarms_scanforAlarms+0x518>)
   8142c:	781b      	ldrb	r3, [r3, #0]
   8142e:	4a14      	ldr	r2, [pc, #80]	; (81480 <Cl_alarms_scanforAlarms+0x518>)
   81430:	3301      	adds	r3, #1
   81432:	00db      	lsls	r3, r3, #3
   81434:	4413      	add	r3, r2
   81436:	2241      	movs	r2, #65	; 0x41
   81438:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[TMP_HIGH].cl_detected_count++;
   8143a:	4b0f      	ldr	r3, [pc, #60]	; (81478 <Cl_alarms_scanforAlarms+0x510>)
   8143c:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
   81440:	3301      	adds	r3, #1
   81442:	b2da      	uxtb	r2, r3
   81444:	4b0c      	ldr	r3, [pc, #48]	; (81478 <Cl_alarms_scanforAlarms+0x510>)
   81446:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
					cl_alarm_triggered = true;
   8144a:	4b0e      	ldr	r3, [pc, #56]	; (81484 <Cl_alarms_scanforAlarms+0x51c>)
   8144c:	2201      	movs	r2, #1
   8144e:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = TMP_HIGH;
   81450:	4b0d      	ldr	r3, [pc, #52]	; (81488 <Cl_alarms_scanforAlarms+0x520>)
   81452:	2241      	movs	r2, #65	; 0x41
   81454:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81456:	4b0a      	ldr	r3, [pc, #40]	; (81480 <Cl_alarms_scanforAlarms+0x518>)
   81458:	781b      	ldrb	r3, [r3, #0]
   8145a:	461a      	mov	r2, r3
   8145c:	4b08      	ldr	r3, [pc, #32]	; (81480 <Cl_alarms_scanforAlarms+0x518>)
   8145e:	4413      	add	r3, r2
   81460:	222e      	movs	r2, #46	; 0x2e
   81462:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81464:	4b09      	ldr	r3, [pc, #36]	; (8148c <Cl_alarms_scanforAlarms+0x524>)
   81466:	4798      	blx	r3
   81468:	4603      	mov	r3, r0
   8146a:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   8146c:	79fb      	ldrb	r3, [r7, #7]
   8146e:	2b00      	cmp	r3, #0
   81470:	d023      	beq.n	814ba <Cl_alarms_scanforAlarms+0x552>
   81472:	4b07      	ldr	r3, [pc, #28]	; (81490 <Cl_alarms_scanforAlarms+0x528>)
   81474:	4798      	blx	r3
   81476:	e020      	b.n	814ba <Cl_alarms_scanforAlarms+0x552>
   81478:	20071e70 	.word	0x20071e70
   8147c:	200723d8 	.word	0x200723d8
   81480:	20072480 	.word	0x20072480
   81484:	20071909 	.word	0x20071909
   81488:	200722a4 	.word	0x200722a4
   8148c:	00082965 	.word	0x00082965
   81490:	00088b81 	.word	0x00088b81
   81494:	200722a8 	.word	0x200722a8
   81498:	000a80f1 	.word	0x000a80f1
   8149c:	447a0000 	.word	0x447a0000
   814a0:	2007190c 	.word	0x2007190c
   814a4:	000a8641 	.word	0x000a8641
				}
				
			}
			else if (Cl_alarms_alarms[TMP_HIGH].cl_alarmstate == CL_ALARM_DETECTED)
   814a8:	4b9b      	ldr	r3, [pc, #620]	; (81718 <Cl_alarms_scanforAlarms+0x7b0>)
   814aa:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
   814ae:	2b01      	cmp	r3, #1
   814b0:	d103      	bne.n	814ba <Cl_alarms_scanforAlarms+0x552>
			{
				Cl_alarms_alarms[TMP_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   814b2:	4b99      	ldr	r3, [pc, #612]	; (81718 <Cl_alarms_scanforAlarms+0x7b0>)
   814b4:	2204      	movs	r2, #4
   814b6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
			}
		}
	
		if(Cl_alarms_alarms[TMP_LOW].cl_is_enabled)
   814ba:	4b97      	ldr	r3, [pc, #604]	; (81718 <Cl_alarms_scanforAlarms+0x7b0>)
   814bc:	f893 342e 	ldrb.w	r3, [r3, #1070]	; 0x42e
   814c0:	2b00      	cmp	r3, #0
   814c2:	d04a      	beq.n	8155a <Cl_alarms_scanforAlarms+0x5f2>
		{
			
			if (Cl_alarms_alarms[TMP_LOW].cl_alarmstate != CL_ALARM_DETECTED)
   814c4:	4b94      	ldr	r3, [pc, #592]	; (81718 <Cl_alarms_scanforAlarms+0x7b0>)
   814c6:	f893 3422 	ldrb.w	r3, [r3, #1058]	; 0x422
   814ca:	2b01      	cmp	r3, #1
   814cc:	d03c      	beq.n	81548 <Cl_alarms_scanforAlarms+0x5e0>
			{
				if(tmpVal < Cl_alarmThresholdTable.tmp_low_threshold -1000)// Cl_alarms_alarms[TMP_LOW].cl_upper - 1000)
   814ce:	4b93      	ldr	r3, [pc, #588]	; (8171c <Cl_alarms_scanforAlarms+0x7b4>)
   814d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   814d2:	4b93      	ldr	r3, [pc, #588]	; (81720 <Cl_alarms_scanforAlarms+0x7b8>)
   814d4:	4610      	mov	r0, r2
   814d6:	4993      	ldr	r1, [pc, #588]	; (81724 <Cl_alarms_scanforAlarms+0x7bc>)
   814d8:	4798      	blx	r3
   814da:	4603      	mov	r3, r0
   814dc:	4619      	mov	r1, r3
   814de:	4b92      	ldr	r3, [pc, #584]	; (81728 <Cl_alarms_scanforAlarms+0x7c0>)
   814e0:	681a      	ldr	r2, [r3, #0]
   814e2:	4b92      	ldr	r3, [pc, #584]	; (8172c <Cl_alarms_scanforAlarms+0x7c4>)
   814e4:	4608      	mov	r0, r1
   814e6:	4611      	mov	r1, r2
   814e8:	4798      	blx	r3
   814ea:	4603      	mov	r3, r0
   814ec:	2b00      	cmp	r3, #0
   814ee:	d100      	bne.n	814f2 <Cl_alarms_scanforAlarms+0x58a>
   814f0:	e033      	b.n	8155a <Cl_alarms_scanforAlarms+0x5f2>
					//Cl_Uint16Type temp_ps;
					//temp_ps=ps1;

					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1=",4);
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
					Cl_alarms_alarms[TMP_LOW].cl_alarmstate = CL_ALARM_DETECTED;
   814f2:	4b89      	ldr	r3, [pc, #548]	; (81718 <Cl_alarms_scanforAlarms+0x7b0>)
   814f4:	2201      	movs	r2, #1
   814f6:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=TMP_LOW;
   814fa:	4b8d      	ldr	r3, [pc, #564]	; (81730 <Cl_alarms_scanforAlarms+0x7c8>)
   814fc:	781b      	ldrb	r3, [r3, #0]
   814fe:	4a8c      	ldr	r2, [pc, #560]	; (81730 <Cl_alarms_scanforAlarms+0x7c8>)
   81500:	3301      	adds	r3, #1
   81502:	00db      	lsls	r3, r3, #3
   81504:	4413      	add	r3, r2
   81506:	2242      	movs	r2, #66	; 0x42
   81508:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[TMP_LOW].cl_detected_count++;
   8150a:	4b83      	ldr	r3, [pc, #524]	; (81718 <Cl_alarms_scanforAlarms+0x7b0>)
   8150c:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
   81510:	3301      	adds	r3, #1
   81512:	b2da      	uxtb	r2, r3
   81514:	4b80      	ldr	r3, [pc, #512]	; (81718 <Cl_alarms_scanforAlarms+0x7b0>)
   81516:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
					cl_alarm_triggered = true;
   8151a:	4b86      	ldr	r3, [pc, #536]	; (81734 <Cl_alarms_scanforAlarms+0x7cc>)
   8151c:	2201      	movs	r2, #1
   8151e:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = TMP_LOW;
   81520:	4b85      	ldr	r3, [pc, #532]	; (81738 <Cl_alarms_scanforAlarms+0x7d0>)
   81522:	2242      	movs	r2, #66	; 0x42
   81524:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81526:	4b82      	ldr	r3, [pc, #520]	; (81730 <Cl_alarms_scanforAlarms+0x7c8>)
   81528:	781b      	ldrb	r3, [r3, #0]
   8152a:	461a      	mov	r2, r3
   8152c:	4b80      	ldr	r3, [pc, #512]	; (81730 <Cl_alarms_scanforAlarms+0x7c8>)
   8152e:	4413      	add	r3, r2
   81530:	222e      	movs	r2, #46	; 0x2e
   81532:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81534:	4b81      	ldr	r3, [pc, #516]	; (8173c <Cl_alarms_scanforAlarms+0x7d4>)
   81536:	4798      	blx	r3
   81538:	4603      	mov	r3, r0
   8153a:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   8153c:	79fb      	ldrb	r3, [r7, #7]
   8153e:	2b00      	cmp	r3, #0
   81540:	d00b      	beq.n	8155a <Cl_alarms_scanforAlarms+0x5f2>
   81542:	4b7f      	ldr	r3, [pc, #508]	; (81740 <Cl_alarms_scanforAlarms+0x7d8>)
   81544:	4798      	blx	r3
   81546:	e008      	b.n	8155a <Cl_alarms_scanforAlarms+0x5f2>
				}
				
			}
			else if (Cl_alarms_alarms[TMP_LOW].cl_alarmstate == CL_ALARM_DETECTED)
   81548:	4b73      	ldr	r3, [pc, #460]	; (81718 <Cl_alarms_scanforAlarms+0x7b0>)
   8154a:	f893 3422 	ldrb.w	r3, [r3, #1058]	; 0x422
   8154e:	2b01      	cmp	r3, #1
   81550:	d103      	bne.n	8155a <Cl_alarms_scanforAlarms+0x5f2>
			{
				Cl_alarms_alarms[TMP_LOW].cl_alarmstate = CL_ALARM_INACTIVE;
   81552:	4b71      	ldr	r3, [pc, #452]	; (81718 <Cl_alarms_scanforAlarms+0x7b0>)
   81554:	2204      	movs	r2, #4
   81556:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
			}
		}
		
	
	if(Cl_alarms_alarms[APTSTATUS_HIGH].cl_is_enabled)
   8155a:	4b6f      	ldr	r3, [pc, #444]	; (81718 <Cl_alarms_scanforAlarms+0x7b0>)
   8155c:	f893 324e 	ldrb.w	r3, [r3, #590]	; 0x24e
   81560:	2b00      	cmp	r3, #0
   81562:	d044      	beq.n	815ee <Cl_alarms_scanforAlarms+0x686>
	{
		
				if(apt > (Cl_alarmThresholdTable.apt_high_threshold - 1000))  // manav03 added -1000
   81564:	4b6d      	ldr	r3, [pc, #436]	; (8171c <Cl_alarms_scanforAlarms+0x7b4>)
   81566:	689a      	ldr	r2, [r3, #8]
   81568:	4b6d      	ldr	r3, [pc, #436]	; (81720 <Cl_alarms_scanforAlarms+0x7b8>)
   8156a:	4610      	mov	r0, r2
   8156c:	496d      	ldr	r1, [pc, #436]	; (81724 <Cl_alarms_scanforAlarms+0x7bc>)
   8156e:	4798      	blx	r3
   81570:	4603      	mov	r3, r0
   81572:	4619      	mov	r1, r3
   81574:	4b73      	ldr	r3, [pc, #460]	; (81744 <Cl_alarms_scanforAlarms+0x7dc>)
   81576:	681a      	ldr	r2, [r3, #0]
   81578:	4b73      	ldr	r3, [pc, #460]	; (81748 <Cl_alarms_scanforAlarms+0x7e0>)
   8157a:	4608      	mov	r0, r1
   8157c:	4611      	mov	r1, r2
   8157e:	4798      	blx	r3
   81580:	4603      	mov	r3, r0
   81582:	2b00      	cmp	r3, #0
   81584:	d02a      	beq.n	815dc <Cl_alarms_scanforAlarms+0x674>
				{

					Cl_alarms_alarms[APTSTATUS_HIGH].cl_alarmstate = CL_ALARM_DETECTED;
   81586:	4b64      	ldr	r3, [pc, #400]	; (81718 <Cl_alarms_scanforAlarms+0x7b0>)
   81588:	2201      	movs	r2, #1
   8158a:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=APTSTATUS_HIGH; 
   8158e:	4b68      	ldr	r3, [pc, #416]	; (81730 <Cl_alarms_scanforAlarms+0x7c8>)
   81590:	781b      	ldrb	r3, [r3, #0]
   81592:	4a67      	ldr	r2, [pc, #412]	; (81730 <Cl_alarms_scanforAlarms+0x7c8>)
   81594:	3301      	adds	r3, #1
   81596:	00db      	lsls	r3, r3, #3
   81598:	4413      	add	r3, r2
   8159a:	2224      	movs	r2, #36	; 0x24
   8159c:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[APTSTATUS_HIGH].cl_detected_count++;
   8159e:	4b5e      	ldr	r3, [pc, #376]	; (81718 <Cl_alarms_scanforAlarms+0x7b0>)
   815a0:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
   815a4:	3301      	adds	r3, #1
   815a6:	b2da      	uxtb	r2, r3
   815a8:	4b5b      	ldr	r3, [pc, #364]	; (81718 <Cl_alarms_scanforAlarms+0x7b0>)
   815aa:	f883 224d 	strb.w	r2, [r3, #589]	; 0x24d
					cl_alarm_triggered = true;
   815ae:	4b61      	ldr	r3, [pc, #388]	; (81734 <Cl_alarms_scanforAlarms+0x7cc>)
   815b0:	2201      	movs	r2, #1
   815b2:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = APTSTATUS_HIGH;
   815b4:	4b60      	ldr	r3, [pc, #384]	; (81738 <Cl_alarms_scanforAlarms+0x7d0>)
   815b6:	2224      	movs	r2, #36	; 0x24
   815b8:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   815ba:	4b5d      	ldr	r3, [pc, #372]	; (81730 <Cl_alarms_scanforAlarms+0x7c8>)
   815bc:	781b      	ldrb	r3, [r3, #0]
   815be:	461a      	mov	r2, r3
   815c0:	4b5b      	ldr	r3, [pc, #364]	; (81730 <Cl_alarms_scanforAlarms+0x7c8>)
   815c2:	4413      	add	r3, r2
   815c4:	222e      	movs	r2, #46	; 0x2e
   815c6:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   815c8:	4b5c      	ldr	r3, [pc, #368]	; (8173c <Cl_alarms_scanforAlarms+0x7d4>)
   815ca:	4798      	blx	r3
   815cc:	4603      	mov	r3, r0
   815ce:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   815d0:	79fb      	ldrb	r3, [r7, #7]
   815d2:	2b00      	cmp	r3, #0
   815d4:	d00b      	beq.n	815ee <Cl_alarms_scanforAlarms+0x686>
   815d6:	4b5a      	ldr	r3, [pc, #360]	; (81740 <Cl_alarms_scanforAlarms+0x7d8>)
   815d8:	4798      	blx	r3
   815da:	e008      	b.n	815ee <Cl_alarms_scanforAlarms+0x686>
					
				}
				else if (Cl_alarms_alarms[APTSTATUS_HIGH].cl_alarmstate == CL_ALARM_DETECTED)
   815dc:	4b4e      	ldr	r3, [pc, #312]	; (81718 <Cl_alarms_scanforAlarms+0x7b0>)
   815de:	f893 3242 	ldrb.w	r3, [r3, #578]	; 0x242
   815e2:	2b01      	cmp	r3, #1
   815e4:	d103      	bne.n	815ee <Cl_alarms_scanforAlarms+0x686>
				{
					Cl_alarms_alarms[APTSTATUS_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   815e6:	4b4c      	ldr	r3, [pc, #304]	; (81718 <Cl_alarms_scanforAlarms+0x7b0>)
   815e8:	2204      	movs	r2, #4
   815ea:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
				}
	}
	if(Cl_alarms_alarms[APTSTATUS_LOW].cl_is_enabled)
   815ee:	4b4a      	ldr	r3, [pc, #296]	; (81718 <Cl_alarms_scanforAlarms+0x7b0>)
   815f0:	f893 323e 	ldrb.w	r3, [r3, #574]	; 0x23e
   815f4:	2b00      	cmp	r3, #0
   815f6:	d044      	beq.n	81682 <Cl_alarms_scanforAlarms+0x71a>
	{
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_LOW",11);
		if(apt < (Cl_alarmThresholdTable.apt_low_threshold -1000)) // manav03 added -1000
   815f8:	4b48      	ldr	r3, [pc, #288]	; (8171c <Cl_alarms_scanforAlarms+0x7b4>)
   815fa:	68da      	ldr	r2, [r3, #12]
   815fc:	4b48      	ldr	r3, [pc, #288]	; (81720 <Cl_alarms_scanforAlarms+0x7b8>)
   815fe:	4610      	mov	r0, r2
   81600:	4948      	ldr	r1, [pc, #288]	; (81724 <Cl_alarms_scanforAlarms+0x7bc>)
   81602:	4798      	blx	r3
   81604:	4603      	mov	r3, r0
   81606:	4619      	mov	r1, r3
   81608:	4b4e      	ldr	r3, [pc, #312]	; (81744 <Cl_alarms_scanforAlarms+0x7dc>)
   8160a:	681a      	ldr	r2, [r3, #0]
   8160c:	4b47      	ldr	r3, [pc, #284]	; (8172c <Cl_alarms_scanforAlarms+0x7c4>)
   8160e:	4608      	mov	r0, r1
   81610:	4611      	mov	r1, r2
   81612:	4798      	blx	r3
   81614:	4603      	mov	r3, r0
   81616:	2b00      	cmp	r3, #0
   81618:	d02a      	beq.n	81670 <Cl_alarms_scanforAlarms+0x708>
		{

			Cl_alarms_alarms[APTSTATUS_LOW].cl_alarmstate = CL_ALARM_DETECTED;
   8161a:	4b3f      	ldr	r3, [pc, #252]	; (81718 <Cl_alarms_scanforAlarms+0x7b0>)
   8161c:	2201      	movs	r2, #1
   8161e:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=APTSTATUS_LOW;
   81622:	4b43      	ldr	r3, [pc, #268]	; (81730 <Cl_alarms_scanforAlarms+0x7c8>)
   81624:	781b      	ldrb	r3, [r3, #0]
   81626:	4a42      	ldr	r2, [pc, #264]	; (81730 <Cl_alarms_scanforAlarms+0x7c8>)
   81628:	3301      	adds	r3, #1
   8162a:	00db      	lsls	r3, r3, #3
   8162c:	4413      	add	r3, r2
   8162e:	2223      	movs	r2, #35	; 0x23
   81630:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[APTSTATUS_LOW].cl_detected_count++;
   81632:	4b39      	ldr	r3, [pc, #228]	; (81718 <Cl_alarms_scanforAlarms+0x7b0>)
   81634:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
   81638:	3301      	adds	r3, #1
   8163a:	b2da      	uxtb	r2, r3
   8163c:	4b36      	ldr	r3, [pc, #216]	; (81718 <Cl_alarms_scanforAlarms+0x7b0>)
   8163e:	f883 223d 	strb.w	r2, [r3, #573]	; 0x23d
			cl_alarm_triggered = true;
   81642:	4b3c      	ldr	r3, [pc, #240]	; (81734 <Cl_alarms_scanforAlarms+0x7cc>)
   81644:	2201      	movs	r2, #1
   81646:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = APTSTATUS_LOW;
   81648:	4b3b      	ldr	r3, [pc, #236]	; (81738 <Cl_alarms_scanforAlarms+0x7d0>)
   8164a:	2223      	movs	r2, #35	; 0x23
   8164c:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8164e:	4b38      	ldr	r3, [pc, #224]	; (81730 <Cl_alarms_scanforAlarms+0x7c8>)
   81650:	781b      	ldrb	r3, [r3, #0]
   81652:	461a      	mov	r2, r3
   81654:	4b36      	ldr	r3, [pc, #216]	; (81730 <Cl_alarms_scanforAlarms+0x7c8>)
   81656:	4413      	add	r3, r2
   81658:	222e      	movs	r2, #46	; 0x2e
   8165a:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   8165c:	4b37      	ldr	r3, [pc, #220]	; (8173c <Cl_alarms_scanforAlarms+0x7d4>)
   8165e:	4798      	blx	r3
   81660:	4603      	mov	r3, r0
   81662:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81664:	79fb      	ldrb	r3, [r7, #7]
   81666:	2b00      	cmp	r3, #0
   81668:	d00b      	beq.n	81682 <Cl_alarms_scanforAlarms+0x71a>
   8166a:	4b35      	ldr	r3, [pc, #212]	; (81740 <Cl_alarms_scanforAlarms+0x7d8>)
   8166c:	4798      	blx	r3
   8166e:	e008      	b.n	81682 <Cl_alarms_scanforAlarms+0x71a>
			
		}
		else if (Cl_alarms_alarms[APTSTATUS_LOW].cl_alarmstate == CL_ALARM_DETECTED)
   81670:	4b29      	ldr	r3, [pc, #164]	; (81718 <Cl_alarms_scanforAlarms+0x7b0>)
   81672:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
   81676:	2b01      	cmp	r3, #1
   81678:	d103      	bne.n	81682 <Cl_alarms_scanforAlarms+0x71a>
		{
			Cl_alarms_alarms[APTSTATUS_LOW].cl_alarmstate = CL_ALARM_INACTIVE;
   8167a:	4b27      	ldr	r3, [pc, #156]	; (81718 <Cl_alarms_scanforAlarms+0x7b0>)
   8167c:	2204      	movs	r2, #4
   8167e:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
		}
	}
	if(Cl_alarms_alarms[VPTSTATUS_HIGH].cl_is_enabled)
   81682:	4b25      	ldr	r3, [pc, #148]	; (81718 <Cl_alarms_scanforAlarms+0x7b0>)
   81684:	f893 326e 	ldrb.w	r3, [r3, #622]	; 0x26e
   81688:	2b00      	cmp	r3, #0
   8168a:	d06e      	beq.n	8176a <Cl_alarms_scanforAlarms+0x802>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPTHIGH",7);
   8168c:	2018      	movs	r0, #24
   8168e:	492f      	ldr	r1, [pc, #188]	; (8174c <Cl_alarms_scanforAlarms+0x7e4>)
   81690:	2207      	movs	r2, #7
   81692:	4b2f      	ldr	r3, [pc, #188]	; (81750 <Cl_alarms_scanforAlarms+0x7e8>)
   81694:	4798      	blx	r3
		ASSERT_ERROR(Cl_alarms_retcode);
   81696:	79fb      	ldrb	r3, [r7, #7]
   81698:	2b00      	cmp	r3, #0
   8169a:	d001      	beq.n	816a0 <Cl_alarms_scanforAlarms+0x738>
   8169c:	4b28      	ldr	r3, [pc, #160]	; (81740 <Cl_alarms_scanforAlarms+0x7d8>)
   8169e:	4798      	blx	r3
				if(vpt > (Cl_alarmThresholdTable.vpt_high_threshold - 1000 ))   // manav03 added -1000
   816a0:	4b1e      	ldr	r3, [pc, #120]	; (8171c <Cl_alarms_scanforAlarms+0x7b4>)
   816a2:	691a      	ldr	r2, [r3, #16]
   816a4:	4b1e      	ldr	r3, [pc, #120]	; (81720 <Cl_alarms_scanforAlarms+0x7b8>)
   816a6:	4610      	mov	r0, r2
   816a8:	491e      	ldr	r1, [pc, #120]	; (81724 <Cl_alarms_scanforAlarms+0x7bc>)
   816aa:	4798      	blx	r3
   816ac:	4603      	mov	r3, r0
   816ae:	4619      	mov	r1, r3
   816b0:	4b28      	ldr	r3, [pc, #160]	; (81754 <Cl_alarms_scanforAlarms+0x7ec>)
   816b2:	681a      	ldr	r2, [r3, #0]
   816b4:	4b24      	ldr	r3, [pc, #144]	; (81748 <Cl_alarms_scanforAlarms+0x7e0>)
   816b6:	4608      	mov	r0, r1
   816b8:	4611      	mov	r1, r2
   816ba:	4798      	blx	r3
   816bc:	4603      	mov	r3, r0
   816be:	2b00      	cmp	r3, #0
   816c0:	d04a      	beq.n	81758 <Cl_alarms_scanforAlarms+0x7f0>
				{

						Cl_alarms_alarms[VPTSTATUS_HIGH].cl_alarmstate = CL_ALARM_DETECTED;
   816c2:	4b15      	ldr	r3, [pc, #84]	; (81718 <Cl_alarms_scanforAlarms+0x7b0>)
   816c4:	2201      	movs	r2, #1
   816c6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
						Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=VPTSTATUS_HIGH; 
   816ca:	4b19      	ldr	r3, [pc, #100]	; (81730 <Cl_alarms_scanforAlarms+0x7c8>)
   816cc:	781b      	ldrb	r3, [r3, #0]
   816ce:	4a18      	ldr	r2, [pc, #96]	; (81730 <Cl_alarms_scanforAlarms+0x7c8>)
   816d0:	3301      	adds	r3, #1
   816d2:	00db      	lsls	r3, r3, #3
   816d4:	4413      	add	r3, r2
   816d6:	2226      	movs	r2, #38	; 0x26
   816d8:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[VPTSTATUS_HIGH].cl_detected_count++;
   816da:	4b0f      	ldr	r3, [pc, #60]	; (81718 <Cl_alarms_scanforAlarms+0x7b0>)
   816dc:	f893 326d 	ldrb.w	r3, [r3, #621]	; 0x26d
   816e0:	3301      	adds	r3, #1
   816e2:	b2da      	uxtb	r2, r3
   816e4:	4b0c      	ldr	r3, [pc, #48]	; (81718 <Cl_alarms_scanforAlarms+0x7b0>)
   816e6:	f883 226d 	strb.w	r2, [r3, #621]	; 0x26d
						cl_alarm_triggered = true;
   816ea:	4b12      	ldr	r3, [pc, #72]	; (81734 <Cl_alarms_scanforAlarms+0x7cc>)
   816ec:	2201      	movs	r2, #1
   816ee:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = VPTSTATUS_HIGH;
   816f0:	4b11      	ldr	r3, [pc, #68]	; (81738 <Cl_alarms_scanforAlarms+0x7d0>)
   816f2:	2226      	movs	r2, #38	; 0x26
   816f4:	701a      	strb	r2, [r3, #0]
						Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   816f6:	4b0e      	ldr	r3, [pc, #56]	; (81730 <Cl_alarms_scanforAlarms+0x7c8>)
   816f8:	781b      	ldrb	r3, [r3, #0]
   816fa:	461a      	mov	r2, r3
   816fc:	4b0c      	ldr	r3, [pc, #48]	; (81730 <Cl_alarms_scanforAlarms+0x7c8>)
   816fe:	4413      	add	r3, r2
   81700:	222e      	movs	r2, #46	; 0x2e
   81702:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81704:	4b0d      	ldr	r3, [pc, #52]	; (8173c <Cl_alarms_scanforAlarms+0x7d4>)
   81706:	4798      	blx	r3
   81708:	4603      	mov	r3, r0
   8170a:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   8170c:	79fb      	ldrb	r3, [r7, #7]
   8170e:	2b00      	cmp	r3, #0
   81710:	d02b      	beq.n	8176a <Cl_alarms_scanforAlarms+0x802>
   81712:	4b0b      	ldr	r3, [pc, #44]	; (81740 <Cl_alarms_scanforAlarms+0x7d8>)
   81714:	4798      	blx	r3
   81716:	e028      	b.n	8176a <Cl_alarms_scanforAlarms+0x802>
   81718:	20071e70 	.word	0x20071e70
   8171c:	200722a8 	.word	0x200722a8
   81720:	000a80f1 	.word	0x000a80f1
   81724:	447a0000 	.word	0x447a0000
   81728:	2007190c 	.word	0x2007190c
   8172c:	000a867d 	.word	0x000a867d
   81730:	20072480 	.word	0x20072480
   81734:	20071909 	.word	0x20071909
   81738:	200722a4 	.word	0x200722a4
   8173c:	00082965 	.word	0x00082965
   81740:	00088b81 	.word	0x00088b81
   81744:	200722a0 	.word	0x200722a0
   81748:	000a8641 	.word	0x000a8641
   8174c:	000aa210 	.word	0x000aa210
   81750:	0009d1e9 	.word	0x0009d1e9
   81754:	20071910 	.word	0x20071910
					
				}
				else if (Cl_alarms_alarms[VPTSTATUS_HIGH].cl_alarmstate == CL_ALARM_DETECTED)
   81758:	4b96      	ldr	r3, [pc, #600]	; (819b4 <Cl_alarms_scanforAlarms+0xa4c>)
   8175a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
   8175e:	2b01      	cmp	r3, #1
   81760:	d103      	bne.n	8176a <Cl_alarms_scanforAlarms+0x802>
				{
					Cl_alarms_alarms[VPTSTATUS_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   81762:	4b94      	ldr	r3, [pc, #592]	; (819b4 <Cl_alarms_scanforAlarms+0xa4c>)
   81764:	2204      	movs	r2, #4
   81766:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
				}
	}

	if(Cl_alarms_alarms[VPTSTATUS_LOW].cl_is_enabled)
   8176a:	4b92      	ldr	r3, [pc, #584]	; (819b4 <Cl_alarms_scanforAlarms+0xa4c>)
   8176c:	f893 325e 	ldrb.w	r3, [r3, #606]	; 0x25e
   81770:	2b00      	cmp	r3, #0
   81772:	d044      	beq.n	817fe <Cl_alarms_scanforAlarms+0x896>
	{
		
		if(vpt < (Cl_alarmThresholdTable.vpt_low_threshold - 1000)) // manav03 added -1000
   81774:	4b90      	ldr	r3, [pc, #576]	; (819b8 <Cl_alarms_scanforAlarms+0xa50>)
   81776:	695a      	ldr	r2, [r3, #20]
   81778:	4b90      	ldr	r3, [pc, #576]	; (819bc <Cl_alarms_scanforAlarms+0xa54>)
   8177a:	4610      	mov	r0, r2
   8177c:	4990      	ldr	r1, [pc, #576]	; (819c0 <Cl_alarms_scanforAlarms+0xa58>)
   8177e:	4798      	blx	r3
   81780:	4603      	mov	r3, r0
   81782:	4619      	mov	r1, r3
   81784:	4b8f      	ldr	r3, [pc, #572]	; (819c4 <Cl_alarms_scanforAlarms+0xa5c>)
   81786:	681a      	ldr	r2, [r3, #0]
   81788:	4b8f      	ldr	r3, [pc, #572]	; (819c8 <Cl_alarms_scanforAlarms+0xa60>)
   8178a:	4608      	mov	r0, r1
   8178c:	4611      	mov	r1, r2
   8178e:	4798      	blx	r3
   81790:	4603      	mov	r3, r0
   81792:	2b00      	cmp	r3, #0
   81794:	d02a      	beq.n	817ec <Cl_alarms_scanforAlarms+0x884>
		{
			Cl_alarms_alarms[VPTSTATUS_LOW].cl_alarmstate = CL_ALARM_DETECTED;
   81796:	4b87      	ldr	r3, [pc, #540]	; (819b4 <Cl_alarms_scanforAlarms+0xa4c>)
   81798:	2201      	movs	r2, #1
   8179a:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=VPTSTATUS_LOW;
   8179e:	4b8b      	ldr	r3, [pc, #556]	; (819cc <Cl_alarms_scanforAlarms+0xa64>)
   817a0:	781b      	ldrb	r3, [r3, #0]
   817a2:	4a8a      	ldr	r2, [pc, #552]	; (819cc <Cl_alarms_scanforAlarms+0xa64>)
   817a4:	3301      	adds	r3, #1
   817a6:	00db      	lsls	r3, r3, #3
   817a8:	4413      	add	r3, r2
   817aa:	2225      	movs	r2, #37	; 0x25
   817ac:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[VPTSTATUS_LOW].cl_detected_count++;
   817ae:	4b81      	ldr	r3, [pc, #516]	; (819b4 <Cl_alarms_scanforAlarms+0xa4c>)
   817b0:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
   817b4:	3301      	adds	r3, #1
   817b6:	b2da      	uxtb	r2, r3
   817b8:	4b7e      	ldr	r3, [pc, #504]	; (819b4 <Cl_alarms_scanforAlarms+0xa4c>)
   817ba:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
			cl_alarm_triggered = true;
   817be:	4b84      	ldr	r3, [pc, #528]	; (819d0 <Cl_alarms_scanforAlarms+0xa68>)
   817c0:	2201      	movs	r2, #1
   817c2:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = VPTSTATUS_HIGH;
   817c4:	4b83      	ldr	r3, [pc, #524]	; (819d4 <Cl_alarms_scanforAlarms+0xa6c>)
   817c6:	2226      	movs	r2, #38	; 0x26
   817c8:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   817ca:	4b80      	ldr	r3, [pc, #512]	; (819cc <Cl_alarms_scanforAlarms+0xa64>)
   817cc:	781b      	ldrb	r3, [r3, #0]
   817ce:	461a      	mov	r2, r3
   817d0:	4b7e      	ldr	r3, [pc, #504]	; (819cc <Cl_alarms_scanforAlarms+0xa64>)
   817d2:	4413      	add	r3, r2
   817d4:	222e      	movs	r2, #46	; 0x2e
   817d6:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   817d8:	4b7f      	ldr	r3, [pc, #508]	; (819d8 <Cl_alarms_scanforAlarms+0xa70>)
   817da:	4798      	blx	r3
   817dc:	4603      	mov	r3, r0
   817de:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   817e0:	79fb      	ldrb	r3, [r7, #7]
   817e2:	2b00      	cmp	r3, #0
   817e4:	d00b      	beq.n	817fe <Cl_alarms_scanforAlarms+0x896>
   817e6:	4b7d      	ldr	r3, [pc, #500]	; (819dc <Cl_alarms_scanforAlarms+0xa74>)
   817e8:	4798      	blx	r3
   817ea:	e008      	b.n	817fe <Cl_alarms_scanforAlarms+0x896>
			
		}
		else if (Cl_alarms_alarms[VPTSTATUS_LOW].cl_alarmstate == CL_ALARM_DETECTED)
   817ec:	4b71      	ldr	r3, [pc, #452]	; (819b4 <Cl_alarms_scanforAlarms+0xa4c>)
   817ee:	f893 3252 	ldrb.w	r3, [r3, #594]	; 0x252
   817f2:	2b01      	cmp	r3, #1
   817f4:	d103      	bne.n	817fe <Cl_alarms_scanforAlarms+0x896>
		{
			Cl_alarms_alarms[VPTSTATUS_LOW].cl_alarmstate = CL_ALARM_INACTIVE;
   817f6:	4b6f      	ldr	r3, [pc, #444]	; (819b4 <Cl_alarms_scanforAlarms+0xa4c>)
   817f8:	2204      	movs	r2, #4
   817fa:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
		}
	}
	

	if(Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_is_enabled)
   817fe:	4b6d      	ldr	r3, [pc, #436]	; (819b4 <Cl_alarms_scanforAlarms+0xa4c>)
   81800:	7f9b      	ldrb	r3, [r3, #30]
   81802:	2b00      	cmp	r3, #0
   81804:	d042      	beq.n	8188c <Cl_alarms_scanforAlarms+0x924>
	{
		
		
				if(((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bloodpumpdoor )) || ((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bloodpumpdoor )) )
   81806:	4b6b      	ldr	r3, [pc, #428]	; (819b4 <Cl_alarms_scanforAlarms+0xa4c>)
   81808:	7c5b      	ldrb	r3, [r3, #17]
   8180a:	2b01      	cmp	r3, #1
   8180c:	d103      	bne.n	81816 <Cl_alarms_scanforAlarms+0x8ae>
   8180e:	4b74      	ldr	r3, [pc, #464]	; (819e0 <Cl_alarms_scanforAlarms+0xa78>)
   81810:	781b      	ldrb	r3, [r3, #0]
   81812:	2b00      	cmp	r3, #0
   81814:	d10a      	bne.n	8182c <Cl_alarms_scanforAlarms+0x8c4>
   81816:	4b67      	ldr	r3, [pc, #412]	; (819b4 <Cl_alarms_scanforAlarms+0xa4c>)
   81818:	7c5b      	ldrb	r3, [r3, #17]
   8181a:	2b00      	cmp	r3, #0
   8181c:	d133      	bne.n	81886 <Cl_alarms_scanforAlarms+0x91e>
   8181e:	4b70      	ldr	r3, [pc, #448]	; (819e0 <Cl_alarms_scanforAlarms+0xa78>)
   81820:	781b      	ldrb	r3, [r3, #0]
   81822:	f083 0301 	eor.w	r3, r3, #1
   81826:	b2db      	uxtb	r3, r3
   81828:	2b00      	cmp	r3, #0
   8182a:	d02c      	beq.n	81886 <Cl_alarms_scanforAlarms+0x91e>
				{
					if(Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   8182c:	4b61      	ldr	r3, [pc, #388]	; (819b4 <Cl_alarms_scanforAlarms+0xa4c>)
   8182e:	7c9b      	ldrb	r3, [r3, #18]
   81830:	2b01      	cmp	r3, #1
   81832:	d027      	beq.n	81884 <Cl_alarms_scanforAlarms+0x91c>
					{
						
						
					Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   81834:	4b5f      	ldr	r3, [pc, #380]	; (819b4 <Cl_alarms_scanforAlarms+0xa4c>)
   81836:	2201      	movs	r2, #1
   81838:	749a      	strb	r2, [r3, #18]
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=BLOODDOOR_STATUS_OPEN; 
   8183a:	4b64      	ldr	r3, [pc, #400]	; (819cc <Cl_alarms_scanforAlarms+0xa64>)
   8183c:	781b      	ldrb	r3, [r3, #0]
   8183e:	4a63      	ldr	r2, [pc, #396]	; (819cc <Cl_alarms_scanforAlarms+0xa64>)
   81840:	3301      	adds	r3, #1
   81842:	00db      	lsls	r3, r3, #3
   81844:	4413      	add	r3, r2
   81846:	2201      	movs	r2, #1
   81848:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_detected_count++;
   8184a:	4b5a      	ldr	r3, [pc, #360]	; (819b4 <Cl_alarms_scanforAlarms+0xa4c>)
   8184c:	7f5b      	ldrb	r3, [r3, #29]
   8184e:	3301      	adds	r3, #1
   81850:	b2da      	uxtb	r2, r3
   81852:	4b58      	ldr	r3, [pc, #352]	; (819b4 <Cl_alarms_scanforAlarms+0xa4c>)
   81854:	775a      	strb	r2, [r3, #29]
					cl_alarm_triggered = true;
   81856:	4b5e      	ldr	r3, [pc, #376]	; (819d0 <Cl_alarms_scanforAlarms+0xa68>)
   81858:	2201      	movs	r2, #1
   8185a:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = BLOODDOOR_STATUS_OPEN;
   8185c:	4b5d      	ldr	r3, [pc, #372]	; (819d4 <Cl_alarms_scanforAlarms+0xa6c>)
   8185e:	2201      	movs	r2, #1
   81860:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81862:	4b5a      	ldr	r3, [pc, #360]	; (819cc <Cl_alarms_scanforAlarms+0xa64>)
   81864:	781b      	ldrb	r3, [r3, #0]
   81866:	461a      	mov	r2, r3
   81868:	4b58      	ldr	r3, [pc, #352]	; (819cc <Cl_alarms_scanforAlarms+0xa64>)
   8186a:	4413      	add	r3, r2
   8186c:	222e      	movs	r2, #46	; 0x2e
   8186e:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81870:	4b59      	ldr	r3, [pc, #356]	; (819d8 <Cl_alarms_scanforAlarms+0xa70>)
   81872:	4798      	blx	r3
   81874:	4603      	mov	r3, r0
   81876:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   81878:	79fb      	ldrb	r3, [r7, #7]
   8187a:	2b00      	cmp	r3, #0
   8187c:	d002      	beq.n	81884 <Cl_alarms_scanforAlarms+0x91c>
   8187e:	4b57      	ldr	r3, [pc, #348]	; (819dc <Cl_alarms_scanforAlarms+0xa74>)
   81880:	4798      	blx	r3
	{
		
		
				if(((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bloodpumpdoor )) || ((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bloodpumpdoor )) )
				{
					if(Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   81882:	e003      	b.n	8188c <Cl_alarms_scanforAlarms+0x924>
   81884:	e002      	b.n	8188c <Cl_alarms_scanforAlarms+0x924>

				}
				else
				{

					Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   81886:	4b4b      	ldr	r3, [pc, #300]	; (819b4 <Cl_alarms_scanforAlarms+0xa4c>)
   81888:	2204      	movs	r2, #4
   8188a:	749a      	strb	r2, [r3, #18]
				}
				
		
	
	}
	if(Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_is_enabled)
   8188c:	4b49      	ldr	r3, [pc, #292]	; (819b4 <Cl_alarms_scanforAlarms+0xa4c>)
   8188e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   81892:	2b00      	cmp	r3, #0
   81894:	d046      	beq.n	81924 <Cl_alarms_scanforAlarms+0x9bc>
	{
				if(((Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder1status )) || ((Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder1status )) )
   81896:	4b47      	ldr	r3, [pc, #284]	; (819b4 <Cl_alarms_scanforAlarms+0xa4c>)
   81898:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   8189c:	2b01      	cmp	r3, #1
   8189e:	d104      	bne.n	818aa <Cl_alarms_scanforAlarms+0x942>
   818a0:	4b4f      	ldr	r3, [pc, #316]	; (819e0 <Cl_alarms_scanforAlarms+0xa78>)
   818a2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   818a6:	2b00      	cmp	r3, #0
   818a8:	d10c      	bne.n	818c4 <Cl_alarms_scanforAlarms+0x95c>
   818aa:	4b42      	ldr	r3, [pc, #264]	; (819b4 <Cl_alarms_scanforAlarms+0xa4c>)
   818ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   818b0:	2b00      	cmp	r3, #0
   818b2:	d133      	bne.n	8191c <Cl_alarms_scanforAlarms+0x9b4>
   818b4:	4b4a      	ldr	r3, [pc, #296]	; (819e0 <Cl_alarms_scanforAlarms+0xa78>)
   818b6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   818ba:	f083 0301 	eor.w	r3, r3, #1
   818be:	b2db      	uxtb	r3, r3
   818c0:	2b00      	cmp	r3, #0
   818c2:	d02b      	beq.n	8191c <Cl_alarms_scanforAlarms+0x9b4>
				{
					Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   818c4:	4b3b      	ldr	r3, [pc, #236]	; (819b4 <Cl_alarms_scanforAlarms+0xa4c>)
   818c6:	2201      	movs	r2, #1
   818c8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=HOLDER1STATUS_OPEN; 
   818cc:	4b3f      	ldr	r3, [pc, #252]	; (819cc <Cl_alarms_scanforAlarms+0xa64>)
   818ce:	781b      	ldrb	r3, [r3, #0]
   818d0:	4a3e      	ldr	r2, [pc, #248]	; (819cc <Cl_alarms_scanforAlarms+0xa64>)
   818d2:	3301      	adds	r3, #1
   818d4:	00db      	lsls	r3, r3, #3
   818d6:	4413      	add	r3, r2
   818d8:	2203      	movs	r2, #3
   818da:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_detected_count++;
   818dc:	4b35      	ldr	r3, [pc, #212]	; (819b4 <Cl_alarms_scanforAlarms+0xa4c>)
   818de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   818e2:	3301      	adds	r3, #1
   818e4:	b2da      	uxtb	r2, r3
   818e6:	4b33      	ldr	r3, [pc, #204]	; (819b4 <Cl_alarms_scanforAlarms+0xa4c>)
   818e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					cl_alarm_triggered = true;
   818ec:	4b38      	ldr	r3, [pc, #224]	; (819d0 <Cl_alarms_scanforAlarms+0xa68>)
   818ee:	2201      	movs	r2, #1
   818f0:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = HOLDER1STATUS_OPEN;
   818f2:	4b38      	ldr	r3, [pc, #224]	; (819d4 <Cl_alarms_scanforAlarms+0xa6c>)
   818f4:	2203      	movs	r2, #3
   818f6:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   818f8:	4b34      	ldr	r3, [pc, #208]	; (819cc <Cl_alarms_scanforAlarms+0xa64>)
   818fa:	781b      	ldrb	r3, [r3, #0]
   818fc:	461a      	mov	r2, r3
   818fe:	4b33      	ldr	r3, [pc, #204]	; (819cc <Cl_alarms_scanforAlarms+0xa64>)
   81900:	4413      	add	r3, r2
   81902:	222e      	movs	r2, #46	; 0x2e
   81904:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81906:	4b34      	ldr	r3, [pc, #208]	; (819d8 <Cl_alarms_scanforAlarms+0xa70>)
   81908:	4798      	blx	r3
   8190a:	4603      	mov	r3, r0
   8190c:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   8190e:	79fb      	ldrb	r3, [r7, #7]
   81910:	2b00      	cmp	r3, #0
   81912:	d002      	beq.n	8191a <Cl_alarms_scanforAlarms+0x9b2>
   81914:	4b31      	ldr	r3, [pc, #196]	; (819dc <Cl_alarms_scanforAlarms+0xa74>)
   81916:	4798      	blx	r3
   81918:	e004      	b.n	81924 <Cl_alarms_scanforAlarms+0x9bc>
   8191a:	e003      	b.n	81924 <Cl_alarms_scanforAlarms+0x9bc>
				}
				else
				{

					Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;				
   8191c:	4b25      	ldr	r3, [pc, #148]	; (819b4 <Cl_alarms_scanforAlarms+0xa4c>)
   8191e:	2204      	movs	r2, #4
   81920:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		
				}
					
	}
	
	if(Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_is_enabled)
   81924:	4b23      	ldr	r3, [pc, #140]	; (819b4 <Cl_alarms_scanforAlarms+0xa4c>)
   81926:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
   8192a:	2b00      	cmp	r3, #0
   8192c:	d05e      	beq.n	819ec <Cl_alarms_scanforAlarms+0xa84>
	{
		
		
		if(((Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder1status )) || ((Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder1status )) )
   8192e:	4b21      	ldr	r3, [pc, #132]	; (819b4 <Cl_alarms_scanforAlarms+0xa4c>)
   81930:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   81934:	2b01      	cmp	r3, #1
   81936:	d104      	bne.n	81942 <Cl_alarms_scanforAlarms+0x9da>
   81938:	4b29      	ldr	r3, [pc, #164]	; (819e0 <Cl_alarms_scanforAlarms+0xa78>)
   8193a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   8193e:	2b00      	cmp	r3, #0
   81940:	d10c      	bne.n	8195c <Cl_alarms_scanforAlarms+0x9f4>
   81942:	4b1c      	ldr	r3, [pc, #112]	; (819b4 <Cl_alarms_scanforAlarms+0xa4c>)
   81944:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   81948:	2b00      	cmp	r3, #0
   8194a:	d14b      	bne.n	819e4 <Cl_alarms_scanforAlarms+0xa7c>
   8194c:	4b24      	ldr	r3, [pc, #144]	; (819e0 <Cl_alarms_scanforAlarms+0xa78>)
   8194e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   81952:	f083 0301 	eor.w	r3, r3, #1
   81956:	b2db      	uxtb	r3, r3
   81958:	2b00      	cmp	r3, #0
   8195a:	d043      	beq.n	819e4 <Cl_alarms_scanforAlarms+0xa7c>
		{
			Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_alarmstate = CL_ALARM_DETECTED;
   8195c:	4b15      	ldr	r3, [pc, #84]	; (819b4 <Cl_alarms_scanforAlarms+0xa4c>)
   8195e:	2201      	movs	r2, #1
   81960:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=HOLDER1STATUS_OPEN;
   81964:	4b19      	ldr	r3, [pc, #100]	; (819cc <Cl_alarms_scanforAlarms+0xa64>)
   81966:	781b      	ldrb	r3, [r3, #0]
   81968:	4a18      	ldr	r2, [pc, #96]	; (819cc <Cl_alarms_scanforAlarms+0xa64>)
   8196a:	3301      	adds	r3, #1
   8196c:	00db      	lsls	r3, r3, #3
   8196e:	4413      	add	r3, r2
   81970:	2203      	movs	r2, #3
   81972:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_detected_count++;
   81974:	4b0f      	ldr	r3, [pc, #60]	; (819b4 <Cl_alarms_scanforAlarms+0xa4c>)
   81976:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   8197a:	3301      	adds	r3, #1
   8197c:	b2da      	uxtb	r2, r3
   8197e:	4b0d      	ldr	r3, [pc, #52]	; (819b4 <Cl_alarms_scanforAlarms+0xa4c>)
   81980:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			cl_alarm_triggered = true;
   81984:	4b12      	ldr	r3, [pc, #72]	; (819d0 <Cl_alarms_scanforAlarms+0xa68>)
   81986:	2201      	movs	r2, #1
   81988:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = HOLDER1STATUS_CLOSED;
   8198a:	4b12      	ldr	r3, [pc, #72]	; (819d4 <Cl_alarms_scanforAlarms+0xa6c>)
   8198c:	2205      	movs	r2, #5
   8198e:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81990:	4b0e      	ldr	r3, [pc, #56]	; (819cc <Cl_alarms_scanforAlarms+0xa64>)
   81992:	781b      	ldrb	r3, [r3, #0]
   81994:	461a      	mov	r2, r3
   81996:	4b0d      	ldr	r3, [pc, #52]	; (819cc <Cl_alarms_scanforAlarms+0xa64>)
   81998:	4413      	add	r3, r2
   8199a:	222e      	movs	r2, #46	; 0x2e
   8199c:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   8199e:	4b0e      	ldr	r3, [pc, #56]	; (819d8 <Cl_alarms_scanforAlarms+0xa70>)
   819a0:	4798      	blx	r3
   819a2:	4603      	mov	r3, r0
   819a4:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   819a6:	79fb      	ldrb	r3, [r7, #7]
   819a8:	2b00      	cmp	r3, #0
   819aa:	d002      	beq.n	819b2 <Cl_alarms_scanforAlarms+0xa4a>
   819ac:	4b0b      	ldr	r3, [pc, #44]	; (819dc <Cl_alarms_scanforAlarms+0xa74>)
   819ae:	4798      	blx	r3
   819b0:	e01c      	b.n	819ec <Cl_alarms_scanforAlarms+0xa84>
   819b2:	e01b      	b.n	819ec <Cl_alarms_scanforAlarms+0xa84>
   819b4:	20071e70 	.word	0x20071e70
   819b8:	200722a8 	.word	0x200722a8
   819bc:	000a80f1 	.word	0x000a80f1
   819c0:	447a0000 	.word	0x447a0000
   819c4:	20071910 	.word	0x20071910
   819c8:	000a867d 	.word	0x000a867d
   819cc:	20072480 	.word	0x20072480
   819d0:	20071909 	.word	0x20071909
   819d4:	200722a4 	.word	0x200722a4
   819d8:	00082965 	.word	0x00082965
   819dc:	00088b81 	.word	0x00088b81
   819e0:	200723d8 	.word	0x200723d8
		}
		else
		{

			Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_alarmstate = CL_ALARM_INACTIVE;
   819e4:	4ba6      	ldr	r3, [pc, #664]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   819e6:	2204      	movs	r2, #4
   819e8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		}
		
	}
	
	
if(Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_is_enabled)
   819ec:	4ba4      	ldr	r3, [pc, #656]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   819ee:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   819f2:	2b00      	cmp	r3, #0
   819f4:	d046      	beq.n	81a84 <Cl_alarms_scanforAlarms+0xb1c>
{
			
		if(((Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder2status )) || ((Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder2status )) )
   819f6:	4ba2      	ldr	r3, [pc, #648]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   819f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   819fc:	2b01      	cmp	r3, #1
   819fe:	d104      	bne.n	81a0a <Cl_alarms_scanforAlarms+0xaa2>
   81a00:	4ba0      	ldr	r3, [pc, #640]	; (81c84 <Cl_alarms_scanforAlarms+0xd1c>)
   81a02:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
   81a06:	2b00      	cmp	r3, #0
   81a08:	d10c      	bne.n	81a24 <Cl_alarms_scanforAlarms+0xabc>
   81a0a:	4b9d      	ldr	r3, [pc, #628]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81a10:	2b00      	cmp	r3, #0
   81a12:	d133      	bne.n	81a7c <Cl_alarms_scanforAlarms+0xb14>
   81a14:	4b9b      	ldr	r3, [pc, #620]	; (81c84 <Cl_alarms_scanforAlarms+0xd1c>)
   81a16:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
   81a1a:	f083 0301 	eor.w	r3, r3, #1
   81a1e:	b2db      	uxtb	r3, r3
   81a20:	2b00      	cmp	r3, #0
   81a22:	d02b      	beq.n	81a7c <Cl_alarms_scanforAlarms+0xb14>
				
			{
				Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   81a24:	4b96      	ldr	r3, [pc, #600]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81a26:	2201      	movs	r2, #1
   81a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
				Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=HOLDER2STATUS_OPEN;
   81a2c:	4b96      	ldr	r3, [pc, #600]	; (81c88 <Cl_alarms_scanforAlarms+0xd20>)
   81a2e:	781b      	ldrb	r3, [r3, #0]
   81a30:	4a95      	ldr	r2, [pc, #596]	; (81c88 <Cl_alarms_scanforAlarms+0xd20>)
   81a32:	3301      	adds	r3, #1
   81a34:	00db      	lsls	r3, r3, #3
   81a36:	4413      	add	r3, r2
   81a38:	2204      	movs	r2, #4
   81a3a:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_detected_count++;
   81a3c:	4b90      	ldr	r3, [pc, #576]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81a3e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
   81a42:	3301      	adds	r3, #1
   81a44:	b2da      	uxtb	r2, r3
   81a46:	4b8e      	ldr	r3, [pc, #568]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81a48:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				cl_alarm_triggered = true;
   81a4c:	4b8f      	ldr	r3, [pc, #572]	; (81c8c <Cl_alarms_scanforAlarms+0xd24>)
   81a4e:	2201      	movs	r2, #1
   81a50:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = HOLDER2STATUS_OPEN;
   81a52:	4b8f      	ldr	r3, [pc, #572]	; (81c90 <Cl_alarms_scanforAlarms+0xd28>)
   81a54:	2204      	movs	r2, #4
   81a56:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81a58:	4b8b      	ldr	r3, [pc, #556]	; (81c88 <Cl_alarms_scanforAlarms+0xd20>)
   81a5a:	781b      	ldrb	r3, [r3, #0]
   81a5c:	461a      	mov	r2, r3
   81a5e:	4b8a      	ldr	r3, [pc, #552]	; (81c88 <Cl_alarms_scanforAlarms+0xd20>)
   81a60:	4413      	add	r3, r2
   81a62:	222e      	movs	r2, #46	; 0x2e
   81a64:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81a66:	4b8b      	ldr	r3, [pc, #556]	; (81c94 <Cl_alarms_scanforAlarms+0xd2c>)
   81a68:	4798      	blx	r3
   81a6a:	4603      	mov	r3, r0
   81a6c:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);
   81a6e:	79fb      	ldrb	r3, [r7, #7]
   81a70:	2b00      	cmp	r3, #0
   81a72:	d002      	beq.n	81a7a <Cl_alarms_scanforAlarms+0xb12>
   81a74:	4b88      	ldr	r3, [pc, #544]	; (81c98 <Cl_alarms_scanforAlarms+0xd30>)
   81a76:	4798      	blx	r3
   81a78:	e004      	b.n	81a84 <Cl_alarms_scanforAlarms+0xb1c>
   81a7a:	e003      	b.n	81a84 <Cl_alarms_scanforAlarms+0xb1c>
			}
			else
			{

				Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   81a7c:	4b80      	ldr	r3, [pc, #512]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81a7e:	2204      	movs	r2, #4
   81a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		

}

	
	if(Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_is_enabled)
   81a84:	4b7e      	ldr	r3, [pc, #504]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81a86:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
   81a8a:	2b00      	cmp	r3, #0
   81a8c:	d046      	beq.n	81b1c <Cl_alarms_scanforAlarms+0xbb4>
	{
		
		if(((Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder2status )) || ((Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder2status )) )
   81a8e:	4b7c      	ldr	r3, [pc, #496]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81a90:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   81a94:	2b01      	cmp	r3, #1
   81a96:	d104      	bne.n	81aa2 <Cl_alarms_scanforAlarms+0xb3a>
   81a98:	4b7a      	ldr	r3, [pc, #488]	; (81c84 <Cl_alarms_scanforAlarms+0xd1c>)
   81a9a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
   81a9e:	2b00      	cmp	r3, #0
   81aa0:	d10c      	bne.n	81abc <Cl_alarms_scanforAlarms+0xb54>
   81aa2:	4b77      	ldr	r3, [pc, #476]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81aa4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   81aa8:	2b00      	cmp	r3, #0
   81aaa:	d133      	bne.n	81b14 <Cl_alarms_scanforAlarms+0xbac>
   81aac:	4b75      	ldr	r3, [pc, #468]	; (81c84 <Cl_alarms_scanforAlarms+0xd1c>)
   81aae:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
   81ab2:	f083 0301 	eor.w	r3, r3, #1
   81ab6:	b2db      	uxtb	r3, r3
   81ab8:	2b00      	cmp	r3, #0
   81aba:	d02b      	beq.n	81b14 <Cl_alarms_scanforAlarms+0xbac>
		
		{
			Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_alarmstate = CL_ALARM_DETECTED;
   81abc:	4b70      	ldr	r3, [pc, #448]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81abe:	2201      	movs	r2, #1
   81ac0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=HOLDER2STATUS_CLOSED;
   81ac4:	4b70      	ldr	r3, [pc, #448]	; (81c88 <Cl_alarms_scanforAlarms+0xd20>)
   81ac6:	781b      	ldrb	r3, [r3, #0]
   81ac8:	4a6f      	ldr	r2, [pc, #444]	; (81c88 <Cl_alarms_scanforAlarms+0xd20>)
   81aca:	3301      	adds	r3, #1
   81acc:	00db      	lsls	r3, r3, #3
   81ace:	4413      	add	r3, r2
   81ad0:	2206      	movs	r2, #6
   81ad2:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_detected_count++;
   81ad4:	4b6a      	ldr	r3, [pc, #424]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81ad6:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
   81ada:	3301      	adds	r3, #1
   81adc:	b2da      	uxtb	r2, r3
   81ade:	4b68      	ldr	r3, [pc, #416]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81ae0:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			cl_alarm_triggered = true;
   81ae4:	4b69      	ldr	r3, [pc, #420]	; (81c8c <Cl_alarms_scanforAlarms+0xd24>)
   81ae6:	2201      	movs	r2, #1
   81ae8:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = HOLDER2STATUS_CLOSED;
   81aea:	4b69      	ldr	r3, [pc, #420]	; (81c90 <Cl_alarms_scanforAlarms+0xd28>)
   81aec:	2206      	movs	r2, #6
   81aee:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81af0:	4b65      	ldr	r3, [pc, #404]	; (81c88 <Cl_alarms_scanforAlarms+0xd20>)
   81af2:	781b      	ldrb	r3, [r3, #0]
   81af4:	461a      	mov	r2, r3
   81af6:	4b64      	ldr	r3, [pc, #400]	; (81c88 <Cl_alarms_scanforAlarms+0xd20>)
   81af8:	4413      	add	r3, r2
   81afa:	222e      	movs	r2, #46	; 0x2e
   81afc:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81afe:	4b65      	ldr	r3, [pc, #404]	; (81c94 <Cl_alarms_scanforAlarms+0xd2c>)
   81b00:	4798      	blx	r3
   81b02:	4603      	mov	r3, r0
   81b04:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81b06:	79fb      	ldrb	r3, [r7, #7]
   81b08:	2b00      	cmp	r3, #0
   81b0a:	d002      	beq.n	81b12 <Cl_alarms_scanforAlarms+0xbaa>
   81b0c:	4b62      	ldr	r3, [pc, #392]	; (81c98 <Cl_alarms_scanforAlarms+0xd30>)
   81b0e:	4798      	blx	r3
   81b10:	e004      	b.n	81b1c <Cl_alarms_scanforAlarms+0xbb4>
   81b12:	e003      	b.n	81b1c <Cl_alarms_scanforAlarms+0xbb4>
		}
		else
		{

			Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_alarmstate = CL_ALARM_INACTIVE;
   81b14:	4b5a      	ldr	r3, [pc, #360]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81b16:	2204      	movs	r2, #4
   81b18:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
// 		}
// 	}


			
	if(Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_is_enabled)
   81b1c:	4b58      	ldr	r3, [pc, #352]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81b1e:	f893 33de 	ldrb.w	r3, [r3, #990]	; 0x3de
   81b22:	2b00      	cmp	r3, #0
   81b24:	d046      	beq.n	81bb4 <Cl_alarms_scanforAlarms+0xc4c>
	{
	
		if(((cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_triggertype == LOGIC_HIGH)) || ((!cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_triggertype == LOGIC_LOW)))// when water level goes above it is a logic zero
   81b26:	4b57      	ldr	r3, [pc, #348]	; (81c84 <Cl_alarms_scanforAlarms+0xd1c>)
   81b28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81b2c:	2b00      	cmp	r3, #0
   81b2e:	d004      	beq.n	81b3a <Cl_alarms_scanforAlarms+0xbd2>
   81b30:	4b53      	ldr	r3, [pc, #332]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81b32:	f893 33d1 	ldrb.w	r3, [r3, #977]	; 0x3d1
   81b36:	2b01      	cmp	r3, #1
   81b38:	d00c      	beq.n	81b54 <Cl_alarms_scanforAlarms+0xbec>
   81b3a:	4b52      	ldr	r3, [pc, #328]	; (81c84 <Cl_alarms_scanforAlarms+0xd1c>)
   81b3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81b40:	f083 0301 	eor.w	r3, r3, #1
   81b44:	b2db      	uxtb	r3, r3
   81b46:	2b00      	cmp	r3, #0
   81b48:	d034      	beq.n	81bb4 <Cl_alarms_scanforAlarms+0xc4c>
   81b4a:	4b4d      	ldr	r3, [pc, #308]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81b4c:	f893 33d1 	ldrb.w	r3, [r3, #977]	; 0x3d1
   81b50:	2b00      	cmp	r3, #0
   81b52:	d12f      	bne.n	81bb4 <Cl_alarms_scanforAlarms+0xc4c>
		{
				
					//if(levelswitchprevstatus != 0)
					if (Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate != CL_ALARM_DETECTED)
   81b54:	4b4a      	ldr	r3, [pc, #296]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81b56:	f893 33d2 	ldrb.w	r3, [r3, #978]	; 0x3d2
   81b5a:	2b01      	cmp	r3, #1
   81b5c:	d020      	beq.n	81ba0 <Cl_alarms_scanforAlarms+0xc38>
					{
									

								Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate = CL_ALARM_ACTIVE;	
   81b5e:	4b48      	ldr	r3, [pc, #288]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81b60:	2202      	movs	r2, #2
   81b62:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
								Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate = CL_ALARM_DETECTED;
   81b66:	4b46      	ldr	r3, [pc, #280]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81b68:	2201      	movs	r2, #1
   81b6a:	f883 23d2 	strb.w	r2, [r3, #978]	; 0x3d2
								Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=LEVELSWITCH_OFF_TO_ON; 
   81b6e:	4b46      	ldr	r3, [pc, #280]	; (81c88 <Cl_alarms_scanforAlarms+0xd20>)
   81b70:	781b      	ldrb	r3, [r3, #0]
   81b72:	4a45      	ldr	r2, [pc, #276]	; (81c88 <Cl_alarms_scanforAlarms+0xd20>)
   81b74:	3301      	adds	r3, #1
   81b76:	00db      	lsls	r3, r3, #3
   81b78:	4413      	add	r3, r2
   81b7a:	223d      	movs	r2, #61	; 0x3d
   81b7c:	809a      	strh	r2, [r3, #4]
								//Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_detected_count++;
								cl_alarm_triggered = true;
   81b7e:	4b43      	ldr	r3, [pc, #268]	; (81c8c <Cl_alarms_scanforAlarms+0xd24>)
   81b80:	2201      	movs	r2, #1
   81b82:	701a      	strb	r2, [r3, #0]
								cl_lastalarmid = LEVELSWITCH_OFF_TO_ON;
   81b84:	4b42      	ldr	r3, [pc, #264]	; (81c90 <Cl_alarms_scanforAlarms+0xd28>)
   81b86:	223d      	movs	r2, #61	; 0x3d
   81b88:	701a      	strb	r2, [r3, #0]
								Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81b8a:	4b3f      	ldr	r3, [pc, #252]	; (81c88 <Cl_alarms_scanforAlarms+0xd20>)
   81b8c:	781b      	ldrb	r3, [r3, #0]
   81b8e:	461a      	mov	r2, r3
   81b90:	4b3d      	ldr	r3, [pc, #244]	; (81c88 <Cl_alarms_scanforAlarms+0xd20>)
   81b92:	4413      	add	r3, r2
   81b94:	222e      	movs	r2, #46	; 0x2e
   81b96:	709a      	strb	r2, [r3, #2]
								//Cl_UpdateMacAlarmEventTable();
								Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_ON_TO_OFF;
   81b98:	4b40      	ldr	r3, [pc, #256]	; (81c9c <Cl_alarms_scanforAlarms+0xd34>)
   81b9a:	2201      	movs	r2, #1
   81b9c:	701a      	strb	r2, [r3, #0]
   81b9e:	e006      	b.n	81bae <Cl_alarms_scanforAlarms+0xc46>
					
					}
					else
					{
						//		Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate = CL_ALARM_INACTIVE;
								Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_detected_count = 0;
   81ba0:	4b37      	ldr	r3, [pc, #220]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81ba2:	2200      	movs	r2, #0
   81ba4:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
								cl_alarm_triggered = false;
   81ba8:	4b38      	ldr	r3, [pc, #224]	; (81c8c <Cl_alarms_scanforAlarms+0xd24>)
   81baa:	2200      	movs	r2, #0
   81bac:	701a      	strb	r2, [r3, #0]
					
					}
				
					levelswitchprevstatus = 0;
   81bae:	4b3c      	ldr	r3, [pc, #240]	; (81ca0 <Cl_alarms_scanforAlarms+0xd38>)
   81bb0:	2200      	movs	r2, #0
   81bb2:	701a      	strb	r2, [r3, #0]
		}
	}


	if(Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_is_enabled)
   81bb4:	4b32      	ldr	r3, [pc, #200]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81bb6:	f893 33ee 	ldrb.w	r3, [r3, #1006]	; 0x3ee
   81bba:	2b00      	cmp	r3, #0
   81bbc:	d043      	beq.n	81c46 <Cl_alarms_scanforAlarms+0xcde>
	{
		if(((cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_triggertype == LOGIC_HIGH)) || ((!cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_triggertype == LOGIC_LOW)))	
   81bbe:	4b31      	ldr	r3, [pc, #196]	; (81c84 <Cl_alarms_scanforAlarms+0xd1c>)
   81bc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81bc4:	2b00      	cmp	r3, #0
   81bc6:	d004      	beq.n	81bd2 <Cl_alarms_scanforAlarms+0xc6a>
   81bc8:	4b2d      	ldr	r3, [pc, #180]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81bca:	f893 33e1 	ldrb.w	r3, [r3, #993]	; 0x3e1
   81bce:	2b01      	cmp	r3, #1
   81bd0:	d00c      	beq.n	81bec <Cl_alarms_scanforAlarms+0xc84>
   81bd2:	4b2c      	ldr	r3, [pc, #176]	; (81c84 <Cl_alarms_scanforAlarms+0xd1c>)
   81bd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81bd8:	f083 0301 	eor.w	r3, r3, #1
   81bdc:	b2db      	uxtb	r3, r3
   81bde:	2b00      	cmp	r3, #0
   81be0:	d031      	beq.n	81c46 <Cl_alarms_scanforAlarms+0xcde>
   81be2:	4b27      	ldr	r3, [pc, #156]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81be4:	f893 33e1 	ldrb.w	r3, [r3, #993]	; 0x3e1
   81be8:	2b00      	cmp	r3, #0
   81bea:	d12c      	bne.n	81c46 <Cl_alarms_scanforAlarms+0xcde>
		//if((!cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_triggertype == LOGIC_LOW))
		{				
				//	if(levelswitchprevstatus != 1)
				if (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate != CL_ALARM_DETECTED)
   81bec:	4b24      	ldr	r3, [pc, #144]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81bee:	f893 33e2 	ldrb.w	r3, [r3, #994]	; 0x3e2
   81bf2:	2b01      	cmp	r3, #1
   81bf4:	d01d      	beq.n	81c32 <Cl_alarms_scanforAlarms+0xcca>
					{
					
				
						if(Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_is_enabled)
   81bf6:	4b22      	ldr	r3, [pc, #136]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81bf8:	f893 33ee 	ldrb.w	r3, [r3, #1006]	; 0x3ee
   81bfc:	2b00      	cmp	r3, #0
   81bfe:	d01f      	beq.n	81c40 <Cl_alarms_scanforAlarms+0xcd8>
						{
								Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate = CL_ALARM_ACTIVE;	
   81c00:	4b1f      	ldr	r3, [pc, #124]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81c02:	2202      	movs	r2, #2
   81c04:	f883 23d2 	strb.w	r2, [r3, #978]	; 0x3d2
									Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate = CL_ALARM_DETECTED;	
   81c08:	4b1d      	ldr	r3, [pc, #116]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81c0a:	2201      	movs	r2, #1
   81c0c:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
							//	Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=LEVELSWITCH_ON_TO_OFF; 
							//	Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_detected_count++;
								cl_alarm_triggered = true;
   81c10:	4b1e      	ldr	r3, [pc, #120]	; (81c8c <Cl_alarms_scanforAlarms+0xd24>)
   81c12:	2201      	movs	r2, #1
   81c14:	701a      	strb	r2, [r3, #0]
								cl_lastalarmid = LEVELSWITCH_ON_TO_OFF;
   81c16:	4b1e      	ldr	r3, [pc, #120]	; (81c90 <Cl_alarms_scanforAlarms+0xd28>)
   81c18:	223e      	movs	r2, #62	; 0x3e
   81c1a:	701a      	strb	r2, [r3, #0]
								Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81c1c:	4b1a      	ldr	r3, [pc, #104]	; (81c88 <Cl_alarms_scanforAlarms+0xd20>)
   81c1e:	781b      	ldrb	r3, [r3, #0]
   81c20:	461a      	mov	r2, r3
   81c22:	4b19      	ldr	r3, [pc, #100]	; (81c88 <Cl_alarms_scanforAlarms+0xd20>)
   81c24:	4413      	add	r3, r2
   81c26:	222e      	movs	r2, #46	; 0x2e
   81c28:	709a      	strb	r2, [r3, #2]
								//Cl_UpdateMacAlarmEventTable();
								Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_OFF_TO_ON;
   81c2a:	4b1c      	ldr	r3, [pc, #112]	; (81c9c <Cl_alarms_scanforAlarms+0xd34>)
   81c2c:	2202      	movs	r2, #2
   81c2e:	701a      	strb	r2, [r3, #0]
   81c30:	e006      	b.n	81c40 <Cl_alarms_scanforAlarms+0xcd8>
						}
					}
					else
					{
					//	Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate = CL_ALARM_INACTIVE;
						Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_detected_count = 0;
   81c32:	4b13      	ldr	r3, [pc, #76]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81c34:	2200      	movs	r2, #0
   81c36:	f883 23ed 	strb.w	r2, [r3, #1005]	; 0x3ed
						cl_alarm_triggered = false;
   81c3a:	4b14      	ldr	r3, [pc, #80]	; (81c8c <Cl_alarms_scanforAlarms+0xd24>)
   81c3c:	2200      	movs	r2, #0
   81c3e:	701a      	strb	r2, [r3, #0]
					
					}
				
					levelswitchprevstatus = 1;
   81c40:	4b17      	ldr	r3, [pc, #92]	; (81ca0 <Cl_alarms_scanforAlarms+0xd38>)
   81c42:	2201      	movs	r2, #1
   81c44:	701a      	strb	r2, [r3, #0]
		
		}
	}

	
	if(Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_is_enabled)
   81c46:	4b0e      	ldr	r3, [pc, #56]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81c48:	f893 315e 	ldrb.w	r3, [r3, #350]	; 0x15e
   81c4c:	2b00      	cmp	r3, #0
   81c4e:	d065      	beq.n	81d1c <Cl_alarms_scanforAlarms+0xdb4>
	{
		
		if (Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   81c50:	4b0b      	ldr	r3, [pc, #44]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81c52:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
   81c56:	2b01      	cmp	r3, #1
   81c58:	d057      	beq.n	81d0a <Cl_alarms_scanforAlarms+0xda2>
		{
				if(ps1 > Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_upper - 1000) 
   81c5a:	4b09      	ldr	r3, [pc, #36]	; (81c80 <Cl_alarms_scanforAlarms+0xd18>)
   81c5c:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
   81c60:	4b10      	ldr	r3, [pc, #64]	; (81ca4 <Cl_alarms_scanforAlarms+0xd3c>)
   81c62:	4610      	mov	r0, r2
   81c64:	4910      	ldr	r1, [pc, #64]	; (81ca8 <Cl_alarms_scanforAlarms+0xd40>)
   81c66:	4798      	blx	r3
   81c68:	4603      	mov	r3, r0
   81c6a:	4619      	mov	r1, r3
   81c6c:	4b0f      	ldr	r3, [pc, #60]	; (81cac <Cl_alarms_scanforAlarms+0xd44>)
   81c6e:	681a      	ldr	r2, [r3, #0]
   81c70:	4b0f      	ldr	r3, [pc, #60]	; (81cb0 <Cl_alarms_scanforAlarms+0xd48>)
   81c72:	4608      	mov	r0, r1
   81c74:	4611      	mov	r1, r2
   81c76:	4798      	blx	r3
   81c78:	4603      	mov	r3, r0
   81c7a:	2b00      	cmp	r3, #0
   81c7c:	d11a      	bne.n	81cb4 <Cl_alarms_scanforAlarms+0xd4c>
   81c7e:	e04d      	b.n	81d1c <Cl_alarms_scanforAlarms+0xdb4>
   81c80:	20071e70 	.word	0x20071e70
   81c84:	200723d8 	.word	0x200723d8
   81c88:	20072480 	.word	0x20072480
   81c8c:	20071909 	.word	0x20071909
   81c90:	200722a4 	.word	0x200722a4
   81c94:	00082965 	.word	0x00082965
   81c98:	00088b81 	.word	0x00088b81
   81c9c:	20071c34 	.word	0x20071c34
   81ca0:	20070108 	.word	0x20070108
   81ca4:	000a80f1 	.word	0x000a80f1
   81ca8:	447a0000 	.word	0x447a0000
   81cac:	20071914 	.word	0x20071914
   81cb0:	000a8641 	.word	0x000a8641
					//Cl_Uint16Type temp_ps;
					//temp_ps=ps1;

					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1=",4);
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
					Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;	
   81cb4:	4b8e      	ldr	r3, [pc, #568]	; (81ef0 <Cl_alarms_scanforAlarms+0xf88>)
   81cb6:	2201      	movs	r2, #1
   81cb8:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=PS1_HIGH_THRESHOLD;
   81cbc:	4b8d      	ldr	r3, [pc, #564]	; (81ef4 <Cl_alarms_scanforAlarms+0xf8c>)
   81cbe:	781b      	ldrb	r3, [r3, #0]
   81cc0:	4a8c      	ldr	r2, [pc, #560]	; (81ef4 <Cl_alarms_scanforAlarms+0xf8c>)
   81cc2:	3301      	adds	r3, #1
   81cc4:	00db      	lsls	r3, r3, #3
   81cc6:	4413      	add	r3, r2
   81cc8:	2215      	movs	r2, #21
   81cca:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_detected_count++;
   81ccc:	4b88      	ldr	r3, [pc, #544]	; (81ef0 <Cl_alarms_scanforAlarms+0xf88>)
   81cce:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
   81cd2:	3301      	adds	r3, #1
   81cd4:	b2da      	uxtb	r2, r3
   81cd6:	4b86      	ldr	r3, [pc, #536]	; (81ef0 <Cl_alarms_scanforAlarms+0xf88>)
   81cd8:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
					cl_alarm_triggered = true;
   81cdc:	4b86      	ldr	r3, [pc, #536]	; (81ef8 <Cl_alarms_scanforAlarms+0xf90>)
   81cde:	2201      	movs	r2, #1
   81ce0:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = PS1_HIGH_THRESHOLD;
   81ce2:	4b86      	ldr	r3, [pc, #536]	; (81efc <Cl_alarms_scanforAlarms+0xf94>)
   81ce4:	2215      	movs	r2, #21
   81ce6:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81ce8:	4b82      	ldr	r3, [pc, #520]	; (81ef4 <Cl_alarms_scanforAlarms+0xf8c>)
   81cea:	781b      	ldrb	r3, [r3, #0]
   81cec:	461a      	mov	r2, r3
   81cee:	4b81      	ldr	r3, [pc, #516]	; (81ef4 <Cl_alarms_scanforAlarms+0xf8c>)
   81cf0:	4413      	add	r3, r2
   81cf2:	222e      	movs	r2, #46	; 0x2e
   81cf4:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81cf6:	4b82      	ldr	r3, [pc, #520]	; (81f00 <Cl_alarms_scanforAlarms+0xf98>)
   81cf8:	4798      	blx	r3
   81cfa:	4603      	mov	r3, r0
   81cfc:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   81cfe:	79fb      	ldrb	r3, [r7, #7]
   81d00:	2b00      	cmp	r3, #0
   81d02:	d00b      	beq.n	81d1c <Cl_alarms_scanforAlarms+0xdb4>
   81d04:	4b7f      	ldr	r3, [pc, #508]	; (81f04 <Cl_alarms_scanforAlarms+0xf9c>)
   81d06:	4798      	blx	r3
   81d08:	e008      	b.n	81d1c <Cl_alarms_scanforAlarms+0xdb4>
				}
				
		}
		else if (Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED) 
   81d0a:	4b79      	ldr	r3, [pc, #484]	; (81ef0 <Cl_alarms_scanforAlarms+0xf88>)
   81d0c:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
   81d10:	2b01      	cmp	r3, #1
   81d12:	d103      	bne.n	81d1c <Cl_alarms_scanforAlarms+0xdb4>
		{
			Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   81d14:	4b76      	ldr	r3, [pc, #472]	; (81ef0 <Cl_alarms_scanforAlarms+0xf88>)
   81d16:	2204      	movs	r2, #4
   81d18:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
		}
	}

if(Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_is_enabled)
   81d1c:	4b74      	ldr	r3, [pc, #464]	; (81ef0 <Cl_alarms_scanforAlarms+0xf88>)
   81d1e:	f893 316e 	ldrb.w	r3, [r3, #366]	; 0x16e
   81d22:	2b00      	cmp	r3, #0
   81d24:	d04b      	beq.n	81dbe <Cl_alarms_scanforAlarms+0xe56>
{
	 
	if (Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   81d26:	4b72      	ldr	r3, [pc, #456]	; (81ef0 <Cl_alarms_scanforAlarms+0xf88>)
   81d28:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
   81d2c:	2b01      	cmp	r3, #1
   81d2e:	d03d      	beq.n	81dac <Cl_alarms_scanforAlarms+0xe44>
	{
		if(ps1 < Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_lower - 1000) 
   81d30:	4b6f      	ldr	r3, [pc, #444]	; (81ef0 <Cl_alarms_scanforAlarms+0xf88>)
   81d32:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   81d36:	4b74      	ldr	r3, [pc, #464]	; (81f08 <Cl_alarms_scanforAlarms+0xfa0>)
   81d38:	4610      	mov	r0, r2
   81d3a:	4974      	ldr	r1, [pc, #464]	; (81f0c <Cl_alarms_scanforAlarms+0xfa4>)
   81d3c:	4798      	blx	r3
   81d3e:	4603      	mov	r3, r0
   81d40:	4619      	mov	r1, r3
   81d42:	4b73      	ldr	r3, [pc, #460]	; (81f10 <Cl_alarms_scanforAlarms+0xfa8>)
   81d44:	681a      	ldr	r2, [r3, #0]
   81d46:	4b73      	ldr	r3, [pc, #460]	; (81f14 <Cl_alarms_scanforAlarms+0xfac>)
   81d48:	4608      	mov	r0, r1
   81d4a:	4611      	mov	r1, r2
   81d4c:	4798      	blx	r3
   81d4e:	4603      	mov	r3, r0
   81d50:	2b00      	cmp	r3, #0
   81d52:	d100      	bne.n	81d56 <Cl_alarms_scanforAlarms+0xdee>
   81d54:	e033      	b.n	81dbe <Cl_alarms_scanforAlarms+0xe56>
			//Cl_Uint16Type temp_ps;
			//temp_ps=ps1;

			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1=",4);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
			Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   81d56:	4b66      	ldr	r3, [pc, #408]	; (81ef0 <Cl_alarms_scanforAlarms+0xf88>)
   81d58:	2201      	movs	r2, #1
   81d5a:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=PS1_LOW_THRESHOLD;
   81d5e:	4b65      	ldr	r3, [pc, #404]	; (81ef4 <Cl_alarms_scanforAlarms+0xf8c>)
   81d60:	781b      	ldrb	r3, [r3, #0]
   81d62:	4a64      	ldr	r2, [pc, #400]	; (81ef4 <Cl_alarms_scanforAlarms+0xf8c>)
   81d64:	3301      	adds	r3, #1
   81d66:	00db      	lsls	r3, r3, #3
   81d68:	4413      	add	r3, r2
   81d6a:	2216      	movs	r2, #22
   81d6c:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_detected_count++;
   81d6e:	4b60      	ldr	r3, [pc, #384]	; (81ef0 <Cl_alarms_scanforAlarms+0xf88>)
   81d70:	f893 316d 	ldrb.w	r3, [r3, #365]	; 0x16d
   81d74:	3301      	adds	r3, #1
   81d76:	b2da      	uxtb	r2, r3
   81d78:	4b5d      	ldr	r3, [pc, #372]	; (81ef0 <Cl_alarms_scanforAlarms+0xf88>)
   81d7a:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
			cl_alarm_triggered = true;
   81d7e:	4b5e      	ldr	r3, [pc, #376]	; (81ef8 <Cl_alarms_scanforAlarms+0xf90>)
   81d80:	2201      	movs	r2, #1
   81d82:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = PS1_LOW_THRESHOLD;
   81d84:	4b5d      	ldr	r3, [pc, #372]	; (81efc <Cl_alarms_scanforAlarms+0xf94>)
   81d86:	2216      	movs	r2, #22
   81d88:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81d8a:	4b5a      	ldr	r3, [pc, #360]	; (81ef4 <Cl_alarms_scanforAlarms+0xf8c>)
   81d8c:	781b      	ldrb	r3, [r3, #0]
   81d8e:	461a      	mov	r2, r3
   81d90:	4b58      	ldr	r3, [pc, #352]	; (81ef4 <Cl_alarms_scanforAlarms+0xf8c>)
   81d92:	4413      	add	r3, r2
   81d94:	222e      	movs	r2, #46	; 0x2e
   81d96:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81d98:	4b59      	ldr	r3, [pc, #356]	; (81f00 <Cl_alarms_scanforAlarms+0xf98>)
   81d9a:	4798      	blx	r3
   81d9c:	4603      	mov	r3, r0
   81d9e:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81da0:	79fb      	ldrb	r3, [r7, #7]
   81da2:	2b00      	cmp	r3, #0
   81da4:	d00b      	beq.n	81dbe <Cl_alarms_scanforAlarms+0xe56>
   81da6:	4b57      	ldr	r3, [pc, #348]	; (81f04 <Cl_alarms_scanforAlarms+0xf9c>)
   81da8:	4798      	blx	r3
   81daa:	e008      	b.n	81dbe <Cl_alarms_scanforAlarms+0xe56>
		}
	}
	else if (Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   81dac:	4b50      	ldr	r3, [pc, #320]	; (81ef0 <Cl_alarms_scanforAlarms+0xf88>)
   81dae:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
   81db2:	2b01      	cmp	r3, #1
   81db4:	d103      	bne.n	81dbe <Cl_alarms_scanforAlarms+0xe56>
	{
		Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   81db6:	4b4e      	ldr	r3, [pc, #312]	; (81ef0 <Cl_alarms_scanforAlarms+0xf88>)
   81db8:	2204      	movs	r2, #4
   81dba:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
	}
}

	if(Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_is_enabled)
   81dbe:	4b4c      	ldr	r3, [pc, #304]	; (81ef0 <Cl_alarms_scanforAlarms+0xf88>)
   81dc0:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
   81dc4:	2b00      	cmp	r3, #0
   81dc6:	d04b      	beq.n	81e60 <Cl_alarms_scanforAlarms+0xef8>
	{
		
				if (Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   81dc8:	4b49      	ldr	r3, [pc, #292]	; (81ef0 <Cl_alarms_scanforAlarms+0xf88>)
   81dca:	f893 3172 	ldrb.w	r3, [r3, #370]	; 0x172
   81dce:	2b01      	cmp	r3, #1
   81dd0:	d03d      	beq.n	81e4e <Cl_alarms_scanforAlarms+0xee6>
				{
				if(ps2 > Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_upper - 1000) 
   81dd2:	4b47      	ldr	r3, [pc, #284]	; (81ef0 <Cl_alarms_scanforAlarms+0xf88>)
   81dd4:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
   81dd8:	4b4b      	ldr	r3, [pc, #300]	; (81f08 <Cl_alarms_scanforAlarms+0xfa0>)
   81dda:	4610      	mov	r0, r2
   81ddc:	494b      	ldr	r1, [pc, #300]	; (81f0c <Cl_alarms_scanforAlarms+0xfa4>)
   81dde:	4798      	blx	r3
   81de0:	4603      	mov	r3, r0
   81de2:	4619      	mov	r1, r3
   81de4:	4b4c      	ldr	r3, [pc, #304]	; (81f18 <Cl_alarms_scanforAlarms+0xfb0>)
   81de6:	681a      	ldr	r2, [r3, #0]
   81de8:	4b4c      	ldr	r3, [pc, #304]	; (81f1c <Cl_alarms_scanforAlarms+0xfb4>)
   81dea:	4608      	mov	r0, r1
   81dec:	4611      	mov	r1, r2
   81dee:	4798      	blx	r3
   81df0:	4603      	mov	r3, r0
   81df2:	2b00      	cmp	r3, #0
   81df4:	d100      	bne.n	81df8 <Cl_alarms_scanforAlarms+0xe90>
   81df6:	e033      	b.n	81e60 <Cl_alarms_scanforAlarms+0xef8>
						//temp_ps=ps2;

							// Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2=",4);
							// Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
												
					Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;	
   81df8:	4b3d      	ldr	r3, [pc, #244]	; (81ef0 <Cl_alarms_scanforAlarms+0xf88>)
   81dfa:	2201      	movs	r2, #1
   81dfc:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=PS2_HIGH_THRESHOLD;
   81e00:	4b3c      	ldr	r3, [pc, #240]	; (81ef4 <Cl_alarms_scanforAlarms+0xf8c>)
   81e02:	781b      	ldrb	r3, [r3, #0]
   81e04:	4a3b      	ldr	r2, [pc, #236]	; (81ef4 <Cl_alarms_scanforAlarms+0xf8c>)
   81e06:	3301      	adds	r3, #1
   81e08:	00db      	lsls	r3, r3, #3
   81e0a:	4413      	add	r3, r2
   81e0c:	2217      	movs	r2, #23
   81e0e:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_detected_count++;
   81e10:	4b37      	ldr	r3, [pc, #220]	; (81ef0 <Cl_alarms_scanforAlarms+0xf88>)
   81e12:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
   81e16:	3301      	adds	r3, #1
   81e18:	b2da      	uxtb	r2, r3
   81e1a:	4b35      	ldr	r3, [pc, #212]	; (81ef0 <Cl_alarms_scanforAlarms+0xf88>)
   81e1c:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
					cl_alarm_triggered = true;
   81e20:	4b35      	ldr	r3, [pc, #212]	; (81ef8 <Cl_alarms_scanforAlarms+0xf90>)
   81e22:	2201      	movs	r2, #1
   81e24:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = PS2_HIGH_THRESHOLD;
   81e26:	4b35      	ldr	r3, [pc, #212]	; (81efc <Cl_alarms_scanforAlarms+0xf94>)
   81e28:	2217      	movs	r2, #23
   81e2a:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81e2c:	4b31      	ldr	r3, [pc, #196]	; (81ef4 <Cl_alarms_scanforAlarms+0xf8c>)
   81e2e:	781b      	ldrb	r3, [r3, #0]
   81e30:	461a      	mov	r2, r3
   81e32:	4b30      	ldr	r3, [pc, #192]	; (81ef4 <Cl_alarms_scanforAlarms+0xf8c>)
   81e34:	4413      	add	r3, r2
   81e36:	222e      	movs	r2, #46	; 0x2e
   81e38:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81e3a:	4b31      	ldr	r3, [pc, #196]	; (81f00 <Cl_alarms_scanforAlarms+0xf98>)
   81e3c:	4798      	blx	r3
   81e3e:	4603      	mov	r3, r0
   81e40:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   81e42:	79fb      	ldrb	r3, [r7, #7]
   81e44:	2b00      	cmp	r3, #0
   81e46:	d00b      	beq.n	81e60 <Cl_alarms_scanforAlarms+0xef8>
   81e48:	4b2e      	ldr	r3, [pc, #184]	; (81f04 <Cl_alarms_scanforAlarms+0xf9c>)
   81e4a:	4798      	blx	r3
   81e4c:	e008      	b.n	81e60 <Cl_alarms_scanforAlarms+0xef8>
					
				}
				}
				else if (Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   81e4e:	4b28      	ldr	r3, [pc, #160]	; (81ef0 <Cl_alarms_scanforAlarms+0xf88>)
   81e50:	f893 3172 	ldrb.w	r3, [r3, #370]	; 0x172
   81e54:	2b01      	cmp	r3, #1
   81e56:	d103      	bne.n	81e60 <Cl_alarms_scanforAlarms+0xef8>
				{
					Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   81e58:	4b25      	ldr	r3, [pc, #148]	; (81ef0 <Cl_alarms_scanforAlarms+0xf88>)
   81e5a:	2204      	movs	r2, #4
   81e5c:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
				}
	}
		if(Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_is_enabled)
   81e60:	4b23      	ldr	r3, [pc, #140]	; (81ef0 <Cl_alarms_scanforAlarms+0xf88>)
   81e62:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
   81e66:	2b00      	cmp	r3, #0
   81e68:	d063      	beq.n	81f32 <Cl_alarms_scanforAlarms+0xfca>
		{
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT",6);
			if (Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   81e6a:	4b21      	ldr	r3, [pc, #132]	; (81ef0 <Cl_alarms_scanforAlarms+0xf88>)
   81e6c:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
   81e70:	2b01      	cmp	r3, #1
   81e72:	d055      	beq.n	81f20 <Cl_alarms_scanforAlarms+0xfb8>
			{
				if(ps2 < Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_lower - 1000)  
   81e74:	4b1e      	ldr	r3, [pc, #120]	; (81ef0 <Cl_alarms_scanforAlarms+0xf88>)
   81e76:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
   81e7a:	4b23      	ldr	r3, [pc, #140]	; (81f08 <Cl_alarms_scanforAlarms+0xfa0>)
   81e7c:	4610      	mov	r0, r2
   81e7e:	4923      	ldr	r1, [pc, #140]	; (81f0c <Cl_alarms_scanforAlarms+0xfa4>)
   81e80:	4798      	blx	r3
   81e82:	4603      	mov	r3, r0
   81e84:	4619      	mov	r1, r3
   81e86:	4b24      	ldr	r3, [pc, #144]	; (81f18 <Cl_alarms_scanforAlarms+0xfb0>)
   81e88:	681a      	ldr	r2, [r3, #0]
   81e8a:	4b22      	ldr	r3, [pc, #136]	; (81f14 <Cl_alarms_scanforAlarms+0xfac>)
   81e8c:	4608      	mov	r0, r1
   81e8e:	4611      	mov	r1, r2
   81e90:	4798      	blx	r3
   81e92:	4603      	mov	r3, r0
   81e94:	2b00      	cmp	r3, #0
   81e96:	d100      	bne.n	81e9a <Cl_alarms_scanforAlarms+0xf32>
   81e98:	e04b      	b.n	81f32 <Cl_alarms_scanforAlarms+0xfca>
					//Cl_Uint16Type temp_ps;
					//temp_ps=ps2;

					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2=",4);
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
					Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   81e9a:	4b15      	ldr	r3, [pc, #84]	; (81ef0 <Cl_alarms_scanforAlarms+0xf88>)
   81e9c:	2201      	movs	r2, #1
   81e9e:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=PS2_LOW_THRESHOLD;
   81ea2:	4b14      	ldr	r3, [pc, #80]	; (81ef4 <Cl_alarms_scanforAlarms+0xf8c>)
   81ea4:	781b      	ldrb	r3, [r3, #0]
   81ea6:	4a13      	ldr	r2, [pc, #76]	; (81ef4 <Cl_alarms_scanforAlarms+0xf8c>)
   81ea8:	3301      	adds	r3, #1
   81eaa:	00db      	lsls	r3, r3, #3
   81eac:	4413      	add	r3, r2
   81eae:	2218      	movs	r2, #24
   81eb0:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_detected_count++;
   81eb2:	4b0f      	ldr	r3, [pc, #60]	; (81ef0 <Cl_alarms_scanforAlarms+0xf88>)
   81eb4:	f893 318d 	ldrb.w	r3, [r3, #397]	; 0x18d
   81eb8:	3301      	adds	r3, #1
   81eba:	b2da      	uxtb	r2, r3
   81ebc:	4b0c      	ldr	r3, [pc, #48]	; (81ef0 <Cl_alarms_scanforAlarms+0xf88>)
   81ebe:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
					cl_alarm_triggered = true;
   81ec2:	4b0d      	ldr	r3, [pc, #52]	; (81ef8 <Cl_alarms_scanforAlarms+0xf90>)
   81ec4:	2201      	movs	r2, #1
   81ec6:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = PS2_LOW_THRESHOLD;
   81ec8:	4b0c      	ldr	r3, [pc, #48]	; (81efc <Cl_alarms_scanforAlarms+0xf94>)
   81eca:	2218      	movs	r2, #24
   81ecc:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81ece:	4b09      	ldr	r3, [pc, #36]	; (81ef4 <Cl_alarms_scanforAlarms+0xf8c>)
   81ed0:	781b      	ldrb	r3, [r3, #0]
   81ed2:	461a      	mov	r2, r3
   81ed4:	4b07      	ldr	r3, [pc, #28]	; (81ef4 <Cl_alarms_scanforAlarms+0xf8c>)
   81ed6:	4413      	add	r3, r2
   81ed8:	222e      	movs	r2, #46	; 0x2e
   81eda:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81edc:	4b08      	ldr	r3, [pc, #32]	; (81f00 <Cl_alarms_scanforAlarms+0xf98>)
   81ede:	4798      	blx	r3
   81ee0:	4603      	mov	r3, r0
   81ee2:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   81ee4:	79fb      	ldrb	r3, [r7, #7]
   81ee6:	2b00      	cmp	r3, #0
   81ee8:	d023      	beq.n	81f32 <Cl_alarms_scanforAlarms+0xfca>
   81eea:	4b06      	ldr	r3, [pc, #24]	; (81f04 <Cl_alarms_scanforAlarms+0xf9c>)
   81eec:	4798      	blx	r3
   81eee:	e020      	b.n	81f32 <Cl_alarms_scanforAlarms+0xfca>
   81ef0:	20071e70 	.word	0x20071e70
   81ef4:	20072480 	.word	0x20072480
   81ef8:	20071909 	.word	0x20071909
   81efc:	200722a4 	.word	0x200722a4
   81f00:	00082965 	.word	0x00082965
   81f04:	00088b81 	.word	0x00088b81
   81f08:	000a80f1 	.word	0x000a80f1
   81f0c:	447a0000 	.word	0x447a0000
   81f10:	20071914 	.word	0x20071914
   81f14:	000a867d 	.word	0x000a867d
   81f18:	20071918 	.word	0x20071918
   81f1c:	000a8641 	.word	0x000a8641
					
				}
			}
			else if (Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   81f20:	4b9b      	ldr	r3, [pc, #620]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   81f22:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
   81f26:	2b01      	cmp	r3, #1
   81f28:	d103      	bne.n	81f32 <Cl_alarms_scanforAlarms+0xfca>
			{
				Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   81f2a:	4b99      	ldr	r3, [pc, #612]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   81f2c:	2204      	movs	r2, #4
   81f2e:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
			}
		}
		

	if(Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_is_enabled)
   81f32:	4b97      	ldr	r3, [pc, #604]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   81f34:	f893 327e 	ldrb.w	r3, [r3, #638]	; 0x27e
   81f38:	2b00      	cmp	r3, #0
   81f3a:	d04b      	beq.n	81fd4 <Cl_alarms_scanforAlarms+0x106c>
		{
			// Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_HIGH",11);
			//	if((cl_sys_statbuffer.ps3status > 1474) && (Cl_alarms_alarms[PS3STATUS_HIGH].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
				if((ps3 > Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_upper - 1000 ) && (Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar 
   81f3c:	4b94      	ldr	r3, [pc, #592]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   81f3e:	f8d3 2274 	ldr.w	r2, [r3, #628]	; 0x274
   81f42:	4b94      	ldr	r3, [pc, #592]	; (82194 <Cl_alarms_scanforAlarms+0x122c>)
   81f44:	4610      	mov	r0, r2
   81f46:	4994      	ldr	r1, [pc, #592]	; (82198 <Cl_alarms_scanforAlarms+0x1230>)
   81f48:	4798      	blx	r3
   81f4a:	4603      	mov	r3, r0
   81f4c:	4619      	mov	r1, r3
   81f4e:	4b93      	ldr	r3, [pc, #588]	; (8219c <Cl_alarms_scanforAlarms+0x1234>)
   81f50:	681a      	ldr	r2, [r3, #0]
   81f52:	4b93      	ldr	r3, [pc, #588]	; (821a0 <Cl_alarms_scanforAlarms+0x1238>)
   81f54:	4608      	mov	r0, r1
   81f56:	4611      	mov	r1, r2
   81f58:	4798      	blx	r3
   81f5a:	4603      	mov	r3, r0
   81f5c:	2b00      	cmp	r3, #0
   81f5e:	d030      	beq.n	81fc2 <Cl_alarms_scanforAlarms+0x105a>
   81f60:	4b8b      	ldr	r3, [pc, #556]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   81f62:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
   81f66:	2b01      	cmp	r3, #1
   81f68:	d02b      	beq.n	81fc2 <Cl_alarms_scanforAlarms+0x105a>
					//Cl_Uint16Type temp_ps;
					//temp_ps=ps3;

					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3=",4);
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
				Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   81f6a:	4b89      	ldr	r3, [pc, #548]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   81f6c:	2201      	movs	r2, #1
   81f6e:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
				Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=PS3_HIGH_THRESHOLD;
   81f72:	4b8c      	ldr	r3, [pc, #560]	; (821a4 <Cl_alarms_scanforAlarms+0x123c>)
   81f74:	781b      	ldrb	r3, [r3, #0]
   81f76:	4a8b      	ldr	r2, [pc, #556]	; (821a4 <Cl_alarms_scanforAlarms+0x123c>)
   81f78:	3301      	adds	r3, #1
   81f7a:	00db      	lsls	r3, r3, #3
   81f7c:	4413      	add	r3, r2
   81f7e:	2227      	movs	r2, #39	; 0x27
   81f80:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_detected_count++;
   81f82:	4b83      	ldr	r3, [pc, #524]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   81f84:	f893 327d 	ldrb.w	r3, [r3, #637]	; 0x27d
   81f88:	3301      	adds	r3, #1
   81f8a:	b2da      	uxtb	r2, r3
   81f8c:	4b80      	ldr	r3, [pc, #512]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   81f8e:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
				cl_alarm_triggered = true;
   81f92:	4b85      	ldr	r3, [pc, #532]	; (821a8 <Cl_alarms_scanforAlarms+0x1240>)
   81f94:	2201      	movs	r2, #1
   81f96:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = PS3_HIGH_THRESHOLD;
   81f98:	4b84      	ldr	r3, [pc, #528]	; (821ac <Cl_alarms_scanforAlarms+0x1244>)
   81f9a:	2227      	movs	r2, #39	; 0x27
   81f9c:	701a      	strb	r2, [r3, #0]
				//Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
				Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81f9e:	4b81      	ldr	r3, [pc, #516]	; (821a4 <Cl_alarms_scanforAlarms+0x123c>)
   81fa0:	781b      	ldrb	r3, [r3, #0]
   81fa2:	461a      	mov	r2, r3
   81fa4:	4b7f      	ldr	r3, [pc, #508]	; (821a4 <Cl_alarms_scanforAlarms+0x123c>)
   81fa6:	4413      	add	r3, r2
   81fa8:	222e      	movs	r2, #46	; 0x2e
   81faa:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81fac:	4b80      	ldr	r3, [pc, #512]	; (821b0 <Cl_alarms_scanforAlarms+0x1248>)
   81fae:	4798      	blx	r3
   81fb0:	4603      	mov	r3, r0
   81fb2:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   81fb4:	79fb      	ldrb	r3, [r7, #7]
   81fb6:	2b00      	cmp	r3, #0
   81fb8:	d002      	beq.n	81fc0 <Cl_alarms_scanforAlarms+0x1058>
   81fba:	4b7e      	ldr	r3, [pc, #504]	; (821b4 <Cl_alarms_scanforAlarms+0x124c>)
   81fbc:	4798      	blx	r3
   81fbe:	e009      	b.n	81fd4 <Cl_alarms_scanforAlarms+0x106c>
   81fc0:	e008      	b.n	81fd4 <Cl_alarms_scanforAlarms+0x106c>
				}
				
				else if (Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   81fc2:	4b73      	ldr	r3, [pc, #460]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   81fc4:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
   81fc8:	2b01      	cmp	r3, #1
   81fca:	d103      	bne.n	81fd4 <Cl_alarms_scanforAlarms+0x106c>
				{
					Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   81fcc:	4b70      	ldr	r3, [pc, #448]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   81fce:	2204      	movs	r2, #4
   81fd0:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
				}
		}
	
	if(Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_is_enabled)
   81fd4:	4b6e      	ldr	r3, [pc, #440]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   81fd6:	f893 328e 	ldrb.w	r3, [r3, #654]	; 0x28e
   81fda:	2b00      	cmp	r3, #0
   81fdc:	d04a      	beq.n	82074 <Cl_alarms_scanforAlarms+0x110c>
		//	if((cl_sys_statbuffer.ps3status > 1474) && (Cl_alarms_alarms[PS3STATUS_HIGH].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
		
		float temp,temp_ps;
		//temp = 
		
		if((ps3 < Cl_alarmThresholdTable.ps3_low_threshold - 1000) && (Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
   81fde:	4b76      	ldr	r3, [pc, #472]	; (821b8 <Cl_alarms_scanforAlarms+0x1250>)
   81fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   81fe2:	4b6c      	ldr	r3, [pc, #432]	; (82194 <Cl_alarms_scanforAlarms+0x122c>)
   81fe4:	4610      	mov	r0, r2
   81fe6:	496c      	ldr	r1, [pc, #432]	; (82198 <Cl_alarms_scanforAlarms+0x1230>)
   81fe8:	4798      	blx	r3
   81fea:	4603      	mov	r3, r0
   81fec:	4619      	mov	r1, r3
   81fee:	4b6b      	ldr	r3, [pc, #428]	; (8219c <Cl_alarms_scanforAlarms+0x1234>)
   81ff0:	681a      	ldr	r2, [r3, #0]
   81ff2:	4b72      	ldr	r3, [pc, #456]	; (821bc <Cl_alarms_scanforAlarms+0x1254>)
   81ff4:	4608      	mov	r0, r1
   81ff6:	4611      	mov	r1, r2
   81ff8:	4798      	blx	r3
   81ffa:	4603      	mov	r3, r0
   81ffc:	2b00      	cmp	r3, #0
   81ffe:	d030      	beq.n	82062 <Cl_alarms_scanforAlarms+0x10fa>
   82000:	4b63      	ldr	r3, [pc, #396]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   82002:	f893 3282 	ldrb.w	r3, [r3, #642]	; 0x282
   82006:	2b01      	cmp	r3, #1
   82008:	d02b      	beq.n	82062 <Cl_alarms_scanforAlarms+0x10fa>
// 				//temp1= Cl_alarmThresholdTable.ps3_low_threshold;
// 				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
// 				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
// 			}
// 			
			Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   8200a:	4b61      	ldr	r3, [pc, #388]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   8200c:	2201      	movs	r2, #1
   8200e:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=PS3_LOW_THRESHOLD;
   82012:	4b64      	ldr	r3, [pc, #400]	; (821a4 <Cl_alarms_scanforAlarms+0x123c>)
   82014:	781b      	ldrb	r3, [r3, #0]
   82016:	4a63      	ldr	r2, [pc, #396]	; (821a4 <Cl_alarms_scanforAlarms+0x123c>)
   82018:	3301      	adds	r3, #1
   8201a:	00db      	lsls	r3, r3, #3
   8201c:	4413      	add	r3, r2
   8201e:	2228      	movs	r2, #40	; 0x28
   82020:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_detected_count++;
   82022:	4b5b      	ldr	r3, [pc, #364]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   82024:	f893 328d 	ldrb.w	r3, [r3, #653]	; 0x28d
   82028:	3301      	adds	r3, #1
   8202a:	b2da      	uxtb	r2, r3
   8202c:	4b58      	ldr	r3, [pc, #352]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   8202e:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
			cl_alarm_triggered = true;
   82032:	4b5d      	ldr	r3, [pc, #372]	; (821a8 <Cl_alarms_scanforAlarms+0x1240>)
   82034:	2201      	movs	r2, #1
   82036:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = PS3_LOW_THRESHOLD;
   82038:	4b5c      	ldr	r3, [pc, #368]	; (821ac <Cl_alarms_scanforAlarms+0x1244>)
   8203a:	2228      	movs	r2, #40	; 0x28
   8203c:	701a      	strb	r2, [r3, #0]
			//Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8203e:	4b59      	ldr	r3, [pc, #356]	; (821a4 <Cl_alarms_scanforAlarms+0x123c>)
   82040:	781b      	ldrb	r3, [r3, #0]
   82042:	461a      	mov	r2, r3
   82044:	4b57      	ldr	r3, [pc, #348]	; (821a4 <Cl_alarms_scanforAlarms+0x123c>)
   82046:	4413      	add	r3, r2
   82048:	222e      	movs	r2, #46	; 0x2e
   8204a:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   8204c:	4b58      	ldr	r3, [pc, #352]	; (821b0 <Cl_alarms_scanforAlarms+0x1248>)
   8204e:	4798      	blx	r3
   82050:	4603      	mov	r3, r0
   82052:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   82054:	79fb      	ldrb	r3, [r7, #7]
   82056:	2b00      	cmp	r3, #0
   82058:	d002      	beq.n	82060 <Cl_alarms_scanforAlarms+0x10f8>
   8205a:	4b56      	ldr	r3, [pc, #344]	; (821b4 <Cl_alarms_scanforAlarms+0x124c>)
   8205c:	4798      	blx	r3
   8205e:	e009      	b.n	82074 <Cl_alarms_scanforAlarms+0x110c>
   82060:	e008      	b.n	82074 <Cl_alarms_scanforAlarms+0x110c>
		}
		
		else if (Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   82062:	4b4b      	ldr	r3, [pc, #300]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   82064:	f893 3282 	ldrb.w	r3, [r3, #642]	; 0x282
   82068:	2b01      	cmp	r3, #1
   8206a:	d103      	bne.n	82074 <Cl_alarms_scanforAlarms+0x110c>
		{
			Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   8206c:	4b48      	ldr	r3, [pc, #288]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   8206e:	2204      	movs	r2, #4
   82070:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
		}
	}
	
	
	if(Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_is_enabled)
   82074:	4b46      	ldr	r3, [pc, #280]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   82076:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
   8207a:	2b00      	cmp	r3, #0
   8207c:	d046      	beq.n	8210c <Cl_alarms_scanforAlarms+0x11a4>
	{

		//	if(temp1 > Cl_alarmThresholdTable.temp1_high_threshold)

			if(temp1 >  Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_upper)
   8207e:	4b44      	ldr	r3, [pc, #272]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   82080:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
   82084:	4b4e      	ldr	r3, [pc, #312]	; (821c0 <Cl_alarms_scanforAlarms+0x1258>)
   82086:	681a      	ldr	r2, [r3, #0]
   82088:	4b45      	ldr	r3, [pc, #276]	; (821a0 <Cl_alarms_scanforAlarms+0x1238>)
   8208a:	4608      	mov	r0, r1
   8208c:	4611      	mov	r1, r2
   8208e:	4798      	blx	r3
   82090:	4603      	mov	r3, r0
   82092:	2b00      	cmp	r3, #0
   82094:	d02a      	beq.n	820ec <Cl_alarms_scanforAlarms+0x1184>
				//Cl_Uint16Type temp_ps;
				//temp_ps=temp1;

				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T1=",3);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
				Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   82096:	4b3e      	ldr	r3, [pc, #248]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   82098:	2201      	movs	r2, #1
   8209a:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
				Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=TEMP1_HIGH_THRESHOLD;
   8209e:	4b41      	ldr	r3, [pc, #260]	; (821a4 <Cl_alarms_scanforAlarms+0x123c>)
   820a0:	781b      	ldrb	r3, [r3, #0]
   820a2:	4a40      	ldr	r2, [pc, #256]	; (821a4 <Cl_alarms_scanforAlarms+0x123c>)
   820a4:	3301      	adds	r3, #1
   820a6:	00db      	lsls	r3, r3, #3
   820a8:	4413      	add	r3, r2
   820aa:	220f      	movs	r2, #15
   820ac:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_detected_count++;
   820ae:	4b38      	ldr	r3, [pc, #224]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   820b0:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
   820b4:	3301      	adds	r3, #1
   820b6:	b2da      	uxtb	r2, r3
   820b8:	4b35      	ldr	r3, [pc, #212]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   820ba:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
				cl_alarm_triggered = true;
   820be:	4b3a      	ldr	r3, [pc, #232]	; (821a8 <Cl_alarms_scanforAlarms+0x1240>)
   820c0:	2201      	movs	r2, #1
   820c2:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = TEMP1_HIGH_THRESHOLD;
   820c4:	4b39      	ldr	r3, [pc, #228]	; (821ac <Cl_alarms_scanforAlarms+0x1244>)
   820c6:	220f      	movs	r2, #15
   820c8:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   820ca:	4b36      	ldr	r3, [pc, #216]	; (821a4 <Cl_alarms_scanforAlarms+0x123c>)
   820cc:	781b      	ldrb	r3, [r3, #0]
   820ce:	461a      	mov	r2, r3
   820d0:	4b34      	ldr	r3, [pc, #208]	; (821a4 <Cl_alarms_scanforAlarms+0x123c>)
   820d2:	4413      	add	r3, r2
   820d4:	222e      	movs	r2, #46	; 0x2e
   820d6:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   820d8:	4b35      	ldr	r3, [pc, #212]	; (821b0 <Cl_alarms_scanforAlarms+0x1248>)
   820da:	4798      	blx	r3
   820dc:	4603      	mov	r3, r0
   820de:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);	
   820e0:	79fb      	ldrb	r3, [r7, #7]
   820e2:	2b00      	cmp	r3, #0
   820e4:	d012      	beq.n	8210c <Cl_alarms_scanforAlarms+0x11a4>
   820e6:	4b33      	ldr	r3, [pc, #204]	; (821b4 <Cl_alarms_scanforAlarms+0x124c>)
   820e8:	4798      	blx	r3
   820ea:	e00f      	b.n	8210c <Cl_alarms_scanforAlarms+0x11a4>
			}
			else
			{
				if(Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   820ec:	4b28      	ldr	r3, [pc, #160]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   820ee:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
   820f2:	2b01      	cmp	r3, #1
   820f4:	d10a      	bne.n	8210c <Cl_alarms_scanforAlarms+0x11a4>
				{
					Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   820f6:	4b26      	ldr	r3, [pc, #152]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   820f8:	2204      	movs	r2, #4
   820fa:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_detected_count = 0;
   820fe:	4b24      	ldr	r3, [pc, #144]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   82100:	2200      	movs	r2, #0
   82102:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
					cl_alarm_triggered = false;
   82106:	4b28      	ldr	r3, [pc, #160]	; (821a8 <Cl_alarms_scanforAlarms+0x1240>)
   82108:	2200      	movs	r2, #0
   8210a:	701a      	strb	r2, [r3, #0]
			}
			
	}
	
	
	if(Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_is_enabled)
   8210c:	4b20      	ldr	r3, [pc, #128]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   8210e:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
   82112:	2b00      	cmp	r3, #0
   82114:	d066      	beq.n	821e4 <Cl_alarms_scanforAlarms+0x127c>
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_LOW",11);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp2,2);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
			//if(cl_sys_statbuffer.Temp1status > 4096)
		//	if(temp1 < Cl_alarmThresholdTable.temp1_low_threshold)
			if(temp1 < Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_lower)
   82116:	4b1e      	ldr	r3, [pc, #120]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   82118:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
   8211c:	4b28      	ldr	r3, [pc, #160]	; (821c0 <Cl_alarms_scanforAlarms+0x1258>)
   8211e:	681a      	ldr	r2, [r3, #0]
   82120:	4b26      	ldr	r3, [pc, #152]	; (821bc <Cl_alarms_scanforAlarms+0x1254>)
   82122:	4608      	mov	r0, r1
   82124:	4611      	mov	r1, r2
   82126:	4798      	blx	r3
   82128:	4603      	mov	r3, r0
   8212a:	2b00      	cmp	r3, #0
   8212c:	d04a      	beq.n	821c4 <Cl_alarms_scanforAlarms+0x125c>
				//Cl_Uint16Type temp_ps;
				//temp_ps=temp1;

				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T1=",3);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
				if(Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   8212e:	4b18      	ldr	r3, [pc, #96]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   82130:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   82134:	2b01      	cmp	r3, #1
   82136:	d055      	beq.n	821e4 <Cl_alarms_scanforAlarms+0x127c>
				{
				Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   82138:	4b15      	ldr	r3, [pc, #84]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   8213a:	2201      	movs	r2, #1
   8213c:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
				Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=TEMP1_LOW_THRESHOLD;
   82140:	4b18      	ldr	r3, [pc, #96]	; (821a4 <Cl_alarms_scanforAlarms+0x123c>)
   82142:	781b      	ldrb	r3, [r3, #0]
   82144:	4a17      	ldr	r2, [pc, #92]	; (821a4 <Cl_alarms_scanforAlarms+0x123c>)
   82146:	3301      	adds	r3, #1
   82148:	00db      	lsls	r3, r3, #3
   8214a:	4413      	add	r3, r2
   8214c:	2210      	movs	r2, #16
   8214e:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_detected_count++;
   82150:	4b0f      	ldr	r3, [pc, #60]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   82152:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
   82156:	3301      	adds	r3, #1
   82158:	b2da      	uxtb	r2, r3
   8215a:	4b0d      	ldr	r3, [pc, #52]	; (82190 <Cl_alarms_scanforAlarms+0x1228>)
   8215c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
				cl_alarm_triggered = true;
   82160:	4b11      	ldr	r3, [pc, #68]	; (821a8 <Cl_alarms_scanforAlarms+0x1240>)
   82162:	2201      	movs	r2, #1
   82164:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = TEMP1_LOW_THRESHOLD;
   82166:	4b11      	ldr	r3, [pc, #68]	; (821ac <Cl_alarms_scanforAlarms+0x1244>)
   82168:	2210      	movs	r2, #16
   8216a:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8216c:	4b0d      	ldr	r3, [pc, #52]	; (821a4 <Cl_alarms_scanforAlarms+0x123c>)
   8216e:	781b      	ldrb	r3, [r3, #0]
   82170:	461a      	mov	r2, r3
   82172:	4b0c      	ldr	r3, [pc, #48]	; (821a4 <Cl_alarms_scanforAlarms+0x123c>)
   82174:	4413      	add	r3, r2
   82176:	222e      	movs	r2, #46	; 0x2e
   82178:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   8217a:	4b0d      	ldr	r3, [pc, #52]	; (821b0 <Cl_alarms_scanforAlarms+0x1248>)
   8217c:	4798      	blx	r3
   8217e:	4603      	mov	r3, r0
   82180:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);
   82182:	79fb      	ldrb	r3, [r7, #7]
   82184:	2b00      	cmp	r3, #0
   82186:	d02d      	beq.n	821e4 <Cl_alarms_scanforAlarms+0x127c>
   82188:	4b0a      	ldr	r3, [pc, #40]	; (821b4 <Cl_alarms_scanforAlarms+0x124c>)
   8218a:	4798      	blx	r3
   8218c:	e02a      	b.n	821e4 <Cl_alarms_scanforAlarms+0x127c>
   8218e:	bf00      	nop
   82190:	20071e70 	.word	0x20071e70
   82194:	000a80f1 	.word	0x000a80f1
   82198:	447a0000 	.word	0x447a0000
   8219c:	2007191c 	.word	0x2007191c
   821a0:	000a8641 	.word	0x000a8641
   821a4:	20072480 	.word	0x20072480
   821a8:	20071909 	.word	0x20071909
   821ac:	200722a4 	.word	0x200722a4
   821b0:	00082965 	.word	0x00082965
   821b4:	00088b81 	.word	0x00088b81
   821b8:	200722a8 	.word	0x200722a8
   821bc:	000a867d 	.word	0x000a867d
   821c0:	20071920 	.word	0x20071920
				}
						
			}
			else
			{	
				if(Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   821c4:	4ba0      	ldr	r3, [pc, #640]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   821c6:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   821ca:	2b01      	cmp	r3, #1
   821cc:	d10a      	bne.n	821e4 <Cl_alarms_scanforAlarms+0x127c>
				{												
					Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   821ce:	4b9e      	ldr	r3, [pc, #632]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   821d0:	2204      	movs	r2, #4
   821d2:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
					Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_detected_count = 0;
   821d6:	4b9c      	ldr	r3, [pc, #624]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   821d8:	2200      	movs	r2, #0
   821da:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
					cl_alarm_triggered = false;	
   821de:	4b9b      	ldr	r3, [pc, #620]	; (8244c <Cl_alarms_scanforAlarms+0x14e4>)
   821e0:	2200      	movs	r2, #0
   821e2:	701a      	strb	r2, [r3, #0]
				}						
			}
	}
	
	
	if(Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_is_enabled)
   821e4:	4b98      	ldr	r3, [pc, #608]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   821e6:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
   821ea:	2b00      	cmp	r3, #0
   821ec:	d04a      	beq.n	82284 <Cl_alarms_scanforAlarms+0x131c>
		{
		//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_HIGH",11);
			//	Cl_Int16Type temp1,temp2;
			//	temp1 = (0.805 * cl_sys_statbuffer.Temp3status) - 1004 ;
			//	temp2 = 3000 + (temp1 * 1000)/382;
			if(temp3 > Cl_alarmThresholdTable.temp3_high_threshold)
   821ee:	4b98      	ldr	r3, [pc, #608]	; (82450 <Cl_alarms_scanforAlarms+0x14e8>)
   821f0:	6c99      	ldr	r1, [r3, #72]	; 0x48
   821f2:	4b98      	ldr	r3, [pc, #608]	; (82454 <Cl_alarms_scanforAlarms+0x14ec>)
   821f4:	681a      	ldr	r2, [r3, #0]
   821f6:	4b98      	ldr	r3, [pc, #608]	; (82458 <Cl_alarms_scanforAlarms+0x14f0>)
   821f8:	4608      	mov	r0, r1
   821fa:	4611      	mov	r1, r2
   821fc:	4798      	blx	r3
   821fe:	4603      	mov	r3, r0
   82200:	2b00      	cmp	r3, #0
   82202:	d02f      	beq.n	82264 <Cl_alarms_scanforAlarms+0x12fc>
			//	Cl_Uint16Type temp_ps;
				//temp_ps=temp3;

				///Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T3=",3);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
				if(Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   82204:	4b90      	ldr	r3, [pc, #576]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   82206:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
   8220a:	2b01      	cmp	r3, #1
   8220c:	d03a      	beq.n	82284 <Cl_alarms_scanforAlarms+0x131c>
				{
					Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   8220e:	4b8e      	ldr	r3, [pc, #568]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   82210:	2201      	movs	r2, #1
   82212:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=TEMP3_HIGH_THRESHOLD;
   82216:	4b91      	ldr	r3, [pc, #580]	; (8245c <Cl_alarms_scanforAlarms+0x14f4>)
   82218:	781b      	ldrb	r3, [r3, #0]
   8221a:	4a90      	ldr	r2, [pc, #576]	; (8245c <Cl_alarms_scanforAlarms+0x14f4>)
   8221c:	3301      	adds	r3, #1
   8221e:	00db      	lsls	r3, r3, #3
   82220:	4413      	add	r3, r2
   82222:	2213      	movs	r2, #19
   82224:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_detected_count++;
   82226:	4b88      	ldr	r3, [pc, #544]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   82228:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   8222c:	3301      	adds	r3, #1
   8222e:	b2da      	uxtb	r2, r3
   82230:	4b85      	ldr	r3, [pc, #532]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   82232:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
					cl_alarm_triggered = true;
   82236:	4b85      	ldr	r3, [pc, #532]	; (8244c <Cl_alarms_scanforAlarms+0x14e4>)
   82238:	2201      	movs	r2, #1
   8223a:	701a      	strb	r2, [r3, #0]
					
					cl_lastalarmid = TEMP3_HIGH_THRESHOLD;
   8223c:	4b88      	ldr	r3, [pc, #544]	; (82460 <Cl_alarms_scanforAlarms+0x14f8>)
   8223e:	2213      	movs	r2, #19
   82240:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82242:	4b86      	ldr	r3, [pc, #536]	; (8245c <Cl_alarms_scanforAlarms+0x14f4>)
   82244:	781b      	ldrb	r3, [r3, #0]
   82246:	461a      	mov	r2, r3
   82248:	4b84      	ldr	r3, [pc, #528]	; (8245c <Cl_alarms_scanforAlarms+0x14f4>)
   8224a:	4413      	add	r3, r2
   8224c:	222e      	movs	r2, #46	; 0x2e
   8224e:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82250:	4b84      	ldr	r3, [pc, #528]	; (82464 <Cl_alarms_scanforAlarms+0x14fc>)
   82252:	4798      	blx	r3
   82254:	4603      	mov	r3, r0
   82256:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   82258:	79fb      	ldrb	r3, [r7, #7]
   8225a:	2b00      	cmp	r3, #0
   8225c:	d012      	beq.n	82284 <Cl_alarms_scanforAlarms+0x131c>
   8225e:	4b82      	ldr	r3, [pc, #520]	; (82468 <Cl_alarms_scanforAlarms+0x1500>)
   82260:	4798      	blx	r3
   82262:	e00f      	b.n	82284 <Cl_alarms_scanforAlarms+0x131c>
			}
	
				else 
			//	else if (cl_sys_statbuffer.Temp3status > 400)
				{	
					if(Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   82264:	4b78      	ldr	r3, [pc, #480]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   82266:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
   8226a:	2b01      	cmp	r3, #1
   8226c:	d10a      	bne.n	82284 <Cl_alarms_scanforAlarms+0x131c>
					{												
						Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   8226e:	4b76      	ldr	r3, [pc, #472]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   82270:	2204      	movs	r2, #4
   82272:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
						Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_detected_count = 0;
   82276:	4b74      	ldr	r3, [pc, #464]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   82278:	2200      	movs	r2, #0
   8227a:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
						cl_alarm_triggered = false;	
   8227e:	4b73      	ldr	r3, [pc, #460]	; (8244c <Cl_alarms_scanforAlarms+0x14e4>)
   82280:	2200      	movs	r2, #0
   82282:	701a      	strb	r2, [r3, #0]
					}						
				}
				}
	if(Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_is_enabled)
   82284:	4b70      	ldr	r3, [pc, #448]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   82286:	f893 314e 	ldrb.w	r3, [r3, #334]	; 0x14e
   8228a:	2b00      	cmp	r3, #0
   8228c:	d04a      	beq.n	82324 <Cl_alarms_scanforAlarms+0x13bc>
	{
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_LOW",11);
			 if (temp3 < Cl_alarmThresholdTable.temp3_low_threshold)
   8228e:	4b70      	ldr	r3, [pc, #448]	; (82450 <Cl_alarms_scanforAlarms+0x14e8>)
   82290:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   82292:	4b70      	ldr	r3, [pc, #448]	; (82454 <Cl_alarms_scanforAlarms+0x14ec>)
   82294:	681a      	ldr	r2, [r3, #0]
   82296:	4b75      	ldr	r3, [pc, #468]	; (8246c <Cl_alarms_scanforAlarms+0x1504>)
   82298:	4608      	mov	r0, r1
   8229a:	4611      	mov	r1, r2
   8229c:	4798      	blx	r3
   8229e:	4603      	mov	r3, r0
   822a0:	2b00      	cmp	r3, #0
   822a2:	d02f      	beq.n	82304 <Cl_alarms_scanforAlarms+0x139c>
				//Cl_Uint16Type temp_ps;
				//temp_ps=temp3;

				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T3=",3);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
							if(Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   822a4:	4b68      	ldr	r3, [pc, #416]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   822a6:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
   822aa:	2b01      	cmp	r3, #1
   822ac:	d03a      	beq.n	82324 <Cl_alarms_scanforAlarms+0x13bc>
							{
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   822ae:	4b66      	ldr	r3, [pc, #408]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   822b0:	2201      	movs	r2, #1
   822b2:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
								Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=TEMP3_LOW_THRESHOLD;
   822b6:	4b69      	ldr	r3, [pc, #420]	; (8245c <Cl_alarms_scanforAlarms+0x14f4>)
   822b8:	781b      	ldrb	r3, [r3, #0]
   822ba:	4a68      	ldr	r2, [pc, #416]	; (8245c <Cl_alarms_scanforAlarms+0x14f4>)
   822bc:	3301      	adds	r3, #1
   822be:	00db      	lsls	r3, r3, #3
   822c0:	4413      	add	r3, r2
   822c2:	2214      	movs	r2, #20
   822c4:	809a      	strh	r2, [r3, #4]
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_detected_count++;
   822c6:	4b60      	ldr	r3, [pc, #384]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   822c8:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
   822cc:	3301      	adds	r3, #1
   822ce:	b2da      	uxtb	r2, r3
   822d0:	4b5d      	ldr	r3, [pc, #372]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   822d2:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
								cl_alarm_triggered = true;
   822d6:	4b5d      	ldr	r3, [pc, #372]	; (8244c <Cl_alarms_scanforAlarms+0x14e4>)
   822d8:	2201      	movs	r2, #1
   822da:	701a      	strb	r2, [r3, #0]
						
								cl_lastalarmid = TEMP3_LOW_THRESHOLD;
   822dc:	4b60      	ldr	r3, [pc, #384]	; (82460 <Cl_alarms_scanforAlarms+0x14f8>)
   822de:	2214      	movs	r2, #20
   822e0:	701a      	strb	r2, [r3, #0]
								Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   822e2:	4b5e      	ldr	r3, [pc, #376]	; (8245c <Cl_alarms_scanforAlarms+0x14f4>)
   822e4:	781b      	ldrb	r3, [r3, #0]
   822e6:	461a      	mov	r2, r3
   822e8:	4b5c      	ldr	r3, [pc, #368]	; (8245c <Cl_alarms_scanforAlarms+0x14f4>)
   822ea:	4413      	add	r3, r2
   822ec:	222e      	movs	r2, #46	; 0x2e
   822ee:	709a      	strb	r2, [r3, #2]
								Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   822f0:	4b5c      	ldr	r3, [pc, #368]	; (82464 <Cl_alarms_scanforAlarms+0x14fc>)
   822f2:	4798      	blx	r3
   822f4:	4603      	mov	r3, r0
   822f6:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_alarms_retcode);
   822f8:	79fb      	ldrb	r3, [r7, #7]
   822fa:	2b00      	cmp	r3, #0
   822fc:	d012      	beq.n	82324 <Cl_alarms_scanforAlarms+0x13bc>
   822fe:	4b5a      	ldr	r3, [pc, #360]	; (82468 <Cl_alarms_scanforAlarms+0x1500>)
   82300:	4798      	blx	r3
   82302:	e00f      	b.n	82324 <Cl_alarms_scanforAlarms+0x13bc>
							}
				}
				else
				{
									
							if(Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   82304:	4b50      	ldr	r3, [pc, #320]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   82306:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
   8230a:	2b01      	cmp	r3, #1
   8230c:	d10a      	bne.n	82324 <Cl_alarms_scanforAlarms+0x13bc>
							{
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   8230e:	4b4e      	ldr	r3, [pc, #312]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   82310:	2204      	movs	r2, #4
   82312:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_detected_count = 0;
   82316:	4b4c      	ldr	r3, [pc, #304]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   82318:	2200      	movs	r2, #0
   8231a:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
								cl_alarm_triggered = false;
   8231e:	4b4b      	ldr	r3, [pc, #300]	; (8244c <Cl_alarms_scanforAlarms+0x14e4>)
   82320:	2200      	movs	r2, #0
   82322:	701a      	strb	r2, [r3, #0]
				}

		}


if(Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_is_enabled)
   82324:	4b48      	ldr	r3, [pc, #288]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   82326:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
   8232a:	2b00      	cmp	r3, #0
   8232c:	d04b      	beq.n	823c6 <Cl_alarms_scanforAlarms+0x145e>
{
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_HIGH",11);
	//		Cl_Int16Type temp1,temp2;
	//		temp1 = (0.805 * cl_sys_statbuffer.Temp2status) - 1004 ;
	//		temp2 = 3000 + (temp1 * 1000)/382;
			if(temp2 > Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_upper)
   8232e:	4b46      	ldr	r3, [pc, #280]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   82330:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
   82334:	4b4e      	ldr	r3, [pc, #312]	; (82470 <Cl_alarms_scanforAlarms+0x1508>)
   82336:	681a      	ldr	r2, [r3, #0]
   82338:	4b47      	ldr	r3, [pc, #284]	; (82458 <Cl_alarms_scanforAlarms+0x14f0>)
   8233a:	4608      	mov	r0, r1
   8233c:	4611      	mov	r1, r2
   8233e:	4798      	blx	r3
   82340:	4603      	mov	r3, r0
   82342:	2b00      	cmp	r3, #0
   82344:	d02f      	beq.n	823a6 <Cl_alarms_scanforAlarms+0x143e>
	//Cl_Uint16Type temp_ps;
	//temp_ps=temp2;

	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T2=",3);
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
		if(Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   82346:	4b40      	ldr	r3, [pc, #256]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   82348:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
   8234c:	2b01      	cmp	r3, #1
   8234e:	d03a      	beq.n	823c6 <Cl_alarms_scanforAlarms+0x145e>
		{
			Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   82350:	4b3d      	ldr	r3, [pc, #244]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   82352:	2201      	movs	r2, #1
   82354:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=TEMP2_HIGH_THRESHOLD;
   82358:	4b40      	ldr	r3, [pc, #256]	; (8245c <Cl_alarms_scanforAlarms+0x14f4>)
   8235a:	781b      	ldrb	r3, [r3, #0]
   8235c:	4a3f      	ldr	r2, [pc, #252]	; (8245c <Cl_alarms_scanforAlarms+0x14f4>)
   8235e:	3301      	adds	r3, #1
   82360:	00db      	lsls	r3, r3, #3
   82362:	4413      	add	r3, r2
   82364:	2211      	movs	r2, #17
   82366:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_detected_count++;
   82368:	4b37      	ldr	r3, [pc, #220]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   8236a:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
   8236e:	3301      	adds	r3, #1
   82370:	b2da      	uxtb	r2, r3
   82372:	4b35      	ldr	r3, [pc, #212]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   82374:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
			cl_alarm_triggered = true;
   82378:	4b34      	ldr	r3, [pc, #208]	; (8244c <Cl_alarms_scanforAlarms+0x14e4>)
   8237a:	2201      	movs	r2, #1
   8237c:	701a      	strb	r2, [r3, #0]
			
			cl_lastalarmid = TEMP2_HIGH_THRESHOLD;
   8237e:	4b38      	ldr	r3, [pc, #224]	; (82460 <Cl_alarms_scanforAlarms+0x14f8>)
   82380:	2211      	movs	r2, #17
   82382:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82384:	4b35      	ldr	r3, [pc, #212]	; (8245c <Cl_alarms_scanforAlarms+0x14f4>)
   82386:	781b      	ldrb	r3, [r3, #0]
   82388:	461a      	mov	r2, r3
   8238a:	4b34      	ldr	r3, [pc, #208]	; (8245c <Cl_alarms_scanforAlarms+0x14f4>)
   8238c:	4413      	add	r3, r2
   8238e:	222e      	movs	r2, #46	; 0x2e
   82390:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82392:	4b34      	ldr	r3, [pc, #208]	; (82464 <Cl_alarms_scanforAlarms+0x14fc>)
   82394:	4798      	blx	r3
   82396:	4603      	mov	r3, r0
   82398:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   8239a:	79fb      	ldrb	r3, [r7, #7]
   8239c:	2b00      	cmp	r3, #0
   8239e:	d012      	beq.n	823c6 <Cl_alarms_scanforAlarms+0x145e>
   823a0:	4b31      	ldr	r3, [pc, #196]	; (82468 <Cl_alarms_scanforAlarms+0x1500>)
   823a2:	4798      	blx	r3
   823a4:	e00f      	b.n	823c6 <Cl_alarms_scanforAlarms+0x145e>
	}
	else 
	//	else if (cl_sys_statbuffer.Temp3status > 400)
	{

			if(Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   823a6:	4b28      	ldr	r3, [pc, #160]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   823a8:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
   823ac:	2b01      	cmp	r3, #1
   823ae:	d10a      	bne.n	823c6 <Cl_alarms_scanforAlarms+0x145e>
			{
				Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   823b0:	4b25      	ldr	r3, [pc, #148]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   823b2:	2204      	movs	r2, #4
   823b4:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
				Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_detected_count = 0;
   823b8:	4b23      	ldr	r3, [pc, #140]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   823ba:	2200      	movs	r2, #0
   823bc:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
				cl_alarm_triggered = false;
   823c0:	4b22      	ldr	r3, [pc, #136]	; (8244c <Cl_alarms_scanforAlarms+0x14e4>)
   823c2:	2200      	movs	r2, #0
   823c4:	701a      	strb	r2, [r3, #0]

		
		
	}
}
if(Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_is_enabled)
   823c6:	4b20      	ldr	r3, [pc, #128]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   823c8:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
   823cc:	2b00      	cmp	r3, #0
   823ce:	d061      	beq.n	82494 <Cl_alarms_scanforAlarms+0x152c>
{
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_LOW",11);
	 if (temp2 < Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_lower)//)Cl_alarmThresholdTable.temp2_low_threshold)
   823d0:	4b1d      	ldr	r3, [pc, #116]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   823d2:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
   823d6:	4b26      	ldr	r3, [pc, #152]	; (82470 <Cl_alarms_scanforAlarms+0x1508>)
   823d8:	681a      	ldr	r2, [r3, #0]
   823da:	4b24      	ldr	r3, [pc, #144]	; (8246c <Cl_alarms_scanforAlarms+0x1504>)
   823dc:	4608      	mov	r0, r1
   823de:	4611      	mov	r1, r2
   823e0:	4798      	blx	r3
   823e2:	4603      	mov	r3, r0
   823e4:	2b00      	cmp	r3, #0
   823e6:	d045      	beq.n	82474 <Cl_alarms_scanforAlarms+0x150c>
			//temp_ps=temp2;

			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T2=",3);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
		
		if(Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   823e8:	4b17      	ldr	r3, [pc, #92]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   823ea:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
   823ee:	2b01      	cmp	r3, #1
   823f0:	d050      	beq.n	82494 <Cl_alarms_scanforAlarms+0x152c>
		{
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   823f2:	4b15      	ldr	r3, [pc, #84]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   823f4:	2201      	movs	r2, #1
   823f6:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=TEMP2_LOW_THRESHOLD;
   823fa:	4b18      	ldr	r3, [pc, #96]	; (8245c <Cl_alarms_scanforAlarms+0x14f4>)
   823fc:	781b      	ldrb	r3, [r3, #0]
   823fe:	4a17      	ldr	r2, [pc, #92]	; (8245c <Cl_alarms_scanforAlarms+0x14f4>)
   82400:	3301      	adds	r3, #1
   82402:	00db      	lsls	r3, r3, #3
   82404:	4413      	add	r3, r2
   82406:	2212      	movs	r2, #18
   82408:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_detected_count++;
   8240a:	4b0f      	ldr	r3, [pc, #60]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   8240c:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
   82410:	3301      	adds	r3, #1
   82412:	b2da      	uxtb	r2, r3
   82414:	4b0c      	ldr	r3, [pc, #48]	; (82448 <Cl_alarms_scanforAlarms+0x14e0>)
   82416:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
			cl_alarm_triggered = true;
   8241a:	4b0c      	ldr	r3, [pc, #48]	; (8244c <Cl_alarms_scanforAlarms+0x14e4>)
   8241c:	2201      	movs	r2, #1
   8241e:	701a      	strb	r2, [r3, #0]
			
			cl_lastalarmid = TEMP2_LOW_THRESHOLD;
   82420:	4b0f      	ldr	r3, [pc, #60]	; (82460 <Cl_alarms_scanforAlarms+0x14f8>)
   82422:	2212      	movs	r2, #18
   82424:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82426:	4b0d      	ldr	r3, [pc, #52]	; (8245c <Cl_alarms_scanforAlarms+0x14f4>)
   82428:	781b      	ldrb	r3, [r3, #0]
   8242a:	461a      	mov	r2, r3
   8242c:	4b0b      	ldr	r3, [pc, #44]	; (8245c <Cl_alarms_scanforAlarms+0x14f4>)
   8242e:	4413      	add	r3, r2
   82430:	222e      	movs	r2, #46	; 0x2e
   82432:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82434:	4b0b      	ldr	r3, [pc, #44]	; (82464 <Cl_alarms_scanforAlarms+0x14fc>)
   82436:	4798      	blx	r3
   82438:	4603      	mov	r3, r0
   8243a:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   8243c:	79fb      	ldrb	r3, [r7, #7]
   8243e:	2b00      	cmp	r3, #0
   82440:	d028      	beq.n	82494 <Cl_alarms_scanforAlarms+0x152c>
   82442:	4b09      	ldr	r3, [pc, #36]	; (82468 <Cl_alarms_scanforAlarms+0x1500>)
   82444:	4798      	blx	r3
   82446:	e025      	b.n	82494 <Cl_alarms_scanforAlarms+0x152c>
   82448:	20071e70 	.word	0x20071e70
   8244c:	20071909 	.word	0x20071909
   82450:	200722a8 	.word	0x200722a8
   82454:	20071928 	.word	0x20071928
   82458:	000a8641 	.word	0x000a8641
   8245c:	20072480 	.word	0x20072480
   82460:	200722a4 	.word	0x200722a4
   82464:	00082965 	.word	0x00082965
   82468:	00088b81 	.word	0x00088b81
   8246c:	000a867d 	.word	0x000a867d
   82470:	20071924 	.word	0x20071924
		}
		}
	else
	//	else if (cl_sys_statbuffer.Temp3status > 400)
	{
		if(Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   82474:	4b8c      	ldr	r3, [pc, #560]	; (826a8 <Cl_alarms_scanforAlarms+0x1740>)
   82476:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
   8247a:	2b01      	cmp	r3, #1
   8247c:	d10a      	bne.n	82494 <Cl_alarms_scanforAlarms+0x152c>
		{
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   8247e:	4b8a      	ldr	r3, [pc, #552]	; (826a8 <Cl_alarms_scanforAlarms+0x1740>)
   82480:	2204      	movs	r2, #4
   82482:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_detected_count = 0;
   82486:	4b88      	ldr	r3, [pc, #544]	; (826a8 <Cl_alarms_scanforAlarms+0x1740>)
   82488:	2200      	movs	r2, #0
   8248a:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
			cl_alarm_triggered = false;
   8248e:	4b87      	ldr	r3, [pc, #540]	; (826ac <Cl_alarms_scanforAlarms+0x1744>)
   82490:	2200      	movs	r2, #0
   82492:	701a      	strb	r2, [r3, #0]
		}
	}
}
	if(Cl_alarms_alarms[COND_STATUS_HIGH].cl_is_enabled)
   82494:	4b84      	ldr	r3, [pc, #528]	; (826a8 <Cl_alarms_scanforAlarms+0x1740>)
   82496:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
   8249a:	2b00      	cmp	r3, #0
   8249c:	d04a      	beq.n	82534 <Cl_alarms_scanforAlarms+0x15cc>
		//cond = Cl_alarmThresholdTable.cond_high_threshold;
	//	cond1 = cond_final;

		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond,2);
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond1,2);
		if(cond_final > Cl_alarmThresholdTable.cond_high_threshold) //Cl_alarms_alarms[COND_STATUS_HIGH].cl_upper)
   8249e:	4b84      	ldr	r3, [pc, #528]	; (826b0 <Cl_alarms_scanforAlarms+0x1748>)
   824a0:	885b      	ldrh	r3, [r3, #2]
   824a2:	b21a      	sxth	r2, r3
   824a4:	4b83      	ldr	r3, [pc, #524]	; (826b4 <Cl_alarms_scanforAlarms+0x174c>)
   824a6:	4610      	mov	r0, r2
   824a8:	4798      	blx	r3
   824aa:	4601      	mov	r1, r0
   824ac:	4b82      	ldr	r3, [pc, #520]	; (826b8 <Cl_alarms_scanforAlarms+0x1750>)
   824ae:	681a      	ldr	r2, [r3, #0]
   824b0:	4b82      	ldr	r3, [pc, #520]	; (826bc <Cl_alarms_scanforAlarms+0x1754>)
   824b2:	4608      	mov	r0, r1
   824b4:	4611      	mov	r1, r2
   824b6:	4798      	blx	r3
   824b8:	4603      	mov	r3, r0
   824ba:	2b00      	cmp	r3, #0
   824bc:	d02a      	beq.n	82514 <Cl_alarms_scanforAlarms+0x15ac>
			///Cl_Uint16Type temp_ps;
			//temp_ps=cond_final;

			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CS=",3);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
			Cl_alarms_alarms[COND_STATUS_HIGH].cl_alarmstate = CL_ALARM_DETECTED;
   824be:	4b7a      	ldr	r3, [pc, #488]	; (826a8 <Cl_alarms_scanforAlarms+0x1740>)
   824c0:	2201      	movs	r2, #1
   824c2:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=COND_STATUS_HIGH;
   824c6:	4b7e      	ldr	r3, [pc, #504]	; (826c0 <Cl_alarms_scanforAlarms+0x1758>)
   824c8:	781b      	ldrb	r3, [r3, #0]
   824ca:	4a7d      	ldr	r2, [pc, #500]	; (826c0 <Cl_alarms_scanforAlarms+0x1758>)
   824cc:	3301      	adds	r3, #1
   824ce:	00db      	lsls	r3, r3, #3
   824d0:	4413      	add	r3, r2
   824d2:	2208      	movs	r2, #8
   824d4:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[COND_STATUS_HIGH].cl_detected_count++;
   824d6:	4b74      	ldr	r3, [pc, #464]	; (826a8 <Cl_alarms_scanforAlarms+0x1740>)
   824d8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
   824dc:	3301      	adds	r3, #1
   824de:	b2da      	uxtb	r2, r3
   824e0:	4b71      	ldr	r3, [pc, #452]	; (826a8 <Cl_alarms_scanforAlarms+0x1740>)
   824e2:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
			cl_alarm_triggered = true;
   824e6:	4b71      	ldr	r3, [pc, #452]	; (826ac <Cl_alarms_scanforAlarms+0x1744>)
   824e8:	2201      	movs	r2, #1
   824ea:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = COND_STATUS_HIGH;
   824ec:	4b75      	ldr	r3, [pc, #468]	; (826c4 <Cl_alarms_scanforAlarms+0x175c>)
   824ee:	2208      	movs	r2, #8
   824f0:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   824f2:	4b73      	ldr	r3, [pc, #460]	; (826c0 <Cl_alarms_scanforAlarms+0x1758>)
   824f4:	781b      	ldrb	r3, [r3, #0]
   824f6:	461a      	mov	r2, r3
   824f8:	4b71      	ldr	r3, [pc, #452]	; (826c0 <Cl_alarms_scanforAlarms+0x1758>)
   824fa:	4413      	add	r3, r2
   824fc:	222e      	movs	r2, #46	; 0x2e
   824fe:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82500:	4b71      	ldr	r3, [pc, #452]	; (826c8 <Cl_alarms_scanforAlarms+0x1760>)
   82502:	4798      	blx	r3
   82504:	4603      	mov	r3, r0
   82506:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   82508:	79fb      	ldrb	r3, [r7, #7]
   8250a:	2b00      	cmp	r3, #0
   8250c:	d012      	beq.n	82534 <Cl_alarms_scanforAlarms+0x15cc>
   8250e:	4b6f      	ldr	r3, [pc, #444]	; (826cc <Cl_alarms_scanforAlarms+0x1764>)
   82510:	4798      	blx	r3
   82512:	e00f      	b.n	82534 <Cl_alarms_scanforAlarms+0x15cc>
		}
		else
		{
			if(Cl_alarms_alarms[COND_STATUS_HIGH].cl_alarmstate == CL_ALARM_DETECTED)
   82514:	4b64      	ldr	r3, [pc, #400]	; (826a8 <Cl_alarms_scanforAlarms+0x1740>)
   82516:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
   8251a:	2b01      	cmp	r3, #1
   8251c:	d10a      	bne.n	82534 <Cl_alarms_scanforAlarms+0x15cc>
			{
				Cl_alarms_alarms[COND_STATUS_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   8251e:	4b62      	ldr	r3, [pc, #392]	; (826a8 <Cl_alarms_scanforAlarms+0x1740>)
   82520:	2204      	movs	r2, #4
   82522:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
				Cl_alarms_alarms[COND_STATUS_HIGH].cl_detected_count = 0;
   82526:	4b60      	ldr	r3, [pc, #384]	; (826a8 <Cl_alarms_scanforAlarms+0x1740>)
   82528:	2200      	movs	r2, #0
   8252a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
				cl_alarm_triggered = false;
   8252e:	4b5f      	ldr	r3, [pc, #380]	; (826ac <Cl_alarms_scanforAlarms+0x1744>)
   82530:	2200      	movs	r2, #0
   82532:	701a      	strb	r2, [r3, #0]
			}
		} 
		
	}
	
	if(Cl_alarms_alarms[COND_STATUS_LOW].cl_is_enabled)
   82534:	4b5c      	ldr	r3, [pc, #368]	; (826a8 <Cl_alarms_scanforAlarms+0x1740>)
   82536:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
   8253a:	2b00      	cmp	r3, #0
   8253c:	d04a      	beq.n	825d4 <Cl_alarms_scanforAlarms+0x166c>
		//Cl_Uint16Type cond,cond1;
		//cond = Cl_alarmThresholdTable.cond_low_threshold;
		//cond1 = cond_final;
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond,2);
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond1,2);
		if(cond_final < Cl_alarmThresholdTable.cond_low_threshold)
   8253e:	4b5c      	ldr	r3, [pc, #368]	; (826b0 <Cl_alarms_scanforAlarms+0x1748>)
   82540:	881b      	ldrh	r3, [r3, #0]
   82542:	b21a      	sxth	r2, r3
   82544:	4b5b      	ldr	r3, [pc, #364]	; (826b4 <Cl_alarms_scanforAlarms+0x174c>)
   82546:	4610      	mov	r0, r2
   82548:	4798      	blx	r3
   8254a:	4601      	mov	r1, r0
   8254c:	4b5a      	ldr	r3, [pc, #360]	; (826b8 <Cl_alarms_scanforAlarms+0x1750>)
   8254e:	681a      	ldr	r2, [r3, #0]
   82550:	4b5f      	ldr	r3, [pc, #380]	; (826d0 <Cl_alarms_scanforAlarms+0x1768>)
   82552:	4608      	mov	r0, r1
   82554:	4611      	mov	r1, r2
   82556:	4798      	blx	r3
   82558:	4603      	mov	r3, r0
   8255a:	2b00      	cmp	r3, #0
   8255c:	d02a      	beq.n	825b4 <Cl_alarms_scanforAlarms+0x164c>
			//Cl_Uint16Type temp_ps;
			//temp_ps=cond_final;

			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CS=",3);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
			Cl_alarms_alarms[COND_STATUS_LOW].cl_alarmstate = CL_ALARM_DETECTED;
   8255e:	4b52      	ldr	r3, [pc, #328]	; (826a8 <Cl_alarms_scanforAlarms+0x1740>)
   82560:	2201      	movs	r2, #1
   82562:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=COND_STATUS_LOW;
   82566:	4b56      	ldr	r3, [pc, #344]	; (826c0 <Cl_alarms_scanforAlarms+0x1758>)
   82568:	781b      	ldrb	r3, [r3, #0]
   8256a:	4a55      	ldr	r2, [pc, #340]	; (826c0 <Cl_alarms_scanforAlarms+0x1758>)
   8256c:	3301      	adds	r3, #1
   8256e:	00db      	lsls	r3, r3, #3
   82570:	4413      	add	r3, r2
   82572:	2207      	movs	r2, #7
   82574:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[COND_STATUS_LOW].cl_detected_count++;
   82576:	4b4c      	ldr	r3, [pc, #304]	; (826a8 <Cl_alarms_scanforAlarms+0x1740>)
   82578:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
   8257c:	3301      	adds	r3, #1
   8257e:	b2da      	uxtb	r2, r3
   82580:	4b49      	ldr	r3, [pc, #292]	; (826a8 <Cl_alarms_scanforAlarms+0x1740>)
   82582:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
			cl_alarm_triggered = true;
   82586:	4b49      	ldr	r3, [pc, #292]	; (826ac <Cl_alarms_scanforAlarms+0x1744>)
   82588:	2201      	movs	r2, #1
   8258a:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = COND_STATUS_LOW;
   8258c:	4b4d      	ldr	r3, [pc, #308]	; (826c4 <Cl_alarms_scanforAlarms+0x175c>)
   8258e:	2207      	movs	r2, #7
   82590:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82592:	4b4b      	ldr	r3, [pc, #300]	; (826c0 <Cl_alarms_scanforAlarms+0x1758>)
   82594:	781b      	ldrb	r3, [r3, #0]
   82596:	461a      	mov	r2, r3
   82598:	4b49      	ldr	r3, [pc, #292]	; (826c0 <Cl_alarms_scanforAlarms+0x1758>)
   8259a:	4413      	add	r3, r2
   8259c:	222e      	movs	r2, #46	; 0x2e
   8259e:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   825a0:	4b49      	ldr	r3, [pc, #292]	; (826c8 <Cl_alarms_scanforAlarms+0x1760>)
   825a2:	4798      	blx	r3
   825a4:	4603      	mov	r3, r0
   825a6:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   825a8:	79fb      	ldrb	r3, [r7, #7]
   825aa:	2b00      	cmp	r3, #0
   825ac:	d012      	beq.n	825d4 <Cl_alarms_scanforAlarms+0x166c>
   825ae:	4b47      	ldr	r3, [pc, #284]	; (826cc <Cl_alarms_scanforAlarms+0x1764>)
   825b0:	4798      	blx	r3
   825b2:	e00f      	b.n	825d4 <Cl_alarms_scanforAlarms+0x166c>
			
		}
		else
		{
			if(Cl_alarms_alarms[COND_STATUS_LOW].cl_alarmstate == CL_ALARM_DETECTED)
   825b4:	4b3c      	ldr	r3, [pc, #240]	; (826a8 <Cl_alarms_scanforAlarms+0x1740>)
   825b6:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
   825ba:	2b01      	cmp	r3, #1
   825bc:	d10a      	bne.n	825d4 <Cl_alarms_scanforAlarms+0x166c>
			{
				Cl_alarms_alarms[COND_STATUS_LOW].cl_alarmstate = CL_ALARM_INACTIVE;
   825be:	4b3a      	ldr	r3, [pc, #232]	; (826a8 <Cl_alarms_scanforAlarms+0x1740>)
   825c0:	2204      	movs	r2, #4
   825c2:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				Cl_alarms_alarms[COND_STATUS_LOW].cl_detected_count = 0;
   825c6:	4b38      	ldr	r3, [pc, #224]	; (826a8 <Cl_alarms_scanforAlarms+0x1740>)
   825c8:	2200      	movs	r2, #0
   825ca:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
				cl_alarm_triggered = false;
   825ce:	4b37      	ldr	r3, [pc, #220]	; (826ac <Cl_alarms_scanforAlarms+0x1744>)
   825d0:	2200      	movs	r2, #0
   825d2:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	
			
	if((Cl_alarms_alarms[COND_DAC_OPEN].cl_is_enabled) || (Cl_alarms_alarms[COND_DAC_RO].cl_is_enabled) || (Cl_alarms_alarms[COND_DAC_HIGH].cl_is_enabled) )
   825d4:	4b34      	ldr	r3, [pc, #208]	; (826a8 <Cl_alarms_scanforAlarms+0x1740>)
   825d6:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
   825da:	2b00      	cmp	r3, #0
   825dc:	d10a      	bne.n	825f4 <Cl_alarms_scanforAlarms+0x168c>
   825de:	4b32      	ldr	r3, [pc, #200]	; (826a8 <Cl_alarms_scanforAlarms+0x1740>)
   825e0:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
   825e4:	2b00      	cmp	r3, #0
   825e6:	d105      	bne.n	825f4 <Cl_alarms_scanforAlarms+0x168c>
   825e8:	4b2f      	ldr	r3, [pc, #188]	; (826a8 <Cl_alarms_scanforAlarms+0x1740>)
   825ea:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
   825ee:	2b00      	cmp	r3, #0
   825f0:	f000 80fa 	beq.w	827e8 <Cl_alarms_scanforAlarms+0x1880>
	{
			dac_cond_alarm = _NO_ALARM;
   825f4:	4b37      	ldr	r3, [pc, #220]	; (826d4 <Cl_alarms_scanforAlarms+0x176c>)
   825f6:	2200      	movs	r2, #0
   825f8:	701a      	strb	r2, [r3, #0]
			Cl_alarms_retcode =  cl_get_dac_conductivity_info(&dac_cond_alarm);
   825fa:	4836      	ldr	r0, [pc, #216]	; (826d4 <Cl_alarms_scanforAlarms+0x176c>)
   825fc:	4b36      	ldr	r3, [pc, #216]	; (826d8 <Cl_alarms_scanforAlarms+0x1770>)
   825fe:	4798      	blx	r3
   82600:	4603      	mov	r3, r0
   82602:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   82604:	79fb      	ldrb	r3, [r7, #7]
   82606:	2b00      	cmp	r3, #0
   82608:	d001      	beq.n	8260e <Cl_alarms_scanforAlarms+0x16a6>
   8260a:	4b30      	ldr	r3, [pc, #192]	; (826cc <Cl_alarms_scanforAlarms+0x1764>)
   8260c:	4798      	blx	r3
				switch(dac_cond_alarm)
   8260e:	4b31      	ldr	r3, [pc, #196]	; (826d4 <Cl_alarms_scanforAlarms+0x176c>)
   82610:	781b      	ldrb	r3, [r3, #0]
   82612:	2b0a      	cmp	r3, #10
   82614:	d062      	beq.n	826dc <Cl_alarms_scanforAlarms+0x1774>
   82616:	2b0b      	cmp	r3, #11
   82618:	f000 80a3 	beq.w	82762 <Cl_alarms_scanforAlarms+0x17fa>
   8261c:	2b09      	cmp	r3, #9
   8261e:	f040 80e3 	bne.w	827e8 <Cl_alarms_scanforAlarms+0x1880>
				{
					case COND_DAC_OPEN:
						Cl_alarms_alarms[dac_cond_alarm].cl_alarmstate = CL_ALARM_DETECTED;
   82622:	4b2c      	ldr	r3, [pc, #176]	; (826d4 <Cl_alarms_scanforAlarms+0x176c>)
   82624:	781b      	ldrb	r3, [r3, #0]
   82626:	4a20      	ldr	r2, [pc, #128]	; (826a8 <Cl_alarms_scanforAlarms+0x1740>)
   82628:	011b      	lsls	r3, r3, #4
   8262a:	4413      	add	r3, r2
   8262c:	2201      	movs	r2, #1
   8262e:	709a      	strb	r2, [r3, #2]
						Cl_alarms_alarms[COND_DAC_RO].cl_alarmstate = CL_ALARM_INACTIVE;
   82630:	4b1d      	ldr	r3, [pc, #116]	; (826a8 <Cl_alarms_scanforAlarms+0x1740>)
   82632:	2204      	movs	r2, #4
   82634:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
						Cl_alarms_alarms[COND_DAC_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   82638:	4b1b      	ldr	r3, [pc, #108]	; (826a8 <Cl_alarms_scanforAlarms+0x1740>)
   8263a:	2204      	movs	r2, #4
   8263c:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
						Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=dac_cond_alarm;
   82640:	4b1f      	ldr	r3, [pc, #124]	; (826c0 <Cl_alarms_scanforAlarms+0x1758>)
   82642:	781b      	ldrb	r3, [r3, #0]
   82644:	4618      	mov	r0, r3
   82646:	4b23      	ldr	r3, [pc, #140]	; (826d4 <Cl_alarms_scanforAlarms+0x176c>)
   82648:	781b      	ldrb	r3, [r3, #0]
   8264a:	b299      	uxth	r1, r3
   8264c:	4a1c      	ldr	r2, [pc, #112]	; (826c0 <Cl_alarms_scanforAlarms+0x1758>)
   8264e:	1c43      	adds	r3, r0, #1
   82650:	00db      	lsls	r3, r3, #3
   82652:	4413      	add	r3, r2
   82654:	460a      	mov	r2, r1
   82656:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[dac_cond_alarm].cl_detected_count++;
   82658:	4b1e      	ldr	r3, [pc, #120]	; (826d4 <Cl_alarms_scanforAlarms+0x176c>)
   8265a:	781b      	ldrb	r3, [r3, #0]
   8265c:	4912      	ldr	r1, [pc, #72]	; (826a8 <Cl_alarms_scanforAlarms+0x1740>)
   8265e:	011a      	lsls	r2, r3, #4
   82660:	440a      	add	r2, r1
   82662:	3208      	adds	r2, #8
   82664:	7952      	ldrb	r2, [r2, #5]
   82666:	3201      	adds	r2, #1
   82668:	b2d1      	uxtb	r1, r2
   8266a:	4a0f      	ldr	r2, [pc, #60]	; (826a8 <Cl_alarms_scanforAlarms+0x1740>)
   8266c:	011b      	lsls	r3, r3, #4
   8266e:	4413      	add	r3, r2
   82670:	3308      	adds	r3, #8
   82672:	460a      	mov	r2, r1
   82674:	715a      	strb	r2, [r3, #5]
						cl_alarm_triggered = true;
   82676:	4b0d      	ldr	r3, [pc, #52]	; (826ac <Cl_alarms_scanforAlarms+0x1744>)
   82678:	2201      	movs	r2, #1
   8267a:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = dac_cond_alarm;
   8267c:	4b15      	ldr	r3, [pc, #84]	; (826d4 <Cl_alarms_scanforAlarms+0x176c>)
   8267e:	781a      	ldrb	r2, [r3, #0]
   82680:	4b10      	ldr	r3, [pc, #64]	; (826c4 <Cl_alarms_scanforAlarms+0x175c>)
   82682:	701a      	strb	r2, [r3, #0]
						Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82684:	4b0e      	ldr	r3, [pc, #56]	; (826c0 <Cl_alarms_scanforAlarms+0x1758>)
   82686:	781b      	ldrb	r3, [r3, #0]
   82688:	461a      	mov	r2, r3
   8268a:	4b0d      	ldr	r3, [pc, #52]	; (826c0 <Cl_alarms_scanforAlarms+0x1758>)
   8268c:	4413      	add	r3, r2
   8268e:	222e      	movs	r2, #46	; 0x2e
   82690:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82692:	4b0d      	ldr	r3, [pc, #52]	; (826c8 <Cl_alarms_scanforAlarms+0x1760>)
   82694:	4798      	blx	r3
   82696:	4603      	mov	r3, r0
   82698:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   8269a:	79fb      	ldrb	r3, [r7, #7]
   8269c:	2b00      	cmp	r3, #0
   8269e:	d002      	beq.n	826a6 <Cl_alarms_scanforAlarms+0x173e>
   826a0:	4b0a      	ldr	r3, [pc, #40]	; (826cc <Cl_alarms_scanforAlarms+0x1764>)
   826a2:	4798      	blx	r3
					break;
   826a4:	e0a0      	b.n	827e8 <Cl_alarms_scanforAlarms+0x1880>
   826a6:	e09f      	b.n	827e8 <Cl_alarms_scanforAlarms+0x1880>
   826a8:	20071e70 	.word	0x20071e70
   826ac:	20071909 	.word	0x20071909
   826b0:	200722a8 	.word	0x200722a8
   826b4:	000a825d 	.word	0x000a825d
   826b8:	2007192c 	.word	0x2007192c
   826bc:	000a8641 	.word	0x000a8641
   826c0:	20072480 	.word	0x20072480
   826c4:	200722a4 	.word	0x200722a4
   826c8:	00082965 	.word	0x00082965
   826cc:	00088b81 	.word	0x00088b81
   826d0:	000a867d 	.word	0x000a867d
   826d4:	20071908 	.word	0x20071908
   826d8:	00082dd9 	.word	0x00082dd9
					case COND_DAC_RO:
						Cl_alarms_alarms[dac_cond_alarm].cl_alarmstate = CL_ALARM_DETECTED;
   826dc:	4b94      	ldr	r3, [pc, #592]	; (82930 <Cl_alarms_scanforAlarms+0x19c8>)
   826de:	781b      	ldrb	r3, [r3, #0]
   826e0:	4a94      	ldr	r2, [pc, #592]	; (82934 <Cl_alarms_scanforAlarms+0x19cc>)
   826e2:	011b      	lsls	r3, r3, #4
   826e4:	4413      	add	r3, r2
   826e6:	2201      	movs	r2, #1
   826e8:	709a      	strb	r2, [r3, #2]
						Cl_alarms_alarms[COND_DAC_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   826ea:	4b92      	ldr	r3, [pc, #584]	; (82934 <Cl_alarms_scanforAlarms+0x19cc>)
   826ec:	2204      	movs	r2, #4
   826ee:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
						Cl_alarms_alarms[COND_DAC_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   826f2:	4b90      	ldr	r3, [pc, #576]	; (82934 <Cl_alarms_scanforAlarms+0x19cc>)
   826f4:	2204      	movs	r2, #4
   826f6:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
						Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=dac_cond_alarm;
   826fa:	4b8f      	ldr	r3, [pc, #572]	; (82938 <Cl_alarms_scanforAlarms+0x19d0>)
   826fc:	781b      	ldrb	r3, [r3, #0]
   826fe:	4618      	mov	r0, r3
   82700:	4b8b      	ldr	r3, [pc, #556]	; (82930 <Cl_alarms_scanforAlarms+0x19c8>)
   82702:	781b      	ldrb	r3, [r3, #0]
   82704:	b299      	uxth	r1, r3
   82706:	4a8c      	ldr	r2, [pc, #560]	; (82938 <Cl_alarms_scanforAlarms+0x19d0>)
   82708:	1c43      	adds	r3, r0, #1
   8270a:	00db      	lsls	r3, r3, #3
   8270c:	4413      	add	r3, r2
   8270e:	460a      	mov	r2, r1
   82710:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[dac_cond_alarm].cl_detected_count++;
   82712:	4b87      	ldr	r3, [pc, #540]	; (82930 <Cl_alarms_scanforAlarms+0x19c8>)
   82714:	781b      	ldrb	r3, [r3, #0]
   82716:	4987      	ldr	r1, [pc, #540]	; (82934 <Cl_alarms_scanforAlarms+0x19cc>)
   82718:	011a      	lsls	r2, r3, #4
   8271a:	440a      	add	r2, r1
   8271c:	3208      	adds	r2, #8
   8271e:	7952      	ldrb	r2, [r2, #5]
   82720:	3201      	adds	r2, #1
   82722:	b2d1      	uxtb	r1, r2
   82724:	4a83      	ldr	r2, [pc, #524]	; (82934 <Cl_alarms_scanforAlarms+0x19cc>)
   82726:	011b      	lsls	r3, r3, #4
   82728:	4413      	add	r3, r2
   8272a:	3308      	adds	r3, #8
   8272c:	460a      	mov	r2, r1
   8272e:	715a      	strb	r2, [r3, #5]
						cl_alarm_triggered = true;
   82730:	4b82      	ldr	r3, [pc, #520]	; (8293c <Cl_alarms_scanforAlarms+0x19d4>)
   82732:	2201      	movs	r2, #1
   82734:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = dac_cond_alarm;
   82736:	4b7e      	ldr	r3, [pc, #504]	; (82930 <Cl_alarms_scanforAlarms+0x19c8>)
   82738:	781a      	ldrb	r2, [r3, #0]
   8273a:	4b81      	ldr	r3, [pc, #516]	; (82940 <Cl_alarms_scanforAlarms+0x19d8>)
   8273c:	701a      	strb	r2, [r3, #0]
						Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8273e:	4b7e      	ldr	r3, [pc, #504]	; (82938 <Cl_alarms_scanforAlarms+0x19d0>)
   82740:	781b      	ldrb	r3, [r3, #0]
   82742:	461a      	mov	r2, r3
   82744:	4b7c      	ldr	r3, [pc, #496]	; (82938 <Cl_alarms_scanforAlarms+0x19d0>)
   82746:	4413      	add	r3, r2
   82748:	222e      	movs	r2, #46	; 0x2e
   8274a:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   8274c:	4b7d      	ldr	r3, [pc, #500]	; (82944 <Cl_alarms_scanforAlarms+0x19dc>)
   8274e:	4798      	blx	r3
   82750:	4603      	mov	r3, r0
   82752:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   82754:	79fb      	ldrb	r3, [r7, #7]
   82756:	2b00      	cmp	r3, #0
   82758:	d002      	beq.n	82760 <Cl_alarms_scanforAlarms+0x17f8>
   8275a:	4b7b      	ldr	r3, [pc, #492]	; (82948 <Cl_alarms_scanforAlarms+0x19e0>)
   8275c:	4798      	blx	r3
					break;
   8275e:	e043      	b.n	827e8 <Cl_alarms_scanforAlarms+0x1880>
   82760:	e042      	b.n	827e8 <Cl_alarms_scanforAlarms+0x1880>
					case COND_DAC_HIGH:
						Cl_alarms_alarms[dac_cond_alarm].cl_alarmstate = CL_ALARM_DETECTED;
   82762:	4b73      	ldr	r3, [pc, #460]	; (82930 <Cl_alarms_scanforAlarms+0x19c8>)
   82764:	781b      	ldrb	r3, [r3, #0]
   82766:	4a73      	ldr	r2, [pc, #460]	; (82934 <Cl_alarms_scanforAlarms+0x19cc>)
   82768:	011b      	lsls	r3, r3, #4
   8276a:	4413      	add	r3, r2
   8276c:	2201      	movs	r2, #1
   8276e:	709a      	strb	r2, [r3, #2]
						Cl_alarms_alarms[COND_DAC_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   82770:	4b70      	ldr	r3, [pc, #448]	; (82934 <Cl_alarms_scanforAlarms+0x19cc>)
   82772:	2204      	movs	r2, #4
   82774:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
						Cl_alarms_alarms[COND_DAC_RO].cl_alarmstate = CL_ALARM_INACTIVE;
   82778:	4b6e      	ldr	r3, [pc, #440]	; (82934 <Cl_alarms_scanforAlarms+0x19cc>)
   8277a:	2204      	movs	r2, #4
   8277c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
						Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=dac_cond_alarm;
   82780:	4b6d      	ldr	r3, [pc, #436]	; (82938 <Cl_alarms_scanforAlarms+0x19d0>)
   82782:	781b      	ldrb	r3, [r3, #0]
   82784:	4618      	mov	r0, r3
   82786:	4b6a      	ldr	r3, [pc, #424]	; (82930 <Cl_alarms_scanforAlarms+0x19c8>)
   82788:	781b      	ldrb	r3, [r3, #0]
   8278a:	b299      	uxth	r1, r3
   8278c:	4a6a      	ldr	r2, [pc, #424]	; (82938 <Cl_alarms_scanforAlarms+0x19d0>)
   8278e:	1c43      	adds	r3, r0, #1
   82790:	00db      	lsls	r3, r3, #3
   82792:	4413      	add	r3, r2
   82794:	460a      	mov	r2, r1
   82796:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[dac_cond_alarm].cl_detected_count++;
   82798:	4b65      	ldr	r3, [pc, #404]	; (82930 <Cl_alarms_scanforAlarms+0x19c8>)
   8279a:	781b      	ldrb	r3, [r3, #0]
   8279c:	4965      	ldr	r1, [pc, #404]	; (82934 <Cl_alarms_scanforAlarms+0x19cc>)
   8279e:	011a      	lsls	r2, r3, #4
   827a0:	440a      	add	r2, r1
   827a2:	3208      	adds	r2, #8
   827a4:	7952      	ldrb	r2, [r2, #5]
   827a6:	3201      	adds	r2, #1
   827a8:	b2d1      	uxtb	r1, r2
   827aa:	4a62      	ldr	r2, [pc, #392]	; (82934 <Cl_alarms_scanforAlarms+0x19cc>)
   827ac:	011b      	lsls	r3, r3, #4
   827ae:	4413      	add	r3, r2
   827b0:	3308      	adds	r3, #8
   827b2:	460a      	mov	r2, r1
   827b4:	715a      	strb	r2, [r3, #5]
						cl_alarm_triggered = true;
   827b6:	4b61      	ldr	r3, [pc, #388]	; (8293c <Cl_alarms_scanforAlarms+0x19d4>)
   827b8:	2201      	movs	r2, #1
   827ba:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = dac_cond_alarm;
   827bc:	4b5c      	ldr	r3, [pc, #368]	; (82930 <Cl_alarms_scanforAlarms+0x19c8>)
   827be:	781a      	ldrb	r2, [r3, #0]
   827c0:	4b5f      	ldr	r3, [pc, #380]	; (82940 <Cl_alarms_scanforAlarms+0x19d8>)
   827c2:	701a      	strb	r2, [r3, #0]
						Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   827c4:	4b5c      	ldr	r3, [pc, #368]	; (82938 <Cl_alarms_scanforAlarms+0x19d0>)
   827c6:	781b      	ldrb	r3, [r3, #0]
   827c8:	461a      	mov	r2, r3
   827ca:	4b5b      	ldr	r3, [pc, #364]	; (82938 <Cl_alarms_scanforAlarms+0x19d0>)
   827cc:	4413      	add	r3, r2
   827ce:	222e      	movs	r2, #46	; 0x2e
   827d0:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   827d2:	4b5c      	ldr	r3, [pc, #368]	; (82944 <Cl_alarms_scanforAlarms+0x19dc>)
   827d4:	4798      	blx	r3
   827d6:	4603      	mov	r3, r0
   827d8:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   827da:	79fb      	ldrb	r3, [r7, #7]
   827dc:	2b00      	cmp	r3, #0
   827de:	d002      	beq.n	827e6 <Cl_alarms_scanforAlarms+0x187e>
   827e0:	4b59      	ldr	r3, [pc, #356]	; (82948 <Cl_alarms_scanforAlarms+0x19e0>)
   827e2:	4798      	blx	r3

					break;
   827e4:	e7ff      	b.n	827e6 <Cl_alarms_scanforAlarms+0x187e>
   827e6:	bf00      	nop
			
		}
	}	*/


if (  gflow_en)//testing
   827e8:	4b58      	ldr	r3, [pc, #352]	; (8294c <Cl_alarms_scanforAlarms+0x19e4>)
   827ea:	781b      	ldrb	r3, [r3, #0]
   827ec:	2b00      	cmp	r3, #0
   827ee:	f000 8099 	beq.w	82924 <Cl_alarms_scanforAlarms+0x19bc>
{
	if((Cl_alarms_alarms[FLOW_NO_FLOW].cl_is_enabled)|| (Cl_alarms_alarms[FLOW_LOW_FLOWRATE].cl_is_enabled)|| (Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_is_enabled))
   827f2:	4b50      	ldr	r3, [pc, #320]	; (82934 <Cl_alarms_scanforAlarms+0x19cc>)
   827f4:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   827f8:	2b00      	cmp	r3, #0
   827fa:	d10a      	bne.n	82812 <Cl_alarms_scanforAlarms+0x18aa>
   827fc:	4b4d      	ldr	r3, [pc, #308]	; (82934 <Cl_alarms_scanforAlarms+0x19cc>)
   827fe:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   82802:	2b00      	cmp	r3, #0
   82804:	d105      	bne.n	82812 <Cl_alarms_scanforAlarms+0x18aa>
   82806:	4b4b      	ldr	r3, [pc, #300]	; (82934 <Cl_alarms_scanforAlarms+0x19cc>)
   82808:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
   8280c:	2b00      	cmp	r3, #0
   8280e:	f000 8089 	beq.w	82924 <Cl_alarms_scanforAlarms+0x19bc>
	{

		if(cl_sys_statbuffer.Flowstatus != prev_flowstatus )
   82812:	4b4f      	ldr	r3, [pc, #316]	; (82950 <Cl_alarms_scanforAlarms+0x19e8>)
   82814:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
   82818:	461a      	mov	r2, r3
   8281a:	4b4e      	ldr	r3, [pc, #312]	; (82954 <Cl_alarms_scanforAlarms+0x19ec>)
   8281c:	681b      	ldr	r3, [r3, #0]
   8281e:	429a      	cmp	r2, r3
   82820:	d00c      	beq.n	8283c <Cl_alarms_scanforAlarms+0x18d4>
		{
			// flow_watchdog = 1000000 ;
			 flow_watchdog = 0 ;
   82822:	4b4d      	ldr	r3, [pc, #308]	; (82958 <Cl_alarms_scanforAlarms+0x19f0>)
   82824:	2200      	movs	r2, #0
   82826:	601a      	str	r2, [r3, #0]
			 flow_count++;
   82828:	4b4c      	ldr	r3, [pc, #304]	; (8295c <Cl_alarms_scanforAlarms+0x19f4>)
   8282a:	681b      	ldr	r3, [r3, #0]
   8282c:	3301      	adds	r3, #1
   8282e:	4a4b      	ldr	r2, [pc, #300]	; (8295c <Cl_alarms_scanforAlarms+0x19f4>)
   82830:	6013      	str	r3, [r2, #0]
			 flow_count_rate++;
   82832:	4b4b      	ldr	r3, [pc, #300]	; (82960 <Cl_alarms_scanforAlarms+0x19f8>)
   82834:	681b      	ldr	r3, [r3, #0]
   82836:	3301      	adds	r3, #1
   82838:	4a49      	ldr	r2, [pc, #292]	; (82960 <Cl_alarms_scanforAlarms+0x19f8>)
   8283a:	6013      	str	r3, [r2, #0]
		//	if(flow_watchdog > 0)
		//	flow_watchdog--;
		}
		
			//if(flow_watchdog < 999400)static Cl_Uint32Type flowstatus_off_alarm_count = 0;static Cl_Uint32Type flowstatus_off_alarm_count = 0;
			if(flow_watchdog > 40 )
   8283c:	4b46      	ldr	r3, [pc, #280]	; (82958 <Cl_alarms_scanforAlarms+0x19f0>)
   8283e:	681b      	ldr	r3, [r3, #0]
   82840:	2b28      	cmp	r3, #40	; 0x28
   82842:	d932      	bls.n	828aa <Cl_alarms_scanforAlarms+0x1942>
			{
				if(Cl_alarms_alarms[FLOW_NO_FLOW].cl_alarmstate != CL_ALARM_DETECTED)
   82844:	4b3b      	ldr	r3, [pc, #236]	; (82934 <Cl_alarms_scanforAlarms+0x19cc>)
   82846:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
   8284a:	2b01      	cmp	r3, #1
   8284c:	d02d      	beq.n	828aa <Cl_alarms_scanforAlarms+0x1942>
				{
					Cl_alarms_alarms[FLOW_NO_FLOW].cl_alarmstate = CL_ALARM_DETECTED;
   8284e:	4b39      	ldr	r3, [pc, #228]	; (82934 <Cl_alarms_scanforAlarms+0x19cc>)
   82850:	2201      	movs	r2, #1
   82852:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=FLOW_NO_FLOW;
   82856:	4b38      	ldr	r3, [pc, #224]	; (82938 <Cl_alarms_scanforAlarms+0x19d0>)
   82858:	781b      	ldrb	r3, [r3, #0]
   8285a:	4a37      	ldr	r2, [pc, #220]	; (82938 <Cl_alarms_scanforAlarms+0x19d0>)
   8285c:	3301      	adds	r3, #1
   8285e:	00db      	lsls	r3, r3, #3
   82860:	4413      	add	r3, r2
   82862:	220c      	movs	r2, #12
   82864:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[FLOW_NO_FLOW].cl_detected_count++;
   82866:	4b33      	ldr	r3, [pc, #204]	; (82934 <Cl_alarms_scanforAlarms+0x19cc>)
   82868:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
   8286c:	3301      	adds	r3, #1
   8286e:	b2da      	uxtb	r2, r3
   82870:	4b30      	ldr	r3, [pc, #192]	; (82934 <Cl_alarms_scanforAlarms+0x19cc>)
   82872:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
					
					Cl_alarms_alarms[FLOW_NO_FLOW].cl_alarmstate = CL_ALARM_INACTIVE;
   82876:	4b2f      	ldr	r3, [pc, #188]	; (82934 <Cl_alarms_scanforAlarms+0x19cc>)
   82878:	2204      	movs	r2, #4
   8287a:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				
					cl_alarm_triggered = true;
   8287e:	4b2f      	ldr	r3, [pc, #188]	; (8293c <Cl_alarms_scanforAlarms+0x19d4>)
   82880:	2201      	movs	r2, #1
   82882:	701a      	strb	r2, [r3, #0]
					
					cl_lastalarmid = FLOW_NO_FLOW;
   82884:	4b2e      	ldr	r3, [pc, #184]	; (82940 <Cl_alarms_scanforAlarms+0x19d8>)
   82886:	220c      	movs	r2, #12
   82888:	701a      	strb	r2, [r3, #0]
			//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
					
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   8288a:	4b2b      	ldr	r3, [pc, #172]	; (82938 <Cl_alarms_scanforAlarms+0x19d0>)
   8288c:	781b      	ldrb	r3, [r3, #0]
   8288e:	461a      	mov	r2, r3
   82890:	4b29      	ldr	r3, [pc, #164]	; (82938 <Cl_alarms_scanforAlarms+0x19d0>)
   82892:	4413      	add	r3, r2
   82894:	222d      	movs	r2, #45	; 0x2d
   82896:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82898:	4b2a      	ldr	r3, [pc, #168]	; (82944 <Cl_alarms_scanforAlarms+0x19dc>)
   8289a:	4798      	blx	r3
   8289c:	4603      	mov	r3, r0
   8289e:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   828a0:	79fb      	ldrb	r3, [r7, #7]
   828a2:	2b00      	cmp	r3, #0
   828a4:	d001      	beq.n	828aa <Cl_alarms_scanforAlarms+0x1942>
   828a6:	4b28      	ldr	r3, [pc, #160]	; (82948 <Cl_alarms_scanforAlarms+0x19e0>)
   828a8:	4798      	blx	r3
					
				}
			}
			if(flow_count  > 2)
   828aa:	4b2c      	ldr	r3, [pc, #176]	; (8295c <Cl_alarms_scanforAlarms+0x19f4>)
   828ac:	681b      	ldr	r3, [r3, #0]
   828ae:	2b02      	cmp	r3, #2
   828b0:	d932      	bls.n	82918 <Cl_alarms_scanforAlarms+0x19b0>
			{
				
				
				
				if(Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_alarmstate != CL_ALARM_DETECTED)
   828b2:	4b20      	ldr	r3, [pc, #128]	; (82934 <Cl_alarms_scanforAlarms+0x19cc>)
   828b4:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
   828b8:	2b01      	cmp	r3, #1
   828ba:	d02d      	beq.n	82918 <Cl_alarms_scanforAlarms+0x19b0>
				{
					Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_alarmstate = CL_ALARM_DETECTED;
   828bc:	4b1d      	ldr	r3, [pc, #116]	; (82934 <Cl_alarms_scanforAlarms+0x19cc>)
   828be:	2201      	movs	r2, #1
   828c0:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=FLOW_HIGH_FLOWRATE;
   828c4:	4b1c      	ldr	r3, [pc, #112]	; (82938 <Cl_alarms_scanforAlarms+0x19d0>)
   828c6:	781b      	ldrb	r3, [r3, #0]
   828c8:	4a1b      	ldr	r2, [pc, #108]	; (82938 <Cl_alarms_scanforAlarms+0x19d0>)
   828ca:	3301      	adds	r3, #1
   828cc:	00db      	lsls	r3, r3, #3
   828ce:	4413      	add	r3, r2
   828d0:	220e      	movs	r2, #14
   828d2:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_detected_count++;
   828d4:	4b17      	ldr	r3, [pc, #92]	; (82934 <Cl_alarms_scanforAlarms+0x19cc>)
   828d6:	f893 30ed 	ldrb.w	r3, [r3, #237]	; 0xed
   828da:	3301      	adds	r3, #1
   828dc:	b2da      	uxtb	r2, r3
   828de:	4b15      	ldr	r3, [pc, #84]	; (82934 <Cl_alarms_scanforAlarms+0x19cc>)
   828e0:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
					
					Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_alarmstate = CL_ALARM_INACTIVE;
   828e4:	4b13      	ldr	r3, [pc, #76]	; (82934 <Cl_alarms_scanforAlarms+0x19cc>)
   828e6:	2204      	movs	r2, #4
   828e8:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
					
					cl_alarm_triggered = true;
   828ec:	4b13      	ldr	r3, [pc, #76]	; (8293c <Cl_alarms_scanforAlarms+0x19d4>)
   828ee:	2201      	movs	r2, #1
   828f0:	701a      	strb	r2, [r3, #0]
					
					cl_lastalarmid = FLOW_HIGH_FLOWRATE;
   828f2:	4b13      	ldr	r3, [pc, #76]	; (82940 <Cl_alarms_scanforAlarms+0x19d8>)
   828f4:	220e      	movs	r2, #14
   828f6:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   828f8:	4b0f      	ldr	r3, [pc, #60]	; (82938 <Cl_alarms_scanforAlarms+0x19d0>)
   828fa:	781b      	ldrb	r3, [r3, #0]
   828fc:	461a      	mov	r2, r3
   828fe:	4b0e      	ldr	r3, [pc, #56]	; (82938 <Cl_alarms_scanforAlarms+0x19d0>)
   82900:	4413      	add	r3, r2
   82902:	222d      	movs	r2, #45	; 0x2d
   82904:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82906:	4b0f      	ldr	r3, [pc, #60]	; (82944 <Cl_alarms_scanforAlarms+0x19dc>)
   82908:	4798      	blx	r3
   8290a:	4603      	mov	r3, r0
   8290c:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   8290e:	79fb      	ldrb	r3, [r7, #7]
   82910:	2b00      	cmp	r3, #0
   82912:	d001      	beq.n	82918 <Cl_alarms_scanforAlarms+0x19b0>
   82914:	4b0c      	ldr	r3, [pc, #48]	; (82948 <Cl_alarms_scanforAlarms+0x19e0>)
   82916:	4798      	blx	r3
					
				}
				
			}
		
		prev_flowstatus = cl_sys_statbuffer.Flowstatus;
   82918:	4b0d      	ldr	r3, [pc, #52]	; (82950 <Cl_alarms_scanforAlarms+0x19e8>)
   8291a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
   8291e:	461a      	mov	r2, r3
   82920:	4b0c      	ldr	r3, [pc, #48]	; (82954 <Cl_alarms_scanforAlarms+0x19ec>)
   82922:	601a      	str	r2, [r3, #0]

	}
}
	
				 
		return CL_OK;
   82924:	2300      	movs	r3, #0
}
   82926:	4618      	mov	r0, r3
   82928:	3708      	adds	r7, #8
   8292a:	46bd      	mov	sp, r7
   8292c:	bd80      	pop	{r7, pc}
   8292e:	bf00      	nop
   82930:	20071908 	.word	0x20071908
   82934:	20071e70 	.word	0x20071e70
   82938:	20072480 	.word	0x20072480
   8293c:	20071909 	.word	0x20071909
   82940:	200722a4 	.word	0x200722a4
   82944:	00082965 	.word	0x00082965
   82948:	00088b81 	.word	0x00088b81
   8294c:	20071b9d 	.word	0x20071b9d
   82950:	200723d8 	.word	0x200723d8
   82954:	200718f8 	.word	0x200718f8
   82958:	200718fc 	.word	0x200718fc
   8295c:	20071900 	.word	0x20071900
   82960:	20071904 	.word	0x20071904

00082964 <Cl_UpdateMacAlarmEventTable>:
 * \return CL_OK on success. 
 * \Globals used : Cl_MacEventQueue1
 */

Cl_ReturnCodeType Cl_UpdateMacAlarmEventTable(void)
{
   82964:	b480      	push	{r7}
   82966:	af00      	add	r7, sp, #0
		Cl_MacEventQueue1.Cl_MacNewEvent = true;
		Cl_MacEventQueue1.Cl_MacNewEventcount++;
	}
	*/
	
	if((cl_alarm_triggered == true) &&( Cl_MacEventQueue4.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX ))
   82968:	4b0b      	ldr	r3, [pc, #44]	; (82998 <Cl_UpdateMacAlarmEventTable+0x34>)
   8296a:	781b      	ldrb	r3, [r3, #0]
   8296c:	2b00      	cmp	r3, #0
   8296e:	d00c      	beq.n	8298a <Cl_UpdateMacAlarmEventTable+0x26>
   82970:	4b0a      	ldr	r3, [pc, #40]	; (8299c <Cl_UpdateMacAlarmEventTable+0x38>)
   82972:	781b      	ldrb	r3, [r3, #0]
   82974:	2b09      	cmp	r3, #9
   82976:	d808      	bhi.n	8298a <Cl_UpdateMacAlarmEventTable+0x26>


	{
		Cl_MacEventQueue4.Cl_MacNewEvent = true;
   82978:	4b08      	ldr	r3, [pc, #32]	; (8299c <Cl_UpdateMacAlarmEventTable+0x38>)
   8297a:	2201      	movs	r2, #1
   8297c:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueue4.Cl_MacNewEventcount++;
   8297e:	4b07      	ldr	r3, [pc, #28]	; (8299c <Cl_UpdateMacAlarmEventTable+0x38>)
   82980:	781b      	ldrb	r3, [r3, #0]
   82982:	3301      	adds	r3, #1
   82984:	b2da      	uxtb	r2, r3
   82986:	4b05      	ldr	r3, [pc, #20]	; (8299c <Cl_UpdateMacAlarmEventTable+0x38>)
   82988:	701a      	strb	r2, [r3, #0]
	}
	
return CL_OK;
   8298a:	2300      	movs	r3, #0
}
   8298c:	4618      	mov	r0, r3
   8298e:	46bd      	mov	sp, r7
   82990:	f85d 7b04 	ldr.w	r7, [sp], #4
   82994:	4770      	bx	lr
   82996:	bf00      	nop
   82998:	20071909 	.word	0x20071909
   8299c:	20072480 	.word	0x20072480

000829a0 <Cl_UpdateMacBCEventTable>:


Cl_ReturnCodeType Cl_UpdateMacBCEventTable(void)
{
   829a0:	b480      	push	{r7}
   829a2:	af00      	add	r7, sp, #0
		Cl_MacEventQueue1.Cl_MacNewEvent = true;
		Cl_MacEventQueue1.Cl_MacNewEventcount++;
	}
	*/
	
	if((cl_alarm_triggered == true) &&( Cl_MacEventQueueBc.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX ))
   829a4:	4b0b      	ldr	r3, [pc, #44]	; (829d4 <Cl_UpdateMacBCEventTable+0x34>)
   829a6:	781b      	ldrb	r3, [r3, #0]
   829a8:	2b00      	cmp	r3, #0
   829aa:	d00c      	beq.n	829c6 <Cl_UpdateMacBCEventTable+0x26>
   829ac:	4b0a      	ldr	r3, [pc, #40]	; (829d8 <Cl_UpdateMacBCEventTable+0x38>)
   829ae:	781b      	ldrb	r3, [r3, #0]
   829b0:	2b09      	cmp	r3, #9
   829b2:	d808      	bhi.n	829c6 <Cl_UpdateMacBCEventTable+0x26>


	{
		Cl_MacEventQueueBc.Cl_MacNewEvent = true;
   829b4:	4b08      	ldr	r3, [pc, #32]	; (829d8 <Cl_UpdateMacBCEventTable+0x38>)
   829b6:	2201      	movs	r2, #1
   829b8:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueueBc.Cl_MacNewEventcount++;
   829ba:	4b07      	ldr	r3, [pc, #28]	; (829d8 <Cl_UpdateMacBCEventTable+0x38>)
   829bc:	781b      	ldrb	r3, [r3, #0]
   829be:	3301      	adds	r3, #1
   829c0:	b2da      	uxtb	r2, r3
   829c2:	4b05      	ldr	r3, [pc, #20]	; (829d8 <Cl_UpdateMacBCEventTable+0x38>)
   829c4:	701a      	strb	r2, [r3, #0]
	}
	
return CL_OK;
   829c6:	2300      	movs	r3, #0
}
   829c8:	4618      	mov	r0, r3
   829ca:	46bd      	mov	sp, r7
   829cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   829d0:	4770      	bx	lr
   829d2:	bf00      	nop
   829d4:	20071909 	.word	0x20071909
   829d8:	200726bc 	.word	0x200726bc

000829dc <Cl_AlarmConfigureAlarmType>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms
 */
Cl_ReturnCodeType Cl_AlarmConfigureAlarmType(Cl_NewAlarmIdType cl_alarm_id , Cl_AlarmTriggerType alarmtriggertype,float cl_upper,float  cl_lower,Cl_Uint8Type  count_threshold )
{
   829dc:	b480      	push	{r7}
   829de:	b085      	sub	sp, #20
   829e0:	af00      	add	r7, sp, #0
   829e2:	60ba      	str	r2, [r7, #8]
   829e4:	607b      	str	r3, [r7, #4]
   829e6:	4603      	mov	r3, r0
   829e8:	73fb      	strb	r3, [r7, #15]
   829ea:	460b      	mov	r3, r1
   829ec:	73bb      	strb	r3, [r7, #14]
	
Cl_alarms_alarms[cl_alarm_id].cl_triggertype = alarmtriggertype;
   829ee:	7bfb      	ldrb	r3, [r7, #15]
   829f0:	4a0f      	ldr	r2, [pc, #60]	; (82a30 <Cl_AlarmConfigureAlarmType+0x54>)
   829f2:	011b      	lsls	r3, r3, #4
   829f4:	4413      	add	r3, r2
   829f6:	7bba      	ldrb	r2, [r7, #14]
   829f8:	705a      	strb	r2, [r3, #1]
Cl_alarms_alarms[cl_alarm_id].cl_lower = cl_lower;
   829fa:	7bfb      	ldrb	r3, [r7, #15]
   829fc:	4a0c      	ldr	r2, [pc, #48]	; (82a30 <Cl_AlarmConfigureAlarmType+0x54>)
   829fe:	011b      	lsls	r3, r3, #4
   82a00:	4413      	add	r3, r2
   82a02:	3308      	adds	r3, #8
   82a04:	687a      	ldr	r2, [r7, #4]
   82a06:	601a      	str	r2, [r3, #0]
Cl_alarms_alarms[cl_alarm_id].cl_upper = cl_upper;
   82a08:	7bfb      	ldrb	r3, [r7, #15]
   82a0a:	4a09      	ldr	r2, [pc, #36]	; (82a30 <Cl_AlarmConfigureAlarmType+0x54>)
   82a0c:	011b      	lsls	r3, r3, #4
   82a0e:	4413      	add	r3, r2
   82a10:	68ba      	ldr	r2, [r7, #8]
   82a12:	605a      	str	r2, [r3, #4]
Cl_alarms_alarms[cl_alarm_id].count_threshold = count_threshold;
   82a14:	7bfb      	ldrb	r3, [r7, #15]
   82a16:	4a06      	ldr	r2, [pc, #24]	; (82a30 <Cl_AlarmConfigureAlarmType+0x54>)
   82a18:	011b      	lsls	r3, r3, #4
   82a1a:	4413      	add	r3, r2
   82a1c:	3308      	adds	r3, #8
   82a1e:	7e3a      	ldrb	r2, [r7, #24]
   82a20:	711a      	strb	r2, [r3, #4]

return CL_OK;
   82a22:	2300      	movs	r3, #0
		
}
   82a24:	4618      	mov	r0, r3
   82a26:	3714      	adds	r7, #20
   82a28:	46bd      	mov	sp, r7
   82a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
   82a2e:	4770      	bx	lr
   82a30:	20071e70 	.word	0x20071e70

00082a34 <Cl_AlarmActivateAlarms>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms
 */
Cl_ReturnCodeType Cl_AlarmActivateAlarms(Cl_NewAlarmIdType cl_alarm_id , Cl_BoolType status )
{
   82a34:	b580      	push	{r7, lr}
   82a36:	b084      	sub	sp, #16
   82a38:	af00      	add	r7, sp, #0
   82a3a:	4603      	mov	r3, r0
   82a3c:	460a      	mov	r2, r1
   82a3e:	71fb      	strb	r3, [r7, #7]
   82a40:	4613      	mov	r3, r2
   82a42:	71bb      	strb	r3, [r7, #6]
	Cl_ReturnCodeType cl_AlarmRetCode = CL_OK;
   82a44:	2300      	movs	r3, #0
   82a46:	73fb      	strb	r3, [r7, #15]
	
	if((cl_alarm_id > _NO_ALARM) && (cl_alarm_id < _ALARM_MAX_ID))
   82a48:	79fb      	ldrb	r3, [r7, #7]
   82a4a:	2b00      	cmp	r3, #0
   82a4c:	d057      	beq.n	82afe <Cl_AlarmActivateAlarms+0xca>
   82a4e:	79fb      	ldrb	r3, [r7, #7]
   82a50:	2b42      	cmp	r3, #66	; 0x42
   82a52:	d854      	bhi.n	82afe <Cl_AlarmActivateAlarms+0xca>
	{

	if (	(cl_alarm_id == LEVELSWITCH_OFF_TO_ON) || (cl_alarm_id == LEVELSWITCH_ON_TO_OFF) || (cl_alarm_id == FPCURRENTSTATUS))
   82a54:	79fb      	ldrb	r3, [r7, #7]
   82a56:	2b3d      	cmp	r3, #61	; 0x3d
   82a58:	d005      	beq.n	82a66 <Cl_AlarmActivateAlarms+0x32>
   82a5a:	79fb      	ldrb	r3, [r7, #7]
   82a5c:	2b3e      	cmp	r3, #62	; 0x3e
   82a5e:	d002      	beq.n	82a66 <Cl_AlarmActivateAlarms+0x32>
   82a60:	79fb      	ldrb	r3, [r7, #7]
   82a62:	2b3c      	cmp	r3, #60	; 0x3c
   82a64:	d113      	bne.n	82a8e <Cl_AlarmActivateAlarms+0x5a>
			{
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = true;
   82a66:	79fb      	ldrb	r3, [r7, #7]
   82a68:	4a2b      	ldr	r2, [pc, #172]	; (82b18 <Cl_AlarmActivateAlarms+0xe4>)
   82a6a:	011b      	lsls	r3, r3, #4
   82a6c:	4413      	add	r3, r2
   82a6e:	3308      	adds	r3, #8
   82a70:	2201      	movs	r2, #1
   82a72:	719a      	strb	r2, [r3, #6]
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
   82a74:	79fb      	ldrb	r3, [r7, #7]
   82a76:	4a28      	ldr	r2, [pc, #160]	; (82b18 <Cl_AlarmActivateAlarms+0xe4>)
   82a78:	011b      	lsls	r3, r3, #4
   82a7a:	4413      	add	r3, r2
   82a7c:	2202      	movs	r2, #2
   82a7e:	709a      	strb	r2, [r3, #2]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   82a80:	79fb      	ldrb	r3, [r7, #7]
   82a82:	4a25      	ldr	r2, [pc, #148]	; (82b18 <Cl_AlarmActivateAlarms+0xe4>)
   82a84:	011b      	lsls	r3, r3, #4
   82a86:	4413      	add	r3, r2
   82a88:	3308      	adds	r3, #8
   82a8a:	2200      	movs	r2, #0
   82a8c:	715a      	strb	r2, [r3, #5]
				
			}
		if ( TEST_STUB_ENABLEGATE)
   82a8e:	4b23      	ldr	r3, [pc, #140]	; (82b1c <Cl_AlarmActivateAlarms+0xe8>)
   82a90:	781b      	ldrb	r3, [r3, #0]
   82a92:	2b00      	cmp	r3, #0
   82a94:	d032      	beq.n	82afc <Cl_AlarmActivateAlarms+0xc8>
		{
			Cl_alarms_alarms[cl_alarm_id].cl_alarmID = cl_alarm_id;
   82a96:	79fb      	ldrb	r3, [r7, #7]
   82a98:	4a1f      	ldr	r2, [pc, #124]	; (82b18 <Cl_AlarmActivateAlarms+0xe4>)
   82a9a:	011b      	lsls	r3, r3, #4
   82a9c:	4413      	add	r3, r2
   82a9e:	79fa      	ldrb	r2, [r7, #7]
   82aa0:	701a      	strb	r2, [r3, #0]
			if ( status == true)
   82aa2:	79bb      	ldrb	r3, [r7, #6]
   82aa4:	2b00      	cmp	r3, #0
   82aa6:	d014      	beq.n	82ad2 <Cl_AlarmActivateAlarms+0x9e>
			{
				
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = true;
   82aa8:	79fb      	ldrb	r3, [r7, #7]
   82aaa:	4a1b      	ldr	r2, [pc, #108]	; (82b18 <Cl_AlarmActivateAlarms+0xe4>)
   82aac:	011b      	lsls	r3, r3, #4
   82aae:	4413      	add	r3, r2
   82ab0:	3308      	adds	r3, #8
   82ab2:	2201      	movs	r2, #1
   82ab4:	719a      	strb	r2, [r3, #6]
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
   82ab6:	79fb      	ldrb	r3, [r7, #7]
   82ab8:	4a17      	ldr	r2, [pc, #92]	; (82b18 <Cl_AlarmActivateAlarms+0xe4>)
   82aba:	011b      	lsls	r3, r3, #4
   82abc:	4413      	add	r3, r2
   82abe:	2202      	movs	r2, #2
   82ac0:	709a      	strb	r2, [r3, #2]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   82ac2:	79fb      	ldrb	r3, [r7, #7]
   82ac4:	4a14      	ldr	r2, [pc, #80]	; (82b18 <Cl_AlarmActivateAlarms+0xe4>)
   82ac6:	011b      	lsls	r3, r3, #4
   82ac8:	4413      	add	r3, r2
   82aca:	3308      	adds	r3, #8
   82acc:	2200      	movs	r2, #0
   82ace:	715a      	strb	r2, [r3, #5]
   82ad0:	e014      	b.n	82afc <Cl_AlarmActivateAlarms+0xc8>
				
			}
			else
			{
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = false;
   82ad2:	79fb      	ldrb	r3, [r7, #7]
   82ad4:	4a10      	ldr	r2, [pc, #64]	; (82b18 <Cl_AlarmActivateAlarms+0xe4>)
   82ad6:	011b      	lsls	r3, r3, #4
   82ad8:	4413      	add	r3, r2
   82ada:	3308      	adds	r3, #8
   82adc:	2200      	movs	r2, #0
   82ade:	719a      	strb	r2, [r3, #6]
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_INACTIVE;
   82ae0:	79fb      	ldrb	r3, [r7, #7]
   82ae2:	4a0d      	ldr	r2, [pc, #52]	; (82b18 <Cl_AlarmActivateAlarms+0xe4>)
   82ae4:	011b      	lsls	r3, r3, #4
   82ae6:	4413      	add	r3, r2
   82ae8:	2204      	movs	r2, #4
   82aea:	709a      	strb	r2, [r3, #2]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   82aec:	79fb      	ldrb	r3, [r7, #7]
   82aee:	4a0a      	ldr	r2, [pc, #40]	; (82b18 <Cl_AlarmActivateAlarms+0xe4>)
   82af0:	011b      	lsls	r3, r3, #4
   82af2:	4413      	add	r3, r2
   82af4:	3308      	adds	r3, #8
   82af6:	2200      	movs	r2, #0
   82af8:	715a      	strb	r2, [r3, #5]
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = true;
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
				
			}
		if ( TEST_STUB_ENABLEGATE)
   82afa:	e002      	b.n	82b02 <Cl_AlarmActivateAlarms+0xce>
   82afc:	e001      	b.n	82b02 <Cl_AlarmActivateAlarms+0xce>
		}
		
	}
	else
	{
		cl_AlarmRetCode = CL_ERROR;
   82afe:	2304      	movs	r3, #4
   82b00:	73fb      	strb	r3, [r7, #15]
	}
	
	

	ASSERT_ERROR(cl_AlarmRetCode);
   82b02:	7bfb      	ldrb	r3, [r7, #15]
   82b04:	2b00      	cmp	r3, #0
   82b06:	d001      	beq.n	82b0c <Cl_AlarmActivateAlarms+0xd8>
   82b08:	4b05      	ldr	r3, [pc, #20]	; (82b20 <Cl_AlarmActivateAlarms+0xec>)
   82b0a:	4798      	blx	r3
	
	return(cl_AlarmRetCode);
   82b0c:	7bfb      	ldrb	r3, [r7, #15]
	
	
}
   82b0e:	4618      	mov	r0, r3
   82b10:	3710      	adds	r7, #16
   82b12:	46bd      	mov	sp, r7
   82b14:	bd80      	pop	{r7, pc}
   82b16:	bf00      	nop
   82b18:	20071e70 	.word	0x20071e70
   82b1c:	20070be8 	.word	0x20070be8
   82b20:	00088b81 	.word	0x00088b81

00082b24 <Cl_AlarmResetAlarm>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms
 */
Cl_ReturnCodeType Cl_AlarmResetAlarm(Cl_NewAlarmIdType cl_alarm_id )
{
   82b24:	b480      	push	{r7}
   82b26:	b085      	sub	sp, #20
   82b28:	af00      	add	r7, sp, #0
   82b2a:	4603      	mov	r3, r0
   82b2c:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_AlarmRetCode = CL_OK;
   82b2e:	2300      	movs	r3, #0
   82b30:	73fb      	strb	r3, [r7, #15]
		if((cl_alarm_id > _NO_ALARM) && (cl_alarm_id < _ALARM_MAX_ID))
   82b32:	79fb      	ldrb	r3, [r7, #7]
   82b34:	2b00      	cmp	r3, #0
   82b36:	d00b      	beq.n	82b50 <Cl_AlarmResetAlarm+0x2c>
   82b38:	79fb      	ldrb	r3, [r7, #7]
   82b3a:	2b42      	cmp	r3, #66	; 0x42
   82b3c:	d808      	bhi.n	82b50 <Cl_AlarmResetAlarm+0x2c>
		{
					
					{
						
						Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
   82b3e:	79fb      	ldrb	r3, [r7, #7]
   82b40:	4a08      	ldr	r2, [pc, #32]	; (82b64 <Cl_AlarmResetAlarm+0x40>)
   82b42:	011b      	lsls	r3, r3, #4
   82b44:	4413      	add	r3, r2
   82b46:	2202      	movs	r2, #2
   82b48:	709a      	strb	r2, [r3, #2]
						cl_AlarmRetCode = CL_OK;
   82b4a:	2300      	movs	r3, #0
   82b4c:	73fb      	strb	r3, [r7, #15]
   82b4e:	e001      	b.n	82b54 <Cl_AlarmResetAlarm+0x30>
					}
			
		}else
		{
			 cl_AlarmRetCode = CL_ERROR;
   82b50:	2304      	movs	r3, #4
   82b52:	73fb      	strb	r3, [r7, #15]
		}
	
		
	
	return(cl_AlarmRetCode);
   82b54:	7bfb      	ldrb	r3, [r7, #15]
	
	
}
   82b56:	4618      	mov	r0, r3
   82b58:	3714      	adds	r7, #20
   82b5a:	46bd      	mov	sp, r7
   82b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
   82b60:	4770      	bx	lr
   82b62:	bf00      	nop
   82b64:	20071e70 	.word	0x20071e70

00082b68 <Cl_CheckBcEvent>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms
 */
  
  
 Cl_ReturnCodeType Cl_CheckBcEvent(){
   82b68:	b580      	push	{r7, lr}
   82b6a:	af00      	add	r7, sp, #0

	 
	 if(Cl_alarms_alarms[FPCURRENTSTATUS].cl_is_enabled)
   82b6c:	4b1f      	ldr	r3, [pc, #124]	; (82bec <Cl_CheckBcEvent+0x84>)
   82b6e:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
   82b72:	2b00      	cmp	r3, #0
   82b74:	d038      	beq.n	82be8 <Cl_CheckBcEvent+0x80>
	 {			//FPcurrentstatus_prev = cl_sys_statbuffer.FPcurrentstatus;
		 if(cl_sys_statbuffer.FPcurrentstatus == 1 && FPcurrentstatus_prev == 0 )
   82b76:	4b1e      	ldr	r3, [pc, #120]	; (82bf0 <Cl_CheckBcEvent+0x88>)
   82b78:	8b9b      	ldrh	r3, [r3, #28]
   82b7a:	2b01      	cmp	r3, #1
   82b7c:	d127      	bne.n	82bce <Cl_CheckBcEvent+0x66>
   82b7e:	4b1d      	ldr	r3, [pc, #116]	; (82bf4 <Cl_CheckBcEvent+0x8c>)
   82b80:	881b      	ldrh	r3, [r3, #0]
   82b82:	2b00      	cmp	r3, #0
   82b84:	d123      	bne.n	82bce <Cl_CheckBcEvent+0x66>
		 {
			 
			 
			 Cl_alarms_alarms[FPCURRENTSTATUS].cl_alarmstate = CL_ALARM_DETECTED;
   82b86:	4b19      	ldr	r3, [pc, #100]	; (82bec <Cl_CheckBcEvent+0x84>)
   82b88:	2201      	movs	r2, #1
   82b8a:	f883 23c2 	strb.w	r2, [r3, #962]	; 0x3c2
			 Cl_MacEventQueueBc.Cl_MacEventData[Cl_MacEventQueueBc.Cl_MacNewEventcount][0]=FPCURRENTSTATUS;
   82b8e:	4b1a      	ldr	r3, [pc, #104]	; (82bf8 <Cl_CheckBcEvent+0x90>)
   82b90:	781b      	ldrb	r3, [r3, #0]
   82b92:	4a19      	ldr	r2, [pc, #100]	; (82bf8 <Cl_CheckBcEvent+0x90>)
   82b94:	3301      	adds	r3, #1
   82b96:	00db      	lsls	r3, r3, #3
   82b98:	4413      	add	r3, r2
   82b9a:	223c      	movs	r2, #60	; 0x3c
   82b9c:	809a      	strh	r2, [r3, #4]
			 Cl_alarms_alarms[FPCURRENTSTATUS].cl_detected_count++;
   82b9e:	4b13      	ldr	r3, [pc, #76]	; (82bec <Cl_CheckBcEvent+0x84>)
   82ba0:	f893 33cd 	ldrb.w	r3, [r3, #973]	; 0x3cd
   82ba4:	3301      	adds	r3, #1
   82ba6:	b2da      	uxtb	r2, r3
   82ba8:	4b10      	ldr	r3, [pc, #64]	; (82bec <Cl_CheckBcEvent+0x84>)
   82baa:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd
			 cl_alarm_triggered = true;
   82bae:	4b13      	ldr	r3, [pc, #76]	; (82bfc <Cl_CheckBcEvent+0x94>)
   82bb0:	2201      	movs	r2, #1
   82bb2:	701a      	strb	r2, [r3, #0]
			 cl_lastalarmid = FPCURRENTSTATUS;
   82bb4:	4b12      	ldr	r3, [pc, #72]	; (82c00 <Cl_CheckBcEvent+0x98>)
   82bb6:	223c      	movs	r2, #60	; 0x3c
   82bb8:	701a      	strb	r2, [r3, #0]
			// Cl_MacEventQueueBc.Cl_MacEvent[Cl_MacEventQueueBc.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
			 //Cl_UpdateMacBCEventTable();
			// ASSERT_ERROR(Cl_alarms_retcode);
			 Cl_MacEventQueueBc.Cl_MacEvent[Cl_MacEventQueueBc.Cl_MacNewEventcount] = EVT_ALERT_CS ;
   82bba:	4b0f      	ldr	r3, [pc, #60]	; (82bf8 <Cl_CheckBcEvent+0x90>)
   82bbc:	781b      	ldrb	r3, [r3, #0]
   82bbe:	461a      	mov	r2, r3
   82bc0:	4b0d      	ldr	r3, [pc, #52]	; (82bf8 <Cl_CheckBcEvent+0x90>)
   82bc2:	4413      	add	r3, r2
   82bc4:	222f      	movs	r2, #47	; 0x2f
   82bc6:	709a      	strb	r2, [r3, #2]
			 Cl_UpdateMacBCEventTable();//Cl_UpdateMacAlarmEventTable();
   82bc8:	4b0e      	ldr	r3, [pc, #56]	; (82c04 <Cl_CheckBcEvent+0x9c>)
   82bca:	4798      	blx	r3
   82bcc:	e007      	b.n	82bde <Cl_CheckBcEvent+0x76>
			 
		 }
		 else
		 {

			 Cl_alarms_alarms[FPCURRENTSTATUS].cl_alarmstate = CL_ALARM_INACTIVE;
   82bce:	4b07      	ldr	r3, [pc, #28]	; (82bec <Cl_CheckBcEvent+0x84>)
   82bd0:	2204      	movs	r2, #4
   82bd2:	f883 23c2 	strb.w	r2, [r3, #962]	; 0x3c2
			 Cl_alarms_alarms[FPCURRENTSTATUS].cl_detected_count = 0;
   82bd6:	4b05      	ldr	r3, [pc, #20]	; (82bec <Cl_CheckBcEvent+0x84>)
   82bd8:	2200      	movs	r2, #0
   82bda:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd

			 
		 }
		 FPcurrentstatus_prev = cl_sys_statbuffer.FPcurrentstatus;
   82bde:	4b04      	ldr	r3, [pc, #16]	; (82bf0 <Cl_CheckBcEvent+0x88>)
   82be0:	8b9b      	ldrh	r3, [r3, #28]
   82be2:	b29a      	uxth	r2, r3
   82be4:	4b03      	ldr	r3, [pc, #12]	; (82bf4 <Cl_CheckBcEvent+0x8c>)
   82be6:	801a      	strh	r2, [r3, #0]
		 
	 }
	 
 }
   82be8:	4618      	mov	r0, r3
   82bea:	bd80      	pop	{r7, pc}
   82bec:	20071e70 	.word	0x20071e70
   82bf0:	200723d8 	.word	0x200723d8
   82bf4:	2007190a 	.word	0x2007190a
   82bf8:	200726bc 	.word	0x200726bc
   82bfc:	20071909 	.word	0x20071909
   82c00:	200722a4 	.word	0x200722a4
   82c04:	000829a1 	.word	0x000829a1

00082c08 <Cl_Alarm_GetAlarmStatus>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms
 */
  
Cl_ReturnCodeType Cl_Alarm_GetAlarmStatus(Cl_NewAlarmIdType cl_alarm_id , Cl_BoolType* cl_status)
{
   82c08:	b580      	push	{r7, lr}
   82c0a:	b084      	sub	sp, #16
   82c0c:	af00      	add	r7, sp, #0
   82c0e:	4603      	mov	r3, r0
   82c10:	6039      	str	r1, [r7, #0]
   82c12:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_alarmRetCode = CL_OK;
   82c14:	2300      	movs	r3, #0
   82c16:	73fb      	strb	r3, [r7, #15]
	
	if((cl_alarm_id > _NO_ALARM) && (cl_alarm_id < _ALARM_MAX_ID))
   82c18:	79fb      	ldrb	r3, [r7, #7]
   82c1a:	2b00      	cmp	r3, #0
   82c1c:	d01a      	beq.n	82c54 <Cl_Alarm_GetAlarmStatus+0x4c>
   82c1e:	79fb      	ldrb	r3, [r7, #7]
   82c20:	2b42      	cmp	r3, #66	; 0x42
   82c22:	d817      	bhi.n	82c54 <Cl_Alarm_GetAlarmStatus+0x4c>
	{
	
		 if (Cl_alarms_alarms[cl_alarm_id].cl_alarmstate  == CL_ALARM_DETECTED ||  Cl_alarms_alarms[cl_alarm_id].cl_alarmstate == CL_ALARM_MUTE) 
   82c24:	79fb      	ldrb	r3, [r7, #7]
   82c26:	4a11      	ldr	r2, [pc, #68]	; (82c6c <Cl_Alarm_GetAlarmStatus+0x64>)
   82c28:	011b      	lsls	r3, r3, #4
   82c2a:	4413      	add	r3, r2
   82c2c:	789b      	ldrb	r3, [r3, #2]
   82c2e:	2b01      	cmp	r3, #1
   82c30:	d006      	beq.n	82c40 <Cl_Alarm_GetAlarmStatus+0x38>
   82c32:	79fb      	ldrb	r3, [r7, #7]
   82c34:	4a0d      	ldr	r2, [pc, #52]	; (82c6c <Cl_Alarm_GetAlarmStatus+0x64>)
   82c36:	011b      	lsls	r3, r3, #4
   82c38:	4413      	add	r3, r2
   82c3a:	789b      	ldrb	r3, [r3, #2]
   82c3c:	2b03      	cmp	r3, #3
   82c3e:	d103      	bne.n	82c48 <Cl_Alarm_GetAlarmStatus+0x40>
		 {
			 *cl_status = true;
   82c40:	683b      	ldr	r3, [r7, #0]
   82c42:	2201      	movs	r2, #1
   82c44:	701a      	strb	r2, [r3, #0]
   82c46:	e002      	b.n	82c4e <Cl_Alarm_GetAlarmStatus+0x46>
		 }
		 else
		 {
			 *cl_status = false;
   82c48:	683b      	ldr	r3, [r7, #0]
   82c4a:	2200      	movs	r2, #0
   82c4c:	701a      	strb	r2, [r3, #0]
		 }
		 
		 cl_alarmRetCode = CL_OK;
   82c4e:	2300      	movs	r3, #0
   82c50:	73fb      	strb	r3, [r7, #15]
   82c52:	e001      	b.n	82c58 <Cl_Alarm_GetAlarmStatus+0x50>
	}else
	{
		cl_alarmRetCode = CL_ERROR;
   82c54:	2304      	movs	r3, #4
   82c56:	73fb      	strb	r3, [r7, #15]
	}
	 
		
	ASSERT_ERROR(cl_alarmRetCode);
   82c58:	7bfb      	ldrb	r3, [r7, #15]
   82c5a:	2b00      	cmp	r3, #0
   82c5c:	d001      	beq.n	82c62 <Cl_Alarm_GetAlarmStatus+0x5a>
   82c5e:	4b04      	ldr	r3, [pc, #16]	; (82c70 <Cl_Alarm_GetAlarmStatus+0x68>)
   82c60:	4798      	blx	r3
	return cl_alarmRetCode;
   82c62:	7bfb      	ldrb	r3, [r7, #15]
	
}
   82c64:	4618      	mov	r0, r3
   82c66:	3710      	adds	r7, #16
   82c68:	46bd      	mov	sp, r7
   82c6a:	bd80      	pop	{r7, pc}
   82c6c:	20071e70 	.word	0x20071e70
   82c70:	00088b81 	.word	0x00088b81

00082c74 <Cl_Alarm_TriggerAlarm>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms,Cl_MacEventQueue1
 */

Cl_ReturnCodeType Cl_Alarm_TriggerAlarm(Cl_NewAlarmIdType cl_alarm_id , Cl_BoolType cl_status)
{
   82c74:	b580      	push	{r7, lr}
   82c76:	b084      	sub	sp, #16
   82c78:	af00      	add	r7, sp, #0
   82c7a:	4603      	mov	r3, r0
   82c7c:	460a      	mov	r2, r1
   82c7e:	71fb      	strb	r3, [r7, #7]
   82c80:	4613      	mov	r3, r2
   82c82:	71bb      	strb	r3, [r7, #6]
	Cl_ReturnCodeType cl_alarmRetCode = CL_OK;
   82c84:	2300      	movs	r3, #0
   82c86:	73fb      	strb	r3, [r7, #15]
	
if((cl_alarm_id > _NO_ALARM) && (cl_alarm_id < _ALARM_MAX_ID))
   82c88:	79fb      	ldrb	r3, [r7, #7]
   82c8a:	2b00      	cmp	r3, #0
   82c8c:	d060      	beq.n	82d50 <Cl_Alarm_TriggerAlarm+0xdc>
   82c8e:	79fb      	ldrb	r3, [r7, #7]
   82c90:	2b42      	cmp	r3, #66	; 0x42
   82c92:	d85d      	bhi.n	82d50 <Cl_Alarm_TriggerAlarm+0xdc>
{
			
			
	if(Cl_alarms_alarms[cl_alarm_id].cl_is_enabled)
   82c94:	79fb      	ldrb	r3, [r7, #7]
   82c96:	4a34      	ldr	r2, [pc, #208]	; (82d68 <Cl_Alarm_TriggerAlarm+0xf4>)
   82c98:	011b      	lsls	r3, r3, #4
   82c9a:	4413      	add	r3, r2
   82c9c:	3308      	adds	r3, #8
   82c9e:	799b      	ldrb	r3, [r3, #6]
   82ca0:	2b00      	cmp	r3, #0
   82ca2:	d052      	beq.n	82d4a <Cl_Alarm_TriggerAlarm+0xd6>
	{
			if(cl_status)
   82ca4:	79bb      	ldrb	r3, [r7, #6]
   82ca6:	2b00      	cmp	r3, #0
   82ca8:	d038      	beq.n	82d1c <Cl_Alarm_TriggerAlarm+0xa8>
			{
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_DETECTED;
   82caa:	79fb      	ldrb	r3, [r7, #7]
   82cac:	4a2e      	ldr	r2, [pc, #184]	; (82d68 <Cl_Alarm_TriggerAlarm+0xf4>)
   82cae:	011b      	lsls	r3, r3, #4
   82cb0:	4413      	add	r3, r2
   82cb2:	2201      	movs	r2, #1
   82cb4:	709a      	strb	r2, [r3, #2]
				Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=cl_alarm_id;
   82cb6:	4b2d      	ldr	r3, [pc, #180]	; (82d6c <Cl_Alarm_TriggerAlarm+0xf8>)
   82cb8:	781b      	ldrb	r3, [r3, #0]
   82cba:	79fa      	ldrb	r2, [r7, #7]
   82cbc:	b291      	uxth	r1, r2
   82cbe:	4a2b      	ldr	r2, [pc, #172]	; (82d6c <Cl_Alarm_TriggerAlarm+0xf8>)
   82cc0:	3301      	adds	r3, #1
   82cc2:	00db      	lsls	r3, r3, #3
   82cc4:	4413      	add	r3, r2
   82cc6:	460a      	mov	r2, r1
   82cc8:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count++;
   82cca:	79fb      	ldrb	r3, [r7, #7]
   82ccc:	4926      	ldr	r1, [pc, #152]	; (82d68 <Cl_Alarm_TriggerAlarm+0xf4>)
   82cce:	011a      	lsls	r2, r3, #4
   82cd0:	440a      	add	r2, r1
   82cd2:	3208      	adds	r2, #8
   82cd4:	7952      	ldrb	r2, [r2, #5]
   82cd6:	3201      	adds	r2, #1
   82cd8:	b2d1      	uxtb	r1, r2
   82cda:	4a23      	ldr	r2, [pc, #140]	; (82d68 <Cl_Alarm_TriggerAlarm+0xf4>)
   82cdc:	011b      	lsls	r3, r3, #4
   82cde:	4413      	add	r3, r2
   82ce0:	3308      	adds	r3, #8
   82ce2:	460a      	mov	r2, r1
   82ce4:	715a      	strb	r2, [r3, #5]
				cl_alarm_triggered = true;
   82ce6:	4b22      	ldr	r3, [pc, #136]	; (82d70 <Cl_Alarm_TriggerAlarm+0xfc>)
   82ce8:	2201      	movs	r2, #1
   82cea:	701a      	strb	r2, [r3, #0]
				
				cl_lastalarmid = cl_alarm_id;
   82cec:	4a21      	ldr	r2, [pc, #132]	; (82d74 <Cl_Alarm_TriggerAlarm+0x100>)
   82cee:	79fb      	ldrb	r3, [r7, #7]
   82cf0:	7013      	strb	r3, [r2, #0]
				if(FPCURRENTSTATUS == cl_alarm_id)
   82cf2:	79fb      	ldrb	r3, [r7, #7]
   82cf4:	2b3c      	cmp	r3, #60	; 0x3c
   82cf6:	d107      	bne.n	82d08 <Cl_Alarm_TriggerAlarm+0x94>
				{
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   82cf8:	4b1c      	ldr	r3, [pc, #112]	; (82d6c <Cl_Alarm_TriggerAlarm+0xf8>)
   82cfa:	781b      	ldrb	r3, [r3, #0]
   82cfc:	461a      	mov	r2, r3
   82cfe:	4b1b      	ldr	r3, [pc, #108]	; (82d6c <Cl_Alarm_TriggerAlarm+0xf8>)
   82d00:	4413      	add	r3, r2
   82d02:	222d      	movs	r2, #45	; 0x2d
   82d04:	709a      	strb	r2, [r3, #2]
   82d06:	e006      	b.n	82d16 <Cl_Alarm_TriggerAlarm+0xa2>
				}
				else
				{
						Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82d08:	4b18      	ldr	r3, [pc, #96]	; (82d6c <Cl_Alarm_TriggerAlarm+0xf8>)
   82d0a:	781b      	ldrb	r3, [r3, #0]
   82d0c:	461a      	mov	r2, r3
   82d0e:	4b17      	ldr	r3, [pc, #92]	; (82d6c <Cl_Alarm_TriggerAlarm+0xf8>)
   82d10:	4413      	add	r3, r2
   82d12:	222e      	movs	r2, #46	; 0x2e
   82d14:	709a      	strb	r2, [r3, #2]
				}
			
				Cl_UpdateMacAlarmEventTable();
   82d16:	4b18      	ldr	r3, [pc, #96]	; (82d78 <Cl_Alarm_TriggerAlarm+0x104>)
   82d18:	4798      	blx	r3
   82d1a:	e016      	b.n	82d4a <Cl_Alarm_TriggerAlarm+0xd6>
			}
			else
			{
				
				if(Cl_alarms_alarms[cl_alarm_id].cl_alarmstate == CL_ALARM_DETECTED)
   82d1c:	79fb      	ldrb	r3, [r7, #7]
   82d1e:	4a12      	ldr	r2, [pc, #72]	; (82d68 <Cl_Alarm_TriggerAlarm+0xf4>)
   82d20:	011b      	lsls	r3, r3, #4
   82d22:	4413      	add	r3, r2
   82d24:	789b      	ldrb	r3, [r3, #2]
   82d26:	2b01      	cmp	r3, #1
   82d28:	d10f      	bne.n	82d4a <Cl_Alarm_TriggerAlarm+0xd6>
				{
					Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_INACTIVE;
   82d2a:	79fb      	ldrb	r3, [r7, #7]
   82d2c:	4a0e      	ldr	r2, [pc, #56]	; (82d68 <Cl_Alarm_TriggerAlarm+0xf4>)
   82d2e:	011b      	lsls	r3, r3, #4
   82d30:	4413      	add	r3, r2
   82d32:	2204      	movs	r2, #4
   82d34:	709a      	strb	r2, [r3, #2]
					Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   82d36:	79fb      	ldrb	r3, [r7, #7]
   82d38:	4a0b      	ldr	r2, [pc, #44]	; (82d68 <Cl_Alarm_TriggerAlarm+0xf4>)
   82d3a:	011b      	lsls	r3, r3, #4
   82d3c:	4413      	add	r3, r2
   82d3e:	3308      	adds	r3, #8
   82d40:	2200      	movs	r2, #0
   82d42:	715a      	strb	r2, [r3, #5]
					cl_alarm_triggered = false;
   82d44:	4b0a      	ldr	r3, [pc, #40]	; (82d70 <Cl_Alarm_TriggerAlarm+0xfc>)
   82d46:	2200      	movs	r2, #0
   82d48:	701a      	strb	r2, [r3, #0]
				
				
			}
		
	}
	cl_alarmRetCode = CL_OK;
   82d4a:	2300      	movs	r3, #0
   82d4c:	73fb      	strb	r3, [r7, #15]
   82d4e:	e001      	b.n	82d54 <Cl_Alarm_TriggerAlarm+0xe0>
}else
{
	cl_alarmRetCode = CL_ERROR;
   82d50:	2304      	movs	r3, #4
   82d52:	73fb      	strb	r3, [r7, #15]
}
ASSERT_ERROR(cl_alarmRetCode);
   82d54:	7bfb      	ldrb	r3, [r7, #15]
   82d56:	2b00      	cmp	r3, #0
   82d58:	d001      	beq.n	82d5e <Cl_Alarm_TriggerAlarm+0xea>
   82d5a:	4b08      	ldr	r3, [pc, #32]	; (82d7c <Cl_Alarm_TriggerAlarm+0x108>)
   82d5c:	4798      	blx	r3
return CL_OK;
   82d5e:	2300      	movs	r3, #0

}
   82d60:	4618      	mov	r0, r3
   82d62:	3710      	adds	r7, #16
   82d64:	46bd      	mov	sp, r7
   82d66:	bd80      	pop	{r7, pc}
   82d68:	20071e70 	.word	0x20071e70
   82d6c:	20072480 	.word	0x20072480
   82d70:	20071909 	.word	0x20071909
   82d74:	200722a4 	.word	0x200722a4
   82d78:	00082965 	.word	0x00082965
   82d7c:	00088b81 	.word	0x00088b81

00082d80 <Cl_Alarm_timmer_50millisec>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms,Cl_MacEventQueue1
 */
  
Cl_ReturnCodeType Cl_Alarm_timmer_50millisec(void) // testing
{
   82d80:	b480      	push	{r7}
   82d82:	b083      	sub	sp, #12
   82d84:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType cl_alarm_retcode = CL_OK;
   82d86:	2300      	movs	r3, #0
   82d88:	71fb      	strb	r3, [r7, #7]
	static Cl_Uint16Type fiftymscount = 0;
	fiftymscount++;
   82d8a:	4b0f      	ldr	r3, [pc, #60]	; (82dc8 <Cl_Alarm_timmer_50millisec+0x48>)
   82d8c:	881b      	ldrh	r3, [r3, #0]
   82d8e:	3301      	adds	r3, #1
   82d90:	b29a      	uxth	r2, r3
   82d92:	4b0d      	ldr	r3, [pc, #52]	; (82dc8 <Cl_Alarm_timmer_50millisec+0x48>)
   82d94:	801a      	strh	r2, [r3, #0]
//	 flow_watchdog = 999900 ;
	flow_count = 0;
   82d96:	4b0d      	ldr	r3, [pc, #52]	; (82dcc <Cl_Alarm_timmer_50millisec+0x4c>)
   82d98:	2200      	movs	r2, #0
   82d9a:	601a      	str	r2, [r3, #0]
//	if(flow_watchdog >= 0)
	flow_watchdog++	;
   82d9c:	4b0c      	ldr	r3, [pc, #48]	; (82dd0 <Cl_Alarm_timmer_50millisec+0x50>)
   82d9e:	681b      	ldr	r3, [r3, #0]
   82da0:	3301      	adds	r3, #1
   82da2:	4a0b      	ldr	r2, [pc, #44]	; (82dd0 <Cl_Alarm_timmer_50millisec+0x50>)
   82da4:	6013      	str	r3, [r2, #0]
	
	if(fiftymscount > 20)
   82da6:	4b08      	ldr	r3, [pc, #32]	; (82dc8 <Cl_Alarm_timmer_50millisec+0x48>)
   82da8:	881b      	ldrh	r3, [r3, #0]
   82daa:	2b14      	cmp	r3, #20
   82dac:	d905      	bls.n	82dba <Cl_Alarm_timmer_50millisec+0x3a>
		if (  gflow_en)//testing
		{
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_CNT",8);
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&flow_count_rate,2);
		}
		flow_count_rate =0;
   82dae:	4b09      	ldr	r3, [pc, #36]	; (82dd4 <Cl_Alarm_timmer_50millisec+0x54>)
   82db0:	2200      	movs	r2, #0
   82db2:	601a      	str	r2, [r3, #0]

		fiftymscount = 0;
   82db4:	4b04      	ldr	r3, [pc, #16]	; (82dc8 <Cl_Alarm_timmer_50millisec+0x48>)
   82db6:	2200      	movs	r2, #0
   82db8:	801a      	strh	r2, [r3, #0]
	}
	
	return CL_OK;
   82dba:	2300      	movs	r3, #0
	
}
   82dbc:	4618      	mov	r0, r3
   82dbe:	370c      	adds	r7, #12
   82dc0:	46bd      	mov	sp, r7
   82dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
   82dc6:	4770      	bx	lr
   82dc8:	20071934 	.word	0x20071934
   82dcc:	20071900 	.word	0x20071900
   82dd0:	200718fc 	.word	0x200718fc
   82dd4:	20071904 	.word	0x20071904

00082dd8 <cl_get_dac_conductivity_info>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms,Cl_MacEventQueue1
 */
  
Cl_ReturnCodeType cl_get_dac_conductivity_info(Cl_NewAlarmIdType* cl_dac_alarmID)
{
   82dd8:	b480      	push	{r7}
   82dda:	b083      	sub	sp, #12
   82ddc:	af00      	add	r7, sp, #0
   82dde:	6078      	str	r0, [r7, #4]
cl_ten_pt_dac_cond_avg = (9*cl_ten_pt_dac_cond_avg + cl_sys_statbuffer.cond_status_dac)/10;	
   82de0:	4b3b      	ldr	r3, [pc, #236]	; (82ed0 <cl_get_dac_conductivity_info+0xf8>)
   82de2:	881b      	ldrh	r3, [r3, #0]
   82de4:	461a      	mov	r2, r3
   82de6:	4613      	mov	r3, r2
   82de8:	00db      	lsls	r3, r3, #3
   82dea:	4413      	add	r3, r2
   82dec:	4a39      	ldr	r2, [pc, #228]	; (82ed4 <cl_get_dac_conductivity_info+0xfc>)
   82dee:	8f12      	ldrh	r2, [r2, #56]	; 0x38
   82df0:	4413      	add	r3, r2
   82df2:	4a39      	ldr	r2, [pc, #228]	; (82ed8 <cl_get_dac_conductivity_info+0x100>)
   82df4:	fb82 1203 	smull	r1, r2, r2, r3
   82df8:	1092      	asrs	r2, r2, #2
   82dfa:	17db      	asrs	r3, r3, #31
   82dfc:	1ad3      	subs	r3, r2, r3
   82dfe:	b29a      	uxth	r2, r3
   82e00:	4b33      	ldr	r3, [pc, #204]	; (82ed0 <cl_get_dac_conductivity_info+0xf8>)
   82e02:	801a      	strh	r2, [r3, #0]
switch(dac_cond_state)
   82e04:	4b35      	ldr	r3, [pc, #212]	; (82edc <cl_get_dac_conductivity_info+0x104>)
   82e06:	781b      	ldrb	r3, [r3, #0]
   82e08:	2b03      	cmp	r3, #3
   82e0a:	d859      	bhi.n	82ec0 <cl_get_dac_conductivity_info+0xe8>
   82e0c:	a201      	add	r2, pc, #4	; (adr r2, 82e14 <cl_get_dac_conductivity_info+0x3c>)
   82e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82e12:	bf00      	nop
   82e14:	00082e25 	.word	0x00082e25
   82e18:	00082e5d 	.word	0x00082e5d
   82e1c:	00082e25 	.word	0x00082e25
   82e20:	00082e8b 	.word	0x00082e8b
	{
		case CL_DAC_COND_STATE_NOSTATE:
		//break;
		case CL_DAC_COND_STATE_OPEN:

		if((cl_ten_pt_dac_cond_avg > 50) &&(cl_ten_pt_dac_cond_avg < 2000))
   82e24:	4b2a      	ldr	r3, [pc, #168]	; (82ed0 <cl_get_dac_conductivity_info+0xf8>)
   82e26:	881b      	ldrh	r3, [r3, #0]
   82e28:	2b32      	cmp	r3, #50	; 0x32
   82e2a:	d90a      	bls.n	82e42 <cl_get_dac_conductivity_info+0x6a>
   82e2c:	4b28      	ldr	r3, [pc, #160]	; (82ed0 <cl_get_dac_conductivity_info+0xf8>)
   82e2e:	881b      	ldrh	r3, [r3, #0]
   82e30:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   82e34:	d205      	bcs.n	82e42 <cl_get_dac_conductivity_info+0x6a>
		{
			*cl_dac_alarmID = COND_DAC_RO;
   82e36:	687b      	ldr	r3, [r7, #4]
   82e38:	220a      	movs	r2, #10
   82e3a:	701a      	strb	r2, [r3, #0]
			dac_cond_state = CL_DAC_COND_STATE_RO;
   82e3c:	4b27      	ldr	r3, [pc, #156]	; (82edc <cl_get_dac_conductivity_info+0x104>)
   82e3e:	2201      	movs	r2, #1
   82e40:	701a      	strb	r2, [r3, #0]
		}

		if(cl_ten_pt_dac_cond_avg > 2000)
   82e42:	4b23      	ldr	r3, [pc, #140]	; (82ed0 <cl_get_dac_conductivity_info+0xf8>)
   82e44:	881b      	ldrh	r3, [r3, #0]
   82e46:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   82e4a:	d906      	bls.n	82e5a <cl_get_dac_conductivity_info+0x82>
		{
			*cl_dac_alarmID = COND_DAC_HIGH;
   82e4c:	687b      	ldr	r3, [r7, #4]
   82e4e:	220b      	movs	r2, #11
   82e50:	701a      	strb	r2, [r3, #0]
			dac_cond_state = CL_DAC_COND_STATE_HIGH;
   82e52:	4b22      	ldr	r3, [pc, #136]	; (82edc <cl_get_dac_conductivity_info+0x104>)
   82e54:	2203      	movs	r2, #3
   82e56:	701a      	strb	r2, [r3, #0]
		}
		break;
   82e58:	e032      	b.n	82ec0 <cl_get_dac_conductivity_info+0xe8>
   82e5a:	e031      	b.n	82ec0 <cl_get_dac_conductivity_info+0xe8>
		
		case CL_DAC_COND_ALARM_RO:
				if(cl_ten_pt_dac_cond_avg > 2000)
   82e5c:	4b1c      	ldr	r3, [pc, #112]	; (82ed0 <cl_get_dac_conductivity_info+0xf8>)
   82e5e:	881b      	ldrh	r3, [r3, #0]
   82e60:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   82e64:	d905      	bls.n	82e72 <cl_get_dac_conductivity_info+0x9a>
				{
					*cl_dac_alarmID = COND_DAC_HIGH;
   82e66:	687b      	ldr	r3, [r7, #4]
   82e68:	220b      	movs	r2, #11
   82e6a:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_HIGH;
   82e6c:	4b1b      	ldr	r3, [pc, #108]	; (82edc <cl_get_dac_conductivity_info+0x104>)
   82e6e:	2203      	movs	r2, #3
   82e70:	701a      	strb	r2, [r3, #0]
				}
				if(cl_ten_pt_dac_cond_avg < 50)
   82e72:	4b17      	ldr	r3, [pc, #92]	; (82ed0 <cl_get_dac_conductivity_info+0xf8>)
   82e74:	881b      	ldrh	r3, [r3, #0]
   82e76:	2b31      	cmp	r3, #49	; 0x31
   82e78:	d806      	bhi.n	82e88 <cl_get_dac_conductivity_info+0xb0>
				{
					*cl_dac_alarmID = COND_DAC_OPEN;
   82e7a:	687b      	ldr	r3, [r7, #4]
   82e7c:	2209      	movs	r2, #9
   82e7e:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_OPEN;					
   82e80:	4b16      	ldr	r3, [pc, #88]	; (82edc <cl_get_dac_conductivity_info+0x104>)
   82e82:	2202      	movs	r2, #2
   82e84:	701a      	strb	r2, [r3, #0]
				}
		break;
   82e86:	e01b      	b.n	82ec0 <cl_get_dac_conductivity_info+0xe8>
   82e88:	e01a      	b.n	82ec0 <cl_get_dac_conductivity_info+0xe8>
		case CL_DAC_COND_STATE_HIGH:
		if((cl_ten_pt_dac_cond_avg > 50) &&(cl_ten_pt_dac_cond_avg < 2000))
   82e8a:	4b11      	ldr	r3, [pc, #68]	; (82ed0 <cl_get_dac_conductivity_info+0xf8>)
   82e8c:	881b      	ldrh	r3, [r3, #0]
   82e8e:	2b32      	cmp	r3, #50	; 0x32
   82e90:	d90a      	bls.n	82ea8 <cl_get_dac_conductivity_info+0xd0>
   82e92:	4b0f      	ldr	r3, [pc, #60]	; (82ed0 <cl_get_dac_conductivity_info+0xf8>)
   82e94:	881b      	ldrh	r3, [r3, #0]
   82e96:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   82e9a:	d205      	bcs.n	82ea8 <cl_get_dac_conductivity_info+0xd0>
				{
					*cl_dac_alarmID = COND_DAC_RO;
   82e9c:	687b      	ldr	r3, [r7, #4]
   82e9e:	220a      	movs	r2, #10
   82ea0:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_RO;
   82ea2:	4b0e      	ldr	r3, [pc, #56]	; (82edc <cl_get_dac_conductivity_info+0x104>)
   82ea4:	2201      	movs	r2, #1
   82ea6:	701a      	strb	r2, [r3, #0]
				}
		if(cl_ten_pt_dac_cond_avg < 50)
   82ea8:	4b09      	ldr	r3, [pc, #36]	; (82ed0 <cl_get_dac_conductivity_info+0xf8>)
   82eaa:	881b      	ldrh	r3, [r3, #0]
   82eac:	2b31      	cmp	r3, #49	; 0x31
   82eae:	d806      	bhi.n	82ebe <cl_get_dac_conductivity_info+0xe6>
				{
					*cl_dac_alarmID = COND_DAC_OPEN;
   82eb0:	687b      	ldr	r3, [r7, #4]
   82eb2:	2209      	movs	r2, #9
   82eb4:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_OPEN;
   82eb6:	4b09      	ldr	r3, [pc, #36]	; (82edc <cl_get_dac_conductivity_info+0x104>)
   82eb8:	2202      	movs	r2, #2
   82eba:	701a      	strb	r2, [r3, #0]
				}
		break;
   82ebc:	e7ff      	b.n	82ebe <cl_get_dac_conductivity_info+0xe6>
   82ebe:	bf00      	nop
	}
return CL_OK;
   82ec0:	2300      	movs	r3, #0
}
   82ec2:	4618      	mov	r0, r3
   82ec4:	370c      	adds	r7, #12
   82ec6:	46bd      	mov	sp, r7
   82ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
   82ecc:	4770      	bx	lr
   82ece:	bf00      	nop
   82ed0:	20071936 	.word	0x20071936
   82ed4:	200723d8 	.word	0x200723d8
   82ed8:	66666667 	.word	0x66666667
   82edc:	20071938 	.word	0x20071938

00082ee0 <Cl_bc_controller>:
 */
 
 

Cl_ReturnCodeType  Cl_bc_controller(Cl_BC_EventType cl_bc_event)
{
   82ee0:	b580      	push	{r7, lr}
   82ee2:	b084      	sub	sp, #16
   82ee4:	af00      	add	r7, sp, #0
   82ee6:	4603      	mov	r3, r0
   82ee8:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_bc_returncode = CL_OK;
   82eea:	2300      	movs	r3, #0
   82eec:	73fb      	strb	r3, [r7, #15]
	static int16_t fill_time = 0;
	static cl_Datastreamtype cl_tdata,cl_tdata_temp;
	
	switch(cl_bc_event)
   82eee:	79fb      	ldrb	r3, [r7, #7]
   82ef0:	3b04      	subs	r3, #4
   82ef2:	2b0c      	cmp	r3, #12
   82ef4:	f200 80a8 	bhi.w	83048 <Cl_bc_controller+0x168>
   82ef8:	a201      	add	r2, pc, #4	; (adr r2, 82f00 <Cl_bc_controller+0x20>)
   82efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82efe:	bf00      	nop
   82f00:	00082f35 	.word	0x00082f35
   82f04:	00082fd1 	.word	0x00082fd1
   82f08:	00083049 	.word	0x00083049
   82f0c:	00083049 	.word	0x00083049
   82f10:	00083049 	.word	0x00083049
   82f14:	00083049 	.word	0x00083049
   82f18:	00083049 	.word	0x00083049
   82f1c:	00082f9f 	.word	0x00082f9f
   82f20:	00083049 	.word	0x00083049
   82f24:	00082fed 	.word	0x00082fed
   82f28:	00083049 	.word	0x00083049
   82f2c:	00083031 	.word	0x00083031
   82f30:	00082ffb 	.word	0x00082ffb
	{
		case	BC_EVENT_START:
		
		
				cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   82f34:	2007      	movs	r0, #7
   82f36:	4b96      	ldr	r3, [pc, #600]	; (83190 <Cl_bc_controller+0x2b0>)
   82f38:	4798      	blx	r3
   82f3a:	4603      	mov	r3, r0
   82f3c:	73fb      	strb	r3, [r7, #15]
				sv_cntrl_setpumpspeed(DCMOTOR2,1100);
   82f3e:	2002      	movs	r0, #2
   82f40:	f240 414c 	movw	r1, #1100	; 0x44c
   82f44:	4b93      	ldr	r3, [pc, #588]	; (83194 <Cl_bc_controller+0x2b4>)
   82f46:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,900);
   82f48:	2001      	movs	r0, #1
   82f4a:	f44f 7161 	mov.w	r1, #900	; 0x384
   82f4e:	4b91      	ldr	r3, [pc, #580]	; (83194 <Cl_bc_controller+0x2b4>)
   82f50:	4798      	blx	r3
				Cl_AlarmActivateAlarms(BC_ALARM,true);  // manav02 activated
   82f52:	201a      	movs	r0, #26
   82f54:	2101      	movs	r1, #1
   82f56:	4b90      	ldr	r3, [pc, #576]	; (83198 <Cl_bc_controller+0x2b8>)
   82f58:	4798      	blx	r3
			
				
				if(openfill_flag == 1){
   82f5a:	4b90      	ldr	r3, [pc, #576]	; (8319c <Cl_bc_controller+0x2bc>)
   82f5c:	781b      	ldrb	r3, [r3, #0]
   82f5e:	2b01      	cmp	r3, #1
   82f60:	d115      	bne.n	82f8e <Cl_bc_controller+0xae>
					
					cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN_DIS);
   82f62:	2015      	movs	r0, #21
   82f64:	4b8a      	ldr	r3, [pc, #552]	; (83190 <Cl_bc_controller+0x2b0>)
   82f66:	4798      	blx	r3
   82f68:	4603      	mov	r3, r0
   82f6a:	73fb      	strb	r3, [r7, #15]
					
					if(flag_hotcitric == 1){
   82f6c:	4b8c      	ldr	r3, [pc, #560]	; (831a0 <Cl_bc_controller+0x2c0>)
   82f6e:	781b      	ldrb	r3, [r3, #0]
   82f70:	2b01      	cmp	r3, #1
   82f72:	d10c      	bne.n	82f8e <Cl_bc_controller+0xae>
					
					sv_cntrl_poweronheater();
   82f74:	4b8b      	ldr	r3, [pc, #556]	; (831a4 <Cl_bc_controller+0x2c4>)
   82f76:	4798      	blx	r3
					sv_cntrl_incheater(3500);
   82f78:	f640 50ac 	movw	r0, #3500	; 0xdac
   82f7c:	4b8a      	ldr	r3, [pc, #552]	; (831a8 <Cl_bc_controller+0x2c8>)
   82f7e:	4798      	blx	r3
					SetHeaterState(CL_HEATER_STATE_ON);
   82f80:	2001      	movs	r0, #1
   82f82:	4b8a      	ldr	r3, [pc, #552]	; (831ac <Cl_bc_controller+0x2cc>)
   82f84:	4798      	blx	r3
					Cl_Heater_Event_Handler(CL_HEATER_EVENT_TARGET_TEMP , 75);	
   82f86:	2005      	movs	r0, #5
   82f88:	4989      	ldr	r1, [pc, #548]	; (831b0 <Cl_bc_controller+0x2d0>)
   82f8a:	4b8a      	ldr	r3, [pc, #552]	; (831b4 <Cl_bc_controller+0x2d4>)
   82f8c:	4798      	blx	r3
					}
					
				}
					bc_laststate = bc_state;
   82f8e:	4b8a      	ldr	r3, [pc, #552]	; (831b8 <Cl_bc_controller+0x2d8>)
   82f90:	781a      	ldrb	r2, [r3, #0]
   82f92:	4b8a      	ldr	r3, [pc, #552]	; (831bc <Cl_bc_controller+0x2dc>)
   82f94:	701a      	strb	r2, [r3, #0]
					bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
   82f96:	4b88      	ldr	r3, [pc, #544]	; (831b8 <Cl_bc_controller+0x2d8>)
   82f98:	2202      	movs	r2, #2
   82f9a:	701a      	strb	r2, [r3, #0]
				
		
		break;
   82f9c:	e054      	b.n	83048 <Cl_bc_controller+0x168>
		case BC_EVENT_RESUME:
		if(bc_state == CL_BC_STATE_IDLE)
   82f9e:	4b86      	ldr	r3, [pc, #536]	; (831b8 <Cl_bc_controller+0x2d8>)
   82fa0:	781b      	ldrb	r3, [r3, #0]
   82fa2:	2b00      	cmp	r3, #0
   82fa4:	d113      	bne.n	82fce <Cl_bc_controller+0xee>
				{
				cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   82fa6:	2007      	movs	r0, #7
   82fa8:	4b79      	ldr	r3, [pc, #484]	; (83190 <Cl_bc_controller+0x2b0>)
   82faa:	4798      	blx	r3
   82fac:	4603      	mov	r3, r0
   82fae:	73fb      	strb	r3, [r7, #15]
				cl_bc_returncode = sv_cntrl_setflowpath(cl_flowpathtable[bc_laststate]);
   82fb0:	4b82      	ldr	r3, [pc, #520]	; (831bc <Cl_bc_controller+0x2dc>)
   82fb2:	781b      	ldrb	r3, [r3, #0]
   82fb4:	461a      	mov	r2, r3
   82fb6:	4b82      	ldr	r3, [pc, #520]	; (831c0 <Cl_bc_controller+0x2e0>)
   82fb8:	5c9b      	ldrb	r3, [r3, r2]
   82fba:	4618      	mov	r0, r3
   82fbc:	4b74      	ldr	r3, [pc, #464]	; (83190 <Cl_bc_controller+0x2b0>)
   82fbe:	4798      	blx	r3
   82fc0:	4603      	mov	r3, r0
   82fc2:	73fb      	strb	r3, [r7, #15]
				//bc_laststate = bc_state;
				bc_state = bc_laststate;                                                       // added on 20.06.17 hot rinse switching was not happening
   82fc4:	4b7d      	ldr	r3, [pc, #500]	; (831bc <Cl_bc_controller+0x2dc>)
   82fc6:	781a      	ldrb	r2, [r3, #0]
   82fc8:	4b7b      	ldr	r3, [pc, #492]	; (831b8 <Cl_bc_controller+0x2d8>)
   82fca:	701a      	strb	r2, [r3, #0]
				}
		break;
   82fcc:	e03c      	b.n	83048 <Cl_bc_controller+0x168>
   82fce:	e03b      	b.n	83048 <Cl_bc_controller+0x168>
		case	BC_EVENT_STOP:
		CSeventcount = 0;
   82fd0:	4b7c      	ldr	r3, [pc, #496]	; (831c4 <Cl_bc_controller+0x2e4>)
   82fd2:	2200      	movs	r2, #0
   82fd4:	601a      	str	r2, [r3, #0]
				Cl_AlarmActivateAlarms(BC_ALARM,false);
   82fd6:	201a      	movs	r0, #26
   82fd8:	2100      	movs	r1, #0
   82fda:	4b6f      	ldr	r3, [pc, #444]	; (83198 <Cl_bc_controller+0x2b8>)
   82fdc:	4798      	blx	r3
				sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   82fde:	2011      	movs	r0, #17
   82fe0:	4b6b      	ldr	r3, [pc, #428]	; (83190 <Cl_bc_controller+0x2b0>)
   82fe2:	4798      	blx	r3
				bc_state = CL_BC_STATE_IDLE;
   82fe4:	4b74      	ldr	r3, [pc, #464]	; (831b8 <Cl_bc_controller+0x2d8>)
   82fe6:	2200      	movs	r2, #0
   82fe8:	701a      	strb	r2, [r3, #0]
			
		break;
   82fea:	e02d      	b.n	83048 <Cl_bc_controller+0x168>
		case BC_EVENT_STOP_RINSE:
				openfillcounter = 0;
   82fec:	4b76      	ldr	r3, [pc, #472]	; (831c8 <Cl_bc_controller+0x2e8>)
   82fee:	2200      	movs	r2, #0
   82ff0:	801a      	strh	r2, [r3, #0]
				bc_state = CL_BC_STATE_IDLE;
   82ff2:	4b71      	ldr	r3, [pc, #452]	; (831b8 <Cl_bc_controller+0x2d8>)
   82ff4:	2200      	movs	r2, #0
   82ff6:	701a      	strb	r2, [r3, #0]
		break;
   82ff8:	e026      	b.n	83048 <Cl_bc_controller+0x168>
		break;
		case	BC_EVENT_RESET:
		break;
		case BC_EVENT_TEST_SWITCH:
		
		cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   82ffa:	2005      	movs	r0, #5
   82ffc:	4b64      	ldr	r3, [pc, #400]	; (83190 <Cl_bc_controller+0x2b0>)
   82ffe:	4798      	blx	r3
   83000:	4603      	mov	r3, r0
   83002:	73fb      	strb	r3, [r7, #15]
		sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   83004:	2002      	movs	r0, #2
   83006:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   8300a:	4b62      	ldr	r3, [pc, #392]	; (83194 <Cl_bc_controller+0x2b4>)
   8300c:	4798      	blx	r3
		sv_cntrl_setpumpspeed(DCMOTOR1,1000);
   8300e:	2001      	movs	r0, #1
   83010:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   83014:	4b5f      	ldr	r3, [pc, #380]	; (83194 <Cl_bc_controller+0x2b4>)
   83016:	4798      	blx	r3
		
		potvalue = (950 * 1024)/10000;                                 // 600
   83018:	4b6c      	ldr	r3, [pc, #432]	; (831cc <Cl_bc_controller+0x2ec>)
   8301a:	2261      	movs	r2, #97	; 0x61
   8301c:	801a      	strh	r2, [r3, #0]
			sv_cs_setpotvalue(potvalue);
   8301e:	4b6b      	ldr	r3, [pc, #428]	; (831cc <Cl_bc_controller+0x2ec>)
   83020:	881b      	ldrh	r3, [r3, #0]
   83022:	4618      	mov	r0, r3
   83024:	4b6a      	ldr	r3, [pc, #424]	; (831d0 <Cl_bc_controller+0x2f0>)
   83026:	4798      	blx	r3
			
		bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
   83028:	4b63      	ldr	r3, [pc, #396]	; (831b8 <Cl_bc_controller+0x2d8>)
   8302a:	220c      	movs	r2, #12
   8302c:	701a      	strb	r2, [r3, #0]
		break;
   8302e:	e00b      	b.n	83048 <Cl_bc_controller+0x168>
		
		case BC_EVENT_DISINF_INTAKE:
		
			
			potvalue = (650 * 1024)/10000;                                 // 600
   83030:	4b66      	ldr	r3, [pc, #408]	; (831cc <Cl_bc_controller+0x2ec>)
   83032:	2242      	movs	r2, #66	; 0x42
   83034:	801a      	strh	r2, [r3, #0]
			sv_cs_setpotvalue(potvalue);
   83036:	4b65      	ldr	r3, [pc, #404]	; (831cc <Cl_bc_controller+0x2ec>)
   83038:	881b      	ldrh	r3, [r3, #0]
   8303a:	4618      	mov	r0, r3
   8303c:	4b64      	ldr	r3, [pc, #400]	; (831d0 <Cl_bc_controller+0x2f0>)
   8303e:	4798      	blx	r3
			
		bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
   83040:	4b5d      	ldr	r3, [pc, #372]	; (831b8 <Cl_bc_controller+0x2d8>)
   83042:	220c      	movs	r2, #12
   83044:	701a      	strb	r2, [r3, #0]
		break;
   83046:	bf00      	nop
	}
	switch (bc_state)
   83048:	4b5b      	ldr	r3, [pc, #364]	; (831b8 <Cl_bc_controller+0x2d8>)
   8304a:	781b      	ldrb	r3, [r3, #0]
   8304c:	2b15      	cmp	r3, #21
   8304e:	f200 857c 	bhi.w	83b4a <Cl_bc_controller+0xc6a>
   83052:	a201      	add	r2, pc, #4	; (adr r2, 83058 <Cl_bc_controller+0x178>)
   83054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83058:	00083b4b 	.word	0x00083b4b
   8305c:	00083b4b 	.word	0x00083b4b
   83060:	000830b1 	.word	0x000830b1
   83064:	0008315f 	.word	0x0008315f
   83068:	000834c9 	.word	0x000834c9
   8306c:	000834ff 	.word	0x000834ff
   83070:	0008351b 	.word	0x0008351b
   83074:	00083551 	.word	0x00083551
   83078:	0008356d 	.word	0x0008356d
   8307c:	00083593 	.word	0x00083593
   83080:	000835af 	.word	0x000835af
   83084:	000835e5 	.word	0x000835e5
   83088:	00083601 	.word	0x00083601
   8308c:	00083641 	.word	0x00083641
   83090:	00083853 	.word	0x00083853
   83094:	00083887 	.word	0x00083887
   83098:	00083ac3 	.word	0x00083ac3
   8309c:	00083b4b 	.word	0x00083b4b
   830a0:	00083b07 	.word	0x00083b07
   830a4:	00083b4b 	.word	0x00083b4b
   830a8:	00083b4b 	.word	0x00083b4b
   830ac:	00083b4b 	.word	0x00083b4b
			// wait for commands
			break;
			case CL_BC_STATE_NC:
			break;
			case CL_BC_STATE_OPENFILL_TRANSITION:
							switch(cl_bc_event)
   830b0:	79fb      	ldrb	r3, [r7, #7]
   830b2:	3b01      	subs	r3, #1
   830b4:	2b07      	cmp	r3, #7
   830b6:	d84f      	bhi.n	83158 <Cl_bc_controller+0x278>
   830b8:	a201      	add	r2, pc, #4	; (adr r2, 830c0 <Cl_bc_controller+0x1e0>)
   830ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   830be:	bf00      	nop
   830c0:	000830e1 	.word	0x000830e1
   830c4:	000830e9 	.word	0x000830e9
   830c8:	00083159 	.word	0x00083159
   830cc:	00083159 	.word	0x00083159
   830d0:	00083159 	.word	0x00083159
   830d4:	00083109 	.word	0x00083109
   830d8:	00083159 	.word	0x00083159
   830dc:	00083131 	.word	0x00083131
							{							
								case BC_EVENT_500MS:				
									bc_wait = true;				
   830e0:	4b3c      	ldr	r3, [pc, #240]	; (831d4 <Cl_bc_controller+0x2f4>)
   830e2:	2201      	movs	r2, #1
   830e4:	701a      	strb	r2, [r3, #0]
								break;
   830e6:	e038      	b.n	8315a <Cl_bc_controller+0x27a>
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   830e8:	4b3a      	ldr	r3, [pc, #232]	; (831d4 <Cl_bc_controller+0x2f4>)
   830ea:	781b      	ldrb	r3, [r3, #0]
   830ec:	2b00      	cmp	r3, #0
   830ee:	d00a      	beq.n	83106 <Cl_bc_controller+0x226>
								{
									bc_laststate = bc_state;
   830f0:	4b31      	ldr	r3, [pc, #196]	; (831b8 <Cl_bc_controller+0x2d8>)
   830f2:	781a      	ldrb	r2, [r3, #0]
   830f4:	4b31      	ldr	r3, [pc, #196]	; (831bc <Cl_bc_controller+0x2dc>)
   830f6:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_OPENFILL;
   830f8:	4b2f      	ldr	r3, [pc, #188]	; (831b8 <Cl_bc_controller+0x2d8>)
   830fa:	2203      	movs	r2, #3
   830fc:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   830fe:	4b35      	ldr	r3, [pc, #212]	; (831d4 <Cl_bc_controller+0x2f4>)
   83100:	2200      	movs	r2, #0
   83102:	701a      	strb	r2, [r3, #0]
								}
								break;
   83104:	e029      	b.n	8315a <Cl_bc_controller+0x27a>
   83106:	e028      	b.n	8315a <Cl_bc_controller+0x27a>
								case BC_EVENT_STOP_FOR_BC1:
								openfillcounter = 0;
   83108:	4b2f      	ldr	r3, [pc, #188]	; (831c8 <Cl_bc_controller+0x2e8>)
   8310a:	2200      	movs	r2, #0
   8310c:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = 
   8310e:	2005      	movs	r0, #5
   83110:	4b1f      	ldr	r3, [pc, #124]	; (83190 <Cl_bc_controller+0x2b0>)
   83112:	4798      	blx	r3
   83114:	4603      	mov	r3, r0
   83116:	73fb      	strb	r3, [r7, #15]
								(Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
								if(cl_bc_returncode == CL_OK)
   83118:	7bfb      	ldrb	r3, [r7, #15]
   8311a:	2b00      	cmp	r3, #0
   8311c:	d107      	bne.n	8312e <Cl_bc_controller+0x24e>
								{
									bc_laststate = bc_state;
   8311e:	4b26      	ldr	r3, [pc, #152]	; (831b8 <Cl_bc_controller+0x2d8>)
   83120:	781a      	ldrb	r2, [r3, #0]
   83122:	4b26      	ldr	r3, [pc, #152]	; (831bc <Cl_bc_controller+0x2dc>)
   83124:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC1;
   83126:	4b24      	ldr	r3, [pc, #144]	; (831b8 <Cl_bc_controller+0x2d8>)
   83128:	2210      	movs	r2, #16
   8312a:	701a      	strb	r2, [r3, #0]
								}
								break;
   8312c:	e015      	b.n	8315a <Cl_bc_controller+0x27a>
   8312e:	e014      	b.n	8315a <Cl_bc_controller+0x27a>
								case BC_EVENT_STOP_FOR_BC2:
								openfillcounter = 0;
   83130:	4b25      	ldr	r3, [pc, #148]	; (831c8 <Cl_bc_controller+0x2e8>)
   83132:	2200      	movs	r2, #0
   83134:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   83136:	2006      	movs	r0, #6
   83138:	4b15      	ldr	r3, [pc, #84]	; (83190 <Cl_bc_controller+0x2b0>)
   8313a:	4798      	blx	r3
   8313c:	4603      	mov	r3, r0
   8313e:	73fb      	strb	r3, [r7, #15]
								if(cl_bc_returncode == CL_OK)
   83140:	7bfb      	ldrb	r3, [r7, #15]
   83142:	2b00      	cmp	r3, #0
   83144:	d107      	bne.n	83156 <Cl_bc_controller+0x276>
								{
									bc_laststate = bc_state;
   83146:	4b1c      	ldr	r3, [pc, #112]	; (831b8 <Cl_bc_controller+0x2d8>)
   83148:	781a      	ldrb	r2, [r3, #0]
   8314a:	4b1c      	ldr	r3, [pc, #112]	; (831bc <Cl_bc_controller+0x2dc>)
   8314c:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC2;
   8314e:	4b1a      	ldr	r3, [pc, #104]	; (831b8 <Cl_bc_controller+0x2d8>)
   83150:	2212      	movs	r2, #18
   83152:	701a      	strb	r2, [r3, #0]
								}
								break;
   83154:	e001      	b.n	8315a <Cl_bc_controller+0x27a>
   83156:	e000      	b.n	8315a <Cl_bc_controller+0x27a>
								default:break;
   83158:	bf00      	nop
							}
			break;
   8315a:	f000 bcf7 	b.w	83b4c <Cl_bc_controller+0xc6c>
			case CL_BC_STATE_OPENFILL:
							switch(cl_bc_event)
   8315e:	79fb      	ldrb	r3, [r7, #7]
   83160:	3b01      	subs	r3, #1
   83162:	2b07      	cmp	r3, #7
   83164:	f200 81ae 	bhi.w	834c4 <Cl_bc_controller+0x5e4>
   83168:	a201      	add	r2, pc, #4	; (adr r2, 83170 <Cl_bc_controller+0x290>)
   8316a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8316e:	bf00      	nop
   83170:	000834c5 	.word	0x000834c5
   83174:	000831d9 	.word	0x000831d9
   83178:	000834c5 	.word	0x000834c5
   8317c:	000834c5 	.word	0x000834c5
   83180:	000834c5 	.word	0x000834c5
   83184:	0008340d 	.word	0x0008340d
   83188:	000834c5 	.word	0x000834c5
   8318c:	0008349d 	.word	0x0008349d
   83190:	0009b5cd 	.word	0x0009b5cd
   83194:	0009b461 	.word	0x0009b461
   83198:	00082a35 	.word	0x00082a35
   8319c:	20071d6a 	.word	0x20071d6a
   831a0:	20071b93 	.word	0x20071b93
   831a4:	0009b3c1 	.word	0x0009b3c1
   831a8:	0009b4c9 	.word	0x0009b4c9
   831ac:	00089381 	.word	0x00089381
   831b0:	42960000 	.word	0x42960000
   831b4:	000892f9 	.word	0x000892f9
   831b8:	20071939 	.word	0x20071939
   831bc:	2007193a 	.word	0x2007193a
   831c0:	2007010c 	.word	0x2007010c
   831c4:	2007194c 	.word	0x2007194c
   831c8:	2007193e 	.word	0x2007193e
   831cc:	20071942 	.word	0x20071942
   831d0:	0009b899 	.word	0x0009b899
   831d4:	2007193b 	.word	0x2007193b
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								
								if(openfill_flag == 1){
   831d8:	4b96      	ldr	r3, [pc, #600]	; (83434 <Cl_bc_controller+0x554>)
   831da:	781b      	ldrb	r3, [r3, #0]
   831dc:	2b01      	cmp	r3, #1
   831de:	d14c      	bne.n	8327a <Cl_bc_controller+0x39a>
									
									Cl_Uint16Type potvalue = 0;
   831e0:	2300      	movs	r3, #0
   831e2:	81bb      	strh	r3, [r7, #12]
									potvalue = (650 * 1024)/10000;                                 // 600
   831e4:	2342      	movs	r3, #66	; 0x42
   831e6:	81bb      	strh	r3, [r7, #12]
									sv_cs_setpotvalue(potvalue);
   831e8:	89bb      	ldrh	r3, [r7, #12]
   831ea:	4618      	mov	r0, r3
   831ec:	4b92      	ldr	r3, [pc, #584]	; (83438 <Cl_bc_controller+0x558>)
   831ee:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR2,500);
   831f0:	2002      	movs	r0, #2
   831f2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   831f6:	4b91      	ldr	r3, [pc, #580]	; (8343c <Cl_bc_controller+0x55c>)
   831f8:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1000);
   831fa:	2001      	movs	r0, #1
   831fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   83200:	4b8e      	ldr	r3, [pc, #568]	; (8343c <Cl_bc_controller+0x55c>)
   83202:	4798      	blx	r3
										
										if(disinfopenfillcounter++ > 900){ // 20 mins
   83204:	4b8e      	ldr	r3, [pc, #568]	; (83440 <Cl_bc_controller+0x560>)
   83206:	881b      	ldrh	r3, [r3, #0]
   83208:	b29b      	uxth	r3, r3
   8320a:	b29a      	uxth	r2, r3
   8320c:	3201      	adds	r2, #1
   8320e:	b292      	uxth	r2, r2
   83210:	b291      	uxth	r1, r2
   83212:	4a8b      	ldr	r2, [pc, #556]	; (83440 <Cl_bc_controller+0x560>)
   83214:	8011      	strh	r1, [r2, #0]
   83216:	b21b      	sxth	r3, r3
   83218:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
   8321c:	dd28      	ble.n	83270 <Cl_bc_controller+0x390>
											
											openfillcounter = 0;
   8321e:	4b89      	ldr	r3, [pc, #548]	; (83444 <Cl_bc_controller+0x564>)
   83220:	2200      	movs	r2, #0
   83222:	801a      	strh	r2, [r3, #0]
											disinfopenfillcounter = 0;
   83224:	4b86      	ldr	r3, [pc, #536]	; (83440 <Cl_bc_controller+0x560>)
   83226:	2200      	movs	r2, #0
   83228:	801a      	strh	r2, [r3, #0]
											sv_prop_stopopenfill(); // manav02 added
   8322a:	4b87      	ldr	r3, [pc, #540]	; (83448 <Cl_bc_controller+0x568>)
   8322c:	4798      	blx	r3
								//			sv_prop_startmixing();
											cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   8322e:	2005      	movs	r0, #5
   83230:	4b86      	ldr	r3, [pc, #536]	; (8344c <Cl_bc_controller+0x56c>)
   83232:	4798      	blx	r3
   83234:	4603      	mov	r3, r0
   83236:	73fb      	strb	r3, [r7, #15]
											cl_bc_returncode = sv_cntrl_deactivate_valve(VALVE_ID19);
   83238:	2013      	movs	r0, #19
   8323a:	4b85      	ldr	r3, [pc, #532]	; (83450 <Cl_bc_controller+0x570>)
   8323c:	4798      	blx	r3
   8323e:	4603      	mov	r3, r0
   83240:	73fb      	strb	r3, [r7, #15]
											cl_bc_returncode = Cl_mac_apprequesthandler(MACREQ_BC_OPENFILL_COMPLETED);
   83242:	2051      	movs	r0, #81	; 0x51
   83244:	4b83      	ldr	r3, [pc, #524]	; (83454 <Cl_bc_controller+0x574>)
   83246:	4798      	blx	r3
   83248:	4603      	mov	r3, r0
   8324a:	73fb      	strb	r3, [r7, #15]
											if(cl_bc_returncode == CL_OK)
   8324c:	7bfb      	ldrb	r3, [r7, #15]
   8324e:	2b00      	cmp	r3, #0
   83250:	d10e      	bne.n	83270 <Cl_bc_controller+0x390>
											{
												Cl_AlarmActivateAlarms(BC_ALARM,false);           // manav02 deactivated
   83252:	201a      	movs	r0, #26
   83254:	2100      	movs	r1, #0
   83256:	4b80      	ldr	r3, [pc, #512]	; (83458 <Cl_bc_controller+0x578>)
   83258:	4798      	blx	r3
												bc_laststate = bc_state;
   8325a:	4b80      	ldr	r3, [pc, #512]	; (8345c <Cl_bc_controller+0x57c>)
   8325c:	781a      	ldrb	r2, [r3, #0]
   8325e:	4b80      	ldr	r3, [pc, #512]	; (83460 <Cl_bc_controller+0x580>)
   83260:	701a      	strb	r2, [r3, #0]
												bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
   83262:	4b7e      	ldr	r3, [pc, #504]	; (8345c <Cl_bc_controller+0x57c>)
   83264:	220c      	movs	r2, #12
   83266:	701a      	strb	r2, [r3, #0]
												bc_laststate = bc_state;
   83268:	4b7c      	ldr	r3, [pc, #496]	; (8345c <Cl_bc_controller+0x57c>)
   8326a:	781a      	ldrb	r2, [r3, #0]
   8326c:	4b7c      	ldr	r3, [pc, #496]	; (83460 <Cl_bc_controller+0x580>)
   8326e:	701a      	strb	r2, [r3, #0]
											}
		
											
											
										}
									Cl_AlarmActivateAlarms(BC_ALARM,false);
   83270:	201a      	movs	r0, #26
   83272:	2100      	movs	r1, #0
   83274:	4b78      	ldr	r3, [pc, #480]	; (83458 <Cl_bc_controller+0x578>)
   83276:	4798      	blx	r3
   83278:	e0c7      	b.n	8340a <Cl_bc_controller+0x52a>
								}
								
								else{
								
								
								if(openfillcounter++ > CL_BC_OPENFILL_TIMEOUT * 60)
   8327a:	4b72      	ldr	r3, [pc, #456]	; (83444 <Cl_bc_controller+0x564>)
   8327c:	881b      	ldrh	r3, [r3, #0]
   8327e:	b29b      	uxth	r3, r3
   83280:	b29a      	uxth	r2, r3
   83282:	3201      	adds	r2, #1
   83284:	b292      	uxth	r2, r2
   83286:	b291      	uxth	r1, r2
   83288:	4a6e      	ldr	r2, [pc, #440]	; (83444 <Cl_bc_controller+0x564>)
   8328a:	8011      	strh	r1, [r2, #0]
   8328c:	b21b      	sxth	r3, r3
   8328e:	2b78      	cmp	r3, #120	; 0x78
   83290:	f340 80bb 	ble.w	8340a <Cl_bc_controller+0x52a>
								{
									
									
									if (openfill_flag == 1)
   83294:	4b67      	ldr	r3, [pc, #412]	; (83434 <Cl_bc_controller+0x554>)
   83296:	781b      	ldrb	r3, [r3, #0]
   83298:	2b01      	cmp	r3, #1
   8329a:	d10d      	bne.n	832b8 <Cl_bc_controller+0x3d8>
									{
										//sv_prop_stopopenfill();
										openfillcounter = 0;
   8329c:	4b69      	ldr	r3, [pc, #420]	; (83444 <Cl_bc_controller+0x564>)
   8329e:	2200      	movs	r2, #0
   832a0:	801a      	strh	r2, [r3, #0]
										
										sv_cntrl_setpumpspeed(DCMOTOR2,500);
   832a2:	2002      	movs	r0, #2
   832a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   832a8:	4b64      	ldr	r3, [pc, #400]	; (8343c <Cl_bc_controller+0x55c>)
   832aa:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1000);
   832ac:	2001      	movs	r0, #1
   832ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   832b2:	4b62      	ldr	r3, [pc, #392]	; (8343c <Cl_bc_controller+0x55c>)
   832b4:	4798      	blx	r3
   832b6:	e071      	b.n	8339c <Cl_bc_controller+0x4bc>
										
									}
									else
									{
									sv_prop_stopopenfill();
   832b8:	4b63      	ldr	r3, [pc, #396]	; (83448 <Cl_bc_controller+0x568>)
   832ba:	4798      	blx	r3
									sv_prop_startpropeo_aligning();
   832bc:	4b69      	ldr	r3, [pc, #420]	; (83464 <Cl_bc_controller+0x584>)
   832be:	4798      	blx	r3
							
									openfillcounter = 0;
   832c0:	4b60      	ldr	r3, [pc, #384]	; (83444 <Cl_bc_controller+0x564>)
   832c2:	2200      	movs	r2, #0
   832c4:	801a      	strh	r2, [r3, #0]
										
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   832c6:	2002      	movs	r0, #2
   832c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   832cc:	4b5b      	ldr	r3, [pc, #364]	; (8343c <Cl_bc_controller+0x55c>)
   832ce:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1100);
   832d0:	2001      	movs	r0, #1
   832d2:	f240 414c 	movw	r1, #1100	; 0x44c
   832d6:	4b59      	ldr	r3, [pc, #356]	; (8343c <Cl_bc_controller+0x55c>)
   832d8:	4798      	blx	r3
										potvalue = (670 * 1024)/10000;                                 // added on 30.06.2017
   832da:	4b63      	ldr	r3, [pc, #396]	; (83468 <Cl_bc_controller+0x588>)
   832dc:	2244      	movs	r2, #68	; 0x44
   832de:	801a      	strh	r2, [r3, #0]
										sv_cs_setpotvalue(potvalue);
   832e0:	4b61      	ldr	r3, [pc, #388]	; (83468 <Cl_bc_controller+0x588>)
   832e2:	881b      	ldrh	r3, [r3, #0]
   832e4:	4618      	mov	r0, r3
   832e6:	4b54      	ldr	r3, [pc, #336]	; (83438 <Cl_bc_controller+0x558>)
   832e8:	4798      	blx	r3
										if (hotrinse_flag == 1)
   832ea:	4b60      	ldr	r3, [pc, #384]	; (8346c <Cl_bc_controller+0x58c>)
   832ec:	781b      	ldrb	r3, [r3, #0]
   832ee:	2b01      	cmp	r3, #1
   832f0:	d154      	bne.n	8339c <Cl_bc_controller+0x4bc>
										{
											 
											 sv_cntrl_setpumpspeed(DCMOTOR2,600);
   832f2:	2002      	movs	r0, #2
   832f4:	f44f 7116 	mov.w	r1, #600	; 0x258
   832f8:	4b50      	ldr	r3, [pc, #320]	; (8343c <Cl_bc_controller+0x55c>)
   832fa:	4798      	blx	r3
											 sv_cntrl_setpumpspeed(DCMOTOR1,1100);
   832fc:	2001      	movs	r0, #1
   832fe:	f240 414c 	movw	r1, #1100	; 0x44c
   83302:	4b4e      	ldr	r3, [pc, #312]	; (8343c <Cl_bc_controller+0x55c>)
   83304:	4798      	blx	r3
												sv_cntrl_enable_loopback();
   83306:	4b5a      	ldr	r3, [pc, #360]	; (83470 <Cl_bc_controller+0x590>)
   83308:	4798      	blx	r3
										//		sv_cntrl_enable_bypass();									// commented on 30.06.2017
										    
											Cl_AlarmActivateAlarms(BC_ALARM,false);           // manav02 deactivated added
   8330a:	201a      	movs	r0, #26
   8330c:	2100      	movs	r1, #0
   8330e:	4b52      	ldr	r3, [pc, #328]	; (83458 <Cl_bc_controller+0x578>)
   83310:	4798      	blx	r3
											potvalue = (690 * 1024)/10000;                    //manav02 changed from 800             // added on 30.06.2017
   83312:	4b55      	ldr	r3, [pc, #340]	; (83468 <Cl_bc_controller+0x588>)
   83314:	2246      	movs	r2, #70	; 0x46
   83316:	801a      	strh	r2, [r3, #0]
											sv_cs_setpotvalue(potvalue);
   83318:	4b53      	ldr	r3, [pc, #332]	; (83468 <Cl_bc_controller+0x588>)
   8331a:	881b      	ldrh	r3, [r3, #0]
   8331c:	4618      	mov	r0, r3
   8331e:	4b46      	ldr	r3, [pc, #280]	; (83438 <Cl_bc_controller+0x558>)
   83320:	4798      	blx	r3
											
												sv_cntrl_poweronheater();
   83322:	4b54      	ldr	r3, [pc, #336]	; (83474 <Cl_bc_controller+0x594>)
   83324:	4798      	blx	r3
												sv_cntrl_incheater(4000);
   83326:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   8332a:	4b53      	ldr	r3, [pc, #332]	; (83478 <Cl_bc_controller+0x598>)
   8332c:	4798      	blx	r3
												SetHeaterState(CL_HEATER_STATE_ON);
   8332e:	2001      	movs	r0, #1
   83330:	4b52      	ldr	r3, [pc, #328]	; (8347c <Cl_bc_controller+0x59c>)
   83332:	4798      	blx	r3
												Cl_Heater_Event_Handler(CL_HEATER_EVENT_TARGET_TEMP , 80);
   83334:	2005      	movs	r0, #5
   83336:	4952      	ldr	r1, [pc, #328]	; (83480 <Cl_bc_controller+0x5a0>)
   83338:	4b52      	ldr	r3, [pc, #328]	; (83484 <Cl_bc_controller+0x5a4>)
   8333a:	4798      	blx	r3
											
											sv_cntrl_activate_valve(VALVE_ID2);
   8333c:	2002      	movs	r0, #2
   8333e:	4b52      	ldr	r3, [pc, #328]	; (83488 <Cl_bc_controller+0x5a8>)
   83340:	4798      	blx	r3
											sv_cntrl_activate_valve(VALVE_ID3);
   83342:	2003      	movs	r0, #3
   83344:	4b50      	ldr	r3, [pc, #320]	; (83488 <Cl_bc_controller+0x5a8>)
   83346:	4798      	blx	r3
											sv_prop_startmixing();
   83348:	4b50      	ldr	r3, [pc, #320]	; (8348c <Cl_bc_controller+0x5ac>)
   8334a:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_START,0);
   8334c:	2002      	movs	r0, #2
   8334e:	2100      	movs	r1, #0
   83350:	4b4f      	ldr	r3, [pc, #316]	; (83490 <Cl_bc_controller+0x5b0>)
   83352:	4798      	blx	r3
											cl_ufpumpFeedback_start();
   83354:	4b4f      	ldr	r3, [pc, #316]	; (83494 <Cl_bc_controller+0x5b4>)
   83356:	4798      	blx	r3
											cl_wait(100);
   83358:	2064      	movs	r0, #100	; 0x64
   8335a:	4b4f      	ldr	r3, [pc, #316]	; (83498 <Cl_bc_controller+0x5b8>)
   8335c:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,16000);
   8335e:	2001      	movs	r0, #1
   83360:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
   83364:	4b4a      	ldr	r3, [pc, #296]	; (83490 <Cl_bc_controller+0x5b0>)
   83366:	4798      	blx	r3
											cl_wait(200);
   83368:	20c8      	movs	r0, #200	; 0xc8
   8336a:	4b4b      	ldr	r3, [pc, #300]	; (83498 <Cl_bc_controller+0x5b8>)
   8336c:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,8000);
   8336e:	2001      	movs	r0, #1
   83370:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   83374:	4b46      	ldr	r3, [pc, #280]	; (83490 <Cl_bc_controller+0x5b0>)
   83376:	4798      	blx	r3
											cl_wait(600);
   83378:	f44f 7016 	mov.w	r0, #600	; 0x258
   8337c:	4b46      	ldr	r3, [pc, #280]	; (83498 <Cl_bc_controller+0x5b8>)
   8337e:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,5000);
   83380:	2001      	movs	r0, #1
   83382:	f241 3188 	movw	r1, #5000	; 0x1388
   83386:	4b42      	ldr	r3, [pc, #264]	; (83490 <Cl_bc_controller+0x5b0>)
   83388:	4798      	blx	r3
											cl_wait(800);
   8338a:	f44f 7048 	mov.w	r0, #800	; 0x320
   8338e:	4b42      	ldr	r3, [pc, #264]	; (83498 <Cl_bc_controller+0x5b8>)
   83390:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
   83392:	2001      	movs	r0, #1
   83394:	f640 11c4 	movw	r1, #2500	; 0x9c4
   83398:	4b3d      	ldr	r3, [pc, #244]	; (83490 <Cl_bc_controller+0x5b0>)
   8339a:	4798      	blx	r3
										
									}
								//	sv_prop_startmixing();
								//	SetHeaterState(CL_HEATER_STATE_START);
//check	
									potvalue = (600 * 1024)/10000;                                 // added on 30.06.2017
   8339c:	4b32      	ldr	r3, [pc, #200]	; (83468 <Cl_bc_controller+0x588>)
   8339e:	223d      	movs	r2, #61	; 0x3d
   833a0:	801a      	strh	r2, [r3, #0]
									sv_cs_setpotvalue(potvalue);
   833a2:	4b31      	ldr	r3, [pc, #196]	; (83468 <Cl_bc_controller+0x588>)
   833a4:	881b      	ldrh	r3, [r3, #0]
   833a6:	4618      	mov	r0, r3
   833a8:	4b23      	ldr	r3, [pc, #140]	; (83438 <Cl_bc_controller+0x558>)
   833aa:	4798      	blx	r3

									sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   833ac:	2002      	movs	r0, #2
   833ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   833b2:	4b22      	ldr	r3, [pc, #136]	; (8343c <Cl_bc_controller+0x55c>)
   833b4:	4798      	blx	r3
									sv_cntrl_setpumpspeed(DCMOTOR1,1000);  //960
   833b6:	2001      	movs	r0, #1
   833b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   833bc:	4b1f      	ldr	r3, [pc, #124]	; (8343c <Cl_bc_controller+0x55c>)
   833be:	4798      	blx	r3
									
									
									cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   833c0:	2005      	movs	r0, #5
   833c2:	4b22      	ldr	r3, [pc, #136]	; (8344c <Cl_bc_controller+0x56c>)
   833c4:	4798      	blx	r3
   833c6:	4603      	mov	r3, r0
   833c8:	73fb      	strb	r3, [r7, #15]
									cl_bc_returncode = sv_cntrl_deactivate_valve(VALVE_ID19);
   833ca:	2013      	movs	r0, #19
   833cc:	4b20      	ldr	r3, [pc, #128]	; (83450 <Cl_bc_controller+0x570>)
   833ce:	4798      	blx	r3
   833d0:	4603      	mov	r3, r0
   833d2:	73fb      	strb	r3, [r7, #15]
									sv_cntrl_deactivate_valve(VALVE_ID4);
   833d4:	2004      	movs	r0, #4
   833d6:	4b1e      	ldr	r3, [pc, #120]	; (83450 <Cl_bc_controller+0x570>)
   833d8:	4798      	blx	r3
									cl_bc_returncode = Cl_mac_apprequesthandler(MACREQ_BC_OPENFILL_COMPLETED);
   833da:	2051      	movs	r0, #81	; 0x51
   833dc:	4b1d      	ldr	r3, [pc, #116]	; (83454 <Cl_bc_controller+0x574>)
   833de:	4798      	blx	r3
   833e0:	4603      	mov	r3, r0
   833e2:	73fb      	strb	r3, [r7, #15]
									if(cl_bc_returncode == CL_OK)
   833e4:	7bfb      	ldrb	r3, [r7, #15]
   833e6:	2b00      	cmp	r3, #0
   833e8:	d10f      	bne.n	8340a <Cl_bc_controller+0x52a>
									{
										Cl_AlarmActivateAlarms(BC_ALARM,true); // manav02 activated
   833ea:	201a      	movs	r0, #26
   833ec:	2101      	movs	r1, #1
   833ee:	4b1a      	ldr	r3, [pc, #104]	; (83458 <Cl_bc_controller+0x578>)
   833f0:	4798      	blx	r3
										bc_laststate = bc_state;
   833f2:	4b1a      	ldr	r3, [pc, #104]	; (8345c <Cl_bc_controller+0x57c>)
   833f4:	781a      	ldrb	r2, [r3, #0]
   833f6:	4b1a      	ldr	r3, [pc, #104]	; (83460 <Cl_bc_controller+0x580>)
   833f8:	701a      	strb	r2, [r3, #0]
										bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
   833fa:	4b18      	ldr	r3, [pc, #96]	; (8345c <Cl_bc_controller+0x57c>)
   833fc:	220c      	movs	r2, #12
   833fe:	701a      	strb	r2, [r3, #0]
										bc_laststate = bc_state;
   83400:	4b16      	ldr	r3, [pc, #88]	; (8345c <Cl_bc_controller+0x57c>)
   83402:	781a      	ldrb	r2, [r3, #0]
   83404:	4b16      	ldr	r3, [pc, #88]	; (83460 <Cl_bc_controller+0x580>)
   83406:	701a      	strb	r2, [r3, #0]
									}
								}
								}
								break;
   83408:	e05d      	b.n	834c6 <Cl_bc_controller+0x5e6>
   8340a:	e05c      	b.n	834c6 <Cl_bc_controller+0x5e6>
								case	BC_EVENT_CS:
								break;
								case BC_EVENT_STOP_FOR_BC1:
								openfillcounter = 0;
   8340c:	4b0d      	ldr	r3, [pc, #52]	; (83444 <Cl_bc_controller+0x564>)
   8340e:	2200      	movs	r2, #0
   83410:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   83412:	2005      	movs	r0, #5
   83414:	4b0d      	ldr	r3, [pc, #52]	; (8344c <Cl_bc_controller+0x56c>)
   83416:	4798      	blx	r3
   83418:	4603      	mov	r3, r0
   8341a:	73fb      	strb	r3, [r7, #15]
								if(cl_bc_returncode == CL_OK)
   8341c:	7bfb      	ldrb	r3, [r7, #15]
   8341e:	2b00      	cmp	r3, #0
   83420:	d107      	bne.n	83432 <Cl_bc_controller+0x552>
								{
									bc_laststate = bc_state;
   83422:	4b0e      	ldr	r3, [pc, #56]	; (8345c <Cl_bc_controller+0x57c>)
   83424:	781a      	ldrb	r2, [r3, #0]
   83426:	4b0e      	ldr	r3, [pc, #56]	; (83460 <Cl_bc_controller+0x580>)
   83428:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC1;
   8342a:	4b0c      	ldr	r3, [pc, #48]	; (8345c <Cl_bc_controller+0x57c>)
   8342c:	2210      	movs	r2, #16
   8342e:	701a      	strb	r2, [r3, #0]
								}
								break;
   83430:	e049      	b.n	834c6 <Cl_bc_controller+0x5e6>
   83432:	e048      	b.n	834c6 <Cl_bc_controller+0x5e6>
   83434:	20071d6a 	.word	0x20071d6a
   83438:	0009b899 	.word	0x0009b899
   8343c:	0009b461 	.word	0x0009b461
   83440:	20071940 	.word	0x20071940
   83444:	2007193e 	.word	0x2007193e
   83448:	0009b875 	.word	0x0009b875
   8344c:	0009b5cd 	.word	0x0009b5cd
   83450:	0009b409 	.word	0x0009b409
   83454:	0008bbb9 	.word	0x0008bbb9
   83458:	00082a35 	.word	0x00082a35
   8345c:	20071939 	.word	0x20071939
   83460:	2007193a 	.word	0x2007193a
   83464:	0009b759 	.word	0x0009b759
   83468:	20071942 	.word	0x20071942
   8346c:	20071e15 	.word	0x20071e15
   83470:	0009b55d 	.word	0x0009b55d
   83474:	0009b3c1 	.word	0x0009b3c1
   83478:	0009b4c9 	.word	0x0009b4c9
   8347c:	00089381 	.word	0x00089381
   83480:	42a00000 	.word	0x42a00000
   83484:	000892f9 	.word	0x000892f9
   83488:	0009b3e9 	.word	0x0009b3e9
   8348c:	0009b785 	.word	0x0009b785
   83490:	00097499 	.word	0x00097499
   83494:	00097255 	.word	0x00097255
   83498:	0009421d 	.word	0x0009421d
								case BC_EVENT_STOP_FOR_BC2:
								openfillcounter = 0;
   8349c:	4b94      	ldr	r3, [pc, #592]	; (836f0 <Cl_bc_controller+0x810>)
   8349e:	2200      	movs	r2, #0
   834a0:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   834a2:	2006      	movs	r0, #6
   834a4:	4b93      	ldr	r3, [pc, #588]	; (836f4 <Cl_bc_controller+0x814>)
   834a6:	4798      	blx	r3
   834a8:	4603      	mov	r3, r0
   834aa:	73fb      	strb	r3, [r7, #15]
								if(cl_bc_returncode == CL_OK)
   834ac:	7bfb      	ldrb	r3, [r7, #15]
   834ae:	2b00      	cmp	r3, #0
   834b0:	d107      	bne.n	834c2 <Cl_bc_controller+0x5e2>
								{
									bc_laststate = bc_state;
   834b2:	4b91      	ldr	r3, [pc, #580]	; (836f8 <Cl_bc_controller+0x818>)
   834b4:	781a      	ldrb	r2, [r3, #0]
   834b6:	4b91      	ldr	r3, [pc, #580]	; (836fc <Cl_bc_controller+0x81c>)
   834b8:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC2;
   834ba:	4b8f      	ldr	r3, [pc, #572]	; (836f8 <Cl_bc_controller+0x818>)
   834bc:	2212      	movs	r2, #18
   834be:	701a      	strb	r2, [r3, #0]
								}
								break;
   834c0:	e001      	b.n	834c6 <Cl_bc_controller+0x5e6>
   834c2:	e000      	b.n	834c6 <Cl_bc_controller+0x5e6>
								default:break;
   834c4:	bf00      	nop
							}
			break;
   834c6:	e341      	b.n	83b4c <Cl_bc_controller+0xc6c>
			case CL_BC_STATE_V15OPEN_TRANSITION:
							switch(cl_bc_event)
   834c8:	79fb      	ldrb	r3, [r7, #7]
   834ca:	2b01      	cmp	r3, #1
   834cc:	d002      	beq.n	834d4 <Cl_bc_controller+0x5f4>
   834ce:	2b02      	cmp	r3, #2
   834d0:	d004      	beq.n	834dc <Cl_bc_controller+0x5fc>
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_V15OPEN;
									bc_wait = false;
								}
								break;
								default:break;
   834d2:	e013      	b.n	834fc <Cl_bc_controller+0x61c>
			case CL_BC_STATE_V15OPEN_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
									bc_wait = true;
   834d4:	4b8a      	ldr	r3, [pc, #552]	; (83700 <Cl_bc_controller+0x820>)
   834d6:	2201      	movs	r2, #1
   834d8:	701a      	strb	r2, [r3, #0]
								
								break;
   834da:	e00f      	b.n	834fc <Cl_bc_controller+0x61c>
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   834dc:	4b88      	ldr	r3, [pc, #544]	; (83700 <Cl_bc_controller+0x820>)
   834de:	781b      	ldrb	r3, [r3, #0]
   834e0:	2b00      	cmp	r3, #0
   834e2:	d00a      	beq.n	834fa <Cl_bc_controller+0x61a>
								{
									bc_laststate = bc_state;
   834e4:	4b84      	ldr	r3, [pc, #528]	; (836f8 <Cl_bc_controller+0x818>)
   834e6:	781a      	ldrb	r2, [r3, #0]
   834e8:	4b84      	ldr	r3, [pc, #528]	; (836fc <Cl_bc_controller+0x81c>)
   834ea:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_V15OPEN;
   834ec:	4b82      	ldr	r3, [pc, #520]	; (836f8 <Cl_bc_controller+0x818>)
   834ee:	2205      	movs	r2, #5
   834f0:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   834f2:	4b83      	ldr	r3, [pc, #524]	; (83700 <Cl_bc_controller+0x820>)
   834f4:	2200      	movs	r2, #0
   834f6:	701a      	strb	r2, [r3, #0]
								}
								break;
   834f8:	e7ff      	b.n	834fa <Cl_bc_controller+0x61a>
   834fa:	bf00      	nop
								default:break;
							}
			break;
   834fc:	e326      	b.n	83b4c <Cl_bc_controller+0xc6c>
			case CL_BC_STATE_V15OPEN:
							switch(cl_bc_event)
   834fe:	79fb      	ldrb	r3, [r7, #7]
   83500:	2b02      	cmp	r3, #2
   83502:	d004      	beq.n	8350e <Cl_bc_controller+0x62e>
   83504:	2b03      	cmp	r3, #3
   83506:	d004      	beq.n	83512 <Cl_bc_controller+0x632>
   83508:	2b01      	cmp	r3, #1
   8350a:	d004      	beq.n	83516 <Cl_bc_controller+0x636>
								case	BC_EVENT_SECOND:
										
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   8350c:	e004      	b.n	83518 <Cl_bc_controller+0x638>
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
										
								break;
   8350e:	bf00      	nop
   83510:	e31c      	b.n	83b4c <Cl_bc_controller+0xc6c>
								case	BC_EVENT_CS:
								break;
   83512:	bf00      	nop
   83514:	e31a      	b.n	83b4c <Cl_bc_controller+0xc6c>
			break;
			case CL_BC_STATE_V15OPEN:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   83516:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   83518:	e318      	b.n	83b4c <Cl_bc_controller+0xc6c>
			case CL_BC_STATE_V2OPEN_TRANSITION:
							switch(cl_bc_event)
   8351a:	79fb      	ldrb	r3, [r7, #7]
   8351c:	2b01      	cmp	r3, #1
   8351e:	d002      	beq.n	83526 <Cl_bc_controller+0x646>
   83520:	2b02      	cmp	r3, #2
   83522:	d004      	beq.n	8352e <Cl_bc_controller+0x64e>
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_V2OPEN;
									bc_wait = false;
								}
								break;
								default:break;
   83524:	e013      	b.n	8354e <Cl_bc_controller+0x66e>
			case CL_BC_STATE_V2OPEN_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
								bc_wait = true;
   83526:	4b76      	ldr	r3, [pc, #472]	; (83700 <Cl_bc_controller+0x820>)
   83528:	2201      	movs	r2, #1
   8352a:	701a      	strb	r2, [r3, #0]
								
								break;
   8352c:	e00f      	b.n	8354e <Cl_bc_controller+0x66e>
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   8352e:	4b74      	ldr	r3, [pc, #464]	; (83700 <Cl_bc_controller+0x820>)
   83530:	781b      	ldrb	r3, [r3, #0]
   83532:	2b00      	cmp	r3, #0
   83534:	d00a      	beq.n	8354c <Cl_bc_controller+0x66c>
								{
									bc_laststate = bc_state;
   83536:	4b70      	ldr	r3, [pc, #448]	; (836f8 <Cl_bc_controller+0x818>)
   83538:	781a      	ldrb	r2, [r3, #0]
   8353a:	4b70      	ldr	r3, [pc, #448]	; (836fc <Cl_bc_controller+0x81c>)
   8353c:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_V2OPEN;
   8353e:	4b6e      	ldr	r3, [pc, #440]	; (836f8 <Cl_bc_controller+0x818>)
   83540:	2207      	movs	r2, #7
   83542:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   83544:	4b6e      	ldr	r3, [pc, #440]	; (83700 <Cl_bc_controller+0x820>)
   83546:	2200      	movs	r2, #0
   83548:	701a      	strb	r2, [r3, #0]
								}
								break;
   8354a:	e7ff      	b.n	8354c <Cl_bc_controller+0x66c>
   8354c:	bf00      	nop
								default:break;
							}
			break;
   8354e:	e2fd      	b.n	83b4c <Cl_bc_controller+0xc6c>
			case CL_BC_STATE_V2OPEN:
							switch(cl_bc_event)
   83550:	79fb      	ldrb	r3, [r7, #7]
   83552:	2b02      	cmp	r3, #2
   83554:	d004      	beq.n	83560 <Cl_bc_controller+0x680>
   83556:	2b03      	cmp	r3, #3
   83558:	d004      	beq.n	83564 <Cl_bc_controller+0x684>
   8355a:	2b01      	cmp	r3, #1
   8355c:	d004      	beq.n	83568 <Cl_bc_controller+0x688>
								break;
								case	BC_EVENT_SECOND:
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   8355e:	e004      	b.n	8356a <Cl_bc_controller+0x68a>
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								break;
   83560:	bf00      	nop
   83562:	e2f3      	b.n	83b4c <Cl_bc_controller+0xc6c>
								case	BC_EVENT_CS:
								break;
   83564:	bf00      	nop
   83566:	e2f1      	b.n	83b4c <Cl_bc_controller+0xc6c>
			break;
			case CL_BC_STATE_V2OPEN:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   83568:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   8356a:	e2ef      	b.n	83b4c <Cl_bc_controller+0xc6c>
			case CL_BC_STATE_BO1_V4_TRANSITION:
							switch(cl_bc_event)
   8356c:	79fb      	ldrb	r3, [r7, #7]
   8356e:	2b01      	cmp	r3, #1
   83570:	d002      	beq.n	83578 <Cl_bc_controller+0x698>
   83572:	2b02      	cmp	r3, #2
   83574:	d00b      	beq.n	8358e <Cl_bc_controller+0x6ae>
							//		bc_laststate = bc_state;
							//		bc_state = CL_BC_STATE_BO1_V4;
							//		bc_wait = false;
								}
								break;
								default:break;
   83576:	e00b      	b.n	83590 <Cl_bc_controller+0x6b0>
			case CL_BC_STATE_BO1_V4_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
									bc_laststate = bc_state;
   83578:	4b5f      	ldr	r3, [pc, #380]	; (836f8 <Cl_bc_controller+0x818>)
   8357a:	781a      	ldrb	r2, [r3, #0]
   8357c:	4b5f      	ldr	r3, [pc, #380]	; (836fc <Cl_bc_controller+0x81c>)
   8357e:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO1_V4;
   83580:	4b5d      	ldr	r3, [pc, #372]	; (836f8 <Cl_bc_controller+0x818>)
   83582:	2209      	movs	r2, #9
   83584:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   83586:	4b5e      	ldr	r3, [pc, #376]	; (83700 <Cl_bc_controller+0x820>)
   83588:	2200      	movs	r2, #0
   8358a:	701a      	strb	r2, [r3, #0]
								break;
   8358c:	e000      	b.n	83590 <Cl_bc_controller+0x6b0>
								{
							//		bc_laststate = bc_state;
							//		bc_state = CL_BC_STATE_BO1_V4;
							//		bc_wait = false;
								}
								break;
   8358e:	bf00      	nop
								default:break;
							}
			break;
   83590:	e2dc      	b.n	83b4c <Cl_bc_controller+0xc6c>
			case CL_BC_STATE_BO1_V4:
							switch(cl_bc_event)
   83592:	79fb      	ldrb	r3, [r7, #7]
   83594:	2b02      	cmp	r3, #2
   83596:	d004      	beq.n	835a2 <Cl_bc_controller+0x6c2>
   83598:	2b03      	cmp	r3, #3
   8359a:	d004      	beq.n	835a6 <Cl_bc_controller+0x6c6>
   8359c:	2b01      	cmp	r3, #1
   8359e:	d004      	beq.n	835aa <Cl_bc_controller+0x6ca>
								break;
								case	BC_EVENT_SECOND:
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   835a0:	e004      	b.n	835ac <Cl_bc_controller+0x6cc>
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								break;
   835a2:	bf00      	nop
   835a4:	e2d2      	b.n	83b4c <Cl_bc_controller+0xc6c>
								case	BC_EVENT_CS:
								break;
   835a6:	bf00      	nop
   835a8:	e2d0      	b.n	83b4c <Cl_bc_controller+0xc6c>
			break;
			case CL_BC_STATE_BO1_V4:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   835aa:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   835ac:	e2ce      	b.n	83b4c <Cl_bc_controller+0xc6c>
			case CL_BC_STATE_BO2_V4_TRANSITION:
							switch(cl_bc_event)
   835ae:	79fb      	ldrb	r3, [r7, #7]
   835b0:	2b01      	cmp	r3, #1
   835b2:	d002      	beq.n	835ba <Cl_bc_controller+0x6da>
   835b4:	2b02      	cmp	r3, #2
   835b6:	d004      	beq.n	835c2 <Cl_bc_controller+0x6e2>
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_BO2_V4;
									bc_wait = false;
								}
								break;
								default:break;
   835b8:	e013      	b.n	835e2 <Cl_bc_controller+0x702>
			case CL_BC_STATE_BO2_V4_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
								bc_wait = true;
   835ba:	4b51      	ldr	r3, [pc, #324]	; (83700 <Cl_bc_controller+0x820>)
   835bc:	2201      	movs	r2, #1
   835be:	701a      	strb	r2, [r3, #0]
								
								break;
   835c0:	e00f      	b.n	835e2 <Cl_bc_controller+0x702>
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   835c2:	4b4f      	ldr	r3, [pc, #316]	; (83700 <Cl_bc_controller+0x820>)
   835c4:	781b      	ldrb	r3, [r3, #0]
   835c6:	2b00      	cmp	r3, #0
   835c8:	d00a      	beq.n	835e0 <Cl_bc_controller+0x700>
								{
									bc_laststate = bc_state;
   835ca:	4b4b      	ldr	r3, [pc, #300]	; (836f8 <Cl_bc_controller+0x818>)
   835cc:	781a      	ldrb	r2, [r3, #0]
   835ce:	4b4b      	ldr	r3, [pc, #300]	; (836fc <Cl_bc_controller+0x81c>)
   835d0:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO2_V4;
   835d2:	4b49      	ldr	r3, [pc, #292]	; (836f8 <Cl_bc_controller+0x818>)
   835d4:	220b      	movs	r2, #11
   835d6:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   835d8:	4b49      	ldr	r3, [pc, #292]	; (83700 <Cl_bc_controller+0x820>)
   835da:	2200      	movs	r2, #0
   835dc:	701a      	strb	r2, [r3, #0]
								}
								break;
   835de:	e7ff      	b.n	835e0 <Cl_bc_controller+0x700>
   835e0:	bf00      	nop
								default:break;
							}
			break;
   835e2:	e2b3      	b.n	83b4c <Cl_bc_controller+0xc6c>
			case CL_BC_STATE_BO2_V4:
							switch(cl_bc_event)
   835e4:	79fb      	ldrb	r3, [r7, #7]
   835e6:	2b02      	cmp	r3, #2
   835e8:	d004      	beq.n	835f4 <Cl_bc_controller+0x714>
   835ea:	2b03      	cmp	r3, #3
   835ec:	d004      	beq.n	835f8 <Cl_bc_controller+0x718>
   835ee:	2b01      	cmp	r3, #1
   835f0:	d004      	beq.n	835fc <Cl_bc_controller+0x71c>
								break;
								case	BC_EVENT_SECOND:
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   835f2:	e004      	b.n	835fe <Cl_bc_controller+0x71e>
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								break;
   835f4:	bf00      	nop
   835f6:	e2a9      	b.n	83b4c <Cl_bc_controller+0xc6c>
								case	BC_EVENT_CS:
								break;
   835f8:	bf00      	nop
   835fa:	e2a7      	b.n	83b4c <Cl_bc_controller+0xc6c>
			break;
			case CL_BC_STATE_BO2_V4:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   835fc:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   835fe:	e2a5      	b.n	83b4c <Cl_bc_controller+0xc6c>
			case CL_BC_STATE_BO1_V13V14_TRANSITION:
							switch(cl_bc_event)
   83600:	79fb      	ldrb	r3, [r7, #7]
   83602:	2b00      	cmp	r3, #0
   83604:	d001      	beq.n	8360a <Cl_bc_controller+0x72a>
   83606:	2b02      	cmp	r3, #2
									
								}
								break;
								case BC_EVENT_SECOND:
						
								break;
   83608:	e019      	b.n	8363e <Cl_bc_controller+0x75e>
			break;
			case CL_BC_STATE_BO1_V13V14_TRANSITION:
							switch(cl_bc_event)
							{
								case BC_EVENT_50MS:
								fill_time++;
   8360a:	4b3e      	ldr	r3, [pc, #248]	; (83704 <Cl_bc_controller+0x824>)
   8360c:	881b      	ldrh	r3, [r3, #0]
   8360e:	b29b      	uxth	r3, r3
   83610:	b29b      	uxth	r3, r3
   83612:	3301      	adds	r3, #1
   83614:	b29b      	uxth	r3, r3
   83616:	b29a      	uxth	r2, r3
   83618:	4b3a      	ldr	r3, [pc, #232]	; (83704 <Cl_bc_controller+0x824>)
   8361a:	801a      	strh	r2, [r3, #0]
								wait_4_propo_off ++;
   8361c:	4b3a      	ldr	r3, [pc, #232]	; (83708 <Cl_bc_controller+0x828>)
   8361e:	881b      	ldrh	r3, [r3, #0]
   83620:	3301      	adds	r3, #1
   83622:	b29a      	uxth	r2, r3
   83624:	4b38      	ldr	r3, [pc, #224]	; (83708 <Cl_bc_controller+0x828>)
   83626:	801a      	strh	r2, [r3, #0]
// 									wait_counter ++;	// 1 sec wait
// 									
// 								}
// 								else
								{
									wait_counter = 0;
   83628:	4b38      	ldr	r3, [pc, #224]	; (8370c <Cl_bc_controller+0x82c>)
   8362a:	2200      	movs	r2, #0
   8362c:	801a      	strh	r2, [r3, #0]
									bc_laststate = bc_state;
   8362e:	4b32      	ldr	r3, [pc, #200]	; (836f8 <Cl_bc_controller+0x818>)
   83630:	781a      	ldrb	r2, [r3, #0]
   83632:	4b32      	ldr	r3, [pc, #200]	; (836fc <Cl_bc_controller+0x81c>)
   83634:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO1_V13V14;
   83636:	4b30      	ldr	r3, [pc, #192]	; (836f8 <Cl_bc_controller+0x818>)
   83638:	220d      	movs	r2, #13
   8363a:	701a      	strb	r2, [r3, #0]
									
								}
								break;
   8363c:	bf00      	nop
								case BC_EVENT_SECOND:
						
								break;
				
							}
			break;
   8363e:	e285      	b.n	83b4c <Cl_bc_controller+0xc6c>
			case CL_BC_STATE_BO1_V13V14:
							switch(cl_bc_event)
   83640:	79fb      	ldrb	r3, [r7, #7]
   83642:	2b03      	cmp	r3, #3
   83644:	f200 8103 	bhi.w	8384e <Cl_bc_controller+0x96e>
   83648:	a201      	add	r2, pc, #4	; (adr r2, 83650 <Cl_bc_controller+0x770>)
   8364a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8364e:	bf00      	nop
   83650:	00083661 	.word	0x00083661
   83654:	0008384f 	.word	0x0008384f
   83658:	0008384f 	.word	0x0008384f
   8365c:	000836a1 	.word	0x000836a1
							{
								case BC_EVENT_50MS:
								fill_time++;
   83660:	4b28      	ldr	r3, [pc, #160]	; (83704 <Cl_bc_controller+0x824>)
   83662:	881b      	ldrh	r3, [r3, #0]
   83664:	b29b      	uxth	r3, r3
   83666:	b29b      	uxth	r3, r3
   83668:	3301      	adds	r3, #1
   8366a:	b29b      	uxth	r3, r3
   8366c:	b29a      	uxth	r2, r3
   8366e:	4b25      	ldr	r3, [pc, #148]	; (83704 <Cl_bc_controller+0x824>)
   83670:	801a      	strh	r2, [r3, #0]
								wait_4_propo_off ++;
   83672:	4b25      	ldr	r3, [pc, #148]	; (83708 <Cl_bc_controller+0x828>)
   83674:	881b      	ldrh	r3, [r3, #0]
   83676:	3301      	adds	r3, #1
   83678:	b29a      	uxth	r2, r3
   8367a:	4b23      	ldr	r3, [pc, #140]	; (83708 <Cl_bc_controller+0x828>)
   8367c:	801a      	strh	r2, [r3, #0]
									if (wait_4_propo_off == 42)
   8367e:	4b22      	ldr	r3, [pc, #136]	; (83708 <Cl_bc_controller+0x828>)
   83680:	881b      	ldrh	r3, [r3, #0]
   83682:	2b2a      	cmp	r3, #42	; 0x2a
   83684:	d103      	bne.n	8368e <Cl_bc_controller+0x7ae>
									{
										sv_cntrl_activate_valve(VALVE_ID19);
   83686:	2013      	movs	r0, #19
   83688:	4b21      	ldr	r3, [pc, #132]	; (83710 <Cl_bc_controller+0x830>)
   8368a:	4798      	blx	r3
   8368c:	e007      	b.n	8369e <Cl_bc_controller+0x7be>
									//	sv_cntrl_activate_valve(VALVE_ID20);
									//	sv_cntrl_activate_valve(VALVE_ID4);
									}
									else if (wait_4_propo_off == 46)
   8368e:	4b1e      	ldr	r3, [pc, #120]	; (83708 <Cl_bc_controller+0x828>)
   83690:	881b      	ldrh	r3, [r3, #0]
   83692:	2b2e      	cmp	r3, #46	; 0x2e
   83694:	d103      	bne.n	8369e <Cl_bc_controller+0x7be>
									{
									//	sv_cntrl_deactivate_valve(VALVE_ID4);
									//	sv_cntrl_deactivate_valve(VALVE_ID20);
										sv_cntrl_deactivate_valve(VALVE_ID19);
   83696:	2013      	movs	r0, #19
   83698:	4b1e      	ldr	r3, [pc, #120]	; (83714 <Cl_bc_controller+0x834>)
   8369a:	4798      	blx	r3
										
									}
								break;
   8369c:	e0d8      	b.n	83850 <Cl_bc_controller+0x970>
   8369e:	e0d7      	b.n	83850 <Cl_bc_controller+0x970>
								}
								
								break;
								case	BC_EVENT_CS:
									//switch_time1 = fill_time;
									current_sense = true;
   836a0:	4b1d      	ldr	r3, [pc, #116]	; (83718 <Cl_bc_controller+0x838>)
   836a2:	2201      	movs	r2, #1
   836a4:	701a      	strb	r2, [r3, #0]
									cl_tdata.word =0;
   836a6:	4b1d      	ldr	r3, [pc, #116]	; (8371c <Cl_bc_controller+0x83c>)
   836a8:	2200      	movs	r2, #0
   836aa:	601a      	str	r2, [r3, #0]
									cl_tdata.Twobyte = fill_time;
   836ac:	4b15      	ldr	r3, [pc, #84]	; (83704 <Cl_bc_controller+0x824>)
   836ae:	881b      	ldrh	r3, [r3, #0]
   836b0:	b29a      	uxth	r2, r3
   836b2:	4b1a      	ldr	r3, [pc, #104]	; (8371c <Cl_bc_controller+0x83c>)
   836b4:	801a      	strh	r2, [r3, #0]
									cl_tdata.bytearray[2] = 22;
   836b6:	4b19      	ldr	r3, [pc, #100]	; (8371c <Cl_bc_controller+0x83c>)
   836b8:	2216      	movs	r2, #22
   836ba:	709a      	strb	r2, [r3, #2]
									cl_tdata_temp.Twobyte = fill_time;
   836bc:	4b11      	ldr	r3, [pc, #68]	; (83704 <Cl_bc_controller+0x824>)
   836be:	881b      	ldrh	r3, [r3, #0]
   836c0:	b29a      	uxth	r2, r3
   836c2:	4b17      	ldr	r3, [pc, #92]	; (83720 <Cl_bc_controller+0x840>)
   836c4:	801a      	strh	r2, [r3, #0]
									if (bc_flag == 1)
   836c6:	4b17      	ldr	r3, [pc, #92]	; (83724 <Cl_bc_controller+0x844>)
   836c8:	781b      	ldrb	r3, [r3, #0]
   836ca:	2b01      	cmp	r3, #1
   836cc:	f040 8099 	bne.w	83802 <Cl_bc_controller+0x922>
									{
										switch (flow_rate)
   836d0:	4b15      	ldr	r3, [pc, #84]	; (83728 <Cl_bc_controller+0x848>)
   836d2:	681b      	ldr	r3, [r3, #0]
   836d4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   836d8:	f000 8092 	beq.w	83800 <Cl_bc_controller+0x920>
   836dc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   836e0:	d824      	bhi.n	8372c <Cl_bc_controller+0x84c>
   836e2:	2bc8      	cmp	r3, #200	; 0xc8
   836e4:	f000 8082 	beq.w	837ec <Cl_bc_controller+0x90c>
   836e8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   836ec:	d060      	beq.n	837b0 <Cl_bc_controller+0x8d0>
   836ee:	e088      	b.n	83802 <Cl_bc_controller+0x922>
   836f0:	2007193e 	.word	0x2007193e
   836f4:	0009b5cd 	.word	0x0009b5cd
   836f8:	20071939 	.word	0x20071939
   836fc:	2007193a 	.word	0x2007193a
   83700:	2007193b 	.word	0x2007193b
   83704:	20071952 	.word	0x20071952
   83708:	20071950 	.word	0x20071950
   8370c:	2007193c 	.word	0x2007193c
   83710:	0009b3e9 	.word	0x0009b3e9
   83714:	0009b409 	.word	0x0009b409
   83718:	20071b90 	.word	0x20071b90
   8371c:	20071954 	.word	0x20071954
   83720:	20071958 	.word	0x20071958
   83724:	20071a67 	.word	0x20071a67
   83728:	20071a68 	.word	0x20071a68
   8372c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   83730:	d020      	beq.n	83774 <Cl_bc_controller+0x894>
   83732:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   83736:	d164      	bne.n	83802 <Cl_bc_controller+0x922>
										{
											case 800:
												if ((fill_time > 55) || (fill_time < 45))
   83738:	4b91      	ldr	r3, [pc, #580]	; (83980 <Cl_bc_controller+0xaa0>)
   8373a:	881b      	ldrh	r3, [r3, #0]
   8373c:	b21b      	sxth	r3, r3
   8373e:	2b37      	cmp	r3, #55	; 0x37
   83740:	dc04      	bgt.n	8374c <Cl_bc_controller+0x86c>
   83742:	4b8f      	ldr	r3, [pc, #572]	; (83980 <Cl_bc_controller+0xaa0>)
   83744:	881b      	ldrh	r3, [r3, #0]
   83746:	b21b      	sxth	r3, r3
   83748:	2b2c      	cmp	r3, #44	; 0x2c
   8374a:	dc0e      	bgt.n	8376a <Cl_bc_controller+0x88a>
												{	
													
													switchb01alrcnt++ ;
   8374c:	4b8d      	ldr	r3, [pc, #564]	; (83984 <Cl_bc_controller+0xaa4>)
   8374e:	681b      	ldr	r3, [r3, #0]
   83750:	3301      	adds	r3, #1
   83752:	4a8c      	ldr	r2, [pc, #560]	; (83984 <Cl_bc_controller+0xaa4>)
   83754:	6013      	str	r3, [r2, #0]

													if(switchb01alrcnt >3){
   83756:	4b8b      	ldr	r3, [pc, #556]	; (83984 <Cl_bc_controller+0xaa4>)
   83758:	681b      	ldr	r3, [r3, #0]
   8375a:	2b03      	cmp	r3, #3
   8375c:	dd04      	ble.n	83768 <Cl_bc_controller+0x888>
// 													sv_cntrl_setyellowalarm();
// 													sv_cntrl_activate_valve( VALVE_ID4);
// 													cl_wait(50);
// 													sv_cntrl_deactivate_valve(VALVE_ID4);
// 													cl_wait(50);
													 Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   8375e:	201a      	movs	r0, #26
   83760:	2101      	movs	r1, #1
   83762:	4b89      	ldr	r3, [pc, #548]	; (83988 <Cl_bc_controller+0xaa8>)
   83764:	4798      	blx	r3
												if ((fill_time > 55) || (fill_time < 45))
												{	
													
													switchb01alrcnt++ ;

													if(switchb01alrcnt >3){
   83766:	e004      	b.n	83772 <Cl_bc_controller+0x892>
   83768:	e003      	b.n	83772 <Cl_bc_controller+0x892>
													 Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
													}
												}
												else
												{
													switchb01alrcnt = 0 ;
   8376a:	4b86      	ldr	r3, [pc, #536]	; (83984 <Cl_bc_controller+0xaa4>)
   8376c:	2200      	movs	r2, #0
   8376e:	601a      	str	r2, [r3, #0]
										//			sv_cntrl_resetyellowalarm();
												}
											break;
   83770:	e047      	b.n	83802 <Cl_bc_controller+0x922>
   83772:	e046      	b.n	83802 <Cl_bc_controller+0x922>
											
											case 500:
												if ((fill_time > 75) || (fill_time < 63))
   83774:	4b82      	ldr	r3, [pc, #520]	; (83980 <Cl_bc_controller+0xaa0>)
   83776:	881b      	ldrh	r3, [r3, #0]
   83778:	b21b      	sxth	r3, r3
   8377a:	2b4b      	cmp	r3, #75	; 0x4b
   8377c:	dc04      	bgt.n	83788 <Cl_bc_controller+0x8a8>
   8377e:	4b80      	ldr	r3, [pc, #512]	; (83980 <Cl_bc_controller+0xaa0>)
   83780:	881b      	ldrh	r3, [r3, #0]
   83782:	b21b      	sxth	r3, r3
   83784:	2b3e      	cmp	r3, #62	; 0x3e
   83786:	dc0e      	bgt.n	837a6 <Cl_bc_controller+0x8c6>
												{
													switchb01alrcnt++ ;
   83788:	4b7e      	ldr	r3, [pc, #504]	; (83984 <Cl_bc_controller+0xaa4>)
   8378a:	681b      	ldr	r3, [r3, #0]
   8378c:	3301      	adds	r3, #1
   8378e:	4a7d      	ldr	r2, [pc, #500]	; (83984 <Cl_bc_controller+0xaa4>)
   83790:	6013      	str	r3, [r2, #0]

													if(switchb01alrcnt >3){
   83792:	4b7c      	ldr	r3, [pc, #496]	; (83984 <Cl_bc_controller+0xaa4>)
   83794:	681b      	ldr	r3, [r3, #0]
   83796:	2b03      	cmp	r3, #3
   83798:	dd04      	ble.n	837a4 <Cl_bc_controller+0x8c4>
// 													sv_cntrl_setyellowalarm();
// 													sv_cntrl_activate_valve( VALVE_ID4);
// 													cl_wait(50);
// 													sv_cntrl_deactivate_valve(VALVE_ID4);
// 													cl_wait(50);
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   8379a:	201a      	movs	r0, #26
   8379c:	2101      	movs	r1, #1
   8379e:	4b7a      	ldr	r3, [pc, #488]	; (83988 <Cl_bc_controller+0xaa8>)
   837a0:	4798      	blx	r3
											case 500:
												if ((fill_time > 75) || (fill_time < 63))
												{
													switchb01alrcnt++ ;

													if(switchb01alrcnt >3){
   837a2:	e004      	b.n	837ae <Cl_bc_controller+0x8ce>
   837a4:	e003      	b.n	837ae <Cl_bc_controller+0x8ce>
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
													}
												}
												else
												{
													switchb01alrcnt = 0 ;
   837a6:	4b77      	ldr	r3, [pc, #476]	; (83984 <Cl_bc_controller+0xaa4>)
   837a8:	2200      	movs	r2, #0
   837aa:	601a      	str	r2, [r3, #0]
									//				sv_cntrl_resetyellowalarm();
												}
											break;
   837ac:	e029      	b.n	83802 <Cl_bc_controller+0x922>
   837ae:	e028      	b.n	83802 <Cl_bc_controller+0x922>
											
											case 400:
											break;
											
											case 300:
												if ((fill_time > 122) || (fill_time < 110))
   837b0:	4b73      	ldr	r3, [pc, #460]	; (83980 <Cl_bc_controller+0xaa0>)
   837b2:	881b      	ldrh	r3, [r3, #0]
   837b4:	b21b      	sxth	r3, r3
   837b6:	2b7a      	cmp	r3, #122	; 0x7a
   837b8:	dc04      	bgt.n	837c4 <Cl_bc_controller+0x8e4>
   837ba:	4b71      	ldr	r3, [pc, #452]	; (83980 <Cl_bc_controller+0xaa0>)
   837bc:	881b      	ldrh	r3, [r3, #0]
   837be:	b21b      	sxth	r3, r3
   837c0:	2b6d      	cmp	r3, #109	; 0x6d
   837c2:	dc0e      	bgt.n	837e2 <Cl_bc_controller+0x902>
												{
													
													switchb01alrcnt++ ;
   837c4:	4b6f      	ldr	r3, [pc, #444]	; (83984 <Cl_bc_controller+0xaa4>)
   837c6:	681b      	ldr	r3, [r3, #0]
   837c8:	3301      	adds	r3, #1
   837ca:	4a6e      	ldr	r2, [pc, #440]	; (83984 <Cl_bc_controller+0xaa4>)
   837cc:	6013      	str	r3, [r2, #0]

													if(switchb01alrcnt >3){
   837ce:	4b6d      	ldr	r3, [pc, #436]	; (83984 <Cl_bc_controller+0xaa4>)
   837d0:	681b      	ldr	r3, [r3, #0]
   837d2:	2b03      	cmp	r3, #3
   837d4:	dd04      	ble.n	837e0 <Cl_bc_controller+0x900>
// 													sv_cntrl_setyellowalarm();
// 													sv_cntrl_activate_valve( VALVE_ID4);
// 													cl_wait(50);
// 													sv_cntrl_deactivate_valve(VALVE_ID4);
// 													cl_wait(50);
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   837d6:	201a      	movs	r0, #26
   837d8:	2101      	movs	r1, #1
   837da:	4b6b      	ldr	r3, [pc, #428]	; (83988 <Cl_bc_controller+0xaa8>)
   837dc:	4798      	blx	r3
												if ((fill_time > 122) || (fill_time < 110))
												{
													
													switchb01alrcnt++ ;

													if(switchb01alrcnt >3){
   837de:	e004      	b.n	837ea <Cl_bc_controller+0x90a>
   837e0:	e003      	b.n	837ea <Cl_bc_controller+0x90a>
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
													}
												}
												else
												{
													switchb01alrcnt = 0 ;
   837e2:	4b68      	ldr	r3, [pc, #416]	; (83984 <Cl_bc_controller+0xaa4>)
   837e4:	2200      	movs	r2, #0
   837e6:	601a      	str	r2, [r3, #0]
										//			sv_cntrl_resetyellowalarm();
												}
											break;
   837e8:	e00b      	b.n	83802 <Cl_bc_controller+0x922>
   837ea:	e00a      	b.n	83802 <Cl_bc_controller+0x922>
											
											case 200:
												if (fill_time > 190)
   837ec:	4b64      	ldr	r3, [pc, #400]	; (83980 <Cl_bc_controller+0xaa0>)
   837ee:	881b      	ldrh	r3, [r3, #0]
   837f0:	b21b      	sxth	r3, r3
   837f2:	2bbe      	cmp	r3, #190	; 0xbe
   837f4:	dd03      	ble.n	837fe <Cl_bc_controller+0x91e>
// 													sv_cntrl_setyellowalarm();
// 													sv_cntrl_activate_valve( VALVE_ID4);
// 													cl_wait(50);
// 													sv_cntrl_deactivate_valve(VALVE_ID4);
// 													cl_wait(50);
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   837f6:	201a      	movs	r0, #26
   837f8:	2101      	movs	r1, #1
   837fa:	4b63      	ldr	r3, [pc, #396]	; (83988 <Cl_bc_controller+0xaa8>)
   837fc:	4798      	blx	r3
												}
												else
												{
										//			sv_cntrl_resetyellowalarm();
												}
											break;
   837fe:	e000      	b.n	83802 <Cl_bc_controller+0x922>
									//				sv_cntrl_resetyellowalarm();
												}
											break;
											
											case 400:
											break;
   83800:	bf00      	nop
												}
											break;
										}
									}

								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   83802:	2006      	movs	r0, #6
   83804:	4b61      	ldr	r3, [pc, #388]	; (8398c <Cl_bc_controller+0xaac>)
   83806:	4798      	blx	r3
   83808:	4603      	mov	r3, r0
   8380a:	73fb      	strb	r3, [r7, #15]
								
								wait_4_propo_off = 0;
   8380c:	4b60      	ldr	r3, [pc, #384]	; (83990 <Cl_bc_controller+0xab0>)
   8380e:	2200      	movs	r2, #0
   83810:	801a      	strh	r2, [r3, #0]
							//	sv_cntrl_activate_valve(VALVE_ID20);
							//	sv_cntrl_activate_valve(VALVE_ID19);
							//	sv_cntrl_activate_valve(VALVE_ID4);
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   83812:	2037      	movs	r0, #55	; 0x37
   83814:	495f      	ldr	r1, [pc, #380]	; (83994 <Cl_bc_controller+0xab4>)
   83816:	2204      	movs	r2, #4
   83818:	4b5f      	ldr	r3, [pc, #380]	; (83998 <Cl_bc_controller+0xab8>)
   8381a:	4798      	blx	r3
// 								}
// 								
// 								BC_count =0;
// 								}
//************************************************************************** 22082017*********************								
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_BC_STATUS,&cl_tdata_temp,2);
   8381c:	2049      	movs	r0, #73	; 0x49
   8381e:	495f      	ldr	r1, [pc, #380]	; (8399c <Cl_bc_controller+0xabc>)
   83820:	2202      	movs	r2, #2
   83822:	4b5d      	ldr	r3, [pc, #372]	; (83998 <Cl_bc_controller+0xab8>)
   83824:	4798      	blx	r3
								CSeventcount++;
   83826:	4b5e      	ldr	r3, [pc, #376]	; (839a0 <Cl_bc_controller+0xac0>)
   83828:	681b      	ldr	r3, [r3, #0]
   8382a:	3301      	adds	r3, #1
   8382c:	4a5c      	ldr	r2, [pc, #368]	; (839a0 <Cl_bc_controller+0xac0>)
   8382e:	6013      	str	r3, [r2, #0]
								if(cl_bc_returncode == CL_OK)
   83830:	7bfb      	ldrb	r3, [r7, #15]
   83832:	2b00      	cmp	r3, #0
   83834:	d10a      	bne.n	8384c <Cl_bc_controller+0x96c>
								{
									bc_laststate = bc_state;
   83836:	4b5b      	ldr	r3, [pc, #364]	; (839a4 <Cl_bc_controller+0xac4>)
   83838:	781a      	ldrb	r2, [r3, #0]
   8383a:	4b5b      	ldr	r3, [pc, #364]	; (839a8 <Cl_bc_controller+0xac8>)
   8383c:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO2_V13V14_TRANSITION;	
   8383e:	4b59      	ldr	r3, [pc, #356]	; (839a4 <Cl_bc_controller+0xac4>)
   83840:	220e      	movs	r2, #14
   83842:	701a      	strb	r2, [r3, #0]
									fill_time = 0;															
   83844:	4b4e      	ldr	r3, [pc, #312]	; (83980 <Cl_bc_controller+0xaa0>)
   83846:	2200      	movs	r2, #0
   83848:	801a      	strh	r2, [r3, #0]
								}
								break;
   8384a:	e001      	b.n	83850 <Cl_bc_controller+0x970>
   8384c:	e000      	b.n	83850 <Cl_bc_controller+0x970>
								default:break;								
   8384e:	bf00      	nop
							}
			break;
   83850:	e17c      	b.n	83b4c <Cl_bc_controller+0xc6c>
			case CL_BC_STATE_BO2_V13V14_TRANSITION:

							switch(cl_bc_event)
   83852:	79fb      	ldrb	r3, [r7, #7]
   83854:	2b00      	cmp	r3, #0
   83856:	d001      	beq.n	8385c <Cl_bc_controller+0x97c>
   83858:	2b02      	cmp	r3, #2
									bc_state = CL_BC_STATE_BO2_V13V14;
								}
								break;
								case BC_EVENT_SECOND:
								
								break;
   8385a:	e013      	b.n	83884 <Cl_bc_controller+0x9a4>
			case CL_BC_STATE_BO2_V13V14_TRANSITION:

							switch(cl_bc_event)
							{
								case BC_EVENT_50MS:
								fill_time++;
   8385c:	4b48      	ldr	r3, [pc, #288]	; (83980 <Cl_bc_controller+0xaa0>)
   8385e:	881b      	ldrh	r3, [r3, #0]
   83860:	b29b      	uxth	r3, r3
   83862:	b29b      	uxth	r3, r3
   83864:	3301      	adds	r3, #1
   83866:	b29b      	uxth	r3, r3
   83868:	b29a      	uxth	r2, r3
   8386a:	4b45      	ldr	r3, [pc, #276]	; (83980 <Cl_bc_controller+0xaa0>)
   8386c:	801a      	strh	r2, [r3, #0]
// 									wait_counter ++;	// 1 sec wait
// 									
// 								}
// 								else
								{
									wait_counter = 0;
   8386e:	4b4f      	ldr	r3, [pc, #316]	; (839ac <Cl_bc_controller+0xacc>)
   83870:	2200      	movs	r2, #0
   83872:	801a      	strh	r2, [r3, #0]
									bc_laststate = bc_state;
   83874:	4b4b      	ldr	r3, [pc, #300]	; (839a4 <Cl_bc_controller+0xac4>)
   83876:	781a      	ldrb	r2, [r3, #0]
   83878:	4b4b      	ldr	r3, [pc, #300]	; (839a8 <Cl_bc_controller+0xac8>)
   8387a:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO2_V13V14;
   8387c:	4b49      	ldr	r3, [pc, #292]	; (839a4 <Cl_bc_controller+0xac4>)
   8387e:	220f      	movs	r2, #15
   83880:	701a      	strb	r2, [r3, #0]
								}
								break;
   83882:	bf00      	nop
								case BC_EVENT_SECOND:
								
								break;
								
							}
			break;
   83884:	e162      	b.n	83b4c <Cl_bc_controller+0xc6c>
			case CL_BC_STATE_BO2_V13V14:
							switch(cl_bc_event)
   83886:	79fb      	ldrb	r3, [r7, #7]
   83888:	2b03      	cmp	r3, #3
   8388a:	f200 8118 	bhi.w	83abe <Cl_bc_controller+0xbde>
   8388e:	a201      	add	r2, pc, #4	; (adr r2, 83894 <Cl_bc_controller+0x9b4>)
   83890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83894:	000838a5 	.word	0x000838a5
   83898:	00083abf 	.word	0x00083abf
   8389c:	00083abf 	.word	0x00083abf
   838a0:	000838e5 	.word	0x000838e5
							{
								case BC_EVENT_50MS:
								fill_time++;
   838a4:	4b36      	ldr	r3, [pc, #216]	; (83980 <Cl_bc_controller+0xaa0>)
   838a6:	881b      	ldrh	r3, [r3, #0]
   838a8:	b29b      	uxth	r3, r3
   838aa:	b29b      	uxth	r3, r3
   838ac:	3301      	adds	r3, #1
   838ae:	b29b      	uxth	r3, r3
   838b0:	b29a      	uxth	r2, r3
   838b2:	4b33      	ldr	r3, [pc, #204]	; (83980 <Cl_bc_controller+0xaa0>)
   838b4:	801a      	strh	r2, [r3, #0]
								wait_4_propo_off ++;
   838b6:	4b36      	ldr	r3, [pc, #216]	; (83990 <Cl_bc_controller+0xab0>)
   838b8:	881b      	ldrh	r3, [r3, #0]
   838ba:	3301      	adds	r3, #1
   838bc:	b29a      	uxth	r2, r3
   838be:	4b34      	ldr	r3, [pc, #208]	; (83990 <Cl_bc_controller+0xab0>)
   838c0:	801a      	strh	r2, [r3, #0]
									if (wait_4_propo_off == 42)
   838c2:	4b33      	ldr	r3, [pc, #204]	; (83990 <Cl_bc_controller+0xab0>)
   838c4:	881b      	ldrh	r3, [r3, #0]
   838c6:	2b2a      	cmp	r3, #42	; 0x2a
   838c8:	d103      	bne.n	838d2 <Cl_bc_controller+0x9f2>
									{
										sv_cntrl_activate_valve(VALVE_ID19);
   838ca:	2013      	movs	r0, #19
   838cc:	4b38      	ldr	r3, [pc, #224]	; (839b0 <Cl_bc_controller+0xad0>)
   838ce:	4798      	blx	r3
   838d0:	e007      	b.n	838e2 <Cl_bc_controller+0xa02>
									//	sv_cntrl_activate_valve(VALVE_ID20);
									//	sv_cntrl_activate_valve(VALVE_ID4);
									}
									else if (wait_4_propo_off == 46)
   838d2:	4b2f      	ldr	r3, [pc, #188]	; (83990 <Cl_bc_controller+0xab0>)
   838d4:	881b      	ldrh	r3, [r3, #0]
   838d6:	2b2e      	cmp	r3, #46	; 0x2e
   838d8:	d103      	bne.n	838e2 <Cl_bc_controller+0xa02>
									{
									//	sv_cntrl_deactivate_valve(VALVE_ID4);
									//	sv_cntrl_deactivate_valve(VALVE_ID20);
										sv_cntrl_deactivate_valve(VALVE_ID19);
   838da:	2013      	movs	r0, #19
   838dc:	4b35      	ldr	r3, [pc, #212]	; (839b4 <Cl_bc_controller+0xad4>)
   838de:	4798      	blx	r3
										
									}
								break;
   838e0:	e0ee      	b.n	83ac0 <Cl_bc_controller+0xbe0>
   838e2:	e0ed      	b.n	83ac0 <Cl_bc_controller+0xbe0>
								
								break;
								case	BC_EVENT_CS:
								//switch_time2 = fill_time;
								
								 current_sense = true;
   838e4:	4b34      	ldr	r3, [pc, #208]	; (839b8 <Cl_bc_controller+0xad8>)
   838e6:	2201      	movs	r2, #1
   838e8:	701a      	strb	r2, [r3, #0]
									cl_tdata.word =0;
   838ea:	4b2a      	ldr	r3, [pc, #168]	; (83994 <Cl_bc_controller+0xab4>)
   838ec:	2200      	movs	r2, #0
   838ee:	601a      	str	r2, [r3, #0]
									cl_tdata.Twobyte = fill_time;
   838f0:	4b23      	ldr	r3, [pc, #140]	; (83980 <Cl_bc_controller+0xaa0>)
   838f2:	881b      	ldrh	r3, [r3, #0]
   838f4:	b29a      	uxth	r2, r3
   838f6:	4b27      	ldr	r3, [pc, #156]	; (83994 <Cl_bc_controller+0xab4>)
   838f8:	801a      	strh	r2, [r3, #0]
									cl_tdata.bytearray[2] = 21;
   838fa:	4b26      	ldr	r3, [pc, #152]	; (83994 <Cl_bc_controller+0xab4>)
   838fc:	2215      	movs	r2, #21
   838fe:	709a      	strb	r2, [r3, #2]
									
								cl_tdata_temp.Twobyte = fill_time ;
   83900:	4b1f      	ldr	r3, [pc, #124]	; (83980 <Cl_bc_controller+0xaa0>)
   83902:	881b      	ldrh	r3, [r3, #0]
   83904:	b29a      	uxth	r2, r3
   83906:	4b25      	ldr	r3, [pc, #148]	; (8399c <Cl_bc_controller+0xabc>)
   83908:	801a      	strh	r2, [r3, #0]
							//	cl_tdata_temp.word = cl_tdata_temp.word << 16;
									if (bc_flag == 1)
   8390a:	4b2c      	ldr	r3, [pc, #176]	; (839bc <Cl_bc_controller+0xadc>)
   8390c:	781b      	ldrb	r3, [r3, #0]
   8390e:	2b01      	cmp	r3, #1
   83910:	f040 80af 	bne.w	83a72 <Cl_bc_controller+0xb92>
									{
										switch (flow_rate)
   83914:	4b2a      	ldr	r3, [pc, #168]	; (839c0 <Cl_bc_controller+0xae0>)
   83916:	681b      	ldr	r3, [r3, #0]
   83918:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   8391c:	f000 80a8 	beq.w	83a70 <Cl_bc_controller+0xb90>
   83920:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   83924:	d806      	bhi.n	83934 <Cl_bc_controller+0xa54>
   83926:	2bc8      	cmp	r3, #200	; 0xc8
   83928:	f000 808a 	beq.w	83a40 <Cl_bc_controller+0xb60>
   8392c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   83930:	d068      	beq.n	83a04 <Cl_bc_controller+0xb24>
   83932:	e09e      	b.n	83a72 <Cl_bc_controller+0xb92>
   83934:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   83938:	d046      	beq.n	839c8 <Cl_bc_controller+0xae8>
   8393a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   8393e:	f040 8098 	bne.w	83a72 <Cl_bc_controller+0xb92>
										{
											case 800:
												if ((fill_time > 55) || (fill_time < 45))
   83942:	4b0f      	ldr	r3, [pc, #60]	; (83980 <Cl_bc_controller+0xaa0>)
   83944:	881b      	ldrh	r3, [r3, #0]
   83946:	b21b      	sxth	r3, r3
   83948:	2b37      	cmp	r3, #55	; 0x37
   8394a:	dc04      	bgt.n	83956 <Cl_bc_controller+0xa76>
   8394c:	4b0c      	ldr	r3, [pc, #48]	; (83980 <Cl_bc_controller+0xaa0>)
   8394e:	881b      	ldrh	r3, [r3, #0]
   83950:	b21b      	sxth	r3, r3
   83952:	2b2c      	cmp	r3, #44	; 0x2c
   83954:	dc0e      	bgt.n	83974 <Cl_bc_controller+0xa94>
												{
													
													switchb02alrcnt++ ;
   83956:	4b1b      	ldr	r3, [pc, #108]	; (839c4 <Cl_bc_controller+0xae4>)
   83958:	681b      	ldr	r3, [r3, #0]
   8395a:	3301      	adds	r3, #1
   8395c:	4a19      	ldr	r2, [pc, #100]	; (839c4 <Cl_bc_controller+0xae4>)
   8395e:	6013      	str	r3, [r2, #0]

													if(switchb02alrcnt >3){
   83960:	4b18      	ldr	r3, [pc, #96]	; (839c4 <Cl_bc_controller+0xae4>)
   83962:	681b      	ldr	r3, [r3, #0]
   83964:	2b03      	cmp	r3, #3
   83966:	dd04      	ble.n	83972 <Cl_bc_controller+0xa92>
// 													sv_cntrl_setyellowalarm();
// 													sv_cntrl_activate_valve( VALVE_ID4);
// 													cl_wait(50);
// 													sv_cntrl_deactivate_valve(VALVE_ID4);
// 													cl_wait(50);
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83968:	201a      	movs	r0, #26
   8396a:	2101      	movs	r1, #1
   8396c:	4b06      	ldr	r3, [pc, #24]	; (83988 <Cl_bc_controller+0xaa8>)
   8396e:	4798      	blx	r3
												if ((fill_time > 55) || (fill_time < 45))
												{
													
													switchb02alrcnt++ ;

													if(switchb02alrcnt >3){
   83970:	e004      	b.n	8397c <Cl_bc_controller+0xa9c>
   83972:	e003      	b.n	8397c <Cl_bc_controller+0xa9c>
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
													}
												}
												else
												{
													switchb02alrcnt = 0;
   83974:	4b13      	ldr	r3, [pc, #76]	; (839c4 <Cl_bc_controller+0xae4>)
   83976:	2200      	movs	r2, #0
   83978:	601a      	str	r2, [r3, #0]
								//					sv_cntrl_resetyellowalarm();
												}
											break;
   8397a:	e07a      	b.n	83a72 <Cl_bc_controller+0xb92>
   8397c:	e079      	b.n	83a72 <Cl_bc_controller+0xb92>
   8397e:	bf00      	nop
   83980:	20071952 	.word	0x20071952
   83984:	20071944 	.word	0x20071944
   83988:	00082c75 	.word	0x00082c75
   8398c:	0009b5cd 	.word	0x0009b5cd
   83990:	20071950 	.word	0x20071950
   83994:	20071954 	.word	0x20071954
   83998:	0009d1e9 	.word	0x0009d1e9
   8399c:	20071958 	.word	0x20071958
   839a0:	2007194c 	.word	0x2007194c
   839a4:	20071939 	.word	0x20071939
   839a8:	2007193a 	.word	0x2007193a
   839ac:	2007193c 	.word	0x2007193c
   839b0:	0009b3e9 	.word	0x0009b3e9
   839b4:	0009b409 	.word	0x0009b409
   839b8:	20071b90 	.word	0x20071b90
   839bc:	20071a67 	.word	0x20071a67
   839c0:	20071a68 	.word	0x20071a68
   839c4:	20071948 	.word	0x20071948
											
											case 500:
												if ((fill_time > 75) || (fill_time < 63))
   839c8:	4b63      	ldr	r3, [pc, #396]	; (83b58 <Cl_bc_controller+0xc78>)
   839ca:	881b      	ldrh	r3, [r3, #0]
   839cc:	b21b      	sxth	r3, r3
   839ce:	2b4b      	cmp	r3, #75	; 0x4b
   839d0:	dc04      	bgt.n	839dc <Cl_bc_controller+0xafc>
   839d2:	4b61      	ldr	r3, [pc, #388]	; (83b58 <Cl_bc_controller+0xc78>)
   839d4:	881b      	ldrh	r3, [r3, #0]
   839d6:	b21b      	sxth	r3, r3
   839d8:	2b3e      	cmp	r3, #62	; 0x3e
   839da:	dc0e      	bgt.n	839fa <Cl_bc_controller+0xb1a>
												{
													
													switchb02alrcnt++ ;
   839dc:	4b5f      	ldr	r3, [pc, #380]	; (83b5c <Cl_bc_controller+0xc7c>)
   839de:	681b      	ldr	r3, [r3, #0]
   839e0:	3301      	adds	r3, #1
   839e2:	4a5e      	ldr	r2, [pc, #376]	; (83b5c <Cl_bc_controller+0xc7c>)
   839e4:	6013      	str	r3, [r2, #0]

													if(switchb02alrcnt >3){
   839e6:	4b5d      	ldr	r3, [pc, #372]	; (83b5c <Cl_bc_controller+0xc7c>)
   839e8:	681b      	ldr	r3, [r3, #0]
   839ea:	2b03      	cmp	r3, #3
   839ec:	dd04      	ble.n	839f8 <Cl_bc_controller+0xb18>
									//				sv_cntrl_setyellowalarm();
// 													sv_cntrl_activate_valve( VALVE_ID4);
// 													cl_wait(50);
// 													sv_cntrl_deactivate_valve(VALVE_ID4);
// 													cl_wait(50);
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   839ee:	201a      	movs	r0, #26
   839f0:	2101      	movs	r1, #1
   839f2:	4b5b      	ldr	r3, [pc, #364]	; (83b60 <Cl_bc_controller+0xc80>)
   839f4:	4798      	blx	r3
												if ((fill_time > 75) || (fill_time < 63))
												{
													
													switchb02alrcnt++ ;

													if(switchb02alrcnt >3){
   839f6:	e004      	b.n	83a02 <Cl_bc_controller+0xb22>
   839f8:	e003      	b.n	83a02 <Cl_bc_controller+0xb22>
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
													}
												}
												else
												{
													switchb02alrcnt = 0;
   839fa:	4b58      	ldr	r3, [pc, #352]	; (83b5c <Cl_bc_controller+0xc7c>)
   839fc:	2200      	movs	r2, #0
   839fe:	601a      	str	r2, [r3, #0]
										//			sv_cntrl_resetyellowalarm();
												}
											break;
   83a00:	e037      	b.n	83a72 <Cl_bc_controller+0xb92>
   83a02:	e036      	b.n	83a72 <Cl_bc_controller+0xb92>
											
											case 400:
											break;
											
											case 300:
											if ((fill_time > 122) || (fill_time < 110))
   83a04:	4b54      	ldr	r3, [pc, #336]	; (83b58 <Cl_bc_controller+0xc78>)
   83a06:	881b      	ldrh	r3, [r3, #0]
   83a08:	b21b      	sxth	r3, r3
   83a0a:	2b7a      	cmp	r3, #122	; 0x7a
   83a0c:	dc04      	bgt.n	83a18 <Cl_bc_controller+0xb38>
   83a0e:	4b52      	ldr	r3, [pc, #328]	; (83b58 <Cl_bc_controller+0xc78>)
   83a10:	881b      	ldrh	r3, [r3, #0]
   83a12:	b21b      	sxth	r3, r3
   83a14:	2b6d      	cmp	r3, #109	; 0x6d
   83a16:	dc0e      	bgt.n	83a36 <Cl_bc_controller+0xb56>
											{
												
												switchb02alrcnt++ ;
   83a18:	4b50      	ldr	r3, [pc, #320]	; (83b5c <Cl_bc_controller+0xc7c>)
   83a1a:	681b      	ldr	r3, [r3, #0]
   83a1c:	3301      	adds	r3, #1
   83a1e:	4a4f      	ldr	r2, [pc, #316]	; (83b5c <Cl_bc_controller+0xc7c>)
   83a20:	6013      	str	r3, [r2, #0]

												if(switchb02alrcnt >3){
   83a22:	4b4e      	ldr	r3, [pc, #312]	; (83b5c <Cl_bc_controller+0xc7c>)
   83a24:	681b      	ldr	r3, [r3, #0]
   83a26:	2b03      	cmp	r3, #3
   83a28:	dd04      	ble.n	83a34 <Cl_bc_controller+0xb54>
							//					sv_cntrl_setyellowalarm();
// 												sv_cntrl_activate_valve( VALVE_ID4);
// 												cl_wait(50);
// 												sv_cntrl_deactivate_valve(VALVE_ID4);
// 												cl_wait(50);
												Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83a2a:	201a      	movs	r0, #26
   83a2c:	2101      	movs	r1, #1
   83a2e:	4b4c      	ldr	r3, [pc, #304]	; (83b60 <Cl_bc_controller+0xc80>)
   83a30:	4798      	blx	r3
											if ((fill_time > 122) || (fill_time < 110))
											{
												
												switchb02alrcnt++ ;

												if(switchb02alrcnt >3){
   83a32:	e004      	b.n	83a3e <Cl_bc_controller+0xb5e>
   83a34:	e003      	b.n	83a3e <Cl_bc_controller+0xb5e>
												Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
												}
											}
											else
											{
												switchb02alrcnt = 0;
   83a36:	4b49      	ldr	r3, [pc, #292]	; (83b5c <Cl_bc_controller+0xc7c>)
   83a38:	2200      	movs	r2, #0
   83a3a:	601a      	str	r2, [r3, #0]
									//			sv_cntrl_resetyellowalarm();
											}
											break;
   83a3c:	e019      	b.n	83a72 <Cl_bc_controller+0xb92>
   83a3e:	e018      	b.n	83a72 <Cl_bc_controller+0xb92>
											
											case 200:
												if (fill_time > 190)
   83a40:	4b45      	ldr	r3, [pc, #276]	; (83b58 <Cl_bc_controller+0xc78>)
   83a42:	881b      	ldrh	r3, [r3, #0]
   83a44:	b21b      	sxth	r3, r3
   83a46:	2bbe      	cmp	r3, #190	; 0xbe
   83a48:	dd11      	ble.n	83a6e <Cl_bc_controller+0xb8e>
												{
													sv_cntrl_setyellowalarm();
   83a4a:	4b46      	ldr	r3, [pc, #280]	; (83b64 <Cl_bc_controller+0xc84>)
   83a4c:	4798      	blx	r3
													sv_cntrl_activate_valve( VALVE_ID4);
   83a4e:	2004      	movs	r0, #4
   83a50:	4b45      	ldr	r3, [pc, #276]	; (83b68 <Cl_bc_controller+0xc88>)
   83a52:	4798      	blx	r3
													cl_wait(50);
   83a54:	2032      	movs	r0, #50	; 0x32
   83a56:	4b45      	ldr	r3, [pc, #276]	; (83b6c <Cl_bc_controller+0xc8c>)
   83a58:	4798      	blx	r3
													sv_cntrl_deactivate_valve(VALVE_ID4);
   83a5a:	2004      	movs	r0, #4
   83a5c:	4b44      	ldr	r3, [pc, #272]	; (83b70 <Cl_bc_controller+0xc90>)
   83a5e:	4798      	blx	r3
													cl_wait(50);
   83a60:	2032      	movs	r0, #50	; 0x32
   83a62:	4b42      	ldr	r3, [pc, #264]	; (83b6c <Cl_bc_controller+0xc8c>)
   83a64:	4798      	blx	r3
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83a66:	201a      	movs	r0, #26
   83a68:	2101      	movs	r1, #1
   83a6a:	4b3d      	ldr	r3, [pc, #244]	; (83b60 <Cl_bc_controller+0xc80>)
   83a6c:	4798      	blx	r3
												}
												else
												{
								//					sv_cntrl_resetyellowalarm();
												}
											break;
   83a6e:	e000      	b.n	83a72 <Cl_bc_controller+0xb92>
										//			sv_cntrl_resetyellowalarm();
												}
											break;
											
											case 400:
											break;
   83a70:	bf00      	nop
												}
											break;
										}
									}
			//				
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   83a72:	2005      	movs	r0, #5
   83a74:	4b3f      	ldr	r3, [pc, #252]	; (83b74 <Cl_bc_controller+0xc94>)
   83a76:	4798      	blx	r3
   83a78:	4603      	mov	r3, r0
   83a7a:	73fb      	strb	r3, [r7, #15]
								wait_4_propo_off =0;
   83a7c:	4b3e      	ldr	r3, [pc, #248]	; (83b78 <Cl_bc_controller+0xc98>)
   83a7e:	2200      	movs	r2, #0
   83a80:	801a      	strh	r2, [r3, #0]
						//		sv_cntrl_activate_valve(VALVE_ID19);
						//		sv_cntrl_activate_valve(VALVE_ID20);
						//		sv_cntrl_activate_valve(VALVE_ID4);
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   83a82:	2037      	movs	r0, #55	; 0x37
   83a84:	493d      	ldr	r1, [pc, #244]	; (83b7c <Cl_bc_controller+0xc9c>)
   83a86:	2204      	movs	r2, #4
   83a88:	4b3d      	ldr	r3, [pc, #244]	; (83b80 <Cl_bc_controller+0xca0>)
   83a8a:	4798      	blx	r3
// 									
// 									BC_count =0;
// 								}
								
//************************************************************************** 22082017*********************							
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_BC_STATUS,&cl_tdata_temp,2);
   83a8c:	2049      	movs	r0, #73	; 0x49
   83a8e:	493d      	ldr	r1, [pc, #244]	; (83b84 <Cl_bc_controller+0xca4>)
   83a90:	2202      	movs	r2, #2
   83a92:	4b3b      	ldr	r3, [pc, #236]	; (83b80 <Cl_bc_controller+0xca0>)
   83a94:	4798      	blx	r3
								CSeventcount++;
   83a96:	4b3c      	ldr	r3, [pc, #240]	; (83b88 <Cl_bc_controller+0xca8>)
   83a98:	681b      	ldr	r3, [r3, #0]
   83a9a:	3301      	adds	r3, #1
   83a9c:	4a3a      	ldr	r2, [pc, #232]	; (83b88 <Cl_bc_controller+0xca8>)
   83a9e:	6013      	str	r3, [r2, #0]
								if(cl_bc_returncode == CL_OK)
   83aa0:	7bfb      	ldrb	r3, [r7, #15]
   83aa2:	2b00      	cmp	r3, #0
   83aa4:	d10a      	bne.n	83abc <Cl_bc_controller+0xbdc>
								{
									bc_laststate = bc_state;
   83aa6:	4b39      	ldr	r3, [pc, #228]	; (83b8c <Cl_bc_controller+0xcac>)
   83aa8:	781a      	ldrb	r2, [r3, #0]
   83aaa:	4b39      	ldr	r3, [pc, #228]	; (83b90 <Cl_bc_controller+0xcb0>)
   83aac:	701a      	strb	r2, [r3, #0]
									fill_time = 0;
   83aae:	4b2a      	ldr	r3, [pc, #168]	; (83b58 <Cl_bc_controller+0xc78>)
   83ab0:	2200      	movs	r2, #0
   83ab2:	801a      	strh	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
   83ab4:	4b35      	ldr	r3, [pc, #212]	; (83b8c <Cl_bc_controller+0xcac>)
   83ab6:	220c      	movs	r2, #12
   83ab8:	701a      	strb	r2, [r3, #0]
								}
								break;
   83aba:	e001      	b.n	83ac0 <Cl_bc_controller+0xbe0>
   83abc:	e000      	b.n	83ac0 <Cl_bc_controller+0xbe0>
								default:break;
   83abe:	bf00      	nop
							}
			break;
   83ac0:	e044      	b.n	83b4c <Cl_bc_controller+0xc6c>
			case CL_BC_STATE_STOPPED_FOR_BC1:
							switch(cl_bc_event)
   83ac2:	79fb      	ldrb	r3, [r7, #7]
   83ac4:	2b04      	cmp	r3, #4
   83ac6:	d00b      	beq.n	83ae0 <Cl_bc_controller+0xc00>
   83ac8:	2b07      	cmp	r3, #7
   83aca:	d000      	beq.n	83ace <Cl_bc_controller+0xbee>
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
								bc_laststate = bc_state;
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
								break;
								default:break;
   83acc:	e01a      	b.n	83b04 <Cl_bc_controller+0xc24>
			break;
			case CL_BC_STATE_STOPPED_FOR_BC1:
							switch(cl_bc_event)
							{
								case BC_EVENT_START_BC1:
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   83ace:	2005      	movs	r0, #5
   83ad0:	4b28      	ldr	r3, [pc, #160]	; (83b74 <Cl_bc_controller+0xc94>)
   83ad2:	4798      	blx	r3
   83ad4:	4603      	mov	r3, r0
   83ad6:	73fb      	strb	r3, [r7, #15]
								bc_state = CL_BC_STATE_BC1_TRANSITION;
   83ad8:	4b2c      	ldr	r3, [pc, #176]	; (83b8c <Cl_bc_controller+0xcac>)
   83ada:	2211      	movs	r2, #17
   83adc:	701a      	strb	r2, [r3, #0]
								break;
   83ade:	e011      	b.n	83b04 <Cl_bc_controller+0xc24>
								case BC_EVENT_START:
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   83ae0:	2007      	movs	r0, #7
   83ae2:	4b24      	ldr	r3, [pc, #144]	; (83b74 <Cl_bc_controller+0xc94>)
   83ae4:	4798      	blx	r3
   83ae6:	4603      	mov	r3, r0
   83ae8:	73fb      	strb	r3, [r7, #15]
								bc_laststate = bc_state;
   83aea:	4b28      	ldr	r3, [pc, #160]	; (83b8c <Cl_bc_controller+0xcac>)
   83aec:	781a      	ldrb	r2, [r3, #0]
   83aee:	4b28      	ldr	r3, [pc, #160]	; (83b90 <Cl_bc_controller+0xcb0>)
   83af0:	701a      	strb	r2, [r3, #0]
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
   83af2:	4b26      	ldr	r3, [pc, #152]	; (83b8c <Cl_bc_controller+0xcac>)
   83af4:	2202      	movs	r2, #2
   83af6:	701a      	strb	r2, [r3, #0]
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
   83af8:	2013      	movs	r0, #19
   83afa:	4b1b      	ldr	r3, [pc, #108]	; (83b68 <Cl_bc_controller+0xc88>)
   83afc:	4798      	blx	r3
   83afe:	4603      	mov	r3, r0
   83b00:	73fb      	strb	r3, [r7, #15]
								break;
   83b02:	bf00      	nop
								default:break;
						
							}
						
			break;
   83b04:	e022      	b.n	83b4c <Cl_bc_controller+0xc6c>

			case CL_BC_STATE_STOPPED_FOR_BC2:
							switch(cl_bc_event)
   83b06:	79fb      	ldrb	r3, [r7, #7]
   83b08:	2b04      	cmp	r3, #4
   83b0a:	d00b      	beq.n	83b24 <Cl_bc_controller+0xc44>
   83b0c:	2b09      	cmp	r3, #9
   83b0e:	d000      	beq.n	83b12 <Cl_bc_controller+0xc32>
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
								bc_laststate = bc_state;
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
								break;
								default:break;
   83b10:	e01a      	b.n	83b48 <Cl_bc_controller+0xc68>

			case CL_BC_STATE_STOPPED_FOR_BC2:
							switch(cl_bc_event)
							{
								case BC_EVENT_START_BC2:
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   83b12:	2006      	movs	r0, #6
   83b14:	4b17      	ldr	r3, [pc, #92]	; (83b74 <Cl_bc_controller+0xc94>)
   83b16:	4798      	blx	r3
   83b18:	4603      	mov	r3, r0
   83b1a:	73fb      	strb	r3, [r7, #15]
								bc_state = CL_BC_STATE_BC2_TRANSITION;
   83b1c:	4b1b      	ldr	r3, [pc, #108]	; (83b8c <Cl_bc_controller+0xcac>)
   83b1e:	2213      	movs	r2, #19
   83b20:	701a      	strb	r2, [r3, #0]
								break;
   83b22:	e011      	b.n	83b48 <Cl_bc_controller+0xc68>
								case BC_EVENT_START:
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   83b24:	2007      	movs	r0, #7
   83b26:	4b13      	ldr	r3, [pc, #76]	; (83b74 <Cl_bc_controller+0xc94>)
   83b28:	4798      	blx	r3
   83b2a:	4603      	mov	r3, r0
   83b2c:	73fb      	strb	r3, [r7, #15]
								bc_laststate = bc_state;
   83b2e:	4b17      	ldr	r3, [pc, #92]	; (83b8c <Cl_bc_controller+0xcac>)
   83b30:	781a      	ldrb	r2, [r3, #0]
   83b32:	4b17      	ldr	r3, [pc, #92]	; (83b90 <Cl_bc_controller+0xcb0>)
   83b34:	701a      	strb	r2, [r3, #0]
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
   83b36:	2013      	movs	r0, #19
   83b38:	4b0b      	ldr	r3, [pc, #44]	; (83b68 <Cl_bc_controller+0xc88>)
   83b3a:	4798      	blx	r3
   83b3c:	4603      	mov	r3, r0
   83b3e:	73fb      	strb	r3, [r7, #15]
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
   83b40:	4b12      	ldr	r3, [pc, #72]	; (83b8c <Cl_bc_controller+0xcac>)
   83b42:	2202      	movs	r2, #2
   83b44:	701a      	strb	r2, [r3, #0]
								break;
   83b46:	bf00      	nop
								default:break;
								
							}
			break;
   83b48:	e000      	b.n	83b4c <Cl_bc_controller+0xc6c>
			case CL_BC_STATE_COMPLETED_BC1:
			break;
			case CL_BC_STATE_COMPLETED_BC2:
			break;
			default:break;
   83b4a:	bf00      	nop
	}

	
	return 0;
   83b4c:	2300      	movs	r3, #0
}
   83b4e:	4618      	mov	r0, r3
   83b50:	3710      	adds	r7, #16
   83b52:	46bd      	mov	sp, r7
   83b54:	bd80      	pop	{r7, pc}
   83b56:	bf00      	nop
   83b58:	20071952 	.word	0x20071952
   83b5c:	20071948 	.word	0x20071948
   83b60:	00082c75 	.word	0x00082c75
   83b64:	0009b649 	.word	0x0009b649
   83b68:	0009b3e9 	.word	0x0009b3e9
   83b6c:	0009421d 	.word	0x0009421d
   83b70:	0009b409 	.word	0x0009b409
   83b74:	0009b5cd 	.word	0x0009b5cd
   83b78:	20071950 	.word	0x20071950
   83b7c:	20071954 	.word	0x20071954
   83b80:	0009d1e9 	.word	0x0009d1e9
   83b84:	20071958 	.word	0x20071958
   83b88:	2007194c 	.word	0x2007194c
   83b8c:	20071939 	.word	0x20071939
   83b90:	2007193a 	.word	0x2007193a

00083b94 <speedchange_bloodpump_feedback>:
//*************************************************** till this************



void speedchange_bloodpump_feedback(uint32_t spd_change)
{
   83b94:	b490      	push	{r4, r7}
   83b96:	b084      	sub	sp, #16
   83b98:	af00      	add	r7, sp, #0
   83b9a:	6078      	str	r0, [r7, #4]
	int i;
	
	for(i=0;i<20;i++)
   83b9c:	2300      	movs	r3, #0
   83b9e:	60fb      	str	r3, [r7, #12]
   83ba0:	e081      	b.n	83ca6 <speedchange_bloodpump_feedback+0x112>
	{
		if(spd_change == blood_array[i].ml)
   83ba2:	4945      	ldr	r1, [pc, #276]	; (83cb8 <speedchange_bloodpump_feedback+0x124>)
   83ba4:	68fa      	ldr	r2, [r7, #12]
   83ba6:	4613      	mov	r3, r2
   83ba8:	005b      	lsls	r3, r3, #1
   83baa:	4413      	add	r3, r2
   83bac:	005b      	lsls	r3, r3, #1
   83bae:	440b      	add	r3, r1
   83bb0:	881b      	ldrh	r3, [r3, #0]
   83bb2:	b29b      	uxth	r3, r3
   83bb4:	b21a      	sxth	r2, r3
   83bb6:	687b      	ldr	r3, [r7, #4]
   83bb8:	429a      	cmp	r2, r3
   83bba:	d10c      	bne.n	83bd6 <speedchange_bloodpump_feedback+0x42>
		{
			fed_value=blood_array[i].fdbck;
   83bbc:	493e      	ldr	r1, [pc, #248]	; (83cb8 <speedchange_bloodpump_feedback+0x124>)
   83bbe:	68fa      	ldr	r2, [r7, #12]
   83bc0:	4613      	mov	r3, r2
   83bc2:	005b      	lsls	r3, r3, #1
   83bc4:	4413      	add	r3, r2
   83bc6:	005b      	lsls	r3, r3, #1
   83bc8:	440b      	add	r3, r1
   83bca:	889b      	ldrh	r3, [r3, #4]
   83bcc:	b29b      	uxth	r3, r3
   83bce:	b21b      	sxth	r3, r3
   83bd0:	4a3a      	ldr	r2, [pc, #232]	; (83cbc <speedchange_bloodpump_feedback+0x128>)
   83bd2:	6013      	str	r3, [r2, #0]
			//value=i;
			return fed_value;
   83bd4:	e06b      	b.n	83cae <speedchange_bloodpump_feedback+0x11a>
			break;
		}
		else if((spd_change > blood_array[i].ml) && (spd_change < blood_array[i+1].ml))
   83bd6:	4938      	ldr	r1, [pc, #224]	; (83cb8 <speedchange_bloodpump_feedback+0x124>)
   83bd8:	68fa      	ldr	r2, [r7, #12]
   83bda:	4613      	mov	r3, r2
   83bdc:	005b      	lsls	r3, r3, #1
   83bde:	4413      	add	r3, r2
   83be0:	005b      	lsls	r3, r3, #1
   83be2:	440b      	add	r3, r1
   83be4:	881b      	ldrh	r3, [r3, #0]
   83be6:	b29b      	uxth	r3, r3
   83be8:	b21a      	sxth	r2, r3
   83bea:	687b      	ldr	r3, [r7, #4]
   83bec:	429a      	cmp	r2, r3
   83bee:	d257      	bcs.n	83ca0 <speedchange_bloodpump_feedback+0x10c>
   83bf0:	68fb      	ldr	r3, [r7, #12]
   83bf2:	1c5a      	adds	r2, r3, #1
   83bf4:	4930      	ldr	r1, [pc, #192]	; (83cb8 <speedchange_bloodpump_feedback+0x124>)
   83bf6:	4613      	mov	r3, r2
   83bf8:	005b      	lsls	r3, r3, #1
   83bfa:	4413      	add	r3, r2
   83bfc:	005b      	lsls	r3, r3, #1
   83bfe:	440b      	add	r3, r1
   83c00:	881b      	ldrh	r3, [r3, #0]
   83c02:	b29b      	uxth	r3, r3
   83c04:	b21a      	sxth	r2, r3
   83c06:	687b      	ldr	r3, [r7, #4]
   83c08:	429a      	cmp	r2, r3
   83c0a:	d949      	bls.n	83ca0 <speedchange_bloodpump_feedback+0x10c>
		{
			fed_value = ((spd_change-blood_array[i].ml)*(blood_array[i+1].fdbck-blood_array[i].fdbck)/(blood_array[i+1].ml-blood_array[i].ml))+blood_array[i].fdbck;
   83c0c:	492a      	ldr	r1, [pc, #168]	; (83cb8 <speedchange_bloodpump_feedback+0x124>)
   83c0e:	68fa      	ldr	r2, [r7, #12]
   83c10:	4613      	mov	r3, r2
   83c12:	005b      	lsls	r3, r3, #1
   83c14:	4413      	add	r3, r2
   83c16:	005b      	lsls	r3, r3, #1
   83c18:	440b      	add	r3, r1
   83c1a:	881b      	ldrh	r3, [r3, #0]
   83c1c:	b29b      	uxth	r3, r3
   83c1e:	b21b      	sxth	r3, r3
   83c20:	687a      	ldr	r2, [r7, #4]
   83c22:	1ad1      	subs	r1, r2, r3
   83c24:	68fb      	ldr	r3, [r7, #12]
   83c26:	1c5a      	adds	r2, r3, #1
   83c28:	4823      	ldr	r0, [pc, #140]	; (83cb8 <speedchange_bloodpump_feedback+0x124>)
   83c2a:	4613      	mov	r3, r2
   83c2c:	005b      	lsls	r3, r3, #1
   83c2e:	4413      	add	r3, r2
   83c30:	005b      	lsls	r3, r3, #1
   83c32:	4403      	add	r3, r0
   83c34:	889b      	ldrh	r3, [r3, #4]
   83c36:	b29b      	uxth	r3, r3
   83c38:	b218      	sxth	r0, r3
   83c3a:	4c1f      	ldr	r4, [pc, #124]	; (83cb8 <speedchange_bloodpump_feedback+0x124>)
   83c3c:	68fa      	ldr	r2, [r7, #12]
   83c3e:	4613      	mov	r3, r2
   83c40:	005b      	lsls	r3, r3, #1
   83c42:	4413      	add	r3, r2
   83c44:	005b      	lsls	r3, r3, #1
   83c46:	4423      	add	r3, r4
   83c48:	889b      	ldrh	r3, [r3, #4]
   83c4a:	b29b      	uxth	r3, r3
   83c4c:	b21b      	sxth	r3, r3
   83c4e:	1ac3      	subs	r3, r0, r3
   83c50:	fb03 f101 	mul.w	r1, r3, r1
   83c54:	68fb      	ldr	r3, [r7, #12]
   83c56:	1c5a      	adds	r2, r3, #1
   83c58:	4817      	ldr	r0, [pc, #92]	; (83cb8 <speedchange_bloodpump_feedback+0x124>)
   83c5a:	4613      	mov	r3, r2
   83c5c:	005b      	lsls	r3, r3, #1
   83c5e:	4413      	add	r3, r2
   83c60:	005b      	lsls	r3, r3, #1
   83c62:	4403      	add	r3, r0
   83c64:	881b      	ldrh	r3, [r3, #0]
   83c66:	b29b      	uxth	r3, r3
   83c68:	b218      	sxth	r0, r3
   83c6a:	4c13      	ldr	r4, [pc, #76]	; (83cb8 <speedchange_bloodpump_feedback+0x124>)
   83c6c:	68fa      	ldr	r2, [r7, #12]
   83c6e:	4613      	mov	r3, r2
   83c70:	005b      	lsls	r3, r3, #1
   83c72:	4413      	add	r3, r2
   83c74:	005b      	lsls	r3, r3, #1
   83c76:	4423      	add	r3, r4
   83c78:	881b      	ldrh	r3, [r3, #0]
   83c7a:	b29b      	uxth	r3, r3
   83c7c:	b21b      	sxth	r3, r3
   83c7e:	1ac3      	subs	r3, r0, r3
   83c80:	fbb1 f1f3 	udiv	r1, r1, r3
   83c84:	480c      	ldr	r0, [pc, #48]	; (83cb8 <speedchange_bloodpump_feedback+0x124>)
   83c86:	68fa      	ldr	r2, [r7, #12]
   83c88:	4613      	mov	r3, r2
   83c8a:	005b      	lsls	r3, r3, #1
   83c8c:	4413      	add	r3, r2
   83c8e:	005b      	lsls	r3, r3, #1
   83c90:	4403      	add	r3, r0
   83c92:	889b      	ldrh	r3, [r3, #4]
   83c94:	b29b      	uxth	r3, r3
   83c96:	b21b      	sxth	r3, r3
   83c98:	440b      	add	r3, r1
   83c9a:	4a08      	ldr	r2, [pc, #32]	; (83cbc <speedchange_bloodpump_feedback+0x128>)
   83c9c:	6013      	str	r3, [r2, #0]
			return fed_value;
   83c9e:	e006      	b.n	83cae <speedchange_bloodpump_feedback+0x11a>

void speedchange_bloodpump_feedback(uint32_t spd_change)
{
	int i;
	
	for(i=0;i<20;i++)
   83ca0:	68fb      	ldr	r3, [r7, #12]
   83ca2:	3301      	adds	r3, #1
   83ca4:	60fb      	str	r3, [r7, #12]
   83ca6:	68fb      	ldr	r3, [r7, #12]
   83ca8:	2b13      	cmp	r3, #19
   83caa:	f77f af7a 	ble.w	83ba2 <speedchange_bloodpump_feedback+0xe>
			return fed_value;
			break;
		}
	}
	
}
   83cae:	3710      	adds	r7, #16
   83cb0:	46bd      	mov	sp, r7
   83cb2:	bc90      	pop	{r4, r7}
   83cb4:	4770      	bx	lr
   83cb6:	bf00      	nop
   83cb8:	2007055c 	.word	0x2007055c
   83cbc:	20071a44 	.word	0x20071a44

00083cc0 <hep_calibration>:

Cl_Uint32Type hep_calibration(Cl_Uint32Type inpt_ml)
{
   83cc0:	b590      	push	{r4, r7, lr}
   83cc2:	b085      	sub	sp, #20
   83cc4:	af00      	add	r7, sp, #0
   83cc6:	6078      	str	r0, [r7, #4]
	int i = 0;
   83cc8:	2300      	movs	r3, #0
   83cca:	60fb      	str	r3, [r7, #12]
	float slope;
	//inpt_ml=(inpt_ml/10);
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<10;i++)
   83ccc:	2300      	movs	r3, #0
   83cce:	60fb      	str	r3, [r7, #12]
   83cd0:	e179      	b.n	83fc6 <hep_calibration+0x306>
	{
		if (inpt_ml == hp[i].ml)
   83cd2:	4919      	ldr	r1, [pc, #100]	; (83d38 <hep_calibration+0x78>)
   83cd4:	68fa      	ldr	r2, [r7, #12]
   83cd6:	4613      	mov	r3, r2
   83cd8:	005b      	lsls	r3, r3, #1
   83cda:	4413      	add	r3, r2
   83cdc:	009b      	lsls	r3, r3, #2
   83cde:	440b      	add	r3, r1
   83ce0:	881b      	ldrh	r3, [r3, #0]
   83ce2:	b29b      	uxth	r3, r3
   83ce4:	461a      	mov	r2, r3
   83ce6:	687b      	ldr	r3, [r7, #4]
   83ce8:	429a      	cmp	r2, r3
   83cea:	d12d      	bne.n	83d48 <hep_calibration+0x88>
		{
			hep_speed=hp[i].speed;
   83cec:	4912      	ldr	r1, [pc, #72]	; (83d38 <hep_calibration+0x78>)
   83cee:	68fa      	ldr	r2, [r7, #12]
   83cf0:	4613      	mov	r3, r2
   83cf2:	005b      	lsls	r3, r3, #1
   83cf4:	4413      	add	r3, r2
   83cf6:	009b      	lsls	r3, r3, #2
   83cf8:	440b      	add	r3, r1
   83cfa:	885b      	ldrh	r3, [r3, #2]
   83cfc:	b29b      	uxth	r3, r3
   83cfe:	461a      	mov	r2, r3
   83d00:	4b0e      	ldr	r3, [pc, #56]	; (83d3c <hep_calibration+0x7c>)
   83d02:	601a      	str	r2, [r3, #0]
			hep_fblower = hp[i].fblower;
   83d04:	490c      	ldr	r1, [pc, #48]	; (83d38 <hep_calibration+0x78>)
   83d06:	68fa      	ldr	r2, [r7, #12]
   83d08:	4613      	mov	r3, r2
   83d0a:	005b      	lsls	r3, r3, #1
   83d0c:	4413      	add	r3, r2
   83d0e:	009b      	lsls	r3, r3, #2
   83d10:	440b      	add	r3, r1
   83d12:	685b      	ldr	r3, [r3, #4]
   83d14:	461a      	mov	r2, r3
   83d16:	4b0a      	ldr	r3, [pc, #40]	; (83d40 <hep_calibration+0x80>)
   83d18:	601a      	str	r2, [r3, #0]
			hep_fbupper = hp[i].fbupper;
   83d1a:	4907      	ldr	r1, [pc, #28]	; (83d38 <hep_calibration+0x78>)
   83d1c:	68fa      	ldr	r2, [r7, #12]
   83d1e:	4613      	mov	r3, r2
   83d20:	005b      	lsls	r3, r3, #1
   83d22:	4413      	add	r3, r2
   83d24:	009b      	lsls	r3, r3, #2
   83d26:	440b      	add	r3, r1
   83d28:	3308      	adds	r3, #8
   83d2a:	681b      	ldr	r3, [r3, #0]
   83d2c:	461a      	mov	r2, r3
   83d2e:	4b05      	ldr	r3, [pc, #20]	; (83d44 <hep_calibration+0x84>)
   83d30:	601a      	str	r2, [r3, #0]
			return hep_speed;
   83d32:	4b02      	ldr	r3, [pc, #8]	; (83d3c <hep_calibration+0x7c>)
   83d34:	681b      	ldr	r3, [r3, #0]
   83d36:	e14a      	b.n	83fce <hep_calibration+0x30e>
   83d38:	20070124 	.word	0x20070124
   83d3c:	20072318 	.word	0x20072318
   83d40:	20072320 	.word	0x20072320
   83d44:	2007231c 	.word	0x2007231c
			//sv_cntrl_setpumpspeed(HEPARINPUMP,hep_speed);
			break;
		}
		else if ((inpt_ml > hp[i].ml) && (inpt_ml < hp[i+1].ml))
   83d48:	49a3      	ldr	r1, [pc, #652]	; (83fd8 <hep_calibration+0x318>)
   83d4a:	68fa      	ldr	r2, [r7, #12]
   83d4c:	4613      	mov	r3, r2
   83d4e:	005b      	lsls	r3, r3, #1
   83d50:	4413      	add	r3, r2
   83d52:	009b      	lsls	r3, r3, #2
   83d54:	440b      	add	r3, r1
   83d56:	881b      	ldrh	r3, [r3, #0]
   83d58:	b29b      	uxth	r3, r3
   83d5a:	461a      	mov	r2, r3
   83d5c:	687b      	ldr	r3, [r7, #4]
   83d5e:	429a      	cmp	r2, r3
   83d60:	f080 812e 	bcs.w	83fc0 <hep_calibration+0x300>
   83d64:	68fb      	ldr	r3, [r7, #12]
   83d66:	1c5a      	adds	r2, r3, #1
   83d68:	499b      	ldr	r1, [pc, #620]	; (83fd8 <hep_calibration+0x318>)
   83d6a:	4613      	mov	r3, r2
   83d6c:	005b      	lsls	r3, r3, #1
   83d6e:	4413      	add	r3, r2
   83d70:	009b      	lsls	r3, r3, #2
   83d72:	440b      	add	r3, r1
   83d74:	881b      	ldrh	r3, [r3, #0]
   83d76:	b29b      	uxth	r3, r3
   83d78:	461a      	mov	r2, r3
   83d7a:	687b      	ldr	r3, [r7, #4]
   83d7c:	429a      	cmp	r2, r3
   83d7e:	f240 811f 	bls.w	83fc0 <hep_calibration+0x300>
		{
			slope = (hp[i+1].speed-hp[i].speed)/(hp[i+1].ml-hp[i].ml);
   83d82:	68fb      	ldr	r3, [r7, #12]
   83d84:	1c5a      	adds	r2, r3, #1
   83d86:	4994      	ldr	r1, [pc, #592]	; (83fd8 <hep_calibration+0x318>)
   83d88:	4613      	mov	r3, r2
   83d8a:	005b      	lsls	r3, r3, #1
   83d8c:	4413      	add	r3, r2
   83d8e:	009b      	lsls	r3, r3, #2
   83d90:	440b      	add	r3, r1
   83d92:	885b      	ldrh	r3, [r3, #2]
   83d94:	b29b      	uxth	r3, r3
   83d96:	4618      	mov	r0, r3
   83d98:	498f      	ldr	r1, [pc, #572]	; (83fd8 <hep_calibration+0x318>)
   83d9a:	68fa      	ldr	r2, [r7, #12]
   83d9c:	4613      	mov	r3, r2
   83d9e:	005b      	lsls	r3, r3, #1
   83da0:	4413      	add	r3, r2
   83da2:	009b      	lsls	r3, r3, #2
   83da4:	440b      	add	r3, r1
   83da6:	885b      	ldrh	r3, [r3, #2]
   83da8:	b29b      	uxth	r3, r3
   83daa:	1ac1      	subs	r1, r0, r3
   83dac:	68fb      	ldr	r3, [r7, #12]
   83dae:	1c5a      	adds	r2, r3, #1
   83db0:	4889      	ldr	r0, [pc, #548]	; (83fd8 <hep_calibration+0x318>)
   83db2:	4613      	mov	r3, r2
   83db4:	005b      	lsls	r3, r3, #1
   83db6:	4413      	add	r3, r2
   83db8:	009b      	lsls	r3, r3, #2
   83dba:	4403      	add	r3, r0
   83dbc:	881b      	ldrh	r3, [r3, #0]
   83dbe:	b29b      	uxth	r3, r3
   83dc0:	461c      	mov	r4, r3
   83dc2:	4885      	ldr	r0, [pc, #532]	; (83fd8 <hep_calibration+0x318>)
   83dc4:	68fa      	ldr	r2, [r7, #12]
   83dc6:	4613      	mov	r3, r2
   83dc8:	005b      	lsls	r3, r3, #1
   83dca:	4413      	add	r3, r2
   83dcc:	009b      	lsls	r3, r3, #2
   83dce:	4403      	add	r3, r0
   83dd0:	881b      	ldrh	r3, [r3, #0]
   83dd2:	b29b      	uxth	r3, r3
   83dd4:	1ae3      	subs	r3, r4, r3
   83dd6:	fb91 f2f3 	sdiv	r2, r1, r3
   83dda:	4b80      	ldr	r3, [pc, #512]	; (83fdc <hep_calibration+0x31c>)
   83ddc:	4610      	mov	r0, r2
   83dde:	4798      	blx	r3
   83de0:	4603      	mov	r3, r0
   83de2:	60bb      	str	r3, [r7, #8]
			hep_speed = slope * (inpt_ml-hp[i].ml) + hp[i].speed;
   83de4:	497c      	ldr	r1, [pc, #496]	; (83fd8 <hep_calibration+0x318>)
   83de6:	68fa      	ldr	r2, [r7, #12]
   83de8:	4613      	mov	r3, r2
   83dea:	005b      	lsls	r3, r3, #1
   83dec:	4413      	add	r3, r2
   83dee:	009b      	lsls	r3, r3, #2
   83df0:	440b      	add	r3, r1
   83df2:	881b      	ldrh	r3, [r3, #0]
   83df4:	b29b      	uxth	r3, r3
   83df6:	461a      	mov	r2, r3
   83df8:	687b      	ldr	r3, [r7, #4]
   83dfa:	1a9a      	subs	r2, r3, r2
   83dfc:	4b78      	ldr	r3, [pc, #480]	; (83fe0 <hep_calibration+0x320>)
   83dfe:	4610      	mov	r0, r2
   83e00:	4798      	blx	r3
   83e02:	4602      	mov	r2, r0
   83e04:	4b77      	ldr	r3, [pc, #476]	; (83fe4 <hep_calibration+0x324>)
   83e06:	4610      	mov	r0, r2
   83e08:	68b9      	ldr	r1, [r7, #8]
   83e0a:	4798      	blx	r3
   83e0c:	4603      	mov	r3, r0
   83e0e:	461c      	mov	r4, r3
   83e10:	4971      	ldr	r1, [pc, #452]	; (83fd8 <hep_calibration+0x318>)
   83e12:	68fa      	ldr	r2, [r7, #12]
   83e14:	4613      	mov	r3, r2
   83e16:	005b      	lsls	r3, r3, #1
   83e18:	4413      	add	r3, r2
   83e1a:	009b      	lsls	r3, r3, #2
   83e1c:	440b      	add	r3, r1
   83e1e:	885b      	ldrh	r3, [r3, #2]
   83e20:	b29b      	uxth	r3, r3
   83e22:	461a      	mov	r2, r3
   83e24:	4b6d      	ldr	r3, [pc, #436]	; (83fdc <hep_calibration+0x31c>)
   83e26:	4610      	mov	r0, r2
   83e28:	4798      	blx	r3
   83e2a:	4602      	mov	r2, r0
   83e2c:	4b6e      	ldr	r3, [pc, #440]	; (83fe8 <hep_calibration+0x328>)
   83e2e:	4620      	mov	r0, r4
   83e30:	4611      	mov	r1, r2
   83e32:	4798      	blx	r3
   83e34:	4603      	mov	r3, r0
   83e36:	461a      	mov	r2, r3
   83e38:	4b6c      	ldr	r3, [pc, #432]	; (83fec <hep_calibration+0x32c>)
   83e3a:	4610      	mov	r0, r2
   83e3c:	4798      	blx	r3
   83e3e:	4602      	mov	r2, r0
   83e40:	4b6b      	ldr	r3, [pc, #428]	; (83ff0 <hep_calibration+0x330>)
   83e42:	601a      	str	r2, [r3, #0]
			slope = (hp[i+1].fblower-hp[i].fblower)/(hp[i+1].ml-hp[i].ml);
   83e44:	68fb      	ldr	r3, [r7, #12]
   83e46:	1c5a      	adds	r2, r3, #1
   83e48:	4963      	ldr	r1, [pc, #396]	; (83fd8 <hep_calibration+0x318>)
   83e4a:	4613      	mov	r3, r2
   83e4c:	005b      	lsls	r3, r3, #1
   83e4e:	4413      	add	r3, r2
   83e50:	009b      	lsls	r3, r3, #2
   83e52:	440b      	add	r3, r1
   83e54:	6859      	ldr	r1, [r3, #4]
   83e56:	4860      	ldr	r0, [pc, #384]	; (83fd8 <hep_calibration+0x318>)
   83e58:	68fa      	ldr	r2, [r7, #12]
   83e5a:	4613      	mov	r3, r2
   83e5c:	005b      	lsls	r3, r3, #1
   83e5e:	4413      	add	r3, r2
   83e60:	009b      	lsls	r3, r3, #2
   83e62:	4403      	add	r3, r0
   83e64:	685b      	ldr	r3, [r3, #4]
   83e66:	1ac9      	subs	r1, r1, r3
   83e68:	68fb      	ldr	r3, [r7, #12]
   83e6a:	1c5a      	adds	r2, r3, #1
   83e6c:	485a      	ldr	r0, [pc, #360]	; (83fd8 <hep_calibration+0x318>)
   83e6e:	4613      	mov	r3, r2
   83e70:	005b      	lsls	r3, r3, #1
   83e72:	4413      	add	r3, r2
   83e74:	009b      	lsls	r3, r3, #2
   83e76:	4403      	add	r3, r0
   83e78:	881b      	ldrh	r3, [r3, #0]
   83e7a:	b29b      	uxth	r3, r3
   83e7c:	461c      	mov	r4, r3
   83e7e:	4856      	ldr	r0, [pc, #344]	; (83fd8 <hep_calibration+0x318>)
   83e80:	68fa      	ldr	r2, [r7, #12]
   83e82:	4613      	mov	r3, r2
   83e84:	005b      	lsls	r3, r3, #1
   83e86:	4413      	add	r3, r2
   83e88:	009b      	lsls	r3, r3, #2
   83e8a:	4403      	add	r3, r0
   83e8c:	881b      	ldrh	r3, [r3, #0]
   83e8e:	b29b      	uxth	r3, r3
   83e90:	1ae3      	subs	r3, r4, r3
   83e92:	fb91 f2f3 	sdiv	r2, r1, r3
   83e96:	4b51      	ldr	r3, [pc, #324]	; (83fdc <hep_calibration+0x31c>)
   83e98:	4610      	mov	r0, r2
   83e9a:	4798      	blx	r3
   83e9c:	4603      	mov	r3, r0
   83e9e:	60bb      	str	r3, [r7, #8]
			hep_fblower = slope * (inpt_ml-hp[i].ml) + hp[i].fblower;
   83ea0:	494d      	ldr	r1, [pc, #308]	; (83fd8 <hep_calibration+0x318>)
   83ea2:	68fa      	ldr	r2, [r7, #12]
   83ea4:	4613      	mov	r3, r2
   83ea6:	005b      	lsls	r3, r3, #1
   83ea8:	4413      	add	r3, r2
   83eaa:	009b      	lsls	r3, r3, #2
   83eac:	440b      	add	r3, r1
   83eae:	881b      	ldrh	r3, [r3, #0]
   83eb0:	b29b      	uxth	r3, r3
   83eb2:	461a      	mov	r2, r3
   83eb4:	687b      	ldr	r3, [r7, #4]
   83eb6:	1a9a      	subs	r2, r3, r2
   83eb8:	4b49      	ldr	r3, [pc, #292]	; (83fe0 <hep_calibration+0x320>)
   83eba:	4610      	mov	r0, r2
   83ebc:	4798      	blx	r3
   83ebe:	4602      	mov	r2, r0
   83ec0:	4b48      	ldr	r3, [pc, #288]	; (83fe4 <hep_calibration+0x324>)
   83ec2:	4610      	mov	r0, r2
   83ec4:	68b9      	ldr	r1, [r7, #8]
   83ec6:	4798      	blx	r3
   83ec8:	4603      	mov	r3, r0
   83eca:	461c      	mov	r4, r3
   83ecc:	4942      	ldr	r1, [pc, #264]	; (83fd8 <hep_calibration+0x318>)
   83ece:	68fa      	ldr	r2, [r7, #12]
   83ed0:	4613      	mov	r3, r2
   83ed2:	005b      	lsls	r3, r3, #1
   83ed4:	4413      	add	r3, r2
   83ed6:	009b      	lsls	r3, r3, #2
   83ed8:	440b      	add	r3, r1
   83eda:	685a      	ldr	r2, [r3, #4]
   83edc:	4b3f      	ldr	r3, [pc, #252]	; (83fdc <hep_calibration+0x31c>)
   83ede:	4610      	mov	r0, r2
   83ee0:	4798      	blx	r3
   83ee2:	4602      	mov	r2, r0
   83ee4:	4b40      	ldr	r3, [pc, #256]	; (83fe8 <hep_calibration+0x328>)
   83ee6:	4620      	mov	r0, r4
   83ee8:	4611      	mov	r1, r2
   83eea:	4798      	blx	r3
   83eec:	4603      	mov	r3, r0
   83eee:	461a      	mov	r2, r3
   83ef0:	4b3e      	ldr	r3, [pc, #248]	; (83fec <hep_calibration+0x32c>)
   83ef2:	4610      	mov	r0, r2
   83ef4:	4798      	blx	r3
   83ef6:	4602      	mov	r2, r0
   83ef8:	4b3e      	ldr	r3, [pc, #248]	; (83ff4 <hep_calibration+0x334>)
   83efa:	601a      	str	r2, [r3, #0]
			slope = (hp[i+1].fbupper-hp[i].fbupper)/(hp[i+1].ml-hp[i].ml);
   83efc:	68fb      	ldr	r3, [r7, #12]
   83efe:	1c5a      	adds	r2, r3, #1
   83f00:	4935      	ldr	r1, [pc, #212]	; (83fd8 <hep_calibration+0x318>)
   83f02:	4613      	mov	r3, r2
   83f04:	005b      	lsls	r3, r3, #1
   83f06:	4413      	add	r3, r2
   83f08:	009b      	lsls	r3, r3, #2
   83f0a:	440b      	add	r3, r1
   83f0c:	3308      	adds	r3, #8
   83f0e:	6819      	ldr	r1, [r3, #0]
   83f10:	4831      	ldr	r0, [pc, #196]	; (83fd8 <hep_calibration+0x318>)
   83f12:	68fa      	ldr	r2, [r7, #12]
   83f14:	4613      	mov	r3, r2
   83f16:	005b      	lsls	r3, r3, #1
   83f18:	4413      	add	r3, r2
   83f1a:	009b      	lsls	r3, r3, #2
   83f1c:	4403      	add	r3, r0
   83f1e:	3308      	adds	r3, #8
   83f20:	681b      	ldr	r3, [r3, #0]
   83f22:	1ac9      	subs	r1, r1, r3
   83f24:	68fb      	ldr	r3, [r7, #12]
   83f26:	1c5a      	adds	r2, r3, #1
   83f28:	482b      	ldr	r0, [pc, #172]	; (83fd8 <hep_calibration+0x318>)
   83f2a:	4613      	mov	r3, r2
   83f2c:	005b      	lsls	r3, r3, #1
   83f2e:	4413      	add	r3, r2
   83f30:	009b      	lsls	r3, r3, #2
   83f32:	4403      	add	r3, r0
   83f34:	881b      	ldrh	r3, [r3, #0]
   83f36:	b29b      	uxth	r3, r3
   83f38:	461c      	mov	r4, r3
   83f3a:	4827      	ldr	r0, [pc, #156]	; (83fd8 <hep_calibration+0x318>)
   83f3c:	68fa      	ldr	r2, [r7, #12]
   83f3e:	4613      	mov	r3, r2
   83f40:	005b      	lsls	r3, r3, #1
   83f42:	4413      	add	r3, r2
   83f44:	009b      	lsls	r3, r3, #2
   83f46:	4403      	add	r3, r0
   83f48:	881b      	ldrh	r3, [r3, #0]
   83f4a:	b29b      	uxth	r3, r3
   83f4c:	1ae3      	subs	r3, r4, r3
   83f4e:	fb91 f2f3 	sdiv	r2, r1, r3
   83f52:	4b22      	ldr	r3, [pc, #136]	; (83fdc <hep_calibration+0x31c>)
   83f54:	4610      	mov	r0, r2
   83f56:	4798      	blx	r3
   83f58:	4603      	mov	r3, r0
   83f5a:	60bb      	str	r3, [r7, #8]
			hep_fbupper = slope * (inpt_ml-hp[i].ml) + hp[i].fbupper;
   83f5c:	491e      	ldr	r1, [pc, #120]	; (83fd8 <hep_calibration+0x318>)
   83f5e:	68fa      	ldr	r2, [r7, #12]
   83f60:	4613      	mov	r3, r2
   83f62:	005b      	lsls	r3, r3, #1
   83f64:	4413      	add	r3, r2
   83f66:	009b      	lsls	r3, r3, #2
   83f68:	440b      	add	r3, r1
   83f6a:	881b      	ldrh	r3, [r3, #0]
   83f6c:	b29b      	uxth	r3, r3
   83f6e:	461a      	mov	r2, r3
   83f70:	687b      	ldr	r3, [r7, #4]
   83f72:	1a9a      	subs	r2, r3, r2
   83f74:	4b1a      	ldr	r3, [pc, #104]	; (83fe0 <hep_calibration+0x320>)
   83f76:	4610      	mov	r0, r2
   83f78:	4798      	blx	r3
   83f7a:	4602      	mov	r2, r0
   83f7c:	4b19      	ldr	r3, [pc, #100]	; (83fe4 <hep_calibration+0x324>)
   83f7e:	4610      	mov	r0, r2
   83f80:	68b9      	ldr	r1, [r7, #8]
   83f82:	4798      	blx	r3
   83f84:	4603      	mov	r3, r0
   83f86:	461c      	mov	r4, r3
   83f88:	4913      	ldr	r1, [pc, #76]	; (83fd8 <hep_calibration+0x318>)
   83f8a:	68fa      	ldr	r2, [r7, #12]
   83f8c:	4613      	mov	r3, r2
   83f8e:	005b      	lsls	r3, r3, #1
   83f90:	4413      	add	r3, r2
   83f92:	009b      	lsls	r3, r3, #2
   83f94:	440b      	add	r3, r1
   83f96:	3308      	adds	r3, #8
   83f98:	681a      	ldr	r2, [r3, #0]
   83f9a:	4b10      	ldr	r3, [pc, #64]	; (83fdc <hep_calibration+0x31c>)
   83f9c:	4610      	mov	r0, r2
   83f9e:	4798      	blx	r3
   83fa0:	4602      	mov	r2, r0
   83fa2:	4b11      	ldr	r3, [pc, #68]	; (83fe8 <hep_calibration+0x328>)
   83fa4:	4620      	mov	r0, r4
   83fa6:	4611      	mov	r1, r2
   83fa8:	4798      	blx	r3
   83faa:	4603      	mov	r3, r0
   83fac:	461a      	mov	r2, r3
   83fae:	4b0f      	ldr	r3, [pc, #60]	; (83fec <hep_calibration+0x32c>)
   83fb0:	4610      	mov	r0, r2
   83fb2:	4798      	blx	r3
   83fb4:	4602      	mov	r2, r0
   83fb6:	4b10      	ldr	r3, [pc, #64]	; (83ff8 <hep_calibration+0x338>)
   83fb8:	601a      	str	r2, [r3, #0]
			//sv_cntrl_setpumpspeed(HEPARINPUMP,hep_speed);
			return hep_speed;
   83fba:	4b0d      	ldr	r3, [pc, #52]	; (83ff0 <hep_calibration+0x330>)
   83fbc:	681b      	ldr	r3, [r3, #0]
   83fbe:	e006      	b.n	83fce <hep_calibration+0x30e>
{
	int i = 0;
	float slope;
	//inpt_ml=(inpt_ml/10);
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<10;i++)
   83fc0:	68fb      	ldr	r3, [r7, #12]
   83fc2:	3301      	adds	r3, #1
   83fc4:	60fb      	str	r3, [r7, #12]
   83fc6:	68fb      	ldr	r3, [r7, #12]
   83fc8:	2b09      	cmp	r3, #9
   83fca:	f77f ae82 	ble.w	83cd2 <hep_calibration+0x12>
			return hep_speed;
			break;
		}
	}
	
}
   83fce:	4618      	mov	r0, r3
   83fd0:	3714      	adds	r7, #20
   83fd2:	46bd      	mov	sp, r7
   83fd4:	bd90      	pop	{r4, r7, pc}
   83fd6:	bf00      	nop
   83fd8:	20070124 	.word	0x20070124
   83fdc:	000a825d 	.word	0x000a825d
   83fe0:	000a8255 	.word	0x000a8255
   83fe4:	000a8305 	.word	0x000a8305
   83fe8:	000a80f5 	.word	0x000a80f5
   83fec:	000a86dd 	.word	0x000a86dd
   83ff0:	20072318 	.word	0x20072318
   83ff4:	20072320 	.word	0x20072320
   83ff8:	2007231c 	.word	0x2007231c

00083ffc <calibration_apt>:
void calibration_apt(int16_t sensordata)
{
   83ffc:	b590      	push	{r4, r7, lr}
   83ffe:	b085      	sub	sp, #20
   84000:	af00      	add	r7, sp, #0
   84002:	4603      	mov	r3, r0
   84004:	80fb      	strh	r3, [r7, #6]
	int i;
	float slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<26;i++)
   84006:	2300      	movs	r3, #0
   84008:	60fb      	str	r3, [r7, #12]
   8400a:	e0ad      	b.n	84168 <calibration_apt+0x16c>
	{
		if (sensordata == apt2[i].millivolt)
   8400c:	4a5a      	ldr	r2, [pc, #360]	; (84178 <calibration_apt+0x17c>)
   8400e:	68fb      	ldr	r3, [r7, #12]
   84010:	009b      	lsls	r3, r3, #2
   84012:	4413      	add	r3, r2
   84014:	885b      	ldrh	r3, [r3, #2]
   84016:	b29b      	uxth	r3, r3
   84018:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8401c:	b21b      	sxth	r3, r3
   8401e:	429a      	cmp	r2, r3
   84020:	d10c      	bne.n	8403c <calibration_apt+0x40>
		{
			pressure_final_apt=apt2[i].pressure;
   84022:	4a55      	ldr	r2, [pc, #340]	; (84178 <calibration_apt+0x17c>)
   84024:	68fb      	ldr	r3, [r7, #12]
   84026:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8402a:	b29b      	uxth	r3, r3
   8402c:	b21a      	sxth	r2, r3
   8402e:	4b53      	ldr	r3, [pc, #332]	; (8417c <calibration_apt+0x180>)
   84030:	4610      	mov	r0, r2
   84032:	4798      	blx	r3
   84034:	4602      	mov	r2, r0
   84036:	4b52      	ldr	r3, [pc, #328]	; (84180 <calibration_apt+0x184>)
   84038:	601a      	str	r2, [r3, #0]
   8403a:	e092      	b.n	84162 <calibration_apt+0x166>
		}
		else if ((sensordata > apt2[i].millivolt) && (sensordata < apt2[i+1].millivolt))
   8403c:	4a4e      	ldr	r2, [pc, #312]	; (84178 <calibration_apt+0x17c>)
   8403e:	68fb      	ldr	r3, [r7, #12]
   84040:	009b      	lsls	r3, r3, #2
   84042:	4413      	add	r3, r2
   84044:	885b      	ldrh	r3, [r3, #2]
   84046:	b29b      	uxth	r3, r3
   84048:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8404c:	b21b      	sxth	r3, r3
   8404e:	429a      	cmp	r2, r3
   84050:	dd60      	ble.n	84114 <calibration_apt+0x118>
   84052:	68fb      	ldr	r3, [r7, #12]
   84054:	3301      	adds	r3, #1
   84056:	4a48      	ldr	r2, [pc, #288]	; (84178 <calibration_apt+0x17c>)
   84058:	009b      	lsls	r3, r3, #2
   8405a:	4413      	add	r3, r2
   8405c:	885b      	ldrh	r3, [r3, #2]
   8405e:	b29b      	uxth	r3, r3
   84060:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84064:	b21b      	sxth	r3, r3
   84066:	429a      	cmp	r2, r3
   84068:	da54      	bge.n	84114 <calibration_apt+0x118>
		{
			slope = ((apt2[i+1].pressure-apt2[i].pressure)*100/(apt2[i+1].millivolt-apt2[i].millivolt));
   8406a:	68fb      	ldr	r3, [r7, #12]
   8406c:	3301      	adds	r3, #1
   8406e:	4a42      	ldr	r2, [pc, #264]	; (84178 <calibration_apt+0x17c>)
   84070:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84074:	b29b      	uxth	r3, r3
   84076:	b21a      	sxth	r2, r3
   84078:	493f      	ldr	r1, [pc, #252]	; (84178 <calibration_apt+0x17c>)
   8407a:	68fb      	ldr	r3, [r7, #12]
   8407c:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   84080:	b29b      	uxth	r3, r3
   84082:	b21b      	sxth	r3, r3
   84084:	1ad3      	subs	r3, r2, r3
   84086:	2264      	movs	r2, #100	; 0x64
   84088:	fb02 f203 	mul.w	r2, r2, r3
   8408c:	68fb      	ldr	r3, [r7, #12]
   8408e:	3301      	adds	r3, #1
   84090:	4939      	ldr	r1, [pc, #228]	; (84178 <calibration_apt+0x17c>)
   84092:	009b      	lsls	r3, r3, #2
   84094:	440b      	add	r3, r1
   84096:	885b      	ldrh	r3, [r3, #2]
   84098:	b29b      	uxth	r3, r3
   8409a:	b219      	sxth	r1, r3
   8409c:	4836      	ldr	r0, [pc, #216]	; (84178 <calibration_apt+0x17c>)
   8409e:	68fb      	ldr	r3, [r7, #12]
   840a0:	009b      	lsls	r3, r3, #2
   840a2:	4403      	add	r3, r0
   840a4:	885b      	ldrh	r3, [r3, #2]
   840a6:	b29b      	uxth	r3, r3
   840a8:	b21b      	sxth	r3, r3
   840aa:	1acb      	subs	r3, r1, r3
   840ac:	fb92 f2f3 	sdiv	r2, r2, r3
   840b0:	4b32      	ldr	r3, [pc, #200]	; (8417c <calibration_apt+0x180>)
   840b2:	4610      	mov	r0, r2
   840b4:	4798      	blx	r3
   840b6:	4603      	mov	r3, r0
   840b8:	60bb      	str	r3, [r7, #8]
			pressure_final_apt = (slope * (sensordata-apt2[i].millivolt))/100 + apt2[i].pressure;
   840ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   840be:	492e      	ldr	r1, [pc, #184]	; (84178 <calibration_apt+0x17c>)
   840c0:	68fb      	ldr	r3, [r7, #12]
   840c2:	009b      	lsls	r3, r3, #2
   840c4:	440b      	add	r3, r1
   840c6:	885b      	ldrh	r3, [r3, #2]
   840c8:	b29b      	uxth	r3, r3
   840ca:	b21b      	sxth	r3, r3
   840cc:	1ad2      	subs	r2, r2, r3
   840ce:	4b2b      	ldr	r3, [pc, #172]	; (8417c <calibration_apt+0x180>)
   840d0:	4610      	mov	r0, r2
   840d2:	4798      	blx	r3
   840d4:	4602      	mov	r2, r0
   840d6:	4b2b      	ldr	r3, [pc, #172]	; (84184 <calibration_apt+0x188>)
   840d8:	4610      	mov	r0, r2
   840da:	68b9      	ldr	r1, [r7, #8]
   840dc:	4798      	blx	r3
   840de:	4603      	mov	r3, r0
   840e0:	461a      	mov	r2, r3
   840e2:	4b29      	ldr	r3, [pc, #164]	; (84188 <calibration_apt+0x18c>)
   840e4:	4610      	mov	r0, r2
   840e6:	4929      	ldr	r1, [pc, #164]	; (8418c <calibration_apt+0x190>)
   840e8:	4798      	blx	r3
   840ea:	4603      	mov	r3, r0
   840ec:	461c      	mov	r4, r3
   840ee:	4a22      	ldr	r2, [pc, #136]	; (84178 <calibration_apt+0x17c>)
   840f0:	68fb      	ldr	r3, [r7, #12]
   840f2:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   840f6:	b29b      	uxth	r3, r3
   840f8:	b21a      	sxth	r2, r3
   840fa:	4b20      	ldr	r3, [pc, #128]	; (8417c <calibration_apt+0x180>)
   840fc:	4610      	mov	r0, r2
   840fe:	4798      	blx	r3
   84100:	4602      	mov	r2, r0
   84102:	4b23      	ldr	r3, [pc, #140]	; (84190 <calibration_apt+0x194>)
   84104:	4620      	mov	r0, r4
   84106:	4611      	mov	r1, r2
   84108:	4798      	blx	r3
   8410a:	4603      	mov	r3, r0
   8410c:	461a      	mov	r2, r3
   8410e:	4b1c      	ldr	r3, [pc, #112]	; (84180 <calibration_apt+0x184>)
   84110:	601a      	str	r2, [r3, #0]
   84112:	e026      	b.n	84162 <calibration_apt+0x166>
		}
		else if(sensordata < apt2[0].millivolt)
   84114:	4b18      	ldr	r3, [pc, #96]	; (84178 <calibration_apt+0x17c>)
   84116:	885b      	ldrh	r3, [r3, #2]
   84118:	b29b      	uxth	r3, r3
   8411a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8411e:	b21b      	sxth	r3, r3
   84120:	429a      	cmp	r2, r3
   84122:	da0a      	bge.n	8413a <calibration_apt+0x13e>
		{
			pressure_final_apt = apt2[0].pressure;
   84124:	4b14      	ldr	r3, [pc, #80]	; (84178 <calibration_apt+0x17c>)
   84126:	881b      	ldrh	r3, [r3, #0]
   84128:	b29b      	uxth	r3, r3
   8412a:	b21a      	sxth	r2, r3
   8412c:	4b13      	ldr	r3, [pc, #76]	; (8417c <calibration_apt+0x180>)
   8412e:	4610      	mov	r0, r2
   84130:	4798      	blx	r3
   84132:	4602      	mov	r2, r0
   84134:	4b12      	ldr	r3, [pc, #72]	; (84180 <calibration_apt+0x184>)
   84136:	601a      	str	r2, [r3, #0]
   84138:	e013      	b.n	84162 <calibration_apt+0x166>
		}
		else  if(sensordata > apt2[25].millivolt)
   8413a:	4b0f      	ldr	r3, [pc, #60]	; (84178 <calibration_apt+0x17c>)
   8413c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
   84140:	b29b      	uxth	r3, r3
   84142:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84146:	b21b      	sxth	r3, r3
   84148:	429a      	cmp	r2, r3
   8414a:	dd0a      	ble.n	84162 <calibration_apt+0x166>
		{
			pressure_final_apt = apt2[25].pressure;
   8414c:	4b0a      	ldr	r3, [pc, #40]	; (84178 <calibration_apt+0x17c>)
   8414e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
   84152:	b29b      	uxth	r3, r3
   84154:	b21a      	sxth	r2, r3
   84156:	4b09      	ldr	r3, [pc, #36]	; (8417c <calibration_apt+0x180>)
   84158:	4610      	mov	r0, r2
   8415a:	4798      	blx	r3
   8415c:	4602      	mov	r2, r0
   8415e:	4b08      	ldr	r3, [pc, #32]	; (84180 <calibration_apt+0x184>)
   84160:	601a      	str	r2, [r3, #0]
void calibration_apt(int16_t sensordata)
{
	int i;
	float slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<26;i++)
   84162:	68fb      	ldr	r3, [r7, #12]
   84164:	3301      	adds	r3, #1
   84166:	60fb      	str	r3, [r7, #12]
   84168:	68fb      	ldr	r3, [r7, #12]
   8416a:	2b19      	cmp	r3, #25
   8416c:	f77f af4e 	ble.w	8400c <calibration_apt+0x10>
		{
			pressure_final_apt = apt2[25].pressure;
		}
		
	}
}
   84170:	3714      	adds	r7, #20
   84172:	46bd      	mov	sp, r7
   84174:	bd90      	pop	{r4, r7, pc}
   84176:	bf00      	nop
   84178:	2007037c 	.word	0x2007037c
   8417c:	000a825d 	.word	0x000a825d
   84180:	20072314 	.word	0x20072314
   84184:	000a8305 	.word	0x000a8305
   84188:	000a846d 	.word	0x000a846d
   8418c:	42c80000 	.word	0x42c80000
   84190:	000a80f5 	.word	0x000a80f5

00084194 <calibration_vpt>:
void calibration_vpt(int16_t sensordata)
{
   84194:	b590      	push	{r4, r7, lr}
   84196:	b085      	sub	sp, #20
   84198:	af00      	add	r7, sp, #0
   8419a:	4603      	mov	r3, r0
   8419c:	80fb      	strh	r3, [r7, #6]
	int i;
	float slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<26;i++)
   8419e:	2300      	movs	r3, #0
   841a0:	60fb      	str	r3, [r7, #12]
   841a2:	e0ad      	b.n	84300 <calibration_vpt+0x16c>
	{
		if (sensordata == vpt2[i].millivolt)
   841a4:	4a5a      	ldr	r2, [pc, #360]	; (84310 <calibration_vpt+0x17c>)
   841a6:	68fb      	ldr	r3, [r7, #12]
   841a8:	009b      	lsls	r3, r3, #2
   841aa:	4413      	add	r3, r2
   841ac:	885b      	ldrh	r3, [r3, #2]
   841ae:	b29b      	uxth	r3, r3
   841b0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   841b4:	b21b      	sxth	r3, r3
   841b6:	429a      	cmp	r2, r3
   841b8:	d10c      	bne.n	841d4 <calibration_vpt+0x40>
		{
			pressure_final_vpt=vpt2[i].pressure;
   841ba:	4a55      	ldr	r2, [pc, #340]	; (84310 <calibration_vpt+0x17c>)
   841bc:	68fb      	ldr	r3, [r7, #12]
   841be:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   841c2:	b29b      	uxth	r3, r3
   841c4:	b21a      	sxth	r2, r3
   841c6:	4b53      	ldr	r3, [pc, #332]	; (84314 <calibration_vpt+0x180>)
   841c8:	4610      	mov	r0, r2
   841ca:	4798      	blx	r3
   841cc:	4602      	mov	r2, r0
   841ce:	4b52      	ldr	r3, [pc, #328]	; (84318 <calibration_vpt+0x184>)
   841d0:	601a      	str	r2, [r3, #0]
			break;
   841d2:	e099      	b.n	84308 <calibration_vpt+0x174>
		}
		else if ((sensordata > vpt2[i].millivolt) && (sensordata < vpt2[i+1].millivolt))
   841d4:	4a4e      	ldr	r2, [pc, #312]	; (84310 <calibration_vpt+0x17c>)
   841d6:	68fb      	ldr	r3, [r7, #12]
   841d8:	009b      	lsls	r3, r3, #2
   841da:	4413      	add	r3, r2
   841dc:	885b      	ldrh	r3, [r3, #2]
   841de:	b29b      	uxth	r3, r3
   841e0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   841e4:	b21b      	sxth	r3, r3
   841e6:	429a      	cmp	r2, r3
   841e8:	dd60      	ble.n	842ac <calibration_vpt+0x118>
   841ea:	68fb      	ldr	r3, [r7, #12]
   841ec:	3301      	adds	r3, #1
   841ee:	4a48      	ldr	r2, [pc, #288]	; (84310 <calibration_vpt+0x17c>)
   841f0:	009b      	lsls	r3, r3, #2
   841f2:	4413      	add	r3, r2
   841f4:	885b      	ldrh	r3, [r3, #2]
   841f6:	b29b      	uxth	r3, r3
   841f8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   841fc:	b21b      	sxth	r3, r3
   841fe:	429a      	cmp	r2, r3
   84200:	da54      	bge.n	842ac <calibration_vpt+0x118>
		{
			slope = ((vpt2[i+1].pressure-vpt2[i].pressure) * 100/(vpt2[i+1].millivolt-vpt2[i].millivolt));
   84202:	68fb      	ldr	r3, [r7, #12]
   84204:	3301      	adds	r3, #1
   84206:	4a42      	ldr	r2, [pc, #264]	; (84310 <calibration_vpt+0x17c>)
   84208:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8420c:	b29b      	uxth	r3, r3
   8420e:	b21a      	sxth	r2, r3
   84210:	493f      	ldr	r1, [pc, #252]	; (84310 <calibration_vpt+0x17c>)
   84212:	68fb      	ldr	r3, [r7, #12]
   84214:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   84218:	b29b      	uxth	r3, r3
   8421a:	b21b      	sxth	r3, r3
   8421c:	1ad3      	subs	r3, r2, r3
   8421e:	2264      	movs	r2, #100	; 0x64
   84220:	fb02 f203 	mul.w	r2, r2, r3
   84224:	68fb      	ldr	r3, [r7, #12]
   84226:	3301      	adds	r3, #1
   84228:	4939      	ldr	r1, [pc, #228]	; (84310 <calibration_vpt+0x17c>)
   8422a:	009b      	lsls	r3, r3, #2
   8422c:	440b      	add	r3, r1
   8422e:	885b      	ldrh	r3, [r3, #2]
   84230:	b29b      	uxth	r3, r3
   84232:	b219      	sxth	r1, r3
   84234:	4836      	ldr	r0, [pc, #216]	; (84310 <calibration_vpt+0x17c>)
   84236:	68fb      	ldr	r3, [r7, #12]
   84238:	009b      	lsls	r3, r3, #2
   8423a:	4403      	add	r3, r0
   8423c:	885b      	ldrh	r3, [r3, #2]
   8423e:	b29b      	uxth	r3, r3
   84240:	b21b      	sxth	r3, r3
   84242:	1acb      	subs	r3, r1, r3
   84244:	fb92 f2f3 	sdiv	r2, r2, r3
   84248:	4b32      	ldr	r3, [pc, #200]	; (84314 <calibration_vpt+0x180>)
   8424a:	4610      	mov	r0, r2
   8424c:	4798      	blx	r3
   8424e:	4603      	mov	r3, r0
   84250:	60bb      	str	r3, [r7, #8]
			pressure_final_vpt = (slope *(sensordata-vpt2[i].millivolt))/100 + vpt2[i].pressure;
   84252:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84256:	492e      	ldr	r1, [pc, #184]	; (84310 <calibration_vpt+0x17c>)
   84258:	68fb      	ldr	r3, [r7, #12]
   8425a:	009b      	lsls	r3, r3, #2
   8425c:	440b      	add	r3, r1
   8425e:	885b      	ldrh	r3, [r3, #2]
   84260:	b29b      	uxth	r3, r3
   84262:	b21b      	sxth	r3, r3
   84264:	1ad2      	subs	r2, r2, r3
   84266:	4b2b      	ldr	r3, [pc, #172]	; (84314 <calibration_vpt+0x180>)
   84268:	4610      	mov	r0, r2
   8426a:	4798      	blx	r3
   8426c:	4602      	mov	r2, r0
   8426e:	4b2b      	ldr	r3, [pc, #172]	; (8431c <calibration_vpt+0x188>)
   84270:	4610      	mov	r0, r2
   84272:	68b9      	ldr	r1, [r7, #8]
   84274:	4798      	blx	r3
   84276:	4603      	mov	r3, r0
   84278:	461a      	mov	r2, r3
   8427a:	4b29      	ldr	r3, [pc, #164]	; (84320 <calibration_vpt+0x18c>)
   8427c:	4610      	mov	r0, r2
   8427e:	4929      	ldr	r1, [pc, #164]	; (84324 <calibration_vpt+0x190>)
   84280:	4798      	blx	r3
   84282:	4603      	mov	r3, r0
   84284:	461c      	mov	r4, r3
   84286:	4a22      	ldr	r2, [pc, #136]	; (84310 <calibration_vpt+0x17c>)
   84288:	68fb      	ldr	r3, [r7, #12]
   8428a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8428e:	b29b      	uxth	r3, r3
   84290:	b21a      	sxth	r2, r3
   84292:	4b20      	ldr	r3, [pc, #128]	; (84314 <calibration_vpt+0x180>)
   84294:	4610      	mov	r0, r2
   84296:	4798      	blx	r3
   84298:	4602      	mov	r2, r0
   8429a:	4b23      	ldr	r3, [pc, #140]	; (84328 <calibration_vpt+0x194>)
   8429c:	4620      	mov	r0, r4
   8429e:	4611      	mov	r1, r2
   842a0:	4798      	blx	r3
   842a2:	4603      	mov	r3, r0
   842a4:	461a      	mov	r2, r3
   842a6:	4b1c      	ldr	r3, [pc, #112]	; (84318 <calibration_vpt+0x184>)
   842a8:	601a      	str	r2, [r3, #0]
			break;
   842aa:	e02d      	b.n	84308 <calibration_vpt+0x174>
		}
		else if(sensordata < vpt2[0].millivolt)
   842ac:	4b18      	ldr	r3, [pc, #96]	; (84310 <calibration_vpt+0x17c>)
   842ae:	885b      	ldrh	r3, [r3, #2]
   842b0:	b29b      	uxth	r3, r3
   842b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   842b6:	b21b      	sxth	r3, r3
   842b8:	429a      	cmp	r2, r3
   842ba:	da0a      	bge.n	842d2 <calibration_vpt+0x13e>
		{
			pressure_final_vpt = vpt2[0].pressure;
   842bc:	4b14      	ldr	r3, [pc, #80]	; (84310 <calibration_vpt+0x17c>)
   842be:	881b      	ldrh	r3, [r3, #0]
   842c0:	b29b      	uxth	r3, r3
   842c2:	b21a      	sxth	r2, r3
   842c4:	4b13      	ldr	r3, [pc, #76]	; (84314 <calibration_vpt+0x180>)
   842c6:	4610      	mov	r0, r2
   842c8:	4798      	blx	r3
   842ca:	4602      	mov	r2, r0
   842cc:	4b12      	ldr	r3, [pc, #72]	; (84318 <calibration_vpt+0x184>)
   842ce:	601a      	str	r2, [r3, #0]
   842d0:	e013      	b.n	842fa <calibration_vpt+0x166>
		}
		else  if(sensordata > vpt2[25].millivolt)
   842d2:	4b0f      	ldr	r3, [pc, #60]	; (84310 <calibration_vpt+0x17c>)
   842d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
   842d8:	b29b      	uxth	r3, r3
   842da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   842de:	b21b      	sxth	r3, r3
   842e0:	429a      	cmp	r2, r3
   842e2:	dd0a      	ble.n	842fa <calibration_vpt+0x166>
		{
			pressure_final_vpt = vpt2[25].pressure;
   842e4:	4b0a      	ldr	r3, [pc, #40]	; (84310 <calibration_vpt+0x17c>)
   842e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
   842ea:	b29b      	uxth	r3, r3
   842ec:	b21a      	sxth	r2, r3
   842ee:	4b09      	ldr	r3, [pc, #36]	; (84314 <calibration_vpt+0x180>)
   842f0:	4610      	mov	r0, r2
   842f2:	4798      	blx	r3
   842f4:	4602      	mov	r2, r0
   842f6:	4b08      	ldr	r3, [pc, #32]	; (84318 <calibration_vpt+0x184>)
   842f8:	601a      	str	r2, [r3, #0]
void calibration_vpt(int16_t sensordata)
{
	int i;
	float slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<26;i++)
   842fa:	68fb      	ldr	r3, [r7, #12]
   842fc:	3301      	adds	r3, #1
   842fe:	60fb      	str	r3, [r7, #12]
   84300:	68fb      	ldr	r3, [r7, #12]
   84302:	2b19      	cmp	r3, #25
   84304:	f77f af4e 	ble.w	841a4 <calibration_vpt+0x10>
		{
			pressure_final_vpt = vpt2[25].pressure;
		}
	}
	
}
   84308:	3714      	adds	r7, #20
   8430a:	46bd      	mov	sp, r7
   8430c:	bd90      	pop	{r4, r7, pc}
   8430e:	bf00      	nop
   84310:	200703e4 	.word	0x200703e4
   84314:	000a825d 	.word	0x000a825d
   84318:	2007195c 	.word	0x2007195c
   8431c:	000a8305 	.word	0x000a8305
   84320:	000a846d 	.word	0x000a846d
   84324:	42c80000 	.word	0x42c80000
   84328:	000a80f5 	.word	0x000a80f5

0008432c <calibration_ps1>:
void calibration_ps1(int16_t sensordata)
{
   8432c:	b580      	push	{r7, lr}
   8432e:	b084      	sub	sp, #16
   84330:	af00      	add	r7, sp, #0
   84332:	4603      	mov	r3, r0
   84334:	80fb      	strh	r3, [r7, #6]
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<27;i++)
   84336:	2300      	movs	r3, #0
   84338:	60fb      	str	r3, [r7, #12]
   8433a:	e077      	b.n	8442c <calibration_ps1+0x100>
	{
		if (sensordata == ps_1_2[i].millivolt)
   8433c:	4a3e      	ldr	r2, [pc, #248]	; (84438 <calibration_ps1+0x10c>)
   8433e:	68fb      	ldr	r3, [r7, #12]
   84340:	009b      	lsls	r3, r3, #2
   84342:	4413      	add	r3, r2
   84344:	885b      	ldrh	r3, [r3, #2]
   84346:	b29b      	uxth	r3, r3
   84348:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8434c:	b21b      	sxth	r3, r3
   8434e:	429a      	cmp	r2, r3
   84350:	d10c      	bne.n	8436c <calibration_ps1+0x40>
		{
			pressure_final_ps1=ps_1_2[i].pressure;
   84352:	4a39      	ldr	r2, [pc, #228]	; (84438 <calibration_ps1+0x10c>)
   84354:	68fb      	ldr	r3, [r7, #12]
   84356:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8435a:	b29b      	uxth	r3, r3
   8435c:	b21a      	sxth	r2, r3
   8435e:	4b37      	ldr	r3, [pc, #220]	; (8443c <calibration_ps1+0x110>)
   84360:	4610      	mov	r0, r2
   84362:	4798      	blx	r3
   84364:	4602      	mov	r2, r0
   84366:	4b36      	ldr	r3, [pc, #216]	; (84440 <calibration_ps1+0x114>)
   84368:	601a      	str	r2, [r3, #0]
			break;
   8436a:	e062      	b.n	84432 <calibration_ps1+0x106>
		}
		else if ((sensordata > ps_1_2[i].millivolt) && (sensordata < ps_1_2[i+1].millivolt))
   8436c:	4a32      	ldr	r2, [pc, #200]	; (84438 <calibration_ps1+0x10c>)
   8436e:	68fb      	ldr	r3, [r7, #12]
   84370:	009b      	lsls	r3, r3, #2
   84372:	4413      	add	r3, r2
   84374:	885b      	ldrh	r3, [r3, #2]
   84376:	b29b      	uxth	r3, r3
   84378:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8437c:	b21b      	sxth	r3, r3
   8437e:	429a      	cmp	r2, r3
   84380:	dd51      	ble.n	84426 <calibration_ps1+0xfa>
   84382:	68fb      	ldr	r3, [r7, #12]
   84384:	3301      	adds	r3, #1
   84386:	4a2c      	ldr	r2, [pc, #176]	; (84438 <calibration_ps1+0x10c>)
   84388:	009b      	lsls	r3, r3, #2
   8438a:	4413      	add	r3, r2
   8438c:	885b      	ldrh	r3, [r3, #2]
   8438e:	b29b      	uxth	r3, r3
   84390:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84394:	b21b      	sxth	r3, r3
   84396:	429a      	cmp	r2, r3
   84398:	da45      	bge.n	84426 <calibration_ps1+0xfa>
		{
			slope = ((ps_1_2[i+1].pressure-ps_1_2[i].pressure)*100/(ps_1_2[i+1].millivolt-ps_1_2[i].millivolt));
   8439a:	68fb      	ldr	r3, [r7, #12]
   8439c:	3301      	adds	r3, #1
   8439e:	4a26      	ldr	r2, [pc, #152]	; (84438 <calibration_ps1+0x10c>)
   843a0:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   843a4:	b29b      	uxth	r3, r3
   843a6:	b21a      	sxth	r2, r3
   843a8:	4923      	ldr	r1, [pc, #140]	; (84438 <calibration_ps1+0x10c>)
   843aa:	68fb      	ldr	r3, [r7, #12]
   843ac:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   843b0:	b29b      	uxth	r3, r3
   843b2:	b21b      	sxth	r3, r3
   843b4:	1ad3      	subs	r3, r2, r3
   843b6:	2264      	movs	r2, #100	; 0x64
   843b8:	fb02 f203 	mul.w	r2, r2, r3
   843bc:	68fb      	ldr	r3, [r7, #12]
   843be:	3301      	adds	r3, #1
   843c0:	491d      	ldr	r1, [pc, #116]	; (84438 <calibration_ps1+0x10c>)
   843c2:	009b      	lsls	r3, r3, #2
   843c4:	440b      	add	r3, r1
   843c6:	885b      	ldrh	r3, [r3, #2]
   843c8:	b29b      	uxth	r3, r3
   843ca:	b219      	sxth	r1, r3
   843cc:	481a      	ldr	r0, [pc, #104]	; (84438 <calibration_ps1+0x10c>)
   843ce:	68fb      	ldr	r3, [r7, #12]
   843d0:	009b      	lsls	r3, r3, #2
   843d2:	4403      	add	r3, r0
   843d4:	885b      	ldrh	r3, [r3, #2]
   843d6:	b29b      	uxth	r3, r3
   843d8:	b21b      	sxth	r3, r3
   843da:	1acb      	subs	r3, r1, r3
   843dc:	fb92 f3f3 	sdiv	r3, r2, r3
   843e0:	817b      	strh	r3, [r7, #10]
			pressure_final_ps1 = (slope * (sensordata-ps_1_2[i].millivolt))/100 + ps_1_2[i].pressure;
   843e2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
   843e6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
   843ea:	4813      	ldr	r0, [pc, #76]	; (84438 <calibration_ps1+0x10c>)
   843ec:	68fb      	ldr	r3, [r7, #12]
   843ee:	009b      	lsls	r3, r3, #2
   843f0:	4403      	add	r3, r0
   843f2:	885b      	ldrh	r3, [r3, #2]
   843f4:	b29b      	uxth	r3, r3
   843f6:	b21b      	sxth	r3, r3
   843f8:	1acb      	subs	r3, r1, r3
   843fa:	fb03 f302 	mul.w	r3, r3, r2
   843fe:	4a11      	ldr	r2, [pc, #68]	; (84444 <calibration_ps1+0x118>)
   84400:	fb82 1203 	smull	r1, r2, r2, r3
   84404:	1152      	asrs	r2, r2, #5
   84406:	17db      	asrs	r3, r3, #31
   84408:	1ad2      	subs	r2, r2, r3
   8440a:	490b      	ldr	r1, [pc, #44]	; (84438 <calibration_ps1+0x10c>)
   8440c:	68fb      	ldr	r3, [r7, #12]
   8440e:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   84412:	b29b      	uxth	r3, r3
   84414:	b21b      	sxth	r3, r3
   84416:	441a      	add	r2, r3
   84418:	4b08      	ldr	r3, [pc, #32]	; (8443c <calibration_ps1+0x110>)
   8441a:	4610      	mov	r0, r2
   8441c:	4798      	blx	r3
   8441e:	4602      	mov	r2, r0
   84420:	4b07      	ldr	r3, [pc, #28]	; (84440 <calibration_ps1+0x114>)
   84422:	601a      	str	r2, [r3, #0]
			break;
   84424:	e005      	b.n	84432 <calibration_ps1+0x106>
void calibration_ps1(int16_t sensordata)
{
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<27;i++)
   84426:	68fb      	ldr	r3, [r7, #12]
   84428:	3301      	adds	r3, #1
   8442a:	60fb      	str	r3, [r7, #12]
   8442c:	68fb      	ldr	r3, [r7, #12]
   8442e:	2b1a      	cmp	r3, #26
   84430:	dd84      	ble.n	8433c <calibration_ps1+0x10>
			slope = ((ps_1_2[i+1].pressure-ps_1_2[i].pressure)*100/(ps_1_2[i+1].millivolt-ps_1_2[i].millivolt));
			pressure_final_ps1 = (slope * (sensordata-ps_1_2[i].millivolt))/100 + ps_1_2[i].pressure;
			break;
		}
	}
}
   84432:	3710      	adds	r7, #16
   84434:	46bd      	mov	sp, r7
   84436:	bd80      	pop	{r7, pc}
   84438:	20070484 	.word	0x20070484
   8443c:	000a825d 	.word	0x000a825d
   84440:	20071960 	.word	0x20071960
   84444:	51eb851f 	.word	0x51eb851f

00084448 <calibration_ps2>:
void calibration_ps2(int16_t sensordata)
{
   84448:	b580      	push	{r7, lr}
   8444a:	b084      	sub	sp, #16
   8444c:	af00      	add	r7, sp, #0
   8444e:	4603      	mov	r3, r0
   84450:	80fb      	strh	r3, [r7, #6]
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<27;i++)
   84452:	2300      	movs	r3, #0
   84454:	60fb      	str	r3, [r7, #12]
   84456:	e077      	b.n	84548 <calibration_ps2+0x100>
	{
		if (sensordata == ps_2_2[i].millivolt)
   84458:	4a3e      	ldr	r2, [pc, #248]	; (84554 <calibration_ps2+0x10c>)
   8445a:	68fb      	ldr	r3, [r7, #12]
   8445c:	009b      	lsls	r3, r3, #2
   8445e:	4413      	add	r3, r2
   84460:	885b      	ldrh	r3, [r3, #2]
   84462:	b29b      	uxth	r3, r3
   84464:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84468:	b21b      	sxth	r3, r3
   8446a:	429a      	cmp	r2, r3
   8446c:	d10c      	bne.n	84488 <calibration_ps2+0x40>
		{
			pressure_final_ps2=ps_2_2[i].pressure;
   8446e:	4a39      	ldr	r2, [pc, #228]	; (84554 <calibration_ps2+0x10c>)
   84470:	68fb      	ldr	r3, [r7, #12]
   84472:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84476:	b29b      	uxth	r3, r3
   84478:	b21a      	sxth	r2, r3
   8447a:	4b37      	ldr	r3, [pc, #220]	; (84558 <calibration_ps2+0x110>)
   8447c:	4610      	mov	r0, r2
   8447e:	4798      	blx	r3
   84480:	4602      	mov	r2, r0
   84482:	4b36      	ldr	r3, [pc, #216]	; (8455c <calibration_ps2+0x114>)
   84484:	601a      	str	r2, [r3, #0]
			break;
   84486:	e062      	b.n	8454e <calibration_ps2+0x106>
		}
		else if ((sensordata > ps_2_2[i].millivolt) && (sensordata < ps_2_2[i+1].millivolt))
   84488:	4a32      	ldr	r2, [pc, #200]	; (84554 <calibration_ps2+0x10c>)
   8448a:	68fb      	ldr	r3, [r7, #12]
   8448c:	009b      	lsls	r3, r3, #2
   8448e:	4413      	add	r3, r2
   84490:	885b      	ldrh	r3, [r3, #2]
   84492:	b29b      	uxth	r3, r3
   84494:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84498:	b21b      	sxth	r3, r3
   8449a:	429a      	cmp	r2, r3
   8449c:	dd51      	ble.n	84542 <calibration_ps2+0xfa>
   8449e:	68fb      	ldr	r3, [r7, #12]
   844a0:	3301      	adds	r3, #1
   844a2:	4a2c      	ldr	r2, [pc, #176]	; (84554 <calibration_ps2+0x10c>)
   844a4:	009b      	lsls	r3, r3, #2
   844a6:	4413      	add	r3, r2
   844a8:	885b      	ldrh	r3, [r3, #2]
   844aa:	b29b      	uxth	r3, r3
   844ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   844b0:	b21b      	sxth	r3, r3
   844b2:	429a      	cmp	r2, r3
   844b4:	da45      	bge.n	84542 <calibration_ps2+0xfa>
		{
			slope = ((ps_2_2[i+1].pressure-ps_2_2[i].pressure) *100 /(ps_2_2[i+1].millivolt-ps_2_2[i].millivolt));
   844b6:	68fb      	ldr	r3, [r7, #12]
   844b8:	3301      	adds	r3, #1
   844ba:	4a26      	ldr	r2, [pc, #152]	; (84554 <calibration_ps2+0x10c>)
   844bc:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   844c0:	b29b      	uxth	r3, r3
   844c2:	b21a      	sxth	r2, r3
   844c4:	4923      	ldr	r1, [pc, #140]	; (84554 <calibration_ps2+0x10c>)
   844c6:	68fb      	ldr	r3, [r7, #12]
   844c8:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   844cc:	b29b      	uxth	r3, r3
   844ce:	b21b      	sxth	r3, r3
   844d0:	1ad3      	subs	r3, r2, r3
   844d2:	2264      	movs	r2, #100	; 0x64
   844d4:	fb02 f203 	mul.w	r2, r2, r3
   844d8:	68fb      	ldr	r3, [r7, #12]
   844da:	3301      	adds	r3, #1
   844dc:	491d      	ldr	r1, [pc, #116]	; (84554 <calibration_ps2+0x10c>)
   844de:	009b      	lsls	r3, r3, #2
   844e0:	440b      	add	r3, r1
   844e2:	885b      	ldrh	r3, [r3, #2]
   844e4:	b29b      	uxth	r3, r3
   844e6:	b219      	sxth	r1, r3
   844e8:	481a      	ldr	r0, [pc, #104]	; (84554 <calibration_ps2+0x10c>)
   844ea:	68fb      	ldr	r3, [r7, #12]
   844ec:	009b      	lsls	r3, r3, #2
   844ee:	4403      	add	r3, r0
   844f0:	885b      	ldrh	r3, [r3, #2]
   844f2:	b29b      	uxth	r3, r3
   844f4:	b21b      	sxth	r3, r3
   844f6:	1acb      	subs	r3, r1, r3
   844f8:	fb92 f3f3 	sdiv	r3, r2, r3
   844fc:	817b      	strh	r3, [r7, #10]
			pressure_final_ps2 = (slope * (sensordata-ps_2_2[i].millivolt))/100 + ps_2_2[i].pressure;
   844fe:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
   84502:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
   84506:	4813      	ldr	r0, [pc, #76]	; (84554 <calibration_ps2+0x10c>)
   84508:	68fb      	ldr	r3, [r7, #12]
   8450a:	009b      	lsls	r3, r3, #2
   8450c:	4403      	add	r3, r0
   8450e:	885b      	ldrh	r3, [r3, #2]
   84510:	b29b      	uxth	r3, r3
   84512:	b21b      	sxth	r3, r3
   84514:	1acb      	subs	r3, r1, r3
   84516:	fb03 f302 	mul.w	r3, r3, r2
   8451a:	4a11      	ldr	r2, [pc, #68]	; (84560 <calibration_ps2+0x118>)
   8451c:	fb82 1203 	smull	r1, r2, r2, r3
   84520:	1152      	asrs	r2, r2, #5
   84522:	17db      	asrs	r3, r3, #31
   84524:	1ad2      	subs	r2, r2, r3
   84526:	490b      	ldr	r1, [pc, #44]	; (84554 <calibration_ps2+0x10c>)
   84528:	68fb      	ldr	r3, [r7, #12]
   8452a:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   8452e:	b29b      	uxth	r3, r3
   84530:	b21b      	sxth	r3, r3
   84532:	441a      	add	r2, r3
   84534:	4b08      	ldr	r3, [pc, #32]	; (84558 <calibration_ps2+0x110>)
   84536:	4610      	mov	r0, r2
   84538:	4798      	blx	r3
   8453a:	4602      	mov	r2, r0
   8453c:	4b07      	ldr	r3, [pc, #28]	; (8455c <calibration_ps2+0x114>)
   8453e:	601a      	str	r2, [r3, #0]
			break;
   84540:	e005      	b.n	8454e <calibration_ps2+0x106>
void calibration_ps2(int16_t sensordata)
{
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<27;i++)
   84542:	68fb      	ldr	r3, [r7, #12]
   84544:	3301      	adds	r3, #1
   84546:	60fb      	str	r3, [r7, #12]
   84548:	68fb      	ldr	r3, [r7, #12]
   8454a:	2b1a      	cmp	r3, #26
   8454c:	dd84      	ble.n	84458 <calibration_ps2+0x10>
			slope = ((ps_2_2[i+1].pressure-ps_2_2[i].pressure) *100 /(ps_2_2[i+1].millivolt-ps_2_2[i].millivolt));
			pressure_final_ps2 = (slope * (sensordata-ps_2_2[i].millivolt))/100 + ps_2_2[i].pressure;
			break;
		}
	}
}
   8454e:	3710      	adds	r7, #16
   84550:	46bd      	mov	sp, r7
   84552:	bd80      	pop	{r7, pc}
   84554:	200704f0 	.word	0x200704f0
   84558:	000a825d 	.word	0x000a825d
   8455c:	20071964 	.word	0x20071964
   84560:	51eb851f 	.word	0x51eb851f

00084564 <calibration_cond>:
		}
	}
}

void calibration_cond(float sensordata)
{
   84564:	b590      	push	{r4, r7, lr}
   84566:	b087      	sub	sp, #28
   84568:	af00      	add	r7, sp, #0
   8456a:	6078      	str	r0, [r7, #4]
	int i;
	float dummy_var = 0;
   8456c:	f04f 0300 	mov.w	r3, #0
   84570:	613b      	str	r3, [r7, #16]
	dummy_var = sensordata;
   84572:	687b      	ldr	r3, [r7, #4]
   84574:	613b      	str	r3, [r7, #16]
	float slope=0;
   84576:	f04f 0300 	mov.w	r3, #0
   8457a:	60fb      	str	r3, [r7, #12]
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<50;i++)
   8457c:	2300      	movs	r3, #0
   8457e:	617b      	str	r3, [r7, #20]
   84580:	e08f      	b.n	846a2 <calibration_cond+0x13e>
	{
		if (dummy_var == cond[i].volts)
   84582:	4a4b      	ldr	r2, [pc, #300]	; (846b0 <calibration_cond+0x14c>)
   84584:	697b      	ldr	r3, [r7, #20]
   84586:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8458a:	b29b      	uxth	r3, r3
   8458c:	461a      	mov	r2, r3
   8458e:	4b49      	ldr	r3, [pc, #292]	; (846b4 <calibration_cond+0x150>)
   84590:	4610      	mov	r0, r2
   84592:	4798      	blx	r3
   84594:	4602      	mov	r2, r0
   84596:	4b48      	ldr	r3, [pc, #288]	; (846b8 <calibration_cond+0x154>)
   84598:	4610      	mov	r0, r2
   8459a:	6939      	ldr	r1, [r7, #16]
   8459c:	4798      	blx	r3
   8459e:	4603      	mov	r3, r0
   845a0:	2b00      	cmp	r3, #0
   845a2:	d00c      	beq.n	845be <calibration_cond+0x5a>
		{
			cond_final_cs3=cond[i].conductivity;
   845a4:	4a42      	ldr	r2, [pc, #264]	; (846b0 <calibration_cond+0x14c>)
   845a6:	697b      	ldr	r3, [r7, #20]
   845a8:	009b      	lsls	r3, r3, #2
   845aa:	4413      	add	r3, r2
   845ac:	885b      	ldrh	r3, [r3, #2]
   845ae:	b29a      	uxth	r2, r3
   845b0:	4b42      	ldr	r3, [pc, #264]	; (846bc <calibration_cond+0x158>)
   845b2:	4610      	mov	r0, r2
   845b4:	4798      	blx	r3
   845b6:	4602      	mov	r2, r0
   845b8:	4b41      	ldr	r3, [pc, #260]	; (846c0 <calibration_cond+0x15c>)
   845ba:	601a      	str	r2, [r3, #0]
   845bc:	e06e      	b.n	8469c <calibration_cond+0x138>
		}
		else if ((dummy_var > cond[i].volts) && (dummy_var < cond[i+1].volts))
   845be:	4a3c      	ldr	r2, [pc, #240]	; (846b0 <calibration_cond+0x14c>)
   845c0:	697b      	ldr	r3, [r7, #20]
   845c2:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   845c6:	b29b      	uxth	r3, r3
   845c8:	461a      	mov	r2, r3
   845ca:	4b3a      	ldr	r3, [pc, #232]	; (846b4 <calibration_cond+0x150>)
   845cc:	4610      	mov	r0, r2
   845ce:	4798      	blx	r3
   845d0:	4602      	mov	r2, r0
   845d2:	4b3c      	ldr	r3, [pc, #240]	; (846c4 <calibration_cond+0x160>)
   845d4:	4610      	mov	r0, r2
   845d6:	6939      	ldr	r1, [r7, #16]
   845d8:	4798      	blx	r3
   845da:	4603      	mov	r3, r0
   845dc:	2b00      	cmp	r3, #0
   845de:	d05d      	beq.n	8469c <calibration_cond+0x138>
   845e0:	697b      	ldr	r3, [r7, #20]
   845e2:	3301      	adds	r3, #1
   845e4:	4a32      	ldr	r2, [pc, #200]	; (846b0 <calibration_cond+0x14c>)
   845e6:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   845ea:	b29b      	uxth	r3, r3
   845ec:	461a      	mov	r2, r3
   845ee:	4b31      	ldr	r3, [pc, #196]	; (846b4 <calibration_cond+0x150>)
   845f0:	4610      	mov	r0, r2
   845f2:	4798      	blx	r3
   845f4:	4602      	mov	r2, r0
   845f6:	4b34      	ldr	r3, [pc, #208]	; (846c8 <calibration_cond+0x164>)
   845f8:	4610      	mov	r0, r2
   845fa:	6939      	ldr	r1, [r7, #16]
   845fc:	4798      	blx	r3
   845fe:	4603      	mov	r3, r0
   84600:	2b00      	cmp	r3, #0
   84602:	d04b      	beq.n	8469c <calibration_cond+0x138>
		{
			slope = ((cond[i+1].conductivity-cond[i].conductivity)/(cond[i+1].volts-cond[i].volts));
   84604:	697b      	ldr	r3, [r7, #20]
   84606:	3301      	adds	r3, #1
   84608:	4a29      	ldr	r2, [pc, #164]	; (846b0 <calibration_cond+0x14c>)
   8460a:	009b      	lsls	r3, r3, #2
   8460c:	4413      	add	r3, r2
   8460e:	885b      	ldrh	r3, [r3, #2]
   84610:	b29b      	uxth	r3, r3
   84612:	4619      	mov	r1, r3
   84614:	4a26      	ldr	r2, [pc, #152]	; (846b0 <calibration_cond+0x14c>)
   84616:	697b      	ldr	r3, [r7, #20]
   84618:	009b      	lsls	r3, r3, #2
   8461a:	4413      	add	r3, r2
   8461c:	885b      	ldrh	r3, [r3, #2]
   8461e:	b29b      	uxth	r3, r3
   84620:	1aca      	subs	r2, r1, r3
   84622:	697b      	ldr	r3, [r7, #20]
   84624:	3301      	adds	r3, #1
   84626:	4922      	ldr	r1, [pc, #136]	; (846b0 <calibration_cond+0x14c>)
   84628:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   8462c:	b29b      	uxth	r3, r3
   8462e:	4618      	mov	r0, r3
   84630:	491f      	ldr	r1, [pc, #124]	; (846b0 <calibration_cond+0x14c>)
   84632:	697b      	ldr	r3, [r7, #20]
   84634:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   84638:	b29b      	uxth	r3, r3
   8463a:	1ac3      	subs	r3, r0, r3
   8463c:	fb92 f2f3 	sdiv	r2, r2, r3
   84640:	4b1c      	ldr	r3, [pc, #112]	; (846b4 <calibration_cond+0x150>)
   84642:	4610      	mov	r0, r2
   84644:	4798      	blx	r3
   84646:	4603      	mov	r3, r0
   84648:	60fb      	str	r3, [r7, #12]
			cond_final_cs3 = slope*(dummy_var-cond[i].volts) + cond[i].conductivity;
   8464a:	4a19      	ldr	r2, [pc, #100]	; (846b0 <calibration_cond+0x14c>)
   8464c:	697b      	ldr	r3, [r7, #20]
   8464e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84652:	b29b      	uxth	r3, r3
   84654:	461a      	mov	r2, r3
   84656:	4b17      	ldr	r3, [pc, #92]	; (846b4 <calibration_cond+0x150>)
   84658:	4610      	mov	r0, r2
   8465a:	4798      	blx	r3
   8465c:	4602      	mov	r2, r0
   8465e:	4b1b      	ldr	r3, [pc, #108]	; (846cc <calibration_cond+0x168>)
   84660:	6938      	ldr	r0, [r7, #16]
   84662:	4611      	mov	r1, r2
   84664:	4798      	blx	r3
   84666:	4603      	mov	r3, r0
   84668:	461a      	mov	r2, r3
   8466a:	4b19      	ldr	r3, [pc, #100]	; (846d0 <calibration_cond+0x16c>)
   8466c:	4610      	mov	r0, r2
   8466e:	68f9      	ldr	r1, [r7, #12]
   84670:	4798      	blx	r3
   84672:	4603      	mov	r3, r0
   84674:	461c      	mov	r4, r3
   84676:	4a0e      	ldr	r2, [pc, #56]	; (846b0 <calibration_cond+0x14c>)
   84678:	697b      	ldr	r3, [r7, #20]
   8467a:	009b      	lsls	r3, r3, #2
   8467c:	4413      	add	r3, r2
   8467e:	885b      	ldrh	r3, [r3, #2]
   84680:	b29b      	uxth	r3, r3
   84682:	461a      	mov	r2, r3
   84684:	4b0b      	ldr	r3, [pc, #44]	; (846b4 <calibration_cond+0x150>)
   84686:	4610      	mov	r0, r2
   84688:	4798      	blx	r3
   8468a:	4602      	mov	r2, r0
   8468c:	4b11      	ldr	r3, [pc, #68]	; (846d4 <calibration_cond+0x170>)
   8468e:	4620      	mov	r0, r4
   84690:	4611      	mov	r1, r2
   84692:	4798      	blx	r3
   84694:	4603      	mov	r3, r0
   84696:	461a      	mov	r2, r3
   84698:	4b09      	ldr	r3, [pc, #36]	; (846c0 <calibration_cond+0x15c>)
   8469a:	601a      	str	r2, [r3, #0]
	int i;
	float dummy_var = 0;
	dummy_var = sensordata;
	float slope=0;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<50;i++)
   8469c:	697b      	ldr	r3, [r7, #20]
   8469e:	3301      	adds	r3, #1
   846a0:	617b      	str	r3, [r7, #20]
   846a2:	697b      	ldr	r3, [r7, #20]
   846a4:	2b31      	cmp	r3, #49	; 0x31
   846a6:	f77f af6c 	ble.w	84582 <calibration_cond+0x1e>
		{
			slope = (cond[i].volts)/(cond[i].conductivity);
			cond_final_cs3 = slope*(sensordata-cond[i].volts) + cond[i].conductivity;
		}*/
	}
}
   846aa:	371c      	adds	r7, #28
   846ac:	46bd      	mov	sp, r7
   846ae:	bd90      	pop	{r4, r7, pc}
   846b0:	2007197c 	.word	0x2007197c
   846b4:	000a825d 	.word	0x000a825d
   846b8:	000a862d 	.word	0x000a862d
   846bc:	000a8255 	.word	0x000a8255
   846c0:	20071974 	.word	0x20071974
   846c4:	000a8641 	.word	0x000a8641
   846c8:	000a867d 	.word	0x000a867d
   846cc:	000a80f1 	.word	0x000a80f1
   846d0:	000a8305 	.word	0x000a8305
   846d4:	000a80f5 	.word	0x000a80f5

000846d8 <calibrate_uf>:


void calibrate_uf(int16_t ufrate){
   846d8:	b590      	push	{r4, r7, lr}
   846da:	b087      	sub	sp, #28
   846dc:	af00      	add	r7, sp, #0
   846de:	4603      	mov	r3, r0
   846e0:	80fb      	strh	r3, [r7, #6]
	
	Cl_Uint16Type i;
	float dummy_var = ufrate;
   846e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   846e6:	4b5b      	ldr	r3, [pc, #364]	; (84854 <calibrate_uf+0x17c>)
   846e8:	4610      	mov	r0, r2
   846ea:	4798      	blx	r3
   846ec:	4603      	mov	r3, r0
   846ee:	613b      	str	r3, [r7, #16]
	Cl_Uint32Type dummy_var1;
	float slope;

	
	for (i=0;i<14;i++)
   846f0:	2300      	movs	r3, #0
   846f2:	82fb      	strh	r3, [r7, #22]
   846f4:	e0a7      	b.n	84846 <calibrate_uf+0x16e>
		{
			if (dummy_var == ufp[i].rate)
   846f6:	8afb      	ldrh	r3, [r7, #22]
   846f8:	4a57      	ldr	r2, [pc, #348]	; (84858 <calibrate_uf+0x180>)
   846fa:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   846fe:	b29b      	uxth	r3, r3
   84700:	461a      	mov	r2, r3
   84702:	4b54      	ldr	r3, [pc, #336]	; (84854 <calibrate_uf+0x17c>)
   84704:	4610      	mov	r0, r2
   84706:	4798      	blx	r3
   84708:	4602      	mov	r2, r0
   8470a:	4b54      	ldr	r3, [pc, #336]	; (8485c <calibrate_uf+0x184>)
   8470c:	4610      	mov	r0, r2
   8470e:	6939      	ldr	r1, [r7, #16]
   84710:	4798      	blx	r3
   84712:	4603      	mov	r3, r0
   84714:	2b00      	cmp	r3, #0
   84716:	d00a      	beq.n	8472e <calibrate_uf+0x56>
			{
				dummy_var1=ufp[i].speed;
   84718:	8afb      	ldrh	r3, [r7, #22]
   8471a:	4a4f      	ldr	r2, [pc, #316]	; (84858 <calibrate_uf+0x180>)
   8471c:	009b      	lsls	r3, r3, #2
   8471e:	4413      	add	r3, r2
   84720:	885b      	ldrh	r3, [r3, #2]
   84722:	b29b      	uxth	r3, r3
   84724:	60bb      	str	r3, [r7, #8]
				uf_final=dummy_var1;
   84726:	4a4e      	ldr	r2, [pc, #312]	; (84860 <calibrate_uf+0x188>)
   84728:	68bb      	ldr	r3, [r7, #8]
   8472a:	6013      	str	r3, [r2, #0]
				break;
   8472c:	e08f      	b.n	8484e <calibrate_uf+0x176>
			}
			else if ((dummy_var > ufp[i].rate) && (dummy_var < ufp[i+1].rate))
   8472e:	8afb      	ldrh	r3, [r7, #22]
   84730:	4a49      	ldr	r2, [pc, #292]	; (84858 <calibrate_uf+0x180>)
   84732:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84736:	b29b      	uxth	r3, r3
   84738:	461a      	mov	r2, r3
   8473a:	4b46      	ldr	r3, [pc, #280]	; (84854 <calibrate_uf+0x17c>)
   8473c:	4610      	mov	r0, r2
   8473e:	4798      	blx	r3
   84740:	4602      	mov	r2, r0
   84742:	4b48      	ldr	r3, [pc, #288]	; (84864 <calibrate_uf+0x18c>)
   84744:	4610      	mov	r0, r2
   84746:	6939      	ldr	r1, [r7, #16]
   84748:	4798      	blx	r3
   8474a:	4603      	mov	r3, r0
   8474c:	2b00      	cmp	r3, #0
   8474e:	d062      	beq.n	84816 <calibrate_uf+0x13e>
   84750:	8afb      	ldrh	r3, [r7, #22]
   84752:	3301      	adds	r3, #1
   84754:	4a40      	ldr	r2, [pc, #256]	; (84858 <calibrate_uf+0x180>)
   84756:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8475a:	b29b      	uxth	r3, r3
   8475c:	461a      	mov	r2, r3
   8475e:	4b3d      	ldr	r3, [pc, #244]	; (84854 <calibrate_uf+0x17c>)
   84760:	4610      	mov	r0, r2
   84762:	4798      	blx	r3
   84764:	4602      	mov	r2, r0
   84766:	4b40      	ldr	r3, [pc, #256]	; (84868 <calibrate_uf+0x190>)
   84768:	4610      	mov	r0, r2
   8476a:	6939      	ldr	r1, [r7, #16]
   8476c:	4798      	blx	r3
   8476e:	4603      	mov	r3, r0
   84770:	2b00      	cmp	r3, #0
   84772:	d050      	beq.n	84816 <calibrate_uf+0x13e>
			{
				//temprature_final_value =dummy_var;
				slope = (((ufp[i+1].speed - ufp[i].speed))/(ufp[i+1].rate - ufp[i].rate));
   84774:	8afb      	ldrh	r3, [r7, #22]
   84776:	3301      	adds	r3, #1
   84778:	4a37      	ldr	r2, [pc, #220]	; (84858 <calibrate_uf+0x180>)
   8477a:	009b      	lsls	r3, r3, #2
   8477c:	4413      	add	r3, r2
   8477e:	885b      	ldrh	r3, [r3, #2]
   84780:	b29b      	uxth	r3, r3
   84782:	4619      	mov	r1, r3
   84784:	8afb      	ldrh	r3, [r7, #22]
   84786:	4a34      	ldr	r2, [pc, #208]	; (84858 <calibrate_uf+0x180>)
   84788:	009b      	lsls	r3, r3, #2
   8478a:	4413      	add	r3, r2
   8478c:	885b      	ldrh	r3, [r3, #2]
   8478e:	b29b      	uxth	r3, r3
   84790:	1aca      	subs	r2, r1, r3
   84792:	8afb      	ldrh	r3, [r7, #22]
   84794:	3301      	adds	r3, #1
   84796:	4930      	ldr	r1, [pc, #192]	; (84858 <calibrate_uf+0x180>)
   84798:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   8479c:	b29b      	uxth	r3, r3
   8479e:	4618      	mov	r0, r3
   847a0:	8afb      	ldrh	r3, [r7, #22]
   847a2:	492d      	ldr	r1, [pc, #180]	; (84858 <calibrate_uf+0x180>)
   847a4:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   847a8:	b29b      	uxth	r3, r3
   847aa:	1ac3      	subs	r3, r0, r3
   847ac:	fb92 f2f3 	sdiv	r2, r2, r3
   847b0:	4b28      	ldr	r3, [pc, #160]	; (84854 <calibrate_uf+0x17c>)
   847b2:	4610      	mov	r0, r2
   847b4:	4798      	blx	r3
   847b6:	4603      	mov	r3, r0
   847b8:	60fb      	str	r3, [r7, #12]
				//temprature_final_value =slope*1000;
				uf_final = ((slope*(dummy_var - ufp[i].rate)) + ufp[i].speed);
   847ba:	8afb      	ldrh	r3, [r7, #22]
   847bc:	4a26      	ldr	r2, [pc, #152]	; (84858 <calibrate_uf+0x180>)
   847be:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   847c2:	b29b      	uxth	r3, r3
   847c4:	461a      	mov	r2, r3
   847c6:	4b23      	ldr	r3, [pc, #140]	; (84854 <calibrate_uf+0x17c>)
   847c8:	4610      	mov	r0, r2
   847ca:	4798      	blx	r3
   847cc:	4602      	mov	r2, r0
   847ce:	4b27      	ldr	r3, [pc, #156]	; (8486c <calibrate_uf+0x194>)
   847d0:	6938      	ldr	r0, [r7, #16]
   847d2:	4611      	mov	r1, r2
   847d4:	4798      	blx	r3
   847d6:	4603      	mov	r3, r0
   847d8:	461a      	mov	r2, r3
   847da:	4b25      	ldr	r3, [pc, #148]	; (84870 <calibrate_uf+0x198>)
   847dc:	4610      	mov	r0, r2
   847de:	68f9      	ldr	r1, [r7, #12]
   847e0:	4798      	blx	r3
   847e2:	4603      	mov	r3, r0
   847e4:	461c      	mov	r4, r3
   847e6:	8afb      	ldrh	r3, [r7, #22]
   847e8:	4a1b      	ldr	r2, [pc, #108]	; (84858 <calibrate_uf+0x180>)
   847ea:	009b      	lsls	r3, r3, #2
   847ec:	4413      	add	r3, r2
   847ee:	885b      	ldrh	r3, [r3, #2]
   847f0:	b29b      	uxth	r3, r3
   847f2:	461a      	mov	r2, r3
   847f4:	4b17      	ldr	r3, [pc, #92]	; (84854 <calibrate_uf+0x17c>)
   847f6:	4610      	mov	r0, r2
   847f8:	4798      	blx	r3
   847fa:	4602      	mov	r2, r0
   847fc:	4b1d      	ldr	r3, [pc, #116]	; (84874 <calibrate_uf+0x19c>)
   847fe:	4620      	mov	r0, r4
   84800:	4611      	mov	r1, r2
   84802:	4798      	blx	r3
   84804:	4603      	mov	r3, r0
   84806:	461a      	mov	r2, r3
   84808:	4b1b      	ldr	r3, [pc, #108]	; (84878 <calibrate_uf+0x1a0>)
   8480a:	4610      	mov	r0, r2
   8480c:	4798      	blx	r3
   8480e:	4602      	mov	r2, r0
   84810:	4b13      	ldr	r3, [pc, #76]	; (84860 <calibrate_uf+0x188>)
   84812:	601a      	str	r2, [r3, #0]
				//temprature_final_value_1 =temprature_final_value_1/100;
				//temprature_final_value =1500;
				break;
   84814:	e01b      	b.n	8484e <calibrate_uf+0x176>
			}
			else if (dummy_var < ufp[i].rate)
   84816:	8afb      	ldrh	r3, [r7, #22]
   84818:	4a0f      	ldr	r2, [pc, #60]	; (84858 <calibrate_uf+0x180>)
   8481a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8481e:	b29b      	uxth	r3, r3
   84820:	461a      	mov	r2, r3
   84822:	4b0c      	ldr	r3, [pc, #48]	; (84854 <calibrate_uf+0x17c>)
   84824:	4610      	mov	r0, r2
   84826:	4798      	blx	r3
   84828:	4602      	mov	r2, r0
   8482a:	4b0f      	ldr	r3, [pc, #60]	; (84868 <calibrate_uf+0x190>)
   8482c:	4610      	mov	r0, r2
   8482e:	6939      	ldr	r1, [r7, #16]
   84830:	4798      	blx	r3
   84832:	4603      	mov	r3, r0
   84834:	2b00      	cmp	r3, #0
   84836:	d003      	beq.n	84840 <calibrate_uf+0x168>
			{
				uf_final = 10;
   84838:	4b09      	ldr	r3, [pc, #36]	; (84860 <calibrate_uf+0x188>)
   8483a:	220a      	movs	r2, #10
   8483c:	601a      	str	r2, [r3, #0]
				break;
   8483e:	e006      	b.n	8484e <calibrate_uf+0x176>
	float dummy_var = ufrate;
	Cl_Uint32Type dummy_var1;
	float slope;

	
	for (i=0;i<14;i++)
   84840:	8afb      	ldrh	r3, [r7, #22]
   84842:	3301      	adds	r3, #1
   84844:	82fb      	strh	r3, [r7, #22]
   84846:	8afb      	ldrh	r3, [r7, #22]
   84848:	2b0d      	cmp	r3, #13
   8484a:	f67f af54 	bls.w	846f6 <calibrate_uf+0x1e>
			}
			
		}
	
	
}
   8484e:	371c      	adds	r7, #28
   84850:	46bd      	mov	sp, r7
   84852:	bd90      	pop	{r4, r7, pc}
   84854:	000a825d 	.word	0x000a825d
   84858:	2007044c 	.word	0x2007044c
   8485c:	000a862d 	.word	0x000a862d
   84860:	20071978 	.word	0x20071978
   84864:	000a8641 	.word	0x000a8641
   84868:	000a867d 	.word	0x000a867d
   8486c:	000a80f1 	.word	0x000a80f1
   84870:	000a8305 	.word	0x000a8305
   84874:	000a80f5 	.word	0x000a80f5
   84878:	000a86dd 	.word	0x000a86dd

0008487c <cl_datamanager_init>:
extern Cl_Mac_EventQueueType  Cl_MacEventQueue2;
extern Cl_Uint32Type Treatdata[ID_MAX_TREAT_PARAM] ;
extern Cl_Uint16Type cl_hep_bolus_count_rate ;

Cl_ReturnCodeType cl_datamanager_init()
{
   8487c:	b480      	push	{r7}
   8487e:	af00      	add	r7, sp, #0
	Treatdata[ID_dflow] = 500;
   84880:	4b21      	ldr	r3, [pc, #132]	; (84908 <cl_datamanager_init+0x8c>)
   84882:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   84886:	615a      	str	r2, [r3, #20]
	Treatdata[ID_settemp] = 370;
   84888:	4b1f      	ldr	r3, [pc, #124]	; (84908 <cl_datamanager_init+0x8c>)
   8488a:	f44f 72b9 	mov.w	r2, #370	; 0x172
   8488e:	619a      	str	r2, [r3, #24]
	Treatdata[ID_setcond] = 135;
   84890:	4b1d      	ldr	r3, [pc, #116]	; (84908 <cl_datamanager_init+0x8c>)
   84892:	2287      	movs	r2, #135	; 0x87
   84894:	62da      	str	r2, [r3, #44]	; 0x2c
	Treatdata[ID_bloodrate] = 400;
   84896:	4b1c      	ldr	r3, [pc, #112]	; (84908 <cl_datamanager_init+0x8c>)
   84898:	f44f 72c8 	mov.w	r2, #400	; 0x190
   8489c:	63da      	str	r2, [r3, #60]	; 0x3c
	Treatdata[ID_tempulimit] = 375;
   8489e:	4b1a      	ldr	r3, [pc, #104]	; (84908 <cl_datamanager_init+0x8c>)
   848a0:	f240 1277 	movw	r2, #375	; 0x177
   848a4:	661a      	str	r2, [r3, #96]	; 0x60
	Treatdata[ID_tempulimit] = 365;
   848a6:	4b18      	ldr	r3, [pc, #96]	; (84908 <cl_datamanager_init+0x8c>)
   848a8:	f240 126d 	movw	r2, #365	; 0x16d
   848ac:	661a      	str	r2, [r3, #96]	; 0x60
	Treatdata[ID_condulimit] = 141;
   848ae:	4b16      	ldr	r3, [pc, #88]	; (84908 <cl_datamanager_init+0x8c>)
   848b0:	228d      	movs	r2, #141	; 0x8d
   848b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	Treatdata[ID_condllimit] = 139;
   848b6:	4b14      	ldr	r3, [pc, #80]	; (84908 <cl_datamanager_init+0x8c>)
   848b8:	228b      	movs	r2, #139	; 0x8b
   848ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	Treatdata[ID_aptulimit] =  1400;  // manav03 added 1000
   848be:	4b12      	ldr	r3, [pc, #72]	; (84908 <cl_datamanager_init+0x8c>)
   848c0:	f44f 62af 	mov.w	r2, #1400	; 0x578
   848c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	Treatdata[ID_aptllimit] = 900;    // manav03 so now the limit will be -100
   848c8:	4b0f      	ldr	r3, [pc, #60]	; (84908 <cl_datamanager_init+0x8c>)
   848ca:	f44f 7261 	mov.w	r2, #900	; 0x384
   848ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	Treatdata[ID_vptulimit] = 1400;   // manav03 added 1000
   848d2:	4b0d      	ldr	r3, [pc, #52]	; (84908 <cl_datamanager_init+0x8c>)
   848d4:	f44f 62af 	mov.w	r2, #1400	; 0x578
   848d8:	675a      	str	r2, [r3, #116]	; 0x74
	Treatdata[ID_vptllimit] = 900;   // manav03 so now the limit will be -100 
   848da:	4b0b      	ldr	r3, [pc, #44]	; (84908 <cl_datamanager_init+0x8c>)
   848dc:	f44f 7261 	mov.w	r2, #900	; 0x384
   848e0:	671a      	str	r2, [r3, #112]	; 0x70
	Treatdata[ID_tempulimit] = 50;
   848e2:	4b09      	ldr	r3, [pc, #36]	; (84908 <cl_datamanager_init+0x8c>)
   848e4:	2232      	movs	r2, #50	; 0x32
   848e6:	661a      	str	r2, [r3, #96]	; 0x60
	Treatdata[ID_templlimit] = 0;
   848e8:	4b07      	ldr	r3, [pc, #28]	; (84908 <cl_datamanager_init+0x8c>)
   848ea:	2200      	movs	r2, #0
   848ec:	665a      	str	r2, [r3, #100]	; 0x64
	Treatdata[ID_ufgoal] = 0; // added default to check uf func
   848ee:	4b06      	ldr	r3, [pc, #24]	; (84908 <cl_datamanager_init+0x8c>)
   848f0:	2200      	movs	r2, #0
   848f2:	635a      	str	r2, [r3, #52]	; 0x34
	Treatdata[ID_treattime] = 240;
   848f4:	4b04      	ldr	r3, [pc, #16]	; (84908 <cl_datamanager_init+0x8c>)
   848f6:	22f0      	movs	r2, #240	; 0xf0
   848f8:	655a      	str	r2, [r3, #84]	; 0x54
	return CL_OK;
   848fa:	2300      	movs	r3, #0
	
}
   848fc:	4618      	mov	r0, r3
   848fe:	46bd      	mov	sp, r7
   84900:	f85d 7b04 	ldr.w	r7, [sp], #4
   84904:	4770      	bx	lr
   84906:	bf00      	nop
   84908:	20072880 	.word	0x20072880

0008490c <cl_datamamanager>:
 * \return CL_OK on success. 
 * \Globals used : Treatdata,Cl_ConsoleRxMsg
 */

Cl_ReturnCodeType cl_datamamanager(Cl_Mac_EventsType cl_data_event)
{
   8490c:	b580      	push	{r7, lr}
   8490e:	b092      	sub	sp, #72	; 0x48
   84910:	af00      	add	r7, sp, #0
   84912:	4603      	mov	r3, r0
   84914:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_data_ret_val = CL_ERROR;
   84916:	2304      	movs	r3, #4
   84918:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   8491c:	2359      	movs	r3, #89	; 0x59
   8491e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	rxstreamtype datastream;
	Cl_Uint8Type dataarray[50] = {};
   84922:	f107 030c 	add.w	r3, r7, #12
   84926:	2200      	movs	r2, #0
   84928:	601a      	str	r2, [r3, #0]
   8492a:	3304      	adds	r3, #4
   8492c:	2200      	movs	r2, #0
   8492e:	601a      	str	r2, [r3, #0]
   84930:	3304      	adds	r3, #4
   84932:	2200      	movs	r2, #0
   84934:	601a      	str	r2, [r3, #0]
   84936:	3304      	adds	r3, #4
   84938:	2200      	movs	r2, #0
   8493a:	601a      	str	r2, [r3, #0]
   8493c:	3304      	adds	r3, #4
   8493e:	2200      	movs	r2, #0
   84940:	601a      	str	r2, [r3, #0]
   84942:	3304      	adds	r3, #4
   84944:	2200      	movs	r2, #0
   84946:	601a      	str	r2, [r3, #0]
   84948:	3304      	adds	r3, #4
   8494a:	2200      	movs	r2, #0
   8494c:	601a      	str	r2, [r3, #0]
   8494e:	3304      	adds	r3, #4
   84950:	2200      	movs	r2, #0
   84952:	601a      	str	r2, [r3, #0]
   84954:	3304      	adds	r3, #4
   84956:	2200      	movs	r2, #0
   84958:	601a      	str	r2, [r3, #0]
   8495a:	3304      	adds	r3, #4
   8495c:	2200      	movs	r2, #0
   8495e:	601a      	str	r2, [r3, #0]
   84960:	3304      	adds	r3, #4
   84962:	2200      	movs	r2, #0
   84964:	601a      	str	r2, [r3, #0]
   84966:	3304      	adds	r3, #4
   84968:	2200      	movs	r2, #0
   8496a:	601a      	str	r2, [r3, #0]
   8496c:	3304      	adds	r3, #4
   8496e:	2200      	movs	r2, #0
   84970:	801a      	strh	r2, [r3, #0]
   84972:	3302      	adds	r3, #2
	
	switch(cl_data_event)
   84974:	79fb      	ldrb	r3, [r7, #7]
   84976:	2b0e      	cmp	r3, #14
   84978:	d007      	beq.n	8498a <cl_datamamanager+0x7e>
   8497a:	2b3b      	cmp	r3, #59	; 0x3b
   8497c:	f000 8474 	beq.w	85268 <cl_datamamanager+0x95c>
   84980:	2b0d      	cmp	r3, #13
   84982:	f000 8389 	beq.w	85098 <cl_datamamanager+0x78c>
							
		}
		break;
		
		default:
		break;
   84986:	f000 bc70 	b.w	8526a <cl_datamamanager+0x95e>
		
		
		break;
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		if(Cl_ConsoleRxMsg.msgready == true)
   8498a:	4bcb      	ldr	r3, [pc, #812]	; (84cb8 <cl_datamamanager+0x3ac>)
   8498c:	7e1b      	ldrb	r3, [r3, #24]
   8498e:	2b00      	cmp	r3, #0
   84990:	f000 8381 	beq.w	85096 <cl_datamamanager+0x78a>
		{
			switch(Cl_ConsoleRxMsg.data.byte[0])
   84994:	4bc8      	ldr	r3, [pc, #800]	; (84cb8 <cl_datamamanager+0x3ac>)
   84996:	791b      	ldrb	r3, [r3, #4]
   84998:	3b01      	subs	r3, #1
   8499a:	2b21      	cmp	r3, #33	; 0x21
   8499c:	f200 837a 	bhi.w	85094 <cl_datamamanager+0x788>
   849a0:	a201      	add	r2, pc, #4	; (adr r2, 849a8 <cl_datamamanager+0x9c>)
   849a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   849a6:	bf00      	nop
   849a8:	00084a31 	.word	0x00084a31
   849ac:	00084a69 	.word	0x00084a69
   849b0:	00084b15 	.word	0x00084b15
   849b4:	00084b3d 	.word	0x00084b3d
   849b8:	00085095 	.word	0x00085095
   849bc:	00085095 	.word	0x00085095
   849c0:	00085095 	.word	0x00085095
   849c4:	00085095 	.word	0x00085095
   849c8:	00085095 	.word	0x00085095
   849cc:	00085095 	.word	0x00085095
   849d0:	00085095 	.word	0x00085095
   849d4:	00085095 	.word	0x00085095
   849d8:	00085095 	.word	0x00085095
   849dc:	00085095 	.word	0x00085095
   849e0:	00085095 	.word	0x00085095
   849e4:	00085095 	.word	0x00085095
   849e8:	00085095 	.word	0x00085095
   849ec:	00084bad 	.word	0x00084bad
   849f0:	00085095 	.word	0x00085095
   849f4:	00085095 	.word	0x00085095
   849f8:	00085095 	.word	0x00085095
   849fc:	00085095 	.word	0x00085095
   84a00:	00085095 	.word	0x00085095
   84a04:	00085095 	.word	0x00085095
   84a08:	00085095 	.word	0x00085095
   84a0c:	00085095 	.word	0x00085095
   84a10:	00085095 	.word	0x00085095
   84a14:	00085095 	.word	0x00085095
   84a18:	00085095 	.word	0x00085095
   84a1c:	00084aa1 	.word	0x00084aa1
   84a20:	00085095 	.word	0x00085095
   84a24:	00084ac9 	.word	0x00084ac9
   84a28:	00084af1 	.word	0x00084af1
   84a2c:	00084b75 	.word	0x00084b75
			{
				case CON_RX_PARAM_DATA_RINSE_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84a30:	2316      	movs	r3, #22
   84a32:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   84a36:	2301      	movs	r3, #1
   84a38:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   84a3a:	f107 030c 	add.w	r3, r7, #12
   84a3e:	3301      	adds	r3, #1
   84a40:	2001      	movs	r0, #1
   84a42:	4619      	mov	r1, r3
   84a44:	4b9d      	ldr	r3, [pc, #628]	; (84cbc <cl_datamamanager+0x3b0>)
   84a46:	4798      	blx	r3
   84a48:	4603      	mov	r3, r0
   84a4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84a4e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84a52:	f107 030c 	add.w	r3, r7, #12
   84a56:	4610      	mov	r0, r2
   84a58:	4619      	mov	r1, r3
   84a5a:	2202      	movs	r2, #2
   84a5c:	4b98      	ldr	r3, [pc, #608]	; (84cc0 <cl_datamamanager+0x3b4>)
   84a5e:	4798      	blx	r3
   84a60:	4603      	mov	r3, r0
   84a62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84a66:	e316      	b.n	85096 <cl_datamamanager+0x78a>
				case CON_RX_PARAM_DATA_PRIME_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84a68:	2316      	movs	r3, #22
   84a6a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   84a6e:	2302      	movs	r3, #2
   84a70:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   84a72:	f107 030c 	add.w	r3, r7, #12
   84a76:	3301      	adds	r3, #1
   84a78:	2002      	movs	r0, #2
   84a7a:	4619      	mov	r1, r3
   84a7c:	4b8f      	ldr	r3, [pc, #572]	; (84cbc <cl_datamamanager+0x3b0>)
   84a7e:	4798      	blx	r3
   84a80:	4603      	mov	r3, r0
   84a82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84a86:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84a8a:	f107 030c 	add.w	r3, r7, #12
   84a8e:	4610      	mov	r0, r2
   84a90:	4619      	mov	r1, r3
   84a92:	2202      	movs	r2, #2
   84a94:	4b8a      	ldr	r3, [pc, #552]	; (84cc0 <cl_datamamanager+0x3b4>)
   84a96:	4798      	blx	r3
   84a98:	4603      	mov	r3, r0
   84a9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84a9e:	e2fa      	b.n	85096 <cl_datamamanager+0x78a>
				case CON_RX_PARAM_DATA_MIXING_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84aa0:	2316      	movs	r3, #22
   84aa2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_MIXING;
   84aa6:	2320      	movs	r3, #32
   84aa8:	733b      	strb	r3, [r7, #12]
				//Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
				dataarray[1] = 0;
   84aaa:	2300      	movs	r3, #0
   84aac:	737b      	strb	r3, [r7, #13]
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84aae:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84ab2:	f107 030c 	add.w	r3, r7, #12
   84ab6:	4610      	mov	r0, r2
   84ab8:	4619      	mov	r1, r3
   84aba:	2202      	movs	r2, #2
   84abc:	4b80      	ldr	r3, [pc, #512]	; (84cc0 <cl_datamamanager+0x3b4>)
   84abe:	4798      	blx	r3
   84ac0:	4603      	mov	r3, r0
   84ac2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84ac6:	e2e6      	b.n	85096 <cl_datamamanager+0x78a>
				case CON_RX_PARAM_DATA_RECIRC_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84ac8:	2316      	movs	r3, #22
   84aca:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_RCIRC;
   84ace:	2321      	movs	r3, #33	; 0x21
   84ad0:	733b      	strb	r3, [r7, #12]
				//Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
				dataarray[1] = 0;
   84ad2:	2300      	movs	r3, #0
   84ad4:	737b      	strb	r3, [r7, #13]
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84ad6:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84ada:	f107 030c 	add.w	r3, r7, #12
   84ade:	4610      	mov	r0, r2
   84ae0:	4619      	mov	r1, r3
   84ae2:	2202      	movs	r2, #2
   84ae4:	4b76      	ldr	r3, [pc, #472]	; (84cc0 <cl_datamamanager+0x3b4>)
   84ae6:	4798      	blx	r3
   84ae8:	4603      	mov	r3, r0
   84aea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84aee:	e2d2      	b.n	85096 <cl_datamamanager+0x78a>
				case CON_RX_PARAM_DATA_DISINF_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84af0:	2316      	movs	r3, #22
   84af2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   84af6:	2323      	movs	r3, #35	; 0x23
   84af8:	733b      	strb	r3, [r7, #12]
				
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84afa:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84afe:	f107 030c 	add.w	r3, r7, #12
   84b02:	4610      	mov	r0, r2
   84b04:	4619      	mov	r1, r3
   84b06:	2202      	movs	r2, #2
   84b08:	4b6d      	ldr	r3, [pc, #436]	; (84cc0 <cl_datamamanager+0x3b4>)
   84b0a:	4798      	blx	r3
   84b0c:	4603      	mov	r3, r0
   84b0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84b12:	e2c0      	b.n	85096 <cl_datamamanager+0x78a>
				case CON_RX_PARAM_DATA_DIALYSER_PRIME_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84b14:	2316      	movs	r3, #22
   84b16:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_DIALYSER_PRIME_STATUS;
   84b1a:	2303      	movs	r3, #3
   84b1c:	733b      	strb	r3, [r7, #12]
				dataarray[1] = 0;									
   84b1e:	2300      	movs	r3, #0
   84b20:	737b      	strb	r3, [r7, #13]
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84b22:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84b26:	f107 030c 	add.w	r3, r7, #12
   84b2a:	4610      	mov	r0, r2
   84b2c:	4619      	mov	r1, r3
   84b2e:	2202      	movs	r2, #2
   84b30:	4b63      	ldr	r3, [pc, #396]	; (84cc0 <cl_datamamanager+0x3b4>)
   84b32:	4798      	blx	r3
   84b34:	4603      	mov	r3, r0
   84b36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84b3a:	e2ac      	b.n	85096 <cl_datamamanager+0x78a>
				
				case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84b3c:	2316      	movs	r3, #22
   84b3e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   84b42:	2304      	movs	r3, #4
   84b44:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   84b46:	f107 030c 	add.w	r3, r7, #12
   84b4a:	3301      	adds	r3, #1
   84b4c:	2004      	movs	r0, #4
   84b4e:	4619      	mov	r1, r3
   84b50:	4b5a      	ldr	r3, [pc, #360]	; (84cbc <cl_datamamanager+0x3b0>)
   84b52:	4798      	blx	r3
   84b54:	4603      	mov	r3, r0
   84b56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84b5a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84b5e:	f107 030c 	add.w	r3, r7, #12
   84b62:	4610      	mov	r0, r2
   84b64:	4619      	mov	r1, r3
   84b66:	2202      	movs	r2, #2
   84b68:	4b55      	ldr	r3, [pc, #340]	; (84cc0 <cl_datamamanager+0x3b4>)
   84b6a:	4798      	blx	r3
   84b6c:	4603      	mov	r3, r0
   84b6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84b72:	e290      	b.n	85096 <cl_datamamanager+0x78a>

				case	CON_RX_PARAM_DATA_ISOUF_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84b74:	2316      	movs	r3, #22
   84b76:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_RX_PARAM_DATA_ISOUF_STATUS;
   84b7a:	2322      	movs	r3, #34	; 0x22
   84b7c:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   84b7e:	f107 030c 	add.w	r3, r7, #12
   84b82:	3301      	adds	r3, #1
   84b84:	2004      	movs	r0, #4
   84b86:	4619      	mov	r1, r3
   84b88:	4b4c      	ldr	r3, [pc, #304]	; (84cbc <cl_datamamanager+0x3b0>)
   84b8a:	4798      	blx	r3
   84b8c:	4603      	mov	r3, r0
   84b8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84b92:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84b96:	f107 030c 	add.w	r3, r7, #12
   84b9a:	4610      	mov	r0, r2
   84b9c:	4619      	mov	r1, r3
   84b9e:	2202      	movs	r2, #2
   84ba0:	4b47      	ldr	r3, [pc, #284]	; (84cc0 <cl_datamamanager+0x3b4>)
   84ba2:	4798      	blx	r3
   84ba4:	4603      	mov	r3, r0
   84ba6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84baa:	e274      	b.n	85096 <cl_datamamanager+0x78a>

				case CON_RX_PARAM_DATA_TREATMENT_DATA:
				
				command = CON_TX_COMMAND_SYSDATA;
   84bac:	2316      	movs	r3, #22
   84bae:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] =   CON_TX_PARAM_DATA_TREATMENT_DATA;
   84bb2:	2312      	movs	r3, #18
   84bb4:	733b      	strb	r3, [r7, #12]
				if(Cl_ConsoleRxMsg.data.byte[1] < ID_b_Dlaystedata)
   84bb6:	4b40      	ldr	r3, [pc, #256]	; (84cb8 <cl_datamamanager+0x3ac>)
   84bb8:	795b      	ldrb	r3, [r3, #5]
   84bba:	2b25      	cmp	r3, #37	; 0x25
   84bbc:	d821      	bhi.n	84c02 <cl_datamamanager+0x2f6>
				{
					dataarray[1] = Cl_ConsoleRxMsg.data.byte[1];
   84bbe:	4b3e      	ldr	r3, [pc, #248]	; (84cb8 <cl_datamamanager+0x3ac>)
   84bc0:	795b      	ldrb	r3, [r3, #5]
   84bc2:	737b      	strb	r3, [r7, #13]
					datastream.word = Treatdata[dataarray[1]];
   84bc4:	7b7b      	ldrb	r3, [r7, #13]
   84bc6:	461a      	mov	r2, r3
   84bc8:	4b3e      	ldr	r3, [pc, #248]	; (84cc4 <cl_datamamanager+0x3b8>)
   84bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   84bce:	643b      	str	r3, [r7, #64]	; 0x40
					dataarray[2] = datastream.bytearray[0];
   84bd0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84bd4:	73bb      	strb	r3, [r7, #14]
					dataarray[3] = datastream.bytearray[1];
   84bd6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84bda:	73fb      	strb	r3, [r7, #15]
					dataarray[4] = datastream.bytearray[2];
   84bdc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84be0:	743b      	strb	r3, [r7, #16]
					dataarray[5] = datastream.bytearray[3];
   84be2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84be6:	747b      	strb	r3, [r7, #17]

					cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,6);
   84be8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84bec:	f107 030c 	add.w	r3, r7, #12
   84bf0:	4610      	mov	r0, r2
   84bf2:	4619      	mov	r1, r3
   84bf4:	2206      	movs	r2, #6
   84bf6:	4b32      	ldr	r3, [pc, #200]	; (84cc0 <cl_datamamanager+0x3b4>)
   84bf8:	4798      	blx	r3
   84bfa:	4603      	mov	r3, r0
   84bfc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   84c00:	e247      	b.n	85092 <cl_datamamanager+0x786>
				}
				else if(Cl_ConsoleRxMsg.data.byte[1] < ID_MAX_TREAT_PARAM)
   84c02:	4b2d      	ldr	r3, [pc, #180]	; (84cb8 <cl_datamamanager+0x3ac>)
   84c04:	795b      	ldrb	r3, [r3, #5]
   84c06:	2b2d      	cmp	r3, #45	; 0x2d
   84c08:	f200 8243 	bhi.w	85092 <cl_datamamanager+0x786>
				{
					dataarray[1] = Cl_ConsoleRxMsg.data.byte[1];
   84c0c:	4b2a      	ldr	r3, [pc, #168]	; (84cb8 <cl_datamamanager+0x3ac>)
   84c0e:	795b      	ldrb	r3, [r3, #5]
   84c10:	737b      	strb	r3, [r7, #13]
					
					switch (Cl_ConsoleRxMsg.data.byte[1])
   84c12:	4b29      	ldr	r3, [pc, #164]	; (84cb8 <cl_datamamanager+0x3ac>)
   84c14:	795b      	ldrb	r3, [r3, #5]
   84c16:	3b26      	subs	r3, #38	; 0x26
   84c18:	2b07      	cmp	r3, #7
   84c1a:	f200 8239 	bhi.w	85090 <cl_datamamanager+0x784>
   84c1e:	a201      	add	r2, pc, #4	; (adr r2, 84c24 <cl_datamamanager+0x318>)
   84c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84c24:	00084c45 	.word	0x00084c45
   84c28:	00084d43 	.word	0x00084d43
   84c2c:	00085091 	.word	0x00085091
   84c30:	00084cc9 	.word	0x00084cc9
   84c34:	00084db7 	.word	0x00084db7
   84c38:	00085019 	.word	0x00085019
   84c3c:	00084f9b 	.word	0x00084f9b
   84c40:	00084e29 	.word	0x00084e29
					{
						case ID_b_Dlaystedata:
											datastream.word = Treatdata[ID_dflow];
   84c44:	4b1f      	ldr	r3, [pc, #124]	; (84cc4 <cl_datamamanager+0x3b8>)
   84c46:	695b      	ldr	r3, [r3, #20]
   84c48:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84c4a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84c4e:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84c50:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84c54:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84c56:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84c5a:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84c5c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84c60:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_settemp];
   84c62:	4b18      	ldr	r3, [pc, #96]	; (84cc4 <cl_datamamanager+0x3b8>)
   84c64:	699b      	ldr	r3, [r3, #24]
   84c66:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84c68:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84c6c:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84c6e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84c72:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84c74:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84c78:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84c7a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84c7e:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_setcond];
   84c80:	4b10      	ldr	r3, [pc, #64]	; (84cc4 <cl_datamamanager+0x3b8>)
   84c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84c84:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84c86:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84c8a:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84c8c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84c90:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84c92:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84c96:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84c98:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84c9c:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84c9e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84ca2:	f107 030c 	add.w	r3, r7, #12
   84ca6:	4610      	mov	r0, r2
   84ca8:	4619      	mov	r1, r3
   84caa:	220e      	movs	r2, #14
   84cac:	4b04      	ldr	r3, [pc, #16]	; (84cc0 <cl_datamamanager+0x3b4>)
   84cae:	4798      	blx	r3
   84cb0:	4603      	mov	r3, r0
   84cb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84cb6:	e1ec      	b.n	85092 <cl_datamamanager+0x786>
   84cb8:	200725bc 	.word	0x200725bc
   84cbc:	0009bcdd 	.word	0x0009bcdd
   84cc0:	0009d1e9 	.word	0x0009d1e9
   84cc4:	20072880 	.word	0x20072880
						case ID_b_Conddata:
											datastream.word = Treatdata[ID_condllimit];
   84cc8:	4bd1      	ldr	r3, [pc, #836]	; (85010 <cl_datamamanager+0x704>)
   84cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   84cce:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84cd0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84cd4:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84cd6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84cda:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84cdc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84ce0:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84ce2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84ce6:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_condulimit];
   84ce8:	4bc9      	ldr	r3, [pc, #804]	; (85010 <cl_datamamanager+0x704>)
   84cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   84cee:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84cf0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84cf4:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84cf6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84cfa:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84cfc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84d00:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84d02:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84d06:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_b_Conddata];;
   84d08:	4bc1      	ldr	r3, [pc, #772]	; (85010 <cl_datamamanager+0x704>)
   84d0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   84d0e:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84d10:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84d14:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84d16:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84d1a:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84d1c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84d20:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84d22:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84d26:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84d28:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84d2c:	f107 030c 	add.w	r3, r7, #12
   84d30:	4610      	mov	r0, r2
   84d32:	4619      	mov	r1, r3
   84d34:	220e      	movs	r2, #14
   84d36:	4bb7      	ldr	r3, [pc, #732]	; (85014 <cl_datamamanager+0x708>)
   84d38:	4798      	blx	r3
   84d3a:	4603      	mov	r3, r0
   84d3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84d40:	e1a7      	b.n	85092 <cl_datamamanager+0x786>
						case ID_b_TempData:
											datastream.word = Treatdata[ID_templlimit];
   84d42:	4bb3      	ldr	r3, [pc, #716]	; (85010 <cl_datamamanager+0x704>)
   84d44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   84d46:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84d48:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84d4c:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84d4e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84d52:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84d54:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84d58:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84d5a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84d5e:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_tempulimit];
   84d60:	4bab      	ldr	r3, [pc, #684]	; (85010 <cl_datamamanager+0x704>)
   84d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   84d64:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84d66:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84d6a:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84d6c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84d70:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84d72:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84d76:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84d78:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84d7c:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_settemp];
   84d7e:	4ba4      	ldr	r3, [pc, #656]	; (85010 <cl_datamamanager+0x704>)
   84d80:	699b      	ldr	r3, [r3, #24]
   84d82:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84d84:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84d88:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84d8a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84d8e:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84d90:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84d94:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84d96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84d9a:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84d9c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84da0:	f107 030c 	add.w	r3, r7, #12
   84da4:	4610      	mov	r0, r2
   84da6:	4619      	mov	r1, r3
   84da8:	220e      	movs	r2, #14
   84daa:	4b9a      	ldr	r3, [pc, #616]	; (85014 <cl_datamamanager+0x708>)
   84dac:	4798      	blx	r3
   84dae:	4603      	mov	r3, r0
   84db0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84db4:	e16d      	b.n	85092 <cl_datamamanager+0x786>
						case ID_b_tmp:
											datastream.word = Treatdata[ID_tmpllimit];
   84db6:	4b96      	ldr	r3, [pc, #600]	; (85010 <cl_datamamanager+0x704>)
   84db8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84dba:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84dbc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84dc0:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84dc2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84dc6:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84dc8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84dcc:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84dce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84dd2:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_tmpulimit];
   84dd4:	4b8e      	ldr	r3, [pc, #568]	; (85010 <cl_datamamanager+0x704>)
   84dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   84dd8:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84dda:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84dde:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84de0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84de4:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84de6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84dea:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84dec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84df0:	757b      	strb	r3, [r7, #21]
											datastream.word = 200;
   84df2:	23c8      	movs	r3, #200	; 0xc8
   84df4:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84df6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84dfa:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84dfc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84e00:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84e02:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84e06:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84e08:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84e0c:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84e0e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84e12:	f107 030c 	add.w	r3, r7, #12
   84e16:	4610      	mov	r0, r2
   84e18:	4619      	mov	r1, r3
   84e1a:	220e      	movs	r2, #14
   84e1c:	4b7d      	ldr	r3, [pc, #500]	; (85014 <cl_datamamanager+0x708>)
   84e1e:	4798      	blx	r3
   84e20:	4603      	mov	r3, r0
   84e22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84e26:	e134      	b.n	85092 <cl_datamamanager+0x786>
						case ID_b_treatmentdata:
											datastream.word = Treatdata[ID_setcond];
   84e28:	4b79      	ldr	r3, [pc, #484]	; (85010 <cl_datamamanager+0x704>)
   84e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84e2c:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84e2e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84e32:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84e34:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84e38:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84e3a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84e3e:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84e40:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84e44:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_settemp];
   84e46:	4b72      	ldr	r3, [pc, #456]	; (85010 <cl_datamamanager+0x704>)
   84e48:	699b      	ldr	r3, [r3, #24]
   84e4a:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84e4c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84e50:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84e52:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84e56:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84e58:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84e5c:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84e5e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84e62:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_dflow];
   84e64:	4b6a      	ldr	r3, [pc, #424]	; (85010 <cl_datamamanager+0x704>)
   84e66:	695b      	ldr	r3, [r3, #20]
   84e68:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84e6a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84e6e:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84e70:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84e74:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84e76:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84e7a:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84e7c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84e80:	767b      	strb	r3, [r7, #25]
											datastream.word = Treatdata[ID_ufgoal];
   84e82:	4b63      	ldr	r3, [pc, #396]	; (85010 <cl_datamamanager+0x704>)
   84e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   84e86:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[14] = datastream.bytearray[0];
   84e88:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84e8c:	76bb      	strb	r3, [r7, #26]
											dataarray[15] = datastream.bytearray[1];
   84e8e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84e92:	76fb      	strb	r3, [r7, #27]
											dataarray[16] = datastream.bytearray[2];
   84e94:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84e98:	773b      	strb	r3, [r7, #28]
											dataarray[17] = datastream.bytearray[3];
   84e9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84e9e:	777b      	strb	r3, [r7, #29]
											datastream.word = Treatdata[ID_ufrate];
   84ea0:	4b5b      	ldr	r3, [pc, #364]	; (85010 <cl_datamamanager+0x704>)
   84ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84ea4:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[18] = datastream.bytearray[0];
   84ea6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84eaa:	77bb      	strb	r3, [r7, #30]
											dataarray[19] = datastream.bytearray[1];
   84eac:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84eb0:	77fb      	strb	r3, [r7, #31]
											dataarray[20] = datastream.bytearray[2];
   84eb2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84eb6:	f887 3020 	strb.w	r3, [r7, #32]
											dataarray[21] = datastream.bytearray[3];
   84eba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84ebe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
											datastream.word = Treatdata[ID_minufrate];
   84ec2:	4b53      	ldr	r3, [pc, #332]	; (85010 <cl_datamamanager+0x704>)
   84ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   84ec6:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[22] = datastream.bytearray[0];
   84ec8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84ecc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
											dataarray[23] = datastream.bytearray[1];
   84ed0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84ed4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
											dataarray[24] = datastream.bytearray[2];
   84ed8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84edc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
											dataarray[25] = datastream.bytearray[3];
   84ee0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84ee4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
											datastream.word = Treatdata[ID_bloodratetreat];
   84ee8:	4b49      	ldr	r3, [pc, #292]	; (85010 <cl_datamamanager+0x704>)
   84eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   84eec:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[26] = datastream.bytearray[0];
   84eee:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84ef2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
											dataarray[27] = datastream.bytearray[1];
   84ef6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
											dataarray[28] = datastream.bytearray[2];
   84efe:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84f02:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
											dataarray[29] = datastream.bytearray[3];
   84f06:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84f0a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
											datastream.word = Treatdata[ID_treattime];
   84f0e:	4b40      	ldr	r3, [pc, #256]	; (85010 <cl_datamamanager+0x704>)
   84f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   84f12:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[30] = datastream.bytearray[0];
   84f14:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84f18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
											dataarray[31] = datastream.bytearray[1];
   84f1c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84f20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
											dataarray[32] = datastream.bytearray[2];
   84f24:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84f28:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
											dataarray[33] = datastream.bytearray[3];
   84f2c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84f30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
											datastream.word = Treatdata[ID_heprate];
   84f34:	4b36      	ldr	r3, [pc, #216]	; (85010 <cl_datamamanager+0x704>)
   84f36:	69db      	ldr	r3, [r3, #28]
   84f38:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[34] = datastream.bytearray[0];
   84f3a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84f3e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
											dataarray[35] = datastream.bytearray[1];
   84f42:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84f46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
											dataarray[36] = datastream.bytearray[2];
   84f4a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84f4e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
											dataarray[37] = datastream.bytearray[3];
   84f52:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84f56:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
											datastream.word = Treatdata[ID_bolusvol];
   84f5a:	4b2d      	ldr	r3, [pc, #180]	; (85010 <cl_datamamanager+0x704>)
   84f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   84f5e:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[38] = datastream.bytearray[0];
   84f60:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84f64:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
											dataarray[39] = datastream.bytearray[1];
   84f68:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84f6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
											dataarray[40] = datastream.bytearray[2];
   84f70:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84f74:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
											dataarray[41] = datastream.bytearray[3];
   84f78:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84f7c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,42);
   84f80:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84f84:	f107 030c 	add.w	r3, r7, #12
   84f88:	4610      	mov	r0, r2
   84f8a:	4619      	mov	r1, r3
   84f8c:	222a      	movs	r2, #42	; 0x2a
   84f8e:	4b21      	ldr	r3, [pc, #132]	; (85014 <cl_datamamanager+0x708>)
   84f90:	4798      	blx	r3
   84f92:	4603      	mov	r3, r0
   84f94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84f98:	e07b      	b.n	85092 <cl_datamamanager+0x786>
						case ID_b_vpt:
											datastream.word = Treatdata[ID_vptllimit];
   84f9a:	4b1d      	ldr	r3, [pc, #116]	; (85010 <cl_datamamanager+0x704>)
   84f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   84f9e:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84fa0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84fa4:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84fa6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84faa:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84fac:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84fb0:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84fb2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84fb6:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_vptulimit];
   84fb8:	4b15      	ldr	r3, [pc, #84]	; (85010 <cl_datamamanager+0x704>)
   84fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   84fbc:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84fbe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84fc2:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84fc4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84fc8:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84fca:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84fce:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84fd0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84fd4:	757b      	strb	r3, [r7, #21]
											datastream.word = 400;
   84fd6:	f44f 73c8 	mov.w	r3, #400	; 0x190
   84fda:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84fdc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84fe0:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84fe2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84fe6:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84fe8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84fec:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84fee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84ff2:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84ff4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84ff8:	f107 030c 	add.w	r3, r7, #12
   84ffc:	4610      	mov	r0, r2
   84ffe:	4619      	mov	r1, r3
   85000:	220e      	movs	r2, #14
   85002:	4b04      	ldr	r3, [pc, #16]	; (85014 <cl_datamamanager+0x708>)
   85004:	4798      	blx	r3
   85006:	4603      	mov	r3, r0
   85008:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   8500c:	e041      	b.n	85092 <cl_datamamanager+0x786>
   8500e:	bf00      	nop
   85010:	20072880 	.word	0x20072880
   85014:	0009d1e9 	.word	0x0009d1e9
						case ID_b_apt:
											datastream.word = Treatdata[ID_aptllimit];
   85018:	4b96      	ldr	r3, [pc, #600]	; (85274 <cl_datamamanager+0x968>)
   8501a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   8501e:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   85020:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   85024:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   85026:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8502a:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   8502c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   85030:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   85032:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   85036:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_aptulimit];
   85038:	4b8e      	ldr	r3, [pc, #568]	; (85274 <cl_datamamanager+0x968>)
   8503a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   8503e:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   85040:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   85044:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   85046:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8504a:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   8504c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   85050:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   85052:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   85056:	757b      	strb	r3, [r7, #21]
											datastream.word = 500;
   85058:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   8505c:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   8505e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   85062:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   85064:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   85068:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   8506a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   8506e:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   85070:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   85074:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   85076:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   8507a:	f107 030c 	add.w	r3, r7, #12
   8507e:	4610      	mov	r0, r2
   85080:	4619      	mov	r1, r3
   85082:	220e      	movs	r2, #14
   85084:	4b7c      	ldr	r3, [pc, #496]	; (85278 <cl_datamamanager+0x96c>)
   85086:	4798      	blx	r3
   85088:	4603      	mov	r3, r0
   8508a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   8508e:	e000      	b.n	85092 <cl_datamamanager+0x786>
						
						default:break;
   85090:	bf00      	nop
					}
					
				}
		

				break;
   85092:	e000      	b.n	85096 <cl_datamamanager+0x78a>
				
				default:
				break;
   85094:	bf00      	nop
			}
		}
		break;
   85096:	e0e8      	b.n	8526a <cl_datamamanager+0x95e>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		if(Cl_ConsoleRxMsg.msgready == true)
   85098:	4b78      	ldr	r3, [pc, #480]	; (8527c <cl_datamamanager+0x970>)
   8509a:	7e1b      	ldrb	r3, [r3, #24]
   8509c:	2b00      	cmp	r3, #0
   8509e:	f000 80e2 	beq.w	85266 <cl_datamamanager+0x95a>
		{
			cl_Datastreamtype cl_temp  ;

			switch(Cl_ConsoleRxMsg.data.byte[0])
   850a2:	4b76      	ldr	r3, [pc, #472]	; (8527c <cl_datamamanager+0x970>)
   850a4:	791b      	ldrb	r3, [r3, #4]
   850a6:	2b12      	cmp	r3, #18
   850a8:	d000      	beq.n	850ac <cl_datamamanager+0x7a0>
						break;

						default:break;
					}
				break;
				default:break;
   850aa:	e0dc      	b.n	85266 <cl_datamamanager+0x95a>
			switch(Cl_ConsoleRxMsg.data.byte[0])
				{
					
					case CON_RX_PARAM_DATA_TREATMENT_DATA:
			
					if(Cl_ConsoleRxMsg.data.byte[1] < ID_b_Dlaystedata)
   850ac:	4b73      	ldr	r3, [pc, #460]	; (8527c <cl_datamamanager+0x970>)
   850ae:	795b      	ldrb	r3, [r3, #5]
   850b0:	2b25      	cmp	r3, #37	; 0x25
   850b2:	d818      	bhi.n	850e6 <cl_datamamanager+0x7da>
					{
						dataarray[1] = Cl_ConsoleRxMsg.data.byte[1];
   850b4:	4b71      	ldr	r3, [pc, #452]	; (8527c <cl_datamamanager+0x970>)
   850b6:	795b      	ldrb	r3, [r3, #5]
   850b8:	737b      	strb	r3, [r7, #13]
						
						datastream.bytearray[0] = Cl_ConsoleRxMsg.data.byte[2];
   850ba:	4b70      	ldr	r3, [pc, #448]	; (8527c <cl_datamamanager+0x970>)
   850bc:	799b      	ldrb	r3, [r3, #6]
   850be:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
						datastream.bytearray[1] = Cl_ConsoleRxMsg.data.byte[3];
   850c2:	4b6e      	ldr	r3, [pc, #440]	; (8527c <cl_datamamanager+0x970>)
   850c4:	79db      	ldrb	r3, [r3, #7]
   850c6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
						datastream.bytearray[2] = Cl_ConsoleRxMsg.data.byte[4];
   850ca:	4b6c      	ldr	r3, [pc, #432]	; (8527c <cl_datamamanager+0x970>)
   850cc:	7a1b      	ldrb	r3, [r3, #8]
   850ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
						datastream.bytearray[3] = Cl_ConsoleRxMsg.data.byte[5];
   850d2:	4b6a      	ldr	r3, [pc, #424]	; (8527c <cl_datamamanager+0x970>)
   850d4:	7a5b      	ldrb	r3, [r3, #9]
   850d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

						Treatdata[dataarray[1]] = datastream.word ;
   850da:	7b7b      	ldrb	r3, [r7, #13]
   850dc:	4619      	mov	r1, r3
   850de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   850e0:	4a64      	ldr	r2, [pc, #400]	; (85274 <cl_datamamanager+0x968>)
   850e2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
					}

			

			
					switch(Cl_ConsoleRxMsg.data.byte[1])
   850e6:	4b65      	ldr	r3, [pc, #404]	; (8527c <cl_datamamanager+0x970>)
   850e8:	795b      	ldrb	r3, [r3, #5]
   850ea:	3b05      	subs	r3, #5
   850ec:	2b20      	cmp	r3, #32
   850ee:	f200 80b8 	bhi.w	85262 <cl_datamamanager+0x956>
   850f2:	a201      	add	r2, pc, #4	; (adr r2, 850f8 <cl_datamamanager+0x7ec>)
   850f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   850f8:	0008517d 	.word	0x0008517d
   850fc:	00085185 	.word	0x00085185
   85100:	00085263 	.word	0x00085263
   85104:	00085263 	.word	0x00085263
   85108:	00085263 	.word	0x00085263
   8510c:	00085263 	.word	0x00085263
   85110:	0008518d 	.word	0x0008518d
   85114:	00085195 	.word	0x00085195
   85118:	000851a5 	.word	0x000851a5
   8511c:	000851ad 	.word	0x000851ad
   85120:	00085263 	.word	0x00085263
   85124:	00085263 	.word	0x00085263
   85128:	00085263 	.word	0x00085263
   8512c:	00085263 	.word	0x00085263
   85130:	00085263 	.word	0x00085263
   85134:	00085263 	.word	0x00085263
   85138:	000851c7 	.word	0x000851c7
   8513c:	00085263 	.word	0x00085263
   85140:	00085263 	.word	0x00085263
   85144:	000851cf 	.word	0x000851cf
   85148:	000851df 	.word	0x000851df
   8514c:	000851ef 	.word	0x000851ef
   85150:	000851ff 	.word	0x000851ff
   85154:	0008520f 	.word	0x0008520f
   85158:	0008521f 	.word	0x0008521f
   8515c:	00085263 	.word	0x00085263
   85160:	00085263 	.word	0x00085263
   85164:	00085263 	.word	0x00085263
   85168:	00085263 	.word	0x00085263
   8516c:	0008522f 	.word	0x0008522f
   85170:	00085239 	.word	0x00085239
   85174:	00085243 	.word	0x00085243
   85178:	00085253 	.word	0x00085253
					{
						case ID_dflow:
						Treatdata[ID_dflow] = (datastream.word);
   8517c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   8517e:	4a3d      	ldr	r2, [pc, #244]	; (85274 <cl_datamamanager+0x968>)
   85180:	6153      	str	r3, [r2, #20]
						break;
   85182:	e06f      	b.n	85264 <cl_datamamanager+0x958>
						case ID_settemp:
							Treatdata[ID_settemp] = (datastream.word);
   85184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85186:	4a3b      	ldr	r2, [pc, #236]	; (85274 <cl_datamamanager+0x968>)
   85188:	6193      	str	r3, [r2, #24]
						break;
   8518a:	e06b      	b.n	85264 <cl_datamamanager+0x958>
						case ID_heprate:
						break;
						case ID_setcond:
							Treatdata[ID_setcond] = (datastream.word);
   8518c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   8518e:	4a39      	ldr	r2, [pc, #228]	; (85274 <cl_datamamanager+0x968>)
   85190:	62d3      	str	r3, [r2, #44]	; 0x2c
						break;
   85192:	e067      	b.n	85264 <cl_datamamanager+0x958>
						case ID_ufrate:
						Treatdata[ID_ufrate] = (datastream.word)/10; // added to get uf rate from ui
   85194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85196:	4a3a      	ldr	r2, [pc, #232]	; (85280 <cl_datamamanager+0x974>)
   85198:	fba2 2303 	umull	r2, r3, r2, r3
   8519c:	08db      	lsrs	r3, r3, #3
   8519e:	4a35      	ldr	r2, [pc, #212]	; (85274 <cl_datamamanager+0x968>)
   851a0:	6313      	str	r3, [r2, #48]	; 0x30
						break;
   851a2:	e05f      	b.n	85264 <cl_datamamanager+0x958>
						case ID_ufgoal:
						Treatdata[ID_ufgoal] = datastream.word; // added to get uf goal data from ui
   851a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   851a6:	4a33      	ldr	r2, [pc, #204]	; (85274 <cl_datamamanager+0x968>)
   851a8:	6353      	str	r3, [r2, #52]	; 0x34
						break;
   851aa:	e05b      	b.n	85264 <cl_datamamanager+0x958>
						case ID_bolusvol:
						 cl_hep_bolus_count_rate = (datastream.word*2 );
   851ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   851ae:	b29b      	uxth	r3, r3
   851b0:	005b      	lsls	r3, r3, #1
   851b2:	b29a      	uxth	r2, r3
   851b4:	4b33      	ldr	r3, [pc, #204]	; (85284 <cl_datamamanager+0x978>)
   851b6:	801a      	strh	r2, [r3, #0]
						 if(cl_hep_bolus_count_rate>=60) ;                             /*|| (cl_hep_bolus_count_rate<=80))*/
						 {
					      cl_hep_bolus_count_rate = cl_hep_bolus_count_rate + 10;
   851b8:	4b32      	ldr	r3, [pc, #200]	; (85284 <cl_datamamanager+0x978>)
   851ba:	881b      	ldrh	r3, [r3, #0]
   851bc:	330a      	adds	r3, #10
   851be:	b29a      	uxth	r2, r3
   851c0:	4b30      	ldr	r3, [pc, #192]	; (85284 <cl_datamamanager+0x978>)
   851c2:	801a      	strh	r2, [r3, #0]
						 break;
   851c4:	e04e      	b.n	85264 <cl_datamamanager+0x958>
						case ID_heparincheck:
						break;
						case ID_minufrate:
						break;
						case ID_treattime:
						Treatdata[ID_treattime] = datastream.word;
   851c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   851c8:	4a2a      	ldr	r2, [pc, #168]	; (85274 <cl_datamamanager+0x968>)
   851ca:	6553      	str	r3, [r2, #84]	; 0x54
						break;
   851cc:	e04a      	b.n	85264 <cl_datamamanager+0x958>
						case ID_bloodratereturn:
						break;
						case ID_bloodratetreat:
						break;
						case ID_tempulimit:
						Cl_alarmThresholdTable.temp3_high_threshold =  (datastream.word);
   851ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   851d0:	4b2d      	ldr	r3, [pc, #180]	; (85288 <cl_datamamanager+0x97c>)
   851d2:	4610      	mov	r0, r2
   851d4:	4798      	blx	r3
   851d6:	4602      	mov	r2, r0
   851d8:	4b2c      	ldr	r3, [pc, #176]	; (8528c <cl_datamamanager+0x980>)
   851da:	649a      	str	r2, [r3, #72]	; 0x48
						break;
   851dc:	e042      	b.n	85264 <cl_datamamanager+0x958>
						case ID_templlimit:
						Cl_alarmThresholdTable.temp3_low_threshold =  (datastream.word);
   851de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   851e0:	4b29      	ldr	r3, [pc, #164]	; (85288 <cl_datamamanager+0x97c>)
   851e2:	4610      	mov	r0, r2
   851e4:	4798      	blx	r3
   851e6:	4602      	mov	r2, r0
   851e8:	4b28      	ldr	r3, [pc, #160]	; (8528c <cl_datamamanager+0x980>)
   851ea:	64da      	str	r2, [r3, #76]	; 0x4c
						break;
   851ec:	e03a      	b.n	85264 <cl_datamamanager+0x958>
						case ID_tmpllimit:
						Cl_alarmThresholdTable.tmp_low_threshold =  datastream.word;
   851ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   851f0:	4b25      	ldr	r3, [pc, #148]	; (85288 <cl_datamamanager+0x97c>)
   851f2:	4610      	mov	r0, r2
   851f4:	4798      	blx	r3
   851f6:	4602      	mov	r2, r0
   851f8:	4b24      	ldr	r3, [pc, #144]	; (8528c <cl_datamamanager+0x980>)
   851fa:	635a      	str	r2, [r3, #52]	; 0x34
						break;
   851fc:	e032      	b.n	85264 <cl_datamamanager+0x958>
						case ID_tmpulimit:
						Cl_alarmThresholdTable.tmp_high_threshold =  datastream.word;
   851fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   85200:	4b21      	ldr	r3, [pc, #132]	; (85288 <cl_datamamanager+0x97c>)
   85202:	4610      	mov	r0, r2
   85204:	4798      	blx	r3
   85206:	4602      	mov	r2, r0
   85208:	4b20      	ldr	r3, [pc, #128]	; (8528c <cl_datamamanager+0x980>)
   8520a:	631a      	str	r2, [r3, #48]	; 0x30
						break;
   8520c:	e02a      	b.n	85264 <cl_datamamanager+0x958>
						case ID_vptllimit:
						Cl_alarmThresholdTable.vpt_low_threshold =  datastream.word;  // manav02 removed division by 10
   8520e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   85210:	4b1d      	ldr	r3, [pc, #116]	; (85288 <cl_datamamanager+0x97c>)
   85212:	4610      	mov	r0, r2
   85214:	4798      	blx	r3
   85216:	4602      	mov	r2, r0
   85218:	4b1c      	ldr	r3, [pc, #112]	; (8528c <cl_datamamanager+0x980>)
   8521a:	615a      	str	r2, [r3, #20]
						break;
   8521c:	e022      	b.n	85264 <cl_datamamanager+0x958>
						case ID_vptulimit:
						Cl_alarmThresholdTable.vpt_high_threshold =  datastream.word;
   8521e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   85220:	4b19      	ldr	r3, [pc, #100]	; (85288 <cl_datamamanager+0x97c>)
   85222:	4610      	mov	r0, r2
   85224:	4798      	blx	r3
   85226:	4602      	mov	r2, r0
   85228:	4b18      	ldr	r3, [pc, #96]	; (8528c <cl_datamamanager+0x980>)
   8522a:	611a      	str	r2, [r3, #16]
						break;
   8522c:	e01a      	b.n	85264 <cl_datamamanager+0x958>
						case ID_dflowllimit:
						break;
						case ID_dflowulimit:
						break;
						case ID_condllimit:
						Cl_alarmThresholdTable.cond_low_threshold =  datastream.word; // manav02 removed division by 10
   8522e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85230:	b29a      	uxth	r2, r3
   85232:	4b16      	ldr	r3, [pc, #88]	; (8528c <cl_datamamanager+0x980>)
   85234:	801a      	strh	r2, [r3, #0]
						break;
   85236:	e015      	b.n	85264 <cl_datamamanager+0x958>
						case ID_condulimit:
						Cl_alarmThresholdTable.cond_high_threshold =  datastream.word;  // manav02 removed division by 10
   85238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   8523a:	b29a      	uxth	r2, r3
   8523c:	4b13      	ldr	r3, [pc, #76]	; (8528c <cl_datamamanager+0x980>)
   8523e:	805a      	strh	r2, [r3, #2]
						break;
   85240:	e010      	b.n	85264 <cl_datamamanager+0x958>
						case ID_aptllimit:
						Cl_alarmThresholdTable.apt_low_threshold =  (datastream.word);
   85242:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   85244:	4b10      	ldr	r3, [pc, #64]	; (85288 <cl_datamamanager+0x97c>)
   85246:	4610      	mov	r0, r2
   85248:	4798      	blx	r3
   8524a:	4602      	mov	r2, r0
   8524c:	4b0f      	ldr	r3, [pc, #60]	; (8528c <cl_datamamanager+0x980>)
   8524e:	60da      	str	r2, [r3, #12]
						break;
   85250:	e008      	b.n	85264 <cl_datamamanager+0x958>
						case ID_aptulimit:
						Cl_alarmThresholdTable.apt_high_threshold =  (datastream.word); // manav02 removed division by 100
   85252:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   85254:	4b0c      	ldr	r3, [pc, #48]	; (85288 <cl_datamamanager+0x97c>)
   85256:	4610      	mov	r0, r2
   85258:	4798      	blx	r3
   8525a:	4602      	mov	r2, r0
   8525c:	4b0b      	ldr	r3, [pc, #44]	; (8528c <cl_datamamanager+0x980>)
   8525e:	609a      	str	r2, [r3, #8]
						break;
   85260:	e000      	b.n	85264 <cl_datamamanager+0x958>

						default:break;
   85262:	bf00      	nop
					}
				break;
   85264:	bf00      	nop
				default:break;
			}
							
							
		}
		break;
   85266:	e000      	b.n	8526a <cl_datamamanager+0x95e>
		
		case EVT_TICK_SEC :
		
		
		
		break;
   85268:	bf00      	nop
		
		default:
		break;
		
	}
return CL_OK;
   8526a:	2300      	movs	r3, #0
}
   8526c:	4618      	mov	r0, r3
   8526e:	3748      	adds	r7, #72	; 0x48
   85270:	46bd      	mov	sp, r7
   85272:	bd80      	pop	{r7, pc}
   85274:	20072880 	.word	0x20072880
   85278:	0009d1e9 	.word	0x0009d1e9
   8527c:	200725bc 	.word	0x200725bc
   85280:	cccccccd 	.word	0xcccccccd
   85284:	20070bfe 	.word	0x20070bfe
   85288:	000a8255 	.word	0x000a8255
   8528c:	200722a8 	.word	0x200722a8

00085290 <Cl_dlsis_init>:
{FPCURRENTSTATUS,false,false,false},
*/
};
volatile Cl_Uint8Type var=0;
 Cl_ReturnCodeType Cl_dlsis_init(void)
 {
   85290:	b480      	push	{r7}
   85292:	af00      	add	r7, sp, #0
  Cl_dlsissecondscounter_1 =0;Cl_dlsisMinutescounter_1=0; Cl_dlsishourscounter_1=0;
   85294:	4b2c      	ldr	r3, [pc, #176]	; (85348 <Cl_dlsis_init+0xb8>)
   85296:	2200      	movs	r2, #0
   85298:	601a      	str	r2, [r3, #0]
   8529a:	4b2c      	ldr	r3, [pc, #176]	; (8534c <Cl_dlsis_init+0xbc>)
   8529c:	2200      	movs	r2, #0
   8529e:	601a      	str	r2, [r3, #0]
   852a0:	4b2b      	ldr	r3, [pc, #172]	; (85350 <Cl_dlsis_init+0xc0>)
   852a2:	2200      	movs	r2, #0
   852a4:	601a      	str	r2, [r3, #0]
  Cl_dlsisTotalMinutescounter_1=0; Cl_dlsisTotalhourscounter_1=0;
   852a6:	4b2b      	ldr	r3, [pc, #172]	; (85354 <Cl_dlsis_init+0xc4>)
   852a8:	2200      	movs	r2, #0
   852aa:	601a      	str	r2, [r3, #0]
   852ac:	4b2a      	ldr	r3, [pc, #168]	; (85358 <Cl_dlsis_init+0xc8>)
   852ae:	2200      	movs	r2, #0
   852b0:	601a      	str	r2, [r3, #0]
 Cl_dlsisOpenFillTimeOut = false; heater_stable_status = false;
   852b2:	4b2a      	ldr	r3, [pc, #168]	; (8535c <Cl_dlsis_init+0xcc>)
   852b4:	2200      	movs	r2, #0
   852b6:	701a      	strb	r2, [r3, #0]
   852b8:	4b29      	ldr	r3, [pc, #164]	; (85360 <Cl_dlsis_init+0xd0>)
   852ba:	2200      	movs	r2, #0
   852bc:	701a      	strb	r2, [r3, #0]
  dlis_wait_cnt =0;
   852be:	4b29      	ldr	r3, [pc, #164]	; (85364 <Cl_dlsis_init+0xd4>)
   852c0:	2200      	movs	r2, #0
   852c2:	801a      	strh	r2, [r3, #0]

  wait_cnt_dls = 0;TmpVal_dls =0;
   852c4:	4b28      	ldr	r3, [pc, #160]	; (85368 <Cl_dlsis_init+0xd8>)
   852c6:	2200      	movs	r2, #0
   852c8:	801a      	strh	r2, [r3, #0]
   852ca:	4b28      	ldr	r3, [pc, #160]	; (8536c <Cl_dlsis_init+0xdc>)
   852cc:	2200      	movs	r2, #0
   852ce:	801a      	strh	r2, [r3, #0]
  temp1_dls =0 ;temp2_dls =0;
   852d0:	4b27      	ldr	r3, [pc, #156]	; (85370 <Cl_dlsis_init+0xe0>)
   852d2:	2200      	movs	r2, #0
   852d4:	801a      	strh	r2, [r3, #0]
   852d6:	4b27      	ldr	r3, [pc, #156]	; (85374 <Cl_dlsis_init+0xe4>)
   852d8:	2200      	movs	r2, #0
   852da:	801a      	strh	r2, [r3, #0]
  bypass_flag=0;
   852dc:	4b26      	ldr	r3, [pc, #152]	; (85378 <Cl_dlsis_init+0xe8>)
   852de:	2200      	movs	r2, #0
   852e0:	701a      	strb	r2, [r3, #0]
   bc_flag=1;
   852e2:	4b26      	ldr	r3, [pc, #152]	; (8537c <Cl_dlsis_init+0xec>)
   852e4:	2201      	movs	r2, #1
   852e6:	701a      	strb	r2, [r3, #0]
  flow_rate=0;
   852e8:	4b25      	ldr	r3, [pc, #148]	; (85380 <Cl_dlsis_init+0xf0>)
   852ea:	2200      	movs	r2, #0
   852ec:	601a      	str	r2, [r3, #0]
  cl_dlsis_powerfailure = 0;
   852ee:	4b25      	ldr	r3, [pc, #148]	; (85384 <Cl_dlsis_init+0xf4>)
   852f0:	2200      	movs	r2, #0
   852f2:	601a      	str	r2, [r3, #0]
 dlsis_ps1 = 0; dlsis_ps2=0; dlsis_ps3=0;dlsis_apt = 0; dlsis_vpt=0;
   852f4:	4b24      	ldr	r3, [pc, #144]	; (85388 <Cl_dlsis_init+0xf8>)
   852f6:	f04f 0200 	mov.w	r2, #0
   852fa:	601a      	str	r2, [r3, #0]
   852fc:	4b23      	ldr	r3, [pc, #140]	; (8538c <Cl_dlsis_init+0xfc>)
   852fe:	f04f 0200 	mov.w	r2, #0
   85302:	601a      	str	r2, [r3, #0]
   85304:	4b22      	ldr	r3, [pc, #136]	; (85390 <Cl_dlsis_init+0x100>)
   85306:	f04f 0200 	mov.w	r2, #0
   8530a:	601a      	str	r2, [r3, #0]
   8530c:	4b21      	ldr	r3, [pc, #132]	; (85394 <Cl_dlsis_init+0x104>)
   8530e:	f04f 0200 	mov.w	r2, #0
   85312:	601a      	str	r2, [r3, #0]
   85314:	4b20      	ldr	r3, [pc, #128]	; (85398 <Cl_dlsis_init+0x108>)
   85316:	f04f 0200 	mov.w	r2, #0
   8531a:	601a      	str	r2, [r3, #0]
 dlsis_temp1=0;dlsis_temp2=0;dlsis_temp3=0;dlsis_cond=0;
   8531c:	4b1f      	ldr	r3, [pc, #124]	; (8539c <Cl_dlsis_init+0x10c>)
   8531e:	f04f 0200 	mov.w	r2, #0
   85322:	601a      	str	r2, [r3, #0]
   85324:	4b1e      	ldr	r3, [pc, #120]	; (853a0 <Cl_dlsis_init+0x110>)
   85326:	f04f 0200 	mov.w	r2, #0
   8532a:	601a      	str	r2, [r3, #0]
   8532c:	4b1d      	ldr	r3, [pc, #116]	; (853a4 <Cl_dlsis_init+0x114>)
   8532e:	f04f 0200 	mov.w	r2, #0
   85332:	601a      	str	r2, [r3, #0]
   85334:	4b1c      	ldr	r3, [pc, #112]	; (853a8 <Cl_dlsis_init+0x118>)
   85336:	f04f 0200 	mov.w	r2, #0
   8533a:	601a      	str	r2, [r3, #0]
 
	 return CL_OK;
   8533c:	2300      	movs	r3, #0
 }
   8533e:	4618      	mov	r0, r3
   85340:	46bd      	mov	sp, r7
   85342:	f85d 7b04 	ldr.w	r7, [sp], #4
   85346:	4770      	bx	lr
   85348:	20071a4c 	.word	0x20071a4c
   8534c:	20071a50 	.word	0x20071a50
   85350:	20071a54 	.word	0x20071a54
   85354:	20071a58 	.word	0x20071a58
   85358:	20071a5c 	.word	0x20071a5c
   8535c:	20071a60 	.word	0x20071a60
   85360:	20071a61 	.word	0x20071a61
   85364:	20072328 	.word	0x20072328
   85368:	20071a62 	.word	0x20071a62
   8536c:	20071a64 	.word	0x20071a64
   85370:	20072324 	.word	0x20072324
   85374:	2007232a 	.word	0x2007232a
   85378:	20071a66 	.word	0x20071a66
   8537c:	20071a67 	.word	0x20071a67
   85380:	20071a68 	.word	0x20071a68
   85384:	20071a94 	.word	0x20071a94
   85388:	20071a6c 	.word	0x20071a6c
   8538c:	20071a70 	.word	0x20071a70
   85390:	20071a74 	.word	0x20071a74
   85394:	20071a78 	.word	0x20071a78
   85398:	20071a7c 	.word	0x20071a7c
   8539c:	20071a80 	.word	0x20071a80
   853a0:	20071a84 	.word	0x20071a84
   853a4:	20071a88 	.word	0x20071a88
   853a8:	20071a8c 	.word	0x20071a8c

000853ac <Cl_Dlsis_controller>:
 
 
Cl_ReturnCodeType Cl_Dlsis_controller(Cl_Mac_EventsType Cl_MacDlsisEvent)
{
   853ac:	b580      	push	{r7, lr}
   853ae:	b096      	sub	sp, #88	; 0x58
   853b0:	af00      	add	r7, sp, #0
   853b2:	4603      	mov	r3, r0
   853b4:	71fb      	strb	r3, [r7, #7]
	
Cl_ReturnCodeType Cl_dlsisretcode;
Cl_Dlsis_Eevents cl_dlsis_event = EVENT_NULL_EVENT;
   853b6:	2300      	movs	r3, #0
   853b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
Cl_BoolType alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false, flowstatus = false;
   853bc:	2300      	movs	r3, #0
   853be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
   853c2:	2300      	movs	r3, #0
   853c4:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
   853c8:	2300      	movs	r3, #0
   853ca:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
   853ce:	2300      	movs	r3, #0
   853d0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
static Cl_BoolType bcs_wait = false;
static Cl_BoolType V2_toggle = false;
Cl_Uint16Type Tmp2Val = 0;
   853d4:	2300      	movs	r3, #0
   853d6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
Cl_Uint8Type dataarray[8] =  {0,0,0,0};
   853da:	2300      	movs	r3, #0
   853dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   853de:	2300      	movs	r3, #0
   853e0:	643b      	str	r3, [r7, #64]	; 0x40
extern Cl_BoolType BC_window; //test
extern Cl_BoolType g_testbcfreeze; //test
extern Cl_BoolType Current_sense_trigger; // test
Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   853e2:	2359      	movs	r3, #89	; 0x59
   853e4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
Cl_Uint8Type data = 0;
   853e8:	2300      	movs	r3, #0
   853ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
Cl_Uint16Type tempcount=0;
   853ee:	2300      	movs	r3, #0
   853f0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
float temp;
//static float apt=0, vpt=0;
StateDatatype abfdata;
Cl_Uint8Type abfdataarray[5] =  {0,0,0,0,0};
   853f4:	2300      	movs	r3, #0
   853f6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
   853fa:	2300      	movs	r3, #0
   853fc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
   85400:	2300      	movs	r3, #0
   85402:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
   85406:	2300      	movs	r3, #0
   85408:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   8540c:	2300      	movs	r3, #0
   8540e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c


Cl_dlsisretcode =  cl_dlsis_translatemacevent( Cl_MacDlsisEvent, &cl_dlsis_event);
   85412:	79fa      	ldrb	r2, [r7, #7]
   85414:	f107 0347 	add.w	r3, r7, #71	; 0x47
   85418:	4610      	mov	r0, r2
   8541a:	4619      	mov	r1, r3
   8541c:	4baa      	ldr	r3, [pc, #680]	; (856c8 <Cl_Dlsis_controller+0x31c>)
   8541e:	4798      	blx	r3
   85420:	4603      	mov	r3, r0
   85422:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	
	switch(cl_dlsis_event)
   85426:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   8542a:	3b11      	subs	r3, #17
   8542c:	2b4b      	cmp	r3, #75	; 0x4b
   8542e:	f200 81ef 	bhi.w	85810 <Cl_Dlsis_controller+0x464>
   85432:	a201      	add	r2, pc, #4	; (adr r2, 85438 <Cl_Dlsis_controller+0x8c>)
   85434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85438:	00085811 	.word	0x00085811
   8543c:	00085811 	.word	0x00085811
   85440:	00085569 	.word	0x00085569
   85444:	00085811 	.word	0x00085811
   85448:	00085811 	.word	0x00085811
   8544c:	00085811 	.word	0x00085811
   85450:	00085811 	.word	0x00085811
   85454:	00085811 	.word	0x00085811
   85458:	00085811 	.word	0x00085811
   8545c:	00085811 	.word	0x00085811
   85460:	00085811 	.word	0x00085811
   85464:	00085811 	.word	0x00085811
   85468:	000856f9 	.word	0x000856f9
   8546c:	00085655 	.word	0x00085655
   85470:	00085679 	.word	0x00085679
   85474:	00085587 	.word	0x00085587
   85478:	000855c7 	.word	0x000855c7
   8547c:	0008563b 	.word	0x0008563b
   85480:	00085577 	.word	0x00085577
   85484:	00085811 	.word	0x00085811
   85488:	00085581 	.word	0x00085581
   8548c:	00085811 	.word	0x00085811
   85490:	00085811 	.word	0x00085811
   85494:	00085811 	.word	0x00085811
   85498:	00085811 	.word	0x00085811
   8549c:	00085811 	.word	0x00085811
   854a0:	00085811 	.word	0x00085811
   854a4:	00085811 	.word	0x00085811
   854a8:	00085811 	.word	0x00085811
   854ac:	00085811 	.word	0x00085811
   854b0:	00085811 	.word	0x00085811
   854b4:	00085811 	.word	0x00085811
   854b8:	00085811 	.word	0x00085811
   854bc:	00085811 	.word	0x00085811
   854c0:	00085811 	.word	0x00085811
   854c4:	00085811 	.word	0x00085811
   854c8:	00085811 	.word	0x00085811
   854cc:	00085811 	.word	0x00085811
   854d0:	00085811 	.word	0x00085811
   854d4:	00085811 	.word	0x00085811
   854d8:	00085811 	.word	0x00085811
   854dc:	00085811 	.word	0x00085811
   854e0:	00085811 	.word	0x00085811
   854e4:	00085811 	.word	0x00085811
   854e8:	00085811 	.word	0x00085811
   854ec:	00085811 	.word	0x00085811
   854f0:	00085811 	.word	0x00085811
   854f4:	00085811 	.word	0x00085811
   854f8:	00085811 	.word	0x00085811
   854fc:	00085811 	.word	0x00085811
   85500:	00085811 	.word	0x00085811
   85504:	00085811 	.word	0x00085811
   85508:	00085811 	.word	0x00085811
   8550c:	00085811 	.word	0x00085811
   85510:	00085811 	.word	0x00085811
   85514:	00085811 	.word	0x00085811
   85518:	00085811 	.word	0x00085811
   8551c:	00085811 	.word	0x00085811
   85520:	00085811 	.word	0x00085811
   85524:	00085811 	.word	0x00085811
   85528:	00085811 	.word	0x00085811
   8552c:	00085811 	.word	0x00085811
   85530:	00085811 	.word	0x00085811
   85534:	00085811 	.word	0x00085811
   85538:	00085811 	.word	0x00085811
   8553c:	00085811 	.word	0x00085811
   85540:	00085811 	.word	0x00085811
   85544:	00085811 	.word	0x00085811
   85548:	00085811 	.word	0x00085811
   8554c:	00085811 	.word	0x00085811
   85550:	00085811 	.word	0x00085811
   85554:	00085811 	.word	0x00085811
   85558:	00085811 	.word	0x00085811
   8555c:	00085811 	.word	0x00085811
   85560:	00085757 	.word	0x00085757
   85564:	000857b5 	.word	0x000857b5
	{
		case EVENT_DLSIS_TICK_SECOND:
		Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_SECOND);
   85568:	2002      	movs	r0, #2
   8556a:	4b58      	ldr	r3, [pc, #352]	; (856cc <Cl_Dlsis_controller+0x320>)
   8556c:	4798      	blx	r3
   8556e:	4603      	mov	r3, r0
   85570:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		break;
   85574:	e14d      	b.n	85812 <Cl_Dlsis_controller+0x466>
		//Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_50MS);
		break;
		
		
		case EVENT_DLSIS_HEAPARIN_BOLUS:
		cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
   85576:	2007      	movs	r0, #7
   85578:	2100      	movs	r1, #0
   8557a:	4b55      	ldr	r3, [pc, #340]	; (856d0 <Cl_Dlsis_controller+0x324>)
   8557c:	4798      	blx	r3
		break;
   8557e:	e148      	b.n	85812 <Cl_Dlsis_controller+0x466>
		
		case EVENT_DLSIS_MUTE:
		sv_cntrl_nobuzzer();
   85580:	4b54      	ldr	r3, [pc, #336]	; (856d4 <Cl_Dlsis_controller+0x328>)
   85582:	4798      	blx	r3
		break;
   85584:	e145      	b.n	85812 <Cl_Dlsis_controller+0x466>
		
		case EVENT_DLSIS_HEP_RATE:
			if(Cl_ConsoleRxMsg.msgready == true)
   85586:	4b54      	ldr	r3, [pc, #336]	; (856d8 <Cl_Dlsis_controller+0x32c>)
   85588:	7e1b      	ldrb	r3, [r3, #24]
   8558a:	2b00      	cmp	r3, #0
   8558c:	d01a      	beq.n	855c4 <Cl_Dlsis_controller+0x218>
			{
				
				cl_Datastreamtype cl_temp  ;
				cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   8558e:	4b52      	ldr	r3, [pc, #328]	; (856d8 <Cl_Dlsis_controller+0x32c>)
   85590:	791b      	ldrb	r3, [r3, #4]
   85592:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   85596:	4b50      	ldr	r3, [pc, #320]	; (856d8 <Cl_Dlsis_controller+0x32c>)
   85598:	795b      	ldrb	r3, [r3, #5]
   8559a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   8559e:	4b4e      	ldr	r3, [pc, #312]	; (856d8 <Cl_Dlsis_controller+0x32c>)
   855a0:	799b      	ldrb	r3, [r3, #6]
   855a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   855a6:	4b4c      	ldr	r3, [pc, #304]	; (856d8 <Cl_Dlsis_controller+0x32c>)
   855a8:	79db      	ldrb	r3, [r3, #7]
   855aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Treatdata[ID_heprate] = cl_temp.Twobyte;
   855ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   855b0:	461a      	mov	r2, r3
   855b2:	4b4a      	ldr	r3, [pc, #296]	; (856dc <Cl_Dlsis_controller+0x330>)
   855b4:	61da      	str	r2, [r3, #28]
			//	hep_calibration(Treatdata[ID_heprate]);
				cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,Treatdata[ID_heprate]);
   855b6:	4b49      	ldr	r3, [pc, #292]	; (856dc <Cl_Dlsis_controller+0x330>)
   855b8:	69db      	ldr	r3, [r3, #28]
   855ba:	2006      	movs	r0, #6
   855bc:	4619      	mov	r1, r3
   855be:	4b44      	ldr	r3, [pc, #272]	; (856d0 <Cl_Dlsis_controller+0x324>)
   855c0:	4798      	blx	r3
			}
		break;
   855c2:	e126      	b.n	85812 <Cl_Dlsis_controller+0x466>
   855c4:	e125      	b.n	85812 <Cl_Dlsis_controller+0x466>
		case EVENT_DLSIS_HEP_ON:
		
		if(Cl_ConsoleRxMsg.msgready == true)
   855c6:	4b44      	ldr	r3, [pc, #272]	; (856d8 <Cl_Dlsis_controller+0x32c>)
   855c8:	7e1b      	ldrb	r3, [r3, #24]
   855ca:	2b00      	cmp	r3, #0
   855cc:	d034      	beq.n	85638 <Cl_Dlsis_controller+0x28c>
		
		{
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   855ce:	4b42      	ldr	r3, [pc, #264]	; (856d8 <Cl_Dlsis_controller+0x32c>)
   855d0:	795b      	ldrb	r3, [r3, #5]
   855d2:	f887 3020 	strb.w	r3, [r7, #32]
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   855d6:	4b40      	ldr	r3, [pc, #256]	; (856d8 <Cl_Dlsis_controller+0x32c>)
   855d8:	799b      	ldrb	r3, [r3, #6]
   855da:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   855de:	4b3e      	ldr	r3, [pc, #248]	; (856d8 <Cl_Dlsis_controller+0x32c>)
   855e0:	79db      	ldrb	r3, [r3, #7]
   855e2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   855e6:	4b3c      	ldr	r3, [pc, #240]	; (856d8 <Cl_Dlsis_controller+0x32c>)
   855e8:	7a1b      	ldrb	r3, [r3, #8]
   855ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			
			if(Cl_ConsoleRxMsg.data.byte[0] == 1)
   855ee:	4b3a      	ldr	r3, [pc, #232]	; (856d8 <Cl_Dlsis_controller+0x32c>)
   855f0:	791b      	ldrb	r3, [r3, #4]
   855f2:	2b01      	cmp	r3, #1
   855f4:	d104      	bne.n	85600 <Cl_Dlsis_controller+0x254>
			{
				cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
   855f6:	2001      	movs	r0, #1
   855f8:	2100      	movs	r1, #0
   855fa:	4b35      	ldr	r3, [pc, #212]	; (856d0 <Cl_Dlsis_controller+0x324>)
   855fc:	4798      	blx	r3
   855fe:	e01b      	b.n	85638 <Cl_Dlsis_controller+0x28c>
				
			}
			else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
   85600:	4b35      	ldr	r3, [pc, #212]	; (856d8 <Cl_Dlsis_controller+0x32c>)
   85602:	791b      	ldrb	r3, [r3, #4]
   85604:	2b02      	cmp	r3, #2
   85606:	d104      	bne.n	85612 <Cl_Dlsis_controller+0x266>
			{
				cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
   85608:	2004      	movs	r0, #4
   8560a:	2100      	movs	r1, #0
   8560c:	4b30      	ldr	r3, [pc, #192]	; (856d0 <Cl_Dlsis_controller+0x324>)
   8560e:	4798      	blx	r3
   85610:	e012      	b.n	85638 <Cl_Dlsis_controller+0x28c>
			}
			else if(Cl_ConsoleRxMsg.data.byte[0] == 0)
   85612:	4b31      	ldr	r3, [pc, #196]	; (856d8 <Cl_Dlsis_controller+0x32c>)
   85614:	791b      	ldrb	r3, [r3, #4]
   85616:	2b00      	cmp	r3, #0
   85618:	d10e      	bne.n	85638 <Cl_Dlsis_controller+0x28c>
			{
				
					cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,Treatdata[ID_heprate]);
   8561a:	4b30      	ldr	r3, [pc, #192]	; (856dc <Cl_Dlsis_controller+0x330>)
   8561c:	69db      	ldr	r3, [r3, #28]
   8561e:	200b      	movs	r0, #11
   85620:	4619      	mov	r1, r3
   85622:	4b2b      	ldr	r3, [pc, #172]	; (856d0 <Cl_Dlsis_controller+0x324>)
   85624:	4798      	blx	r3
									Cl_AlarmActivateAlarms(HP_OVERRUN,true);
   85626:	2034      	movs	r0, #52	; 0x34
   85628:	2101      	movs	r1, #1
   8562a:	4b2d      	ldr	r3, [pc, #180]	; (856e0 <Cl_Dlsis_controller+0x334>)
   8562c:	4798      	blx	r3
									Cl_AlarmActivateAlarms(HP_UNDERRUN,true);
   8562e:	2035      	movs	r0, #53	; 0x35
   85630:	2101      	movs	r1, #1
   85632:	4b2b      	ldr	r3, [pc, #172]	; (856e0 <Cl_Dlsis_controller+0x334>)
   85634:	4798      	blx	r3
			}
			
		}
		
		
		break;
   85636:	e0ec      	b.n	85812 <Cl_Dlsis_controller+0x466>
   85638:	e0eb      	b.n	85812 <Cl_Dlsis_controller+0x466>
		case EVENT_DLSIS_HEP_OFF:
									Cl_AlarmActivateAlarms(HP_OVERRUN,false);
   8563a:	2034      	movs	r0, #52	; 0x34
   8563c:	2100      	movs	r1, #0
   8563e:	4b28      	ldr	r3, [pc, #160]	; (856e0 <Cl_Dlsis_controller+0x334>)
   85640:	4798      	blx	r3
									Cl_AlarmActivateAlarms(HP_UNDERRUN,false);
   85642:	2035      	movs	r0, #53	; 0x35
   85644:	2100      	movs	r1, #0
   85646:	4b26      	ldr	r3, [pc, #152]	; (856e0 <Cl_Dlsis_controller+0x334>)
   85648:	4798      	blx	r3
			cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
   8564a:	200d      	movs	r0, #13
   8564c:	2100      	movs	r1, #0
   8564e:	4b20      	ldr	r3, [pc, #128]	; (856d0 <Cl_Dlsis_controller+0x324>)
   85650:	4798      	blx	r3
		break;
   85652:	e0de      	b.n	85812 <Cl_Dlsis_controller+0x466>
		case EVENT_DLSIS_COMMAND_SET_BLDPMP_ON:
		cl_bp_controller(CL_BP_EVENT_START,0);
   85654:	2002      	movs	r0, #2
   85656:	2100      	movs	r1, #0
   85658:	4b22      	ldr	r3, [pc, #136]	; (856e4 <Cl_Dlsis_controller+0x338>)
   8565a:	4798      	blx	r3
		Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
   8565c:	2001      	movs	r0, #1
   8565e:	2101      	movs	r1, #1
   85660:	4b1f      	ldr	r3, [pc, #124]	; (856e0 <Cl_Dlsis_controller+0x334>)
   85662:	4798      	blx	r3
   85664:	4603      	mov	r3, r0
   85666:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		bpFlag = 0 ;
   8566a:	4b1f      	ldr	r3, [pc, #124]	; (856e8 <Cl_Dlsis_controller+0x33c>)
   8566c:	2200      	movs	r2, #0
   8566e:	601a      	str	r2, [r3, #0]
		bpflagCounter = 0;
   85670:	4b1e      	ldr	r3, [pc, #120]	; (856ec <Cl_Dlsis_controller+0x340>)
   85672:	2200      	movs	r2, #0
   85674:	601a      	str	r2, [r3, #0]
		break;
   85676:	e0cc      	b.n	85812 <Cl_Dlsis_controller+0x466>
		case EVENT_DLSIS_COMMAND_SET_BLDPMP_OFF:
		cl_bp_controller(CL_BP_EVENT_STOP,0);
   85678:	2004      	movs	r0, #4
   8567a:	2100      	movs	r1, #0
   8567c:	4b19      	ldr	r3, [pc, #100]	; (856e4 <Cl_Dlsis_controller+0x338>)
   8567e:	4798      	blx	r3
		
		if(cl_dlsis_state == CL_DLSIS_STATE_DIALYSIS){
   85680:	4b1b      	ldr	r3, [pc, #108]	; (856f0 <Cl_Dlsis_controller+0x344>)
   85682:	781b      	ldrb	r3, [r3, #0]
   85684:	2b04      	cmp	r3, #4
   85686:	d103      	bne.n	85690 <Cl_Dlsis_controller+0x2e4>
			Cl_Alarm_TriggerAlarm(BP_STOPPED,1);
   85688:	203f      	movs	r0, #63	; 0x3f
   8568a:	2101      	movs	r1, #1
   8568c:	4b19      	ldr	r3, [pc, #100]	; (856f4 <Cl_Dlsis_controller+0x348>)
   8568e:	4798      	blx	r3
		
		}
		Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BP_OVERRUN,false );
   85690:	2036      	movs	r0, #54	; 0x36
   85692:	2100      	movs	r1, #0
   85694:	4b12      	ldr	r3, [pc, #72]	; (856e0 <Cl_Dlsis_controller+0x334>)
   85696:	4798      	blx	r3
   85698:	4603      	mov	r3, r0
   8569a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BP_UNDERRUN,false );
   8569e:	2037      	movs	r0, #55	; 0x37
   856a0:	2100      	movs	r1, #0
   856a2:	4b0f      	ldr	r3, [pc, #60]	; (856e0 <Cl_Dlsis_controller+0x334>)
   856a4:	4798      	blx	r3
   856a6:	4603      	mov	r3, r0
   856a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		bpFlag = 0 ;
   856ac:	4b0e      	ldr	r3, [pc, #56]	; (856e8 <Cl_Dlsis_controller+0x33c>)
   856ae:	2200      	movs	r2, #0
   856b0:	601a      	str	r2, [r3, #0]
		bpflagCounter = 0;
   856b2:	4b0e      	ldr	r3, [pc, #56]	; (856ec <Cl_Dlsis_controller+0x340>)
   856b4:	2200      	movs	r2, #0
   856b6:	601a      	str	r2, [r3, #0]
		
		Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false);
   856b8:	2001      	movs	r0, #1
   856ba:	2100      	movs	r1, #0
   856bc:	4b08      	ldr	r3, [pc, #32]	; (856e0 <Cl_Dlsis_controller+0x334>)
   856be:	4798      	blx	r3
   856c0:	4603      	mov	r3, r0
   856c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		break;
   856c6:	e0a4      	b.n	85812 <Cl_Dlsis_controller+0x466>
   856c8:	00086529 	.word	0x00086529
   856cc:	00082ee1 	.word	0x00082ee1
   856d0:	00094b61 	.word	0x00094b61
   856d4:	0009b6c1 	.word	0x0009b6c1
   856d8:	200725bc 	.word	0x200725bc
   856dc:	20072880 	.word	0x20072880
   856e0:	00082a35 	.word	0x00082a35
   856e4:	00094325 	.word	0x00094325
   856e8:	20071aa0 	.word	0x20071aa0
   856ec:	20071a9c 	.word	0x20071a9c
   856f0:	20071a48 	.word	0x20071a48
   856f4:	00082c75 	.word	0x00082c75
		case EVENT_DLSIS_COMMAND_SET_BLDPUMPRATE:
		if(Cl_ConsoleRxMsg.msgready == true)
   856f8:	4b93      	ldr	r3, [pc, #588]	; (85948 <Cl_Dlsis_controller+0x59c>)
   856fa:	7e1b      	ldrb	r3, [r3, #24]
   856fc:	2b00      	cmp	r3, #0
   856fe:	d029      	beq.n	85754 <Cl_Dlsis_controller+0x3a8>
		{
			
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   85700:	4b91      	ldr	r3, [pc, #580]	; (85948 <Cl_Dlsis_controller+0x59c>)
   85702:	791b      	ldrb	r3, [r3, #4]
   85704:	773b      	strb	r3, [r7, #28]
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   85706:	4b90      	ldr	r3, [pc, #576]	; (85948 <Cl_Dlsis_controller+0x59c>)
   85708:	795b      	ldrb	r3, [r3, #5]
   8570a:	777b      	strb	r3, [r7, #29]
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   8570c:	4b8e      	ldr	r3, [pc, #568]	; (85948 <Cl_Dlsis_controller+0x59c>)
   8570e:	799b      	ldrb	r3, [r3, #6]
   85710:	77bb      	strb	r3, [r7, #30]
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   85712:	4b8d      	ldr	r3, [pc, #564]	; (85948 <Cl_Dlsis_controller+0x59c>)
   85714:	79db      	ldrb	r3, [r3, #7]
   85716:	77fb      	strb	r3, [r7, #31]
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   85718:	8bbb      	ldrh	r3, [r7, #28]
   8571a:	2001      	movs	r0, #1
   8571c:	4619      	mov	r1, r3
   8571e:	4b8b      	ldr	r3, [pc, #556]	; (8594c <Cl_Dlsis_controller+0x5a0>)
   85720:	4798      	blx	r3
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
   85722:	8bbb      	ldrh	r3, [r7, #28]
   85724:	461a      	mov	r2, r3
   85726:	4b8a      	ldr	r3, [pc, #552]	; (85950 <Cl_Dlsis_controller+0x5a4>)
   85728:	65da      	str	r2, [r3, #92]	; 0x5c
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BP_OVERRUN,false );
   8572a:	2036      	movs	r0, #54	; 0x36
   8572c:	2100      	movs	r1, #0
   8572e:	4b89      	ldr	r3, [pc, #548]	; (85954 <Cl_Dlsis_controller+0x5a8>)
   85730:	4798      	blx	r3
   85732:	4603      	mov	r3, r0
   85734:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BP_UNDERRUN,false );
   85738:	2037      	movs	r0, #55	; 0x37
   8573a:	2100      	movs	r1, #0
   8573c:	4b85      	ldr	r3, [pc, #532]	; (85954 <Cl_Dlsis_controller+0x5a8>)
   8573e:	4798      	blx	r3
   85740:	4603      	mov	r3, r0
   85742:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		bpFlag = 0 ;
   85746:	4b84      	ldr	r3, [pc, #528]	; (85958 <Cl_Dlsis_controller+0x5ac>)
   85748:	2200      	movs	r2, #0
   8574a:	601a      	str	r2, [r3, #0]
		bpflagCounter = 0;	
   8574c:	4b83      	ldr	r3, [pc, #524]	; (8595c <Cl_Dlsis_controller+0x5b0>)
   8574e:	2200      	movs	r2, #0
   85750:	601a      	str	r2, [r3, #0]
		}
		break;
   85752:	e05e      	b.n	85812 <Cl_Dlsis_controller+0x466>
   85754:	e05d      	b.n	85812 <Cl_Dlsis_controller+0x466>
		
			case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
			
			if(Treatdata[ID_bloodrate] <= 450){
   85756:	4b7e      	ldr	r3, [pc, #504]	; (85950 <Cl_Dlsis_controller+0x5a4>)
   85758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8575a:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
   8575e:	d828      	bhi.n	857b2 <Cl_Dlsis_controller+0x406>
				
				Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] + 10;
   85760:	4b7b      	ldr	r3, [pc, #492]	; (85950 <Cl_Dlsis_controller+0x5a4>)
   85762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   85764:	330a      	adds	r3, #10
   85766:	4a7a      	ldr	r2, [pc, #488]	; (85950 <Cl_Dlsis_controller+0x5a4>)
   85768:	63d3      	str	r3, [r2, #60]	; 0x3c
				cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   8576a:	4b79      	ldr	r3, [pc, #484]	; (85950 <Cl_Dlsis_controller+0x5a4>)
   8576c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8576e:	2001      	movs	r0, #1
   85770:	4619      	mov	r1, r3
   85772:	4b76      	ldr	r3, [pc, #472]	; (8594c <Cl_Dlsis_controller+0x5a0>)
   85774:	4798      	blx	r3
				
				// send blood rate data to console
				
				
				abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   85776:	230f      	movs	r3, #15
   85778:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
				abfdata.fourbytedata = Treatdata[ID_bloodrate];
   8577c:	4b74      	ldr	r3, [pc, #464]	; (85950 <Cl_Dlsis_controller+0x5a4>)
   8577e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   85780:	633b      	str	r3, [r7, #48]	; 0x30
				abfdataarray[1] = abfdata.bytedata[0];
   85782:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   85786:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				abfdataarray[2] = abfdata.bytedata[1];
   8578a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
   8578e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				abfdataarray[3] = abfdata.bytedata[2];
   85792:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
   85796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				abfdataarray[4] = abfdata.bytedata[3];
   8579a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   8579e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				
				Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   857a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
   857a6:	202a      	movs	r0, #42	; 0x2a
   857a8:	4619      	mov	r1, r3
   857aa:	2205      	movs	r2, #5
   857ac:	4b6c      	ldr	r3, [pc, #432]	; (85960 <Cl_Dlsis_controller+0x5b4>)
   857ae:	4798      	blx	r3
				
			}
			
			cl_dlsis_event == EVENT_NULL_EVENT;
			break;
   857b0:	e02f      	b.n	85812 <Cl_Dlsis_controller+0x466>
   857b2:	e02e      	b.n	85812 <Cl_Dlsis_controller+0x466>
			
			case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
			
			if(Treatdata[ID_bloodrate] >= 100){
   857b4:	4b66      	ldr	r3, [pc, #408]	; (85950 <Cl_Dlsis_controller+0x5a4>)
   857b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   857b8:	2b63      	cmp	r3, #99	; 0x63
   857ba:	d928      	bls.n	8580e <Cl_Dlsis_controller+0x462>
				
				Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] - 10;
   857bc:	4b64      	ldr	r3, [pc, #400]	; (85950 <Cl_Dlsis_controller+0x5a4>)
   857be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   857c0:	3b0a      	subs	r3, #10
   857c2:	4a63      	ldr	r2, [pc, #396]	; (85950 <Cl_Dlsis_controller+0x5a4>)
   857c4:	63d3      	str	r3, [r2, #60]	; 0x3c
				cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   857c6:	4b62      	ldr	r3, [pc, #392]	; (85950 <Cl_Dlsis_controller+0x5a4>)
   857c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   857ca:	2001      	movs	r0, #1
   857cc:	4619      	mov	r1, r3
   857ce:	4b5f      	ldr	r3, [pc, #380]	; (8594c <Cl_Dlsis_controller+0x5a0>)
   857d0:	4798      	blx	r3
				
				
				abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   857d2:	230f      	movs	r3, #15
   857d4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
				abfdata.fourbytedata = Treatdata[ID_bloodrate];
   857d8:	4b5d      	ldr	r3, [pc, #372]	; (85950 <Cl_Dlsis_controller+0x5a4>)
   857da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   857dc:	633b      	str	r3, [r7, #48]	; 0x30
				abfdataarray[1] = abfdata.bytedata[0];
   857de:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   857e2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				abfdataarray[2] = abfdata.bytedata[1];
   857e6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
   857ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				abfdataarray[3] = abfdata.bytedata[2];
   857ee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
   857f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				abfdataarray[4] = abfdata.bytedata[3];
   857f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   857fa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				
				Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   857fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
   85802:	202a      	movs	r0, #42	; 0x2a
   85804:	4619      	mov	r1, r3
   85806:	2205      	movs	r2, #5
   85808:	4b55      	ldr	r3, [pc, #340]	; (85960 <Cl_Dlsis_controller+0x5b4>)
   8580a:	4798      	blx	r3
			}
			
			cl_dlsis_event == EVENT_NULL_EVENT;
			break;
   8580c:	e001      	b.n	85812 <Cl_Dlsis_controller+0x466>
   8580e:	e000      	b.n	85812 <Cl_Dlsis_controller+0x466>
			
		
		
		default:break;
   85810:	bf00      	nop
		
	}
	if(cl_dlsis_event == EVENT_DLSIS_TICK_SECOND)
   85812:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   85816:	2b13      	cmp	r3, #19
   85818:	d115      	bne.n	85846 <Cl_Dlsis_controller+0x49a>
	{

		//Cl_dlsisretcode =  Cl_AlarmResetAlarm( TEMP3_HIGH_THRESHOLD);
		//Cl_dlsisretcode =  Cl_AlarmResetAlarm( TEMP3_LOW_THRESHOLD);
		//Cl_dlsisretcode =  Cl_AlarmResetAlarm( TEMP2_HIGH_THRESHOLD);
		Cl_dlsisretcode =  Cl_AlarmResetAlarm( FLOW_NO_FLOW );
   8581a:	200c      	movs	r0, #12
   8581c:	4b51      	ldr	r3, [pc, #324]	; (85964 <Cl_Dlsis_controller+0x5b8>)
   8581e:	4798      	blx	r3
   85820:	4603      	mov	r3, r0
   85822:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		Cl_dlsisretcode =  Cl_AlarmResetAlarm( FLOW_HIGH_FLOWRATE );
   85826:	200e      	movs	r0, #14
   85828:	4b4e      	ldr	r3, [pc, #312]	; (85964 <Cl_Dlsis_controller+0x5b8>)
   8582a:	4798      	blx	r3
   8582c:	4603      	mov	r3, r0
   8582e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		Cl_dlsisretcode =  Cl_AlarmResetAlarm( FLOW_LOW_FLOWRATE );
   85832:	200d      	movs	r0, #13
   85834:	4b4b      	ldr	r3, [pc, #300]	; (85964 <Cl_Dlsis_controller+0x5b8>)
   85836:	4798      	blx	r3
   85838:	4603      	mov	r3, r0
   8583a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		
		cl_dlsis_state_dummy = cl_dlsis_state;
   8583e:	4b4a      	ldr	r3, [pc, #296]	; (85968 <Cl_Dlsis_controller+0x5bc>)
   85840:	781a      	ldrb	r2, [r3, #0]
   85842:	4b4a      	ldr	r3, [pc, #296]	; (8596c <Cl_Dlsis_controller+0x5c0>)
   85844:	701a      	strb	r2, [r3, #0]
	}


	switch(cl_dlsis_state)
   85846:	4b48      	ldr	r3, [pc, #288]	; (85968 <Cl_Dlsis_controller+0x5bc>)
   85848:	781b      	ldrb	r3, [r3, #0]
   8584a:	2b0a      	cmp	r3, #10
   8584c:	f200 865e 	bhi.w	8650c <Cl_Dlsis_controller+0x1160>
   85850:	a201      	add	r2, pc, #4	; (adr r2, 85858 <Cl_Dlsis_controller+0x4ac>)
   85852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85856:	bf00      	nop
   85858:	00085885 	.word	0x00085885
   8585c:	0008650d 	.word	0x0008650d
   85860:	0008589f 	.word	0x0008589f
   85864:	00085929 	.word	0x00085929
   85868:	00085b8f 	.word	0x00085b8f
   8586c:	00085b6b 	.word	0x00085b6b
   85870:	0008636d 	.word	0x0008636d
   85874:	00086087 	.word	0x00086087
   85878:	00086001 	.word	0x00086001
   8587c:	0008618d 	.word	0x0008618d
   85880:	00086225 	.word	0x00086225
	{

		case CL_DLSIS_STATE_INIT:
		break;
		case CL_DLSIS_STATE_IDLE:
		switch (cl_dlsis_event)
   85884:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   85888:	2b05      	cmp	r3, #5
   8588a:	d002      	beq.n	85892 <Cl_Dlsis_controller+0x4e6>
   8588c:	2b16      	cmp	r3, #22
   8588e:	d003      	beq.n	85898 <Cl_Dlsis_controller+0x4ec>
			break;
			case EVENT_DLSIS_ALARM:
					//Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
			break;
			default:
			break;
   85890:	e003      	b.n	8589a <Cl_Dlsis_controller+0x4ee>
			
			
			break;
			*/
			case EVENT_DLSIS_START_DIALYSIS:
					Cl_Dlsis_StartDialysis();
   85892:	4b37      	ldr	r3, [pc, #220]	; (85970 <Cl_Dlsis_controller+0x5c4>)
   85894:	4798      	blx	r3
			break;
   85896:	e000      	b.n	8589a <Cl_Dlsis_controller+0x4ee>
			case EVENT_DLSIS_ALARM:
					//Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
			break;
   85898:	bf00      	nop
			default:
			break;
		}
		break;
   8589a:	f000 be3a 	b.w	86512 <Cl_Dlsis_controller+0x1166>
		case CL_DLSIS_STATE_WAIT_FOR_TEMP_COND_STABILITY:
		
			switch(cl_dlsis_event)
   8589e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   858a2:	2b06      	cmp	r3, #6
   858a4:	d002      	beq.n	858ac <Cl_Dlsis_controller+0x500>
   858a6:	2b12      	cmp	r3, #18
   858a8:	d008      	beq.n	858bc <Cl_Dlsis_controller+0x510>
						
					}
				break;
				
				
				default:break;
   858aa:	e03b      	b.n	85924 <Cl_Dlsis_controller+0x578>
		
			switch(cl_dlsis_event)
			{
				
				case EVENT_DLSIS_STOP_DIALYSIS:                   // manav02 dialysis stopped changed
				sv_cntrl_enable_bypass();
   858ac:	4b31      	ldr	r3, [pc, #196]	; (85974 <Cl_Dlsis_controller+0x5c8>)
   858ae:	4798      	blx	r3
				Cl_Dlsis_StopDialysis();
   858b0:	4b31      	ldr	r3, [pc, #196]	; (85978 <Cl_Dlsis_controller+0x5cc>)
   858b2:	4798      	blx	r3
				cl_dlsis_state = CL_DLSIS_STATE_STOPPED;
   858b4:	4b2c      	ldr	r3, [pc, #176]	; (85968 <Cl_Dlsis_controller+0x5bc>)
   858b6:	2209      	movs	r2, #9
   858b8:	701a      	strb	r2, [r3, #0]
				break;
   858ba:	e033      	b.n	85924 <Cl_Dlsis_controller+0x578>
				
				case EVENT_DLSIS_TICK_500MS:
				
					
					Cl_Heater_GetHeaterStableStatus(&heater_stable_status);
   858bc:	482f      	ldr	r0, [pc, #188]	; (8597c <Cl_Dlsis_controller+0x5d0>)
   858be:	4b30      	ldr	r3, [pc, #192]	; (85980 <Cl_Dlsis_controller+0x5d4>)
   858c0:	4798      	blx	r3
					Cl_Uint16Type temp = 0;
   858c2:	2300      	movs	r3, #0
   858c4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
					//Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS , &temp);	
				//	if ((heater_stable_status) &&  (temp < 14) && (temp > 13.3))
					if( (temp == 0))
   858c8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
   858cc:	2b00      	cmp	r3, #0
   858ce:	d106      	bne.n	858de <Cl_Dlsis_controller+0x532>
					{
						
					//	sv_cntrl_disable_bypass();
				bypass_flag = 0;
   858d0:	4b2c      	ldr	r3, [pc, #176]	; (85984 <Cl_Dlsis_controller+0x5d8>)
   858d2:	2200      	movs	r2, #0
   858d4:	701a      	strb	r2, [r3, #0]
				cl_dlsis_state = CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT;
   858d6:	4b24      	ldr	r3, [pc, #144]	; (85968 <Cl_Dlsis_controller+0x5bc>)
   858d8:	2203      	movs	r2, #3
   858da:	701a      	strb	r2, [r3, #0]
						 Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);
						sv_cntrl_enable_bypass();
						cl_uf_controller(CL_UF_EVENT_STOP,0);
						
					}
				break;
   858dc:	e021      	b.n	85922 <Cl_Dlsis_controller+0x576>
				bypass_flag = 0;
				cl_dlsis_state = CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT;
				
					}
					else{
						Cl_Uint8Type data[3] ={0, 0};
   858de:	2300      	movs	r3, #0
   858e0:	833b      	strh	r3, [r7, #24]
   858e2:	2300      	movs	r3, #0
   858e4:	76bb      	strb	r3, [r7, #26]
						data[0] = (Cl_Uint8Type)1;
   858e6:	2301      	movs	r3, #1
   858e8:	763b      	strb	r3, [r7, #24]
						data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   858ea:	2301      	movs	r3, #1
   858ec:	767b      	strb	r3, [r7, #25]
						data[2] = (Cl_Uint8Type)CRITICAL;
   858ee:	2302      	movs	r3, #2
   858f0:	76bb      	strb	r3, [r7, #26]
						command = CON_TX_COMMAND_ALERT;
   858f2:	234f      	movs	r3, #79	; 0x4f
   858f4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
						 cl_wait(10);
   858f8:	200a      	movs	r0, #10
   858fa:	4b23      	ldr	r3, [pc, #140]	; (85988 <Cl_Dlsis_controller+0x5dc>)
   858fc:	4798      	blx	r3
						 Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);
   858fe:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
   85902:	f107 0318 	add.w	r3, r7, #24
   85906:	4610      	mov	r0, r2
   85908:	4619      	mov	r1, r3
   8590a:	2203      	movs	r2, #3
   8590c:	4b14      	ldr	r3, [pc, #80]	; (85960 <Cl_Dlsis_controller+0x5b4>)
   8590e:	4798      	blx	r3
   85910:	4603      	mov	r3, r0
   85912:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						sv_cntrl_enable_bypass();
   85916:	4b17      	ldr	r3, [pc, #92]	; (85974 <Cl_Dlsis_controller+0x5c8>)
   85918:	4798      	blx	r3
						cl_uf_controller(CL_UF_EVENT_STOP,0);
   8591a:	2004      	movs	r0, #4
   8591c:	2100      	movs	r1, #0
   8591e:	4b1b      	ldr	r3, [pc, #108]	; (8598c <Cl_Dlsis_controller+0x5e0>)
   85920:	4798      	blx	r3
						
					}
				break;
   85922:	bf00      	nop
				
				
				default:break;
			}

		break;
   85924:	f000 bdf5 	b.w	86512 <Cl_Dlsis_controller+0x1166>
		case CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT:
		
		switch(cl_dlsis_event)
   85928:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   8592c:	2b06      	cmp	r3, #6
   8592e:	d002      	beq.n	85936 <Cl_Dlsis_controller+0x58a>
   85930:	2b12      	cmp	r3, #18
   85932:	d02d      	beq.n	85990 <Cl_Dlsis_controller+0x5e4>
						Cl_Alarm_TriggerAlarm(BLOOD_NOT_DETECTED, 1);               // manav02 added
					}
					
					}
			break;
			default:break;
   85934:	e117      	b.n	85b66 <Cl_Dlsis_controller+0x7ba>
		
		switch(cl_dlsis_event)
		{
			
			case EVENT_DLSIS_STOP_DIALYSIS:                   // manav02 dialysis stopped changed
			sv_cntrl_enable_bypass();
   85936:	4b0f      	ldr	r3, [pc, #60]	; (85974 <Cl_Dlsis_controller+0x5c8>)
   85938:	4798      	blx	r3
			Cl_Dlsis_StopDialysis();
   8593a:	4b0f      	ldr	r3, [pc, #60]	; (85978 <Cl_Dlsis_controller+0x5cc>)
   8593c:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_STOPPED;
   8593e:	4b0a      	ldr	r3, [pc, #40]	; (85968 <Cl_Dlsis_controller+0x5bc>)
   85940:	2209      	movs	r2, #9
   85942:	701a      	strb	r2, [r3, #0]
			break;
   85944:	e10f      	b.n	85b66 <Cl_Dlsis_controller+0x7ba>
   85946:	bf00      	nop
   85948:	200725bc 	.word	0x200725bc
   8594c:	00094325 	.word	0x00094325
   85950:	20072880 	.word	0x20072880
   85954:	00082a35 	.word	0x00082a35
   85958:	20071aa0 	.word	0x20071aa0
   8595c:	20071a9c 	.word	0x20071a9c
   85960:	0009d1e9 	.word	0x0009d1e9
   85964:	00082b25 	.word	0x00082b25
   85968:	20071a48 	.word	0x20071a48
   8596c:	2007287a 	.word	0x2007287a
   85970:	00087b61 	.word	0x00087b61
   85974:	0009b595 	.word	0x0009b595
   85978:	00086e35 	.word	0x00086e35
   8597c:	20071a61 	.word	0x20071a61
   85980:	00089231 	.word	0x00089231
   85984:	20071a66 	.word	0x20071a66
   85988:	0009421d 	.word	0x0009421d
   8598c:	00097499 	.word	0x00097499
			
			case EVENT_DLSIS_TICK_500MS:
					{
						Cl_Uint16Type temp = 0;
   85990:	2300      	movs	r3, #0
   85992:	82fb      	strh	r3, [r7, #22]
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &temp);
   85994:	f107 0316 	add.w	r3, r7, #22
   85998:	200a      	movs	r0, #10
   8599a:	4619      	mov	r1, r3
   8599c:	4ba6      	ldr	r3, [pc, #664]	; (85c38 <Cl_Dlsis_controller+0x88c>)
   8599e:	4798      	blx	r3
					if( temp == 0)  // need to change as per the blood detector status // manav02 changed to 1
   859a0:	8afb      	ldrh	r3, [r7, #22]
   859a2:	2b00      	cmp	r3, #0
   859a4:	f040 80d4 	bne.w	85b50 <Cl_Dlsis_controller+0x7a4>
					{
						
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD_DL",8);
   859a8:	2018      	movs	r0, #24
   859aa:	49a4      	ldr	r1, [pc, #656]	; (85c3c <Cl_Dlsis_controller+0x890>)
   859ac:	2208      	movs	r2, #8
   859ae:	4ba4      	ldr	r3, [pc, #656]	; (85c40 <Cl_Dlsis_controller+0x894>)
   859b0:	4798      	blx	r3

         					Cl_Uint32Type temp1 = Treatdata[ID_heprate];
   859b2:	4ba4      	ldr	r3, [pc, #656]	; (85c44 <Cl_Dlsis_controller+0x898>)
   859b4:	69db      	ldr	r3, [r3, #28]
   859b6:	64bb      	str	r3, [r7, #72]	; 0x48
							cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,temp1);
   859b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   859ba:	200b      	movs	r0, #11
   859bc:	4619      	mov	r1, r3
   859be:	4ba2      	ldr	r3, [pc, #648]	; (85c48 <Cl_Dlsis_controller+0x89c>)
   859c0:	4798      	blx	r3
						
						sv_cntrl_disable_bypass();
   859c2:	4ba2      	ldr	r3, [pc, #648]	; (85c4c <Cl_Dlsis_controller+0x8a0>)
   859c4:	4798      	blx	r3
					//	Cl_Uint32Type temp = Treatdata[ID_ufgoal];
					//	Cl_Uint32Type temptime = Treatdata[ID_treattime]; // added to get the dialysis duration
			
						cl_uf_controller(CL_UF_EVENT_START,0);
   859c6:	2002      	movs	r0, #2
   859c8:	2100      	movs	r1, #0
   859ca:	4ba1      	ldr	r3, [pc, #644]	; (85c50 <Cl_Dlsis_controller+0x8a4>)
   859cc:	4798      	blx	r3
						cl_wait(600);
						cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,3000);
						cl_wait(800);
						cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);*/
			
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   859ce:	2001      	movs	r0, #1
   859d0:	2101      	movs	r1, #1
   859d2:	4ba0      	ldr	r3, [pc, #640]	; (85c54 <Cl_Dlsis_controller+0x8a8>)
   859d4:	4798      	blx	r3
   859d6:	4603      	mov	r3, r0
   859d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
   859dc:	2024      	movs	r0, #36	; 0x24
   859de:	2101      	movs	r1, #1
   859e0:	4b9c      	ldr	r3, [pc, #624]	; (85c54 <Cl_Dlsis_controller+0x8a8>)
   859e2:	4798      	blx	r3
   859e4:	4603      	mov	r3, r0
   859e6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,true );
   859ea:	2023      	movs	r0, #35	; 0x23
   859ec:	2101      	movs	r1, #1
   859ee:	4b99      	ldr	r3, [pc, #612]	; (85c54 <Cl_Dlsis_controller+0x8a8>)
   859f0:	4798      	blx	r3
   859f2:	4603      	mov	r3, r0
   859f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH,true );
   859f8:	2026      	movs	r0, #38	; 0x26
   859fa:	2101      	movs	r1, #1
   859fc:	4b95      	ldr	r3, [pc, #596]	; (85c54 <Cl_Dlsis_controller+0x8a8>)
   859fe:	4798      	blx	r3
   85a00:	4603      	mov	r3, r0
   85a02:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,true );
   85a06:	2025      	movs	r0, #37	; 0x25
   85a08:	2101      	movs	r1, #1
   85a0a:	4b92      	ldr	r3, [pc, #584]	; (85c54 <Cl_Dlsis_controller+0x8a8>)
   85a0c:	4798      	blx	r3
   85a0e:	4603      	mov	r3, r0
   85a10:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   85a14:	2015      	movs	r0, #21
   85a16:	2101      	movs	r1, #1
   85a18:	4b8e      	ldr	r3, [pc, #568]	; (85c54 <Cl_Dlsis_controller+0x8a8>)
   85a1a:	4798      	blx	r3
   85a1c:	4603      	mov	r3, r0
   85a1e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   85a22:	2016      	movs	r0, #22
   85a24:	2101      	movs	r1, #1
   85a26:	4b8b      	ldr	r3, [pc, #556]	; (85c54 <Cl_Dlsis_controller+0x8a8>)
   85a28:	4798      	blx	r3
   85a2a:	4603      	mov	r3, r0
   85a2c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   85a30:	2017      	movs	r0, #23
   85a32:	2101      	movs	r1, #1
   85a34:	4b87      	ldr	r3, [pc, #540]	; (85c54 <Cl_Dlsis_controller+0x8a8>)
   85a36:	4798      	blx	r3
   85a38:	4603      	mov	r3, r0
   85a3a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   85a3e:	2018      	movs	r0, #24
   85a40:	2101      	movs	r1, #1
   85a42:	4b84      	ldr	r3, [pc, #528]	; (85c54 <Cl_Dlsis_controller+0x8a8>)
   85a44:	4798      	blx	r3
   85a46:	4603      	mov	r3, r0
   85a48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,true );
   85a4c:	2027      	movs	r0, #39	; 0x27
   85a4e:	2101      	movs	r1, #1
   85a50:	4b80      	ldr	r3, [pc, #512]	; (85c54 <Cl_Dlsis_controller+0x8a8>)
   85a52:	4798      	blx	r3
   85a54:	4603      	mov	r3, r0
   85a56:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD,true );
   85a5a:	2028      	movs	r0, #40	; 0x28
   85a5c:	2101      	movs	r1, #1
   85a5e:	4b7d      	ldr	r3, [pc, #500]	; (85c54 <Cl_Dlsis_controller+0x8a8>)
   85a60:	4798      	blx	r3
   85a62:	4603      	mov	r3, r0
   85a64:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			//	 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,false );
			//	 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,false);
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );
   85a68:	200c      	movs	r0, #12
   85a6a:	2101      	movs	r1, #1
   85a6c:	4b79      	ldr	r3, [pc, #484]	; (85c54 <Cl_Dlsis_controller+0x8a8>)
   85a6e:	4798      	blx	r3
   85a70:	4603      	mov	r3, r0
   85a72:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   85a76:	200d      	movs	r0, #13
   85a78:	2101      	movs	r1, #1
   85a7a:	4b76      	ldr	r3, [pc, #472]	; (85c54 <Cl_Dlsis_controller+0x8a8>)
   85a7c:	4798      	blx	r3
   85a7e:	4603      	mov	r3, r0
   85a80:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true ); 
   85a84:	200e      	movs	r0, #14
   85a86:	2101      	movs	r1, #1
   85a88:	4b72      	ldr	r3, [pc, #456]	; (85c54 <Cl_Dlsis_controller+0x8a8>)
   85a8a:	4798      	blx	r3
   85a8c:	4603      	mov	r3, r0
   85a8e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,true );
   85a92:	2005      	movs	r0, #5
   85a94:	2101      	movs	r1, #1
   85a96:	4b6f      	ldr	r3, [pc, #444]	; (85c54 <Cl_Dlsis_controller+0x8a8>)
   85a98:	4798      	blx	r3
   85a9a:	4603      	mov	r3, r0
   85a9c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,true );
   85aa0:	2006      	movs	r0, #6
   85aa2:	2101      	movs	r1, #1
   85aa4:	4b6b      	ldr	r3, [pc, #428]	; (85c54 <Cl_Dlsis_controller+0x8a8>)
   85aa6:	4798      	blx	r3
   85aa8:	4603      	mov	r3, r0
   85aaa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   85aae:	2003      	movs	r0, #3
   85ab0:	2100      	movs	r1, #0
   85ab2:	4b68      	ldr	r3, [pc, #416]	; (85c54 <Cl_Dlsis_controller+0x8a8>)
   85ab4:	4798      	blx	r3
   85ab6:	4603      	mov	r3, r0
   85ab8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   85abc:	2004      	movs	r0, #4
   85abe:	2100      	movs	r1, #0
   85ac0:	4b64      	ldr	r3, [pc, #400]	; (85c54 <Cl_Dlsis_controller+0x8a8>)
   85ac2:	4798      	blx	r3
   85ac4:	4603      	mov	r3, r0
   85ac6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
   85aca:	2007      	movs	r0, #7
   85acc:	2101      	movs	r1, #1
   85ace:	4b61      	ldr	r3, [pc, #388]	; (85c54 <Cl_Dlsis_controller+0x8a8>)
   85ad0:	4798      	blx	r3
   85ad2:	4603      	mov	r3, r0
   85ad4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true );
   85ad8:	2008      	movs	r0, #8
   85ada:	2101      	movs	r1, #1
   85adc:	4b5d      	ldr	r3, [pc, #372]	; (85c54 <Cl_Dlsis_controller+0x8a8>)
   85ade:	4798      	blx	r3
   85ae0:	4603      	mov	r3, r0
   85ae2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			//Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false);
   85ae6:	2029      	movs	r0, #41	; 0x29
   85ae8:	2100      	movs	r1, #0
   85aea:	4b5a      	ldr	r3, [pc, #360]	; (85c54 <Cl_Dlsis_controller+0x8a8>)
   85aec:	4798      	blx	r3
   85aee:	4603      	mov	r3, r0
   85af0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   85af4:	202b      	movs	r0, #43	; 0x2b
   85af6:	2100      	movs	r1, #0
   85af8:	4b56      	ldr	r3, [pc, #344]	; (85c54 <Cl_Dlsis_controller+0x8a8>)
   85afa:	4798      	blx	r3
   85afc:	4603      	mov	r3, r0
   85afe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(ACID_IN_CLOSED,true);
   85b02:	202a      	movs	r0, #42	; 0x2a
   85b04:	2101      	movs	r1, #1
   85b06:	4b53      	ldr	r3, [pc, #332]	; (85c54 <Cl_Dlsis_controller+0x8a8>)
   85b08:	4798      	blx	r3
   85b0a:	4603      	mov	r3, r0
   85b0c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BICARB_IN_CLOSED,true );
   85b10:	202c      	movs	r0, #44	; 0x2c
   85b12:	2101      	movs	r1, #1
   85b14:	4b4f      	ldr	r3, [pc, #316]	; (85c54 <Cl_Dlsis_controller+0x8a8>)
   85b16:	4798      	blx	r3
   85b18:	4603      	mov	r3, r0
   85b1a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   85b1e:	2021      	movs	r0, #33	; 0x21
   85b20:	2100      	movs	r1, #0
   85b22:	4b4c      	ldr	r3, [pc, #304]	; (85c54 <Cl_Dlsis_controller+0x8a8>)
   85b24:	4798      	blx	r3
   85b26:	4603      	mov	r3, r0
   85b28:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			//Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLD_EVENT,true );
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
   85b2c:	2013      	movs	r0, #19
   85b2e:	2101      	movs	r1, #1
   85b30:	4b48      	ldr	r3, [pc, #288]	; (85c54 <Cl_Dlsis_controller+0x8a8>)
   85b32:	4798      	blx	r3
   85b34:	4603      	mov	r3, r0
   85b36:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
   85b3a:	2014      	movs	r0, #20
   85b3c:	2101      	movs	r1, #1
   85b3e:	4b45      	ldr	r3, [pc, #276]	; (85c54 <Cl_Dlsis_controller+0x8a8>)
   85b40:	4798      	blx	r3
   85b42:	4603      	mov	r3, r0
   85b44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			
			
						cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS; // added 
   85b48:	4b43      	ldr	r3, [pc, #268]	; (85c58 <Cl_Dlsis_controller+0x8ac>)
   85b4a:	2204      	movs	r2, #4
   85b4c:	701a      	strb	r2, [r3, #0]
						// trigger blood not detected alarm
						Cl_Alarm_TriggerAlarm(BLOOD_NOT_DETECTED, 1);               // manav02 added
					}
					
					}
			break;
   85b4e:	e009      	b.n	85b64 <Cl_Dlsis_controller+0x7b8>
						cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS; // added 
						//cl_dlsis_state = CL_DLSIS_STATE_UF_ACTIVATION; // commented as uf tick second event is under event dialysis tick seconds
					}
					else{
						
						sv_cntrl_enable_bypass();
   85b50:	4b42      	ldr	r3, [pc, #264]	; (85c5c <Cl_Dlsis_controller+0x8b0>)
   85b52:	4798      	blx	r3
						
						cl_uf_controller(CL_UF_EVENT_STOP,0);
   85b54:	2004      	movs	r0, #4
   85b56:	2100      	movs	r1, #0
   85b58:	4b3d      	ldr	r3, [pc, #244]	; (85c50 <Cl_Dlsis_controller+0x8a4>)
   85b5a:	4798      	blx	r3
						
						// trigger blood not detected alarm
						Cl_Alarm_TriggerAlarm(BLOOD_NOT_DETECTED, 1);               // manav02 added
   85b5c:	2040      	movs	r0, #64	; 0x40
   85b5e:	2101      	movs	r1, #1
   85b60:	4b3f      	ldr	r3, [pc, #252]	; (85c60 <Cl_Dlsis_controller+0x8b4>)
   85b62:	4798      	blx	r3
					}
					
					}
			break;
   85b64:	bf00      	nop
			default:break;
		}
		break;
   85b66:	f000 bcd4 	b.w	86512 <Cl_Dlsis_controller+0x1166>
		case CL_DLSIS_STATE_UF_ACTIVATION:
		switch (cl_dlsis_event)
   85b6a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   85b6e:	2b13      	cmp	r3, #19
   85b70:	d000      	beq.n	85b74 <Cl_Dlsis_controller+0x7c8>
			case EVENT_DLSIS_TICK_SECOND:
			Cl_Dlsis_ResetAlertsforReassertion();
			cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
				cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS;
			break;
			default:break;
   85b72:	e00a      	b.n	85b8a <Cl_Dlsis_controller+0x7de>
		case CL_DLSIS_STATE_UF_ACTIVATION:
		switch (cl_dlsis_event)
		{
			
			case EVENT_DLSIS_TICK_SECOND:
			Cl_Dlsis_ResetAlertsforReassertion();
   85b74:	4b3b      	ldr	r3, [pc, #236]	; (85c64 <Cl_Dlsis_controller+0x8b8>)
   85b76:	4798      	blx	r3
			cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
   85b78:	2001      	movs	r0, #1
   85b7a:	f640 11c4 	movw	r1, #2500	; 0x9c4
   85b7e:	4b34      	ldr	r3, [pc, #208]	; (85c50 <Cl_Dlsis_controller+0x8a4>)
   85b80:	4798      	blx	r3
				cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS;
   85b82:	4b35      	ldr	r3, [pc, #212]	; (85c58 <Cl_Dlsis_controller+0x8ac>)
   85b84:	2204      	movs	r2, #4
   85b86:	701a      	strb	r2, [r3, #0]
			break;
   85b88:	bf00      	nop
			default:break;
		}
		
		break;
   85b8a:	f000 bcc2 	b.w	86512 <Cl_Dlsis_controller+0x1166>
		
		case CL_DLSIS_STATE_DIALYSIS:
		switch (cl_dlsis_event)
   85b8e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   85b92:	3b02      	subs	r3, #2
   85b94:	2b25      	cmp	r3, #37	; 0x25
   85b96:	f200 84bb 	bhi.w	86510 <Cl_Dlsis_controller+0x1164>
   85b9a:	a201      	add	r2, pc, #4	; (adr r2, 85ba0 <Cl_Dlsis_controller+0x7f4>)
   85b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85ba0:	00085d9b 	.word	0x00085d9b
   85ba4:	00086511 	.word	0x00086511
   85ba8:	00086511 	.word	0x00086511
   85bac:	00086511 	.word	0x00086511
   85bb0:	00085fa9 	.word	0x00085fa9
   85bb4:	00085fbf 	.word	0x00085fbf
   85bb8:	00085fcb 	.word	0x00085fcb
   85bbc:	00085fd1 	.word	0x00085fd1
   85bc0:	00086511 	.word	0x00086511
   85bc4:	00086511 	.word	0x00086511
   85bc8:	00086511 	.word	0x00086511
   85bcc:	00086511 	.word	0x00086511
   85bd0:	00086511 	.word	0x00086511
   85bd4:	00086511 	.word	0x00086511
   85bd8:	00086511 	.word	0x00086511
   85bdc:	00085ffd 	.word	0x00085ffd
   85be0:	00085de9 	.word	0x00085de9
   85be4:	00085e61 	.word	0x00085e61
   85be8:	00085e13 	.word	0x00085e13
   85bec:	00086511 	.word	0x00086511
   85bf0:	00085fd7 	.word	0x00085fd7
   85bf4:	00085fe3 	.word	0x00085fe3
   85bf8:	00086511 	.word	0x00086511
   85bfc:	00086511 	.word	0x00086511
   85c00:	00086511 	.word	0x00086511
   85c04:	00085ffd 	.word	0x00085ffd
   85c08:	00085ffd 	.word	0x00085ffd
   85c0c:	00086511 	.word	0x00086511
   85c10:	00086511 	.word	0x00086511
   85c14:	00085d8f 	.word	0x00085d8f
   85c18:	00086511 	.word	0x00086511
   85c1c:	00086511 	.word	0x00086511
   85c20:	00086511 	.word	0x00086511
   85c24:	00086511 	.word	0x00086511
   85c28:	00086511 	.word	0x00086511
   85c2c:	00086511 	.word	0x00086511
   85c30:	00085c69 	.word	0x00085c69
   85c34:	00085ced 	.word	0x00085ced
   85c38:	0008fd69 	.word	0x0008fd69
   85c3c:	000aa218 	.word	0x000aa218
   85c40:	0009d1e9 	.word	0x0009d1e9
   85c44:	20072880 	.word	0x20072880
   85c48:	00094b61 	.word	0x00094b61
   85c4c:	0009b5b1 	.word	0x0009b5b1
   85c50:	00097499 	.word	0x00097499
   85c54:	00082a35 	.word	0x00082a35
   85c58:	20071a48 	.word	0x20071a48
   85c5c:	0009b595 	.word	0x0009b595
   85c60:	00082c75 	.word	0x00082c75
   85c64:	000873c1 	.word	0x000873c1
		{

			case EVENT_DLSIS_DIALYSIS_ISOUF_ON:
			
			sv_cntrl_deactivate_valve(VALVE_ID13);
   85c68:	200d      	movs	r0, #13
   85c6a:	4b6c      	ldr	r3, [pc, #432]	; (85e1c <Cl_Dlsis_controller+0xa70>)
   85c6c:	4798      	blx	r3
			sv_cntrl_activate_valve(VALVE_ID14);
   85c6e:	200e      	movs	r0, #14
   85c70:	4b6b      	ldr	r3, [pc, #428]	; (85e20 <Cl_Dlsis_controller+0xa74>)
   85c72:	4798      	blx	r3
			sv_cntrl_deactivate_valve(VALVE_ID15);
   85c74:	200f      	movs	r0, #15
   85c76:	4b69      	ldr	r3, [pc, #420]	; (85e1c <Cl_Dlsis_controller+0xa70>)
   85c78:	4798      	blx	r3
			cl_uf_controller(CL_UF_EVENT_START,0);
   85c7a:	2002      	movs	r0, #2
   85c7c:	2100      	movs	r1, #0
   85c7e:	4b69      	ldr	r3, [pc, #420]	; (85e24 <Cl_Dlsis_controller+0xa78>)
   85c80:	4798      	blx	r3
						
			isouf = true;
   85c82:	4b69      	ldr	r3, [pc, #420]	; (85e28 <Cl_Dlsis_controller+0xa7c>)
   85c84:	2201      	movs	r2, #1
   85c86:	701a      	strb	r2, [r3, #0]
// 				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
// 				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,true);
// 				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,true );
// 				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,true);
// 				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
   85c88:	2018      	movs	r0, #24
   85c8a:	2100      	movs	r1, #0
   85c8c:	4b67      	ldr	r3, [pc, #412]	; (85e2c <Cl_Dlsis_controller+0xa80>)
   85c8e:	4798      	blx	r3
   85c90:	4603      	mov	r3, r0
   85c92:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,false );
   85c96:	2015      	movs	r0, #21
   85c98:	2100      	movs	r1, #0
   85c9a:	4b64      	ldr	r3, [pc, #400]	; (85e2c <Cl_Dlsis_controller+0xa80>)
   85c9c:	4798      	blx	r3
   85c9e:	4603      	mov	r3, r0
   85ca0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,false );
   85ca4:	2016      	movs	r0, #22
   85ca6:	2100      	movs	r1, #0
   85ca8:	4b60      	ldr	r3, [pc, #384]	; (85e2c <Cl_Dlsis_controller+0xa80>)
   85caa:	4798      	blx	r3
   85cac:	4603      	mov	r3, r0
   85cae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD ,false);
   85cb2:	2027      	movs	r0, #39	; 0x27
   85cb4:	2100      	movs	r1, #0
   85cb6:	4b5d      	ldr	r3, [pc, #372]	; (85e2c <Cl_Dlsis_controller+0xa80>)
   85cb8:	4798      	blx	r3
   85cba:	4603      	mov	r3, r0
   85cbc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD ,false);
   85cc0:	2028      	movs	r0, #40	; 0x28
   85cc2:	2100      	movs	r1, #0
   85cc4:	4b59      	ldr	r3, [pc, #356]	; (85e2c <Cl_Dlsis_controller+0xa80>)
   85cc6:	4798      	blx	r3
   85cc8:	4603      	mov	r3, r0
   85cca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TMP_HIGH,false );
   85cce:	2041      	movs	r0, #65	; 0x41
   85cd0:	2100      	movs	r1, #0
   85cd2:	4b56      	ldr	r3, [pc, #344]	; (85e2c <Cl_Dlsis_controller+0xa80>)
   85cd4:	4798      	blx	r3
   85cd6:	4603      	mov	r3, r0
   85cd8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TMP_LOW,false );
   85cdc:	2042      	movs	r0, #66	; 0x42
   85cde:	2100      	movs	r1, #0
   85ce0:	4b52      	ldr	r3, [pc, #328]	; (85e2c <Cl_Dlsis_controller+0xa80>)
   85ce2:	4798      	blx	r3
   85ce4:	4603      	mov	r3, r0
   85ce6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			
			break;
   85cea:	e188      	b.n	85ffe <Cl_Dlsis_controller+0xc52>
			case EVENT_DLSIS_DIALYSIS_ISOUF_OFF:

			sv_cntrl_activate_valve(VALVE_ID13);
   85cec:	200d      	movs	r0, #13
   85cee:	4b4c      	ldr	r3, [pc, #304]	; (85e20 <Cl_Dlsis_controller+0xa74>)
   85cf0:	4798      	blx	r3
			sv_cntrl_activate_valve(VALVE_ID14);
   85cf2:	200e      	movs	r0, #14
   85cf4:	4b4a      	ldr	r3, [pc, #296]	; (85e20 <Cl_Dlsis_controller+0xa74>)
   85cf6:	4798      	blx	r3
			sv_cntrl_deactivate_valve(VALVE_ID15);
   85cf8:	200f      	movs	r0, #15
   85cfa:	4b48      	ldr	r3, [pc, #288]	; (85e1c <Cl_Dlsis_controller+0xa70>)
   85cfc:	4798      	blx	r3
			
			if(ufRemoved >= Treatdata[ID_ufgoal]){
   85cfe:	4b4c      	ldr	r3, [pc, #304]	; (85e30 <Cl_Dlsis_controller+0xa84>)
   85d00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   85d02:	4b4c      	ldr	r3, [pc, #304]	; (85e34 <Cl_Dlsis_controller+0xa88>)
   85d04:	4610      	mov	r0, r2
   85d06:	4798      	blx	r3
   85d08:	4601      	mov	r1, r0
   85d0a:	4b4b      	ldr	r3, [pc, #300]	; (85e38 <Cl_Dlsis_controller+0xa8c>)
   85d0c:	681a      	ldr	r2, [r3, #0]
   85d0e:	4b4b      	ldr	r3, [pc, #300]	; (85e3c <Cl_Dlsis_controller+0xa90>)
   85d10:	4608      	mov	r0, r1
   85d12:	4611      	mov	r1, r2
   85d14:	4798      	blx	r3
   85d16:	4603      	mov	r3, r0
   85d18:	2b00      	cmp	r3, #0
   85d1a:	d003      	beq.n	85d24 <Cl_Dlsis_controller+0x978>
				cl_uf_controller(CL_UF_EVENT_STOP,0);
   85d1c:	2004      	movs	r0, #4
   85d1e:	2100      	movs	r1, #0
   85d20:	4b40      	ldr	r3, [pc, #256]	; (85e24 <Cl_Dlsis_controller+0xa78>)
   85d22:	4798      	blx	r3
				}
			
			isouf = false;
   85d24:	4b40      	ldr	r3, [pc, #256]	; (85e28 <Cl_Dlsis_controller+0xa7c>)
   85d26:	2200      	movs	r2, #0
   85d28:	701a      	strb	r2, [r3, #0]

				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   85d2a:	2018      	movs	r0, #24
   85d2c:	2101      	movs	r1, #1
   85d2e:	4b3f      	ldr	r3, [pc, #252]	; (85e2c <Cl_Dlsis_controller+0xa80>)
   85d30:	4798      	blx	r3
   85d32:	4603      	mov	r3, r0
   85d34:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   85d38:	2015      	movs	r0, #21
   85d3a:	2101      	movs	r1, #1
   85d3c:	4b3b      	ldr	r3, [pc, #236]	; (85e2c <Cl_Dlsis_controller+0xa80>)
   85d3e:	4798      	blx	r3
   85d40:	4603      	mov	r3, r0
   85d42:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   85d46:	2016      	movs	r0, #22
   85d48:	2101      	movs	r1, #1
   85d4a:	4b38      	ldr	r3, [pc, #224]	; (85e2c <Cl_Dlsis_controller+0xa80>)
   85d4c:	4798      	blx	r3
   85d4e:	4603      	mov	r3, r0
   85d50:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD ,true);
   85d54:	2027      	movs	r0, #39	; 0x27
   85d56:	2101      	movs	r1, #1
   85d58:	4b34      	ldr	r3, [pc, #208]	; (85e2c <Cl_Dlsis_controller+0xa80>)
   85d5a:	4798      	blx	r3
   85d5c:	4603      	mov	r3, r0
   85d5e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD ,true);
   85d62:	2028      	movs	r0, #40	; 0x28
   85d64:	2101      	movs	r1, #1
   85d66:	4b31      	ldr	r3, [pc, #196]	; (85e2c <Cl_Dlsis_controller+0xa80>)
   85d68:	4798      	blx	r3
   85d6a:	4603      	mov	r3, r0
   85d6c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TMP_HIGH,true );
   85d70:	2041      	movs	r0, #65	; 0x41
   85d72:	2101      	movs	r1, #1
   85d74:	4b2d      	ldr	r3, [pc, #180]	; (85e2c <Cl_Dlsis_controller+0xa80>)
   85d76:	4798      	blx	r3
   85d78:	4603      	mov	r3, r0
   85d7a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TMP_LOW,true );
   85d7e:	2042      	movs	r0, #66	; 0x42
   85d80:	2101      	movs	r1, #1
   85d82:	4b2a      	ldr	r3, [pc, #168]	; (85e2c <Cl_Dlsis_controller+0xa80>)
   85d84:	4798      	blx	r3
   85d86:	4603      	mov	r3, r0
   85d88:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

			break;			
   85d8c:	e137      	b.n	85ffe <Cl_Dlsis_controller+0xc52>

			case EVENT_DLSIS_COMMAND_SET_BLDPMP_OFF:			
			Cl_Dlsis_PauseDialysis();
   85d8e:	4b2c      	ldr	r3, [pc, #176]	; (85e40 <Cl_Dlsis_controller+0xa94>)
   85d90:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_PAUSED;
   85d92:	4b2c      	ldr	r3, [pc, #176]	; (85e44 <Cl_Dlsis_controller+0xa98>)
   85d94:	2207      	movs	r2, #7
   85d96:	701a      	strb	r2, [r3, #0]
			break;
   85d98:	e131      	b.n	85ffe <Cl_Dlsis_controller+0xc52>
			case EVENT_DLSIS_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   85d9a:	4b2b      	ldr	r3, [pc, #172]	; (85e48 <Cl_Dlsis_controller+0xa9c>)
   85d9c:	7e1b      	ldrb	r3, [r3, #24]
   85d9e:	2b00      	cmp	r3, #0
   85da0:	d021      	beq.n	85de6 <Cl_Dlsis_controller+0xa3a>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   85da2:	4b29      	ldr	r3, [pc, #164]	; (85e48 <Cl_Dlsis_controller+0xa9c>)
   85da4:	791b      	ldrb	r3, [r3, #4]
   85da6:	2b04      	cmp	r3, #4
   85da8:	d000      	beq.n	85dac <Cl_Dlsis_controller+0xa00>
						Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;

						default:
						break;
   85daa:	e01c      	b.n	85de6 <Cl_Dlsis_controller+0xa3a>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   85dac:	2316      	movs	r3, #22
   85dae:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   85db2:	2304      	movs	r3, #4
   85db4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
						Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   85db8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   85dbc:	3301      	adds	r3, #1
   85dbe:	2004      	movs	r0, #4
   85dc0:	4619      	mov	r1, r3
   85dc2:	4b22      	ldr	r3, [pc, #136]	; (85e4c <Cl_Dlsis_controller+0xaa0>)
   85dc4:	4798      	blx	r3
   85dc6:	4603      	mov	r3, r0
   85dc8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   85dcc:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
   85dd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   85dd4:	4610      	mov	r0, r2
   85dd6:	4619      	mov	r1, r3
   85dd8:	2202      	movs	r2, #2
   85dda:	4b1d      	ldr	r3, [pc, #116]	; (85e50 <Cl_Dlsis_controller+0xaa4>)
   85ddc:	4798      	blx	r3
   85dde:	4603      	mov	r3, r0
   85de0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						break;
   85de4:	bf00      	nop

						default:
						break;
					}
				}
			break;
   85de6:	e10a      	b.n	85ffe <Cl_Dlsis_controller+0xc52>
			break;
			
			case EVENT_DLSIS_TICK_500MS:
				//UpdateHeaterControls();
				// check for blood
				Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &temp);
   85de8:	f107 0334 	add.w	r3, r7, #52	; 0x34
   85dec:	200a      	movs	r0, #10
   85dee:	4619      	mov	r1, r3
   85df0:	4b18      	ldr	r3, [pc, #96]	; (85e54 <Cl_Dlsis_controller+0xaa8>)
   85df2:	4798      	blx	r3
				
				if(temp == 0){
   85df4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   85df6:	4b18      	ldr	r3, [pc, #96]	; (85e58 <Cl_Dlsis_controller+0xaac>)
   85df8:	4610      	mov	r0, r2
   85dfa:	f04f 0100 	mov.w	r1, #0
   85dfe:	4798      	blx	r3
   85e00:	4603      	mov	r3, r0
   85e02:	2b00      	cmp	r3, #0
   85e04:	d100      	bne.n	85e08 <Cl_Dlsis_controller+0xa5c>
				Cl_Alarm_TriggerAlarm(BLOOD_NOT_DETECTED,1);	
					
				}
					
				
			break;
   85e06:	e0fa      	b.n	85ffe <Cl_Dlsis_controller+0xc52>
				// check for blood
				Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &temp);
				
				if(temp == 0){
				// raise alarm blood not detected
				Cl_Alarm_TriggerAlarm(BLOOD_NOT_DETECTED,1);	
   85e08:	2040      	movs	r0, #64	; 0x40
   85e0a:	2101      	movs	r1, #1
   85e0c:	4b13      	ldr	r3, [pc, #76]	; (85e5c <Cl_Dlsis_controller+0xab0>)
   85e0e:	4798      	blx	r3
					
				}
					
				
			break;
   85e10:	e0f5      	b.n	85ffe <Cl_Dlsis_controller+0xc52>
			
			case EVENT_DLSIS_TICK_MINUTE:
				cl_uf_controller(CL_UF_EVENT_MINUTE,0);
   85e12:	200a      	movs	r0, #10
   85e14:	2100      	movs	r1, #0
   85e16:	4b03      	ldr	r3, [pc, #12]	; (85e24 <Cl_Dlsis_controller+0xa78>)
   85e18:	4798      	blx	r3
			break;
   85e1a:	e0f0      	b.n	85ffe <Cl_Dlsis_controller+0xc52>
   85e1c:	0009b409 	.word	0x0009b409
   85e20:	0009b3e9 	.word	0x0009b3e9
   85e24:	00097499 	.word	0x00097499
   85e28:	20071c44 	.word	0x20071c44
   85e2c:	00082a35 	.word	0x00082a35
   85e30:	20072880 	.word	0x20072880
   85e34:	000a8255 	.word	0x000a8255
   85e38:	20071c7c 	.word	0x20071c7c
   85e3c:	000a8655 	.word	0x000a8655
   85e40:	00087325 	.word	0x00087325
   85e44:	20071a48 	.word	0x20071a48
   85e48:	200725bc 	.word	0x200725bc
   85e4c:	0009bcdd 	.word	0x0009bcdd
   85e50:	0009d1e9 	.word	0x0009d1e9
   85e54:	0008fd69 	.word	0x0008fd69
   85e58:	000a862d 	.word	0x000a862d
   85e5c:	00082c75 	.word	0x00082c75
			
			case EVENT_DLSIS_TICK_SECOND:
		//	Cl_Dlsis_ResetAlertsforReassertion();
			//	UpdateHeaterControls();
			bpflagCounter++;
   85e60:	4bac      	ldr	r3, [pc, #688]	; (86114 <Cl_Dlsis_controller+0xd68>)
   85e62:	681b      	ldr	r3, [r3, #0]
   85e64:	3301      	adds	r3, #1
   85e66:	4aab      	ldr	r2, [pc, #684]	; (86114 <Cl_Dlsis_controller+0xd68>)
   85e68:	6013      	str	r3, [r2, #0]
			if(bpflagCounter > 120){
   85e6a:	4baa      	ldr	r3, [pc, #680]	; (86114 <Cl_Dlsis_controller+0xd68>)
   85e6c:	681b      	ldr	r3, [r3, #0]
   85e6e:	2b78      	cmp	r3, #120	; 0x78
   85e70:	dd10      	ble.n	85e94 <Cl_Dlsis_controller+0xae8>
				
				bpFlag = 1;
   85e72:	4ba9      	ldr	r3, [pc, #676]	; (86118 <Cl_Dlsis_controller+0xd6c>)
   85e74:	2201      	movs	r2, #1
   85e76:	601a      	str	r2, [r3, #0]
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BP_OVERRUN,true );
   85e78:	2036      	movs	r0, #54	; 0x36
   85e7a:	2101      	movs	r1, #1
   85e7c:	4ba7      	ldr	r3, [pc, #668]	; (8611c <Cl_Dlsis_controller+0xd70>)
   85e7e:	4798      	blx	r3
   85e80:	4603      	mov	r3, r0
   85e82:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BP_UNDERRUN,true );
   85e86:	2037      	movs	r0, #55	; 0x37
   85e88:	2101      	movs	r1, #1
   85e8a:	4ba4      	ldr	r3, [pc, #656]	; (8611c <Cl_Dlsis_controller+0xd70>)
   85e8c:	4798      	blx	r3
   85e8e:	4603      	mov	r3, r0
   85e90:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				
			}
			
			
				cl_hep_controller(CL_HEP_EVENT_SEC_TICK,0);
   85e94:	200f      	movs	r0, #15
   85e96:	2100      	movs	r1, #0
   85e98:	4ba1      	ldr	r3, [pc, #644]	; (86120 <Cl_Dlsis_controller+0xd74>)
   85e9a:	4798      	blx	r3
				Cl_Dlsis_SenddlsisData();
   85e9c:	4ba1      	ldr	r3, [pc, #644]	; (86124 <Cl_Dlsis_controller+0xd78>)
   85e9e:	4798      	blx	r3
				DlsisTime.Cl_dlsissecondscounter++;
   85ea0:	4ba1      	ldr	r3, [pc, #644]	; (86128 <Cl_Dlsis_controller+0xd7c>)
   85ea2:	781b      	ldrb	r3, [r3, #0]
   85ea4:	3301      	adds	r3, #1
   85ea6:	b2da      	uxtb	r2, r3
   85ea8:	4b9f      	ldr	r3, [pc, #636]	; (86128 <Cl_Dlsis_controller+0xd7c>)
   85eaa:	701a      	strb	r2, [r3, #0]
				if ((DlsisTime.Cl_dlsissecondscounter == 10))
   85eac:	4b9e      	ldr	r3, [pc, #632]	; (86128 <Cl_Dlsis_controller+0xd7c>)
   85eae:	781b      	ldrb	r3, [r3, #0]
   85eb0:	2b0a      	cmp	r3, #10
   85eb2:	d101      	bne.n	85eb8 <Cl_Dlsis_controller+0xb0c>
				{
					//sv_cs_setpotvalue(1900);
					//flag_bc =0 ;
					Cl_Dlsis_ResetAlertsforReassertion();
   85eb4:	4b9d      	ldr	r3, [pc, #628]	; (8612c <Cl_Dlsis_controller+0xd80>)
   85eb6:	4798      	blx	r3
				}
				if(DlsisTime.Cl_dlsissecondscounter == 60)
   85eb8:	4b9b      	ldr	r3, [pc, #620]	; (86128 <Cl_Dlsis_controller+0xd7c>)
   85eba:	781b      	ldrb	r3, [r3, #0]
   85ebc:	2b3c      	cmp	r3, #60	; 0x3c
   85ebe:	d13f      	bne.n	85f40 <Cl_Dlsis_controller+0xb94>
				{
					
					Cl_dlsisretcode = Cl_Dlsis_UpdateTimeInfo();
   85ec0:	4b9b      	ldr	r3, [pc, #620]	; (86130 <Cl_Dlsis_controller+0xd84>)
   85ec2:	4798      	blx	r3
   85ec4:	4603      	mov	r3, r0
   85ec6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					DlsisTime.Cl_dlsissecondscounter = 0;
   85eca:	4b97      	ldr	r3, [pc, #604]	; (86128 <Cl_Dlsis_controller+0xd7c>)
   85ecc:	2200      	movs	r2, #0
   85ece:	701a      	strb	r2, [r3, #0]
					DlsisTime.Cl_dlsisMinutescounter++;
   85ed0:	4b95      	ldr	r3, [pc, #596]	; (86128 <Cl_Dlsis_controller+0xd7c>)
   85ed2:	785b      	ldrb	r3, [r3, #1]
   85ed4:	3301      	adds	r3, #1
   85ed6:	b2da      	uxtb	r2, r3
   85ed8:	4b93      	ldr	r3, [pc, #588]	; (86128 <Cl_Dlsis_controller+0xd7c>)
   85eda:	705a      	strb	r2, [r3, #1]
						Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,true);
						Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,true );
						Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,true);
						bypass_flag = 0;*/
					}
                          if (DlsisTime.Cl_dlsisMinutescounter == 1)
   85edc:	4b92      	ldr	r3, [pc, #584]	; (86128 <Cl_Dlsis_controller+0xd7c>)
   85ede:	785b      	ldrb	r3, [r3, #1]
   85ee0:	2b01      	cmp	r3, #1
   85ee2:	d127      	bne.n	85f34 <Cl_Dlsis_controller+0xb88>
								/*Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
								Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,true);
								Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,true );
								Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,true);*/
						
									Cl_Uint16Type temp_ps=0, low_threshold=0, high_threshold=0;
   85ee4:	2300      	movs	r3, #0
   85ee6:	82bb      	strh	r3, [r7, #20]
   85ee8:	2300      	movs	r3, #0
   85eea:	827b      	strh	r3, [r7, #18]
   85eec:	2300      	movs	r3, #0
   85eee:	823b      	strh	r3, [r7, #16]
									temp_ps=apt;
   85ef0:	4b90      	ldr	r3, [pc, #576]	; (86134 <Cl_Dlsis_controller+0xd88>)
   85ef2:	681a      	ldr	r2, [r3, #0]
   85ef4:	4b90      	ldr	r3, [pc, #576]	; (86138 <Cl_Dlsis_controller+0xd8c>)
   85ef6:	4610      	mov	r0, r2
   85ef8:	4798      	blx	r3
   85efa:	4603      	mov	r3, r0
   85efc:	b29b      	uxth	r3, r3
   85efe:	82bb      	strh	r3, [r7, #20]
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT",4);
   85f00:	2018      	movs	r0, #24
   85f02:	498e      	ldr	r1, [pc, #568]	; (8613c <Cl_Dlsis_controller+0xd90>)
   85f04:	2204      	movs	r2, #4
   85f06:	4b8e      	ldr	r3, [pc, #568]	; (86140 <Cl_Dlsis_controller+0xd94>)
   85f08:	4798      	blx	r3
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
   85f0a:	f107 0314 	add.w	r3, r7, #20
   85f0e:	2019      	movs	r0, #25
   85f10:	4619      	mov	r1, r3
   85f12:	2202      	movs	r2, #2
   85f14:	4b8a      	ldr	r3, [pc, #552]	; (86140 <Cl_Dlsis_controller+0xd94>)
   85f16:	4798      	blx	r3
										//Cl_alarmThresholdTable.apt_high_threshold = apt + 50;
										//Cl_alarmThresholdTable.apt_low_threshold = apt - 50;
										//low_threshold = Cl_alarmThresholdTable.apt_low_threshold;
										//high_threshold = Cl_alarmThresholdTable.apt_high_threshold;
						
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&low_threshold,2);
   85f18:	f107 0312 	add.w	r3, r7, #18
   85f1c:	2019      	movs	r0, #25
   85f1e:	4619      	mov	r1, r3
   85f20:	2202      	movs	r2, #2
   85f22:	4b87      	ldr	r3, [pc, #540]	; (86140 <Cl_Dlsis_controller+0xd94>)
   85f24:	4798      	blx	r3
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&high_threshold,2);
   85f26:	f107 0310 	add.w	r3, r7, #16
   85f2a:	2019      	movs	r0, #25
   85f2c:	4619      	mov	r1, r3
   85f2e:	2202      	movs	r2, #2
   85f30:	4b83      	ldr	r3, [pc, #524]	; (86140 <Cl_Dlsis_controller+0xd94>)
   85f32:	4798      	blx	r3
						
										//Cl_alarmThresholdTable.vpt_high_threshold = vpt + 50;
										//Cl_alarmThresholdTable.vpt_low_threshold = vpt - 50;
							}
					DlsisTime.Cl_dlsisTotalMinutescounter++;
   85f34:	4b7c      	ldr	r3, [pc, #496]	; (86128 <Cl_Dlsis_controller+0xd7c>)
   85f36:	78db      	ldrb	r3, [r3, #3]
   85f38:	3301      	adds	r3, #1
   85f3a:	b2da      	uxtb	r2, r3
   85f3c:	4b7a      	ldr	r3, [pc, #488]	; (86128 <Cl_Dlsis_controller+0xd7c>)
   85f3e:	70da      	strb	r2, [r3, #3]
					if (DlsisTime.Cl_dlsisTotalMinutescounter == CL_DLSIS_TIMEOUT_MIN);//Treatdata[ID_treattime])
					{
						//cl_testvirus();
					}
				}
				if(cl_Dlsis_checkforHeparinCompletion() == CL_OK){
   85f40:	4b80      	ldr	r3, [pc, #512]	; (86144 <Cl_Dlsis_controller+0xd98>)
   85f42:	4798      	blx	r3
   85f44:	4603      	mov	r3, r0
   85f46:	2b00      	cmp	r3, #0
   85f48:	d10b      	bne.n	85f62 <Cl_Dlsis_controller+0xbb6>
					
					
					Cl_AlarmActivateAlarms(HP_OVERRUN,false);
   85f4a:	2034      	movs	r0, #52	; 0x34
   85f4c:	2100      	movs	r1, #0
   85f4e:	4b73      	ldr	r3, [pc, #460]	; (8611c <Cl_Dlsis_controller+0xd70>)
   85f50:	4798      	blx	r3
					Cl_AlarmActivateAlarms(HP_UNDERRUN,false);
   85f52:	2035      	movs	r0, #53	; 0x35
   85f54:	2100      	movs	r1, #0
   85f56:	4b71      	ldr	r3, [pc, #452]	; (8611c <Cl_Dlsis_controller+0xd70>)
   85f58:	4798      	blx	r3
					cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
   85f5a:	200d      	movs	r0, #13
   85f5c:	2100      	movs	r1, #0
   85f5e:	4b70      	ldr	r3, [pc, #448]	; (86120 <Cl_Dlsis_controller+0xd74>)
   85f60:	4798      	blx	r3
					
				}
				if(cl_Dlsis_CheckforDialysisCompletion() == CL_OK )
   85f62:	4b79      	ldr	r3, [pc, #484]	; (86148 <Cl_Dlsis_controller+0xd9c>)
   85f64:	4798      	blx	r3
   85f66:	4603      	mov	r3, r0
   85f68:	2b00      	cmp	r3, #0
   85f6a:	d11c      	bne.n	85fa6 <Cl_Dlsis_controller+0xbfa>
				{
					sv_cntrl_setgreenalarm();
   85f6c:	4b77      	ldr	r3, [pc, #476]	; (8614c <Cl_Dlsis_controller+0xda0>)
   85f6e:	4798      	blx	r3
				//	sv_cntrl_deactivatepump(BLOODPUMP);
					Cl_dlsisretcode = cl_Dlsis_notifydacandgotorinsestandby();
   85f70:	4b77      	ldr	r3, [pc, #476]	; (86150 <Cl_Dlsis_controller+0xda4>)
   85f72:	4798      	blx	r3
   85f74:	4603      	mov	r3, r0
   85f76:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					sv_cntrl_poweroffheater();
   85f7a:	4b76      	ldr	r3, [pc, #472]	; (86154 <Cl_Dlsis_controller+0xda8>)
   85f7c:	4798      	blx	r3
					SetHeaterState(CL_HEATER_STATE_OFF);
   85f7e:	2004      	movs	r0, #4
   85f80:	4b75      	ldr	r3, [pc, #468]	; (86158 <Cl_Dlsis_controller+0xdac>)
   85f82:	4798      	blx	r3
					sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   85f84:	2011      	movs	r0, #17
   85f86:	4b75      	ldr	r3, [pc, #468]	; (8615c <Cl_Dlsis_controller+0xdb0>)
   85f88:	4798      	blx	r3
					Cl_DlsisFillingFlowOff();
   85f8a:	4b75      	ldr	r3, [pc, #468]	; (86160 <Cl_Dlsis_controller+0xdb4>)
   85f8c:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_STOP,0);
   85f8e:	2004      	movs	r0, #4
   85f90:	2100      	movs	r1, #0
   85f92:	4b74      	ldr	r3, [pc, #464]	; (86164 <Cl_Dlsis_controller+0xdb8>)
   85f94:	4798      	blx	r3
					cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
   85f96:	200d      	movs	r0, #13
   85f98:	2100      	movs	r1, #0
   85f9a:	4b61      	ldr	r3, [pc, #388]	; (86120 <Cl_Dlsis_controller+0xd74>)
   85f9c:	4798      	blx	r3
					cl_dlsis_state = CL_DLSIS_STATE_POST_DIALYSIS_STANDBY;
   85f9e:	4b72      	ldr	r3, [pc, #456]	; (86168 <Cl_Dlsis_controller+0xdbc>)
   85fa0:	2206      	movs	r2, #6
   85fa2:	701a      	strb	r2, [r3, #0]
				}
			break;
   85fa4:	e02b      	b.n	85ffe <Cl_Dlsis_controller+0xc52>
   85fa6:	e02a      	b.n	85ffe <Cl_Dlsis_controller+0xc52>
			case EVENT_DLSIS_STOP_DIALYSIS:
			Cl_dlsisretcode = sv_cntrl_enable_bypass();
   85fa8:	4b70      	ldr	r3, [pc, #448]	; (8616c <Cl_Dlsis_controller+0xdc0>)
   85faa:	4798      	blx	r3
   85fac:	4603      	mov	r3, r0
   85fae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Cl_Dlsis_StopDialysis();
   85fb2:	4b6f      	ldr	r3, [pc, #444]	; (86170 <Cl_Dlsis_controller+0xdc4>)
   85fb4:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_STOPPED;
   85fb6:	4b6c      	ldr	r3, [pc, #432]	; (86168 <Cl_Dlsis_controller+0xdbc>)
   85fb8:	2209      	movs	r2, #9
   85fba:	701a      	strb	r2, [r3, #0]
			break;
   85fbc:	e01f      	b.n	85ffe <Cl_Dlsis_controller+0xc52>
			case EVENT_DLSIS_PAUSE_DIALYSIS:
			Cl_Dlsis_PauseDialysis();
   85fbe:	4b6d      	ldr	r3, [pc, #436]	; (86174 <Cl_Dlsis_controller+0xdc8>)
   85fc0:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_PAUSED;
   85fc2:	4b69      	ldr	r3, [pc, #420]	; (86168 <Cl_Dlsis_controller+0xdbc>)
   85fc4:	2207      	movs	r2, #7
   85fc6:	701a      	strb	r2, [r3, #0]
			break;
   85fc8:	e019      	b.n	85ffe <Cl_Dlsis_controller+0xc52>
			case EVENT_DLSIS_BYPASS_ON:
			Cl_Dlsis_BypassDialysis();
   85fca:	4b6b      	ldr	r3, [pc, #428]	; (86178 <Cl_Dlsis_controller+0xdcc>)
   85fcc:	4798      	blx	r3
			break;
   85fce:	e016      	b.n	85ffe <Cl_Dlsis_controller+0xc52>
			case EVENT_DLSIS_BYPASS_OFF:
			Cl_Dlsis_BypassOff();
   85fd0:	4b6a      	ldr	r3, [pc, #424]	; (8617c <Cl_Dlsis_controller+0xdd0>)
   85fd2:	4798      	blx	r3
			break;
   85fd4:	e013      	b.n	85ffe <Cl_Dlsis_controller+0xc52>
			case EVENT_DLSIS__MINUF_ON:
			break;
			case EVENT_DLSIS__MINUF_OFF:
			break;
			case EVENT_DLSIS_ALARM:
					Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   85fd6:	4b6a      	ldr	r3, [pc, #424]	; (86180 <Cl_Dlsis_controller+0xdd4>)
   85fd8:	4798      	blx	r3
   85fda:	4603      	mov	r3, r0
   85fdc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			break;
   85fe0:	e00d      	b.n	85ffe <Cl_Dlsis_controller+0xc52>
					//Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
					if(alarmstatus1)
					{
						//Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_CS);
					}
					Cl_Alarm_GetAlarmStatus(TEMP2_HIGH_THRESHOLD,&alarmstatus3);
   85fe2:	f107 0346 	add.w	r3, r7, #70	; 0x46
   85fe6:	2011      	movs	r0, #17
   85fe8:	4619      	mov	r1, r3
   85fea:	4b66      	ldr	r3, [pc, #408]	; (86184 <Cl_Dlsis_controller+0xdd8>)
   85fec:	4798      	blx	r3
					if(alarmstatus3)
					{
						//	UpdateHeaterControls();
					}
			
					Cl_Alarm_GetAlarmStatus(FLOW_HIGH_FLOWRATE,&flowstatus);
   85fee:	f107 0345 	add.w	r3, r7, #69	; 0x45
   85ff2:	200e      	movs	r0, #14
   85ff4:	4619      	mov	r1, r3
   85ff6:	4b63      	ldr	r3, [pc, #396]	; (86184 <Cl_Dlsis_controller+0xdd8>)
   85ff8:	4798      	blx	r3
					//	if(flowstatus)
					//	{
					//		Cl_rinseretcode = sv_cntrl_poweroffheater();
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
					//	}
			break;
   85ffa:	e000      	b.n	85ffe <Cl_Dlsis_controller+0xc52>
// 										}
// 						
// 			break;
			case EVENT_DLSIS_TICK_50MS:
			
			break;
   85ffc:	bf00      	nop
					//	}
			break;


		}
		break;
   85ffe:	e287      	b.n	86510 <Cl_Dlsis_controller+0x1164>
		case CL_DLSIS_STATE_BYPASS:
									switch (cl_dlsis_event)
   86000:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   86004:	3b06      	subs	r3, #6
   86006:	2b10      	cmp	r3, #16
   86008:	d83b      	bhi.n	86082 <Cl_Dlsis_controller+0xcd6>
   8600a:	a201      	add	r2, pc, #4	; (adr r2, 86010 <Cl_Dlsis_controller+0xc64>)
   8600c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86010:	00086073 	.word	0x00086073
   86014:	00086067 	.word	0x00086067
   86018:	00086083 	.word	0x00086083
   8601c:	00086061 	.word	0x00086061
   86020:	00086083 	.word	0x00086083
   86024:	00086083 	.word	0x00086083
   86028:	00086083 	.word	0x00086083
   8602c:	00086083 	.word	0x00086083
   86030:	00086083 	.word	0x00086083
   86034:	00086083 	.word	0x00086083
   86038:	00086083 	.word	0x00086083
   8603c:	00086083 	.word	0x00086083
   86040:	00086083 	.word	0x00086083
   86044:	00086083 	.word	0x00086083
   86048:	00086083 	.word	0x00086083
   8604c:	00086083 	.word	0x00086083
   86050:	00086055 	.word	0x00086055
									{
										case EVENT_DLSIS_ALARM:
										Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   86054:	4b4a      	ldr	r3, [pc, #296]	; (86180 <Cl_Dlsis_controller+0xdd4>)
   86056:	4798      	blx	r3
   86058:	4603      	mov	r3, r0
   8605a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
										break;
   8605e:	e011      	b.n	86084 <Cl_Dlsis_controller+0xcd8>
										case EVENT_DLSIS_BYPASS_OFF:
										Cl_Dlsis_BypassOff();
   86060:	4b46      	ldr	r3, [pc, #280]	; (8617c <Cl_Dlsis_controller+0xdd0>)
   86062:	4798      	blx	r3
										break;
   86064:	e00e      	b.n	86084 <Cl_Dlsis_controller+0xcd8>
										case EVENT_DLSIS_PAUSE_DIALYSIS:
										Cl_Dlsis_PauseDialysis();
   86066:	4b43      	ldr	r3, [pc, #268]	; (86174 <Cl_Dlsis_controller+0xdc8>)
   86068:	4798      	blx	r3
										cl_dlsis_state = CL_DLSIS_STATE_PAUSED;
   8606a:	4b3f      	ldr	r3, [pc, #252]	; (86168 <Cl_Dlsis_controller+0xdbc>)
   8606c:	2207      	movs	r2, #7
   8606e:	701a      	strb	r2, [r3, #0]
										break;
   86070:	e008      	b.n	86084 <Cl_Dlsis_controller+0xcd8>
										case EVENT_DLSIS_STOP_DIALYSIS:                   // manav02 dialysis stopped changed
										sv_cntrl_enable_bypass();
   86072:	4b3e      	ldr	r3, [pc, #248]	; (8616c <Cl_Dlsis_controller+0xdc0>)
   86074:	4798      	blx	r3
										Cl_Dlsis_StopDialysis();
   86076:	4b3e      	ldr	r3, [pc, #248]	; (86170 <Cl_Dlsis_controller+0xdc4>)
   86078:	4798      	blx	r3
										cl_dlsis_state = CL_DLSIS_STATE_STOPPED;
   8607a:	4b3b      	ldr	r3, [pc, #236]	; (86168 <Cl_Dlsis_controller+0xdbc>)
   8607c:	2209      	movs	r2, #9
   8607e:	701a      	strb	r2, [r3, #0]
										break;
   86080:	e000      	b.n	86084 <Cl_Dlsis_controller+0xcd8>
										default:break;
   86082:	bf00      	nop
									}

					
		break;
   86084:	e245      	b.n	86512 <Cl_Dlsis_controller+0x1166>
		
		
		case CL_DLSIS_STATE_PAUSED:
							switch (cl_dlsis_event)
   86086:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   8608a:	3b05      	subs	r3, #5
   8608c:	2b11      	cmp	r3, #17
   8608e:	d83e      	bhi.n	8610e <Cl_Dlsis_controller+0xd62>
   86090:	a201      	add	r2, pc, #4	; (adr r2, 86098 <Cl_Dlsis_controller+0xcec>)
   86092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86096:	bf00      	nop
   86098:	000860e1 	.word	0x000860e1
   8609c:	000860e7 	.word	0x000860e7
   860a0:	0008610f 	.word	0x0008610f
   860a4:	000860fd 	.word	0x000860fd
   860a8:	000860f7 	.word	0x000860f7
   860ac:	0008610f 	.word	0x0008610f
   860b0:	0008610f 	.word	0x0008610f
   860b4:	0008610f 	.word	0x0008610f
   860b8:	0008610f 	.word	0x0008610f
   860bc:	0008610f 	.word	0x0008610f
   860c0:	0008610f 	.word	0x0008610f
   860c4:	0008610f 	.word	0x0008610f
   860c8:	0008610f 	.word	0x0008610f
   860cc:	0008610f 	.word	0x0008610f
   860d0:	0008610f 	.word	0x0008610f
   860d4:	0008610f 	.word	0x0008610f
   860d8:	0008610f 	.word	0x0008610f
   860dc:	00086103 	.word	0x00086103
							{
								case EVENT_DLSIS_START_DIALYSIS:
								Cl_Dlsis_ResumeDialysis();
   860e0:	4b29      	ldr	r3, [pc, #164]	; (86188 <Cl_Dlsis_controller+0xddc>)
   860e2:	4798      	blx	r3
								break;
   860e4:	e014      	b.n	86110 <Cl_Dlsis_controller+0xd64>
								case EVENT_DLSIS_STOP_DIALYSIS:                   // manav02 dialysis stopped changed
								sv_cntrl_enable_bypass();
   860e6:	4b21      	ldr	r3, [pc, #132]	; (8616c <Cl_Dlsis_controller+0xdc0>)
   860e8:	4798      	blx	r3
								Cl_Dlsis_StopDialysis();
   860ea:	4b21      	ldr	r3, [pc, #132]	; (86170 <Cl_Dlsis_controller+0xdc4>)
   860ec:	4798      	blx	r3
								cl_dlsis_state = CL_DLSIS_STATE_STOPPED;
   860ee:	4b1e      	ldr	r3, [pc, #120]	; (86168 <Cl_Dlsis_controller+0xdbc>)
   860f0:	2209      	movs	r2, #9
   860f2:	701a      	strb	r2, [r3, #0]
								break;
   860f4:	e00c      	b.n	86110 <Cl_Dlsis_controller+0xd64>
								case EVENT_DLSIS_BYPASS_OFF:
								Cl_Dlsis_BypassOff();
   860f6:	4b21      	ldr	r3, [pc, #132]	; (8617c <Cl_Dlsis_controller+0xdd0>)
   860f8:	4798      	blx	r3
								break;
   860fa:	e009      	b.n	86110 <Cl_Dlsis_controller+0xd64>
								case EVENT_DLSIS_BYPASS_ON:
								Cl_Dlsis_BypassDialysis();
   860fc:	4b1e      	ldr	r3, [pc, #120]	; (86178 <Cl_Dlsis_controller+0xdcc>)
   860fe:	4798      	blx	r3
								break;
   86100:	e006      	b.n	86110 <Cl_Dlsis_controller+0xd64>
								case EVENT_DLSIS_ALARM:
										Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   86102:	4b1f      	ldr	r3, [pc, #124]	; (86180 <Cl_Dlsis_controller+0xdd4>)
   86104:	4798      	blx	r3
   86106:	4603      	mov	r3, r0
   86108:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
										break;
   8610c:	e000      	b.n	86110 <Cl_Dlsis_controller+0xd64>
								default:break;
   8610e:	bf00      	nop
							}
		
		break;
   86110:	e1ff      	b.n	86512 <Cl_Dlsis_controller+0x1166>
   86112:	bf00      	nop
   86114:	20071a9c 	.word	0x20071a9c
   86118:	20071aa0 	.word	0x20071aa0
   8611c:	00082a35 	.word	0x00082a35
   86120:	00094b61 	.word	0x00094b61
   86124:	000875f9 	.word	0x000875f9
   86128:	2007232c 	.word	0x2007232c
   8612c:	000873c1 	.word	0x000873c1
   86130:	000867d1 	.word	0x000867d1
   86134:	200722a0 	.word	0x200722a0
   86138:	000a86dd 	.word	0x000a86dd
   8613c:	000aa224 	.word	0x000aa224
   86140:	0009d1e9 	.word	0x0009d1e9
   86144:	00086855 	.word	0x00086855
   86148:	00086889 	.word	0x00086889
   8614c:	0009b65d 	.word	0x0009b65d
   86150:	000868bd 	.word	0x000868bd
   86154:	0009b3d5 	.word	0x0009b3d5
   86158:	00089381 	.word	0x00089381
   8615c:	0009b5cd 	.word	0x0009b5cd
   86160:	000873a1 	.word	0x000873a1
   86164:	00097499 	.word	0x00097499
   86168:	20071a48 	.word	0x20071a48
   8616c:	0009b595 	.word	0x0009b595
   86170:	00086e35 	.word	0x00086e35
   86174:	00087325 	.word	0x00087325
   86178:	00086f4d 	.word	0x00086f4d
   8617c:	00087129 	.word	0x00087129
   86180:	00087379 	.word	0x00087379
   86184:	00082c09 	.word	0x00082c09
   86188:	00087bd1 	.word	0x00087bd1
		case CL_DLSIS_STATE_STOPPED:
							switch (cl_dlsis_event)
   8618c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   86190:	2b04      	cmp	r3, #4
   86192:	d004      	beq.n	8619e <Cl_Dlsis_controller+0xdf2>
   86194:	2b24      	cmp	r3, #36	; 0x24
   86196:	d006      	beq.n	861a6 <Cl_Dlsis_controller+0xdfa>
   86198:	2b01      	cmp	r3, #1
   8619a:	d008      	beq.n	861ae <Cl_Dlsis_controller+0xe02>
										
										//cl_temp_recoveredstate();
									}
									break;
								
								default:break;
   8619c:	e041      	b.n	86222 <Cl_Dlsis_controller+0xe76>
							{
// 								case EVENT_DLSIS_START_DIALYSIS:
// 								Cl_Dlsis_StartDialysis();
// 								break;
								case EVENT_DLSIS_START_RINSE:
								Cl_mac_apprequesthandler(MACREQ_POST_DIALYSIS_RINSE_REQ);
   8619e:	2056      	movs	r0, #86	; 0x56
   861a0:	4bb1      	ldr	r3, [pc, #708]	; (86468 <Cl_Dlsis_controller+0x10bc>)
   861a2:	4798      	blx	r3
								break;
   861a4:	e03d      	b.n	86222 <Cl_Dlsis_controller+0xe76>
								case EVENT_DLSIS_ISOUF_START:
								
								//Cl_MacState = MAC_ISOUF;
								Cl_mac_apprequesthandler(MACREQ_POST_DIALYSIS_ISOUF_REQ);
   861a6:	205e      	movs	r0, #94	; 0x5e
   861a8:	4baf      	ldr	r3, [pc, #700]	; (86468 <Cl_Dlsis_controller+0x10bc>)
   861aa:	4798      	blx	r3
								//Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
								
								
								break;
   861ac:	e039      	b.n	86222 <Cl_Dlsis_controller+0xe76>
								
									case EVENT_DLSIS_CLR_ALARM:
									
									if(cl_dlsis_powerfailure == 1){
   861ae:	4baf      	ldr	r3, [pc, #700]	; (8646c <Cl_Dlsis_controller+0x10c0>)
   861b0:	681b      	ldr	r3, [r3, #0]
   861b2:	2b01      	cmp	r3, #1
   861b4:	d11f      	bne.n	861f6 <Cl_Dlsis_controller+0xe4a>
										
										Cl_SysStat_GetSensor_Status_Query(SENSOR_POWER_FAILURE,&dlsis_powerFailSensorData);
   861b6:	2024      	movs	r0, #36	; 0x24
   861b8:	49ad      	ldr	r1, [pc, #692]	; (86470 <Cl_Dlsis_controller+0x10c4>)
   861ba:	4bae      	ldr	r3, [pc, #696]	; (86474 <Cl_Dlsis_controller+0x10c8>)
   861bc:	4798      	blx	r3
										
										if(dlsis_powerFailSensorData == 0){
   861be:	4bac      	ldr	r3, [pc, #688]	; (86470 <Cl_Dlsis_controller+0x10c4>)
   861c0:	881b      	ldrh	r3, [r3, #0]
   861c2:	2b00      	cmp	r3, #0
   861c4:	d12c      	bne.n	86220 <Cl_Dlsis_controller+0xe74>
											
											cl_dlsis_powerfailure = 0;
   861c6:	4ba9      	ldr	r3, [pc, #676]	; (8646c <Cl_Dlsis_controller+0x10c0>)
   861c8:	2200      	movs	r2, #0
   861ca:	601a      	str	r2, [r3, #0]
											command = CON_TX_COMMAND_ALARM_CLEARED;
   861cc:	2351      	movs	r3, #81	; 0x51
   861ce:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
											Cl_SendDatatoconsole(command,&data,0);
   861d2:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
   861d6:	f107 033b 	add.w	r3, r7, #59	; 0x3b
   861da:	4610      	mov	r0, r2
   861dc:	4619      	mov	r1, r3
   861de:	2200      	movs	r2, #0
   861e0:	4ba5      	ldr	r3, [pc, #660]	; (86478 <Cl_Dlsis_controller+0x10cc>)
   861e2:	4798      	blx	r3
											
											Cl_Dlsis_ResetAlertsforReassertion();
   861e4:	4ba5      	ldr	r3, [pc, #660]	; (8647c <Cl_Dlsis_controller+0x10d0>)
   861e6:	4798      	blx	r3
											sv_cntrl_resetredalarm();
   861e8:	4ba5      	ldr	r3, [pc, #660]	; (86480 <Cl_Dlsis_controller+0x10d4>)
   861ea:	4798      	blx	r3
											sv_cntrl_resetyellowalarm();
   861ec:	4ba5      	ldr	r3, [pc, #660]	; (86484 <Cl_Dlsis_controller+0x10d8>)
   861ee:	4798      	blx	r3
											sv_cntrl_nobuzzer();
   861f0:	4ba5      	ldr	r3, [pc, #660]	; (86488 <Cl_Dlsis_controller+0x10dc>)
   861f2:	4798      	blx	r3
										sv_cntrl_resetyellowalarm();
										sv_cntrl_nobuzzer();
										
										//cl_temp_recoveredstate();
									}
									break;
   861f4:	e014      	b.n	86220 <Cl_Dlsis_controller+0xe74>
										
										}
									}
									else{
										
										command = CON_TX_COMMAND_ALARM_CLEARED;
   861f6:	2351      	movs	r3, #81	; 0x51
   861f8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
										Cl_SendDatatoconsole(command,&data,0);
   861fc:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
   86200:	f107 033b 	add.w	r3, r7, #59	; 0x3b
   86204:	4610      	mov	r0, r2
   86206:	4619      	mov	r1, r3
   86208:	2200      	movs	r2, #0
   8620a:	4b9b      	ldr	r3, [pc, #620]	; (86478 <Cl_Dlsis_controller+0x10cc>)
   8620c:	4798      	blx	r3
										
										Cl_Dlsis_ResetAlertsforReassertion();
   8620e:	4b9b      	ldr	r3, [pc, #620]	; (8647c <Cl_Dlsis_controller+0x10d0>)
   86210:	4798      	blx	r3
										sv_cntrl_resetredalarm();
   86212:	4b9b      	ldr	r3, [pc, #620]	; (86480 <Cl_Dlsis_controller+0x10d4>)
   86214:	4798      	blx	r3
										sv_cntrl_resetyellowalarm();
   86216:	4b9b      	ldr	r3, [pc, #620]	; (86484 <Cl_Dlsis_controller+0x10d8>)
   86218:	4798      	blx	r3
										sv_cntrl_nobuzzer();
   8621a:	4b9b      	ldr	r3, [pc, #620]	; (86488 <Cl_Dlsis_controller+0x10dc>)
   8621c:	4798      	blx	r3
										
										//cl_temp_recoveredstate();
									}
									break;
   8621e:	e7ff      	b.n	86220 <Cl_Dlsis_controller+0xe74>
   86220:	bf00      	nop
								
								default:break;
							}
							
		break;
   86222:	e176      	b.n	86512 <Cl_Dlsis_controller+0x1166>

		case CL_DLSIS_STATE_CRITICAL_ALARM:
					switch (cl_dlsis_event)
   86224:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   86228:	3b01      	subs	r3, #1
   8622a:	2b19      	cmp	r3, #25
   8622c:	f200 809c 	bhi.w	86368 <Cl_Dlsis_controller+0xfbc>
   86230:	a201      	add	r2, pc, #4	; (adr r2, 86238 <Cl_Dlsis_controller+0xe8c>)
   86232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86236:	bf00      	nop
   86238:	000862ad 	.word	0x000862ad
   8623c:	00086369 	.word	0x00086369
   86240:	00086369 	.word	0x00086369
   86244:	00086369 	.word	0x00086369
   86248:	000862a1 	.word	0x000862a1
   8624c:	00086359 	.word	0x00086359
   86250:	00086369 	.word	0x00086369
   86254:	0008634d 	.word	0x0008634d
   86258:	00086353 	.word	0x00086353
   8625c:	00086369 	.word	0x00086369
   86260:	00086369 	.word	0x00086369
   86264:	00086369 	.word	0x00086369
   86268:	00086369 	.word	0x00086369
   8626c:	00086369 	.word	0x00086369
   86270:	00086369 	.word	0x00086369
   86274:	00086369 	.word	0x00086369
   86278:	00086369 	.word	0x00086369
   8627c:	00086369 	.word	0x00086369
   86280:	000862a7 	.word	0x000862a7
   86284:	00086369 	.word	0x00086369
   86288:	00086369 	.word	0x00086369
   8628c:	00086341 	.word	0x00086341
   86290:	00086369 	.word	0x00086369
   86294:	00086369 	.word	0x00086369
   86298:	00086369 	.word	0x00086369
   8629c:	00086369 	.word	0x00086369
					{
						case EVENT_DLSIS_START_DIALYSIS:
						Cl_Dlsis_ResumeDialysis();
   862a0:	4b7a      	ldr	r3, [pc, #488]	; (8648c <Cl_Dlsis_controller+0x10e0>)
   862a2:	4798      	blx	r3
						break;
   862a4:	e061      	b.n	8636a <Cl_Dlsis_controller+0xfbe>
// 								}
// 							}
// 						break;
						case EVENT_DLSIS_TICK_SECOND:
						
						Cl_Dlsis_SenddlsisData();
   862a6:	4b7a      	ldr	r3, [pc, #488]	; (86490 <Cl_Dlsis_controller+0x10e4>)
   862a8:	4798      	blx	r3
						/*	if (dlsisalarm != _NO_ALARM)
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
								dlsis_check_alarm(dlsisalarm);
							}*/
						break;
   862aa:	e05e      	b.n	8636a <Cl_Dlsis_controller+0xfbe>
						case EVENT_DLSIS_CLR_ALARM:
						
											if(cl_dlsis_powerfailure == 1){
   862ac:	4b6f      	ldr	r3, [pc, #444]	; (8646c <Cl_Dlsis_controller+0x10c0>)
   862ae:	681b      	ldr	r3, [r3, #0]
   862b0:	2b01      	cmp	r3, #1
   862b2:	d127      	bne.n	86304 <Cl_Dlsis_controller+0xf58>
												
											Cl_SysStat_GetSensor_Status_Query(SENSOR_POWER_FAILURE,&dlsis_powerFailSensorData);
   862b4:	2024      	movs	r0, #36	; 0x24
   862b6:	496e      	ldr	r1, [pc, #440]	; (86470 <Cl_Dlsis_controller+0x10c4>)
   862b8:	4b6e      	ldr	r3, [pc, #440]	; (86474 <Cl_Dlsis_controller+0x10c8>)
   862ba:	4798      	blx	r3
					
								if(dlsis_powerFailSensorData == 0){
   862bc:	4b6c      	ldr	r3, [pc, #432]	; (86470 <Cl_Dlsis_controller+0x10c4>)
   862be:	881b      	ldrh	r3, [r3, #0]
   862c0:	2b00      	cmp	r3, #0
   862c2:	d13c      	bne.n	8633e <Cl_Dlsis_controller+0xf92>
													
													cl_dlsis_powerfailure = 0;
   862c4:	4b69      	ldr	r3, [pc, #420]	; (8646c <Cl_Dlsis_controller+0x10c0>)
   862c6:	2200      	movs	r2, #0
   862c8:	601a      	str	r2, [r3, #0]
													command = CON_TX_COMMAND_ALARM_CLEARED;
   862ca:	2351      	movs	r3, #81	; 0x51
   862cc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
													Cl_SendDatatoconsole(command,&data,0);
   862d0:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
   862d4:	f107 033b 	add.w	r3, r7, #59	; 0x3b
   862d8:	4610      	mov	r0, r2
   862da:	4619      	mov	r1, r3
   862dc:	2200      	movs	r2, #0
   862de:	4b66      	ldr	r3, [pc, #408]	; (86478 <Cl_Dlsis_controller+0x10cc>)
   862e0:	4798      	blx	r3
													
													Cl_Dlsis_ResetAlertsforReassertion();
   862e2:	4b66      	ldr	r3, [pc, #408]	; (8647c <Cl_Dlsis_controller+0x10d0>)
   862e4:	4798      	blx	r3
													sv_cntrl_resetredalarm();
   862e6:	4b66      	ldr	r3, [pc, #408]	; (86480 <Cl_Dlsis_controller+0x10d4>)
   862e8:	4798      	blx	r3
													sv_cntrl_resetyellowalarm();
   862ea:	4b66      	ldr	r3, [pc, #408]	; (86484 <Cl_Dlsis_controller+0x10d8>)
   862ec:	4798      	blx	r3
													sv_cntrl_nobuzzer();
   862ee:	4b66      	ldr	r3, [pc, #408]	; (86488 <Cl_Dlsis_controller+0x10dc>)
   862f0:	4798      	blx	r3
													cl_bp_controller(CL_BP_EVENT_START,0);
   862f2:	2002      	movs	r0, #2
   862f4:	2100      	movs	r1, #0
   862f6:	4b67      	ldr	r3, [pc, #412]	; (86494 <Cl_Dlsis_controller+0x10e8>)
   862f8:	4798      	blx	r3
													sv_cntrl_activatevenousclamp();
   862fa:	4b67      	ldr	r3, [pc, #412]	; (86498 <Cl_Dlsis_controller+0x10ec>)
   862fc:	4798      	blx	r3
													Cl_Dlsis_BypassOff();
   862fe:	4b67      	ldr	r3, [pc, #412]	; (8649c <Cl_Dlsis_controller+0x10f0>)
   86300:	4798      	blx	r3
										cl_bp_controller(CL_BP_EVENT_START,0);
										sv_cntrl_activatevenousclamp();
										Cl_Dlsis_BypassOff();
										//cl_temp_recoveredstate();
											}
						break;
   86302:	e032      	b.n	8636a <Cl_Dlsis_controller+0xfbe>
													Cl_Dlsis_BypassOff();
												}
											}
											else{
						
						command = CON_TX_COMMAND_ALARM_CLEARED;
   86304:	2351      	movs	r3, #81	; 0x51
   86306:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
						Cl_SendDatatoconsole(command,&data,0);
   8630a:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
   8630e:	f107 033b 	add.w	r3, r7, #59	; 0x3b
   86312:	4610      	mov	r0, r2
   86314:	4619      	mov	r1, r3
   86316:	2200      	movs	r2, #0
   86318:	4b57      	ldr	r3, [pc, #348]	; (86478 <Cl_Dlsis_controller+0x10cc>)
   8631a:	4798      	blx	r3
						
						Cl_Dlsis_ResetAlertsforReassertion();
   8631c:	4b57      	ldr	r3, [pc, #348]	; (8647c <Cl_Dlsis_controller+0x10d0>)
   8631e:	4798      	blx	r3
										sv_cntrl_resetredalarm();
   86320:	4b57      	ldr	r3, [pc, #348]	; (86480 <Cl_Dlsis_controller+0x10d4>)
   86322:	4798      	blx	r3
										sv_cntrl_resetyellowalarm();
   86324:	4b57      	ldr	r3, [pc, #348]	; (86484 <Cl_Dlsis_controller+0x10d8>)
   86326:	4798      	blx	r3
										sv_cntrl_nobuzzer();
   86328:	4b57      	ldr	r3, [pc, #348]	; (86488 <Cl_Dlsis_controller+0x10dc>)
   8632a:	4798      	blx	r3
										cl_bp_controller(CL_BP_EVENT_START,0);
   8632c:	2002      	movs	r0, #2
   8632e:	2100      	movs	r1, #0
   86330:	4b58      	ldr	r3, [pc, #352]	; (86494 <Cl_Dlsis_controller+0x10e8>)
   86332:	4798      	blx	r3
										sv_cntrl_activatevenousclamp();
   86334:	4b58      	ldr	r3, [pc, #352]	; (86498 <Cl_Dlsis_controller+0x10ec>)
   86336:	4798      	blx	r3
										Cl_Dlsis_BypassOff();
   86338:	4b58      	ldr	r3, [pc, #352]	; (8649c <Cl_Dlsis_controller+0x10f0>)
   8633a:	4798      	blx	r3
										//cl_temp_recoveredstate();
											}
						break;
   8633c:	e015      	b.n	8636a <Cl_Dlsis_controller+0xfbe>
   8633e:	e014      	b.n	8636a <Cl_Dlsis_controller+0xfbe>
						case EVENT_DLSIS_ALARM:
						Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   86340:	4b57      	ldr	r3, [pc, #348]	; (864a0 <Cl_Dlsis_controller+0x10f4>)
   86342:	4798      	blx	r3
   86344:	4603      	mov	r3, r0
   86346:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						break;
   8634a:	e00e      	b.n	8636a <Cl_Dlsis_controller+0xfbe>
						case EVENT_DLSIS_BYPASS_ON:
						Cl_Dlsis_BypassDialysis();
   8634c:	4b55      	ldr	r3, [pc, #340]	; (864a4 <Cl_Dlsis_controller+0x10f8>)
   8634e:	4798      	blx	r3
						break;
   86350:	e00b      	b.n	8636a <Cl_Dlsis_controller+0xfbe>
						case EVENT_DLSIS_BYPASS_OFF:
						Cl_Dlsis_BypassOff();
   86352:	4b52      	ldr	r3, [pc, #328]	; (8649c <Cl_Dlsis_controller+0x10f0>)
   86354:	4798      	blx	r3
						break;
   86356:	e008      	b.n	8636a <Cl_Dlsis_controller+0xfbe>
						case EVENT_DLSIS_STOP_DIALYSIS:                   // manav02 dialysis stopped changed
						sv_cntrl_enable_bypass();
   86358:	4b53      	ldr	r3, [pc, #332]	; (864a8 <Cl_Dlsis_controller+0x10fc>)
   8635a:	4798      	blx	r3
						Cl_Dlsis_StopDialysis();
   8635c:	4b53      	ldr	r3, [pc, #332]	; (864ac <Cl_Dlsis_controller+0x1100>)
   8635e:	4798      	blx	r3
						cl_dlsis_state = CL_DLSIS_STATE_STOPPED;
   86360:	4b53      	ldr	r3, [pc, #332]	; (864b0 <Cl_Dlsis_controller+0x1104>)
   86362:	2209      	movs	r2, #9
   86364:	701a      	strb	r2, [r3, #0]
						break;
   86366:	e000      	b.n	8636a <Cl_Dlsis_controller+0xfbe>
						
						default:break;
   86368:	bf00      	nop
					}
		break;
   8636a:	e0d2      	b.n	86512 <Cl_Dlsis_controller+0x1166>
		case CL_DLSIS_STATE_POST_DIALYSIS_STANDBY:
				switch(cl_dlsis_event)
   8636c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   86370:	3b02      	subs	r3, #2
   86372:	2b20      	cmp	r3, #32
   86374:	f200 80c8 	bhi.w	86508 <Cl_Dlsis_controller+0x115c>
   86378:	a201      	add	r2, pc, #4	; (adr r2, 86380 <Cl_Dlsis_controller+0xfd4>)
   8637a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8637e:	bf00      	nop
   86380:	00086405 	.word	0x00086405
   86384:	00086509 	.word	0x00086509
   86388:	00086509 	.word	0x00086509
   8638c:	00086509 	.word	0x00086509
   86390:	00086509 	.word	0x00086509
   86394:	00086509 	.word	0x00086509
   86398:	00086509 	.word	0x00086509
   8639c:	00086509 	.word	0x00086509
   863a0:	00086509 	.word	0x00086509
   863a4:	00086509 	.word	0x00086509
   863a8:	00086509 	.word	0x00086509
   863ac:	00086509 	.word	0x00086509
   863b0:	00086509 	.word	0x00086509
   863b4:	00086509 	.word	0x00086509
   863b8:	00086509 	.word	0x00086509
   863bc:	00086509 	.word	0x00086509
   863c0:	00086509 	.word	0x00086509
   863c4:	00086509 	.word	0x00086509
   863c8:	00086509 	.word	0x00086509
   863cc:	00086509 	.word	0x00086509
   863d0:	00086509 	.word	0x00086509
   863d4:	00086509 	.word	0x00086509
   863d8:	00086509 	.word	0x00086509
   863dc:	00086509 	.word	0x00086509
   863e0:	00086509 	.word	0x00086509
   863e4:	00086509 	.word	0x00086509
   863e8:	00086509 	.word	0x00086509
   863ec:	000864d3 	.word	0x000864d3
   863f0:	0008645f 	.word	0x0008645f
   863f4:	000864c9 	.word	0x000864c9
   863f8:	00086405 	.word	0x00086405
   863fc:	00086447 	.word	0x00086447
   86400:	00086455 	.word	0x00086455
						
						case EVENT_DLSIS_GET_DATA:

	
						case EVENT_DLSIS_HEP_RATE:
							if(Cl_ConsoleRxMsg.msgready == true)
   86404:	4b2b      	ldr	r3, [pc, #172]	; (864b4 <Cl_Dlsis_controller+0x1108>)
   86406:	7e1b      	ldrb	r3, [r3, #24]
   86408:	2b00      	cmp	r3, #0
   8640a:	d01b      	beq.n	86444 <Cl_Dlsis_controller+0x1098>
							{
				
								cl_Datastreamtype cl_temp  ;
								cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   8640c:	4b29      	ldr	r3, [pc, #164]	; (864b4 <Cl_Dlsis_controller+0x1108>)
   8640e:	791b      	ldrb	r3, [r3, #4]
   86410:	733b      	strb	r3, [r7, #12]
								cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   86412:	4b28      	ldr	r3, [pc, #160]	; (864b4 <Cl_Dlsis_controller+0x1108>)
   86414:	795b      	ldrb	r3, [r3, #5]
   86416:	737b      	strb	r3, [r7, #13]
								cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   86418:	4b26      	ldr	r3, [pc, #152]	; (864b4 <Cl_Dlsis_controller+0x1108>)
   8641a:	799b      	ldrb	r3, [r3, #6]
   8641c:	73bb      	strb	r3, [r7, #14]
								cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   8641e:	4b25      	ldr	r3, [pc, #148]	; (864b4 <Cl_Dlsis_controller+0x1108>)
   86420:	79db      	ldrb	r3, [r3, #7]
   86422:	73fb      	strb	r3, [r7, #15]
								Treatdata[ID_heprate] = cl_temp.Twobyte;
   86424:	89bb      	ldrh	r3, [r7, #12]
   86426:	461a      	mov	r2, r3
   86428:	4b23      	ldr	r3, [pc, #140]	; (864b8 <Cl_Dlsis_controller+0x110c>)
   8642a:	61da      	str	r2, [r3, #28]
								hep_calibration(Treatdata[ID_heprate]);
   8642c:	4b22      	ldr	r3, [pc, #136]	; (864b8 <Cl_Dlsis_controller+0x110c>)
   8642e:	69db      	ldr	r3, [r3, #28]
   86430:	4618      	mov	r0, r3
   86432:	4b22      	ldr	r3, [pc, #136]	; (864bc <Cl_Dlsis_controller+0x1110>)
   86434:	4798      	blx	r3
								cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,hep_speed);
   86436:	4b22      	ldr	r3, [pc, #136]	; (864c0 <Cl_Dlsis_controller+0x1114>)
   86438:	681b      	ldr	r3, [r3, #0]
   8643a:	2006      	movs	r0, #6
   8643c:	4619      	mov	r1, r3
   8643e:	4b21      	ldr	r3, [pc, #132]	; (864c4 <Cl_Dlsis_controller+0x1118>)
   86440:	4798      	blx	r3
							}
						break;
   86442:	e062      	b.n	8650a <Cl_Dlsis_controller+0x115e>
   86444:	e061      	b.n	8650a <Cl_Dlsis_controller+0x115e>
						case EVENT_DLSIS_HEP_ON:
							cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,hep_speed);
   86446:	4b1e      	ldr	r3, [pc, #120]	; (864c0 <Cl_Dlsis_controller+0x1114>)
   86448:	681b      	ldr	r3, [r3, #0]
   8644a:	200b      	movs	r0, #11
   8644c:	4619      	mov	r1, r3
   8644e:	4b1d      	ldr	r3, [pc, #116]	; (864c4 <Cl_Dlsis_controller+0x1118>)
   86450:	4798      	blx	r3
						break;
   86452:	e05a      	b.n	8650a <Cl_Dlsis_controller+0x115e>
						case EVENT_DLSIS_HEP_OFF:
							cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
   86454:	2009      	movs	r0, #9
   86456:	2100      	movs	r1, #0
   86458:	4b1a      	ldr	r3, [pc, #104]	; (864c4 <Cl_Dlsis_controller+0x1118>)
   8645a:	4798      	blx	r3
						break;
   8645c:	e055      	b.n	8650a <Cl_Dlsis_controller+0x115e>
						case EVENT_DLSIS_COMMAND_SET_BLDPMP_ON:
						cl_bp_controller(CL_BP_EVENT_START,0);
   8645e:	2002      	movs	r0, #2
   86460:	2100      	movs	r1, #0
   86462:	4b0c      	ldr	r3, [pc, #48]	; (86494 <Cl_Dlsis_controller+0x10e8>)
   86464:	4798      	blx	r3
						break;
   86466:	e050      	b.n	8650a <Cl_Dlsis_controller+0x115e>
   86468:	0008bbb9 	.word	0x0008bbb9
   8646c:	20071a94 	.word	0x20071a94
   86470:	20071a98 	.word	0x20071a98
   86474:	0008fd69 	.word	0x0008fd69
   86478:	0009d1e9 	.word	0x0009d1e9
   8647c:	000873c1 	.word	0x000873c1
   86480:	0009b685 	.word	0x0009b685
   86484:	0009b699 	.word	0x0009b699
   86488:	0009b6c1 	.word	0x0009b6c1
   8648c:	00087bd1 	.word	0x00087bd1
   86490:	000875f9 	.word	0x000875f9
   86494:	00094325 	.word	0x00094325
   86498:	0009b535 	.word	0x0009b535
   8649c:	00087129 	.word	0x00087129
   864a0:	00087379 	.word	0x00087379
   864a4:	00086f4d 	.word	0x00086f4d
   864a8:	0009b595 	.word	0x0009b595
   864ac:	00086e35 	.word	0x00086e35
   864b0:	20071a48 	.word	0x20071a48
   864b4:	200725bc 	.word	0x200725bc
   864b8:	20072880 	.word	0x20072880
   864bc:	00083cc1 	.word	0x00083cc1
   864c0:	20072318 	.word	0x20072318
   864c4:	00094b61 	.word	0x00094b61
						case EVENT_DLSIS_COMMAND_SET_BLDPMP_OFF:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   864c8:	2004      	movs	r0, #4
   864ca:	2100      	movs	r1, #0
   864cc:	4b13      	ldr	r3, [pc, #76]	; (8651c <Cl_Dlsis_controller+0x1170>)
   864ce:	4798      	blx	r3
						break;
   864d0:	e01b      	b.n	8650a <Cl_Dlsis_controller+0x115e>
						case EVENT_DLSIS_COMMAND_SET_BLDPUMPRATE:
						if(Cl_ConsoleRxMsg.msgready == true)
   864d2:	4b13      	ldr	r3, [pc, #76]	; (86520 <Cl_Dlsis_controller+0x1174>)
   864d4:	7e1b      	ldrb	r3, [r3, #24]
   864d6:	2b00      	cmp	r3, #0
   864d8:	d015      	beq.n	86506 <Cl_Dlsis_controller+0x115a>
						{
			
							cl_Datastreamtype cl_temp  ;
							cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   864da:	4b11      	ldr	r3, [pc, #68]	; (86520 <Cl_Dlsis_controller+0x1174>)
   864dc:	791b      	ldrb	r3, [r3, #4]
   864de:	723b      	strb	r3, [r7, #8]
							cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   864e0:	4b0f      	ldr	r3, [pc, #60]	; (86520 <Cl_Dlsis_controller+0x1174>)
   864e2:	795b      	ldrb	r3, [r3, #5]
   864e4:	727b      	strb	r3, [r7, #9]
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   864e6:	4b0e      	ldr	r3, [pc, #56]	; (86520 <Cl_Dlsis_controller+0x1174>)
   864e8:	799b      	ldrb	r3, [r3, #6]
   864ea:	72bb      	strb	r3, [r7, #10]
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   864ec:	4b0c      	ldr	r3, [pc, #48]	; (86520 <Cl_Dlsis_controller+0x1174>)
   864ee:	79db      	ldrb	r3, [r3, #7]
   864f0:	72fb      	strb	r3, [r7, #11]
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   864f2:	893b      	ldrh	r3, [r7, #8]
   864f4:	2001      	movs	r0, #1
   864f6:	4619      	mov	r1, r3
   864f8:	4b08      	ldr	r3, [pc, #32]	; (8651c <Cl_Dlsis_controller+0x1170>)
   864fa:	4798      	blx	r3
							Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
   864fc:	893b      	ldrh	r3, [r7, #8]
   864fe:	461a      	mov	r2, r3
   86500:	4b08      	ldr	r3, [pc, #32]	; (86524 <Cl_Dlsis_controller+0x1178>)
   86502:	65da      	str	r2, [r3, #92]	; 0x5c
						}
						break;
   86504:	e001      	b.n	8650a <Cl_Dlsis_controller+0x115e>
   86506:	e000      	b.n	8650a <Cl_Dlsis_controller+0x115e>
// 										
// 										}
// 			
// 						break;
						default:
						break;
   86508:	bf00      	nop
					}
		break;
   8650a:	e002      	b.n	86512 <Cl_Dlsis_controller+0x1166>
		default:break;
   8650c:	bf00      	nop
   8650e:	e000      	b.n	86512 <Cl_Dlsis_controller+0x1166>
					//	}
			break;


		}
		break;
   86510:	bf00      	nop
		default:break;
	}



return CL_OK;
   86512:	2300      	movs	r3, #0
}
   86514:	4618      	mov	r0, r3
   86516:	3758      	adds	r7, #88	; 0x58
   86518:	46bd      	mov	sp, r7
   8651a:	bd80      	pop	{r7, pc}
   8651c:	00094325 	.word	0x00094325
   86520:	200725bc 	.word	0x200725bc
   86524:	20072880 	.word	0x20072880

00086528 <cl_dlsis_translatemacevent>:
	}
return CL_OK;
}

Cl_ReturnCodeType  cl_dlsis_translatemacevent(Cl_Mac_EventsType Cl_MacRinseEvt,Cl_Dlsis_Eevents* cl_dlsis_event)
{
   86528:	b480      	push	{r7}
   8652a:	b083      	sub	sp, #12
   8652c:	af00      	add	r7, sp, #0
   8652e:	4603      	mov	r3, r0
   86530:	6039      	str	r1, [r7, #0]
   86532:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacRinseEvt)
   86534:	79fb      	ldrb	r3, [r7, #7]
   86536:	3b07      	subs	r3, #7
   86538:	2b5a      	cmp	r3, #90	; 0x5a
   8653a:	f200 8141 	bhi.w	867c0 <cl_dlsis_translatemacevent+0x298>
   8653e:	a201      	add	r2, pc, #4	; (adr r2, 86544 <cl_dlsis_translatemacevent+0x1c>)
   86540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86544:	000866e1 	.word	0x000866e1
   86548:	000867c1 	.word	0x000867c1
   8654c:	000867c1 	.word	0x000867c1
   86550:	000866c1 	.word	0x000866c1
   86554:	000866c9 	.word	0x000866c9
   86558:	000866b9 	.word	0x000866b9
   8655c:	000866d9 	.word	0x000866d9
   86560:	000866d1 	.word	0x000866d1
   86564:	000867c1 	.word	0x000867c1
   86568:	000867c1 	.word	0x000867c1
   8656c:	000867c1 	.word	0x000867c1
   86570:	000867c1 	.word	0x000867c1
   86574:	000867c1 	.word	0x000867c1
   86578:	000867c1 	.word	0x000867c1
   8657c:	00086771 	.word	0x00086771
   86580:	000867c1 	.word	0x000867c1
   86584:	000866e9 	.word	0x000866e9
   86588:	000866f1 	.word	0x000866f1
   8658c:	000866f9 	.word	0x000866f9
   86590:	00086701 	.word	0x00086701
   86594:	00086709 	.word	0x00086709
   86598:	000867c1 	.word	0x000867c1
   8659c:	000867c1 	.word	0x000867c1
   865a0:	000867c1 	.word	0x000867c1
   865a4:	000867c1 	.word	0x000867c1
   865a8:	000867c1 	.word	0x000867c1
   865ac:	00086749 	.word	0x00086749
   865b0:	00086751 	.word	0x00086751
   865b4:	00086759 	.word	0x00086759
   865b8:	00086761 	.word	0x00086761
   865bc:	00086769 	.word	0x00086769
   865c0:	00086799 	.word	0x00086799
   865c4:	00086779 	.word	0x00086779
   865c8:	00086781 	.word	0x00086781
   865cc:	000866b1 	.word	0x000866b1
   865d0:	000867c1 	.word	0x000867c1
   865d4:	000867c1 	.word	0x000867c1
   865d8:	000867c1 	.word	0x000867c1
   865dc:	00086741 	.word	0x00086741
   865e0:	00086739 	.word	0x00086739
   865e4:	000867c1 	.word	0x000867c1
   865e8:	000867c1 	.word	0x000867c1
   865ec:	000867c1 	.word	0x000867c1
   865f0:	000867c1 	.word	0x000867c1
   865f4:	000867c1 	.word	0x000867c1
   865f8:	000867c1 	.word	0x000867c1
   865fc:	000867c1 	.word	0x000867c1
   86600:	000867c1 	.word	0x000867c1
   86604:	000867c1 	.word	0x000867c1
   86608:	00086711 	.word	0x00086711
   8660c:	000867c1 	.word	0x000867c1
   86610:	00086719 	.word	0x00086719
   86614:	00086721 	.word	0x00086721
   86618:	00086729 	.word	0x00086729
   8661c:	00086731 	.word	0x00086731
   86620:	000867c1 	.word	0x000867c1
   86624:	000867c1 	.word	0x000867c1
   86628:	000867c1 	.word	0x000867c1
   8662c:	000867c1 	.word	0x000867c1
   86630:	000867c1 	.word	0x000867c1
   86634:	000867c1 	.word	0x000867c1
   86638:	000867c1 	.word	0x000867c1
   8663c:	000867c1 	.word	0x000867c1
   86640:	000867c1 	.word	0x000867c1
   86644:	000867c1 	.word	0x000867c1
   86648:	000867c1 	.word	0x000867c1
   8664c:	000867c1 	.word	0x000867c1
   86650:	000867c1 	.word	0x000867c1
   86654:	000867c1 	.word	0x000867c1
   86658:	000867c1 	.word	0x000867c1
   8665c:	000867c1 	.word	0x000867c1
   86660:	000867c1 	.word	0x000867c1
   86664:	000867c1 	.word	0x000867c1
   86668:	000867c1 	.word	0x000867c1
   8666c:	000867c1 	.word	0x000867c1
   86670:	000867c1 	.word	0x000867c1
   86674:	000867c1 	.word	0x000867c1
   86678:	000867c1 	.word	0x000867c1
   8667c:	000867c1 	.word	0x000867c1
   86680:	000867c1 	.word	0x000867c1
   86684:	000867c1 	.word	0x000867c1
   86688:	000867a1 	.word	0x000867a1
   8668c:	000867c1 	.word	0x000867c1
   86690:	000867c1 	.word	0x000867c1
   86694:	00086789 	.word	0x00086789
   86698:	00086791 	.word	0x00086791
   8669c:	000867c1 	.word	0x000867c1
   866a0:	000867c1 	.word	0x000867c1
   866a4:	000867a9 	.word	0x000867a9
   866a8:	000867b1 	.word	0x000867b1
   866ac:	000867b9 	.word	0x000867b9
	{
		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_dlsis_event = EVENT_DLSIS_CLR_ALARM;	
   866b0:	683b      	ldr	r3, [r7, #0]
   866b2:	2201      	movs	r2, #1
   866b4:	701a      	strb	r2, [r3, #0]
		break;
   866b6:	e084      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case 	EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_dlsis_event = EVENT_DLSIS_COMMAND_SET_BLDPUMPRATE;
   866b8:	683b      	ldr	r3, [r7, #0]
   866ba:	221d      	movs	r2, #29
   866bc:	701a      	strb	r2, [r3, #0]
		break;
   866be:	e080      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_dlsis_event = EVENT_DLSIS_COMMAND_SET_BLDPMP_ON;
   866c0:	683b      	ldr	r3, [r7, #0]
   866c2:	221e      	movs	r2, #30
   866c4:	701a      	strb	r2, [r3, #0]
		break;
   866c6:	e07c      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_dlsis_event = EVENT_DLSIS_COMMAND_SET_BLDPMP_OFF;
   866c8:	683b      	ldr	r3, [r7, #0]
   866ca:	221f      	movs	r2, #31
   866cc:	701a      	strb	r2, [r3, #0]
		break;
   866ce:	e078      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
	
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_dlsis_event = EVENT_DLSIS_GET_DATA;
   866d0:	683b      	ldr	r3, [r7, #0]
   866d2:	2202      	movs	r2, #2
   866d4:	701a      	strb	r2, [r3, #0]
		break;
   866d6:	e074      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_dlsis_event = EVENT_DLSIS_SET_DATA;
   866d8:	683b      	ldr	r3, [r7, #0]
   866da:	2203      	movs	r2, #3
   866dc:	701a      	strb	r2, [r3, #0]
		break;
   866de:	e070      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_dlsis_event= EVENT_DLSIS_START_RINSE;
   866e0:	683b      	ldr	r3, [r7, #0]
   866e2:	2204      	movs	r2, #4
   866e4:	701a      	strb	r2, [r3, #0]
		break;
   866e6:	e06c      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case  EVT_CONSOLE_COMMAND_DIALYSIS_START:
		*cl_dlsis_event= EVENT_DLSIS_START_DIALYSIS;
   866e8:	683b      	ldr	r3, [r7, #0]
   866ea:	2205      	movs	r2, #5
   866ec:	701a      	strb	r2, [r3, #0]
		break;
   866ee:	e068      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_DIALYSIS_STOP:
		*cl_dlsis_event= EVENT_DLSIS_STOP_DIALYSIS;
   866f0:	683b      	ldr	r3, [r7, #0]
   866f2:	2206      	movs	r2, #6
   866f4:	701a      	strb	r2, [r3, #0]
		break;
   866f6:	e064      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_DIALYSIS_PAUSE:
		*cl_dlsis_event= EVENT_DLSIS_PAUSE_DIALYSIS;
   866f8:	683b      	ldr	r3, [r7, #0]
   866fa:	2207      	movs	r2, #7
   866fc:	701a      	strb	r2, [r3, #0]
		break;
   866fe:	e060      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_BYPASS_ON:
		*cl_dlsis_event= EVENT_DLSIS_BYPASS_ON;
   86700:	683b      	ldr	r3, [r7, #0]
   86702:	2208      	movs	r2, #8
   86704:	701a      	strb	r2, [r3, #0]
		break;
   86706:	e05c      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_BYPASS_OFF:
		*cl_dlsis_event= EVENT_DLSIS_BYPASS_OFF;
   86708:	683b      	ldr	r3, [r7, #0]
   8670a:	2209      	movs	r2, #9
   8670c:	701a      	strb	r2, [r3, #0]
		break;
   8670e:	e058      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case  EVT_TIMER_EXPIRED:
		
		break;
		case EVT_TICK_50M:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_50MS;
   86710:	683b      	ldr	r3, [r7, #0]
   86712:	2211      	movs	r2, #17
   86714:	701a      	strb	r2, [r3, #0]
		break;
   86716:	e054      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case EVT_TICK_500M:
		*cl_dlsis_event = EVENT_DLSIS_TICK_500MS;
   86718:	683b      	ldr	r3, [r7, #0]
   8671a:	2212      	movs	r2, #18
   8671c:	701a      	strb	r2, [r3, #0]
		break;
   8671e:	e050      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case EVT_TICK_SEC:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_SECOND;
   86720:	683b      	ldr	r3, [r7, #0]
   86722:	2213      	movs	r2, #19
   86724:	701a      	strb	r2, [r3, #0]
		break;
   86726:	e04c      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case EVT_TICK_MIN:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_MINUTE;
   86728:	683b      	ldr	r3, [r7, #0]
   8672a:	2214      	movs	r2, #20
   8672c:	701a      	strb	r2, [r3, #0]
		break;
   8672e:	e048      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case EVT_TICK_HOUR:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_HOUR;
   86730:	683b      	ldr	r3, [r7, #0]
   86732:	2215      	movs	r2, #21
   86734:	701a      	strb	r2, [r3, #0]
		break;
   86736:	e044      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case EVT_ALARM_TRIGGERED:
		*cl_dlsis_event =   EVENT_DLSIS_ALARM;		
   86738:	683b      	ldr	r3, [r7, #0]
   8673a:	2216      	movs	r2, #22
   8673c:	701a      	strb	r2, [r3, #0]
		break;
   8673e:	e040      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case EVT_ALERT_TRIGGERED:
		*cl_dlsis_event =   EVENT_DLSIS_ALERT;
   86740:	683b      	ldr	r3, [r7, #0]
   86742:	2217      	movs	r2, #23
   86744:	701a      	strb	r2, [r3, #0]
		break;
   86746:	e03c      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_PATIENT_READY:
		
			*cl_dlsis_event =   EVENT_DLSIS__START_RETURN;
   86748:	683b      	ldr	r3, [r7, #0]
   8674a:	2219      	movs	r2, #25
   8674c:	701a      	strb	r2, [r3, #0]

		break;
   8674e:	e038      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_START_RETURN:
			*cl_dlsis_event =   EVENT_DLSIS__STOP_RETURN;
   86750:	683b      	ldr	r3, [r7, #0]
   86752:	221a      	movs	r2, #26
   86754:	701a      	strb	r2, [r3, #0]
		break;
   86756:	e034      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_STOP_RETURN:
			*cl_dlsis_event =   EVENT_DLSIS__STOP_RETURN;
   86758:	683b      	ldr	r3, [r7, #0]
   8675a:	221a      	movs	r2, #26
   8675c:	701a      	strb	r2, [r3, #0]
		break;
   8675e:	e030      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_MINUF_ON:
			*cl_dlsis_event =   EVENT_DLSIS__MINUF_ON;
   86760:	683b      	ldr	r3, [r7, #0]
   86762:	221b      	movs	r2, #27
   86764:	701a      	strb	r2, [r3, #0]
		break;
   86766:	e02c      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_MINUF_OFF:
			*cl_dlsis_event =   EVENT_DLSIS__MINUF_OFF;
   86768:	683b      	ldr	r3, [r7, #0]
   8676a:	221c      	movs	r2, #28
   8676c:	701a      	strb	r2, [r3, #0]
		break;
   8676e:	e028      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_HEP_PMP_RATE:
		*cl_dlsis_event =   EVENT_DLSIS_HEP_RATE;
   86770:	683b      	ldr	r3, [r7, #0]
   86772:	2220      	movs	r2, #32
   86774:	701a      	strb	r2, [r3, #0]
		break;
   86776:	e024      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_HEPARIN_START:
		*cl_dlsis_event =   EVENT_DLSIS_HEP_ON;
   86778:	683b      	ldr	r3, [r7, #0]
   8677a:	2221      	movs	r2, #33	; 0x21
   8677c:	701a      	strb	r2, [r3, #0]
		break;
   8677e:	e020      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
		*cl_dlsis_event =   EVENT_DLSIS_HEP_OFF;
   86780:	683b      	ldr	r3, [r7, #0]
   86782:	2222      	movs	r2, #34	; 0x22
   86784:	701a      	strb	r2, [r3, #0]
		break;
   86786:	e01c      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		*cl_dlsis_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL;
   86788:	683b      	ldr	r3, [r7, #0]
   8678a:	225b      	movs	r2, #91	; 0x5b
   8678c:	701a      	strb	r2, [r3, #0]
		break;
   8678e:	e018      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		*cl_dlsis_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL;
   86790:	683b      	ldr	r3, [r7, #0]
   86792:	225c      	movs	r2, #92	; 0x5c
   86794:	701a      	strb	r2, [r3, #0]
		break;
   86796:	e014      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case 	EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
		*cl_dlsis_event = EVENT_DLSIS_HEAPARIN_BOLUS;
   86798:	683b      	ldr	r3, [r7, #0]
   8679a:	2223      	movs	r2, #35	; 0x23
   8679c:	701a      	strb	r2, [r3, #0]
		break;
   8679e:	e010      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_ISOUF_START:
		*cl_dlsis_event = EVENT_DLSIS_ISOUF_START;
   867a0:	683b      	ldr	r3, [r7, #0]
   867a2:	2224      	movs	r2, #36	; 0x24
   867a4:	701a      	strb	r2, [r3, #0]
		break;
   867a6:	e00c      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_MUTE_ALARM:
		*cl_dlsis_event = EVENT_DLSIS_MUTE;
   867a8:	683b      	ldr	r3, [r7, #0]
   867aa:	2225      	movs	r2, #37	; 0x25
   867ac:	701a      	strb	r2, [r3, #0]
		break;
   867ae:	e008      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_DIALYSIS_ISOUF_ON :
		*cl_dlsis_event = EVENT_DLSIS_DIALYSIS_ISOUF_ON;
   867b0:	683b      	ldr	r3, [r7, #0]
   867b2:	2226      	movs	r2, #38	; 0x26
   867b4:	701a      	strb	r2, [r3, #0]
		break;	
   867b6:	e004      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_DIALYSIS_ISOUF_OFF :
		*cl_dlsis_event = EVENT_DLSIS_DIALYSIS_ISOUF_OFF;
   867b8:	683b      	ldr	r3, [r7, #0]
   867ba:	2227      	movs	r2, #39	; 0x27
   867bc:	701a      	strb	r2, [r3, #0]
		break;	
   867be:	e000      	b.n	867c2 <cl_dlsis_translatemacevent+0x29a>
		default:
		
		break;
   867c0:	bf00      	nop
	}
	return CL_OK;
   867c2:	2300      	movs	r3, #0
}
   867c4:	4618      	mov	r0, r3
   867c6:	370c      	adds	r7, #12
   867c8:	46bd      	mov	sp, r7
   867ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   867ce:	4770      	bx	lr

000867d0 <Cl_Dlsis_UpdateTimeInfo>:



Cl_ReturnCodeType Cl_Dlsis_UpdateTimeInfo(void)
{
   867d0:	b580      	push	{r7, lr}
   867d2:	b084      	sub	sp, #16
   867d4:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType Cl_dlsisretcode = CL_ERROR;
   867d6:	2304      	movs	r3, #4
   867d8:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   867da:	2359      	movs	r3, #89	; 0x59
   867dc:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0 ,0,0};
   867de:	1d3b      	adds	r3, r7, #4
   867e0:	2200      	movs	r2, #0
   867e2:	601a      	str	r2, [r3, #0]
   867e4:	3304      	adds	r3, #4
   867e6:	2200      	movs	r2, #0
   867e8:	801a      	strh	r2, [r3, #0]
   867ea:	3302      	adds	r3, #2
   867ec:	2200      	movs	r2, #0
   867ee:	701a      	strb	r2, [r3, #0]
   867f0:	3301      	adds	r3, #1
	
	command = CON_TX_COMMAND_REM_TIME;
   867f2:	230a      	movs	r3, #10
   867f4:	73bb      	strb	r3, [r7, #14]
	data[0] = (Cl_Uint8Type) DIALYSIS_DATA;
   867f6:	2305      	movs	r3, #5
   867f8:	713b      	strb	r3, [r7, #4]
	data[1]= (Cl_Uint8Type)DlsisTime.Cl_dlsisTotalMinutescounter;
   867fa:	4b14      	ldr	r3, [pc, #80]	; (8684c <Cl_Dlsis_UpdateTimeInfo+0x7c>)
   867fc:	78db      	ldrb	r3, [r3, #3]
   867fe:	717b      	strb	r3, [r7, #5]
	data[2]= (Cl_Uint8Type)DlsisTime.Cl_dlsisTotalhourscounter;
   86800:	4b12      	ldr	r3, [pc, #72]	; (8684c <Cl_Dlsis_UpdateTimeInfo+0x7c>)
   86802:	791b      	ldrb	r3, [r3, #4]
   86804:	71bb      	strb	r3, [r7, #6]
	data[3]= (Cl_Uint8Type)DlsisTime.Cl_dlsissecondscounter;
   86806:	4b11      	ldr	r3, [pc, #68]	; (8684c <Cl_Dlsis_UpdateTimeInfo+0x7c>)
   86808:	781b      	ldrb	r3, [r3, #0]
   8680a:	71fb      	strb	r3, [r7, #7]
	data[4]= (Cl_Uint8Type) (CL_DLSIS_TIMEOUT_MIN - DlsisTime.Cl_dlsisTotalMinutescounter );
   8680c:	4b0f      	ldr	r3, [pc, #60]	; (8684c <Cl_Dlsis_UpdateTimeInfo+0x7c>)
   8680e:	78da      	ldrb	r2, [r3, #3]
   86810:	f06f 030f 	mvn.w	r3, #15
   86814:	1a9b      	subs	r3, r3, r2
   86816:	b2db      	uxtb	r3, r3
   86818:	723b      	strb	r3, [r7, #8]
	data[5]= (Cl_Uint8Type) (CL_DLSIS_TIMEOUT_HRS - DlsisTime.Cl_dlsisTotalhourscounter );
   8681a:	4b0c      	ldr	r3, [pc, #48]	; (8684c <Cl_Dlsis_UpdateTimeInfo+0x7c>)
   8681c:	791b      	ldrb	r3, [r3, #4]
   8681e:	425b      	negs	r3, r3
   86820:	b2db      	uxtb	r3, r3
   86822:	727b      	strb	r3, [r7, #9]
	data[6]= (Cl_Uint8Type) (60 - DlsisTime.Cl_dlsissecondscounter );
   86824:	4b09      	ldr	r3, [pc, #36]	; (8684c <Cl_Dlsis_UpdateTimeInfo+0x7c>)
   86826:	781b      	ldrb	r3, [r3, #0]
   86828:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   8682c:	b2db      	uxtb	r3, r3
   8682e:	72bb      	strb	r3, [r7, #10]
	
	Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,7);
   86830:	7bba      	ldrb	r2, [r7, #14]
   86832:	1d3b      	adds	r3, r7, #4
   86834:	4610      	mov	r0, r2
   86836:	4619      	mov	r1, r3
   86838:	2207      	movs	r2, #7
   8683a:	4b05      	ldr	r3, [pc, #20]	; (86850 <Cl_Dlsis_UpdateTimeInfo+0x80>)
   8683c:	4798      	blx	r3
   8683e:	4603      	mov	r3, r0
   86840:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   86842:	2300      	movs	r3, #0
	}
   86844:	4618      	mov	r0, r3
   86846:	3710      	adds	r7, #16
   86848:	46bd      	mov	sp, r7
   8684a:	bd80      	pop	{r7, pc}
   8684c:	2007232c 	.word	0x2007232c
   86850:	0009d1e9 	.word	0x0009d1e9

00086854 <cl_Dlsis_checkforHeparinCompletion>:
	
Cl_ReturnCodeType cl_Dlsis_checkforHeparinCompletion(void){
   86854:	b480      	push	{r7}
   86856:	b083      	sub	sp, #12
   86858:	af00      	add	r7, sp, #0
		
		
		 Cl_ReturnCodeType Cl_dlsisretcode = CL_ERROR;
   8685a:	2304      	movs	r3, #4
   8685c:	71fb      	strb	r3, [r7, #7]
		 
		 if(DlsisTime.Cl_dlsisTotalMinutescounter > (Treatdata[ID_treattime] - 60) )
   8685e:	4b08      	ldr	r3, [pc, #32]	; (86880 <cl_Dlsis_checkforHeparinCompletion+0x2c>)
   86860:	78db      	ldrb	r3, [r3, #3]
   86862:	461a      	mov	r2, r3
   86864:	4b07      	ldr	r3, [pc, #28]	; (86884 <cl_Dlsis_checkforHeparinCompletion+0x30>)
   86866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   86868:	3b3c      	subs	r3, #60	; 0x3c
   8686a:	429a      	cmp	r2, r3
   8686c:	d901      	bls.n	86872 <cl_Dlsis_checkforHeparinCompletion+0x1e>
		 {
			 
			 Cl_dlsisretcode = CL_OK;
   8686e:	2300      	movs	r3, #0
   86870:	71fb      	strb	r3, [r7, #7]
		 }
		 
		 return (Cl_dlsisretcode);
   86872:	79fb      	ldrb	r3, [r7, #7]
		
	}
   86874:	4618      	mov	r0, r3
   86876:	370c      	adds	r7, #12
   86878:	46bd      	mov	sp, r7
   8687a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8687e:	4770      	bx	lr
   86880:	2007232c 	.word	0x2007232c
   86884:	20072880 	.word	0x20072880

00086888 <cl_Dlsis_CheckforDialysisCompletion>:
	
	
	 Cl_ReturnCodeType cl_Dlsis_CheckforDialysisCompletion(void)
	 {
   86888:	b480      	push	{r7}
   8688a:	b083      	sub	sp, #12
   8688c:	af00      	add	r7, sp, #0
		 Cl_ReturnCodeType Cl_dlsisretcode = CL_ERROR;
   8688e:	2304      	movs	r3, #4
   86890:	71fb      	strb	r3, [r7, #7]
		 
		 if(DlsisTime.Cl_dlsisTotalMinutescounter > Treatdata[ID_treattime] )
   86892:	4b08      	ldr	r3, [pc, #32]	; (868b4 <cl_Dlsis_CheckforDialysisCompletion+0x2c>)
   86894:	78db      	ldrb	r3, [r3, #3]
   86896:	461a      	mov	r2, r3
   86898:	4b07      	ldr	r3, [pc, #28]	; (868b8 <cl_Dlsis_CheckforDialysisCompletion+0x30>)
   8689a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   8689c:	429a      	cmp	r2, r3
   8689e:	d901      	bls.n	868a4 <cl_Dlsis_CheckforDialysisCompletion+0x1c>
		 {
			 
			 Cl_dlsisretcode = CL_OK;
   868a0:	2300      	movs	r3, #0
   868a2:	71fb      	strb	r3, [r7, #7]
		 }
		 
		 return (Cl_dlsisretcode);
   868a4:	79fb      	ldrb	r3, [r7, #7]
		 
	 }
   868a6:	4618      	mov	r0, r3
   868a8:	370c      	adds	r7, #12
   868aa:	46bd      	mov	sp, r7
   868ac:	f85d 7b04 	ldr.w	r7, [sp], #4
   868b0:	4770      	bx	lr
   868b2:	bf00      	nop
   868b4:	2007232c 	.word	0x2007232c
   868b8:	20072880 	.word	0x20072880

000868bc <cl_Dlsis_notifydacandgotorinsestandby>:
	
	Cl_ReturnCodeType cl_Dlsis_notifydacandgotorinsestandby(void)
	{
   868bc:	b580      	push	{r7, lr}
   868be:	b082      	sub	sp, #8
   868c0:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   868c2:	2300      	movs	r3, #0
   868c4:	71fb      	strb	r3, [r7, #7]
		
		Cl_Uint8Type data =0;
   868c6:	2300      	movs	r3, #0
   868c8:	71bb      	strb	r3, [r7, #6]
		//inform DAC about rinse completed state.
		DlsisTime.Cl_dlsissecondscounter = 0;
   868ca:	4b10      	ldr	r3, [pc, #64]	; (8690c <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   868cc:	2200      	movs	r2, #0
   868ce:	701a      	strb	r2, [r3, #0]
		DlsisTime.Cl_dlsisMinutescounter= 0;
   868d0:	4b0e      	ldr	r3, [pc, #56]	; (8690c <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   868d2:	2200      	movs	r2, #0
   868d4:	705a      	strb	r2, [r3, #1]
		DlsisTime.Cl_dlsishourscounter= 0;
   868d6:	4b0d      	ldr	r3, [pc, #52]	; (8690c <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   868d8:	2200      	movs	r2, #0
   868da:	709a      	strb	r2, [r3, #2]
		DlsisTime.Cl_dlsisTotalMinutescounter= 0;
   868dc:	4b0b      	ldr	r3, [pc, #44]	; (8690c <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   868de:	2200      	movs	r2, #0
   868e0:	70da      	strb	r2, [r3, #3]
		DlsisTime.Cl_dlsisTotalhourscounter=0;
   868e2:	4b0a      	ldr	r3, [pc, #40]	; (8690c <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   868e4:	2200      	movs	r2, #0
   868e6:	711a      	strb	r2, [r3, #4]
		
		
		Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYS_COMPLTED,&data,0);
   868e8:	1dbb      	adds	r3, r7, #6
   868ea:	2015      	movs	r0, #21
   868ec:	4619      	mov	r1, r3
   868ee:	2200      	movs	r2, #0
   868f0:	4b07      	ldr	r3, [pc, #28]	; (86910 <cl_Dlsis_notifydacandgotorinsestandby+0x54>)
   868f2:	4798      	blx	r3
   868f4:	4603      	mov	r3, r0
   868f6:	71fb      	strb	r3, [r7, #7]
		Cl_dlsisretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSIS_COMPLETED);
   868f8:	2050      	movs	r0, #80	; 0x50
   868fa:	4b06      	ldr	r3, [pc, #24]	; (86914 <cl_Dlsis_notifydacandgotorinsestandby+0x58>)
   868fc:	4798      	blx	r3
   868fe:	4603      	mov	r3, r0
   86900:	71fb      	strb	r3, [r7, #7]
		
		return Cl_dlsisretcode;
   86902:	79fb      	ldrb	r3, [r7, #7]
	}
   86904:	4618      	mov	r0, r3
   86906:	3708      	adds	r7, #8
   86908:	46bd      	mov	sp, r7
   8690a:	bd80      	pop	{r7, pc}
   8690c:	2007232c 	.word	0x2007232c
   86910:	0009d1e9 	.word	0x0009d1e9
   86914:	0008bbb9 	.word	0x0008bbb9

00086918 <Cl_Dlsis_UpdateAlarmTable>:
	
	
Cl_ReturnCodeType Cl_Dlsis_UpdateAlarmTable(ClDlsisAlarmIdType * ClRinseAlarmId )
{
   86918:	b580      	push	{r7, lr}
   8691a:	b084      	sub	sp, #16
   8691c:	af00      	add	r7, sp, #0
   8691e:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   86920:	2300      	movs	r3, #0
   86922:	73fb      	strb	r3, [r7, #15]
			Cl_NewAlarmIdType cl_alarmId;
	Cl_Uint8Type tempcount = 0;
   86924:	2300      	movs	r3, #0
   86926:	73bb      	strb	r3, [r7, #14]
			Cl_Uint8Type data[2];
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   86928:	2359      	movs	r3, #89	; 0x59
   8692a:	737b      	strb	r3, [r7, #13]
	
	for (tempcount = 0 ; tempcount < CL_DLSIS_ALRM_MAX ; tempcount++)
   8692c:	2300      	movs	r3, #0
   8692e:	73bb      	strb	r3, [r7, #14]
   86930:	e065      	b.n	869fe <Cl_Dlsis_UpdateAlarmTable+0xe6>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId,&Cl_DlsisAlarmTable[tempcount].IsActive);
   86932:	7bba      	ldrb	r2, [r7, #14]
   86934:	4936      	ldr	r1, [pc, #216]	; (86a10 <Cl_Dlsis_UpdateAlarmTable+0xf8>)
   86936:	4613      	mov	r3, r2
   86938:	00db      	lsls	r3, r3, #3
   8693a:	1a9b      	subs	r3, r3, r2
   8693c:	440b      	add	r3, r1
   8693e:	7819      	ldrb	r1, [r3, #0]
   86940:	7bba      	ldrb	r2, [r7, #14]
   86942:	4613      	mov	r3, r2
   86944:	00db      	lsls	r3, r3, #3
   86946:	1a9b      	subs	r3, r3, r2
   86948:	4a31      	ldr	r2, [pc, #196]	; (86a10 <Cl_Dlsis_UpdateAlarmTable+0xf8>)
   8694a:	4413      	add	r3, r2
   8694c:	3302      	adds	r3, #2
   8694e:	4608      	mov	r0, r1
   86950:	4619      	mov	r1, r3
   86952:	4b30      	ldr	r3, [pc, #192]	; (86a14 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   86954:	4798      	blx	r3
		if (Cl_DlsisAlarmTable[tempcount].IsActive)
   86956:	7bba      	ldrb	r2, [r7, #14]
   86958:	492d      	ldr	r1, [pc, #180]	; (86a10 <Cl_Dlsis_UpdateAlarmTable+0xf8>)
   8695a:	4613      	mov	r3, r2
   8695c:	00db      	lsls	r3, r3, #3
   8695e:	1a9b      	subs	r3, r3, r2
   86960:	440b      	add	r3, r1
   86962:	789b      	ldrb	r3, [r3, #2]
   86964:	2b00      	cmp	r3, #0
   86966:	d020      	beq.n	869aa <Cl_Dlsis_UpdateAlarmTable+0x92>
		{
			if(!Cl_DlsisAlarmTable[tempcount].IsRaised)
   86968:	7bba      	ldrb	r2, [r7, #14]
   8696a:	4929      	ldr	r1, [pc, #164]	; (86a10 <Cl_Dlsis_UpdateAlarmTable+0xf8>)
   8696c:	4613      	mov	r3, r2
   8696e:	00db      	lsls	r3, r3, #3
   86970:	1a9b      	subs	r3, r3, r2
   86972:	440b      	add	r3, r1
   86974:	78db      	ldrb	r3, [r3, #3]
   86976:	f083 0301 	eor.w	r3, r3, #1
   8697a:	b2db      	uxtb	r3, r3
   8697c:	2b00      	cmp	r3, #0
   8697e:	d03b      	beq.n	869f8 <Cl_Dlsis_UpdateAlarmTable+0xe0>
				//	data[0] = (Cl_Uint8Type)Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId;
				//	data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
				//	data[1] = (Cl_Uint8Type) CRITICAL;
				//	command = CON_TX_COMMAND_ALARM;
				//	Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);
					Cl_DlsisAlarmTable[tempcount].IsRaised = true;
   86980:	7bba      	ldrb	r2, [r7, #14]
   86982:	4923      	ldr	r1, [pc, #140]	; (86a10 <Cl_Dlsis_UpdateAlarmTable+0xf8>)
   86984:	4613      	mov	r3, r2
   86986:	00db      	lsls	r3, r3, #3
   86988:	1a9b      	subs	r3, r3, r2
   8698a:	440b      	add	r3, r1
   8698c:	2201      	movs	r2, #1
   8698e:	70da      	strb	r2, [r3, #3]
					Cl_dlsisretcode = CL_DlsisAlarmActon(Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId);
   86990:	7bba      	ldrb	r2, [r7, #14]
   86992:	491f      	ldr	r1, [pc, #124]	; (86a10 <Cl_Dlsis_UpdateAlarmTable+0xf8>)
   86994:	4613      	mov	r3, r2
   86996:	00db      	lsls	r3, r3, #3
   86998:	1a9b      	subs	r3, r3, r2
   8699a:	440b      	add	r3, r1
   8699c:	781b      	ldrb	r3, [r3, #0]
   8699e:	4618      	mov	r0, r3
   869a0:	4b1d      	ldr	r3, [pc, #116]	; (86a18 <Cl_Dlsis_UpdateAlarmTable+0x100>)
   869a2:	4798      	blx	r3
   869a4:	4603      	mov	r3, r0
   869a6:	73fb      	strb	r3, [r7, #15]
   869a8:	e026      	b.n	869f8 <Cl_Dlsis_UpdateAlarmTable+0xe0>
			
		}
		else
			{
				// alarm was present before , but not active now.
				if(Cl_DlsisAlarmTable[tempcount].IsRaised == true)
   869aa:	7bba      	ldrb	r2, [r7, #14]
   869ac:	4918      	ldr	r1, [pc, #96]	; (86a10 <Cl_Dlsis_UpdateAlarmTable+0xf8>)
   869ae:	4613      	mov	r3, r2
   869b0:	00db      	lsls	r3, r3, #3
   869b2:	1a9b      	subs	r3, r3, r2
   869b4:	440b      	add	r3, r1
   869b6:	78db      	ldrb	r3, [r3, #3]
   869b8:	2b00      	cmp	r3, #0
   869ba:	d01d      	beq.n	869f8 <Cl_Dlsis_UpdateAlarmTable+0xe0>
				{
					Cl_DlsisAlarmTable[tempcount].IsRaised = false;
   869bc:	7bba      	ldrb	r2, [r7, #14]
   869be:	4914      	ldr	r1, [pc, #80]	; (86a10 <Cl_Dlsis_UpdateAlarmTable+0xf8>)
   869c0:	4613      	mov	r3, r2
   869c2:	00db      	lsls	r3, r3, #3
   869c4:	1a9b      	subs	r3, r3, r2
   869c6:	440b      	add	r3, r1
   869c8:	2200      	movs	r2, #0
   869ca:	70da      	strb	r2, [r3, #3]
					command = CON_TX_COMMAND_ALARM;
   869cc:	2307      	movs	r3, #7
   869ce:	737b      	strb	r3, [r7, #13]
					data[0] = (Cl_Uint8Type)(Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId);
   869d0:	7bba      	ldrb	r2, [r7, #14]
   869d2:	490f      	ldr	r1, [pc, #60]	; (86a10 <Cl_Dlsis_UpdateAlarmTable+0xf8>)
   869d4:	4613      	mov	r3, r2
   869d6:	00db      	lsls	r3, r3, #3
   869d8:	1a9b      	subs	r3, r3, r2
   869da:	440b      	add	r3, r1
   869dc:	781b      	ldrb	r3, [r3, #0]
   869de:	723b      	strb	r3, [r7, #8]
					data[1] = (Cl_Uint8Type) 0;
   869e0:	2300      	movs	r3, #0
   869e2:	727b      	strb	r3, [r7, #9]
					Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,2);
   869e4:	7b7a      	ldrb	r2, [r7, #13]
   869e6:	f107 0308 	add.w	r3, r7, #8
   869ea:	4610      	mov	r0, r2
   869ec:	4619      	mov	r1, r3
   869ee:	2202      	movs	r2, #2
   869f0:	4b0a      	ldr	r3, [pc, #40]	; (86a1c <Cl_Dlsis_UpdateAlarmTable+0x104>)
   869f2:	4798      	blx	r3
   869f4:	4603      	mov	r3, r0
   869f6:	73fb      	strb	r3, [r7, #15]
			Cl_NewAlarmIdType cl_alarmId;
	Cl_Uint8Type tempcount = 0;
			Cl_Uint8Type data[2];
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	for (tempcount = 0 ; tempcount < CL_DLSIS_ALRM_MAX ; tempcount++)
   869f8:	7bbb      	ldrb	r3, [r7, #14]
   869fa:	3301      	adds	r3, #1
   869fc:	73bb      	strb	r3, [r7, #14]
   869fe:	7bbb      	ldrb	r3, [r7, #14]
   86a00:	2b28      	cmp	r3, #40	; 0x28
   86a02:	d996      	bls.n	86932 <Cl_Dlsis_UpdateAlarmTable+0x1a>
	}
	

	

return (Cl_dlsisretcode );
   86a04:	7bfb      	ldrb	r3, [r7, #15]
}
   86a06:	4618      	mov	r0, r3
   86a08:	3710      	adds	r7, #16
   86a0a:	46bd      	mov	sp, r7
   86a0c:	bd80      	pop	{r7, pc}
   86a0e:	bf00      	nop
   86a10:	200705d4 	.word	0x200705d4
   86a14:	00082c09 	.word	0x00082c09
   86a18:	00086a21 	.word	0x00086a21
   86a1c:	0009d1e9 	.word	0x0009d1e9

00086a20 <CL_DlsisAlarmActon>:


Cl_ReturnCodeType  CL_DlsisAlarmActon(Cl_NewAlarmIdType cl_dlsisalarmid)
{
   86a20:	b580      	push	{r7, lr}
   86a22:	b086      	sub	sp, #24
   86a24:	af00      	add	r7, sp, #0
   86a26:	4603      	mov	r3, r0
   86a28:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   86a2a:	2300      	movs	r3, #0
   86a2c:	75fb      	strb	r3, [r7, #23]
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   86a2e:	2300      	movs	r3, #0
   86a30:	813b      	strh	r3, [r7, #8]
   86a32:	2300      	movs	r3, #0
   86a34:	72bb      	strb	r3, [r7, #10]
   86a36:	2300      	movs	r3, #0
   86a38:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   86a3a:	2359      	movs	r3, #89	; 0x59
   86a3c:	73fb      	strb	r3, [r7, #15]
			Cl_Uint16Type levelswitchstatus = 0;	
   86a3e:	2300      	movs	r3, #0
   86a40:	81bb      	strh	r3, [r7, #12]
			static Cl_Uint8Type fillseccounter = 0;
			Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   86a42:	2300      	movs	r3, #0
   86a44:	72fb      	strb	r3, [r7, #11]
		

			

							
		switch(cl_dlsisalarmid)
   86a46:	79fb      	ldrb	r3, [r7, #7]
   86a48:	3b01      	subs	r3, #1
   86a4a:	2b41      	cmp	r3, #65	; 0x41
   86a4c:	f200 80be 	bhi.w	86bcc <CL_DlsisAlarmActon+0x1ac>
   86a50:	a201      	add	r2, pc, #4	; (adr r2, 86a58 <CL_DlsisAlarmActon+0x38>)
   86a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86a56:	bf00      	nop
   86a58:	00086b7b 	.word	0x00086b7b
   86a5c:	00086bcd 	.word	0x00086bcd
   86a60:	00086bcd 	.word	0x00086bcd
   86a64:	00086bcd 	.word	0x00086bcd
   86a68:	00086b89 	.word	0x00086b89
   86a6c:	00086b89 	.word	0x00086b89
   86a70:	00086bbf 	.word	0x00086bbf
   86a74:	00086bbf 	.word	0x00086bbf
   86a78:	00086bab 	.word	0x00086bab
   86a7c:	00086bcd 	.word	0x00086bcd
   86a80:	00086bab 	.word	0x00086bab
   86a84:	00086bab 	.word	0x00086bab
   86a88:	00086bab 	.word	0x00086bab
   86a8c:	00086bab 	.word	0x00086bab
   86a90:	00086bab 	.word	0x00086bab
   86a94:	00086bab 	.word	0x00086bab
   86a98:	00086b89 	.word	0x00086b89
   86a9c:	00086b89 	.word	0x00086b89
   86aa0:	00086b89 	.word	0x00086b89
   86aa4:	00086b89 	.word	0x00086b89
   86aa8:	00086b97 	.word	0x00086b97
   86aac:	00086b97 	.word	0x00086b97
   86ab0:	00086b97 	.word	0x00086b97
   86ab4:	00086b97 	.word	0x00086b97
   86ab8:	00086bcd 	.word	0x00086bcd
   86abc:	00086bab 	.word	0x00086bab
   86ac0:	00086bcd 	.word	0x00086bcd
   86ac4:	00086bcd 	.word	0x00086bcd
   86ac8:	00086b61 	.word	0x00086b61
   86acc:	00086bcd 	.word	0x00086bcd
   86ad0:	00086bcd 	.word	0x00086bcd
   86ad4:	00086b7b 	.word	0x00086b7b
   86ad8:	00086bab 	.word	0x00086bab
   86adc:	00086b7b 	.word	0x00086b7b
   86ae0:	00086b7b 	.word	0x00086b7b
   86ae4:	00086b7b 	.word	0x00086b7b
   86ae8:	00086b7b 	.word	0x00086b7b
   86aec:	00086b7b 	.word	0x00086b7b
   86af0:	00086b97 	.word	0x00086b97
   86af4:	00086b97 	.word	0x00086b97
   86af8:	00086bcd 	.word	0x00086bcd
   86afc:	00086b89 	.word	0x00086b89
   86b00:	00086bcd 	.word	0x00086bcd
   86b04:	00086b89 	.word	0x00086b89
   86b08:	00086bcd 	.word	0x00086bcd
   86b0c:	00086bcd 	.word	0x00086bcd
   86b10:	00086bcd 	.word	0x00086bcd
   86b14:	00086bcd 	.word	0x00086bcd
   86b18:	00086bcd 	.word	0x00086bcd
   86b1c:	00086bab 	.word	0x00086bab
   86b20:	00086bab 	.word	0x00086bab
   86b24:	00086b7b 	.word	0x00086b7b
   86b28:	00086b7b 	.word	0x00086b7b
   86b2c:	00086b7b 	.word	0x00086b7b
   86b30:	00086b7b 	.word	0x00086b7b
   86b34:	00086bcd 	.word	0x00086bcd
   86b38:	00086bab 	.word	0x00086bab
   86b3c:	00086bab 	.word	0x00086bab
   86b40:	00086bab 	.word	0x00086bab
   86b44:	00086bcd 	.word	0x00086bcd
   86b48:	00086bcd 	.word	0x00086bcd
   86b4c:	00086bcd 	.word	0x00086bcd
   86b50:	00086b7b 	.word	0x00086b7b
   86b54:	00086b7b 	.word	0x00086b7b
   86b58:	00086b7b 	.word	0x00086b7b
   86b5c:	00086b7b 	.word	0x00086b7b
		{
			//case BP_STOPPED:
			
			case POWER_FAILURE: 
			
			cl_dlsis_powerfailure = 1;
   86b60:	4b35      	ldr	r3, [pc, #212]	; (86c38 <CL_DlsisAlarmActon+0x218>)
   86b62:	2201      	movs	r2, #1
   86b64:	601a      	str	r2, [r3, #0]
			
			sv_cntrl_setredalarm();
   86b66:	4b35      	ldr	r3, [pc, #212]	; (86c3c <CL_DlsisAlarmActon+0x21c>)
   86b68:	4798      	blx	r3
			sv_cntrl_buzzer();
   86b6a:	4b35      	ldr	r3, [pc, #212]	; (86c40 <CL_DlsisAlarmActon+0x220>)
   86b6c:	4798      	blx	r3
			Cl_Dlsis_StopDialysis();
   86b6e:	4b35      	ldr	r3, [pc, #212]	; (86c44 <CL_DlsisAlarmActon+0x224>)
   86b70:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86b72:	4b35      	ldr	r3, [pc, #212]	; (86c48 <CL_DlsisAlarmActon+0x228>)
   86b74:	220a      	movs	r2, #10
   86b76:	701a      	strb	r2, [r3, #0]
			
			break;
   86b78:	e029      	b.n	86bce <CL_DlsisAlarmActon+0x1ae>
			case HP_UNDERRUN:
			case BP_OVERRUN:
			case BP_UNDERRUN:
			//case BD_EVENT:                  // manav02 added
							
				sv_cntrl_setredalarm();
   86b7a:	4b30      	ldr	r3, [pc, #192]	; (86c3c <CL_DlsisAlarmActon+0x21c>)
   86b7c:	4798      	blx	r3
				sv_cntrl_buzzer();
   86b7e:	4b30      	ldr	r3, [pc, #192]	; (86c40 <CL_DlsisAlarmActon+0x220>)
   86b80:	4798      	blx	r3
				Cl_Dlsis_safesate();	
   86b82:	4b32      	ldr	r3, [pc, #200]	; (86c4c <CL_DlsisAlarmActon+0x22c>)
   86b84:	4798      	blx	r3
			break;
   86b86:	e022      	b.n	86bce <CL_DlsisAlarmActon+0x1ae>
			case HOLDER2STATUS_CLOSED:
			case TEMP2_HIGH_THRESHOLD:
			case TEMP2_LOW_THRESHOLD:
			case TEMP3_HIGH_THRESHOLD:
			case TEMP3_LOW_THRESHOLD:
				sv_cntrl_setredalarm();
   86b88:	4b2c      	ldr	r3, [pc, #176]	; (86c3c <CL_DlsisAlarmActon+0x21c>)
   86b8a:	4798      	blx	r3
				sv_cntrl_buzzer();
   86b8c:	4b2c      	ldr	r3, [pc, #176]	; (86c40 <CL_DlsisAlarmActon+0x220>)
   86b8e:	4798      	blx	r3
				cl_temp_safestate();
   86b90:	4b2f      	ldr	r3, [pc, #188]	; (86c50 <CL_DlsisAlarmActon+0x230>)
   86b92:	4798      	blx	r3
				
			break;
   86b94:	e01b      	b.n	86bce <CL_DlsisAlarmActon+0x1ae>
			case 	PS2_HIGH_THRESHOLD:
			case    PS2_LOW_THRESHOLD:
			case 	PS3_HIGH_THRESHOLD:
			case    PS3_LOW_THRESHOLD:
			
			sv_cntrl_setredalarm();
   86b96:	4b29      	ldr	r3, [pc, #164]	; (86c3c <CL_DlsisAlarmActon+0x21c>)
   86b98:	4798      	blx	r3
			sv_cntrl_buzzer();
   86b9a:	4b29      	ldr	r3, [pc, #164]	; (86c40 <CL_DlsisAlarmActon+0x220>)
   86b9c:	4798      	blx	r3
			Cl_Dlsis_StopDialysis();
   86b9e:	4b29      	ldr	r3, [pc, #164]	; (86c44 <CL_DlsisAlarmActon+0x224>)
   86ba0:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_STOPPED;//CL_DLSIS_STATE_CRITICAL_ALARM;   // manav05 changed
   86ba2:	4b29      	ldr	r3, [pc, #164]	; (86c48 <CL_DlsisAlarmActon+0x228>)
   86ba4:	2209      	movs	r2, #9
   86ba6:	701a      	strb	r2, [r3, #0]
			
			
			break;
   86ba8:	e011      	b.n	86bce <CL_DlsisAlarmActon+0x1ae>
			case	BC_FAILED:
			case BD_EVENT:
			case BC_ALARM:
			case TEMP1_HIGH_THRESHOLD:
			case TEMP1_LOW_THRESHOLD:
				sv_cntrl_setredalarm();
   86baa:	4b24      	ldr	r3, [pc, #144]	; (86c3c <CL_DlsisAlarmActon+0x21c>)
   86bac:	4798      	blx	r3
				sv_cntrl_buzzer();
   86bae:	4b24      	ldr	r3, [pc, #144]	; (86c40 <CL_DlsisAlarmActon+0x220>)
   86bb0:	4798      	blx	r3
				Cl_Dlsis_StopDialysis();
   86bb2:	4b24      	ldr	r3, [pc, #144]	; (86c44 <CL_DlsisAlarmActon+0x224>)
   86bb4:	4798      	blx	r3
				cl_dlsis_state = CL_DLSIS_STATE_STOPPED;//CL_DLSIS_STATE_CRITICAL_ALARM;   // manav05 changed
   86bb6:	4b24      	ldr	r3, [pc, #144]	; (86c48 <CL_DlsisAlarmActon+0x228>)
   86bb8:	2209      	movs	r2, #9
   86bba:	701a      	strb	r2, [r3, #0]
		    	//cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
			break;
   86bbc:	e007      	b.n	86bce <CL_DlsisAlarmActon+0x1ae>
			
			case COND_STATUS_LOW:
			case COND_STATUS_HIGH:
				sv_cntrl_setredalarm();           //manav02 changed from yellow to red
   86bbe:	4b1f      	ldr	r3, [pc, #124]	; (86c3c <CL_DlsisAlarmActon+0x21c>)
   86bc0:	4798      	blx	r3
				sv_cntrl_buzzer();
   86bc2:	4b1f      	ldr	r3, [pc, #124]	; (86c40 <CL_DlsisAlarmActon+0x220>)
   86bc4:	4798      	blx	r3
				cl_temp_safestate();
   86bc6:	4b22      	ldr	r3, [pc, #136]	; (86c50 <CL_DlsisAlarmActon+0x230>)
   86bc8:	4798      	blx	r3
				//cl_cond_safestate();
			break;
   86bca:	e000      	b.n	86bce <CL_DlsisAlarmActon+0x1ae>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND",4);
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
			break;*/
			
			default:
			break;
   86bcc:	bf00      	nop

		}
		 if(cl_dlsisalarmid != _NO_ALARM)
   86bce:	79fb      	ldrb	r3, [r7, #7]
   86bd0:	2b00      	cmp	r3, #0
   86bd2:	d02b      	beq.n	86c2c <CL_DlsisAlarmActon+0x20c>
		 {
			 dlsisalarm = cl_dlsisalarmid;
   86bd4:	4a1f      	ldr	r2, [pc, #124]	; (86c54 <CL_DlsisAlarmActon+0x234>)
   86bd6:	79fb      	ldrb	r3, [r7, #7]
   86bd8:	7013      	strb	r3, [r2, #0]
			 dlsisalarm1 = dlsisalarm;
   86bda:	4b1e      	ldr	r3, [pc, #120]	; (86c54 <CL_DlsisAlarmActon+0x234>)
   86bdc:	781a      	ldrb	r2, [r3, #0]
   86bde:	4b1e      	ldr	r3, [pc, #120]	; (86c58 <CL_DlsisAlarmActon+0x238>)
   86be0:	701a      	strb	r2, [r3, #0]
			data[0] = (Cl_Uint8Type)cl_dlsisalarmid;
   86be2:	79fb      	ldrb	r3, [r7, #7]
   86be4:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   86be6:	2301      	movs	r3, #1
   86be8:	727b      	strb	r3, [r7, #9]
			data[2] = (Cl_Uint8Type)CRITICAL;
   86bea:	2302      	movs	r3, #2
   86bec:	72bb      	strb	r3, [r7, #10]
			command = CON_TX_COMMAND_ALARM;
   86bee:	2307      	movs	r3, #7
   86bf0:	73fb      	strb	r3, [r7, #15]
			cl_wait(10);
   86bf2:	200a      	movs	r0, #10
   86bf4:	4b19      	ldr	r3, [pc, #100]	; (86c5c <CL_DlsisAlarmActon+0x23c>)
   86bf6:	4798      	blx	r3
			Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);
   86bf8:	7bfa      	ldrb	r2, [r7, #15]
   86bfa:	f107 0308 	add.w	r3, r7, #8
   86bfe:	4610      	mov	r0, r2
   86c00:	4619      	mov	r1, r3
   86c02:	2203      	movs	r2, #3
   86c04:	4b16      	ldr	r3, [pc, #88]	; (86c60 <CL_DlsisAlarmActon+0x240>)
   86c06:	4798      	blx	r3
   86c08:	4603      	mov	r3, r0
   86c0a:	75fb      	strb	r3, [r7, #23]
			
					
			command = CON_TX_COMMAND_CL_SYS_STATE;
   86c0c:	232b      	movs	r3, #43	; 0x2b
   86c0e:	73fb      	strb	r3, [r7, #15]
			data[0] = (Cl_Uint8Type)CLEANING;
   86c10:	2301      	movs	r3, #1
   86c12:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type)CLEAN_CLEAN_ALARM_STOPPED;
   86c14:	2302      	movs	r3, #2
   86c16:	727b      	strb	r3, [r7, #9]
			Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,2);
   86c18:	7bfa      	ldrb	r2, [r7, #15]
   86c1a:	f107 0308 	add.w	r3, r7, #8
   86c1e:	4610      	mov	r0, r2
   86c20:	4619      	mov	r1, r3
   86c22:	2202      	movs	r2, #2
   86c24:	4b0e      	ldr	r3, [pc, #56]	; (86c60 <CL_DlsisAlarmActon+0x240>)
   86c26:	4798      	blx	r3
   86c28:	4603      	mov	r3, r0
   86c2a:	75fb      	strb	r3, [r7, #23]
		 }
return CL_OK;			
   86c2c:	2300      	movs	r3, #0
}
   86c2e:	4618      	mov	r0, r3
   86c30:	3718      	adds	r7, #24
   86c32:	46bd      	mov	sp, r7
   86c34:	bd80      	pop	{r7, pc}
   86c36:	bf00      	nop
   86c38:	20071a94 	.word	0x20071a94
   86c3c:	0009b635 	.word	0x0009b635
   86c40:	0009b671 	.word	0x0009b671
   86c44:	00086e35 	.word	0x00086e35
   86c48:	20071a48 	.word	0x20071a48
   86c4c:	00087fb9 	.word	0x00087fb9
   86c50:	00088031 	.word	0x00088031
   86c54:	20072331 	.word	0x20072331
   86c58:	20072326 	.word	0x20072326
   86c5c:	0009421d 	.word	0x0009421d
   86c60:	0009d1e9 	.word	0x0009d1e9

00086c64 <Cl_Dlsis_deactivateallalarms>:

Cl_ReturnCodeType Cl_Dlsis_deactivateallalarms(){
   86c64:	b580      	push	{r7, lr}
   86c66:	b082      	sub	sp, #8
   86c68:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   86c6a:	2300      	movs	r3, #0
   86c6c:	71fb      	strb	r3, [r7, #7]
	
	Cl_Dlsis_ResetAlertsforReassertion();
   86c6e:	4b6f      	ldr	r3, [pc, #444]	; (86e2c <Cl_Dlsis_deactivateallalarms+0x1c8>)
   86c70:	4798      	blx	r3
	
	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   86c72:	203d      	movs	r0, #61	; 0x3d
   86c74:	2101      	movs	r1, #1
   86c76:	4b6e      	ldr	r3, [pc, #440]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86c78:	4798      	blx	r3
   86c7a:	4603      	mov	r3, r0
   86c7c:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,false);
   86c7e:	203e      	movs	r0, #62	; 0x3e
   86c80:	2100      	movs	r1, #0
   86c82:	4b6b      	ldr	r3, [pc, #428]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86c84:	4798      	blx	r3
   86c86:	4603      	mov	r3, r0
   86c88:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,false );
   86c8a:	2005      	movs	r0, #5
   86c8c:	2100      	movs	r1, #0
   86c8e:	4b68      	ldr	r3, [pc, #416]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86c90:	4798      	blx	r3
   86c92:	4603      	mov	r3, r0
   86c94:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,false );
   86c96:	2006      	movs	r0, #6
   86c98:	2100      	movs	r1, #0
   86c9a:	4b65      	ldr	r3, [pc, #404]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86c9c:	4798      	blx	r3
   86c9e:	4603      	mov	r3, r0
   86ca0:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   86ca2:	2003      	movs	r0, #3
   86ca4:	2100      	movs	r1, #0
   86ca6:	4b62      	ldr	r3, [pc, #392]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86ca8:	4798      	blx	r3
   86caa:	4603      	mov	r3, r0
   86cac:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   86cae:	2004      	movs	r0, #4
   86cb0:	2100      	movs	r1, #0
   86cb2:	4b5f      	ldr	r3, [pc, #380]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86cb4:	4798      	blx	r3
   86cb6:	4603      	mov	r3, r0
   86cb8:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   86cba:	2007      	movs	r0, #7
   86cbc:	2100      	movs	r1, #0
   86cbe:	4b5c      	ldr	r3, [pc, #368]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86cc0:	4798      	blx	r3
   86cc2:	4603      	mov	r3, r0
   86cc4:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   86cc6:	2008      	movs	r0, #8
   86cc8:	2100      	movs	r1, #0
   86cca:	4b59      	ldr	r3, [pc, #356]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86ccc:	4798      	blx	r3
   86cce:	4603      	mov	r3, r0
   86cd0:	71fb      	strb	r3, [r7, #7]
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_OPEN,true );
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_RO,true );
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_HIGH,true );
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,false );
   86cd2:	2020      	movs	r0, #32
   86cd4:	2100      	movs	r1, #0
   86cd6:	4b56      	ldr	r3, [pc, #344]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86cd8:	4798      	blx	r3
   86cda:	4603      	mov	r3, r0
   86cdc:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   86cde:	2021      	movs	r0, #33	; 0x21
   86ce0:	2100      	movs	r1, #0
   86ce2:	4b53      	ldr	r3, [pc, #332]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86ce4:	4798      	blx	r3
   86ce6:	4603      	mov	r3, r0
   86ce8:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,false );
   86cea:	2024      	movs	r0, #36	; 0x24
   86cec:	2100      	movs	r1, #0
   86cee:	4b50      	ldr	r3, [pc, #320]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86cf0:	4798      	blx	r3
   86cf2:	4603      	mov	r3, r0
   86cf4:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,false);
   86cf6:	2026      	movs	r0, #38	; 0x26
   86cf8:	2100      	movs	r1, #0
   86cfa:	4b4d      	ldr	r3, [pc, #308]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86cfc:	4798      	blx	r3
   86cfe:	4603      	mov	r3, r0
   86d00:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,false );
   86d02:	2023      	movs	r0, #35	; 0x23
   86d04:	2100      	movs	r1, #0
   86d06:	4b4a      	ldr	r3, [pc, #296]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86d08:	4798      	blx	r3
   86d0a:	4603      	mov	r3, r0
   86d0c:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,false);
   86d0e:	2025      	movs	r0, #37	; 0x25
   86d10:	2100      	movs	r1, #0
   86d12:	4b47      	ldr	r3, [pc, #284]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86d14:	4798      	blx	r3
   86d16:	4603      	mov	r3, r0
   86d18:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BLD_EVENT,true );
   86d1a:	2022      	movs	r0, #34	; 0x22
   86d1c:	2101      	movs	r1, #1
   86d1e:	4b44      	ldr	r3, [pc, #272]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86d20:	4798      	blx	r3
   86d22:	4603      	mov	r3, r0
   86d24:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
   86d26:	2017      	movs	r0, #23
   86d28:	2100      	movs	r1, #0
   86d2a:	4b41      	ldr	r3, [pc, #260]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86d2c:	4798      	blx	r3
   86d2e:	4603      	mov	r3, r0
   86d30:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
   86d32:	2018      	movs	r0, #24
   86d34:	2100      	movs	r1, #0
   86d36:	4b3e      	ldr	r3, [pc, #248]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86d38:	4798      	blx	r3
   86d3a:	4603      	mov	r3, r0
   86d3c:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,false );
   86d3e:	2015      	movs	r0, #21
   86d40:	2100      	movs	r1, #0
   86d42:	4b3b      	ldr	r3, [pc, #236]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86d44:	4798      	blx	r3
   86d46:	4603      	mov	r3, r0
   86d48:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,false );
   86d4a:	2016      	movs	r0, #22
   86d4c:	2100      	movs	r1, #0
   86d4e:	4b38      	ldr	r3, [pc, #224]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86d50:	4798      	blx	r3
   86d52:	4603      	mov	r3, r0
   86d54:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD ,false);
   86d56:	2027      	movs	r0, #39	; 0x27
   86d58:	2100      	movs	r1, #0
   86d5a:	4b35      	ldr	r3, [pc, #212]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86d5c:	4798      	blx	r3
   86d5e:	4603      	mov	r3, r0
   86d60:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD ,false);
   86d62:	2028      	movs	r0, #40	; 0x28
   86d64:	2100      	movs	r1, #0
   86d66:	4b32      	ldr	r3, [pc, #200]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86d68:	4798      	blx	r3
   86d6a:	4603      	mov	r3, r0
   86d6c:	71fb      	strb	r3, [r7, #7]
									
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP3STATUS,false );
   86d6e:	2014      	movs	r0, #20
   86d70:	2100      	movs	r1, #0
   86d72:	4b2f      	ldr	r3, [pc, #188]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86d74:	4798      	blx	r3
   86d76:	4603      	mov	r3, r0
   86d78:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP2STATUS,false );
   86d7a:	2013      	movs	r0, #19
   86d7c:	2100      	movs	r1, #0
   86d7e:	4b2c      	ldr	r3, [pc, #176]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86d80:	4798      	blx	r3
   86d82:	4603      	mov	r3, r0
   86d84:	71fb      	strb	r3, [r7, #7]
									
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );
   86d86:	200c      	movs	r0, #12
   86d88:	2100      	movs	r1, #0
   86d8a:	4b29      	ldr	r3, [pc, #164]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86d8c:	4798      	blx	r3
   86d8e:	4603      	mov	r3, r0
   86d90:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   86d92:	200d      	movs	r0, #13
   86d94:	2100      	movs	r1, #0
   86d96:	4b26      	ldr	r3, [pc, #152]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86d98:	4798      	blx	r3
   86d9a:	4603      	mov	r3, r0
   86d9c:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );
   86d9e:	200e      	movs	r0, #14
   86da0:	2100      	movs	r1, #0
   86da2:	4b23      	ldr	r3, [pc, #140]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86da4:	4798      	blx	r3
   86da6:	4603      	mov	r3, r0
   86da8:	71fb      	strb	r3, [r7, #7]
									
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,false );
   86daa:	200f      	movs	r0, #15
   86dac:	2100      	movs	r1, #0
   86dae:	4b20      	ldr	r3, [pc, #128]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86db0:	4798      	blx	r3
   86db2:	4603      	mov	r3, r0
   86db4:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,false );
   86db6:	2010      	movs	r0, #16
   86db8:	2100      	movs	r1, #0
   86dba:	4b1d      	ldr	r3, [pc, #116]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86dbc:	4798      	blx	r3
   86dbe:	4603      	mov	r3, r0
   86dc0:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,false );
   86dc2:	2011      	movs	r0, #17
   86dc4:	2100      	movs	r1, #0
   86dc6:	4b1a      	ldr	r3, [pc, #104]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86dc8:	4798      	blx	r3
   86dca:	4603      	mov	r3, r0
   86dcc:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,false );
   86dce:	2012      	movs	r0, #18
   86dd0:	2100      	movs	r1, #0
   86dd2:	4b17      	ldr	r3, [pc, #92]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86dd4:	4798      	blx	r3
   86dd6:	4603      	mov	r3, r0
   86dd8:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   86dda:	2013      	movs	r0, #19
   86ddc:	2100      	movs	r1, #0
   86dde:	4b14      	ldr	r3, [pc, #80]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86de0:	4798      	blx	r3
   86de2:	4603      	mov	r3, r0
   86de4:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   86de6:	2014      	movs	r0, #20
   86de8:	2100      	movs	r1, #0
   86dea:	4b11      	ldr	r3, [pc, #68]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86dec:	4798      	blx	r3
   86dee:	4603      	mov	r3, r0
   86df0:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BP_STOPPED,false );
   86df2:	203f      	movs	r0, #63	; 0x3f
   86df4:	2100      	movs	r1, #0
   86df6:	4b0e      	ldr	r3, [pc, #56]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86df8:	4798      	blx	r3
   86dfa:	4603      	mov	r3, r0
   86dfc:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TMP_HIGH,false );
   86dfe:	2041      	movs	r0, #65	; 0x41
   86e00:	2100      	movs	r1, #0
   86e02:	4b0b      	ldr	r3, [pc, #44]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86e04:	4798      	blx	r3
   86e06:	4603      	mov	r3, r0
   86e08:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TMP_LOW,false );
   86e0a:	2042      	movs	r0, #66	; 0x42
   86e0c:	2100      	movs	r1, #0
   86e0e:	4b08      	ldr	r3, [pc, #32]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86e10:	4798      	blx	r3
   86e12:	4603      	mov	r3, r0
   86e14:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BC_ALARM,false );
   86e16:	201a      	movs	r0, #26
   86e18:	2100      	movs	r1, #0
   86e1a:	4b05      	ldr	r3, [pc, #20]	; (86e30 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86e1c:	4798      	blx	r3
   86e1e:	4603      	mov	r3, r0
   86e20:	71fb      	strb	r3, [r7, #7]
									
	
	
	return CL_OK;
   86e22:	2300      	movs	r3, #0
}
   86e24:	4618      	mov	r0, r3
   86e26:	3708      	adds	r7, #8
   86e28:	46bd      	mov	sp, r7
   86e2a:	bd80      	pop	{r7, pc}
   86e2c:	000873c1 	.word	0x000873c1
   86e30:	00082a35 	.word	0x00082a35

00086e34 <Cl_Dlsis_StopDialysis>:

Cl_ReturnCodeType Cl_Dlsis_StopDialysis(void)
{
   86e34:	b580      	push	{r7, lr}
   86e36:	b082      	sub	sp, #8
   86e38:	af00      	add	r7, sp, #0
	Cl_Uint8Type data;
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   86e3a:	2300      	movs	r3, #0
   86e3c:	71fb      	strb	r3, [r7, #7]
	Cl_Dlsis_deactivateallalarms();
   86e3e:	4b34      	ldr	r3, [pc, #208]	; (86f10 <Cl_Dlsis_StopDialysis+0xdc>)
   86e40:	4798      	blx	r3
				if(!((cl_dlsis_state == CL_DLSIS_STATE_IDLE ) || (cl_dlsis_state == CL_DLSIS_STATE_STOPPED )|| (cl_dlsis_state == CL_DLSIS_STATE_PAUSED ) ||(cl_dlsis_state == CL_DLSIS_STATE_CRITICAL_ALARM )  ))
   86e42:	4b34      	ldr	r3, [pc, #208]	; (86f14 <Cl_Dlsis_StopDialysis+0xe0>)
   86e44:	781b      	ldrb	r3, [r3, #0]
   86e46:	2b00      	cmp	r3, #0
   86e48:	d05d      	beq.n	86f06 <Cl_Dlsis_StopDialysis+0xd2>
   86e4a:	4b32      	ldr	r3, [pc, #200]	; (86f14 <Cl_Dlsis_StopDialysis+0xe0>)
   86e4c:	781b      	ldrb	r3, [r3, #0]
   86e4e:	2b09      	cmp	r3, #9
   86e50:	d059      	beq.n	86f06 <Cl_Dlsis_StopDialysis+0xd2>
   86e52:	4b30      	ldr	r3, [pc, #192]	; (86f14 <Cl_Dlsis_StopDialysis+0xe0>)
   86e54:	781b      	ldrb	r3, [r3, #0]
   86e56:	2b07      	cmp	r3, #7
   86e58:	d055      	beq.n	86f06 <Cl_Dlsis_StopDialysis+0xd2>
   86e5a:	4b2e      	ldr	r3, [pc, #184]	; (86f14 <Cl_Dlsis_StopDialysis+0xe0>)
   86e5c:	781b      	ldrb	r3, [r3, #0]
   86e5e:	2b0a      	cmp	r3, #10
   86e60:	d051      	beq.n	86f06 <Cl_Dlsis_StopDialysis+0xd2>
				{

					
					 	DlsisTime.Cl_dlsissecondscounter = 0;
   86e62:	4b2d      	ldr	r3, [pc, #180]	; (86f18 <Cl_Dlsis_StopDialysis+0xe4>)
   86e64:	2200      	movs	r2, #0
   86e66:	701a      	strb	r2, [r3, #0]
					 	DlsisTime.Cl_dlsisMinutescounter= 0;
   86e68:	4b2b      	ldr	r3, [pc, #172]	; (86f18 <Cl_Dlsis_StopDialysis+0xe4>)
   86e6a:	2200      	movs	r2, #0
   86e6c:	705a      	strb	r2, [r3, #1]
					 	DlsisTime.Cl_dlsishourscounter= 0;
   86e6e:	4b2a      	ldr	r3, [pc, #168]	; (86f18 <Cl_Dlsis_StopDialysis+0xe4>)
   86e70:	2200      	movs	r2, #0
   86e72:	709a      	strb	r2, [r3, #2]
					 	DlsisTime.Cl_dlsisTotalMinutescounter= 0;
   86e74:	4b28      	ldr	r3, [pc, #160]	; (86f18 <Cl_Dlsis_StopDialysis+0xe4>)
   86e76:	2200      	movs	r2, #0
   86e78:	70da      	strb	r2, [r3, #3]
					 	DlsisTime.Cl_dlsisTotalhourscounter=0;
   86e7a:	4b27      	ldr	r3, [pc, #156]	; (86f18 <Cl_Dlsis_StopDialysis+0xe4>)
   86e7c:	2200      	movs	r2, #0
   86e7e:	711a      	strb	r2, [r3, #4]

				Cl_dlsisretcode =  sv_cntrl_deactivatevenousclamp();
   86e80:	4b26      	ldr	r3, [pc, #152]	; (86f1c <Cl_Dlsis_StopDialysis+0xe8>)
   86e82:	4798      	blx	r3
   86e84:	4603      	mov	r3, r0
   86e86:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode =  sv_cntrl_deactivatepump(UFPUMP);
   86e88:	2004      	movs	r0, #4
   86e8a:	4b25      	ldr	r3, [pc, #148]	; (86f20 <Cl_Dlsis_StopDialysis+0xec>)
   86e8c:	4798      	blx	r3
   86e8e:	4603      	mov	r3, r0
   86e90:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   86e92:	2011      	movs	r0, #17
   86e94:	4b23      	ldr	r3, [pc, #140]	; (86f24 <Cl_Dlsis_StopDialysis+0xf0>)
   86e96:	4798      	blx	r3
   86e98:	4603      	mov	r3, r0
   86e9a:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode = sv_cntrl_poweroffheater();
   86e9c:	4b22      	ldr	r3, [pc, #136]	; (86f28 <Cl_Dlsis_StopDialysis+0xf4>)
   86e9e:	4798      	blx	r3
   86ea0:	4603      	mov	r3, r0
   86ea2:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   86ea4:	2004      	movs	r0, #4
   86ea6:	4b21      	ldr	r3, [pc, #132]	; (86f2c <Cl_Dlsis_StopDialysis+0xf8>)
   86ea8:	4798      	blx	r3
   86eaa:	4603      	mov	r3, r0
   86eac:	71fb      	strb	r3, [r7, #7]
				cl_bp_controller(CL_BP_EVENT_STOP,0);
   86eae:	2004      	movs	r0, #4
   86eb0:	2100      	movs	r1, #0
   86eb2:	4b1f      	ldr	r3, [pc, #124]	; (86f30 <Cl_Dlsis_StopDialysis+0xfc>)
   86eb4:	4798      	blx	r3
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BP_OVERRUN,false );
   86eb6:	2036      	movs	r0, #54	; 0x36
   86eb8:	2100      	movs	r1, #0
   86eba:	4b1e      	ldr	r3, [pc, #120]	; (86f34 <Cl_Dlsis_StopDialysis+0x100>)
   86ebc:	4798      	blx	r3
   86ebe:	4603      	mov	r3, r0
   86ec0:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BP_UNDERRUN,false );
   86ec2:	2037      	movs	r0, #55	; 0x37
   86ec4:	2100      	movs	r1, #0
   86ec6:	4b1b      	ldr	r3, [pc, #108]	; (86f34 <Cl_Dlsis_StopDialysis+0x100>)
   86ec8:	4798      	blx	r3
   86eca:	4603      	mov	r3, r0
   86ecc:	71fb      	strb	r3, [r7, #7]
				bpFlag = 0 ;
   86ece:	4b1a      	ldr	r3, [pc, #104]	; (86f38 <Cl_Dlsis_StopDialysis+0x104>)
   86ed0:	2200      	movs	r2, #0
   86ed2:	601a      	str	r2, [r3, #0]
				bpflagCounter = 0;
   86ed4:	4b19      	ldr	r3, [pc, #100]	; (86f3c <Cl_Dlsis_StopDialysis+0x108>)
   86ed6:	2200      	movs	r2, #0
   86ed8:	601a      	str	r2, [r3, #0]
				Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   86eda:	2011      	movs	r0, #17
   86edc:	4b11      	ldr	r3, [pc, #68]	; (86f24 <Cl_Dlsis_StopDialysis+0xf0>)
   86ede:	4798      	blx	r3
   86ee0:	4603      	mov	r3, r0
   86ee2:	71fb      	strb	r3, [r7, #7]
				cl_dlsis_state = CL_DLSIS_STATE_IDLE;
   86ee4:	4b0b      	ldr	r3, [pc, #44]	; (86f14 <Cl_Dlsis_StopDialysis+0xe0>)
   86ee6:	2200      	movs	r2, #0
   86ee8:	701a      	strb	r2, [r3, #0]
				Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_STOPPED,&data,0);
   86eea:	1dbb      	adds	r3, r7, #6
   86eec:	2014      	movs	r0, #20
   86eee:	4619      	mov	r1, r3
   86ef0:	2200      	movs	r2, #0
   86ef2:	4b13      	ldr	r3, [pc, #76]	; (86f40 <Cl_Dlsis_StopDialysis+0x10c>)
   86ef4:	4798      	blx	r3
   86ef6:	4603      	mov	r3, r0
   86ef8:	71fb      	strb	r3, [r7, #7]
				Cl_bc_controller(BC_EVENT_STOP);
   86efa:	2005      	movs	r0, #5
   86efc:	4b11      	ldr	r3, [pc, #68]	; (86f44 <Cl_Dlsis_StopDialysis+0x110>)
   86efe:	4798      	blx	r3
				bc_flag = 0;
   86f00:	4b11      	ldr	r3, [pc, #68]	; (86f48 <Cl_Dlsis_StopDialysis+0x114>)
   86f02:	2200      	movs	r2, #0
   86f04:	701a      	strb	r2, [r3, #0]
					
				}
				
				// deactivate all alarms
				
				return CL_OK;
   86f06:	2300      	movs	r3, #0
}
   86f08:	4618      	mov	r0, r3
   86f0a:	3708      	adds	r7, #8
   86f0c:	46bd      	mov	sp, r7
   86f0e:	bd80      	pop	{r7, pc}
   86f10:	00086c65 	.word	0x00086c65
   86f14:	20071a48 	.word	0x20071a48
   86f18:	2007232c 	.word	0x2007232c
   86f1c:	0009b549 	.word	0x0009b549
   86f20:	0009b369 	.word	0x0009b369
   86f24:	0009b5cd 	.word	0x0009b5cd
   86f28:	0009b3d5 	.word	0x0009b3d5
   86f2c:	00089381 	.word	0x00089381
   86f30:	00094325 	.word	0x00094325
   86f34:	00082a35 	.word	0x00082a35
   86f38:	20071aa0 	.word	0x20071aa0
   86f3c:	20071a9c 	.word	0x20071a9c
   86f40:	0009d1e9 	.word	0x0009d1e9
   86f44:	00082ee1 	.word	0x00082ee1
   86f48:	20071a67 	.word	0x20071a67

00086f4c <Cl_Dlsis_BypassDialysis>:

Cl_ReturnCodeType Cl_Dlsis_BypassDialysis(void)
{
   86f4c:	b580      	push	{r7, lr}
   86f4e:	b082      	sub	sp, #8
   86f50:	af00      	add	r7, sp, #0
			Cl_Uint8Type data;
			Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   86f52:	2300      	movs	r3, #0
   86f54:	71fb      	strb	r3, [r7, #7]
			Cl_dlsisretcode = sv_cntrl_enable_bypass();
   86f56:	4b67      	ldr	r3, [pc, #412]	; (870f4 <Cl_Dlsis_BypassDialysis+0x1a8>)
   86f58:	4798      	blx	r3
   86f5a:	4603      	mov	r3, r0
   86f5c:	71fb      	strb	r3, [r7, #7]
				cl_uf_controller(CL_UF_EVENT_STOP,0);
   86f5e:	2004      	movs	r0, #4
   86f60:	2100      	movs	r1, #0
   86f62:	4b65      	ldr	r3, [pc, #404]	; (870f8 <Cl_Dlsis_BypassDialysis+0x1ac>)
   86f64:	4798      	blx	r3
				isouf = false;
   86f66:	4b65      	ldr	r3, [pc, #404]	; (870fc <Cl_Dlsis_BypassDialysis+0x1b0>)
   86f68:	2200      	movs	r2, #0
   86f6a:	701a      	strb	r2, [r3, #0]
			//Cl_dlsisretcode =  sv_cntrl_deactivatepump(UFPUMP);
			
			Cl_dlsissecondscounter_1 = DlsisTime.Cl_dlsissecondscounter;
   86f6c:	4b64      	ldr	r3, [pc, #400]	; (87100 <Cl_Dlsis_BypassDialysis+0x1b4>)
   86f6e:	781b      	ldrb	r3, [r3, #0]
   86f70:	461a      	mov	r2, r3
   86f72:	4b64      	ldr	r3, [pc, #400]	; (87104 <Cl_Dlsis_BypassDialysis+0x1b8>)
   86f74:	601a      	str	r2, [r3, #0]
			Cl_dlsishourscounter_1 = DlsisTime.Cl_dlsishourscounter;
   86f76:	4b62      	ldr	r3, [pc, #392]	; (87100 <Cl_Dlsis_BypassDialysis+0x1b4>)
   86f78:	789b      	ldrb	r3, [r3, #2]
   86f7a:	461a      	mov	r2, r3
   86f7c:	4b62      	ldr	r3, [pc, #392]	; (87108 <Cl_Dlsis_BypassDialysis+0x1bc>)
   86f7e:	601a      	str	r2, [r3, #0]
			Cl_dlsisMinutescounter_1 = DlsisTime.Cl_dlsisMinutescounter;
   86f80:	4b5f      	ldr	r3, [pc, #380]	; (87100 <Cl_Dlsis_BypassDialysis+0x1b4>)
   86f82:	785b      	ldrb	r3, [r3, #1]
   86f84:	461a      	mov	r2, r3
   86f86:	4b61      	ldr	r3, [pc, #388]	; (8710c <Cl_Dlsis_BypassDialysis+0x1c0>)
   86f88:	601a      	str	r2, [r3, #0]
			Cl_dlsisTotalMinutescounter_1 = DlsisTime.Cl_dlsisTotalMinutescounter;
   86f8a:	4b5d      	ldr	r3, [pc, #372]	; (87100 <Cl_Dlsis_BypassDialysis+0x1b4>)
   86f8c:	78db      	ldrb	r3, [r3, #3]
   86f8e:	461a      	mov	r2, r3
   86f90:	4b5f      	ldr	r3, [pc, #380]	; (87110 <Cl_Dlsis_BypassDialysis+0x1c4>)
   86f92:	601a      	str	r2, [r3, #0]
			Cl_dlsisTotalhourscounter_1 = DlsisTime.Cl_dlsisTotalhourscounter;
   86f94:	4b5a      	ldr	r3, [pc, #360]	; (87100 <Cl_Dlsis_BypassDialysis+0x1b4>)
   86f96:	791b      	ldrb	r3, [r3, #4]
   86f98:	461a      	mov	r2, r3
   86f9a:	4b5e      	ldr	r3, [pc, #376]	; (87114 <Cl_Dlsis_BypassDialysis+0x1c8>)
   86f9c:	601a      	str	r2, [r3, #0]
// 			DlsisTime.Cl_dlsishourscounter = 0;
// 			DlsisTime.Cl_dlsisMinutescounter = 0;
// 			DlsisTime.Cl_dlsisTotalhourscounter = 0;
// 			 DlsisTime.Cl_dlsisTotalMinutescounter = 0;
		//	 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false );
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,false );
   86f9e:	2024      	movs	r0, #36	; 0x24
   86fa0:	2100      	movs	r1, #0
   86fa2:	4b5d      	ldr	r3, [pc, #372]	; (87118 <Cl_Dlsis_BypassDialysis+0x1cc>)
   86fa4:	4798      	blx	r3
   86fa6:	4603      	mov	r3, r0
   86fa8:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,false );
   86faa:	2023      	movs	r0, #35	; 0x23
   86fac:	2100      	movs	r1, #0
   86fae:	4b5a      	ldr	r3, [pc, #360]	; (87118 <Cl_Dlsis_BypassDialysis+0x1cc>)
   86fb0:	4798      	blx	r3
   86fb2:	4603      	mov	r3, r0
   86fb4:	71fb      	strb	r3, [r7, #7]
		Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH,false );
   86fb6:	2026      	movs	r0, #38	; 0x26
   86fb8:	2100      	movs	r1, #0
   86fba:	4b57      	ldr	r3, [pc, #348]	; (87118 <Cl_Dlsis_BypassDialysis+0x1cc>)
   86fbc:	4798      	blx	r3
   86fbe:	4603      	mov	r3, r0
   86fc0:	71fb      	strb	r3, [r7, #7]
		Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,false );
   86fc2:	2025      	movs	r0, #37	; 0x25
   86fc4:	2100      	movs	r1, #0
   86fc6:	4b54      	ldr	r3, [pc, #336]	; (87118 <Cl_Dlsis_BypassDialysis+0x1cc>)
   86fc8:	4798      	blx	r3
   86fca:	4603      	mov	r3, r0
   86fcc:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,false );
   86fce:	2015      	movs	r0, #21
   86fd0:	2100      	movs	r1, #0
   86fd2:	4b51      	ldr	r3, [pc, #324]	; (87118 <Cl_Dlsis_BypassDialysis+0x1cc>)
   86fd4:	4798      	blx	r3
   86fd6:	4603      	mov	r3, r0
   86fd8:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,false );
   86fda:	2016      	movs	r0, #22
   86fdc:	2100      	movs	r1, #0
   86fde:	4b4e      	ldr	r3, [pc, #312]	; (87118 <Cl_Dlsis_BypassDialysis+0x1cc>)
   86fe0:	4798      	blx	r3
   86fe2:	4603      	mov	r3, r0
   86fe4:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
   86fe6:	2017      	movs	r0, #23
   86fe8:	2100      	movs	r1, #0
   86fea:	4b4b      	ldr	r3, [pc, #300]	; (87118 <Cl_Dlsis_BypassDialysis+0x1cc>)
   86fec:	4798      	blx	r3
   86fee:	4603      	mov	r3, r0
   86ff0:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
   86ff2:	2018      	movs	r0, #24
   86ff4:	2100      	movs	r1, #0
   86ff6:	4b48      	ldr	r3, [pc, #288]	; (87118 <Cl_Dlsis_BypassDialysis+0x1cc>)
   86ff8:	4798      	blx	r3
   86ffa:	4603      	mov	r3, r0
   86ffc:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,false );
   86ffe:	2027      	movs	r0, #39	; 0x27
   87000:	2100      	movs	r1, #0
   87002:	4b45      	ldr	r3, [pc, #276]	; (87118 <Cl_Dlsis_BypassDialysis+0x1cc>)
   87004:	4798      	blx	r3
   87006:	4603      	mov	r3, r0
   87008:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD,false );
   8700a:	2028      	movs	r0, #40	; 0x28
   8700c:	2100      	movs	r1, #0
   8700e:	4b42      	ldr	r3, [pc, #264]	; (87118 <Cl_Dlsis_BypassDialysis+0x1cc>)
   87010:	4798      	blx	r3
   87012:	4603      	mov	r3, r0
   87014:	71fb      	strb	r3, [r7, #7]
		//	 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,false );
		//	 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,false);
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,false );
   87016:	2005      	movs	r0, #5
   87018:	2100      	movs	r1, #0
   8701a:	4b3f      	ldr	r3, [pc, #252]	; (87118 <Cl_Dlsis_BypassDialysis+0x1cc>)
   8701c:	4798      	blx	r3
   8701e:	4603      	mov	r3, r0
   87020:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,false );
   87022:	2006      	movs	r0, #6
   87024:	2100      	movs	r1, #0
   87026:	4b3c      	ldr	r3, [pc, #240]	; (87118 <Cl_Dlsis_BypassDialysis+0x1cc>)
   87028:	4798      	blx	r3
   8702a:	4603      	mov	r3, r0
   8702c:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   8702e:	2003      	movs	r0, #3
   87030:	2100      	movs	r1, #0
   87032:	4b39      	ldr	r3, [pc, #228]	; (87118 <Cl_Dlsis_BypassDialysis+0x1cc>)
   87034:	4798      	blx	r3
   87036:	4603      	mov	r3, r0
   87038:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   8703a:	2004      	movs	r0, #4
   8703c:	2100      	movs	r1, #0
   8703e:	4b36      	ldr	r3, [pc, #216]	; (87118 <Cl_Dlsis_BypassDialysis+0x1cc>)
   87040:	4798      	blx	r3
   87042:	4603      	mov	r3, r0
   87044:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   87046:	2007      	movs	r0, #7
   87048:	2100      	movs	r1, #0
   8704a:	4b33      	ldr	r3, [pc, #204]	; (87118 <Cl_Dlsis_BypassDialysis+0x1cc>)
   8704c:	4798      	blx	r3
   8704e:	4603      	mov	r3, r0
   87050:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   87052:	2008      	movs	r0, #8
   87054:	2100      	movs	r1, #0
   87056:	4b30      	ldr	r3, [pc, #192]	; (87118 <Cl_Dlsis_BypassDialysis+0x1cc>)
   87058:	4798      	blx	r3
   8705a:	4603      	mov	r3, r0
   8705c:	71fb      	strb	r3, [r7, #7]
			 //Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false);
   8705e:	2029      	movs	r0, #41	; 0x29
   87060:	2100      	movs	r1, #0
   87062:	4b2d      	ldr	r3, [pc, #180]	; (87118 <Cl_Dlsis_BypassDialysis+0x1cc>)
   87064:	4798      	blx	r3
   87066:	4603      	mov	r3, r0
   87068:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   8706a:	202b      	movs	r0, #43	; 0x2b
   8706c:	2100      	movs	r1, #0
   8706e:	4b2a      	ldr	r3, [pc, #168]	; (87118 <Cl_Dlsis_BypassDialysis+0x1cc>)
   87070:	4798      	blx	r3
   87072:	4603      	mov	r3, r0
   87074:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   87076:	2021      	movs	r0, #33	; 0x21
   87078:	2100      	movs	r1, #0
   8707a:	4b27      	ldr	r3, [pc, #156]	; (87118 <Cl_Dlsis_BypassDialysis+0x1cc>)
   8707c:	4798      	blx	r3
   8707e:	4603      	mov	r3, r0
   87080:	71fb      	strb	r3, [r7, #7]
			 //Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLD_EVENT,true );
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   87082:	2013      	movs	r0, #19
   87084:	2100      	movs	r1, #0
   87086:	4b24      	ldr	r3, [pc, #144]	; (87118 <Cl_Dlsis_BypassDialysis+0x1cc>)
   87088:	4798      	blx	r3
   8708a:	4603      	mov	r3, r0
   8708c:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   8708e:	2014      	movs	r0, #20
   87090:	2100      	movs	r1, #0
   87092:	4b21      	ldr	r3, [pc, #132]	; (87118 <Cl_Dlsis_BypassDialysis+0x1cc>)
   87094:	4798      	blx	r3
   87096:	4603      	mov	r3, r0
   87098:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BP_STOPPED,false); 
   8709a:	203f      	movs	r0, #63	; 0x3f
   8709c:	2100      	movs	r1, #0
   8709e:	4b1e      	ldr	r3, [pc, #120]	; (87118 <Cl_Dlsis_BypassDialysis+0x1cc>)
   870a0:	4798      	blx	r3
   870a2:	4603      	mov	r3, r0
   870a4:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TMP_HIGH,false );
   870a6:	2041      	movs	r0, #65	; 0x41
   870a8:	2100      	movs	r1, #0
   870aa:	4b1b      	ldr	r3, [pc, #108]	; (87118 <Cl_Dlsis_BypassDialysis+0x1cc>)
   870ac:	4798      	blx	r3
   870ae:	4603      	mov	r3, r0
   870b0:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TMP_LOW,false );
   870b2:	2042      	movs	r0, #66	; 0x42
   870b4:	2100      	movs	r1, #0
   870b6:	4b18      	ldr	r3, [pc, #96]	; (87118 <Cl_Dlsis_BypassDialysis+0x1cc>)
   870b8:	4798      	blx	r3
   870ba:	4603      	mov	r3, r0
   870bc:	71fb      	strb	r3, [r7, #7]
			 
			cl_dlsis_state = CL_DLSIS_STATE_BYPASS;
   870be:	4b17      	ldr	r3, [pc, #92]	; (8711c <Cl_Dlsis_BypassDialysis+0x1d0>)
   870c0:	2208      	movs	r2, #8
   870c2:	701a      	strb	r2, [r3, #0]
						
			Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_BYPASS_ON,&data,0);
   870c4:	1dbb      	adds	r3, r7, #6
   870c6:	2041      	movs	r0, #65	; 0x41
   870c8:	4619      	mov	r1, r3
   870ca:	2200      	movs	r2, #0
   870cc:	4b14      	ldr	r3, [pc, #80]	; (87120 <Cl_Dlsis_BypassDialysis+0x1d4>)
   870ce:	4798      	blx	r3
   870d0:	4603      	mov	r3, r0
   870d2:	71fb      	strb	r3, [r7, #7]
	cl_wait(20);   // manav03 added
   870d4:	2014      	movs	r0, #20
   870d6:	4b13      	ldr	r3, [pc, #76]	; (87124 <Cl_Dlsis_BypassDialysis+0x1d8>)
   870d8:	4798      	blx	r3
			Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_PAUSED,&data,0);
   870da:	1dbb      	adds	r3, r7, #6
   870dc:	2040      	movs	r0, #64	; 0x40
   870de:	4619      	mov	r1, r3
   870e0:	2200      	movs	r2, #0
   870e2:	4b0f      	ldr	r3, [pc, #60]	; (87120 <Cl_Dlsis_BypassDialysis+0x1d4>)
   870e4:	4798      	blx	r3
   870e6:	4603      	mov	r3, r0
   870e8:	71fb      	strb	r3, [r7, #7]
return CL_OK;	
   870ea:	2300      	movs	r3, #0
}
   870ec:	4618      	mov	r0, r3
   870ee:	3708      	adds	r7, #8
   870f0:	46bd      	mov	sp, r7
   870f2:	bd80      	pop	{r7, pc}
   870f4:	0009b595 	.word	0x0009b595
   870f8:	00097499 	.word	0x00097499
   870fc:	20071c44 	.word	0x20071c44
   87100:	2007232c 	.word	0x2007232c
   87104:	20071a4c 	.word	0x20071a4c
   87108:	20071a54 	.word	0x20071a54
   8710c:	20071a50 	.word	0x20071a50
   87110:	20071a58 	.word	0x20071a58
   87114:	20071a5c 	.word	0x20071a5c
   87118:	00082a35 	.word	0x00082a35
   8711c:	20071a48 	.word	0x20071a48
   87120:	0009d1e9 	.word	0x0009d1e9
   87124:	0009421d 	.word	0x0009421d

00087128 <Cl_Dlsis_BypassOff>:

Cl_ReturnCodeType Cl_Dlsis_BypassOff(void)
{
   87128:	b580      	push	{r7, lr}
   8712a:	b082      	sub	sp, #8
   8712c:	af00      	add	r7, sp, #0
	Cl_Uint8Type data;
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   8712e:	2300      	movs	r3, #0
   87130:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode = sv_cntrl_disable_bypass();
   87132:	4b6e      	ldr	r3, [pc, #440]	; (872ec <Cl_Dlsis_BypassOff+0x1c4>)
   87134:	4798      	blx	r3
   87136:	4603      	mov	r3, r0
   87138:	71fb      	strb	r3, [r7, #7]
	
	 DlsisTime.Cl_dlsissecondscounter = Cl_dlsissecondscounter_1 ;
   8713a:	4b6d      	ldr	r3, [pc, #436]	; (872f0 <Cl_Dlsis_BypassOff+0x1c8>)
   8713c:	681b      	ldr	r3, [r3, #0]
   8713e:	b2da      	uxtb	r2, r3
   87140:	4b6c      	ldr	r3, [pc, #432]	; (872f4 <Cl_Dlsis_BypassOff+0x1cc>)
   87142:	701a      	strb	r2, [r3, #0]
	 DlsisTime.Cl_dlsishourscounter = Cl_dlsishourscounter_1 ;
   87144:	4b6c      	ldr	r3, [pc, #432]	; (872f8 <Cl_Dlsis_BypassOff+0x1d0>)
   87146:	681b      	ldr	r3, [r3, #0]
   87148:	b2da      	uxtb	r2, r3
   8714a:	4b6a      	ldr	r3, [pc, #424]	; (872f4 <Cl_Dlsis_BypassOff+0x1cc>)
   8714c:	709a      	strb	r2, [r3, #2]
	 DlsisTime.Cl_dlsisMinutescounter = Cl_dlsisMinutescounter_1 ;
   8714e:	4b6b      	ldr	r3, [pc, #428]	; (872fc <Cl_Dlsis_BypassOff+0x1d4>)
   87150:	681b      	ldr	r3, [r3, #0]
   87152:	b2da      	uxtb	r2, r3
   87154:	4b67      	ldr	r3, [pc, #412]	; (872f4 <Cl_Dlsis_BypassOff+0x1cc>)
   87156:	705a      	strb	r2, [r3, #1]
	DlsisTime.Cl_dlsisTotalMinutescounter =  Cl_dlsisTotalMinutescounter_1;
   87158:	4b69      	ldr	r3, [pc, #420]	; (87300 <Cl_Dlsis_BypassOff+0x1d8>)
   8715a:	681b      	ldr	r3, [r3, #0]
   8715c:	b2da      	uxtb	r2, r3
   8715e:	4b65      	ldr	r3, [pc, #404]	; (872f4 <Cl_Dlsis_BypassOff+0x1cc>)
   87160:	70da      	strb	r2, [r3, #3]
	  DlsisTime.Cl_dlsisTotalhourscounter = Cl_dlsisTotalhourscounter_1 ;
   87162:	4b68      	ldr	r3, [pc, #416]	; (87304 <Cl_Dlsis_BypassOff+0x1dc>)
   87164:	681b      	ldr	r3, [r3, #0]
   87166:	b2da      	uxtb	r2, r3
   87168:	4b62      	ldr	r3, [pc, #392]	; (872f4 <Cl_Dlsis_BypassOff+0x1cc>)
   8716a:	711a      	strb	r2, [r3, #4]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   8716c:	2001      	movs	r0, #1
   8716e:	2101      	movs	r1, #1
   87170:	4b65      	ldr	r3, [pc, #404]	; (87308 <Cl_Dlsis_BypassOff+0x1e0>)
   87172:	4798      	blx	r3
   87174:	4603      	mov	r3, r0
   87176:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   87178:	203d      	movs	r0, #61	; 0x3d
   8717a:	2101      	movs	r1, #1
   8717c:	4b62      	ldr	r3, [pc, #392]	; (87308 <Cl_Dlsis_BypassOff+0x1e0>)
   8717e:	4798      	blx	r3
   87180:	4603      	mov	r3, r0
   87182:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,true);
   87184:	203e      	movs	r0, #62	; 0x3e
   87186:	2101      	movs	r1, #1
   87188:	4b5f      	ldr	r3, [pc, #380]	; (87308 <Cl_Dlsis_BypassOff+0x1e0>)
   8718a:	4798      	blx	r3
   8718c:	4603      	mov	r3, r0
   8718e:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,true );
   87190:	2005      	movs	r0, #5
   87192:	2101      	movs	r1, #1
   87194:	4b5c      	ldr	r3, [pc, #368]	; (87308 <Cl_Dlsis_BypassOff+0x1e0>)
   87196:	4798      	blx	r3
   87198:	4603      	mov	r3, r0
   8719a:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,true );
   8719c:	2006      	movs	r0, #6
   8719e:	2101      	movs	r1, #1
   871a0:	4b59      	ldr	r3, [pc, #356]	; (87308 <Cl_Dlsis_BypassOff+0x1e0>)
   871a2:	4798      	blx	r3
   871a4:	4603      	mov	r3, r0
   871a6:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   871a8:	2003      	movs	r0, #3
   871aa:	2100      	movs	r1, #0
   871ac:	4b56      	ldr	r3, [pc, #344]	; (87308 <Cl_Dlsis_BypassOff+0x1e0>)
   871ae:	4798      	blx	r3
   871b0:	4603      	mov	r3, r0
   871b2:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   871b4:	2004      	movs	r0, #4
   871b6:	2100      	movs	r1, #0
   871b8:	4b53      	ldr	r3, [pc, #332]	; (87308 <Cl_Dlsis_BypassOff+0x1e0>)
   871ba:	4798      	blx	r3
   871bc:	4603      	mov	r3, r0
   871be:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
   871c0:	2007      	movs	r0, #7
   871c2:	2101      	movs	r1, #1
   871c4:	4b50      	ldr	r3, [pc, #320]	; (87308 <Cl_Dlsis_BypassOff+0x1e0>)
   871c6:	4798      	blx	r3
   871c8:	4603      	mov	r3, r0
   871ca:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true );
   871cc:	2008      	movs	r0, #8
   871ce:	2101      	movs	r1, #1
   871d0:	4b4d      	ldr	r3, [pc, #308]	; (87308 <Cl_Dlsis_BypassOff+0x1e0>)
   871d2:	4798      	blx	r3
   871d4:	4603      	mov	r3, r0
   871d6:	71fb      	strb	r3, [r7, #7]
	  //Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(ACID_IN_CLOSED,true );
   871d8:	202a      	movs	r0, #42	; 0x2a
   871da:	2101      	movs	r1, #1
   871dc:	4b4a      	ldr	r3, [pc, #296]	; (87308 <Cl_Dlsis_BypassOff+0x1e0>)
   871de:	4798      	blx	r3
   871e0:	4603      	mov	r3, r0
   871e2:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BICARB_IN_CLOSED,true );
   871e4:	202c      	movs	r0, #44	; 0x2c
   871e6:	2101      	movs	r1, #1
   871e8:	4b47      	ldr	r3, [pc, #284]	; (87308 <Cl_Dlsis_BypassOff+0x1e0>)
   871ea:	4798      	blx	r3
   871ec:	4603      	mov	r3, r0
   871ee:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   871f0:	2029      	movs	r0, #41	; 0x29
   871f2:	2100      	movs	r1, #0
   871f4:	4b44      	ldr	r3, [pc, #272]	; (87308 <Cl_Dlsis_BypassOff+0x1e0>)
   871f6:	4798      	blx	r3
   871f8:	4603      	mov	r3, r0
   871fa:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   871fc:	202b      	movs	r0, #43	; 0x2b
   871fe:	2100      	movs	r1, #0
   87200:	4b41      	ldr	r3, [pc, #260]	; (87308 <Cl_Dlsis_BypassOff+0x1e0>)
   87202:	4798      	blx	r3
   87204:	4603      	mov	r3, r0
   87206:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   87208:	2021      	movs	r0, #33	; 0x21
   8720a:	2100      	movs	r1, #0
   8720c:	4b3e      	ldr	r3, [pc, #248]	; (87308 <Cl_Dlsis_BypassOff+0x1e0>)
   8720e:	4798      	blx	r3
   87210:	4603      	mov	r3, r0
   87212:	71fb      	strb	r3, [r7, #7]
	  //Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLD_EVENT,true );
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
   87214:	2013      	movs	r0, #19
   87216:	2101      	movs	r1, #1
   87218:	4b3b      	ldr	r3, [pc, #236]	; (87308 <Cl_Dlsis_BypassOff+0x1e0>)
   8721a:	4798      	blx	r3
   8721c:	4603      	mov	r3, r0
   8721e:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
   87220:	2014      	movs	r0, #20
   87222:	2101      	movs	r1, #1
   87224:	4b38      	ldr	r3, [pc, #224]	; (87308 <Cl_Dlsis_BypassOff+0x1e0>)
   87226:	4798      	blx	r3
   87228:	4603      	mov	r3, r0
   8722a:	71fb      	strb	r3, [r7, #7]
	  
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   8722c:	2015      	movs	r0, #21
   8722e:	2101      	movs	r1, #1
   87230:	4b35      	ldr	r3, [pc, #212]	; (87308 <Cl_Dlsis_BypassOff+0x1e0>)
   87232:	4798      	blx	r3
   87234:	4603      	mov	r3, r0
   87236:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   87238:	2016      	movs	r0, #22
   8723a:	2101      	movs	r1, #1
   8723c:	4b32      	ldr	r3, [pc, #200]	; (87308 <Cl_Dlsis_BypassOff+0x1e0>)
   8723e:	4798      	blx	r3
   87240:	4603      	mov	r3, r0
   87242:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   87244:	2017      	movs	r0, #23
   87246:	2101      	movs	r1, #1
   87248:	4b2f      	ldr	r3, [pc, #188]	; (87308 <Cl_Dlsis_BypassOff+0x1e0>)
   8724a:	4798      	blx	r3
   8724c:	4603      	mov	r3, r0
   8724e:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   87250:	2018      	movs	r0, #24
   87252:	2101      	movs	r1, #1
   87254:	4b2c      	ldr	r3, [pc, #176]	; (87308 <Cl_Dlsis_BypassOff+0x1e0>)
   87256:	4798      	blx	r3
   87258:	4603      	mov	r3, r0
   8725a:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,true );
   8725c:	2027      	movs	r0, #39	; 0x27
   8725e:	2101      	movs	r1, #1
   87260:	4b29      	ldr	r3, [pc, #164]	; (87308 <Cl_Dlsis_BypassOff+0x1e0>)
   87262:	4798      	blx	r3
   87264:	4603      	mov	r3, r0
   87266:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD,true );
   87268:	2028      	movs	r0, #40	; 0x28
   8726a:	2101      	movs	r1, #1
   8726c:	4b26      	ldr	r3, [pc, #152]	; (87308 <Cl_Dlsis_BypassOff+0x1e0>)
   8726e:	4798      	blx	r3
   87270:	4603      	mov	r3, r0
   87272:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BP_STOPPED,true );
   87274:	203f      	movs	r0, #63	; 0x3f
   87276:	2101      	movs	r1, #1
   87278:	4b23      	ldr	r3, [pc, #140]	; (87308 <Cl_Dlsis_BypassOff+0x1e0>)
   8727a:	4798      	blx	r3
   8727c:	4603      	mov	r3, r0
   8727e:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TMP_HIGH,true );
   87280:	2041      	movs	r0, #65	; 0x41
   87282:	2101      	movs	r1, #1
   87284:	4b20      	ldr	r3, [pc, #128]	; (87308 <Cl_Dlsis_BypassOff+0x1e0>)
   87286:	4798      	blx	r3
   87288:	4603      	mov	r3, r0
   8728a:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TMP_LOW,true );
   8728c:	2042      	movs	r0, #66	; 0x42
   8728e:	2101      	movs	r1, #1
   87290:	4b1d      	ldr	r3, [pc, #116]	; (87308 <Cl_Dlsis_BypassOff+0x1e0>)
   87292:	4798      	blx	r3
   87294:	4603      	mov	r3, r0
   87296:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BC_ALARM,true );
   87298:	201a      	movs	r0, #26
   8729a:	2101      	movs	r1, #1
   8729c:	4b1a      	ldr	r3, [pc, #104]	; (87308 <Cl_Dlsis_BypassOff+0x1e0>)
   8729e:	4798      	blx	r3
   872a0:	4603      	mov	r3, r0
   872a2:	71fb      	strb	r3, [r7, #7]
	  
	  
	//Cl_dlsisretcode =  sv_cntrl_activatepump(UFPUMP);
	cl_dlsis_state = CL_DLSIS_STATE_WAIT_FOR_TEMP_COND_STABILITY;//CL_DLSIS_STATE_DIALYSIS;
   872a4:	4b19      	ldr	r3, [pc, #100]	; (8730c <Cl_Dlsis_BypassOff+0x1e4>)
   872a6:	2202      	movs	r2, #2
   872a8:	701a      	strb	r2, [r3, #0]
 	Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_BYPASS_OFF,&data,0);
   872aa:	1dbb      	adds	r3, r7, #6
   872ac:	2042      	movs	r0, #66	; 0x42
   872ae:	4619      	mov	r1, r3
   872b0:	2200      	movs	r2, #0
   872b2:	4b17      	ldr	r3, [pc, #92]	; (87310 <Cl_Dlsis_BypassOff+0x1e8>)
   872b4:	4798      	blx	r3
   872b6:	4603      	mov	r3, r0
   872b8:	71fb      	strb	r3, [r7, #7]
	 cl_wait(20);
   872ba:	2014      	movs	r0, #20
   872bc:	4b15      	ldr	r3, [pc, #84]	; (87314 <Cl_Dlsis_BypassOff+0x1ec>)
   872be:	4798      	blx	r3
 	Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_RESUMED,&data,0);
   872c0:	1dbb      	adds	r3, r7, #6
   872c2:	2043      	movs	r0, #67	; 0x43
   872c4:	4619      	mov	r1, r3
   872c6:	2200      	movs	r2, #0
   872c8:	4b11      	ldr	r3, [pc, #68]	; (87310 <Cl_Dlsis_BypassOff+0x1e8>)
   872ca:	4798      	blx	r3
   872cc:	4603      	mov	r3, r0
   872ce:	71fb      	strb	r3, [r7, #7]
 		Cl_Dlsis_UpdateTimeInfo();
   872d0:	4b11      	ldr	r3, [pc, #68]	; (87318 <Cl_Dlsis_BypassOff+0x1f0>)
   872d2:	4798      	blx	r3
 	bypass_flag = 1;
   872d4:	4b11      	ldr	r3, [pc, #68]	; (8731c <Cl_Dlsis_BypassOff+0x1f4>)
   872d6:	2201      	movs	r2, #1
   872d8:	701a      	strb	r2, [r3, #0]
// 	
 	cl_uf_controller(CL_UF_EVENT_START,0);
   872da:	2002      	movs	r0, #2
   872dc:	2100      	movs	r1, #0
   872de:	4b10      	ldr	r3, [pc, #64]	; (87320 <Cl_Dlsis_BypassOff+0x1f8>)
   872e0:	4798      	blx	r3
// 	cl_ufpumpFeedback_start();
// 	
return CL_OK;
   872e2:	2300      	movs	r3, #0
}
   872e4:	4618      	mov	r0, r3
   872e6:	3708      	adds	r7, #8
   872e8:	46bd      	mov	sp, r7
   872ea:	bd80      	pop	{r7, pc}
   872ec:	0009b5b1 	.word	0x0009b5b1
   872f0:	20071a4c 	.word	0x20071a4c
   872f4:	2007232c 	.word	0x2007232c
   872f8:	20071a54 	.word	0x20071a54
   872fc:	20071a50 	.word	0x20071a50
   87300:	20071a58 	.word	0x20071a58
   87304:	20071a5c 	.word	0x20071a5c
   87308:	00082a35 	.word	0x00082a35
   8730c:	20071a48 	.word	0x20071a48
   87310:	0009d1e9 	.word	0x0009d1e9
   87314:	0009421d 	.word	0x0009421d
   87318:	000867d1 	.word	0x000867d1
   8731c:	20071a66 	.word	0x20071a66
   87320:	00097499 	.word	0x00097499

00087324 <Cl_Dlsis_PauseDialysis>:


Cl_ReturnCodeType Cl_Dlsis_PauseDialysis(void)
{
   87324:	b580      	push	{r7, lr}
   87326:	b082      	sub	sp, #8
   87328:	af00      	add	r7, sp, #0
		Cl_Uint8Type data;
		Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   8732a:	2300      	movs	r3, #0
   8732c:	71fb      	strb	r3, [r7, #7]
		
		if(!(cl_dlsis_state == CL_DLSIS_STATE_IDLE ) )
   8732e:	4b0f      	ldr	r3, [pc, #60]	; (8736c <Cl_Dlsis_PauseDialysis+0x48>)
   87330:	781b      	ldrb	r3, [r3, #0]
   87332:	2b00      	cmp	r3, #0
   87334:	d015      	beq.n	87362 <Cl_Dlsis_PauseDialysis+0x3e>
		
		switch (cl_dlsis_state)
   87336:	4b0d      	ldr	r3, [pc, #52]	; (8736c <Cl_Dlsis_PauseDialysis+0x48>)
   87338:	781b      	ldrb	r3, [r3, #0]
   8733a:	3b02      	subs	r3, #2
   8733c:	2b03      	cmp	r3, #3
   8733e:	d80f      	bhi.n	87360 <Cl_Dlsis_PauseDialysis+0x3c>
			case CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT:
			case CL_DLSIS_STATE_DIALYSIS:
			case CL_DLSIS_STATE_UF_ACTIVATION:
			
	
			Cl_dlsisretcode = sv_cntrl_enable_bypass();
   87340:	4b0b      	ldr	r3, [pc, #44]	; (87370 <Cl_Dlsis_PauseDialysis+0x4c>)
   87342:	4798      	blx	r3
   87344:	4603      	mov	r3, r0
   87346:	71fb      	strb	r3, [r7, #7]
					//	Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
					//	Cl_dlsisretcode = sv_cntrl_poweroffheater();
					//	Cl_dlsisretcode = SetHeaterState(CL_HEATER_STATE_OFF);
					//	cl_bp_controller(CL_BP_EVENT_STOP,0);
					//	Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
						cl_dlsis_state = CL_DLSIS_STATE_PAUSED;
   87348:	4b08      	ldr	r3, [pc, #32]	; (8736c <Cl_Dlsis_PauseDialysis+0x48>)
   8734a:	2207      	movs	r2, #7
   8734c:	701a      	strb	r2, [r3, #0]
						Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_PAUSED,&data,0);
   8734e:	1dbb      	adds	r3, r7, #6
   87350:	2040      	movs	r0, #64	; 0x40
   87352:	4619      	mov	r1, r3
   87354:	2200      	movs	r2, #0
   87356:	4b07      	ldr	r3, [pc, #28]	; (87374 <Cl_Dlsis_PauseDialysis+0x50>)
   87358:	4798      	blx	r3
   8735a:	4603      	mov	r3, r0
   8735c:	71fb      	strb	r3, [r7, #7]
			
			break;
   8735e:	e000      	b.n	87362 <Cl_Dlsis_PauseDialysis+0x3e>
			default:break;
   87360:	bf00      	nop
		}
return CL_OK;
   87362:	2300      	movs	r3, #0
	
}
   87364:	4618      	mov	r0, r3
   87366:	3708      	adds	r7, #8
   87368:	46bd      	mov	sp, r7
   8736a:	bd80      	pop	{r7, pc}
   8736c:	20071a48 	.word	0x20071a48
   87370:	0009b595 	.word	0x0009b595
   87374:	0009d1e9 	.word	0x0009d1e9

00087378 <Cl_Dlsis_ProcessAlarms>:
Cl_ReturnCodeType Cl_Dlsis_ProcessAlarms( )
{
   87378:	b580      	push	{r7, lr}
   8737a:	b082      	sub	sp, #8
   8737c:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   8737e:	2300      	movs	r3, #0
   87380:	71fb      	strb	r3, [r7, #7]
		ClDlsisAlarmIdType  ClDlsisAlarmId;
		Cl_Uint8Type data;
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   87382:	2359      	movs	r3, #89	; 0x59
   87384:	71bb      	strb	r3, [r7, #6]
		Cl_NewAlarmIdType cl_alarmid;
		
	   Cl_dlsisretcode = Cl_Dlsis_UpdateAlarmTable(&ClDlsisAlarmId);
   87386:	1d7b      	adds	r3, r7, #5
   87388:	4618      	mov	r0, r3
   8738a:	4b04      	ldr	r3, [pc, #16]	; (8739c <Cl_Dlsis_ProcessAlarms+0x24>)
   8738c:	4798      	blx	r3
   8738e:	4603      	mov	r3, r0
   87390:	71fb      	strb	r3, [r7, #7]
	//   	Cl_rinseretcode =	Cl_Alarm_GetLastAlarm(&cl_rinsealarmid);
	//   	data = (Cl_Uint8Type)cl_rinsealarmid;
	//   	command = CON_TX_COMMAND_ALARM;
	//   	Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
		   
		   return (Cl_dlsisretcode );
   87392:	79fb      	ldrb	r3, [r7, #7]
	   	
}
   87394:	4618      	mov	r0, r3
   87396:	3708      	adds	r7, #8
   87398:	46bd      	mov	sp, r7
   8739a:	bd80      	pop	{r7, pc}
   8739c:	00086919 	.word	0x00086919

000873a0 <Cl_DlsisFillingFlowOff>:
	return Cl_RetVal;
	
}

Cl_ReturnCodeType  Cl_DlsisFillingFlowOff(void )
{
   873a0:	b580      	push	{r7, lr}
   873a2:	b082      	sub	sp, #8
   873a4:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_RetVal = CL_OK;
   873a6:	2300      	movs	r3, #0
   873a8:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_deactivate_valve(VALVE_ID1);
   873aa:	2001      	movs	r0, #1
   873ac:	4b03      	ldr	r3, [pc, #12]	; (873bc <Cl_DlsisFillingFlowOff+0x1c>)
   873ae:	4798      	blx	r3
	//cl_gfillinprogress = false;
	return Cl_RetVal;
   873b0:	79fb      	ldrb	r3, [r7, #7]
	
}
   873b2:	4618      	mov	r0, r3
   873b4:	3708      	adds	r7, #8
   873b6:	46bd      	mov	sp, r7
   873b8:	bd80      	pop	{r7, pc}
   873ba:	bf00      	nop
   873bc:	0009b409 	.word	0x0009b409

000873c0 <Cl_Dlsis_ResetAlertsforReassertion>:
Cl_ReturnCodeType Cl_Dlsis_ResetAlertsforReassertion(void )
{
   873c0:	b580      	push	{r7, lr}
   873c2:	b082      	sub	sp, #8
   873c4:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   873c6:	2300      	movs	r3, #0
   873c8:	71fb      	strb	r3, [r7, #7]
	ClDlsisAlarmIdType ClDlsisAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   873ca:	2359      	movs	r3, #89	; 0x59
   873cc:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_dlsisalarmid;
	
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_HOLDER1STATUS_CLOSE].IsRaised = false;
   873ce:	4b88      	ldr	r3, [pc, #544]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   873d0:	2200      	movs	r2, #0
   873d2:	70da      	strb	r2, [r3, #3]
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_HOLDER2STATUS_CLOSE].IsRaised = false;
   873d4:	4b86      	ldr	r3, [pc, #536]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   873d6:	2200      	movs	r2, #0
   873d8:	729a      	strb	r2, [r3, #10]
	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
   873da:	2005      	movs	r0, #5
   873dc:	4b85      	ldr	r3, [pc, #532]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   873de:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
   873e0:	2006      	movs	r0, #6
   873e2:	4b84      	ldr	r3, [pc, #528]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   873e4:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   873e6:	4b82      	ldr	r3, [pc, #520]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   873e8:	2200      	movs	r2, #0
   873ea:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
   873ee:	2001      	movs	r0, #1
   873f0:	4b80      	ldr	r3, [pc, #512]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   873f2:	4798      	blx	r3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_HIGH].IsRaised = false;
	//Cl_AlarmResetAlarm(COND_STATUS_HIGH);
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_OPEN].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_RO].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_HIGH].IsRaised = false;
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   873f4:	4b7e      	ldr	r3, [pc, #504]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   873f6:	2200      	movs	r2, #0
   873f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   873fc:	4b7c      	ldr	r3, [pc, #496]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   873fe:	2200      	movs	r2, #0
   87400:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   87404:	2015      	movs	r0, #21
   87406:	4b7b      	ldr	r3, [pc, #492]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   87408:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   8740a:	2016      	movs	r0, #22
   8740c:	4b79      	ldr	r3, [pc, #484]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   8740e:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   87410:	4b77      	ldr	r3, [pc, #476]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   87412:	2200      	movs	r2, #0
   87414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   87418:	4b75      	ldr	r3, [pc, #468]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   8741a:	2200      	movs	r2, #0
   8741c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   87420:	2017      	movs	r0, #23
   87422:	4b74      	ldr	r3, [pc, #464]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   87424:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   87426:	2018      	movs	r0, #24
   87428:	4b72      	ldr	r3, [pc, #456]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   8742a:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   8742c:	4b70      	ldr	r3, [pc, #448]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   8742e:	2200      	movs	r2, #0
   87430:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   87434:	4b6e      	ldr	r3, [pc, #440]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   87436:	2200      	movs	r2, #0
   87438:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   8743c:	2027      	movs	r0, #39	; 0x27
   8743e:	4b6d      	ldr	r3, [pc, #436]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   87440:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   87442:	2028      	movs	r0, #40	; 0x28
   87444:	4b6b      	ldr	r3, [pc, #428]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   87446:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_BDSTATUS].IsRaised = false;
   87448:	4b69      	ldr	r3, [pc, #420]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   8744a:	2200      	movs	r2, #0
   8744c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	Cl_AlarmResetAlarm(BD_EVENT);
   87450:	2021      	movs	r0, #33	; 0x21
   87452:	4b68      	ldr	r3, [pc, #416]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   87454:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_ABDSTATUS].IsRaised = false;
   87456:	4b66      	ldr	r3, [pc, #408]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   87458:	2200      	movs	r2, #0
   8745a:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_AlarmResetAlarm(ABD_EVENT);
   8745e:	2020      	movs	r0, #32
   87460:	4b64      	ldr	r3, [pc, #400]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   87462:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_BLDSTATUS].IsRaised = false;
   87464:	4b62      	ldr	r3, [pc, #392]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   87466:	2200      	movs	r2, #0
   87468:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	Cl_AlarmResetAlarm(BLD_EVENT);
   8746c:	2022      	movs	r0, #34	; 0x22
   8746e:	4b61      	ldr	r3, [pc, #388]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   87470:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_APTSTATUS_HIGH].IsRaised = false;
   87472:	4b5f      	ldr	r3, [pc, #380]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   87474:	2200      	movs	r2, #0
   87476:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	Cl_DlsisAlarmTable[CL_DLSIS_APTSTATUS_LOW].IsRaised = false;
   8747a:	4b5d      	ldr	r3, [pc, #372]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   8747c:	2200      	movs	r2, #0
   8747e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	Cl_AlarmResetAlarm(APTSTATUS_HIGH);
   87482:	2024      	movs	r0, #36	; 0x24
   87484:	4b5b      	ldr	r3, [pc, #364]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   87486:	4798      	blx	r3
	Cl_AlarmResetAlarm(APTSTATUS_LOW);
   87488:	2023      	movs	r0, #35	; 0x23
   8748a:	4b5a      	ldr	r3, [pc, #360]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   8748c:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_VPTSTATUS_HIGH].IsRaised = false;
   8748e:	4b58      	ldr	r3, [pc, #352]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   87490:	2200      	movs	r2, #0
   87492:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	Cl_DlsisAlarmTable[CL_DLSIS_VPTSTATUS_LOW].IsRaised = false;
   87496:	4b56      	ldr	r3, [pc, #344]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   87498:	2200      	movs	r2, #0
   8749a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	Cl_AlarmResetAlarm(VPTSTATUS_HIGH);
   8749e:	2026      	movs	r0, #38	; 0x26
   874a0:	4b54      	ldr	r3, [pc, #336]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   874a2:	4798      	blx	r3
	Cl_AlarmResetAlarm(VPTSTATUS_LOW);
   874a4:	2025      	movs	r0, #37	; 0x25
   874a6:	4b53      	ldr	r3, [pc, #332]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   874a8:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_COND_STATUS_LOW].IsRaised = false;
   874aa:	4b51      	ldr	r3, [pc, #324]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   874ac:	2200      	movs	r2, #0
   874ae:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	Cl_DlsisAlarmTable[CL_DLSIS_COND_STATUS_HIGH].IsRaised = false;
   874b2:	4b4f      	ldr	r3, [pc, #316]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   874b4:	2200      	movs	r2, #0
   874b6:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	Cl_AlarmResetAlarm(COND_STATUS_LOW);
   874ba:	2007      	movs	r0, #7
   874bc:	4b4d      	ldr	r3, [pc, #308]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   874be:	4798      	blx	r3
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   874c0:	2008      	movs	r0, #8
   874c2:	4b4c      	ldr	r3, [pc, #304]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   874c4:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   874c6:	4b4a      	ldr	r3, [pc, #296]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   874c8:	2200      	movs	r2, #0
   874ca:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   874ce:	4b48      	ldr	r3, [pc, #288]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   874d0:	2200      	movs	r2, #0
   874d2:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	Cl_AlarmResetAlarm(TEMP3_HIGH_THRESHOLD);
   874d6:	2013      	movs	r0, #19
   874d8:	4b46      	ldr	r3, [pc, #280]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   874da:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP3_LOW_THRESHOLD);
   874dc:	2014      	movs	r0, #20
   874de:	4b45      	ldr	r3, [pc, #276]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   874e0:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   874e2:	4b43      	ldr	r3, [pc, #268]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   874e4:	2200      	movs	r2, #0
   874e6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP2_LOW_THRESHOLD].IsRaised = false;
   874ea:	4b41      	ldr	r3, [pc, #260]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   874ec:	2200      	movs	r2, #0
   874ee:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   874f2:	2011      	movs	r0, #17
   874f4:	4b3f      	ldr	r3, [pc, #252]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   874f6:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   874f8:	2012      	movs	r0, #18
   874fa:	4b3e      	ldr	r3, [pc, #248]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   874fc:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP1_HIGH_THRESHOLD].IsRaised = false;
   874fe:	4b3c      	ldr	r3, [pc, #240]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   87500:	2200      	movs	r2, #0
   87502:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP1_LOW_THRESHOLD].IsRaised = false;
   87506:	4b3a      	ldr	r3, [pc, #232]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   87508:	2200      	movs	r2, #0
   8750a:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	Cl_AlarmResetAlarm(TEMP1_HIGH_THRESHOLD);
   8750e:	200f      	movs	r0, #15
   87510:	4b38      	ldr	r3, [pc, #224]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   87512:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP1_LOW_THRESHOLD);
   87514:	2010      	movs	r0, #16
   87516:	4b37      	ldr	r3, [pc, #220]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   87518:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_BP_STOPPED].IsRaised = false;
   8751a:	4b35      	ldr	r3, [pc, #212]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   8751c:	2200      	movs	r2, #0
   8751e:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	Cl_AlarmResetAlarm(BP_STOPPED);
   87522:	203f      	movs	r0, #63	; 0x3f
   87524:	4b33      	ldr	r3, [pc, #204]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   87526:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_POWER_FAILURE].IsRaised = false;
   87528:	4b31      	ldr	r3, [pc, #196]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   8752a:	2200      	movs	r2, #0
   8752c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	Cl_AlarmResetAlarm(POWER_FAILURE);
   87530:	201d      	movs	r0, #29
   87532:	4b30      	ldr	r3, [pc, #192]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   87534:	4798      	blx	r3
	
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_ACID_IN].IsRaised = false;
   87536:	4b2e      	ldr	r3, [pc, #184]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   87538:	2200      	movs	r2, #0
   8753a:	745a      	strb	r2, [r3, #17]
	Cl_AlarmResetAlarm(ACID_IN_CLOSED);
   8753c:	202a      	movs	r0, #42	; 0x2a
   8753e:	4b2d      	ldr	r3, [pc, #180]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   87540:	4798      	blx	r3
	
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_BICAR_IN].IsRaised = false;
   87542:	4b2b      	ldr	r3, [pc, #172]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   87544:	2200      	movs	r2, #0
   87546:	761a      	strb	r2, [r3, #24]
	Cl_AlarmResetAlarm(BICARB_IN_CLOSED);
   87548:	202c      	movs	r0, #44	; 0x2c
   8754a:	4b2a      	ldr	r3, [pc, #168]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   8754c:	4798      	blx	r3
	
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TMP_HIGH].IsRaised = false;
   8754e:	4b28      	ldr	r3, [pc, #160]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   87550:	2200      	movs	r2, #0
   87552:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
	Cl_AlarmResetAlarm(TMP_HIGH);
   87556:	2041      	movs	r0, #65	; 0x41
   87558:	4b26      	ldr	r3, [pc, #152]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   8755a:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TMP_LOW].IsRaised = false;
   8755c:	4b24      	ldr	r3, [pc, #144]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   8755e:	2200      	movs	r2, #0
   87560:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
	Cl_AlarmResetAlarm(TMP_LOW);
   87564:	2042      	movs	r0, #66	; 0x42
   87566:	4b23      	ldr	r3, [pc, #140]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   87568:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_BCALARM].IsRaised = false;
   8756a:	4b21      	ldr	r3, [pc, #132]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   8756c:	2200      	movs	r2, #0
   8756e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	Cl_AlarmResetAlarm(BC_ALARM);
   87572:	201a      	movs	r0, #26
   87574:	4b1f      	ldr	r3, [pc, #124]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   87576:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_BLOODNOTDETECTED].IsRaised = false;
   87578:	4b1d      	ldr	r3, [pc, #116]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   8757a:	2200      	movs	r2, #0
   8757c:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
	Cl_AlarmResetAlarm(BLOOD_NOT_DETECTED);
   87580:	2040      	movs	r0, #64	; 0x40
   87582:	4b1c      	ldr	r3, [pc, #112]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   87584:	4798      	blx	r3
	
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_HPOVERRUN].IsRaised = false;
   87586:	4b1a      	ldr	r3, [pc, #104]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   87588:	2200      	movs	r2, #0
   8758a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
	Cl_AlarmResetAlarm(HP_OVERRUN);
   8758e:	2034      	movs	r0, #52	; 0x34
   87590:	4b18      	ldr	r3, [pc, #96]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   87592:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_HPUNDERRUN].IsRaised = false;
   87594:	4b16      	ldr	r3, [pc, #88]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   87596:	2200      	movs	r2, #0
   87598:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
	Cl_AlarmResetAlarm(HP_UNDERRUN);
   8759c:	2035      	movs	r0, #53	; 0x35
   8759e:	4b15      	ldr	r3, [pc, #84]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   875a0:	4798      	blx	r3
	
	
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_BPOVERRUN].IsRaised = false;
   875a2:	4b13      	ldr	r3, [pc, #76]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   875a4:	2200      	movs	r2, #0
   875a6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
	Cl_AlarmResetAlarm(BP_OVERRUN);
   875aa:	2036      	movs	r0, #54	; 0x36
   875ac:	4b11      	ldr	r3, [pc, #68]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   875ae:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_BPUNDERRUN].IsRaised = false;
   875b0:	4b0f      	ldr	r3, [pc, #60]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   875b2:	2200      	movs	r2, #0
   875b4:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
	Cl_AlarmResetAlarm(BP_UNDERRUN);
   875b8:	2037      	movs	r0, #55	; 0x37
   875ba:	4b0e      	ldr	r3, [pc, #56]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   875bc:	4798      	blx	r3
// 	Cl_AlarmResetAlarm(HOLDER1STATUS_OPEN);
// //	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
// 	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_HOLDER2STATUS_OPEN].IsRaised = false;
// 	Cl_AlarmResetAlarm(HOLDER2STATUS_OPEN);
//	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_FLOW_NO_FLOW].IsRaised = false;
   875be:	4b0c      	ldr	r3, [pc, #48]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   875c0:	2200      	movs	r2, #0
   875c2:	77da      	strb	r2, [r3, #31]
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
   875c4:	4b0a      	ldr	r3, [pc, #40]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   875c6:	2200      	movs	r2, #0
   875c8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_FLOW_HIGH_FLOWRATE].IsRaised = false;
   875cc:	4b08      	ldr	r3, [pc, #32]	; (875f0 <Cl_Dlsis_ResetAlertsforReassertion+0x230>)
   875ce:	2200      	movs	r2, #0
   875d0:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_LEVEL_SWITCH_LOW_TOGGLERATE].IsRaised = false;
	Cl_AlarmResetAlarm(FLOW_NO_FLOW);
   875d4:	200c      	movs	r0, #12
   875d6:	4b07      	ldr	r3, [pc, #28]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   875d8:	4798      	blx	r3
	Cl_AlarmResetAlarm(FLOW_HIGH_FLOWRATE);
   875da:	200e      	movs	r0, #14
   875dc:	4b05      	ldr	r3, [pc, #20]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   875de:	4798      	blx	r3
	Cl_AlarmResetAlarm(FLOW_LOW_FLOWRATE);
   875e0:	200d      	movs	r0, #13
   875e2:	4b04      	ldr	r3, [pc, #16]	; (875f4 <Cl_Dlsis_ResetAlertsforReassertion+0x234>)
   875e4:	4798      	blx	r3
	
	
	
	return (Cl_dlsisretcode);
   875e6:	79fb      	ldrb	r3, [r7, #7]
}
   875e8:	4618      	mov	r0, r3
   875ea:	3708      	adds	r7, #8
   875ec:	46bd      	mov	sp, r7
   875ee:	bd80      	pop	{r7, pc}
   875f0:	200705d4 	.word	0x200705d4
   875f4:	00082b25 	.word	0x00082b25

000875f8 <Cl_Dlsis_SenddlsisData>:

Cl_ReturnCodeType Cl_Dlsis_SenddlsisData(void)
{
   875f8:	b580      	push	{r7, lr}
   875fa:	b094      	sub	sp, #80	; 0x50
   875fc:	af00      	add	r7, sp, #0
	static float cond = 0;
	Cl_Uint8Type systemdataarray[44] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   875fe:	f107 031c 	add.w	r3, r7, #28
   87602:	2200      	movs	r2, #0
   87604:	601a      	str	r2, [r3, #0]
   87606:	3304      	adds	r3, #4
   87608:	2200      	movs	r2, #0
   8760a:	601a      	str	r2, [r3, #0]
   8760c:	3304      	adds	r3, #4
   8760e:	2200      	movs	r2, #0
   87610:	601a      	str	r2, [r3, #0]
   87612:	3304      	adds	r3, #4
   87614:	2200      	movs	r2, #0
   87616:	601a      	str	r2, [r3, #0]
   87618:	3304      	adds	r3, #4
   8761a:	2200      	movs	r2, #0
   8761c:	601a      	str	r2, [r3, #0]
   8761e:	3304      	adds	r3, #4
   87620:	2200      	movs	r2, #0
   87622:	601a      	str	r2, [r3, #0]
   87624:	3304      	adds	r3, #4
   87626:	2200      	movs	r2, #0
   87628:	601a      	str	r2, [r3, #0]
   8762a:	3304      	adds	r3, #4
   8762c:	2200      	movs	r2, #0
   8762e:	601a      	str	r2, [r3, #0]
   87630:	3304      	adds	r3, #4
   87632:	2200      	movs	r2, #0
   87634:	601a      	str	r2, [r3, #0]
   87636:	3304      	adds	r3, #4
   87638:	2200      	movs	r2, #0
   8763a:	601a      	str	r2, [r3, #0]
   8763c:	3304      	adds	r3, #4
   8763e:	2200      	movs	r2, #0
   87640:	601a      	str	r2, [r3, #0]
   87642:	3304      	adds	r3, #4
	cl_DlsisDatatype tempdata;
	Cl_Uint16Type temp=0, temp1=0 ,apt=0,vpt=0, temp2ui = 0 , ps1ui = 0 , ps2ui = 0 , ps1tmp = 0 , ps2tmp = 0;
   87644:	2300      	movs	r3, #0
   87646:	827b      	strh	r3, [r7, #18]
   87648:	2300      	movs	r3, #0
   8764a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
   8764e:	2300      	movs	r3, #0
   87650:	823b      	strh	r3, [r7, #16]
   87652:	2300      	movs	r3, #0
   87654:	81fb      	strh	r3, [r7, #14]
   87656:	2300      	movs	r3, #0
   87658:	81bb      	strh	r3, [r7, #12]
   8765a:	2300      	movs	r3, #0
   8765c:	817b      	strh	r3, [r7, #10]
   8765e:	2300      	movs	r3, #0
   87660:	813b      	strh	r3, [r7, #8]
   87662:	2300      	movs	r3, #0
   87664:	80fb      	strh	r3, [r7, #6]
   87666:	2300      	movs	r3, #0
   87668:	80bb      	strh	r3, [r7, #4]
	static float avgtmp3=0,ps1=0,ps2=0 , ts2 = 0  ;
	static Cl_Uint32Type timecount = 0;
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   8766a:	2300      	movs	r3, #0
   8766c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	Cl_Uint8Type count = 0;
   87670:	2300      	movs	r3, #0
   87672:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   87676:	2359      	movs	r3, #89	; 0x59
   87678:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	Cl_Uint16Type sensordatamillivolts;
	command = CON_TX_COMMAND_CL_SYS_STATE_DATA ;
   8767c:	232a      	movs	r3, #42	; 0x2a
   8767e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	systemdataarray[0] = DIALYSIS_DATA;
   87682:	2305      	movs	r3, #5
   87684:	773b      	strb	r3, [r7, #28]
	count++;
   87686:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   8768a:	3301      	adds	r3, #1
   8768c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	averaging_count++;
   87690:	4bd1      	ldr	r3, [pc, #836]	; (879d8 <Cl_Dlsis_SenddlsisData+0x3e0>)
   87692:	781b      	ldrb	r3, [r3, #0]
   87694:	3301      	adds	r3, #1
   87696:	b2da      	uxtb	r2, r3
   87698:	4bcf      	ldr	r3, [pc, #828]	; (879d8 <Cl_Dlsis_SenddlsisData+0x3e0>)
   8769a:	701a      	strb	r2, [r3, #0]
	APT,
	VPT,
	TMP,
	UF_REMOVED
	*/
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   8769c:	f107 0312 	add.w	r3, r7, #18
   876a0:	2014      	movs	r0, #20
   876a2:	4619      	mov	r1, r3
   876a4:	4bcd      	ldr	r3, [pc, #820]	; (879dc <Cl_Dlsis_SenddlsisData+0x3e4>)
   876a6:	4798      	blx	r3
// 							res_temp_lookuptable(cal_data);
// 							//	tmp3 =	(tmp3*5 + res_temp_value)/6;
// 							temp1 = res_temp_value/10;
// //							temp1 = temp1 - 3.1+1.4;                                  // removed offset on 02.07.17
// 							temp1 = temp1 - 0.4;                                  // removed offset on 02.07.17
							temp1 = (float)temp/10;
   876a8:	8a7a      	ldrh	r2, [r7, #18]
   876aa:	4bcd      	ldr	r3, [pc, #820]	; (879e0 <Cl_Dlsis_SenddlsisData+0x3e8>)
   876ac:	4610      	mov	r0, r2
   876ae:	4798      	blx	r3
   876b0:	4602      	mov	r2, r0
   876b2:	4bcc      	ldr	r3, [pc, #816]	; (879e4 <Cl_Dlsis_SenddlsisData+0x3ec>)
   876b4:	4610      	mov	r0, r2
   876b6:	49cc      	ldr	r1, [pc, #816]	; (879e8 <Cl_Dlsis_SenddlsisData+0x3f0>)
   876b8:	4798      	blx	r3
   876ba:	4603      	mov	r3, r0
   876bc:	461a      	mov	r2, r3
   876be:	4bcb      	ldr	r3, [pc, #812]	; (879ec <Cl_Dlsis_SenddlsisData+0x3f4>)
   876c0:	4610      	mov	r0, r2
   876c2:	4798      	blx	r3
   876c4:	4603      	mov	r3, r0
   876c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						//	avgtmp3 =(avgtmp3*5 + temp1)/6;           // manav03 commented
							
		}
		
		uint16_t sensordata = 0;
   876ca:	2300      	movs	r3, #0
   876cc:	807b      	strh	r3, [r7, #2]
		Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&sensordata);
   876ce:	1cbb      	adds	r3, r7, #2
   876d0:	2007      	movs	r0, #7
   876d2:	4619      	mov	r1, r3
   876d4:	4bc1      	ldr	r3, [pc, #772]	; (879dc <Cl_Dlsis_SenddlsisData+0x3e4>)
   876d6:	4798      	blx	r3
		{
			
			
					tempdata.word = sensordata/100;
   876d8:	887b      	ldrh	r3, [r7, #2]
   876da:	4ac5      	ldr	r2, [pc, #788]	; (879f0 <Cl_Dlsis_SenddlsisData+0x3f8>)
   876dc:	fba2 2303 	umull	r2, r3, r2, r3
   876e0:	095b      	lsrs	r3, r3, #5
   876e2:	b29b      	uxth	r3, r3
   876e4:	617b      	str	r3, [r7, #20]
					systemdataarray[count++] = tempdata.bytearray[0];
   876e6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   876ea:	1c5a      	adds	r2, r3, #1
   876ec:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   876f0:	7d3a      	ldrb	r2, [r7, #20]
   876f2:	f107 0150 	add.w	r1, r7, #80	; 0x50
   876f6:	440b      	add	r3, r1
   876f8:	f803 2c34 	strb.w	r2, [r3, #-52]
					systemdataarray[count++] = tempdata.bytearray[1];
   876fc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87700:	1c5a      	adds	r2, r3, #1
   87702:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87706:	7d7a      	ldrb	r2, [r7, #21]
   87708:	f107 0150 	add.w	r1, r7, #80	; 0x50
   8770c:	440b      	add	r3, r1
   8770e:	f803 2c34 	strb.w	r2, [r3, #-52]
					systemdataarray[count++] = tempdata.bytearray[2];
   87712:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87716:	1c5a      	adds	r2, r3, #1
   87718:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   8771c:	7dba      	ldrb	r2, [r7, #22]
   8771e:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87722:	440b      	add	r3, r1
   87724:	f803 2c34 	strb.w	r2, [r3, #-52]
					systemdataarray[count++] = tempdata.bytearray[3];
   87728:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   8772c:	1c5a      	adds	r2, r3, #1
   8772e:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87732:	7dfa      	ldrb	r2, [r7, #23]
   87734:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87738:	440b      	add	r3, r1
   8773a:	f803 2c34 	strb.w	r2, [r3, #-52]
		}
		{

			tempdata.word = (temp1);  // manav03 changed avgtemp3
   8773e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   87742:	617b      	str	r3, [r7, #20]
			systemdataarray[count++] = tempdata.bytearray[0];
   87744:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87748:	1c5a      	adds	r2, r3, #1
   8774a:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   8774e:	7d3a      	ldrb	r2, [r7, #20]
   87750:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87754:	440b      	add	r3, r1
   87756:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[1];
   8775a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   8775e:	1c5a      	adds	r2, r3, #1
   87760:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87764:	7d7a      	ldrb	r2, [r7, #21]
   87766:	f107 0150 	add.w	r1, r7, #80	; 0x50
   8776a:	440b      	add	r3, r1
   8776c:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[2];
   87770:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87774:	1c5a      	adds	r2, r3, #1
   87776:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   8777a:	7dba      	ldrb	r2, [r7, #22]
   8777c:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87780:	440b      	add	r3, r1
   87782:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[3];
   87786:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   8778a:	1c5a      	adds	r2, r3, #1
   8778c:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87790:	7dfa      	ldrb	r2, [r7, #23]
   87792:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87796:	440b      	add	r3, r1
   87798:	f803 2c34 	strb.w	r2, [r3, #-52]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS,&apt); // manav03 changed from  tempdata.Twobyte to apt
   8779c:	f107 0310 	add.w	r3, r7, #16
   877a0:	200b      	movs	r0, #11
   877a2:	4619      	mov	r1, r3
   877a4:	4b8d      	ldr	r3, [pc, #564]	; (879dc <Cl_Dlsis_SenddlsisData+0x3e4>)
   877a6:	4798      	blx	r3
		{
			
			
			tempdata.word	= apt;
   877a8:	8a3b      	ldrh	r3, [r7, #16]
   877aa:	617b      	str	r3, [r7, #20]
			systemdataarray[count++] = tempdata.bytearray[0] ;
   877ac:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   877b0:	1c5a      	adds	r2, r3, #1
   877b2:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   877b6:	7d3a      	ldrb	r2, [r7, #20]
   877b8:	f107 0150 	add.w	r1, r7, #80	; 0x50
   877bc:	440b      	add	r3, r1
   877be:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   877c2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   877c6:	1c5a      	adds	r2, r3, #1
   877c8:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   877cc:	7d7a      	ldrb	r2, [r7, #21]
   877ce:	f107 0150 	add.w	r1, r7, #80	; 0x50
   877d2:	440b      	add	r3, r1
   877d4:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   877d8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   877dc:	1c5a      	adds	r2, r3, #1
   877de:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   877e2:	7dba      	ldrb	r2, [r7, #22]
   877e4:	f107 0150 	add.w	r1, r7, #80	; 0x50
   877e8:	440b      	add	r3, r1
   877ea:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   877ee:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   877f2:	1c5a      	adds	r2, r3, #1
   877f4:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   877f8:	7dfa      	ldrb	r2, [r7, #23]
   877fa:	f107 0150 	add.w	r1, r7, #80	; 0x50
   877fe:	440b      	add	r3, r1
   87800:	f803 2c34 	strb.w	r2, [r3, #-52]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS,&vpt);   // manav03 changed from  tempdata.Twobyte to vpt
   87804:	f107 030e 	add.w	r3, r7, #14
   87808:	200c      	movs	r0, #12
   8780a:	4619      	mov	r1, r3
   8780c:	4b73      	ldr	r3, [pc, #460]	; (879dc <Cl_Dlsis_SenddlsisData+0x3e4>)
   8780e:	4798      	blx	r3
		{
			
			tempdata.word	 = vpt;
   87810:	89fb      	ldrh	r3, [r7, #14]
   87812:	617b      	str	r3, [r7, #20]
			systemdataarray[count++] = tempdata.bytearray[0] ;
   87814:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87818:	1c5a      	adds	r2, r3, #1
   8781a:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   8781e:	7d3a      	ldrb	r2, [r7, #20]
   87820:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87824:	440b      	add	r3, r1
   87826:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   8782a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   8782e:	1c5a      	adds	r2, r3, #1
   87830:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87834:	7d7a      	ldrb	r2, [r7, #21]
   87836:	f107 0150 	add.w	r1, r7, #80	; 0x50
   8783a:	440b      	add	r3, r1
   8783c:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   87840:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87844:	1c5a      	adds	r2, r3, #1
   87846:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   8784a:	7dba      	ldrb	r2, [r7, #22]
   8784c:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87850:	440b      	add	r3, r1
   87852:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   87856:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   8785a:	1c5a      	adds	r2, r3, #1
   8785c:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87860:	7dfa      	ldrb	r2, [r7, #23]
   87862:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87866:	440b      	add	r3, r1
   87868:	f803 2c34 	strb.w	r2, [r3, #-52]
		}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&ps1tmp);
   8786c:	1dbb      	adds	r3, r7, #6
   8786e:	200e      	movs	r0, #14
   87870:	4619      	mov	r1, r3
   87872:	4b5a      	ldr	r3, [pc, #360]	; (879dc <Cl_Dlsis_SenddlsisData+0x3e4>)
   87874:	4798      	blx	r3
// 			ps1 = (float)tempdata.Twobyte;
// 			
// 			ps1 = (0.091009 * ps1) + 491.794;
// 			ps1=(ps1*5 + pressure_final_ps1)/6;
	
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS,&ps2tmp);
   87876:	1d3b      	adds	r3, r7, #4
   87878:	200f      	movs	r0, #15
   8787a:	4619      	mov	r1, r3
   8787c:	4b57      	ldr	r3, [pc, #348]	; (879dc <Cl_Dlsis_SenddlsisData+0x3e4>)
   8787e:	4798      	blx	r3
// 			ps2 = (float)tempdata.Twobyte;
// 			
// 			ps2 = (0.091009 * ps2) + 491.794;
// 			ps2=(ps2*5 + pressure_final_ps2)/6;
			
			tempdata.word	 = (((apt + vpt) - (ps1tmp+ps2tmp))/2)-25;
   87880:	8a3b      	ldrh	r3, [r7, #16]
   87882:	461a      	mov	r2, r3
   87884:	89fb      	ldrh	r3, [r7, #14]
   87886:	441a      	add	r2, r3
   87888:	88fb      	ldrh	r3, [r7, #6]
   8788a:	4619      	mov	r1, r3
   8788c:	88bb      	ldrh	r3, [r7, #4]
   8788e:	440b      	add	r3, r1
   87890:	1ad3      	subs	r3, r2, r3
   87892:	0fda      	lsrs	r2, r3, #31
   87894:	4413      	add	r3, r2
   87896:	105b      	asrs	r3, r3, #1
   87898:	3b19      	subs	r3, #25
   8789a:	617b      	str	r3, [r7, #20]


			systemdataarray[count++] = tempdata.bytearray[0] ;
   8789c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   878a0:	1c5a      	adds	r2, r3, #1
   878a2:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   878a6:	7d3a      	ldrb	r2, [r7, #20]
   878a8:	f107 0150 	add.w	r1, r7, #80	; 0x50
   878ac:	440b      	add	r3, r1
   878ae:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   878b2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   878b6:	1c5a      	adds	r2, r3, #1
   878b8:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   878bc:	7d7a      	ldrb	r2, [r7, #21]
   878be:	f107 0150 	add.w	r1, r7, #80	; 0x50
   878c2:	440b      	add	r3, r1
   878c4:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   878c8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   878cc:	1c5a      	adds	r2, r3, #1
   878ce:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   878d2:	7dba      	ldrb	r2, [r7, #22]
   878d4:	f107 0150 	add.w	r1, r7, #80	; 0x50
   878d8:	440b      	add	r3, r1
   878da:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   878de:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   878e2:	1c5a      	adds	r2, r3, #1
   878e4:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   878e8:	7dfa      	ldrb	r2, [r7, #23]
   878ea:	f107 0150 	add.w	r1, r7, #80	; 0x50
   878ee:	440b      	add	r3, r1
   878f0:	f803 2c34 	strb.w	r2, [r3, #-52]
// 			systemdataarray[count++] = 0x0A; // tmp
// 			systemdataarray[count++] = 0x0A; // tmp
// 			systemdataarray[count++] = 0x00;
// 			systemdataarray[count++] = 0x00;
// 			
 			tempdata.word = ufRemoved ;
   878f4:	4b3f      	ldr	r3, [pc, #252]	; (879f4 <Cl_Dlsis_SenddlsisData+0x3fc>)
   878f6:	681a      	ldr	r2, [r3, #0]
   878f8:	4b3c      	ldr	r3, [pc, #240]	; (879ec <Cl_Dlsis_SenddlsisData+0x3f4>)
   878fa:	4610      	mov	r0, r2
   878fc:	4798      	blx	r3
   878fe:	4603      	mov	r3, r0
   87900:	617b      	str	r3, [r7, #20]
 			
 			systemdataarray[count++] = tempdata.bytearray[0] ;
   87902:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87906:	1c5a      	adds	r2, r3, #1
   87908:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   8790c:	7d3a      	ldrb	r2, [r7, #20]
   8790e:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87912:	440b      	add	r3, r1
   87914:	f803 2c34 	strb.w	r2, [r3, #-52]
 			systemdataarray[count++] = tempdata.bytearray[1] ;
   87918:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   8791c:	1c5a      	adds	r2, r3, #1
   8791e:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87922:	7d7a      	ldrb	r2, [r7, #21]
   87924:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87928:	440b      	add	r3, r1
   8792a:	f803 2c34 	strb.w	r2, [r3, #-52]
 			systemdataarray[count++] = tempdata.bytearray[2] ;
   8792e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87932:	1c5a      	adds	r2, r3, #1
   87934:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87938:	7dba      	ldrb	r2, [r7, #22]
   8793a:	f107 0150 	add.w	r1, r7, #80	; 0x50
   8793e:	440b      	add	r3, r1
   87940:	f803 2c34 	strb.w	r2, [r3, #-52]
 			systemdataarray[count++] = tempdata.bytearray[3] ;
   87944:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87948:	1c5a      	adds	r2, r3, #1
   8794a:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   8794e:	7dfa      	ldrb	r2, [r7, #23]
   87950:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87954:	440b      	add	r3, r1
   87956:	f803 2c34 	strb.w	r2, [r3, #-52]
 			
			tempdata.word = (float)Treatdata[ID_ufrate] ;
   8795a:	4b27      	ldr	r3, [pc, #156]	; (879f8 <Cl_Dlsis_SenddlsisData+0x400>)
   8795c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8795e:	4b20      	ldr	r3, [pc, #128]	; (879e0 <Cl_Dlsis_SenddlsisData+0x3e8>)
   87960:	4610      	mov	r0, r2
   87962:	4798      	blx	r3
   87964:	4602      	mov	r2, r0
   87966:	4b21      	ldr	r3, [pc, #132]	; (879ec <Cl_Dlsis_SenddlsisData+0x3f4>)
   87968:	4610      	mov	r0, r2
   8796a:	4798      	blx	r3
   8796c:	4603      	mov	r3, r0
   8796e:	617b      	str	r3, [r7, #20]
			
			systemdataarray[count++] = tempdata.bytearray[0] ;
   87970:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87974:	1c5a      	adds	r2, r3, #1
   87976:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   8797a:	7d3a      	ldrb	r2, [r7, #20]
   8797c:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87980:	440b      	add	r3, r1
   87982:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   87986:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   8798a:	1c5a      	adds	r2, r3, #1
   8798c:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87990:	7d7a      	ldrb	r2, [r7, #21]
   87992:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87996:	440b      	add	r3, r1
   87998:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   8799c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   879a0:	1c5a      	adds	r2, r3, #1
   879a2:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   879a6:	7dba      	ldrb	r2, [r7, #22]
   879a8:	f107 0150 	add.w	r1, r7, #80	; 0x50
   879ac:	440b      	add	r3, r1
   879ae:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   879b2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   879b6:	1c5a      	adds	r2, r3, #1
   879b8:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   879bc:	7dfa      	ldrb	r2, [r7, #23]
   879be:	f107 0150 	add.w	r1, r7, #80	; 0x50
   879c2:	440b      	add	r3, r1
   879c4:	f803 2c34 	strb.w	r2, [r3, #-52]
			
			// manav02 added pressure and ts2 values for ui
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&ps1ui); // manav03 changed the variable
   879c8:	f107 030a 	add.w	r3, r7, #10
   879cc:	200e      	movs	r0, #14
   879ce:	4619      	mov	r1, r3
   879d0:	4b02      	ldr	r3, [pc, #8]	; (879dc <Cl_Dlsis_SenddlsisData+0x3e4>)
   879d2:	4798      	blx	r3
   879d4:	e012      	b.n	879fc <Cl_Dlsis_SenddlsisData+0x404>
   879d6:	bf00      	nop
   879d8:	20071a90 	.word	0x20071a90
   879dc:	0008fd69 	.word	0x0008fd69
   879e0:	000a8255 	.word	0x000a8255
   879e4:	000a846d 	.word	0x000a846d
   879e8:	41200000 	.word	0x41200000
   879ec:	000a86dd 	.word	0x000a86dd
   879f0:	51eb851f 	.word	0x51eb851f
   879f4:	20071c7c 	.word	0x20071c7c
   879f8:	20072880 	.word	0x20072880
			{
				
				tempdata.word = ps1ui ;
   879fc:	897b      	ldrh	r3, [r7, #10]
   879fe:	617b      	str	r3, [r7, #20]
				systemdataarray[count++] = tempdata.bytearray[0] ;
   87a00:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87a04:	1c5a      	adds	r2, r3, #1
   87a06:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87a0a:	7d3a      	ldrb	r2, [r7, #20]
   87a0c:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87a10:	440b      	add	r3, r1
   87a12:	f803 2c34 	strb.w	r2, [r3, #-52]
				systemdataarray[count++] = tempdata.bytearray[1] ;
   87a16:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87a1a:	1c5a      	adds	r2, r3, #1
   87a1c:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87a20:	7d7a      	ldrb	r2, [r7, #21]
   87a22:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87a26:	440b      	add	r3, r1
   87a28:	f803 2c34 	strb.w	r2, [r3, #-52]
				systemdataarray[count++] = tempdata.bytearray[2] ;
   87a2c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87a30:	1c5a      	adds	r2, r3, #1
   87a32:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87a36:	7dba      	ldrb	r2, [r7, #22]
   87a38:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87a3c:	440b      	add	r3, r1
   87a3e:	f803 2c34 	strb.w	r2, [r3, #-52]
				systemdataarray[count++] = tempdata.bytearray[3] ;
   87a42:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87a46:	1c5a      	adds	r2, r3, #1
   87a48:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87a4c:	7dfa      	ldrb	r2, [r7, #23]
   87a4e:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87a52:	440b      	add	r3, r1
   87a54:	f803 2c34 	strb.w	r2, [r3, #-52]
			}
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS,&ps2ui);     // manav03 changed from ps1 to ps2
   87a58:	f107 0308 	add.w	r3, r7, #8
   87a5c:	200f      	movs	r0, #15
   87a5e:	4619      	mov	r1, r3
   87a60:	4b3c      	ldr	r3, [pc, #240]	; (87b54 <Cl_Dlsis_SenddlsisData+0x55c>)
   87a62:	4798      	blx	r3
			{
				
				tempdata.word = ps2ui ;
   87a64:	893b      	ldrh	r3, [r7, #8]
   87a66:	617b      	str	r3, [r7, #20]
				systemdataarray[count++] = tempdata.bytearray[0] ;
   87a68:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87a6c:	1c5a      	adds	r2, r3, #1
   87a6e:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87a72:	7d3a      	ldrb	r2, [r7, #20]
   87a74:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87a78:	440b      	add	r3, r1
   87a7a:	f803 2c34 	strb.w	r2, [r3, #-52]
				systemdataarray[count++] = tempdata.bytearray[1] ;
   87a7e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87a82:	1c5a      	adds	r2, r3, #1
   87a84:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87a88:	7d7a      	ldrb	r2, [r7, #21]
   87a8a:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87a8e:	440b      	add	r3, r1
   87a90:	f803 2c34 	strb.w	r2, [r3, #-52]
				systemdataarray[count++] = tempdata.bytearray[2] ;
   87a94:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87a98:	1c5a      	adds	r2, r3, #1
   87a9a:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87a9e:	7dba      	ldrb	r2, [r7, #22]
   87aa0:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87aa4:	440b      	add	r3, r1
   87aa6:	f803 2c34 	strb.w	r2, [r3, #-52]
				systemdataarray[count++] = tempdata.bytearray[3] ;
   87aaa:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87aae:	1c5a      	adds	r2, r3, #1
   87ab0:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87ab4:	7dfa      	ldrb	r2, [r7, #23]
   87ab6:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87aba:	440b      	add	r3, r1
   87abc:	f803 2c34 	strb.w	r2, [r3, #-52]
			}
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&temp2ui);    // manav02 ts2 changed to temp2ui
   87ac0:	f107 030c 	add.w	r3, r7, #12
   87ac4:	2013      	movs	r0, #19
   87ac6:	4619      	mov	r1, r3
   87ac8:	4b22      	ldr	r3, [pc, #136]	; (87b54 <Cl_Dlsis_SenddlsisData+0x55c>)
   87aca:	4798      	blx	r3
			{
				
				tempdata.word = temp2ui/10 ; 
   87acc:	89bb      	ldrh	r3, [r7, #12]
   87ace:	4a22      	ldr	r2, [pc, #136]	; (87b58 <Cl_Dlsis_SenddlsisData+0x560>)
   87ad0:	fba2 2303 	umull	r2, r3, r2, r3
   87ad4:	08db      	lsrs	r3, r3, #3
   87ad6:	b29b      	uxth	r3, r3
   87ad8:	617b      	str	r3, [r7, #20]
				systemdataarray[count++] = tempdata.bytearray[0] ;
   87ada:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87ade:	1c5a      	adds	r2, r3, #1
   87ae0:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87ae4:	7d3a      	ldrb	r2, [r7, #20]
   87ae6:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87aea:	440b      	add	r3, r1
   87aec:	f803 2c34 	strb.w	r2, [r3, #-52]
				systemdataarray[count++] = tempdata.bytearray[1] ;
   87af0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87af4:	1c5a      	adds	r2, r3, #1
   87af6:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87afa:	7d7a      	ldrb	r2, [r7, #21]
   87afc:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87b00:	440b      	add	r3, r1
   87b02:	f803 2c34 	strb.w	r2, [r3, #-52]
				systemdataarray[count++] = tempdata.bytearray[2] ;
   87b06:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87b0a:	1c5a      	adds	r2, r3, #1
   87b0c:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87b10:	7dba      	ldrb	r2, [r7, #22]
   87b12:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87b16:	440b      	add	r3, r1
   87b18:	f803 2c34 	strb.w	r2, [r3, #-52]
				systemdataarray[count++] = tempdata.bytearray[3] ;
   87b1c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87b20:	1c5a      	adds	r2, r3, #1
   87b22:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87b26:	7dfa      	ldrb	r2, [r7, #23]
   87b28:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87b2c:	440b      	add	r3, r1
   87b2e:	f803 2c34 	strb.w	r2, [r3, #-52]
			}
			
			
Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&systemdataarray,count);
   87b32:	f107 021c 	add.w	r2, r7, #28
   87b36:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87b3a:	202a      	movs	r0, #42	; 0x2a
   87b3c:	4611      	mov	r1, r2
   87b3e:	461a      	mov	r2, r3
   87b40:	4b06      	ldr	r3, [pc, #24]	; (87b5c <Cl_Dlsis_SenddlsisData+0x564>)
   87b42:	4798      	blx	r3
   87b44:	4603      	mov	r3, r0
   87b46:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	//Cl_dlsisretcode = Cl_SendDatatoconsole(command,&systemdataarray,count);
	
	return CL_OK;
   87b4a:	2300      	movs	r3, #0
}
   87b4c:	4618      	mov	r0, r3
   87b4e:	3750      	adds	r7, #80	; 0x50
   87b50:	46bd      	mov	sp, r7
   87b52:	bd80      	pop	{r7, pc}
   87b54:	0008fd69 	.word	0x0008fd69
   87b58:	cccccccd 	.word	0xcccccccd
   87b5c:	0009d1e9 	.word	0x0009d1e9

00087b60 <Cl_Dlsis_StartDialysis>:
}



Cl_ReturnCodeType	Cl_Dlsis_StartDialysis(void)
{
   87b60:	b580      	push	{r7, lr}
   87b62:	b082      	sub	sp, #8
   87b64:	af00      	add	r7, sp, #0
	
	sv_cntrl_resetgreenalarm();
   87b66:	4b14      	ldr	r3, [pc, #80]	; (87bb8 <Cl_Dlsis_StartDialysis+0x58>)
   87b68:	4798      	blx	r3
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   87b6a:	2300      	movs	r3, #0
   87b6c:	71fb      	strb	r3, [r7, #7]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   87b6e:	2359      	movs	r3, #89	; 0x59
   87b70:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type data = 0;
   87b72:	2300      	movs	r3, #0
   87b74:	717b      	strb	r3, [r7, #5]
	
	ufRemoved = 0;
   87b76:	4b11      	ldr	r3, [pc, #68]	; (87bbc <Cl_Dlsis_StartDialysis+0x5c>)
   87b78:	f04f 0200 	mov.w	r2, #0
   87b7c:	601a      	str	r2, [r3, #0]
	

	//Reset the  OPENFILL time count
	DlsisTime.Cl_dlsisMinutescounter = 0;
   87b7e:	4b10      	ldr	r3, [pc, #64]	; (87bc0 <Cl_Dlsis_StartDialysis+0x60>)
   87b80:	2200      	movs	r2, #0
   87b82:	705a      	strb	r2, [r3, #1]
	DlsisTime.Cl_dlsisTotalMinutescounter = 0;
   87b84:	4b0e      	ldr	r3, [pc, #56]	; (87bc0 <Cl_Dlsis_StartDialysis+0x60>)
   87b86:	2200      	movs	r2, #0
   87b88:	70da      	strb	r2, [r3, #3]
	Cl_dlsisOpenFillTimeOut = false;
   87b8a:	4b0e      	ldr	r3, [pc, #56]	; (87bc4 <Cl_Dlsis_StartDialysis+0x64>)
   87b8c:	2200      	movs	r2, #0
   87b8e:	701a      	strb	r2, [r3, #0]
// 		command = CON_TX_COMMAND_DLSIS_CNFRM;
// 		data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
// 		Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,1);
// 		
//		cl_wait(20); // manav03 added
		command = CON_TX_COMMAND_DLSIS_STARTED;
   87b90:	2313      	movs	r3, #19
   87b92:	71bb      	strb	r3, [r7, #6]
		data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   87b94:	2301      	movs	r3, #1
   87b96:	717b      	strb	r3, [r7, #5]
		Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,1);
   87b98:	79ba      	ldrb	r2, [r7, #6]
   87b9a:	1d7b      	adds	r3, r7, #5
   87b9c:	4610      	mov	r0, r2
   87b9e:	4619      	mov	r1, r3
   87ba0:	2201      	movs	r2, #1
   87ba2:	4b09      	ldr	r3, [pc, #36]	; (87bc8 <Cl_Dlsis_StartDialysis+0x68>)
   87ba4:	4798      	blx	r3
   87ba6:	4603      	mov	r3, r0
   87ba8:	71fb      	strb	r3, [r7, #7]
	Cl_Dlsis_ResumeDialysis();
   87baa:	4b08      	ldr	r3, [pc, #32]	; (87bcc <Cl_Dlsis_StartDialysis+0x6c>)
   87bac:	4798      	blx	r3
	
	return 0;
   87bae:	2300      	movs	r3, #0

}
   87bb0:	4618      	mov	r0, r3
   87bb2:	3708      	adds	r7, #8
   87bb4:	46bd      	mov	sp, r7
   87bb6:	bd80      	pop	{r7, pc}
   87bb8:	0009b6ad 	.word	0x0009b6ad
   87bbc:	20071c7c 	.word	0x20071c7c
   87bc0:	2007232c 	.word	0x2007232c
   87bc4:	20071a60 	.word	0x20071a60
   87bc8:	0009d1e9 	.word	0x0009d1e9
   87bcc:	00087bd1 	.word	0x00087bd1

00087bd0 <Cl_Dlsis_ResumeDialysis>:

Cl_ReturnCodeType	Cl_Dlsis_ResumeDialysis(void)
{
   87bd0:	b590      	push	{r4, r7, lr}
   87bd2:	b087      	sub	sp, #28
   87bd4:	af02      	add	r7, sp, #8
	
		Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   87bd6:	2300      	movs	r3, #0
   87bd8:	73fb      	strb	r3, [r7, #15]
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   87bda:	2359      	movs	r3, #89	; 0x59
   87bdc:	73bb      	strb	r3, [r7, #14]
		Cl_Uint8Type data = 0;
   87bde:	2300      	movs	r3, #0
   87be0:	737b      	strb	r3, [r7, #13]
									
									
									Cl_dlsisretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);
   87be2:	2300      	movs	r3, #0
   87be4:	9300      	str	r3, [sp, #0]
   87be6:	2001      	movs	r0, #1
   87be8:	2101      	movs	r1, #1
   87bea:	f04f 0200 	mov.w	r2, #0
   87bee:	f04f 0300 	mov.w	r3, #0
   87bf2:	4cb4      	ldr	r4, [pc, #720]	; (87ec4 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   87bf4:	47a0      	blx	r4
   87bf6:	4603      	mov	r3, r0
   87bf8:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);
   87bfa:	2300      	movs	r3, #0
   87bfc:	9300      	str	r3, [sp, #0]
   87bfe:	2029      	movs	r0, #41	; 0x29
   87c00:	2100      	movs	r1, #0
   87c02:	f04f 0200 	mov.w	r2, #0
   87c06:	f04f 0300 	mov.w	r3, #0
   87c0a:	4cae      	ldr	r4, [pc, #696]	; (87ec4 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   87c0c:	47a0      	blx	r4
   87c0e:	4603      	mov	r3, r0
   87c10:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);
   87c12:	2300      	movs	r3, #0
   87c14:	9300      	str	r3, [sp, #0]
   87c16:	202b      	movs	r0, #43	; 0x2b
   87c18:	2100      	movs	r1, #0
   87c1a:	f04f 0200 	mov.w	r2, #0
   87c1e:	f04f 0300 	mov.w	r3, #0
   87c22:	4ca8      	ldr	r4, [pc, #672]	; (87ec4 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   87c24:	47a0      	blx	r4
   87c26:	4603      	mov	r3, r0
   87c28:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmConfigureAlarmType(TMP_HIGH,0,1500,0,0);
   87c2a:	2300      	movs	r3, #0
   87c2c:	9300      	str	r3, [sp, #0]
   87c2e:	2041      	movs	r0, #65	; 0x41
   87c30:	2100      	movs	r1, #0
   87c32:	4aa5      	ldr	r2, [pc, #660]	; (87ec8 <Cl_Dlsis_ResumeDialysis+0x2f8>)
   87c34:	f04f 0300 	mov.w	r3, #0
   87c38:	4ca2      	ldr	r4, [pc, #648]	; (87ec4 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   87c3a:	47a0      	blx	r4
   87c3c:	4603      	mov	r3, r0
   87c3e:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmConfigureAlarmType(TMP_LOW,0,600,0,0);
   87c40:	2300      	movs	r3, #0
   87c42:	9300      	str	r3, [sp, #0]
   87c44:	2042      	movs	r0, #66	; 0x42
   87c46:	2100      	movs	r1, #0
   87c48:	4aa0      	ldr	r2, [pc, #640]	; (87ecc <Cl_Dlsis_ResumeDialysis+0x2fc>)
   87c4a:	f04f 0300 	mov.w	r3, #0
   87c4e:	4c9d      	ldr	r4, [pc, #628]	; (87ec4 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   87c50:	47a0      	blx	r4
   87c52:	4603      	mov	r3, r0
   87c54:	73fb      	strb	r3, [r7, #15]
									
									
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   87c56:	2001      	movs	r0, #1
   87c58:	2101      	movs	r1, #1
   87c5a:	4b9d      	ldr	r3, [pc, #628]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87c5c:	4798      	blx	r3
   87c5e:	4603      	mov	r3, r0
   87c60:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   87c62:	203d      	movs	r0, #61	; 0x3d
   87c64:	2101      	movs	r1, #1
   87c66:	4b9a      	ldr	r3, [pc, #616]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87c68:	4798      	blx	r3
   87c6a:	4603      	mov	r3, r0
   87c6c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,true);
   87c6e:	203e      	movs	r0, #62	; 0x3e
   87c70:	2101      	movs	r1, #1
   87c72:	4b97      	ldr	r3, [pc, #604]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87c74:	4798      	blx	r3
   87c76:	4603      	mov	r3, r0
   87c78:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,true );
   87c7a:	2005      	movs	r0, #5
   87c7c:	2101      	movs	r1, #1
   87c7e:	4b94      	ldr	r3, [pc, #592]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87c80:	4798      	blx	r3
   87c82:	4603      	mov	r3, r0
   87c84:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,true );
   87c86:	2006      	movs	r0, #6
   87c88:	2101      	movs	r1, #1
   87c8a:	4b91      	ldr	r3, [pc, #580]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87c8c:	4798      	blx	r3
   87c8e:	4603      	mov	r3, r0
   87c90:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   87c92:	2003      	movs	r0, #3
   87c94:	2100      	movs	r1, #0
   87c96:	4b8e      	ldr	r3, [pc, #568]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87c98:	4798      	blx	r3
   87c9a:	4603      	mov	r3, r0
   87c9c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   87c9e:	2004      	movs	r0, #4
   87ca0:	2100      	movs	r1, #0
   87ca2:	4b8b      	ldr	r3, [pc, #556]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87ca4:	4798      	blx	r3
   87ca6:	4603      	mov	r3, r0
   87ca8:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
   87caa:	2007      	movs	r0, #7
   87cac:	2101      	movs	r1, #1
   87cae:	4b88      	ldr	r3, [pc, #544]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87cb0:	4798      	blx	r3
   87cb2:	4603      	mov	r3, r0
   87cb4:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true );
   87cb6:	2008      	movs	r0, #8
   87cb8:	2101      	movs	r1, #1
   87cba:	4b85      	ldr	r3, [pc, #532]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87cbc:	4798      	blx	r3
   87cbe:	4603      	mov	r3, r0
   87cc0:	73fb      	strb	r3, [r7, #15]
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_OPEN,true );
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_RO,true );
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_HIGH,true );
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
   87cc2:	2020      	movs	r0, #32
   87cc4:	2101      	movs	r1, #1
   87cc6:	4b82      	ldr	r3, [pc, #520]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87cc8:	4798      	blx	r3
   87cca:	4603      	mov	r3, r0
   87ccc:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   87cce:	2021      	movs	r0, #33	; 0x21
   87cd0:	2100      	movs	r1, #0
   87cd2:	4b7f      	ldr	r3, [pc, #508]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87cd4:	4798      	blx	r3
   87cd6:	4603      	mov	r3, r0
   87cd8:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
   87cda:	2024      	movs	r0, #36	; 0x24
   87cdc:	2101      	movs	r1, #1
   87cde:	4b7c      	ldr	r3, [pc, #496]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87ce0:	4798      	blx	r3
   87ce2:	4603      	mov	r3, r0
   87ce4:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,true);
   87ce6:	2026      	movs	r0, #38	; 0x26
   87ce8:	2101      	movs	r1, #1
   87cea:	4b79      	ldr	r3, [pc, #484]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87cec:	4798      	blx	r3
   87cee:	4603      	mov	r3, r0
   87cf0:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,true );
   87cf2:	2023      	movs	r0, #35	; 0x23
   87cf4:	2101      	movs	r1, #1
   87cf6:	4b76      	ldr	r3, [pc, #472]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87cf8:	4798      	blx	r3
   87cfa:	4603      	mov	r3, r0
   87cfc:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,true);
   87cfe:	2025      	movs	r0, #37	; 0x25
   87d00:	2101      	movs	r1, #1
   87d02:	4b73      	ldr	r3, [pc, #460]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87d04:	4798      	blx	r3
   87d06:	4603      	mov	r3, r0
   87d08:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BLD_EVENT,true );
   87d0a:	2022      	movs	r0, #34	; 0x22
   87d0c:	2101      	movs	r1, #1
   87d0e:	4b70      	ldr	r3, [pc, #448]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87d10:	4798      	blx	r3
   87d12:	4603      	mov	r3, r0
   87d14:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   87d16:	2017      	movs	r0, #23
   87d18:	2101      	movs	r1, #1
   87d1a:	4b6d      	ldr	r3, [pc, #436]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87d1c:	4798      	blx	r3
   87d1e:	4603      	mov	r3, r0
   87d20:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   87d22:	2018      	movs	r0, #24
   87d24:	2101      	movs	r1, #1
   87d26:	4b6a      	ldr	r3, [pc, #424]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87d28:	4798      	blx	r3
   87d2a:	4603      	mov	r3, r0
   87d2c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   87d2e:	2015      	movs	r0, #21
   87d30:	2101      	movs	r1, #1
   87d32:	4b67      	ldr	r3, [pc, #412]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87d34:	4798      	blx	r3
   87d36:	4603      	mov	r3, r0
   87d38:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   87d3a:	2016      	movs	r0, #22
   87d3c:	2101      	movs	r1, #1
   87d3e:	4b64      	ldr	r3, [pc, #400]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87d40:	4798      	blx	r3
   87d42:	4603      	mov	r3, r0
   87d44:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD ,true);
   87d46:	2027      	movs	r0, #39	; 0x27
   87d48:	2101      	movs	r1, #1
   87d4a:	4b61      	ldr	r3, [pc, #388]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87d4c:	4798      	blx	r3
   87d4e:	4603      	mov	r3, r0
   87d50:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD ,true);
   87d52:	2028      	movs	r0, #40	; 0x28
   87d54:	2101      	movs	r1, #1
   87d56:	4b5e      	ldr	r3, [pc, #376]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87d58:	4798      	blx	r3
   87d5a:	4603      	mov	r3, r0
   87d5c:	73fb      	strb	r3, [r7, #15]
									
// 									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP3STATUS,false );
// 									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP2STATUS,false );

//
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );
   87d5e:	200c      	movs	r0, #12
   87d60:	2101      	movs	r1, #1
   87d62:	4b5b      	ldr	r3, [pc, #364]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87d64:	4798      	blx	r3
   87d66:	4603      	mov	r3, r0
   87d68:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   87d6a:	200d      	movs	r0, #13
   87d6c:	2101      	movs	r1, #1
   87d6e:	4b58      	ldr	r3, [pc, #352]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87d70:	4798      	blx	r3
   87d72:	4603      	mov	r3, r0
   87d74:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true ); 									
   87d76:	200e      	movs	r0, #14
   87d78:	2101      	movs	r1, #1
   87d7a:	4b55      	ldr	r3, [pc, #340]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87d7c:	4798      	blx	r3
   87d7e:	4603      	mov	r3, r0
   87d80:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,true );
   87d82:	200f      	movs	r0, #15
   87d84:	2101      	movs	r1, #1
   87d86:	4b52      	ldr	r3, [pc, #328]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87d88:	4798      	blx	r3
   87d8a:	4603      	mov	r3, r0
   87d8c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,true );
   87d8e:	2010      	movs	r0, #16
   87d90:	2101      	movs	r1, #1
   87d92:	4b4f      	ldr	r3, [pc, #316]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87d94:	4798      	blx	r3
   87d96:	4603      	mov	r3, r0
   87d98:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,true );
   87d9a:	2011      	movs	r0, #17
   87d9c:	2101      	movs	r1, #1
   87d9e:	4b4c      	ldr	r3, [pc, #304]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87da0:	4798      	blx	r3
   87da2:	4603      	mov	r3, r0
   87da4:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,true );
   87da6:	2012      	movs	r0, #18
   87da8:	2101      	movs	r1, #1
   87daa:	4b49      	ldr	r3, [pc, #292]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87dac:	4798      	blx	r3
   87dae:	4603      	mov	r3, r0
   87db0:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
   87db2:	2013      	movs	r0, #19
   87db4:	2101      	movs	r1, #1
   87db6:	4b46      	ldr	r3, [pc, #280]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87db8:	4798      	blx	r3
   87dba:	4603      	mov	r3, r0
   87dbc:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
   87dbe:	2014      	movs	r0, #20
   87dc0:	2101      	movs	r1, #1
   87dc2:	4b43      	ldr	r3, [pc, #268]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87dc4:	4798      	blx	r3
   87dc6:	4603      	mov	r3, r0
   87dc8:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BP_STOPPED,true );
   87dca:	203f      	movs	r0, #63	; 0x3f
   87dcc:	2101      	movs	r1, #1
   87dce:	4b40      	ldr	r3, [pc, #256]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87dd0:	4798      	blx	r3
   87dd2:	4603      	mov	r3, r0
   87dd4:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TMP_HIGH,true );
   87dd6:	2041      	movs	r0, #65	; 0x41
   87dd8:	2101      	movs	r1, #1
   87dda:	4b3d      	ldr	r3, [pc, #244]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87ddc:	4798      	blx	r3
   87dde:	4603      	mov	r3, r0
   87de0:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TMP_LOW,true );
   87de2:	2042      	movs	r0, #66	; 0x42
   87de4:	2101      	movs	r1, #1
   87de6:	4b3a      	ldr	r3, [pc, #232]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87de8:	4798      	blx	r3
   87dea:	4603      	mov	r3, r0
   87dec:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOOD_NOT_DETECTED,false );  // manav05 enabled 
   87dee:	2040      	movs	r0, #64	; 0x40
   87df0:	2100      	movs	r1, #0
   87df2:	4b37      	ldr	r3, [pc, #220]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87df4:	4798      	blx	r3
   87df6:	4603      	mov	r3, r0
   87df8:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BC_ALARM,true);
   87dfa:	201a      	movs	r0, #26
   87dfc:	2101      	movs	r1, #1
   87dfe:	4b34      	ldr	r3, [pc, #208]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87e00:	4798      	blx	r3
   87e02:	4603      	mov	r3, r0
   87e04:	73fb      	strb	r3, [r7, #15]
									
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(HP_OVERRUN,true );  // manav05 enabled 
   87e06:	2034      	movs	r0, #52	; 0x34
   87e08:	2101      	movs	r1, #1
   87e0a:	4b31      	ldr	r3, [pc, #196]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87e0c:	4798      	blx	r3
   87e0e:	4603      	mov	r3, r0
   87e10:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(HP_UNDERRUN,true);
   87e12:	2035      	movs	r0, #53	; 0x35
   87e14:	2101      	movs	r1, #1
   87e16:	4b2e      	ldr	r3, [pc, #184]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87e18:	4798      	blx	r3
   87e1a:	4603      	mov	r3, r0
   87e1c:	73fb      	strb	r3, [r7, #15]
								
									if(Current_sense_trigger)
   87e1e:	4b2d      	ldr	r3, [pc, #180]	; (87ed4 <Cl_Dlsis_ResumeDialysis+0x304>)
   87e20:	781b      	ldrb	r3, [r3, #0]
   87e22:	2b00      	cmp	r3, #0
   87e24:	d005      	beq.n	87e32 <Cl_Dlsis_ResumeDialysis+0x262>
									{
										Cl_dlsisretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   87e26:	203c      	movs	r0, #60	; 0x3c
   87e28:	2101      	movs	r1, #1
   87e2a:	4b29      	ldr	r3, [pc, #164]	; (87ed0 <Cl_Dlsis_ResumeDialysis+0x300>)
   87e2c:	4798      	blx	r3
   87e2e:	4603      	mov	r3, r0
   87e30:	73fb      	strb	r3, [r7, #15]
									}
									else
									{
										//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
									}
									sv_cntrl_disable_loopback();
   87e32:	4b29      	ldr	r3, [pc, #164]	; (87ed8 <Cl_Dlsis_ResumeDialysis+0x308>)
   87e34:	4798      	blx	r3
									//Cl_Dlsis_BypassOff();
									sv_cntrl_activatevenousclamp();
   87e36:	4b29      	ldr	r3, [pc, #164]	; (87edc <Cl_Dlsis_ResumeDialysis+0x30c>)
   87e38:	4798      	blx	r3
									Cl_dlsisretcode =  sv_cntrl_activatepump(DCMOTOR1);
   87e3a:	2001      	movs	r0, #1
   87e3c:	4b28      	ldr	r3, [pc, #160]	; (87ee0 <Cl_Dlsis_ResumeDialysis+0x310>)
   87e3e:	4798      	blx	r3
   87e40:	4603      	mov	r3, r0
   87e42:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  sv_cntrl_activatepump(DCMOTOR2);
   87e44:	2002      	movs	r0, #2
   87e46:	4b26      	ldr	r3, [pc, #152]	; (87ee0 <Cl_Dlsis_ResumeDialysis+0x310>)
   87e48:	4798      	blx	r3
   87e4a:	4603      	mov	r3, r0
   87e4c:	73fb      	strb	r3, [r7, #15]
								//	Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_RESUME);               // manav03 removed
									Cl_dlsisretcode = SetHeaterState(CL_HEATER_STATE_DIALYSIS_ON);
   87e4e:	2003      	movs	r0, #3
   87e50:	4b24      	ldr	r3, [pc, #144]	; (87ee4 <Cl_Dlsis_ResumeDialysis+0x314>)
   87e52:	4798      	blx	r3
   87e54:	4603      	mov	r3, r0
   87e56:	73fb      	strb	r3, [r7, #15]
									cl_bp_controller(CL_BP_EVENT_START,0);
   87e58:	2002      	movs	r0, #2
   87e5a:	2100      	movs	r1, #0
   87e5c:	4b22      	ldr	r3, [pc, #136]	; (87ee8 <Cl_Dlsis_ResumeDialysis+0x318>)
   87e5e:	4798      	blx	r3
									cl_wait(100);
   87e60:	2064      	movs	r0, #100	; 0x64
   87e62:	4b22      	ldr	r3, [pc, #136]	; (87eec <Cl_Dlsis_ResumeDialysis+0x31c>)
   87e64:	4798      	blx	r3
									Cl_Uint32Type temp1 = Treatdata[ID_bloodratetreat];
   87e66:	4b22      	ldr	r3, [pc, #136]	; (87ef0 <Cl_Dlsis_ResumeDialysis+0x320>)
   87e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   87e6a:	60bb      	str	r3, [r7, #8]
									cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,temp1);
   87e6c:	2001      	movs	r0, #1
   87e6e:	68b9      	ldr	r1, [r7, #8]
   87e70:	4b1d      	ldr	r3, [pc, #116]	; (87ee8 <Cl_Dlsis_ResumeDialysis+0x318>)
   87e72:	4798      	blx	r3
									cl_wait(100);
   87e74:	2064      	movs	r0, #100	; 0x64
   87e76:	4b1d      	ldr	r3, [pc, #116]	; (87eec <Cl_Dlsis_ResumeDialysis+0x31c>)
   87e78:	4798      	blx	r3
									//cl_wait(100);
									Cl_Uint32Type temp = Treatdata[ID_dflow];
   87e7a:	4b1d      	ldr	r3, [pc, #116]	; (87ef0 <Cl_Dlsis_ResumeDialysis+0x320>)
   87e7c:	695b      	ldr	r3, [r3, #20]
   87e7e:	607b      	str	r3, [r7, #4]
									flow_rate = temp;
   87e80:	4a1c      	ldr	r2, [pc, #112]	; (87ef4 <Cl_Dlsis_ResumeDialysis+0x324>)
   87e82:	687b      	ldr	r3, [r7, #4]
   87e84:	6013      	str	r3, [r2, #0]
									Cl_Uint16Type potvalue = 0;
   87e86:	2300      	movs	r3, #0
   87e88:	807b      	strh	r3, [r7, #2]
									switch (temp)
   87e8a:	687b      	ldr	r3, [r7, #4]
   87e8c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   87e90:	d036      	beq.n	87f00 <Cl_Dlsis_ResumeDialysis+0x330>
   87e92:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   87e96:	d003      	beq.n	87ea0 <Cl_Dlsis_ResumeDialysis+0x2d0>
   87e98:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   87e9c:	d046      	beq.n	87f2c <Cl_Dlsis_ResumeDialysis+0x35c>
   87e9e:	e056      	b.n	87f4e <Cl_Dlsis_ResumeDialysis+0x37e>
									{
										case 800:
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   87ea0:	2002      	movs	r0, #2
   87ea2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   87ea6:	4b14      	ldr	r3, [pc, #80]	; (87ef8 <Cl_Dlsis_ResumeDialysis+0x328>)
   87ea8:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1395);
   87eaa:	2001      	movs	r0, #1
   87eac:	f240 5173 	movw	r1, #1395	; 0x573
   87eb0:	4b11      	ldr	r3, [pc, #68]	; (87ef8 <Cl_Dlsis_ResumeDialysis+0x328>)
   87eb2:	4798      	blx	r3
										potvalue = (612 * 1024)/10000;
   87eb4:	233e      	movs	r3, #62	; 0x3e
   87eb6:	807b      	strh	r3, [r7, #2]
										sv_cs_setpotvalue(potvalue);
   87eb8:	887b      	ldrh	r3, [r7, #2]
   87eba:	4618      	mov	r0, r3
   87ebc:	4b0f      	ldr	r3, [pc, #60]	; (87efc <Cl_Dlsis_ResumeDialysis+0x32c>)
   87ebe:	4798      	blx	r3
										break;
   87ec0:	e056      	b.n	87f70 <Cl_Dlsis_ResumeDialysis+0x3a0>
   87ec2:	bf00      	nop
   87ec4:	000829dd 	.word	0x000829dd
   87ec8:	44bb8000 	.word	0x44bb8000
   87ecc:	44160000 	.word	0x44160000
   87ed0:	00082a35 	.word	0x00082a35
   87ed4:	20070bea 	.word	0x20070bea
   87ed8:	0009b579 	.word	0x0009b579
   87edc:	0009b535 	.word	0x0009b535
   87ee0:	0009b32d 	.word	0x0009b32d
   87ee4:	00089381 	.word	0x00089381
   87ee8:	00094325 	.word	0x00094325
   87eec:	0009421d 	.word	0x0009421d
   87ef0:	20072880 	.word	0x20072880
   87ef4:	20071a68 	.word	0x20071a68
   87ef8:	0009b461 	.word	0x0009b461
   87efc:	0009b899 	.word	0x0009b899
										
										case 500:
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   87f00:	2018      	movs	r0, #24
   87f02:	4925      	ldr	r1, [pc, #148]	; (87f98 <Cl_Dlsis_ResumeDialysis+0x3c8>)
   87f04:	2203      	movs	r2, #3
   87f06:	4b25      	ldr	r3, [pc, #148]	; (87f9c <Cl_Dlsis_ResumeDialysis+0x3cc>)
   87f08:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   87f0a:	2002      	movs	r0, #2
   87f0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   87f10:	4b23      	ldr	r3, [pc, #140]	; (87fa0 <Cl_Dlsis_ResumeDialysis+0x3d0>)
   87f12:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1000);   //960
   87f14:	2001      	movs	r0, #1
   87f16:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   87f1a:	4b21      	ldr	r3, [pc, #132]	; (87fa0 <Cl_Dlsis_ResumeDialysis+0x3d0>)
   87f1c:	4798      	blx	r3
										potvalue = (600 * 1024)/10000;
   87f1e:	233d      	movs	r3, #61	; 0x3d
   87f20:	807b      	strh	r3, [r7, #2]
										sv_cs_setpotvalue(potvalue);
   87f22:	887b      	ldrh	r3, [r7, #2]
   87f24:	4618      	mov	r0, r3
   87f26:	4b1f      	ldr	r3, [pc, #124]	; (87fa4 <Cl_Dlsis_ResumeDialysis+0x3d4>)
   87f28:	4798      	blx	r3
										break;
   87f2a:	e021      	b.n	87f70 <Cl_Dlsis_ResumeDialysis+0x3a0>
										
									
										case 300:
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   87f2c:	2002      	movs	r0, #2
   87f2e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   87f32:	4b1b      	ldr	r3, [pc, #108]	; (87fa0 <Cl_Dlsis_ResumeDialysis+0x3d0>)
   87f34:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,600);
   87f36:	2001      	movs	r0, #1
   87f38:	f44f 7116 	mov.w	r1, #600	; 0x258
   87f3c:	4b18      	ldr	r3, [pc, #96]	; (87fa0 <Cl_Dlsis_ResumeDialysis+0x3d0>)
   87f3e:	4798      	blx	r3
										potvalue = (650 * 1024)/10000;
   87f40:	2342      	movs	r3, #66	; 0x42
   87f42:	807b      	strh	r3, [r7, #2]
										sv_cs_setpotvalue(potvalue);
   87f44:	887b      	ldrh	r3, [r7, #2]
   87f46:	4618      	mov	r0, r3
   87f48:	4b16      	ldr	r3, [pc, #88]	; (87fa4 <Cl_Dlsis_ResumeDialysis+0x3d4>)
   87f4a:	4798      	blx	r3
										break;
   87f4c:	e010      	b.n	87f70 <Cl_Dlsis_ResumeDialysis+0x3a0>
										
										default:
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   87f4e:	2002      	movs	r0, #2
   87f50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   87f54:	4b12      	ldr	r3, [pc, #72]	; (87fa0 <Cl_Dlsis_ResumeDialysis+0x3d0>)
   87f56:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1100);   //960
   87f58:	2001      	movs	r0, #1
   87f5a:	f240 414c 	movw	r1, #1100	; 0x44c
   87f5e:	4b10      	ldr	r3, [pc, #64]	; (87fa0 <Cl_Dlsis_ResumeDialysis+0x3d0>)
   87f60:	4798      	blx	r3
										potvalue = (670 * 1024)/10000;
   87f62:	2344      	movs	r3, #68	; 0x44
   87f64:	807b      	strh	r3, [r7, #2]
										sv_cs_setpotvalue(potvalue);
   87f66:	887b      	ldrh	r3, [r7, #2]
   87f68:	4618      	mov	r0, r3
   87f6a:	4b0e      	ldr	r3, [pc, #56]	; (87fa4 <Cl_Dlsis_ResumeDialysis+0x3d4>)
   87f6c:	4798      	blx	r3
										break;
   87f6e:	bf00      	nop
									}
									bc_flag = 1;
   87f70:	4b0d      	ldr	r3, [pc, #52]	; (87fa8 <Cl_Dlsis_ResumeDialysis+0x3d8>)
   87f72:	2201      	movs	r2, #1
   87f74:	701a      	strb	r2, [r3, #0]
									//Cl_Dlsis_BypassDialysis();
									Cl_dlsisretcode = sv_cntrl_disable_bypass();
   87f76:	4b0d      	ldr	r3, [pc, #52]	; (87fac <Cl_Dlsis_ResumeDialysis+0x3dc>)
   87f78:	4798      	blx	r3
   87f7a:	4603      	mov	r3, r0
   87f7c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode = Cl_Dlsis_UpdateTimeInfo();
   87f7e:	4b0c      	ldr	r3, [pc, #48]	; (87fb0 <Cl_Dlsis_ResumeDialysis+0x3e0>)
   87f80:	4798      	blx	r3
   87f82:	4603      	mov	r3, r0
   87f84:	73fb      	strb	r3, [r7, #15]
									cl_dlsis_state = CL_DLSIS_STATE_WAIT_FOR_TEMP_COND_STABILITY;
   87f86:	4b0b      	ldr	r3, [pc, #44]	; (87fb4 <Cl_Dlsis_ResumeDialysis+0x3e4>)
   87f88:	2202      	movs	r2, #2
   87f8a:	701a      	strb	r2, [r3, #0]
									//Cl_Dlsis_BypassOff();
									return 0;	
   87f8c:	2300      	movs	r3, #0
}
   87f8e:	4618      	mov	r0, r3
   87f90:	3714      	adds	r7, #20
   87f92:	46bd      	mov	sp, r7
   87f94:	bd90      	pop	{r4, r7, pc}
   87f96:	bf00      	nop
   87f98:	000aa240 	.word	0x000aa240
   87f9c:	0009d1e9 	.word	0x0009d1e9
   87fa0:	0009b461 	.word	0x0009b461
   87fa4:	0009b899 	.word	0x0009b899
   87fa8:	20071a67 	.word	0x20071a67
   87fac:	0009b5b1 	.word	0x0009b5b1
   87fb0:	000867d1 	.word	0x000867d1
   87fb4:	20071a48 	.word	0x20071a48

00087fb8 <Cl_Dlsis_safesate>:

Cl_ReturnCodeType	Cl_Dlsis_safesate(void)
{
   87fb8:	b580      	push	{r7, lr}
   87fba:	af00      	add	r7, sp, #0
	
	sv_cntrl_enable_bypass();
   87fbc:	4b12      	ldr	r3, [pc, #72]	; (88008 <Cl_Dlsis_safesate+0x50>)
   87fbe:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_STOP,0);
   87fc0:	2004      	movs	r0, #4
   87fc2:	2100      	movs	r1, #0
   87fc4:	4b11      	ldr	r3, [pc, #68]	; (8800c <Cl_Dlsis_safesate+0x54>)
   87fc6:	4798      	blx	r3
	cl_bp_controller(CL_BP_EVENT_STOP,0);
   87fc8:	2004      	movs	r0, #4
   87fca:	2100      	movs	r1, #0
   87fcc:	4b10      	ldr	r3, [pc, #64]	; (88010 <Cl_Dlsis_safesate+0x58>)
   87fce:	4798      	blx	r3
	Cl_AlarmActivateAlarms(BP_OVERRUN,false );
   87fd0:	2036      	movs	r0, #54	; 0x36
   87fd2:	2100      	movs	r1, #0
   87fd4:	4b0f      	ldr	r3, [pc, #60]	; (88014 <Cl_Dlsis_safesate+0x5c>)
   87fd6:	4798      	blx	r3
	Cl_AlarmActivateAlarms(BP_UNDERRUN,false );
   87fd8:	2037      	movs	r0, #55	; 0x37
   87fda:	2100      	movs	r1, #0
   87fdc:	4b0d      	ldr	r3, [pc, #52]	; (88014 <Cl_Dlsis_safesate+0x5c>)
   87fde:	4798      	blx	r3
	bpFlag = 0 ;
   87fe0:	4b0d      	ldr	r3, [pc, #52]	; (88018 <Cl_Dlsis_safesate+0x60>)
   87fe2:	2200      	movs	r2, #0
   87fe4:	601a      	str	r2, [r3, #0]
	bpflagCounter = 0;
   87fe6:	4b0d      	ldr	r3, [pc, #52]	; (8801c <Cl_Dlsis_safesate+0x64>)
   87fe8:	2200      	movs	r2, #0
   87fea:	601a      	str	r2, [r3, #0]
	cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
   87fec:	200d      	movs	r0, #13
   87fee:	2100      	movs	r1, #0
   87ff0:	4b0b      	ldr	r3, [pc, #44]	; (88020 <Cl_Dlsis_safesate+0x68>)
   87ff2:	4798      	blx	r3
	sv_cntrl_deactivatevenousclamp();
   87ff4:	4b0b      	ldr	r3, [pc, #44]	; (88024 <Cl_Dlsis_safesate+0x6c>)
   87ff6:	4798      	blx	r3

	Cl_Dlsis_BypassDialysis();
   87ff8:	4b0b      	ldr	r3, [pc, #44]	; (88028 <Cl_Dlsis_safesate+0x70>)
   87ffa:	4798      	blx	r3
	//isouf = false;
	// send dialysis isouf off
// 	command = CON_TX_COMMAND_DIALYSIS_ISOUF_OFF;
// 	dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
// 	Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,0);
	cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   87ffc:	4b0b      	ldr	r3, [pc, #44]	; (8802c <Cl_Dlsis_safesate+0x74>)
   87ffe:	220a      	movs	r2, #10
   88000:	701a      	strb	r2, [r3, #0]
	
	return 0;
   88002:	2300      	movs	r3, #0
}
   88004:	4618      	mov	r0, r3
   88006:	bd80      	pop	{r7, pc}
   88008:	0009b595 	.word	0x0009b595
   8800c:	00097499 	.word	0x00097499
   88010:	00094325 	.word	0x00094325
   88014:	00082a35 	.word	0x00082a35
   88018:	20071aa0 	.word	0x20071aa0
   8801c:	20071a9c 	.word	0x20071a9c
   88020:	00094b61 	.word	0x00094b61
   88024:	0009b549 	.word	0x0009b549
   88028:	00086f4d 	.word	0x00086f4d
   8802c:	20071a48 	.word	0x20071a48

00088030 <cl_temp_safestate>:
	//sv_cntrl_nobuzzer();
	
	return 0;
}
Cl_ReturnCodeType cl_temp_safestate(void)
{
   88030:	b580      	push	{r7, lr}
   88032:	af00      	add	r7, sp, #0
	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BYPASS",6);
   88034:	2018      	movs	r0, #24
   88036:	4909      	ldr	r1, [pc, #36]	; (8805c <cl_temp_safestate+0x2c>)
   88038:	2206      	movs	r2, #6
   8803a:	4b09      	ldr	r3, [pc, #36]	; (88060 <cl_temp_safestate+0x30>)
   8803c:	4798      	blx	r3
	sv_cntrl_enable_bypass();
   8803e:	4b09      	ldr	r3, [pc, #36]	; (88064 <cl_temp_safestate+0x34>)
   88040:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_STOP,0);
   88042:	2004      	movs	r0, #4
   88044:	2100      	movs	r1, #0
   88046:	4b08      	ldr	r3, [pc, #32]	; (88068 <cl_temp_safestate+0x38>)
   88048:	4798      	blx	r3
	//sv_cntrl_deactivatevenousclamp();
	Cl_Dlsis_BypassDialysis();
   8804a:	4b08      	ldr	r3, [pc, #32]	; (8806c <cl_temp_safestate+0x3c>)
   8804c:	4798      	blx	r3
	cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   8804e:	4b08      	ldr	r3, [pc, #32]	; (88070 <cl_temp_safestate+0x40>)
   88050:	220a      	movs	r2, #10
   88052:	701a      	strb	r2, [r3, #0]
	return 0;
   88054:	2300      	movs	r3, #0
}
   88056:	4618      	mov	r0, r3
   88058:	bd80      	pop	{r7, pc}
   8805a:	bf00      	nop
   8805c:	000aa244 	.word	0x000aa244
   88060:	0009d1e9 	.word	0x0009d1e9
   88064:	0009b595 	.word	0x0009b595
   88068:	00097499 	.word	0x00097499
   8806c:	00086f4d 	.word	0x00086f4d
   88070:	20071a48 	.word	0x20071a48

00088074 <cl_dprep_primeInit>:
static int8_t cl_dialyser_prime_min = 0;

extern Cl_Dprep_PrimeStates cl_dprep_prime_stateDummy;

Cl_ReturnCodeType cl_dprep_primeInit(void)
{
   88074:	b480      	push	{r7}
   88076:	af00      	add	r7, sp, #0
	 cl_dprep_prime_state = CL_DPREP_PRIME_STATE_IDLE;
   88078:	4b0b      	ldr	r3, [pc, #44]	; (880a8 <cl_dprep_primeInit+0x34>)
   8807a:	2200      	movs	r2, #0
   8807c:	701a      	strb	r2, [r3, #0]
	 cl_dprep_prime_event = CL_DPREP_PRIME_PRIME_NULL;
   8807e:	4b0b      	ldr	r3, [pc, #44]	; (880ac <cl_dprep_primeInit+0x38>)
   88080:	2200      	movs	r2, #0
   88082:	701a      	strb	r2, [r3, #0]
	  cl_prime_sec = 0;
   88084:	4b0a      	ldr	r3, [pc, #40]	; (880b0 <cl_dprep_primeInit+0x3c>)
   88086:	2200      	movs	r2, #0
   88088:	701a      	strb	r2, [r3, #0]
	  cl_prime_min = 0;
   8808a:	4b0a      	ldr	r3, [pc, #40]	; (880b4 <cl_dprep_primeInit+0x40>)
   8808c:	2200      	movs	r2, #0
   8808e:	701a      	strb	r2, [r3, #0]
	  cl_dialyser_prime_sec = 0;
   88090:	4b09      	ldr	r3, [pc, #36]	; (880b8 <cl_dprep_primeInit+0x44>)
   88092:	2200      	movs	r2, #0
   88094:	701a      	strb	r2, [r3, #0]
	  cl_dialyser_prime_min = 0;
   88096:	4b09      	ldr	r3, [pc, #36]	; (880bc <cl_dprep_primeInit+0x48>)
   88098:	2200      	movs	r2, #0
   8809a:	701a      	strb	r2, [r3, #0]
	
}
   8809c:	4618      	mov	r0, r3
   8809e:	46bd      	mov	sp, r7
   880a0:	f85d 7b04 	ldr.w	r7, [sp], #4
   880a4:	4770      	bx	lr
   880a6:	bf00      	nop
   880a8:	20071aa4 	.word	0x20071aa4
   880ac:	20071aa5 	.word	0x20071aa5
   880b0:	20071aa6 	.word	0x20071aa6
   880b4:	20071aa7 	.word	0x20071aa7
   880b8:	20071aa8 	.word	0x20071aa8
   880bc:	20071aa9 	.word	0x20071aa9

000880c0 <cl_dprep_primecontroller>:


Cl_ReturnCodeType cl_dprep_primecontroller(Cl_Dprep_PrimeEvents prime_event , int16_t data)
{
   880c0:	b580      	push	{r7, lr}
   880c2:	b084      	sub	sp, #16
   880c4:	af00      	add	r7, sp, #0
   880c6:	4603      	mov	r3, r0
   880c8:	460a      	mov	r2, r1
   880ca:	71fb      	strb	r3, [r7, #7]
   880cc:	4613      	mov	r3, r2
   880ce:	80bb      	strh	r3, [r7, #4]
	Cl_ReturnCodeType 	 Cl_dprep_primeretcode = CL_ERROR;
   880d0:	2304      	movs	r3, #4
   880d2:	73fb      	strb	r3, [r7, #15]
	
	if(prime_event == CL_DPREP_PRIME_PRIME_TICK_SEC)
   880d4:	79fb      	ldrb	r3, [r7, #7]
   880d6:	2b0b      	cmp	r3, #11
   880d8:	d103      	bne.n	880e2 <cl_dprep_primecontroller+0x22>
	{
		cl_dprep_prime_stateDummy = cl_dprep_prime_state;
   880da:	4bb6      	ldr	r3, [pc, #728]	; (883b4 <cl_dprep_primecontroller+0x2f4>)
   880dc:	781a      	ldrb	r2, [r3, #0]
   880de:	4bb6      	ldr	r3, [pc, #728]	; (883b8 <cl_dprep_primecontroller+0x2f8>)
   880e0:	701a      	strb	r2, [r3, #0]
	}
		switch(cl_dprep_prime_state)
   880e2:	4bb4      	ldr	r3, [pc, #720]	; (883b4 <cl_dprep_primecontroller+0x2f4>)
   880e4:	781b      	ldrb	r3, [r3, #0]
   880e6:	2b0c      	cmp	r3, #12
   880e8:	f200 84ab 	bhi.w	88a42 <cl_dprep_primecontroller+0x982>
   880ec:	a201      	add	r2, pc, #4	; (adr r2, 880f4 <cl_dprep_primecontroller+0x34>)
   880ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   880f2:	bf00      	nop
   880f4:	00088129 	.word	0x00088129
   880f8:	000881a5 	.word	0x000881a5
   880fc:	00088461 	.word	0x00088461
   88100:	000882b5 	.word	0x000882b5
   88104:	0008836d 	.word	0x0008836d
   88108:	0008857b 	.word	0x0008857b
   8810c:	0008867f 	.word	0x0008867f
   88110:	00088a43 	.word	0x00088a43
   88114:	000886ed 	.word	0x000886ed
   88118:	0008880f 	.word	0x0008880f
   8811c:	00088a43 	.word	0x00088a43
   88120:	000888fd 	.word	0x000888fd
   88124:	000889ad 	.word	0x000889ad
		{
			case CL_DPREP_PRIME_STATE_IDLE:
			//case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED:
				switch(prime_event)
   88128:	79fb      	ldrb	r3, [r7, #7]
   8812a:	2b01      	cmp	r3, #1
   8812c:	d009      	beq.n	88142 <cl_dprep_primecontroller+0x82>
   8812e:	2b0e      	cmp	r3, #14
   88130:	d000      	beq.n	88134 <cl_dprep_primecontroller+0x74>
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
						Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
					break;
					default:break;
   88132:	e035      	b.n	881a0 <cl_dprep_primecontroller+0xe0>
			case CL_DPREP_PRIME_STATE_IDLE:
			//case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED:
				switch(prime_event)
				{
					case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
					cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88134:	88bb      	ldrh	r3, [r7, #4]
   88136:	b21b      	sxth	r3, r3
   88138:	2001      	movs	r0, #1
   8813a:	4619      	mov	r1, r3
   8813c:	4b9f      	ldr	r3, [pc, #636]	; (883bc <cl_dprep_primecontroller+0x2fc>)
   8813e:	4798      	blx	r3
					break;
   88140:	e02e      	b.n	881a0 <cl_dprep_primecontroller+0xe0>
					case CL_DPREP_PRIME_PRIME_START:
					DD_CAN_WRITE_HEMO(HEMO_START_BD_CALIBRATION, 0);
   88142:	2029      	movs	r0, #41	; 0x29
   88144:	2100      	movs	r1, #0
   88146:	4b9e      	ldr	r3, [pc, #632]	; (883c0 <cl_dprep_primecontroller+0x300>)
   88148:	4798      	blx	r3
					Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME2",6);
   8814a:	2018      	movs	r0, #24
   8814c:	499d      	ldr	r1, [pc, #628]	; (883c4 <cl_dprep_primecontroller+0x304>)
   8814e:	2206      	movs	r2, #6
   88150:	4b9d      	ldr	r3, [pc, #628]	; (883c8 <cl_dprep_primecontroller+0x308>)
   88152:	4798      	blx	r3
					sv_cntrl_disable_bypass();
   88154:	4b9d      	ldr	r3, [pc, #628]	; (883cc <cl_dprep_primecontroller+0x30c>)
   88156:	4798      	blx	r3
					cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,100);          // manav01 added
   88158:	2001      	movs	r0, #1
   8815a:	2164      	movs	r1, #100	; 0x64
   8815c:	4b97      	ldr	r3, [pc, #604]	; (883bc <cl_dprep_primecontroller+0x2fc>)
   8815e:	4798      	blx	r3
					cl_bp_controller(CL_BP_EVENT_START,0);
   88160:	2002      	movs	r0, #2
   88162:	2100      	movs	r1, #0
   88164:	4b95      	ldr	r3, [pc, #596]	; (883bc <cl_dprep_primecontroller+0x2fc>)
   88166:	4798      	blx	r3
						Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true); // manav03 added
   88168:	2001      	movs	r0, #1
   8816a:	2101      	movs	r1, #1
   8816c:	4b98      	ldr	r3, [pc, #608]	; (883d0 <cl_dprep_primecontroller+0x310>)
   8816e:	4798      	blx	r3
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   88170:	1d3b      	adds	r3, r7, #4
   88172:	200d      	movs	r0, #13
   88174:	4619      	mov	r1, r3
   88176:	2200      	movs	r2, #0
   88178:	4b93      	ldr	r3, [pc, #588]	; (883c8 <cl_dprep_primecontroller+0x308>)
   8817a:	4798      	blx	r3
   8817c:	4603      	mov	r3, r0
   8817e:	73fb      	strb	r3, [r7, #15]
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   88180:	1d3b      	adds	r3, r7, #4
   88182:	2024      	movs	r0, #36	; 0x24
   88184:	4619      	mov	r1, r3
   88186:	2200      	movs	r2, #0
   88188:	4b8f      	ldr	r3, [pc, #572]	; (883c8 <cl_dprep_primecontroller+0x308>)
   8818a:	4798      	blx	r3
   8818c:	4603      	mov	r3, r0
   8818e:	73fb      	strb	r3, [r7, #15]
						Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88190:	4b90      	ldr	r3, [pc, #576]	; (883d4 <cl_dprep_primecontroller+0x314>)
   88192:	4798      	blx	r3
   88194:	4603      	mov	r3, r0
   88196:	73fb      	strb	r3, [r7, #15]
								
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   88198:	4b86      	ldr	r3, [pc, #536]	; (883b4 <cl_dprep_primecontroller+0x2f4>)
   8819a:	2201      	movs	r2, #1
   8819c:	701a      	strb	r2, [r3, #0]
					break;
   8819e:	bf00      	nop
					default:break;
				}
			break;
   881a0:	f000 bc4f 	b.w	88a42 <cl_dprep_primecontroller+0x982>
			case CL_DPREP_PRIME_STATE_PRIMING:
				switch(prime_event)
   881a4:	79fb      	ldrb	r3, [r7, #7]
   881a6:	3b02      	subs	r3, #2
   881a8:	2b0c      	cmp	r3, #12
   881aa:	f200 8081 	bhi.w	882b0 <cl_dprep_primecontroller+0x1f0>
   881ae:	a201      	add	r2, pc, #4	; (adr r2, 881b4 <cl_dprep_primecontroller+0xf4>)
   881b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   881b4:	0008825f 	.word	0x0008825f
   881b8:	000881e9 	.word	0x000881e9
   881bc:	0008827f 	.word	0x0008827f
   881c0:	000882b1 	.word	0x000882b1
   881c4:	000882b1 	.word	0x000882b1
   881c8:	000882b1 	.word	0x000882b1
   881cc:	000882b1 	.word	0x000882b1
   881d0:	000882b1 	.word	0x000882b1
   881d4:	000882b1 	.word	0x000882b1
   881d8:	000881f1 	.word	0x000881f1
   881dc:	0008828f 	.word	0x0008828f
   881e0:	00088299 	.word	0x00088299
   881e4:	000882a3 	.word	0x000882a3
				{
					case CL_DPREP_PRIME_PRIME_ALARM:
					cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   881e8:	4b72      	ldr	r3, [pc, #456]	; (883b4 <cl_dprep_primecontroller+0x2f4>)
   881ea:	2203      	movs	r2, #3
   881ec:	701a      	strb	r2, [r3, #0]
					break;
   881ee:	e060      	b.n	882b2 <cl_dprep_primecontroller+0x1f2>
					case CL_DPREP_PRIME_PRIME_TICK_SEC:
					Cl_dprep_primeretcode = Cl_Dprep_SendPrepStateData(PRIMING_DATA);
   881f0:	2002      	movs	r0, #2
   881f2:	4b79      	ldr	r3, [pc, #484]	; (883d8 <cl_dprep_primecontroller+0x318>)
   881f4:	4798      	blx	r3
   881f6:	4603      	mov	r3, r0
   881f8:	73fb      	strb	r3, [r7, #15]
					if(cl_prime_sec++ >= 60)
   881fa:	4b78      	ldr	r3, [pc, #480]	; (883dc <cl_dprep_primecontroller+0x31c>)
   881fc:	781b      	ldrb	r3, [r3, #0]
   881fe:	b2db      	uxtb	r3, r3
   88200:	b2da      	uxtb	r2, r3
   88202:	3201      	adds	r2, #1
   88204:	b2d2      	uxtb	r2, r2
   88206:	b2d1      	uxtb	r1, r2
   88208:	4a74      	ldr	r2, [pc, #464]	; (883dc <cl_dprep_primecontroller+0x31c>)
   8820a:	7011      	strb	r1, [r2, #0]
   8820c:	b25b      	sxtb	r3, r3
   8820e:	2b3b      	cmp	r3, #59	; 0x3b
   88210:	dd0f      	ble.n	88232 <cl_dprep_primecontroller+0x172>
					{
						cl_prime_sec = 0;
   88212:	4b72      	ldr	r3, [pc, #456]	; (883dc <cl_dprep_primecontroller+0x31c>)
   88214:	2200      	movs	r2, #0
   88216:	701a      	strb	r2, [r3, #0]
						cl_prime_min++;
   88218:	4b71      	ldr	r3, [pc, #452]	; (883e0 <cl_dprep_primecontroller+0x320>)
   8821a:	781b      	ldrb	r3, [r3, #0]
   8821c:	b2db      	uxtb	r3, r3
   8821e:	b2db      	uxtb	r3, r3
   88220:	3301      	adds	r3, #1
   88222:	b2db      	uxtb	r3, r3
   88224:	b2da      	uxtb	r2, r3
   88226:	4b6e      	ldr	r3, [pc, #440]	; (883e0 <cl_dprep_primecontroller+0x320>)
   88228:	701a      	strb	r2, [r3, #0]
						Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   8822a:	4b6a      	ldr	r3, [pc, #424]	; (883d4 <cl_dprep_primecontroller+0x314>)
   8822c:	4798      	blx	r3
   8822e:	4603      	mov	r3, r0
   88230:	73fb      	strb	r3, [r7, #15]
						
					}
					if(cl_prime_min >= CL_DPREP_PRIME_TIMEOUT_MIN )
   88232:	4b6b      	ldr	r3, [pc, #428]	; (883e0 <cl_dprep_primecontroller+0x320>)
   88234:	781b      	ldrb	r3, [r3, #0]
   88236:	b25b      	sxtb	r3, r3
   88238:	2b00      	cmp	r3, #0
   8823a:	dd0f      	ble.n	8825c <cl_dprep_primecontroller+0x19c>
					{
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   8823c:	2004      	movs	r0, #4
   8823e:	2100      	movs	r1, #0
   88240:	4b5e      	ldr	r3, [pc, #376]	; (883bc <cl_dprep_primecontroller+0x2fc>)
   88242:	4798      	blx	r3
						
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_COMPLETED,&data,0);
   88244:	1d3b      	adds	r3, r7, #4
   88246:	200f      	movs	r0, #15
   88248:	4619      	mov	r1, r3
   8824a:	2200      	movs	r2, #0
   8824c:	4b5e      	ldr	r3, [pc, #376]	; (883c8 <cl_dprep_primecontroller+0x308>)
   8824e:	4798      	blx	r3
   88250:	4603      	mov	r3, r0
   88252:	73fb      	strb	r3, [r7, #15]
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_COMPLETED;
   88254:	4b57      	ldr	r3, [pc, #348]	; (883b4 <cl_dprep_primecontroller+0x2f4>)
   88256:	2202      	movs	r2, #2
   88258:	701a      	strb	r2, [r3, #0]
					//	cl_dprep_prime_state = CL_DPREP_PRIME_STATE_IDLE;
					}

					break;
   8825a:	e02a      	b.n	882b2 <cl_dprep_primecontroller+0x1f2>
   8825c:	e029      	b.n	882b2 <cl_dprep_primecontroller+0x1f2>
					case CL_DPREP_PRIME_PRIME_SET_RATE:
					break;
					case CL_DPREP_PRIME_PRIME_STOP:
					cl_bp_controller(CL_BP_EVENT_STOP,0);
   8825e:	2004      	movs	r0, #4
   88260:	2100      	movs	r1, #0
   88262:	4b56      	ldr	r3, [pc, #344]	; (883bc <cl_dprep_primecontroller+0x2fc>)
   88264:	4798      	blx	r3
					Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STOPPED,&data,0);
   88266:	1d3b      	adds	r3, r7, #4
   88268:	2023      	movs	r0, #35	; 0x23
   8826a:	4619      	mov	r1, r3
   8826c:	2200      	movs	r2, #0
   8826e:	4b56      	ldr	r3, [pc, #344]	; (883c8 <cl_dprep_primecontroller+0x308>)
   88270:	4798      	blx	r3
   88272:	4603      	mov	r3, r0
   88274:	73fb      	strb	r3, [r7, #15]
					cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   88276:	4b4f      	ldr	r3, [pc, #316]	; (883b4 <cl_dprep_primecontroller+0x2f4>)
   88278:	2203      	movs	r2, #3
   8827a:	701a      	strb	r2, [r3, #0]
					break;
   8827c:	e019      	b.n	882b2 <cl_dprep_primecontroller+0x1f2>
					case CL_DPREP_PRIME_PRIME_PAUSE:
					cl_bp_controller(CL_BP_EVENT_STOP,0);
   8827e:	2004      	movs	r0, #4
   88280:	2100      	movs	r1, #0
   88282:	4b4e      	ldr	r3, [pc, #312]	; (883bc <cl_dprep_primecontroller+0x2fc>)
   88284:	4798      	blx	r3
					cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_PAUSED;
   88286:	4b4b      	ldr	r3, [pc, #300]	; (883b4 <cl_dprep_primecontroller+0x2f4>)
   88288:	2204      	movs	r2, #4
   8828a:	701a      	strb	r2, [r3, #0]
					break;
   8828c:	e011      	b.n	882b2 <cl_dprep_primecontroller+0x1f2>
					case 	CL_DPREP_PRIME_BLOODPUMP_START:
					 cl_bp_controller(CL_BP_EVENT_START,0);
   8828e:	2002      	movs	r0, #2
   88290:	2100      	movs	r1, #0
   88292:	4b4a      	ldr	r3, [pc, #296]	; (883bc <cl_dprep_primecontroller+0x2fc>)
   88294:	4798      	blx	r3
					break;
   88296:	e00c      	b.n	882b2 <cl_dprep_primecontroller+0x1f2>
					case CL_DPREP_PRIME_BLOODPUMP_STOP:
					 cl_bp_controller(CL_BP_EVENT_STOP,0);
   88298:	2004      	movs	r0, #4
   8829a:	2100      	movs	r1, #0
   8829c:	4b47      	ldr	r3, [pc, #284]	; (883bc <cl_dprep_primecontroller+0x2fc>)
   8829e:	4798      	blx	r3
					break;
   882a0:	e007      	b.n	882b2 <cl_dprep_primecontroller+0x1f2>
					case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
					cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   882a2:	88bb      	ldrh	r3, [r7, #4]
   882a4:	b21b      	sxth	r3, r3
   882a6:	2001      	movs	r0, #1
   882a8:	4619      	mov	r1, r3
   882aa:	4b44      	ldr	r3, [pc, #272]	; (883bc <cl_dprep_primecontroller+0x2fc>)
   882ac:	4798      	blx	r3
					break;
   882ae:	e000      	b.n	882b2 <cl_dprep_primecontroller+0x1f2>
					default:break;
   882b0:	bf00      	nop
				}

			
			break;
   882b2:	e3c6      	b.n	88a42 <cl_dprep_primecontroller+0x982>
			case CL_DPREP_PRIME_STATE_PRIME_STOPPED:
						switch(prime_event)
   882b4:	79fb      	ldrb	r3, [r7, #7]
   882b6:	3b01      	subs	r3, #1
   882b8:	2b0d      	cmp	r3, #13
   882ba:	f200 83b7 	bhi.w	88a2c <cl_dprep_primecontroller+0x96c>
   882be:	a201      	add	r2, pc, #4	; (adr r2, 882c4 <cl_dprep_primecontroller+0x204>)
   882c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   882c4:	000882fd 	.word	0x000882fd
   882c8:	00088a2d 	.word	0x00088a2d
   882cc:	00088a2d 	.word	0x00088a2d
   882d0:	00088a2d 	.word	0x00088a2d
   882d4:	00088a2d 	.word	0x00088a2d
   882d8:	00088a2d 	.word	0x00088a2d
   882dc:	00088a2d 	.word	0x00088a2d
   882e0:	00088a2d 	.word	0x00088a2d
   882e4:	00088a2d 	.word	0x00088a2d
   882e8:	00088a2d 	.word	0x00088a2d
   882ec:	00088a2d 	.word	0x00088a2d
   882f0:	00088349 	.word	0x00088349
   882f4:	00088353 	.word	0x00088353
   882f8:	0008835d 	.word	0x0008835d
						{
							case CL_DPREP_PRIME_PRIME_START:
							DD_CAN_WRITE_HEMO(HEMO_START_BD_CALIBRATION, 0);
   882fc:	2029      	movs	r0, #41	; 0x29
   882fe:	2100      	movs	r1, #0
   88300:	4b2f      	ldr	r3, [pc, #188]	; (883c0 <cl_dprep_primecontroller+0x300>)
   88302:	4798      	blx	r3
								cl_bp_controller(CL_BP_EVENT_START,0);
   88304:	2002      	movs	r0, #2
   88306:	2100      	movs	r1, #0
   88308:	4b2c      	ldr	r3, [pc, #176]	; (883bc <cl_dprep_primecontroller+0x2fc>)
   8830a:	4798      	blx	r3
								cl_prime_min = 0;
   8830c:	4b34      	ldr	r3, [pc, #208]	; (883e0 <cl_dprep_primecontroller+0x320>)
   8830e:	2200      	movs	r2, #0
   88310:	701a      	strb	r2, [r3, #0]
								cl_prime_sec = 0;
   88312:	4b32      	ldr	r3, [pc, #200]	; (883dc <cl_dprep_primecontroller+0x31c>)
   88314:	2200      	movs	r2, #0
   88316:	701a      	strb	r2, [r3, #0]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   88318:	1d3b      	adds	r3, r7, #4
   8831a:	200d      	movs	r0, #13
   8831c:	4619      	mov	r1, r3
   8831e:	2200      	movs	r2, #0
   88320:	4b29      	ldr	r3, [pc, #164]	; (883c8 <cl_dprep_primecontroller+0x308>)
   88322:	4798      	blx	r3
   88324:	4603      	mov	r3, r0
   88326:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   88328:	1d3b      	adds	r3, r7, #4
   8832a:	2024      	movs	r0, #36	; 0x24
   8832c:	4619      	mov	r1, r3
   8832e:	2200      	movs	r2, #0
   88330:	4b25      	ldr	r3, [pc, #148]	; (883c8 <cl_dprep_primecontroller+0x308>)
   88332:	4798      	blx	r3
   88334:	4603      	mov	r3, r0
   88336:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88338:	4b26      	ldr	r3, [pc, #152]	; (883d4 <cl_dprep_primecontroller+0x314>)
   8833a:	4798      	blx	r3
   8833c:	4603      	mov	r3, r0
   8833e:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   88340:	4b1c      	ldr	r3, [pc, #112]	; (883b4 <cl_dprep_primecontroller+0x2f4>)
   88342:	2201      	movs	r2, #1
   88344:	701a      	strb	r2, [r3, #0]
							break;
   88346:	e010      	b.n	8836a <cl_dprep_primecontroller+0x2aa>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88348:	2002      	movs	r0, #2
   8834a:	2100      	movs	r1, #0
   8834c:	4b1b      	ldr	r3, [pc, #108]	; (883bc <cl_dprep_primecontroller+0x2fc>)
   8834e:	4798      	blx	r3
							break;
   88350:	e00b      	b.n	8836a <cl_dprep_primecontroller+0x2aa>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88352:	2004      	movs	r0, #4
   88354:	2100      	movs	r1, #0
   88356:	4b19      	ldr	r3, [pc, #100]	; (883bc <cl_dprep_primecontroller+0x2fc>)
   88358:	4798      	blx	r3
							break;
   8835a:	e006      	b.n	8836a <cl_dprep_primecontroller+0x2aa>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   8835c:	88bb      	ldrh	r3, [r7, #4]
   8835e:	b21b      	sxth	r3, r3
   88360:	2001      	movs	r0, #1
   88362:	4619      	mov	r1, r3
   88364:	4b15      	ldr	r3, [pc, #84]	; (883bc <cl_dprep_primecontroller+0x2fc>)
   88366:	4798      	blx	r3
							break;
   88368:	bf00      	nop
						}
			break;
   8836a:	e35f      	b.n	88a2c <cl_dprep_primecontroller+0x96c>
			case CL_DPREP_PRIME_STATE_PRIME_PAUSED:
						switch(prime_event)
   8836c:	79fb      	ldrb	r3, [r7, #7]
   8836e:	3b01      	subs	r3, #1
   88370:	2b0d      	cmp	r3, #13
   88372:	f200 835d 	bhi.w	88a30 <cl_dprep_primecontroller+0x970>
   88376:	a201      	add	r2, pc, #4	; (adr r2, 8837c <cl_dprep_primecontroller+0x2bc>)
   88378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8837c:	000883e5 	.word	0x000883e5
   88380:	0008841d 	.word	0x0008841d
   88384:	00088a31 	.word	0x00088a31
   88388:	00088a31 	.word	0x00088a31
   8838c:	00088a31 	.word	0x00088a31
   88390:	00088a31 	.word	0x00088a31
   88394:	00088a31 	.word	0x00088a31
   88398:	00088a31 	.word	0x00088a31
   8839c:	00088a31 	.word	0x00088a31
   883a0:	00088a31 	.word	0x00088a31
   883a4:	00088a31 	.word	0x00088a31
   883a8:	0008843d 	.word	0x0008843d
   883ac:	00088447 	.word	0x00088447
   883b0:	00088451 	.word	0x00088451
   883b4:	20071aa4 	.word	0x20071aa4
   883b8:	20072878 	.word	0x20072878
   883bc:	00094325 	.word	0x00094325
   883c0:	00098145 	.word	0x00098145
   883c4:	000aa24c 	.word	0x000aa24c
   883c8:	0009d1e9 	.word	0x0009d1e9
   883cc:	0009b5b1 	.word	0x0009b5b1
   883d0:	00082a35 	.word	0x00082a35
   883d4:	00088a5d 	.word	0x00088a5d
   883d8:	000a2349 	.word	0x000a2349
   883dc:	20071aa6 	.word	0x20071aa6
   883e0:	20071aa7 	.word	0x20071aa7
						{
							case CL_DPREP_PRIME_PRIME_START:
								cl_bp_controller(CL_BP_EVENT_START,0);
   883e4:	2002      	movs	r0, #2
   883e6:	2100      	movs	r1, #0
   883e8:	4ba7      	ldr	r3, [pc, #668]	; (88688 <cl_dprep_primecontroller+0x5c8>)
   883ea:	4798      	blx	r3
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   883ec:	1d3b      	adds	r3, r7, #4
   883ee:	200d      	movs	r0, #13
   883f0:	4619      	mov	r1, r3
   883f2:	2200      	movs	r2, #0
   883f4:	4ba5      	ldr	r3, [pc, #660]	; (8868c <cl_dprep_primecontroller+0x5cc>)
   883f6:	4798      	blx	r3
   883f8:	4603      	mov	r3, r0
   883fa:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   883fc:	1d3b      	adds	r3, r7, #4
   883fe:	2024      	movs	r0, #36	; 0x24
   88400:	4619      	mov	r1, r3
   88402:	2200      	movs	r2, #0
   88404:	4ba1      	ldr	r3, [pc, #644]	; (8868c <cl_dprep_primecontroller+0x5cc>)
   88406:	4798      	blx	r3
   88408:	4603      	mov	r3, r0
   8840a:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   8840c:	4ba0      	ldr	r3, [pc, #640]	; (88690 <cl_dprep_primecontroller+0x5d0>)
   8840e:	4798      	blx	r3
   88410:	4603      	mov	r3, r0
   88412:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   88414:	4b9f      	ldr	r3, [pc, #636]	; (88694 <cl_dprep_primecontroller+0x5d4>)
   88416:	2201      	movs	r2, #1
   88418:	701a      	strb	r2, [r3, #0]
							break;
   8841a:	e020      	b.n	8845e <cl_dprep_primecontroller+0x39e>
							case CL_DPREP_PRIME_PRIME_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   8841c:	2004      	movs	r0, #4
   8841e:	2100      	movs	r1, #0
   88420:	4b99      	ldr	r3, [pc, #612]	; (88688 <cl_dprep_primecontroller+0x5c8>)
   88422:	4798      	blx	r3
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STOPPED,&data,0);
   88424:	1d3b      	adds	r3, r7, #4
   88426:	2023      	movs	r0, #35	; 0x23
   88428:	4619      	mov	r1, r3
   8842a:	2200      	movs	r2, #0
   8842c:	4b97      	ldr	r3, [pc, #604]	; (8868c <cl_dprep_primecontroller+0x5cc>)
   8842e:	4798      	blx	r3
   88430:	4603      	mov	r3, r0
   88432:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   88434:	4b97      	ldr	r3, [pc, #604]	; (88694 <cl_dprep_primecontroller+0x5d4>)
   88436:	2203      	movs	r2, #3
   88438:	701a      	strb	r2, [r3, #0]
							break;
   8843a:	e010      	b.n	8845e <cl_dprep_primecontroller+0x39e>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   8843c:	2002      	movs	r0, #2
   8843e:	2100      	movs	r1, #0
   88440:	4b91      	ldr	r3, [pc, #580]	; (88688 <cl_dprep_primecontroller+0x5c8>)
   88442:	4798      	blx	r3
							break;
   88444:	e00b      	b.n	8845e <cl_dprep_primecontroller+0x39e>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88446:	2004      	movs	r0, #4
   88448:	2100      	movs	r1, #0
   8844a:	4b8f      	ldr	r3, [pc, #572]	; (88688 <cl_dprep_primecontroller+0x5c8>)
   8844c:	4798      	blx	r3
							break;
   8844e:	e006      	b.n	8845e <cl_dprep_primecontroller+0x39e>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88450:	88bb      	ldrh	r3, [r7, #4]
   88452:	b21b      	sxth	r3, r3
   88454:	2001      	movs	r0, #1
   88456:	4619      	mov	r1, r3
   88458:	4b8b      	ldr	r3, [pc, #556]	; (88688 <cl_dprep_primecontroller+0x5c8>)
   8845a:	4798      	blx	r3
							break;
   8845c:	bf00      	nop
						}
			break;
   8845e:	e2e7      	b.n	88a30 <cl_dprep_primecontroller+0x970>
			case CL_DPREP_PRIME_STATE_PRIME_COMPLETED:
						switch(prime_event)
   88460:	79fb      	ldrb	r3, [r7, #7]
   88462:	3b01      	subs	r3, #1
   88464:	2b0d      	cmp	r3, #13
   88466:	f200 82e5 	bhi.w	88a34 <cl_dprep_primecontroller+0x974>
   8846a:	a201      	add	r2, pc, #4	; (adr r2, 88470 <cl_dprep_primecontroller+0x3b0>)
   8846c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88470:	000884ef 	.word	0x000884ef
   88474:	00088a35 	.word	0x00088a35
   88478:	00088a35 	.word	0x00088a35
   8847c:	00088a35 	.word	0x00088a35
   88480:	000884a9 	.word	0x000884a9
   88484:	00088577 	.word	0x00088577
   88488:	00088a35 	.word	0x00088a35
   8848c:	0008853d 	.word	0x0008853d
   88490:	00088a35 	.word	0x00088a35
   88494:	00088a35 	.word	0x00088a35
   88498:	00088a35 	.word	0x00088a35
   8849c:	00088555 	.word	0x00088555
   884a0:	0008855f 	.word	0x0008855f
   884a4:	00088569 	.word	0x00088569
						{
							case CL_DPREP_PRIME_RCIRC_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC2",6);
   884a8:	2018      	movs	r0, #24
   884aa:	497b      	ldr	r1, [pc, #492]	; (88698 <cl_dprep_primecontroller+0x5d8>)
   884ac:	2206      	movs	r2, #6
   884ae:	4b77      	ldr	r3, [pc, #476]	; (8868c <cl_dprep_primecontroller+0x5cc>)
   884b0:	4798      	blx	r3
							cl_prime_min =  0;
   884b2:	4b7a      	ldr	r3, [pc, #488]	; (8869c <cl_dprep_primecontroller+0x5dc>)
   884b4:	2200      	movs	r2, #0
   884b6:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   884b8:	4b79      	ldr	r3, [pc, #484]	; (886a0 <cl_dprep_primecontroller+0x5e0>)
   884ba:	2200      	movs	r2, #0
   884bc:	701a      	strb	r2, [r3, #0]
					cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,100); 
   884be:	2001      	movs	r0, #1
   884c0:	2164      	movs	r1, #100	; 0x64
   884c2:	4b71      	ldr	r3, [pc, #452]	; (88688 <cl_dprep_primecontroller+0x5c8>)
   884c4:	4798      	blx	r3
								cl_bp_controller(CL_BP_EVENT_START,0);
   884c6:	2002      	movs	r0, #2
   884c8:	2100      	movs	r1, #0
   884ca:	4b6f      	ldr	r3, [pc, #444]	; (88688 <cl_dprep_primecontroller+0x5c8>)
   884cc:	4798      	blx	r3
								//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_STARTED,&data,0);
   884ce:	1d3b      	adds	r3, r7, #4
   884d0:	202f      	movs	r0, #47	; 0x2f
   884d2:	4619      	mov	r1, r3
   884d4:	2200      	movs	r2, #0
   884d6:	4b6d      	ldr	r3, [pc, #436]	; (8868c <cl_dprep_primecontroller+0x5cc>)
   884d8:	4798      	blx	r3
   884da:	4603      	mov	r3, r0
   884dc:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   884de:	4b6c      	ldr	r3, [pc, #432]	; (88690 <cl_dprep_primecontroller+0x5d0>)
   884e0:	4798      	blx	r3
   884e2:	4603      	mov	r3, r0
   884e4:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
   884e6:	4b6b      	ldr	r3, [pc, #428]	; (88694 <cl_dprep_primecontroller+0x5d4>)
   884e8:	2205      	movs	r2, #5
   884ea:	701a      	strb	r2, [r3, #0]
							break;
   884ec:	e044      	b.n	88578 <cl_dprep_primecontroller+0x4b8>
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
							case CL_DPREP_PRIME_PRIME_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME2",6);
   884ee:	2018      	movs	r0, #24
   884f0:	496c      	ldr	r1, [pc, #432]	; (886a4 <cl_dprep_primecontroller+0x5e4>)
   884f2:	2206      	movs	r2, #6
   884f4:	4b65      	ldr	r3, [pc, #404]	; (8868c <cl_dprep_primecontroller+0x5cc>)
   884f6:	4798      	blx	r3
							cl_prime_min =  0;
   884f8:	4b68      	ldr	r3, [pc, #416]	; (8869c <cl_dprep_primecontroller+0x5dc>)
   884fa:	2200      	movs	r2, #0
   884fc:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   884fe:	4b68      	ldr	r3, [pc, #416]	; (886a0 <cl_dprep_primecontroller+0x5e0>)
   88500:	2200      	movs	r2, #0
   88502:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   88504:	2002      	movs	r0, #2
   88506:	2100      	movs	r1, #0
   88508:	4b5f      	ldr	r3, [pc, #380]	; (88688 <cl_dprep_primecontroller+0x5c8>)
   8850a:	4798      	blx	r3
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   8850c:	1d3b      	adds	r3, r7, #4
   8850e:	200d      	movs	r0, #13
   88510:	4619      	mov	r1, r3
   88512:	2200      	movs	r2, #0
   88514:	4b5d      	ldr	r3, [pc, #372]	; (8868c <cl_dprep_primecontroller+0x5cc>)
   88516:	4798      	blx	r3
   88518:	4603      	mov	r3, r0
   8851a:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   8851c:	1d3b      	adds	r3, r7, #4
   8851e:	2024      	movs	r0, #36	; 0x24
   88520:	4619      	mov	r1, r3
   88522:	2200      	movs	r2, #0
   88524:	4b59      	ldr	r3, [pc, #356]	; (8868c <cl_dprep_primecontroller+0x5cc>)
   88526:	4798      	blx	r3
   88528:	4603      	mov	r3, r0
   8852a:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   8852c:	4b58      	ldr	r3, [pc, #352]	; (88690 <cl_dprep_primecontroller+0x5d0>)
   8852e:	4798      	blx	r3
   88530:	4603      	mov	r3, r0
   88532:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   88534:	4b57      	ldr	r3, [pc, #348]	; (88694 <cl_dprep_primecontroller+0x5d4>)
   88536:	2201      	movs	r2, #1
   88538:	701a      	strb	r2, [r3, #0]
							break;
   8853a:	e01d      	b.n	88578 <cl_dprep_primecontroller+0x4b8>

							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							cl_bp_controller(CL_BP_EVENT_START,0);
   8853c:	2002      	movs	r0, #2
   8853e:	2100      	movs	r1, #0
   88540:	4b51      	ldr	r3, [pc, #324]	; (88688 <cl_dprep_primecontroller+0x5c8>)
   88542:	4798      	blx	r3
						//	Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
						//	Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   88544:	4b58      	ldr	r3, [pc, #352]	; (886a8 <cl_dprep_primecontroller+0x5e8>)
   88546:	4798      	blx	r3
   88548:	4603      	mov	r3, r0
   8854a:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   8854c:	4b51      	ldr	r3, [pc, #324]	; (88694 <cl_dprep_primecontroller+0x5d4>)
   8854e:	2209      	movs	r2, #9
   88550:	701a      	strb	r2, [r3, #0]
							break;
   88552:	e011      	b.n	88578 <cl_dprep_primecontroller+0x4b8>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88554:	2002      	movs	r0, #2
   88556:	2100      	movs	r1, #0
   88558:	4b4b      	ldr	r3, [pc, #300]	; (88688 <cl_dprep_primecontroller+0x5c8>)
   8855a:	4798      	blx	r3
							break;
   8855c:	e00c      	b.n	88578 <cl_dprep_primecontroller+0x4b8>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   8855e:	2004      	movs	r0, #4
   88560:	2100      	movs	r1, #0
   88562:	4b49      	ldr	r3, [pc, #292]	; (88688 <cl_dprep_primecontroller+0x5c8>)
   88564:	4798      	blx	r3
							break;
   88566:	e007      	b.n	88578 <cl_dprep_primecontroller+0x4b8>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88568:	88bb      	ldrh	r3, [r7, #4]
   8856a:	b21b      	sxth	r3, r3
   8856c:	2001      	movs	r0, #1
   8856e:	4619      	mov	r1, r3
   88570:	4b45      	ldr	r3, [pc, #276]	; (88688 <cl_dprep_primecontroller+0x5c8>)
   88572:	4798      	blx	r3
							break;
   88574:	e000      	b.n	88578 <cl_dprep_primecontroller+0x4b8>
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
							break;
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
   88576:	bf00      	nop
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
						
			break;
   88578:	e25c      	b.n	88a34 <cl_dprep_primecontroller+0x974>
			case CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED:
		
					switch(prime_event)
   8857a:	79fb      	ldrb	r3, [r7, #7]
   8857c:	3b02      	subs	r3, #2
   8857e:	2b0c      	cmp	r3, #12
   88580:	d87b      	bhi.n	8867a <cl_dprep_primecontroller+0x5ba>
   88582:	a201      	add	r2, pc, #4	; (adr r2, 88588 <cl_dprep_primecontroller+0x4c8>)
   88584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88588:	00088629 	.word	0x00088629
   8858c:	000885bd 	.word	0x000885bd
   88590:	00088649 	.word	0x00088649
   88594:	0008867b 	.word	0x0008867b
   88598:	0008867b 	.word	0x0008867b
   8859c:	0008867b 	.word	0x0008867b
   885a0:	0008867b 	.word	0x0008867b
   885a4:	0008867b 	.word	0x0008867b
   885a8:	0008867b 	.word	0x0008867b
   885ac:	000885c5 	.word	0x000885c5
   885b0:	00088659 	.word	0x00088659
   885b4:	00088663 	.word	0x00088663
   885b8:	0008866d 	.word	0x0008866d
					{
						case CL_DPREP_PRIME_PRIME_ALARM:
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STOPPED;
   885bc:	4b35      	ldr	r3, [pc, #212]	; (88694 <cl_dprep_primecontroller+0x5d4>)
   885be:	2206      	movs	r2, #6
   885c0:	701a      	strb	r2, [r3, #0]
						break;
   885c2:	e05b      	b.n	8867c <cl_dprep_primecontroller+0x5bc>
						case CL_DPREP_PRIME_PRIME_TICK_SEC:
						if(cl_prime_sec++ >= 60)
   885c4:	4b36      	ldr	r3, [pc, #216]	; (886a0 <cl_dprep_primecontroller+0x5e0>)
   885c6:	781b      	ldrb	r3, [r3, #0]
   885c8:	b2db      	uxtb	r3, r3
   885ca:	b2da      	uxtb	r2, r3
   885cc:	3201      	adds	r2, #1
   885ce:	b2d2      	uxtb	r2, r2
   885d0:	b2d1      	uxtb	r1, r2
   885d2:	4a33      	ldr	r2, [pc, #204]	; (886a0 <cl_dprep_primecontroller+0x5e0>)
   885d4:	7011      	strb	r1, [r2, #0]
   885d6:	b25b      	sxtb	r3, r3
   885d8:	2b3b      	cmp	r3, #59	; 0x3b
   885da:	dd0f      	ble.n	885fc <cl_dprep_primecontroller+0x53c>
						{
							cl_prime_sec = 0;
   885dc:	4b30      	ldr	r3, [pc, #192]	; (886a0 <cl_dprep_primecontroller+0x5e0>)
   885de:	2200      	movs	r2, #0
   885e0:	701a      	strb	r2, [r3, #0]
							cl_prime_min++;
   885e2:	4b2e      	ldr	r3, [pc, #184]	; (8869c <cl_dprep_primecontroller+0x5dc>)
   885e4:	781b      	ldrb	r3, [r3, #0]
   885e6:	b2db      	uxtb	r3, r3
   885e8:	b2db      	uxtb	r3, r3
   885ea:	3301      	adds	r3, #1
   885ec:	b2db      	uxtb	r3, r3
   885ee:	b2da      	uxtb	r2, r3
   885f0:	4b2a      	ldr	r3, [pc, #168]	; (8869c <cl_dprep_primecontroller+0x5dc>)
   885f2:	701a      	strb	r2, [r3, #0]
							Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   885f4:	4b26      	ldr	r3, [pc, #152]	; (88690 <cl_dprep_primecontroller+0x5d0>)
   885f6:	4798      	blx	r3
   885f8:	4603      	mov	r3, r0
   885fa:	73fb      	strb	r3, [r7, #15]
						}
						if(cl_prime_min >= CL_DPREP_PRIME_TIMEOUT_MIN )
   885fc:	4b27      	ldr	r3, [pc, #156]	; (8869c <cl_dprep_primecontroller+0x5dc>)
   885fe:	781b      	ldrb	r3, [r3, #0]
   88600:	b25b      	sxtb	r3, r3
   88602:	2b00      	cmp	r3, #0
   88604:	dd0f      	ble.n	88626 <cl_dprep_primecontroller+0x566>
						{
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88606:	2004      	movs	r0, #4
   88608:	2100      	movs	r1, #0
   8860a:	4b1f      	ldr	r3, [pc, #124]	; (88688 <cl_dprep_primecontroller+0x5c8>)
   8860c:	4798      	blx	r3
						
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_COMPLETED,&data,0);
   8860e:	1d3b      	adds	r3, r7, #4
   88610:	2031      	movs	r0, #49	; 0x31
   88612:	4619      	mov	r1, r3
   88614:	2200      	movs	r2, #0
   88616:	4b1d      	ldr	r3, [pc, #116]	; (8868c <cl_dprep_primecontroller+0x5cc>)
   88618:	4798      	blx	r3
   8861a:	4603      	mov	r3, r0
   8861c:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED;
   8861e:	4b1d      	ldr	r3, [pc, #116]	; (88694 <cl_dprep_primecontroller+0x5d4>)
   88620:	2208      	movs	r2, #8
   88622:	701a      	strb	r2, [r3, #0]
						
						}

						break;
   88624:	e02a      	b.n	8867c <cl_dprep_primecontroller+0x5bc>
   88626:	e029      	b.n	8867c <cl_dprep_primecontroller+0x5bc>
						case CL_DPREP_PRIME_PRIME_SET_RATE:
						break;
						case CL_DPREP_PRIME_PRIME_STOP:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   88628:	2004      	movs	r0, #4
   8862a:	2100      	movs	r1, #0
   8862c:	4b16      	ldr	r3, [pc, #88]	; (88688 <cl_dprep_primecontroller+0x5c8>)
   8862e:	4798      	blx	r3
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STOPPED,&data,0);
   88630:	1d3b      	adds	r3, r7, #4
   88632:	2023      	movs	r0, #35	; 0x23
   88634:	4619      	mov	r1, r3
   88636:	2200      	movs	r2, #0
   88638:	4b14      	ldr	r3, [pc, #80]	; (8868c <cl_dprep_primecontroller+0x5cc>)
   8863a:	4798      	blx	r3
   8863c:	4603      	mov	r3, r0
   8863e:	73fb      	strb	r3, [r7, #15]
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   88640:	4b14      	ldr	r3, [pc, #80]	; (88694 <cl_dprep_primecontroller+0x5d4>)
   88642:	2203      	movs	r2, #3
   88644:	701a      	strb	r2, [r3, #0]
						break;
   88646:	e019      	b.n	8867c <cl_dprep_primecontroller+0x5bc>
						case CL_DPREP_PRIME_PRIME_PAUSE:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   88648:	2004      	movs	r0, #4
   8864a:	2100      	movs	r1, #0
   8864c:	4b0e      	ldr	r3, [pc, #56]	; (88688 <cl_dprep_primecontroller+0x5c8>)
   8864e:	4798      	blx	r3
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_PAUSED;
   88650:	4b10      	ldr	r3, [pc, #64]	; (88694 <cl_dprep_primecontroller+0x5d4>)
   88652:	2204      	movs	r2, #4
   88654:	701a      	strb	r2, [r3, #0]
						break;
   88656:	e011      	b.n	8867c <cl_dprep_primecontroller+0x5bc>
						case 	CL_DPREP_PRIME_BLOODPUMP_START:
						 cl_bp_controller(CL_BP_EVENT_START,0);
   88658:	2002      	movs	r0, #2
   8865a:	2100      	movs	r1, #0
   8865c:	4b0a      	ldr	r3, [pc, #40]	; (88688 <cl_dprep_primecontroller+0x5c8>)
   8865e:	4798      	blx	r3
						break;
   88660:	e00c      	b.n	8867c <cl_dprep_primecontroller+0x5bc>
						case CL_DPREP_PRIME_BLOODPUMP_STOP:
						 cl_bp_controller(CL_BP_EVENT_STOP,0);
   88662:	2004      	movs	r0, #4
   88664:	2100      	movs	r1, #0
   88666:	4b08      	ldr	r3, [pc, #32]	; (88688 <cl_dprep_primecontroller+0x5c8>)
   88668:	4798      	blx	r3
						break;
   8866a:	e007      	b.n	8867c <cl_dprep_primecontroller+0x5bc>
						case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
						cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   8866c:	88bb      	ldrh	r3, [r7, #4]
   8866e:	b21b      	sxth	r3, r3
   88670:	2001      	movs	r0, #1
   88672:	4619      	mov	r1, r3
   88674:	4b04      	ldr	r3, [pc, #16]	; (88688 <cl_dprep_primecontroller+0x5c8>)
   88676:	4798      	blx	r3
						break;
   88678:	e000      	b.n	8867c <cl_dprep_primecontroller+0x5bc>
						default:break;
   8867a:	bf00      	nop
					}

			
			break;
   8867c:	e1e1      	b.n	88a42 <cl_dprep_primecontroller+0x982>
			case CL_DPREP_PRIME_STATE_PRIME_RCIRC_STOPPED:
							switch(prime_event)
   8867e:	79fb      	ldrb	r3, [r7, #7]
   88680:	2b05      	cmp	r3, #5
   88682:	d013      	beq.n	886ac <cl_dprep_primecontroller+0x5ec>
									Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_STARTED,&data,0);
									Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
								break;
								default:break;
   88684:	e031      	b.n	886ea <cl_dprep_primecontroller+0x62a>
   88686:	bf00      	nop
   88688:	00094325 	.word	0x00094325
   8868c:	0009d1e9 	.word	0x0009d1e9
   88690:	00088a5d 	.word	0x00088a5d
   88694:	20071aa4 	.word	0x20071aa4
   88698:	000aa254 	.word	0x000aa254
   8869c:	20071aa7 	.word	0x20071aa7
   886a0:	20071aa6 	.word	0x20071aa6
   886a4:	000aa24c 	.word	0x000aa24c
   886a8:	00088ae1 	.word	0x00088ae1
			break;
			case CL_DPREP_PRIME_STATE_PRIME_RCIRC_STOPPED:
							switch(prime_event)
									{
							case CL_DPREP_PRIME_RCIRC_START:
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC2",6);
   886ac:	2018      	movs	r0, #24
   886ae:	49b2      	ldr	r1, [pc, #712]	; (88978 <cl_dprep_primecontroller+0x8b8>)
   886b0:	2206      	movs	r2, #6
   886b2:	4bb2      	ldr	r3, [pc, #712]	; (8897c <cl_dprep_primecontroller+0x8bc>)
   886b4:	4798      	blx	r3
									cl_prime_min =  0;
   886b6:	4bb2      	ldr	r3, [pc, #712]	; (88980 <cl_dprep_primecontroller+0x8c0>)
   886b8:	2200      	movs	r2, #0
   886ba:	701a      	strb	r2, [r3, #0]
									cl_prime_sec = 0;
   886bc:	4bb1      	ldr	r3, [pc, #708]	; (88984 <cl_dprep_primecontroller+0x8c4>)
   886be:	2200      	movs	r2, #0
   886c0:	701a      	strb	r2, [r3, #0]
					
									cl_bp_controller(CL_BP_EVENT_START,0);
   886c2:	2002      	movs	r0, #2
   886c4:	2100      	movs	r1, #0
   886c6:	4bb0      	ldr	r3, [pc, #704]	; (88988 <cl_dprep_primecontroller+0x8c8>)
   886c8:	4798      	blx	r3
									//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
									Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_STARTED,&data,0);
   886ca:	1d3b      	adds	r3, r7, #4
   886cc:	202f      	movs	r0, #47	; 0x2f
   886ce:	4619      	mov	r1, r3
   886d0:	2200      	movs	r2, #0
   886d2:	4baa      	ldr	r3, [pc, #680]	; (8897c <cl_dprep_primecontroller+0x8bc>)
   886d4:	4798      	blx	r3
   886d6:	4603      	mov	r3, r0
   886d8:	73fb      	strb	r3, [r7, #15]
									Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   886da:	4bac      	ldr	r3, [pc, #688]	; (8898c <cl_dprep_primecontroller+0x8cc>)
   886dc:	4798      	blx	r3
   886de:	4603      	mov	r3, r0
   886e0:	73fb      	strb	r3, [r7, #15]
								
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
   886e2:	4bab      	ldr	r3, [pc, #684]	; (88990 <cl_dprep_primecontroller+0x8d0>)
   886e4:	2205      	movs	r2, #5
   886e6:	701a      	strb	r2, [r3, #0]
								break;
   886e8:	bf00      	nop
								default:break;
									}
			break;
   886ea:	e1aa      	b.n	88a42 <cl_dprep_primecontroller+0x982>
			case CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED:
						switch(prime_event)
   886ec:	79fb      	ldrb	r3, [r7, #7]
   886ee:	3b01      	subs	r3, #1
   886f0:	2b0d      	cmp	r3, #13
   886f2:	f200 81a1 	bhi.w	88a38 <cl_dprep_primecontroller+0x978>
   886f6:	a201      	add	r2, pc, #4	; (adr r2, 886fc <cl_dprep_primecontroller+0x63c>)
   886f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   886fc:	00088773 	.word	0x00088773
   88700:	00088a39 	.word	0x00088a39
   88704:	00088a39 	.word	0x00088a39
   88708:	00088a39 	.word	0x00088a39
   8870c:	00088735 	.word	0x00088735
   88710:	0008880b 	.word	0x0008880b
   88714:	00088a39 	.word	0x00088a39
   88718:	000887c1 	.word	0x000887c1
   8871c:	00088a39 	.word	0x00088a39
   88720:	00088a39 	.word	0x00088a39
   88724:	00088a39 	.word	0x00088a39
   88728:	000887e9 	.word	0x000887e9
   8872c:	000887f3 	.word	0x000887f3
   88730:	000887fd 	.word	0x000887fd
						{
							case CL_DPREP_PRIME_RCIRC_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC2",6);
   88734:	2018      	movs	r0, #24
   88736:	4990      	ldr	r1, [pc, #576]	; (88978 <cl_dprep_primecontroller+0x8b8>)
   88738:	2206      	movs	r2, #6
   8873a:	4b90      	ldr	r3, [pc, #576]	; (8897c <cl_dprep_primecontroller+0x8bc>)
   8873c:	4798      	blx	r3
							cl_prime_min =  0;
   8873e:	4b90      	ldr	r3, [pc, #576]	; (88980 <cl_dprep_primecontroller+0x8c0>)
   88740:	2200      	movs	r2, #0
   88742:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   88744:	4b8f      	ldr	r3, [pc, #572]	; (88984 <cl_dprep_primecontroller+0x8c4>)
   88746:	2200      	movs	r2, #0
   88748:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   8874a:	2002      	movs	r0, #2
   8874c:	2100      	movs	r1, #0
   8874e:	4b8e      	ldr	r3, [pc, #568]	; (88988 <cl_dprep_primecontroller+0x8c8>)
   88750:	4798      	blx	r3
								//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_STARTED,&data,0);
   88752:	1d3b      	adds	r3, r7, #4
   88754:	202f      	movs	r0, #47	; 0x2f
   88756:	4619      	mov	r1, r3
   88758:	2200      	movs	r2, #0
   8875a:	4b88      	ldr	r3, [pc, #544]	; (8897c <cl_dprep_primecontroller+0x8bc>)
   8875c:	4798      	blx	r3
   8875e:	4603      	mov	r3, r0
   88760:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88762:	4b8a      	ldr	r3, [pc, #552]	; (8898c <cl_dprep_primecontroller+0x8cc>)
   88764:	4798      	blx	r3
   88766:	4603      	mov	r3, r0
   88768:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
   8876a:	4b89      	ldr	r3, [pc, #548]	; (88990 <cl_dprep_primecontroller+0x8d0>)
   8876c:	2205      	movs	r2, #5
   8876e:	701a      	strb	r2, [r3, #0]
							break;
   88770:	e04c      	b.n	8880c <cl_dprep_primecontroller+0x74c>
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
							case CL_DPREP_PRIME_PRIME_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME2",6);
   88772:	2018      	movs	r0, #24
   88774:	4987      	ldr	r1, [pc, #540]	; (88994 <cl_dprep_primecontroller+0x8d4>)
   88776:	2206      	movs	r2, #6
   88778:	4b80      	ldr	r3, [pc, #512]	; (8897c <cl_dprep_primecontroller+0x8bc>)
   8877a:	4798      	blx	r3
							cl_prime_min =  0;
   8877c:	4b80      	ldr	r3, [pc, #512]	; (88980 <cl_dprep_primecontroller+0x8c0>)
   8877e:	2200      	movs	r2, #0
   88780:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   88782:	4b80      	ldr	r3, [pc, #512]	; (88984 <cl_dprep_primecontroller+0x8c4>)
   88784:	2200      	movs	r2, #0
   88786:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   88788:	2002      	movs	r0, #2
   8878a:	2100      	movs	r1, #0
   8878c:	4b7e      	ldr	r3, [pc, #504]	; (88988 <cl_dprep_primecontroller+0x8c8>)
   8878e:	4798      	blx	r3
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   88790:	1d3b      	adds	r3, r7, #4
   88792:	200d      	movs	r0, #13
   88794:	4619      	mov	r1, r3
   88796:	2200      	movs	r2, #0
   88798:	4b78      	ldr	r3, [pc, #480]	; (8897c <cl_dprep_primecontroller+0x8bc>)
   8879a:	4798      	blx	r3
   8879c:	4603      	mov	r3, r0
   8879e:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   887a0:	1d3b      	adds	r3, r7, #4
   887a2:	2024      	movs	r0, #36	; 0x24
   887a4:	4619      	mov	r1, r3
   887a6:	2200      	movs	r2, #0
   887a8:	4b74      	ldr	r3, [pc, #464]	; (8897c <cl_dprep_primecontroller+0x8bc>)
   887aa:	4798      	blx	r3
   887ac:	4603      	mov	r3, r0
   887ae:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   887b0:	4b76      	ldr	r3, [pc, #472]	; (8898c <cl_dprep_primecontroller+0x8cc>)
   887b2:	4798      	blx	r3
   887b4:	4603      	mov	r3, r0
   887b6:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   887b8:	4b75      	ldr	r3, [pc, #468]	; (88990 <cl_dprep_primecontroller+0x8d0>)
   887ba:	2201      	movs	r2, #1
   887bc:	701a      	strb	r2, [r3, #0]
							break;
   887be:	e025      	b.n	8880c <cl_dprep_primecontroller+0x74c>

							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							cl_bp_controller(CL_BP_EVENT_START,0);
   887c0:	2002      	movs	r0, #2
   887c2:	2100      	movs	r1, #0
   887c4:	4b70      	ldr	r3, [pc, #448]	; (88988 <cl_dprep_primecontroller+0x8c8>)
   887c6:	4798      	blx	r3
						//	Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
   887c8:	1d3b      	adds	r3, r7, #4
   887ca:	2028      	movs	r0, #40	; 0x28
   887cc:	4619      	mov	r1, r3
   887ce:	2200      	movs	r2, #0
   887d0:	4b6a      	ldr	r3, [pc, #424]	; (8897c <cl_dprep_primecontroller+0x8bc>)
   887d2:	4798      	blx	r3
   887d4:	4603      	mov	r3, r0
   887d6:	73fb      	strb	r3, [r7, #15]
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   887d8:	4b6f      	ldr	r3, [pc, #444]	; (88998 <cl_dprep_primecontroller+0x8d8>)
   887da:	4798      	blx	r3
   887dc:	4603      	mov	r3, r0
   887de:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   887e0:	4b6b      	ldr	r3, [pc, #428]	; (88990 <cl_dprep_primecontroller+0x8d0>)
   887e2:	2209      	movs	r2, #9
   887e4:	701a      	strb	r2, [r3, #0]
							break;
   887e6:	e011      	b.n	8880c <cl_dprep_primecontroller+0x74c>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   887e8:	2002      	movs	r0, #2
   887ea:	2100      	movs	r1, #0
   887ec:	4b66      	ldr	r3, [pc, #408]	; (88988 <cl_dprep_primecontroller+0x8c8>)
   887ee:	4798      	blx	r3
							break;
   887f0:	e00c      	b.n	8880c <cl_dprep_primecontroller+0x74c>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   887f2:	2004      	movs	r0, #4
   887f4:	2100      	movs	r1, #0
   887f6:	4b64      	ldr	r3, [pc, #400]	; (88988 <cl_dprep_primecontroller+0x8c8>)
   887f8:	4798      	blx	r3
							break;
   887fa:	e007      	b.n	8880c <cl_dprep_primecontroller+0x74c>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   887fc:	88bb      	ldrh	r3, [r7, #4]
   887fe:	b21b      	sxth	r3, r3
   88800:	2001      	movs	r0, #1
   88802:	4619      	mov	r1, r3
   88804:	4b60      	ldr	r3, [pc, #384]	; (88988 <cl_dprep_primecontroller+0x8c8>)
   88806:	4798      	blx	r3
							break;
   88808:	e000      	b.n	8880c <cl_dprep_primecontroller+0x74c>
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
							break;
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
   8880a:	bf00      	nop
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
			break;
   8880c:	e114      	b.n	88a38 <cl_dprep_primecontroller+0x978>
			
			case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING:
						switch(prime_event)
   8880e:	79fb      	ldrb	r3, [r7, #7]
   88810:	3b02      	subs	r3, #2
   88812:	2b0c      	cmp	r3, #12
   88814:	d870      	bhi.n	888f8 <cl_dprep_primecontroller+0x838>
   88816:	a201      	add	r2, pc, #4	; (adr r2, 8881c <cl_dprep_primecontroller+0x75c>)
   88818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8881c:	0008888d 	.word	0x0008888d
   88820:	00088851 	.word	0x00088851
   88824:	000888f9 	.word	0x000888f9
   88828:	000888f9 	.word	0x000888f9
   8882c:	000888f9 	.word	0x000888f9
   88830:	000888f9 	.word	0x000888f9
   88834:	000888f9 	.word	0x000888f9
   88838:	0008888d 	.word	0x0008888d
   8883c:	000888cf 	.word	0x000888cf
   88840:	00088859 	.word	0x00088859
   88844:	000888d7 	.word	0x000888d7
   88848:	000888e1 	.word	0x000888e1
   8884c:	000888eb 	.word	0x000888eb
						{
							case CL_DPREP_PRIME_PRIME_ALARM:
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED;
   88850:	4b4f      	ldr	r3, [pc, #316]	; (88990 <cl_dprep_primecontroller+0x8d0>)
   88852:	220b      	movs	r2, #11
   88854:	701a      	strb	r2, [r3, #0]
							break;
   88856:	e050      	b.n	888fa <cl_dprep_primecontroller+0x83a>
							case CL_DPREP_PRIME_PRIME_TICK_SEC:
							if(cl_dialyser_prime_sec++ >= 60)
   88858:	4b50      	ldr	r3, [pc, #320]	; (8899c <cl_dprep_primecontroller+0x8dc>)
   8885a:	781b      	ldrb	r3, [r3, #0]
   8885c:	b2db      	uxtb	r3, r3
   8885e:	b2da      	uxtb	r2, r3
   88860:	3201      	adds	r2, #1
   88862:	b2d2      	uxtb	r2, r2
   88864:	b2d1      	uxtb	r1, r2
   88866:	4a4d      	ldr	r2, [pc, #308]	; (8899c <cl_dprep_primecontroller+0x8dc>)
   88868:	7011      	strb	r1, [r2, #0]
   8886a:	b25b      	sxtb	r3, r3
   8886c:	2b3b      	cmp	r3, #59	; 0x3b
   8886e:	dd0c      	ble.n	8888a <cl_dprep_primecontroller+0x7ca>
							{
								cl_dialyser_prime_sec = 0;
   88870:	4b4a      	ldr	r3, [pc, #296]	; (8899c <cl_dprep_primecontroller+0x8dc>)
   88872:	2200      	movs	r2, #0
   88874:	701a      	strb	r2, [r3, #0]
								cl_dialyser_prime_min++;
   88876:	4b4a      	ldr	r3, [pc, #296]	; (889a0 <cl_dprep_primecontroller+0x8e0>)
   88878:	781b      	ldrb	r3, [r3, #0]
   8887a:	b2db      	uxtb	r3, r3
   8887c:	b2db      	uxtb	r3, r3
   8887e:	3301      	adds	r3, #1
   88880:	b2db      	uxtb	r3, r3
   88882:	b2da      	uxtb	r2, r3
   88884:	4b46      	ldr	r3, [pc, #280]	; (889a0 <cl_dprep_primecontroller+0x8e0>)
   88886:	701a      	strb	r2, [r3, #0]
// 								cl_bp_controller(CL_BP_EVENT_STOP,0);
// 								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
// 								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_COMPLETED;
// 						
// 							}
							break;
   88888:	e037      	b.n	888fa <cl_dprep_primecontroller+0x83a>
   8888a:	e036      	b.n	888fa <cl_dprep_primecontroller+0x83a>
							break;
							case CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING:
							case CL_DPREP_PRIME_PRIME_STOP:
							
								// //lets keep bloodpump running
								if(data == 1)
   8888c:	88bb      	ldrh	r3, [r7, #4]
   8888e:	b21b      	sxth	r3, r3
   88890:	2b01      	cmp	r3, #1
   88892:	d107      	bne.n	888a4 <cl_dprep_primecontroller+0x7e4>
								{
									//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
									cl_bp_controller(CL_BP_EVENT_STOP,0);
   88894:	2004      	movs	r0, #4
   88896:	2100      	movs	r1, #0
   88898:	4b3b      	ldr	r3, [pc, #236]	; (88988 <cl_dprep_primecontroller+0x8c8>)
   8889a:	4798      	blx	r3
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_COMPLETED;
   8889c:	4b3c      	ldr	r3, [pc, #240]	; (88990 <cl_dprep_primecontroller+0x8d0>)
   8889e:	220a      	movs	r2, #10
   888a0:	701a      	strb	r2, [r3, #0]
									Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STOPPED,NULL,0);
								}

							//	Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STOPPED,NULL,0);
								
							break;
   888a2:	e02a      	b.n	888fa <cl_dprep_primecontroller+0x83a>
									//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
									cl_bp_controller(CL_BP_EVENT_STOP,0);
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_COMPLETED;
								}else
								{
									sv_cntrl_enable_bypass();
   888a4:	4b3f      	ldr	r3, [pc, #252]	; (889a4 <cl_dprep_primecontroller+0x8e4>)
   888a6:	4798      	blx	r3
									cl_bp_controller(CL_BP_EVENT_STOP,0);
   888a8:	2004      	movs	r0, #4
   888aa:	2100      	movs	r1, #0
   888ac:	4b36      	ldr	r3, [pc, #216]	; (88988 <cl_dprep_primecontroller+0x8c8>)
   888ae:	4798      	blx	r3
									cl_dialyser_prime_sec = 0;
   888b0:	4b3a      	ldr	r3, [pc, #232]	; (8899c <cl_dprep_primecontroller+0x8dc>)
   888b2:	2200      	movs	r2, #0
   888b4:	701a      	strb	r2, [r3, #0]
									cl_dialyser_prime_min = 0;
   888b6:	4b3a      	ldr	r3, [pc, #232]	; (889a0 <cl_dprep_primecontroller+0x8e0>)
   888b8:	2200      	movs	r2, #0
   888ba:	701a      	strb	r2, [r3, #0]
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED;
   888bc:	4b34      	ldr	r3, [pc, #208]	; (88990 <cl_dprep_primecontroller+0x8d0>)
   888be:	220b      	movs	r2, #11
   888c0:	701a      	strb	r2, [r3, #0]
									Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STOPPED,NULL,0);
   888c2:	2029      	movs	r0, #41	; 0x29
   888c4:	2100      	movs	r1, #0
   888c6:	2200      	movs	r2, #0
   888c8:	4b2c      	ldr	r3, [pc, #176]	; (8897c <cl_dprep_primecontroller+0x8bc>)
   888ca:	4798      	blx	r3
								}

							//	Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STOPPED,NULL,0);
								
							break;
   888cc:	e015      	b.n	888fa <cl_dprep_primecontroller+0x83a>
							case CL_DPREP_PRIME_PRIME_PAUSE_DIALYSER_PRIMING:
							
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_PAUSED;
   888ce:	4b30      	ldr	r3, [pc, #192]	; (88990 <cl_dprep_primecontroller+0x8d0>)
   888d0:	220c      	movs	r2, #12
   888d2:	701a      	strb	r2, [r3, #0]
							break;
   888d4:	e011      	b.n	888fa <cl_dprep_primecontroller+0x83a>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   888d6:	2002      	movs	r0, #2
   888d8:	2100      	movs	r1, #0
   888da:	4b2b      	ldr	r3, [pc, #172]	; (88988 <cl_dprep_primecontroller+0x8c8>)
   888dc:	4798      	blx	r3
							break;
   888de:	e00c      	b.n	888fa <cl_dprep_primecontroller+0x83a>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   888e0:	2004      	movs	r0, #4
   888e2:	2100      	movs	r1, #0
   888e4:	4b28      	ldr	r3, [pc, #160]	; (88988 <cl_dprep_primecontroller+0x8c8>)
   888e6:	4798      	blx	r3
							break;
   888e8:	e007      	b.n	888fa <cl_dprep_primecontroller+0x83a>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   888ea:	88bb      	ldrh	r3, [r7, #4]
   888ec:	b21b      	sxth	r3, r3
   888ee:	2001      	movs	r0, #1
   888f0:	4619      	mov	r1, r3
   888f2:	4b25      	ldr	r3, [pc, #148]	; (88988 <cl_dprep_primecontroller+0x8c8>)
   888f4:	4798      	blx	r3
							break;
   888f6:	e000      	b.n	888fa <cl_dprep_primecontroller+0x83a>
							default:break;
   888f8:	bf00      	nop
						}
			break;
   888fa:	e0a2      	b.n	88a42 <cl_dprep_primecontroller+0x982>
			case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED:
						switch(prime_event)
   888fc:	79fb      	ldrb	r3, [r7, #7]
   888fe:	3b08      	subs	r3, #8
   88900:	2b06      	cmp	r3, #6
   88902:	f200 809b 	bhi.w	88a3c <cl_dprep_primecontroller+0x97c>
   88906:	a201      	add	r2, pc, #4	; (adr r2, 8890c <cl_dprep_primecontroller+0x84c>)
   88908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8890c:	00088929 	.word	0x00088929
   88910:	00088a3d 	.word	0x00088a3d
   88914:	00088a3d 	.word	0x00088a3d
   88918:	00088a3d 	.word	0x00088a3d
   8891c:	00088955 	.word	0x00088955
   88920:	0008895f 	.word	0x0008895f
   88924:	00088969 	.word	0x00088969
						{
							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							sv_cntrl_disable_bypass();
   88928:	4b1f      	ldr	r3, [pc, #124]	; (889a8 <cl_dprep_primecontroller+0x8e8>)
   8892a:	4798      	blx	r3
							cl_bp_controller(CL_BP_EVENT_START,0);
   8892c:	2002      	movs	r0, #2
   8892e:	2100      	movs	r1, #0
   88930:	4b15      	ldr	r3, [pc, #84]	; (88988 <cl_dprep_primecontroller+0x8c8>)
   88932:	4798      	blx	r3
					//		Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
   88934:	1d3b      	adds	r3, r7, #4
   88936:	2028      	movs	r0, #40	; 0x28
   88938:	4619      	mov	r1, r3
   8893a:	2200      	movs	r2, #0
   8893c:	4b0f      	ldr	r3, [pc, #60]	; (8897c <cl_dprep_primecontroller+0x8bc>)
   8893e:	4798      	blx	r3
   88940:	4603      	mov	r3, r0
   88942:	73fb      	strb	r3, [r7, #15]
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   88944:	4b14      	ldr	r3, [pc, #80]	; (88998 <cl_dprep_primecontroller+0x8d8>)
   88946:	4798      	blx	r3
   88948:	4603      	mov	r3, r0
   8894a:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   8894c:	4b10      	ldr	r3, [pc, #64]	; (88990 <cl_dprep_primecontroller+0x8d0>)
   8894e:	2209      	movs	r2, #9
   88950:	701a      	strb	r2, [r3, #0]
							break;
   88952:	e010      	b.n	88976 <cl_dprep_primecontroller+0x8b6>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88954:	2002      	movs	r0, #2
   88956:	2100      	movs	r1, #0
   88958:	4b0b      	ldr	r3, [pc, #44]	; (88988 <cl_dprep_primecontroller+0x8c8>)
   8895a:	4798      	blx	r3
							break;
   8895c:	e00b      	b.n	88976 <cl_dprep_primecontroller+0x8b6>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   8895e:	2004      	movs	r0, #4
   88960:	2100      	movs	r1, #0
   88962:	4b09      	ldr	r3, [pc, #36]	; (88988 <cl_dprep_primecontroller+0x8c8>)
   88964:	4798      	blx	r3
							break;
   88966:	e006      	b.n	88976 <cl_dprep_primecontroller+0x8b6>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88968:	88bb      	ldrh	r3, [r7, #4]
   8896a:	b21b      	sxth	r3, r3
   8896c:	2001      	movs	r0, #1
   8896e:	4619      	mov	r1, r3
   88970:	4b05      	ldr	r3, [pc, #20]	; (88988 <cl_dprep_primecontroller+0x8c8>)
   88972:	4798      	blx	r3
							break;
   88974:	bf00      	nop
						}
			break;
   88976:	e061      	b.n	88a3c <cl_dprep_primecontroller+0x97c>
   88978:	000aa254 	.word	0x000aa254
   8897c:	0009d1e9 	.word	0x0009d1e9
   88980:	20071aa7 	.word	0x20071aa7
   88984:	20071aa6 	.word	0x20071aa6
   88988:	00094325 	.word	0x00094325
   8898c:	00088a5d 	.word	0x00088a5d
   88990:	20071aa4 	.word	0x20071aa4
   88994:	000aa24c 	.word	0x000aa24c
   88998:	00088ae1 	.word	0x00088ae1
   8899c:	20071aa8 	.word	0x20071aa8
   889a0:	20071aa9 	.word	0x20071aa9
   889a4:	0009b595 	.word	0x0009b595
   889a8:	0009b5b1 	.word	0x0009b5b1
			case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_PAUSED:
						switch(prime_event)
   889ac:	79fb      	ldrb	r3, [r7, #7]
   889ae:	3b08      	subs	r3, #8
   889b0:	2b06      	cmp	r3, #6
   889b2:	d845      	bhi.n	88a40 <cl_dprep_primecontroller+0x980>
   889b4:	a201      	add	r2, pc, #4	; (adr r2, 889bc <cl_dprep_primecontroller+0x8fc>)
   889b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   889ba:	bf00      	nop
   889bc:	000889d9 	.word	0x000889d9
   889c0:	00088a01 	.word	0x00088a01
   889c4:	00088a41 	.word	0x00088a41
   889c8:	00088a41 	.word	0x00088a41
   889cc:	00088a09 	.word	0x00088a09
   889d0:	00088a13 	.word	0x00088a13
   889d4:	00088a1d 	.word	0x00088a1d
						{
							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							cl_bp_controller(CL_BP_EVENT_START,0);
   889d8:	2002      	movs	r0, #2
   889da:	2100      	movs	r1, #0
   889dc:	4b1b      	ldr	r3, [pc, #108]	; (88a4c <cl_dprep_primecontroller+0x98c>)
   889de:	4798      	blx	r3
						//	Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
   889e0:	1d3b      	adds	r3, r7, #4
   889e2:	2028      	movs	r0, #40	; 0x28
   889e4:	4619      	mov	r1, r3
   889e6:	2200      	movs	r2, #0
   889e8:	4b19      	ldr	r3, [pc, #100]	; (88a50 <cl_dprep_primecontroller+0x990>)
   889ea:	4798      	blx	r3
   889ec:	4603      	mov	r3, r0
   889ee:	73fb      	strb	r3, [r7, #15]
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   889f0:	4b18      	ldr	r3, [pc, #96]	; (88a54 <cl_dprep_primecontroller+0x994>)
   889f2:	4798      	blx	r3
   889f4:	4603      	mov	r3, r0
   889f6:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   889f8:	4b17      	ldr	r3, [pc, #92]	; (88a58 <cl_dprep_primecontroller+0x998>)
   889fa:	2209      	movs	r2, #9
   889fc:	701a      	strb	r2, [r3, #0]
							break;
   889fe:	e014      	b.n	88a2a <cl_dprep_primecontroller+0x96a>
							case CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING:
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED;
   88a00:	4b15      	ldr	r3, [pc, #84]	; (88a58 <cl_dprep_primecontroller+0x998>)
   88a02:	220b      	movs	r2, #11
   88a04:	701a      	strb	r2, [r3, #0]
							break;
   88a06:	e010      	b.n	88a2a <cl_dprep_primecontroller+0x96a>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88a08:	2002      	movs	r0, #2
   88a0a:	2100      	movs	r1, #0
   88a0c:	4b0f      	ldr	r3, [pc, #60]	; (88a4c <cl_dprep_primecontroller+0x98c>)
   88a0e:	4798      	blx	r3
							break;
   88a10:	e00b      	b.n	88a2a <cl_dprep_primecontroller+0x96a>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88a12:	2004      	movs	r0, #4
   88a14:	2100      	movs	r1, #0
   88a16:	4b0d      	ldr	r3, [pc, #52]	; (88a4c <cl_dprep_primecontroller+0x98c>)
   88a18:	4798      	blx	r3
							break;
   88a1a:	e006      	b.n	88a2a <cl_dprep_primecontroller+0x96a>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88a1c:	88bb      	ldrh	r3, [r7, #4]
   88a1e:	b21b      	sxth	r3, r3
   88a20:	2001      	movs	r0, #1
   88a22:	4619      	mov	r1, r3
   88a24:	4b09      	ldr	r3, [pc, #36]	; (88a4c <cl_dprep_primecontroller+0x98c>)
   88a26:	4798      	blx	r3
							break;
   88a28:	bf00      	nop

						}
			break;
   88a2a:	e009      	b.n	88a40 <cl_dprep_primecontroller+0x980>
							break;
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
						}
			break;
   88a2c:	bf00      	nop
   88a2e:	e008      	b.n	88a42 <cl_dprep_primecontroller+0x982>
							break;
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
						}
			break;
   88a30:	bf00      	nop
   88a32:	e006      	b.n	88a42 <cl_dprep_primecontroller+0x982>
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
						
			break;
   88a34:	bf00      	nop
   88a36:	e004      	b.n	88a42 <cl_dprep_primecontroller+0x982>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
			break;
   88a38:	bf00      	nop
   88a3a:	e002      	b.n	88a42 <cl_dprep_primecontroller+0x982>
							break;
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
						}
			break;
   88a3c:	bf00      	nop
   88a3e:	e000      	b.n	88a42 <cl_dprep_primecontroller+0x982>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;

						}
			break;
   88a40:	bf00      	nop

		}
	

	
	return 0;
   88a42:	2300      	movs	r3, #0
}
   88a44:	4618      	mov	r0, r3
   88a46:	3710      	adds	r7, #16
   88a48:	46bd      	mov	sp, r7
   88a4a:	bd80      	pop	{r7, pc}
   88a4c:	00094325 	.word	0x00094325
   88a50:	0009d1e9 	.word	0x0009d1e9
   88a54:	00088ae1 	.word	0x00088ae1
   88a58:	20071aa4 	.word	0x20071aa4

00088a5c <Cl_Dprep_primeUpdatePrimeTimeInfo>:


Cl_ReturnCodeType Cl_Dprep_primeUpdatePrimeTimeInfo(void)
{
   88a5c:	b580      	push	{r7, lr}
   88a5e:	b084      	sub	sp, #16
   88a60:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType  Cl_dprep_primeretcode = CL_ERROR;
   88a62:	2304      	movs	r3, #4
   88a64:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   88a66:	2359      	movs	r3, #89	; 0x59
   88a68:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0,0,0,0};
   88a6a:	2300      	movs	r3, #0
   88a6c:	713b      	strb	r3, [r7, #4]
   88a6e:	2300      	movs	r3, #0
   88a70:	717b      	strb	r3, [r7, #5]
   88a72:	2300      	movs	r3, #0
   88a74:	71bb      	strb	r3, [r7, #6]
   88a76:	2300      	movs	r3, #0
   88a78:	71fb      	strb	r3, [r7, #7]
   88a7a:	2300      	movs	r3, #0
   88a7c:	723b      	strb	r3, [r7, #8]
   88a7e:	2300      	movs	r3, #0
   88a80:	727b      	strb	r3, [r7, #9]
   88a82:	2300      	movs	r3, #0
   88a84:	72bb      	strb	r3, [r7, #10]
	
	command = CON_TX_COMMAND_REM_TIME;
   88a86:	230a      	movs	r3, #10
   88a88:	73bb      	strb	r3, [r7, #14]

	data[0] = (Cl_Uint8Type) PRIMING_DATA;
   88a8a:	2302      	movs	r3, #2
   88a8c:	713b      	strb	r3, [r7, #4]

	data[1]= (Cl_Uint8Type)cl_prime_min;
   88a8e:	4b11      	ldr	r3, [pc, #68]	; (88ad4 <Cl_Dprep_primeUpdatePrimeTimeInfo+0x78>)
   88a90:	781b      	ldrb	r3, [r3, #0]
   88a92:	b2db      	uxtb	r3, r3
   88a94:	717b      	strb	r3, [r7, #5]
	data[2]= (Cl_Uint8Type)0;
   88a96:	2300      	movs	r3, #0
   88a98:	71bb      	strb	r3, [r7, #6]
	data[3]= (Cl_Uint8Type)cl_prime_sec;
   88a9a:	4b0f      	ldr	r3, [pc, #60]	; (88ad8 <Cl_Dprep_primeUpdatePrimeTimeInfo+0x7c>)
   88a9c:	781b      	ldrb	r3, [r3, #0]
   88a9e:	b2db      	uxtb	r3, r3
   88aa0:	71fb      	strb	r3, [r7, #7]
	data[4]= (Cl_Uint8Type) (CL_DPREP_PRIME_TIMEOUT_MIN - cl_prime_min );
   88aa2:	4b0c      	ldr	r3, [pc, #48]	; (88ad4 <Cl_Dprep_primeUpdatePrimeTimeInfo+0x78>)
   88aa4:	781b      	ldrb	r3, [r3, #0]
   88aa6:	b2db      	uxtb	r3, r3
   88aa8:	f1c3 0301 	rsb	r3, r3, #1
   88aac:	b2db      	uxtb	r3, r3
   88aae:	723b      	strb	r3, [r7, #8]
	data[5]= (Cl_Uint8Type) 0;
   88ab0:	2300      	movs	r3, #0
   88ab2:	727b      	strb	r3, [r7, #9]
	data[6]= (Cl_Uint8Type) 0;
   88ab4:	2300      	movs	r3, #0
   88ab6:	72bb      	strb	r3, [r7, #10]
	
	Cl_dprep_primeretcode = Cl_SendDatatoconsole(command,&data,7);
   88ab8:	7bba      	ldrb	r2, [r7, #14]
   88aba:	1d3b      	adds	r3, r7, #4
   88abc:	4610      	mov	r0, r2
   88abe:	4619      	mov	r1, r3
   88ac0:	2207      	movs	r2, #7
   88ac2:	4b06      	ldr	r3, [pc, #24]	; (88adc <Cl_Dprep_primeUpdatePrimeTimeInfo+0x80>)
   88ac4:	4798      	blx	r3
   88ac6:	4603      	mov	r3, r0
   88ac8:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   88aca:	2300      	movs	r3, #0
}
   88acc:	4618      	mov	r0, r3
   88ace:	3710      	adds	r7, #16
   88ad0:	46bd      	mov	sp, r7
   88ad2:	bd80      	pop	{r7, pc}
   88ad4:	20071aa7 	.word	0x20071aa7
   88ad8:	20071aa6 	.word	0x20071aa6
   88adc:	0009d1e9 	.word	0x0009d1e9

00088ae0 <Cl_Dprep_UpdateDialyserPrimeTimeInfo>:

Cl_ReturnCodeType Cl_Dprep_UpdateDialyserPrimeTimeInfo(void)
{
   88ae0:	b580      	push	{r7, lr}
   88ae2:	b084      	sub	sp, #16
   88ae4:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType  Cl_dprep_primeretcode = CL_ERROR;
   88ae6:	2304      	movs	r3, #4
   88ae8:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   88aea:	2359      	movs	r3, #89	; 0x59
   88aec:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0,0,0,0};
   88aee:	2300      	movs	r3, #0
   88af0:	713b      	strb	r3, [r7, #4]
   88af2:	2300      	movs	r3, #0
   88af4:	717b      	strb	r3, [r7, #5]
   88af6:	2300      	movs	r3, #0
   88af8:	71bb      	strb	r3, [r7, #6]
   88afa:	2300      	movs	r3, #0
   88afc:	71fb      	strb	r3, [r7, #7]
   88afe:	2300      	movs	r3, #0
   88b00:	723b      	strb	r3, [r7, #8]
   88b02:	2300      	movs	r3, #0
   88b04:	727b      	strb	r3, [r7, #9]
   88b06:	2300      	movs	r3, #0
   88b08:	72bb      	strb	r3, [r7, #10]
	
	command = CON_TX_COMMAND_REM_TIME;
   88b0a:	230a      	movs	r3, #10
   88b0c:	73bb      	strb	r3, [r7, #14]

	data[0] = (Cl_Uint8Type) DIALYSER_PRIME_DATA;
   88b0e:	2303      	movs	r3, #3
   88b10:	713b      	strb	r3, [r7, #4]

	data[1]= (Cl_Uint8Type)cl_dialyser_prime_min;
   88b12:	4b11      	ldr	r3, [pc, #68]	; (88b58 <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x78>)
   88b14:	781b      	ldrb	r3, [r3, #0]
   88b16:	b2db      	uxtb	r3, r3
   88b18:	717b      	strb	r3, [r7, #5]
	data[2]= (Cl_Uint8Type)0;
   88b1a:	2300      	movs	r3, #0
   88b1c:	71bb      	strb	r3, [r7, #6]
	data[3]= (Cl_Uint8Type)cl_dialyser_prime_sec;
   88b1e:	4b0f      	ldr	r3, [pc, #60]	; (88b5c <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x7c>)
   88b20:	781b      	ldrb	r3, [r3, #0]
   88b22:	b2db      	uxtb	r3, r3
   88b24:	71fb      	strb	r3, [r7, #7]
	data[4]= (Cl_Uint8Type) (CL_DPREP_DIALISER_PRIME_TIMEOUT_MIN - cl_prime_min );
   88b26:	4b0e      	ldr	r3, [pc, #56]	; (88b60 <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x80>)
   88b28:	781b      	ldrb	r3, [r3, #0]
   88b2a:	b2db      	uxtb	r3, r3
   88b2c:	f1c3 0305 	rsb	r3, r3, #5
   88b30:	b2db      	uxtb	r3, r3
   88b32:	723b      	strb	r3, [r7, #8]
	data[5]= (Cl_Uint8Type) 0;
   88b34:	2300      	movs	r3, #0
   88b36:	727b      	strb	r3, [r7, #9]
	data[6]= (Cl_Uint8Type) 0;
   88b38:	2300      	movs	r3, #0
   88b3a:	72bb      	strb	r3, [r7, #10]
	
	Cl_dprep_primeretcode = Cl_SendDatatoconsole(command,&data,7);
   88b3c:	7bba      	ldrb	r2, [r7, #14]
   88b3e:	1d3b      	adds	r3, r7, #4
   88b40:	4610      	mov	r0, r2
   88b42:	4619      	mov	r1, r3
   88b44:	2207      	movs	r2, #7
   88b46:	4b07      	ldr	r3, [pc, #28]	; (88b64 <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x84>)
   88b48:	4798      	blx	r3
   88b4a:	4603      	mov	r3, r0
   88b4c:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   88b4e:	2300      	movs	r3, #0

}
   88b50:	4618      	mov	r0, r3
   88b52:	3710      	adds	r7, #16
   88b54:	46bd      	mov	sp, r7
   88b56:	bd80      	pop	{r7, pc}
   88b58:	20071aa9 	.word	0x20071aa9
   88b5c:	20071aa8 	.word	0x20071aa8
   88b60:	20071aa7 	.word	0x20071aa7
   88b64:	0009d1e9 	.word	0x0009d1e9

00088b68 <cl_dprep_activate_prime_related_alarms>:
		
Cl_ReturnCodeType cl_dprep_activate_prime_related_alarms(void)
{
   88b68:	b480      	push	{r7}
   88b6a:	b083      	sub	sp, #12
   88b6c:	af00      	add	r7, sp, #0
			Cl_ReturnCodeType  Cl_dprep_primeretcode = CL_ERROR;
   88b6e:	2304      	movs	r3, #4
   88b70:	71fb      	strb	r3, [r7, #7]
			//		Cl_dprepretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
			//		Cl_dprepretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH,true );
	//		Cl_dprep_primeretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_LOW,0,0,0);
	//		Cl_dprep_primeretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
			
	return CL_OK;
   88b72:	2300      	movs	r3, #0
}
   88b74:	4618      	mov	r0, r3
   88b76:	370c      	adds	r7, #12
   88b78:	46bd      	mov	sp, r7
   88b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
   88b7e:	4770      	bx	lr

00088b80 <Cl_Error_Handle_Error>:


#include "cl_errorhandler.h"

Cl_ReturnCodeType Cl_Error_Handle_Error()
{
   88b80:	b480      	push	{r7}
   88b82:	af00      	add	r7, sp, #0
	//	Cl_ReturnCodeType a=0,b=0;
	
	return(CL_OK);
   88b84:	2300      	movs	r3, #0
   88b86:	4618      	mov	r0, r3
   88b88:	46bd      	mov	sp, r7
   88b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
   88b8e:	4770      	bx	lr

00088b90 <cl_event_handler>:
extern heat_directiontype cond_dir;
void Get_direction(uint16_t);


Cl_ReturnCodeType cl_event_handler(Cl_Mac_EventsType cl_event)
{
   88b90:	b580      	push	{r7, lr}
   88b92:	b084      	sub	sp, #16
   88b94:	af00      	add	r7, sp, #0
   88b96:	4603      	mov	r3, r0
   88b98:	71fb      	strb	r3, [r7, #7]
	
	static volatile Cl_BoolType toggle = false;
	static Cl_BoolType toggle_500 = false;
	
	switch(cl_event)
   88b9a:	79fb      	ldrb	r3, [r7, #7]
   88b9c:	3b0d      	subs	r3, #13
   88b9e:	2b50      	cmp	r3, #80	; 0x50
   88ba0:	f200 828c 	bhi.w	890bc <cl_event_handler+0x52c>
   88ba4:	a201      	add	r2, pc, #4	; (adr r2, 88bac <cl_event_handler+0x1c>)
   88ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88baa:	bf00      	nop
   88bac:	000890b3 	.word	0x000890b3
   88bb0:	000890b3 	.word	0x000890b3
   88bb4:	000890bd 	.word	0x000890bd
   88bb8:	000890bd 	.word	0x000890bd
   88bbc:	000890bd 	.word	0x000890bd
   88bc0:	000890bd 	.word	0x000890bd
   88bc4:	000890bd 	.word	0x000890bd
   88bc8:	000890bd 	.word	0x000890bd
   88bcc:	000890bd 	.word	0x000890bd
   88bd0:	000890bd 	.word	0x000890bd
   88bd4:	000890bd 	.word	0x000890bd
   88bd8:	000890bd 	.word	0x000890bd
   88bdc:	000890bd 	.word	0x000890bd
   88be0:	000890bd 	.word	0x000890bd
   88be4:	000890bd 	.word	0x000890bd
   88be8:	000890bd 	.word	0x000890bd
   88bec:	000890bd 	.word	0x000890bd
   88bf0:	000890bd 	.word	0x000890bd
   88bf4:	000890bd 	.word	0x000890bd
   88bf8:	000890bd 	.word	0x000890bd
   88bfc:	000890bd 	.word	0x000890bd
   88c00:	000890bd 	.word	0x000890bd
   88c04:	000890bd 	.word	0x000890bd
   88c08:	000890bd 	.word	0x000890bd
   88c0c:	000890bd 	.word	0x000890bd
   88c10:	000890bd 	.word	0x000890bd
   88c14:	000890bd 	.word	0x000890bd
   88c18:	000890bd 	.word	0x000890bd
   88c1c:	000890bd 	.word	0x000890bd
   88c20:	000890bd 	.word	0x000890bd
   88c24:	000890bd 	.word	0x000890bd
   88c28:	000890bd 	.word	0x000890bd
   88c2c:	000890bd 	.word	0x000890bd
   88c30:	000890bd 	.word	0x000890bd
   88c34:	000890ab 	.word	0x000890ab
   88c38:	000890bd 	.word	0x000890bd
   88c3c:	000890bd 	.word	0x000890bd
   88c40:	00088cf1 	.word	0x00088cf1
   88c44:	000890bd 	.word	0x000890bd
   88c48:	000890bd 	.word	0x000890bd
   88c4c:	000890bd 	.word	0x000890bd
   88c50:	000890bd 	.word	0x000890bd
   88c54:	00088cff 	.word	0x00088cff
   88c58:	00088d05 	.word	0x00088d05
   88c5c:	00088d0d 	.word	0x00088d0d
   88c60:	00088e5b 	.word	0x00088e5b
   88c64:	0008901f 	.word	0x0008901f
   88c68:	000890a3 	.word	0x000890a3
   88c6c:	000890bd 	.word	0x000890bd
   88c70:	000890bd 	.word	0x000890bd
   88c74:	000890bd 	.word	0x000890bd
   88c78:	000890bd 	.word	0x000890bd
   88c7c:	000890bd 	.word	0x000890bd
   88c80:	000890bd 	.word	0x000890bd
   88c84:	000890bd 	.word	0x000890bd
   88c88:	000890bd 	.word	0x000890bd
   88c8c:	000890bd 	.word	0x000890bd
   88c90:	000890bd 	.word	0x000890bd
   88c94:	000890bd 	.word	0x000890bd
   88c98:	000890bd 	.word	0x000890bd
   88c9c:	000890bd 	.word	0x000890bd
   88ca0:	000890bd 	.word	0x000890bd
   88ca4:	000890bd 	.word	0x000890bd
   88ca8:	000890bd 	.word	0x000890bd
   88cac:	000890bd 	.word	0x000890bd
   88cb0:	000890bd 	.word	0x000890bd
   88cb4:	000890bd 	.word	0x000890bd
   88cb8:	000890bd 	.word	0x000890bd
   88cbc:	000890bd 	.word	0x000890bd
   88cc0:	000890bd 	.word	0x000890bd
   88cc4:	000890bd 	.word	0x000890bd
   88cc8:	000890bd 	.word	0x000890bd
   88ccc:	000890bd 	.word	0x000890bd
   88cd0:	000890bd 	.word	0x000890bd
   88cd4:	000890bd 	.word	0x000890bd
   88cd8:	000890bd 	.word	0x000890bd
   88cdc:	000890bd 	.word	0x000890bd
   88ce0:	000890bd 	.word	0x000890bd
   88ce4:	000890bd 	.word	0x000890bd
   88ce8:	000890bd 	.word	0x000890bd
   88cec:	000890bd 	.word	0x000890bd
	{
		case EVT_TICK_INSTANT:
		cl_level_switchcontroller(LEVEL_SWITCH_CNTRLER_EVENT_INSTANT);
   88cf0:	2004      	movs	r0, #4
   88cf2:	4b9a      	ldr	r3, [pc, #616]	; (88f5c <cl_event_handler+0x3cc>)
   88cf4:	4798      	blx	r3
		cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_INSTANT);
   88cf6:	2006      	movs	r0, #6
   88cf8:	4b99      	ldr	r3, [pc, #612]	; (88f60 <cl_event_handler+0x3d0>)
   88cfa:	4798      	blx	r3
		//	sv_cs_setpotvalue(250);
		
		
		
		
		break;
   88cfc:	e1df      	b.n	890be <cl_event_handler+0x52e>

		
		break;
		case EVT_TICK_20M:
		
		 cl_bp_pumpFeedback_timer();
   88cfe:	4b99      	ldr	r3, [pc, #612]	; (88f64 <cl_event_handler+0x3d4>)
   88d00:	4798      	blx	r3
		*/
				//cl_ufpumpFeedback_timer(); // commented for testing
				//cl_hep_pumpFeedback_timer();
		//  cl_ufpumpFeedback_timer();
		//  cl_bp_pumpFeedback_timer();
		  break;
   88d02:	e1dc      	b.n	890be <cl_event_handler+0x52e>
				}
					
					spent_ticks = 	g_ul_ms_ticks - init_ticks;
			#endif
					
		 Cl_bc_controller(BC_EVENT_50MS);	
   88d04:	2000      	movs	r0, #0
   88d06:	4b98      	ldr	r3, [pc, #608]	; (88f68 <cl_event_handler+0x3d8>)
   88d08:	4798      	blx	r3
// 		}
// 		
// 		testFPcurrentstatus_prev = cl_sys_statbuffer.FPcurrentstatus;
// 		 
// 		}
		break;
   88d0a:	e1d8      	b.n	890be <cl_event_handler+0x52e>
	
		
	break;	
		case EVT_TICK_100M:
	//	Cl_Mac_CheckforAlarms();// check if there is any alarms , if there is one generate an event. ALSO This can me moved to respective sub  state handlers to be acted up on a much smaller time tick (on a 10- 100 ms event..???)
	cl_hep_pumpFeedback_timer();
   88d0c:	4b97      	ldr	r3, [pc, #604]	; (88f6c <cl_event_handler+0x3dc>)
   88d0e:	4798      	blx	r3
	cl_ufpumpFeedback_timer();
   88d10:	4b97      	ldr	r3, [pc, #604]	; (88f70 <cl_event_handler+0x3e0>)
   88d12:	4798      	blx	r3
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_BP_DEC_M , &dtemp);
   88d14:	201e      	movs	r0, #30
   88d16:	4997      	ldr	r1, [pc, #604]	; (88f74 <cl_event_handler+0x3e4>)
   88d18:	4b97      	ldr	r3, [pc, #604]	; (88f78 <cl_event_handler+0x3e8>)
   88d1a:	4798      	blx	r3
	if(dtemp == 1){
   88d1c:	4b95      	ldr	r3, [pc, #596]	; (88f74 <cl_event_handler+0x3e4>)
   88d1e:	881b      	ldrh	r3, [r3, #0]
   88d20:	2b01      	cmp	r3, #1
   88d22:	d11e      	bne.n	88d62 <cl_event_handler+0x1d2>

		if(prevdtemp == 0){             // manav02 added transition logic
   88d24:	4b95      	ldr	r3, [pc, #596]	; (88f7c <cl_event_handler+0x3ec>)
   88d26:	881b      	ldrh	r3, [r3, #0]
   88d28:	2b00      	cmp	r3, #0
   88d2a:	d11d      	bne.n	88d68 <cl_event_handler+0x1d8>
			
		prevdtemp = 1;
   88d2c:	4b93      	ldr	r3, [pc, #588]	; (88f7c <cl_event_handler+0x3ec>)
   88d2e:	2201      	movs	r2, #1
   88d30:	801a      	strh	r2, [r3, #0]
		
		dtemp = 0;
   88d32:	4b90      	ldr	r3, [pc, #576]	; (88f74 <cl_event_handler+0x3e4>)
   88d34:	2200      	movs	r2, #0
   88d36:	801a      	strh	r2, [r3, #0]
		if( Cl_MacEventQueue2.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )
   88d38:	4b91      	ldr	r3, [pc, #580]	; (88f80 <cl_event_handler+0x3f0>)
   88d3a:	781b      	ldrb	r3, [r3, #0]
   88d3c:	2b0a      	cmp	r3, #10
   88d3e:	d813      	bhi.n	88d68 <cl_event_handler+0x1d8>
		{
			Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL ;
   88d40:	4b8f      	ldr	r3, [pc, #572]	; (88f80 <cl_event_handler+0x3f0>)
   88d42:	781b      	ldrb	r3, [r3, #0]
   88d44:	461a      	mov	r2, r3
   88d46:	4b8e      	ldr	r3, [pc, #568]	; (88f80 <cl_event_handler+0x3f0>)
   88d48:	4413      	add	r3, r2
   88d4a:	225c      	movs	r2, #92	; 0x5c
   88d4c:	709a      	strb	r2, [r3, #2]
			Cl_MacEventQueue2.Cl_MacNewEvent = true;
   88d4e:	4b8c      	ldr	r3, [pc, #560]	; (88f80 <cl_event_handler+0x3f0>)
   88d50:	2201      	movs	r2, #1
   88d52:	705a      	strb	r2, [r3, #1]
			Cl_MacEventQueue2.Cl_MacNewEventcount++;
   88d54:	4b8a      	ldr	r3, [pc, #552]	; (88f80 <cl_event_handler+0x3f0>)
   88d56:	781b      	ldrb	r3, [r3, #0]
   88d58:	3301      	adds	r3, #1
   88d5a:	b2da      	uxtb	r2, r3
   88d5c:	4b88      	ldr	r3, [pc, #544]	; (88f80 <cl_event_handler+0x3f0>)
   88d5e:	701a      	strb	r2, [r3, #0]
   88d60:	e002      	b.n	88d68 <cl_event_handler+0x1d8>
		}
		}
		//Treatdata[ID_bloodrate] - 10 ;
	}
	else{
		prevdtemp = 0 ;
   88d62:	4b86      	ldr	r3, [pc, #536]	; (88f7c <cl_event_handler+0x3ec>)
   88d64:	2200      	movs	r2, #0
   88d66:	801a      	strh	r2, [r3, #0]
	}
	
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_BP_INC_M , &itemp);
   88d68:	201d      	movs	r0, #29
   88d6a:	4986      	ldr	r1, [pc, #536]	; (88f84 <cl_event_handler+0x3f4>)
   88d6c:	4b82      	ldr	r3, [pc, #520]	; (88f78 <cl_event_handler+0x3e8>)
   88d6e:	4798      	blx	r3
	if(itemp == 1){
   88d70:	4b84      	ldr	r3, [pc, #528]	; (88f84 <cl_event_handler+0x3f4>)
   88d72:	881b      	ldrh	r3, [r3, #0]
   88d74:	2b01      	cmp	r3, #1
   88d76:	d11e      	bne.n	88db6 <cl_event_handler+0x226>

		if(previtemp == 0){               // manav02 added transition logic
   88d78:	4b83      	ldr	r3, [pc, #524]	; (88f88 <cl_event_handler+0x3f8>)
   88d7a:	881b      	ldrh	r3, [r3, #0]
   88d7c:	2b00      	cmp	r3, #0
   88d7e:	d11d      	bne.n	88dbc <cl_event_handler+0x22c>
			
		previtemp = 1 ; 
   88d80:	4b81      	ldr	r3, [pc, #516]	; (88f88 <cl_event_handler+0x3f8>)
   88d82:	2201      	movs	r2, #1
   88d84:	801a      	strh	r2, [r3, #0]

		itemp = 0;
   88d86:	4b7f      	ldr	r3, [pc, #508]	; (88f84 <cl_event_handler+0x3f4>)
   88d88:	2200      	movs	r2, #0
   88d8a:	801a      	strh	r2, [r3, #0]
		if( Cl_MacEventQueue2.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )
   88d8c:	4b7c      	ldr	r3, [pc, #496]	; (88f80 <cl_event_handler+0x3f0>)
   88d8e:	781b      	ldrb	r3, [r3, #0]
   88d90:	2b0a      	cmp	r3, #10
   88d92:	d813      	bhi.n	88dbc <cl_event_handler+0x22c>
		{
			Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL ;
   88d94:	4b7a      	ldr	r3, [pc, #488]	; (88f80 <cl_event_handler+0x3f0>)
   88d96:	781b      	ldrb	r3, [r3, #0]
   88d98:	461a      	mov	r2, r3
   88d9a:	4b79      	ldr	r3, [pc, #484]	; (88f80 <cl_event_handler+0x3f0>)
   88d9c:	4413      	add	r3, r2
   88d9e:	225b      	movs	r2, #91	; 0x5b
   88da0:	709a      	strb	r2, [r3, #2]
			Cl_MacEventQueue2.Cl_MacNewEvent = true;
   88da2:	4b77      	ldr	r3, [pc, #476]	; (88f80 <cl_event_handler+0x3f0>)
   88da4:	2201      	movs	r2, #1
   88da6:	705a      	strb	r2, [r3, #1]
			Cl_MacEventQueue2.Cl_MacNewEventcount++;
   88da8:	4b75      	ldr	r3, [pc, #468]	; (88f80 <cl_event_handler+0x3f0>)
   88daa:	781b      	ldrb	r3, [r3, #0]
   88dac:	3301      	adds	r3, #1
   88dae:	b2da      	uxtb	r2, r3
   88db0:	4b73      	ldr	r3, [pc, #460]	; (88f80 <cl_event_handler+0x3f0>)
   88db2:	701a      	strb	r2, [r3, #0]
   88db4:	e002      	b.n	88dbc <cl_event_handler+0x22c>
		}
		//Treatdata[ID_bloodrate] + 10 ;
		
	}
	else{
		previtemp = 0 ;
   88db6:	4b74      	ldr	r3, [pc, #464]	; (88f88 <cl_event_handler+0x3f8>)
   88db8:	2200      	movs	r2, #0
   88dba:	801a      	strh	r2, [r3, #0]
	}
	
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_BP_ON_OFF_M , &bptemp);
   88dbc:	201f      	movs	r0, #31
   88dbe:	4973      	ldr	r1, [pc, #460]	; (88f8c <cl_event_handler+0x3fc>)
   88dc0:	4b6d      	ldr	r3, [pc, #436]	; (88f78 <cl_event_handler+0x3e8>)
   88dc2:	4798      	blx	r3
	
	
	if(bptemp == 0){
   88dc4:	4b71      	ldr	r3, [pc, #452]	; (88f8c <cl_event_handler+0x3fc>)
   88dc6:	881b      	ldrh	r3, [r3, #0]
   88dc8:	2b00      	cmp	r3, #0
   88dca:	d103      	bne.n	88dd4 <cl_event_handler+0x244>
		
		prevtran = 0;
   88dcc:	4b70      	ldr	r3, [pc, #448]	; (88f90 <cl_event_handler+0x400>)
   88dce:	2200      	movs	r2, #0
   88dd0:	801a      	strh	r2, [r3, #0]
   88dd2:	e039      	b.n	88e48 <cl_event_handler+0x2b8>
	}
	else{
		
		if(prevtran == 0){
   88dd4:	4b6e      	ldr	r3, [pc, #440]	; (88f90 <cl_event_handler+0x400>)
   88dd6:	881b      	ldrh	r3, [r3, #0]
   88dd8:	2b00      	cmp	r3, #0
   88dda:	d135      	bne.n	88e48 <cl_event_handler+0x2b8>
			
		prevtran = 1;
   88ddc:	4b6c      	ldr	r3, [pc, #432]	; (88f90 <cl_event_handler+0x400>)
   88dde:	2201      	movs	r2, #1
   88de0:	801a      	strh	r2, [r3, #0]

		if(bpstatus == 0){
   88de2:	4b6c      	ldr	r3, [pc, #432]	; (88f94 <cl_event_handler+0x404>)
   88de4:	881b      	ldrh	r3, [r3, #0]
   88de6:	2b00      	cmp	r3, #0
   88de8:	d117      	bne.n	88e1a <cl_event_handler+0x28a>
	
			//bp on
			if( Cl_MacEventQueue2.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )
   88dea:	4b65      	ldr	r3, [pc, #404]	; (88f80 <cl_event_handler+0x3f0>)
   88dec:	781b      	ldrb	r3, [r3, #0]
   88dee:	2b0a      	cmp	r3, #10
   88df0:	d80f      	bhi.n	88e12 <cl_event_handler+0x282>
			{
				Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_CONSOLE_COMMAND_SET_BLDPMP_ON ;
   88df2:	4b63      	ldr	r3, [pc, #396]	; (88f80 <cl_event_handler+0x3f0>)
   88df4:	781b      	ldrb	r3, [r3, #0]
   88df6:	461a      	mov	r2, r3
   88df8:	4b61      	ldr	r3, [pc, #388]	; (88f80 <cl_event_handler+0x3f0>)
   88dfa:	4413      	add	r3, r2
   88dfc:	220a      	movs	r2, #10
   88dfe:	709a      	strb	r2, [r3, #2]
				Cl_MacEventQueue2.Cl_MacNewEvent = true;
   88e00:	4b5f      	ldr	r3, [pc, #380]	; (88f80 <cl_event_handler+0x3f0>)
   88e02:	2201      	movs	r2, #1
   88e04:	705a      	strb	r2, [r3, #1]
				Cl_MacEventQueue2.Cl_MacNewEventcount++;
   88e06:	4b5e      	ldr	r3, [pc, #376]	; (88f80 <cl_event_handler+0x3f0>)
   88e08:	781b      	ldrb	r3, [r3, #0]
   88e0a:	3301      	adds	r3, #1
   88e0c:	b2da      	uxtb	r2, r3
   88e0e:	4b5c      	ldr	r3, [pc, #368]	; (88f80 <cl_event_handler+0x3f0>)
   88e10:	701a      	strb	r2, [r3, #0]
				
			}
	
			bpstatus = 1;
   88e12:	4b60      	ldr	r3, [pc, #384]	; (88f94 <cl_event_handler+0x404>)
   88e14:	2201      	movs	r2, #1
   88e16:	801a      	strh	r2, [r3, #0]
   88e18:	e016      	b.n	88e48 <cl_event_handler+0x2b8>
		}
		else{
			// bp off	
			if( Cl_MacEventQueue2.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )
   88e1a:	4b59      	ldr	r3, [pc, #356]	; (88f80 <cl_event_handler+0x3f0>)
   88e1c:	781b      	ldrb	r3, [r3, #0]
   88e1e:	2b0a      	cmp	r3, #10
   88e20:	d80f      	bhi.n	88e42 <cl_event_handler+0x2b2>
			{
				Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF ;
   88e22:	4b57      	ldr	r3, [pc, #348]	; (88f80 <cl_event_handler+0x3f0>)
   88e24:	781b      	ldrb	r3, [r3, #0]
   88e26:	461a      	mov	r2, r3
   88e28:	4b55      	ldr	r3, [pc, #340]	; (88f80 <cl_event_handler+0x3f0>)
   88e2a:	4413      	add	r3, r2
   88e2c:	220b      	movs	r2, #11
   88e2e:	709a      	strb	r2, [r3, #2]
				Cl_MacEventQueue2.Cl_MacNewEvent = true;
   88e30:	4b53      	ldr	r3, [pc, #332]	; (88f80 <cl_event_handler+0x3f0>)
   88e32:	2201      	movs	r2, #1
   88e34:	705a      	strb	r2, [r3, #1]
				Cl_MacEventQueue2.Cl_MacNewEventcount++;
   88e36:	4b52      	ldr	r3, [pc, #328]	; (88f80 <cl_event_handler+0x3f0>)
   88e38:	781b      	ldrb	r3, [r3, #0]
   88e3a:	3301      	adds	r3, #1
   88e3c:	b2da      	uxtb	r2, r3
   88e3e:	4b50      	ldr	r3, [pc, #320]	; (88f80 <cl_event_handler+0x3f0>)
   88e40:	701a      	strb	r2, [r3, #0]
				
			}
			bpstatus = 0;
   88e42:	4b54      	ldr	r3, [pc, #336]	; (88f94 <cl_event_handler+0x404>)
   88e44:	2200      	movs	r2, #0
   88e46:	801a      	strh	r2, [r3, #0]
	
	*/
	
	
	
		Cl_Temperature_Controller_Handler(TS_EVENT_100MS);    // commented on 17082017, we dont need this controller handler any more
   88e48:	2001      	movs	r0, #1
   88e4a:	4b53      	ldr	r3, [pc, #332]	; (88f98 <cl_event_handler+0x408>)
   88e4c:	4798      	blx	r3
		Cl_Pressure_Controller_Handler(PS_EVENT_100MS);
   88e4e:	2001      	movs	r0, #1
   88e50:	4b52      	ldr	r3, [pc, #328]	; (88f9c <cl_event_handler+0x40c>)
   88e52:	4798      	blx	r3
//		cl_bp_pumpFeedback_timer();
		cl_hep_pump_enddetction_timer();
   88e54:	4b52      	ldr	r3, [pc, #328]	; (88fa0 <cl_event_handler+0x410>)
   88e56:	4798      	blx	r3
		}
		
		#endif
		
		
		break;
   88e58:	e131      	b.n	890be <cl_event_handler+0x52e>
		case EVT_TICK_500M:
		//UpdateHeaterControls();
		Cl_Heater_Event_Handler(CL_HEATER_EVENT_500MS,0);
   88e5a:	2001      	movs	r0, #1
   88e5c:	f04f 0100 	mov.w	r1, #0
   88e60:	4b50      	ldr	r3, [pc, #320]	; (88fa4 <cl_event_handler+0x414>)
   88e62:	4798      	blx	r3
		Cl_bc_controller(BC_EVENT_500MS);
   88e64:	2001      	movs	r0, #1
   88e66:	4b40      	ldr	r3, [pc, #256]	; (88f68 <cl_event_handler+0x3d8>)
   88e68:	4798      	blx	r3
		Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&cond_4_Propo);
   88e6a:	2007      	movs	r0, #7
   88e6c:	494e      	ldr	r1, [pc, #312]	; (88fa8 <cl_event_handler+0x418>)
   88e6e:	4b42      	ldr	r3, [pc, #264]	; (88f78 <cl_event_handler+0x3e8>)
   88e70:	4798      	blx	r3
		
		if (Set_RC == 0)
   88e72:	4b4e      	ldr	r3, [pc, #312]	; (88fac <cl_event_handler+0x41c>)
   88e74:	881b      	ldrh	r3, [r3, #0]
   88e76:	2b00      	cmp	r3, #0
   88e78:	f040 80aa 	bne.w	88fd0 <cl_event_handler+0x440>
		{
		
		switch (Treatdata[ID_setcond])
   88e7c:	4b4c      	ldr	r3, [pc, #304]	; (88fb0 <cl_event_handler+0x420>)
   88e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   88e80:	3b87      	subs	r3, #135	; 0x87
   88e82:	2b0a      	cmp	r3, #10
   88e84:	f200 80a0 	bhi.w	88fc8 <cl_event_handler+0x438>
   88e88:	a201      	add	r2, pc, #4	; (adr r2, 88e90 <cl_event_handler+0x300>)
   88e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88e8e:	bf00      	nop
   88e90:	00088ebd 	.word	0x00088ebd
   88e94:	00088ecd 	.word	0x00088ecd
   88e98:	00088edd 	.word	0x00088edd
   88e9c:	00088eed 	.word	0x00088eed
   88ea0:	00088efd 	.word	0x00088efd
   88ea4:	00088f0d 	.word	0x00088f0d
   88ea8:	00088f1d 	.word	0x00088f1d
   88eac:	00088f2d 	.word	0x00088f2d
   88eb0:	00088f3d 	.word	0x00088f3d
   88eb4:	00088f4d 	.word	0x00088f4d
   88eb8:	00088fb9 	.word	0x00088fb9
		{
		case 135:
			Set_conductivity = 1370;
   88ebc:	4b3d      	ldr	r3, [pc, #244]	; (88fb4 <cl_event_handler+0x424>)
   88ebe:	f240 525a 	movw	r2, #1370	; 0x55a
   88ec2:	801a      	strh	r2, [r3, #0]
			Set_RC = 200;
   88ec4:	4b39      	ldr	r3, [pc, #228]	; (88fac <cl_event_handler+0x41c>)
   88ec6:	22c8      	movs	r2, #200	; 0xc8
   88ec8:	801a      	strh	r2, [r3, #0]
		break;
   88eca:	e07d      	b.n	88fc8 <cl_event_handler+0x438>
		case 136:
			Set_conductivity = 1381;
   88ecc:	4b39      	ldr	r3, [pc, #228]	; (88fb4 <cl_event_handler+0x424>)
   88ece:	f240 5265 	movw	r2, #1381	; 0x565
   88ed2:	801a      	strh	r2, [r3, #0]
			Set_RC = 198;
   88ed4:	4b35      	ldr	r3, [pc, #212]	; (88fac <cl_event_handler+0x41c>)
   88ed6:	22c6      	movs	r2, #198	; 0xc6
   88ed8:	801a      	strh	r2, [r3, #0]
		break;
   88eda:	e075      	b.n	88fc8 <cl_event_handler+0x438>
		case 137:
			Set_conductivity = 1392;
   88edc:	4b35      	ldr	r3, [pc, #212]	; (88fb4 <cl_event_handler+0x424>)
   88ede:	f44f 62ae 	mov.w	r2, #1392	; 0x570
   88ee2:	801a      	strh	r2, [r3, #0]
			Set_RC = 196;
   88ee4:	4b31      	ldr	r3, [pc, #196]	; (88fac <cl_event_handler+0x41c>)
   88ee6:	22c4      	movs	r2, #196	; 0xc4
   88ee8:	801a      	strh	r2, [r3, #0]
		break;
   88eea:	e06d      	b.n	88fc8 <cl_event_handler+0x438>
		case 138:
			Set_conductivity = 1403;
   88eec:	4b31      	ldr	r3, [pc, #196]	; (88fb4 <cl_event_handler+0x424>)
   88eee:	f240 527b 	movw	r2, #1403	; 0x57b
   88ef2:	801a      	strh	r2, [r3, #0]
			Set_RC = 194;
   88ef4:	4b2d      	ldr	r3, [pc, #180]	; (88fac <cl_event_handler+0x41c>)
   88ef6:	22c2      	movs	r2, #194	; 0xc2
   88ef8:	801a      	strh	r2, [r3, #0]
		break;
   88efa:	e065      	b.n	88fc8 <cl_event_handler+0x438>
		case 139:
			Set_conductivity = 1400;  // 1414
   88efc:	4b2d      	ldr	r3, [pc, #180]	; (88fb4 <cl_event_handler+0x424>)
   88efe:	f44f 62af 	mov.w	r2, #1400	; 0x578
   88f02:	801a      	strh	r2, [r3, #0]
			Set_RC = 192;
   88f04:	4b29      	ldr	r3, [pc, #164]	; (88fac <cl_event_handler+0x41c>)
   88f06:	22c0      	movs	r2, #192	; 0xc0
   88f08:	801a      	strh	r2, [r3, #0]
		break;
   88f0a:	e05d      	b.n	88fc8 <cl_event_handler+0x438>
		case 140:
			Set_conductivity = 1425;
   88f0c:	4b29      	ldr	r3, [pc, #164]	; (88fb4 <cl_event_handler+0x424>)
   88f0e:	f240 5291 	movw	r2, #1425	; 0x591
   88f12:	801a      	strh	r2, [r3, #0]
			Set_RC = 190;
   88f14:	4b25      	ldr	r3, [pc, #148]	; (88fac <cl_event_handler+0x41c>)
   88f16:	22be      	movs	r2, #190	; 0xbe
   88f18:	801a      	strh	r2, [r3, #0]
		break;
   88f1a:	e055      	b.n	88fc8 <cl_event_handler+0x438>
		case 141:
			Set_conductivity = 1410;  // 1436
   88f1c:	4b25      	ldr	r3, [pc, #148]	; (88fb4 <cl_event_handler+0x424>)
   88f1e:	f240 5282 	movw	r2, #1410	; 0x582
   88f22:	801a      	strh	r2, [r3, #0]
			Set_RC = 183;
   88f24:	4b21      	ldr	r3, [pc, #132]	; (88fac <cl_event_handler+0x41c>)
   88f26:	22b7      	movs	r2, #183	; 0xb7
   88f28:	801a      	strh	r2, [r3, #0]
			break;
   88f2a:	e04d      	b.n	88fc8 <cl_event_handler+0x438>
		case 142:
		Set_conductivity = 1447;
   88f2c:	4b21      	ldr	r3, [pc, #132]	; (88fb4 <cl_event_handler+0x424>)
   88f2e:	f240 52a7 	movw	r2, #1447	; 0x5a7
   88f32:	801a      	strh	r2, [r3, #0]
		Set_RC = 186;
   88f34:	4b1d      	ldr	r3, [pc, #116]	; (88fac <cl_event_handler+0x41c>)
   88f36:	22ba      	movs	r2, #186	; 0xba
   88f38:	801a      	strh	r2, [r3, #0]
		break;
   88f3a:	e045      	b.n	88fc8 <cl_event_handler+0x438>
		case 143:
		Set_conductivity = 1458;
   88f3c:	4b1d      	ldr	r3, [pc, #116]	; (88fb4 <cl_event_handler+0x424>)
   88f3e:	f240 52b2 	movw	r2, #1458	; 0x5b2
   88f42:	801a      	strh	r2, [r3, #0]
		Set_RC = 184;
   88f44:	4b19      	ldr	r3, [pc, #100]	; (88fac <cl_event_handler+0x41c>)
   88f46:	22b8      	movs	r2, #184	; 0xb8
   88f48:	801a      	strh	r2, [r3, #0]
		break;
   88f4a:	e03d      	b.n	88fc8 <cl_event_handler+0x438>
		
		case 144:
		Set_conductivity = 1469;
   88f4c:	4b19      	ldr	r3, [pc, #100]	; (88fb4 <cl_event_handler+0x424>)
   88f4e:	f240 52bd 	movw	r2, #1469	; 0x5bd
   88f52:	801a      	strh	r2, [r3, #0]
		Set_RC = 182;
   88f54:	4b15      	ldr	r3, [pc, #84]	; (88fac <cl_event_handler+0x41c>)
   88f56:	22b6      	movs	r2, #182	; 0xb6
   88f58:	801a      	strh	r2, [r3, #0]
		break;
   88f5a:	e035      	b.n	88fc8 <cl_event_handler+0x438>
   88f5c:	00095679 	.word	0x00095679
   88f60:	000948d9 	.word	0x000948d9
   88f64:	00094649 	.word	0x00094649
   88f68:	00082ee1 	.word	0x00082ee1
   88f6c:	000953e5 	.word	0x000953e5
   88f70:	000972a9 	.word	0x000972a9
   88f74:	20071aaa 	.word	0x20071aaa
   88f78:	0008fd69 	.word	0x0008fd69
   88f7c:	20071ab2 	.word	0x20071ab2
   88f80:	2007234c 	.word	0x2007234c
   88f84:	20071aac 	.word	0x20071aac
   88f88:	20071ab4 	.word	0x20071ab4
   88f8c:	20071aae 	.word	0x20071aae
   88f90:	20071ab6 	.word	0x20071ab6
   88f94:	20071ab8 	.word	0x20071ab8
   88f98:	00090fa9 	.word	0x00090fa9
   88f9c:	00090b91 	.word	0x00090b91
   88fa0:	000955d9 	.word	0x000955d9
   88fa4:	000892f9 	.word	0x000892f9
   88fa8:	20072332 	.word	0x20072332
   88fac:	20071ac4 	.word	0x20071ac4
   88fb0:	20072880 	.word	0x20072880
   88fb4:	20071ac2 	.word	0x20071ac2
		
		case 145:
		Set_conductivity = 1480;
   88fb8:	4b43      	ldr	r3, [pc, #268]	; (890c8 <cl_event_handler+0x538>)
   88fba:	f44f 62b9 	mov.w	r2, #1480	; 0x5c8
   88fbe:	801a      	strh	r2, [r3, #0]
		Set_RC = 180;
   88fc0:	4b42      	ldr	r3, [pc, #264]	; (890cc <cl_event_handler+0x53c>)
   88fc2:	22b4      	movs	r2, #180	; 0xb4
   88fc4:	801a      	strh	r2, [r3, #0]
		break;
   88fc6:	bf00      	nop
		
		}
		update_RC = Set_RC;
   88fc8:	4b40      	ldr	r3, [pc, #256]	; (890cc <cl_event_handler+0x53c>)
   88fca:	881a      	ldrh	r2, [r3, #0]
   88fcc:	4b40      	ldr	r3, [pc, #256]	; (890d0 <cl_event_handler+0x540>)
   88fce:	801a      	strh	r2, [r3, #0]
		}
		
		if (cond_4_Propo > (Set_conductivity -150))
   88fd0:	4b40      	ldr	r3, [pc, #256]	; (890d4 <cl_event_handler+0x544>)
   88fd2:	881b      	ldrh	r3, [r3, #0]
   88fd4:	461a      	mov	r2, r3
   88fd6:	4b3c      	ldr	r3, [pc, #240]	; (890c8 <cl_event_handler+0x538>)
   88fd8:	881b      	ldrh	r3, [r3, #0]
   88fda:	3b96      	subs	r3, #150	; 0x96
   88fdc:	429a      	cmp	r2, r3
   88fde:	dd0d      	ble.n	88ffc <cl_event_handler+0x46c>
		{
			Get_direction(cond_4_Propo);
   88fe0:	4b3c      	ldr	r3, [pc, #240]	; (890d4 <cl_event_handler+0x544>)
   88fe2:	881b      	ldrh	r3, [r3, #0]
   88fe4:	4618      	mov	r0, r3
   88fe6:	4b3c      	ldr	r3, [pc, #240]	; (890d8 <cl_event_handler+0x548>)
   88fe8:	4798      	blx	r3
			update_RC = calculate_RC(cond_4_Propo);
   88fea:	4b3a      	ldr	r3, [pc, #232]	; (890d4 <cl_event_handler+0x544>)
   88fec:	881b      	ldrh	r3, [r3, #0]
   88fee:	4618      	mov	r0, r3
   88ff0:	4b3a      	ldr	r3, [pc, #232]	; (890dc <cl_event_handler+0x54c>)
   88ff2:	4798      	blx	r3
   88ff4:	4603      	mov	r3, r0
   88ff6:	461a      	mov	r2, r3
   88ff8:	4b35      	ldr	r3, [pc, #212]	; (890d0 <cl_event_handler+0x540>)
   88ffa:	801a      	strh	r2, [r3, #0]
		}
		sv_prop_set_propo_ACIDrc(update_RC);
   88ffc:	4b34      	ldr	r3, [pc, #208]	; (890d0 <cl_event_handler+0x540>)
   88ffe:	881b      	ldrh	r3, [r3, #0]
   89000:	4618      	mov	r0, r3
   89002:	4b37      	ldr	r3, [pc, #220]	; (890e0 <cl_event_handler+0x550>)
   89004:	4798      	blx	r3
//		sv_prop_propo_CONDUCTIVITY(cond_4_Propo);  // Gopal: added on 13092017 sending conductivity to proportioning for RC correction
		if(  toggle_500)
   89006:	4b37      	ldr	r3, [pc, #220]	; (890e4 <cl_event_handler+0x554>)
   89008:	781b      	ldrb	r3, [r3, #0]
   8900a:	2b00      	cmp	r3, #0
   8900c:	d003      	beq.n	89016 <cl_event_handler+0x486>
		{
			toggle_500 = false;
   8900e:	4b35      	ldr	r3, [pc, #212]	; (890e4 <cl_event_handler+0x554>)
   89010:	2200      	movs	r2, #0
   89012:	701a      	strb	r2, [r3, #0]
		
		


							
		break;
   89014:	e053      	b.n	890be <cl_event_handler+0x52e>
		//	sv_cntrl_activatevenousclamp();
		}

		else
		{
			toggle_500 = true;
   89016:	4b33      	ldr	r3, [pc, #204]	; (890e4 <cl_event_handler+0x554>)
   89018:	2201      	movs	r2, #1
   8901a:	701a      	strb	r2, [r3, #0]
		
		


							
		break;
   8901c:	e04f      	b.n	890be <cl_event_handler+0x52e>
		case EVT_TICK_SEC:
		{

		cl_level_switchcontroller(LEVEL_SWITCH_CNTRLER_EVENT_SEC);
   8901e:	2001      	movs	r0, #1
   89020:	4b31      	ldr	r3, [pc, #196]	; (890e8 <cl_event_handler+0x558>)
   89022:	4798      	blx	r3
		cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_SEC);
   89024:	2003      	movs	r0, #3
   89026:	4b31      	ldr	r3, [pc, #196]	; (890ec <cl_event_handler+0x55c>)
   89028:	4798      	blx	r3
		cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_TICK_SEC,0);
   8902a:	200b      	movs	r0, #11
   8902c:	2100      	movs	r1, #0
   8902e:	4b30      	ldr	r3, [pc, #192]	; (890f0 <cl_event_handler+0x560>)
   89030:	4798      	blx	r3
		cl_hep_controller(CL_HEP_EVENT_SEC_TICK,0);
   89032:	200f      	movs	r0, #15
   89034:	2100      	movs	r1, #0
   89036:	4b2f      	ldr	r3, [pc, #188]	; (890f4 <cl_event_handler+0x564>)
   89038:	4798      	blx	r3
		Cl_bc_controller(BC_EVENT_SECOND);
   8903a:	2002      	movs	r0, #2
   8903c:	4b2e      	ldr	r3, [pc, #184]	; (890f8 <cl_event_handler+0x568>)
   8903e:	4798      	blx	r3
		Cl_Heater_Event_Handler(CL_HEATER_EVENT_1SEC,0);
   89040:	2002      	movs	r0, #2
   89042:	f04f 0100 	mov.w	r1, #0
   89046:	4b2d      	ldr	r3, [pc, #180]	; (890fc <cl_event_handler+0x56c>)
   89048:	4798      	blx	r3
		Cl_Conductivity_Sensor_Controller(COND_EVENT_1SEC);
   8904a:	2002      	movs	r0, #2
   8904c:	4b2c      	ldr	r3, [pc, #176]	; (89100 <cl_event_handler+0x570>)
   8904e:	4798      	blx	r3
		Cl_SysStat_mean_status_update();
   89050:	4b2c      	ldr	r3, [pc, #176]	; (89104 <cl_event_handler+0x574>)
   89052:	4798      	blx	r3
		cl_bp_feedback_hemo();
   89054:	4b2c      	ldr	r3, [pc, #176]	; (89108 <cl_event_handler+0x578>)
   89056:	4798      	blx	r3
//	#if 0
		//DD_RETRY_IIC();
		static bool toggle = false;
				static Cl_Uint8Type temp_count=0;
				temp_count++;
   89058:	4b2c      	ldr	r3, [pc, #176]	; (8910c <cl_event_handler+0x57c>)
   8905a:	781b      	ldrb	r3, [r3, #0]
   8905c:	3301      	adds	r3, #1
   8905e:	b2da      	uxtb	r2, r3
   89060:	4b2a      	ldr	r3, [pc, #168]	; (8910c <cl_event_handler+0x57c>)
   89062:	701a      	strb	r2, [r3, #0]

				
		if(!toggle)
   89064:	4b2a      	ldr	r3, [pc, #168]	; (89110 <cl_event_handler+0x580>)
   89066:	781b      	ldrb	r3, [r3, #0]
   89068:	f083 0301 	eor.w	r3, r3, #1
   8906c:	b2db      	uxtb	r3, r3
   8906e:	2b00      	cmp	r3, #0
   89070:	d005      	beq.n	8907e <cl_event_handler+0x4ee>
		{
		SV_CAN_READ_HEMO(); // disabled for testing
   89072:	4b28      	ldr	r3, [pc, #160]	; (89114 <cl_event_handler+0x584>)
   89074:	4798      	blx	r3
		
			toggle = true;
   89076:	4b26      	ldr	r3, [pc, #152]	; (89110 <cl_event_handler+0x580>)
   89078:	2201      	movs	r2, #1
   8907a:	701a      	strb	r2, [r3, #0]
   8907c:	e00b      	b.n	89096 <cl_event_handler+0x506>
				}

		}
		else
		{
		SV_CAN_REQUEST_SENSORDATA();
   8907e:	4b26      	ldr	r3, [pc, #152]	; (89118 <cl_event_handler+0x588>)
   89080:	4798      	blx	r3
			toggle = false;
   89082:	4b23      	ldr	r3, [pc, #140]	; (89110 <cl_event_handler+0x580>)
   89084:	2200      	movs	r2, #0
   89086:	701a      	strb	r2, [r3, #0]
				if (temp_count == 10)
   89088:	4b20      	ldr	r3, [pc, #128]	; (8910c <cl_event_handler+0x57c>)
   8908a:	781b      	ldrb	r3, [r3, #0]
   8908c:	2b0a      	cmp	r3, #10
   8908e:	d102      	bne.n	89096 <cl_event_handler+0x506>
				{
			//		sv_cntrl_deactivatepump(BLOODPUMP);
					temp_count = 0;
   89090:	4b1e      	ldr	r3, [pc, #120]	; (8910c <cl_event_handler+0x57c>)
   89092:	2200      	movs	r2, #0
   89094:	701a      	strb	r2, [r3, #0]
				}
		}
		
//		#endif

		test_counter++;
   89096:	4b21      	ldr	r3, [pc, #132]	; (8911c <cl_event_handler+0x58c>)
   89098:	681b      	ldr	r3, [r3, #0]
   8909a:	3301      	adds	r3, #1
   8909c:	4a1f      	ldr	r2, [pc, #124]	; (8911c <cl_event_handler+0x58c>)
   8909e:	6013      	str	r3, [r2, #0]
		}
		
		break;
   890a0:	e00d      	b.n	890be <cl_event_handler+0x52e>
		case EVT_TICK_MIN:
		{
			//Cl_SysStat_mean_status_update();
		Cl_Temperature_Controller_Handler(TS_EVENT_MIN);
   890a2:	2002      	movs	r0, #2
   890a4:	4b1e      	ldr	r3, [pc, #120]	; (89120 <cl_event_handler+0x590>)
   890a6:	4798      	blx	r3
// 		cl_tdata.bytearray[2] = 28;
// 		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
// 		
	
		}
		break;
   890a8:	e009      	b.n	890be <cl_event_handler+0x52e>
		case EVT_ALERT_CS:
		Cl_bc_controller(BC_EVENT_CS);
   890aa:	2003      	movs	r0, #3
   890ac:	4b12      	ldr	r3, [pc, #72]	; (890f8 <cl_event_handler+0x568>)
   890ae:	4798      	blx	r3
		break;
   890b0:	e005      	b.n	890be <cl_event_handler+0x52e>
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		case EVT_CONSOLE_COMMAND_SET_DATA:
		cl_datamamanager(cl_event);
   890b2:	79fb      	ldrb	r3, [r7, #7]
   890b4:	4618      	mov	r0, r3
   890b6:	4b1b      	ldr	r3, [pc, #108]	; (89124 <cl_event_handler+0x594>)
   890b8:	4798      	blx	r3
		break;
   890ba:	e000      	b.n	890be <cl_event_handler+0x52e>
		default:
		break;
   890bc:	bf00      	nop
	}
	
	return 0;
   890be:	2300      	movs	r3, #0
}
   890c0:	4618      	mov	r0, r3
   890c2:	3710      	adds	r7, #16
   890c4:	46bd      	mov	sp, r7
   890c6:	bd80      	pop	{r7, pc}
   890c8:	20071ac2 	.word	0x20071ac2
   890cc:	20071ac4 	.word	0x20071ac4
   890d0:	20071ac6 	.word	0x20071ac6
   890d4:	20072332 	.word	0x20072332
   890d8:	000891c5 	.word	0x000891c5
   890dc:	00089129 	.word	0x00089129
   890e0:	0009b7c9 	.word	0x0009b7c9
   890e4:	20071ace 	.word	0x20071ace
   890e8:	00095679 	.word	0x00095679
   890ec:	000948d9 	.word	0x000948d9
   890f0:	000880c1 	.word	0x000880c1
   890f4:	00094b61 	.word	0x00094b61
   890f8:	00082ee1 	.word	0x00082ee1
   890fc:	000892f9 	.word	0x000892f9
   89100:	00090981 	.word	0x00090981
   89104:	00090181 	.word	0x00090181
   89108:	000945e9 	.word	0x000945e9
   8910c:	20071acf 	.word	0x20071acf
   89110:	20071ad0 	.word	0x20071ad0
   89114:	0009b24d 	.word	0x0009b24d
   89118:	0009b281 	.word	0x0009b281
   8911c:	20071abc 	.word	0x20071abc
   89120:	00090fa9 	.word	0x00090fa9
   89124:	0008490d 	.word	0x0008490d

00089128 <calculate_RC>:
// 
// 	return update_RC;
// }

uint16_t calculate_RC(uint16_t System_Conductivity)
{
   89128:	b480      	push	{r7}
   8912a:	b083      	sub	sp, #12
   8912c:	af00      	add	r7, sp, #0
   8912e:	4603      	mov	r3, r0
   89130:	80fb      	strh	r3, [r7, #6]
		Correction_Count++;
   89132:	4b1f      	ldr	r3, [pc, #124]	; (891b0 <calculate_RC+0x88>)
   89134:	881b      	ldrh	r3, [r3, #0]
   89136:	3301      	adds	r3, #1
   89138:	b29a      	uxth	r2, r3
   8913a:	4b1d      	ldr	r3, [pc, #116]	; (891b0 <calculate_RC+0x88>)
   8913c:	801a      	strh	r2, [r3, #0]
		
		if (Correction_Count ==60)
   8913e:	4b1c      	ldr	r3, [pc, #112]	; (891b0 <calculate_RC+0x88>)
   89140:	881b      	ldrh	r3, [r3, #0]
   89142:	2b3c      	cmp	r3, #60	; 0x3c
   89144:	d123      	bne.n	8918e <calculate_RC+0x66>
		{
		
			Correction_Count =0;		
   89146:	4b1a      	ldr	r3, [pc, #104]	; (891b0 <calculate_RC+0x88>)
   89148:	2200      	movs	r2, #0
   8914a:	801a      	strh	r2, [r3, #0]
			if (dir_cond == UP)
   8914c:	4b19      	ldr	r3, [pc, #100]	; (891b4 <calculate_RC+0x8c>)
   8914e:	881b      	ldrh	r3, [r3, #0]
   89150:	2b00      	cmp	r3, #0
   89152:	d10c      	bne.n	8916e <calculate_RC+0x46>
			{
				if (System_Conductivity > (Set_conductivity +3))
   89154:	88fa      	ldrh	r2, [r7, #6]
   89156:	4b18      	ldr	r3, [pc, #96]	; (891b8 <calculate_RC+0x90>)
   89158:	881b      	ldrh	r3, [r3, #0]
   8915a:	3303      	adds	r3, #3
   8915c:	429a      	cmp	r2, r3
   8915e:	dd16      	ble.n	8918e <calculate_RC+0x66>
				{
					update_RC = update_RC +1;
   89160:	4b16      	ldr	r3, [pc, #88]	; (891bc <calculate_RC+0x94>)
   89162:	881b      	ldrh	r3, [r3, #0]
   89164:	3301      	adds	r3, #1
   89166:	b29a      	uxth	r2, r3
   89168:	4b14      	ldr	r3, [pc, #80]	; (891bc <calculate_RC+0x94>)
   8916a:	801a      	strh	r2, [r3, #0]
   8916c:	e00f      	b.n	8918e <calculate_RC+0x66>
// 				else if (System_Conductivity < (Set_conductivity -5))
// 				{
// 					update_RC = update_RC -1;
// 				}
			}
			else if (dir_cond == DOWN)
   8916e:	4b11      	ldr	r3, [pc, #68]	; (891b4 <calculate_RC+0x8c>)
   89170:	881b      	ldrh	r3, [r3, #0]
   89172:	2b01      	cmp	r3, #1
   89174:	d10b      	bne.n	8918e <calculate_RC+0x66>
			{
				if (System_Conductivity < (Set_conductivity -3))
   89176:	88fa      	ldrh	r2, [r7, #6]
   89178:	4b0f      	ldr	r3, [pc, #60]	; (891b8 <calculate_RC+0x90>)
   8917a:	881b      	ldrh	r3, [r3, #0]
   8917c:	3b03      	subs	r3, #3
   8917e:	429a      	cmp	r2, r3
   89180:	da05      	bge.n	8918e <calculate_RC+0x66>
				{
					update_RC = update_RC -1;
   89182:	4b0e      	ldr	r3, [pc, #56]	; (891bc <calculate_RC+0x94>)
   89184:	881b      	ldrh	r3, [r3, #0]
   89186:	3b01      	subs	r3, #1
   89188:	b29a      	uxth	r2, r3
   8918a:	4b0c      	ldr	r3, [pc, #48]	; (891bc <calculate_RC+0x94>)
   8918c:	801a      	strh	r2, [r3, #0]
// 		{
// 		}
					
		}
					
		if (update_RC ==0)
   8918e:	4b0b      	ldr	r3, [pc, #44]	; (891bc <calculate_RC+0x94>)
   89190:	881b      	ldrh	r3, [r3, #0]
   89192:	2b00      	cmp	r3, #0
   89194:	d103      	bne.n	8919e <calculate_RC+0x76>
		{
			update_RC = Set_RC;
   89196:	4b0a      	ldr	r3, [pc, #40]	; (891c0 <calculate_RC+0x98>)
   89198:	881a      	ldrh	r2, [r3, #0]
   8919a:	4b08      	ldr	r3, [pc, #32]	; (891bc <calculate_RC+0x94>)
   8919c:	801a      	strh	r2, [r3, #0]
		}
//		sv_prop_set_propo_ACIDrc(update_RC);
				
				

	return update_RC;
   8919e:	4b07      	ldr	r3, [pc, #28]	; (891bc <calculate_RC+0x94>)
   891a0:	881b      	ldrh	r3, [r3, #0]
}
   891a2:	4618      	mov	r0, r3
   891a4:	370c      	adds	r7, #12
   891a6:	46bd      	mov	sp, r7
   891a8:	f85d 7b04 	ldr.w	r7, [sp], #4
   891ac:	4770      	bx	lr
   891ae:	bf00      	nop
   891b0:	20071ac0 	.word	0x20071ac0
   891b4:	20071acc 	.word	0x20071acc
   891b8:	20071ac2 	.word	0x20071ac2
   891bc:	20071ac6 	.word	0x20071ac6
   891c0:	20071ac4 	.word	0x20071ac4

000891c4 <Get_direction>:



void Get_direction(uint16_t cond)
{
   891c4:	b480      	push	{r7}
   891c6:	b083      	sub	sp, #12
   891c8:	af00      	add	r7, sp, #0
   891ca:	4603      	mov	r3, r0
   891cc:	80fb      	strh	r3, [r7, #6]
	direction_count ++;
   891ce:	4b15      	ldr	r3, [pc, #84]	; (89224 <Get_direction+0x60>)
   891d0:	881b      	ldrh	r3, [r3, #0]
   891d2:	3301      	adds	r3, #1
   891d4:	b29a      	uxth	r2, r3
   891d6:	4b13      	ldr	r3, [pc, #76]	; (89224 <Get_direction+0x60>)
   891d8:	801a      	strh	r2, [r3, #0]
	
	if (prev_cond > cond)
   891da:	4b13      	ldr	r3, [pc, #76]	; (89228 <Get_direction+0x64>)
   891dc:	881b      	ldrh	r3, [r3, #0]
   891de:	88fa      	ldrh	r2, [r7, #6]
   891e0:	429a      	cmp	r2, r3
   891e2:	d203      	bcs.n	891ec <Get_direction+0x28>
		{
			dir_cond = UP;
   891e4:	4b11      	ldr	r3, [pc, #68]	; (8922c <Get_direction+0x68>)
   891e6:	2200      	movs	r2, #0
   891e8:	801a      	strh	r2, [r3, #0]
   891ea:	e00b      	b.n	89204 <Get_direction+0x40>
		}
	else if( prev_cond < cond)
   891ec:	4b0e      	ldr	r3, [pc, #56]	; (89228 <Get_direction+0x64>)
   891ee:	881b      	ldrh	r3, [r3, #0]
   891f0:	88fa      	ldrh	r2, [r7, #6]
   891f2:	429a      	cmp	r2, r3
   891f4:	d903      	bls.n	891fe <Get_direction+0x3a>
		{
			dir_cond = DOWN;
   891f6:	4b0d      	ldr	r3, [pc, #52]	; (8922c <Get_direction+0x68>)
   891f8:	2201      	movs	r2, #1
   891fa:	801a      	strh	r2, [r3, #0]
   891fc:	e002      	b.n	89204 <Get_direction+0x40>
		}
	else
		dir_cond = NUETRAL;
   891fe:	4b0b      	ldr	r3, [pc, #44]	; (8922c <Get_direction+0x68>)
   89200:	2202      	movs	r2, #2
   89202:	801a      	strh	r2, [r3, #0]
		
	if (direction_count >= 10)
   89204:	4b07      	ldr	r3, [pc, #28]	; (89224 <Get_direction+0x60>)
   89206:	881b      	ldrh	r3, [r3, #0]
   89208:	2b09      	cmp	r3, #9
   8920a:	d905      	bls.n	89218 <Get_direction+0x54>
	{
		direction_count =0;
   8920c:	4b05      	ldr	r3, [pc, #20]	; (89224 <Get_direction+0x60>)
   8920e:	2200      	movs	r2, #0
   89210:	801a      	strh	r2, [r3, #0]
		prev_cond = cond;
   89212:	4a05      	ldr	r2, [pc, #20]	; (89228 <Get_direction+0x64>)
   89214:	88fb      	ldrh	r3, [r7, #6]
   89216:	8013      	strh	r3, [r2, #0]
	}
	
	return 0;
   89218:	bf00      	nop
   8921a:	370c      	adds	r7, #12
   8921c:	46bd      	mov	sp, r7
   8921e:	f85d 7b04 	ldr.w	r7, [sp], #4
   89222:	4770      	bx	lr
   89224:	20071aca 	.word	0x20071aca
   89228:	20071ac8 	.word	0x20071ac8
   8922c:	20071acc 	.word	0x20071acc

00089230 <Cl_Heater_GetHeaterStableStatus>:
#define TEMP2_FINE_MIN_300
#define TEMP2_FINE_MAX_300


Cl_ReturnCodeType Cl_Heater_GetHeaterStableStatus(Cl_BoolType* Stable)
{
   89230:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   89234:	b083      	sub	sp, #12
   89236:	af00      	add	r7, sp, #0
   89238:	6078      	str	r0, [r7, #4]
	if((avgtmp3_cel > prescribed_temp - 0.2) &&(avgtmp3_cel < prescribed_temp + 0.2))
   8923a:	4b27      	ldr	r3, [pc, #156]	; (892d8 <Cl_Heater_GetHeaterStableStatus+0xa8>)
   8923c:	681a      	ldr	r2, [r3, #0]
   8923e:	4b27      	ldr	r3, [pc, #156]	; (892dc <Cl_Heater_GetHeaterStableStatus+0xac>)
   89240:	4610      	mov	r0, r2
   89242:	4798      	blx	r3
   89244:	4680      	mov	r8, r0
   89246:	4689      	mov	r9, r1
   89248:	4b25      	ldr	r3, [pc, #148]	; (892e0 <Cl_Heater_GetHeaterStableStatus+0xb0>)
   8924a:	681a      	ldr	r2, [r3, #0]
   8924c:	4b23      	ldr	r3, [pc, #140]	; (892dc <Cl_Heater_GetHeaterStableStatus+0xac>)
   8924e:	4610      	mov	r0, r2
   89250:	4798      	blx	r3
   89252:	4602      	mov	r2, r0
   89254:	460b      	mov	r3, r1
   89256:	4c23      	ldr	r4, [pc, #140]	; (892e4 <Cl_Heater_GetHeaterStableStatus+0xb4>)
   89258:	4610      	mov	r0, r2
   8925a:	4619      	mov	r1, r3
   8925c:	a31c      	add	r3, pc, #112	; (adr r3, 892d0 <Cl_Heater_GetHeaterStableStatus+0xa0>)
   8925e:	e9d3 2300 	ldrd	r2, r3, [r3]
   89262:	47a0      	blx	r4
   89264:	4602      	mov	r2, r0
   89266:	460b      	mov	r3, r1
   89268:	4c1f      	ldr	r4, [pc, #124]	; (892e8 <Cl_Heater_GetHeaterStableStatus+0xb8>)
   8926a:	4640      	mov	r0, r8
   8926c:	4649      	mov	r1, r9
   8926e:	47a0      	blx	r4
   89270:	4603      	mov	r3, r0
   89272:	2b00      	cmp	r3, #0
   89274:	d022      	beq.n	892bc <Cl_Heater_GetHeaterStableStatus+0x8c>
   89276:	4b18      	ldr	r3, [pc, #96]	; (892d8 <Cl_Heater_GetHeaterStableStatus+0xa8>)
   89278:	681a      	ldr	r2, [r3, #0]
   8927a:	4b18      	ldr	r3, [pc, #96]	; (892dc <Cl_Heater_GetHeaterStableStatus+0xac>)
   8927c:	4610      	mov	r0, r2
   8927e:	4798      	blx	r3
   89280:	4680      	mov	r8, r0
   89282:	4689      	mov	r9, r1
   89284:	4b16      	ldr	r3, [pc, #88]	; (892e0 <Cl_Heater_GetHeaterStableStatus+0xb0>)
   89286:	681a      	ldr	r2, [r3, #0]
   89288:	4b14      	ldr	r3, [pc, #80]	; (892dc <Cl_Heater_GetHeaterStableStatus+0xac>)
   8928a:	4610      	mov	r0, r2
   8928c:	4798      	blx	r3
   8928e:	4602      	mov	r2, r0
   89290:	460b      	mov	r3, r1
   89292:	4c16      	ldr	r4, [pc, #88]	; (892ec <Cl_Heater_GetHeaterStableStatus+0xbc>)
   89294:	4610      	mov	r0, r2
   89296:	4619      	mov	r1, r3
   89298:	a30d      	add	r3, pc, #52	; (adr r3, 892d0 <Cl_Heater_GetHeaterStableStatus+0xa0>)
   8929a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8929e:	47a0      	blx	r4
   892a0:	4602      	mov	r2, r0
   892a2:	460b      	mov	r3, r1
   892a4:	4c12      	ldr	r4, [pc, #72]	; (892f0 <Cl_Heater_GetHeaterStableStatus+0xc0>)
   892a6:	4640      	mov	r0, r8
   892a8:	4649      	mov	r1, r9
   892aa:	47a0      	blx	r4
   892ac:	4603      	mov	r3, r0
   892ae:	2b00      	cmp	r3, #0
   892b0:	d004      	beq.n	892bc <Cl_Heater_GetHeaterStableStatus+0x8c>
	{
		*Stable =  cl_temp3_stable;
   892b2:	4b10      	ldr	r3, [pc, #64]	; (892f4 <Cl_Heater_GetHeaterStableStatus+0xc4>)
   892b4:	781a      	ldrb	r2, [r3, #0]
   892b6:	687b      	ldr	r3, [r7, #4]
   892b8:	701a      	strb	r2, [r3, #0]
   892ba:	e002      	b.n	892c2 <Cl_Heater_GetHeaterStableStatus+0x92>
	}
	else
	{
		*Stable =  false;
   892bc:	687b      	ldr	r3, [r7, #4]
   892be:	2200      	movs	r2, #0
   892c0:	701a      	strb	r2, [r3, #0]
	}
return CL_OK;
   892c2:	2300      	movs	r3, #0
}
   892c4:	4618      	mov	r0, r3
   892c6:	370c      	adds	r7, #12
   892c8:	46bd      	mov	sp, r7
   892ca:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   892ce:	bf00      	nop
   892d0:	9999999a 	.word	0x9999999a
   892d4:	3fc99999 	.word	0x3fc99999
   892d8:	20071adc 	.word	0x20071adc
   892dc:	000a79dd 	.word	0x000a79dd
   892e0:	200706f8 	.word	0x200706f8
   892e4:	000a771d 	.word	0x000a771d
   892e8:	000a7fa5 	.word	0x000a7fa5
   892ec:	000a7721 	.word	0x000a7721
   892f0:	000a7f69 	.word	0x000a7f69
   892f4:	20071dc9 	.word	0x20071dc9

000892f8 <Cl_Heater_Event_Handler>:

Cl_ReturnCodeType Cl_Heater_Event_Handler(HeaterEventsType HeaterEvent, float data)
{
   892f8:	b580      	push	{r7, lr}
   892fa:	b084      	sub	sp, #16
   892fc:	af00      	add	r7, sp, #0
   892fe:	4603      	mov	r3, r0
   89300:	6039      	str	r1, [r7, #0]
   89302:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType Cl_heeater_retcode = CL_OK;
   89304:	2300      	movs	r3, #0
   89306:	73fb      	strb	r3, [r7, #15]
	float cl_temp_delta = 0;
   89308:	f04f 0300 	mov.w	r3, #0
   8930c:	60bb      	str	r3, [r7, #8]

switch(HeaterEvent)
   8930e:	79fb      	ldrb	r3, [r7, #7]
   89310:	2b03      	cmp	r3, #3
   89312:	d020      	beq.n	89356 <Cl_Heater_Event_Handler+0x5e>
   89314:	2b05      	cmp	r3, #5
   89316:	d011      	beq.n	8933c <Cl_Heater_Event_Handler+0x44>
   89318:	2b01      	cmp	r3, #1
   8931a:	d000      	beq.n	8931e <Cl_Heater_Event_Handler+0x26>
	
	case CL_HEATER_EVENT_ON:
		cl_temp3_stable = false;
	break;
	
	default:break;
   8931c:	e01f      	b.n	8935e <Cl_Heater_Event_Handler+0x66>

switch(HeaterEvent)
{
	
	case CL_HEATER_EVENT_500MS:
		if (hotrinse_flag != 1)
   8931e:	4b12      	ldr	r3, [pc, #72]	; (89368 <Cl_Heater_Event_Handler+0x70>)
   89320:	781b      	ldrb	r3, [r3, #0]
   89322:	2b01      	cmp	r3, #1
   89324:	d002      	beq.n	8932c <Cl_Heater_Event_Handler+0x34>
		{
			Heat_Correction();
   89326:	4b11      	ldr	r3, [pc, #68]	; (8936c <Cl_Heater_Event_Handler+0x74>)
   89328:	4798      	blx	r3
   8932a:	e006      	b.n	8933a <Cl_Heater_Event_Handler+0x42>
		}
		
		else if (hotrinse_flag ==1)
   8932c:	4b0e      	ldr	r3, [pc, #56]	; (89368 <Cl_Heater_Event_Handler+0x70>)
   8932e:	781b      	ldrb	r3, [r3, #0]
   89330:	2b01      	cmp	r3, #1
   89332:	d102      	bne.n	8933a <Cl_Heater_Event_Handler+0x42>
		{
			
			Hot_Rinse();
   89334:	4b0e      	ldr	r3, [pc, #56]	; (89370 <Cl_Heater_Event_Handler+0x78>)
   89336:	4798      	blx	r3
			
		}
	break;
   89338:	e011      	b.n	8935e <Cl_Heater_Event_Handler+0x66>
   8933a:	e010      	b.n	8935e <Cl_Heater_Event_Handler+0x66>
	
	case CL_HEATER_EVENT_TARGET_TEMP:
		prescribed_temp = data;
   8933c:	4a0d      	ldr	r2, [pc, #52]	; (89374 <Cl_Heater_Event_Handler+0x7c>)
   8933e:	683b      	ldr	r3, [r7, #0]
   89340:	6013      	str	r3, [r2, #0]
		if (hotrinse_flag == 1)
   89342:	4b09      	ldr	r3, [pc, #36]	; (89368 <Cl_Heater_Event_Handler+0x70>)
   89344:	781b      	ldrb	r3, [r3, #0]
   89346:	2b01      	cmp	r3, #1
   89348:	d104      	bne.n	89354 <Cl_Heater_Event_Handler+0x5c>
		{
			avg_duty = 4000;
   8934a:	4b0b      	ldr	r3, [pc, #44]	; (89378 <Cl_Heater_Event_Handler+0x80>)
   8934c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   89350:	801a      	strh	r2, [r3, #0]
		}
 	break;
   89352:	e004      	b.n	8935e <Cl_Heater_Event_Handler+0x66>
   89354:	e003      	b.n	8935e <Cl_Heater_Event_Handler+0x66>
	
	case CL_HEATER_EVENT_ON:
		cl_temp3_stable = false;
   89356:	4b09      	ldr	r3, [pc, #36]	; (8937c <Cl_Heater_Event_Handler+0x84>)
   89358:	2200      	movs	r2, #0
   8935a:	701a      	strb	r2, [r3, #0]
	break;
   8935c:	bf00      	nop
	
	default:break;
}
	
	return (Cl_heeater_retcode);
   8935e:	7bfb      	ldrb	r3, [r7, #15]
}
   89360:	4618      	mov	r0, r3
   89362:	3710      	adds	r7, #16
   89364:	46bd      	mov	sp, r7
   89366:	bd80      	pop	{r7, pc}
   89368:	20071e15 	.word	0x20071e15
   8936c:	00089729 	.word	0x00089729
   89370:	0008b629 	.word	0x0008b629
   89374:	200706f8 	.word	0x200706f8
   89378:	20071ad4 	.word	0x20071ad4
   8937c:	20071dc9 	.word	0x20071dc9

00089380 <SetHeaterState>:

Cl_ReturnCodeType SetHeaterState(HeaterStateType Param_HeaterState)
{
   89380:	b590      	push	{r4, r7, lr}
   89382:	b085      	sub	sp, #20
   89384:	af00      	add	r7, sp, #0
   89386:	4603      	mov	r3, r0
   89388:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType Cl_rinseretcode = CL_OK;
   8938a:	2300      	movs	r3, #0
   8938c:	73fb      	strb	r3, [r7, #15]
	int16_t sensordata;
	
	HeaterPrevState = HeaterState;
   8938e:	4b4f      	ldr	r3, [pc, #316]	; (894cc <SetHeaterState+0x14c>)
   89390:	781a      	ldrb	r2, [r3, #0]
   89392:	4b4f      	ldr	r3, [pc, #316]	; (894d0 <SetHeaterState+0x150>)
   89394:	701a      	strb	r2, [r3, #0]
	HeaterState = Param_HeaterState;
   89396:	4a4d      	ldr	r2, [pc, #308]	; (894cc <SetHeaterState+0x14c>)
   89398:	79fb      	ldrb	r3, [r7, #7]
   8939a:	7013      	strb	r3, [r2, #0]
	if(Param_HeaterState == CL_HEATER_STATE_OFF)
   8939c:	79fb      	ldrb	r3, [r7, #7]
   8939e:	2b04      	cmp	r3, #4
   893a0:	d104      	bne.n	893ac <SetHeaterState+0x2c>
	{
		sv_cntrl_poweroffheater();
   893a2:	4b4c      	ldr	r3, [pc, #304]	; (894d4 <SetHeaterState+0x154>)
   893a4:	4798      	blx	r3
		heater_substate = CL_HEATER_SUBSTATE_OFF;
   893a6:	4b4c      	ldr	r3, [pc, #304]	; (894d8 <SetHeaterState+0x158>)
   893a8:	2200      	movs	r2, #0
   893aa:	701a      	strb	r2, [r3, #0]
	}
	if(Param_HeaterState == CL_HEATER_STATE_ON)
   893ac:	79fb      	ldrb	r3, [r7, #7]
   893ae:	2b01      	cmp	r3, #1
   893b0:	d105      	bne.n	893be <SetHeaterState+0x3e>
	{
    	cl_temp3_stable = false;
   893b2:	4b4a      	ldr	r3, [pc, #296]	; (894dc <SetHeaterState+0x15c>)
   893b4:	2200      	movs	r2, #0
   893b6:	701a      	strb	r2, [r3, #0]
		heater_substate = CL_HEATER_SUBSTATE_OFF;
   893b8:	4b47      	ldr	r3, [pc, #284]	; (894d8 <SetHeaterState+0x158>)
   893ba:	2200      	movs	r2, #0
   893bc:	701a      	strb	r2, [r3, #0]
	}	

	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&sensordata);
   893be:	f107 030c 	add.w	r3, r7, #12
   893c2:	2012      	movs	r0, #18
   893c4:	4619      	mov	r1, r3
   893c6:	4b46      	ldr	r3, [pc, #280]	; (894e0 <SetHeaterState+0x160>)
   893c8:	4798      	blx	r3

	if((Param_HeaterState != CL_HEATER_STATE_DIALYSER_PRIME_ON ) && (Param_HeaterState != CL_HEATER_STATE_DIALYSIS_ON))
   893ca:	79fb      	ldrb	r3, [r7, #7]
   893cc:	2b02      	cmp	r3, #2
   893ce:	f000 80e0 	beq.w	89592 <SetHeaterState+0x212>
   893d2:	79fb      	ldrb	r3, [r7, #7]
   893d4:	2b03      	cmp	r3, #3
   893d6:	f000 80dc 	beq.w	89592 <SetHeaterState+0x212>
	{
					
		Tmp1Val = (Tmp1Val*9+ (float)sensordata/10)/10;
   893da:	4b42      	ldr	r3, [pc, #264]	; (894e4 <SetHeaterState+0x164>)
   893dc:	681a      	ldr	r2, [r3, #0]
   893de:	4b42      	ldr	r3, [pc, #264]	; (894e8 <SetHeaterState+0x168>)
   893e0:	4610      	mov	r0, r2
   893e2:	4942      	ldr	r1, [pc, #264]	; (894ec <SetHeaterState+0x16c>)
   893e4:	4798      	blx	r3
   893e6:	4603      	mov	r3, r0
   893e8:	461c      	mov	r4, r3
   893ea:	89bb      	ldrh	r3, [r7, #12]
   893ec:	b21a      	sxth	r2, r3
   893ee:	4b40      	ldr	r3, [pc, #256]	; (894f0 <SetHeaterState+0x170>)
   893f0:	4610      	mov	r0, r2
   893f2:	4798      	blx	r3
   893f4:	4602      	mov	r2, r0
   893f6:	4b3f      	ldr	r3, [pc, #252]	; (894f4 <SetHeaterState+0x174>)
   893f8:	4610      	mov	r0, r2
   893fa:	493f      	ldr	r1, [pc, #252]	; (894f8 <SetHeaterState+0x178>)
   893fc:	4798      	blx	r3
   893fe:	4603      	mov	r3, r0
   89400:	461a      	mov	r2, r3
   89402:	4b3e      	ldr	r3, [pc, #248]	; (894fc <SetHeaterState+0x17c>)
   89404:	4620      	mov	r0, r4
   89406:	4611      	mov	r1, r2
   89408:	4798      	blx	r3
   8940a:	4603      	mov	r3, r0
   8940c:	461a      	mov	r2, r3
   8940e:	4b39      	ldr	r3, [pc, #228]	; (894f4 <SetHeaterState+0x174>)
   89410:	4610      	mov	r0, r2
   89412:	4939      	ldr	r1, [pc, #228]	; (894f8 <SetHeaterState+0x178>)
   89414:	4798      	blx	r3
   89416:	4603      	mov	r3, r0
   89418:	461a      	mov	r2, r3
   8941a:	4b32      	ldr	r3, [pc, #200]	; (894e4 <SetHeaterState+0x164>)
   8941c:	601a      	str	r2, [r3, #0]
	 
        SYSTEM_FLOW = Treatdata[ID_dflow];					// Gopal:  will get the system flow rate from the user
   8941e:	4b38      	ldr	r3, [pc, #224]	; (89500 <SetHeaterState+0x180>)
   89420:	695b      	ldr	r3, [r3, #20]
   89422:	4a38      	ldr	r2, [pc, #224]	; (89504 <SetHeaterState+0x184>)
   89424:	6013      	str	r3, [r2, #0]
        Prescribed_T3 = Treatdata[ID_settemp]/10;				// Gopal:  will get the user set temperature to prescribed T3
   89426:	4b36      	ldr	r3, [pc, #216]	; (89500 <SetHeaterState+0x180>)
   89428:	699b      	ldr	r3, [r3, #24]
   8942a:	4a37      	ldr	r2, [pc, #220]	; (89508 <SetHeaterState+0x188>)
   8942c:	fba2 2303 	umull	r2, r3, r2, r3
   89430:	08da      	lsrs	r2, r3, #3
   89432:	4b36      	ldr	r3, [pc, #216]	; (8950c <SetHeaterState+0x18c>)
   89434:	4610      	mov	r0, r2
   89436:	4798      	blx	r3
   89438:	4602      	mov	r2, r0
   8943a:	4b35      	ldr	r3, [pc, #212]	; (89510 <SetHeaterState+0x190>)
   8943c:	601a      	str	r2, [r3, #0]
 
	    if (hotrinse_flag == 1)
   8943e:	4b35      	ldr	r3, [pc, #212]	; (89514 <SetHeaterState+0x194>)
   89440:	781b      	ldrb	r3, [r3, #0]
   89442:	2b01      	cmp	r3, #1
   89444:	d103      	bne.n	8944e <SetHeaterState+0xce>
		{
		  avg_duty = 4000;
   89446:	4b34      	ldr	r3, [pc, #208]	; (89518 <SetHeaterState+0x198>)
   89448:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   8944c:	801a      	strh	r2, [r3, #0]
		}
		  
		if (SYSTEM_FLOW == 300 )                   // Gopal: if initial inlet temperature in less than 26 or flow rate is 300 then avg duty is 2400
   8944e:	4b2d      	ldr	r3, [pc, #180]	; (89504 <SetHeaterState+0x184>)
   89450:	681b      	ldr	r3, [r3, #0]
   89452:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   89456:	d113      	bne.n	89480 <SetHeaterState+0x100>
		{
		  avg_duty = 2100;
   89458:	4b2f      	ldr	r3, [pc, #188]	; (89518 <SetHeaterState+0x198>)
   8945a:	f640 0234 	movw	r2, #2100	; 0x834
   8945e:	801a      	strh	r2, [r3, #0]
		  wait_4_TS2Stability = WAIT_4_TS2STABILITY_300;
   89460:	4b2e      	ldr	r3, [pc, #184]	; (8951c <SetHeaterState+0x19c>)
   89462:	22f0      	movs	r2, #240	; 0xf0
   89464:	801a      	strh	r2, [r3, #0]
		  wait_4_stability = WAIT_4_TS3STABILITY_300;
   89466:	4b2e      	ldr	r3, [pc, #184]	; (89520 <SetHeaterState+0x1a0>)
   89468:	2278      	movs	r2, #120	; 0x78
   8946a:	801a      	strh	r2, [r3, #0]
		  post_stability_count = TS2_STABILITY_COUNT_300;
   8946c:	4b2d      	ldr	r3, [pc, #180]	; (89524 <SetHeaterState+0x1a4>)
   8946e:	221e      	movs	r2, #30
   89470:	801a      	strh	r2, [r3, #0]
		  TS3_post_stability_count = TS3_STABILITY_COUNT_300;
   89472:	4b2d      	ldr	r3, [pc, #180]	; (89528 <SetHeaterState+0x1a8>)
   89474:	221e      	movs	r2, #30
   89476:	801a      	strh	r2, [r3, #0]
		  Prescribed_T2 = PRESCRIBED_TS2_300;
   89478:	4b2c      	ldr	r3, [pc, #176]	; (8952c <SetHeaterState+0x1ac>)
   8947a:	4a2d      	ldr	r2, [pc, #180]	; (89530 <SetHeaterState+0x1b0>)
   8947c:	601a      	str	r2, [r3, #0]
   8947e:	e084      	b.n	8958a <SetHeaterState+0x20a>
		}
		else if (SYSTEM_FLOW == 500)
   89480:	4b20      	ldr	r3, [pc, #128]	; (89504 <SetHeaterState+0x184>)
   89482:	681b      	ldr	r3, [r3, #0]
   89484:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   89488:	d15a      	bne.n	89540 <SetHeaterState+0x1c0>
		{
		  avg_duty = 2300;
   8948a:	4b23      	ldr	r3, [pc, #140]	; (89518 <SetHeaterState+0x198>)
   8948c:	f640 02fc 	movw	r2, #2300	; 0x8fc
   89490:	801a      	strh	r2, [r3, #0]
		  if (Tmp1Val <= 26)
   89492:	4b14      	ldr	r3, [pc, #80]	; (894e4 <SetHeaterState+0x164>)
   89494:	681a      	ldr	r2, [r3, #0]
   89496:	4b27      	ldr	r3, [pc, #156]	; (89534 <SetHeaterState+0x1b4>)
   89498:	4610      	mov	r0, r2
   8949a:	4927      	ldr	r1, [pc, #156]	; (89538 <SetHeaterState+0x1b8>)
   8949c:	4798      	blx	r3
   8949e:	4603      	mov	r3, r0
   894a0:	2b00      	cmp	r3, #0
   894a2:	d003      	beq.n	894ac <SetHeaterState+0x12c>
		  {
		   avg_duty = 2400;
   894a4:	4b1c      	ldr	r3, [pc, #112]	; (89518 <SetHeaterState+0x198>)
   894a6:	f44f 6216 	mov.w	r2, #2400	; 0x960
   894aa:	801a      	strh	r2, [r3, #0]
		  }
		  wait_4_TS2Stability = WAIT_4_TS2STABILITY_500;
   894ac:	4b1b      	ldr	r3, [pc, #108]	; (8951c <SetHeaterState+0x19c>)
   894ae:	22b4      	movs	r2, #180	; 0xb4
   894b0:	801a      	strh	r2, [r3, #0]
		  wait_4_stability = WAIT_4_STABILITY_500;
   894b2:	4b1b      	ldr	r3, [pc, #108]	; (89520 <SetHeaterState+0x1a0>)
   894b4:	22b4      	movs	r2, #180	; 0xb4
   894b6:	801a      	strh	r2, [r3, #0]
		  post_stability_count =  TS2_STABILITY_COUNT_500;
   894b8:	4b1a      	ldr	r3, [pc, #104]	; (89524 <SetHeaterState+0x1a4>)
   894ba:	221e      	movs	r2, #30
   894bc:	801a      	strh	r2, [r3, #0]
		  TS3_post_stability_count = TS3_STABILITY_COUNT_500;
   894be:	4b1a      	ldr	r3, [pc, #104]	; (89528 <SetHeaterState+0x1a8>)
   894c0:	223c      	movs	r2, #60	; 0x3c
   894c2:	801a      	strh	r2, [r3, #0]
		  Prescribed_T2 = PRESCRIBED_TS2_500;
   894c4:	4b19      	ldr	r3, [pc, #100]	; (8952c <SetHeaterState+0x1ac>)
   894c6:	4a1d      	ldr	r2, [pc, #116]	; (8953c <SetHeaterState+0x1bc>)
   894c8:	601a      	str	r2, [r3, #0]
   894ca:	e05e      	b.n	8958a <SetHeaterState+0x20a>
   894cc:	20071ad1 	.word	0x20071ad1
   894d0:	20071ad2 	.word	0x20071ad2
   894d4:	0009b3d5 	.word	0x0009b3d5
   894d8:	20071ad6 	.word	0x20071ad6
   894dc:	20071dc9 	.word	0x20071dc9
   894e0:	0008fd69 	.word	0x0008fd69
   894e4:	20071ae0 	.word	0x20071ae0
   894e8:	000a8305 	.word	0x000a8305
   894ec:	41100000 	.word	0x41100000
   894f0:	000a825d 	.word	0x000a825d
   894f4:	000a846d 	.word	0x000a846d
   894f8:	41200000 	.word	0x41200000
   894fc:	000a80f5 	.word	0x000a80f5
   89500:	20072880 	.word	0x20072880
   89504:	20070704 	.word	0x20070704
   89508:	cccccccd 	.word	0xcccccccd
   8950c:	000a8255 	.word	0x000a8255
   89510:	20072334 	.word	0x20072334
   89514:	20071e15 	.word	0x20071e15
   89518:	20071ad4 	.word	0x20071ad4
   8951c:	200706fc 	.word	0x200706fc
   89520:	200706fe 	.word	0x200706fe
   89524:	20071af4 	.word	0x20071af4
   89528:	20071af6 	.word	0x20071af6
   8952c:	20072348 	.word	0x20072348
   89530:	42200000 	.word	0x42200000
   89534:	000a8655 	.word	0x000a8655
   89538:	41d00000 	.word	0x41d00000
   8953c:	421c0000 	.word	0x421c0000
		}
		else if (SYSTEM_FLOW == 800)
   89540:	4b5f      	ldr	r3, [pc, #380]	; (896c0 <SetHeaterState+0x340>)
   89542:	681b      	ldr	r3, [r3, #0]
   89544:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   89548:	d11f      	bne.n	8958a <SetHeaterState+0x20a>
		{
			avg_duty = 2300;
   8954a:	4b5e      	ldr	r3, [pc, #376]	; (896c4 <SetHeaterState+0x344>)
   8954c:	f640 02fc 	movw	r2, #2300	; 0x8fc
   89550:	801a      	strh	r2, [r3, #0]
			if (Tmp1Val <= 26)
   89552:	4b5d      	ldr	r3, [pc, #372]	; (896c8 <SetHeaterState+0x348>)
   89554:	681a      	ldr	r2, [r3, #0]
   89556:	4b5d      	ldr	r3, [pc, #372]	; (896cc <SetHeaterState+0x34c>)
   89558:	4610      	mov	r0, r2
   8955a:	495d      	ldr	r1, [pc, #372]	; (896d0 <SetHeaterState+0x350>)
   8955c:	4798      	blx	r3
   8955e:	4603      	mov	r3, r0
   89560:	2b00      	cmp	r3, #0
   89562:	d003      	beq.n	8956c <SetHeaterState+0x1ec>
			{
				avg_duty = 2400;
   89564:	4b57      	ldr	r3, [pc, #348]	; (896c4 <SetHeaterState+0x344>)
   89566:	f44f 6216 	mov.w	r2, #2400	; 0x960
   8956a:	801a      	strh	r2, [r3, #0]
			}
			wait_4_TS2Stability = WAIT_4_TS2STABILITY_800;
   8956c:	4b59      	ldr	r3, [pc, #356]	; (896d4 <SetHeaterState+0x354>)
   8956e:	22b4      	movs	r2, #180	; 0xb4
   89570:	801a      	strh	r2, [r3, #0]
			wait_4_stability = WAIT_4_STABILITY_800;
   89572:	4b59      	ldr	r3, [pc, #356]	; (896d8 <SetHeaterState+0x358>)
   89574:	22b4      	movs	r2, #180	; 0xb4
   89576:	801a      	strh	r2, [r3, #0]
			post_stability_count =  TS2_STABILITY_COUNT_800;
   89578:	4b58      	ldr	r3, [pc, #352]	; (896dc <SetHeaterState+0x35c>)
   8957a:	221e      	movs	r2, #30
   8957c:	801a      	strh	r2, [r3, #0]
			TS3_post_stability_count = TS3_STABILITY_COUNT_800;
   8957e:	4b58      	ldr	r3, [pc, #352]	; (896e0 <SetHeaterState+0x360>)
   89580:	223c      	movs	r2, #60	; 0x3c
   89582:	801a      	strh	r2, [r3, #0]
			Prescribed_T2 = PRESCRIBED_TS2_800;
   89584:	4b57      	ldr	r3, [pc, #348]	; (896e4 <SetHeaterState+0x364>)
   89586:	4a58      	ldr	r2, [pc, #352]	; (896e8 <SetHeaterState+0x368>)
   89588:	601a      	str	r2, [r3, #0]
		}
			
		avg_duty = avg_duty ;
   8958a:	4b4e      	ldr	r3, [pc, #312]	; (896c4 <SetHeaterState+0x344>)
   8958c:	881a      	ldrh	r2, [r3, #0]
   8958e:	4b4d      	ldr	r3, [pc, #308]	; (896c4 <SetHeaterState+0x344>)
   89590:	801a      	strh	r2, [r3, #0]
 	}

	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&sensordata);
   89592:	f107 030c 	add.w	r3, r7, #12
   89596:	2012      	movs	r0, #18
   89598:	4619      	mov	r1, r3
   8959a:	4b54      	ldr	r3, [pc, #336]	; (896ec <SetHeaterState+0x36c>)
   8959c:	4798      	blx	r3
    {
		Tmp1Val = (Tmp1Val*9+ (float)sensordata/100)/10;
   8959e:	4b4a      	ldr	r3, [pc, #296]	; (896c8 <SetHeaterState+0x348>)
   895a0:	681a      	ldr	r2, [r3, #0]
   895a2:	4b53      	ldr	r3, [pc, #332]	; (896f0 <SetHeaterState+0x370>)
   895a4:	4610      	mov	r0, r2
   895a6:	4953      	ldr	r1, [pc, #332]	; (896f4 <SetHeaterState+0x374>)
   895a8:	4798      	blx	r3
   895aa:	4603      	mov	r3, r0
   895ac:	461c      	mov	r4, r3
   895ae:	89bb      	ldrh	r3, [r7, #12]
   895b0:	b21a      	sxth	r2, r3
   895b2:	4b51      	ldr	r3, [pc, #324]	; (896f8 <SetHeaterState+0x378>)
   895b4:	4610      	mov	r0, r2
   895b6:	4798      	blx	r3
   895b8:	4602      	mov	r2, r0
   895ba:	4b50      	ldr	r3, [pc, #320]	; (896fc <SetHeaterState+0x37c>)
   895bc:	4610      	mov	r0, r2
   895be:	4950      	ldr	r1, [pc, #320]	; (89700 <SetHeaterState+0x380>)
   895c0:	4798      	blx	r3
   895c2:	4603      	mov	r3, r0
   895c4:	461a      	mov	r2, r3
   895c6:	4b4f      	ldr	r3, [pc, #316]	; (89704 <SetHeaterState+0x384>)
   895c8:	4620      	mov	r0, r4
   895ca:	4611      	mov	r1, r2
   895cc:	4798      	blx	r3
   895ce:	4603      	mov	r3, r0
   895d0:	461a      	mov	r2, r3
   895d2:	4b4a      	ldr	r3, [pc, #296]	; (896fc <SetHeaterState+0x37c>)
   895d4:	4610      	mov	r0, r2
   895d6:	494c      	ldr	r1, [pc, #304]	; (89708 <SetHeaterState+0x388>)
   895d8:	4798      	blx	r3
   895da:	4603      	mov	r3, r0
   895dc:	461a      	mov	r2, r3
   895de:	4b3a      	ldr	r3, [pc, #232]	; (896c8 <SetHeaterState+0x348>)
   895e0:	601a      	str	r2, [r3, #0]
	}

	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);
   895e2:	f107 030c 	add.w	r3, r7, #12
   895e6:	2013      	movs	r0, #19
   895e8:	4619      	mov	r1, r3
   895ea:	4b40      	ldr	r3, [pc, #256]	; (896ec <SetHeaterState+0x36c>)
   895ec:	4798      	blx	r3
	{
	   Tmp2Val = (Tmp2Val*9+ (float)sensordata/100)/10;
   895ee:	4b47      	ldr	r3, [pc, #284]	; (8970c <SetHeaterState+0x38c>)
   895f0:	681a      	ldr	r2, [r3, #0]
   895f2:	4b3f      	ldr	r3, [pc, #252]	; (896f0 <SetHeaterState+0x370>)
   895f4:	4610      	mov	r0, r2
   895f6:	493f      	ldr	r1, [pc, #252]	; (896f4 <SetHeaterState+0x374>)
   895f8:	4798      	blx	r3
   895fa:	4603      	mov	r3, r0
   895fc:	461c      	mov	r4, r3
   895fe:	89bb      	ldrh	r3, [r7, #12]
   89600:	b21a      	sxth	r2, r3
   89602:	4b3d      	ldr	r3, [pc, #244]	; (896f8 <SetHeaterState+0x378>)
   89604:	4610      	mov	r0, r2
   89606:	4798      	blx	r3
   89608:	4602      	mov	r2, r0
   8960a:	4b3c      	ldr	r3, [pc, #240]	; (896fc <SetHeaterState+0x37c>)
   8960c:	4610      	mov	r0, r2
   8960e:	493c      	ldr	r1, [pc, #240]	; (89700 <SetHeaterState+0x380>)
   89610:	4798      	blx	r3
   89612:	4603      	mov	r3, r0
   89614:	461a      	mov	r2, r3
   89616:	4b3b      	ldr	r3, [pc, #236]	; (89704 <SetHeaterState+0x384>)
   89618:	4620      	mov	r0, r4
   8961a:	4611      	mov	r1, r2
   8961c:	4798      	blx	r3
   8961e:	4603      	mov	r3, r0
   89620:	461a      	mov	r2, r3
   89622:	4b36      	ldr	r3, [pc, #216]	; (896fc <SetHeaterState+0x37c>)
   89624:	4610      	mov	r0, r2
   89626:	4938      	ldr	r1, [pc, #224]	; (89708 <SetHeaterState+0x388>)
   89628:	4798      	blx	r3
   8962a:	4603      	mov	r3, r0
   8962c:	461a      	mov	r2, r3
   8962e:	4b37      	ldr	r3, [pc, #220]	; (8970c <SetHeaterState+0x38c>)
   89630:	601a      	str	r2, [r3, #0]
  	   prev_temp2val = Tmp2Val;
   89632:	4b36      	ldr	r3, [pc, #216]	; (8970c <SetHeaterState+0x38c>)
   89634:	681a      	ldr	r2, [r3, #0]
   89636:	4b36      	ldr	r3, [pc, #216]	; (89710 <SetHeaterState+0x390>)
   89638:	4610      	mov	r0, r2
   8963a:	4798      	blx	r3
   8963c:	4603      	mov	r3, r0
   8963e:	b29a      	uxth	r2, r3
   89640:	4b34      	ldr	r3, [pc, #208]	; (89714 <SetHeaterState+0x394>)
   89642:	801a      	strh	r2, [r3, #0]
	}
		 	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   89644:	f107 030c 	add.w	r3, r7, #12
   89648:	2014      	movs	r0, #20
   8964a:	4619      	mov	r1, r3
   8964c:	4b27      	ldr	r3, [pc, #156]	; (896ec <SetHeaterState+0x36c>)
   8964e:	4798      	blx	r3
	{
		Tmp3Val = (Tmp3Val*9+ (float)sensordata/100)/10;
   89650:	4b31      	ldr	r3, [pc, #196]	; (89718 <SetHeaterState+0x398>)
   89652:	681a      	ldr	r2, [r3, #0]
   89654:	4b26      	ldr	r3, [pc, #152]	; (896f0 <SetHeaterState+0x370>)
   89656:	4610      	mov	r0, r2
   89658:	4926      	ldr	r1, [pc, #152]	; (896f4 <SetHeaterState+0x374>)
   8965a:	4798      	blx	r3
   8965c:	4603      	mov	r3, r0
   8965e:	461c      	mov	r4, r3
   89660:	89bb      	ldrh	r3, [r7, #12]
   89662:	b21a      	sxth	r2, r3
   89664:	4b24      	ldr	r3, [pc, #144]	; (896f8 <SetHeaterState+0x378>)
   89666:	4610      	mov	r0, r2
   89668:	4798      	blx	r3
   8966a:	4602      	mov	r2, r0
   8966c:	4b23      	ldr	r3, [pc, #140]	; (896fc <SetHeaterState+0x37c>)
   8966e:	4610      	mov	r0, r2
   89670:	4923      	ldr	r1, [pc, #140]	; (89700 <SetHeaterState+0x380>)
   89672:	4798      	blx	r3
   89674:	4603      	mov	r3, r0
   89676:	461a      	mov	r2, r3
   89678:	4b22      	ldr	r3, [pc, #136]	; (89704 <SetHeaterState+0x384>)
   8967a:	4620      	mov	r0, r4
   8967c:	4611      	mov	r1, r2
   8967e:	4798      	blx	r3
   89680:	4603      	mov	r3, r0
   89682:	461a      	mov	r2, r3
   89684:	4b1d      	ldr	r3, [pc, #116]	; (896fc <SetHeaterState+0x37c>)
   89686:	4610      	mov	r0, r2
   89688:	491f      	ldr	r1, [pc, #124]	; (89708 <SetHeaterState+0x388>)
   8968a:	4798      	blx	r3
   8968c:	4603      	mov	r3, r0
   8968e:	461a      	mov	r2, r3
   89690:	4b21      	ldr	r3, [pc, #132]	; (89718 <SetHeaterState+0x398>)
   89692:	601a      	str	r2, [r3, #0]
    	prev_temp3val = Tmp3Val;
   89694:	4b20      	ldr	r3, [pc, #128]	; (89718 <SetHeaterState+0x398>)
   89696:	681a      	ldr	r2, [r3, #0]
   89698:	4b1d      	ldr	r3, [pc, #116]	; (89710 <SetHeaterState+0x390>)
   8969a:	4610      	mov	r0, r2
   8969c:	4798      	blx	r3
   8969e:	4603      	mov	r3, r0
   896a0:	b29a      	uxth	r2, r3
   896a2:	4b1e      	ldr	r3, [pc, #120]	; (8971c <SetHeaterState+0x39c>)
   896a4:	801a      	strh	r2, [r3, #0]
	}
		 
		 	
	if (HeaterState == CL_HEATER_STATE_CLOSED_HEATING)
   896a6:	4b1e      	ldr	r3, [pc, #120]	; (89720 <SetHeaterState+0x3a0>)
   896a8:	781b      	ldrb	r3, [r3, #0]
   896aa:	2b06      	cmp	r3, #6
   896ac:	d102      	bne.n	896b4 <SetHeaterState+0x334>
	{
		avg_duty = 100;
   896ae:	4b05      	ldr	r3, [pc, #20]	; (896c4 <SetHeaterState+0x344>)
   896b0:	2264      	movs	r2, #100	; 0x64
   896b2:	801a      	strh	r2, [r3, #0]
	{
	//	avg_duty = stable_avg_dty;
	}

	
	return (Cl_rinseretcode);
   896b4:	7bfb      	ldrb	r3, [r7, #15]
}
   896b6:	4618      	mov	r0, r3
   896b8:	3714      	adds	r7, #20
   896ba:	46bd      	mov	sp, r7
   896bc:	bd90      	pop	{r4, r7, pc}
   896be:	bf00      	nop
   896c0:	20070704 	.word	0x20070704
   896c4:	20071ad4 	.word	0x20071ad4
   896c8:	20071ae0 	.word	0x20071ae0
   896cc:	000a8655 	.word	0x000a8655
   896d0:	41d00000 	.word	0x41d00000
   896d4:	200706fc 	.word	0x200706fc
   896d8:	200706fe 	.word	0x200706fe
   896dc:	20071af4 	.word	0x20071af4
   896e0:	20071af6 	.word	0x20071af6
   896e4:	20072348 	.word	0x20072348
   896e8:	421c0000 	.word	0x421c0000
   896ec:	0008fd69 	.word	0x0008fd69
   896f0:	000a8305 	.word	0x000a8305
   896f4:	41100000 	.word	0x41100000
   896f8:	000a825d 	.word	0x000a825d
   896fc:	000a846d 	.word	0x000a846d
   89700:	42c80000 	.word	0x42c80000
   89704:	000a80f5 	.word	0x000a80f5
   89708:	41200000 	.word	0x41200000
   8970c:	20071ae4 	.word	0x20071ae4
   89710:	000a8691 	.word	0x000a8691
   89714:	20071ad8 	.word	0x20071ad8
   89718:	20071ae8 	.word	0x20071ae8
   8971c:	20071ada 	.word	0x20071ada
   89720:	20071ad1 	.word	0x20071ad1
   89724:	00000000 	.word	0x00000000

00089728 <Heat_Correction>:

int16_t Heat_Correction()
{
   89728:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   8972c:	b083      	sub	sp, #12
   8972e:	af00      	add	r7, sp, #0
	count_500ms ++;
   89730:	4b1b      	ldr	r3, [pc, #108]	; (897a0 <Heat_Correction+0x78>)
   89732:	881b      	ldrh	r3, [r3, #0]
   89734:	3301      	adds	r3, #1
   89736:	b29a      	uxth	r2, r3
   89738:	4b19      	ldr	r3, [pc, #100]	; (897a0 <Heat_Correction+0x78>)
   8973a:	801a      	strh	r2, [r3, #0]
    stability_count++;				//Count used to check if TS3 is stable, is being reset so we need this and cannot use count_500ms
   8973c:	4b19      	ldr	r3, [pc, #100]	; (897a4 <Heat_Correction+0x7c>)
   8973e:	881b      	ldrh	r3, [r3, #0]
   89740:	3301      	adds	r3, #1
   89742:	b29a      	uxth	r2, r3
   89744:	4b17      	ldr	r3, [pc, #92]	; (897a4 <Heat_Correction+0x7c>)
   89746:	801a      	strh	r2, [r3, #0]
	TS2_stability_count++;
   89748:	4b17      	ldr	r3, [pc, #92]	; (897a8 <Heat_Correction+0x80>)
   8974a:	881b      	ldrh	r3, [r3, #0]
   8974c:	3301      	adds	r3, #1
   8974e:	b29a      	uxth	r2, r3
   89750:	4b15      	ldr	r3, [pc, #84]	; (897a8 <Heat_Correction+0x80>)
   89752:	801a      	strh	r2, [r3, #0]
		
	if (!(count_500ms % 600))           // wait for 30 sec for storing TS2 value, used in slope calculation
   89754:	4b12      	ldr	r3, [pc, #72]	; (897a0 <Heat_Correction+0x78>)
   89756:	881b      	ldrh	r3, [r3, #0]
   89758:	4a14      	ldr	r2, [pc, #80]	; (897ac <Heat_Correction+0x84>)
   8975a:	fba2 1203 	umull	r1, r2, r2, r3
   8975e:	0992      	lsrs	r2, r2, #6
   89760:	f44f 7116 	mov.w	r1, #600	; 0x258
   89764:	fb01 f202 	mul.w	r2, r1, r2
   89768:	1a9b      	subs	r3, r3, r2
   8976a:	b29b      	uxth	r3, r3
   8976c:	2b00      	cmp	r3, #0
   8976e:	d107      	bne.n	89780 <Heat_Correction+0x58>
	{
		Past_TS2 = Tmp2Val;
   89770:	4b0f      	ldr	r3, [pc, #60]	; (897b0 <Heat_Correction+0x88>)
   89772:	681b      	ldr	r3, [r3, #0]
   89774:	4a0f      	ldr	r2, [pc, #60]	; (897b4 <Heat_Correction+0x8c>)
   89776:	6013      	str	r3, [r2, #0]
		count_at_PastTS2 = count_500ms;  //for use in slope calculation
   89778:	4b09      	ldr	r3, [pc, #36]	; (897a0 <Heat_Correction+0x78>)
   8977a:	881a      	ldrh	r2, [r3, #0]
   8977c:	4b0e      	ldr	r3, [pc, #56]	; (897b8 <Heat_Correction+0x90>)
   8977e:	801a      	strh	r2, [r3, #0]
	
	// test code to detect pattern
	int16_t sensordata;
	
	
	if(HeaterState == CL_HEATER_STATE_OFF  )
   89780:	4b0e      	ldr	r3, [pc, #56]	; (897bc <Heat_Correction+0x94>)
   89782:	781b      	ldrb	r3, [r3, #0]
   89784:	2b04      	cmp	r3, #4
   89786:	d102      	bne.n	8978e <Heat_Correction+0x66>
	{
		sv_cntrl_poweroffheater();
   89788:	4b0d      	ldr	r3, [pc, #52]	; (897c0 <Heat_Correction+0x98>)
   8978a:	4798      	blx	r3
		return;
   8978c:	e349      	b.n	89e22 <Heat_Correction+0x6fa>
	}
	if((HeaterState == CL_HEATER_STATE_INACTIVE) || (HeaterState == CL_HEATER_SUBSTATE_OFF))
   8978e:	4b0b      	ldr	r3, [pc, #44]	; (897bc <Heat_Correction+0x94>)
   89790:	781b      	ldrb	r3, [r3, #0]
   89792:	2b00      	cmp	r3, #0
   89794:	d003      	beq.n	8979e <Heat_Correction+0x76>
   89796:	4b09      	ldr	r3, [pc, #36]	; (897bc <Heat_Correction+0x94>)
   89798:	781b      	ldrb	r3, [r3, #0]
   8979a:	2b00      	cmp	r3, #0
   8979c:	d112      	bne.n	897c4 <Heat_Correction+0x9c>
	{
		return;
   8979e:	e340      	b.n	89e22 <Heat_Correction+0x6fa>
   897a0:	20071aec 	.word	0x20071aec
   897a4:	20071aee 	.word	0x20071aee
   897a8:	20071af0 	.word	0x20071af0
   897ac:	1b4e81b5 	.word	0x1b4e81b5
   897b0:	20071ae4 	.word	0x20071ae4
   897b4:	20071b00 	.word	0x20071b00
   897b8:	20071af2 	.word	0x20071af2
   897bc:	20071ad1 	.word	0x20071ad1
   897c0:	0009b3d5 	.word	0x0009b3d5
	}
		
    // Sunil: We are calling power on heater every 500msec, HeaterState is set by Cl_RinseController. Should be turned ON only once?
	if((HeaterState == CL_HEATER_STATE_ON) || (HeaterState == CL_HEATER_STATE_DIALYSER_PRIME_ON) || (HeaterState == CL_HEATER_STATE_DIALYSIS_ON))
   897c4:	4b95      	ldr	r3, [pc, #596]	; (89a1c <Heat_Correction+0x2f4>)
   897c6:	781b      	ldrb	r3, [r3, #0]
   897c8:	2b01      	cmp	r3, #1
   897ca:	d007      	beq.n	897dc <Heat_Correction+0xb4>
   897cc:	4b93      	ldr	r3, [pc, #588]	; (89a1c <Heat_Correction+0x2f4>)
   897ce:	781b      	ldrb	r3, [r3, #0]
   897d0:	2b02      	cmp	r3, #2
   897d2:	d003      	beq.n	897dc <Heat_Correction+0xb4>
   897d4:	4b91      	ldr	r3, [pc, #580]	; (89a1c <Heat_Correction+0x2f4>)
   897d6:	781b      	ldrb	r3, [r3, #0]
   897d8:	2b03      	cmp	r3, #3
   897da:	d107      	bne.n	897ec <Heat_Correction+0xc4>
	{
	 		sv_cntrl_poweronheater();
   897dc:	4b90      	ldr	r3, [pc, #576]	; (89a20 <Heat_Correction+0x2f8>)
   897de:	4798      	blx	r3
			sv_cntrl_incheater(avg_duty);
   897e0:	4b90      	ldr	r3, [pc, #576]	; (89a24 <Heat_Correction+0x2fc>)
   897e2:	881b      	ldrh	r3, [r3, #0]
   897e4:	b21b      	sxth	r3, r3
   897e6:	4618      	mov	r0, r3
   897e8:	4b8f      	ldr	r3, [pc, #572]	; (89a28 <Heat_Correction+0x300>)
   897ea:	4798      	blx	r3
		   
	}
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&sensordata);      // sensor data of T1
   897ec:	1dbb      	adds	r3, r7, #6
   897ee:	2012      	movs	r0, #18
   897f0:	4619      	mov	r1, r3
   897f2:	4b8e      	ldr	r3, [pc, #568]	; (89a2c <Heat_Correction+0x304>)
   897f4:	4798      	blx	r3
	{
		Tmp1Val = (Tmp1Val*9+ (float)sensordata/100)/10;
   897f6:	4b8e      	ldr	r3, [pc, #568]	; (89a30 <Heat_Correction+0x308>)
   897f8:	681a      	ldr	r2, [r3, #0]
   897fa:	4b8e      	ldr	r3, [pc, #568]	; (89a34 <Heat_Correction+0x30c>)
   897fc:	4610      	mov	r0, r2
   897fe:	498e      	ldr	r1, [pc, #568]	; (89a38 <Heat_Correction+0x310>)
   89800:	4798      	blx	r3
   89802:	4603      	mov	r3, r0
   89804:	461c      	mov	r4, r3
   89806:	88fb      	ldrh	r3, [r7, #6]
   89808:	b21a      	sxth	r2, r3
   8980a:	4b8c      	ldr	r3, [pc, #560]	; (89a3c <Heat_Correction+0x314>)
   8980c:	4610      	mov	r0, r2
   8980e:	4798      	blx	r3
   89810:	4602      	mov	r2, r0
   89812:	4b8b      	ldr	r3, [pc, #556]	; (89a40 <Heat_Correction+0x318>)
   89814:	4610      	mov	r0, r2
   89816:	498b      	ldr	r1, [pc, #556]	; (89a44 <Heat_Correction+0x31c>)
   89818:	4798      	blx	r3
   8981a:	4603      	mov	r3, r0
   8981c:	461a      	mov	r2, r3
   8981e:	4b8a      	ldr	r3, [pc, #552]	; (89a48 <Heat_Correction+0x320>)
   89820:	4620      	mov	r0, r4
   89822:	4611      	mov	r1, r2
   89824:	4798      	blx	r3
   89826:	4603      	mov	r3, r0
   89828:	461a      	mov	r2, r3
   8982a:	4b85      	ldr	r3, [pc, #532]	; (89a40 <Heat_Correction+0x318>)
   8982c:	4610      	mov	r0, r2
   8982e:	4987      	ldr	r1, [pc, #540]	; (89a4c <Heat_Correction+0x324>)
   89830:	4798      	blx	r3
   89832:	4603      	mov	r3, r0
   89834:	461a      	mov	r2, r3
   89836:	4b7e      	ldr	r3, [pc, #504]	; (89a30 <Heat_Correction+0x308>)
   89838:	601a      	str	r2, [r3, #0]
	}
	
	if (!(count_500ms %40))    // 40 28072017
   8983a:	4b85      	ldr	r3, [pc, #532]	; (89a50 <Heat_Correction+0x328>)
   8983c:	881a      	ldrh	r2, [r3, #0]
   8983e:	4b85      	ldr	r3, [pc, #532]	; (89a54 <Heat_Correction+0x32c>)
   89840:	fba3 1302 	umull	r1, r3, r3, r2
   89844:	0959      	lsrs	r1, r3, #5
   89846:	460b      	mov	r3, r1
   89848:	009b      	lsls	r3, r3, #2
   8984a:	440b      	add	r3, r1
   8984c:	00db      	lsls	r3, r3, #3
   8984e:	1ad3      	subs	r3, r2, r3
   89850:	b29b      	uxth	r3, r3
   89852:	2b00      	cmp	r3, #0
   89854:	d103      	bne.n	8985e <Heat_Correction+0x136>
		Tmp2Val_prev = Tmp2Val;  //For calculating if TS2 stable, read once in every 2 sec
   89856:	4b80      	ldr	r3, [pc, #512]	; (89a58 <Heat_Correction+0x330>)
   89858:	681b      	ldr	r3, [r3, #0]
   8985a:	4a80      	ldr	r2, [pc, #512]	; (89a5c <Heat_Correction+0x334>)
   8985c:	6013      	str	r3, [r2, #0]
					                                             
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);     // sensor data of T2
   8985e:	1dbb      	adds	r3, r7, #6
   89860:	2013      	movs	r0, #19
   89862:	4619      	mov	r1, r3
   89864:	4b71      	ldr	r3, [pc, #452]	; (89a2c <Heat_Correction+0x304>)
   89866:	4798      	blx	r3
	{
		Tmp2Val = (Tmp2Val*9+ (float)sensordata/100)/10;
   89868:	4b7b      	ldr	r3, [pc, #492]	; (89a58 <Heat_Correction+0x330>)
   8986a:	681a      	ldr	r2, [r3, #0]
   8986c:	4b71      	ldr	r3, [pc, #452]	; (89a34 <Heat_Correction+0x30c>)
   8986e:	4610      	mov	r0, r2
   89870:	4971      	ldr	r1, [pc, #452]	; (89a38 <Heat_Correction+0x310>)
   89872:	4798      	blx	r3
   89874:	4603      	mov	r3, r0
   89876:	461c      	mov	r4, r3
   89878:	88fb      	ldrh	r3, [r7, #6]
   8987a:	b21a      	sxth	r2, r3
   8987c:	4b6f      	ldr	r3, [pc, #444]	; (89a3c <Heat_Correction+0x314>)
   8987e:	4610      	mov	r0, r2
   89880:	4798      	blx	r3
   89882:	4602      	mov	r2, r0
   89884:	4b6e      	ldr	r3, [pc, #440]	; (89a40 <Heat_Correction+0x318>)
   89886:	4610      	mov	r0, r2
   89888:	496e      	ldr	r1, [pc, #440]	; (89a44 <Heat_Correction+0x31c>)
   8988a:	4798      	blx	r3
   8988c:	4603      	mov	r3, r0
   8988e:	461a      	mov	r2, r3
   89890:	4b6d      	ldr	r3, [pc, #436]	; (89a48 <Heat_Correction+0x320>)
   89892:	4620      	mov	r0, r4
   89894:	4611      	mov	r1, r2
   89896:	4798      	blx	r3
   89898:	4603      	mov	r3, r0
   8989a:	461a      	mov	r2, r3
   8989c:	4b68      	ldr	r3, [pc, #416]	; (89a40 <Heat_Correction+0x318>)
   8989e:	4610      	mov	r0, r2
   898a0:	496a      	ldr	r1, [pc, #424]	; (89a4c <Heat_Correction+0x324>)
   898a2:	4798      	blx	r3
   898a4:	4603      	mov	r3, r0
   898a6:	461a      	mov	r2, r3
   898a8:	4b6b      	ldr	r3, [pc, #428]	; (89a58 <Heat_Correction+0x330>)
   898aa:	601a      	str	r2, [r3, #0]
	}
			 	
	if (!(count_500ms %20))
   898ac:	4b68      	ldr	r3, [pc, #416]	; (89a50 <Heat_Correction+0x328>)
   898ae:	881a      	ldrh	r2, [r3, #0]
   898b0:	4b68      	ldr	r3, [pc, #416]	; (89a54 <Heat_Correction+0x32c>)
   898b2:	fba3 1302 	umull	r1, r3, r3, r2
   898b6:	0919      	lsrs	r1, r3, #4
   898b8:	460b      	mov	r3, r1
   898ba:	009b      	lsls	r3, r3, #2
   898bc:	440b      	add	r3, r1
   898be:	009b      	lsls	r3, r3, #2
   898c0:	1ad3      	subs	r3, r2, r3
   898c2:	b29b      	uxth	r3, r3
   898c4:	2b00      	cmp	r3, #0
   898c6:	d103      	bne.n	898d0 <Heat_Correction+0x1a8>
	{
		Tmp3Val_prev = Tmp3Val;		//Sunil: Used for checking TS3 stability
   898c8:	4b65      	ldr	r3, [pc, #404]	; (89a60 <Heat_Correction+0x338>)
   898ca:	681b      	ldr	r3, [r3, #0]
   898cc:	4a65      	ldr	r2, [pc, #404]	; (89a64 <Heat_Correction+0x33c>)
   898ce:	6013      	str	r3, [r2, #0]
	}				 
				 
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);                 // sensor data of T3
   898d0:	1dbb      	adds	r3, r7, #6
   898d2:	2014      	movs	r0, #20
   898d4:	4619      	mov	r1, r3
   898d6:	4b55      	ldr	r3, [pc, #340]	; (89a2c <Heat_Correction+0x304>)
   898d8:	4798      	blx	r3
	{
		Tmp3Val = (Tmp3Val*9+ (float)sensordata/100)/10;
   898da:	4b61      	ldr	r3, [pc, #388]	; (89a60 <Heat_Correction+0x338>)
   898dc:	681a      	ldr	r2, [r3, #0]
   898de:	4b55      	ldr	r3, [pc, #340]	; (89a34 <Heat_Correction+0x30c>)
   898e0:	4610      	mov	r0, r2
   898e2:	4955      	ldr	r1, [pc, #340]	; (89a38 <Heat_Correction+0x310>)
   898e4:	4798      	blx	r3
   898e6:	4603      	mov	r3, r0
   898e8:	461c      	mov	r4, r3
   898ea:	88fb      	ldrh	r3, [r7, #6]
   898ec:	b21a      	sxth	r2, r3
   898ee:	4b53      	ldr	r3, [pc, #332]	; (89a3c <Heat_Correction+0x314>)
   898f0:	4610      	mov	r0, r2
   898f2:	4798      	blx	r3
   898f4:	4602      	mov	r2, r0
   898f6:	4b52      	ldr	r3, [pc, #328]	; (89a40 <Heat_Correction+0x318>)
   898f8:	4610      	mov	r0, r2
   898fa:	4952      	ldr	r1, [pc, #328]	; (89a44 <Heat_Correction+0x31c>)
   898fc:	4798      	blx	r3
   898fe:	4603      	mov	r3, r0
   89900:	461a      	mov	r2, r3
   89902:	4b51      	ldr	r3, [pc, #324]	; (89a48 <Heat_Correction+0x320>)
   89904:	4620      	mov	r0, r4
   89906:	4611      	mov	r1, r2
   89908:	4798      	blx	r3
   8990a:	4603      	mov	r3, r0
   8990c:	461a      	mov	r2, r3
   8990e:	4b4c      	ldr	r3, [pc, #304]	; (89a40 <Heat_Correction+0x318>)
   89910:	4610      	mov	r0, r2
   89912:	494e      	ldr	r1, [pc, #312]	; (89a4c <Heat_Correction+0x324>)
   89914:	4798      	blx	r3
   89916:	4603      	mov	r3, r0
   89918:	461a      	mov	r2, r3
   8991a:	4b51      	ldr	r3, [pc, #324]	; (89a60 <Heat_Correction+0x338>)
   8991c:	601a      	str	r2, [r3, #0]
	}
	
	DataDisplay();			 
   8991e:	4b52      	ldr	r3, [pc, #328]	; (89a68 <Heat_Correction+0x340>)
   89920:	4798      	blx	r3
	 	
	Calculate_slope();                     // calculate slope for TS2 curve to be used in Duty correction
   89922:	4b52      	ldr	r3, [pc, #328]	; (89a6c <Heat_Correction+0x344>)
   89924:	4798      	blx	r3
	Calculate_direction();					// Calculate if temperature is raising or falling based on T2
   89926:	4b52      	ldr	r3, [pc, #328]	; (89a70 <Heat_Correction+0x348>)
   89928:	4798      	blx	r3
	  37 +/- 2 degrees of 39 deg.
	- T2 slope is used for calculating the steps.Slope = (T2(Sampled at 30 secs) - Current T2 )/ (current time - Time at sampling).
	  Higher the slope, lesser the duty count and vice versa. The duty cycle value is decreased if Temperature is increasing and 
	  increased if temperature is decreasing.
	*/
	TS2_Stable = Check_4_TS2_Stable();
   8992a:	4b52      	ldr	r3, [pc, #328]	; (89a74 <Heat_Correction+0x34c>)
   8992c:	4798      	blx	r3
   8992e:	4603      	mov	r3, r0
   89930:	461a      	mov	r2, r3
   89932:	4b51      	ldr	r3, [pc, #324]	; (89a78 <Heat_Correction+0x350>)
   89934:	701a      	strb	r2, [r3, #0]
	
	if (SYSTEM_FLOW == 300)
   89936:	4b51      	ldr	r3, [pc, #324]	; (89a7c <Heat_Correction+0x354>)
   89938:	681b      	ldr	r3, [r3, #0]
   8993a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   8993e:	d137      	bne.n	899b0 <Heat_Correction+0x288>
	{
		if ((Tmp2Val >= (Prescribed_T2+0.5))  && (Tmp3Val <= 32))      // Restricting forced coarse correction only at the beginning and any time TS3 falls below 32
   89940:	4b45      	ldr	r3, [pc, #276]	; (89a58 <Heat_Correction+0x330>)
   89942:	681a      	ldr	r2, [r3, #0]
   89944:	4b4e      	ldr	r3, [pc, #312]	; (89a80 <Heat_Correction+0x358>)
   89946:	4610      	mov	r0, r2
   89948:	4798      	blx	r3
   8994a:	4680      	mov	r8, r0
   8994c:	4689      	mov	r9, r1
   8994e:	4b4d      	ldr	r3, [pc, #308]	; (89a84 <Heat_Correction+0x35c>)
   89950:	681a      	ldr	r2, [r3, #0]
   89952:	4b4b      	ldr	r3, [pc, #300]	; (89a80 <Heat_Correction+0x358>)
   89954:	4610      	mov	r0, r2
   89956:	4798      	blx	r3
   89958:	4602      	mov	r2, r0
   8995a:	460b      	mov	r3, r1
   8995c:	4c4a      	ldr	r4, [pc, #296]	; (89a88 <Heat_Correction+0x360>)
   8995e:	4610      	mov	r0, r2
   89960:	4619      	mov	r1, r3
   89962:	f04f 0200 	mov.w	r2, #0
   89966:	4b49      	ldr	r3, [pc, #292]	; (89a8c <Heat_Correction+0x364>)
   89968:	47a0      	blx	r4
   8996a:	4602      	mov	r2, r0
   8996c:	460b      	mov	r3, r1
   8996e:	4c48      	ldr	r4, [pc, #288]	; (89a90 <Heat_Correction+0x368>)
   89970:	4640      	mov	r0, r8
   89972:	4649      	mov	r1, r9
   89974:	47a0      	blx	r4
   89976:	4603      	mov	r3, r0
   89978:	2b00      	cmp	r3, #0
   8997a:	d019      	beq.n	899b0 <Heat_Correction+0x288>
   8997c:	4b38      	ldr	r3, [pc, #224]	; (89a60 <Heat_Correction+0x338>)
   8997e:	681a      	ldr	r2, [r3, #0]
   89980:	4b44      	ldr	r3, [pc, #272]	; (89a94 <Heat_Correction+0x36c>)
   89982:	4610      	mov	r0, r2
   89984:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
   89988:	4798      	blx	r3
   8998a:	4603      	mov	r3, r0
   8998c:	2b00      	cmp	r3, #0
   8998e:	d00f      	beq.n	899b0 <Heat_Correction+0x288>
		{
			if (!(count_500ms % 20))                  // force coarse correction if TS2 greater 39 and continues to remain for more than 1 sec
   89990:	4b2f      	ldr	r3, [pc, #188]	; (89a50 <Heat_Correction+0x328>)
   89992:	881a      	ldrh	r2, [r3, #0]
   89994:	4b2f      	ldr	r3, [pc, #188]	; (89a54 <Heat_Correction+0x32c>)
   89996:	fba3 1302 	umull	r1, r3, r3, r2
   8999a:	0919      	lsrs	r1, r3, #4
   8999c:	460b      	mov	r3, r1
   8999e:	009b      	lsls	r3, r3, #2
   899a0:	440b      	add	r3, r1
   899a2:	009b      	lsls	r3, r3, #2
   899a4:	1ad3      	subs	r3, r2, r3
   899a6:	b29b      	uxth	r3, r3
   899a8:	2b00      	cmp	r3, #0
   899aa:	d101      	bne.n	899b0 <Heat_Correction+0x288>
			{
				Coarse_DutyCorrection();
   899ac:	4b3a      	ldr	r3, [pc, #232]	; (89a98 <Heat_Correction+0x370>)
   899ae:	4798      	blx	r3
			}
			
		}
	}
	if (SYSTEM_FLOW == 500)
   899b0:	4b32      	ldr	r3, [pc, #200]	; (89a7c <Heat_Correction+0x354>)
   899b2:	681b      	ldr	r3, [r3, #0]
   899b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   899b8:	d179      	bne.n	89aae <Heat_Correction+0x386>
	{
		if ((Tmp2Val >= (Prescribed_T2+0.5))  && (Tmp3Val <= 32))      // Restricting forced coarse correction only at the beginning and any time TS3 falls below 32
   899ba:	4b27      	ldr	r3, [pc, #156]	; (89a58 <Heat_Correction+0x330>)
   899bc:	681a      	ldr	r2, [r3, #0]
   899be:	4b30      	ldr	r3, [pc, #192]	; (89a80 <Heat_Correction+0x358>)
   899c0:	4610      	mov	r0, r2
   899c2:	4798      	blx	r3
   899c4:	4680      	mov	r8, r0
   899c6:	4689      	mov	r9, r1
   899c8:	4b2e      	ldr	r3, [pc, #184]	; (89a84 <Heat_Correction+0x35c>)
   899ca:	681a      	ldr	r2, [r3, #0]
   899cc:	4b2c      	ldr	r3, [pc, #176]	; (89a80 <Heat_Correction+0x358>)
   899ce:	4610      	mov	r0, r2
   899d0:	4798      	blx	r3
   899d2:	4602      	mov	r2, r0
   899d4:	460b      	mov	r3, r1
   899d6:	4c2c      	ldr	r4, [pc, #176]	; (89a88 <Heat_Correction+0x360>)
   899d8:	4610      	mov	r0, r2
   899da:	4619      	mov	r1, r3
   899dc:	f04f 0200 	mov.w	r2, #0
   899e0:	4b2a      	ldr	r3, [pc, #168]	; (89a8c <Heat_Correction+0x364>)
   899e2:	47a0      	blx	r4
   899e4:	4602      	mov	r2, r0
   899e6:	460b      	mov	r3, r1
   899e8:	4c29      	ldr	r4, [pc, #164]	; (89a90 <Heat_Correction+0x368>)
   899ea:	4640      	mov	r0, r8
   899ec:	4649      	mov	r1, r9
   899ee:	47a0      	blx	r4
   899f0:	4603      	mov	r3, r0
   899f2:	2b00      	cmp	r3, #0
   899f4:	d05b      	beq.n	89aae <Heat_Correction+0x386>
   899f6:	4b1a      	ldr	r3, [pc, #104]	; (89a60 <Heat_Correction+0x338>)
   899f8:	681a      	ldr	r2, [r3, #0]
   899fa:	4b26      	ldr	r3, [pc, #152]	; (89a94 <Heat_Correction+0x36c>)
   899fc:	4610      	mov	r0, r2
   899fe:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
   89a02:	4798      	blx	r3
   89a04:	4603      	mov	r3, r0
   89a06:	2b00      	cmp	r3, #0
   89a08:	d051      	beq.n	89aae <Heat_Correction+0x386>
		{
			if (!(count_500ms % 20))                  // force coarse correction if TS2 greater 39 and continues to remain for more than 1 sec
   89a0a:	4b11      	ldr	r3, [pc, #68]	; (89a50 <Heat_Correction+0x328>)
   89a0c:	881a      	ldrh	r2, [r3, #0]
   89a0e:	4b11      	ldr	r3, [pc, #68]	; (89a54 <Heat_Correction+0x32c>)
   89a10:	fba3 1302 	umull	r1, r3, r3, r2
   89a14:	0919      	lsrs	r1, r3, #4
   89a16:	460b      	mov	r3, r1
   89a18:	e040      	b.n	89a9c <Heat_Correction+0x374>
   89a1a:	bf00      	nop
   89a1c:	20071ad1 	.word	0x20071ad1
   89a20:	0009b3c1 	.word	0x0009b3c1
   89a24:	20071ad4 	.word	0x20071ad4
   89a28:	0009b4c9 	.word	0x0009b4c9
   89a2c:	0008fd69 	.word	0x0008fd69
   89a30:	20071ae0 	.word	0x20071ae0
   89a34:	000a8305 	.word	0x000a8305
   89a38:	41100000 	.word	0x41100000
   89a3c:	000a825d 	.word	0x000a825d
   89a40:	000a846d 	.word	0x000a846d
   89a44:	42c80000 	.word	0x42c80000
   89a48:	000a80f5 	.word	0x000a80f5
   89a4c:	41200000 	.word	0x41200000
   89a50:	20071aec 	.word	0x20071aec
   89a54:	cccccccd 	.word	0xcccccccd
   89a58:	20071ae4 	.word	0x20071ae4
   89a5c:	20071afc 	.word	0x20071afc
   89a60:	20071ae8 	.word	0x20071ae8
   89a64:	20072338 	.word	0x20072338
   89a68:	0008b57d 	.word	0x0008b57d
   89a6c:	0008a0c5 	.word	0x0008a0c5
   89a70:	0008a12d 	.word	0x0008a12d
   89a74:	00089e71 	.word	0x00089e71
   89a78:	2007233c 	.word	0x2007233c
   89a7c:	20070704 	.word	0x20070704
   89a80:	000a79dd 	.word	0x000a79dd
   89a84:	20072348 	.word	0x20072348
   89a88:	000a7721 	.word	0x000a7721
   89a8c:	3fe00000 	.word	0x3fe00000
   89a90:	000a7f91 	.word	0x000a7f91
   89a94:	000a8655 	.word	0x000a8655
   89a98:	0008a1d1 	.word	0x0008a1d1
   89a9c:	009b      	lsls	r3, r3, #2
   89a9e:	440b      	add	r3, r1
   89aa0:	009b      	lsls	r3, r3, #2
   89aa2:	1ad3      	subs	r3, r2, r3
   89aa4:	b29b      	uxth	r3, r3
   89aa6:	2b00      	cmp	r3, #0
   89aa8:	d101      	bne.n	89aae <Heat_Correction+0x386>
			{
				Coarse_DutyCorrection();
   89aaa:	4b91      	ldr	r3, [pc, #580]	; (89cf0 <Heat_Correction+0x5c8>)
   89aac:	4798      	blx	r3
			}
			
		}
	}
	if (SYSTEM_FLOW == 800)
   89aae:	4b91      	ldr	r3, [pc, #580]	; (89cf4 <Heat_Correction+0x5cc>)
   89ab0:	681b      	ldr	r3, [r3, #0]
   89ab2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   89ab6:	d137      	bne.n	89b28 <Heat_Correction+0x400>
	{
		if ((Tmp2Val >= (Prescribed_T2+0.5))  && (Tmp3Val <= 32))      // Restricting forced coarse correction only at the beginning and any time TS3 falls below 32
   89ab8:	4b8f      	ldr	r3, [pc, #572]	; (89cf8 <Heat_Correction+0x5d0>)
   89aba:	681a      	ldr	r2, [r3, #0]
   89abc:	4b8f      	ldr	r3, [pc, #572]	; (89cfc <Heat_Correction+0x5d4>)
   89abe:	4610      	mov	r0, r2
   89ac0:	4798      	blx	r3
   89ac2:	4680      	mov	r8, r0
   89ac4:	4689      	mov	r9, r1
   89ac6:	4b8e      	ldr	r3, [pc, #568]	; (89d00 <Heat_Correction+0x5d8>)
   89ac8:	681a      	ldr	r2, [r3, #0]
   89aca:	4b8c      	ldr	r3, [pc, #560]	; (89cfc <Heat_Correction+0x5d4>)
   89acc:	4610      	mov	r0, r2
   89ace:	4798      	blx	r3
   89ad0:	4602      	mov	r2, r0
   89ad2:	460b      	mov	r3, r1
   89ad4:	4c8b      	ldr	r4, [pc, #556]	; (89d04 <Heat_Correction+0x5dc>)
   89ad6:	4610      	mov	r0, r2
   89ad8:	4619      	mov	r1, r3
   89ada:	f04f 0200 	mov.w	r2, #0
   89ade:	4b8a      	ldr	r3, [pc, #552]	; (89d08 <Heat_Correction+0x5e0>)
   89ae0:	47a0      	blx	r4
   89ae2:	4602      	mov	r2, r0
   89ae4:	460b      	mov	r3, r1
   89ae6:	4c89      	ldr	r4, [pc, #548]	; (89d0c <Heat_Correction+0x5e4>)
   89ae8:	4640      	mov	r0, r8
   89aea:	4649      	mov	r1, r9
   89aec:	47a0      	blx	r4
   89aee:	4603      	mov	r3, r0
   89af0:	2b00      	cmp	r3, #0
   89af2:	d019      	beq.n	89b28 <Heat_Correction+0x400>
   89af4:	4b86      	ldr	r3, [pc, #536]	; (89d10 <Heat_Correction+0x5e8>)
   89af6:	681a      	ldr	r2, [r3, #0]
   89af8:	4b86      	ldr	r3, [pc, #536]	; (89d14 <Heat_Correction+0x5ec>)
   89afa:	4610      	mov	r0, r2
   89afc:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
   89b00:	4798      	blx	r3
   89b02:	4603      	mov	r3, r0
   89b04:	2b00      	cmp	r3, #0
   89b06:	d00f      	beq.n	89b28 <Heat_Correction+0x400>
		{
			if (!(count_500ms % 20))                  // force coarse correction if TS2 greater 39 and continues to remain for more than 1 sec
   89b08:	4b83      	ldr	r3, [pc, #524]	; (89d18 <Heat_Correction+0x5f0>)
   89b0a:	881a      	ldrh	r2, [r3, #0]
   89b0c:	4b83      	ldr	r3, [pc, #524]	; (89d1c <Heat_Correction+0x5f4>)
   89b0e:	fba3 1302 	umull	r1, r3, r3, r2
   89b12:	0919      	lsrs	r1, r3, #4
   89b14:	460b      	mov	r3, r1
   89b16:	009b      	lsls	r3, r3, #2
   89b18:	440b      	add	r3, r1
   89b1a:	009b      	lsls	r3, r3, #2
   89b1c:	1ad3      	subs	r3, r2, r3
   89b1e:	b29b      	uxth	r3, r3
   89b20:	2b00      	cmp	r3, #0
   89b22:	d101      	bne.n	89b28 <Heat_Correction+0x400>
			{
				Coarse_DutyCorrection();
   89b24:	4b72      	ldr	r3, [pc, #456]	; (89cf0 <Heat_Correction+0x5c8>)
   89b26:	4798      	blx	r3
			
		}
	}
	
	
	if (SYSTEM_FLOW == 300)
   89b28:	4b72      	ldr	r3, [pc, #456]	; (89cf4 <Heat_Correction+0x5cc>)
   89b2a:	681b      	ldr	r3, [r3, #0]
   89b2c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   89b30:	d169      	bne.n	89c06 <Heat_Correction+0x4de>
	{
	  if(TS2_Stable)
   89b32:	4b7b      	ldr	r3, [pc, #492]	; (89d20 <Heat_Correction+0x5f8>)
   89b34:	781b      	ldrb	r3, [r3, #0]
   89b36:	2b00      	cmp	r3, #0
   89b38:	d065      	beq.n	89c06 <Heat_Correction+0x4de>
	  {
		//Now TS2 is not rapidly increasing and is at certain Temperature +/- 2 deg. 
		//Start tuning T2 to be at 37 +/- 2 deg.
		if ( ((Tmp2Val - Prescribed_T2) > 0.5) || ((Prescribed_T2 - Tmp2Val) > 2) )
   89b3a:	4b6f      	ldr	r3, [pc, #444]	; (89cf8 <Heat_Correction+0x5d0>)
   89b3c:	6819      	ldr	r1, [r3, #0]
   89b3e:	4b70      	ldr	r3, [pc, #448]	; (89d00 <Heat_Correction+0x5d8>)
   89b40:	681a      	ldr	r2, [r3, #0]
   89b42:	4b78      	ldr	r3, [pc, #480]	; (89d24 <Heat_Correction+0x5fc>)
   89b44:	4608      	mov	r0, r1
   89b46:	4611      	mov	r1, r2
   89b48:	4798      	blx	r3
   89b4a:	4603      	mov	r3, r0
   89b4c:	461a      	mov	r2, r3
   89b4e:	4b76      	ldr	r3, [pc, #472]	; (89d28 <Heat_Correction+0x600>)
   89b50:	4610      	mov	r0, r2
   89b52:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   89b56:	4798      	blx	r3
   89b58:	4603      	mov	r3, r0
   89b5a:	2b00      	cmp	r3, #0
   89b5c:	d111      	bne.n	89b82 <Heat_Correction+0x45a>
   89b5e:	4b68      	ldr	r3, [pc, #416]	; (89d00 <Heat_Correction+0x5d8>)
   89b60:	6819      	ldr	r1, [r3, #0]
   89b62:	4b65      	ldr	r3, [pc, #404]	; (89cf8 <Heat_Correction+0x5d0>)
   89b64:	681a      	ldr	r2, [r3, #0]
   89b66:	4b6f      	ldr	r3, [pc, #444]	; (89d24 <Heat_Correction+0x5fc>)
   89b68:	4608      	mov	r0, r1
   89b6a:	4611      	mov	r1, r2
   89b6c:	4798      	blx	r3
   89b6e:	4603      	mov	r3, r0
   89b70:	461a      	mov	r2, r3
   89b72:	4b6d      	ldr	r3, [pc, #436]	; (89d28 <Heat_Correction+0x600>)
   89b74:	4610      	mov	r0, r2
   89b76:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   89b7a:	4798      	blx	r3
   89b7c:	4603      	mov	r3, r0
   89b7e:	2b00      	cmp	r3, #0
   89b80:	d002      	beq.n	89b88 <Heat_Correction+0x460>
		{
			Coarse_DutyCorrection(); 
   89b82:	4b5b      	ldr	r3, [pc, #364]	; (89cf0 <Heat_Correction+0x5c8>)
   89b84:	4798      	blx	r3
   89b86:	e03e      	b.n	89c06 <Heat_Correction+0x4de>
		}
		else 
		{
			//T2 is stable and within 37 +/- 2 deg, check for T3 stability and apply fine correction
			TS3_Stable = Check_4_TS3_Stable();
   89b88:	4b68      	ldr	r3, [pc, #416]	; (89d2c <Heat_Correction+0x604>)
   89b8a:	4798      	blx	r3
   89b8c:	4603      	mov	r3, r0
   89b8e:	461a      	mov	r2, r3
   89b90:	4b67      	ldr	r3, [pc, #412]	; (89d30 <Heat_Correction+0x608>)
   89b92:	701a      	strb	r2, [r3, #0]
			if(TS3_Stable)
   89b94:	4b66      	ldr	r3, [pc, #408]	; (89d30 <Heat_Correction+0x608>)
   89b96:	781b      	ldrb	r3, [r3, #0]
   89b98:	2b00      	cmp	r3, #0
   89b9a:	d034      	beq.n	89c06 <Heat_Correction+0x4de>
			{
			   if ( ((Tmp3Val - Prescribed_T3) > 0.1) || ((Prescribed_T3 - Tmp3Val) > 0.1) )
   89b9c:	4b5c      	ldr	r3, [pc, #368]	; (89d10 <Heat_Correction+0x5e8>)
   89b9e:	6819      	ldr	r1, [r3, #0]
   89ba0:	4b64      	ldr	r3, [pc, #400]	; (89d34 <Heat_Correction+0x60c>)
   89ba2:	681a      	ldr	r2, [r3, #0]
   89ba4:	4b5f      	ldr	r3, [pc, #380]	; (89d24 <Heat_Correction+0x5fc>)
   89ba6:	4608      	mov	r0, r1
   89ba8:	4611      	mov	r1, r2
   89baa:	4798      	blx	r3
   89bac:	4603      	mov	r3, r0
   89bae:	461a      	mov	r2, r3
   89bb0:	4b52      	ldr	r3, [pc, #328]	; (89cfc <Heat_Correction+0x5d4>)
   89bb2:	4610      	mov	r0, r2
   89bb4:	4798      	blx	r3
   89bb6:	4602      	mov	r2, r0
   89bb8:	460b      	mov	r3, r1
   89bba:	4c5f      	ldr	r4, [pc, #380]	; (89d38 <Heat_Correction+0x610>)
   89bbc:	4610      	mov	r0, r2
   89bbe:	4619      	mov	r1, r3
   89bc0:	a349      	add	r3, pc, #292	; (adr r3, 89ce8 <Heat_Correction+0x5c0>)
   89bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   89bc6:	47a0      	blx	r4
   89bc8:	4603      	mov	r3, r0
   89bca:	2b00      	cmp	r3, #0
   89bcc:	d119      	bne.n	89c02 <Heat_Correction+0x4da>
   89bce:	4b59      	ldr	r3, [pc, #356]	; (89d34 <Heat_Correction+0x60c>)
   89bd0:	6819      	ldr	r1, [r3, #0]
   89bd2:	4b4f      	ldr	r3, [pc, #316]	; (89d10 <Heat_Correction+0x5e8>)
   89bd4:	681a      	ldr	r2, [r3, #0]
   89bd6:	4b53      	ldr	r3, [pc, #332]	; (89d24 <Heat_Correction+0x5fc>)
   89bd8:	4608      	mov	r0, r1
   89bda:	4611      	mov	r1, r2
   89bdc:	4798      	blx	r3
   89bde:	4603      	mov	r3, r0
   89be0:	461a      	mov	r2, r3
   89be2:	4b46      	ldr	r3, [pc, #280]	; (89cfc <Heat_Correction+0x5d4>)
   89be4:	4610      	mov	r0, r2
   89be6:	4798      	blx	r3
   89be8:	4602      	mov	r2, r0
   89bea:	460b      	mov	r3, r1
   89bec:	4c52      	ldr	r4, [pc, #328]	; (89d38 <Heat_Correction+0x610>)
   89bee:	4610      	mov	r0, r2
   89bf0:	4619      	mov	r1, r3
   89bf2:	a33d      	add	r3, pc, #244	; (adr r3, 89ce8 <Heat_Correction+0x5c0>)
   89bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
   89bf8:	47a0      	blx	r4
   89bfa:	4603      	mov	r3, r0
   89bfc:	2b00      	cmp	r3, #0
   89bfe:	d100      	bne.n	89c02 <Heat_Correction+0x4da>
   89c00:	e001      	b.n	89c06 <Heat_Correction+0x4de>
			      Fine_DutyCorrection();
   89c02:	4b4e      	ldr	r3, [pc, #312]	; (89d3c <Heat_Correction+0x614>)
   89c04:	4798      	blx	r3
	  // TS2 not stable, wait for some more time
	  // Same avg_duty is being applied, no change till stability not achieved
	 }	
	}
	
	if (SYSTEM_FLOW == 500)
   89c06:	4b3b      	ldr	r3, [pc, #236]	; (89cf4 <Heat_Correction+0x5cc>)
   89c08:	681b      	ldr	r3, [r3, #0]
   89c0a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   89c0e:	f040 8099 	bne.w	89d44 <Heat_Correction+0x61c>
	{
	  if(TS2_Stable)
   89c12:	4b43      	ldr	r3, [pc, #268]	; (89d20 <Heat_Correction+0x5f8>)
   89c14:	781b      	ldrb	r3, [r3, #0]
   89c16:	2b00      	cmp	r3, #0
   89c18:	f000 8094 	beq.w	89d44 <Heat_Correction+0x61c>
	  {
		//Now TS2 is not rapidly increasing and is at certain Temperature +/- 2 deg. 
		//Start tuning T2 to be at 37 +/- 2 deg.
		if ( ((Tmp2Val - Prescribed_T2) > 1) || ((Prescribed_T2 - Tmp2Val) > 1) )
   89c1c:	4b36      	ldr	r3, [pc, #216]	; (89cf8 <Heat_Correction+0x5d0>)
   89c1e:	6819      	ldr	r1, [r3, #0]
   89c20:	4b37      	ldr	r3, [pc, #220]	; (89d00 <Heat_Correction+0x5d8>)
   89c22:	681a      	ldr	r2, [r3, #0]
   89c24:	4b3f      	ldr	r3, [pc, #252]	; (89d24 <Heat_Correction+0x5fc>)
   89c26:	4608      	mov	r0, r1
   89c28:	4611      	mov	r1, r2
   89c2a:	4798      	blx	r3
   89c2c:	4603      	mov	r3, r0
   89c2e:	461a      	mov	r2, r3
   89c30:	4b3d      	ldr	r3, [pc, #244]	; (89d28 <Heat_Correction+0x600>)
   89c32:	4610      	mov	r0, r2
   89c34:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   89c38:	4798      	blx	r3
   89c3a:	4603      	mov	r3, r0
   89c3c:	2b00      	cmp	r3, #0
   89c3e:	d111      	bne.n	89c64 <Heat_Correction+0x53c>
   89c40:	4b2f      	ldr	r3, [pc, #188]	; (89d00 <Heat_Correction+0x5d8>)
   89c42:	6819      	ldr	r1, [r3, #0]
   89c44:	4b2c      	ldr	r3, [pc, #176]	; (89cf8 <Heat_Correction+0x5d0>)
   89c46:	681a      	ldr	r2, [r3, #0]
   89c48:	4b36      	ldr	r3, [pc, #216]	; (89d24 <Heat_Correction+0x5fc>)
   89c4a:	4608      	mov	r0, r1
   89c4c:	4611      	mov	r1, r2
   89c4e:	4798      	blx	r3
   89c50:	4603      	mov	r3, r0
   89c52:	461a      	mov	r2, r3
   89c54:	4b34      	ldr	r3, [pc, #208]	; (89d28 <Heat_Correction+0x600>)
   89c56:	4610      	mov	r0, r2
   89c58:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   89c5c:	4798      	blx	r3
   89c5e:	4603      	mov	r3, r0
   89c60:	2b00      	cmp	r3, #0
   89c62:	d002      	beq.n	89c6a <Heat_Correction+0x542>
		{
			Coarse_DutyCorrection(); 
   89c64:	4b22      	ldr	r3, [pc, #136]	; (89cf0 <Heat_Correction+0x5c8>)
   89c66:	4798      	blx	r3
   89c68:	e06c      	b.n	89d44 <Heat_Correction+0x61c>
		}
		else 
		{
			//T2 is stable and within 37 +/- 2 deg, check for T3 stability and apply fine correction
			TS3_Stable = Check_4_TS3_Stable();
   89c6a:	4b30      	ldr	r3, [pc, #192]	; (89d2c <Heat_Correction+0x604>)
   89c6c:	4798      	blx	r3
   89c6e:	4603      	mov	r3, r0
   89c70:	461a      	mov	r2, r3
   89c72:	4b2f      	ldr	r3, [pc, #188]	; (89d30 <Heat_Correction+0x608>)
   89c74:	701a      	strb	r2, [r3, #0]
			if(TS3_Stable)
   89c76:	4b2e      	ldr	r3, [pc, #184]	; (89d30 <Heat_Correction+0x608>)
   89c78:	781b      	ldrb	r3, [r3, #0]
   89c7a:	2b00      	cmp	r3, #0
   89c7c:	d062      	beq.n	89d44 <Heat_Correction+0x61c>
			{
			   if ( ((Tmp3Val - Prescribed_T3) > 0.1) || ((Prescribed_T3 - Tmp3Val) > 0.1) )
   89c7e:	4b24      	ldr	r3, [pc, #144]	; (89d10 <Heat_Correction+0x5e8>)
   89c80:	6819      	ldr	r1, [r3, #0]
   89c82:	4b2c      	ldr	r3, [pc, #176]	; (89d34 <Heat_Correction+0x60c>)
   89c84:	681a      	ldr	r2, [r3, #0]
   89c86:	4b27      	ldr	r3, [pc, #156]	; (89d24 <Heat_Correction+0x5fc>)
   89c88:	4608      	mov	r0, r1
   89c8a:	4611      	mov	r1, r2
   89c8c:	4798      	blx	r3
   89c8e:	4603      	mov	r3, r0
   89c90:	461a      	mov	r2, r3
   89c92:	4b1a      	ldr	r3, [pc, #104]	; (89cfc <Heat_Correction+0x5d4>)
   89c94:	4610      	mov	r0, r2
   89c96:	4798      	blx	r3
   89c98:	4602      	mov	r2, r0
   89c9a:	460b      	mov	r3, r1
   89c9c:	4c26      	ldr	r4, [pc, #152]	; (89d38 <Heat_Correction+0x610>)
   89c9e:	4610      	mov	r0, r2
   89ca0:	4619      	mov	r1, r3
   89ca2:	a311      	add	r3, pc, #68	; (adr r3, 89ce8 <Heat_Correction+0x5c0>)
   89ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
   89ca8:	47a0      	blx	r4
   89caa:	4603      	mov	r3, r0
   89cac:	2b00      	cmp	r3, #0
   89cae:	d147      	bne.n	89d40 <Heat_Correction+0x618>
   89cb0:	4b20      	ldr	r3, [pc, #128]	; (89d34 <Heat_Correction+0x60c>)
   89cb2:	6819      	ldr	r1, [r3, #0]
   89cb4:	4b16      	ldr	r3, [pc, #88]	; (89d10 <Heat_Correction+0x5e8>)
   89cb6:	681a      	ldr	r2, [r3, #0]
   89cb8:	4b1a      	ldr	r3, [pc, #104]	; (89d24 <Heat_Correction+0x5fc>)
   89cba:	4608      	mov	r0, r1
   89cbc:	4611      	mov	r1, r2
   89cbe:	4798      	blx	r3
   89cc0:	4603      	mov	r3, r0
   89cc2:	461a      	mov	r2, r3
   89cc4:	4b0d      	ldr	r3, [pc, #52]	; (89cfc <Heat_Correction+0x5d4>)
   89cc6:	4610      	mov	r0, r2
   89cc8:	4798      	blx	r3
   89cca:	4602      	mov	r2, r0
   89ccc:	460b      	mov	r3, r1
   89cce:	4c1a      	ldr	r4, [pc, #104]	; (89d38 <Heat_Correction+0x610>)
   89cd0:	4610      	mov	r0, r2
   89cd2:	4619      	mov	r1, r3
   89cd4:	a304      	add	r3, pc, #16	; (adr r3, 89ce8 <Heat_Correction+0x5c0>)
   89cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
   89cda:	47a0      	blx	r4
   89cdc:	4603      	mov	r3, r0
   89cde:	2b00      	cmp	r3, #0
   89ce0:	d12e      	bne.n	89d40 <Heat_Correction+0x618>
   89ce2:	e02f      	b.n	89d44 <Heat_Correction+0x61c>
   89ce4:	f3af 8000 	nop.w
   89ce8:	9999999a 	.word	0x9999999a
   89cec:	3fb99999 	.word	0x3fb99999
   89cf0:	0008a1d1 	.word	0x0008a1d1
   89cf4:	20070704 	.word	0x20070704
   89cf8:	20071ae4 	.word	0x20071ae4
   89cfc:	000a79dd 	.word	0x000a79dd
   89d00:	20072348 	.word	0x20072348
   89d04:	000a7721 	.word	0x000a7721
   89d08:	3fe00000 	.word	0x3fe00000
   89d0c:	000a7f91 	.word	0x000a7f91
   89d10:	20071ae8 	.word	0x20071ae8
   89d14:	000a8655 	.word	0x000a8655
   89d18:	20071aec 	.word	0x20071aec
   89d1c:	cccccccd 	.word	0xcccccccd
   89d20:	2007233c 	.word	0x2007233c
   89d24:	000a80f1 	.word	0x000a80f1
   89d28:	000a867d 	.word	0x000a867d
   89d2c:	00089f29 	.word	0x00089f29
   89d30:	20072345 	.word	0x20072345
   89d34:	20072334 	.word	0x20072334
   89d38:	000a7fa5 	.word	0x000a7fa5
   89d3c:	0008ab61 	.word	0x0008ab61
			      Fine_DutyCorrection();
   89d40:	4b3d      	ldr	r3, [pc, #244]	; (89e38 <Heat_Correction+0x710>)
   89d42:	4798      	blx	r3
	 {
	  // TS2 not stable, wait for some more time
	  // Same avg_duty is being applied, no change till stability not achieved
	 }	
	}
	if (SYSTEM_FLOW == 800)
   89d44:	4b3d      	ldr	r3, [pc, #244]	; (89e3c <Heat_Correction+0x714>)
   89d46:	681b      	ldr	r3, [r3, #0]
   89d48:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   89d4c:	d169      	bne.n	89e22 <Heat_Correction+0x6fa>
	{
		
		if(TS2_Stable)
   89d4e:	4b3c      	ldr	r3, [pc, #240]	; (89e40 <Heat_Correction+0x718>)
   89d50:	781b      	ldrb	r3, [r3, #0]
   89d52:	2b00      	cmp	r3, #0
   89d54:	d065      	beq.n	89e22 <Heat_Correction+0x6fa>
		{
			//Now TS2 is not rapidly increasing and is at certain Temperature +/- 2 deg.
			//Start tuning T2 to be at 37 +/- 2 deg.
			if ( ((Tmp2Val - Prescribed_T2) > 1) || ((Prescribed_T2 - Tmp2Val) > 1) )
   89d56:	4b3b      	ldr	r3, [pc, #236]	; (89e44 <Heat_Correction+0x71c>)
   89d58:	6819      	ldr	r1, [r3, #0]
   89d5a:	4b3b      	ldr	r3, [pc, #236]	; (89e48 <Heat_Correction+0x720>)
   89d5c:	681a      	ldr	r2, [r3, #0]
   89d5e:	4b3b      	ldr	r3, [pc, #236]	; (89e4c <Heat_Correction+0x724>)
   89d60:	4608      	mov	r0, r1
   89d62:	4611      	mov	r1, r2
   89d64:	4798      	blx	r3
   89d66:	4603      	mov	r3, r0
   89d68:	461a      	mov	r2, r3
   89d6a:	4b39      	ldr	r3, [pc, #228]	; (89e50 <Heat_Correction+0x728>)
   89d6c:	4610      	mov	r0, r2
   89d6e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   89d72:	4798      	blx	r3
   89d74:	4603      	mov	r3, r0
   89d76:	2b00      	cmp	r3, #0
   89d78:	d111      	bne.n	89d9e <Heat_Correction+0x676>
   89d7a:	4b33      	ldr	r3, [pc, #204]	; (89e48 <Heat_Correction+0x720>)
   89d7c:	6819      	ldr	r1, [r3, #0]
   89d7e:	4b31      	ldr	r3, [pc, #196]	; (89e44 <Heat_Correction+0x71c>)
   89d80:	681a      	ldr	r2, [r3, #0]
   89d82:	4b32      	ldr	r3, [pc, #200]	; (89e4c <Heat_Correction+0x724>)
   89d84:	4608      	mov	r0, r1
   89d86:	4611      	mov	r1, r2
   89d88:	4798      	blx	r3
   89d8a:	4603      	mov	r3, r0
   89d8c:	461a      	mov	r2, r3
   89d8e:	4b30      	ldr	r3, [pc, #192]	; (89e50 <Heat_Correction+0x728>)
   89d90:	4610      	mov	r0, r2
   89d92:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   89d96:	4798      	blx	r3
   89d98:	4603      	mov	r3, r0
   89d9a:	2b00      	cmp	r3, #0
   89d9c:	d002      	beq.n	89da4 <Heat_Correction+0x67c>
			{
				Coarse_DutyCorrection();
   89d9e:	4b2d      	ldr	r3, [pc, #180]	; (89e54 <Heat_Correction+0x72c>)
   89da0:	4798      	blx	r3
   89da2:	e03e      	b.n	89e22 <Heat_Correction+0x6fa>
			}
			else
			{
				//T2 is stable and within 37 +/- 2 deg, check for T3 stability and apply fine correction
				TS3_Stable = Check_4_TS3_Stable();
   89da4:	4b2c      	ldr	r3, [pc, #176]	; (89e58 <Heat_Correction+0x730>)
   89da6:	4798      	blx	r3
   89da8:	4603      	mov	r3, r0
   89daa:	461a      	mov	r2, r3
   89dac:	4b2b      	ldr	r3, [pc, #172]	; (89e5c <Heat_Correction+0x734>)
   89dae:	701a      	strb	r2, [r3, #0]
				if(TS3_Stable)
   89db0:	4b2a      	ldr	r3, [pc, #168]	; (89e5c <Heat_Correction+0x734>)
   89db2:	781b      	ldrb	r3, [r3, #0]
   89db4:	2b00      	cmp	r3, #0
   89db6:	d034      	beq.n	89e22 <Heat_Correction+0x6fa>
				{
					if ( ((Tmp3Val - Prescribed_T3) > 0.1) || ((Prescribed_T3 - Tmp3Val) > 0.1) )
   89db8:	4b29      	ldr	r3, [pc, #164]	; (89e60 <Heat_Correction+0x738>)
   89dba:	6819      	ldr	r1, [r3, #0]
   89dbc:	4b29      	ldr	r3, [pc, #164]	; (89e64 <Heat_Correction+0x73c>)
   89dbe:	681a      	ldr	r2, [r3, #0]
   89dc0:	4b22      	ldr	r3, [pc, #136]	; (89e4c <Heat_Correction+0x724>)
   89dc2:	4608      	mov	r0, r1
   89dc4:	4611      	mov	r1, r2
   89dc6:	4798      	blx	r3
   89dc8:	4603      	mov	r3, r0
   89dca:	461a      	mov	r2, r3
   89dcc:	4b26      	ldr	r3, [pc, #152]	; (89e68 <Heat_Correction+0x740>)
   89dce:	4610      	mov	r0, r2
   89dd0:	4798      	blx	r3
   89dd2:	4602      	mov	r2, r0
   89dd4:	460b      	mov	r3, r1
   89dd6:	4c25      	ldr	r4, [pc, #148]	; (89e6c <Heat_Correction+0x744>)
   89dd8:	4610      	mov	r0, r2
   89dda:	4619      	mov	r1, r3
   89ddc:	a314      	add	r3, pc, #80	; (adr r3, 89e30 <Heat_Correction+0x708>)
   89dde:	e9d3 2300 	ldrd	r2, r3, [r3]
   89de2:	47a0      	blx	r4
   89de4:	4603      	mov	r3, r0
   89de6:	2b00      	cmp	r3, #0
   89de8:	d119      	bne.n	89e1e <Heat_Correction+0x6f6>
   89dea:	4b1e      	ldr	r3, [pc, #120]	; (89e64 <Heat_Correction+0x73c>)
   89dec:	6819      	ldr	r1, [r3, #0]
   89dee:	4b1c      	ldr	r3, [pc, #112]	; (89e60 <Heat_Correction+0x738>)
   89df0:	681a      	ldr	r2, [r3, #0]
   89df2:	4b16      	ldr	r3, [pc, #88]	; (89e4c <Heat_Correction+0x724>)
   89df4:	4608      	mov	r0, r1
   89df6:	4611      	mov	r1, r2
   89df8:	4798      	blx	r3
   89dfa:	4603      	mov	r3, r0
   89dfc:	461a      	mov	r2, r3
   89dfe:	4b1a      	ldr	r3, [pc, #104]	; (89e68 <Heat_Correction+0x740>)
   89e00:	4610      	mov	r0, r2
   89e02:	4798      	blx	r3
   89e04:	4602      	mov	r2, r0
   89e06:	460b      	mov	r3, r1
   89e08:	4c18      	ldr	r4, [pc, #96]	; (89e6c <Heat_Correction+0x744>)
   89e0a:	4610      	mov	r0, r2
   89e0c:	4619      	mov	r1, r3
   89e0e:	a308      	add	r3, pc, #32	; (adr r3, 89e30 <Heat_Correction+0x708>)
   89e10:	e9d3 2300 	ldrd	r2, r3, [r3]
   89e14:	47a0      	blx	r4
   89e16:	4603      	mov	r3, r0
   89e18:	2b00      	cmp	r3, #0
   89e1a:	d100      	bne.n	89e1e <Heat_Correction+0x6f6>
   89e1c:	e001      	b.n	89e22 <Heat_Correction+0x6fa>
					Fine_DutyCorrection();
   89e1e:	4b06      	ldr	r3, [pc, #24]	; (89e38 <Heat_Correction+0x710>)
   89e20:	4798      	blx	r3
			// TS2 not stable, wait for some more time
			// Same avg_duty is being applied, no change till stability not achieved
		}
	}

}
   89e22:	4618      	mov	r0, r3
   89e24:	370c      	adds	r7, #12
   89e26:	46bd      	mov	sp, r7
   89e28:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   89e2c:	f3af 8000 	nop.w
   89e30:	9999999a 	.word	0x9999999a
   89e34:	3fb99999 	.word	0x3fb99999
   89e38:	0008ab61 	.word	0x0008ab61
   89e3c:	20070704 	.word	0x20070704
   89e40:	2007233c 	.word	0x2007233c
   89e44:	20071ae4 	.word	0x20071ae4
   89e48:	20072348 	.word	0x20072348
   89e4c:	000a80f1 	.word	0x000a80f1
   89e50:	000a867d 	.word	0x000a867d
   89e54:	0008a1d1 	.word	0x0008a1d1
   89e58:	00089f29 	.word	0x00089f29
   89e5c:	20072345 	.word	0x20072345
   89e60:	20071ae8 	.word	0x20071ae8
   89e64:	20072334 	.word	0x20072334
   89e68:	000a79dd 	.word	0x000a79dd
   89e6c:	000a7fa5 	.word	0x000a7fa5

00089e70 <Check_4_TS2_Stable>:

bool Check_4_TS2_Stable()
{
   89e70:	b580      	push	{r7, lr}
   89e72:	b082      	sub	sp, #8
   89e74:	af00      	add	r7, sp, #0
	bool ts2_stable = false;
   89e76:	2300      	movs	r3, #0
   89e78:	71fb      	strb	r3, [r7, #7]
	
	if (TS2_stability_count >= wait_4_TS2Stability) // Based on the profiling curve, it's assumed after wait_4_stability secs,
   89e7a:	4b23      	ldr	r3, [pc, #140]	; (89f08 <Check_4_TS2_Stable+0x98>)
   89e7c:	881a      	ldrh	r2, [r3, #0]
   89e7e:	4b23      	ldr	r3, [pc, #140]	; (89f0c <Check_4_TS2_Stable+0x9c>)
   89e80:	881b      	ldrh	r3, [r3, #0]
   89e82:	429a      	cmp	r2, r3
   89e84:	d33a      	bcc.n	89efc <Check_4_TS2_Stable+0x8c>
	// TS2 is not increasing sharply; 180 secs
	{
		if (Tmp2Val_prev == Tmp2Val)
   89e86:	4b22      	ldr	r3, [pc, #136]	; (89f10 <Check_4_TS2_Stable+0xa0>)
   89e88:	6819      	ldr	r1, [r3, #0]
   89e8a:	4b22      	ldr	r3, [pc, #136]	; (89f14 <Check_4_TS2_Stable+0xa4>)
   89e8c:	681a      	ldr	r2, [r3, #0]
   89e8e:	4b22      	ldr	r3, [pc, #136]	; (89f18 <Check_4_TS2_Stable+0xa8>)
   89e90:	4608      	mov	r0, r1
   89e92:	4611      	mov	r1, r2
   89e94:	4798      	blx	r3
   89e96:	4603      	mov	r3, r0
   89e98:	2b00      	cmp	r3, #0
   89e9a:	d002      	beq.n	89ea2 <Check_4_TS2_Stable+0x32>
		{
			ts2_stable = true;
   89e9c:	2301      	movs	r3, #1
   89e9e:	71fb      	strb	r3, [r7, #7]
   89ea0:	e025      	b.n	89eee <Check_4_TS2_Stable+0x7e>
			
		}
		else if(((Tmp2Val - Tmp2Val_prev) <= 2) || ((Tmp2Val_prev - Tmp2Val) <= 2))
   89ea2:	4b1c      	ldr	r3, [pc, #112]	; (89f14 <Check_4_TS2_Stable+0xa4>)
   89ea4:	6819      	ldr	r1, [r3, #0]
   89ea6:	4b1a      	ldr	r3, [pc, #104]	; (89f10 <Check_4_TS2_Stable+0xa0>)
   89ea8:	681a      	ldr	r2, [r3, #0]
   89eaa:	4b1c      	ldr	r3, [pc, #112]	; (89f1c <Check_4_TS2_Stable+0xac>)
   89eac:	4608      	mov	r0, r1
   89eae:	4611      	mov	r1, r2
   89eb0:	4798      	blx	r3
   89eb2:	4603      	mov	r3, r0
   89eb4:	461a      	mov	r2, r3
   89eb6:	4b1a      	ldr	r3, [pc, #104]	; (89f20 <Check_4_TS2_Stable+0xb0>)
   89eb8:	4610      	mov	r0, r2
   89eba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   89ebe:	4798      	blx	r3
   89ec0:	4603      	mov	r3, r0
   89ec2:	2b00      	cmp	r3, #0
   89ec4:	d111      	bne.n	89eea <Check_4_TS2_Stable+0x7a>
   89ec6:	4b12      	ldr	r3, [pc, #72]	; (89f10 <Check_4_TS2_Stable+0xa0>)
   89ec8:	6819      	ldr	r1, [r3, #0]
   89eca:	4b12      	ldr	r3, [pc, #72]	; (89f14 <Check_4_TS2_Stable+0xa4>)
   89ecc:	681a      	ldr	r2, [r3, #0]
   89ece:	4b13      	ldr	r3, [pc, #76]	; (89f1c <Check_4_TS2_Stable+0xac>)
   89ed0:	4608      	mov	r0, r1
   89ed2:	4611      	mov	r1, r2
   89ed4:	4798      	blx	r3
   89ed6:	4603      	mov	r3, r0
   89ed8:	461a      	mov	r2, r3
   89eda:	4b11      	ldr	r3, [pc, #68]	; (89f20 <Check_4_TS2_Stable+0xb0>)
   89edc:	4610      	mov	r0, r2
   89ede:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   89ee2:	4798      	blx	r3
   89ee4:	4603      	mov	r3, r0
   89ee6:	2b00      	cmp	r3, #0
   89ee8:	d001      	beq.n	89eee <Check_4_TS2_Stable+0x7e>
		{
			ts2_stable = true;
   89eea:	2301      	movs	r3, #1
   89eec:	71fb      	strb	r3, [r7, #7]
		}
		wait_4_TS2Stability = post_stability_count;  // Sunil: to ensure new value if temp difference not in band and apply for next stability
   89eee:	4b0d      	ldr	r3, [pc, #52]	; (89f24 <Check_4_TS2_Stable+0xb4>)
   89ef0:	881a      	ldrh	r2, [r3, #0]
   89ef2:	4b06      	ldr	r3, [pc, #24]	; (89f0c <Check_4_TS2_Stable+0x9c>)
   89ef4:	801a      	strh	r2, [r3, #0]
													// Count 240 = 2 mins, Count 120 = 1 min
													 // Gopal: 30
		TS2_stability_count = 0;
   89ef6:	4b04      	ldr	r3, [pc, #16]	; (89f08 <Check_4_TS2_Stable+0x98>)
   89ef8:	2200      	movs	r2, #0
   89efa:	801a      	strh	r2, [r3, #0]
	}
	return ts2_stable;
   89efc:	79fb      	ldrb	r3, [r7, #7]
}
   89efe:	4618      	mov	r0, r3
   89f00:	3708      	adds	r7, #8
   89f02:	46bd      	mov	sp, r7
   89f04:	bd80      	pop	{r7, pc}
   89f06:	bf00      	nop
   89f08:	20071af0 	.word	0x20071af0
   89f0c:	200706fc 	.word	0x200706fc
   89f10:	20071afc 	.word	0x20071afc
   89f14:	20071ae4 	.word	0x20071ae4
   89f18:	000a862d 	.word	0x000a862d
   89f1c:	000a80f1 	.word	0x000a80f1
   89f20:	000a8655 	.word	0x000a8655
   89f24:	20071af4 	.word	0x20071af4

00089f28 <Check_4_TS3_Stable>:

bool Check_4_TS3_Stable()
{
   89f28:	b580      	push	{r7, lr}
   89f2a:	b082      	sub	sp, #8
   89f2c:	af00      	add	r7, sp, #0
	bool ts3_stable = false;
   89f2e:	2300      	movs	r3, #0
   89f30:	71fb      	strb	r3, [r7, #7]
	if (stability_count >= wait_4_stability) // Based on the profiling curve, it's assumed after wait_4_stability secs, 
   89f32:	4b23      	ldr	r3, [pc, #140]	; (89fc0 <Check_4_TS3_Stable+0x98>)
   89f34:	881a      	ldrh	r2, [r3, #0]
   89f36:	4b23      	ldr	r3, [pc, #140]	; (89fc4 <Check_4_TS3_Stable+0x9c>)
   89f38:	881b      	ldrh	r3, [r3, #0]
   89f3a:	429a      	cmp	r2, r3
   89f3c:	d33a      	bcc.n	89fb4 <Check_4_TS3_Stable+0x8c>
											 // TS3 is not increasing sharply
	{
		if (Tmp3Val_prev == Tmp3Val)
   89f3e:	4b22      	ldr	r3, [pc, #136]	; (89fc8 <Check_4_TS3_Stable+0xa0>)
   89f40:	6819      	ldr	r1, [r3, #0]
   89f42:	4b22      	ldr	r3, [pc, #136]	; (89fcc <Check_4_TS3_Stable+0xa4>)
   89f44:	681a      	ldr	r2, [r3, #0]
   89f46:	4b22      	ldr	r3, [pc, #136]	; (89fd0 <Check_4_TS3_Stable+0xa8>)
   89f48:	4608      	mov	r0, r1
   89f4a:	4611      	mov	r1, r2
   89f4c:	4798      	blx	r3
   89f4e:	4603      	mov	r3, r0
   89f50:	2b00      	cmp	r3, #0
   89f52:	d002      	beq.n	89f5a <Check_4_TS3_Stable+0x32>
		{
			ts3_stable = true;
   89f54:	2301      	movs	r3, #1
   89f56:	71fb      	strb	r3, [r7, #7]
   89f58:	e025      	b.n	89fa6 <Check_4_TS3_Stable+0x7e>
			
		}
		else if(((Tmp3Val - Tmp3Val_prev) <= 2) || ((Tmp3Val_prev - Tmp3Val) <= 2))  
   89f5a:	4b1c      	ldr	r3, [pc, #112]	; (89fcc <Check_4_TS3_Stable+0xa4>)
   89f5c:	6819      	ldr	r1, [r3, #0]
   89f5e:	4b1a      	ldr	r3, [pc, #104]	; (89fc8 <Check_4_TS3_Stable+0xa0>)
   89f60:	681a      	ldr	r2, [r3, #0]
   89f62:	4b1c      	ldr	r3, [pc, #112]	; (89fd4 <Check_4_TS3_Stable+0xac>)
   89f64:	4608      	mov	r0, r1
   89f66:	4611      	mov	r1, r2
   89f68:	4798      	blx	r3
   89f6a:	4603      	mov	r3, r0
   89f6c:	461a      	mov	r2, r3
   89f6e:	4b1a      	ldr	r3, [pc, #104]	; (89fd8 <Check_4_TS3_Stable+0xb0>)
   89f70:	4610      	mov	r0, r2
   89f72:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   89f76:	4798      	blx	r3
   89f78:	4603      	mov	r3, r0
   89f7a:	2b00      	cmp	r3, #0
   89f7c:	d111      	bne.n	89fa2 <Check_4_TS3_Stable+0x7a>
   89f7e:	4b12      	ldr	r3, [pc, #72]	; (89fc8 <Check_4_TS3_Stable+0xa0>)
   89f80:	6819      	ldr	r1, [r3, #0]
   89f82:	4b12      	ldr	r3, [pc, #72]	; (89fcc <Check_4_TS3_Stable+0xa4>)
   89f84:	681a      	ldr	r2, [r3, #0]
   89f86:	4b13      	ldr	r3, [pc, #76]	; (89fd4 <Check_4_TS3_Stable+0xac>)
   89f88:	4608      	mov	r0, r1
   89f8a:	4611      	mov	r1, r2
   89f8c:	4798      	blx	r3
   89f8e:	4603      	mov	r3, r0
   89f90:	461a      	mov	r2, r3
   89f92:	4b11      	ldr	r3, [pc, #68]	; (89fd8 <Check_4_TS3_Stable+0xb0>)
   89f94:	4610      	mov	r0, r2
   89f96:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   89f9a:	4798      	blx	r3
   89f9c:	4603      	mov	r3, r0
   89f9e:	2b00      	cmp	r3, #0
   89fa0:	d001      	beq.n	89fa6 <Check_4_TS3_Stable+0x7e>
		{
			ts3_stable = true;
   89fa2:	2301      	movs	r3, #1
   89fa4:	71fb      	strb	r3, [r7, #7]
		}
		wait_4_stability = TS3_post_stability_count;   // Sunil: to ensure new value if temp difference not in band and apply for next stability
   89fa6:	4b0d      	ldr	r3, [pc, #52]	; (89fdc <Check_4_TS3_Stable+0xb4>)
   89fa8:	881a      	ldrh	r2, [r3, #0]
   89faa:	4b06      	ldr	r3, [pc, #24]	; (89fc4 <Check_4_TS3_Stable+0x9c>)
   89fac:	801a      	strh	r2, [r3, #0]
		                                             // Gopal: 60
								 // Count 240 = 2 mins, Count 120 = 1 min
		stability_count = 0;
   89fae:	4b04      	ldr	r3, [pc, #16]	; (89fc0 <Check_4_TS3_Stable+0x98>)
   89fb0:	2200      	movs	r2, #0
   89fb2:	801a      	strh	r2, [r3, #0]
	}
 return ts3_stable;
   89fb4:	79fb      	ldrb	r3, [r7, #7]
}
   89fb6:	4618      	mov	r0, r3
   89fb8:	3708      	adds	r7, #8
   89fba:	46bd      	mov	sp, r7
   89fbc:	bd80      	pop	{r7, pc}
   89fbe:	bf00      	nop
   89fc0:	20071aee 	.word	0x20071aee
   89fc4:	200706fe 	.word	0x200706fe
   89fc8:	20072338 	.word	0x20072338
   89fcc:	20071ae8 	.word	0x20071ae8
   89fd0:	000a862d 	.word	0x000a862d
   89fd4:	000a80f1 	.word	0x000a80f1
   89fd8:	000a8655 	.word	0x000a8655
   89fdc:	20071af6 	.word	0x20071af6

00089fe0 <Check_4_Neutralstability>:

bool Check_4_Neutralstability()
{
   89fe0:	b590      	push	{r4, r7, lr}
   89fe2:	b083      	sub	sp, #12
   89fe4:	af00      	add	r7, sp, #0
		bool neuts3_stable = false;
   89fe6:	2300      	movs	r3, #0
   89fe8:	71fb      	strb	r3, [r7, #7]
	//wait_4_TS3NeuStability=240, Neupost_stability_count = 120,TS3_neustability_count
	
	if (TS3_neustability_count >= wait_4_TS3NeuStability) 
   89fea:	4b2d      	ldr	r3, [pc, #180]	; (8a0a0 <Check_4_Neutralstability+0xc0>)
   89fec:	881a      	ldrh	r2, [r3, #0]
   89fee:	4b2d      	ldr	r3, [pc, #180]	; (8a0a4 <Check_4_Neutralstability+0xc4>)
   89ff0:	881b      	ldrh	r3, [r3, #0]
   89ff2:	429a      	cmp	r2, r3
   89ff4:	d348      	bcc.n	8a088 <Check_4_Neutralstability+0xa8>
	{
		if (Tmp3Val_prev == Tmp3Val)
   89ff6:	4b2c      	ldr	r3, [pc, #176]	; (8a0a8 <Check_4_Neutralstability+0xc8>)
   89ff8:	6819      	ldr	r1, [r3, #0]
   89ffa:	4b2c      	ldr	r3, [pc, #176]	; (8a0ac <Check_4_Neutralstability+0xcc>)
   89ffc:	681a      	ldr	r2, [r3, #0]
   89ffe:	4b2c      	ldr	r3, [pc, #176]	; (8a0b0 <Check_4_Neutralstability+0xd0>)
   8a000:	4608      	mov	r0, r1
   8a002:	4611      	mov	r1, r2
   8a004:	4798      	blx	r3
   8a006:	4603      	mov	r3, r0
   8a008:	2b00      	cmp	r3, #0
   8a00a:	d002      	beq.n	8a012 <Check_4_Neutralstability+0x32>
		{
			neuts3_stable = true;
   8a00c:	2301      	movs	r3, #1
   8a00e:	71fb      	strb	r3, [r7, #7]
   8a010:	e033      	b.n	8a07a <Check_4_Neutralstability+0x9a>
			
		}
		else if(((Tmp3Val - Tmp3Val_prev) <= 0.1) || ((Tmp3Val_prev - Tmp3Val) <= 0.1))
   8a012:	4b26      	ldr	r3, [pc, #152]	; (8a0ac <Check_4_Neutralstability+0xcc>)
   8a014:	6819      	ldr	r1, [r3, #0]
   8a016:	4b24      	ldr	r3, [pc, #144]	; (8a0a8 <Check_4_Neutralstability+0xc8>)
   8a018:	681a      	ldr	r2, [r3, #0]
   8a01a:	4b26      	ldr	r3, [pc, #152]	; (8a0b4 <Check_4_Neutralstability+0xd4>)
   8a01c:	4608      	mov	r0, r1
   8a01e:	4611      	mov	r1, r2
   8a020:	4798      	blx	r3
   8a022:	4603      	mov	r3, r0
   8a024:	461a      	mov	r2, r3
   8a026:	4b24      	ldr	r3, [pc, #144]	; (8a0b8 <Check_4_Neutralstability+0xd8>)
   8a028:	4610      	mov	r0, r2
   8a02a:	4798      	blx	r3
   8a02c:	4602      	mov	r2, r0
   8a02e:	460b      	mov	r3, r1
   8a030:	4c22      	ldr	r4, [pc, #136]	; (8a0bc <Check_4_Neutralstability+0xdc>)
   8a032:	4610      	mov	r0, r2
   8a034:	4619      	mov	r1, r3
   8a036:	a318      	add	r3, pc, #96	; (adr r3, 8a098 <Check_4_Neutralstability+0xb8>)
   8a038:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a03c:	47a0      	blx	r4
   8a03e:	4603      	mov	r3, r0
   8a040:	2b00      	cmp	r3, #0
   8a042:	d118      	bne.n	8a076 <Check_4_Neutralstability+0x96>
   8a044:	4b18      	ldr	r3, [pc, #96]	; (8a0a8 <Check_4_Neutralstability+0xc8>)
   8a046:	6819      	ldr	r1, [r3, #0]
   8a048:	4b18      	ldr	r3, [pc, #96]	; (8a0ac <Check_4_Neutralstability+0xcc>)
   8a04a:	681a      	ldr	r2, [r3, #0]
   8a04c:	4b19      	ldr	r3, [pc, #100]	; (8a0b4 <Check_4_Neutralstability+0xd4>)
   8a04e:	4608      	mov	r0, r1
   8a050:	4611      	mov	r1, r2
   8a052:	4798      	blx	r3
   8a054:	4603      	mov	r3, r0
   8a056:	461a      	mov	r2, r3
   8a058:	4b17      	ldr	r3, [pc, #92]	; (8a0b8 <Check_4_Neutralstability+0xd8>)
   8a05a:	4610      	mov	r0, r2
   8a05c:	4798      	blx	r3
   8a05e:	4602      	mov	r2, r0
   8a060:	460b      	mov	r3, r1
   8a062:	4c16      	ldr	r4, [pc, #88]	; (8a0bc <Check_4_Neutralstability+0xdc>)
   8a064:	4610      	mov	r0, r2
   8a066:	4619      	mov	r1, r3
   8a068:	a30b      	add	r3, pc, #44	; (adr r3, 8a098 <Check_4_Neutralstability+0xb8>)
   8a06a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a06e:	47a0      	blx	r4
   8a070:	4603      	mov	r3, r0
   8a072:	2b00      	cmp	r3, #0
   8a074:	d001      	beq.n	8a07a <Check_4_Neutralstability+0x9a>
		{
			neuts3_stable = true;
   8a076:	2301      	movs	r3, #1
   8a078:	71fb      	strb	r3, [r7, #7]
		}
		wait_4_TS3NeuStability = Neupost_stability_count;  
   8a07a:	4b11      	ldr	r3, [pc, #68]	; (8a0c0 <Check_4_Neutralstability+0xe0>)
   8a07c:	881a      	ldrh	r2, [r3, #0]
   8a07e:	4b09      	ldr	r3, [pc, #36]	; (8a0a4 <Check_4_Neutralstability+0xc4>)
   8a080:	801a      	strh	r2, [r3, #0]
		TS3_neustability_count = 0;
   8a082:	4b07      	ldr	r3, [pc, #28]	; (8a0a0 <Check_4_Neutralstability+0xc0>)
   8a084:	2200      	movs	r2, #0
   8a086:	801a      	strh	r2, [r3, #0]
	}
	return neuts3_stable;
   8a088:	79fb      	ldrb	r3, [r7, #7]
}
   8a08a:	4618      	mov	r0, r3
   8a08c:	370c      	adds	r7, #12
   8a08e:	46bd      	mov	sp, r7
   8a090:	bd90      	pop	{r4, r7, pc}
   8a092:	bf00      	nop
   8a094:	f3af 8000 	nop.w
   8a098:	9999999a 	.word	0x9999999a
   8a09c:	3fb99999 	.word	0x3fb99999
   8a0a0:	20071af8 	.word	0x20071af8
   8a0a4:	20070700 	.word	0x20070700
   8a0a8:	20072338 	.word	0x20072338
   8a0ac:	20071ae8 	.word	0x20071ae8
   8a0b0:	000a862d 	.word	0x000a862d
   8a0b4:	000a80f1 	.word	0x000a80f1
   8a0b8:	000a79dd 	.word	0x000a79dd
   8a0bc:	000a7f7d 	.word	0x000a7f7d
   8a0c0:	20070702 	.word	0x20070702

0008a0c4 <Calculate_slope>:

void Calculate_slope ()
{
   8a0c4:	b598      	push	{r3, r4, r7, lr}
   8a0c6:	af00      	add	r7, sp, #0
	TS2_slope = 0;
   8a0c8:	4b10      	ldr	r3, [pc, #64]	; (8a10c <Calculate_slope+0x48>)
   8a0ca:	f04f 0200 	mov.w	r2, #0
   8a0ce:	601a      	str	r2, [r3, #0]
	
	// Since slope is calculated every 500msec, we should use 500ms_Count - count at storing Past_TS2.
	 TS2_slope = (Tmp2Val - Past_TS2) / (count_500ms - count_at_PastTS2); 
   8a0d0:	4b0f      	ldr	r3, [pc, #60]	; (8a110 <Calculate_slope+0x4c>)
   8a0d2:	6819      	ldr	r1, [r3, #0]
   8a0d4:	4b0f      	ldr	r3, [pc, #60]	; (8a114 <Calculate_slope+0x50>)
   8a0d6:	681a      	ldr	r2, [r3, #0]
   8a0d8:	4b0f      	ldr	r3, [pc, #60]	; (8a118 <Calculate_slope+0x54>)
   8a0da:	4608      	mov	r0, r1
   8a0dc:	4611      	mov	r1, r2
   8a0de:	4798      	blx	r3
   8a0e0:	4603      	mov	r3, r0
   8a0e2:	461c      	mov	r4, r3
   8a0e4:	4b0d      	ldr	r3, [pc, #52]	; (8a11c <Calculate_slope+0x58>)
   8a0e6:	881b      	ldrh	r3, [r3, #0]
   8a0e8:	461a      	mov	r2, r3
   8a0ea:	4b0d      	ldr	r3, [pc, #52]	; (8a120 <Calculate_slope+0x5c>)
   8a0ec:	881b      	ldrh	r3, [r3, #0]
   8a0ee:	1ad2      	subs	r2, r2, r3
   8a0f0:	4b0c      	ldr	r3, [pc, #48]	; (8a124 <Calculate_slope+0x60>)
   8a0f2:	4610      	mov	r0, r2
   8a0f4:	4798      	blx	r3
   8a0f6:	4602      	mov	r2, r0
   8a0f8:	4b0b      	ldr	r3, [pc, #44]	; (8a128 <Calculate_slope+0x64>)
   8a0fa:	4620      	mov	r0, r4
   8a0fc:	4611      	mov	r1, r2
   8a0fe:	4798      	blx	r3
   8a100:	4603      	mov	r3, r0
   8a102:	461a      	mov	r2, r3
   8a104:	4b01      	ldr	r3, [pc, #4]	; (8a10c <Calculate_slope+0x48>)
   8a106:	601a      	str	r2, [r3, #0]
}
   8a108:	bd98      	pop	{r3, r4, r7, pc}
   8a10a:	bf00      	nop
   8a10c:	20071b04 	.word	0x20071b04
   8a110:	20071ae4 	.word	0x20071ae4
   8a114:	20071b00 	.word	0x20071b00
   8a118:	000a80f1 	.word	0x000a80f1
   8a11c:	20071aec 	.word	0x20071aec
   8a120:	20071af2 	.word	0x20071af2
   8a124:	000a825d 	.word	0x000a825d
   8a128:	000a846d 	.word	0x000a846d

0008a12c <Calculate_direction>:

Calculate_direction()
{
   8a12c:	b580      	push	{r7, lr}
   8a12e:	af00      	add	r7, sp, #0
	if((Tmp2Val - Tmp2Val_prev) > 0)
   8a130:	4b20      	ldr	r3, [pc, #128]	; (8a1b4 <Calculate_direction+0x88>)
   8a132:	6819      	ldr	r1, [r3, #0]
   8a134:	4b20      	ldr	r3, [pc, #128]	; (8a1b8 <Calculate_direction+0x8c>)
   8a136:	681a      	ldr	r2, [r3, #0]
   8a138:	4b20      	ldr	r3, [pc, #128]	; (8a1bc <Calculate_direction+0x90>)
   8a13a:	4608      	mov	r0, r1
   8a13c:	4611      	mov	r1, r2
   8a13e:	4798      	blx	r3
   8a140:	4603      	mov	r3, r0
   8a142:	461a      	mov	r2, r3
   8a144:	4b1e      	ldr	r3, [pc, #120]	; (8a1c0 <Calculate_direction+0x94>)
   8a146:	4610      	mov	r0, r2
   8a148:	f04f 0100 	mov.w	r1, #0
   8a14c:	4798      	blx	r3
   8a14e:	4603      	mov	r3, r0
   8a150:	2b00      	cmp	r3, #0
   8a152:	d003      	beq.n	8a15c <Calculate_direction+0x30>
	    TS2_Direction = UP;
   8a154:	4b1b      	ldr	r3, [pc, #108]	; (8a1c4 <Calculate_direction+0x98>)
   8a156:	2200      	movs	r2, #0
   8a158:	701a      	strb	r2, [r3, #0]
   8a15a:	e02a      	b.n	8a1b2 <Calculate_direction+0x86>
	else if ((Tmp2Val_prev - Tmp2Val) > 0)
   8a15c:	4b16      	ldr	r3, [pc, #88]	; (8a1b8 <Calculate_direction+0x8c>)
   8a15e:	6819      	ldr	r1, [r3, #0]
   8a160:	4b14      	ldr	r3, [pc, #80]	; (8a1b4 <Calculate_direction+0x88>)
   8a162:	681a      	ldr	r2, [r3, #0]
   8a164:	4b15      	ldr	r3, [pc, #84]	; (8a1bc <Calculate_direction+0x90>)
   8a166:	4608      	mov	r0, r1
   8a168:	4611      	mov	r1, r2
   8a16a:	4798      	blx	r3
   8a16c:	4603      	mov	r3, r0
   8a16e:	461a      	mov	r2, r3
   8a170:	4b13      	ldr	r3, [pc, #76]	; (8a1c0 <Calculate_direction+0x94>)
   8a172:	4610      	mov	r0, r2
   8a174:	f04f 0100 	mov.w	r1, #0
   8a178:	4798      	blx	r3
   8a17a:	4603      	mov	r3, r0
   8a17c:	2b00      	cmp	r3, #0
   8a17e:	d003      	beq.n	8a188 <Calculate_direction+0x5c>
	    TS2_Direction = DOWN;
   8a180:	4b10      	ldr	r3, [pc, #64]	; (8a1c4 <Calculate_direction+0x98>)
   8a182:	2201      	movs	r2, #1
   8a184:	701a      	strb	r2, [r3, #0]
   8a186:	e014      	b.n	8a1b2 <Calculate_direction+0x86>
	else if ((Tmp2Val_prev - Tmp2Val) == 0)
   8a188:	4b0b      	ldr	r3, [pc, #44]	; (8a1b8 <Calculate_direction+0x8c>)
   8a18a:	6819      	ldr	r1, [r3, #0]
   8a18c:	4b09      	ldr	r3, [pc, #36]	; (8a1b4 <Calculate_direction+0x88>)
   8a18e:	681a      	ldr	r2, [r3, #0]
   8a190:	4b0a      	ldr	r3, [pc, #40]	; (8a1bc <Calculate_direction+0x90>)
   8a192:	4608      	mov	r0, r1
   8a194:	4611      	mov	r1, r2
   8a196:	4798      	blx	r3
   8a198:	4603      	mov	r3, r0
   8a19a:	461a      	mov	r2, r3
   8a19c:	4b0a      	ldr	r3, [pc, #40]	; (8a1c8 <Calculate_direction+0x9c>)
   8a19e:	4610      	mov	r0, r2
   8a1a0:	f04f 0100 	mov.w	r1, #0
   8a1a4:	4798      	blx	r3
   8a1a6:	4603      	mov	r3, r0
   8a1a8:	2b00      	cmp	r3, #0
   8a1aa:	d002      	beq.n	8a1b2 <Calculate_direction+0x86>
		TS2_Direction = NUETRAL;
   8a1ac:	4b05      	ldr	r3, [pc, #20]	; (8a1c4 <Calculate_direction+0x98>)
   8a1ae:	2202      	movs	r2, #2
   8a1b0:	701a      	strb	r2, [r3, #0]

}
   8a1b2:	bd80      	pop	{r7, pc}
   8a1b4:	20071ae4 	.word	0x20071ae4
   8a1b8:	20071afc 	.word	0x20071afc
   8a1bc:	000a80f1 	.word	0x000a80f1
   8a1c0:	000a867d 	.word	0x000a867d
   8a1c4:	20072346 	.word	0x20072346
   8a1c8:	000a862d 	.word	0x000a862d
   8a1cc:	00000000 	.word	0x00000000

0008a1d0 <Coarse_DutyCorrection>:

Coarse_DutyCorrection()                                  // to be fine tuned based on further testing
{
   8a1d0:	e92d 4398 	stmdb	sp!, {r3, r4, r7, r8, r9, lr}
   8a1d4:	af00      	add	r7, sp, #0
	if (TS2_slope <= TS2_SLOPE1)
   8a1d6:	4b9a      	ldr	r3, [pc, #616]	; (8a440 <Coarse_DutyCorrection+0x270>)
   8a1d8:	681a      	ldr	r2, [r3, #0]
   8a1da:	4b9a      	ldr	r3, [pc, #616]	; (8a444 <Coarse_DutyCorrection+0x274>)
   8a1dc:	4610      	mov	r0, r2
   8a1de:	4798      	blx	r3
   8a1e0:	4602      	mov	r2, r0
   8a1e2:	460b      	mov	r3, r1
   8a1e4:	4c98      	ldr	r4, [pc, #608]	; (8a448 <Coarse_DutyCorrection+0x278>)
   8a1e6:	4610      	mov	r0, r2
   8a1e8:	4619      	mov	r1, r3
   8a1ea:	a38f      	add	r3, pc, #572	; (adr r3, 8a428 <Coarse_DutyCorrection+0x258>)
   8a1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a1f0:	47a0      	blx	r4
   8a1f2:	4603      	mov	r3, r0
   8a1f4:	2b00      	cmp	r3, #0
   8a1f6:	d002      	beq.n	8a1fe <Coarse_DutyCorrection+0x2e>
	{
		duty_count = 60;					//Sunil: Lesser the slope i.e rising very fast, so decrease count; Earlier value = 80, wrong
   8a1f8:	4b94      	ldr	r3, [pc, #592]	; (8a44c <Coarse_DutyCorrection+0x27c>)
   8a1fa:	223c      	movs	r2, #60	; 0x3c
   8a1fc:	701a      	strb	r2, [r3, #0]

	}
	if ((TS2_slope <= TS2_SLOPE2) && (TS2_slope > TS2_SLOPE1))
   8a1fe:	4b90      	ldr	r3, [pc, #576]	; (8a440 <Coarse_DutyCorrection+0x270>)
   8a200:	681a      	ldr	r2, [r3, #0]
   8a202:	4b90      	ldr	r3, [pc, #576]	; (8a444 <Coarse_DutyCorrection+0x274>)
   8a204:	4610      	mov	r0, r2
   8a206:	4798      	blx	r3
   8a208:	4602      	mov	r2, r0
   8a20a:	460b      	mov	r3, r1
   8a20c:	4c8e      	ldr	r4, [pc, #568]	; (8a448 <Coarse_DutyCorrection+0x278>)
   8a20e:	4610      	mov	r0, r2
   8a210:	4619      	mov	r1, r3
   8a212:	a387      	add	r3, pc, #540	; (adr r3, 8a430 <Coarse_DutyCorrection+0x260>)
   8a214:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a218:	47a0      	blx	r4
   8a21a:	4603      	mov	r3, r0
   8a21c:	2b00      	cmp	r3, #0
   8a21e:	d013      	beq.n	8a248 <Coarse_DutyCorrection+0x78>
   8a220:	4b87      	ldr	r3, [pc, #540]	; (8a440 <Coarse_DutyCorrection+0x270>)
   8a222:	681a      	ldr	r2, [r3, #0]
   8a224:	4b87      	ldr	r3, [pc, #540]	; (8a444 <Coarse_DutyCorrection+0x274>)
   8a226:	4610      	mov	r0, r2
   8a228:	4798      	blx	r3
   8a22a:	4602      	mov	r2, r0
   8a22c:	460b      	mov	r3, r1
   8a22e:	4c88      	ldr	r4, [pc, #544]	; (8a450 <Coarse_DutyCorrection+0x280>)
   8a230:	4610      	mov	r0, r2
   8a232:	4619      	mov	r1, r3
   8a234:	a37c      	add	r3, pc, #496	; (adr r3, 8a428 <Coarse_DutyCorrection+0x258>)
   8a236:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a23a:	47a0      	blx	r4
   8a23c:	4603      	mov	r3, r0
   8a23e:	2b00      	cmp	r3, #0
   8a240:	d002      	beq.n	8a248 <Coarse_DutyCorrection+0x78>
	{
		duty_count = 40;
   8a242:	4b82      	ldr	r3, [pc, #520]	; (8a44c <Coarse_DutyCorrection+0x27c>)
   8a244:	2228      	movs	r2, #40	; 0x28
   8a246:	701a      	strb	r2, [r3, #0]

	}
	if (TS2_slope >= TS2_SLOPE2)
   8a248:	4b7d      	ldr	r3, [pc, #500]	; (8a440 <Coarse_DutyCorrection+0x270>)
   8a24a:	681a      	ldr	r2, [r3, #0]
   8a24c:	4b7d      	ldr	r3, [pc, #500]	; (8a444 <Coarse_DutyCorrection+0x274>)
   8a24e:	4610      	mov	r0, r2
   8a250:	4798      	blx	r3
   8a252:	4602      	mov	r2, r0
   8a254:	460b      	mov	r3, r1
   8a256:	4c7f      	ldr	r4, [pc, #508]	; (8a454 <Coarse_DutyCorrection+0x284>)
   8a258:	4610      	mov	r0, r2
   8a25a:	4619      	mov	r1, r3
   8a25c:	a374      	add	r3, pc, #464	; (adr r3, 8a430 <Coarse_DutyCorrection+0x260>)
   8a25e:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a262:	47a0      	blx	r4
   8a264:	4603      	mov	r3, r0
   8a266:	2b00      	cmp	r3, #0
   8a268:	d002      	beq.n	8a270 <Coarse_DutyCorrection+0xa0>
	{
		duty_count = 8;
   8a26a:	4b78      	ldr	r3, [pc, #480]	; (8a44c <Coarse_DutyCorrection+0x27c>)
   8a26c:	2208      	movs	r2, #8
   8a26e:	701a      	strb	r2, [r3, #0]
	
	}
	
	if (SYSTEM_FLOW == 800)
   8a270:	4b79      	ldr	r3, [pc, #484]	; (8a458 <Coarse_DutyCorrection+0x288>)
   8a272:	681b      	ldr	r3, [r3, #0]
   8a274:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   8a278:	f040 8150 	bne.w	8a51c <Coarse_DutyCorrection+0x34c>
	{
		if ((TS2_Direction == UP)  && (Tmp2Val >= (Prescribed_T2+2)) )   // if direction is upward restrict correction if TS2 not yet 39
   8a27c:	4b77      	ldr	r3, [pc, #476]	; (8a45c <Coarse_DutyCorrection+0x28c>)
   8a27e:	781b      	ldrb	r3, [r3, #0]
   8a280:	2b00      	cmp	r3, #0
   8a282:	d128      	bne.n	8a2d6 <Coarse_DutyCorrection+0x106>
   8a284:	4b76      	ldr	r3, [pc, #472]	; (8a460 <Coarse_DutyCorrection+0x290>)
   8a286:	681a      	ldr	r2, [r3, #0]
   8a288:	4b76      	ldr	r3, [pc, #472]	; (8a464 <Coarse_DutyCorrection+0x294>)
   8a28a:	4610      	mov	r0, r2
   8a28c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8a290:	4798      	blx	r3
   8a292:	4603      	mov	r3, r0
   8a294:	4619      	mov	r1, r3
   8a296:	4b74      	ldr	r3, [pc, #464]	; (8a468 <Coarse_DutyCorrection+0x298>)
   8a298:	681a      	ldr	r2, [r3, #0]
   8a29a:	4b74      	ldr	r3, [pc, #464]	; (8a46c <Coarse_DutyCorrection+0x29c>)
   8a29c:	4608      	mov	r0, r1
   8a29e:	4611      	mov	r1, r2
   8a2a0:	4798      	blx	r3
   8a2a2:	4603      	mov	r3, r0
   8a2a4:	2b00      	cmp	r3, #0
   8a2a6:	d016      	beq.n	8a2d6 <Coarse_DutyCorrection+0x106>
		{													// Prescribed_T2 = 37 ; changed from 39 25071977
			
			avg_duty = avg_duty - duty_count;
   8a2a8:	4b71      	ldr	r3, [pc, #452]	; (8a470 <Coarse_DutyCorrection+0x2a0>)
   8a2aa:	881b      	ldrh	r3, [r3, #0]
   8a2ac:	b29a      	uxth	r2, r3
   8a2ae:	4b67      	ldr	r3, [pc, #412]	; (8a44c <Coarse_DutyCorrection+0x27c>)
   8a2b0:	781b      	ldrb	r3, [r3, #0]
   8a2b2:	b29b      	uxth	r3, r3
   8a2b4:	1ad3      	subs	r3, r2, r3
   8a2b6:	b29b      	uxth	r3, r3
   8a2b8:	b29a      	uxth	r2, r3
   8a2ba:	4b6d      	ldr	r3, [pc, #436]	; (8a470 <Coarse_DutyCorrection+0x2a0>)
   8a2bc:	801a      	strh	r2, [r3, #0]
			
			if((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a2be:	4b6c      	ldr	r3, [pc, #432]	; (8a470 <Coarse_DutyCorrection+0x2a0>)
   8a2c0:	881b      	ldrh	r3, [r3, #0]
   8a2c2:	b21b      	sxth	r3, r3
   8a2c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8a2c8:	dc04      	bgt.n	8a2d4 <Coarse_DutyCorrection+0x104>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   8a2ca:	4b69      	ldr	r3, [pc, #420]	; (8a470 <Coarse_DutyCorrection+0x2a0>)
   8a2cc:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8a2d0:	801a      	strh	r2, [r3, #0]
		if ((TS2_Direction == UP)  && (Tmp2Val >= (Prescribed_T2+2)) )   // if direction is upward restrict correction if TS2 not yet 39
		{													// Prescribed_T2 = 37 ; changed from 39 25071977
			
			avg_duty = avg_duty - duty_count;
			
			if((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a2d2:	e122      	b.n	8a51a <Coarse_DutyCorrection+0x34a>
   8a2d4:	e121      	b.n	8a51a <Coarse_DutyCorrection+0x34a>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2+0.5)) && (Tmp3Val <= Prescribed_T3+0.1)))
   8a2d6:	4b61      	ldr	r3, [pc, #388]	; (8a45c <Coarse_DutyCorrection+0x28c>)
   8a2d8:	781b      	ldrb	r3, [r3, #0]
   8a2da:	2b00      	cmp	r3, #0
   8a2dc:	d15b      	bne.n	8a396 <Coarse_DutyCorrection+0x1c6>
   8a2de:	4b62      	ldr	r3, [pc, #392]	; (8a468 <Coarse_DutyCorrection+0x298>)
   8a2e0:	681a      	ldr	r2, [r3, #0]
   8a2e2:	4b58      	ldr	r3, [pc, #352]	; (8a444 <Coarse_DutyCorrection+0x274>)
   8a2e4:	4610      	mov	r0, r2
   8a2e6:	4798      	blx	r3
   8a2e8:	4680      	mov	r8, r0
   8a2ea:	4689      	mov	r9, r1
   8a2ec:	4b5c      	ldr	r3, [pc, #368]	; (8a460 <Coarse_DutyCorrection+0x290>)
   8a2ee:	681a      	ldr	r2, [r3, #0]
   8a2f0:	4b54      	ldr	r3, [pc, #336]	; (8a444 <Coarse_DutyCorrection+0x274>)
   8a2f2:	4610      	mov	r0, r2
   8a2f4:	4798      	blx	r3
   8a2f6:	4602      	mov	r2, r0
   8a2f8:	460b      	mov	r3, r1
   8a2fa:	4c5e      	ldr	r4, [pc, #376]	; (8a474 <Coarse_DutyCorrection+0x2a4>)
   8a2fc:	4610      	mov	r0, r2
   8a2fe:	4619      	mov	r1, r3
   8a300:	f04f 0200 	mov.w	r2, #0
   8a304:	4b5c      	ldr	r3, [pc, #368]	; (8a478 <Coarse_DutyCorrection+0x2a8>)
   8a306:	47a0      	blx	r4
   8a308:	4602      	mov	r2, r0
   8a30a:	460b      	mov	r3, r1
   8a30c:	4c51      	ldr	r4, [pc, #324]	; (8a454 <Coarse_DutyCorrection+0x284>)
   8a30e:	4640      	mov	r0, r8
   8a310:	4649      	mov	r1, r9
   8a312:	47a0      	blx	r4
   8a314:	4603      	mov	r3, r0
   8a316:	2b00      	cmp	r3, #0
   8a318:	d03d      	beq.n	8a396 <Coarse_DutyCorrection+0x1c6>
   8a31a:	4b58      	ldr	r3, [pc, #352]	; (8a47c <Coarse_DutyCorrection+0x2ac>)
   8a31c:	681a      	ldr	r2, [r3, #0]
   8a31e:	4b49      	ldr	r3, [pc, #292]	; (8a444 <Coarse_DutyCorrection+0x274>)
   8a320:	4610      	mov	r0, r2
   8a322:	4798      	blx	r3
   8a324:	4680      	mov	r8, r0
   8a326:	4689      	mov	r9, r1
   8a328:	4b55      	ldr	r3, [pc, #340]	; (8a480 <Coarse_DutyCorrection+0x2b0>)
   8a32a:	681a      	ldr	r2, [r3, #0]
   8a32c:	4b45      	ldr	r3, [pc, #276]	; (8a444 <Coarse_DutyCorrection+0x274>)
   8a32e:	4610      	mov	r0, r2
   8a330:	4798      	blx	r3
   8a332:	4602      	mov	r2, r0
   8a334:	460b      	mov	r3, r1
   8a336:	4c4f      	ldr	r4, [pc, #316]	; (8a474 <Coarse_DutyCorrection+0x2a4>)
   8a338:	4610      	mov	r0, r2
   8a33a:	4619      	mov	r1, r3
   8a33c:	a33e      	add	r3, pc, #248	; (adr r3, 8a438 <Coarse_DutyCorrection+0x268>)
   8a33e:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a342:	47a0      	blx	r4
   8a344:	4602      	mov	r2, r0
   8a346:	460b      	mov	r3, r1
   8a348:	4c3f      	ldr	r4, [pc, #252]	; (8a448 <Coarse_DutyCorrection+0x278>)
   8a34a:	4640      	mov	r0, r8
   8a34c:	4649      	mov	r1, r9
   8a34e:	47a0      	blx	r4
   8a350:	4603      	mov	r3, r0
   8a352:	2b00      	cmp	r3, #0
   8a354:	d01f      	beq.n	8a396 <Coarse_DutyCorrection+0x1c6>
		{
			avg_duty = avg_duty - 10;
   8a356:	4b46      	ldr	r3, [pc, #280]	; (8a470 <Coarse_DutyCorrection+0x2a0>)
   8a358:	881b      	ldrh	r3, [r3, #0]
   8a35a:	b29b      	uxth	r3, r3
   8a35c:	3b0a      	subs	r3, #10
   8a35e:	b29b      	uxth	r3, r3
   8a360:	b29a      	uxth	r2, r3
   8a362:	4b43      	ldr	r3, [pc, #268]	; (8a470 <Coarse_DutyCorrection+0x2a0>)
   8a364:	801a      	strh	r2, [r3, #0]
			if((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a366:	4b42      	ldr	r3, [pc, #264]	; (8a470 <Coarse_DutyCorrection+0x2a0>)
   8a368:	881b      	ldrh	r3, [r3, #0]
   8a36a:	b21b      	sxth	r3, r3
   8a36c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8a370:	dc10      	bgt.n	8a394 <Coarse_DutyCorrection+0x1c4>
   8a372:	4b42      	ldr	r3, [pc, #264]	; (8a47c <Coarse_DutyCorrection+0x2ac>)
   8a374:	6819      	ldr	r1, [r3, #0]
   8a376:	4b42      	ldr	r3, [pc, #264]	; (8a480 <Coarse_DutyCorrection+0x2b0>)
   8a378:	681a      	ldr	r2, [r3, #0]
   8a37a:	4b42      	ldr	r3, [pc, #264]	; (8a484 <Coarse_DutyCorrection+0x2b4>)
   8a37c:	4608      	mov	r0, r1
   8a37e:	4611      	mov	r1, r2
   8a380:	4798      	blx	r3
   8a382:	4603      	mov	r3, r0
   8a384:	2b00      	cmp	r3, #0
   8a386:	d100      	bne.n	8a38a <Coarse_DutyCorrection+0x1ba>
   8a388:	e0c7      	b.n	8a51a <Coarse_DutyCorrection+0x34a>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   8a38a:	4b39      	ldr	r3, [pc, #228]	; (8a470 <Coarse_DutyCorrection+0x2a0>)
   8a38c:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8a390:	801a      	strh	r2, [r3, #0]
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2+0.5)) && (Tmp3Val <= Prescribed_T3+0.1)))
		{
			avg_duty = avg_duty - 10;
			if((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a392:	e0c2      	b.n	8a51a <Coarse_DutyCorrection+0x34a>
   8a394:	e0c1      	b.n	8a51a <Coarse_DutyCorrection+0x34a>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-1)) && (Tmp2Val <= Prescribed_T2+3)))
   8a396:	4b31      	ldr	r3, [pc, #196]	; (8a45c <Coarse_DutyCorrection+0x28c>)
   8a398:	781b      	ldrb	r3, [r3, #0]
   8a39a:	2b00      	cmp	r3, #0
   8a39c:	d17e      	bne.n	8a49c <Coarse_DutyCorrection+0x2cc>
   8a39e:	4b30      	ldr	r3, [pc, #192]	; (8a460 <Coarse_DutyCorrection+0x290>)
   8a3a0:	681a      	ldr	r2, [r3, #0]
   8a3a2:	4b39      	ldr	r3, [pc, #228]	; (8a488 <Coarse_DutyCorrection+0x2b8>)
   8a3a4:	4610      	mov	r0, r2
   8a3a6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8a3aa:	4798      	blx	r3
   8a3ac:	4603      	mov	r3, r0
   8a3ae:	4619      	mov	r1, r3
   8a3b0:	4b2d      	ldr	r3, [pc, #180]	; (8a468 <Coarse_DutyCorrection+0x298>)
   8a3b2:	681a      	ldr	r2, [r3, #0]
   8a3b4:	4b2d      	ldr	r3, [pc, #180]	; (8a46c <Coarse_DutyCorrection+0x29c>)
   8a3b6:	4608      	mov	r0, r1
   8a3b8:	4611      	mov	r1, r2
   8a3ba:	4798      	blx	r3
   8a3bc:	4603      	mov	r3, r0
   8a3be:	2b00      	cmp	r3, #0
   8a3c0:	d06c      	beq.n	8a49c <Coarse_DutyCorrection+0x2cc>
   8a3c2:	4b27      	ldr	r3, [pc, #156]	; (8a460 <Coarse_DutyCorrection+0x290>)
   8a3c4:	681a      	ldr	r2, [r3, #0]
   8a3c6:	4b27      	ldr	r3, [pc, #156]	; (8a464 <Coarse_DutyCorrection+0x294>)
   8a3c8:	4610      	mov	r0, r2
   8a3ca:	4930      	ldr	r1, [pc, #192]	; (8a48c <Coarse_DutyCorrection+0x2bc>)
   8a3cc:	4798      	blx	r3
   8a3ce:	4603      	mov	r3, r0
   8a3d0:	4619      	mov	r1, r3
   8a3d2:	4b25      	ldr	r3, [pc, #148]	; (8a468 <Coarse_DutyCorrection+0x298>)
   8a3d4:	681a      	ldr	r2, [r3, #0]
   8a3d6:	4b2e      	ldr	r3, [pc, #184]	; (8a490 <Coarse_DutyCorrection+0x2c0>)
   8a3d8:	4608      	mov	r0, r1
   8a3da:	4611      	mov	r1, r2
   8a3dc:	4798      	blx	r3
   8a3de:	4603      	mov	r3, r0
   8a3e0:	2b00      	cmp	r3, #0
   8a3e2:	d05b      	beq.n	8a49c <Coarse_DutyCorrection+0x2cc>
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))  
   8a3e4:	4b2b      	ldr	r3, [pc, #172]	; (8a494 <Coarse_DutyCorrection+0x2c4>)
   8a3e6:	681a      	ldr	r2, [r3, #0]
   8a3e8:	4b20      	ldr	r3, [pc, #128]	; (8a46c <Coarse_DutyCorrection+0x29c>)
   8a3ea:	4610      	mov	r0, r2
   8a3ec:	492a      	ldr	r1, [pc, #168]	; (8a498 <Coarse_DutyCorrection+0x2c8>)
   8a3ee:	4798      	blx	r3
   8a3f0:	4603      	mov	r3, r0
   8a3f2:	2b00      	cmp	r3, #0
   8a3f4:	f000 8091 	beq.w	8a51a <Coarse_DutyCorrection+0x34a>
   8a3f8:	4b20      	ldr	r3, [pc, #128]	; (8a47c <Coarse_DutyCorrection+0x2ac>)
   8a3fa:	6819      	ldr	r1, [r3, #0]
   8a3fc:	4b20      	ldr	r3, [pc, #128]	; (8a480 <Coarse_DutyCorrection+0x2b0>)
   8a3fe:	681a      	ldr	r2, [r3, #0]
   8a400:	4b20      	ldr	r3, [pc, #128]	; (8a484 <Coarse_DutyCorrection+0x2b4>)
   8a402:	4608      	mov	r0, r1
   8a404:	4611      	mov	r1, r2
   8a406:	4798      	blx	r3
   8a408:	4603      	mov	r3, r0
   8a40a:	2b00      	cmp	r3, #0
   8a40c:	d100      	bne.n	8a410 <Coarse_DutyCorrection+0x240>
   8a40e:	e084      	b.n	8a51a <Coarse_DutyCorrection+0x34a>
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 and 40
   8a410:	4b0e      	ldr	r3, [pc, #56]	; (8a44c <Coarse_DutyCorrection+0x27c>)
   8a412:	781b      	ldrb	r3, [r3, #0]
   8a414:	b29a      	uxth	r2, r3
   8a416:	4b16      	ldr	r3, [pc, #88]	; (8a470 <Coarse_DutyCorrection+0x2a0>)
   8a418:	881b      	ldrh	r3, [r3, #0]
   8a41a:	b29b      	uxth	r3, r3
   8a41c:	4413      	add	r3, r2
   8a41e:	b29b      	uxth	r3, r3
   8a420:	b29a      	uxth	r2, r3
   8a422:	4b13      	ldr	r3, [pc, #76]	; (8a470 <Coarse_DutyCorrection+0x2a0>)
   8a424:	801a      	strh	r2, [r3, #0]
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-1)) && (Tmp2Val <= Prescribed_T2+3)))
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))  
   8a426:	e078      	b.n	8a51a <Coarse_DutyCorrection+0x34a>
   8a428:	eb851eb8 	.word	0xeb851eb8
   8a42c:	3f9eb851 	.word	0x3f9eb851
   8a430:	33333333 	.word	0x33333333
   8a434:	3fd33333 	.word	0x3fd33333
   8a438:	9999999a 	.word	0x9999999a
   8a43c:	3fb99999 	.word	0x3fb99999
   8a440:	20071b04 	.word	0x20071b04
   8a444:	000a79dd 	.word	0x000a79dd
   8a448:	000a7f7d 	.word	0x000a7f7d
   8a44c:	20071b08 	.word	0x20071b08
   8a450:	000a7fa5 	.word	0x000a7fa5
   8a454:	000a7f91 	.word	0x000a7f91
   8a458:	20070704 	.word	0x20070704
   8a45c:	20072346 	.word	0x20072346
   8a460:	20072348 	.word	0x20072348
   8a464:	000a80f5 	.word	0x000a80f5
   8a468:	20071ae4 	.word	0x20071ae4
   8a46c:	000a8655 	.word	0x000a8655
   8a470:	20071ad4 	.word	0x20071ad4
   8a474:	000a7721 	.word	0x000a7721
   8a478:	3fe00000 	.word	0x3fe00000
   8a47c:	20071ae8 	.word	0x20071ae8
   8a480:	20072334 	.word	0x20072334
   8a484:	000a8641 	.word	0x000a8641
   8a488:	000a80f1 	.word	0x000a80f1
   8a48c:	40400000 	.word	0x40400000
   8a490:	000a8669 	.word	0x000a8669
   8a494:	20071ae0 	.word	0x20071ae0
   8a498:	42100000 	.word	0x42100000
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 and 40
		}
		else if ((TS2_Direction == DOWN) && (Tmp2Val <= Prescribed_T2) )
   8a49c:	4b90      	ldr	r3, [pc, #576]	; (8a6e0 <Coarse_DutyCorrection+0x510>)
   8a49e:	781b      	ldrb	r3, [r3, #0]
   8a4a0:	2b01      	cmp	r3, #1
   8a4a2:	d130      	bne.n	8a506 <Coarse_DutyCorrection+0x336>
   8a4a4:	4b8f      	ldr	r3, [pc, #572]	; (8a6e4 <Coarse_DutyCorrection+0x514>)
   8a4a6:	6819      	ldr	r1, [r3, #0]
   8a4a8:	4b8f      	ldr	r3, [pc, #572]	; (8a6e8 <Coarse_DutyCorrection+0x518>)
   8a4aa:	681a      	ldr	r2, [r3, #0]
   8a4ac:	4b8f      	ldr	r3, [pc, #572]	; (8a6ec <Coarse_DutyCorrection+0x51c>)
   8a4ae:	4608      	mov	r0, r1
   8a4b0:	4611      	mov	r1, r2
   8a4b2:	4798      	blx	r3
   8a4b4:	4603      	mov	r3, r0
   8a4b6:	2b00      	cmp	r3, #0
   8a4b8:	d025      	beq.n	8a506 <Coarse_DutyCorrection+0x336>
		{
			avg_duty = avg_duty + duty_count;
   8a4ba:	4b8d      	ldr	r3, [pc, #564]	; (8a6f0 <Coarse_DutyCorrection+0x520>)
   8a4bc:	781b      	ldrb	r3, [r3, #0]
   8a4be:	b29a      	uxth	r2, r3
   8a4c0:	4b8c      	ldr	r3, [pc, #560]	; (8a6f4 <Coarse_DutyCorrection+0x524>)
   8a4c2:	881b      	ldrh	r3, [r3, #0]
   8a4c4:	b29b      	uxth	r3, r3
   8a4c6:	4413      	add	r3, r2
   8a4c8:	b29b      	uxth	r3, r3
   8a4ca:	b29a      	uxth	r2, r3
   8a4cc:	4b89      	ldr	r3, [pc, #548]	; (8a6f4 <Coarse_DutyCorrection+0x524>)
   8a4ce:	801a      	strh	r2, [r3, #0]
			
			if ((avg_duty > 2300) && (Tmp3Val >= Prescribed_T3))  //Sunil limiting to 2300
   8a4d0:	4b88      	ldr	r3, [pc, #544]	; (8a6f4 <Coarse_DutyCorrection+0x524>)
   8a4d2:	881b      	ldrh	r3, [r3, #0]
   8a4d4:	b21b      	sxth	r3, r3
   8a4d6:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8a4da:	4293      	cmp	r3, r2
   8a4dc:	dd12      	ble.n	8a504 <Coarse_DutyCorrection+0x334>
   8a4de:	4b86      	ldr	r3, [pc, #536]	; (8a6f8 <Coarse_DutyCorrection+0x528>)
   8a4e0:	6819      	ldr	r1, [r3, #0]
   8a4e2:	4b86      	ldr	r3, [pc, #536]	; (8a6fc <Coarse_DutyCorrection+0x52c>)
   8a4e4:	681a      	ldr	r2, [r3, #0]
   8a4e6:	4b86      	ldr	r3, [pc, #536]	; (8a700 <Coarse_DutyCorrection+0x530>)
   8a4e8:	4608      	mov	r0, r1
   8a4ea:	4611      	mov	r1, r2
   8a4ec:	4798      	blx	r3
   8a4ee:	4603      	mov	r3, r0
   8a4f0:	2b00      	cmp	r3, #0
   8a4f2:	d100      	bne.n	8a4f6 <Coarse_DutyCorrection+0x326>
   8a4f4:	e011      	b.n	8a51a <Coarse_DutyCorrection+0x34a>
			{
				avg_duty = 2300;
   8a4f6:	4b7f      	ldr	r3, [pc, #508]	; (8a6f4 <Coarse_DutyCorrection+0x524>)
   8a4f8:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8a4fc:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   8a4fe:	4b81      	ldr	r3, [pc, #516]	; (8a704 <Coarse_DutyCorrection+0x534>)
   8a500:	4798      	blx	r3
		}
		else if ((TS2_Direction == DOWN) && (Tmp2Val <= Prescribed_T2) )
		{
			avg_duty = avg_duty + duty_count;
			
			if ((avg_duty > 2300) && (Tmp3Val >= Prescribed_T3))  //Sunil limiting to 2300
   8a502:	e00a      	b.n	8a51a <Coarse_DutyCorrection+0x34a>
   8a504:	e009      	b.n	8a51a <Coarse_DutyCorrection+0x34a>
				avg_duty = 2300;
				sv_cntrl_poweroffheater();
				//			  HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
   8a506:	4b76      	ldr	r3, [pc, #472]	; (8a6e0 <Coarse_DutyCorrection+0x510>)
   8a508:	781b      	ldrb	r3, [r3, #0]
   8a50a:	2b02      	cmp	r3, #2
   8a50c:	f040 82fd 	bne.w	8ab0a <Coarse_DutyCorrection+0x93a>
		avg_duty = avg_duty;
   8a510:	4b78      	ldr	r3, [pc, #480]	; (8a6f4 <Coarse_DutyCorrection+0x524>)
   8a512:	881a      	ldrh	r2, [r3, #0]
   8a514:	4b77      	ldr	r3, [pc, #476]	; (8a6f4 <Coarse_DutyCorrection+0x524>)
   8a516:	801a      	strh	r2, [r3, #0]
   8a518:	e2f7      	b.n	8ab0a <Coarse_DutyCorrection+0x93a>
   8a51a:	e2f6      	b.n	8ab0a <Coarse_DutyCorrection+0x93a>
		
	}

	else if (SYSTEM_FLOW == 500)
   8a51c:	4b7a      	ldr	r3, [pc, #488]	; (8a708 <Coarse_DutyCorrection+0x538>)
   8a51e:	681b      	ldr	r3, [r3, #0]
   8a520:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   8a524:	f040 8163 	bne.w	8a7ee <Coarse_DutyCorrection+0x61e>
	{
		if ((TS2_Direction == UP)  && (Tmp2Val >= Prescribed_T2+2) )   // if direction is upward restrict correction if TS2 not yet 39
   8a528:	4b6d      	ldr	r3, [pc, #436]	; (8a6e0 <Coarse_DutyCorrection+0x510>)
   8a52a:	781b      	ldrb	r3, [r3, #0]
   8a52c:	2b00      	cmp	r3, #0
   8a52e:	d128      	bne.n	8a582 <Coarse_DutyCorrection+0x3b2>
   8a530:	4b6d      	ldr	r3, [pc, #436]	; (8a6e8 <Coarse_DutyCorrection+0x518>)
   8a532:	681a      	ldr	r2, [r3, #0]
   8a534:	4b75      	ldr	r3, [pc, #468]	; (8a70c <Coarse_DutyCorrection+0x53c>)
   8a536:	4610      	mov	r0, r2
   8a538:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8a53c:	4798      	blx	r3
   8a53e:	4603      	mov	r3, r0
   8a540:	4619      	mov	r1, r3
   8a542:	4b68      	ldr	r3, [pc, #416]	; (8a6e4 <Coarse_DutyCorrection+0x514>)
   8a544:	681a      	ldr	r2, [r3, #0]
   8a546:	4b69      	ldr	r3, [pc, #420]	; (8a6ec <Coarse_DutyCorrection+0x51c>)
   8a548:	4608      	mov	r0, r1
   8a54a:	4611      	mov	r1, r2
   8a54c:	4798      	blx	r3
   8a54e:	4603      	mov	r3, r0
   8a550:	2b00      	cmp	r3, #0
   8a552:	d016      	beq.n	8a582 <Coarse_DutyCorrection+0x3b2>
		{													// Prescribed_T2 = 39 
			
			avg_duty = avg_duty - duty_count;
   8a554:	4b67      	ldr	r3, [pc, #412]	; (8a6f4 <Coarse_DutyCorrection+0x524>)
   8a556:	881b      	ldrh	r3, [r3, #0]
   8a558:	b29a      	uxth	r2, r3
   8a55a:	4b65      	ldr	r3, [pc, #404]	; (8a6f0 <Coarse_DutyCorrection+0x520>)
   8a55c:	781b      	ldrb	r3, [r3, #0]
   8a55e:	b29b      	uxth	r3, r3
   8a560:	1ad3      	subs	r3, r2, r3
   8a562:	b29b      	uxth	r3, r3
   8a564:	b29a      	uxth	r2, r3
   8a566:	4b63      	ldr	r3, [pc, #396]	; (8a6f4 <Coarse_DutyCorrection+0x524>)
   8a568:	801a      	strh	r2, [r3, #0]
			
			if((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a56a:	4b62      	ldr	r3, [pc, #392]	; (8a6f4 <Coarse_DutyCorrection+0x524>)
   8a56c:	881b      	ldrh	r3, [r3, #0]
   8a56e:	b21b      	sxth	r3, r3
   8a570:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8a574:	dc04      	bgt.n	8a580 <Coarse_DutyCorrection+0x3b0>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   8a576:	4b5f      	ldr	r3, [pc, #380]	; (8a6f4 <Coarse_DutyCorrection+0x524>)
   8a578:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8a57c:	801a      	strh	r2, [r3, #0]
		if ((TS2_Direction == UP)  && (Tmp2Val >= Prescribed_T2+2) )   // if direction is upward restrict correction if TS2 not yet 39
		{													// Prescribed_T2 = 39 
			
			avg_duty = avg_duty - duty_count;
			
			if((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a57e:	e135      	b.n	8a7ec <Coarse_DutyCorrection+0x61c>
   8a580:	e134      	b.n	8a7ec <Coarse_DutyCorrection+0x61c>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2+0.5)) && (Tmp3Val > (Prescribed_T3+0.1))))  // gOPAL: EARLIER 37 CHANGED ON 07082017
   8a582:	4b57      	ldr	r3, [pc, #348]	; (8a6e0 <Coarse_DutyCorrection+0x510>)
   8a584:	781b      	ldrb	r3, [r3, #0]
   8a586:	2b00      	cmp	r3, #0
   8a588:	d15b      	bne.n	8a642 <Coarse_DutyCorrection+0x472>
   8a58a:	4b56      	ldr	r3, [pc, #344]	; (8a6e4 <Coarse_DutyCorrection+0x514>)
   8a58c:	681a      	ldr	r2, [r3, #0]
   8a58e:	4b60      	ldr	r3, [pc, #384]	; (8a710 <Coarse_DutyCorrection+0x540>)
   8a590:	4610      	mov	r0, r2
   8a592:	4798      	blx	r3
   8a594:	4680      	mov	r8, r0
   8a596:	4689      	mov	r9, r1
   8a598:	4b53      	ldr	r3, [pc, #332]	; (8a6e8 <Coarse_DutyCorrection+0x518>)
   8a59a:	681a      	ldr	r2, [r3, #0]
   8a59c:	4b5c      	ldr	r3, [pc, #368]	; (8a710 <Coarse_DutyCorrection+0x540>)
   8a59e:	4610      	mov	r0, r2
   8a5a0:	4798      	blx	r3
   8a5a2:	4602      	mov	r2, r0
   8a5a4:	460b      	mov	r3, r1
   8a5a6:	4c5b      	ldr	r4, [pc, #364]	; (8a714 <Coarse_DutyCorrection+0x544>)
   8a5a8:	4610      	mov	r0, r2
   8a5aa:	4619      	mov	r1, r3
   8a5ac:	f04f 0200 	mov.w	r2, #0
   8a5b0:	4b59      	ldr	r3, [pc, #356]	; (8a718 <Coarse_DutyCorrection+0x548>)
   8a5b2:	47a0      	blx	r4
   8a5b4:	4602      	mov	r2, r0
   8a5b6:	460b      	mov	r3, r1
   8a5b8:	4c58      	ldr	r4, [pc, #352]	; (8a71c <Coarse_DutyCorrection+0x54c>)
   8a5ba:	4640      	mov	r0, r8
   8a5bc:	4649      	mov	r1, r9
   8a5be:	47a0      	blx	r4
   8a5c0:	4603      	mov	r3, r0
   8a5c2:	2b00      	cmp	r3, #0
   8a5c4:	d03d      	beq.n	8a642 <Coarse_DutyCorrection+0x472>
   8a5c6:	4b4c      	ldr	r3, [pc, #304]	; (8a6f8 <Coarse_DutyCorrection+0x528>)
   8a5c8:	681a      	ldr	r2, [r3, #0]
   8a5ca:	4b51      	ldr	r3, [pc, #324]	; (8a710 <Coarse_DutyCorrection+0x540>)
   8a5cc:	4610      	mov	r0, r2
   8a5ce:	4798      	blx	r3
   8a5d0:	4680      	mov	r8, r0
   8a5d2:	4689      	mov	r9, r1
   8a5d4:	4b49      	ldr	r3, [pc, #292]	; (8a6fc <Coarse_DutyCorrection+0x52c>)
   8a5d6:	681a      	ldr	r2, [r3, #0]
   8a5d8:	4b4d      	ldr	r3, [pc, #308]	; (8a710 <Coarse_DutyCorrection+0x540>)
   8a5da:	4610      	mov	r0, r2
   8a5dc:	4798      	blx	r3
   8a5de:	4602      	mov	r2, r0
   8a5e0:	460b      	mov	r3, r1
   8a5e2:	4c4c      	ldr	r4, [pc, #304]	; (8a714 <Coarse_DutyCorrection+0x544>)
   8a5e4:	4610      	mov	r0, r2
   8a5e6:	4619      	mov	r1, r3
   8a5e8:	a33b      	add	r3, pc, #236	; (adr r3, 8a6d8 <Coarse_DutyCorrection+0x508>)
   8a5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a5ee:	47a0      	blx	r4
   8a5f0:	4602      	mov	r2, r0
   8a5f2:	460b      	mov	r3, r1
   8a5f4:	4c4a      	ldr	r4, [pc, #296]	; (8a720 <Coarse_DutyCorrection+0x550>)
   8a5f6:	4640      	mov	r0, r8
   8a5f8:	4649      	mov	r1, r9
   8a5fa:	47a0      	blx	r4
   8a5fc:	4603      	mov	r3, r0
   8a5fe:	2b00      	cmp	r3, #0
   8a600:	d01f      	beq.n	8a642 <Coarse_DutyCorrection+0x472>
		{
			avg_duty = avg_duty - 10; 
   8a602:	4b3c      	ldr	r3, [pc, #240]	; (8a6f4 <Coarse_DutyCorrection+0x524>)
   8a604:	881b      	ldrh	r3, [r3, #0]
   8a606:	b29b      	uxth	r3, r3
   8a608:	3b0a      	subs	r3, #10
   8a60a:	b29b      	uxth	r3, r3
   8a60c:	b29a      	uxth	r2, r3
   8a60e:	4b39      	ldr	r3, [pc, #228]	; (8a6f4 <Coarse_DutyCorrection+0x524>)
   8a610:	801a      	strh	r2, [r3, #0]
			if((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a612:	4b38      	ldr	r3, [pc, #224]	; (8a6f4 <Coarse_DutyCorrection+0x524>)
   8a614:	881b      	ldrh	r3, [r3, #0]
   8a616:	b21b      	sxth	r3, r3
   8a618:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8a61c:	dc10      	bgt.n	8a640 <Coarse_DutyCorrection+0x470>
   8a61e:	4b36      	ldr	r3, [pc, #216]	; (8a6f8 <Coarse_DutyCorrection+0x528>)
   8a620:	6819      	ldr	r1, [r3, #0]
   8a622:	4b36      	ldr	r3, [pc, #216]	; (8a6fc <Coarse_DutyCorrection+0x52c>)
   8a624:	681a      	ldr	r2, [r3, #0]
   8a626:	4b3f      	ldr	r3, [pc, #252]	; (8a724 <Coarse_DutyCorrection+0x554>)
   8a628:	4608      	mov	r0, r1
   8a62a:	4611      	mov	r1, r2
   8a62c:	4798      	blx	r3
   8a62e:	4603      	mov	r3, r0
   8a630:	2b00      	cmp	r3, #0
   8a632:	d100      	bne.n	8a636 <Coarse_DutyCorrection+0x466>
   8a634:	e0da      	b.n	8a7ec <Coarse_DutyCorrection+0x61c>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   8a636:	4b2f      	ldr	r3, [pc, #188]	; (8a6f4 <Coarse_DutyCorrection+0x524>)
   8a638:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8a63c:	801a      	strh	r2, [r3, #0]
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2+0.5)) && (Tmp3Val > (Prescribed_T3+0.1))))  // gOPAL: EARLIER 37 CHANGED ON 07082017
		{
			avg_duty = avg_duty - 10; 
			if((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a63e:	e0d5      	b.n	8a7ec <Coarse_DutyCorrection+0x61c>
   8a640:	e0d4      	b.n	8a7ec <Coarse_DutyCorrection+0x61c>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-3)) && (Tmp2Val <=(Prescribed_T2+1))))  // gOPAL: EARLIER 37 CHANGED ON 07082017
   8a642:	4b27      	ldr	r3, [pc, #156]	; (8a6e0 <Coarse_DutyCorrection+0x510>)
   8a644:	781b      	ldrb	r3, [r3, #0]
   8a646:	2b00      	cmp	r3, #0
   8a648:	d176      	bne.n	8a738 <Coarse_DutyCorrection+0x568>
   8a64a:	4b27      	ldr	r3, [pc, #156]	; (8a6e8 <Coarse_DutyCorrection+0x518>)
   8a64c:	681a      	ldr	r2, [r3, #0]
   8a64e:	4b36      	ldr	r3, [pc, #216]	; (8a728 <Coarse_DutyCorrection+0x558>)
   8a650:	4610      	mov	r0, r2
   8a652:	4936      	ldr	r1, [pc, #216]	; (8a72c <Coarse_DutyCorrection+0x55c>)
   8a654:	4798      	blx	r3
   8a656:	4603      	mov	r3, r0
   8a658:	4619      	mov	r1, r3
   8a65a:	4b22      	ldr	r3, [pc, #136]	; (8a6e4 <Coarse_DutyCorrection+0x514>)
   8a65c:	681a      	ldr	r2, [r3, #0]
   8a65e:	4b23      	ldr	r3, [pc, #140]	; (8a6ec <Coarse_DutyCorrection+0x51c>)
   8a660:	4608      	mov	r0, r1
   8a662:	4611      	mov	r1, r2
   8a664:	4798      	blx	r3
   8a666:	4603      	mov	r3, r0
   8a668:	2b00      	cmp	r3, #0
   8a66a:	d065      	beq.n	8a738 <Coarse_DutyCorrection+0x568>
   8a66c:	4b1e      	ldr	r3, [pc, #120]	; (8a6e8 <Coarse_DutyCorrection+0x518>)
   8a66e:	681a      	ldr	r2, [r3, #0]
   8a670:	4b26      	ldr	r3, [pc, #152]	; (8a70c <Coarse_DutyCorrection+0x53c>)
   8a672:	4610      	mov	r0, r2
   8a674:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8a678:	4798      	blx	r3
   8a67a:	4603      	mov	r3, r0
   8a67c:	4619      	mov	r1, r3
   8a67e:	4b19      	ldr	r3, [pc, #100]	; (8a6e4 <Coarse_DutyCorrection+0x514>)
   8a680:	681a      	ldr	r2, [r3, #0]
   8a682:	4b1f      	ldr	r3, [pc, #124]	; (8a700 <Coarse_DutyCorrection+0x530>)
   8a684:	4608      	mov	r0, r1
   8a686:	4611      	mov	r1, r2
   8a688:	4798      	blx	r3
   8a68a:	4603      	mov	r3, r0
   8a68c:	2b00      	cmp	r3, #0
   8a68e:	d053      	beq.n	8a738 <Coarse_DutyCorrection+0x568>
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))
   8a690:	4b27      	ldr	r3, [pc, #156]	; (8a730 <Coarse_DutyCorrection+0x560>)
   8a692:	681a      	ldr	r2, [r3, #0]
   8a694:	4b15      	ldr	r3, [pc, #84]	; (8a6ec <Coarse_DutyCorrection+0x51c>)
   8a696:	4610      	mov	r0, r2
   8a698:	4926      	ldr	r1, [pc, #152]	; (8a734 <Coarse_DutyCorrection+0x564>)
   8a69a:	4798      	blx	r3
   8a69c:	4603      	mov	r3, r0
   8a69e:	2b00      	cmp	r3, #0
   8a6a0:	f000 80a4 	beq.w	8a7ec <Coarse_DutyCorrection+0x61c>
   8a6a4:	4b14      	ldr	r3, [pc, #80]	; (8a6f8 <Coarse_DutyCorrection+0x528>)
   8a6a6:	6819      	ldr	r1, [r3, #0]
   8a6a8:	4b14      	ldr	r3, [pc, #80]	; (8a6fc <Coarse_DutyCorrection+0x52c>)
   8a6aa:	681a      	ldr	r2, [r3, #0]
   8a6ac:	4b1d      	ldr	r3, [pc, #116]	; (8a724 <Coarse_DutyCorrection+0x554>)
   8a6ae:	4608      	mov	r0, r1
   8a6b0:	4611      	mov	r1, r2
   8a6b2:	4798      	blx	r3
   8a6b4:	4603      	mov	r3, r0
   8a6b6:	2b00      	cmp	r3, #0
   8a6b8:	d100      	bne.n	8a6bc <Coarse_DutyCorrection+0x4ec>
   8a6ba:	e097      	b.n	8a7ec <Coarse_DutyCorrection+0x61c>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8a6bc:	4b0c      	ldr	r3, [pc, #48]	; (8a6f0 <Coarse_DutyCorrection+0x520>)
   8a6be:	781b      	ldrb	r3, [r3, #0]
   8a6c0:	b29a      	uxth	r2, r3
   8a6c2:	4b0c      	ldr	r3, [pc, #48]	; (8a6f4 <Coarse_DutyCorrection+0x524>)
   8a6c4:	881b      	ldrh	r3, [r3, #0]
   8a6c6:	b29b      	uxth	r3, r3
   8a6c8:	4413      	add	r3, r2
   8a6ca:	b29b      	uxth	r3, r3
   8a6cc:	b29a      	uxth	r2, r3
   8a6ce:	4b09      	ldr	r3, [pc, #36]	; (8a6f4 <Coarse_DutyCorrection+0x524>)
   8a6d0:	801a      	strh	r2, [r3, #0]
			}
		
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-3)) && (Tmp2Val <=(Prescribed_T2+1))))  // gOPAL: EARLIER 37 CHANGED ON 07082017
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))
   8a6d2:	e08b      	b.n	8a7ec <Coarse_DutyCorrection+0x61c>
   8a6d4:	f3af 8000 	nop.w
   8a6d8:	9999999a 	.word	0x9999999a
   8a6dc:	3fb99999 	.word	0x3fb99999
   8a6e0:	20072346 	.word	0x20072346
   8a6e4:	20071ae4 	.word	0x20071ae4
   8a6e8:	20072348 	.word	0x20072348
   8a6ec:	000a8655 	.word	0x000a8655
   8a6f0:	20071b08 	.word	0x20071b08
   8a6f4:	20071ad4 	.word	0x20071ad4
   8a6f8:	20071ae8 	.word	0x20071ae8
   8a6fc:	20072334 	.word	0x20072334
   8a700:	000a8669 	.word	0x000a8669
   8a704:	0009b3d5 	.word	0x0009b3d5
   8a708:	20070704 	.word	0x20070704
   8a70c:	000a80f5 	.word	0x000a80f5
   8a710:	000a79dd 	.word	0x000a79dd
   8a714:	000a7721 	.word	0x000a7721
   8a718:	3fe00000 	.word	0x3fe00000
   8a71c:	000a7f91 	.word	0x000a7f91
   8a720:	000a7fa5 	.word	0x000a7fa5
   8a724:	000a8641 	.word	0x000a8641
   8a728:	000a80f1 	.word	0x000a80f1
   8a72c:	40400000 	.word	0x40400000
   8a730:	20071ae0 	.word	0x20071ae0
   8a734:	42100000 	.word	0x42100000
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
			}           //To avoid TS2 getting stuck at 36 or 36.5
		}
		else if ((TS2_Direction == DOWN) && (Tmp2Val <= Prescribed_T2-2) )  
   8a738:	4b79      	ldr	r3, [pc, #484]	; (8a920 <Coarse_DutyCorrection+0x750>)
   8a73a:	781b      	ldrb	r3, [r3, #0]
   8a73c:	2b01      	cmp	r3, #1
   8a73e:	d14b      	bne.n	8a7d8 <Coarse_DutyCorrection+0x608>
   8a740:	4b78      	ldr	r3, [pc, #480]	; (8a924 <Coarse_DutyCorrection+0x754>)
   8a742:	681a      	ldr	r2, [r3, #0]
   8a744:	4b78      	ldr	r3, [pc, #480]	; (8a928 <Coarse_DutyCorrection+0x758>)
   8a746:	4610      	mov	r0, r2
   8a748:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8a74c:	4798      	blx	r3
   8a74e:	4603      	mov	r3, r0
   8a750:	4619      	mov	r1, r3
   8a752:	4b76      	ldr	r3, [pc, #472]	; (8a92c <Coarse_DutyCorrection+0x75c>)
   8a754:	681a      	ldr	r2, [r3, #0]
   8a756:	4b76      	ldr	r3, [pc, #472]	; (8a930 <Coarse_DutyCorrection+0x760>)
   8a758:	4608      	mov	r0, r1
   8a75a:	4611      	mov	r1, r2
   8a75c:	4798      	blx	r3
   8a75e:	4603      	mov	r3, r0
   8a760:	2b00      	cmp	r3, #0
   8a762:	d039      	beq.n	8a7d8 <Coarse_DutyCorrection+0x608>
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))   //07082017 Gopal: added check of Ts3 to avoid avg duty increment when TS3 is more than 37
   8a764:	4b73      	ldr	r3, [pc, #460]	; (8a934 <Coarse_DutyCorrection+0x764>)
   8a766:	681a      	ldr	r2, [r3, #0]
   8a768:	4b73      	ldr	r3, [pc, #460]	; (8a938 <Coarse_DutyCorrection+0x768>)
   8a76a:	4610      	mov	r0, r2
   8a76c:	4973      	ldr	r1, [pc, #460]	; (8a93c <Coarse_DutyCorrection+0x76c>)
   8a76e:	4798      	blx	r3
   8a770:	4603      	mov	r3, r0
   8a772:	2b00      	cmp	r3, #0
   8a774:	d015      	beq.n	8a7a2 <Coarse_DutyCorrection+0x5d2>
   8a776:	4b72      	ldr	r3, [pc, #456]	; (8a940 <Coarse_DutyCorrection+0x770>)
   8a778:	6819      	ldr	r1, [r3, #0]
   8a77a:	4b72      	ldr	r3, [pc, #456]	; (8a944 <Coarse_DutyCorrection+0x774>)
   8a77c:	681a      	ldr	r2, [r3, #0]
   8a77e:	4b72      	ldr	r3, [pc, #456]	; (8a948 <Coarse_DutyCorrection+0x778>)
   8a780:	4608      	mov	r0, r1
   8a782:	4611      	mov	r1, r2
   8a784:	4798      	blx	r3
   8a786:	4603      	mov	r3, r0
   8a788:	2b00      	cmp	r3, #0
   8a78a:	d00a      	beq.n	8a7a2 <Coarse_DutyCorrection+0x5d2>
			{
				avg_duty = avg_duty + duty_count;            
   8a78c:	4b6f      	ldr	r3, [pc, #444]	; (8a94c <Coarse_DutyCorrection+0x77c>)
   8a78e:	781b      	ldrb	r3, [r3, #0]
   8a790:	b29a      	uxth	r2, r3
   8a792:	4b6f      	ldr	r3, [pc, #444]	; (8a950 <Coarse_DutyCorrection+0x780>)
   8a794:	881b      	ldrh	r3, [r3, #0]
   8a796:	b29b      	uxth	r3, r3
   8a798:	4413      	add	r3, r2
   8a79a:	b29b      	uxth	r3, r3
   8a79c:	b29a      	uxth	r2, r3
   8a79e:	4b6c      	ldr	r3, [pc, #432]	; (8a950 <Coarse_DutyCorrection+0x780>)
   8a7a0:	801a      	strh	r2, [r3, #0]
			}
			
			if ((avg_duty > 2300) && (Tmp3Val >= Prescribed_T3))  //Sunil limiting to 2300
   8a7a2:	4b6b      	ldr	r3, [pc, #428]	; (8a950 <Coarse_DutyCorrection+0x780>)
   8a7a4:	881b      	ldrh	r3, [r3, #0]
   8a7a6:	b21b      	sxth	r3, r3
   8a7a8:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8a7ac:	4293      	cmp	r3, r2
   8a7ae:	dd12      	ble.n	8a7d6 <Coarse_DutyCorrection+0x606>
   8a7b0:	4b63      	ldr	r3, [pc, #396]	; (8a940 <Coarse_DutyCorrection+0x770>)
   8a7b2:	6819      	ldr	r1, [r3, #0]
   8a7b4:	4b63      	ldr	r3, [pc, #396]	; (8a944 <Coarse_DutyCorrection+0x774>)
   8a7b6:	681a      	ldr	r2, [r3, #0]
   8a7b8:	4b5d      	ldr	r3, [pc, #372]	; (8a930 <Coarse_DutyCorrection+0x760>)
   8a7ba:	4608      	mov	r0, r1
   8a7bc:	4611      	mov	r1, r2
   8a7be:	4798      	blx	r3
   8a7c0:	4603      	mov	r3, r0
   8a7c2:	2b00      	cmp	r3, #0
   8a7c4:	d100      	bne.n	8a7c8 <Coarse_DutyCorrection+0x5f8>
   8a7c6:	e011      	b.n	8a7ec <Coarse_DutyCorrection+0x61c>
			{
				avg_duty = 2300;
   8a7c8:	4b61      	ldr	r3, [pc, #388]	; (8a950 <Coarse_DutyCorrection+0x780>)
   8a7ca:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8a7ce:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   8a7d0:	4b60      	ldr	r3, [pc, #384]	; (8a954 <Coarse_DutyCorrection+0x784>)
   8a7d2:	4798      	blx	r3
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))   //07082017 Gopal: added check of Ts3 to avoid avg duty increment when TS3 is more than 37
			{
				avg_duty = avg_duty + duty_count;            
			}
			
			if ((avg_duty > 2300) && (Tmp3Val >= Prescribed_T3))  //Sunil limiting to 2300
   8a7d4:	e00a      	b.n	8a7ec <Coarse_DutyCorrection+0x61c>
   8a7d6:	e009      	b.n	8a7ec <Coarse_DutyCorrection+0x61c>
				avg_duty = 2300;
				sv_cntrl_poweroffheater();
				//			  HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
   8a7d8:	4b51      	ldr	r3, [pc, #324]	; (8a920 <Coarse_DutyCorrection+0x750>)
   8a7da:	781b      	ldrb	r3, [r3, #0]
   8a7dc:	2b02      	cmp	r3, #2
   8a7de:	f040 8194 	bne.w	8ab0a <Coarse_DutyCorrection+0x93a>
		avg_duty = avg_duty;
   8a7e2:	4b5b      	ldr	r3, [pc, #364]	; (8a950 <Coarse_DutyCorrection+0x780>)
   8a7e4:	881a      	ldrh	r2, [r3, #0]
   8a7e6:	4b5a      	ldr	r3, [pc, #360]	; (8a950 <Coarse_DutyCorrection+0x780>)
   8a7e8:	801a      	strh	r2, [r3, #0]
   8a7ea:	e18e      	b.n	8ab0a <Coarse_DutyCorrection+0x93a>
   8a7ec:	e18d      	b.n	8ab0a <Coarse_DutyCorrection+0x93a>
		
	}
	
	else if (SYSTEM_FLOW == 300)
   8a7ee:	4b5a      	ldr	r3, [pc, #360]	; (8a958 <Coarse_DutyCorrection+0x788>)
   8a7f0:	681b      	ldr	r3, [r3, #0]
   8a7f2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   8a7f6:	f040 8188 	bne.w	8ab0a <Coarse_DutyCorrection+0x93a>
	{
//	if ((TS2_Direction == UP)  && (Tmp2Val >= 39) && (Tmp3Val >= Prescribed_T3))   // if direction is upward restrict correction if TS2 not yet 39
		if (((TS2_Direction == UP)  && (Tmp2Val >= (Prescribed_T2+2))  ) )// || (Tmp3Val >= (Prescribed_T3+0.5)))   // if direction is upward restrict correction if TS2 not yet 39
   8a7fa:	4b49      	ldr	r3, [pc, #292]	; (8a920 <Coarse_DutyCorrection+0x750>)
   8a7fc:	781b      	ldrb	r3, [r3, #0]
   8a7fe:	2b00      	cmp	r3, #0
   8a800:	d134      	bne.n	8a86c <Coarse_DutyCorrection+0x69c>
   8a802:	4b48      	ldr	r3, [pc, #288]	; (8a924 <Coarse_DutyCorrection+0x754>)
   8a804:	681a      	ldr	r2, [r3, #0]
   8a806:	4b55      	ldr	r3, [pc, #340]	; (8a95c <Coarse_DutyCorrection+0x78c>)
   8a808:	4610      	mov	r0, r2
   8a80a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8a80e:	4798      	blx	r3
   8a810:	4603      	mov	r3, r0
   8a812:	4619      	mov	r1, r3
   8a814:	4b45      	ldr	r3, [pc, #276]	; (8a92c <Coarse_DutyCorrection+0x75c>)
   8a816:	681a      	ldr	r2, [r3, #0]
   8a818:	4b47      	ldr	r3, [pc, #284]	; (8a938 <Coarse_DutyCorrection+0x768>)
   8a81a:	4608      	mov	r0, r1
   8a81c:	4611      	mov	r1, r2
   8a81e:	4798      	blx	r3
   8a820:	4603      	mov	r3, r0
   8a822:	2b00      	cmp	r3, #0
   8a824:	d022      	beq.n	8a86c <Coarse_DutyCorrection+0x69c>
		{                                      // earlier was 41 01082017
												// earlier 42.5 04082017			
			avg_duty = avg_duty - duty_count;
   8a826:	4b4a      	ldr	r3, [pc, #296]	; (8a950 <Coarse_DutyCorrection+0x780>)
   8a828:	881b      	ldrh	r3, [r3, #0]
   8a82a:	b29a      	uxth	r2, r3
   8a82c:	4b47      	ldr	r3, [pc, #284]	; (8a94c <Coarse_DutyCorrection+0x77c>)
   8a82e:	781b      	ldrb	r3, [r3, #0]
   8a830:	b29b      	uxth	r3, r3
   8a832:	1ad3      	subs	r3, r2, r3
   8a834:	b29b      	uxth	r3, r3
   8a836:	b29a      	uxth	r2, r3
   8a838:	4b45      	ldr	r3, [pc, #276]	; (8a950 <Coarse_DutyCorrection+0x780>)
   8a83a:	801a      	strh	r2, [r3, #0]
				
			if ((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a83c:	4b44      	ldr	r3, [pc, #272]	; (8a950 <Coarse_DutyCorrection+0x780>)
   8a83e:	881b      	ldrh	r3, [r3, #0]
   8a840:	b21b      	sxth	r3, r3
   8a842:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8a846:	dc10      	bgt.n	8a86a <Coarse_DutyCorrection+0x69a>
   8a848:	4b3d      	ldr	r3, [pc, #244]	; (8a940 <Coarse_DutyCorrection+0x770>)
   8a84a:	6819      	ldr	r1, [r3, #0]
   8a84c:	4b3d      	ldr	r3, [pc, #244]	; (8a944 <Coarse_DutyCorrection+0x774>)
   8a84e:	681a      	ldr	r2, [r3, #0]
   8a850:	4b3d      	ldr	r3, [pc, #244]	; (8a948 <Coarse_DutyCorrection+0x778>)
   8a852:	4608      	mov	r0, r1
   8a854:	4611      	mov	r1, r2
   8a856:	4798      	blx	r3
   8a858:	4603      	mov	r3, r0
   8a85a:	2b00      	cmp	r3, #0
   8a85c:	d100      	bne.n	8a860 <Coarse_DutyCorrection+0x690>
   8a85e:	e150      	b.n	8ab02 <Coarse_DutyCorrection+0x932>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   8a860:	4b3b      	ldr	r3, [pc, #236]	; (8a950 <Coarse_DutyCorrection+0x780>)
   8a862:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8a866:	801a      	strh	r2, [r3, #0]
		if (((TS2_Direction == UP)  && (Tmp2Val >= (Prescribed_T2+2))  ) )// || (Tmp3Val >= (Prescribed_T3+0.5)))   // if direction is upward restrict correction if TS2 not yet 39
		{                                      // earlier was 41 01082017
												// earlier 42.5 04082017			
			avg_duty = avg_duty - duty_count;
				
			if ((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a868:	e14b      	b.n	8ab02 <Coarse_DutyCorrection+0x932>
   8a86a:	e14a      	b.n	8ab02 <Coarse_DutyCorrection+0x932>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2 +1)) && (Tmp3Val > (Prescribed_T3+0.1))))  // gOPAL: EARLIER 37 CHANGED ON 07082017
   8a86c:	4b2c      	ldr	r3, [pc, #176]	; (8a920 <Coarse_DutyCorrection+0x750>)
   8a86e:	781b      	ldrb	r3, [r3, #0]
   8a870:	2b00      	cmp	r3, #0
   8a872:	d17b      	bne.n	8a96c <Coarse_DutyCorrection+0x79c>
   8a874:	4b2b      	ldr	r3, [pc, #172]	; (8a924 <Coarse_DutyCorrection+0x754>)
   8a876:	681a      	ldr	r2, [r3, #0]
   8a878:	4b38      	ldr	r3, [pc, #224]	; (8a95c <Coarse_DutyCorrection+0x78c>)
   8a87a:	4610      	mov	r0, r2
   8a87c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8a880:	4798      	blx	r3
   8a882:	4603      	mov	r3, r0
   8a884:	4619      	mov	r1, r3
   8a886:	4b29      	ldr	r3, [pc, #164]	; (8a92c <Coarse_DutyCorrection+0x75c>)
   8a888:	681a      	ldr	r2, [r3, #0]
   8a88a:	4b2b      	ldr	r3, [pc, #172]	; (8a938 <Coarse_DutyCorrection+0x768>)
   8a88c:	4608      	mov	r0, r1
   8a88e:	4611      	mov	r1, r2
   8a890:	4798      	blx	r3
   8a892:	4603      	mov	r3, r0
   8a894:	2b00      	cmp	r3, #0
   8a896:	d069      	beq.n	8a96c <Coarse_DutyCorrection+0x79c>
   8a898:	4b29      	ldr	r3, [pc, #164]	; (8a940 <Coarse_DutyCorrection+0x770>)
   8a89a:	681a      	ldr	r2, [r3, #0]
   8a89c:	4b30      	ldr	r3, [pc, #192]	; (8a960 <Coarse_DutyCorrection+0x790>)
   8a89e:	4610      	mov	r0, r2
   8a8a0:	4798      	blx	r3
   8a8a2:	4680      	mov	r8, r0
   8a8a4:	4689      	mov	r9, r1
   8a8a6:	4b27      	ldr	r3, [pc, #156]	; (8a944 <Coarse_DutyCorrection+0x774>)
   8a8a8:	681a      	ldr	r2, [r3, #0]
   8a8aa:	4b2d      	ldr	r3, [pc, #180]	; (8a960 <Coarse_DutyCorrection+0x790>)
   8a8ac:	4610      	mov	r0, r2
   8a8ae:	4798      	blx	r3
   8a8b0:	4602      	mov	r2, r0
   8a8b2:	460b      	mov	r3, r1
   8a8b4:	4c2b      	ldr	r4, [pc, #172]	; (8a964 <Coarse_DutyCorrection+0x794>)
   8a8b6:	4610      	mov	r0, r2
   8a8b8:	4619      	mov	r1, r3
   8a8ba:	a317      	add	r3, pc, #92	; (adr r3, 8a918 <Coarse_DutyCorrection+0x748>)
   8a8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a8c0:	47a0      	blx	r4
   8a8c2:	4602      	mov	r2, r0
   8a8c4:	460b      	mov	r3, r1
   8a8c6:	4c28      	ldr	r4, [pc, #160]	; (8a968 <Coarse_DutyCorrection+0x798>)
   8a8c8:	4640      	mov	r0, r8
   8a8ca:	4649      	mov	r1, r9
   8a8cc:	47a0      	blx	r4
   8a8ce:	4603      	mov	r3, r0
   8a8d0:	2b00      	cmp	r3, #0
   8a8d2:	d04b      	beq.n	8a96c <Coarse_DutyCorrection+0x79c>
		{
			avg_duty = avg_duty - 10;
   8a8d4:	4b1e      	ldr	r3, [pc, #120]	; (8a950 <Coarse_DutyCorrection+0x780>)
   8a8d6:	881b      	ldrh	r3, [r3, #0]
   8a8d8:	b29b      	uxth	r3, r3
   8a8da:	3b0a      	subs	r3, #10
   8a8dc:	b29b      	uxth	r3, r3
   8a8de:	b29a      	uxth	r2, r3
   8a8e0:	4b1b      	ldr	r3, [pc, #108]	; (8a950 <Coarse_DutyCorrection+0x780>)
   8a8e2:	801a      	strh	r2, [r3, #0]
			if((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a8e4:	4b1a      	ldr	r3, [pc, #104]	; (8a950 <Coarse_DutyCorrection+0x780>)
   8a8e6:	881b      	ldrh	r3, [r3, #0]
   8a8e8:	b21b      	sxth	r3, r3
   8a8ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8a8ee:	dc10      	bgt.n	8a912 <Coarse_DutyCorrection+0x742>
   8a8f0:	4b13      	ldr	r3, [pc, #76]	; (8a940 <Coarse_DutyCorrection+0x770>)
   8a8f2:	6819      	ldr	r1, [r3, #0]
   8a8f4:	4b13      	ldr	r3, [pc, #76]	; (8a944 <Coarse_DutyCorrection+0x774>)
   8a8f6:	681a      	ldr	r2, [r3, #0]
   8a8f8:	4b13      	ldr	r3, [pc, #76]	; (8a948 <Coarse_DutyCorrection+0x778>)
   8a8fa:	4608      	mov	r0, r1
   8a8fc:	4611      	mov	r1, r2
   8a8fe:	4798      	blx	r3
   8a900:	4603      	mov	r3, r0
   8a902:	2b00      	cmp	r3, #0
   8a904:	d100      	bne.n	8a908 <Coarse_DutyCorrection+0x738>
   8a906:	e0fc      	b.n	8ab02 <Coarse_DutyCorrection+0x932>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   8a908:	4b11      	ldr	r3, [pc, #68]	; (8a950 <Coarse_DutyCorrection+0x780>)
   8a90a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8a90e:	801a      	strh	r2, [r3, #0]
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2 +1)) && (Tmp3Val > (Prescribed_T3+0.1))))  // gOPAL: EARLIER 37 CHANGED ON 07082017
		{
			avg_duty = avg_duty - 10;
			if((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a910:	e0f7      	b.n	8ab02 <Coarse_DutyCorrection+0x932>
   8a912:	e0f6      	b.n	8ab02 <Coarse_DutyCorrection+0x932>
   8a914:	f3af 8000 	nop.w
   8a918:	9999999a 	.word	0x9999999a
   8a91c:	3fb99999 	.word	0x3fb99999
   8a920:	20072346 	.word	0x20072346
   8a924:	20072348 	.word	0x20072348
   8a928:	000a80f1 	.word	0x000a80f1
   8a92c:	20071ae4 	.word	0x20071ae4
   8a930:	000a8669 	.word	0x000a8669
   8a934:	20071ae0 	.word	0x20071ae0
   8a938:	000a8655 	.word	0x000a8655
   8a93c:	42100000 	.word	0x42100000
   8a940:	20071ae8 	.word	0x20071ae8
   8a944:	20072334 	.word	0x20072334
   8a948:	000a8641 	.word	0x000a8641
   8a94c:	20071b08 	.word	0x20071b08
   8a950:	20071ad4 	.word	0x20071ad4
   8a954:	0009b3d5 	.word	0x0009b3d5
   8a958:	20070704 	.word	0x20070704
   8a95c:	000a80f5 	.word	0x000a80f5
   8a960:	000a79dd 	.word	0x000a79dd
   8a964:	000a7721 	.word	0x000a7721
   8a968:	000a7fa5 	.word	0x000a7fa5
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
			
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-3)) && (Tmp2Val <= Prescribed_T2)))     
   8a96c:	4b6a      	ldr	r3, [pc, #424]	; (8ab18 <Coarse_DutyCorrection+0x948>)
   8a96e:	781b      	ldrb	r3, [r3, #0]
   8a970:	2b00      	cmp	r3, #0
   8a972:	d13d      	bne.n	8a9f0 <Coarse_DutyCorrection+0x820>
   8a974:	4b69      	ldr	r3, [pc, #420]	; (8ab1c <Coarse_DutyCorrection+0x94c>)
   8a976:	681a      	ldr	r2, [r3, #0]
   8a978:	4b69      	ldr	r3, [pc, #420]	; (8ab20 <Coarse_DutyCorrection+0x950>)
   8a97a:	4610      	mov	r0, r2
   8a97c:	4969      	ldr	r1, [pc, #420]	; (8ab24 <Coarse_DutyCorrection+0x954>)
   8a97e:	4798      	blx	r3
   8a980:	4603      	mov	r3, r0
   8a982:	4619      	mov	r1, r3
   8a984:	4b68      	ldr	r3, [pc, #416]	; (8ab28 <Coarse_DutyCorrection+0x958>)
   8a986:	681a      	ldr	r2, [r3, #0]
   8a988:	4b68      	ldr	r3, [pc, #416]	; (8ab2c <Coarse_DutyCorrection+0x95c>)
   8a98a:	4608      	mov	r0, r1
   8a98c:	4611      	mov	r1, r2
   8a98e:	4798      	blx	r3
   8a990:	4603      	mov	r3, r0
   8a992:	2b00      	cmp	r3, #0
   8a994:	d02c      	beq.n	8a9f0 <Coarse_DutyCorrection+0x820>
   8a996:	4b64      	ldr	r3, [pc, #400]	; (8ab28 <Coarse_DutyCorrection+0x958>)
   8a998:	6819      	ldr	r1, [r3, #0]
   8a99a:	4b60      	ldr	r3, [pc, #384]	; (8ab1c <Coarse_DutyCorrection+0x94c>)
   8a99c:	681a      	ldr	r2, [r3, #0]
   8a99e:	4b63      	ldr	r3, [pc, #396]	; (8ab2c <Coarse_DutyCorrection+0x95c>)
   8a9a0:	4608      	mov	r0, r1
   8a9a2:	4611      	mov	r1, r2
   8a9a4:	4798      	blx	r3
   8a9a6:	4603      	mov	r3, r0
   8a9a8:	2b00      	cmp	r3, #0
   8a9aa:	d021      	beq.n	8a9f0 <Coarse_DutyCorrection+0x820>
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))
   8a9ac:	4b60      	ldr	r3, [pc, #384]	; (8ab30 <Coarse_DutyCorrection+0x960>)
   8a9ae:	681a      	ldr	r2, [r3, #0]
   8a9b0:	4b5e      	ldr	r3, [pc, #376]	; (8ab2c <Coarse_DutyCorrection+0x95c>)
   8a9b2:	4610      	mov	r0, r2
   8a9b4:	495f      	ldr	r1, [pc, #380]	; (8ab34 <Coarse_DutyCorrection+0x964>)
   8a9b6:	4798      	blx	r3
   8a9b8:	4603      	mov	r3, r0
   8a9ba:	2b00      	cmp	r3, #0
   8a9bc:	f000 80a1 	beq.w	8ab02 <Coarse_DutyCorrection+0x932>
   8a9c0:	4b5d      	ldr	r3, [pc, #372]	; (8ab38 <Coarse_DutyCorrection+0x968>)
   8a9c2:	6819      	ldr	r1, [r3, #0]
   8a9c4:	4b5d      	ldr	r3, [pc, #372]	; (8ab3c <Coarse_DutyCorrection+0x96c>)
   8a9c6:	681a      	ldr	r2, [r3, #0]
   8a9c8:	4b5d      	ldr	r3, [pc, #372]	; (8ab40 <Coarse_DutyCorrection+0x970>)
   8a9ca:	4608      	mov	r0, r1
   8a9cc:	4611      	mov	r1, r2
   8a9ce:	4798      	blx	r3
   8a9d0:	4603      	mov	r3, r0
   8a9d2:	2b00      	cmp	r3, #0
   8a9d4:	d100      	bne.n	8a9d8 <Coarse_DutyCorrection+0x808>
   8a9d6:	e094      	b.n	8ab02 <Coarse_DutyCorrection+0x932>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8a9d8:	4b5a      	ldr	r3, [pc, #360]	; (8ab44 <Coarse_DutyCorrection+0x974>)
   8a9da:	781b      	ldrb	r3, [r3, #0]
   8a9dc:	b29a      	uxth	r2, r3
   8a9de:	4b5a      	ldr	r3, [pc, #360]	; (8ab48 <Coarse_DutyCorrection+0x978>)
   8a9e0:	881b      	ldrh	r3, [r3, #0]
   8a9e2:	b29b      	uxth	r3, r3
   8a9e4:	4413      	add	r3, r2
   8a9e6:	b29b      	uxth	r3, r3
   8a9e8:	b29a      	uxth	r2, r3
   8a9ea:	4b57      	ldr	r3, [pc, #348]	; (8ab48 <Coarse_DutyCorrection+0x978>)
   8a9ec:	801a      	strh	r2, [r3, #0]
			}
			
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-3)) && (Tmp2Val <= Prescribed_T2)))     
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))
   8a9ee:	e088      	b.n	8ab02 <Coarse_DutyCorrection+0x932>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
			}
			
		}
		else if ((TS2_Direction == DOWN) && (Tmp2Val <= Prescribed_T2) )        // last was 39
   8a9f0:	4b49      	ldr	r3, [pc, #292]	; (8ab18 <Coarse_DutyCorrection+0x948>)
   8a9f2:	781b      	ldrb	r3, [r3, #0]
   8a9f4:	2b01      	cmp	r3, #1
   8a9f6:	d138      	bne.n	8aa6a <Coarse_DutyCorrection+0x89a>
   8a9f8:	4b4b      	ldr	r3, [pc, #300]	; (8ab28 <Coarse_DutyCorrection+0x958>)
   8a9fa:	6819      	ldr	r1, [r3, #0]
   8a9fc:	4b47      	ldr	r3, [pc, #284]	; (8ab1c <Coarse_DutyCorrection+0x94c>)
   8a9fe:	681a      	ldr	r2, [r3, #0]
   8aa00:	4b4a      	ldr	r3, [pc, #296]	; (8ab2c <Coarse_DutyCorrection+0x95c>)
   8aa02:	4608      	mov	r0, r1
   8aa04:	4611      	mov	r1, r2
   8aa06:	4798      	blx	r3
   8aa08:	4603      	mov	r3, r0
   8aa0a:	2b00      	cmp	r3, #0
   8aa0c:	d02d      	beq.n	8aa6a <Coarse_DutyCorrection+0x89a>
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))   // Gopal: added check of Ts3 to avoid avg duty increment when TS3 is more than 37
   8aa0e:	4b48      	ldr	r3, [pc, #288]	; (8ab30 <Coarse_DutyCorrection+0x960>)
   8aa10:	681a      	ldr	r2, [r3, #0]
   8aa12:	4b46      	ldr	r3, [pc, #280]	; (8ab2c <Coarse_DutyCorrection+0x95c>)
   8aa14:	4610      	mov	r0, r2
   8aa16:	4947      	ldr	r1, [pc, #284]	; (8ab34 <Coarse_DutyCorrection+0x964>)
   8aa18:	4798      	blx	r3
   8aa1a:	4603      	mov	r3, r0
   8aa1c:	2b00      	cmp	r3, #0
   8aa1e:	d015      	beq.n	8aa4c <Coarse_DutyCorrection+0x87c>
   8aa20:	4b45      	ldr	r3, [pc, #276]	; (8ab38 <Coarse_DutyCorrection+0x968>)
   8aa22:	6819      	ldr	r1, [r3, #0]
   8aa24:	4b45      	ldr	r3, [pc, #276]	; (8ab3c <Coarse_DutyCorrection+0x96c>)
   8aa26:	681a      	ldr	r2, [r3, #0]
   8aa28:	4b45      	ldr	r3, [pc, #276]	; (8ab40 <Coarse_DutyCorrection+0x970>)
   8aa2a:	4608      	mov	r0, r1
   8aa2c:	4611      	mov	r1, r2
   8aa2e:	4798      	blx	r3
   8aa30:	4603      	mov	r3, r0
   8aa32:	2b00      	cmp	r3, #0
   8aa34:	d00a      	beq.n	8aa4c <Coarse_DutyCorrection+0x87c>
			{
				avg_duty = avg_duty + duty_count;            
   8aa36:	4b43      	ldr	r3, [pc, #268]	; (8ab44 <Coarse_DutyCorrection+0x974>)
   8aa38:	781b      	ldrb	r3, [r3, #0]
   8aa3a:	b29a      	uxth	r2, r3
   8aa3c:	4b42      	ldr	r3, [pc, #264]	; (8ab48 <Coarse_DutyCorrection+0x978>)
   8aa3e:	881b      	ldrh	r3, [r3, #0]
   8aa40:	b29b      	uxth	r3, r3
   8aa42:	4413      	add	r3, r2
   8aa44:	b29b      	uxth	r3, r3
   8aa46:	b29a      	uxth	r2, r3
   8aa48:	4b3f      	ldr	r3, [pc, #252]	; (8ab48 <Coarse_DutyCorrection+0x978>)
   8aa4a:	801a      	strh	r2, [r3, #0]
			}
			
			if (avg_duty > 2500)  //Sunil limiting to 2300
   8aa4c:	4b3e      	ldr	r3, [pc, #248]	; (8ab48 <Coarse_DutyCorrection+0x978>)
   8aa4e:	881b      	ldrh	r3, [r3, #0]
   8aa50:	b21b      	sxth	r3, r3
   8aa52:	f640 12c4 	movw	r2, #2500	; 0x9c4
   8aa56:	4293      	cmp	r3, r2
   8aa58:	dd06      	ble.n	8aa68 <Coarse_DutyCorrection+0x898>
			{
				avg_duty = 2500;
   8aa5a:	4b3b      	ldr	r3, [pc, #236]	; (8ab48 <Coarse_DutyCorrection+0x978>)
   8aa5c:	f640 12c4 	movw	r2, #2500	; 0x9c4
   8aa60:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   8aa62:	4b3a      	ldr	r3, [pc, #232]	; (8ab4c <Coarse_DutyCorrection+0x97c>)
   8aa64:	4798      	blx	r3
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))   // Gopal: added check of Ts3 to avoid avg duty increment when TS3 is more than 37
			{
				avg_duty = avg_duty + duty_count;            
			}
			
			if (avg_duty > 2500)  //Sunil limiting to 2300
   8aa66:	e04c      	b.n	8ab02 <Coarse_DutyCorrection+0x932>
   8aa68:	e04b      	b.n	8ab02 <Coarse_DutyCorrection+0x932>
				avg_duty = 2500;
				sv_cntrl_poweroffheater();
				//			  HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL){
   8aa6a:	4b2b      	ldr	r3, [pc, #172]	; (8ab18 <Coarse_DutyCorrection+0x948>)
   8aa6c:	781b      	ldrb	r3, [r3, #0]
   8aa6e:	2b02      	cmp	r3, #2
   8aa70:	d147      	bne.n	8ab02 <Coarse_DutyCorrection+0x932>
			if (Check_4_Neutralstability())
   8aa72:	4b37      	ldr	r3, [pc, #220]	; (8ab50 <Coarse_DutyCorrection+0x980>)
   8aa74:	4798      	blx	r3
   8aa76:	4603      	mov	r3, r0
   8aa78:	2b00      	cmp	r3, #0
   8aa7a:	d042      	beq.n	8ab02 <Coarse_DutyCorrection+0x932>
			{
				if ((Tmp3Val - Prescribed_T3) >0.2)
   8aa7c:	4b2e      	ldr	r3, [pc, #184]	; (8ab38 <Coarse_DutyCorrection+0x968>)
   8aa7e:	6819      	ldr	r1, [r3, #0]
   8aa80:	4b2e      	ldr	r3, [pc, #184]	; (8ab3c <Coarse_DutyCorrection+0x96c>)
   8aa82:	681a      	ldr	r2, [r3, #0]
   8aa84:	4b26      	ldr	r3, [pc, #152]	; (8ab20 <Coarse_DutyCorrection+0x950>)
   8aa86:	4608      	mov	r0, r1
   8aa88:	4611      	mov	r1, r2
   8aa8a:	4798      	blx	r3
   8aa8c:	4603      	mov	r3, r0
   8aa8e:	461a      	mov	r2, r3
   8aa90:	4b30      	ldr	r3, [pc, #192]	; (8ab54 <Coarse_DutyCorrection+0x984>)
   8aa92:	4610      	mov	r0, r2
   8aa94:	4798      	blx	r3
   8aa96:	4602      	mov	r2, r0
   8aa98:	460b      	mov	r3, r1
   8aa9a:	4c2f      	ldr	r4, [pc, #188]	; (8ab58 <Coarse_DutyCorrection+0x988>)
   8aa9c:	4610      	mov	r0, r2
   8aa9e:	4619      	mov	r1, r3
   8aaa0:	a31b      	add	r3, pc, #108	; (adr r3, 8ab10 <Coarse_DutyCorrection+0x940>)
   8aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
   8aaa6:	47a0      	blx	r4
   8aaa8:	4603      	mov	r3, r0
   8aaaa:	2b00      	cmp	r3, #0
   8aaac:	d008      	beq.n	8aac0 <Coarse_DutyCorrection+0x8f0>
				{
					avg_duty = avg_duty-6;
   8aaae:	4b26      	ldr	r3, [pc, #152]	; (8ab48 <Coarse_DutyCorrection+0x978>)
   8aab0:	881b      	ldrh	r3, [r3, #0]
   8aab2:	b29b      	uxth	r3, r3
   8aab4:	3b06      	subs	r3, #6
   8aab6:	b29b      	uxth	r3, r3
   8aab8:	b29a      	uxth	r2, r3
   8aaba:	4b23      	ldr	r3, [pc, #140]	; (8ab48 <Coarse_DutyCorrection+0x978>)
   8aabc:	801a      	strh	r2, [r3, #0]
   8aabe:	e020      	b.n	8ab02 <Coarse_DutyCorrection+0x932>
				}
				else if ((Prescribed_T3- Tmp3Val) >0.2)
   8aac0:	4b1e      	ldr	r3, [pc, #120]	; (8ab3c <Coarse_DutyCorrection+0x96c>)
   8aac2:	6819      	ldr	r1, [r3, #0]
   8aac4:	4b1c      	ldr	r3, [pc, #112]	; (8ab38 <Coarse_DutyCorrection+0x968>)
   8aac6:	681a      	ldr	r2, [r3, #0]
   8aac8:	4b15      	ldr	r3, [pc, #84]	; (8ab20 <Coarse_DutyCorrection+0x950>)
   8aaca:	4608      	mov	r0, r1
   8aacc:	4611      	mov	r1, r2
   8aace:	4798      	blx	r3
   8aad0:	4603      	mov	r3, r0
   8aad2:	461a      	mov	r2, r3
   8aad4:	4b1f      	ldr	r3, [pc, #124]	; (8ab54 <Coarse_DutyCorrection+0x984>)
   8aad6:	4610      	mov	r0, r2
   8aad8:	4798      	blx	r3
   8aada:	4602      	mov	r2, r0
   8aadc:	460b      	mov	r3, r1
   8aade:	4c1e      	ldr	r4, [pc, #120]	; (8ab58 <Coarse_DutyCorrection+0x988>)
   8aae0:	4610      	mov	r0, r2
   8aae2:	4619      	mov	r1, r3
   8aae4:	a30a      	add	r3, pc, #40	; (adr r3, 8ab10 <Coarse_DutyCorrection+0x940>)
   8aae6:	e9d3 2300 	ldrd	r2, r3, [r3]
   8aaea:	47a0      	blx	r4
   8aaec:	4603      	mov	r3, r0
   8aaee:	2b00      	cmp	r3, #0
   8aaf0:	d007      	beq.n	8ab02 <Coarse_DutyCorrection+0x932>
				{
					avg_duty = avg_duty+6;
   8aaf2:	4b15      	ldr	r3, [pc, #84]	; (8ab48 <Coarse_DutyCorrection+0x978>)
   8aaf4:	881b      	ldrh	r3, [r3, #0]
   8aaf6:	b29b      	uxth	r3, r3
   8aaf8:	3306      	adds	r3, #6
   8aafa:	b29b      	uxth	r3, r3
   8aafc:	b29a      	uxth	r2, r3
   8aafe:	4b12      	ldr	r3, [pc, #72]	; (8ab48 <Coarse_DutyCorrection+0x978>)
   8ab00:	801a      	strh	r2, [r3, #0]
				}
			}
		}
	
		avg_duty = avg_duty;
   8ab02:	4b11      	ldr	r3, [pc, #68]	; (8ab48 <Coarse_DutyCorrection+0x978>)
   8ab04:	881a      	ldrh	r2, [r3, #0]
   8ab06:	4b10      	ldr	r3, [pc, #64]	; (8ab48 <Coarse_DutyCorrection+0x978>)
   8ab08:	801a      	strh	r2, [r3, #0]
		
	}
}
   8ab0a:	e8bd 8398 	ldmia.w	sp!, {r3, r4, r7, r8, r9, pc}
   8ab0e:	bf00      	nop
   8ab10:	9999999a 	.word	0x9999999a
   8ab14:	3fc99999 	.word	0x3fc99999
   8ab18:	20072346 	.word	0x20072346
   8ab1c:	20072348 	.word	0x20072348
   8ab20:	000a80f1 	.word	0x000a80f1
   8ab24:	40400000 	.word	0x40400000
   8ab28:	20071ae4 	.word	0x20071ae4
   8ab2c:	000a8655 	.word	0x000a8655
   8ab30:	20071ae0 	.word	0x20071ae0
   8ab34:	42100000 	.word	0x42100000
   8ab38:	20071ae8 	.word	0x20071ae8
   8ab3c:	20072334 	.word	0x20072334
   8ab40:	000a8641 	.word	0x000a8641
   8ab44:	20071b08 	.word	0x20071b08
   8ab48:	20071ad4 	.word	0x20071ad4
   8ab4c:	0009b3d5 	.word	0x0009b3d5
   8ab50:	00089fe1 	.word	0x00089fe1
   8ab54:	000a79dd 	.word	0x000a79dd
   8ab58:	000a7fa5 	.word	0x000a7fa5
   8ab5c:	00000000 	.word	0x00000000

0008ab60 <Fine_DutyCorrection>:

Fine_DutyCorrection()                                  // to be fine tuned based on further testing
{
   8ab60:	e92d 4398 	stmdb	sp!, {r3, r4, r7, r8, r9, lr}
   8ab64:	af00      	add	r7, sp, #0
	if (TS2_slope <= TS2_SLOPE1)
   8ab66:	4b88      	ldr	r3, [pc, #544]	; (8ad88 <Fine_DutyCorrection+0x228>)
   8ab68:	681a      	ldr	r2, [r3, #0]
   8ab6a:	4b88      	ldr	r3, [pc, #544]	; (8ad8c <Fine_DutyCorrection+0x22c>)
   8ab6c:	4610      	mov	r0, r2
   8ab6e:	4798      	blx	r3
   8ab70:	4602      	mov	r2, r0
   8ab72:	460b      	mov	r3, r1
   8ab74:	4c86      	ldr	r4, [pc, #536]	; (8ad90 <Fine_DutyCorrection+0x230>)
   8ab76:	4610      	mov	r0, r2
   8ab78:	4619      	mov	r1, r3
   8ab7a:	a37f      	add	r3, pc, #508	; (adr r3, 8ad78 <Fine_DutyCorrection+0x218>)
   8ab7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   8ab80:	47a0      	blx	r4
   8ab82:	4603      	mov	r3, r0
   8ab84:	2b00      	cmp	r3, #0
   8ab86:	d002      	beq.n	8ab8e <Fine_DutyCorrection+0x2e>
	{
		duty_count = 42;												
   8ab88:	4b82      	ldr	r3, [pc, #520]	; (8ad94 <Fine_DutyCorrection+0x234>)
   8ab8a:	222a      	movs	r2, #42	; 0x2a
   8ab8c:	701a      	strb	r2, [r3, #0]
	}
	if ((TS2_slope <= TS2_SLOPE2) && (TS2_slope > TS2_SLOPE1))
   8ab8e:	4b7e      	ldr	r3, [pc, #504]	; (8ad88 <Fine_DutyCorrection+0x228>)
   8ab90:	681a      	ldr	r2, [r3, #0]
   8ab92:	4b7e      	ldr	r3, [pc, #504]	; (8ad8c <Fine_DutyCorrection+0x22c>)
   8ab94:	4610      	mov	r0, r2
   8ab96:	4798      	blx	r3
   8ab98:	4602      	mov	r2, r0
   8ab9a:	460b      	mov	r3, r1
   8ab9c:	4c7c      	ldr	r4, [pc, #496]	; (8ad90 <Fine_DutyCorrection+0x230>)
   8ab9e:	4610      	mov	r0, r2
   8aba0:	4619      	mov	r1, r3
   8aba2:	a377      	add	r3, pc, #476	; (adr r3, 8ad80 <Fine_DutyCorrection+0x220>)
   8aba4:	e9d3 2300 	ldrd	r2, r3, [r3]
   8aba8:	47a0      	blx	r4
   8abaa:	4603      	mov	r3, r0
   8abac:	2b00      	cmp	r3, #0
   8abae:	d013      	beq.n	8abd8 <Fine_DutyCorrection+0x78>
   8abb0:	4b75      	ldr	r3, [pc, #468]	; (8ad88 <Fine_DutyCorrection+0x228>)
   8abb2:	681a      	ldr	r2, [r3, #0]
   8abb4:	4b75      	ldr	r3, [pc, #468]	; (8ad8c <Fine_DutyCorrection+0x22c>)
   8abb6:	4610      	mov	r0, r2
   8abb8:	4798      	blx	r3
   8abba:	4602      	mov	r2, r0
   8abbc:	460b      	mov	r3, r1
   8abbe:	4c76      	ldr	r4, [pc, #472]	; (8ad98 <Fine_DutyCorrection+0x238>)
   8abc0:	4610      	mov	r0, r2
   8abc2:	4619      	mov	r1, r3
   8abc4:	a36c      	add	r3, pc, #432	; (adr r3, 8ad78 <Fine_DutyCorrection+0x218>)
   8abc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   8abca:	47a0      	blx	r4
   8abcc:	4603      	mov	r3, r0
   8abce:	2b00      	cmp	r3, #0
   8abd0:	d002      	beq.n	8abd8 <Fine_DutyCorrection+0x78>
	{
		duty_count = 20;
   8abd2:	4b70      	ldr	r3, [pc, #448]	; (8ad94 <Fine_DutyCorrection+0x234>)
   8abd4:	2214      	movs	r2, #20
   8abd6:	701a      	strb	r2, [r3, #0]
	}
	if (TS2_slope >= TS2_SLOPE2)
   8abd8:	4b6b      	ldr	r3, [pc, #428]	; (8ad88 <Fine_DutyCorrection+0x228>)
   8abda:	681a      	ldr	r2, [r3, #0]
   8abdc:	4b6b      	ldr	r3, [pc, #428]	; (8ad8c <Fine_DutyCorrection+0x22c>)
   8abde:	4610      	mov	r0, r2
   8abe0:	4798      	blx	r3
   8abe2:	4602      	mov	r2, r0
   8abe4:	460b      	mov	r3, r1
   8abe6:	4c6d      	ldr	r4, [pc, #436]	; (8ad9c <Fine_DutyCorrection+0x23c>)
   8abe8:	4610      	mov	r0, r2
   8abea:	4619      	mov	r1, r3
   8abec:	a364      	add	r3, pc, #400	; (adr r3, 8ad80 <Fine_DutyCorrection+0x220>)
   8abee:	e9d3 2300 	ldrd	r2, r3, [r3]
   8abf2:	47a0      	blx	r4
   8abf4:	4603      	mov	r3, r0
   8abf6:	2b00      	cmp	r3, #0
   8abf8:	d002      	beq.n	8ac00 <Fine_DutyCorrection+0xa0>
	{
		duty_count = 4;
   8abfa:	4b66      	ldr	r3, [pc, #408]	; (8ad94 <Fine_DutyCorrection+0x234>)
   8abfc:	2204      	movs	r2, #4
   8abfe:	701a      	strb	r2, [r3, #0]
	}
	
	if (SYSTEM_FLOW == 800)
   8ac00:	4b67      	ldr	r3, [pc, #412]	; (8ada0 <Fine_DutyCorrection+0x240>)
   8ac02:	681b      	ldr	r3, [r3, #0]
   8ac04:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   8ac08:	f040 8150 	bne.w	8aeac <Fine_DutyCorrection+0x34c>
	{
		if ((TS2_Direction == UP ) && (Tmp2Val >= (Prescribed_T2+0.5)) && (Tmp3Val >= (Prescribed_T3+0.5)))     // Gopal added TS3 check as to reduce duty if ts3 goes above 37.5
   8ac0c:	4b65      	ldr	r3, [pc, #404]	; (8ada4 <Fine_DutyCorrection+0x244>)
   8ac0e:	781b      	ldrb	r3, [r3, #0]
   8ac10:	2b00      	cmp	r3, #0
   8ac12:	d152      	bne.n	8acba <Fine_DutyCorrection+0x15a>
   8ac14:	4b64      	ldr	r3, [pc, #400]	; (8ada8 <Fine_DutyCorrection+0x248>)
   8ac16:	681a      	ldr	r2, [r3, #0]
   8ac18:	4b5c      	ldr	r3, [pc, #368]	; (8ad8c <Fine_DutyCorrection+0x22c>)
   8ac1a:	4610      	mov	r0, r2
   8ac1c:	4798      	blx	r3
   8ac1e:	4680      	mov	r8, r0
   8ac20:	4689      	mov	r9, r1
   8ac22:	4b62      	ldr	r3, [pc, #392]	; (8adac <Fine_DutyCorrection+0x24c>)
   8ac24:	681a      	ldr	r2, [r3, #0]
   8ac26:	4b59      	ldr	r3, [pc, #356]	; (8ad8c <Fine_DutyCorrection+0x22c>)
   8ac28:	4610      	mov	r0, r2
   8ac2a:	4798      	blx	r3
   8ac2c:	4602      	mov	r2, r0
   8ac2e:	460b      	mov	r3, r1
   8ac30:	4c5f      	ldr	r4, [pc, #380]	; (8adb0 <Fine_DutyCorrection+0x250>)
   8ac32:	4610      	mov	r0, r2
   8ac34:	4619      	mov	r1, r3
   8ac36:	f04f 0200 	mov.w	r2, #0
   8ac3a:	4b5e      	ldr	r3, [pc, #376]	; (8adb4 <Fine_DutyCorrection+0x254>)
   8ac3c:	47a0      	blx	r4
   8ac3e:	4602      	mov	r2, r0
   8ac40:	460b      	mov	r3, r1
   8ac42:	4c56      	ldr	r4, [pc, #344]	; (8ad9c <Fine_DutyCorrection+0x23c>)
   8ac44:	4640      	mov	r0, r8
   8ac46:	4649      	mov	r1, r9
   8ac48:	47a0      	blx	r4
   8ac4a:	4603      	mov	r3, r0
   8ac4c:	2b00      	cmp	r3, #0
   8ac4e:	d034      	beq.n	8acba <Fine_DutyCorrection+0x15a>
   8ac50:	4b59      	ldr	r3, [pc, #356]	; (8adb8 <Fine_DutyCorrection+0x258>)
   8ac52:	681a      	ldr	r2, [r3, #0]
   8ac54:	4b4d      	ldr	r3, [pc, #308]	; (8ad8c <Fine_DutyCorrection+0x22c>)
   8ac56:	4610      	mov	r0, r2
   8ac58:	4798      	blx	r3
   8ac5a:	4680      	mov	r8, r0
   8ac5c:	4689      	mov	r9, r1
   8ac5e:	4b57      	ldr	r3, [pc, #348]	; (8adbc <Fine_DutyCorrection+0x25c>)
   8ac60:	681a      	ldr	r2, [r3, #0]
   8ac62:	4b4a      	ldr	r3, [pc, #296]	; (8ad8c <Fine_DutyCorrection+0x22c>)
   8ac64:	4610      	mov	r0, r2
   8ac66:	4798      	blx	r3
   8ac68:	4602      	mov	r2, r0
   8ac6a:	460b      	mov	r3, r1
   8ac6c:	4c50      	ldr	r4, [pc, #320]	; (8adb0 <Fine_DutyCorrection+0x250>)
   8ac6e:	4610      	mov	r0, r2
   8ac70:	4619      	mov	r1, r3
   8ac72:	f04f 0200 	mov.w	r2, #0
   8ac76:	4b4f      	ldr	r3, [pc, #316]	; (8adb4 <Fine_DutyCorrection+0x254>)
   8ac78:	47a0      	blx	r4
   8ac7a:	4602      	mov	r2, r0
   8ac7c:	460b      	mov	r3, r1
   8ac7e:	4c47      	ldr	r4, [pc, #284]	; (8ad9c <Fine_DutyCorrection+0x23c>)
   8ac80:	4640      	mov	r0, r8
   8ac82:	4649      	mov	r1, r9
   8ac84:	47a0      	blx	r4
   8ac86:	4603      	mov	r3, r0
   8ac88:	2b00      	cmp	r3, #0
   8ac8a:	d016      	beq.n	8acba <Fine_DutyCorrection+0x15a>
		{
			avg_duty = avg_duty - duty_count;
   8ac8c:	4b4c      	ldr	r3, [pc, #304]	; (8adc0 <Fine_DutyCorrection+0x260>)
   8ac8e:	881b      	ldrh	r3, [r3, #0]
   8ac90:	b29a      	uxth	r2, r3
   8ac92:	4b40      	ldr	r3, [pc, #256]	; (8ad94 <Fine_DutyCorrection+0x234>)
   8ac94:	781b      	ldrb	r3, [r3, #0]
   8ac96:	b29b      	uxth	r3, r3
   8ac98:	1ad3      	subs	r3, r2, r3
   8ac9a:	b29b      	uxth	r3, r3
   8ac9c:	b29a      	uxth	r2, r3
   8ac9e:	4b48      	ldr	r3, [pc, #288]	; (8adc0 <Fine_DutyCorrection+0x260>)
   8aca0:	801a      	strh	r2, [r3, #0]
			
			if ((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8aca2:	4b47      	ldr	r3, [pc, #284]	; (8adc0 <Fine_DutyCorrection+0x260>)
   8aca4:	881b      	ldrh	r3, [r3, #0]
   8aca6:	b21b      	sxth	r3, r3
   8aca8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8acac:	dc04      	bgt.n	8acb8 <Fine_DutyCorrection+0x158>
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
   8acae:	4b44      	ldr	r3, [pc, #272]	; (8adc0 <Fine_DutyCorrection+0x260>)
   8acb0:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8acb4:	801a      	strh	r2, [r3, #0]
	{
		if ((TS2_Direction == UP ) && (Tmp2Val >= (Prescribed_T2+0.5)) && (Tmp3Val >= (Prescribed_T3+0.5)))     // Gopal added TS3 check as to reduce duty if ts3 goes above 37.5
		{
			avg_duty = avg_duty - duty_count;
			
			if ((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8acb6:	e0f8      	b.n	8aeaa <Fine_DutyCorrection+0x34a>
   8acb8:	e0f7      	b.n	8aeaa <Fine_DutyCorrection+0x34a>
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-2)) && (Tmp2Val <= (Prescribed_T2+2.5))) && (Tmp3Val <= (Prescribed_T3+0.5)) )  // Gopal added TS3 check as to increase duty if ts3 goes below 38
   8acba:	4b3a      	ldr	r3, [pc, #232]	; (8ada4 <Fine_DutyCorrection+0x244>)
   8acbc:	781b      	ldrb	r3, [r3, #0]
   8acbe:	2b00      	cmp	r3, #0
   8acc0:	f040 8086 	bne.w	8add0 <Fine_DutyCorrection+0x270>
   8acc4:	4b39      	ldr	r3, [pc, #228]	; (8adac <Fine_DutyCorrection+0x24c>)
   8acc6:	681a      	ldr	r2, [r3, #0]
   8acc8:	4b3e      	ldr	r3, [pc, #248]	; (8adc4 <Fine_DutyCorrection+0x264>)
   8acca:	4610      	mov	r0, r2
   8accc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8acd0:	4798      	blx	r3
   8acd2:	4603      	mov	r3, r0
   8acd4:	4619      	mov	r1, r3
   8acd6:	4b34      	ldr	r3, [pc, #208]	; (8ada8 <Fine_DutyCorrection+0x248>)
   8acd8:	681a      	ldr	r2, [r3, #0]
   8acda:	4b3b      	ldr	r3, [pc, #236]	; (8adc8 <Fine_DutyCorrection+0x268>)
   8acdc:	4608      	mov	r0, r1
   8acde:	4611      	mov	r1, r2
   8ace0:	4798      	blx	r3
   8ace2:	4603      	mov	r3, r0
   8ace4:	2b00      	cmp	r3, #0
   8ace6:	d073      	beq.n	8add0 <Fine_DutyCorrection+0x270>
   8ace8:	4b2f      	ldr	r3, [pc, #188]	; (8ada8 <Fine_DutyCorrection+0x248>)
   8acea:	681a      	ldr	r2, [r3, #0]
   8acec:	4b27      	ldr	r3, [pc, #156]	; (8ad8c <Fine_DutyCorrection+0x22c>)
   8acee:	4610      	mov	r0, r2
   8acf0:	4798      	blx	r3
   8acf2:	4680      	mov	r8, r0
   8acf4:	4689      	mov	r9, r1
   8acf6:	4b2d      	ldr	r3, [pc, #180]	; (8adac <Fine_DutyCorrection+0x24c>)
   8acf8:	681a      	ldr	r2, [r3, #0]
   8acfa:	4b24      	ldr	r3, [pc, #144]	; (8ad8c <Fine_DutyCorrection+0x22c>)
   8acfc:	4610      	mov	r0, r2
   8acfe:	4798      	blx	r3
   8ad00:	4602      	mov	r2, r0
   8ad02:	460b      	mov	r3, r1
   8ad04:	4c2a      	ldr	r4, [pc, #168]	; (8adb0 <Fine_DutyCorrection+0x250>)
   8ad06:	4610      	mov	r0, r2
   8ad08:	4619      	mov	r1, r3
   8ad0a:	f04f 0200 	mov.w	r2, #0
   8ad0e:	4b2f      	ldr	r3, [pc, #188]	; (8adcc <Fine_DutyCorrection+0x26c>)
   8ad10:	47a0      	blx	r4
   8ad12:	4602      	mov	r2, r0
   8ad14:	460b      	mov	r3, r1
   8ad16:	4c1e      	ldr	r4, [pc, #120]	; (8ad90 <Fine_DutyCorrection+0x230>)
   8ad18:	4640      	mov	r0, r8
   8ad1a:	4649      	mov	r1, r9
   8ad1c:	47a0      	blx	r4
   8ad1e:	4603      	mov	r3, r0
   8ad20:	2b00      	cmp	r3, #0
   8ad22:	d055      	beq.n	8add0 <Fine_DutyCorrection+0x270>
   8ad24:	4b24      	ldr	r3, [pc, #144]	; (8adb8 <Fine_DutyCorrection+0x258>)
   8ad26:	681a      	ldr	r2, [r3, #0]
   8ad28:	4b18      	ldr	r3, [pc, #96]	; (8ad8c <Fine_DutyCorrection+0x22c>)
   8ad2a:	4610      	mov	r0, r2
   8ad2c:	4798      	blx	r3
   8ad2e:	4680      	mov	r8, r0
   8ad30:	4689      	mov	r9, r1
   8ad32:	4b22      	ldr	r3, [pc, #136]	; (8adbc <Fine_DutyCorrection+0x25c>)
   8ad34:	681a      	ldr	r2, [r3, #0]
   8ad36:	4b15      	ldr	r3, [pc, #84]	; (8ad8c <Fine_DutyCorrection+0x22c>)
   8ad38:	4610      	mov	r0, r2
   8ad3a:	4798      	blx	r3
   8ad3c:	4602      	mov	r2, r0
   8ad3e:	460b      	mov	r3, r1
   8ad40:	4c1b      	ldr	r4, [pc, #108]	; (8adb0 <Fine_DutyCorrection+0x250>)
   8ad42:	4610      	mov	r0, r2
   8ad44:	4619      	mov	r1, r3
   8ad46:	f04f 0200 	mov.w	r2, #0
   8ad4a:	4b1a      	ldr	r3, [pc, #104]	; (8adb4 <Fine_DutyCorrection+0x254>)
   8ad4c:	47a0      	blx	r4
   8ad4e:	4602      	mov	r2, r0
   8ad50:	460b      	mov	r3, r1
   8ad52:	4c0f      	ldr	r4, [pc, #60]	; (8ad90 <Fine_DutyCorrection+0x230>)
   8ad54:	4640      	mov	r0, r8
   8ad56:	4649      	mov	r1, r9
   8ad58:	47a0      	blx	r4
   8ad5a:	4603      	mov	r3, r0
   8ad5c:	2b00      	cmp	r3, #0
   8ad5e:	d037      	beq.n	8add0 <Fine_DutyCorrection+0x270>
		{																						// earlier value 38 chged on 07082017
			avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8ad60:	4b0c      	ldr	r3, [pc, #48]	; (8ad94 <Fine_DutyCorrection+0x234>)
   8ad62:	781b      	ldrb	r3, [r3, #0]
   8ad64:	b29a      	uxth	r2, r3
   8ad66:	4b16      	ldr	r3, [pc, #88]	; (8adc0 <Fine_DutyCorrection+0x260>)
   8ad68:	881b      	ldrh	r3, [r3, #0]
   8ad6a:	b29b      	uxth	r3, r3
   8ad6c:	4413      	add	r3, r2
   8ad6e:	b29b      	uxth	r3, r3
   8ad70:	b29a      	uxth	r2, r3
   8ad72:	4b13      	ldr	r3, [pc, #76]	; (8adc0 <Fine_DutyCorrection+0x260>)
   8ad74:	801a      	strh	r2, [r3, #0]
   8ad76:	e098      	b.n	8aeaa <Fine_DutyCorrection+0x34a>
   8ad78:	eb851eb8 	.word	0xeb851eb8
   8ad7c:	3f9eb851 	.word	0x3f9eb851
   8ad80:	33333333 	.word	0x33333333
   8ad84:	3fd33333 	.word	0x3fd33333
   8ad88:	20071b04 	.word	0x20071b04
   8ad8c:	000a79dd 	.word	0x000a79dd
   8ad90:	000a7f7d 	.word	0x000a7f7d
   8ad94:	20071b08 	.word	0x20071b08
   8ad98:	000a7fa5 	.word	0x000a7fa5
   8ad9c:	000a7f91 	.word	0x000a7f91
   8ada0:	20070704 	.word	0x20070704
   8ada4:	20072346 	.word	0x20072346
   8ada8:	20071ae4 	.word	0x20071ae4
   8adac:	20072348 	.word	0x20072348
   8adb0:	000a7721 	.word	0x000a7721
   8adb4:	3fe00000 	.word	0x3fe00000
   8adb8:	20071ae8 	.word	0x20071ae8
   8adbc:	20072334 	.word	0x20072334
   8adc0:	20071ad4 	.word	0x20071ad4
   8adc4:	000a80f1 	.word	0x000a80f1
   8adc8:	000a8655 	.word	0x000a8655
   8adcc:	40040000 	.word	0x40040000
		}
		else if ((TS2_Direction == DOWN ) && (Tmp2Val <= (Prescribed_T2+0.5)) )
   8add0:	4b99      	ldr	r3, [pc, #612]	; (8b038 <Fine_DutyCorrection+0x4d8>)
   8add2:	781b      	ldrb	r3, [r3, #0]
   8add4:	2b01      	cmp	r3, #1
   8add6:	d15e      	bne.n	8ae96 <Fine_DutyCorrection+0x336>
   8add8:	4b98      	ldr	r3, [pc, #608]	; (8b03c <Fine_DutyCorrection+0x4dc>)
   8adda:	681a      	ldr	r2, [r3, #0]
   8addc:	4b98      	ldr	r3, [pc, #608]	; (8b040 <Fine_DutyCorrection+0x4e0>)
   8adde:	4610      	mov	r0, r2
   8ade0:	4798      	blx	r3
   8ade2:	4680      	mov	r8, r0
   8ade4:	4689      	mov	r9, r1
   8ade6:	4b97      	ldr	r3, [pc, #604]	; (8b044 <Fine_DutyCorrection+0x4e4>)
   8ade8:	681a      	ldr	r2, [r3, #0]
   8adea:	4b95      	ldr	r3, [pc, #596]	; (8b040 <Fine_DutyCorrection+0x4e0>)
   8adec:	4610      	mov	r0, r2
   8adee:	4798      	blx	r3
   8adf0:	4602      	mov	r2, r0
   8adf2:	460b      	mov	r3, r1
   8adf4:	4c94      	ldr	r4, [pc, #592]	; (8b048 <Fine_DutyCorrection+0x4e8>)
   8adf6:	4610      	mov	r0, r2
   8adf8:	4619      	mov	r1, r3
   8adfa:	f04f 0200 	mov.w	r2, #0
   8adfe:	4b93      	ldr	r3, [pc, #588]	; (8b04c <Fine_DutyCorrection+0x4ec>)
   8ae00:	47a0      	blx	r4
   8ae02:	4602      	mov	r2, r0
   8ae04:	460b      	mov	r3, r1
   8ae06:	4c92      	ldr	r4, [pc, #584]	; (8b050 <Fine_DutyCorrection+0x4f0>)
   8ae08:	4640      	mov	r0, r8
   8ae0a:	4649      	mov	r1, r9
   8ae0c:	47a0      	blx	r4
   8ae0e:	4603      	mov	r3, r0
   8ae10:	2b00      	cmp	r3, #0
   8ae12:	d040      	beq.n	8ae96 <Fine_DutyCorrection+0x336>
		{
		   if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3+0.2))
   8ae14:	4b8f      	ldr	r3, [pc, #572]	; (8b054 <Fine_DutyCorrection+0x4f4>)
   8ae16:	681a      	ldr	r2, [r3, #0]
   8ae18:	4b8f      	ldr	r3, [pc, #572]	; (8b058 <Fine_DutyCorrection+0x4f8>)
   8ae1a:	4610      	mov	r0, r2
   8ae1c:	498f      	ldr	r1, [pc, #572]	; (8b05c <Fine_DutyCorrection+0x4fc>)
   8ae1e:	4798      	blx	r3
   8ae20:	4603      	mov	r3, r0
   8ae22:	2b00      	cmp	r3, #0
   8ae24:	d028      	beq.n	8ae78 <Fine_DutyCorrection+0x318>
   8ae26:	4b8e      	ldr	r3, [pc, #568]	; (8b060 <Fine_DutyCorrection+0x500>)
   8ae28:	681a      	ldr	r2, [r3, #0]
   8ae2a:	4b85      	ldr	r3, [pc, #532]	; (8b040 <Fine_DutyCorrection+0x4e0>)
   8ae2c:	4610      	mov	r0, r2
   8ae2e:	4798      	blx	r3
   8ae30:	4680      	mov	r8, r0
   8ae32:	4689      	mov	r9, r1
   8ae34:	4b8b      	ldr	r3, [pc, #556]	; (8b064 <Fine_DutyCorrection+0x504>)
   8ae36:	681a      	ldr	r2, [r3, #0]
   8ae38:	4b81      	ldr	r3, [pc, #516]	; (8b040 <Fine_DutyCorrection+0x4e0>)
   8ae3a:	4610      	mov	r0, r2
   8ae3c:	4798      	blx	r3
   8ae3e:	4602      	mov	r2, r0
   8ae40:	460b      	mov	r3, r1
   8ae42:	4c81      	ldr	r4, [pc, #516]	; (8b048 <Fine_DutyCorrection+0x4e8>)
   8ae44:	4610      	mov	r0, r2
   8ae46:	4619      	mov	r1, r3
   8ae48:	a377      	add	r3, pc, #476	; (adr r3, 8b028 <Fine_DutyCorrection+0x4c8>)
   8ae4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8ae4e:	47a0      	blx	r4
   8ae50:	4602      	mov	r2, r0
   8ae52:	460b      	mov	r3, r1
   8ae54:	4c84      	ldr	r4, [pc, #528]	; (8b068 <Fine_DutyCorrection+0x508>)
   8ae56:	4640      	mov	r0, r8
   8ae58:	4649      	mov	r1, r9
   8ae5a:	47a0      	blx	r4
   8ae5c:	4603      	mov	r3, r0
   8ae5e:	2b00      	cmp	r3, #0
   8ae60:	d00a      	beq.n	8ae78 <Fine_DutyCorrection+0x318>
			  avg_duty = avg_duty + duty_count;
   8ae62:	4b82      	ldr	r3, [pc, #520]	; (8b06c <Fine_DutyCorrection+0x50c>)
   8ae64:	781b      	ldrb	r3, [r3, #0]
   8ae66:	b29a      	uxth	r2, r3
   8ae68:	4b81      	ldr	r3, [pc, #516]	; (8b070 <Fine_DutyCorrection+0x510>)
   8ae6a:	881b      	ldrh	r3, [r3, #0]
   8ae6c:	b29b      	uxth	r3, r3
   8ae6e:	4413      	add	r3, r2
   8ae70:	b29b      	uxth	r3, r3
   8ae72:	b29a      	uxth	r2, r3
   8ae74:	4b7e      	ldr	r3, [pc, #504]	; (8b070 <Fine_DutyCorrection+0x510>)
   8ae76:	801a      	strh	r2, [r3, #0]
		   if (avg_duty > 2300)  //Sunil limiting to 2300
   8ae78:	4b7d      	ldr	r3, [pc, #500]	; (8b070 <Fine_DutyCorrection+0x510>)
   8ae7a:	881b      	ldrh	r3, [r3, #0]
   8ae7c:	b21b      	sxth	r3, r3
   8ae7e:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8ae82:	4293      	cmp	r3, r2
   8ae84:	dd06      	ble.n	8ae94 <Fine_DutyCorrection+0x334>
			{
				avg_duty = 2300;
   8ae86:	4b7a      	ldr	r3, [pc, #488]	; (8b070 <Fine_DutyCorrection+0x510>)
   8ae88:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8ae8c:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   8ae8e:	4b79      	ldr	r3, [pc, #484]	; (8b074 <Fine_DutyCorrection+0x514>)
   8ae90:	4798      	blx	r3
		}
		else if ((TS2_Direction == DOWN ) && (Tmp2Val <= (Prescribed_T2+0.5)) )
		{
		   if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3+0.2))
			  avg_duty = avg_duty + duty_count;
		   if (avg_duty > 2300)  //Sunil limiting to 2300
   8ae92:	e00a      	b.n	8aeaa <Fine_DutyCorrection+0x34a>
   8ae94:	e009      	b.n	8aeaa <Fine_DutyCorrection+0x34a>
				avg_duty = 2300;
				sv_cntrl_poweroffheater();
				//			HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
   8ae96:	4b68      	ldr	r3, [pc, #416]	; (8b038 <Fine_DutyCorrection+0x4d8>)
   8ae98:	781b      	ldrb	r3, [r3, #0]
   8ae9a:	2b02      	cmp	r3, #2
   8ae9c:	f040 8341 	bne.w	8b522 <Fine_DutyCorrection+0x9c2>
				avg_duty = avg_duty;
   8aea0:	4b73      	ldr	r3, [pc, #460]	; (8b070 <Fine_DutyCorrection+0x510>)
   8aea2:	881a      	ldrh	r2, [r3, #0]
   8aea4:	4b72      	ldr	r3, [pc, #456]	; (8b070 <Fine_DutyCorrection+0x510>)
   8aea6:	801a      	strh	r2, [r3, #0]
   8aea8:	e33b      	b.n	8b522 <Fine_DutyCorrection+0x9c2>
   8aeaa:	e33a      	b.n	8b522 <Fine_DutyCorrection+0x9c2>
	}
	else if (SYSTEM_FLOW == 500)
   8aeac:	4b72      	ldr	r3, [pc, #456]	; (8b078 <Fine_DutyCorrection+0x518>)
   8aeae:	681b      	ldr	r3, [r3, #0]
   8aeb0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   8aeb4:	f040 819c 	bne.w	8b1f0 <Fine_DutyCorrection+0x690>
	{
		if ((TS2_Direction == UP ) && (Tmp2Val >= (Prescribed_T2+0.1)) && (Tmp3Val >= (Prescribed_T3+0.2)))     // Gopal added TS3 check as to reduce duty if ts3 goes above 37.5
   8aeb8:	4b5f      	ldr	r3, [pc, #380]	; (8b038 <Fine_DutyCorrection+0x4d8>)
   8aeba:	781b      	ldrb	r3, [r3, #0]
   8aebc:	2b00      	cmp	r3, #0
   8aebe:	d152      	bne.n	8af66 <Fine_DutyCorrection+0x406>
   8aec0:	4b5e      	ldr	r3, [pc, #376]	; (8b03c <Fine_DutyCorrection+0x4dc>)
   8aec2:	681a      	ldr	r2, [r3, #0]
   8aec4:	4b5e      	ldr	r3, [pc, #376]	; (8b040 <Fine_DutyCorrection+0x4e0>)
   8aec6:	4610      	mov	r0, r2
   8aec8:	4798      	blx	r3
   8aeca:	4680      	mov	r8, r0
   8aecc:	4689      	mov	r9, r1
   8aece:	4b5d      	ldr	r3, [pc, #372]	; (8b044 <Fine_DutyCorrection+0x4e4>)
   8aed0:	681a      	ldr	r2, [r3, #0]
   8aed2:	4b5b      	ldr	r3, [pc, #364]	; (8b040 <Fine_DutyCorrection+0x4e0>)
   8aed4:	4610      	mov	r0, r2
   8aed6:	4798      	blx	r3
   8aed8:	4602      	mov	r2, r0
   8aeda:	460b      	mov	r3, r1
   8aedc:	4c5a      	ldr	r4, [pc, #360]	; (8b048 <Fine_DutyCorrection+0x4e8>)
   8aede:	4610      	mov	r0, r2
   8aee0:	4619      	mov	r1, r3
   8aee2:	a353      	add	r3, pc, #332	; (adr r3, 8b030 <Fine_DutyCorrection+0x4d0>)
   8aee4:	e9d3 2300 	ldrd	r2, r3, [r3]
   8aee8:	47a0      	blx	r4
   8aeea:	4602      	mov	r2, r0
   8aeec:	460b      	mov	r3, r1
   8aeee:	4c63      	ldr	r4, [pc, #396]	; (8b07c <Fine_DutyCorrection+0x51c>)
   8aef0:	4640      	mov	r0, r8
   8aef2:	4649      	mov	r1, r9
   8aef4:	47a0      	blx	r4
   8aef6:	4603      	mov	r3, r0
   8aef8:	2b00      	cmp	r3, #0
   8aefa:	d034      	beq.n	8af66 <Fine_DutyCorrection+0x406>
   8aefc:	4b58      	ldr	r3, [pc, #352]	; (8b060 <Fine_DutyCorrection+0x500>)
   8aefe:	681a      	ldr	r2, [r3, #0]
   8af00:	4b4f      	ldr	r3, [pc, #316]	; (8b040 <Fine_DutyCorrection+0x4e0>)
   8af02:	4610      	mov	r0, r2
   8af04:	4798      	blx	r3
   8af06:	4680      	mov	r8, r0
   8af08:	4689      	mov	r9, r1
   8af0a:	4b56      	ldr	r3, [pc, #344]	; (8b064 <Fine_DutyCorrection+0x504>)
   8af0c:	681a      	ldr	r2, [r3, #0]
   8af0e:	4b4c      	ldr	r3, [pc, #304]	; (8b040 <Fine_DutyCorrection+0x4e0>)
   8af10:	4610      	mov	r0, r2
   8af12:	4798      	blx	r3
   8af14:	4602      	mov	r2, r0
   8af16:	460b      	mov	r3, r1
   8af18:	4c4b      	ldr	r4, [pc, #300]	; (8b048 <Fine_DutyCorrection+0x4e8>)
   8af1a:	4610      	mov	r0, r2
   8af1c:	4619      	mov	r1, r3
   8af1e:	a342      	add	r3, pc, #264	; (adr r3, 8b028 <Fine_DutyCorrection+0x4c8>)
   8af20:	e9d3 2300 	ldrd	r2, r3, [r3]
   8af24:	47a0      	blx	r4
   8af26:	4602      	mov	r2, r0
   8af28:	460b      	mov	r3, r1
   8af2a:	4c54      	ldr	r4, [pc, #336]	; (8b07c <Fine_DutyCorrection+0x51c>)
   8af2c:	4640      	mov	r0, r8
   8af2e:	4649      	mov	r1, r9
   8af30:	47a0      	blx	r4
   8af32:	4603      	mov	r3, r0
   8af34:	2b00      	cmp	r3, #0
   8af36:	d016      	beq.n	8af66 <Fine_DutyCorrection+0x406>
		{
			avg_duty = avg_duty - duty_count;
   8af38:	4b4d      	ldr	r3, [pc, #308]	; (8b070 <Fine_DutyCorrection+0x510>)
   8af3a:	881b      	ldrh	r3, [r3, #0]
   8af3c:	b29a      	uxth	r2, r3
   8af3e:	4b4b      	ldr	r3, [pc, #300]	; (8b06c <Fine_DutyCorrection+0x50c>)
   8af40:	781b      	ldrb	r3, [r3, #0]
   8af42:	b29b      	uxth	r3, r3
   8af44:	1ad3      	subs	r3, r2, r3
   8af46:	b29b      	uxth	r3, r3
   8af48:	b29a      	uxth	r2, r3
   8af4a:	4b49      	ldr	r3, [pc, #292]	; (8b070 <Fine_DutyCorrection+0x510>)
   8af4c:	801a      	strh	r2, [r3, #0]
			
			if ((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8af4e:	4b48      	ldr	r3, [pc, #288]	; (8b070 <Fine_DutyCorrection+0x510>)
   8af50:	881b      	ldrh	r3, [r3, #0]
   8af52:	b21b      	sxth	r3, r3
   8af54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8af58:	dc04      	bgt.n	8af64 <Fine_DutyCorrection+0x404>
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
   8af5a:	4b45      	ldr	r3, [pc, #276]	; (8b070 <Fine_DutyCorrection+0x510>)
   8af5c:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8af60:	801a      	strh	r2, [r3, #0]
	{
		if ((TS2_Direction == UP ) && (Tmp2Val >= (Prescribed_T2+0.1)) && (Tmp3Val >= (Prescribed_T3+0.2)))     // Gopal added TS3 check as to reduce duty if ts3 goes above 37.5
		{
			avg_duty = avg_duty - duty_count;
			
			if ((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8af62:	e140      	b.n	8b1e6 <Fine_DutyCorrection+0x686>
   8af64:	e13f      	b.n	8b1e6 <Fine_DutyCorrection+0x686>
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-2)) && (Tmp2Val <= (Prescribed_T2+0.5))) && (Tmp3Val <= (Prescribed_T3-0.2)) ) 
   8af66:	4b34      	ldr	r3, [pc, #208]	; (8b038 <Fine_DutyCorrection+0x4d8>)
   8af68:	781b      	ldrb	r3, [r3, #0]
   8af6a:	2b00      	cmp	r3, #0
   8af6c:	f040 808c 	bne.w	8b088 <Fine_DutyCorrection+0x528>
   8af70:	4b34      	ldr	r3, [pc, #208]	; (8b044 <Fine_DutyCorrection+0x4e4>)
   8af72:	681a      	ldr	r2, [r3, #0]
   8af74:	4b42      	ldr	r3, [pc, #264]	; (8b080 <Fine_DutyCorrection+0x520>)
   8af76:	4610      	mov	r0, r2
   8af78:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8af7c:	4798      	blx	r3
   8af7e:	4603      	mov	r3, r0
   8af80:	4619      	mov	r1, r3
   8af82:	4b2e      	ldr	r3, [pc, #184]	; (8b03c <Fine_DutyCorrection+0x4dc>)
   8af84:	681a      	ldr	r2, [r3, #0]
   8af86:	4b34      	ldr	r3, [pc, #208]	; (8b058 <Fine_DutyCorrection+0x4f8>)
   8af88:	4608      	mov	r0, r1
   8af8a:	4611      	mov	r1, r2
   8af8c:	4798      	blx	r3
   8af8e:	4603      	mov	r3, r0
   8af90:	2b00      	cmp	r3, #0
   8af92:	d079      	beq.n	8b088 <Fine_DutyCorrection+0x528>
   8af94:	4b29      	ldr	r3, [pc, #164]	; (8b03c <Fine_DutyCorrection+0x4dc>)
   8af96:	681a      	ldr	r2, [r3, #0]
   8af98:	4b29      	ldr	r3, [pc, #164]	; (8b040 <Fine_DutyCorrection+0x4e0>)
   8af9a:	4610      	mov	r0, r2
   8af9c:	4798      	blx	r3
   8af9e:	4680      	mov	r8, r0
   8afa0:	4689      	mov	r9, r1
   8afa2:	4b28      	ldr	r3, [pc, #160]	; (8b044 <Fine_DutyCorrection+0x4e4>)
   8afa4:	681a      	ldr	r2, [r3, #0]
   8afa6:	4b26      	ldr	r3, [pc, #152]	; (8b040 <Fine_DutyCorrection+0x4e0>)
   8afa8:	4610      	mov	r0, r2
   8afaa:	4798      	blx	r3
   8afac:	4602      	mov	r2, r0
   8afae:	460b      	mov	r3, r1
   8afb0:	4c25      	ldr	r4, [pc, #148]	; (8b048 <Fine_DutyCorrection+0x4e8>)
   8afb2:	4610      	mov	r0, r2
   8afb4:	4619      	mov	r1, r3
   8afb6:	f04f 0200 	mov.w	r2, #0
   8afba:	4b24      	ldr	r3, [pc, #144]	; (8b04c <Fine_DutyCorrection+0x4ec>)
   8afbc:	47a0      	blx	r4
   8afbe:	4602      	mov	r2, r0
   8afc0:	460b      	mov	r3, r1
   8afc2:	4c23      	ldr	r4, [pc, #140]	; (8b050 <Fine_DutyCorrection+0x4f0>)
   8afc4:	4640      	mov	r0, r8
   8afc6:	4649      	mov	r1, r9
   8afc8:	47a0      	blx	r4
   8afca:	4603      	mov	r3, r0
   8afcc:	2b00      	cmp	r3, #0
   8afce:	d05b      	beq.n	8b088 <Fine_DutyCorrection+0x528>
   8afd0:	4b23      	ldr	r3, [pc, #140]	; (8b060 <Fine_DutyCorrection+0x500>)
   8afd2:	681a      	ldr	r2, [r3, #0]
   8afd4:	4b1a      	ldr	r3, [pc, #104]	; (8b040 <Fine_DutyCorrection+0x4e0>)
   8afd6:	4610      	mov	r0, r2
   8afd8:	4798      	blx	r3
   8afda:	4680      	mov	r8, r0
   8afdc:	4689      	mov	r9, r1
   8afde:	4b21      	ldr	r3, [pc, #132]	; (8b064 <Fine_DutyCorrection+0x504>)
   8afe0:	681a      	ldr	r2, [r3, #0]
   8afe2:	4b17      	ldr	r3, [pc, #92]	; (8b040 <Fine_DutyCorrection+0x4e0>)
   8afe4:	4610      	mov	r0, r2
   8afe6:	4798      	blx	r3
   8afe8:	4602      	mov	r2, r0
   8afea:	460b      	mov	r3, r1
   8afec:	4c25      	ldr	r4, [pc, #148]	; (8b084 <Fine_DutyCorrection+0x524>)
   8afee:	4610      	mov	r0, r2
   8aff0:	4619      	mov	r1, r3
   8aff2:	a30d      	add	r3, pc, #52	; (adr r3, 8b028 <Fine_DutyCorrection+0x4c8>)
   8aff4:	e9d3 2300 	ldrd	r2, r3, [r3]
   8aff8:	47a0      	blx	r4
   8affa:	4602      	mov	r2, r0
   8affc:	460b      	mov	r3, r1
   8affe:	4c14      	ldr	r4, [pc, #80]	; (8b050 <Fine_DutyCorrection+0x4f0>)
   8b000:	4640      	mov	r0, r8
   8b002:	4649      	mov	r1, r9
   8b004:	47a0      	blx	r4
   8b006:	4603      	mov	r3, r0
   8b008:	2b00      	cmp	r3, #0
   8b00a:	d03d      	beq.n	8b088 <Fine_DutyCorrection+0x528>
		 // Gopal added TS3 check as to increase duty if ts3 goes below 38
		{																                          //38    changed on 07082017
			avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8b00c:	4b17      	ldr	r3, [pc, #92]	; (8b06c <Fine_DutyCorrection+0x50c>)
   8b00e:	781b      	ldrb	r3, [r3, #0]
   8b010:	b29a      	uxth	r2, r3
   8b012:	4b17      	ldr	r3, [pc, #92]	; (8b070 <Fine_DutyCorrection+0x510>)
   8b014:	881b      	ldrh	r3, [r3, #0]
   8b016:	b29b      	uxth	r3, r3
   8b018:	4413      	add	r3, r2
   8b01a:	b29b      	uxth	r3, r3
   8b01c:	b29a      	uxth	r2, r3
   8b01e:	4b14      	ldr	r3, [pc, #80]	; (8b070 <Fine_DutyCorrection+0x510>)
   8b020:	801a      	strh	r2, [r3, #0]
   8b022:	e0e0      	b.n	8b1e6 <Fine_DutyCorrection+0x686>
   8b024:	f3af 8000 	nop.w
   8b028:	9999999a 	.word	0x9999999a
   8b02c:	3fc99999 	.word	0x3fc99999
   8b030:	9999999a 	.word	0x9999999a
   8b034:	3fb99999 	.word	0x3fb99999
   8b038:	20072346 	.word	0x20072346
   8b03c:	20071ae4 	.word	0x20071ae4
   8b040:	000a79dd 	.word	0x000a79dd
   8b044:	20072348 	.word	0x20072348
   8b048:	000a7721 	.word	0x000a7721
   8b04c:	3fe00000 	.word	0x3fe00000
   8b050:	000a7f7d 	.word	0x000a7f7d
   8b054:	20071ae0 	.word	0x20071ae0
   8b058:	000a8655 	.word	0x000a8655
   8b05c:	42100000 	.word	0x42100000
   8b060:	20071ae8 	.word	0x20071ae8
   8b064:	20072334 	.word	0x20072334
   8b068:	000a7f69 	.word	0x000a7f69
   8b06c:	20071b08 	.word	0x20071b08
   8b070:	20071ad4 	.word	0x20071ad4
   8b074:	0009b3d5 	.word	0x0009b3d5
   8b078:	20070704 	.word	0x20070704
   8b07c:	000a7f91 	.word	0x000a7f91
   8b080:	000a80f1 	.word	0x000a80f1
   8b084:	000a771d 	.word	0x000a771d
		}
		else if ((TS2_Direction == DOWN ) && (Tmp2Val <= (Prescribed_T2+0.5)) )  
   8b088:	4b8d      	ldr	r3, [pc, #564]	; (8b2c0 <Fine_DutyCorrection+0x760>)
   8b08a:	781b      	ldrb	r3, [r3, #0]
   8b08c:	2b01      	cmp	r3, #1
   8b08e:	d15e      	bne.n	8b14e <Fine_DutyCorrection+0x5ee>
   8b090:	4b8c      	ldr	r3, [pc, #560]	; (8b2c4 <Fine_DutyCorrection+0x764>)
   8b092:	681a      	ldr	r2, [r3, #0]
   8b094:	4b8c      	ldr	r3, [pc, #560]	; (8b2c8 <Fine_DutyCorrection+0x768>)
   8b096:	4610      	mov	r0, r2
   8b098:	4798      	blx	r3
   8b09a:	4680      	mov	r8, r0
   8b09c:	4689      	mov	r9, r1
   8b09e:	4b8b      	ldr	r3, [pc, #556]	; (8b2cc <Fine_DutyCorrection+0x76c>)
   8b0a0:	681a      	ldr	r2, [r3, #0]
   8b0a2:	4b89      	ldr	r3, [pc, #548]	; (8b2c8 <Fine_DutyCorrection+0x768>)
   8b0a4:	4610      	mov	r0, r2
   8b0a6:	4798      	blx	r3
   8b0a8:	4602      	mov	r2, r0
   8b0aa:	460b      	mov	r3, r1
   8b0ac:	4c88      	ldr	r4, [pc, #544]	; (8b2d0 <Fine_DutyCorrection+0x770>)
   8b0ae:	4610      	mov	r0, r2
   8b0b0:	4619      	mov	r1, r3
   8b0b2:	f04f 0200 	mov.w	r2, #0
   8b0b6:	4b87      	ldr	r3, [pc, #540]	; (8b2d4 <Fine_DutyCorrection+0x774>)
   8b0b8:	47a0      	blx	r4
   8b0ba:	4602      	mov	r2, r0
   8b0bc:	460b      	mov	r3, r1
   8b0be:	4c86      	ldr	r4, [pc, #536]	; (8b2d8 <Fine_DutyCorrection+0x778>)
   8b0c0:	4640      	mov	r0, r8
   8b0c2:	4649      	mov	r1, r9
   8b0c4:	47a0      	blx	r4
   8b0c6:	4603      	mov	r3, r0
   8b0c8:	2b00      	cmp	r3, #0
   8b0ca:	d040      	beq.n	8b14e <Fine_DutyCorrection+0x5ee>
		{
			if ((Tmp1Val <=36)  && (Tmp3Val < Prescribed_T3+0.1 )) // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
   8b0cc:	4b83      	ldr	r3, [pc, #524]	; (8b2dc <Fine_DutyCorrection+0x77c>)
   8b0ce:	681a      	ldr	r2, [r3, #0]
   8b0d0:	4b83      	ldr	r3, [pc, #524]	; (8b2e0 <Fine_DutyCorrection+0x780>)
   8b0d2:	4610      	mov	r0, r2
   8b0d4:	4983      	ldr	r1, [pc, #524]	; (8b2e4 <Fine_DutyCorrection+0x784>)
   8b0d6:	4798      	blx	r3
   8b0d8:	4603      	mov	r3, r0
   8b0da:	2b00      	cmp	r3, #0
   8b0dc:	d028      	beq.n	8b130 <Fine_DutyCorrection+0x5d0>
   8b0de:	4b82      	ldr	r3, [pc, #520]	; (8b2e8 <Fine_DutyCorrection+0x788>)
   8b0e0:	681a      	ldr	r2, [r3, #0]
   8b0e2:	4b79      	ldr	r3, [pc, #484]	; (8b2c8 <Fine_DutyCorrection+0x768>)
   8b0e4:	4610      	mov	r0, r2
   8b0e6:	4798      	blx	r3
   8b0e8:	4680      	mov	r8, r0
   8b0ea:	4689      	mov	r9, r1
   8b0ec:	4b7f      	ldr	r3, [pc, #508]	; (8b2ec <Fine_DutyCorrection+0x78c>)
   8b0ee:	681a      	ldr	r2, [r3, #0]
   8b0f0:	4b75      	ldr	r3, [pc, #468]	; (8b2c8 <Fine_DutyCorrection+0x768>)
   8b0f2:	4610      	mov	r0, r2
   8b0f4:	4798      	blx	r3
   8b0f6:	4602      	mov	r2, r0
   8b0f8:	460b      	mov	r3, r1
   8b0fa:	4c75      	ldr	r4, [pc, #468]	; (8b2d0 <Fine_DutyCorrection+0x770>)
   8b0fc:	4610      	mov	r0, r2
   8b0fe:	4619      	mov	r1, r3
   8b100:	a36b      	add	r3, pc, #428	; (adr r3, 8b2b0 <Fine_DutyCorrection+0x750>)
   8b102:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b106:	47a0      	blx	r4
   8b108:	4602      	mov	r2, r0
   8b10a:	460b      	mov	r3, r1
   8b10c:	4c78      	ldr	r4, [pc, #480]	; (8b2f0 <Fine_DutyCorrection+0x790>)
   8b10e:	4640      	mov	r0, r8
   8b110:	4649      	mov	r1, r9
   8b112:	47a0      	blx	r4
   8b114:	4603      	mov	r3, r0
   8b116:	2b00      	cmp	r3, #0
   8b118:	d00a      	beq.n	8b130 <Fine_DutyCorrection+0x5d0>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8b11a:	4b76      	ldr	r3, [pc, #472]	; (8b2f4 <Fine_DutyCorrection+0x794>)
   8b11c:	781b      	ldrb	r3, [r3, #0]
   8b11e:	b29a      	uxth	r2, r3
   8b120:	4b75      	ldr	r3, [pc, #468]	; (8b2f8 <Fine_DutyCorrection+0x798>)
   8b122:	881b      	ldrh	r3, [r3, #0]
   8b124:	b29b      	uxth	r3, r3
   8b126:	4413      	add	r3, r2
   8b128:	b29b      	uxth	r3, r3
   8b12a:	b29a      	uxth	r2, r3
   8b12c:	4b72      	ldr	r3, [pc, #456]	; (8b2f8 <Fine_DutyCorrection+0x798>)
   8b12e:	801a      	strh	r2, [r3, #0]
			}
			
			if (avg_duty > 2300)  //Sunil limiting to 2300
   8b130:	4b71      	ldr	r3, [pc, #452]	; (8b2f8 <Fine_DutyCorrection+0x798>)
   8b132:	881b      	ldrh	r3, [r3, #0]
   8b134:	b21b      	sxth	r3, r3
   8b136:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8b13a:	4293      	cmp	r3, r2
   8b13c:	dd06      	ble.n	8b14c <Fine_DutyCorrection+0x5ec>
			{
				avg_duty = 2300;
   8b13e:	4b6e      	ldr	r3, [pc, #440]	; (8b2f8 <Fine_DutyCorrection+0x798>)
   8b140:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8b144:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   8b146:	4b6d      	ldr	r3, [pc, #436]	; (8b2fc <Fine_DutyCorrection+0x79c>)
   8b148:	4798      	blx	r3
			if ((Tmp1Val <=36)  && (Tmp3Val < Prescribed_T3+0.1 )) // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
			}
			
			if (avg_duty > 2300)  //Sunil limiting to 2300
   8b14a:	e04c      	b.n	8b1e6 <Fine_DutyCorrection+0x686>
   8b14c:	e04b      	b.n	8b1e6 <Fine_DutyCorrection+0x686>
				avg_duty = 2300;
				sv_cntrl_poweroffheater();
				//			HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
   8b14e:	4b5c      	ldr	r3, [pc, #368]	; (8b2c0 <Fine_DutyCorrection+0x760>)
   8b150:	781b      	ldrb	r3, [r3, #0]
   8b152:	2b02      	cmp	r3, #2
   8b154:	d147      	bne.n	8b1e6 <Fine_DutyCorrection+0x686>
			{
				if (Check_4_Neutralstability())
   8b156:	4b6a      	ldr	r3, [pc, #424]	; (8b300 <Fine_DutyCorrection+0x7a0>)
   8b158:	4798      	blx	r3
   8b15a:	4603      	mov	r3, r0
   8b15c:	2b00      	cmp	r3, #0
   8b15e:	d042      	beq.n	8b1e6 <Fine_DutyCorrection+0x686>
				{
					if ((Tmp3Val - Prescribed_T3) >0.2)
   8b160:	4b61      	ldr	r3, [pc, #388]	; (8b2e8 <Fine_DutyCorrection+0x788>)
   8b162:	6819      	ldr	r1, [r3, #0]
   8b164:	4b61      	ldr	r3, [pc, #388]	; (8b2ec <Fine_DutyCorrection+0x78c>)
   8b166:	681a      	ldr	r2, [r3, #0]
   8b168:	4b66      	ldr	r3, [pc, #408]	; (8b304 <Fine_DutyCorrection+0x7a4>)
   8b16a:	4608      	mov	r0, r1
   8b16c:	4611      	mov	r1, r2
   8b16e:	4798      	blx	r3
   8b170:	4603      	mov	r3, r0
   8b172:	461a      	mov	r2, r3
   8b174:	4b54      	ldr	r3, [pc, #336]	; (8b2c8 <Fine_DutyCorrection+0x768>)
   8b176:	4610      	mov	r0, r2
   8b178:	4798      	blx	r3
   8b17a:	4602      	mov	r2, r0
   8b17c:	460b      	mov	r3, r1
   8b17e:	4c62      	ldr	r4, [pc, #392]	; (8b308 <Fine_DutyCorrection+0x7a8>)
   8b180:	4610      	mov	r0, r2
   8b182:	4619      	mov	r1, r3
   8b184:	a34c      	add	r3, pc, #304	; (adr r3, 8b2b8 <Fine_DutyCorrection+0x758>)
   8b186:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b18a:	47a0      	blx	r4
   8b18c:	4603      	mov	r3, r0
   8b18e:	2b00      	cmp	r3, #0
   8b190:	d008      	beq.n	8b1a4 <Fine_DutyCorrection+0x644>
					{
						avg_duty = avg_duty-6;
   8b192:	4b59      	ldr	r3, [pc, #356]	; (8b2f8 <Fine_DutyCorrection+0x798>)
   8b194:	881b      	ldrh	r3, [r3, #0]
   8b196:	b29b      	uxth	r3, r3
   8b198:	3b06      	subs	r3, #6
   8b19a:	b29b      	uxth	r3, r3
   8b19c:	b29a      	uxth	r2, r3
   8b19e:	4b56      	ldr	r3, [pc, #344]	; (8b2f8 <Fine_DutyCorrection+0x798>)
   8b1a0:	801a      	strh	r2, [r3, #0]
   8b1a2:	e020      	b.n	8b1e6 <Fine_DutyCorrection+0x686>
					}
					else if ((Prescribed_T3- Tmp3Val) >0.2)
   8b1a4:	4b51      	ldr	r3, [pc, #324]	; (8b2ec <Fine_DutyCorrection+0x78c>)
   8b1a6:	6819      	ldr	r1, [r3, #0]
   8b1a8:	4b4f      	ldr	r3, [pc, #316]	; (8b2e8 <Fine_DutyCorrection+0x788>)
   8b1aa:	681a      	ldr	r2, [r3, #0]
   8b1ac:	4b55      	ldr	r3, [pc, #340]	; (8b304 <Fine_DutyCorrection+0x7a4>)
   8b1ae:	4608      	mov	r0, r1
   8b1b0:	4611      	mov	r1, r2
   8b1b2:	4798      	blx	r3
   8b1b4:	4603      	mov	r3, r0
   8b1b6:	461a      	mov	r2, r3
   8b1b8:	4b43      	ldr	r3, [pc, #268]	; (8b2c8 <Fine_DutyCorrection+0x768>)
   8b1ba:	4610      	mov	r0, r2
   8b1bc:	4798      	blx	r3
   8b1be:	4602      	mov	r2, r0
   8b1c0:	460b      	mov	r3, r1
   8b1c2:	4c51      	ldr	r4, [pc, #324]	; (8b308 <Fine_DutyCorrection+0x7a8>)
   8b1c4:	4610      	mov	r0, r2
   8b1c6:	4619      	mov	r1, r3
   8b1c8:	a33b      	add	r3, pc, #236	; (adr r3, 8b2b8 <Fine_DutyCorrection+0x758>)
   8b1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b1ce:	47a0      	blx	r4
   8b1d0:	4603      	mov	r3, r0
   8b1d2:	2b00      	cmp	r3, #0
   8b1d4:	d007      	beq.n	8b1e6 <Fine_DutyCorrection+0x686>
					{
						avg_duty = avg_duty+6;
   8b1d6:	4b48      	ldr	r3, [pc, #288]	; (8b2f8 <Fine_DutyCorrection+0x798>)
   8b1d8:	881b      	ldrh	r3, [r3, #0]
   8b1da:	b29b      	uxth	r3, r3
   8b1dc:	3306      	adds	r3, #6
   8b1de:	b29b      	uxth	r3, r3
   8b1e0:	b29a      	uxth	r2, r3
   8b1e2:	4b45      	ldr	r3, [pc, #276]	; (8b2f8 <Fine_DutyCorrection+0x798>)
   8b1e4:	801a      	strh	r2, [r3, #0]
					}
				}		
			}
		
		
				avg_duty = avg_duty;
   8b1e6:	4b44      	ldr	r3, [pc, #272]	; (8b2f8 <Fine_DutyCorrection+0x798>)
   8b1e8:	881a      	ldrh	r2, [r3, #0]
   8b1ea:	4b43      	ldr	r3, [pc, #268]	; (8b2f8 <Fine_DutyCorrection+0x798>)
   8b1ec:	801a      	strh	r2, [r3, #0]
   8b1ee:	e198      	b.n	8b522 <Fine_DutyCorrection+0x9c2>
	}
	
	
	else if (SYSTEM_FLOW == 300)                                        // Gopal: if the flow rate is set to 300 temperature
   8b1f0:	4b46      	ldr	r3, [pc, #280]	; (8b30c <Fine_DutyCorrection+0x7ac>)
   8b1f2:	681b      	ldr	r3, [r3, #0]
   8b1f4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   8b1f8:	f040 8193 	bne.w	8b522 <Fine_DutyCorrection+0x9c2>
	{
//		if ((TS2_Direction == UP ) && (Tmp2Val >= 39) && (Tmp3Val >= Prescribed_T3))     // Gopal: added TS3 check as to reduce duty if ts3 goes above 37.5
		if (((TS2_Direction == UP)  && (Tmp2Val >= (Prescribed_T2+1))) && (Tmp3Val >= (Prescribed_T3 + 0.1))) // Gopal: added TS3 check as to reduce duty if ts3 goes above 37.5 29072017
   8b1fc:	4b30      	ldr	r3, [pc, #192]	; (8b2c0 <Fine_DutyCorrection+0x760>)
   8b1fe:	781b      	ldrb	r3, [r3, #0]
   8b200:	2b00      	cmp	r3, #0
   8b202:	f040 808b 	bne.w	8b31c <Fine_DutyCorrection+0x7bc>
   8b206:	4b31      	ldr	r3, [pc, #196]	; (8b2cc <Fine_DutyCorrection+0x76c>)
   8b208:	681a      	ldr	r2, [r3, #0]
   8b20a:	4b41      	ldr	r3, [pc, #260]	; (8b310 <Fine_DutyCorrection+0x7b0>)
   8b20c:	4610      	mov	r0, r2
   8b20e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8b212:	4798      	blx	r3
   8b214:	4603      	mov	r3, r0
   8b216:	4619      	mov	r1, r3
   8b218:	4b2a      	ldr	r3, [pc, #168]	; (8b2c4 <Fine_DutyCorrection+0x764>)
   8b21a:	681a      	ldr	r2, [r3, #0]
   8b21c:	4b30      	ldr	r3, [pc, #192]	; (8b2e0 <Fine_DutyCorrection+0x780>)
   8b21e:	4608      	mov	r0, r1
   8b220:	4611      	mov	r1, r2
   8b222:	4798      	blx	r3
   8b224:	4603      	mov	r3, r0
   8b226:	2b00      	cmp	r3, #0
   8b228:	d078      	beq.n	8b31c <Fine_DutyCorrection+0x7bc>
   8b22a:	4b2f      	ldr	r3, [pc, #188]	; (8b2e8 <Fine_DutyCorrection+0x788>)
   8b22c:	681a      	ldr	r2, [r3, #0]
   8b22e:	4b26      	ldr	r3, [pc, #152]	; (8b2c8 <Fine_DutyCorrection+0x768>)
   8b230:	4610      	mov	r0, r2
   8b232:	4798      	blx	r3
   8b234:	4680      	mov	r8, r0
   8b236:	4689      	mov	r9, r1
   8b238:	4b2c      	ldr	r3, [pc, #176]	; (8b2ec <Fine_DutyCorrection+0x78c>)
   8b23a:	681a      	ldr	r2, [r3, #0]
   8b23c:	4b22      	ldr	r3, [pc, #136]	; (8b2c8 <Fine_DutyCorrection+0x768>)
   8b23e:	4610      	mov	r0, r2
   8b240:	4798      	blx	r3
   8b242:	4602      	mov	r2, r0
   8b244:	460b      	mov	r3, r1
   8b246:	4c22      	ldr	r4, [pc, #136]	; (8b2d0 <Fine_DutyCorrection+0x770>)
   8b248:	4610      	mov	r0, r2
   8b24a:	4619      	mov	r1, r3
   8b24c:	a318      	add	r3, pc, #96	; (adr r3, 8b2b0 <Fine_DutyCorrection+0x750>)
   8b24e:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b252:	47a0      	blx	r4
   8b254:	4602      	mov	r2, r0
   8b256:	460b      	mov	r3, r1
   8b258:	4c2e      	ldr	r4, [pc, #184]	; (8b314 <Fine_DutyCorrection+0x7b4>)
   8b25a:	4640      	mov	r0, r8
   8b25c:	4649      	mov	r1, r9
   8b25e:	47a0      	blx	r4
   8b260:	4603      	mov	r3, r0
   8b262:	2b00      	cmp	r3, #0
   8b264:	d05a      	beq.n	8b31c <Fine_DutyCorrection+0x7bc>
									     //Gopal: changed to 41 07092017 ; 
		{                                
			avg_duty = avg_duty - duty_count;
   8b266:	4b24      	ldr	r3, [pc, #144]	; (8b2f8 <Fine_DutyCorrection+0x798>)
   8b268:	881b      	ldrh	r3, [r3, #0]
   8b26a:	b29a      	uxth	r2, r3
   8b26c:	4b21      	ldr	r3, [pc, #132]	; (8b2f4 <Fine_DutyCorrection+0x794>)
   8b26e:	781b      	ldrb	r3, [r3, #0]
   8b270:	b29b      	uxth	r3, r3
   8b272:	1ad3      	subs	r3, r2, r3
   8b274:	b29b      	uxth	r3, r3
   8b276:	b29a      	uxth	r2, r3
   8b278:	4b1f      	ldr	r3, [pc, #124]	; (8b2f8 <Fine_DutyCorrection+0x798>)
   8b27a:	801a      	strh	r2, [r3, #0]
			
			if ((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8b27c:	4b1e      	ldr	r3, [pc, #120]	; (8b2f8 <Fine_DutyCorrection+0x798>)
   8b27e:	881b      	ldrh	r3, [r3, #0]
   8b280:	b21b      	sxth	r3, r3
   8b282:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8b286:	dc10      	bgt.n	8b2aa <Fine_DutyCorrection+0x74a>
   8b288:	4b17      	ldr	r3, [pc, #92]	; (8b2e8 <Fine_DutyCorrection+0x788>)
   8b28a:	6819      	ldr	r1, [r3, #0]
   8b28c:	4b17      	ldr	r3, [pc, #92]	; (8b2ec <Fine_DutyCorrection+0x78c>)
   8b28e:	681a      	ldr	r2, [r3, #0]
   8b290:	4b21      	ldr	r3, [pc, #132]	; (8b318 <Fine_DutyCorrection+0x7b8>)
   8b292:	4608      	mov	r0, r1
   8b294:	4611      	mov	r1, r2
   8b296:	4798      	blx	r3
   8b298:	4603      	mov	r3, r0
   8b29a:	2b00      	cmp	r3, #0
   8b29c:	d100      	bne.n	8b2a0 <Fine_DutyCorrection+0x740>
   8b29e:	e13c      	b.n	8b51a <Fine_DutyCorrection+0x9ba>
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
   8b2a0:	4b15      	ldr	r3, [pc, #84]	; (8b2f8 <Fine_DutyCorrection+0x798>)
   8b2a2:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8b2a6:	801a      	strh	r2, [r3, #0]
		if (((TS2_Direction == UP)  && (Tmp2Val >= (Prescribed_T2+1))) && (Tmp3Val >= (Prescribed_T3 + 0.1))) // Gopal: added TS3 check as to reduce duty if ts3 goes above 37.5 29072017
									     //Gopal: changed to 41 07092017 ; 
		{                                
			avg_duty = avg_duty - duty_count;
			
			if ((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8b2a8:	e137      	b.n	8b51a <Fine_DutyCorrection+0x9ba>
   8b2aa:	e136      	b.n	8b51a <Fine_DutyCorrection+0x9ba>
   8b2ac:	f3af 8000 	nop.w
   8b2b0:	9999999a 	.word	0x9999999a
   8b2b4:	3fb99999 	.word	0x3fb99999
   8b2b8:	9999999a 	.word	0x9999999a
   8b2bc:	3fc99999 	.word	0x3fc99999
   8b2c0:	20072346 	.word	0x20072346
   8b2c4:	20071ae4 	.word	0x20071ae4
   8b2c8:	000a79dd 	.word	0x000a79dd
   8b2cc:	20072348 	.word	0x20072348
   8b2d0:	000a7721 	.word	0x000a7721
   8b2d4:	3fe00000 	.word	0x3fe00000
   8b2d8:	000a7f7d 	.word	0x000a7f7d
   8b2dc:	20071ae0 	.word	0x20071ae0
   8b2e0:	000a8655 	.word	0x000a8655
   8b2e4:	42100000 	.word	0x42100000
   8b2e8:	20071ae8 	.word	0x20071ae8
   8b2ec:	20072334 	.word	0x20072334
   8b2f0:	000a7f69 	.word	0x000a7f69
   8b2f4:	20071b08 	.word	0x20071b08
   8b2f8:	20071ad4 	.word	0x20071ad4
   8b2fc:	0009b3d5 	.word	0x0009b3d5
   8b300:	00089fe1 	.word	0x00089fe1
   8b304:	000a80f1 	.word	0x000a80f1
   8b308:	000a7fa5 	.word	0x000a7fa5
   8b30c:	20070704 	.word	0x20070704
   8b310:	000a80f5 	.word	0x000a80f5
   8b314:	000a7f91 	.word	0x000a7f91
   8b318:	000a8641 	.word	0x000a8641
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-2)) && (Tmp2Val <= (Prescribed_T2+1))) && (Tmp3Val < (Prescribed_T3 +0.2)))
   8b31c:	4b84      	ldr	r3, [pc, #528]	; (8b530 <Fine_DutyCorrection+0x9d0>)
   8b31e:	781b      	ldrb	r3, [r3, #0]
   8b320:	2b00      	cmp	r3, #0
   8b322:	d157      	bne.n	8b3d4 <Fine_DutyCorrection+0x874>
   8b324:	4b83      	ldr	r3, [pc, #524]	; (8b534 <Fine_DutyCorrection+0x9d4>)
   8b326:	681a      	ldr	r2, [r3, #0]
   8b328:	4b83      	ldr	r3, [pc, #524]	; (8b538 <Fine_DutyCorrection+0x9d8>)
   8b32a:	4610      	mov	r0, r2
   8b32c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8b330:	4798      	blx	r3
   8b332:	4603      	mov	r3, r0
   8b334:	4619      	mov	r1, r3
   8b336:	4b81      	ldr	r3, [pc, #516]	; (8b53c <Fine_DutyCorrection+0x9dc>)
   8b338:	681a      	ldr	r2, [r3, #0]
   8b33a:	4b81      	ldr	r3, [pc, #516]	; (8b540 <Fine_DutyCorrection+0x9e0>)
   8b33c:	4608      	mov	r0, r1
   8b33e:	4611      	mov	r1, r2
   8b340:	4798      	blx	r3
   8b342:	4603      	mov	r3, r0
   8b344:	2b00      	cmp	r3, #0
   8b346:	d045      	beq.n	8b3d4 <Fine_DutyCorrection+0x874>
   8b348:	4b7a      	ldr	r3, [pc, #488]	; (8b534 <Fine_DutyCorrection+0x9d4>)
   8b34a:	681a      	ldr	r2, [r3, #0]
   8b34c:	4b7d      	ldr	r3, [pc, #500]	; (8b544 <Fine_DutyCorrection+0x9e4>)
   8b34e:	4610      	mov	r0, r2
   8b350:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8b354:	4798      	blx	r3
   8b356:	4603      	mov	r3, r0
   8b358:	4619      	mov	r1, r3
   8b35a:	4b78      	ldr	r3, [pc, #480]	; (8b53c <Fine_DutyCorrection+0x9dc>)
   8b35c:	681a      	ldr	r2, [r3, #0]
   8b35e:	4b7a      	ldr	r3, [pc, #488]	; (8b548 <Fine_DutyCorrection+0x9e8>)
   8b360:	4608      	mov	r0, r1
   8b362:	4611      	mov	r1, r2
   8b364:	4798      	blx	r3
   8b366:	4603      	mov	r3, r0
   8b368:	2b00      	cmp	r3, #0
   8b36a:	d033      	beq.n	8b3d4 <Fine_DutyCorrection+0x874>
   8b36c:	4b77      	ldr	r3, [pc, #476]	; (8b54c <Fine_DutyCorrection+0x9ec>)
   8b36e:	681a      	ldr	r2, [r3, #0]
   8b370:	4b77      	ldr	r3, [pc, #476]	; (8b550 <Fine_DutyCorrection+0x9f0>)
   8b372:	4610      	mov	r0, r2
   8b374:	4798      	blx	r3
   8b376:	4680      	mov	r8, r0
   8b378:	4689      	mov	r9, r1
   8b37a:	4b76      	ldr	r3, [pc, #472]	; (8b554 <Fine_DutyCorrection+0x9f4>)
   8b37c:	681a      	ldr	r2, [r3, #0]
   8b37e:	4b74      	ldr	r3, [pc, #464]	; (8b550 <Fine_DutyCorrection+0x9f0>)
   8b380:	4610      	mov	r0, r2
   8b382:	4798      	blx	r3
   8b384:	4602      	mov	r2, r0
   8b386:	460b      	mov	r3, r1
   8b388:	4c73      	ldr	r4, [pc, #460]	; (8b558 <Fine_DutyCorrection+0x9f8>)
   8b38a:	4610      	mov	r0, r2
   8b38c:	4619      	mov	r1, r3
   8b38e:	a366      	add	r3, pc, #408	; (adr r3, 8b528 <Fine_DutyCorrection+0x9c8>)
   8b390:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b394:	47a0      	blx	r4
   8b396:	4602      	mov	r2, r0
   8b398:	460b      	mov	r3, r1
   8b39a:	4c70      	ldr	r4, [pc, #448]	; (8b55c <Fine_DutyCorrection+0x9fc>)
   8b39c:	4640      	mov	r0, r8
   8b39e:	4649      	mov	r1, r9
   8b3a0:	47a0      	blx	r4
   8b3a2:	4603      	mov	r3, r0
   8b3a4:	2b00      	cmp	r3, #0
   8b3a6:	d015      	beq.n	8b3d4 <Fine_DutyCorrection+0x874>
		 // Gopal added TS3 check as to increase duty if ts3 goes below 37.2
		{                                                  // 37  41 020817  // CHANGED TO 37 FROM 38 ON 24072017 AS TS1 IS GETTING ALMOST PAR WITH TS3
			//if ((Tmp1Val <=36) && (Tmp2Val <= 39))    // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
			if ((Tmp1Val <=36) )    // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
   8b3a8:	4b6d      	ldr	r3, [pc, #436]	; (8b560 <Fine_DutyCorrection+0xa00>)
   8b3aa:	681a      	ldr	r2, [r3, #0]
   8b3ac:	4b64      	ldr	r3, [pc, #400]	; (8b540 <Fine_DutyCorrection+0x9e0>)
   8b3ae:	4610      	mov	r0, r2
   8b3b0:	496c      	ldr	r1, [pc, #432]	; (8b564 <Fine_DutyCorrection+0xa04>)
   8b3b2:	4798      	blx	r3
   8b3b4:	4603      	mov	r3, r0
   8b3b6:	2b00      	cmp	r3, #0
   8b3b8:	f000 80af 	beq.w	8b51a <Fine_DutyCorrection+0x9ba>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8b3bc:	4b6a      	ldr	r3, [pc, #424]	; (8b568 <Fine_DutyCorrection+0xa08>)
   8b3be:	781b      	ldrb	r3, [r3, #0]
   8b3c0:	b29a      	uxth	r2, r3
   8b3c2:	4b6a      	ldr	r3, [pc, #424]	; (8b56c <Fine_DutyCorrection+0xa0c>)
   8b3c4:	881b      	ldrh	r3, [r3, #0]
   8b3c6:	b29b      	uxth	r3, r3
   8b3c8:	4413      	add	r3, r2
   8b3ca:	b29b      	uxth	r3, r3
   8b3cc:	b29a      	uxth	r2, r3
   8b3ce:	4b67      	ldr	r3, [pc, #412]	; (8b56c <Fine_DutyCorrection+0xa0c>)
   8b3d0:	801a      	strh	r2, [r3, #0]
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-2)) && (Tmp2Val <= (Prescribed_T2+1))) && (Tmp3Val < (Prescribed_T3 +0.2)))
		 // Gopal added TS3 check as to increase duty if ts3 goes below 37.2
		{                                                  // 37  41 020817  // CHANGED TO 37 FROM 38 ON 24072017 AS TS1 IS GETTING ALMOST PAR WITH TS3
			//if ((Tmp1Val <=36) && (Tmp2Val <= 39))    // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
			if ((Tmp1Val <=36) )    // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
   8b3d2:	e0a2      	b.n	8b51a <Fine_DutyCorrection+0x9ba>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
			}
			
		}
		else if ((TS2_Direction == DOWN ) && (Tmp2Val <= (Prescribed_T2+1)) )  // 39.5
   8b3d4:	4b56      	ldr	r3, [pc, #344]	; (8b530 <Fine_DutyCorrection+0x9d0>)
   8b3d6:	781b      	ldrb	r3, [r3, #0]
   8b3d8:	2b01      	cmp	r3, #1
   8b3da:	d152      	bne.n	8b482 <Fine_DutyCorrection+0x922>
   8b3dc:	4b55      	ldr	r3, [pc, #340]	; (8b534 <Fine_DutyCorrection+0x9d4>)
   8b3de:	681a      	ldr	r2, [r3, #0]
   8b3e0:	4b58      	ldr	r3, [pc, #352]	; (8b544 <Fine_DutyCorrection+0x9e4>)
   8b3e2:	4610      	mov	r0, r2
   8b3e4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8b3e8:	4798      	blx	r3
   8b3ea:	4603      	mov	r3, r0
   8b3ec:	4619      	mov	r1, r3
   8b3ee:	4b53      	ldr	r3, [pc, #332]	; (8b53c <Fine_DutyCorrection+0x9dc>)
   8b3f0:	681a      	ldr	r2, [r3, #0]
   8b3f2:	4b55      	ldr	r3, [pc, #340]	; (8b548 <Fine_DutyCorrection+0x9e8>)
   8b3f4:	4608      	mov	r0, r1
   8b3f6:	4611      	mov	r1, r2
   8b3f8:	4798      	blx	r3
   8b3fa:	4603      	mov	r3, r0
   8b3fc:	2b00      	cmp	r3, #0
   8b3fe:	d040      	beq.n	8b482 <Fine_DutyCorrection+0x922>
		{
//			if ((Tmp1Val <=36) && (Tmp2Val <= 39) && (Tmp3Val <= 37.5)) // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
			if ((Tmp1Val <=36)  && (Tmp3Val < Prescribed_T3+0.2 )) // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
   8b400:	4b57      	ldr	r3, [pc, #348]	; (8b560 <Fine_DutyCorrection+0xa00>)
   8b402:	681a      	ldr	r2, [r3, #0]
   8b404:	4b4e      	ldr	r3, [pc, #312]	; (8b540 <Fine_DutyCorrection+0x9e0>)
   8b406:	4610      	mov	r0, r2
   8b408:	4956      	ldr	r1, [pc, #344]	; (8b564 <Fine_DutyCorrection+0xa04>)
   8b40a:	4798      	blx	r3
   8b40c:	4603      	mov	r3, r0
   8b40e:	2b00      	cmp	r3, #0
   8b410:	d028      	beq.n	8b464 <Fine_DutyCorrection+0x904>
   8b412:	4b4e      	ldr	r3, [pc, #312]	; (8b54c <Fine_DutyCorrection+0x9ec>)
   8b414:	681a      	ldr	r2, [r3, #0]
   8b416:	4b4e      	ldr	r3, [pc, #312]	; (8b550 <Fine_DutyCorrection+0x9f0>)
   8b418:	4610      	mov	r0, r2
   8b41a:	4798      	blx	r3
   8b41c:	4680      	mov	r8, r0
   8b41e:	4689      	mov	r9, r1
   8b420:	4b4c      	ldr	r3, [pc, #304]	; (8b554 <Fine_DutyCorrection+0x9f4>)
   8b422:	681a      	ldr	r2, [r3, #0]
   8b424:	4b4a      	ldr	r3, [pc, #296]	; (8b550 <Fine_DutyCorrection+0x9f0>)
   8b426:	4610      	mov	r0, r2
   8b428:	4798      	blx	r3
   8b42a:	4602      	mov	r2, r0
   8b42c:	460b      	mov	r3, r1
   8b42e:	4c4a      	ldr	r4, [pc, #296]	; (8b558 <Fine_DutyCorrection+0x9f8>)
   8b430:	4610      	mov	r0, r2
   8b432:	4619      	mov	r1, r3
   8b434:	a33c      	add	r3, pc, #240	; (adr r3, 8b528 <Fine_DutyCorrection+0x9c8>)
   8b436:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b43a:	47a0      	blx	r4
   8b43c:	4602      	mov	r2, r0
   8b43e:	460b      	mov	r3, r1
   8b440:	4c46      	ldr	r4, [pc, #280]	; (8b55c <Fine_DutyCorrection+0x9fc>)
   8b442:	4640      	mov	r0, r8
   8b444:	4649      	mov	r1, r9
   8b446:	47a0      	blx	r4
   8b448:	4603      	mov	r3, r0
   8b44a:	2b00      	cmp	r3, #0
   8b44c:	d00a      	beq.n	8b464 <Fine_DutyCorrection+0x904>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8b44e:	4b46      	ldr	r3, [pc, #280]	; (8b568 <Fine_DutyCorrection+0xa08>)
   8b450:	781b      	ldrb	r3, [r3, #0]
   8b452:	b29a      	uxth	r2, r3
   8b454:	4b45      	ldr	r3, [pc, #276]	; (8b56c <Fine_DutyCorrection+0xa0c>)
   8b456:	881b      	ldrh	r3, [r3, #0]
   8b458:	b29b      	uxth	r3, r3
   8b45a:	4413      	add	r3, r2
   8b45c:	b29b      	uxth	r3, r3
   8b45e:	b29a      	uxth	r2, r3
   8b460:	4b42      	ldr	r3, [pc, #264]	; (8b56c <Fine_DutyCorrection+0xa0c>)
   8b462:	801a      	strh	r2, [r3, #0]
			}
			
			if (avg_duty > 2500)  //Sunil limiting to 2300
   8b464:	4b41      	ldr	r3, [pc, #260]	; (8b56c <Fine_DutyCorrection+0xa0c>)
   8b466:	881b      	ldrh	r3, [r3, #0]
   8b468:	b21b      	sxth	r3, r3
   8b46a:	f640 12c4 	movw	r2, #2500	; 0x9c4
   8b46e:	4293      	cmp	r3, r2
   8b470:	dd06      	ble.n	8b480 <Fine_DutyCorrection+0x920>
			{
				avg_duty = 2500;
   8b472:	4b3e      	ldr	r3, [pc, #248]	; (8b56c <Fine_DutyCorrection+0xa0c>)
   8b474:	f640 12c4 	movw	r2, #2500	; 0x9c4
   8b478:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   8b47a:	4b3d      	ldr	r3, [pc, #244]	; (8b570 <Fine_DutyCorrection+0xa10>)
   8b47c:	4798      	blx	r3
			if ((Tmp1Val <=36)  && (Tmp3Val < Prescribed_T3+0.2 )) // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
			}
			
			if (avg_duty > 2500)  //Sunil limiting to 2300
   8b47e:	e04c      	b.n	8b51a <Fine_DutyCorrection+0x9ba>
   8b480:	e04b      	b.n	8b51a <Fine_DutyCorrection+0x9ba>
				avg_duty = 2500;
				sv_cntrl_poweroffheater();
				//			HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
   8b482:	4b2b      	ldr	r3, [pc, #172]	; (8b530 <Fine_DutyCorrection+0x9d0>)
   8b484:	781b      	ldrb	r3, [r3, #0]
   8b486:	2b02      	cmp	r3, #2
   8b488:	d147      	bne.n	8b51a <Fine_DutyCorrection+0x9ba>
		{
				
			if (Check_4_Neutralstability())
   8b48a:	4b3a      	ldr	r3, [pc, #232]	; (8b574 <Fine_DutyCorrection+0xa14>)
   8b48c:	4798      	blx	r3
   8b48e:	4603      	mov	r3, r0
   8b490:	2b00      	cmp	r3, #0
   8b492:	d042      	beq.n	8b51a <Fine_DutyCorrection+0x9ba>
			{
				if ((Tmp3Val - Prescribed_T3) >0.2)
   8b494:	4b2d      	ldr	r3, [pc, #180]	; (8b54c <Fine_DutyCorrection+0x9ec>)
   8b496:	6819      	ldr	r1, [r3, #0]
   8b498:	4b2e      	ldr	r3, [pc, #184]	; (8b554 <Fine_DutyCorrection+0x9f4>)
   8b49a:	681a      	ldr	r2, [r3, #0]
   8b49c:	4b26      	ldr	r3, [pc, #152]	; (8b538 <Fine_DutyCorrection+0x9d8>)
   8b49e:	4608      	mov	r0, r1
   8b4a0:	4611      	mov	r1, r2
   8b4a2:	4798      	blx	r3
   8b4a4:	4603      	mov	r3, r0
   8b4a6:	461a      	mov	r2, r3
   8b4a8:	4b29      	ldr	r3, [pc, #164]	; (8b550 <Fine_DutyCorrection+0x9f0>)
   8b4aa:	4610      	mov	r0, r2
   8b4ac:	4798      	blx	r3
   8b4ae:	4602      	mov	r2, r0
   8b4b0:	460b      	mov	r3, r1
   8b4b2:	4c31      	ldr	r4, [pc, #196]	; (8b578 <Fine_DutyCorrection+0xa18>)
   8b4b4:	4610      	mov	r0, r2
   8b4b6:	4619      	mov	r1, r3
   8b4b8:	a31b      	add	r3, pc, #108	; (adr r3, 8b528 <Fine_DutyCorrection+0x9c8>)
   8b4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b4be:	47a0      	blx	r4
   8b4c0:	4603      	mov	r3, r0
   8b4c2:	2b00      	cmp	r3, #0
   8b4c4:	d008      	beq.n	8b4d8 <Fine_DutyCorrection+0x978>
				{
					avg_duty = avg_duty-6;
   8b4c6:	4b29      	ldr	r3, [pc, #164]	; (8b56c <Fine_DutyCorrection+0xa0c>)
   8b4c8:	881b      	ldrh	r3, [r3, #0]
   8b4ca:	b29b      	uxth	r3, r3
   8b4cc:	3b06      	subs	r3, #6
   8b4ce:	b29b      	uxth	r3, r3
   8b4d0:	b29a      	uxth	r2, r3
   8b4d2:	4b26      	ldr	r3, [pc, #152]	; (8b56c <Fine_DutyCorrection+0xa0c>)
   8b4d4:	801a      	strh	r2, [r3, #0]
   8b4d6:	e020      	b.n	8b51a <Fine_DutyCorrection+0x9ba>
				}
				else if ((Prescribed_T3- Tmp3Val) >0.2)
   8b4d8:	4b1e      	ldr	r3, [pc, #120]	; (8b554 <Fine_DutyCorrection+0x9f4>)
   8b4da:	6819      	ldr	r1, [r3, #0]
   8b4dc:	4b1b      	ldr	r3, [pc, #108]	; (8b54c <Fine_DutyCorrection+0x9ec>)
   8b4de:	681a      	ldr	r2, [r3, #0]
   8b4e0:	4b15      	ldr	r3, [pc, #84]	; (8b538 <Fine_DutyCorrection+0x9d8>)
   8b4e2:	4608      	mov	r0, r1
   8b4e4:	4611      	mov	r1, r2
   8b4e6:	4798      	blx	r3
   8b4e8:	4603      	mov	r3, r0
   8b4ea:	461a      	mov	r2, r3
   8b4ec:	4b18      	ldr	r3, [pc, #96]	; (8b550 <Fine_DutyCorrection+0x9f0>)
   8b4ee:	4610      	mov	r0, r2
   8b4f0:	4798      	blx	r3
   8b4f2:	4602      	mov	r2, r0
   8b4f4:	460b      	mov	r3, r1
   8b4f6:	4c20      	ldr	r4, [pc, #128]	; (8b578 <Fine_DutyCorrection+0xa18>)
   8b4f8:	4610      	mov	r0, r2
   8b4fa:	4619      	mov	r1, r3
   8b4fc:	a30a      	add	r3, pc, #40	; (adr r3, 8b528 <Fine_DutyCorrection+0x9c8>)
   8b4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b502:	47a0      	blx	r4
   8b504:	4603      	mov	r3, r0
   8b506:	2b00      	cmp	r3, #0
   8b508:	d007      	beq.n	8b51a <Fine_DutyCorrection+0x9ba>
				{
					avg_duty = avg_duty+6;
   8b50a:	4b18      	ldr	r3, [pc, #96]	; (8b56c <Fine_DutyCorrection+0xa0c>)
   8b50c:	881b      	ldrh	r3, [r3, #0]
   8b50e:	b29b      	uxth	r3, r3
   8b510:	3306      	adds	r3, #6
   8b512:	b29b      	uxth	r3, r3
   8b514:	b29a      	uxth	r2, r3
   8b516:	4b15      	ldr	r3, [pc, #84]	; (8b56c <Fine_DutyCorrection+0xa0c>)
   8b518:	801a      	strh	r2, [r3, #0]
				}
			}
			

		}
	  avg_duty = avg_duty;
   8b51a:	4b14      	ldr	r3, [pc, #80]	; (8b56c <Fine_DutyCorrection+0xa0c>)
   8b51c:	881a      	ldrh	r2, [r3, #0]
   8b51e:	4b13      	ldr	r3, [pc, #76]	; (8b56c <Fine_DutyCorrection+0xa0c>)
   8b520:	801a      	strh	r2, [r3, #0]
	}
	
}
   8b522:	e8bd 8398 	ldmia.w	sp!, {r3, r4, r7, r8, r9, pc}
   8b526:	bf00      	nop
   8b528:	9999999a 	.word	0x9999999a
   8b52c:	3fc99999 	.word	0x3fc99999
   8b530:	20072346 	.word	0x20072346
   8b534:	20072348 	.word	0x20072348
   8b538:	000a80f1 	.word	0x000a80f1
   8b53c:	20071ae4 	.word	0x20071ae4
   8b540:	000a8655 	.word	0x000a8655
   8b544:	000a80f5 	.word	0x000a80f5
   8b548:	000a8669 	.word	0x000a8669
   8b54c:	20071ae8 	.word	0x20071ae8
   8b550:	000a79dd 	.word	0x000a79dd
   8b554:	20072334 	.word	0x20072334
   8b558:	000a7721 	.word	0x000a7721
   8b55c:	000a7f69 	.word	0x000a7f69
   8b560:	20071ae0 	.word	0x20071ae0
   8b564:	42100000 	.word	0x42100000
   8b568:	20071b08 	.word	0x20071b08
   8b56c:	20071ad4 	.word	0x20071ad4
   8b570:	0009b3d5 	.word	0x0009b3d5
   8b574:	00089fe1 	.word	0x00089fe1
   8b578:	000a7fa5 	.word	0x000a7fa5

0008b57c <DataDisplay>:

DataDisplay()
{
   8b57c:	b580      	push	{r7, lr}
   8b57e:	b082      	sub	sp, #8
   8b580:	af00      	add	r7, sp, #0
	//************************************** display
	cl_Datastreamtype cl_tdata;
	cl_tdata.word = 0;
   8b582:	2300      	movs	r3, #0
   8b584:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	//cl_tdata.Twobyte = mid_meantemp2;
	cl_tdata.Twobyte = Tmp1Val;
   8b586:	4b22      	ldr	r3, [pc, #136]	; (8b610 <DataDisplay+0x94>)
   8b588:	681a      	ldr	r2, [r3, #0]
   8b58a:	4b22      	ldr	r3, [pc, #136]	; (8b614 <DataDisplay+0x98>)
   8b58c:	4610      	mov	r0, r2
   8b58e:	4798      	blx	r3
   8b590:	4603      	mov	r3, r0
   8b592:	b29b      	uxth	r3, r3
   8b594:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 4;
   8b596:	2304      	movs	r3, #4
   8b598:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8b59a:	1d3b      	adds	r3, r7, #4
   8b59c:	2037      	movs	r0, #55	; 0x37
   8b59e:	4619      	mov	r1, r3
   8b5a0:	2204      	movs	r2, #4
   8b5a2:	4b1d      	ldr	r3, [pc, #116]	; (8b618 <DataDisplay+0x9c>)
   8b5a4:	4798      	blx	r3
	
	cl_tdata.word = 0;
   8b5a6:	2300      	movs	r3, #0
   8b5a8:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	//cl_tdata.Twobyte = mid_meantemp2;
	cl_tdata.Twobyte = Tmp2Val;
   8b5aa:	4b1c      	ldr	r3, [pc, #112]	; (8b61c <DataDisplay+0xa0>)
   8b5ac:	681a      	ldr	r2, [r3, #0]
   8b5ae:	4b19      	ldr	r3, [pc, #100]	; (8b614 <DataDisplay+0x98>)
   8b5b0:	4610      	mov	r0, r2
   8b5b2:	4798      	blx	r3
   8b5b4:	4603      	mov	r3, r0
   8b5b6:	b29b      	uxth	r3, r3
   8b5b8:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 5;
   8b5ba:	2305      	movs	r3, #5
   8b5bc:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8b5be:	1d3b      	adds	r3, r7, #4
   8b5c0:	2037      	movs	r0, #55	; 0x37
   8b5c2:	4619      	mov	r1, r3
   8b5c4:	2204      	movs	r2, #4
   8b5c6:	4b14      	ldr	r3, [pc, #80]	; (8b618 <DataDisplay+0x9c>)
   8b5c8:	4798      	blx	r3
	
	cl_tdata.word = 0;
   8b5ca:	2300      	movs	r3, #0
   8b5cc:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	//cl_tdata.Twobyte = mid_meantemp2;
	cl_tdata.Twobyte = Tmp3Val;
   8b5ce:	4b14      	ldr	r3, [pc, #80]	; (8b620 <DataDisplay+0xa4>)
   8b5d0:	681a      	ldr	r2, [r3, #0]
   8b5d2:	4b10      	ldr	r3, [pc, #64]	; (8b614 <DataDisplay+0x98>)
   8b5d4:	4610      	mov	r0, r2
   8b5d6:	4798      	blx	r3
   8b5d8:	4603      	mov	r3, r0
   8b5da:	b29b      	uxth	r3, r3
   8b5dc:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 6;
   8b5de:	2306      	movs	r3, #6
   8b5e0:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8b5e2:	1d3b      	adds	r3, r7, #4
   8b5e4:	2037      	movs	r0, #55	; 0x37
   8b5e6:	4619      	mov	r1, r3
   8b5e8:	2204      	movs	r2, #4
   8b5ea:	4b0b      	ldr	r3, [pc, #44]	; (8b618 <DataDisplay+0x9c>)
   8b5ec:	4798      	blx	r3
	
	cl_tdata.word = 0;
   8b5ee:	2300      	movs	r3, #0
   8b5f0:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	cl_tdata.Twobyte = avg_duty;
   8b5f2:	4b0c      	ldr	r3, [pc, #48]	; (8b624 <DataDisplay+0xa8>)
   8b5f4:	881b      	ldrh	r3, [r3, #0]
   8b5f6:	b29b      	uxth	r3, r3
   8b5f8:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 7;
   8b5fa:	2307      	movs	r3, #7
   8b5fc:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8b5fe:	1d3b      	adds	r3, r7, #4
   8b600:	2037      	movs	r0, #55	; 0x37
   8b602:	4619      	mov	r1, r3
   8b604:	2204      	movs	r2, #4
   8b606:	4b04      	ldr	r3, [pc, #16]	; (8b618 <DataDisplay+0x9c>)
   8b608:	4798      	blx	r3
// 	cl_tdata.Twobyte = TS2_slope * 100;
// 	cl_tdata.bytearray[2] = 15;
// 	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
	
//****************************************
}
   8b60a:	3708      	adds	r7, #8
   8b60c:	46bd      	mov	sp, r7
   8b60e:	bd80      	pop	{r7, pc}
   8b610:	20071ae0 	.word	0x20071ae0
   8b614:	000a86dd 	.word	0x000a86dd
   8b618:	0009d1e9 	.word	0x0009d1e9
   8b61c:	20071ae4 	.word	0x20071ae4
   8b620:	20071ae8 	.word	0x20071ae8
   8b624:	20071ad4 	.word	0x20071ad4

0008b628 <Hot_Rinse>:


void Hot_Rinse()
{
   8b628:	b590      	push	{r4, r7, lr}
   8b62a:	b083      	sub	sp, #12
   8b62c:	af00      	add	r7, sp, #0
		int16_t sensordata;
		
		count_500ms ++;
   8b62e:	4b87      	ldr	r3, [pc, #540]	; (8b84c <Hot_Rinse+0x224>)
   8b630:	881b      	ldrh	r3, [r3, #0]
   8b632:	3301      	adds	r3, #1
   8b634:	b29a      	uxth	r2, r3
   8b636:	4b85      	ldr	r3, [pc, #532]	; (8b84c <Hot_Rinse+0x224>)
   8b638:	801a      	strh	r2, [r3, #0]
		if (count_500ms > 600)
   8b63a:	4b84      	ldr	r3, [pc, #528]	; (8b84c <Hot_Rinse+0x224>)
   8b63c:	881b      	ldrh	r3, [r3, #0]
   8b63e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   8b642:	d902      	bls.n	8b64a <Hot_Rinse+0x22>
		{
			flag_5min =1;
   8b644:	4b82      	ldr	r3, [pc, #520]	; (8b850 <Hot_Rinse+0x228>)
   8b646:	2201      	movs	r2, #1
   8b648:	701a      	strb	r2, [r3, #0]
		}
		if(HeaterState == CL_HEATER_STATE_OFF  )
   8b64a:	4b82      	ldr	r3, [pc, #520]	; (8b854 <Hot_Rinse+0x22c>)
   8b64c:	781b      	ldrb	r3, [r3, #0]
   8b64e:	2b04      	cmp	r3, #4
   8b650:	d102      	bne.n	8b658 <Hot_Rinse+0x30>
		{
			sv_cntrl_poweroffheater();
   8b652:	4b81      	ldr	r3, [pc, #516]	; (8b858 <Hot_Rinse+0x230>)
   8b654:	4798      	blx	r3
			return;
   8b656:	e0f6      	b.n	8b846 <Hot_Rinse+0x21e>
		}
		if((HeaterState == CL_HEATER_STATE_INACTIVE) || (HeaterState == CL_HEATER_SUBSTATE_OFF))
   8b658:	4b7e      	ldr	r3, [pc, #504]	; (8b854 <Hot_Rinse+0x22c>)
   8b65a:	781b      	ldrb	r3, [r3, #0]
   8b65c:	2b00      	cmp	r3, #0
   8b65e:	d003      	beq.n	8b668 <Hot_Rinse+0x40>
   8b660:	4b7c      	ldr	r3, [pc, #496]	; (8b854 <Hot_Rinse+0x22c>)
   8b662:	781b      	ldrb	r3, [r3, #0]
   8b664:	2b00      	cmp	r3, #0
   8b666:	d100      	bne.n	8b66a <Hot_Rinse+0x42>
		{
			return;
   8b668:	e0ed      	b.n	8b846 <Hot_Rinse+0x21e>
		}
		//avg_duty is set to value 2240 for TS3 = 37.4 at global level
		
		
		if(HeaterState == CL_HEATER_STATE_ON)
   8b66a:	4b7a      	ldr	r3, [pc, #488]	; (8b854 <Hot_Rinse+0x22c>)
   8b66c:	781b      	ldrb	r3, [r3, #0]
   8b66e:	2b01      	cmp	r3, #1
   8b670:	d107      	bne.n	8b682 <Hot_Rinse+0x5a>
		{
			sv_cntrl_poweronheater();
   8b672:	4b7a      	ldr	r3, [pc, #488]	; (8b85c <Hot_Rinse+0x234>)
   8b674:	4798      	blx	r3
			sv_cntrl_incheater(avg_duty);
   8b676:	4b7a      	ldr	r3, [pc, #488]	; (8b860 <Hot_Rinse+0x238>)
   8b678:	881b      	ldrh	r3, [r3, #0]
   8b67a:	b21b      	sxth	r3, r3
   8b67c:	4618      	mov	r0, r3
   8b67e:	4b79      	ldr	r3, [pc, #484]	; (8b864 <Hot_Rinse+0x23c>)
   8b680:	4798      	blx	r3
// 			Tmp1Val = res_temp_value/100;                                      // Temp1 value in XX.yy format
// 			Tmp1Val = Tmp1Val - 2.5 + 1.2;
// 		}
// 		
// 		if (!(count_500ms %40))
		Tmp2Val_prev = Tmp2Val;  //For calculating if TS2 stable, read once in every 2 sec
   8b682:	4b79      	ldr	r3, [pc, #484]	; (8b868 <Hot_Rinse+0x240>)
   8b684:	681b      	ldr	r3, [r3, #0]
   8b686:	4a79      	ldr	r2, [pc, #484]	; (8b86c <Hot_Rinse+0x244>)
   8b688:	6013      	str	r3, [r2, #0]
		
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);     // sensor data of T2
   8b68a:	1dbb      	adds	r3, r7, #6
   8b68c:	2013      	movs	r0, #19
   8b68e:	4619      	mov	r1, r3
   8b690:	4b77      	ldr	r3, [pc, #476]	; (8b870 <Hot_Rinse+0x248>)
   8b692:	4798      	blx	r3
// 			uint16_t cal_data  = (402 *100* sensordata)/(2*32768);			   // resistance of PT100
// 			res_temp_lookuptable(cal_data);									   // temperature from look up table in 4 digits
// 			Tmp2Val = res_temp_value/100;									   // Temp2 value in XX.yy format
// 			Tmp2Val = Tmp2Val - - 0.4;                                     // sensor offset

			Tmp2Val = (Tmp2Val*9+ (float)sensordata/100)/10;
   8b694:	4b74      	ldr	r3, [pc, #464]	; (8b868 <Hot_Rinse+0x240>)
   8b696:	681a      	ldr	r2, [r3, #0]
   8b698:	4b76      	ldr	r3, [pc, #472]	; (8b874 <Hot_Rinse+0x24c>)
   8b69a:	4610      	mov	r0, r2
   8b69c:	4976      	ldr	r1, [pc, #472]	; (8b878 <Hot_Rinse+0x250>)
   8b69e:	4798      	blx	r3
   8b6a0:	4603      	mov	r3, r0
   8b6a2:	461c      	mov	r4, r3
   8b6a4:	88fb      	ldrh	r3, [r7, #6]
   8b6a6:	b21a      	sxth	r2, r3
   8b6a8:	4b74      	ldr	r3, [pc, #464]	; (8b87c <Hot_Rinse+0x254>)
   8b6aa:	4610      	mov	r0, r2
   8b6ac:	4798      	blx	r3
   8b6ae:	4602      	mov	r2, r0
   8b6b0:	4b73      	ldr	r3, [pc, #460]	; (8b880 <Hot_Rinse+0x258>)
   8b6b2:	4610      	mov	r0, r2
   8b6b4:	4973      	ldr	r1, [pc, #460]	; (8b884 <Hot_Rinse+0x25c>)
   8b6b6:	4798      	blx	r3
   8b6b8:	4603      	mov	r3, r0
   8b6ba:	461a      	mov	r2, r3
   8b6bc:	4b72      	ldr	r3, [pc, #456]	; (8b888 <Hot_Rinse+0x260>)
   8b6be:	4620      	mov	r0, r4
   8b6c0:	4611      	mov	r1, r2
   8b6c2:	4798      	blx	r3
   8b6c4:	4603      	mov	r3, r0
   8b6c6:	461a      	mov	r2, r3
   8b6c8:	4b6d      	ldr	r3, [pc, #436]	; (8b880 <Hot_Rinse+0x258>)
   8b6ca:	4610      	mov	r0, r2
   8b6cc:	496f      	ldr	r1, [pc, #444]	; (8b88c <Hot_Rinse+0x264>)
   8b6ce:	4798      	blx	r3
   8b6d0:	4603      	mov	r3, r0
   8b6d2:	461a      	mov	r2, r3
   8b6d4:	4b64      	ldr	r3, [pc, #400]	; (8b868 <Hot_Rinse+0x240>)
   8b6d6:	601a      	str	r2, [r3, #0]
//			Tmp2Val = (float)sensordata/100;
		}
		
		if (!(count_500ms %20))
   8b6d8:	4b5c      	ldr	r3, [pc, #368]	; (8b84c <Hot_Rinse+0x224>)
   8b6da:	881a      	ldrh	r2, [r3, #0]
   8b6dc:	4b6c      	ldr	r3, [pc, #432]	; (8b890 <Hot_Rinse+0x268>)
   8b6de:	fba3 1302 	umull	r1, r3, r3, r2
   8b6e2:	0919      	lsrs	r1, r3, #4
   8b6e4:	460b      	mov	r3, r1
   8b6e6:	009b      	lsls	r3, r3, #2
   8b6e8:	440b      	add	r3, r1
   8b6ea:	009b      	lsls	r3, r3, #2
   8b6ec:	1ad3      	subs	r3, r2, r3
   8b6ee:	b29b      	uxth	r3, r3
   8b6f0:	2b00      	cmp	r3, #0
   8b6f2:	d103      	bne.n	8b6fc <Hot_Rinse+0xd4>
		{
			Tmp3Val_prev = Tmp3Val;		//Sunil: Used for checking TS3 stability
   8b6f4:	4b67      	ldr	r3, [pc, #412]	; (8b894 <Hot_Rinse+0x26c>)
   8b6f6:	681b      	ldr	r3, [r3, #0]
   8b6f8:	4a67      	ldr	r2, [pc, #412]	; (8b898 <Hot_Rinse+0x270>)
   8b6fa:	6013      	str	r3, [r2, #0]
		}
		
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);                 // sensor data of T3
   8b6fc:	1dbb      	adds	r3, r7, #6
   8b6fe:	2014      	movs	r0, #20
   8b700:	4619      	mov	r1, r3
   8b702:	4b5b      	ldr	r3, [pc, #364]	; (8b870 <Hot_Rinse+0x248>)
   8b704:	4798      	blx	r3
// 			uint16_t cal_data  = (402 *100* sensordata)/(2*32768);						// resistance of PT100
// 			res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
// 			Tmp3Val = res_temp_value/100;									// Temp3 value in XX.yy format
// //			Tmp3Val = Tmp3Val - 3.1 + 1.4;										// sensor offset
// 			Tmp3Val = Tmp3Val - - 0.4;										// sensor offset
			Tmp3Val = (Tmp3Val*9+ (float)sensordata/100)/10;
   8b706:	4b63      	ldr	r3, [pc, #396]	; (8b894 <Hot_Rinse+0x26c>)
   8b708:	681a      	ldr	r2, [r3, #0]
   8b70a:	4b5a      	ldr	r3, [pc, #360]	; (8b874 <Hot_Rinse+0x24c>)
   8b70c:	4610      	mov	r0, r2
   8b70e:	495a      	ldr	r1, [pc, #360]	; (8b878 <Hot_Rinse+0x250>)
   8b710:	4798      	blx	r3
   8b712:	4603      	mov	r3, r0
   8b714:	461c      	mov	r4, r3
   8b716:	88fb      	ldrh	r3, [r7, #6]
   8b718:	b21a      	sxth	r2, r3
   8b71a:	4b58      	ldr	r3, [pc, #352]	; (8b87c <Hot_Rinse+0x254>)
   8b71c:	4610      	mov	r0, r2
   8b71e:	4798      	blx	r3
   8b720:	4602      	mov	r2, r0
   8b722:	4b57      	ldr	r3, [pc, #348]	; (8b880 <Hot_Rinse+0x258>)
   8b724:	4610      	mov	r0, r2
   8b726:	4957      	ldr	r1, [pc, #348]	; (8b884 <Hot_Rinse+0x25c>)
   8b728:	4798      	blx	r3
   8b72a:	4603      	mov	r3, r0
   8b72c:	461a      	mov	r2, r3
   8b72e:	4b56      	ldr	r3, [pc, #344]	; (8b888 <Hot_Rinse+0x260>)
   8b730:	4620      	mov	r0, r4
   8b732:	4611      	mov	r1, r2
   8b734:	4798      	blx	r3
   8b736:	4603      	mov	r3, r0
   8b738:	461a      	mov	r2, r3
   8b73a:	4b51      	ldr	r3, [pc, #324]	; (8b880 <Hot_Rinse+0x258>)
   8b73c:	4610      	mov	r0, r2
   8b73e:	4953      	ldr	r1, [pc, #332]	; (8b88c <Hot_Rinse+0x264>)
   8b740:	4798      	blx	r3
   8b742:	4603      	mov	r3, r0
   8b744:	461a      	mov	r2, r3
   8b746:	4b53      	ldr	r3, [pc, #332]	; (8b894 <Hot_Rinse+0x26c>)
   8b748:	601a      	str	r2, [r3, #0]
//			Tmp3Val = (float)sensordata /100;
		}
		
	if (flag_5min)
   8b74a:	4b41      	ldr	r3, [pc, #260]	; (8b850 <Hot_Rinse+0x228>)
   8b74c:	781b      	ldrb	r3, [r3, #0]
   8b74e:	2b00      	cmp	r3, #0
   8b750:	d079      	beq.n	8b846 <Hot_Rinse+0x21e>
	{
	
		
		if (!(count_500ms %30))
   8b752:	4b3e      	ldr	r3, [pc, #248]	; (8b84c <Hot_Rinse+0x224>)
   8b754:	881a      	ldrh	r2, [r3, #0]
   8b756:	4b51      	ldr	r3, [pc, #324]	; (8b89c <Hot_Rinse+0x274>)
   8b758:	fba3 1302 	umull	r1, r3, r3, r2
   8b75c:	0919      	lsrs	r1, r3, #4
   8b75e:	460b      	mov	r3, r1
   8b760:	011b      	lsls	r3, r3, #4
   8b762:	1a5b      	subs	r3, r3, r1
   8b764:	005b      	lsls	r3, r3, #1
   8b766:	1ad3      	subs	r3, r2, r3
   8b768:	b29b      	uxth	r3, r3
   8b76a:	2b00      	cmp	r3, #0
   8b76c:	d16b      	bne.n	8b846 <Hot_Rinse+0x21e>
		{
			
		
			if ((Tmp2Val - 80) > 5 )     
   8b76e:	4b3e      	ldr	r3, [pc, #248]	; (8b868 <Hot_Rinse+0x240>)
   8b770:	681a      	ldr	r2, [r3, #0]
   8b772:	4b4b      	ldr	r3, [pc, #300]	; (8b8a0 <Hot_Rinse+0x278>)
   8b774:	4610      	mov	r0, r2
   8b776:	494b      	ldr	r1, [pc, #300]	; (8b8a4 <Hot_Rinse+0x27c>)
   8b778:	4798      	blx	r3
   8b77a:	4603      	mov	r3, r0
   8b77c:	461a      	mov	r2, r3
   8b77e:	4b4a      	ldr	r3, [pc, #296]	; (8b8a8 <Hot_Rinse+0x280>)
   8b780:	4610      	mov	r0, r2
   8b782:	494a      	ldr	r1, [pc, #296]	; (8b8ac <Hot_Rinse+0x284>)
   8b784:	4798      	blx	r3
   8b786:	4603      	mov	r3, r0
   8b788:	2b00      	cmp	r3, #0
   8b78a:	d013      	beq.n	8b7b4 <Hot_Rinse+0x18c>
			{
				avg_duty = avg_duty - 100;
   8b78c:	4b34      	ldr	r3, [pc, #208]	; (8b860 <Hot_Rinse+0x238>)
   8b78e:	881b      	ldrh	r3, [r3, #0]
   8b790:	b29b      	uxth	r3, r3
   8b792:	3b64      	subs	r3, #100	; 0x64
   8b794:	b29b      	uxth	r3, r3
   8b796:	b29a      	uxth	r2, r3
   8b798:	4b31      	ldr	r3, [pc, #196]	; (8b860 <Hot_Rinse+0x238>)
   8b79a:	801a      	strh	r2, [r3, #0]
				if (avg_duty <2500)
   8b79c:	4b30      	ldr	r3, [pc, #192]	; (8b860 <Hot_Rinse+0x238>)
   8b79e:	881b      	ldrh	r3, [r3, #0]
   8b7a0:	b21b      	sxth	r3, r3
   8b7a2:	f640 12c3 	movw	r2, #2499	; 0x9c3
   8b7a6:	4293      	cmp	r3, r2
   8b7a8:	dc47      	bgt.n	8b83a <Hot_Rinse+0x212>
				{
					avg_duty = 2500;
   8b7aa:	4b2d      	ldr	r3, [pc, #180]	; (8b860 <Hot_Rinse+0x238>)
   8b7ac:	f640 12c4 	movw	r2, #2500	; 0x9c4
   8b7b0:	801a      	strh	r2, [r3, #0]
   8b7b2:	e042      	b.n	8b83a <Hot_Rinse+0x212>
				}
			
			}
			else if ((75 - Tmp2Val) > 5 && (Tmp3Val <= 70))
   8b7b4:	4b2c      	ldr	r3, [pc, #176]	; (8b868 <Hot_Rinse+0x240>)
   8b7b6:	681a      	ldr	r2, [r3, #0]
   8b7b8:	4b39      	ldr	r3, [pc, #228]	; (8b8a0 <Hot_Rinse+0x278>)
   8b7ba:	483d      	ldr	r0, [pc, #244]	; (8b8b0 <Hot_Rinse+0x288>)
   8b7bc:	4611      	mov	r1, r2
   8b7be:	4798      	blx	r3
   8b7c0:	4603      	mov	r3, r0
   8b7c2:	461a      	mov	r2, r3
   8b7c4:	4b38      	ldr	r3, [pc, #224]	; (8b8a8 <Hot_Rinse+0x280>)
   8b7c6:	4610      	mov	r0, r2
   8b7c8:	4938      	ldr	r1, [pc, #224]	; (8b8ac <Hot_Rinse+0x284>)
   8b7ca:	4798      	blx	r3
   8b7cc:	4603      	mov	r3, r0
   8b7ce:	2b00      	cmp	r3, #0
   8b7d0:	d01d      	beq.n	8b80e <Hot_Rinse+0x1e6>
   8b7d2:	4b30      	ldr	r3, [pc, #192]	; (8b894 <Hot_Rinse+0x26c>)
   8b7d4:	681a      	ldr	r2, [r3, #0]
   8b7d6:	4b37      	ldr	r3, [pc, #220]	; (8b8b4 <Hot_Rinse+0x28c>)
   8b7d8:	4610      	mov	r0, r2
   8b7da:	4937      	ldr	r1, [pc, #220]	; (8b8b8 <Hot_Rinse+0x290>)
   8b7dc:	4798      	blx	r3
   8b7de:	4603      	mov	r3, r0
   8b7e0:	2b00      	cmp	r3, #0
   8b7e2:	d014      	beq.n	8b80e <Hot_Rinse+0x1e6>
			{
				avg_duty = avg_duty + 80;
   8b7e4:	4b1e      	ldr	r3, [pc, #120]	; (8b860 <Hot_Rinse+0x238>)
   8b7e6:	881b      	ldrh	r3, [r3, #0]
   8b7e8:	b29b      	uxth	r3, r3
   8b7ea:	3350      	adds	r3, #80	; 0x50
   8b7ec:	b29b      	uxth	r3, r3
   8b7ee:	b29a      	uxth	r2, r3
   8b7f0:	4b1b      	ldr	r3, [pc, #108]	; (8b860 <Hot_Rinse+0x238>)
   8b7f2:	801a      	strh	r2, [r3, #0]
				if (avg_duty >3500)
   8b7f4:	4b1a      	ldr	r3, [pc, #104]	; (8b860 <Hot_Rinse+0x238>)
   8b7f6:	881b      	ldrh	r3, [r3, #0]
   8b7f8:	b21b      	sxth	r3, r3
   8b7fa:	f640 52ac 	movw	r2, #3500	; 0xdac
   8b7fe:	4293      	cmp	r3, r2
   8b800:	dd04      	ble.n	8b80c <Hot_Rinse+0x1e4>
				{
					avg_duty = 3500;
   8b802:	4b17      	ldr	r3, [pc, #92]	; (8b860 <Hot_Rinse+0x238>)
   8b804:	f640 52ac 	movw	r2, #3500	; 0xdac
   8b808:	801a      	strh	r2, [r3, #0]
			
			}
			else if ((75 - Tmp2Val) > 5 && (Tmp3Val <= 70))
			{
				avg_duty = avg_duty + 80;
				if (avg_duty >3500)
   8b80a:	e016      	b.n	8b83a <Hot_Rinse+0x212>
   8b80c:	e015      	b.n	8b83a <Hot_Rinse+0x212>
				{
					avg_duty = 3500;
				}
			}
		
			else if ((Tmp3Val <= 80) && (Tmp3Val >= 70))
   8b80e:	4b21      	ldr	r3, [pc, #132]	; (8b894 <Hot_Rinse+0x26c>)
   8b810:	681a      	ldr	r2, [r3, #0]
   8b812:	4b28      	ldr	r3, [pc, #160]	; (8b8b4 <Hot_Rinse+0x28c>)
   8b814:	4610      	mov	r0, r2
   8b816:	4923      	ldr	r1, [pc, #140]	; (8b8a4 <Hot_Rinse+0x27c>)
   8b818:	4798      	blx	r3
   8b81a:	4603      	mov	r3, r0
   8b81c:	2b00      	cmp	r3, #0
   8b81e:	d00c      	beq.n	8b83a <Hot_Rinse+0x212>
   8b820:	4b1c      	ldr	r3, [pc, #112]	; (8b894 <Hot_Rinse+0x26c>)
   8b822:	681a      	ldr	r2, [r3, #0]
   8b824:	4b25      	ldr	r3, [pc, #148]	; (8b8bc <Hot_Rinse+0x294>)
   8b826:	4610      	mov	r0, r2
   8b828:	4923      	ldr	r1, [pc, #140]	; (8b8b8 <Hot_Rinse+0x290>)
   8b82a:	4798      	blx	r3
   8b82c:	4603      	mov	r3, r0
   8b82e:	2b00      	cmp	r3, #0
   8b830:	d003      	beq.n	8b83a <Hot_Rinse+0x212>
			{
				avg_duty = avg_duty;
   8b832:	4b0b      	ldr	r3, [pc, #44]	; (8b860 <Hot_Rinse+0x238>)
   8b834:	881a      	ldrh	r2, [r3, #0]
   8b836:	4b0a      	ldr	r3, [pc, #40]	; (8b860 <Hot_Rinse+0x238>)
   8b838:	801a      	strh	r2, [r3, #0]
			}
		
			sv_cntrl_incheater(avg_duty);
   8b83a:	4b09      	ldr	r3, [pc, #36]	; (8b860 <Hot_Rinse+0x238>)
   8b83c:	881b      	ldrh	r3, [r3, #0]
   8b83e:	b21b      	sxth	r3, r3
   8b840:	4618      	mov	r0, r3
   8b842:	4b08      	ldr	r3, [pc, #32]	; (8b864 <Hot_Rinse+0x23c>)
   8b844:	4798      	blx	r3
		
		}
	}
	
}
   8b846:	370c      	adds	r7, #12
   8b848:	46bd      	mov	sp, r7
   8b84a:	bd90      	pop	{r4, r7, pc}
   8b84c:	20071aec 	.word	0x20071aec
   8b850:	20071b09 	.word	0x20071b09
   8b854:	20071ad1 	.word	0x20071ad1
   8b858:	0009b3d5 	.word	0x0009b3d5
   8b85c:	0009b3c1 	.word	0x0009b3c1
   8b860:	20071ad4 	.word	0x20071ad4
   8b864:	0009b4c9 	.word	0x0009b4c9
   8b868:	20071ae4 	.word	0x20071ae4
   8b86c:	20071afc 	.word	0x20071afc
   8b870:	0008fd69 	.word	0x0008fd69
   8b874:	000a8305 	.word	0x000a8305
   8b878:	41100000 	.word	0x41100000
   8b87c:	000a825d 	.word	0x000a825d
   8b880:	000a846d 	.word	0x000a846d
   8b884:	42c80000 	.word	0x42c80000
   8b888:	000a80f5 	.word	0x000a80f5
   8b88c:	41200000 	.word	0x41200000
   8b890:	cccccccd 	.word	0xcccccccd
   8b894:	20071ae8 	.word	0x20071ae8
   8b898:	20072338 	.word	0x20072338
   8b89c:	88888889 	.word	0x88888889
   8b8a0:	000a80f1 	.word	0x000a80f1
   8b8a4:	42a00000 	.word	0x42a00000
   8b8a8:	000a867d 	.word	0x000a867d
   8b8ac:	40a00000 	.word	0x40a00000
   8b8b0:	42960000 	.word	0x42960000
   8b8b4:	000a8655 	.word	0x000a8655
   8b8b8:	428c0000 	.word	0x428c0000
   8b8bc:	000a8669 	.word	0x000a8669

0008b8c0 <Cl_Init_Controller>:
extern Cl_ReturnCodeType  Cl_Conductivity_Sensor_Controller(Cl_CondSensor_EventType Cl_cond_Event);

extern Cl_Mac_EventQueueType Cl_MacEventQueue1;

Cl_ReturnCodeType  Cl_Init_Controller(Cl_Mac_EventsType Cl_MacInitEvent)
{
   8b8c0:	b580      	push	{r7, lr}
   8b8c2:	b090      	sub	sp, #64	; 0x40
   8b8c4:	af00      	add	r7, sp, #0
   8b8c6:	4603      	mov	r3, r0
   8b8c8:	71fb      	strb	r3, [r7, #7]
	
	Cl_ReturnCodeType  Cl_initcode = CL_OK;
   8b8ca:	2300      	movs	r3, #0
   8b8cc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	Cl_Init_Events cl_initevent = EVENT_NULL_EVENT;
   8b8d0:	2300      	movs	r3, #0
   8b8d2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	static  Cl_Init_StatesType Cl_Init_States = CL_INIT_STATE_IDLE;
	Cl_Uint8Type data[2];
	Cl_ConsoleTxCommandtype command;
	int count = 0;
   8b8d6:	2300      	movs	r3, #0
   8b8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	int lram_test_buffer[10];
	
	static int gram_test_buffer[10] = {0xAAAA,0x5555,0xAAAA,0x5555,0xAAAA,0x5555,0xAAAA,0x5555,0xAAAA,};
	
	
	cl_init_translatemacevent( Cl_MacInitEvent, &cl_initevent);
   8b8da:	79fa      	ldrb	r2, [r7, #7]
   8b8dc:	f107 0339 	add.w	r3, r7, #57	; 0x39
   8b8e0:	4610      	mov	r0, r2
   8b8e2:	4619      	mov	r1, r3
   8b8e4:	4b83      	ldr	r3, [pc, #524]	; (8baf4 <Cl_Init_Controller+0x234>)
   8b8e6:	4798      	blx	r3
	switch (Cl_Init_States)
   8b8e8:	4b83      	ldr	r3, [pc, #524]	; (8baf8 <Cl_Init_Controller+0x238>)
   8b8ea:	781b      	ldrb	r3, [r3, #0]
   8b8ec:	2b08      	cmp	r3, #8
   8b8ee:	f200 80fa 	bhi.w	8bae6 <Cl_Init_Controller+0x226>
   8b8f2:	a201      	add	r2, pc, #4	; (adr r2, 8b8f8 <Cl_Init_Controller+0x38>)
   8b8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b8f8:	0008b91d 	.word	0x0008b91d
   8b8fc:	0008ba31 	.word	0x0008ba31
   8b900:	0008ba59 	.word	0x0008ba59
   8b904:	0008bae7 	.word	0x0008bae7
   8b908:	0008bae7 	.word	0x0008bae7
   8b90c:	0008ba81 	.word	0x0008ba81
   8b910:	0008bae7 	.word	0x0008bae7
   8b914:	0008bae7 	.word	0x0008bae7
   8b918:	0008bab1 	.word	0x0008bab1
	{
		
		case CL_INIT_STATE_IDLE:
					switch(cl_initevent)
   8b91c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8b920:	2b01      	cmp	r3, #1
   8b922:	d000      	beq.n	8b926 <Cl_Init_Controller+0x66>
						
						
						Cl_initcode =  Cl_Conductivity_Sensor_Controller(COND_EVENT_INIT);
							
						break;
						default:break;
   8b924:	e083      	b.n	8ba2e <Cl_Init_Controller+0x16e>
		
		case CL_INIT_STATE_IDLE:
					switch(cl_initevent)
					{
						case EVENT_INIT_INIT:
						Cl_Init_States = CL_INIT_STATE_INIT;
   8b926:	4b74      	ldr	r3, [pc, #464]	; (8baf8 <Cl_Init_Controller+0x238>)
   8b928:	2201      	movs	r2, #1
   8b92a:	701a      	strb	r2, [r3, #0]
						
						data[0] = CL_INIT_ROM_TEST_ON;//rom test
   8b92c:	2302      	movs	r3, #2
   8b92e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_STATE;
   8b932:	231a      	movs	r3, #26
   8b934:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
   8b938:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
   8b93c:	f107 0334 	add.w	r3, r7, #52	; 0x34
   8b940:	4610      	mov	r0, r2
   8b942:	4619      	mov	r1, r3
   8b944:	2201      	movs	r2, #1
   8b946:	4b6d      	ldr	r3, [pc, #436]	; (8bafc <Cl_Init_Controller+0x23c>)
   8b948:	4798      	blx	r3
   8b94a:	4603      	mov	r3, r0
   8b94c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						//while( //rom test )		
						{
							// algo rom test
						}	
						Cl_Init_States = CL_INIT_RAM_TEST_ON;
   8b950:	4b69      	ldr	r3, [pc, #420]	; (8baf8 <Cl_Init_Controller+0x238>)
   8b952:	2205      	movs	r2, #5
   8b954:	701a      	strb	r2, [r3, #0]
						data[0] = CL_INIT_RAM_TEST_ON;//ram test
   8b956:	2305      	movs	r3, #5
   8b958:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_STATE;
   8b95c:	231a      	movs	r3, #26
   8b95e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
   8b962:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
   8b966:	f107 0334 	add.w	r3, r7, #52	; 0x34
   8b96a:	4610      	mov	r0, r2
   8b96c:	4619      	mov	r1, r3
   8b96e:	2201      	movs	r2, #1
   8b970:	4b62      	ldr	r3, [pc, #392]	; (8bafc <Cl_Init_Controller+0x23c>)
   8b972:	4798      	blx	r3
   8b974:	4603      	mov	r3, r0
   8b976:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						while( count <10)//ram test )	
   8b97a:	e00d      	b.n	8b998 <Cl_Init_Controller+0xd8>
						{
							//algo ram test
							lram_test_buffer[count] = gram_test_buffer[count];
   8b97c:	4a60      	ldr	r2, [pc, #384]	; (8bb00 <Cl_Init_Controller+0x240>)
   8b97e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8b980:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8b984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8b986:	009b      	lsls	r3, r3, #2
   8b988:	f107 0140 	add.w	r1, r7, #64	; 0x40
   8b98c:	440b      	add	r3, r1
   8b98e:	f843 2c34 	str.w	r2, [r3, #-52]
							count++;
   8b992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8b994:	3301      	adds	r3, #1
   8b996:	63fb      	str	r3, [r7, #60]	; 0x3c
						}	
						Cl_Init_States = CL_INIT_RAM_TEST_ON;
						data[0] = CL_INIT_RAM_TEST_ON;//ram test
						command = CON_TX_COMMAND_INIT_STATE;
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
						while( count <10)//ram test )	
   8b998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8b99a:	2b09      	cmp	r3, #9
   8b99c:	ddee      	ble.n	8b97c <Cl_Init_Controller+0xbc>
						{
							//algo ram test
							lram_test_buffer[count] = gram_test_buffer[count];
							count++;
						}
						count = 0;
   8b99e:	2300      	movs	r3, #0
   8b9a0:	63fb      	str	r3, [r7, #60]	; 0x3c
						while( count <10)//ram test verification )
   8b9a2:	e010      	b.n	8b9c6 <Cl_Init_Controller+0x106>
						{
							if (lram_test_buffer[count] != gram_test_buffer[count])
   8b9a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8b9a6:	009b      	lsls	r3, r3, #2
   8b9a8:	f107 0240 	add.w	r2, r7, #64	; 0x40
   8b9ac:	4413      	add	r3, r2
   8b9ae:	f853 2c34 	ldr.w	r2, [r3, #-52]
   8b9b2:	4953      	ldr	r1, [pc, #332]	; (8bb00 <Cl_Init_Controller+0x240>)
   8b9b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8b9b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   8b9ba:	429a      	cmp	r2, r3
   8b9bc:	d000      	beq.n	8b9c0 <Cl_Init_Controller+0x100>
							{
								// test FAILed
								break;
   8b9be:	e005      	b.n	8b9cc <Cl_Init_Controller+0x10c>
							}
							count++;
   8b9c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8b9c2:	3301      	adds	r3, #1
   8b9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
							//algo ram test
							lram_test_buffer[count] = gram_test_buffer[count];
							count++;
						}
						count = 0;
						while( count <10)//ram test verification )
   8b9c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8b9c8:	2b09      	cmp	r3, #9
   8b9ca:	ddeb      	ble.n	8b9a4 <Cl_Init_Controller+0xe4>
								break;
							}
							count++;
						}
						
						Cl_Init_States = CL_INIT_RAM_TEST_PASSED;
   8b9cc:	4b4a      	ldr	r3, [pc, #296]	; (8baf8 <Cl_Init_Controller+0x238>)
   8b9ce:	2207      	movs	r2, #7
   8b9d0:	701a      	strb	r2, [r3, #0]
						//TEST PASSED
						
						data[0] = CL_INIT_RAM_TEST_PASSED;//ram test
   8b9d2:	2307      	movs	r3, #7
   8b9d4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_STATE;
   8b9d8:	231a      	movs	r3, #26
   8b9da:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
   8b9de:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
   8b9e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
   8b9e6:	4610      	mov	r0, r2
   8b9e8:	4619      	mov	r1, r3
   8b9ea:	2201      	movs	r2, #1
   8b9ec:	4b43      	ldr	r3, [pc, #268]	; (8bafc <Cl_Init_Controller+0x23c>)
   8b9ee:	4798      	blx	r3
   8b9f0:	4603      	mov	r3, r0
   8b9f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						
						Cl_Init_States = CL_INIT_READY;
   8b9f6:	4b40      	ldr	r3, [pc, #256]	; (8baf8 <Cl_Init_Controller+0x238>)
   8b9f8:	2208      	movs	r2, #8
   8b9fa:	701a      	strb	r2, [r3, #0]
						data[0] = CL_INIT_READY;
   8b9fc:	2308      	movs	r3, #8
   8b9fe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_DONE;
   8ba02:	231b      	movs	r3, #27
   8ba04:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,0);
   8ba08:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
   8ba0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
   8ba10:	4610      	mov	r0, r2
   8ba12:	4619      	mov	r1, r3
   8ba14:	2200      	movs	r2, #0
   8ba16:	4b39      	ldr	r3, [pc, #228]	; (8bafc <Cl_Init_Controller+0x23c>)
   8ba18:	4798      	blx	r3
   8ba1a:	4603      	mov	r3, r0
   8ba1c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						
						
						Cl_initcode =  Cl_Conductivity_Sensor_Controller(COND_EVENT_INIT);
   8ba20:	2000      	movs	r0, #0
   8ba22:	4b38      	ldr	r3, [pc, #224]	; (8bb04 <Cl_Init_Controller+0x244>)
   8ba24:	4798      	blx	r3
   8ba26:	4603      	mov	r3, r0
   8ba28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							
						break;
   8ba2c:	bf00      	nop
						default:break;
					}
		break;
   8ba2e:	e05b      	b.n	8bae8 <Cl_Init_Controller+0x228>
		case	CL_INIT_STATE_INIT:
					switch(cl_initevent)
   8ba30:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8ba34:	3b02      	subs	r3, #2
   8ba36:	2b04      	cmp	r3, #4
   8ba38:	d80c      	bhi.n	8ba54 <Cl_Init_Controller+0x194>
   8ba3a:	a201      	add	r2, pc, #4	; (adr r2, 8ba40 <Cl_Init_Controller+0x180>)
   8ba3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8ba40:	0008ba55 	.word	0x0008ba55
   8ba44:	0008ba55 	.word	0x0008ba55
   8ba48:	0008ba55 	.word	0x0008ba55
   8ba4c:	0008ba55 	.word	0x0008ba55
   8ba50:	0008ba55 	.word	0x0008ba55
						case EVENT_INIT_TICK_MINUTE:
						break;
						case EVENT_INIT_TICK_HOUR:
						break;
						default:
						break;
   8ba54:	bf00      	nop
					}
		break;
   8ba56:	e047      	b.n	8bae8 <Cl_Init_Controller+0x228>
		case CL_INIT_ROM_TEST_ON:
					switch(cl_initevent)
   8ba58:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8ba5c:	3b02      	subs	r3, #2
   8ba5e:	2b04      	cmp	r3, #4
   8ba60:	d80c      	bhi.n	8ba7c <Cl_Init_Controller+0x1bc>
   8ba62:	a201      	add	r2, pc, #4	; (adr r2, 8ba68 <Cl_Init_Controller+0x1a8>)
   8ba64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8ba68:	0008ba7d 	.word	0x0008ba7d
   8ba6c:	0008ba7d 	.word	0x0008ba7d
   8ba70:	0008ba7d 	.word	0x0008ba7d
   8ba74:	0008ba7d 	.word	0x0008ba7d
   8ba78:	0008ba7d 	.word	0x0008ba7d
						case EVENT_INIT_TICK_MINUTE:
						break;
						case EVENT_INIT_TICK_HOUR:
						break;
						default:
						break;
   8ba7c:	bf00      	nop
					}
		break;
   8ba7e:	e033      	b.n	8bae8 <Cl_Init_Controller+0x228>
		case CL_INIT_RAM_TEST_ON:
					switch(cl_initevent)
   8ba80:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8ba84:	3b02      	subs	r3, #2
   8ba86:	2b04      	cmp	r3, #4
   8ba88:	d810      	bhi.n	8baac <Cl_Init_Controller+0x1ec>
   8ba8a:	a201      	add	r2, pc, #4	; (adr r2, 8ba90 <Cl_Init_Controller+0x1d0>)
   8ba8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8ba90:	0008baad 	.word	0x0008baad
   8ba94:	0008baad 	.word	0x0008baad
   8ba98:	0008baa5 	.word	0x0008baa5
   8ba9c:	0008baad 	.word	0x0008baad
   8baa0:	0008baad 	.word	0x0008baad
						case EVENT_INIT_TICK_100MS:
						break;
						case EVENT_INIT_TICK_500MS:
						break;
						case EVENT_INIT_TICK_SECOND:
						Cl_Init_States = CL_INIT_READY;
   8baa4:	4b14      	ldr	r3, [pc, #80]	; (8baf8 <Cl_Init_Controller+0x238>)
   8baa6:	2208      	movs	r2, #8
   8baa8:	701a      	strb	r2, [r3, #0]
						
				//		command = CON_TX_COMMAND_INIT_DONE;
					//	Cl_initcode = Cl_SendDatatoconsole(command,&data,0);
						break;
   8baaa:	e000      	b.n	8baae <Cl_Init_Controller+0x1ee>
						case EVENT_INIT_TICK_MINUTE:
						break;
						case EVENT_INIT_TICK_HOUR:
						break;
						default:
						break;
   8baac:	bf00      	nop
					}
		break;
   8baae:	e01b      	b.n	8bae8 <Cl_Init_Controller+0x228>
		case CL_INIT_READY:
							switch(cl_initevent)
   8bab0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8bab4:	3b02      	subs	r3, #2
   8bab6:	2b04      	cmp	r3, #4
   8bab8:	d813      	bhi.n	8bae2 <Cl_Init_Controller+0x222>
   8baba:	a201      	add	r2, pc, #4	; (adr r2, 8bac0 <Cl_Init_Controller+0x200>)
   8babc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8bac0:	0008bae3 	.word	0x0008bae3
   8bac4:	0008bae3 	.word	0x0008bae3
   8bac8:	0008bad5 	.word	0x0008bad5
   8bacc:	0008bae3 	.word	0x0008bae3
   8bad0:	0008bae3 	.word	0x0008bae3
								case EVENT_INIT_TICK_100MS:
								break;
								case EVENT_INIT_TICK_500MS:
								break;
								case EVENT_INIT_TICK_SECOND:
								Cl_initcode = Cl_mac_apprequesthandler(MACREQ_ENTER_STANDBY);
   8bad4:	2043      	movs	r0, #67	; 0x43
   8bad6:	4b0c      	ldr	r3, [pc, #48]	; (8bb08 <Cl_Init_Controller+0x248>)
   8bad8:	4798      	blx	r3
   8bada:	4603      	mov	r3, r0
   8badc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
								break;
   8bae0:	e000      	b.n	8bae4 <Cl_Init_Controller+0x224>
								case EVENT_INIT_TICK_MINUTE:
								break;
								case EVENT_INIT_TICK_HOUR:
								break;
								default:
								break;
   8bae2:	bf00      	nop
							}
					

		break;
   8bae4:	e000      	b.n	8bae8 <Cl_Init_Controller+0x228>

			
			default: break;
   8bae6:	bf00      	nop
	}
return CL_OK;	
   8bae8:	2300      	movs	r3, #0
}
   8baea:	4618      	mov	r0, r3
   8baec:	3740      	adds	r7, #64	; 0x40
   8baee:	46bd      	mov	sp, r7
   8baf0:	bd80      	pop	{r7, pc}
   8baf2:	bf00      	nop
   8baf4:	0008bb0d 	.word	0x0008bb0d
   8baf8:	20071b0a 	.word	0x20071b0a
   8bafc:	0009d1e9 	.word	0x0009d1e9
   8bb00:	20070708 	.word	0x20070708
   8bb04:	00090981 	.word	0x00090981
   8bb08:	0008bbb9 	.word	0x0008bbb9

0008bb0c <cl_init_translatemacevent>:

Cl_ReturnCodeType  cl_init_translatemacevent(Cl_Mac_EventsType Cl_MacInitEvt,Cl_Init_Events* cl_init_event)
{
   8bb0c:	b480      	push	{r7}
   8bb0e:	b083      	sub	sp, #12
   8bb10:	af00      	add	r7, sp, #0
   8bb12:	4603      	mov	r3, r0
   8bb14:	6039      	str	r1, [r7, #0]
   8bb16:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacInitEvt)
   8bb18:	79fb      	ldrb	r3, [r7, #7]
   8bb1a:	3b2a      	subs	r3, #42	; 0x2a
   8bb1c:	2b13      	cmp	r3, #19
   8bb1e:	d843      	bhi.n	8bba8 <cl_init_translatemacevent+0x9c>
   8bb20:	a201      	add	r2, pc, #4	; (adr r2, 8bb28 <cl_init_translatemacevent+0x1c>)
   8bb22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8bb26:	bf00      	nop
   8bb28:	0008bb79 	.word	0x0008bb79
   8bb2c:	0008bba9 	.word	0x0008bba9
   8bb30:	0008bba9 	.word	0x0008bba9
   8bb34:	0008bba9 	.word	0x0008bba9
   8bb38:	0008bba9 	.word	0x0008bba9
   8bb3c:	0008bba9 	.word	0x0008bba9
   8bb40:	0008bba9 	.word	0x0008bba9
   8bb44:	0008bba9 	.word	0x0008bba9
   8bb48:	0008bba9 	.word	0x0008bba9
   8bb4c:	0008bba9 	.word	0x0008bba9
   8bb50:	0008bba9 	.word	0x0008bba9
   8bb54:	0008bba9 	.word	0x0008bba9
   8bb58:	0008bba9 	.word	0x0008bba9
   8bb5c:	0008bba9 	.word	0x0008bba9
   8bb60:	0008bba9 	.word	0x0008bba9
   8bb64:	0008bb81 	.word	0x0008bb81
   8bb68:	0008bb89 	.word	0x0008bb89
   8bb6c:	0008bb91 	.word	0x0008bb91
   8bb70:	0008bb99 	.word	0x0008bb99
   8bb74:	0008bba1 	.word	0x0008bba1
	{
		case EVT_COMMAND_ENTER_INIT:
		*cl_init_event = EVENT_INIT_INIT;
   8bb78:	683b      	ldr	r3, [r7, #0]
   8bb7a:	2201      	movs	r2, #1
   8bb7c:	701a      	strb	r2, [r3, #0]
		break;
   8bb7e:	e014      	b.n	8bbaa <cl_init_translatemacevent+0x9e>
		case EVT_TICK_100M:
		*cl_init_event = EVENT_INIT_TICK_100MS;
   8bb80:	683b      	ldr	r3, [r7, #0]
   8bb82:	2202      	movs	r2, #2
   8bb84:	701a      	strb	r2, [r3, #0]
		break;
   8bb86:	e010      	b.n	8bbaa <cl_init_translatemacevent+0x9e>
		case EVT_TICK_500M:
		*cl_init_event = EVENT_INIT_TICK_500MS;
   8bb88:	683b      	ldr	r3, [r7, #0]
   8bb8a:	2203      	movs	r2, #3
   8bb8c:	701a      	strb	r2, [r3, #0]
		break;
   8bb8e:	e00c      	b.n	8bbaa <cl_init_translatemacevent+0x9e>
		case EVT_TICK_SEC:
		*cl_init_event = EVENT_INIT_TICK_SECOND;
   8bb90:	683b      	ldr	r3, [r7, #0]
   8bb92:	2204      	movs	r2, #4
   8bb94:	701a      	strb	r2, [r3, #0]
		break;		
   8bb96:	e008      	b.n	8bbaa <cl_init_translatemacevent+0x9e>
		case EVT_TICK_MIN:
		*cl_init_event = EVENT_INIT_TICK_MINUTE;
   8bb98:	683b      	ldr	r3, [r7, #0]
   8bb9a:	2205      	movs	r2, #5
   8bb9c:	701a      	strb	r2, [r3, #0]
		break;	
   8bb9e:	e004      	b.n	8bbaa <cl_init_translatemacevent+0x9e>
		case EVT_TICK_HOUR:
		*cl_init_event = EVENT_INIT_TICK_HOUR;
   8bba0:	683b      	ldr	r3, [r7, #0]
   8bba2:	2206      	movs	r2, #6
   8bba4:	701a      	strb	r2, [r3, #0]
		break;
   8bba6:	e000      	b.n	8bbaa <cl_init_translatemacevent+0x9e>
		default:
		break;
   8bba8:	bf00      	nop
	}
	return CL_OK;
   8bbaa:	2300      	movs	r3, #0
}
   8bbac:	4618      	mov	r0, r3
   8bbae:	370c      	adds	r7, #12
   8bbb0:	46bd      	mov	sp, r7
   8bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
   8bbb6:	4770      	bx	lr

0008bbb8 <Cl_mac_apprequesthandler>:


Cl_ReturnCodeType Cl_mac_apprequesthandler(Cl_Mac_EventsType);

Cl_ReturnCodeType Cl_mac_apprequesthandler(Cl_Mac_EventsType cl_macirq)
{
   8bbb8:	b480      	push	{r7}
   8bbba:	b085      	sub	sp, #20
   8bbbc:	af00      	add	r7, sp, #0
   8bbbe:	4603      	mov	r3, r0
   8bbc0:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType Cl_Mac_RetVal = CL_OK;
   8bbc2:	2300      	movs	r3, #0
   8bbc4:	73fb      	strb	r3, [r7, #15]
	
	//Cl_MacEvent = cl_macirq;
	//Cl_MacNewEvent = true;
	
	if( Cl_MacEventQueue1.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   8bbc6:	4b0d      	ldr	r3, [pc, #52]	; (8bbfc <Cl_mac_apprequesthandler+0x44>)
   8bbc8:	781b      	ldrb	r3, [r3, #0]
   8bbca:	2b09      	cmp	r3, #9
   8bbcc:	d80f      	bhi.n	8bbee <Cl_mac_apprequesthandler+0x36>
	{
		Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = cl_macirq ;
   8bbce:	4b0b      	ldr	r3, [pc, #44]	; (8bbfc <Cl_mac_apprequesthandler+0x44>)
   8bbd0:	781b      	ldrb	r3, [r3, #0]
   8bbd2:	461a      	mov	r2, r3
   8bbd4:	4b09      	ldr	r3, [pc, #36]	; (8bbfc <Cl_mac_apprequesthandler+0x44>)
   8bbd6:	4413      	add	r3, r2
   8bbd8:	79fa      	ldrb	r2, [r7, #7]
   8bbda:	709a      	strb	r2, [r3, #2]
		Cl_MacEventQueue1.Cl_MacNewEvent = true;
   8bbdc:	4b07      	ldr	r3, [pc, #28]	; (8bbfc <Cl_mac_apprequesthandler+0x44>)
   8bbde:	2201      	movs	r2, #1
   8bbe0:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueue1.Cl_MacNewEventcount++;
   8bbe2:	4b06      	ldr	r3, [pc, #24]	; (8bbfc <Cl_mac_apprequesthandler+0x44>)
   8bbe4:	781b      	ldrb	r3, [r3, #0]
   8bbe6:	3301      	adds	r3, #1
   8bbe8:	b2da      	uxtb	r2, r3
   8bbea:	4b04      	ldr	r3, [pc, #16]	; (8bbfc <Cl_mac_apprequesthandler+0x44>)
   8bbec:	701a      	strb	r2, [r3, #0]
	}
	return Cl_Mac_RetVal;
   8bbee:	7bfb      	ldrb	r3, [r7, #15]
   8bbf0:	4618      	mov	r0, r3
   8bbf2:	3714      	adds	r7, #20
   8bbf4:	46bd      	mov	sp, r7
   8bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
   8bbfa:	4770      	bx	lr
   8bbfc:	200724dc 	.word	0x200724dc

0008bc00 <main>:
extern Cl_Uint8Type cur_datasize;
extern Cl_Uint8Type flag_hotcitric, flag_hotrinse,flag_na , flag_citric;
Cl_Uint8Type queue_sequence_counter = 0;
int main(void)

{
   8bc00:	b580      	push	{r7, lr}
   8bc02:	b084      	sub	sp, #16
   8bc04:	af00      	add	r7, sp, #0
	   
	Cl_ReturnCodeType 	 Cl_MacRetval = CL_ERROR;
   8bc06:	2304      	movs	r3, #4
   8bc08:	73fb      	strb	r3, [r7, #15]
	Cl_Mac_EventsType Cl_MacstbEvent = EVT_NULL;
   8bc0a:	2300      	movs	r3, #0
   8bc0c:	72fb      	strb	r3, [r7, #11]
	Cl_Uint8Type Cl_MacEventData = 0;
   8bc0e:	2300      	movs	r3, #0
   8bc10:	72bb      	strb	r3, [r7, #10]
	static uint loopcountm = 0, loopcountl = 0 , loopcountinsec = 0;
	Cl_Uint16Type temp100;
	   cl_Datastreamtype cl_temp  ;
	board_init();
   8bc12:	4b99      	ldr	r3, [pc, #612]	; (8be78 <main+0x278>)
   8bc14:	4798      	blx	r3
	sysclk_init();	
   8bc16:	4b99      	ldr	r3, [pc, #612]	; (8be7c <main+0x27c>)
   8bc18:	4798      	blx	r3
	SV_SYSTEM_INIT();
   8bc1a:	4b99      	ldr	r3, [pc, #612]	; (8be80 <main+0x280>)
   8bc1c:	4798      	blx	r3
	                                                                                           
//	udc_start();
	// Insert application code here, after the board has been initialized.
	//timerThread(  ) ;
//	Cl_MacRetval = sv_system_init(); 
pmc_enable_periph_clk(ID_PIOA);
   8bc1e:	200b      	movs	r0, #11
   8bc20:	4b98      	ldr	r3, [pc, #608]	; (8be84 <main+0x284>)
   8bc22:	4798      	blx	r3
pmc_enable_periph_clk(ID_TWI0);
   8bc24:	2016      	movs	r0, #22
   8bc26:	4b97      	ldr	r3, [pc, #604]	; (8be84 <main+0x284>)
   8bc28:	4798      	blx	r3

	sv_cntrl_activatepump(DCMOTOR1);
   8bc2a:	2001      	movs	r0, #1
   8bc2c:	4b96      	ldr	r3, [pc, #600]	; (8be88 <main+0x288>)
   8bc2e:	4798      	blx	r3
	sv_cntrl_activatepump(DCMOTOR2);
   8bc30:	2002      	movs	r0, #2
   8bc32:	4b95      	ldr	r3, [pc, #596]	; (8be88 <main+0x288>)
   8bc34:	4798      	blx	r3
	sv_cntrl_activatepump(UFPUMP);
   8bc36:	2004      	movs	r0, #4
   8bc38:	4b93      	ldr	r3, [pc, #588]	; (8be88 <main+0x288>)
   8bc3a:	4798      	blx	r3
	sv_cntrl_activatepump(HEPARINPUMP);
   8bc3c:	2005      	movs	r0, #5
   8bc3e:	4b92      	ldr	r3, [pc, #584]	; (8be88 <main+0x288>)
   8bc40:	4798      	blx	r3

	sv_cntrl_deactivatepump(DCMOTOR1);
   8bc42:	2001      	movs	r0, #1
   8bc44:	4b91      	ldr	r3, [pc, #580]	; (8be8c <main+0x28c>)
   8bc46:	4798      	blx	r3
	sv_cntrl_deactivatepump(DCMOTOR2);
   8bc48:	2002      	movs	r0, #2
   8bc4a:	4b90      	ldr	r3, [pc, #576]	; (8be8c <main+0x28c>)
   8bc4c:	4798      	blx	r3
	sv_cntrl_deactivatepump(UFPUMP);
   8bc4e:	2004      	movs	r0, #4
   8bc50:	4b8e      	ldr	r3, [pc, #568]	; (8be8c <main+0x28c>)
   8bc52:	4798      	blx	r3
	sv_cntrl_deactivatepump(HEPARINPUMP);
   8bc54:	2005      	movs	r0, #5
   8bc56:	4b8d      	ldr	r3, [pc, #564]	; (8be8c <main+0x28c>)
   8bc58:	4798      	blx	r3
	
// 	sv_cntrl_setpumpspeed(DCMOTOR2,1400);
// 	sv_cntrl_activatepump(DCMOTOR2);
   
	Cl_MacRetval = Cl_MacInit(); 	
   8bc5a:	4b8d      	ldr	r3, [pc, #564]	; (8be90 <main+0x290>)
   8bc5c:	4798      	blx	r3
   8bc5e:	4603      	mov	r3, r0
   8bc60:	73fb      	strb	r3, [r7, #15]
	for(temp100 = 1;temp100<=20; temp100++)
   8bc62:	2301      	movs	r3, #1
   8bc64:	81bb      	strh	r3, [r7, #12]
   8bc66:	e00a      	b.n	8bc7e <main+0x7e>
	{
		sv_cntrl_deactivate_valve((sv_valvetype)temp100);
   8bc68:	89bb      	ldrh	r3, [r7, #12]
   8bc6a:	b2db      	uxtb	r3, r3
   8bc6c:	4618      	mov	r0, r3
   8bc6e:	4b89      	ldr	r3, [pc, #548]	; (8be94 <main+0x294>)
   8bc70:	4798      	blx	r3
		cl_wait(10);
   8bc72:	200a      	movs	r0, #10
   8bc74:	4b88      	ldr	r3, [pc, #544]	; (8be98 <main+0x298>)
   8bc76:	4798      	blx	r3
	
// 	sv_cntrl_setpumpspeed(DCMOTOR2,1400);
// 	sv_cntrl_activatepump(DCMOTOR2);
   
	Cl_MacRetval = Cl_MacInit(); 	
	for(temp100 = 1;temp100<=20; temp100++)
   8bc78:	89bb      	ldrh	r3, [r7, #12]
   8bc7a:	3301      	adds	r3, #1
   8bc7c:	81bb      	strh	r3, [r7, #12]
   8bc7e:	89bb      	ldrh	r3, [r7, #12]
   8bc80:	2b14      	cmp	r3, #20
   8bc82:	d9f1      	bls.n	8bc68 <main+0x68>
//	SV_CS_SET_POT(3800);				  
//	sv_cs_setpotvalue(3800);


	
	sv_cntrl_resetoutput(29,PA);                         //  V1 Hardware control disabled
   8bc84:	201d      	movs	r0, #29
   8bc86:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8bc8a:	4b84      	ldr	r3, [pc, #528]	; (8be9c <main+0x29c>)
   8bc8c:	4798      	blx	r3
	sv_cntrl_setoutput(10,PB);                            //  V1 on Software control    
   8bc8e:	200a      	movs	r0, #10
   8bc90:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8bc94:	4b82      	ldr	r3, [pc, #520]	; (8bea0 <main+0x2a0>)
   8bc96:	4798      	blx	r3
	sv_cntrl_resetoutput(27,PC);
   8bc98:	201b      	movs	r0, #27
   8bc9a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
   8bc9e:	4b7f      	ldr	r3, [pc, #508]	; (8be9c <main+0x29c>)
   8bca0:	4798      	blx	r3
	sv_cntrl_setoutput(14,PB);                            // Blood Pump Power Control    
   8bca2:	200e      	movs	r0, #14
   8bca4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8bca8:	4b7d      	ldr	r3, [pc, #500]	; (8bea0 <main+0x2a0>)
   8bcaa:	4798      	blx	r3
	
	sv_cntrl_setoutput(2,PD);
   8bcac:	2002      	movs	r0, #2
   8bcae:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   8bcb2:	4b7b      	ldr	r3, [pc, #492]	; (8bea0 <main+0x2a0>)
   8bcb4:	4798      	blx	r3
	
	
	
	
	sv_cntrl_buzzer();
   8bcb6:	4b7b      	ldr	r3, [pc, #492]	; (8bea4 <main+0x2a4>)
   8bcb8:	4798      	blx	r3
	sv_cntrl_nobuzzer();
   8bcba:	4b7b      	ldr	r3, [pc, #492]	; (8bea8 <main+0x2a8>)
   8bcbc:	4798      	blx	r3
	sv_cntrl_setyellowalarm();
   8bcbe:	4b7b      	ldr	r3, [pc, #492]	; (8beac <main+0x2ac>)
   8bcc0:	4798      	blx	r3
	sv_cntrl_resetyellowalarm();
   8bcc2:	4b7b      	ldr	r3, [pc, #492]	; (8beb0 <main+0x2b0>)
   8bcc4:	4798      	blx	r3
	sv_cntrl_setredalarm();
   8bcc6:	4b7b      	ldr	r3, [pc, #492]	; (8beb4 <main+0x2b4>)
   8bcc8:	4798      	blx	r3
	sv_cntrl_resetredalarm();
   8bcca:	4b7b      	ldr	r3, [pc, #492]	; (8beb8 <main+0x2b8>)
   8bccc:	4798      	blx	r3
	sv_cntrl_setgreenalarm();
   8bcce:	4b7b      	ldr	r3, [pc, #492]	; (8bebc <main+0x2bc>)
   8bcd0:	4798      	blx	r3
	sv_cntrl_resetgreenalarm();
   8bcd2:	4b7b      	ldr	r3, [pc, #492]	; (8bec0 <main+0x2c0>)
   8bcd4:	4798      	blx	r3
// 	sv_status_getsystemstatus(&temp_sensor_struct);
// 	;
// 	
// }
	
	sv_cntrl_activate_valve( VALVE_ID17);
   8bcd6:	2011      	movs	r0, #17
   8bcd8:	4b7a      	ldr	r3, [pc, #488]	; (8bec4 <main+0x2c4>)
   8bcda:	4798      	blx	r3
	
	Cl_MacRetval = Cl_App_init(); 
   8bcdc:	4b7a      	ldr	r3, [pc, #488]	; (8bec8 <main+0x2c8>)
   8bcde:	4798      	blx	r3
   8bce0:	4603      	mov	r3, r0
   8bce2:	73fb      	strb	r3, [r7, #15]
	 ASSERT_ERROR(Cl_MacRetval);
   8bce4:	7bfb      	ldrb	r3, [r7, #15]
   8bce6:	2b00      	cmp	r3, #0
   8bce8:	d001      	beq.n	8bcee <main+0xee>
   8bcea:	4b78      	ldr	r3, [pc, #480]	; (8becc <main+0x2cc>)
   8bcec:	4798      	blx	r3
	
	if( Cl_MacRetval != CL_OK)
	{
		// Handle error
	}
	Cl_MacRetval = Cl_Mac_Configure();
   8bcee:	4b78      	ldr	r3, [pc, #480]	; (8bed0 <main+0x2d0>)
   8bcf0:	4798      	blx	r3
   8bcf2:	4603      	mov	r3, r0
   8bcf4:	73fb      	strb	r3, [r7, #15]
	 ASSERT_ERROR(Cl_MacRetval);
   8bcf6:	7bfb      	ldrb	r3, [r7, #15]
   8bcf8:	2b00      	cmp	r3, #0
   8bcfa:	d001      	beq.n	8bd00 <main+0x100>
   8bcfc:	4b73      	ldr	r3, [pc, #460]	; (8becc <main+0x2cc>)
   8bcfe:	4798      	blx	r3
		}		
	//	 if ( Cl_MacRetval == CL_ACCEPTED)
		 {
		 // System is ready for sending and receiving the data from console . A timer will read the data to be fetched by the MAC main loop for further processing
			
			Cl_MacState = MAC_CONSOLE_SYNC;
   8bd00:	4b74      	ldr	r3, [pc, #464]	; (8bed4 <main+0x2d4>)
   8bd02:	2204      	movs	r2, #4
   8bd04:	701a      	strb	r2, [r3, #0]
			Cl_MacRetval = CL_ERROR;
   8bd06:	2304      	movs	r3, #4
   8bd08:	73fb      	strb	r3, [r7, #15]
			Cl_MacRetval = Cl_Console_Console_Sync();
   8bd0a:	4b73      	ldr	r3, [pc, #460]	; (8bed8 <main+0x2d8>)
   8bd0c:	4798      	blx	r3
   8bd0e:	4603      	mov	r3, r0
   8bd10:	73fb      	strb	r3, [r7, #15]
			ASSERT_ERROR(Cl_MacRetval);
   8bd12:	7bfb      	ldrb	r3, [r7, #15]
   8bd14:	2b00      	cmp	r3, #0
   8bd16:	d001      	beq.n	8bd1c <main+0x11c>
   8bd18:	4b6c      	ldr	r3, [pc, #432]	; (8becc <main+0x2cc>)
   8bd1a:	4798      	blx	r3
			if(Cl_MacRetval == CL_OK)
   8bd1c:	7bfb      	ldrb	r3, [r7, #15]
   8bd1e:	2b00      	cmp	r3, #0
   8bd20:	d105      	bne.n	8bd2e <main+0x12e>
			{
				cl_sys_state = CL_SYS_STATE_WAIT_FOR_MODE;
   8bd22:	4b6e      	ldr	r3, [pc, #440]	; (8bedc <main+0x2dc>)
   8bd24:	2201      	movs	r2, #1
   8bd26:	701a      	strb	r2, [r3, #0]
				Cl_MacState =   MAC_INIT;
   8bd28:	4b6a      	ldr	r3, [pc, #424]	; (8bed4 <main+0x2d4>)
   8bd2a:	2202      	movs	r2, #2
   8bd2c:	701a      	strb	r2, [r3, #0]
	while (FOREVER)  // LOOP MAIN
	{

//sv_cntrl_setyellowalarm();
//sv_cntrl_deactivate_valve( VALVE_ID18);
	Cl_Mac_StateDummy = Cl_MacState;
   8bd2e:	4b69      	ldr	r3, [pc, #420]	; (8bed4 <main+0x2d4>)
   8bd30:	781a      	ldrb	r2, [r3, #0]
   8bd32:	4b6b      	ldr	r3, [pc, #428]	; (8bee0 <main+0x2e0>)
   8bd34:	701a      	strb	r2, [r3, #0]
	ul_cur_ticks = g_ul_ms_ticks;
   8bd36:	4b6b      	ldr	r3, [pc, #428]	; (8bee4 <main+0x2e4>)
   8bd38:	681b      	ldr	r3, [r3, #0]
   8bd3a:	4a6b      	ldr	r2, [pc, #428]	; (8bee8 <main+0x2e8>)
   8bd3c:	6013      	str	r3, [r2, #0]
	
		Cl_MacRetval = Cl_Mac_GetSystem_Status_Query();// check if there is any system updates . ALSO may be this can be moved to a timer thread
   8bd3e:	4b6b      	ldr	r3, [pc, #428]	; (8beec <main+0x2ec>)
   8bd40:	4798      	blx	r3
   8bd42:	4603      	mov	r3, r0
   8bd44:	73fb      	strb	r3, [r7, #15]
		Cl_MacRetval = Cl_Mac_CheckforBCEvent();
   8bd46:	4b6a      	ldr	r3, [pc, #424]	; (8bef0 <main+0x2f0>)
   8bd48:	4798      	blx	r3
   8bd4a:	4603      	mov	r3, r0
   8bd4c:	73fb      	strb	r3, [r7, #15]
		Cl_MacRetval = Cl_Mac_CheckforAlarms();
   8bd4e:	4b69      	ldr	r3, [pc, #420]	; (8bef4 <main+0x2f4>)
   8bd50:	4798      	blx	r3
   8bd52:	4603      	mov	r3, r0
   8bd54:	73fb      	strb	r3, [r7, #15]
		ASSERT_ERROR(Cl_MacRetval);
   8bd56:	7bfb      	ldrb	r3, [r7, #15]
   8bd58:	2b00      	cmp	r3, #0
   8bd5a:	d001      	beq.n	8bd60 <main+0x160>
   8bd5c:	4b5b      	ldr	r3, [pc, #364]	; (8becc <main+0x2cc>)
   8bd5e:	4798      	blx	r3
			if( Cl_MacRetval != CL_OK)
			{
				// Handle error
			}
		Cl_MacRetval = Cl_MacCheckforConsoleMessage();// check if there is any updates from console .. to be shifted to a polling timer..???
   8bd60:	4b65      	ldr	r3, [pc, #404]	; (8bef8 <main+0x2f8>)
   8bd62:	4798      	blx	r3
   8bd64:	4603      	mov	r3, r0
   8bd66:	73fb      	strb	r3, [r7, #15]
		ASSERT_ERROR(Cl_MacRetval);
   8bd68:	7bfb      	ldrb	r3, [r7, #15]
   8bd6a:	2b00      	cmp	r3, #0
   8bd6c:	d001      	beq.n	8bd72 <main+0x172>
   8bd6e:	4b57      	ldr	r3, [pc, #348]	; (8becc <main+0x2cc>)
   8bd70:	4798      	blx	r3
			if( Cl_MacRetval != CL_OK)
			{
				// Handle error
			}
		// TODO :  check for ret val
		delayticks = g_ul_ms_ticks - ul_cur_ticks; // testing-debugging
   8bd72:	4b5c      	ldr	r3, [pc, #368]	; (8bee4 <main+0x2e4>)
   8bd74:	681a      	ldr	r2, [r3, #0]
   8bd76:	4b5c      	ldr	r3, [pc, #368]	; (8bee8 <main+0x2e8>)
   8bd78:	681b      	ldr	r3, [r3, #0]
   8bd7a:	1ad3      	subs	r3, r2, r3
   8bd7c:	4a5f      	ldr	r2, [pc, #380]	; (8befc <main+0x2fc>)
   8bd7e:	6013      	str	r3, [r2, #0]
		
		Cl_MacRetval = cl_event_handler(EVT_TICK_INSTANT);
   8bd80:	2032      	movs	r0, #50	; 0x32
   8bd82:	4b5f      	ldr	r3, [pc, #380]	; (8bf00 <main+0x300>)
   8bd84:	4798      	blx	r3
   8bd86:	4603      	mov	r3, r0
   8bd88:	73fb      	strb	r3, [r7, #15]
		ASSERT_ERROR(Cl_MacRetval);
   8bd8a:	7bfb      	ldrb	r3, [r7, #15]
   8bd8c:	2b00      	cmp	r3, #0
   8bd8e:	d001      	beq.n	8bd94 <main+0x194>
   8bd90:	4b4e      	ldr	r3, [pc, #312]	; (8becc <main+0x2cc>)
   8bd92:	4798      	blx	r3
			{
				// Handle error
			}
		// TODO :  check for ret val
		
		while((Cl_MacEventQueueBc.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue1.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue2.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue3.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue4.Cl_MacNewEventcount > 0))  // LOOP EVENT DISPATCH
   8bd94:	f002 b964 	b.w	8e060 <main+0x2460>
		
		{
		Cl_MacEvent = EVT_NULL;
   8bd98:	4b5a      	ldr	r3, [pc, #360]	; (8bf04 <main+0x304>)
   8bd9a:	2200      	movs	r2, #0
   8bd9c:	701a      	strb	r2, [r3, #0]
		Cl_MacRetval = Cl_MacCreate_Macevent();
   8bd9e:	4b5a      	ldr	r3, [pc, #360]	; (8bf08 <main+0x308>)
   8bda0:	4798      	blx	r3
   8bda2:	4603      	mov	r3, r0
   8bda4:	73fb      	strb	r3, [r7, #15]
		ASSERT_ERROR(Cl_MacRetval);
   8bda6:	7bfb      	ldrb	r3, [r7, #15]
   8bda8:	2b00      	cmp	r3, #0
   8bdaa:	d001      	beq.n	8bdb0 <main+0x1b0>
   8bdac:	4b47      	ldr	r3, [pc, #284]	; (8becc <main+0x2cc>)
   8bdae:	4798      	blx	r3
			if( Cl_MacRetval != CL_OK)
			{
				// Handle error
			}

		if(Cl_MacNewEvent)
   8bdb0:	4b56      	ldr	r3, [pc, #344]	; (8bf0c <main+0x30c>)
   8bdb2:	781b      	ldrb	r3, [r3, #0]
   8bdb4:	2b00      	cmp	r3, #0
   8bdb6:	f002 8153 	beq.w	8e060 <main+0x2460>
		
		{
			Cl_MacRetval = cl_event_handler(Cl_MacEvent);
   8bdba:	4b52      	ldr	r3, [pc, #328]	; (8bf04 <main+0x304>)
   8bdbc:	781b      	ldrb	r3, [r3, #0]
   8bdbe:	4618      	mov	r0, r3
   8bdc0:	4b4f      	ldr	r3, [pc, #316]	; (8bf00 <main+0x300>)
   8bdc2:	4798      	blx	r3
   8bdc4:	4603      	mov	r3, r0
   8bdc6:	73fb      	strb	r3, [r7, #15]
			ASSERT_ERROR(Cl_MacRetval);
   8bdc8:	7bfb      	ldrb	r3, [r7, #15]
   8bdca:	2b00      	cmp	r3, #0
   8bdcc:	d001      	beq.n	8bdd2 <main+0x1d2>
   8bdce:	4b3f      	ldr	r3, [pc, #252]	; (8becc <main+0x2cc>)
   8bdd0:	4798      	blx	r3
			if( Cl_MacRetval != CL_OK)
			{
				// Handle error
			}

			if(Cl_MacEvent == EVT_CONSOLE_COMMAND_ACK)
   8bdd2:	4b4c      	ldr	r3, [pc, #304]	; (8bf04 <main+0x304>)
   8bdd4:	781b      	ldrb	r3, [r3, #0]
   8bdd6:	2b02      	cmp	r3, #2
   8bdd8:	d102      	bne.n	8bde0 <main+0x1e0>
				}
				else{
					// again send 
			//		Cl_SendDatatoconsole(cur_command, cur_data,cur_datasize);
				}
				ConsoleSync = true;
   8bdda:	4b4d      	ldr	r3, [pc, #308]	; (8bf10 <main+0x310>)
   8bddc:	2201      	movs	r2, #1
   8bdde:	701a      	strb	r2, [r3, #0]
			}
			
			if(Cl_MacEvent == EVT_CONSOLE_COMMAND_SYNC)
   8bde0:	4b48      	ldr	r3, [pc, #288]	; (8bf04 <main+0x304>)
   8bde2:	781b      	ldrb	r3, [r3, #0]
   8bde4:	2b01      	cmp	r3, #1
   8bde6:	d111      	bne.n	8be0c <main+0x20c>
			{
				//send sync
				Cl_Uint8Type data = CON_RX_COMMAND_SYNC;
   8bde8:	2303      	movs	r3, #3
   8bdea:	70fb      	strb	r3, [r7, #3]
				ConsoleSync = true;
   8bdec:	4b48      	ldr	r3, [pc, #288]	; (8bf10 <main+0x310>)
   8bdee:	2201      	movs	r2, #1
   8bdf0:	701a      	strb	r2, [r3, #0]
				Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_ACK,&data,1);
   8bdf2:	1cfb      	adds	r3, r7, #3
   8bdf4:	2004      	movs	r0, #4
   8bdf6:	4619      	mov	r1, r3
   8bdf8:	2201      	movs	r2, #1
   8bdfa:	4b46      	ldr	r3, [pc, #280]	; (8bf14 <main+0x314>)
   8bdfc:	4798      	blx	r3
   8bdfe:	4603      	mov	r3, r0
   8be00:	73fb      	strb	r3, [r7, #15]
				ASSERT_ERROR(Cl_MacRetval);
   8be02:	7bfb      	ldrb	r3, [r7, #15]
   8be04:	2b00      	cmp	r3, #0
   8be06:	d001      	beq.n	8be0c <main+0x20c>
   8be08:	4b30      	ldr	r3, [pc, #192]	; (8becc <main+0x2cc>)
   8be0a:	4798      	blx	r3
				}
				
			}			
			
			
				switch (Cl_MacState)
   8be0c:	4b31      	ldr	r3, [pc, #196]	; (8bed4 <main+0x2d4>)
   8be0e:	781b      	ldrb	r3, [r3, #0]
   8be10:	3b01      	subs	r3, #1
   8be12:	2b15      	cmp	r3, #21
   8be14:	f202 8118 	bhi.w	8e048 <main+0x2448>
   8be18:	a201      	add	r2, pc, #4	; (adr r2, 8be20 <main+0x220>)
   8be1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8be1e:	bf00      	nop
   8be20:	0008e049 	.word	0x0008e049
   8be24:	0008bf19 	.word	0x0008bf19
   8be28:	0008e049 	.word	0x0008e049
   8be2c:	0008e049 	.word	0x0008e049
   8be30:	0008c025 	.word	0x0008c025
   8be34:	0008c7a5 	.word	0x0008c7a5
   8be38:	0008c85b 	.word	0x0008c85b
   8be3c:	0008c549 	.word	0x0008c549
   8be40:	0008e049 	.word	0x0008e049
   8be44:	0008cb33 	.word	0x0008cb33
   8be48:	0008ce5d 	.word	0x0008ce5d
   8be4c:	0008d0f9 	.word	0x0008d0f9
   8be50:	0008d307 	.word	0x0008d307
   8be54:	0008d331 	.word	0x0008d331
   8be58:	0008d9c9 	.word	0x0008d9c9
   8be5c:	0008dc19 	.word	0x0008dc19
   8be60:	0008de13 	.word	0x0008de13
   8be64:	0008e041 	.word	0x0008e041
   8be68:	0008e045 	.word	0x0008e045
   8be6c:	0008d507 	.word	0x0008d507
   8be70:	0008d797 	.word	0x0008d797
   8be74:	0008c373 	.word	0x0008c373
   8be78:	0009bdfd 	.word	0x0009bdfd
   8be7c:	0008043d 	.word	0x0008043d
   8be80:	0009bc51 	.word	0x0009bc51
   8be84:	0009c58d 	.word	0x0009c58d
   8be88:	0009b32d 	.word	0x0009b32d
   8be8c:	0009b369 	.word	0x0009b369
   8be90:	0008e0cd 	.word	0x0008e0cd
   8be94:	0009b409 	.word	0x0009b409
   8be98:	0009421d 	.word	0x0009421d
   8be9c:	0009b6f5 	.word	0x0009b6f5
   8bea0:	0009b6d5 	.word	0x0009b6d5
   8bea4:	0009b671 	.word	0x0009b671
   8bea8:	0009b6c1 	.word	0x0009b6c1
   8beac:	0009b649 	.word	0x0009b649
   8beb0:	0009b699 	.word	0x0009b699
   8beb4:	0009b635 	.word	0x0009b635
   8beb8:	0009b685 	.word	0x0009b685
   8bebc:	0009b65d 	.word	0x0009b65d
   8bec0:	0009b6ad 	.word	0x0009b6ad
   8bec4:	0009b3e9 	.word	0x0009b3e9
   8bec8:	0008e1a1 	.word	0x0008e1a1
   8becc:	00088b81 	.word	0x00088b81
   8bed0:	0008e269 	.word	0x0008e269
   8bed4:	20070730 	.word	0x20070730
   8bed8:	0009d609 	.word	0x0009d609
   8bedc:	20071b0c 	.word	0x20071b0c
   8bee0:	200727d7 	.word	0x200727d7
   8bee4:	20071bdc 	.word	0x20071bdc
   8bee8:	20072538 	.word	0x20072538
   8beec:	0008e28d 	.word	0x0008e28d
   8bef0:	0008e6a1 	.word	0x0008e6a1
   8bef4:	0008e675 	.word	0x0008e675
   8bef8:	0008e2bd 	.word	0x0008e2bd
   8befc:	200726b8 	.word	0x200726b8
   8bf00:	00088b91 	.word	0x00088b91
   8bf04:	20071b0b 	.word	0x20071b0b
   8bf08:	0008e33d 	.word	0x0008e33d
   8bf0c:	20071b0d 	.word	0x20071b0d
   8bf10:	20070732 	.word	0x20070732
   8bf14:	0009d1e9 	.word	0x0009d1e9
					break;
					case MAC_IDLE:
					break;
					case MAC_INIT:
				
					switch ( Cl_MacEvent )
   8bf18:	4bb3      	ldr	r3, [pc, #716]	; (8c1e8 <main+0x5e8>)
   8bf1a:	781b      	ldrb	r3, [r3, #0]
   8bf1c:	3b2a      	subs	r3, #42	; 0x2a
   8bf1e:	2b19      	cmp	r3, #25
   8bf20:	d87d      	bhi.n	8c01e <main+0x41e>
   8bf22:	a201      	add	r2, pc, #4	; (adr r2, 8bf28 <main+0x328>)
   8bf24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8bf28:	0008bf91 	.word	0x0008bf91
   8bf2c:	0008c01f 	.word	0x0008c01f
   8bf30:	0008c01f 	.word	0x0008c01f
   8bf34:	0008c01f 	.word	0x0008c01f
   8bf38:	0008c01f 	.word	0x0008c01f
   8bf3c:	0008c01f 	.word	0x0008c01f
   8bf40:	0008c01f 	.word	0x0008c01f
   8bf44:	0008c01f 	.word	0x0008c01f
   8bf48:	0008c01f 	.word	0x0008c01f
   8bf4c:	0008c01f 	.word	0x0008c01f
   8bf50:	0008c01f 	.word	0x0008c01f
   8bf54:	0008c01f 	.word	0x0008c01f
   8bf58:	0008c01f 	.word	0x0008c01f
   8bf5c:	0008c01f 	.word	0x0008c01f
   8bf60:	0008c01f 	.word	0x0008c01f
   8bf64:	0008bfff 	.word	0x0008bfff
   8bf68:	0008c01f 	.word	0x0008c01f
   8bf6c:	0008bfff 	.word	0x0008bfff
   8bf70:	0008bfff 	.word	0x0008bfff
   8bf74:	0008bfff 	.word	0x0008bfff
   8bf78:	0008c01f 	.word	0x0008c01f
   8bf7c:	0008c01f 	.word	0x0008c01f
   8bf80:	0008c01f 	.word	0x0008c01f
   8bf84:	0008c01f 	.word	0x0008c01f
   8bf88:	0008c01f 	.word	0x0008c01f
   8bf8c:	0008bfb1 	.word	0x0008bfb1
					{
						case EVT_COMMAND_ENTER_INIT:
						Cl_MacRetval = Cl_Init_Controller(Cl_MacEvent);
   8bf90:	4b95      	ldrge	r3, [pc, #596]	; (8c1e8 <main+0x5e8>)
   8bf92:	781b      	ldrbge	r3, [r3, #0]
   8bf94:	4618      	movge	r0, r3
   8bf96:	4b95      	ldr	r3, [pc, #596]	; (8c1ec <main+0x5ec>)
   8bf98:	4798      	blx	r3
   8bf9a:	4603      	mov	r3, r0
   8bf9c:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8bf9e:	7bfb      	ldrb	r3, [r7, #15]
   8bfa0:	2b00      	cmp	r3, #0
   8bfa2:	d001      	beq.n	8bfa8 <main+0x3a8>
   8bfa4:	4b92      	ldr	r3, [pc, #584]	; (8c1f0 <main+0x5f0>)
   8bfa6:	4798      	blx	r3
								if( Cl_MacRetval != CL_OK)
								{
								// Handle error
								}
			
							Cl_MacEvent = EVT_NULL;
   8bfa8:	4b8f      	ldr	r3, [pc, #572]	; (8c1e8 <main+0x5e8>)
   8bfaa:	2200      	movs	r2, #0
   8bfac:	701a      	strb	r2, [r3, #0]
						break;
   8bfae:	e037      	b.n	8c020 <main+0x420>

						case MACREQ_ENTER_STANDBY:
						Cl_MacRetval = Cl_Init_Controller(EVT_COMMAND_ENTER_STANDBY);
   8bfb0:	202b      	movs	r0, #43	; 0x2b
   8bfb2:	4b8e      	ldr	r3, [pc, #568]	; (8c1ec <main+0x5ec>)
   8bfb4:	4798      	blx	r3
   8bfb6:	4603      	mov	r3, r0
   8bfb8:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8bfba:	7bfb      	ldrb	r3, [r7, #15]
   8bfbc:	2b00      	cmp	r3, #0
   8bfbe:	d001      	beq.n	8bfc4 <main+0x3c4>
   8bfc0:	4b8b      	ldr	r3, [pc, #556]	; (8c1f0 <main+0x5f0>)
   8bfc2:	4798      	blx	r3
								if( Cl_MacRetval == CL_OK)
   8bfc4:	7bfb      	ldrb	r3, [r7, #15]
   8bfc6:	2b00      	cmp	r3, #0
   8bfc8:	d109      	bne.n	8bfde <main+0x3de>
								{
									Cl_MacRetval = Cl_Standby_Controller(EVT_COMMAND_ENTER_STANDBY);
   8bfca:	202b      	movs	r0, #43	; 0x2b
   8bfcc:	4b89      	ldr	r3, [pc, #548]	; (8c1f4 <main+0x5f4>)
   8bfce:	4798      	blx	r3
   8bfd0:	4603      	mov	r3, r0
   8bfd2:	73fb      	strb	r3, [r7, #15]
									ASSERT_ERROR(Cl_MacRetval);
   8bfd4:	7bfb      	ldrb	r3, [r7, #15]
   8bfd6:	2b00      	cmp	r3, #0
   8bfd8:	d001      	beq.n	8bfde <main+0x3de>
   8bfda:	4b85      	ldr	r3, [pc, #532]	; (8c1f0 <main+0x5f0>)
   8bfdc:	4798      	blx	r3
								}
								
								if( Cl_MacRetval == CL_OK)
   8bfde:	7bfb      	ldrb	r3, [r7, #15]
   8bfe0:	2b00      	cmp	r3, #0
   8bfe2:	d10b      	bne.n	8bffc <main+0x3fc>
								{
									Cl_MacEvent = EVT_NULL;
   8bfe4:	4b80      	ldr	r3, [pc, #512]	; (8c1e8 <main+0x5e8>)
   8bfe6:	2200      	movs	r2, #0
   8bfe8:	701a      	strb	r2, [r3, #0]
									Cl_MacState =   MAC_STANDBY;
   8bfea:	4b83      	ldr	r3, [pc, #524]	; (8c1f8 <main+0x5f8>)
   8bfec:	2205      	movs	r2, #5
   8bfee:	701a      	strb	r2, [r3, #0]
									//Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_STANDBY,1);
									ASSERT_ERROR(Cl_MacRetval);
   8bff0:	7bfb      	ldrb	r3, [r7, #15]
   8bff2:	2b00      	cmp	r3, #0
   8bff4:	d002      	beq.n	8bffc <main+0x3fc>
   8bff6:	4b7e      	ldr	r3, [pc, #504]	; (8c1f0 <main+0x5f0>)
   8bff8:	4798      	blx	r3

								if( Cl_MacRetval != CL_OK)
								{
									// Handle error
								}
						break;
   8bffa:	e011      	b.n	8c020 <main+0x420>
   8bffc:	e010      	b.n	8c020 <main+0x420>
						case EVT_TICK_100M:	
						case EVT_TICK_SEC:
						case EVT_TICK_MIN:
						case EVT_TICK_HOUR:
						Cl_MacRetval = Cl_Init_Controller(Cl_MacEvent);
   8bffe:	4b7a      	ldr	r3, [pc, #488]	; (8c1e8 <main+0x5e8>)
   8c000:	781b      	ldrb	r3, [r3, #0]
   8c002:	4618      	mov	r0, r3
   8c004:	4b79      	ldr	r3, [pc, #484]	; (8c1ec <main+0x5ec>)
   8c006:	4798      	blx	r3
   8c008:	4603      	mov	r3, r0
   8c00a:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8c00c:	7bfb      	ldrb	r3, [r7, #15]
   8c00e:	2b00      	cmp	r3, #0
   8c010:	d001      	beq.n	8c016 <main+0x416>
   8c012:	4b77      	ldr	r3, [pc, #476]	; (8c1f0 <main+0x5f0>)
   8c014:	4798      	blx	r3
								if( Cl_MacRetval != CL_OK)
								{
									// Handle error
								}
							Cl_MacEvent = EVT_NULL;
   8c016:	4b74      	ldr	r3, [pc, #464]	; (8c1e8 <main+0x5e8>)
   8c018:	2200      	movs	r2, #0
   8c01a:	701a      	strb	r2, [r3, #0]

						break;
   8c01c:	e000      	b.n	8c020 <main+0x420>
						default: break;
   8c01e:	bf00      	nop
					}
					break;
   8c020:	f002 b815 	b.w	8e04e <main+0x244e>
					case MAC_CONSOLE_SYNC:
				
					break;
					case MAC_STANDBY:
				
					switch ( Cl_MacEvent )
   8c024:	4b70      	ldr	r3, [pc, #448]	; (8c1e8 <main+0x5e8>)
   8c026:	781b      	ldrb	r3, [r3, #0]
   8c028:	3b07      	subs	r3, #7
   8c02a:	2b5b      	cmp	r3, #91	; 0x5b
   8c02c:	f200 819e 	bhi.w	8c36c <main+0x76c>
   8c030:	a201      	add	r2, pc, #4	; (adr r2, 8c038 <main+0x438>)
   8c032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c036:	bf00      	nop
   8c038:	0008c1fd 	.word	0x0008c1fd
   8c03c:	0008c36d 	.word	0x0008c36d
   8c040:	0008c2fb 	.word	0x0008c2fb
   8c044:	0008c1c9 	.word	0x0008c1c9
   8c048:	0008c1c9 	.word	0x0008c1c9
   8c04c:	0008c1c9 	.word	0x0008c1c9
   8c050:	0008c36d 	.word	0x0008c36d
   8c054:	0008c36d 	.word	0x0008c36d
   8c058:	0008c25d 	.word	0x0008c25d
   8c05c:	0008c36d 	.word	0x0008c36d
   8c060:	0008c36d 	.word	0x0008c36d
   8c064:	0008c36d 	.word	0x0008c36d
   8c068:	0008c36d 	.word	0x0008c36d
   8c06c:	0008c36d 	.word	0x0008c36d
   8c070:	0008c36d 	.word	0x0008c36d
   8c074:	0008c36d 	.word	0x0008c36d
   8c078:	0008c36d 	.word	0x0008c36d
   8c07c:	0008c36d 	.word	0x0008c36d
   8c080:	0008c36d 	.word	0x0008c36d
   8c084:	0008c36d 	.word	0x0008c36d
   8c088:	0008c36d 	.word	0x0008c36d
   8c08c:	0008c36d 	.word	0x0008c36d
   8c090:	0008c36d 	.word	0x0008c36d
   8c094:	0008c36d 	.word	0x0008c36d
   8c098:	0008c36d 	.word	0x0008c36d
   8c09c:	0008c36d 	.word	0x0008c36d
   8c0a0:	0008c36d 	.word	0x0008c36d
   8c0a4:	0008c36d 	.word	0x0008c36d
   8c0a8:	0008c36d 	.word	0x0008c36d
   8c0ac:	0008c36d 	.word	0x0008c36d
   8c0b0:	0008c36d 	.word	0x0008c36d
   8c0b4:	0008c36d 	.word	0x0008c36d
   8c0b8:	0008c36d 	.word	0x0008c36d
   8c0bc:	0008c36d 	.word	0x0008c36d
   8c0c0:	0008c1a9 	.word	0x0008c1a9
   8c0c4:	0008c36d 	.word	0x0008c36d
   8c0c8:	0008c1c9 	.word	0x0008c1c9
   8c0cc:	0008c36d 	.word	0x0008c36d
   8c0d0:	0008c1c9 	.word	0x0008c1c9
   8c0d4:	0008c1c9 	.word	0x0008c1c9
   8c0d8:	0008c36d 	.word	0x0008c36d
   8c0dc:	0008c36d 	.word	0x0008c36d
   8c0e0:	0008c36d 	.word	0x0008c36d
   8c0e4:	0008c36d 	.word	0x0008c36d
   8c0e8:	0008c36d 	.word	0x0008c36d
   8c0ec:	0008c36d 	.word	0x0008c36d
   8c0f0:	0008c36d 	.word	0x0008c36d
   8c0f4:	0008c36d 	.word	0x0008c36d
   8c0f8:	0008c36d 	.word	0x0008c36d
   8c0fc:	0008c36d 	.word	0x0008c36d
   8c100:	0008c1c9 	.word	0x0008c1c9
   8c104:	0008c36d 	.word	0x0008c36d
   8c108:	0008c1c9 	.word	0x0008c1c9
   8c10c:	0008c1c9 	.word	0x0008c1c9
   8c110:	0008c1c9 	.word	0x0008c1c9
   8c114:	0008c36d 	.word	0x0008c36d
   8c118:	0008c2a1 	.word	0x0008c2a1
   8c11c:	0008c36d 	.word	0x0008c36d
   8c120:	0008c36d 	.word	0x0008c36d
   8c124:	0008c36d 	.word	0x0008c36d
   8c128:	0008c36d 	.word	0x0008c36d
   8c12c:	0008c36d 	.word	0x0008c36d
   8c130:	0008c36d 	.word	0x0008c36d
   8c134:	0008c36d 	.word	0x0008c36d
   8c138:	0008c36d 	.word	0x0008c36d
   8c13c:	0008c36d 	.word	0x0008c36d
   8c140:	0008c36d 	.word	0x0008c36d
   8c144:	0008c36d 	.word	0x0008c36d
   8c148:	0008c36d 	.word	0x0008c36d
   8c14c:	0008c36d 	.word	0x0008c36d
   8c150:	0008c36d 	.word	0x0008c36d
   8c154:	0008c36d 	.word	0x0008c36d
   8c158:	0008c36d 	.word	0x0008c36d
   8c15c:	0008c36d 	.word	0x0008c36d
   8c160:	0008c36d 	.word	0x0008c36d
   8c164:	0008c36d 	.word	0x0008c36d
   8c168:	0008c36d 	.word	0x0008c36d
   8c16c:	0008c36d 	.word	0x0008c36d
   8c170:	0008c36d 	.word	0x0008c36d
   8c174:	0008c36d 	.word	0x0008c36d
   8c178:	0008c36d 	.word	0x0008c36d
   8c17c:	0008c36d 	.word	0x0008c36d
   8c180:	0008c36d 	.word	0x0008c36d
   8c184:	0008c36d 	.word	0x0008c36d
   8c188:	0008c1c9 	.word	0x0008c1c9
   8c18c:	0008c1c9 	.word	0x0008c1c9
   8c190:	0008c36d 	.word	0x0008c36d
   8c194:	0008c36d 	.word	0x0008c36d
   8c198:	0008c1c9 	.word	0x0008c1c9
   8c19c:	0008c36d 	.word	0x0008c36d
   8c1a0:	0008c36d 	.word	0x0008c36d
   8c1a4:	0008c283 	.word	0x0008c283
				
					{
						
						case EVT_CONSOLE_COMMAND_CLR_ALARM:
						
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c1a8:	4b0f      	ldr	r3, [pc, #60]	; (8c1e8 <main+0x5e8>)
   8c1aa:	781b      	ldrb	r3, [r3, #0]
   8c1ac:	4618      	mov	r0, r3
   8c1ae:	4b11      	ldr	r3, [pc, #68]	; (8c1f4 <main+0x5f4>)
   8c1b0:	4798      	blx	r3
   8c1b2:	4603      	mov	r3, r0
   8c1b4:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c1b6:	7bfb      	ldrb	r3, [r7, #15]
   8c1b8:	2b00      	cmp	r3, #0
   8c1ba:	d001      	beq.n	8c1c0 <main+0x5c0>
   8c1bc:	4b0c      	ldr	r3, [pc, #48]	; (8c1f0 <main+0x5f0>)
   8c1be:	4798      	blx	r3
										if( Cl_MacRetval != CL_OK)
										{
											// Handle error
										}
							Cl_MacEvent = EVT_NULL;
   8c1c0:	4b09      	ldr	r3, [pc, #36]	; (8c1e8 <main+0x5e8>)
   8c1c2:	2200      	movs	r2, #0
   8c1c4:	701a      	strb	r2, [r3, #0]
							break;
   8c1c6:	e0d2      	b.n	8c36e <main+0x76e>
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
						
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c1c8:	4b07      	ldr	r3, [pc, #28]	; (8c1e8 <main+0x5e8>)
   8c1ca:	781b      	ldrb	r3, [r3, #0]
   8c1cc:	4618      	mov	r0, r3
   8c1ce:	4b09      	ldr	r3, [pc, #36]	; (8c1f4 <main+0x5f4>)
   8c1d0:	4798      	blx	r3
   8c1d2:	4603      	mov	r3, r0
   8c1d4:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c1d6:	7bfb      	ldrb	r3, [r7, #15]
   8c1d8:	2b00      	cmp	r3, #0
   8c1da:	d001      	beq.n	8c1e0 <main+0x5e0>
   8c1dc:	4b04      	ldr	r3, [pc, #16]	; (8c1f0 <main+0x5f0>)
   8c1de:	4798      	blx	r3
										if( Cl_MacRetval != CL_OK)
										{
											// Handle error
										}
							Cl_MacEvent = EVT_NULL;
   8c1e0:	4b01      	ldr	r3, [pc, #4]	; (8c1e8 <main+0x5e8>)
   8c1e2:	2200      	movs	r2, #0
   8c1e4:	701a      	strb	r2, [r3, #0]
							break;
   8c1e6:	e0c2      	b.n	8c36e <main+0x76e>
   8c1e8:	20071b0b 	.word	0x20071b0b
   8c1ec:	0008b8c1 	.word	0x0008b8c1
   8c1f0:	00088b81 	.word	0x00088b81
   8c1f4:	000a680d 	.word	0x000a680d
   8c1f8:	20070730 	.word	0x20070730

					
						case EVT_CONSOLE_COMMAND_RINSE_START:
							loopcountinsec = 0;
   8c1fc:	4bae      	ldr	r3, [pc, #696]	; (8c4b8 <main+0x8b8>)
   8c1fe:	2200      	movs	r2, #0
   8c200:	601a      	str	r2, [r3, #0]
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c202:	4bae      	ldr	r3, [pc, #696]	; (8c4bc <main+0x8bc>)
   8c204:	781b      	ldrb	r3, [r3, #0]
   8c206:	4618      	mov	r0, r3
   8c208:	4bad      	ldr	r3, [pc, #692]	; (8c4c0 <main+0x8c0>)
   8c20a:	4798      	blx	r3
   8c20c:	4603      	mov	r3, r0
   8c20e:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c210:	7bfb      	ldrb	r3, [r7, #15]
   8c212:	2b00      	cmp	r3, #0
   8c214:	d001      	beq.n	8c21a <main+0x61a>
   8c216:	4bab      	ldr	r3, [pc, #684]	; (8c4c4 <main+0x8c4>)
   8c218:	4798      	blx	r3

							if(Cl_MacRetval == CL_OK)
   8c21a:	7bfb      	ldrb	r3, [r7, #15]
   8c21c:	2b00      	cmp	r3, #0
   8c21e:	d10e      	bne.n	8c23e <main+0x63e>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c220:	4ba6      	ldr	r3, [pc, #664]	; (8c4bc <main+0x8bc>)
   8c222:	781b      	ldrb	r3, [r3, #0]
   8c224:	4618      	mov	r0, r3
   8c226:	4ba8      	ldr	r3, [pc, #672]	; (8c4c8 <main+0x8c8>)
   8c228:	4798      	blx	r3
   8c22a:	4603      	mov	r3, r0
   8c22c:	73fb      	strb	r3, [r7, #15]
								if(Cl_MacRetval != CL_REJECTED)
   8c22e:	7bfb      	ldrb	r3, [r7, #15]
   8c230:	2b03      	cmp	r3, #3
   8c232:	d004      	beq.n	8c23e <main+0x63e>
								{
									ASSERT_ERROR(Cl_MacRetval);	
   8c234:	7bfb      	ldrb	r3, [r7, #15]
   8c236:	2b00      	cmp	r3, #0
   8c238:	d001      	beq.n	8c23e <main+0x63e>
   8c23a:	4ba2      	ldr	r3, [pc, #648]	; (8c4c4 <main+0x8c4>)
   8c23c:	4798      	blx	r3
								}
								
							}							
							if( Cl_MacRetval == CL_OK)
   8c23e:	7bfb      	ldrb	r3, [r7, #15]
   8c240:	2b00      	cmp	r3, #0
   8c242:	d107      	bne.n	8c254 <main+0x654>
							{
								Cl_MacState = MAC_RINSE;
   8c244:	4ba1      	ldr	r3, [pc, #644]	; (8c4cc <main+0x8cc>)
   8c246:	2207      	movs	r2, #7
   8c248:	701a      	strb	r2, [r3, #0]
								//Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
								ASSERT_ERROR(Cl_MacRetval);			
   8c24a:	7bfb      	ldrb	r3, [r7, #15]
   8c24c:	2b00      	cmp	r3, #0
   8c24e:	d001      	beq.n	8c254 <main+0x654>
   8c250:	4b9c      	ldr	r3, [pc, #624]	; (8c4c4 <main+0x8c4>)
   8c252:	4798      	blx	r3
							}
							if( Cl_MacRetval != CL_OK)
							{
								// Handle error
							}
							Cl_MacEvent = EVT_NULL;
   8c254:	4b99      	ldr	r3, [pc, #612]	; (8c4bc <main+0x8bc>)
   8c256:	2200      	movs	r2, #0
   8c258:	701a      	strb	r2, [r3, #0]
						break;
   8c25a:	e088      	b.n	8c36e <main+0x76e>
						case EVT_CONSOLE_COMMAND_START_PRIME:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c25c:	4b97      	ldr	r3, [pc, #604]	; (8c4bc <main+0x8bc>)
   8c25e:	781b      	ldrb	r3, [r3, #0]
   8c260:	4618      	mov	r0, r3
   8c262:	4b99      	ldr	r3, [pc, #612]	; (8c4c8 <main+0x8c8>)
   8c264:	4798      	blx	r3
   8c266:	4603      	mov	r3, r0
   8c268:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c26a:	7bfb      	ldrb	r3, [r7, #15]
   8c26c:	2b00      	cmp	r3, #0
   8c26e:	d001      	beq.n	8c274 <main+0x674>
   8c270:	4b94      	ldr	r3, [pc, #592]	; (8c4c4 <main+0x8c4>)
   8c272:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8c274:	7bfb      	ldrb	r3, [r7, #15]
   8c276:	2b00      	cmp	r3, #0
   8c278:	d102      	bne.n	8c280 <main+0x680>
							{
								Cl_MacState = MAC_POST_RINSE_STANDBY;
   8c27a:	4b94      	ldr	r3, [pc, #592]	; (8c4cc <main+0x8cc>)
   8c27c:	220a      	movs	r2, #10
   8c27e:	701a      	strb	r2, [r3, #0]
							else
							{
									// Handle error
							}
							
						break;
   8c280:	e075      	b.n	8c36e <main+0x76e>
						case EVT_CONSOLE_COMMAND_SELFTEST_START:
					
						{
							
				//	Cl_MacRetval = Cl_selftest_init();
						Cl_MacRetval = self_test(Cl_MacEvent);
   8c282:	4b8e      	ldr	r3, [pc, #568]	; (8c4bc <main+0x8bc>)
   8c284:	781b      	ldrb	r3, [r3, #0]
   8c286:	4618      	mov	r0, r3
   8c288:	4b91      	ldr	r3, [pc, #580]	; (8c4d0 <main+0x8d0>)
   8c28a:	4798      	blx	r3
   8c28c:	4603      	mov	r3, r0
   8c28e:	73fb      	strb	r3, [r7, #15]
						
						Cl_SelfTest_prevMacState = Cl_MacState;
   8c290:	4b8e      	ldr	r3, [pc, #568]	; (8c4cc <main+0x8cc>)
   8c292:	781a      	ldrb	r2, [r3, #0]
   8c294:	4b8f      	ldr	r3, [pc, #572]	; (8c4d4 <main+0x8d4>)
   8c296:	701a      	strb	r2, [r3, #0]
						Cl_MacState = MAC_START_SELFTEST;
   8c298:	4b8c      	ldr	r3, [pc, #560]	; (8c4cc <main+0x8cc>)
   8c29a:	2216      	movs	r2, #22
   8c29c:	701a      	strb	r2, [r3, #0]
// 						command = CON_TX_COMMAND_RINSE_STARTED;
// 						Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
// 						
						}
						break;
   8c29e:	e066      	b.n	8c36e <main+0x76e>
						//	ASSERT_ERROR(Cl_MacRetval);
						//	if( Cl_MacRetval == CL_OK)
						//	{
								
								
								cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   8c2a0:	4b8d      	ldr	r3, [pc, #564]	; (8c4d8 <main+0x8d8>)
   8c2a2:	791b      	ldrb	r3, [r3, #4]
   8c2a4:	713b      	strb	r3, [r7, #4]
								if (cl_temp.bytearray[0] == 4)
   8c2a6:	793b      	ldrb	r3, [r7, #4]
   8c2a8:	2b04      	cmp	r3, #4
   8c2aa:	d103      	bne.n	8c2b4 <main+0x6b4>
								{
									flag_hotcitric = 1;
   8c2ac:	4b8b      	ldr	r3, [pc, #556]	; (8c4dc <main+0x8dc>)
   8c2ae:	2201      	movs	r2, #1
   8c2b0:	701a      	strb	r2, [r3, #0]
   8c2b2:	e00c      	b.n	8c2ce <main+0x6ce>
								}
								else if (cl_temp.bytearray[0] == 3)
   8c2b4:	793b      	ldrb	r3, [r7, #4]
   8c2b6:	2b03      	cmp	r3, #3
   8c2b8:	d103      	bne.n	8c2c2 <main+0x6c2>
								{
									flag_na = 1;
   8c2ba:	4b89      	ldr	r3, [pc, #548]	; (8c4e0 <main+0x8e0>)
   8c2bc:	2201      	movs	r2, #1
   8c2be:	701a      	strb	r2, [r3, #0]
   8c2c0:	e005      	b.n	8c2ce <main+0x6ce>
								}
								else if(cl_temp.bytearray[0] == 5){
   8c2c2:	793b      	ldrb	r3, [r7, #4]
   8c2c4:	2b05      	cmp	r3, #5
   8c2c6:	d102      	bne.n	8c2ce <main+0x6ce>
									
									flag_citric = 1;
   8c2c8:	4b86      	ldr	r3, [pc, #536]	; (8c4e4 <main+0x8e4>)
   8c2ca:	2201      	movs	r2, #1
   8c2cc:	701a      	strb	r2, [r3, #0]
								}
								
								Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8c2ce:	4b7b      	ldr	r3, [pc, #492]	; (8c4bc <main+0x8bc>)
   8c2d0:	781b      	ldrb	r3, [r3, #0]
   8c2d2:	4618      	mov	r0, r3
   8c2d4:	4b84      	ldr	r3, [pc, #528]	; (8c4e8 <main+0x8e8>)
   8c2d6:	4798      	blx	r3
   8c2d8:	4603      	mov	r3, r0
   8c2da:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8c2dc:	7bfb      	ldrb	r3, [r7, #15]
   8c2de:	2b00      	cmp	r3, #0
   8c2e0:	d001      	beq.n	8c2e6 <main+0x6e6>
   8c2e2:	4b78      	ldr	r3, [pc, #480]	; (8c4c4 <main+0x8c4>)
   8c2e4:	4798      	blx	r3
								Cl_MacState = MAC_DISINFECT;
   8c2e6:	4b79      	ldr	r3, [pc, #484]	; (8c4cc <main+0x8cc>)
   8c2e8:	2208      	movs	r2, #8
   8c2ea:	701a      	strb	r2, [r3, #0]
							//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DISINFECT,1);
								ASSERT_ERROR(Cl_MacRetval);
   8c2ec:	7bfb      	ldrb	r3, [r7, #15]
   8c2ee:	2b00      	cmp	r3, #0
   8c2f0:	d002      	beq.n	8c2f8 <main+0x6f8>
   8c2f2:	4b74      	ldr	r3, [pc, #464]	; (8c4c4 <main+0x8c4>)
   8c2f4:	4798      	blx	r3
// 							{
// 								// Handle error
// 							}
							

						break;
   8c2f6:	e03a      	b.n	8c36e <main+0x76e>
   8c2f8:	e039      	b.n	8c36e <main+0x76e>
						
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
										
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c2fa:	4b70      	ldr	r3, [pc, #448]	; (8c4bc <main+0x8bc>)
   8c2fc:	781b      	ldrb	r3, [r3, #0]
   8c2fe:	4618      	mov	r0, r3
   8c300:	4b6f      	ldr	r3, [pc, #444]	; (8c4c0 <main+0x8c0>)
   8c302:	4798      	blx	r3
   8c304:	4603      	mov	r3, r0
   8c306:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c308:	7bfb      	ldrb	r3, [r7, #15]
   8c30a:	2b00      	cmp	r3, #0
   8c30c:	d001      	beq.n	8c312 <main+0x712>
   8c30e:	4b6d      	ldr	r3, [pc, #436]	; (8c4c4 <main+0x8c4>)
   8c310:	4798      	blx	r3
							if(Cl_MacRetval == CL_ACCEPTED)
   8c312:	7bfb      	ldrb	r3, [r7, #15]
   8c314:	2b02      	cmp	r3, #2
   8c316:	d10b      	bne.n	8c330 <main+0x730>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c318:	4b68      	ldr	r3, [pc, #416]	; (8c4bc <main+0x8bc>)
   8c31a:	781b      	ldrb	r3, [r3, #0]
   8c31c:	4618      	mov	r0, r3
   8c31e:	4b6a      	ldr	r3, [pc, #424]	; (8c4c8 <main+0x8c8>)
   8c320:	4798      	blx	r3
   8c322:	4603      	mov	r3, r0
   8c324:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8c326:	7bfb      	ldrb	r3, [r7, #15]
   8c328:	2b00      	cmp	r3, #0
   8c32a:	d001      	beq.n	8c330 <main+0x730>
   8c32c:	4b65      	ldr	r3, [pc, #404]	; (8c4c4 <main+0x8c4>)
   8c32e:	4798      	blx	r3
							}
							
							if(Cl_MacRetval == CL_ACCEPTED)
   8c330:	7bfb      	ldrb	r3, [r7, #15]
   8c332:	2b02      	cmp	r3, #2
   8c334:	d10b      	bne.n	8c34e <main+0x74e>
							{
								Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8c336:	4b61      	ldr	r3, [pc, #388]	; (8c4bc <main+0x8bc>)
   8c338:	781b      	ldrb	r3, [r3, #0]
   8c33a:	4618      	mov	r0, r3
   8c33c:	4b6b      	ldr	r3, [pc, #428]	; (8c4ec <main+0x8ec>)
   8c33e:	4798      	blx	r3
   8c340:	4603      	mov	r3, r0
   8c342:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8c344:	7bfb      	ldrb	r3, [r7, #15]
   8c346:	2b00      	cmp	r3, #0
   8c348:	d001      	beq.n	8c34e <main+0x74e>
   8c34a:	4b5e      	ldr	r3, [pc, #376]	; (8c4c4 <main+0x8c4>)
   8c34c:	4798      	blx	r3
							}
							
							if( Cl_MacRetval == CL_OK)
   8c34e:	7bfb      	ldrb	r3, [r7, #15]
   8c350:	2b00      	cmp	r3, #0
   8c352:	d107      	bne.n	8c364 <main+0x764>
							{
								Cl_MacState = MAC_DPREP;
   8c354:	4b5d      	ldr	r3, [pc, #372]	; (8c4cc <main+0x8cc>)
   8c356:	220b      	movs	r2, #11
   8c358:	701a      	strb	r2, [r3, #0]
							//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP,1);
								ASSERT_ERROR(Cl_MacRetval);
   8c35a:	7bfb      	ldrb	r3, [r7, #15]
   8c35c:	2b00      	cmp	r3, #0
   8c35e:	d001      	beq.n	8c364 <main+0x764>
   8c360:	4b58      	ldr	r3, [pc, #352]	; (8c4c4 <main+0x8c4>)
   8c362:	4798      	blx	r3
							{
									// handle error
							}
							
							
							Cl_MacEvent = EVT_NULL;
   8c364:	4b55      	ldr	r3, [pc, #340]	; (8c4bc <main+0x8bc>)
   8c366:	2200      	movs	r2, #0
   8c368:	701a      	strb	r2, [r3, #0]
							
							
						break;
   8c36a:	e000      	b.n	8c36e <main+0x76e>

						
						default: break;
   8c36c:	bf00      	nop
					}
					break;
   8c36e:	f001 be6e 	b.w	8e04e <main+0x244e>
						case MAC_START_SELFTEST:                                                                   //  *************************************
						
						switch(Cl_MacEvent)
   8c372:	4b52      	ldr	r3, [pc, #328]	; (8c4bc <main+0x8bc>)
   8c374:	781b      	ldrb	r3, [r3, #0]
   8c376:	3b38      	subs	r3, #56	; 0x38
   8c378:	2b2f      	cmp	r3, #47	; 0x2f
   8c37a:	f200 80e4 	bhi.w	8c546 <main+0x946>
   8c37e:	a201      	add	r2, pc, #4	; (adr r2, 8c384 <main+0x784>)
   8c380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c384:	0008c445 	.word	0x0008c445
   8c388:	0008c445 	.word	0x0008c445
   8c38c:	0008c445 	.word	0x0008c445
   8c390:	0008c445 	.word	0x0008c445
   8c394:	0008c445 	.word	0x0008c445
   8c398:	0008c547 	.word	0x0008c547
   8c39c:	0008c547 	.word	0x0008c547
   8c3a0:	0008c547 	.word	0x0008c547
   8c3a4:	0008c547 	.word	0x0008c547
   8c3a8:	0008c547 	.word	0x0008c547
   8c3ac:	0008c547 	.word	0x0008c547
   8c3b0:	0008c547 	.word	0x0008c547
   8c3b4:	0008c547 	.word	0x0008c547
   8c3b8:	0008c547 	.word	0x0008c547
   8c3bc:	0008c547 	.word	0x0008c547
   8c3c0:	0008c547 	.word	0x0008c547
   8c3c4:	0008c547 	.word	0x0008c547
   8c3c8:	0008c547 	.word	0x0008c547
   8c3cc:	0008c547 	.word	0x0008c547
   8c3d0:	0008c547 	.word	0x0008c547
   8c3d4:	0008c547 	.word	0x0008c547
   8c3d8:	0008c547 	.word	0x0008c547
   8c3dc:	0008c547 	.word	0x0008c547
   8c3e0:	0008c547 	.word	0x0008c547
   8c3e4:	0008c547 	.word	0x0008c547
   8c3e8:	0008c547 	.word	0x0008c547
   8c3ec:	0008c547 	.word	0x0008c547
   8c3f0:	0008c547 	.word	0x0008c547
   8c3f4:	0008c547 	.word	0x0008c547
   8c3f8:	0008c547 	.word	0x0008c547
   8c3fc:	0008c547 	.word	0x0008c547
   8c400:	0008c547 	.word	0x0008c547
   8c404:	0008c547 	.word	0x0008c547
   8c408:	0008c547 	.word	0x0008c547
   8c40c:	0008c547 	.word	0x0008c547
   8c410:	0008c547 	.word	0x0008c547
   8c414:	0008c547 	.word	0x0008c547
   8c418:	0008c547 	.word	0x0008c547
   8c41c:	0008c547 	.word	0x0008c547
   8c420:	0008c547 	.word	0x0008c547
   8c424:	0008c547 	.word	0x0008c547
   8c428:	0008c547 	.word	0x0008c547
   8c42c:	0008c445 	.word	0x0008c445
   8c430:	0008c445 	.word	0x0008c445
   8c434:	0008c445 	.word	0x0008c445
   8c438:	0008c4f5 	.word	0x0008c4f5
   8c43c:	0008c465 	.word	0x0008c465
   8c440:	0008c445 	.word	0x0008c445
							//case EVT_CONSOLE_COMMAND_GET_DATA:
							//case EVT_CONSOLE_COMMAND_SET_DATA:
							case EVT_COSOLE_COMMAND_SELFTEST_ALARM_PAAS:
							case EVT_COSOLE_COMMAND_SELFTEST_ALARM_FAIL:
							case EVT_CONSOLE_COMMAND_SYNCCONFIRMED:
							Cl_MacRetval =  self_test(Cl_MacEvent);
   8c444:	4b1d      	ldr	r3, [pc, #116]	; (8c4bc <main+0x8bc>)
   8c446:	781b      	ldrb	r3, [r3, #0]
   8c448:	4618      	mov	r0, r3
   8c44a:	4b21      	ldr	r3, [pc, #132]	; (8c4d0 <main+0x8d0>)
   8c44c:	4798      	blx	r3
   8c44e:	4603      	mov	r3, r0
   8c450:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c452:	7bfb      	ldrb	r3, [r7, #15]
   8c454:	2b00      	cmp	r3, #0
   8c456:	d001      	beq.n	8c45c <main+0x85c>
   8c458:	4b1a      	ldr	r3, [pc, #104]	; (8c4c4 <main+0x8c4>)
   8c45a:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
							
							Cl_MacEvent = EVT_NULL;
   8c45c:	4b17      	ldr	r3, [pc, #92]	; (8c4bc <main+0x8bc>)
   8c45e:	2200      	movs	r2, #0
   8c460:	701a      	strb	r2, [r3, #0]
							break;
   8c462:	e071      	b.n	8c548 <main+0x948>
							
							case EVT_CONSOLE_COMMAND_SELFTEST_STOP:
							
			       				Cl_MacRetval = self_test(Cl_MacEvent);
   8c464:	4b15      	ldr	r3, [pc, #84]	; (8c4bc <main+0x8bc>)
   8c466:	781b      	ldrb	r3, [r3, #0]
   8c468:	4618      	mov	r0, r3
   8c46a:	4b19      	ldr	r3, [pc, #100]	; (8c4d0 <main+0x8d0>)
   8c46c:	4798      	blx	r3
   8c46e:	4603      	mov	r3, r0
   8c470:	73fb      	strb	r3, [r7, #15]
						 		ASSERT_ERROR(Cl_MacRetval);
   8c472:	7bfb      	ldrb	r3, [r7, #15]
   8c474:	2b00      	cmp	r3, #0
   8c476:	d001      	beq.n	8c47c <main+0x87c>
   8c478:	4b12      	ldr	r3, [pc, #72]	; (8c4c4 <main+0x8c4>)
   8c47a:	4798      	blx	r3
							    if( Cl_MacRetval == CL_OK)
   8c47c:	7bfb      	ldrb	r3, [r7, #15]
   8c47e:	2b00      	cmp	r3, #0
   8c480:	d115      	bne.n	8c4ae <main+0x8ae>
								{
									
									
									Cl_MacRetval =Cl_selftest_init();
   8c482:	4b1b      	ldr	r3, [pc, #108]	; (8c4f0 <main+0x8f0>)
   8c484:	4798      	blx	r3
   8c486:	4603      	mov	r3, r0
   8c488:	73fb      	strb	r3, [r7, #15]
									
									Cl_MacRetval = Cl_Standby_Controller(EVT_COMMAND_ENTER_STANDBY);
   8c48a:	202b      	movs	r0, #43	; 0x2b
   8c48c:	4b0c      	ldr	r3, [pc, #48]	; (8c4c0 <main+0x8c0>)
   8c48e:	4798      	blx	r3
   8c490:	4603      	mov	r3, r0
   8c492:	73fb      	strb	r3, [r7, #15]
									ASSERT_ERROR(Cl_MacRetval);
   8c494:	7bfb      	ldrb	r3, [r7, #15]
   8c496:	2b00      	cmp	r3, #0
   8c498:	d001      	beq.n	8c49e <main+0x89e>
   8c49a:	4b0a      	ldr	r3, [pc, #40]	; (8c4c4 <main+0x8c4>)
   8c49c:	4798      	blx	r3
									//Cl_MacState =   MAC_STANDBY;
								 	Cl_MacState = Cl_SelfTest_prevMacState;//  MAC_STANDBY;	
   8c49e:	4b0d      	ldr	r3, [pc, #52]	; (8c4d4 <main+0x8d4>)
   8c4a0:	781a      	ldrb	r2, [r3, #0]
   8c4a2:	4b0a      	ldr	r3, [pc, #40]	; (8c4cc <main+0x8cc>)
   8c4a4:	701a      	strb	r2, [r3, #0]
									Cl_MacEvent = EVT_NULL;
   8c4a6:	4b05      	ldr	r3, [pc, #20]	; (8c4bc <main+0x8bc>)
   8c4a8:	2200      	movs	r2, #0
   8c4aa:	701a      	strb	r2, [r3, #0]
									break;
   8c4ac:	e04c      	b.n	8c548 <main+0x948>

								}
								else
								{
									Cl_MacEvent = EVT_NULL;    //handle error
   8c4ae:	4b03      	ldr	r3, [pc, #12]	; (8c4bc <main+0x8bc>)
   8c4b0:	2200      	movs	r2, #0
   8c4b2:	701a      	strb	r2, [r3, #0]
								}
							
							break;
   8c4b4:	e048      	b.n	8c548 <main+0x948>
   8c4b6:	bf00      	nop
   8c4b8:	20071b10 	.word	0x20071b10
   8c4bc:	20071b0b 	.word	0x20071b0b
   8c4c0:	000a680d 	.word	0x000a680d
   8c4c4:	00088b81 	.word	0x00088b81
   8c4c8:	000a3f11 	.word	0x000a3f11
   8c4cc:	20070730 	.word	0x20070730
   8c4d0:	0008e6cd 	.word	0x0008e6cd
   8c4d4:	20070731 	.word	0x20070731
   8c4d8:	200725bc 	.word	0x200725bc
   8c4dc:	20071b93 	.word	0x20071b93
   8c4e0:	20071b95 	.word	0x20071b95
   8c4e4:	20071b96 	.word	0x20071b96
   8c4e8:	0009d9f1 	.word	0x0009d9f1
   8c4ec:	0009fd19 	.word	0x0009fd19
   8c4f0:	0008f5e5 	.word	0x0008f5e5
							
							
							
							case MACREQ_SELFTEST_COMPLETED:
							
							Cl_MacRetval = self_test(Cl_MacEvent);
   8c4f4:	4ba2      	ldr	r3, [pc, #648]	; (8c780 <main+0xb80>)
   8c4f6:	781b      	ldrb	r3, [r3, #0]
   8c4f8:	4618      	mov	r0, r3
   8c4fa:	4ba2      	ldr	r3, [pc, #648]	; (8c784 <main+0xb84>)
   8c4fc:	4798      	blx	r3
   8c4fe:	4603      	mov	r3, r0
   8c500:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c502:	7bfb      	ldrb	r3, [r7, #15]
   8c504:	2b00      	cmp	r3, #0
   8c506:	d001      	beq.n	8c50c <main+0x90c>
   8c508:	4b9f      	ldr	r3, [pc, #636]	; (8c788 <main+0xb88>)
   8c50a:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8c50c:	7bfb      	ldrb	r3, [r7, #15]
   8c50e:	2b00      	cmp	r3, #0
   8c510:	d115      	bne.n	8c53e <main+0x93e>
							{
								
								
 							Cl_MacRetval =Cl_selftest_init();
   8c512:	4b9e      	ldr	r3, [pc, #632]	; (8c78c <main+0xb8c>)
   8c514:	4798      	blx	r3
   8c516:	4603      	mov	r3, r0
   8c518:	73fb      	strb	r3, [r7, #15]
								 	
									 	Cl_MacRetval = Cl_Standby_Controller(EVT_COMMAND_ENTER_STANDBY);
   8c51a:	202b      	movs	r0, #43	; 0x2b
   8c51c:	4b9c      	ldr	r3, [pc, #624]	; (8c790 <main+0xb90>)
   8c51e:	4798      	blx	r3
   8c520:	4603      	mov	r3, r0
   8c522:	73fb      	strb	r3, [r7, #15]
									 	ASSERT_ERROR(Cl_MacRetval);
   8c524:	7bfb      	ldrb	r3, [r7, #15]
   8c526:	2b00      	cmp	r3, #0
   8c528:	d001      	beq.n	8c52e <main+0x92e>
   8c52a:	4b97      	ldr	r3, [pc, #604]	; (8c788 <main+0xb88>)
   8c52c:	4798      	blx	r3
										 
									 	Cl_MacState = Cl_SelfTest_prevMacState;//  MAC_STANDBY;
   8c52e:	4b99      	ldr	r3, [pc, #612]	; (8c794 <main+0xb94>)
   8c530:	781a      	ldrb	r2, [r3, #0]
   8c532:	4b99      	ldr	r3, [pc, #612]	; (8c798 <main+0xb98>)
   8c534:	701a      	strb	r2, [r3, #0]
								 	
								 	Cl_MacEvent = EVT_NULL;
   8c536:	4b92      	ldr	r3, [pc, #584]	; (8c780 <main+0xb80>)
   8c538:	2200      	movs	r2, #0
   8c53a:	701a      	strb	r2, [r3, #0]
								 	break;
   8c53c:	e004      	b.n	8c548 <main+0x948>
							}
							else
							{
								//handle error
							}
							Cl_MacEvent = EVT_NULL;
   8c53e:	4b90      	ldr	r3, [pc, #576]	; (8c780 <main+0xb80>)
   8c540:	2200      	movs	r2, #0
   8c542:	701a      	strb	r2, [r3, #0]
							break;
   8c544:	e000      	b.n	8c548 <main+0x948>
// 							ASSERT_ERROR(Cl_MacRetval);
// 							break;
// 							
						
						
						default: break;                                                              //        **********************************************
   8c546:	bf00      	nop
						
						}
					
					case MAC_DISINFECT:
					
					switch(Cl_MacEvent)
   8c548:	4b8d      	ldr	r3, [pc, #564]	; (8c780 <main+0xb80>)
   8c54a:	781b      	ldrb	r3, [r3, #0]
   8c54c:	3b07      	subs	r3, #7
   8c54e:	2b55      	cmp	r3, #85	; 0x55
   8c550:	f200 8110 	bhi.w	8c774 <main+0xb74>
   8c554:	a201      	add	r2, pc, #4	; (adr r2, 8c55c <main+0x95c>)
   8c556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c55a:	bf00      	nop
   8c55c:	0008c6ff 	.word	0x0008c6ff
   8c560:	0008c775 	.word	0x0008c775
   8c564:	0008c775 	.word	0x0008c775
   8c568:	0008c6ff 	.word	0x0008c6ff
   8c56c:	0008c6ff 	.word	0x0008c6ff
   8c570:	0008c6ff 	.word	0x0008c6ff
   8c574:	0008c775 	.word	0x0008c775
   8c578:	0008c775 	.word	0x0008c775
   8c57c:	0008c775 	.word	0x0008c775
   8c580:	0008c775 	.word	0x0008c775
   8c584:	0008c775 	.word	0x0008c775
   8c588:	0008c775 	.word	0x0008c775
   8c58c:	0008c775 	.word	0x0008c775
   8c590:	0008c775 	.word	0x0008c775
   8c594:	0008c775 	.word	0x0008c775
   8c598:	0008c775 	.word	0x0008c775
   8c59c:	0008c775 	.word	0x0008c775
   8c5a0:	0008c775 	.word	0x0008c775
   8c5a4:	0008c775 	.word	0x0008c775
   8c5a8:	0008c775 	.word	0x0008c775
   8c5ac:	0008c775 	.word	0x0008c775
   8c5b0:	0008c775 	.word	0x0008c775
   8c5b4:	0008c775 	.word	0x0008c775
   8c5b8:	0008c775 	.word	0x0008c775
   8c5bc:	0008c775 	.word	0x0008c775
   8c5c0:	0008c775 	.word	0x0008c775
   8c5c4:	0008c775 	.word	0x0008c775
   8c5c8:	0008c775 	.word	0x0008c775
   8c5cc:	0008c775 	.word	0x0008c775
   8c5d0:	0008c775 	.word	0x0008c775
   8c5d4:	0008c775 	.word	0x0008c775
   8c5d8:	0008c775 	.word	0x0008c775
   8c5dc:	0008c775 	.word	0x0008c775
   8c5e0:	0008c775 	.word	0x0008c775
   8c5e4:	0008c6ef 	.word	0x0008c6ef
   8c5e8:	0008c775 	.word	0x0008c775
   8c5ec:	0008c775 	.word	0x0008c775
   8c5f0:	0008c775 	.word	0x0008c775
   8c5f4:	0008c775 	.word	0x0008c775
   8c5f8:	0008c6ef 	.word	0x0008c6ef
   8c5fc:	0008c775 	.word	0x0008c775
   8c600:	0008c775 	.word	0x0008c775
   8c604:	0008c775 	.word	0x0008c775
   8c608:	0008c775 	.word	0x0008c775
   8c60c:	0008c775 	.word	0x0008c775
   8c610:	0008c775 	.word	0x0008c775
   8c614:	0008c775 	.word	0x0008c775
   8c618:	0008c775 	.word	0x0008c775
   8c61c:	0008c775 	.word	0x0008c775
   8c620:	0008c6b5 	.word	0x0008c6b5
   8c624:	0008c6b5 	.word	0x0008c6b5
   8c628:	0008c6b5 	.word	0x0008c6b5
   8c62c:	0008c6b5 	.word	0x0008c6b5
   8c630:	0008c6b5 	.word	0x0008c6b5
   8c634:	0008c775 	.word	0x0008c775
   8c638:	0008c775 	.word	0x0008c775
   8c63c:	0008c6ff 	.word	0x0008c6ff
   8c640:	0008c6ff 	.word	0x0008c6ff
   8c644:	0008c6ff 	.word	0x0008c6ff
   8c648:	0008c775 	.word	0x0008c775
   8c64c:	0008c775 	.word	0x0008c775
   8c650:	0008c71b 	.word	0x0008c71b
   8c654:	0008c71b 	.word	0x0008c71b
   8c658:	0008c775 	.word	0x0008c775
   8c65c:	0008c775 	.word	0x0008c775
   8c660:	0008c775 	.word	0x0008c775
   8c664:	0008c775 	.word	0x0008c775
   8c668:	0008c775 	.word	0x0008c775
   8c66c:	0008c775 	.word	0x0008c775
   8c670:	0008c775 	.word	0x0008c775
   8c674:	0008c775 	.word	0x0008c775
   8c678:	0008c775 	.word	0x0008c775
   8c67c:	0008c775 	.word	0x0008c775
   8c680:	0008c775 	.word	0x0008c775
   8c684:	0008c6ff 	.word	0x0008c6ff
   8c688:	0008c737 	.word	0x0008c737
   8c68c:	0008c737 	.word	0x0008c737
   8c690:	0008c753 	.word	0x0008c753
   8c694:	0008c775 	.word	0x0008c775
   8c698:	0008c775 	.word	0x0008c775
   8c69c:	0008c775 	.word	0x0008c775
   8c6a0:	0008c775 	.word	0x0008c775
   8c6a4:	0008c775 	.word	0x0008c775
   8c6a8:	0008c775 	.word	0x0008c775
   8c6ac:	0008c6ff 	.word	0x0008c6ff
   8c6b0:	0008c6ff 	.word	0x0008c6ff
						case EVT_TICK_50M:
						case EVT_TICK_100M:
						case EVT_TICK_500M:
						case EVT_TICK_SEC:
						case EVT_TICK_MIN:
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8c6b4:	4b32      	ldr	r3, [pc, #200]	; (8c780 <main+0xb80>)
   8c6b6:	781b      	ldrb	r3, [r3, #0]
   8c6b8:	4618      	mov	r0, r3
   8c6ba:	4b38      	ldr	r3, [pc, #224]	; (8c79c <main+0xb9c>)
   8c6bc:	4798      	blx	r3
   8c6be:	4603      	mov	r3, r0
   8c6c0:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c6c2:	7bfb      	ldrb	r3, [r7, #15]
   8c6c4:	2b00      	cmp	r3, #0
   8c6c6:	d001      	beq.n	8c6cc <main+0xacc>
   8c6c8:	4b2f      	ldr	r3, [pc, #188]	; (8c788 <main+0xb88>)
   8c6ca:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8c6cc:	7bfb      	ldrb	r3, [r7, #15]
   8c6ce:	2b00      	cmp	r3, #0
   8c6d0:	d10c      	bne.n	8c6ec <main+0xaec>
							{
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c6d2:	4b2b      	ldr	r3, [pc, #172]	; (8c780 <main+0xb80>)
   8c6d4:	781b      	ldrb	r3, [r3, #0]
   8c6d6:	4618      	mov	r0, r3
   8c6d8:	4b31      	ldr	r3, [pc, #196]	; (8c7a0 <main+0xba0>)
   8c6da:	4798      	blx	r3
   8c6dc:	4603      	mov	r3, r0
   8c6de:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c6e0:	7bfb      	ldrb	r3, [r7, #15]
   8c6e2:	2b00      	cmp	r3, #0
   8c6e4:	d002      	beq.n	8c6ec <main+0xaec>
   8c6e6:	4b28      	ldr	r3, [pc, #160]	; (8c788 <main+0xb88>)
   8c6e8:	4798      	blx	r3
							}
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8c6ea:	e044      	b.n	8c776 <main+0xb76>
   8c6ec:	e043      	b.n	8c776 <main+0xb76>
						
						case EVT_CONSOLE_COMMAND_CLR_ALARM:
						case EVT_ALARM_TRIGGERED:
						
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8c6ee:	4b24      	ldr	r3, [pc, #144]	; (8c780 <main+0xb80>)
   8c6f0:	781b      	ldrb	r3, [r3, #0]
   8c6f2:	4618      	mov	r0, r3
   8c6f4:	4b29      	ldr	r3, [pc, #164]	; (8c79c <main+0xb9c>)
   8c6f6:	4798      	blx	r3
   8c6f8:	4603      	mov	r3, r0
   8c6fa:	73fb      	strb	r3, [r7, #15]
						
						break;
   8c6fc:	e03b      	b.n	8c776 <main+0xb76>
						case EVT_CONSOLE_COMMAND_RINSE_START:
						case MACREQ_BC_OPENFILL_COMPLETED:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
						
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8c6fe:	4b20      	ldr	r3, [pc, #128]	; (8c780 <main+0xb80>)
   8c700:	781b      	ldrb	r3, [r3, #0]
   8c702:	4618      	mov	r0, r3
   8c704:	4b25      	ldr	r3, [pc, #148]	; (8c79c <main+0xb9c>)
   8c706:	4798      	blx	r3
   8c708:	4603      	mov	r3, r0
   8c70a:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c70c:	7bfb      	ldrb	r3, [r7, #15]
   8c70e:	2b00      	cmp	r3, #0
   8c710:	d002      	beq.n	8c718 <main+0xb18>
   8c712:	4b1d      	ldr	r3, [pc, #116]	; (8c788 <main+0xb88>)
   8c714:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8c716:	e02e      	b.n	8c776 <main+0xb76>
   8c718:	e02d      	b.n	8c776 <main+0xb76>
						case MACREQ_START_PRE_DISINF_RINSE:
						case MACREQ_START_POST_DISINF_RINSE:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c71a:	4b19      	ldr	r3, [pc, #100]	; (8c780 <main+0xb80>)
   8c71c:	781b      	ldrb	r3, [r3, #0]
   8c71e:	4618      	mov	r0, r3
   8c720:	4b1f      	ldr	r3, [pc, #124]	; (8c7a0 <main+0xba0>)
   8c722:	4798      	blx	r3
   8c724:	4603      	mov	r3, r0
   8c726:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c728:	7bfb      	ldrb	r3, [r7, #15]
   8c72a:	2b00      	cmp	r3, #0
   8c72c:	d002      	beq.n	8c734 <main+0xb34>
   8c72e:	4b16      	ldr	r3, [pc, #88]	; (8c788 <main+0xb88>)
   8c730:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8c732:	e020      	b.n	8c776 <main+0xb76>
   8c734:	e01f      	b.n	8c776 <main+0xb76>
						case MACREQ_PRE_DISINFECT_RINSE_COMPLETED:
						case MACREQ_POST_DISINFECT_RINSE_COMPLETED:
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8c736:	4b12      	ldr	r3, [pc, #72]	; (8c780 <main+0xb80>)
   8c738:	781b      	ldrb	r3, [r3, #0]
   8c73a:	4618      	mov	r0, r3
   8c73c:	4b17      	ldr	r3, [pc, #92]	; (8c79c <main+0xb9c>)
   8c73e:	4798      	blx	r3
   8c740:	4603      	mov	r3, r0
   8c742:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c744:	7bfb      	ldrb	r3, [r7, #15]
   8c746:	2b00      	cmp	r3, #0
   8c748:	d002      	beq.n	8c750 <main+0xb50>
   8c74a:	4b0f      	ldr	r3, [pc, #60]	; (8c788 <main+0xb88>)
   8c74c:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8c74e:	e012      	b.n	8c776 <main+0xb76>
   8c750:	e011      	b.n	8c776 <main+0xb76>
						case MACREQ_DISINF_COMPLETED:
					//	Cl_MacRetval = Cl_Init_Controller(EVT_COMMAND_ENTER_STANDBY);
					//	ASSERT_ERROR(Cl_MacRetval);
					//		if( Cl_MacRetval == CL_OK)
							{
								Cl_MacRetval = Cl_Standby_Controller(EVT_COMMAND_ENTER_STANDBY);
   8c752:	202b      	movs	r0, #43	; 0x2b
   8c754:	4b0e      	ldr	r3, [pc, #56]	; (8c790 <main+0xb90>)
   8c756:	4798      	blx	r3
   8c758:	4603      	mov	r3, r0
   8c75a:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8c75c:	7bfb      	ldrb	r3, [r7, #15]
   8c75e:	2b00      	cmp	r3, #0
   8c760:	d001      	beq.n	8c766 <main+0xb66>
   8c762:	4b09      	ldr	r3, [pc, #36]	; (8c788 <main+0xb88>)
   8c764:	4798      	blx	r3
								Cl_MacState =   MAC_STANDBY;
   8c766:	4b0c      	ldr	r3, [pc, #48]	; (8c798 <main+0xb98>)
   8c768:	2205      	movs	r2, #5
   8c76a:	701a      	strb	r2, [r3, #0]
							}
						Cl_MacEvent = EVT_NULL;
   8c76c:	4b04      	ldr	r3, [pc, #16]	; (8c780 <main+0xb80>)
   8c76e:	2200      	movs	r2, #0
   8c770:	701a      	strb	r2, [r3, #0]
						break;
   8c772:	e000      	b.n	8c776 <main+0xb76>
						default:break;
   8c774:	bf00      	nop
					}
	
					Cl_MacEvent = EVT_NULL;
   8c776:	4b02      	ldr	r3, [pc, #8]	; (8c780 <main+0xb80>)
   8c778:	2200      	movs	r2, #0
   8c77a:	701a      	strb	r2, [r3, #0]
					break;
   8c77c:	f001 bc67 	b.w	8e04e <main+0x244e>
   8c780:	20071b0b 	.word	0x20071b0b
   8c784:	0008e6cd 	.word	0x0008e6cd
   8c788:	00088b81 	.word	0x00088b81
   8c78c:	0008f5e5 	.word	0x0008f5e5
   8c790:	000a680d 	.word	0x000a680d
   8c794:	20070731 	.word	0x20070731
   8c798:	20070730 	.word	0x20070730
   8c79c:	0009d9f1 	.word	0x0009d9f1
   8c7a0:	000a3f11 	.word	0x000a3f11
					case MAC_SAFE_STANDBY:
					switch ( Cl_MacEvent )
   8c7a4:	4bcc      	ldr	r3, [pc, #816]	; (8cad8 <main+0xed8>)
   8c7a6:	781b      	ldrb	r3, [r3, #0]
   8c7a8:	3b07      	subs	r3, #7
   8c7aa:	2b27      	cmp	r3, #39	; 0x27
   8c7ac:	d852      	bhi.n	8c854 <main+0xc54>
   8c7ae:	a201      	add	r2, pc, #4	; (adr r2, 8c7b4 <main+0xbb4>)
   8c7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c7b4:	0008c855 	.word	0x0008c855
   8c7b8:	0008c855 	.word	0x0008c855
   8c7bc:	0008c855 	.word	0x0008c855
   8c7c0:	0008c855 	.word	0x0008c855
   8c7c4:	0008c855 	.word	0x0008c855
   8c7c8:	0008c855 	.word	0x0008c855
   8c7cc:	0008c855 	.word	0x0008c855
   8c7d0:	0008c855 	.word	0x0008c855
   8c7d4:	0008c855 	.word	0x0008c855
   8c7d8:	0008c855 	.word	0x0008c855
   8c7dc:	0008c855 	.word	0x0008c855
   8c7e0:	0008c855 	.word	0x0008c855
   8c7e4:	0008c855 	.word	0x0008c855
   8c7e8:	0008c855 	.word	0x0008c855
   8c7ec:	0008c855 	.word	0x0008c855
   8c7f0:	0008c855 	.word	0x0008c855
   8c7f4:	0008c855 	.word	0x0008c855
   8c7f8:	0008c855 	.word	0x0008c855
   8c7fc:	0008c855 	.word	0x0008c855
   8c800:	0008c855 	.word	0x0008c855
   8c804:	0008c855 	.word	0x0008c855
   8c808:	0008c855 	.word	0x0008c855
   8c80c:	0008c855 	.word	0x0008c855
   8c810:	0008c855 	.word	0x0008c855
   8c814:	0008c855 	.word	0x0008c855
   8c818:	0008c855 	.word	0x0008c855
   8c81c:	0008c855 	.word	0x0008c855
   8c820:	0008c855 	.word	0x0008c855
   8c824:	0008c855 	.word	0x0008c855
   8c828:	0008c855 	.word	0x0008c855
   8c82c:	0008c855 	.word	0x0008c855
   8c830:	0008c855 	.word	0x0008c855
   8c834:	0008c855 	.word	0x0008c855
   8c838:	0008c855 	.word	0x0008c855
   8c83c:	0008c855 	.word	0x0008c855
   8c840:	0008c855 	.word	0x0008c855
   8c844:	0008c855 	.word	0x0008c855
   8c848:	0008c855 	.word	0x0008c855
   8c84c:	0008c855 	.word	0x0008c855
   8c850:	0008c855 	.word	0x0008c855
						case EVT_ALARM_TRIGGERED:
						break;
						case EVT_ALERT_TRIGGERED:

						break;
						default: break;
   8c854:	bf00      	nop
					}
					break;
   8c856:	f001 bbfa 	b.w	8e04e <main+0x244e>
					case MAC_RINSE:

					switch ( Cl_MacEvent )
   8c85a:	4b9f      	ldr	r3, [pc, #636]	; (8cad8 <main+0xed8>)
   8c85c:	781b      	ldrb	r3, [r3, #0]
   8c85e:	3b07      	subs	r3, #7
   8c860:	2b58      	cmp	r3, #88	; 0x58
   8c862:	f200 8163 	bhi.w	8cb2c <main+0xf2c>
   8c866:	a201      	add	r2, pc, #4	; (adr r2, 8c86c <main+0xc6c>)
   8c868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c86c:	0008c9d1 	.word	0x0008c9d1
   8c870:	0008cab7 	.word	0x0008cab7
   8c874:	0008ca55 	.word	0x0008ca55
   8c878:	0008cb11 	.word	0x0008cb11
   8c87c:	0008cb11 	.word	0x0008cb11
   8c880:	0008cb11 	.word	0x0008cb11
   8c884:	0008cb2d 	.word	0x0008cb2d
   8c888:	0008cb2d 	.word	0x0008cb2d
   8c88c:	0008caf5 	.word	0x0008caf5
   8c890:	0008caf5 	.word	0x0008caf5
   8c894:	0008cb2d 	.word	0x0008cb2d
   8c898:	0008cb2d 	.word	0x0008cb2d
   8c89c:	0008cb2d 	.word	0x0008cb2d
   8c8a0:	0008cb2d 	.word	0x0008cb2d
   8c8a4:	0008cb2d 	.word	0x0008cb2d
   8c8a8:	0008cb2d 	.word	0x0008cb2d
   8c8ac:	0008cb2d 	.word	0x0008cb2d
   8c8b0:	0008cb2d 	.word	0x0008cb2d
   8c8b4:	0008cb2d 	.word	0x0008cb2d
   8c8b8:	0008cb2d 	.word	0x0008cb2d
   8c8bc:	0008cb2d 	.word	0x0008cb2d
   8c8c0:	0008cb2d 	.word	0x0008cb2d
   8c8c4:	0008cb2d 	.word	0x0008cb2d
   8c8c8:	0008cb2d 	.word	0x0008cb2d
   8c8cc:	0008caf5 	.word	0x0008caf5
   8c8d0:	0008caf5 	.word	0x0008caf5
   8c8d4:	0008cb2d 	.word	0x0008cb2d
   8c8d8:	0008cb2d 	.word	0x0008cb2d
   8c8dc:	0008cb2d 	.word	0x0008cb2d
   8c8e0:	0008cb2d 	.word	0x0008cb2d
   8c8e4:	0008cb2d 	.word	0x0008cb2d
   8c8e8:	0008cb11 	.word	0x0008cb11
   8c8ec:	0008cb11 	.word	0x0008cb11
   8c8f0:	0008cb11 	.word	0x0008cb11
   8c8f4:	0008ca55 	.word	0x0008ca55
   8c8f8:	0008cb2d 	.word	0x0008cb2d
   8c8fc:	0008cb2d 	.word	0x0008cb2d
   8c900:	0008cb2d 	.word	0x0008cb2d
   8c904:	0008ca55 	.word	0x0008ca55
   8c908:	0008ca55 	.word	0x0008ca55
   8c90c:	0008cb2d 	.word	0x0008cb2d
   8c910:	0008cb2d 	.word	0x0008cb2d
   8c914:	0008ca35 	.word	0x0008ca35
   8c918:	0008cb2d 	.word	0x0008cb2d
   8c91c:	0008cb2d 	.word	0x0008cb2d
   8c920:	0008cb2d 	.word	0x0008cb2d
   8c924:	0008cb2d 	.word	0x0008cb2d
   8c928:	0008cb2d 	.word	0x0008cb2d
   8c92c:	0008cb2d 	.word	0x0008cb2d
   8c930:	0008ca55 	.word	0x0008ca55
   8c934:	0008ca55 	.word	0x0008ca55
   8c938:	0008ca55 	.word	0x0008ca55
   8c93c:	0008ca55 	.word	0x0008ca55
   8c940:	0008ca55 	.word	0x0008ca55
   8c944:	0008ca55 	.word	0x0008ca55
   8c948:	0008cb2d 	.word	0x0008cb2d
   8c94c:	0008cb2d 	.word	0x0008cb2d
   8c950:	0008cb2d 	.word	0x0008cb2d
   8c954:	0008cb2d 	.word	0x0008cb2d
   8c958:	0008cb2d 	.word	0x0008cb2d
   8c95c:	0008cb2d 	.word	0x0008cb2d
   8c960:	0008cb2d 	.word	0x0008cb2d
   8c964:	0008cb2d 	.word	0x0008cb2d
   8c968:	0008cb2d 	.word	0x0008cb2d
   8c96c:	0008cb2d 	.word	0x0008cb2d
   8c970:	0008ca75 	.word	0x0008ca75
   8c974:	0008cb2d 	.word	0x0008cb2d
   8c978:	0008cb2d 	.word	0x0008cb2d
   8c97c:	0008cb2d 	.word	0x0008cb2d
   8c980:	0008cb2d 	.word	0x0008cb2d
   8c984:	0008cb2d 	.word	0x0008cb2d
   8c988:	0008cb2d 	.word	0x0008cb2d
   8c98c:	0008cb2d 	.word	0x0008cb2d
   8c990:	0008cb2d 	.word	0x0008cb2d
   8c994:	0008ca55 	.word	0x0008ca55
   8c998:	0008cb2d 	.word	0x0008cb2d
   8c99c:	0008cb2d 	.word	0x0008cb2d
   8c9a0:	0008cb2d 	.word	0x0008cb2d
   8c9a4:	0008cb2d 	.word	0x0008cb2d
   8c9a8:	0008cb2d 	.word	0x0008cb2d
   8c9ac:	0008cb2d 	.word	0x0008cb2d
   8c9b0:	0008cb2d 	.word	0x0008cb2d
   8c9b4:	0008cb2d 	.word	0x0008cb2d
   8c9b8:	0008cb2d 	.word	0x0008cb2d
   8c9bc:	0008ca55 	.word	0x0008ca55
   8c9c0:	0008ca55 	.word	0x0008ca55
   8c9c4:	0008cb2d 	.word	0x0008cb2d
   8c9c8:	0008cb2d 	.word	0x0008cb2d
   8c9cc:	0008ca55 	.word	0x0008ca55
				
					{
						case EVT_CONSOLE_COMMAND_RINSE_START:
							loopcountinsec =0;
   8c9d0:	4b42      	ldr	r3, [pc, #264]	; (8cadc <main+0xedc>)
   8c9d2:	2200      	movs	r2, #0
   8c9d4:	601a      	str	r2, [r3, #0]
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c9d6:	4b40      	ldr	r3, [pc, #256]	; (8cad8 <main+0xed8>)
   8c9d8:	781b      	ldrb	r3, [r3, #0]
   8c9da:	4618      	mov	r0, r3
   8c9dc:	4b40      	ldr	r3, [pc, #256]	; (8cae0 <main+0xee0>)
   8c9de:	4798      	blx	r3
   8c9e0:	4603      	mov	r3, r0
   8c9e2:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c9e4:	7bfb      	ldrb	r3, [r7, #15]
   8c9e6:	2b00      	cmp	r3, #0
   8c9e8:	d001      	beq.n	8c9ee <main+0xdee>
   8c9ea:	4b3e      	ldr	r3, [pc, #248]	; (8cae4 <main+0xee4>)
   8c9ec:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8c9ee:	7bfb      	ldrb	r3, [r7, #15]
   8c9f0:	2b00      	cmp	r3, #0
   8c9f2:	d10c      	bne.n	8ca0e <main+0xe0e>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c9f4:	4b38      	ldr	r3, [pc, #224]	; (8cad8 <main+0xed8>)
   8c9f6:	781b      	ldrb	r3, [r3, #0]
   8c9f8:	4618      	mov	r0, r3
   8c9fa:	4b3b      	ldr	r3, [pc, #236]	; (8cae8 <main+0xee8>)
   8c9fc:	4798      	blx	r3
   8c9fe:	4603      	mov	r3, r0
   8ca00:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);	
   8ca02:	7bfb      	ldrb	r3, [r7, #15]
   8ca04:	2b00      	cmp	r3, #0
   8ca06:	d011      	beq.n	8ca2c <main+0xe2c>
   8ca08:	4b36      	ldr	r3, [pc, #216]	; (8cae4 <main+0xee4>)
   8ca0a:	4798      	blx	r3
   8ca0c:	e00e      	b.n	8ca2c <main+0xe2c>
							}
							else if(Cl_MacRetval == CL_OK)
   8ca0e:	7bfb      	ldrb	r3, [r7, #15]
   8ca10:	2b00      	cmp	r3, #0
   8ca12:	d10b      	bne.n	8ca2c <main+0xe2c>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8ca14:	4b30      	ldr	r3, [pc, #192]	; (8cad8 <main+0xed8>)
   8ca16:	781b      	ldrb	r3, [r3, #0]
   8ca18:	4618      	mov	r0, r3
   8ca1a:	4b33      	ldr	r3, [pc, #204]	; (8cae8 <main+0xee8>)
   8ca1c:	4798      	blx	r3
   8ca1e:	4603      	mov	r3, r0
   8ca20:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8ca22:	7bfb      	ldrb	r3, [r7, #15]
   8ca24:	2b00      	cmp	r3, #0
   8ca26:	d001      	beq.n	8ca2c <main+0xe2c>
   8ca28:	4b2e      	ldr	r3, [pc, #184]	; (8cae4 <main+0xee4>)
   8ca2a:	4798      	blx	r3
							}
							
							
							Cl_MacEvent = EVT_NULL;
   8ca2c:	4b2a      	ldr	r3, [pc, #168]	; (8cad8 <main+0xed8>)
   8ca2e:	2200      	movs	r2, #0
   8ca30:	701a      	strb	r2, [r3, #0]
						break;
   8ca32:	e07c      	b.n	8cb2e <main+0xf2e>

						case EVT_TIMER_EXPIRED:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8ca34:	4b28      	ldr	r3, [pc, #160]	; (8cad8 <main+0xed8>)
   8ca36:	781b      	ldrb	r3, [r3, #0]
   8ca38:	4618      	mov	r0, r3
   8ca3a:	4b2b      	ldr	r3, [pc, #172]	; (8cae8 <main+0xee8>)
   8ca3c:	4798      	blx	r3
   8ca3e:	4603      	mov	r3, r0
   8ca40:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8ca42:	7bfb      	ldrb	r3, [r7, #15]
   8ca44:	2b00      	cmp	r3, #0
   8ca46:	d001      	beq.n	8ca4c <main+0xe4c>
   8ca48:	4b26      	ldr	r3, [pc, #152]	; (8cae4 <main+0xee4>)
   8ca4a:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								 // handle error
							}
							Cl_MacEvent = EVT_NULL;
   8ca4c:	4b22      	ldr	r3, [pc, #136]	; (8cad8 <main+0xed8>)
   8ca4e:	2200      	movs	r2, #0
   8ca50:	701a      	strb	r2, [r3, #0]
						break;
   8ca52:	e06c      	b.n	8cb2e <main+0xf2e>
					//	case EVT_CONSOLE_COMMAND_SET_DATA:
						case MACREQ_BC_OPENFILL_COMPLETED:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:

							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8ca54:	4b20      	ldr	r3, [pc, #128]	; (8cad8 <main+0xed8>)
   8ca56:	781b      	ldrb	r3, [r3, #0]
   8ca58:	4618      	mov	r0, r3
   8ca5a:	4b23      	ldr	r3, [pc, #140]	; (8cae8 <main+0xee8>)
   8ca5c:	4798      	blx	r3
   8ca5e:	4603      	mov	r3, r0
   8ca60:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8ca62:	7bfb      	ldrb	r3, [r7, #15]
   8ca64:	2b00      	cmp	r3, #0
   8ca66:	d001      	beq.n	8ca6c <main+0xe6c>
   8ca68:	4b1e      	ldr	r3, [pc, #120]	; (8cae4 <main+0xee4>)
   8ca6a:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
							
							Cl_MacEvent = EVT_NULL;
   8ca6c:	4b1a      	ldr	r3, [pc, #104]	; (8cad8 <main+0xed8>)
   8ca6e:	2200      	movs	r2, #0
   8ca70:	701a      	strb	r2, [r3, #0]
						break;
   8ca72:	e05c      	b.n	8cb2e <main+0xf2e>
						case MACREQ_RINSE_COMPLETED:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8ca74:	4b18      	ldr	r3, [pc, #96]	; (8cad8 <main+0xed8>)
   8ca76:	781b      	ldrb	r3, [r3, #0]
   8ca78:	4618      	mov	r0, r3
   8ca7a:	4b1b      	ldr	r3, [pc, #108]	; (8cae8 <main+0xee8>)
   8ca7c:	4798      	blx	r3
   8ca7e:	4603      	mov	r3, r0
   8ca80:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8ca82:	7bfb      	ldrb	r3, [r7, #15]
   8ca84:	2b00      	cmp	r3, #0
   8ca86:	d001      	beq.n	8ca8c <main+0xe8c>
   8ca88:	4b16      	ldr	r3, [pc, #88]	; (8cae4 <main+0xee4>)
   8ca8a:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8ca8c:	7bfb      	ldrb	r3, [r7, #15]
   8ca8e:	2b00      	cmp	r3, #0
   8ca90:	d109      	bne.n	8caa6 <main+0xea6>
							{
								Cl_MacState = MAC_POST_RINSE_STANDBY;
   8ca92:	4b16      	ldr	r3, [pc, #88]	; (8caec <main+0xeec>)
   8ca94:	220a      	movs	r2, #10
   8ca96:	701a      	strb	r2, [r3, #0]
								Cl_Uint8Type temp = MAC_POST_RINSE_STANDBY;
   8ca98:	230a      	movs	r3, #10
   8ca9a:	727b      	strb	r3, [r7, #9]
								//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(Cl_Uint8Type*)temp,1);
									ASSERT_ERROR(Cl_MacRetval);
   8ca9c:	7bfb      	ldrb	r3, [r7, #15]
   8ca9e:	2b00      	cmp	r3, #0
   8caa0:	d001      	beq.n	8caa6 <main+0xea6>
   8caa2:	4b10      	ldr	r3, [pc, #64]	; (8cae4 <main+0xee4>)
   8caa4:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
							
							Cl_MacRetval = Cl_dlsis_init();
   8caa6:	4b12      	ldr	r3, [pc, #72]	; (8caf0 <main+0xef0>)
   8caa8:	4798      	blx	r3
   8caaa:	4603      	mov	r3, r0
   8caac:	73fb      	strb	r3, [r7, #15]
							
							Cl_MacEvent = EVT_NULL;
   8caae:	4b0a      	ldr	r3, [pc, #40]	; (8cad8 <main+0xed8>)
   8cab0:	2200      	movs	r2, #0
   8cab2:	701a      	strb	r2, [r3, #0]
						break;
   8cab4:	e03b      	b.n	8cb2e <main+0xf2e>
						case EVT_CONSOLE_COMMAND_STOP_RINSE:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8cab6:	4b08      	ldr	r3, [pc, #32]	; (8cad8 <main+0xed8>)
   8cab8:	781b      	ldrb	r3, [r3, #0]
   8caba:	4618      	mov	r0, r3
   8cabc:	4b0a      	ldr	r3, [pc, #40]	; (8cae8 <main+0xee8>)
   8cabe:	4798      	blx	r3
   8cac0:	4603      	mov	r3, r0
   8cac2:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8cac4:	7bfb      	ldrb	r3, [r7, #15]
   8cac6:	2b00      	cmp	r3, #0
   8cac8:	d001      	beq.n	8cace <main+0xece>
   8caca:	4b06      	ldr	r3, [pc, #24]	; (8cae4 <main+0xee4>)
   8cacc:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
							{
							//	Cl_MacState = MAC_POST_RINSE_STANDBY;
							}
							Cl_MacEvent = EVT_NULL;
   8cace:	4b02      	ldr	r3, [pc, #8]	; (8cad8 <main+0xed8>)
   8cad0:	2200      	movs	r2, #0
   8cad2:	701a      	strb	r2, [r3, #0]
						break;
   8cad4:	e02b      	b.n	8cb2e <main+0xf2e>
   8cad6:	bf00      	nop
   8cad8:	20071b0b 	.word	0x20071b0b
   8cadc:	20071b10 	.word	0x20071b10
   8cae0:	000a680d 	.word	0x000a680d
   8cae4:	00088b81 	.word	0x00088b81
   8cae8:	000a3f11 	.word	0x000a3f11
   8caec:	20070730 	.word	0x20070730
   8caf0:	00085291 	.word	0x00085291

						case EVT_CONSOLE_COMMAND_START_PRIME:
						case EVT_CONSOLE_COMMAND_STOP_PRIME:
						case EVT_CONSOLE_COMMAND_RCIRC_START:
						case EVT_CONSOLE_COMMAND_RCIRC_STOP:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8caf4:	4bb8      	ldr	r3, [pc, #736]	; (8cdd8 <main+0x11d8>)
   8caf6:	781b      	ldrb	r3, [r3, #0]
   8caf8:	4618      	mov	r0, r3
   8cafa:	4bb8      	ldr	r3, [pc, #736]	; (8cddc <main+0x11dc>)
   8cafc:	4798      	blx	r3
   8cafe:	4603      	mov	r3, r0
   8cb00:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8cb02:	7bfb      	ldrb	r3, [r7, #15]
   8cb04:	2b00      	cmp	r3, #0
   8cb06:	d002      	beq.n	8cb0e <main+0xf0e>
   8cb08:	4bb5      	ldr	r3, [pc, #724]	; (8cde0 <main+0x11e0>)
   8cb0a:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						//Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						break;
   8cb0c:	e00f      	b.n	8cb2e <main+0xf2e>
   8cb0e:	e00e      	b.n	8cb2e <main+0xf2e>
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
						case EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
						case EVT_CONSOLE_COMMAND_HEPARIN_START:
						case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8cb10:	4bb1      	ldr	r3, [pc, #708]	; (8cdd8 <main+0x11d8>)
   8cb12:	781b      	ldrb	r3, [r3, #0]
   8cb14:	4618      	mov	r0, r3
   8cb16:	4bb1      	ldr	r3, [pc, #708]	; (8cddc <main+0x11dc>)
   8cb18:	4798      	blx	r3
   8cb1a:	4603      	mov	r3, r0
   8cb1c:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8cb1e:	7bfb      	ldrb	r3, [r7, #15]
   8cb20:	2b00      	cmp	r3, #0
   8cb22:	d002      	beq.n	8cb2a <main+0xf2a>
   8cb24:	4bae      	ldr	r3, [pc, #696]	; (8cde0 <main+0x11e0>)
   8cb26:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}						
						break;
   8cb28:	e001      	b.n	8cb2e <main+0xf2e>
   8cb2a:	e000      	b.n	8cb2e <main+0xf2e>
						default: break;
   8cb2c:	bf00      	nop
					}
					break;
   8cb2e:	f001 ba8e 	b.w	8e04e <main+0x244e>
					case MAC_POST_RINSE_STANDBY:
				switch ( Cl_MacEvent )
   8cb32:	4ba9      	ldr	r3, [pc, #676]	; (8cdd8 <main+0x11d8>)
   8cb34:	781b      	ldrb	r3, [r3, #0]
   8cb36:	3b07      	subs	r3, #7
   8cb38:	2b5b      	cmp	r3, #91	; 0x5b
   8cb3a:	f200 818c 	bhi.w	8ce56 <main+0x1256>
   8cb3e:	a201      	add	r2, pc, #4	; (adr r2, 8cb44 <main+0xf44>)
   8cb40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8cb44:	0008cce3 	.word	0x0008cce3
   8cb48:	0008ce57 	.word	0x0008ce57
   8cb4c:	0008cd3d 	.word	0x0008cd3d
   8cb50:	0008ce3b 	.word	0x0008ce3b
   8cb54:	0008ce3b 	.word	0x0008ce3b
   8cb58:	0008ce3b 	.word	0x0008ce3b
   8cb5c:	0008ce57 	.word	0x0008ce57
   8cb60:	0008ce57 	.word	0x0008ce57
   8cb64:	0008ce1f 	.word	0x0008ce1f
   8cb68:	0008ce1f 	.word	0x0008ce1f
   8cb6c:	0008ce57 	.word	0x0008ce57
   8cb70:	0008ce57 	.word	0x0008ce57
   8cb74:	0008ce57 	.word	0x0008ce57
   8cb78:	0008ce57 	.word	0x0008ce57
   8cb7c:	0008ce57 	.word	0x0008ce57
   8cb80:	0008ce57 	.word	0x0008ce57
   8cb84:	0008ce57 	.word	0x0008ce57
   8cb88:	0008ce57 	.word	0x0008ce57
   8cb8c:	0008ce57 	.word	0x0008ce57
   8cb90:	0008ce57 	.word	0x0008ce57
   8cb94:	0008ce57 	.word	0x0008ce57
   8cb98:	0008ce57 	.word	0x0008ce57
   8cb9c:	0008cdb1 	.word	0x0008cdb1
   8cba0:	0008ce57 	.word	0x0008ce57
   8cba4:	0008cdf9 	.word	0x0008cdf9
   8cba8:	0008cdf9 	.word	0x0008cdf9
   8cbac:	0008ce57 	.word	0x0008ce57
   8cbb0:	0008ce57 	.word	0x0008ce57
   8cbb4:	0008ce57 	.word	0x0008ce57
   8cbb8:	0008ce57 	.word	0x0008ce57
   8cbbc:	0008ce57 	.word	0x0008ce57
   8cbc0:	0008ce3b 	.word	0x0008ce3b
   8cbc4:	0008ce3b 	.word	0x0008ce3b
   8cbc8:	0008ce3b 	.word	0x0008ce3b
   8cbcc:	0008ce3b 	.word	0x0008ce3b
   8cbd0:	0008ce57 	.word	0x0008ce57
   8cbd4:	0008ce57 	.word	0x0008ce57
   8cbd8:	0008ce57 	.word	0x0008ce57
   8cbdc:	0008ccd3 	.word	0x0008ccd3
   8cbe0:	0008ccd3 	.word	0x0008ccd3
   8cbe4:	0008ce57 	.word	0x0008ce57
   8cbe8:	0008ce57 	.word	0x0008ce57
   8cbec:	0008ce57 	.word	0x0008ce57
   8cbf0:	0008ce57 	.word	0x0008ce57
   8cbf4:	0008ce57 	.word	0x0008ce57
   8cbf8:	0008ce57 	.word	0x0008ce57
   8cbfc:	0008ce57 	.word	0x0008ce57
   8cc00:	0008ce57 	.word	0x0008ce57
   8cc04:	0008ce57 	.word	0x0008ce57
   8cc08:	0008ce57 	.word	0x0008ce57
   8cc0c:	0008ce57 	.word	0x0008ce57
   8cc10:	0008ce57 	.word	0x0008ce57
   8cc14:	0008ce57 	.word	0x0008ce57
   8cc18:	0008ce57 	.word	0x0008ce57
   8cc1c:	0008ce57 	.word	0x0008ce57
   8cc20:	0008ce57 	.word	0x0008ce57
   8cc24:	0008ce57 	.word	0x0008ce57
   8cc28:	0008ce57 	.word	0x0008ce57
   8cc2c:	0008ce57 	.word	0x0008ce57
   8cc30:	0008ce57 	.word	0x0008ce57
   8cc34:	0008ce57 	.word	0x0008ce57
   8cc38:	0008ce57 	.word	0x0008ce57
   8cc3c:	0008ce57 	.word	0x0008ce57
   8cc40:	0008ce57 	.word	0x0008ce57
   8cc44:	0008ce57 	.word	0x0008ce57
   8cc48:	0008ce57 	.word	0x0008ce57
   8cc4c:	0008ce57 	.word	0x0008ce57
   8cc50:	0008ce57 	.word	0x0008ce57
   8cc54:	0008ce57 	.word	0x0008ce57
   8cc58:	0008ce57 	.word	0x0008ce57
   8cc5c:	0008ce57 	.word	0x0008ce57
   8cc60:	0008ce57 	.word	0x0008ce57
   8cc64:	0008ce57 	.word	0x0008ce57
   8cc68:	0008ce57 	.word	0x0008ce57
   8cc6c:	0008ce57 	.word	0x0008ce57
   8cc70:	0008ce57 	.word	0x0008ce57
   8cc74:	0008ce57 	.word	0x0008ce57
   8cc78:	0008ce57 	.word	0x0008ce57
   8cc7c:	0008ce57 	.word	0x0008ce57
   8cc80:	0008ce57 	.word	0x0008ce57
   8cc84:	0008ce57 	.word	0x0008ce57
   8cc88:	0008ce57 	.word	0x0008ce57
   8cc8c:	0008ce57 	.word	0x0008ce57
   8cc90:	0008ce57 	.word	0x0008ce57
   8cc94:	0008ce3b 	.word	0x0008ce3b
   8cc98:	0008ce3b 	.word	0x0008ce3b
   8cc9c:	0008ce57 	.word	0x0008ce57
   8cca0:	0008ce57 	.word	0x0008ce57
   8cca4:	0008ccd3 	.word	0x0008ccd3
   8cca8:	0008ce57 	.word	0x0008ce57
   8ccac:	0008ce57 	.word	0x0008ce57
   8ccb0:	0008ccb5 	.word	0x0008ccb5
						case EVT_CONSOLE_COMMAND_SELFTEST_START:
						
						{
							
							//	Cl_MacRetval = Cl_selftest_init();
							Cl_MacRetval = self_test(Cl_MacEvent);
   8ccb4:	4b48      	ldr	r3, [pc, #288]	; (8cdd8 <main+0x11d8>)
   8ccb6:	781b      	ldrb	r3, [r3, #0]
   8ccb8:	4618      	mov	r0, r3
   8ccba:	4b4a      	ldr	r3, [pc, #296]	; (8cde4 <main+0x11e4>)
   8ccbc:	4798      	blx	r3
   8ccbe:	4603      	mov	r3, r0
   8ccc0:	73fb      	strb	r3, [r7, #15]
							
							Cl_SelfTest_prevMacState = Cl_MacState;
   8ccc2:	4b49      	ldr	r3, [pc, #292]	; (8cde8 <main+0x11e8>)
   8ccc4:	781a      	ldrb	r2, [r3, #0]
   8ccc6:	4b49      	ldr	r3, [pc, #292]	; (8cdec <main+0x11ec>)
   8ccc8:	701a      	strb	r2, [r3, #0]
							Cl_MacState = MAC_START_SELFTEST;
   8ccca:	4b47      	ldr	r3, [pc, #284]	; (8cde8 <main+0x11e8>)
   8cccc:	2216      	movs	r2, #22
   8ccce:	701a      	strb	r2, [r3, #0]
							// 						command = CON_TX_COMMAND_RINSE_STARTED;
							// 						Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
							//
						}
						break;
   8ccd0:	e0c2      	b.n	8ce58 <main+0x1258>
						
						
						case EVT_ALARM_TRIGGERED:
						case EVT_ALERT_TRIGGERED:
						case EVT_CONSOLE_COMMAND_MUTE_ALARM:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8ccd2:	4b41      	ldr	r3, [pc, #260]	; (8cdd8 <main+0x11d8>)
   8ccd4:	781b      	ldrb	r3, [r3, #0]
   8ccd6:	4618      	mov	r0, r3
   8ccd8:	4b40      	ldr	r3, [pc, #256]	; (8cddc <main+0x11dc>)
   8ccda:	4798      	blx	r3
   8ccdc:	4603      	mov	r3, r0
   8ccde:	73fb      	strb	r3, [r7, #15]
						break;
   8cce0:	e0ba      	b.n	8ce58 <main+0x1258>
						
						break;
*/						
						case EVT_CONSOLE_COMMAND_RINSE_START:
						
								Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8cce2:	4b3d      	ldr	r3, [pc, #244]	; (8cdd8 <main+0x11d8>)
   8cce4:	781b      	ldrb	r3, [r3, #0]
   8cce6:	4618      	mov	r0, r3
   8cce8:	4b41      	ldr	r3, [pc, #260]	; (8cdf0 <main+0x11f0>)
   8ccea:	4798      	blx	r3
   8ccec:	4603      	mov	r3, r0
   8ccee:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8ccf0:	7bfb      	ldrb	r3, [r7, #15]
   8ccf2:	2b00      	cmp	r3, #0
   8ccf4:	d001      	beq.n	8ccfa <main+0x10fa>
   8ccf6:	4b3a      	ldr	r3, [pc, #232]	; (8cde0 <main+0x11e0>)
   8ccf8:	4798      	blx	r3
								if(Cl_MacRetval == CL_OK)
   8ccfa:	7bfb      	ldrb	r3, [r7, #15]
   8ccfc:	2b00      	cmp	r3, #0
   8ccfe:	d10b      	bne.n	8cd18 <main+0x1118>
								{
									Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8cd00:	4b35      	ldr	r3, [pc, #212]	; (8cdd8 <main+0x11d8>)
   8cd02:	781b      	ldrb	r3, [r3, #0]
   8cd04:	4618      	mov	r0, r3
   8cd06:	4b35      	ldr	r3, [pc, #212]	; (8cddc <main+0x11dc>)
   8cd08:	4798      	blx	r3
   8cd0a:	4603      	mov	r3, r0
   8cd0c:	73fb      	strb	r3, [r7, #15]
									ASSERT_ERROR(Cl_MacRetval);
   8cd0e:	7bfb      	ldrb	r3, [r7, #15]
   8cd10:	2b00      	cmp	r3, #0
   8cd12:	d001      	beq.n	8cd18 <main+0x1118>
   8cd14:	4b32      	ldr	r3, [pc, #200]	; (8cde0 <main+0x11e0>)
   8cd16:	4798      	blx	r3
								}
													
								if( Cl_MacRetval == CL_OK)
   8cd18:	7bfb      	ldrb	r3, [r7, #15]
   8cd1a:	2b00      	cmp	r3, #0
   8cd1c:	d102      	bne.n	8cd24 <main+0x1124>
								{
									Cl_MacState = MAC_RINSE;
   8cd1e:	4b32      	ldr	r3, [pc, #200]	; (8cde8 <main+0x11e8>)
   8cd20:	2207      	movs	r2, #7
   8cd22:	701a      	strb	r2, [r3, #0]
									//Cl_MacState = MAC_POST_RINSE_STANDBY;						
								}
								if( Cl_MacRetval == CL_OK)
   8cd24:	7bfb      	ldrb	r3, [r7, #15]
   8cd26:	2b00      	cmp	r3, #0
   8cd28:	d104      	bne.n	8cd34 <main+0x1134>
								{
								//	Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
									ASSERT_ERROR(Cl_MacRetval);
   8cd2a:	7bfb      	ldrb	r3, [r7, #15]
   8cd2c:	2b00      	cmp	r3, #0
   8cd2e:	d001      	beq.n	8cd34 <main+0x1134>
   8cd30:	4b2b      	ldr	r3, [pc, #172]	; (8cde0 <main+0x11e0>)
   8cd32:	4798      	blx	r3
								if( Cl_MacRetval != CL_OK)
								{
									// handle error
								}
								
								Cl_MacEvent = EVT_NULL;
   8cd34:	4b28      	ldr	r3, [pc, #160]	; (8cdd8 <main+0x11d8>)
   8cd36:	2200      	movs	r2, #0
   8cd38:	701a      	strb	r2, [r3, #0]
						break;
   8cd3a:	e08d      	b.n	8ce58 <main+0x1258>
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
																				
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8cd3c:	4b26      	ldr	r3, [pc, #152]	; (8cdd8 <main+0x11d8>)
   8cd3e:	781b      	ldrb	r3, [r3, #0]
   8cd40:	4618      	mov	r0, r3
   8cd42:	4b2b      	ldr	r3, [pc, #172]	; (8cdf0 <main+0x11f0>)
   8cd44:	4798      	blx	r3
   8cd46:	4603      	mov	r3, r0
   8cd48:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8cd4a:	7bfb      	ldrb	r3, [r7, #15]
   8cd4c:	2b00      	cmp	r3, #0
   8cd4e:	d001      	beq.n	8cd54 <main+0x1154>
   8cd50:	4b23      	ldr	r3, [pc, #140]	; (8cde0 <main+0x11e0>)
   8cd52:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8cd54:	7bfb      	ldrb	r3, [r7, #15]
   8cd56:	2b00      	cmp	r3, #0
   8cd58:	d10b      	bne.n	8cd72 <main+0x1172>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8cd5a:	4b1f      	ldr	r3, [pc, #124]	; (8cdd8 <main+0x11d8>)
   8cd5c:	781b      	ldrb	r3, [r3, #0]
   8cd5e:	4618      	mov	r0, r3
   8cd60:	4b1e      	ldr	r3, [pc, #120]	; (8cddc <main+0x11dc>)
   8cd62:	4798      	blx	r3
   8cd64:	4603      	mov	r3, r0
   8cd66:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8cd68:	7bfb      	ldrb	r3, [r7, #15]
   8cd6a:	2b00      	cmp	r3, #0
   8cd6c:	d001      	beq.n	8cd72 <main+0x1172>
   8cd6e:	4b1c      	ldr	r3, [pc, #112]	; (8cde0 <main+0x11e0>)
   8cd70:	4798      	blx	r3
							}
							if(Cl_MacRetval == CL_OK)
   8cd72:	7bfb      	ldrb	r3, [r7, #15]
   8cd74:	2b00      	cmp	r3, #0
   8cd76:	d10b      	bne.n	8cd90 <main+0x1190>
							{
								Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8cd78:	4b17      	ldr	r3, [pc, #92]	; (8cdd8 <main+0x11d8>)
   8cd7a:	781b      	ldrb	r3, [r3, #0]
   8cd7c:	4618      	mov	r0, r3
   8cd7e:	4b1d      	ldr	r3, [pc, #116]	; (8cdf4 <main+0x11f4>)
   8cd80:	4798      	blx	r3
   8cd82:	4603      	mov	r3, r0
   8cd84:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8cd86:	7bfb      	ldrb	r3, [r7, #15]
   8cd88:	2b00      	cmp	r3, #0
   8cd8a:	d001      	beq.n	8cd90 <main+0x1190>
   8cd8c:	4b14      	ldr	r3, [pc, #80]	; (8cde0 <main+0x11e0>)
   8cd8e:	4798      	blx	r3
							}
							if(Cl_MacRetval == CL_OK)
   8cd90:	7bfb      	ldrb	r3, [r7, #15]
   8cd92:	2b00      	cmp	r3, #0
   8cd94:	d102      	bne.n	8cd9c <main+0x119c>
							{
									Cl_MacState = MAC_DPREP;
   8cd96:	4b14      	ldr	r3, [pc, #80]	; (8cde8 <main+0x11e8>)
   8cd98:	220b      	movs	r2, #11
   8cd9a:	701a      	strb	r2, [r3, #0]
							}
							if(Cl_MacRetval == CL_OK)
   8cd9c:	7bfb      	ldrb	r3, [r7, #15]
   8cd9e:	2b00      	cmp	r3, #0
   8cda0:	d105      	bne.n	8cdae <main+0x11ae>
							{
							//Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP,1);
							ASSERT_ERROR(Cl_MacRetval);
   8cda2:	7bfb      	ldrb	r3, [r7, #15]
   8cda4:	2b00      	cmp	r3, #0
   8cda6:	d002      	beq.n	8cdae <main+0x11ae>
   8cda8:	4b0d      	ldr	r3, [pc, #52]	; (8cde0 <main+0x11e0>)
   8cdaa:	4798      	blx	r3
							}
							else
							{
								// handle error
							}
						break;
   8cdac:	e054      	b.n	8ce58 <main+0x1258>
   8cdae:	e053      	b.n	8ce58 <main+0x1258>
						case EVT_SEND_MIXING_PREP_START://0x21
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8cdb0:	4b09      	ldr	r3, [pc, #36]	; (8cdd8 <main+0x11d8>)
   8cdb2:	781b      	ldrb	r3, [r3, #0]
   8cdb4:	4618      	mov	r0, r3
   8cdb6:	4b0f      	ldr	r3, [pc, #60]	; (8cdf4 <main+0x11f4>)
   8cdb8:	4798      	blx	r3
   8cdba:	4603      	mov	r3, r0
   8cdbc:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8cdbe:	7bfb      	ldrb	r3, [r7, #15]
   8cdc0:	2b00      	cmp	r3, #0
   8cdc2:	d001      	beq.n	8cdc8 <main+0x11c8>
   8cdc4:	4b06      	ldr	r3, [pc, #24]	; (8cde0 <main+0x11e0>)
   8cdc6:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8cdc8:	7bfb      	ldrb	r3, [r7, #15]
   8cdca:	2b00      	cmp	r3, #0
   8cdcc:	d102      	bne.n	8cdd4 <main+0x11d4>
							{
									Cl_MacState = MAC_DPREP;
   8cdce:	4b06      	ldr	r3, [pc, #24]	; (8cde8 <main+0x11e8>)
   8cdd0:	220b      	movs	r2, #11
   8cdd2:	701a      	strb	r2, [r3, #0]
							else
							{
								// handle error
							}
						
						break;
   8cdd4:	e040      	b.n	8ce58 <main+0x1258>
   8cdd6:	bf00      	nop
   8cdd8:	20071b0b 	.word	0x20071b0b
   8cddc:	000a3f11 	.word	0x000a3f11
   8cde0:	00088b81 	.word	0x00088b81
   8cde4:	0008e6cd 	.word	0x0008e6cd
   8cde8:	20070730 	.word	0x20070730
   8cdec:	20070731 	.word	0x20070731
   8cdf0:	000a680d 	.word	0x000a680d
   8cdf4:	0009fd19 	.word	0x0009fd19
						case EVT_SEND_MIXING_PREP_STOP://0x22
						break;

						case EVT_CONSOLE_COMMAND_RCIRC_START:
						case EVT_CONSOLE_COMMAND_RCIRC_STOP:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8cdf8:	4bb9      	ldr	r3, [pc, #740]	; (8d0e0 <main+0x14e0>)
   8cdfa:	781b      	ldrb	r3, [r3, #0]
   8cdfc:	4618      	mov	r0, r3
   8cdfe:	4bb9      	ldr	r3, [pc, #740]	; (8d0e4 <main+0x14e4>)
   8ce00:	4798      	blx	r3
   8ce02:	4603      	mov	r3, r0
   8ce04:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8ce06:	7bfb      	ldrb	r3, [r7, #15]
   8ce08:	2b00      	cmp	r3, #0
   8ce0a:	d001      	beq.n	8ce10 <main+0x1210>
   8ce0c:	4bb6      	ldr	r3, [pc, #728]	; (8d0e8 <main+0x14e8>)
   8ce0e:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8ce10:	7bfb      	ldrb	r3, [r7, #15]
   8ce12:	2b00      	cmp	r3, #0
   8ce14:	d102      	bne.n	8ce1c <main+0x121c>
							{
								Cl_MacState = MAC_DPREP;
   8ce16:	4bb5      	ldr	r3, [pc, #724]	; (8d0ec <main+0x14ec>)
   8ce18:	220b      	movs	r2, #11
   8ce1a:	701a      	strb	r2, [r3, #0]
							else
							{
								// handle error
							}
													
						break;
   8ce1c:	e01c      	b.n	8ce58 <main+0x1258>
						case EVT_CONSOLE_COMMAND_START_PRIME:
						case EVT_CONSOLE_COMMAND_STOP_PRIME:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8ce1e:	4bb0      	ldr	r3, [pc, #704]	; (8d0e0 <main+0x14e0>)
   8ce20:	781b      	ldrb	r3, [r3, #0]
   8ce22:	4618      	mov	r0, r3
   8ce24:	4baf      	ldr	r3, [pc, #700]	; (8d0e4 <main+0x14e4>)
   8ce26:	4798      	blx	r3
   8ce28:	4603      	mov	r3, r0
   8ce2a:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8ce2c:	7bfb      	ldrb	r3, [r7, #15]
   8ce2e:	2b00      	cmp	r3, #0
   8ce30:	d002      	beq.n	8ce38 <main+0x1238>
   8ce32:	4bad      	ldr	r3, [pc, #692]	; (8d0e8 <main+0x14e8>)
   8ce34:	4798      	blx	r3
							else
							{
								// handle error
							}
													
						break;
   8ce36:	e00f      	b.n	8ce58 <main+0x1258>
   8ce38:	e00e      	b.n	8ce58 <main+0x1258>
						case EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
						case EVT_CONSOLE_COMMAND_HEPARIN_START:
						case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);	
   8ce3a:	4ba9      	ldr	r3, [pc, #676]	; (8d0e0 <main+0x14e0>)
   8ce3c:	781b      	ldrb	r3, [r3, #0]
   8ce3e:	4618      	mov	r0, r3
   8ce40:	4ba8      	ldr	r3, [pc, #672]	; (8d0e4 <main+0x14e4>)
   8ce42:	4798      	blx	r3
   8ce44:	4603      	mov	r3, r0
   8ce46:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8ce48:	7bfb      	ldrb	r3, [r7, #15]
   8ce4a:	2b00      	cmp	r3, #0
   8ce4c:	d002      	beq.n	8ce54 <main+0x1254>
   8ce4e:	4ba6      	ldr	r3, [pc, #664]	; (8d0e8 <main+0x14e8>)
   8ce50:	4798      	blx	r3
							else
							{
								// handle error
							}
																		
						break;
   8ce52:	e001      	b.n	8ce58 <main+0x1258>
   8ce54:	e000      	b.n	8ce58 <main+0x1258>
						default: break;
   8ce56:	bf00      	nop
					}
					break;
   8ce58:	f001 b8f9 	b.w	8e04e <main+0x244e>
					case MAC_DPREP:
					switch ( Cl_MacEvent )
   8ce5c:	4ba0      	ldr	r3, [pc, #640]	; (8d0e0 <main+0x14e0>)
   8ce5e:	781b      	ldrb	r3, [r3, #0]
   8ce60:	3b09      	subs	r3, #9
   8ce62:	2b56      	cmp	r3, #86	; 0x56
   8ce64:	f200 8139 	bhi.w	8d0da <main+0x14da>
   8ce68:	a201      	add	r2, pc, #4	; (adr r2, 8ce70 <main+0x1270>)
   8ce6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8ce6e:	bf00      	nop
   8ce70:	0008cfe3 	.word	0x0008cfe3
   8ce74:	0008cfe3 	.word	0x0008cfe3
   8ce78:	0008cfe3 	.word	0x0008cfe3
   8ce7c:	0008cfe3 	.word	0x0008cfe3
   8ce80:	0008d0db 	.word	0x0008d0db
   8ce84:	0008d0db 	.word	0x0008d0db
   8ce88:	0008d009 	.word	0x0008d009
   8ce8c:	0008cfe3 	.word	0x0008cfe3
   8ce90:	0008cfe3 	.word	0x0008cfe3
   8ce94:	0008d0bf 	.word	0x0008d0bf
   8ce98:	0008cfe3 	.word	0x0008cfe3
   8ce9c:	0008cfe3 	.word	0x0008cfe3
   8cea0:	0008cfe3 	.word	0x0008cfe3
   8cea4:	0008d055 	.word	0x0008d055
   8cea8:	0008d0db 	.word	0x0008d0db
   8ceac:	0008d0db 	.word	0x0008d0db
   8ceb0:	0008d0db 	.word	0x0008d0db
   8ceb4:	0008d0db 	.word	0x0008d0db
   8ceb8:	0008d0db 	.word	0x0008d0db
   8cebc:	0008d0db 	.word	0x0008d0db
   8cec0:	0008cfe3 	.word	0x0008cfe3
   8cec4:	0008cfe3 	.word	0x0008cfe3
   8cec8:	0008d02f 	.word	0x0008d02f
   8cecc:	0008d0db 	.word	0x0008d0db
   8ced0:	0008d0db 	.word	0x0008d0db
   8ced4:	0008d0db 	.word	0x0008d0db
   8ced8:	0008d0db 	.word	0x0008d0db
   8cedc:	0008d0db 	.word	0x0008d0db
   8cee0:	0008d0db 	.word	0x0008d0db
   8cee4:	0008cfe3 	.word	0x0008cfe3
   8cee8:	0008cfe3 	.word	0x0008cfe3
   8ceec:	0008cfe3 	.word	0x0008cfe3
   8cef0:	0008cfe3 	.word	0x0008cfe3
   8cef4:	0008d0db 	.word	0x0008d0db
   8cef8:	0008d0db 	.word	0x0008d0db
   8cefc:	0008d0db 	.word	0x0008d0db
   8cf00:	0008cfe3 	.word	0x0008cfe3
   8cf04:	0008cfe3 	.word	0x0008cfe3
   8cf08:	0008d0db 	.word	0x0008d0db
   8cf0c:	0008d0db 	.word	0x0008d0db
   8cf10:	0008d0db 	.word	0x0008d0db
   8cf14:	0008d0db 	.word	0x0008d0db
   8cf18:	0008d0db 	.word	0x0008d0db
   8cf1c:	0008d0db 	.word	0x0008d0db
   8cf20:	0008d0db 	.word	0x0008d0db
   8cf24:	0008d0db 	.word	0x0008d0db
   8cf28:	0008d0db 	.word	0x0008d0db
   8cf2c:	0008cfe3 	.word	0x0008cfe3
   8cf30:	0008cfe3 	.word	0x0008cfe3
   8cf34:	0008cfe3 	.word	0x0008cfe3
   8cf38:	0008cfe3 	.word	0x0008cfe3
   8cf3c:	0008cfe3 	.word	0x0008cfe3
   8cf40:	0008cfe3 	.word	0x0008cfe3
   8cf44:	0008d0db 	.word	0x0008d0db
   8cf48:	0008d0db 	.word	0x0008d0db
   8cf4c:	0008d0db 	.word	0x0008d0db
   8cf50:	0008d0db 	.word	0x0008d0db
   8cf54:	0008d0db 	.word	0x0008d0db
   8cf58:	0008d0db 	.word	0x0008d0db
   8cf5c:	0008d0db 	.word	0x0008d0db
   8cf60:	0008d0db 	.word	0x0008d0db
   8cf64:	0008d0db 	.word	0x0008d0db
   8cf68:	0008d0db 	.word	0x0008d0db
   8cf6c:	0008d0db 	.word	0x0008d0db
   8cf70:	0008d0db 	.word	0x0008d0db
   8cf74:	0008d0db 	.word	0x0008d0db
   8cf78:	0008d0db 	.word	0x0008d0db
   8cf7c:	0008d08d 	.word	0x0008d08d
   8cf80:	0008d0db 	.word	0x0008d0db
   8cf84:	0008d0db 	.word	0x0008d0db
   8cf88:	0008d0db 	.word	0x0008d0db
   8cf8c:	0008d0db 	.word	0x0008d0db
   8cf90:	0008d0db 	.word	0x0008d0db
   8cf94:	0008d0db 	.word	0x0008d0db
   8cf98:	0008d0db 	.word	0x0008d0db
   8cf9c:	0008d0db 	.word	0x0008d0db
   8cfa0:	0008d0db 	.word	0x0008d0db
   8cfa4:	0008d0db 	.word	0x0008d0db
   8cfa8:	0008d0db 	.word	0x0008d0db
   8cfac:	0008cfcd 	.word	0x0008cfcd
   8cfb0:	0008d0db 	.word	0x0008d0db
   8cfb4:	0008d0db 	.word	0x0008d0db
   8cfb8:	0008cfe3 	.word	0x0008cfe3
   8cfbc:	0008cfe3 	.word	0x0008cfe3
   8cfc0:	0008d0db 	.word	0x0008d0db
   8cfc4:	0008d0db 	.word	0x0008d0db
   8cfc8:	0008cfe3 	.word	0x0008cfe3
						{
							
							case EVT_CONSOLE_COMMAND_ISOUF_START:
							
							Cl_MacState = MAC_ISOUF;
   8cfcc:	4b47      	ldr	r3, [pc, #284]	; (8d0ec <main+0x14ec>)
   8cfce:	2214      	movs	r2, #20
   8cfd0:	701a      	strb	r2, [r3, #0]
							Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8cfd2:	4b43      	ldr	r3, [pc, #268]	; (8d0e0 <main+0x14e0>)
   8cfd4:	781b      	ldrb	r3, [r3, #0]
   8cfd6:	4618      	mov	r0, r3
   8cfd8:	4b45      	ldr	r3, [pc, #276]	; (8d0f0 <main+0x14f0>)
   8cfda:	4798      	blx	r3
   8cfdc:	4603      	mov	r3, r0
   8cfde:	73fb      	strb	r3, [r7, #15]
							
							
							break;
   8cfe0:	e07c      	b.n	8d0dc <main+0x14dc>
						case EVT_SEND_MIXING_PREP_STOP://0x22
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
	
						
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8cfe2:	4b3f      	ldr	r3, [pc, #252]	; (8d0e0 <main+0x14e0>)
   8cfe4:	781b      	ldrb	r3, [r3, #0]
   8cfe6:	4618      	mov	r0, r3
   8cfe8:	4b42      	ldr	r3, [pc, #264]	; (8d0f4 <main+0x14f4>)
   8cfea:	4798      	blx	r3
   8cfec:	4603      	mov	r3, r0
   8cfee:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8cff0:	7bfb      	ldrb	r3, [r7, #15]
   8cff2:	2b00      	cmp	r3, #0
   8cff4:	d001      	beq.n	8cffa <main+0x13fa>
   8cff6:	4b3c      	ldr	r3, [pc, #240]	; (8d0e8 <main+0x14e8>)
   8cff8:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8cffa:	7bfb      	ldrb	r3, [r7, #15]
   8cffc:	2b00      	cmp	r3, #0
   8cffe:	d102      	bne.n	8d006 <main+0x1406>
							{
								Cl_MacState = MAC_DPREP;
   8d000:	4b3a      	ldr	r3, [pc, #232]	; (8d0ec <main+0x14ec>)
   8d002:	220b      	movs	r2, #11
   8d004:	701a      	strb	r2, [r3, #0]
							else
							{
								// handle error
							}
							
						break;
   8d006:	e069      	b.n	8d0dc <main+0x14dc>
						case EVT_CONSOLE_COMMAND_START_PRIME:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8d008:	4b35      	ldr	r3, [pc, #212]	; (8d0e0 <main+0x14e0>)
   8d00a:	781b      	ldrb	r3, [r3, #0]
   8d00c:	4618      	mov	r0, r3
   8d00e:	4b39      	ldr	r3, [pc, #228]	; (8d0f4 <main+0x14f4>)
   8d010:	4798      	blx	r3
   8d012:	4603      	mov	r3, r0
   8d014:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d016:	7bfb      	ldrb	r3, [r7, #15]
   8d018:	2b00      	cmp	r3, #0
   8d01a:	d001      	beq.n	8d020 <main+0x1420>
   8d01c:	4b32      	ldr	r3, [pc, #200]	; (8d0e8 <main+0x14e8>)
   8d01e:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8d020:	7bfb      	ldrb	r3, [r7, #15]
   8d022:	2b00      	cmp	r3, #0
   8d024:	d102      	bne.n	8d02c <main+0x142c>
							{
								Cl_MacState = MAC_DPREP;
   8d026:	4b31      	ldr	r3, [pc, #196]	; (8d0ec <main+0x14ec>)
   8d028:	220b      	movs	r2, #11
   8d02a:	701a      	strb	r2, [r3, #0]
							}
							else
							{
								// handle error
							}
						break;
   8d02c:	e056      	b.n	8d0dc <main+0x14dc>
						case EVT_CONSOLE_COMMAND_RCIRC_START:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8d02e:	4b2c      	ldr	r3, [pc, #176]	; (8d0e0 <main+0x14e0>)
   8d030:	781b      	ldrb	r3, [r3, #0]
   8d032:	4618      	mov	r0, r3
   8d034:	4b2f      	ldr	r3, [pc, #188]	; (8d0f4 <main+0x14f4>)
   8d036:	4798      	blx	r3
   8d038:	4603      	mov	r3, r0
   8d03a:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d03c:	7bfb      	ldrb	r3, [r7, #15]
   8d03e:	2b00      	cmp	r3, #0
   8d040:	d001      	beq.n	8d046 <main+0x1446>
   8d042:	4b29      	ldr	r3, [pc, #164]	; (8d0e8 <main+0x14e8>)
   8d044:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8d046:	7bfb      	ldrb	r3, [r7, #15]
   8d048:	2b00      	cmp	r3, #0
   8d04a:	d102      	bne.n	8d052 <main+0x1452>
							{
								Cl_MacState = MAC_DPREP;
   8d04c:	4b27      	ldr	r3, [pc, #156]	; (8d0ec <main+0x14ec>)
   8d04e:	220b      	movs	r2, #11
   8d050:	701a      	strb	r2, [r3, #0]
							}
							else
							{
								// handle error
							}
						break;
   8d052:	e043      	b.n	8d0dc <main+0x14dc>
						case EVT_CONSOLE_COMMAND_MAN_PREP_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8d054:	4b22      	ldr	r3, [pc, #136]	; (8d0e0 <main+0x14e0>)
   8d056:	781b      	ldrb	r3, [r3, #0]
   8d058:	4618      	mov	r0, r3
   8d05a:	4b26      	ldr	r3, [pc, #152]	; (8d0f4 <main+0x14f4>)
   8d05c:	4798      	blx	r3
   8d05e:	4603      	mov	r3, r0
   8d060:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d062:	7bfb      	ldrb	r3, [r7, #15]
   8d064:	2b00      	cmp	r3, #0
   8d066:	d001      	beq.n	8d06c <main+0x146c>
   8d068:	4b1f      	ldr	r3, [pc, #124]	; (8d0e8 <main+0x14e8>)
   8d06a:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8d06c:	7bfb      	ldrb	r3, [r7, #15]
   8d06e:	2b00      	cmp	r3, #0
   8d070:	d102      	bne.n	8d078 <main+0x1478>
							{
								Cl_MacState = MAC_DPREP;
   8d072:	4b1e      	ldr	r3, [pc, #120]	; (8d0ec <main+0x14ec>)
   8d074:	220b      	movs	r2, #11
   8d076:	701a      	strb	r2, [r3, #0]
							{
								// handle error
							}
	
						//	Cl_MacState = MAC_POST_DPREP_STANDBY; // for now the prime is set after manual prwepartion is completed
							Cl_MacState = MAC_DPREP_PRIME;
   8d078:	4b1c      	ldr	r3, [pc, #112]	; (8d0ec <main+0x14ec>)
   8d07a:	220c      	movs	r2, #12
   8d07c:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP_PRIME,1);
							ASSERT_ERROR(Cl_MacRetval);
   8d07e:	7bfb      	ldrb	r3, [r7, #15]
   8d080:	2b00      	cmp	r3, #0
   8d082:	d002      	beq.n	8d08a <main+0x148a>
   8d084:	4b18      	ldr	r3, [pc, #96]	; (8d0e8 <main+0x14e8>)
   8d086:	4798      	blx	r3
						
						break;
   8d088:	e028      	b.n	8d0dc <main+0x14dc>
   8d08a:	e027      	b.n	8d0dc <main+0x14dc>
						
						
						//Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						break;
						case MACREQ_DIALYSER_PRIME_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8d08c:	4b14      	ldr	r3, [pc, #80]	; (8d0e0 <main+0x14e0>)
   8d08e:	781b      	ldrb	r3, [r3, #0]
   8d090:	4618      	mov	r0, r3
   8d092:	4b18      	ldr	r3, [pc, #96]	; (8d0f4 <main+0x14f4>)
   8d094:	4798      	blx	r3
   8d096:	4603      	mov	r3, r0
   8d098:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d09a:	7bfb      	ldrb	r3, [r7, #15]
   8d09c:	2b00      	cmp	r3, #0
   8d09e:	d001      	beq.n	8d0a4 <main+0x14a4>
   8d0a0:	4b11      	ldr	r3, [pc, #68]	; (8d0e8 <main+0x14e8>)
   8d0a2:	4798      	blx	r3
						if(Cl_MacRetval == CL_OK)
   8d0a4:	7bfb      	ldrb	r3, [r7, #15]
   8d0a6:	2b00      	cmp	r3, #0
   8d0a8:	d108      	bne.n	8d0bc <main+0x14bc>
						{
							Cl_MacState = MAC_POST_DPREP_STANDBY;
   8d0aa:	4b10      	ldr	r3, [pc, #64]	; (8d0ec <main+0x14ec>)
   8d0ac:	220e      	movs	r2, #14
   8d0ae:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_POST_DPREP_STANDBY,1);
							ASSERT_ERROR(Cl_MacRetval);
   8d0b0:	7bfb      	ldrb	r3, [r7, #15]
   8d0b2:	2b00      	cmp	r3, #0
   8d0b4:	d002      	beq.n	8d0bc <main+0x14bc>
   8d0b6:	4b0c      	ldr	r3, [pc, #48]	; (8d0e8 <main+0x14e8>)
   8d0b8:	4798      	blx	r3
						}
						else
						{
							// handle error
						}
						break;
   8d0ba:	e00f      	b.n	8d0dc <main+0x14dc>
   8d0bc:	e00e      	b.n	8d0dc <main+0x14dc>
						
						case EVT_CONSOLE_COMMAND_DILYSER_CONNECTED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8d0be:	4b08      	ldr	r3, [pc, #32]	; (8d0e0 <main+0x14e0>)
   8d0c0:	781b      	ldrb	r3, [r3, #0]
   8d0c2:	4618      	mov	r0, r3
   8d0c4:	4b0b      	ldr	r3, [pc, #44]	; (8d0f4 <main+0x14f4>)
   8d0c6:	4798      	blx	r3
   8d0c8:	4603      	mov	r3, r0
   8d0ca:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d0cc:	7bfb      	ldrb	r3, [r7, #15]
   8d0ce:	2b00      	cmp	r3, #0
   8d0d0:	d002      	beq.n	8d0d8 <main+0x14d8>
   8d0d2:	4b05      	ldr	r3, [pc, #20]	; (8d0e8 <main+0x14e8>)
   8d0d4:	4798      	blx	r3



						break;
   8d0d6:	e001      	b.n	8d0dc <main+0x14dc>
   8d0d8:	e000      	b.n	8d0dc <main+0x14dc>

						default: break;
   8d0da:	bf00      	nop
					}
					break;
   8d0dc:	f000 bfb7 	b.w	8e04e <main+0x244e>
   8d0e0:	20071b0b 	.word	0x20071b0b
   8d0e4:	000a3f11 	.word	0x000a3f11
   8d0e8:	00088b81 	.word	0x00088b81
   8d0ec:	20070730 	.word	0x20070730
   8d0f0:	00095781 	.word	0x00095781
   8d0f4:	0009fd19 	.word	0x0009fd19
					case MAC_DPREP_PRIME:
					switch ( Cl_MacEvent )
   8d0f8:	4b89      	ldr	r3, [pc, #548]	; (8d320 <main+0x1720>)
   8d0fa:	781b      	ldrb	r3, [r3, #0]
   8d0fc:	3b0a      	subs	r3, #10
   8d0fe:	2b55      	cmp	r3, #85	; 0x55
   8d100:	f200 80fe 	bhi.w	8d300 <main+0x1700>
   8d104:	a201      	add	r2, pc, #4	; (adr r2, 8d10c <main+0x150c>)
   8d106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8d10a:	bf00      	nop
   8d10c:	0008d265 	.word	0x0008d265
   8d110:	0008d265 	.word	0x0008d265
   8d114:	0008d265 	.word	0x0008d265
   8d118:	0008d301 	.word	0x0008d301
   8d11c:	0008d301 	.word	0x0008d301
   8d120:	0008d281 	.word	0x0008d281
   8d124:	0008d301 	.word	0x0008d301
   8d128:	0008d265 	.word	0x0008d265
   8d12c:	0008d265 	.word	0x0008d265
   8d130:	0008d265 	.word	0x0008d265
   8d134:	0008d265 	.word	0x0008d265
   8d138:	0008d301 	.word	0x0008d301
   8d13c:	0008d265 	.word	0x0008d265
   8d140:	0008d301 	.word	0x0008d301
   8d144:	0008d301 	.word	0x0008d301
   8d148:	0008d301 	.word	0x0008d301
   8d14c:	0008d301 	.word	0x0008d301
   8d150:	0008d301 	.word	0x0008d301
   8d154:	0008d301 	.word	0x0008d301
   8d158:	0008d301 	.word	0x0008d301
   8d15c:	0008d301 	.word	0x0008d301
   8d160:	0008d301 	.word	0x0008d301
   8d164:	0008d301 	.word	0x0008d301
   8d168:	0008d301 	.word	0x0008d301
   8d16c:	0008d301 	.word	0x0008d301
   8d170:	0008d301 	.word	0x0008d301
   8d174:	0008d301 	.word	0x0008d301
   8d178:	0008d301 	.word	0x0008d301
   8d17c:	0008d265 	.word	0x0008d265
   8d180:	0008d265 	.word	0x0008d265
   8d184:	0008d265 	.word	0x0008d265
   8d188:	0008d301 	.word	0x0008d301
   8d18c:	0008d301 	.word	0x0008d301
   8d190:	0008d301 	.word	0x0008d301
   8d194:	0008d301 	.word	0x0008d301
   8d198:	0008d265 	.word	0x0008d265
   8d19c:	0008d265 	.word	0x0008d265
   8d1a0:	0008d301 	.word	0x0008d301
   8d1a4:	0008d301 	.word	0x0008d301
   8d1a8:	0008d301 	.word	0x0008d301
   8d1ac:	0008d301 	.word	0x0008d301
   8d1b0:	0008d301 	.word	0x0008d301
   8d1b4:	0008d301 	.word	0x0008d301
   8d1b8:	0008d301 	.word	0x0008d301
   8d1bc:	0008d301 	.word	0x0008d301
   8d1c0:	0008d301 	.word	0x0008d301
   8d1c4:	0008d301 	.word	0x0008d301
   8d1c8:	0008d301 	.word	0x0008d301
   8d1cc:	0008d265 	.word	0x0008d265
   8d1d0:	0008d265 	.word	0x0008d265
   8d1d4:	0008d265 	.word	0x0008d265
   8d1d8:	0008d265 	.word	0x0008d265
   8d1dc:	0008d301 	.word	0x0008d301
   8d1e0:	0008d301 	.word	0x0008d301
   8d1e4:	0008d301 	.word	0x0008d301
   8d1e8:	0008d301 	.word	0x0008d301
   8d1ec:	0008d301 	.word	0x0008d301
   8d1f0:	0008d301 	.word	0x0008d301
   8d1f4:	0008d301 	.word	0x0008d301
   8d1f8:	0008d301 	.word	0x0008d301
   8d1fc:	0008d301 	.word	0x0008d301
   8d200:	0008d301 	.word	0x0008d301
   8d204:	0008d301 	.word	0x0008d301
   8d208:	0008d2b3 	.word	0x0008d2b3
   8d20c:	0008d301 	.word	0x0008d301
   8d210:	0008d301 	.word	0x0008d301
   8d214:	0008d2cf 	.word	0x0008d2cf
   8d218:	0008d301 	.word	0x0008d301
   8d21c:	0008d301 	.word	0x0008d301
   8d220:	0008d301 	.word	0x0008d301
   8d224:	0008d301 	.word	0x0008d301
   8d228:	0008d301 	.word	0x0008d301
   8d22c:	0008d301 	.word	0x0008d301
   8d230:	0008d301 	.word	0x0008d301
   8d234:	0008d301 	.word	0x0008d301
   8d238:	0008d301 	.word	0x0008d301
   8d23c:	0008d301 	.word	0x0008d301
   8d240:	0008d301 	.word	0x0008d301
   8d244:	0008d301 	.word	0x0008d301
   8d248:	0008d301 	.word	0x0008d301
   8d24c:	0008d301 	.word	0x0008d301
   8d250:	0008d265 	.word	0x0008d265
   8d254:	0008d265 	.word	0x0008d265
   8d258:	0008d301 	.word	0x0008d301
   8d25c:	0008d301 	.word	0x0008d301
   8d260:	0008d265 	.word	0x0008d265
						case EVT_ALERT_TRIGGERED:
						case EVT_ALARM_TRIGGERED:
						case EVT_CONSOLE_COMMAND_MUTE_ALARM:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8d264:	4b2e      	ldr	r3, [pc, #184]	; (8d320 <main+0x1720>)
   8d266:	781b      	ldrb	r3, [r3, #0]
   8d268:	4618      	mov	r0, r3
   8d26a:	4b2e      	ldr	r3, [pc, #184]	; (8d324 <main+0x1724>)
   8d26c:	4798      	blx	r3
   8d26e:	4603      	mov	r3, r0
   8d270:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d272:	7bfb      	ldrb	r3, [r7, #15]
   8d274:	2b00      	cmp	r3, #0
   8d276:	d002      	beq.n	8d27e <main+0x167e>
   8d278:	4b2b      	ldr	r3, [pc, #172]	; (8d328 <main+0x1728>)
   8d27a:	4798      	blx	r3
						if(Cl_MacRetval != CL_OK)
						{
							// handle error
						}
						break;
   8d27c:	e041      	b.n	8d302 <main+0x1702>
   8d27e:	e040      	b.n	8d302 <main+0x1702>
						case EVT_CONSOLE_COMMAND_START_PRIME:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8d280:	4b27      	ldr	r3, [pc, #156]	; (8d320 <main+0x1720>)
   8d282:	781b      	ldrb	r3, [r3, #0]
   8d284:	4618      	mov	r0, r3
   8d286:	4b27      	ldr	r3, [pc, #156]	; (8d324 <main+0x1724>)
   8d288:	4798      	blx	r3
   8d28a:	4603      	mov	r3, r0
   8d28c:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d28e:	7bfb      	ldrb	r3, [r7, #15]
   8d290:	2b00      	cmp	r3, #0
   8d292:	d001      	beq.n	8d298 <main+0x1698>
   8d294:	4b24      	ldr	r3, [pc, #144]	; (8d328 <main+0x1728>)
   8d296:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8d298:	7bfb      	ldrb	r3, [r7, #15]
   8d29a:	2b00      	cmp	r3, #0
   8d29c:	d108      	bne.n	8d2b0 <main+0x16b0>
							{
								Cl_MacState = 	MAC_DPREP_PRIME;
   8d29e:	4b23      	ldr	r3, [pc, #140]	; (8d32c <main+0x172c>)
   8d2a0:	220c      	movs	r2, #12
   8d2a2:	701a      	strb	r2, [r3, #0]
							//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP_PRIME,1);
								ASSERT_ERROR(Cl_MacRetval);
   8d2a4:	7bfb      	ldrb	r3, [r7, #15]
   8d2a6:	2b00      	cmp	r3, #0
   8d2a8:	d002      	beq.n	8d2b0 <main+0x16b0>
   8d2aa:	4b1f      	ldr	r3, [pc, #124]	; (8d328 <main+0x1728>)
   8d2ac:	4798      	blx	r3
							else
							{
								// handle error
							}

						break;
   8d2ae:	e028      	b.n	8d302 <main+0x1702>
   8d2b0:	e027      	b.n	8d302 <main+0x1702>

						

						case MACREQ_PRIME_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8d2b2:	4b1b      	ldr	r3, [pc, #108]	; (8d320 <main+0x1720>)
   8d2b4:	781b      	ldrb	r3, [r3, #0]
   8d2b6:	4618      	mov	r0, r3
   8d2b8:	4b1a      	ldr	r3, [pc, #104]	; (8d324 <main+0x1724>)
   8d2ba:	4798      	blx	r3
   8d2bc:	4603      	mov	r3, r0
   8d2be:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d2c0:	7bfb      	ldrb	r3, [r7, #15]
   8d2c2:	2b00      	cmp	r3, #0
   8d2c4:	d002      	beq.n	8d2cc <main+0x16cc>
   8d2c6:	4b18      	ldr	r3, [pc, #96]	; (8d328 <main+0x1728>)
   8d2c8:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}

						break;
   8d2ca:	e01a      	b.n	8d302 <main+0x1702>
   8d2cc:	e019      	b.n	8d302 <main+0x1702>
						case MACREQ_DIALYSER_PRIME_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8d2ce:	4b14      	ldr	r3, [pc, #80]	; (8d320 <main+0x1720>)
   8d2d0:	781b      	ldrb	r3, [r3, #0]
   8d2d2:	4618      	mov	r0, r3
   8d2d4:	4b13      	ldr	r3, [pc, #76]	; (8d324 <main+0x1724>)
   8d2d6:	4798      	blx	r3
   8d2d8:	4603      	mov	r3, r0
   8d2da:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d2dc:	7bfb      	ldrb	r3, [r7, #15]
   8d2de:	2b00      	cmp	r3, #0
   8d2e0:	d001      	beq.n	8d2e6 <main+0x16e6>
   8d2e2:	4b11      	ldr	r3, [pc, #68]	; (8d328 <main+0x1728>)
   8d2e4:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8d2e6:	7bfb      	ldrb	r3, [r7, #15]
   8d2e8:	2b00      	cmp	r3, #0
   8d2ea:	d108      	bne.n	8d2fe <main+0x16fe>
							{
							Cl_MacState = MAC_POST_DPREP_STANDBY;
   8d2ec:	4b0f      	ldr	r3, [pc, #60]	; (8d32c <main+0x172c>)
   8d2ee:	220e      	movs	r2, #14
   8d2f0:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_POST_DPREP_STANDBY,1);
							ASSERT_ERROR(Cl_MacRetval);
   8d2f2:	7bfb      	ldrb	r3, [r7, #15]
   8d2f4:	2b00      	cmp	r3, #0
   8d2f6:	d002      	beq.n	8d2fe <main+0x16fe>
   8d2f8:	4b0b      	ldr	r3, [pc, #44]	; (8d328 <main+0x1728>)
   8d2fa:	4798      	blx	r3
							else
							{
								// handle error
							}

						break;
   8d2fc:	e001      	b.n	8d302 <main+0x1702>
   8d2fe:	e000      	b.n	8d302 <main+0x1702>
					

						default: break;
   8d300:	bf00      	nop
					}
					break;
   8d302:	f000 bea4 	b.w	8e04e <main+0x244e>
					case MAC_SAFE_DPREP:
					switch ( Cl_MacEvent )
   8d306:	4b06      	ldr	r3, [pc, #24]	; (8d320 <main+0x1720>)
   8d308:	781b      	ldrb	r3, [r3, #0]
   8d30a:	2b07      	cmp	r3, #7
   8d30c:	d002      	beq.n	8d314 <main+0x1714>
   8d30e:	2b09      	cmp	r3, #9
   8d310:	d003      	beq.n	8d31a <main+0x171a>
					{
						case EVT_CONSOLE_COMMAND_RINSE_START:
						break;
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
						break;
						default: break;
   8d312:	e003      	b.n	8d31c <main+0x171c>
					case MAC_SAFE_DPREP:
					switch ( Cl_MacEvent )
				
					{
						case EVT_CONSOLE_COMMAND_RINSE_START:
						break;
   8d314:	bf00      	nop
   8d316:	f000 be9a 	b.w	8e04e <main+0x244e>
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
						break;
   8d31a:	bf00      	nop
						default: break;
					}
					break;
   8d31c:	f000 be97 	b.w	8e04e <main+0x244e>
   8d320:	20071b0b 	.word	0x20071b0b
   8d324:	0009fd19 	.word	0x0009fd19
   8d328:	00088b81 	.word	0x00088b81
   8d32c:	20070730 	.word	0x20070730
					case MAC_POST_DPREP_STANDBY:
					switch ( Cl_MacEvent )
   8d330:	4bde      	ldr	r3, [pc, #888]	; (8d6ac <main+0x1aac>)
   8d332:	781b      	ldrb	r3, [r3, #0]
   8d334:	3b0a      	subs	r3, #10
   8d336:	2b55      	cmp	r3, #85	; 0x55
   8d338:	f200 80e2 	bhi.w	8d500 <main+0x1900>
   8d33c:	a201      	add	r2, pc, #4	; (adr r2, 8d344 <main+0x1744>)
   8d33e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8d342:	bf00      	nop
   8d344:	0008d49d 	.word	0x0008d49d
   8d348:	0008d49d 	.word	0x0008d49d
   8d34c:	0008d49d 	.word	0x0008d49d
   8d350:	0008d501 	.word	0x0008d501
   8d354:	0008d501 	.word	0x0008d501
   8d358:	0008d501 	.word	0x0008d501
   8d35c:	0008d501 	.word	0x0008d501
   8d360:	0008d501 	.word	0x0008d501
   8d364:	0008d501 	.word	0x0008d501
   8d368:	0008d501 	.word	0x0008d501
   8d36c:	0008d501 	.word	0x0008d501
   8d370:	0008d49d 	.word	0x0008d49d
   8d374:	0008d501 	.word	0x0008d501
   8d378:	0008d4b9 	.word	0x0008d4b9
   8d37c:	0008d501 	.word	0x0008d501
   8d380:	0008d501 	.word	0x0008d501
   8d384:	0008d49d 	.word	0x0008d49d
   8d388:	0008d49d 	.word	0x0008d49d
   8d38c:	0008d49d 	.word	0x0008d49d
   8d390:	0008d501 	.word	0x0008d501
   8d394:	0008d501 	.word	0x0008d501
   8d398:	0008d501 	.word	0x0008d501
   8d39c:	0008d501 	.word	0x0008d501
   8d3a0:	0008d49d 	.word	0x0008d49d
   8d3a4:	0008d501 	.word	0x0008d501
   8d3a8:	0008d501 	.word	0x0008d501
   8d3ac:	0008d501 	.word	0x0008d501
   8d3b0:	0008d501 	.word	0x0008d501
   8d3b4:	0008d501 	.word	0x0008d501
   8d3b8:	0008d49d 	.word	0x0008d49d
   8d3bc:	0008d49d 	.word	0x0008d49d
   8d3c0:	0008d501 	.word	0x0008d501
   8d3c4:	0008d501 	.word	0x0008d501
   8d3c8:	0008d501 	.word	0x0008d501
   8d3cc:	0008d501 	.word	0x0008d501
   8d3d0:	0008d49d 	.word	0x0008d49d
   8d3d4:	0008d49d 	.word	0x0008d49d
   8d3d8:	0008d501 	.word	0x0008d501
   8d3dc:	0008d501 	.word	0x0008d501
   8d3e0:	0008d501 	.word	0x0008d501
   8d3e4:	0008d501 	.word	0x0008d501
   8d3e8:	0008d501 	.word	0x0008d501
   8d3ec:	0008d501 	.word	0x0008d501
   8d3f0:	0008d501 	.word	0x0008d501
   8d3f4:	0008d501 	.word	0x0008d501
   8d3f8:	0008d501 	.word	0x0008d501
   8d3fc:	0008d49d 	.word	0x0008d49d
   8d400:	0008d501 	.word	0x0008d501
   8d404:	0008d49d 	.word	0x0008d49d
   8d408:	0008d49d 	.word	0x0008d49d
   8d40c:	0008d501 	.word	0x0008d501
   8d410:	0008d501 	.word	0x0008d501
   8d414:	0008d501 	.word	0x0008d501
   8d418:	0008d501 	.word	0x0008d501
   8d41c:	0008d501 	.word	0x0008d501
   8d420:	0008d501 	.word	0x0008d501
   8d424:	0008d501 	.word	0x0008d501
   8d428:	0008d501 	.word	0x0008d501
   8d42c:	0008d501 	.word	0x0008d501
   8d430:	0008d501 	.word	0x0008d501
   8d434:	0008d501 	.word	0x0008d501
   8d438:	0008d501 	.word	0x0008d501
   8d43c:	0008d501 	.word	0x0008d501
   8d440:	0008d501 	.word	0x0008d501
   8d444:	0008d501 	.word	0x0008d501
   8d448:	0008d501 	.word	0x0008d501
   8d44c:	0008d501 	.word	0x0008d501
   8d450:	0008d501 	.word	0x0008d501
   8d454:	0008d501 	.word	0x0008d501
   8d458:	0008d501 	.word	0x0008d501
   8d45c:	0008d501 	.word	0x0008d501
   8d460:	0008d501 	.word	0x0008d501
   8d464:	0008d501 	.word	0x0008d501
   8d468:	0008d501 	.word	0x0008d501
   8d46c:	0008d501 	.word	0x0008d501
   8d470:	0008d49d 	.word	0x0008d49d
   8d474:	0008d501 	.word	0x0008d501
   8d478:	0008d501 	.word	0x0008d501
   8d47c:	0008d4eb 	.word	0x0008d4eb
   8d480:	0008d501 	.word	0x0008d501
   8d484:	0008d501 	.word	0x0008d501
   8d488:	0008d49d 	.word	0x0008d49d
   8d48c:	0008d49d 	.word	0x0008d49d
   8d490:	0008d501 	.word	0x0008d501
   8d494:	0008d501 	.word	0x0008d501
   8d498:	0008d49d 	.word	0x0008d49d
						case EVT_CONSOLE_COMMAND_PATIENT_READY:
						case EVT_CONSOLE_COMMAND_BYPASS_ON:
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8d49c:	4b83      	ldr	r3, [pc, #524]	; (8d6ac <main+0x1aac>)
   8d49e:	781b      	ldrb	r3, [r3, #0]
   8d4a0:	4618      	mov	r0, r3
   8d4a2:	4b83      	ldr	r3, [pc, #524]	; (8d6b0 <main+0x1ab0>)
   8d4a4:	4798      	blx	r3
   8d4a6:	4603      	mov	r3, r0
   8d4a8:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d4aa:	7bfb      	ldrb	r3, [r7, #15]
   8d4ac:	2b00      	cmp	r3, #0
   8d4ae:	d002      	beq.n	8d4b6 <main+0x18b6>
   8d4b0:	4b80      	ldr	r3, [pc, #512]	; (8d6b4 <main+0x1ab4>)
   8d4b2:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
							//Cl_MacEvent = EVT_NULL;
						break;
   8d4b4:	e025      	b.n	8d502 <main+0x1902>
   8d4b6:	e024      	b.n	8d502 <main+0x1902>
// 							{
// 								//handle error
// 							}
// 							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
//							{
								Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8d4b8:	4b7c      	ldr	r3, [pc, #496]	; (8d6ac <main+0x1aac>)
   8d4ba:	781b      	ldrb	r3, [r3, #0]
   8d4bc:	4618      	mov	r0, r3
   8d4be:	4b7e      	ldr	r3, [pc, #504]	; (8d6b8 <main+0x1ab8>)
   8d4c0:	4798      	blx	r3
   8d4c2:	4603      	mov	r3, r0
   8d4c4:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8d4c6:	7bfb      	ldrb	r3, [r7, #15]
   8d4c8:	2b00      	cmp	r3, #0
   8d4ca:	d001      	beq.n	8d4d0 <main+0x18d0>
   8d4cc:	4b79      	ldr	r3, [pc, #484]	; (8d6b4 <main+0x1ab4>)
   8d4ce:	4798      	blx	r3
//							else
//							{
								//handle error
//							}

						if(Cl_MacRetval == CL_OK)
   8d4d0:	7bfb      	ldrb	r3, [r7, #15]
   8d4d2:	2b00      	cmp	r3, #0
   8d4d4:	d108      	bne.n	8d4e8 <main+0x18e8>
						{
							Cl_MacState = MAC_DIALYSIS;
   8d4d6:	4b79      	ldr	r3, [pc, #484]	; (8d6bc <main+0x1abc>)
   8d4d8:	220f      	movs	r2, #15
   8d4da:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
							ASSERT_ERROR(Cl_MacRetval);
   8d4dc:	7bfb      	ldrb	r3, [r7, #15]
   8d4de:	2b00      	cmp	r3, #0
   8d4e0:	d002      	beq.n	8d4e8 <main+0x18e8>
   8d4e2:	4b74      	ldr	r3, [pc, #464]	; (8d6b4 <main+0x1ab4>)
   8d4e4:	4798      	blx	r3
						}
						break;
   8d4e6:	e00c      	b.n	8d502 <main+0x1902>
   8d4e8:	e00b      	b.n	8d502 <main+0x1902>
						
						// add case for isouf start event
						case EVT_CONSOLE_COMMAND_ISOUF_START:
						
						Cl_MacState = MAC_ISOUF;
   8d4ea:	4b74      	ldr	r3, [pc, #464]	; (8d6bc <main+0x1abc>)
   8d4ec:	2214      	movs	r2, #20
   8d4ee:	701a      	strb	r2, [r3, #0]
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d4f0:	4b6e      	ldr	r3, [pc, #440]	; (8d6ac <main+0x1aac>)
   8d4f2:	781b      	ldrb	r3, [r3, #0]
   8d4f4:	4618      	mov	r0, r3
   8d4f6:	4b72      	ldr	r3, [pc, #456]	; (8d6c0 <main+0x1ac0>)
   8d4f8:	4798      	blx	r3
   8d4fa:	4603      	mov	r3, r0
   8d4fc:	73fb      	strb	r3, [r7, #15]
						
						
						break;
   8d4fe:	e000      	b.n	8d502 <main+0x1902>
						
						default: break;
   8d500:	bf00      	nop
					}
					break;
   8d502:	f000 bda4 	b.w	8e04e <main+0x244e>
					
					case MAC_ISOUF:
					
					switch(Cl_MacEvent){
   8d506:	4b69      	ldr	r3, [pc, #420]	; (8d6ac <main+0x1aac>)
   8d508:	781b      	ldrb	r3, [r3, #0]
   8d50a:	3b07      	subs	r3, #7
   8d50c:	2b58      	cmp	r3, #88	; 0x58
   8d50e:	f200 859d 	bhi.w	8e04c <main+0x244c>
   8d512:	a201      	add	r2, pc, #4	; (adr r2, 8d518 <main+0x1918>)
   8d514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8d518:	0008d751 	.word	0x0008d751
   8d51c:	0008e04d 	.word	0x0008e04d
   8d520:	0008e04d 	.word	0x0008e04d
   8d524:	0008d68d 	.word	0x0008d68d
   8d528:	0008d68d 	.word	0x0008d68d
   8d52c:	0008d68d 	.word	0x0008d68d
   8d530:	0008e04d 	.word	0x0008e04d
   8d534:	0008e04d 	.word	0x0008e04d
   8d538:	0008e04d 	.word	0x0008e04d
   8d53c:	0008e04d 	.word	0x0008e04d
   8d540:	0008e04d 	.word	0x0008e04d
   8d544:	0008e04d 	.word	0x0008e04d
   8d548:	0008e04d 	.word	0x0008e04d
   8d54c:	0008e04d 	.word	0x0008e04d
   8d550:	0008d68d 	.word	0x0008d68d
   8d554:	0008e04d 	.word	0x0008e04d
   8d558:	0008d71f 	.word	0x0008d71f
   8d55c:	0008e04d 	.word	0x0008e04d
   8d560:	0008e04d 	.word	0x0008e04d
   8d564:	0008d68d 	.word	0x0008d68d
   8d568:	0008d68d 	.word	0x0008d68d
   8d56c:	0008e04d 	.word	0x0008e04d
   8d570:	0008e04d 	.word	0x0008e04d
   8d574:	0008e04d 	.word	0x0008e04d
   8d578:	0008e04d 	.word	0x0008e04d
   8d57c:	0008e04d 	.word	0x0008e04d
   8d580:	0008e04d 	.word	0x0008e04d
   8d584:	0008e04d 	.word	0x0008e04d
   8d588:	0008e04d 	.word	0x0008e04d
   8d58c:	0008e04d 	.word	0x0008e04d
   8d590:	0008e04d 	.word	0x0008e04d
   8d594:	0008e04d 	.word	0x0008e04d
   8d598:	0008d68d 	.word	0x0008d68d
   8d59c:	0008d68d 	.word	0x0008d68d
   8d5a0:	0008d68d 	.word	0x0008d68d
   8d5a4:	0008e04d 	.word	0x0008e04d
   8d5a8:	0008e04d 	.word	0x0008e04d
   8d5ac:	0008e04d 	.word	0x0008e04d
   8d5b0:	0008d68d 	.word	0x0008d68d
   8d5b4:	0008d68d 	.word	0x0008d68d
   8d5b8:	0008e04d 	.word	0x0008e04d
   8d5bc:	0008e04d 	.word	0x0008e04d
   8d5c0:	0008e04d 	.word	0x0008e04d
   8d5c4:	0008e04d 	.word	0x0008e04d
   8d5c8:	0008e04d 	.word	0x0008e04d
   8d5cc:	0008e04d 	.word	0x0008e04d
   8d5d0:	0008e04d 	.word	0x0008e04d
   8d5d4:	0008e04d 	.word	0x0008e04d
   8d5d8:	0008e04d 	.word	0x0008e04d
   8d5dc:	0008d68d 	.word	0x0008d68d
   8d5e0:	0008e04d 	.word	0x0008e04d
   8d5e4:	0008d68d 	.word	0x0008d68d
   8d5e8:	0008d68d 	.word	0x0008d68d
   8d5ec:	0008d68d 	.word	0x0008d68d
   8d5f0:	0008d68d 	.word	0x0008d68d
   8d5f4:	0008e04d 	.word	0x0008e04d
   8d5f8:	0008e04d 	.word	0x0008e04d
   8d5fc:	0008e04d 	.word	0x0008e04d
   8d600:	0008e04d 	.word	0x0008e04d
   8d604:	0008e04d 	.word	0x0008e04d
   8d608:	0008e04d 	.word	0x0008e04d
   8d60c:	0008e04d 	.word	0x0008e04d
   8d610:	0008e04d 	.word	0x0008e04d
   8d614:	0008e04d 	.word	0x0008e04d
   8d618:	0008e04d 	.word	0x0008e04d
   8d61c:	0008e04d 	.word	0x0008e04d
   8d620:	0008e04d 	.word	0x0008e04d
   8d624:	0008e04d 	.word	0x0008e04d
   8d628:	0008e04d 	.word	0x0008e04d
   8d62c:	0008e04d 	.word	0x0008e04d
   8d630:	0008e04d 	.word	0x0008e04d
   8d634:	0008e04d 	.word	0x0008e04d
   8d638:	0008e04d 	.word	0x0008e04d
   8d63c:	0008e04d 	.word	0x0008e04d
   8d640:	0008e04d 	.word	0x0008e04d
   8d644:	0008e04d 	.word	0x0008e04d
   8d648:	0008e04d 	.word	0x0008e04d
   8d64c:	0008e04d 	.word	0x0008e04d
   8d650:	0008e04d 	.word	0x0008e04d
   8d654:	0008e04d 	.word	0x0008e04d
   8d658:	0008e04d 	.word	0x0008e04d
   8d65c:	0008d67d 	.word	0x0008d67d
   8d660:	0008d703 	.word	0x0008d703
   8d664:	0008d6c5 	.word	0x0008d6c5
   8d668:	0008d68d 	.word	0x0008d68d
   8d66c:	0008d68d 	.word	0x0008d68d
   8d670:	0008e04d 	.word	0x0008e04d
   8d674:	0008e04d 	.word	0x0008e04d
   8d678:	0008d68d 	.word	0x0008d68d
					
					case EVT_CONSOLE_COMMAND_ISOUF_START:
							
							//Cl_MacState = MAC_ISOUF;
							Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d67c:	4b0b      	ldr	r3, [pc, #44]	; (8d6ac <main+0x1aac>)
   8d67e:	781b      	ldrb	r3, [r3, #0]
   8d680:	4618      	mov	r0, r3
   8d682:	4b0f      	ldr	r3, [pc, #60]	; (8d6c0 <main+0x1ac0>)
   8d684:	4798      	blx	r3
   8d686:	4603      	mov	r3, r0
   8d688:	73fb      	strb	r3, [r7, #15]
							
							
							break;
   8d68a:	e082      	b.n	8d792 <main+0x1b92>
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
						//case EVT_CONSOLE_COMMAND_GET_DATA:
						//case EVT_CONSOLE_COMMAND_SET_DATA:
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d68c:	4b07      	ldr	r3, [pc, #28]	; (8d6ac <main+0x1aac>)
   8d68e:	781b      	ldrb	r3, [r3, #0]
   8d690:	4618      	mov	r0, r3
   8d692:	4b0b      	ldr	r3, [pc, #44]	; (8d6c0 <main+0x1ac0>)
   8d694:	4798      	blx	r3
   8d696:	4603      	mov	r3, r0
   8d698:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d69a:	7bfb      	ldrb	r3, [r7, #15]
   8d69c:	2b00      	cmp	r3, #0
   8d69e:	d001      	beq.n	8d6a4 <main+0x1aa4>
   8d6a0:	4b04      	ldr	r3, [pc, #16]	; (8d6b4 <main+0x1ab4>)
   8d6a2:	4798      	blx	r3
						if(Cl_MacRetval != CL_OK)
						{
							// handle error
						}
						
						Cl_MacEvent = EVT_NULL;
   8d6a4:	4b01      	ldr	r3, [pc, #4]	; (8d6ac <main+0x1aac>)
   8d6a6:	2200      	movs	r2, #0
   8d6a8:	701a      	strb	r2, [r3, #0]
						break;
   8d6aa:	e072      	b.n	8d792 <main+0x1b92>
   8d6ac:	20071b0b 	.word	0x20071b0b
   8d6b0:	0009fd19 	.word	0x0009fd19
   8d6b4:	00088b81 	.word	0x00088b81
   8d6b8:	000853ad 	.word	0x000853ad
   8d6bc:	20070730 	.word	0x20070730
   8d6c0:	00095781 	.word	0x00095781
						
						case MACREQ_ISOUF_COMPLETED:
						
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d6c4:	4bb7      	ldr	r3, [pc, #732]	; (8d9a4 <main+0x1da4>)
   8d6c6:	781b      	ldrb	r3, [r3, #0]
   8d6c8:	4618      	mov	r0, r3
   8d6ca:	4bb7      	ldr	r3, [pc, #732]	; (8d9a8 <main+0x1da8>)
   8d6cc:	4798      	blx	r3
   8d6ce:	4603      	mov	r3, r0
   8d6d0:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d6d2:	7bfb      	ldrb	r3, [r7, #15]
   8d6d4:	2b00      	cmp	r3, #0
   8d6d6:	d001      	beq.n	8d6dc <main+0x1adc>
   8d6d8:	4bb4      	ldr	r3, [pc, #720]	; (8d9ac <main+0x1dac>)
   8d6da:	4798      	blx	r3
						if( Cl_MacRetval == CL_OK)
   8d6dc:	7bfb      	ldrb	r3, [r7, #15]
   8d6de:	2b00      	cmp	r3, #0
   8d6e0:	d10b      	bne.n	8d6fa <main+0x1afa>
						{
							
						//	Cl_MacRetval = Cl_rinse_init();
						//	Cl_MacRetval = Cl_stby_init();
						//	Cl_MacRetval = Cl_dprep_init();
							Cl_MacRetval =Cl_isouf_init();
   8d6e2:	4bb3      	ldr	r3, [pc, #716]	; (8d9b0 <main+0x1db0>)
   8d6e4:	4798      	blx	r3
   8d6e6:	4603      	mov	r3, r0
   8d6e8:	73fb      	strb	r3, [r7, #15]
							
							Cl_MacState = MAC_POST_ISOUF_STANDBY;
   8d6ea:	4bb2      	ldr	r3, [pc, #712]	; (8d9b4 <main+0x1db4>)
   8d6ec:	2215      	movs	r2, #21
   8d6ee:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)Cl_MacState,1);
							ASSERT_ERROR(Cl_MacRetval);
   8d6f0:	7bfb      	ldrb	r3, [r7, #15]
   8d6f2:	2b00      	cmp	r3, #0
   8d6f4:	d001      	beq.n	8d6fa <main+0x1afa>
   8d6f6:	4bad      	ldr	r3, [pc, #692]	; (8d9ac <main+0x1dac>)
   8d6f8:	4798      	blx	r3
						}
						else
						{
							//handle error
						}
						Cl_MacEvent = EVT_NULL;
   8d6fa:	4baa      	ldr	r3, [pc, #680]	; (8d9a4 <main+0x1da4>)
   8d6fc:	2200      	movs	r2, #0
   8d6fe:	701a      	strb	r2, [r3, #0]
						break;
   8d700:	e047      	b.n	8d792 <main+0x1b92>
					
						case EVT_CONSOLE_COMMAND_ISOUF_STOP:
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d702:	4ba8      	ldr	r3, [pc, #672]	; (8d9a4 <main+0x1da4>)
   8d704:	781b      	ldrb	r3, [r3, #0]
   8d706:	4618      	mov	r0, r3
   8d708:	4ba7      	ldr	r3, [pc, #668]	; (8d9a8 <main+0x1da8>)
   8d70a:	4798      	blx	r3
   8d70c:	4603      	mov	r3, r0
   8d70e:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d710:	7bfb      	ldrb	r3, [r7, #15]
   8d712:	2b00      	cmp	r3, #0
   8d714:	d002      	beq.n	8d71c <main+0x1b1c>
   8d716:	4ba5      	ldr	r3, [pc, #660]	; (8d9ac <main+0x1dac>)
   8d718:	4798      	blx	r3
						break;
   8d71a:	e03a      	b.n	8d792 <main+0x1b92>
   8d71c:	e039      	b.n	8d792 <main+0x1b92>
// 						{
// 							//handle error
// 						}
// 						if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
// 						{
							Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8d71e:	4ba1      	ldr	r3, [pc, #644]	; (8d9a4 <main+0x1da4>)
   8d720:	781b      	ldrb	r3, [r3, #0]
   8d722:	4618      	mov	r0, r3
   8d724:	4ba4      	ldr	r3, [pc, #656]	; (8d9b8 <main+0x1db8>)
   8d726:	4798      	blx	r3
   8d728:	4603      	mov	r3, r0
   8d72a:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d72c:	7bfb      	ldrb	r3, [r7, #15]
   8d72e:	2b00      	cmp	r3, #0
   8d730:	d001      	beq.n	8d736 <main+0x1b36>
   8d732:	4b9e      	ldr	r3, [pc, #632]	; (8d9ac <main+0x1dac>)
   8d734:	4798      	blx	r3
//						else
						{
							//handle error
						}

						if(Cl_MacRetval == CL_OK)
   8d736:	7bfb      	ldrb	r3, [r7, #15]
   8d738:	2b00      	cmp	r3, #0
   8d73a:	d108      	bne.n	8d74e <main+0x1b4e>
						{
							Cl_MacState = MAC_DIALYSIS;
   8d73c:	4b9d      	ldr	r3, [pc, #628]	; (8d9b4 <main+0x1db4>)
   8d73e:	220f      	movs	r2, #15
   8d740:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
							ASSERT_ERROR(Cl_MacRetval);
   8d742:	7bfb      	ldrb	r3, [r7, #15]
   8d744:	2b00      	cmp	r3, #0
   8d746:	d002      	beq.n	8d74e <main+0x1b4e>
   8d748:	4b98      	ldr	r3, [pc, #608]	; (8d9ac <main+0x1dac>)
   8d74a:	4798      	blx	r3
						}
						break;
   8d74c:	e021      	b.n	8d792 <main+0x1b92>
   8d74e:	e020      	b.n	8d792 <main+0x1b92>
						
						case EVT_CONSOLE_COMMAND_RINSE_START:
						loopcountinsec = 0;
   8d750:	4b9a      	ldr	r3, [pc, #616]	; (8d9bc <main+0x1dbc>)
   8d752:	2200      	movs	r2, #0
   8d754:	601a      	str	r2, [r3, #0]
		//				ASSERT_ERROR(Cl_MacRetval);

		//				if(Cl_MacRetval == CL_OK)
		//				{
							
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8d756:	4b93      	ldr	r3, [pc, #588]	; (8d9a4 <main+0x1da4>)
   8d758:	781b      	ldrb	r3, [r3, #0]
   8d75a:	4618      	mov	r0, r3
   8d75c:	4b98      	ldr	r3, [pc, #608]	; (8d9c0 <main+0x1dc0>)
   8d75e:	4798      	blx	r3
   8d760:	4603      	mov	r3, r0
   8d762:	73fb      	strb	r3, [r7, #15]
							if(Cl_MacRetval != CL_REJECTED)
   8d764:	7bfb      	ldrb	r3, [r7, #15]
   8d766:	2b03      	cmp	r3, #3
   8d768:	d004      	beq.n	8d774 <main+0x1b74>
							{
								ASSERT_ERROR(Cl_MacRetval);
   8d76a:	7bfb      	ldrb	r3, [r7, #15]
   8d76c:	2b00      	cmp	r3, #0
   8d76e:	d001      	beq.n	8d774 <main+0x1b74>
   8d770:	4b8e      	ldr	r3, [pc, #568]	; (8d9ac <main+0x1dac>)
   8d772:	4798      	blx	r3
							}
							
		//				}
						if( Cl_MacRetval == CL_OK)
   8d774:	7bfb      	ldrb	r3, [r7, #15]
   8d776:	2b00      	cmp	r3, #0
   8d778:	d107      	bne.n	8d78a <main+0x1b8a>
						{
							Cl_MacState = MAC_RINSE;
   8d77a:	4b8e      	ldr	r3, [pc, #568]	; (8d9b4 <main+0x1db4>)
   8d77c:	2207      	movs	r2, #7
   8d77e:	701a      	strb	r2, [r3, #0]
						//	Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
							ASSERT_ERROR(Cl_MacRetval);
   8d780:	7bfb      	ldrb	r3, [r7, #15]
   8d782:	2b00      	cmp	r3, #0
   8d784:	d001      	beq.n	8d78a <main+0x1b8a>
   8d786:	4b89      	ldr	r3, [pc, #548]	; (8d9ac <main+0x1dac>)
   8d788:	4798      	blx	r3
						}
						if( Cl_MacRetval != CL_OK)
						{
							// Handle error
						}
						Cl_MacEvent = EVT_NULL;
   8d78a:	4b86      	ldr	r3, [pc, #536]	; (8d9a4 <main+0x1da4>)
   8d78c:	2200      	movs	r2, #0
   8d78e:	701a      	strb	r2, [r3, #0]
						break;
   8d790:	bf00      	nop

						
					}
					
					break;
   8d792:	f000 bc5b 	b.w	8e04c <main+0x244c>
					
					case MAC_POST_ISOUF_STANDBY:
					
					switch(Cl_MacEvent){
   8d796:	4b83      	ldr	r3, [pc, #524]	; (8d9a4 <main+0x1da4>)
   8d798:	781b      	ldrb	r3, [r3, #0]
   8d79a:	3b07      	subs	r3, #7
   8d79c:	2b58      	cmp	r3, #88	; 0x58
   8d79e:	f200 80ff 	bhi.w	8d9a0 <main+0x1da0>
   8d7a2:	a201      	add	r2, pc, #4	; (adr r2, 8d7a8 <main+0x1ba8>)
   8d7a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8d7a8:	0008d955 	.word	0x0008d955
   8d7ac:	0008d9a1 	.word	0x0008d9a1
   8d7b0:	0008d9a1 	.word	0x0008d9a1
   8d7b4:	0008d90d 	.word	0x0008d90d
   8d7b8:	0008d90d 	.word	0x0008d90d
   8d7bc:	0008d90d 	.word	0x0008d90d
   8d7c0:	0008d9a1 	.word	0x0008d9a1
   8d7c4:	0008d9a1 	.word	0x0008d9a1
   8d7c8:	0008d9a1 	.word	0x0008d9a1
   8d7cc:	0008d9a1 	.word	0x0008d9a1
   8d7d0:	0008d9a1 	.word	0x0008d9a1
   8d7d4:	0008d9a1 	.word	0x0008d9a1
   8d7d8:	0008d9a1 	.word	0x0008d9a1
   8d7dc:	0008d9a1 	.word	0x0008d9a1
   8d7e0:	0008d90d 	.word	0x0008d90d
   8d7e4:	0008d9a1 	.word	0x0008d9a1
   8d7e8:	0008d92d 	.word	0x0008d92d
   8d7ec:	0008d9a1 	.word	0x0008d9a1
   8d7f0:	0008d9a1 	.word	0x0008d9a1
   8d7f4:	0008d9a1 	.word	0x0008d9a1
   8d7f8:	0008d9a1 	.word	0x0008d9a1
   8d7fc:	0008d9a1 	.word	0x0008d9a1
   8d800:	0008d9a1 	.word	0x0008d9a1
   8d804:	0008d9a1 	.word	0x0008d9a1
   8d808:	0008d9a1 	.word	0x0008d9a1
   8d80c:	0008d9a1 	.word	0x0008d9a1
   8d810:	0008d9a1 	.word	0x0008d9a1
   8d814:	0008d9a1 	.word	0x0008d9a1
   8d818:	0008d9a1 	.word	0x0008d9a1
   8d81c:	0008d9a1 	.word	0x0008d9a1
   8d820:	0008d9a1 	.word	0x0008d9a1
   8d824:	0008d9a1 	.word	0x0008d9a1
   8d828:	0008d90d 	.word	0x0008d90d
   8d82c:	0008d90d 	.word	0x0008d90d
   8d830:	0008d90d 	.word	0x0008d90d
   8d834:	0008d9a1 	.word	0x0008d9a1
   8d838:	0008d9a1 	.word	0x0008d9a1
   8d83c:	0008d9a1 	.word	0x0008d9a1
   8d840:	0008d90d 	.word	0x0008d90d
   8d844:	0008d90d 	.word	0x0008d90d
   8d848:	0008d9a1 	.word	0x0008d9a1
   8d84c:	0008d9a1 	.word	0x0008d9a1
   8d850:	0008d9a1 	.word	0x0008d9a1
   8d854:	0008d9a1 	.word	0x0008d9a1
   8d858:	0008d9a1 	.word	0x0008d9a1
   8d85c:	0008d9a1 	.word	0x0008d9a1
   8d860:	0008d9a1 	.word	0x0008d9a1
   8d864:	0008d9a1 	.word	0x0008d9a1
   8d868:	0008d9a1 	.word	0x0008d9a1
   8d86c:	0008d90d 	.word	0x0008d90d
   8d870:	0008d9a1 	.word	0x0008d9a1
   8d874:	0008d90d 	.word	0x0008d90d
   8d878:	0008d90d 	.word	0x0008d90d
   8d87c:	0008d90d 	.word	0x0008d90d
   8d880:	0008d90d 	.word	0x0008d90d
   8d884:	0008d9a1 	.word	0x0008d9a1
   8d888:	0008d9a1 	.word	0x0008d9a1
   8d88c:	0008d9a1 	.word	0x0008d9a1
   8d890:	0008d9a1 	.word	0x0008d9a1
   8d894:	0008d9a1 	.word	0x0008d9a1
   8d898:	0008d9a1 	.word	0x0008d9a1
   8d89c:	0008d9a1 	.word	0x0008d9a1
   8d8a0:	0008d9a1 	.word	0x0008d9a1
   8d8a4:	0008d9a1 	.word	0x0008d9a1
   8d8a8:	0008d9a1 	.word	0x0008d9a1
   8d8ac:	0008d9a1 	.word	0x0008d9a1
   8d8b0:	0008d9a1 	.word	0x0008d9a1
   8d8b4:	0008d9a1 	.word	0x0008d9a1
   8d8b8:	0008d9a1 	.word	0x0008d9a1
   8d8bc:	0008d9a1 	.word	0x0008d9a1
   8d8c0:	0008d9a1 	.word	0x0008d9a1
   8d8c4:	0008d9a1 	.word	0x0008d9a1
   8d8c8:	0008d9a1 	.word	0x0008d9a1
   8d8cc:	0008d9a1 	.word	0x0008d9a1
   8d8d0:	0008d9a1 	.word	0x0008d9a1
   8d8d4:	0008d9a1 	.word	0x0008d9a1
   8d8d8:	0008d9a1 	.word	0x0008d9a1
   8d8dc:	0008d9a1 	.word	0x0008d9a1
   8d8e0:	0008d9a1 	.word	0x0008d9a1
   8d8e4:	0008d9a1 	.word	0x0008d9a1
   8d8e8:	0008d9a1 	.word	0x0008d9a1
   8d8ec:	0008d98b 	.word	0x0008d98b
   8d8f0:	0008d9a1 	.word	0x0008d9a1
   8d8f4:	0008d9a1 	.word	0x0008d9a1
   8d8f8:	0008d90d 	.word	0x0008d90d
   8d8fc:	0008d90d 	.word	0x0008d90d
   8d900:	0008d9a1 	.word	0x0008d9a1
   8d904:	0008d9a1 	.word	0x0008d9a1
   8d908:	0008d90d 	.word	0x0008d90d
						case EVT_CONSOLE_COMMAND_MUTE_ALARM:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
						//case EVT_CONSOLE_COMMAND_GET_DATA:
						//case EVT_CONSOLE_COMMAND_SET_DATA:
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d90c:	4b25      	ldr	r3, [pc, #148]	; (8d9a4 <main+0x1da4>)
   8d90e:	781b      	ldrb	r3, [r3, #0]
   8d910:	4618      	mov	r0, r3
   8d912:	4b25      	ldr	r3, [pc, #148]	; (8d9a8 <main+0x1da8>)
   8d914:	4798      	blx	r3
   8d916:	4603      	mov	r3, r0
   8d918:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d91a:	7bfb      	ldrb	r3, [r7, #15]
   8d91c:	2b00      	cmp	r3, #0
   8d91e:	d001      	beq.n	8d924 <main+0x1d24>
   8d920:	4b22      	ldr	r3, [pc, #136]	; (8d9ac <main+0x1dac>)
   8d922:	4798      	blx	r3
						if(Cl_MacRetval != CL_OK)
						{
							// handle error
						}
						
						Cl_MacEvent = EVT_NULL;
   8d924:	4b1f      	ldr	r3, [pc, #124]	; (8d9a4 <main+0x1da4>)
   8d926:	2200      	movs	r2, #0
   8d928:	701a      	strb	r2, [r3, #0]
						break;
   8d92a:	e03a      	b.n	8d9a2 <main+0x1da2>
						{
							//handle error
						}      */
					//	if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
					//	{
							Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8d92c:	4b1d      	ldr	r3, [pc, #116]	; (8d9a4 <main+0x1da4>)
   8d92e:	781b      	ldrb	r3, [r3, #0]
   8d930:	4618      	mov	r0, r3
   8d932:	4b21      	ldr	r3, [pc, #132]	; (8d9b8 <main+0x1db8>)
   8d934:	4798      	blx	r3
   8d936:	4603      	mov	r3, r0
   8d938:	73fb      	strb	r3, [r7, #15]
					//	else
					//	{
							//handle error
					//	}

						if(Cl_MacRetval == CL_OK)
   8d93a:	7bfb      	ldrb	r3, [r7, #15]
   8d93c:	2b00      	cmp	r3, #0
   8d93e:	d108      	bne.n	8d952 <main+0x1d52>
						{
							Cl_MacState = MAC_DIALYSIS;
   8d940:	4b1c      	ldr	r3, [pc, #112]	; (8d9b4 <main+0x1db4>)
   8d942:	220f      	movs	r2, #15
   8d944:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
							ASSERT_ERROR(Cl_MacRetval);
   8d946:	7bfb      	ldrb	r3, [r7, #15]
   8d948:	2b00      	cmp	r3, #0
   8d94a:	d002      	beq.n	8d952 <main+0x1d52>
   8d94c:	4b17      	ldr	r3, [pc, #92]	; (8d9ac <main+0x1dac>)
   8d94e:	4798      	blx	r3
						}
						break;
   8d950:	e027      	b.n	8d9a2 <main+0x1da2>
   8d952:	e026      	b.n	8d9a2 <main+0x1da2>
						case EVT_CONSOLE_COMMAND_RINSE_START:
						//Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
						//ASSERT_ERROR(Cl_MacRetval);
						//if(Cl_MacRetval == CL_OK)
						//{
							Cl_rinse_init();
   8d954:	4b1b      	ldr	r3, [pc, #108]	; (8d9c4 <main+0x1dc4>)
   8d956:	4798      	blx	r3
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8d958:	4b12      	ldr	r3, [pc, #72]	; (8d9a4 <main+0x1da4>)
   8d95a:	781b      	ldrb	r3, [r3, #0]
   8d95c:	4618      	mov	r0, r3
   8d95e:	4b18      	ldr	r3, [pc, #96]	; (8d9c0 <main+0x1dc0>)
   8d960:	4798      	blx	r3
   8d962:	4603      	mov	r3, r0
   8d964:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d966:	7bfb      	ldrb	r3, [r7, #15]
   8d968:	2b00      	cmp	r3, #0
   8d96a:	d001      	beq.n	8d970 <main+0x1d70>
   8d96c:	4b0f      	ldr	r3, [pc, #60]	; (8d9ac <main+0x1dac>)
   8d96e:	4798      	blx	r3
						//else
						//{
							//handle error
						//}
						
						if( Cl_MacRetval == CL_OK)
   8d970:	7bfb      	ldrb	r3, [r7, #15]
   8d972:	2b00      	cmp	r3, #0
   8d974:	d108      	bne.n	8d988 <main+0x1d88>
						{
							Cl_MacState = MAC_RINSE;
   8d976:	4b0f      	ldr	r3, [pc, #60]	; (8d9b4 <main+0x1db4>)
   8d978:	2207      	movs	r2, #7
   8d97a:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
							ASSERT_ERROR(Cl_MacRetval);
   8d97c:	7bfb      	ldrb	r3, [r7, #15]
   8d97e:	2b00      	cmp	r3, #0
   8d980:	d002      	beq.n	8d988 <main+0x1d88>
   8d982:	4b0a      	ldr	r3, [pc, #40]	; (8d9ac <main+0x1dac>)
   8d984:	4798      	blx	r3
							//Cl_MacState = MAC_POST_RINSE_STANDBY;
						}else
						{
							//handle error
						}
						break;
   8d986:	e00c      	b.n	8d9a2 <main+0x1da2>
   8d988:	e00b      	b.n	8d9a2 <main+0x1da2>
						
						case EVT_CONSOLE_COMMAND_ISOUF_START:
						
						Cl_MacState = MAC_ISOUF;
   8d98a:	4b0a      	ldr	r3, [pc, #40]	; (8d9b4 <main+0x1db4>)
   8d98c:	2214      	movs	r2, #20
   8d98e:	701a      	strb	r2, [r3, #0]
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d990:	4b04      	ldr	r3, [pc, #16]	; (8d9a4 <main+0x1da4>)
   8d992:	781b      	ldrb	r3, [r3, #0]
   8d994:	4618      	mov	r0, r3
   8d996:	4b04      	ldr	r3, [pc, #16]	; (8d9a8 <main+0x1da8>)
   8d998:	4798      	blx	r3
   8d99a:	4603      	mov	r3, r0
   8d99c:	73fb      	strb	r3, [r7, #15]
						
						
						break;
   8d99e:	e000      	b.n	8d9a2 <main+0x1da2>
						
						
						default: break;
   8d9a0:	bf00      	nop
					}
					break;
   8d9a2:	e354      	b.n	8e04e <main+0x244e>
   8d9a4:	20071b0b 	.word	0x20071b0b
   8d9a8:	00095781 	.word	0x00095781
   8d9ac:	00088b81 	.word	0x00088b81
   8d9b0:	000971f1 	.word	0x000971f1
   8d9b4:	20070730 	.word	0x20070730
   8d9b8:	000853ad 	.word	0x000853ad
   8d9bc:	20071b10 	.word	0x20071b10
   8d9c0:	000a3f11 	.word	0x000a3f11
   8d9c4:	000a5605 	.word	0x000a5605
					
					case MAC_DIALYSIS:
					switch ( Cl_MacEvent )
   8d9c8:	4b8b      	ldr	r3, [pc, #556]	; (8dbf8 <main+0x1ff8>)
   8d9ca:	781b      	ldrb	r3, [r3, #0]
   8d9cc:	3b0a      	subs	r3, #10
   8d9ce:	2b57      	cmp	r3, #87	; 0x57
   8d9d0:	f200 810f 	bhi.w	8dbf2 <main+0x1ff2>
   8d9d4:	a201      	add	r2, pc, #4	; (adr r2, 8d9dc <main+0x1ddc>)
   8d9d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8d9da:	bf00      	nop
   8d9dc:	0008db3d 	.word	0x0008db3d
   8d9e0:	0008db3d 	.word	0x0008db3d
   8d9e4:	0008db3d 	.word	0x0008db3d
   8d9e8:	0008dbf3 	.word	0x0008dbf3
   8d9ec:	0008dbf3 	.word	0x0008dbf3
   8d9f0:	0008dbf3 	.word	0x0008dbf3
   8d9f4:	0008dbf3 	.word	0x0008dbf3
   8d9f8:	0008dbf3 	.word	0x0008dbf3
   8d9fc:	0008dbf3 	.word	0x0008dbf3
   8da00:	0008dbf3 	.word	0x0008dbf3
   8da04:	0008dbf3 	.word	0x0008dbf3
   8da08:	0008db3d 	.word	0x0008db3d
   8da0c:	0008dbf3 	.word	0x0008dbf3
   8da10:	0008dbf3 	.word	0x0008dbf3
   8da14:	0008db5d 	.word	0x0008db5d
   8da18:	0008db3d 	.word	0x0008db3d
   8da1c:	0008db3d 	.word	0x0008db3d
   8da20:	0008db3d 	.word	0x0008db3d
   8da24:	0008dbf3 	.word	0x0008dbf3
   8da28:	0008dbf3 	.word	0x0008dbf3
   8da2c:	0008dbf3 	.word	0x0008dbf3
   8da30:	0008dbf3 	.word	0x0008dbf3
   8da34:	0008dbf3 	.word	0x0008dbf3
   8da38:	0008dbf3 	.word	0x0008dbf3
   8da3c:	0008dbf3 	.word	0x0008dbf3
   8da40:	0008dbf3 	.word	0x0008dbf3
   8da44:	0008dbf3 	.word	0x0008dbf3
   8da48:	0008dbf3 	.word	0x0008dbf3
   8da4c:	0008db3d 	.word	0x0008db3d
   8da50:	0008db3d 	.word	0x0008db3d
   8da54:	0008db3d 	.word	0x0008db3d
   8da58:	0008db3d 	.word	0x0008db3d
   8da5c:	0008dbf3 	.word	0x0008dbf3
   8da60:	0008dbf3 	.word	0x0008dbf3
   8da64:	0008dbf3 	.word	0x0008dbf3
   8da68:	0008db3d 	.word	0x0008db3d
   8da6c:	0008db3d 	.word	0x0008db3d
   8da70:	0008dbf3 	.word	0x0008dbf3
   8da74:	0008dbf3 	.word	0x0008dbf3
   8da78:	0008dbf3 	.word	0x0008dbf3
   8da7c:	0008dbf3 	.word	0x0008dbf3
   8da80:	0008dbf3 	.word	0x0008dbf3
   8da84:	0008dbf3 	.word	0x0008dbf3
   8da88:	0008dbf3 	.word	0x0008dbf3
   8da8c:	0008dbf3 	.word	0x0008dbf3
   8da90:	0008dbf3 	.word	0x0008dbf3
   8da94:	0008db3d 	.word	0x0008db3d
   8da98:	0008dbf3 	.word	0x0008dbf3
   8da9c:	0008db3d 	.word	0x0008db3d
   8daa0:	0008db3d 	.word	0x0008db3d
   8daa4:	0008db3d 	.word	0x0008db3d
   8daa8:	0008db3d 	.word	0x0008db3d
   8daac:	0008dbf3 	.word	0x0008dbf3
   8dab0:	0008dbf3 	.word	0x0008dbf3
   8dab4:	0008dbf3 	.word	0x0008dbf3
   8dab8:	0008dbf3 	.word	0x0008dbf3
   8dabc:	0008dbf3 	.word	0x0008dbf3
   8dac0:	0008dbf3 	.word	0x0008dbf3
   8dac4:	0008dbf3 	.word	0x0008dbf3
   8dac8:	0008dbf3 	.word	0x0008dbf3
   8dacc:	0008dbf3 	.word	0x0008dbf3
   8dad0:	0008dbf3 	.word	0x0008dbf3
   8dad4:	0008dbf3 	.word	0x0008dbf3
   8dad8:	0008dbf3 	.word	0x0008dbf3
   8dadc:	0008dbf3 	.word	0x0008dbf3
   8dae0:	0008dbf3 	.word	0x0008dbf3
   8dae4:	0008dbf3 	.word	0x0008dbf3
   8dae8:	0008dbf3 	.word	0x0008dbf3
   8daec:	0008dbf3 	.word	0x0008dbf3
   8daf0:	0008dbf3 	.word	0x0008dbf3
   8daf4:	0008dba5 	.word	0x0008dba5
   8daf8:	0008dbf3 	.word	0x0008dbf3
   8dafc:	0008dbf3 	.word	0x0008dbf3
   8db00:	0008dbf3 	.word	0x0008dbf3
   8db04:	0008dbf3 	.word	0x0008dbf3
   8db08:	0008dbf3 	.word	0x0008dbf3
   8db0c:	0008dbf3 	.word	0x0008dbf3
   8db10:	0008dbf3 	.word	0x0008dbf3
   8db14:	0008db79 	.word	0x0008db79
   8db18:	0008dbf3 	.word	0x0008dbf3
   8db1c:	0008dbf3 	.word	0x0008dbf3
   8db20:	0008db3d 	.word	0x0008db3d
   8db24:	0008db3d 	.word	0x0008db3d
   8db28:	0008dbf3 	.word	0x0008dbf3
   8db2c:	0008db8f 	.word	0x0008db8f
   8db30:	0008db3d 	.word	0x0008db3d
   8db34:	0008db3d 	.word	0x0008db3d
   8db38:	0008db3d 	.word	0x0008db3d
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
						case EVT_CONSOLE_COMMAND_DIALYSIS_ISOUF_ON:
						case EVT_CONSOLE_COMMAND_DIALYSIS_ISOUF_OFF:
					//	case EVT_CONSOLE_COMMAND_GET_DATA:
					//	case EVT_CONSOLE_COMMAND_SET_DATA:
							Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8db3c:	4b2e      	ldr	r3, [pc, #184]	; (8dbf8 <main+0x1ff8>)
   8db3e:	781b      	ldrb	r3, [r3, #0]
   8db40:	4618      	mov	r0, r3
   8db42:	4b2e      	ldr	r3, [pc, #184]	; (8dbfc <main+0x1ffc>)
   8db44:	4798      	blx	r3
   8db46:	4603      	mov	r3, r0
   8db48:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8db4a:	7bfb      	ldrb	r3, [r7, #15]
   8db4c:	2b00      	cmp	r3, #0
   8db4e:	d001      	beq.n	8db54 <main+0x1f54>
   8db50:	4b2b      	ldr	r3, [pc, #172]	; (8dc00 <main+0x2000>)
   8db52:	4798      	blx	r3
								if(Cl_MacRetval != CL_OK)
								{
									// handle error
								}
							
							Cl_MacEvent = EVT_NULL;
   8db54:	4b28      	ldr	r3, [pc, #160]	; (8dbf8 <main+0x1ff8>)
   8db56:	2200      	movs	r2, #0
   8db58:	701a      	strb	r2, [r3, #0]
						break;
   8db5a:	e04b      	b.n	8dbf4 <main+0x1ff4>
// 							{
// 								// handle error
// 							}
// 						break;
						case EVT_CONSOLE_COMMAND_DIALYSIS_STOP:
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8db5c:	4b26      	ldr	r3, [pc, #152]	; (8dbf8 <main+0x1ff8>)
   8db5e:	781b      	ldrb	r3, [r3, #0]
   8db60:	4618      	mov	r0, r3
   8db62:	4b26      	ldr	r3, [pc, #152]	; (8dbfc <main+0x1ffc>)
   8db64:	4798      	blx	r3
   8db66:	4603      	mov	r3, r0
   8db68:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8db6a:	7bfb      	ldrb	r3, [r7, #15]
   8db6c:	2b00      	cmp	r3, #0
   8db6e:	d002      	beq.n	8db76 <main+0x1f76>
   8db70:	4b23      	ldr	r3, [pc, #140]	; (8dc00 <main+0x2000>)
   8db72:	4798      	blx	r3
						break;
   8db74:	e03e      	b.n	8dbf4 <main+0x1ff4>
   8db76:	e03d      	b.n	8dbf4 <main+0x1ff4>
						break;
						#endif
						
						case EVT_CONSOLE_COMMAND_ISOUF_START:
						
						Cl_MacState = MAC_ISOUF;
   8db78:	4b22      	ldr	r3, [pc, #136]	; (8dc04 <main+0x2004>)
   8db7a:	2214      	movs	r2, #20
   8db7c:	701a      	strb	r2, [r3, #0]
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8db7e:	4b1e      	ldr	r3, [pc, #120]	; (8dbf8 <main+0x1ff8>)
   8db80:	781b      	ldrb	r3, [r3, #0]
   8db82:	4618      	mov	r0, r3
   8db84:	4b20      	ldr	r3, [pc, #128]	; (8dc08 <main+0x2008>)
   8db86:	4798      	blx	r3
   8db88:	4603      	mov	r3, r0
   8db8a:	73fb      	strb	r3, [r7, #15]
						
						
						break;
   8db8c:	e032      	b.n	8dbf4 <main+0x1ff4>
						
						
						case MACREQ_POST_DIALYSIS_ISOUF_REQ :
						Cl_MacState = MAC_ISOUF;
   8db8e:	4b1d      	ldr	r3, [pc, #116]	; (8dc04 <main+0x2004>)
   8db90:	2214      	movs	r2, #20
   8db92:	701a      	strb	r2, [r3, #0]
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8db94:	4b18      	ldr	r3, [pc, #96]	; (8dbf8 <main+0x1ff8>)
   8db96:	781b      	ldrb	r3, [r3, #0]
   8db98:	4618      	mov	r0, r3
   8db9a:	4b1b      	ldr	r3, [pc, #108]	; (8dc08 <main+0x2008>)
   8db9c:	4798      	blx	r3
   8db9e:	4603      	mov	r3, r0
   8dba0:	73fb      	strb	r3, [r7, #15]
						
						break;
   8dba2:	e027      	b.n	8dbf4 <main+0x1ff4>
							}
						break;
		*/
						case MACREQ_DIALYSIS_COMPLETED:
						
							Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8dba4:	4b14      	ldr	r3, [pc, #80]	; (8dbf8 <main+0x1ff8>)
   8dba6:	781b      	ldrb	r3, [r3, #0]
   8dba8:	4618      	mov	r0, r3
   8dbaa:	4b14      	ldr	r3, [pc, #80]	; (8dbfc <main+0x1ffc>)
   8dbac:	4798      	blx	r3
   8dbae:	4603      	mov	r3, r0
   8dbb0:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8dbb2:	7bfb      	ldrb	r3, [r7, #15]
   8dbb4:	2b00      	cmp	r3, #0
   8dbb6:	d001      	beq.n	8dbbc <main+0x1fbc>
   8dbb8:	4b11      	ldr	r3, [pc, #68]	; (8dc00 <main+0x2000>)
   8dbba:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8dbbc:	7bfb      	ldrb	r3, [r7, #15]
   8dbbe:	2b00      	cmp	r3, #0
   8dbc0:	d113      	bne.n	8dbea <main+0x1fea>
							{
							
								Cl_MacRetval = Cl_rinse_init();
   8dbc2:	4b12      	ldr	r3, [pc, #72]	; (8dc0c <main+0x200c>)
   8dbc4:	4798      	blx	r3
   8dbc6:	4603      	mov	r3, r0
   8dbc8:	73fb      	strb	r3, [r7, #15]
								Cl_MacRetval = Cl_stby_init();
   8dbca:	4b11      	ldr	r3, [pc, #68]	; (8dc10 <main+0x2010>)
   8dbcc:	4798      	blx	r3
   8dbce:	4603      	mov	r3, r0
   8dbd0:	73fb      	strb	r3, [r7, #15]
								Cl_MacRetval = Cl_dprep_init();
   8dbd2:	4b10      	ldr	r3, [pc, #64]	; (8dc14 <main+0x2014>)
   8dbd4:	4798      	blx	r3
   8dbd6:	4603      	mov	r3, r0
   8dbd8:	73fb      	strb	r3, [r7, #15]
								
								
								Cl_MacState = MAC_POST_DIALYSIS_STANDBY;
   8dbda:	4b0a      	ldr	r3, [pc, #40]	; (8dc04 <main+0x2004>)
   8dbdc:	2211      	movs	r2, #17
   8dbde:	701a      	strb	r2, [r3, #0]
							//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)Cl_MacState,1);
									ASSERT_ERROR(Cl_MacRetval);
   8dbe0:	7bfb      	ldrb	r3, [r7, #15]
   8dbe2:	2b00      	cmp	r3, #0
   8dbe4:	d001      	beq.n	8dbea <main+0x1fea>
   8dbe6:	4b06      	ldr	r3, [pc, #24]	; (8dc00 <main+0x2000>)
   8dbe8:	4798      	blx	r3
							}
							else
							{
								//handle error
							}
							Cl_MacEvent = EVT_NULL;
   8dbea:	4b03      	ldr	r3, [pc, #12]	; (8dbf8 <main+0x1ff8>)
   8dbec:	2200      	movs	r2, #0
   8dbee:	701a      	strb	r2, [r3, #0]
						break;
   8dbf0:	e000      	b.n	8dbf4 <main+0x1ff4>
						default: break;
   8dbf2:	bf00      	nop
					}
					break;
   8dbf4:	e22b      	b.n	8e04e <main+0x244e>
   8dbf6:	bf00      	nop
   8dbf8:	20071b0b 	.word	0x20071b0b
   8dbfc:	000853ad 	.word	0x000853ad
   8dc00:	00088b81 	.word	0x00088b81
   8dc04:	20070730 	.word	0x20070730
   8dc08:	00095781 	.word	0x00095781
   8dc0c:	000a5605 	.word	0x000a5605
   8dc10:	000a73d9 	.word	0x000a73d9
   8dc14:	0009fbc9 	.word	0x0009fbc9
					case MAC_SAFE_DIALYSIS:
					switch ( Cl_MacEvent )
   8dc18:	4bd8      	ldr	r3, [pc, #864]	; (8df7c <main+0x237c>)
   8dc1a:	781b      	ldrb	r3, [r3, #0]
   8dc1c:	3b07      	subs	r3, #7
   8dc1e:	2b55      	cmp	r3, #85	; 0x55
   8dc20:	f200 80f5 	bhi.w	8de0e <main+0x220e>
   8dc24:	a201      	add	r2, pc, #4	; (adr r2, 8dc2c <main+0x202c>)
   8dc26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8dc2a:	bf00      	nop
   8dc2c:	0008dd95 	.word	0x0008dd95
   8dc30:	0008de0f 	.word	0x0008de0f
   8dc34:	0008de0f 	.word	0x0008de0f
   8dc38:	0008dd85 	.word	0x0008dd85
   8dc3c:	0008dd85 	.word	0x0008dd85
   8dc40:	0008dd85 	.word	0x0008dd85
   8dc44:	0008de0f 	.word	0x0008de0f
   8dc48:	0008de0f 	.word	0x0008de0f
   8dc4c:	0008de0f 	.word	0x0008de0f
   8dc50:	0008de0f 	.word	0x0008de0f
   8dc54:	0008de0f 	.word	0x0008de0f
   8dc58:	0008de0f 	.word	0x0008de0f
   8dc5c:	0008de0f 	.word	0x0008de0f
   8dc60:	0008de0f 	.word	0x0008de0f
   8dc64:	0008de0f 	.word	0x0008de0f
   8dc68:	0008de0f 	.word	0x0008de0f
   8dc6c:	0008de0f 	.word	0x0008de0f
   8dc70:	0008de0f 	.word	0x0008de0f
   8dc74:	0008de0f 	.word	0x0008de0f
   8dc78:	0008dde9 	.word	0x0008dde9
   8dc7c:	0008dde9 	.word	0x0008dde9
   8dc80:	0008de0f 	.word	0x0008de0f
   8dc84:	0008de0f 	.word	0x0008de0f
   8dc88:	0008de0f 	.word	0x0008de0f
   8dc8c:	0008de0f 	.word	0x0008de0f
   8dc90:	0008de0f 	.word	0x0008de0f
   8dc94:	0008de0f 	.word	0x0008de0f
   8dc98:	0008de0f 	.word	0x0008de0f
   8dc9c:	0008de0f 	.word	0x0008de0f
   8dca0:	0008de0f 	.word	0x0008de0f
   8dca4:	0008de0f 	.word	0x0008de0f
   8dca8:	0008de0f 	.word	0x0008de0f
   8dcac:	0008dd85 	.word	0x0008dd85
   8dcb0:	0008dd85 	.word	0x0008dd85
   8dcb4:	0008de0f 	.word	0x0008de0f
   8dcb8:	0008de0f 	.word	0x0008de0f
   8dcbc:	0008de0f 	.word	0x0008de0f
   8dcc0:	0008de0f 	.word	0x0008de0f
   8dcc4:	0008de0f 	.word	0x0008de0f
   8dcc8:	0008de0f 	.word	0x0008de0f
   8dccc:	0008de0f 	.word	0x0008de0f
   8dcd0:	0008de0f 	.word	0x0008de0f
   8dcd4:	0008de0f 	.word	0x0008de0f
   8dcd8:	0008de0f 	.word	0x0008de0f
   8dcdc:	0008de0f 	.word	0x0008de0f
   8dce0:	0008de0f 	.word	0x0008de0f
   8dce4:	0008de0f 	.word	0x0008de0f
   8dce8:	0008de0f 	.word	0x0008de0f
   8dcec:	0008de0f 	.word	0x0008de0f
   8dcf0:	0008de0f 	.word	0x0008de0f
   8dcf4:	0008de0f 	.word	0x0008de0f
   8dcf8:	0008de0f 	.word	0x0008de0f
   8dcfc:	0008de0f 	.word	0x0008de0f
   8dd00:	0008de0f 	.word	0x0008de0f
   8dd04:	0008de0f 	.word	0x0008de0f
   8dd08:	0008de0f 	.word	0x0008de0f
   8dd0c:	0008de0f 	.word	0x0008de0f
   8dd10:	0008de0f 	.word	0x0008de0f
   8dd14:	0008de0f 	.word	0x0008de0f
   8dd18:	0008de0f 	.word	0x0008de0f
   8dd1c:	0008de0f 	.word	0x0008de0f
   8dd20:	0008de0f 	.word	0x0008de0f
   8dd24:	0008de0f 	.word	0x0008de0f
   8dd28:	0008de0f 	.word	0x0008de0f
   8dd2c:	0008de0f 	.word	0x0008de0f
   8dd30:	0008de0f 	.word	0x0008de0f
   8dd34:	0008de0f 	.word	0x0008de0f
   8dd38:	0008de0f 	.word	0x0008de0f
   8dd3c:	0008de0f 	.word	0x0008de0f
   8dd40:	0008de0f 	.word	0x0008de0f
   8dd44:	0008de0f 	.word	0x0008de0f
   8dd48:	0008de0f 	.word	0x0008de0f
   8dd4c:	0008de0f 	.word	0x0008de0f
   8dd50:	0008de0f 	.word	0x0008de0f
   8dd54:	0008de0f 	.word	0x0008de0f
   8dd58:	0008de0f 	.word	0x0008de0f
   8dd5c:	0008de0f 	.word	0x0008de0f
   8dd60:	0008de0f 	.word	0x0008de0f
   8dd64:	0008de0f 	.word	0x0008de0f
   8dd68:	0008de0f 	.word	0x0008de0f
   8dd6c:	0008de0f 	.word	0x0008de0f
   8dd70:	0008de0f 	.word	0x0008de0f
   8dd74:	0008de0f 	.word	0x0008de0f
   8dd78:	0008de0f 	.word	0x0008de0f
   8dd7c:	0008dd85 	.word	0x0008dd85
   8dd80:	0008dd85 	.word	0x0008dd85
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
						case EVT_CONSOLE_COMMAND_HEPARIN_START:
						case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
						Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8dd84:	4b7d      	ldr	r3, [pc, #500]	; (8df7c <main+0x237c>)
   8dd86:	781b      	ldrb	r3, [r3, #0]
   8dd88:	4618      	mov	r0, r3
   8dd8a:	4b7d      	ldr	r3, [pc, #500]	; (8df80 <main+0x2380>)
   8dd8c:	4798      	blx	r3
   8dd8e:	4603      	mov	r3, r0
   8dd90:	73fb      	strb	r3, [r7, #15]
						break;
   8dd92:	e03d      	b.n	8de10 <main+0x2210>
						case EVT_CONSOLE_COMMAND_RINSE_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8dd94:	4b79      	ldr	r3, [pc, #484]	; (8df7c <main+0x237c>)
   8dd96:	781b      	ldrb	r3, [r3, #0]
   8dd98:	4618      	mov	r0, r3
   8dd9a:	4b79      	ldr	r3, [pc, #484]	; (8df80 <main+0x2380>)
   8dd9c:	4798      	blx	r3
   8dd9e:	4603      	mov	r3, r0
   8dda0:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8dda2:	7bfb      	ldrb	r3, [r7, #15]
   8dda4:	2b00      	cmp	r3, #0
   8dda6:	d001      	beq.n	8ddac <main+0x21ac>
   8dda8:	4b76      	ldr	r3, [pc, #472]	; (8df84 <main+0x2384>)
   8ddaa:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8ddac:	7bfb      	ldrb	r3, [r7, #15]
   8ddae:	2b00      	cmp	r3, #0
   8ddb0:	d10b      	bne.n	8ddca <main+0x21ca>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);	
   8ddb2:	4b72      	ldr	r3, [pc, #456]	; (8df7c <main+0x237c>)
   8ddb4:	781b      	ldrb	r3, [r3, #0]
   8ddb6:	4618      	mov	r0, r3
   8ddb8:	4b73      	ldr	r3, [pc, #460]	; (8df88 <main+0x2388>)
   8ddba:	4798      	blx	r3
   8ddbc:	4603      	mov	r3, r0
   8ddbe:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8ddc0:	7bfb      	ldrb	r3, [r7, #15]
   8ddc2:	2b00      	cmp	r3, #0
   8ddc4:	d001      	beq.n	8ddca <main+0x21ca>
   8ddc6:	4b6f      	ldr	r3, [pc, #444]	; (8df84 <main+0x2384>)
   8ddc8:	4798      	blx	r3
							}
							else
							{
								//handle error
							}
							if( Cl_MacRetval == CL_OK)
   8ddca:	7bfb      	ldrb	r3, [r7, #15]
   8ddcc:	2b00      	cmp	r3, #0
   8ddce:	d107      	bne.n	8dde0 <main+0x21e0>
							{
								Cl_MacState = MAC_RINSE;
   8ddd0:	4b6e      	ldr	r3, [pc, #440]	; (8df8c <main+0x238c>)
   8ddd2:	2207      	movs	r2, #7
   8ddd4:	701a      	strb	r2, [r3, #0]
								//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)Cl_MacState,1);
									ASSERT_ERROR(Cl_MacRetval);
   8ddd6:	7bfb      	ldrb	r3, [r7, #15]
   8ddd8:	2b00      	cmp	r3, #0
   8ddda:	d001      	beq.n	8dde0 <main+0x21e0>
   8dddc:	4b69      	ldr	r3, [pc, #420]	; (8df84 <main+0x2384>)
   8ddde:	4798      	blx	r3
							}
							else
							{
								//handle error
							}
							Cl_MacEvent = EVT_NULL;
   8dde0:	4b66      	ldr	r3, [pc, #408]	; (8df7c <main+0x237c>)
   8dde2:	2200      	movs	r2, #0
   8dde4:	701a      	strb	r2, [r3, #0]
						break;
   8dde6:	e013      	b.n	8de10 <main+0x2210>
					//		Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
						//	Cl_MacEvent = EVT_NULL;
						//	break;
						case EVT_CONSOLE_COMMAND_BYPASS_ON:
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8dde8:	4b64      	ldr	r3, [pc, #400]	; (8df7c <main+0x237c>)
   8ddea:	781b      	ldrb	r3, [r3, #0]
   8ddec:	4618      	mov	r0, r3
   8ddee:	4b68      	ldr	r3, [pc, #416]	; (8df90 <main+0x2390>)
   8ddf0:	4798      	blx	r3
   8ddf2:	4603      	mov	r3, r0
   8ddf4:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8ddf6:	7bfb      	ldrb	r3, [r7, #15]
   8ddf8:	2b00      	cmp	r3, #0
   8ddfa:	d001      	beq.n	8de00 <main+0x2200>
   8ddfc:	4b61      	ldr	r3, [pc, #388]	; (8df84 <main+0x2384>)
   8ddfe:	4798      	blx	r3
								if( Cl_MacRetval == CL_OK)
   8de00:	7bfb      	ldrb	r3, [r7, #15]
   8de02:	2b00      	cmp	r3, #0
   8de04:	d102      	bne.n	8de0c <main+0x220c>
								{
									Cl_MacState = MAC_DIALYSIS;
   8de06:	4b61      	ldr	r3, [pc, #388]	; (8df8c <main+0x238c>)
   8de08:	220f      	movs	r2, #15
   8de0a:	701a      	strb	r2, [r3, #0]
								else
								{
									//handle error
								}
						
						break;
   8de0c:	e000      	b.n	8de10 <main+0x2210>
						{
							//handle error
						}
						break;
						#endif
						default: break;
   8de0e:	bf00      	nop
					}
					break;
   8de10:	e11d      	b.n	8e04e <main+0x244e>
					case MAC_POST_DIALYSIS_STANDBY:
					switch ( Cl_MacEvent )
   8de12:	4b5a      	ldr	r3, [pc, #360]	; (8df7c <main+0x237c>)
   8de14:	781b      	ldrb	r3, [r3, #0]
   8de16:	3b07      	subs	r3, #7
   8de18:	2b55      	cmp	r3, #85	; 0x55
   8de1a:	f200 810f 	bhi.w	8e03c <main+0x243c>
   8de1e:	a201      	add	r2, pc, #4	; (adr r2, 8de24 <main+0x2224>)
   8de20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8de24:	0008dfe9 	.word	0x0008dfe9
   8de28:	0008e03d 	.word	0x0008e03d
   8de2c:	0008e03d 	.word	0x0008e03d
   8de30:	0008df95 	.word	0x0008df95
   8de34:	0008df95 	.word	0x0008df95
   8de38:	0008df95 	.word	0x0008df95
   8de3c:	0008e03d 	.word	0x0008e03d
   8de40:	0008e03d 	.word	0x0008e03d
   8de44:	0008e03d 	.word	0x0008e03d
   8de48:	0008e03d 	.word	0x0008e03d
   8de4c:	0008e03d 	.word	0x0008e03d
   8de50:	0008e03d 	.word	0x0008e03d
   8de54:	0008e03d 	.word	0x0008e03d
   8de58:	0008e03d 	.word	0x0008e03d
   8de5c:	0008e03d 	.word	0x0008e03d
   8de60:	0008e03d 	.word	0x0008e03d
   8de64:	0008e03d 	.word	0x0008e03d
   8de68:	0008e03d 	.word	0x0008e03d
   8de6c:	0008e03d 	.word	0x0008e03d
   8de70:	0008df95 	.word	0x0008df95
   8de74:	0008df95 	.word	0x0008df95
   8de78:	0008e03d 	.word	0x0008e03d
   8de7c:	0008e03d 	.word	0x0008e03d
   8de80:	0008e03d 	.word	0x0008e03d
   8de84:	0008e03d 	.word	0x0008e03d
   8de88:	0008e03d 	.word	0x0008e03d
   8de8c:	0008e03d 	.word	0x0008e03d
   8de90:	0008e03d 	.word	0x0008e03d
   8de94:	0008e03d 	.word	0x0008e03d
   8de98:	0008e03d 	.word	0x0008e03d
   8de9c:	0008e03d 	.word	0x0008e03d
   8dea0:	0008e03d 	.word	0x0008e03d
   8dea4:	0008df95 	.word	0x0008df95
   8dea8:	0008df95 	.word	0x0008df95
   8deac:	0008e03d 	.word	0x0008e03d
   8deb0:	0008e03d 	.word	0x0008e03d
   8deb4:	0008e03d 	.word	0x0008e03d
   8deb8:	0008e03d 	.word	0x0008e03d
   8debc:	0008e03d 	.word	0x0008e03d
   8dec0:	0008e03d 	.word	0x0008e03d
   8dec4:	0008e03d 	.word	0x0008e03d
   8dec8:	0008e03d 	.word	0x0008e03d
   8decc:	0008e03d 	.word	0x0008e03d
   8ded0:	0008e03d 	.word	0x0008e03d
   8ded4:	0008e03d 	.word	0x0008e03d
   8ded8:	0008e03d 	.word	0x0008e03d
   8dedc:	0008e03d 	.word	0x0008e03d
   8dee0:	0008e03d 	.word	0x0008e03d
   8dee4:	0008e03d 	.word	0x0008e03d
   8dee8:	0008e03d 	.word	0x0008e03d
   8deec:	0008e03d 	.word	0x0008e03d
   8def0:	0008e03d 	.word	0x0008e03d
   8def4:	0008e03d 	.word	0x0008e03d
   8def8:	0008e03d 	.word	0x0008e03d
   8defc:	0008e03d 	.word	0x0008e03d
   8df00:	0008e03d 	.word	0x0008e03d
   8df04:	0008dfb1 	.word	0x0008dfb1
   8df08:	0008e03d 	.word	0x0008e03d
   8df0c:	0008e03d 	.word	0x0008e03d
   8df10:	0008e03d 	.word	0x0008e03d
   8df14:	0008e03d 	.word	0x0008e03d
   8df18:	0008e03d 	.word	0x0008e03d
   8df1c:	0008e03d 	.word	0x0008e03d
   8df20:	0008e03d 	.word	0x0008e03d
   8df24:	0008e03d 	.word	0x0008e03d
   8df28:	0008e03d 	.word	0x0008e03d
   8df2c:	0008e03d 	.word	0x0008e03d
   8df30:	0008e03d 	.word	0x0008e03d
   8df34:	0008e03d 	.word	0x0008e03d
   8df38:	0008e03d 	.word	0x0008e03d
   8df3c:	0008e03d 	.word	0x0008e03d
   8df40:	0008e03d 	.word	0x0008e03d
   8df44:	0008e03d 	.word	0x0008e03d
   8df48:	0008e03d 	.word	0x0008e03d
   8df4c:	0008e03d 	.word	0x0008e03d
   8df50:	0008e03d 	.word	0x0008e03d
   8df54:	0008e03d 	.word	0x0008e03d
   8df58:	0008e03d 	.word	0x0008e03d
   8df5c:	0008e03d 	.word	0x0008e03d
   8df60:	0008e03d 	.word	0x0008e03d
   8df64:	0008e03d 	.word	0x0008e03d
   8df68:	0008e03d 	.word	0x0008e03d
   8df6c:	0008e03d 	.word	0x0008e03d
   8df70:	0008e03d 	.word	0x0008e03d
   8df74:	0008df95 	.word	0x0008df95
   8df78:	0008df95 	.word	0x0008df95
   8df7c:	20071b0b 	.word	0x20071b0b
   8df80:	000a680d 	.word	0x000a680d
   8df84:	00088b81 	.word	0x00088b81
   8df88:	000a3f11 	.word	0x000a3f11
   8df8c:	20070730 	.word	0x20070730
   8df90:	000853ad 	.word	0x000853ad
						case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
						case EVT_CONSOLE_COMMAND_BYPASS_ON:
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8df94:	4b40      	ldr	r3, [pc, #256]	; (8e098 <main+0x2498>)
   8df96:	781b      	ldrb	r3, [r3, #0]
   8df98:	4618      	mov	r0, r3
   8df9a:	4b40      	ldr	r3, [pc, #256]	; (8e09c <main+0x249c>)
   8df9c:	4798      	blx	r3
   8df9e:	4603      	mov	r3, r0
   8dfa0:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8dfa2:	7bfb      	ldrb	r3, [r7, #15]
   8dfa4:	2b00      	cmp	r3, #0
   8dfa6:	d002      	beq.n	8dfae <main+0x23ae>
   8dfa8:	4b3d      	ldr	r3, [pc, #244]	; (8e0a0 <main+0x24a0>)
   8dfaa:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								//handle error
							}
						break;
   8dfac:	e047      	b.n	8e03e <main+0x243e>
   8dfae:	e046      	b.n	8e03e <main+0x243e>
						case EVT_CONSOLE_COMMAND_DISINF_START:
						
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8dfb0:	4b39      	ldr	r3, [pc, #228]	; (8e098 <main+0x2498>)
   8dfb2:	781b      	ldrb	r3, [r3, #0]
   8dfb4:	4618      	mov	r0, r3
   8dfb6:	4b39      	ldr	r3, [pc, #228]	; (8e09c <main+0x249c>)
   8dfb8:	4798      	blx	r3
   8dfba:	4603      	mov	r3, r0
   8dfbc:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8dfbe:	7bfb      	ldrb	r3, [r7, #15]
   8dfc0:	2b00      	cmp	r3, #0
   8dfc2:	d001      	beq.n	8dfc8 <main+0x23c8>
   8dfc4:	4b36      	ldr	r3, [pc, #216]	; (8e0a0 <main+0x24a0>)
   8dfc6:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								//handle error
							}
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8dfc8:	4b33      	ldr	r3, [pc, #204]	; (8e098 <main+0x2498>)
   8dfca:	781b      	ldrb	r3, [r3, #0]
   8dfcc:	4618      	mov	r0, r3
   8dfce:	4b35      	ldr	r3, [pc, #212]	; (8e0a4 <main+0x24a4>)
   8dfd0:	4798      	blx	r3
   8dfd2:	4603      	mov	r3, r0
   8dfd4:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8dfd6:	7bfb      	ldrb	r3, [r7, #15]
   8dfd8:	2b00      	cmp	r3, #0
   8dfda:	d001      	beq.n	8dfe0 <main+0x23e0>
   8dfdc:	4b30      	ldr	r3, [pc, #192]	; (8e0a0 <main+0x24a0>)
   8dfde:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								//handle error
							}
						
						Cl_MacState = MAC_DISINFECT;
   8dfe0:	4b31      	ldr	r3, [pc, #196]	; (8e0a8 <main+0x24a8>)
   8dfe2:	2208      	movs	r2, #8
   8dfe4:	701a      	strb	r2, [r3, #0]
						
						break;
   8dfe6:	e02a      	b.n	8e03e <main+0x243e>
					//	case EVT_CONSOLE_COMMAND_SET_DATA:
					//		Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
					//		Cl_MacEvent = EVT_NULL;
					//		break;
						case EVT_CONSOLE_COMMAND_RINSE_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8dfe8:	4b2b      	ldr	r3, [pc, #172]	; (8e098 <main+0x2498>)
   8dfea:	781b      	ldrb	r3, [r3, #0]
   8dfec:	4618      	mov	r0, r3
   8dfee:	4b2f      	ldr	r3, [pc, #188]	; (8e0ac <main+0x24ac>)
   8dff0:	4798      	blx	r3
   8dff2:	4603      	mov	r3, r0
   8dff4:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8dff6:	7bfb      	ldrb	r3, [r7, #15]
   8dff8:	2b00      	cmp	r3, #0
   8dffa:	d001      	beq.n	8e000 <main+0x2400>
   8dffc:	4b28      	ldr	r3, [pc, #160]	; (8e0a0 <main+0x24a0>)
   8dffe:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8e000:	7bfb      	ldrb	r3, [r7, #15]
   8e002:	2b00      	cmp	r3, #0
   8e004:	d10b      	bne.n	8e01e <main+0x241e>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8e006:	4b24      	ldr	r3, [pc, #144]	; (8e098 <main+0x2498>)
   8e008:	781b      	ldrb	r3, [r3, #0]
   8e00a:	4618      	mov	r0, r3
   8e00c:	4b28      	ldr	r3, [pc, #160]	; (8e0b0 <main+0x24b0>)
   8e00e:	4798      	blx	r3
   8e010:	4603      	mov	r3, r0
   8e012:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);	
   8e014:	7bfb      	ldrb	r3, [r7, #15]
   8e016:	2b00      	cmp	r3, #0
   8e018:	d001      	beq.n	8e01e <main+0x241e>
   8e01a:	4b21      	ldr	r3, [pc, #132]	; (8e0a0 <main+0x24a0>)
   8e01c:	4798      	blx	r3
							else
							{
								//handle error
							}
							
							if( Cl_MacRetval == CL_OK)
   8e01e:	7bfb      	ldrb	r3, [r7, #15]
   8e020:	2b00      	cmp	r3, #0
   8e022:	d107      	bne.n	8e034 <main+0x2434>
							{
								Cl_MacState = MAC_RINSE;
   8e024:	4b20      	ldr	r3, [pc, #128]	; (8e0a8 <main+0x24a8>)
   8e026:	2207      	movs	r2, #7
   8e028:	701a      	strb	r2, [r3, #0]
								//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
									ASSERT_ERROR(Cl_MacRetval);
   8e02a:	7bfb      	ldrb	r3, [r7, #15]
   8e02c:	2b00      	cmp	r3, #0
   8e02e:	d001      	beq.n	8e034 <main+0x2434>
   8e030:	4b1b      	ldr	r3, [pc, #108]	; (8e0a0 <main+0x24a0>)
   8e032:	4798      	blx	r3
								//Cl_MacState = MAC_POST_RINSE_STANDBY;
							}else
							{
								//handle error
							}
							Cl_MacEvent = EVT_NULL;
   8e034:	4b18      	ldr	r3, [pc, #96]	; (8e098 <main+0x2498>)
   8e036:	2200      	movs	r2, #0
   8e038:	701a      	strb	r2, [r3, #0]
						break;
   8e03a:	e000      	b.n	8e03e <main+0x243e>
						

						default: break;
   8e03c:	bf00      	nop
					}
					break;
   8e03e:	e006      	b.n	8e04e <main+0x244e>
					case MAC_SERVICE:
					switch ( Cl_MacEvent )
				
					{

						default: break;
   8e040:	bf00      	nop
					}
					break;
   8e042:	e004      	b.n	8e04e <main+0x244e>
					case MAC_STATE_MAX:
					switch ( Cl_MacEvent )
				
					{

						default: break;
   8e044:	bf00      	nop
					}
					break;
   8e046:	e002      	b.n	8e04e <main+0x244e>
					default :
					break;
   8e048:	bf00      	nop
   8e04a:	e000      	b.n	8e04e <main+0x244e>
						break;

						
					}
					
					break;
   8e04c:	bf00      	nop
				}
				

			
		
				Cl_MacRetval = Cl_Mac_ClearEvents();
   8e04e:	4b19      	ldr	r3, [pc, #100]	; (8e0b4 <main+0x24b4>)
   8e050:	4798      	blx	r3
   8e052:	4603      	mov	r3, r0
   8e054:	73fb      	strb	r3, [r7, #15]
				ASSERT_ERROR(Cl_MacRetval);
   8e056:	7bfb      	ldrb	r3, [r7, #15]
   8e058:	2b00      	cmp	r3, #0
   8e05a:	d001      	beq.n	8e060 <main+0x2460>
   8e05c:	4b10      	ldr	r3, [pc, #64]	; (8e0a0 <main+0x24a0>)
   8e05e:	4798      	blx	r3
			{
				// Handle error
			}
		// TODO :  check for ret val
		
		while((Cl_MacEventQueueBc.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue1.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue2.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue3.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue4.Cl_MacNewEventcount > 0))  // LOOP EVENT DISPATCH
   8e060:	4b15      	ldr	r3, [pc, #84]	; (8e0b8 <main+0x24b8>)
   8e062:	781b      	ldrb	r3, [r3, #0]
   8e064:	2b00      	cmp	r3, #0
   8e066:	f47d ae97 	bne.w	8bd98 <main+0x198>
   8e06a:	4b14      	ldr	r3, [pc, #80]	; (8e0bc <main+0x24bc>)
   8e06c:	781b      	ldrb	r3, [r3, #0]
   8e06e:	2b00      	cmp	r3, #0
   8e070:	f47d ae92 	bne.w	8bd98 <main+0x198>
   8e074:	4b12      	ldr	r3, [pc, #72]	; (8e0c0 <main+0x24c0>)
   8e076:	781b      	ldrb	r3, [r3, #0]
   8e078:	2b00      	cmp	r3, #0
   8e07a:	f47d ae8d 	bne.w	8bd98 <main+0x198>
   8e07e:	4b11      	ldr	r3, [pc, #68]	; (8e0c4 <main+0x24c4>)
   8e080:	781b      	ldrb	r3, [r3, #0]
   8e082:	2b00      	cmp	r3, #0
   8e084:	f47d ae88 	bne.w	8bd98 <main+0x198>
   8e088:	4b0f      	ldr	r3, [pc, #60]	; (8e0c8 <main+0x24c8>)
   8e08a:	781b      	ldrb	r3, [r3, #0]
   8e08c:	2b00      	cmp	r3, #0
   8e08e:	f47d ae83 	bne.w	8bd98 <main+0x198>
		
		}
		
		//sv_cntrl_resetyellowalarm();

	}
   8e092:	f7fd be4c 	b.w	8bd2e <main+0x12e>
   8e096:	bf00      	nop
   8e098:	20071b0b 	.word	0x20071b0b
   8e09c:	000853ad 	.word	0x000853ad
   8e0a0:	00088b81 	.word	0x00088b81
   8e0a4:	0009d9f1 	.word	0x0009d9f1
   8e0a8:	20070730 	.word	0x20070730
   8e0ac:	000a680d 	.word	0x000a680d
   8e0b0:	000a3f11 	.word	0x000a3f11
   8e0b4:	0008e665 	.word	0x0008e665
   8e0b8:	200726bc 	.word	0x200726bc
   8e0bc:	200724dc 	.word	0x200724dc
   8e0c0:	2007234c 	.word	0x2007234c
   8e0c4:	200725f8 	.word	0x200725f8
   8e0c8:	20072480 	.word	0x20072480

0008e0cc <Cl_MacInit>:
 * \return CL_OK on success.
 *
 * \Globals used : Cl_MacEventQueue1
 */
Cl_ReturnCodeType 	Cl_MacInit(void) 
{
   8e0cc:	b580      	push	{r7, lr}
   8e0ce:	b082      	sub	sp, #8
   8e0d0:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType Cl_MacRetval = CL_OK;
   8e0d2:	2300      	movs	r3, #0
   8e0d4:	71fb      	strb	r3, [r7, #7]
		
		queue_sequence_counter = 0;
   8e0d6:	4b28      	ldr	r3, [pc, #160]	; (8e178 <Cl_MacInit+0xac>)
   8e0d8:	2200      	movs	r2, #0
   8e0da:	701a      	strb	r2, [r3, #0]
		
		Cl_MacEventQueue1.Cl_MacEvent[0] =0;
   8e0dc:	4b27      	ldr	r3, [pc, #156]	; (8e17c <Cl_MacInit+0xb0>)
   8e0de:	2200      	movs	r2, #0
   8e0e0:	709a      	strb	r2, [r3, #2]
		Cl_MacEventQueue1.Cl_MacNewEvent = false;
   8e0e2:	4b26      	ldr	r3, [pc, #152]	; (8e17c <Cl_MacInit+0xb0>)
   8e0e4:	2200      	movs	r2, #0
   8e0e6:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueue1.Cl_MacNewEventcount = 0;
   8e0e8:	4b24      	ldr	r3, [pc, #144]	; (8e17c <Cl_MacInit+0xb0>)
   8e0ea:	2200      	movs	r2, #0
   8e0ec:	701a      	strb	r2, [r3, #0]
		
		Cl_MacEventQueue4.Cl_MacEvent[0] =0;
   8e0ee:	4b24      	ldr	r3, [pc, #144]	; (8e180 <Cl_MacInit+0xb4>)
   8e0f0:	2200      	movs	r2, #0
   8e0f2:	709a      	strb	r2, [r3, #2]
		Cl_MacEventQueue4.Cl_MacNewEvent = false;
   8e0f4:	4b22      	ldr	r3, [pc, #136]	; (8e180 <Cl_MacInit+0xb4>)
   8e0f6:	2200      	movs	r2, #0
   8e0f8:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueue4.Cl_MacNewEventcount = 0;
   8e0fa:	4b21      	ldr	r3, [pc, #132]	; (8e180 <Cl_MacInit+0xb4>)
   8e0fc:	2200      	movs	r2, #0
   8e0fe:	701a      	strb	r2, [r3, #0]
		
		Cl_MacEventQueueBc.Cl_MacEvent[0] =0;
   8e100:	4b20      	ldr	r3, [pc, #128]	; (8e184 <Cl_MacInit+0xb8>)
   8e102:	2200      	movs	r2, #0
   8e104:	709a      	strb	r2, [r3, #2]
		Cl_MacEventQueueBc.Cl_MacNewEvent = false;
   8e106:	4b1f      	ldr	r3, [pc, #124]	; (8e184 <Cl_MacInit+0xb8>)
   8e108:	2200      	movs	r2, #0
   8e10a:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueueBc.Cl_MacNewEventcount = 0;
   8e10c:	4b1d      	ldr	r3, [pc, #116]	; (8e184 <Cl_MacInit+0xb8>)
   8e10e:	2200      	movs	r2, #0
   8e110:	701a      	strb	r2, [r3, #0]
		
		
		Cl_Console_buffer.BufferSize = CONSOLE_BUFFER_SIZE;
   8e112:	4b1d      	ldr	r3, [pc, #116]	; (8e188 <Cl_MacInit+0xbc>)
   8e114:	2214      	movs	r2, #20
   8e116:	759a      	strb	r2, [r3, #22]
		Cl_Console_msgbuffer.BufferSize = CONSOLE_MSG_BUFFER_SIZE;
   8e118:	4b1c      	ldr	r3, [pc, #112]	; (8e18c <Cl_MacInit+0xc0>)
   8e11a:	2228      	movs	r2, #40	; 0x28
   8e11c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		Cl_Console_buffer1.BufferEmpty = true;
   8e120:	4b1b      	ldr	r3, [pc, #108]	; (8e190 <Cl_MacInit+0xc4>)
   8e122:	2201      	movs	r2, #1
   8e124:	771a      	strb	r2, [r3, #28]
		Cl_Console_buffer1.ConsoleDatabufferprocessed= false;
   8e126:	4b1a      	ldr	r3, [pc, #104]	; (8e190 <Cl_MacInit+0xc4>)
   8e128:	2200      	movs	r2, #0
   8e12a:	765a      	strb	r2, [r3, #25]
		Cl_Console_buffer1.ConsoleDatabufferReady=false;
   8e12c:	4b18      	ldr	r3, [pc, #96]	; (8e190 <Cl_MacInit+0xc4>)
   8e12e:	2200      	movs	r2, #0
   8e130:	761a      	strb	r2, [r3, #24]
		Cl_Console_buffer1.CurreltyActive=true;
   8e132:	4b17      	ldr	r3, [pc, #92]	; (8e190 <Cl_MacInit+0xc4>)
   8e134:	2201      	movs	r2, #1
   8e136:	769a      	strb	r2, [r3, #26]
		Cl_Console_buffer1.StartSequenceDetected=false;
   8e138:	4b15      	ldr	r3, [pc, #84]	; (8e190 <Cl_MacInit+0xc4>)
   8e13a:	2200      	movs	r2, #0
   8e13c:	76da      	strb	r2, [r3, #27]

		Cl_Console_buffer2.BufferEmpty = true;
   8e13e:	4b15      	ldr	r3, [pc, #84]	; (8e194 <Cl_MacInit+0xc8>)
   8e140:	2201      	movs	r2, #1
   8e142:	771a      	strb	r2, [r3, #28]
		Cl_Console_buffer2.ConsoleDatabufferprocessed= false;
   8e144:	4b13      	ldr	r3, [pc, #76]	; (8e194 <Cl_MacInit+0xc8>)
   8e146:	2200      	movs	r2, #0
   8e148:	765a      	strb	r2, [r3, #25]
		Cl_Console_buffer2.ConsoleDatabufferReady=false;
   8e14a:	4b12      	ldr	r3, [pc, #72]	; (8e194 <Cl_MacInit+0xc8>)
   8e14c:	2200      	movs	r2, #0
   8e14e:	761a      	strb	r2, [r3, #24]
		Cl_Console_buffer2.CurreltyActive=false;
   8e150:	4b10      	ldr	r3, [pc, #64]	; (8e194 <Cl_MacInit+0xc8>)
   8e152:	2200      	movs	r2, #0
   8e154:	769a      	strb	r2, [r3, #26]
		Cl_Console_buffer2.StartSequenceDetected=false;
   8e156:	4b0f      	ldr	r3, [pc, #60]	; (8e194 <Cl_MacInit+0xc8>)
   8e158:	2200      	movs	r2, #0
   8e15a:	76da      	strb	r2, [r3, #27]
		
		Cl_MacState =	MAC_INIT;
   8e15c:	4b0e      	ldr	r3, [pc, #56]	; (8e198 <Cl_MacInit+0xcc>)
   8e15e:	2202      	movs	r2, #2
   8e160:	701a      	strb	r2, [r3, #0]
		
		if( Cl_MacRetval != CL_OK)
		{
			//handle error
		}
		ASSERT_ERROR(Cl_MacRetval);
   8e162:	79fb      	ldrb	r3, [r7, #7]
   8e164:	2b00      	cmp	r3, #0
   8e166:	d001      	beq.n	8e16c <Cl_MacInit+0xa0>
   8e168:	4b0c      	ldr	r3, [pc, #48]	; (8e19c <Cl_MacInit+0xd0>)
   8e16a:	4798      	blx	r3
		return Cl_MacRetval;
   8e16c:	79fb      	ldrb	r3, [r7, #7]
}
   8e16e:	4618      	mov	r0, r3
   8e170:	3708      	adds	r7, #8
   8e172:	46bd      	mov	sp, r7
   8e174:	bd80      	pop	{r7, pc}
   8e176:	bf00      	nop
   8e178:	20071b0e 	.word	0x20071b0e
   8e17c:	200724dc 	.word	0x200724dc
   8e180:	20072480 	.word	0x20072480
   8e184:	200726bc 	.word	0x200726bc
   8e188:	2007259c 	.word	0x2007259c
   8e18c:	200723a8 	.word	0x200723a8
   8e190:	200725d8 	.word	0x200725d8
   8e194:	20072438 	.word	0x20072438
   8e198:	20070730 	.word	0x20070730
   8e19c:	00088b81 	.word	0x00088b81

0008e1a0 <Cl_App_init>:
 * \void function 
 * \return CL_OK on success.
 * \Globals used : 
 */
Cl_ReturnCodeType  Cl_App_init(void)
{
   8e1a0:	b580      	push	{r7, lr}
   8e1a2:	b082      	sub	sp, #8
   8e1a4:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType  Cl_RetValue = CL_ERROR;
   8e1a6:	2304      	movs	r3, #4
   8e1a8:	71fb      	strb	r3, [r7, #7]
	
	Cl_RetValue = Cl_Init_Alarms();
   8e1aa:	4b26      	ldr	r3, [pc, #152]	; (8e244 <Cl_App_init+0xa4>)
   8e1ac:	4798      	blx	r3
   8e1ae:	4603      	mov	r3, r0
   8e1b0:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8e1b2:	79fb      	ldrb	r3, [r7, #7]
   8e1b4:	2b00      	cmp	r3, #0
   8e1b6:	d001      	beq.n	8e1bc <Cl_App_init+0x1c>
   8e1b8:	4b23      	ldr	r3, [pc, #140]	; (8e248 <Cl_App_init+0xa8>)
   8e1ba:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_Console_init();
   8e1bc:	4b23      	ldr	r3, [pc, #140]	; (8e24c <Cl_App_init+0xac>)
   8e1be:	4798      	blx	r3
   8e1c0:	4603      	mov	r3, r0
   8e1c2:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8e1c4:	79fb      	ldrb	r3, [r7, #7]
   8e1c6:	2b00      	cmp	r3, #0
   8e1c8:	d001      	beq.n	8e1ce <Cl_App_init+0x2e>
   8e1ca:	4b1f      	ldr	r3, [pc, #124]	; (8e248 <Cl_App_init+0xa8>)
   8e1cc:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_disinf_init();
   8e1ce:	4b20      	ldr	r3, [pc, #128]	; (8e250 <Cl_App_init+0xb0>)
   8e1d0:	4798      	blx	r3
   8e1d2:	4603      	mov	r3, r0
   8e1d4:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8e1d6:	79fb      	ldrb	r3, [r7, #7]
   8e1d8:	2b00      	cmp	r3, #0
   8e1da:	d001      	beq.n	8e1e0 <Cl_App_init+0x40>
   8e1dc:	4b1a      	ldr	r3, [pc, #104]	; (8e248 <Cl_App_init+0xa8>)
   8e1de:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_dlsis_init();
   8e1e0:	4b1c      	ldr	r3, [pc, #112]	; (8e254 <Cl_App_init+0xb4>)
   8e1e2:	4798      	blx	r3
   8e1e4:	4603      	mov	r3, r0
   8e1e6:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8e1e8:	79fb      	ldrb	r3, [r7, #7]
   8e1ea:	2b00      	cmp	r3, #0
   8e1ec:	d001      	beq.n	8e1f2 <Cl_App_init+0x52>
   8e1ee:	4b16      	ldr	r3, [pc, #88]	; (8e248 <Cl_App_init+0xa8>)
   8e1f0:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_dprep_init(	);
   8e1f2:	4b19      	ldr	r3, [pc, #100]	; (8e258 <Cl_App_init+0xb8>)
   8e1f4:	4798      	blx	r3
   8e1f6:	4603      	mov	r3, r0
   8e1f8:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8e1fa:	79fb      	ldrb	r3, [r7, #7]
   8e1fc:	2b00      	cmp	r3, #0
   8e1fe:	d001      	beq.n	8e204 <Cl_App_init+0x64>
   8e200:	4b11      	ldr	r3, [pc, #68]	; (8e248 <Cl_App_init+0xa8>)
   8e202:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_rinse_init();
   8e204:	4b15      	ldr	r3, [pc, #84]	; (8e25c <Cl_App_init+0xbc>)
   8e206:	4798      	blx	r3
   8e208:	4603      	mov	r3, r0
   8e20a:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8e20c:	79fb      	ldrb	r3, [r7, #7]
   8e20e:	2b00      	cmp	r3, #0
   8e210:	d001      	beq.n	8e216 <Cl_App_init+0x76>
   8e212:	4b0d      	ldr	r3, [pc, #52]	; (8e248 <Cl_App_init+0xa8>)
   8e214:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_stby_init();
   8e216:	4b12      	ldr	r3, [pc, #72]	; (8e260 <Cl_App_init+0xc0>)
   8e218:	4798      	blx	r3
   8e21a:	4603      	mov	r3, r0
   8e21c:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8e21e:	79fb      	ldrb	r3, [r7, #7]
   8e220:	2b00      	cmp	r3, #0
   8e222:	d001      	beq.n	8e228 <Cl_App_init+0x88>
   8e224:	4b08      	ldr	r3, [pc, #32]	; (8e248 <Cl_App_init+0xa8>)
   8e226:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	
	Cl_RetValue = cl_datamanager_init();
   8e228:	4b0e      	ldr	r3, [pc, #56]	; (8e264 <Cl_App_init+0xc4>)
   8e22a:	4798      	blx	r3
   8e22c:	4603      	mov	r3, r0
   8e22e:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8e230:	79fb      	ldrb	r3, [r7, #7]
   8e232:	2b00      	cmp	r3, #0
   8e234:	d001      	beq.n	8e23a <Cl_App_init+0x9a>
   8e236:	4b04      	ldr	r3, [pc, #16]	; (8e248 <Cl_App_init+0xa8>)
   8e238:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	
	return CL_OK;
   8e23a:	2300      	movs	r3, #0
	
}
   8e23c:	4618      	mov	r0, r3
   8e23e:	3708      	adds	r7, #8
   8e240:	46bd      	mov	sp, r7
   8e242:	bd80      	pop	{r7, pc}
   8e244:	00080bc9 	.word	0x00080bc9
   8e248:	00088b81 	.word	0x00088b81
   8e24c:	0009d759 	.word	0x0009d759
   8e250:	0009d9e1 	.word	0x0009d9e1
   8e254:	00085291 	.word	0x00085291
   8e258:	0009fbc9 	.word	0x0009fbc9
   8e25c:	000a5605 	.word	0x000a5605
   8e260:	000a73d9 	.word	0x000a73d9
   8e264:	0008487d 	.word	0x0008487d

0008e268 <Cl_Mac_Configure>:
 * \return CL_OK on success.
 * \Globals used : 
 */
Cl_ReturnCodeType 	Cl_Mac_Configure(void)

{ 
   8e268:	b580      	push	{r7, lr}
   8e26a:	b082      	sub	sp, #8
   8e26c:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_Mac_retval = CL_ERROR;
   8e26e:	2304      	movs	r3, #4
   8e270:	71fb      	strb	r3, [r7, #7]
	
	/*printf("System Configuring Controls\n");*/
	ASSERT_ERROR(Cl_Mac_retval);
   8e272:	79fb      	ldrb	r3, [r7, #7]
   8e274:	2b00      	cmp	r3, #0
   8e276:	d001      	beq.n	8e27c <Cl_Mac_Configure+0x14>
   8e278:	4b03      	ldr	r3, [pc, #12]	; (8e288 <Cl_Mac_Configure+0x20>)
   8e27a:	4798      	blx	r3
			if( Cl_Mac_retval != CL_OK)
			{
				//handle error
			}
	
	return CL_OK;
   8e27c:	2300      	movs	r3, #0
}
   8e27e:	4618      	mov	r0, r3
   8e280:	3708      	adds	r7, #8
   8e282:	46bd      	mov	sp, r7
   8e284:	bd80      	pop	{r7, pc}
   8e286:	bf00      	nop
   8e288:	00088b81 	.word	0x00088b81

0008e28c <Cl_Mac_GetSystem_Status_Query>:
 * \return CL_OK on success.
 * \Globals used : 
 */

Cl_ReturnCodeType 	Cl_Mac_GetSystem_Status_Query(void)
{
   8e28c:	b580      	push	{r7, lr}
   8e28e:	b082      	sub	sp, #8
   8e290:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_MacRetval= CL_ERROR;
   8e292:	2304      	movs	r3, #4
   8e294:	71fb      	strb	r3, [r7, #7]
	Cl_MacRetval =	Cl_SysStat_System_Status_Query();
   8e296:	4b07      	ldr	r3, [pc, #28]	; (8e2b4 <Cl_Mac_GetSystem_Status_Query+0x28>)
   8e298:	4798      	blx	r3
   8e29a:	4603      	mov	r3, r0
   8e29c:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_MacRetval);
   8e29e:	79fb      	ldrb	r3, [r7, #7]
   8e2a0:	2b00      	cmp	r3, #0
   8e2a2:	d001      	beq.n	8e2a8 <Cl_Mac_GetSystem_Status_Query+0x1c>
   8e2a4:	4b04      	ldr	r3, [pc, #16]	; (8e2b8 <Cl_Mac_GetSystem_Status_Query+0x2c>)
   8e2a6:	4798      	blx	r3
				if( Cl_MacRetval != CL_OK)
				{
					//handle error
				}
	
	return CL_OK;
   8e2a8:	2300      	movs	r3, #0
}
   8e2aa:	4618      	mov	r0, r3
   8e2ac:	3708      	adds	r7, #8
   8e2ae:	46bd      	mov	sp, r7
   8e2b0:	bd80      	pop	{r7, pc}
   8e2b2:	bf00      	nop
   8e2b4:	0008f609 	.word	0x0008f609
   8e2b8:	00088b81 	.word	0x00088b81

0008e2bc <Cl_MacCheckforConsoleMessage>:
						}
		return CL_OK;
	
}
Cl_ReturnCodeType 	Cl_MacCheckforConsoleMessage(void)
{
   8e2bc:	b580      	push	{r7, lr}
   8e2be:	b082      	sub	sp, #8
   8e2c0:	af00      	add	r7, sp, #0
			Cl_ReturnCodeType Cl_MacRetval1;
			
			Cl_MacRetval1 = Cl_Console_Read_ConsoleMessage_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   8e2c2:	4b19      	ldr	r3, [pc, #100]	; (8e328 <Cl_MacCheckforConsoleMessage+0x6c>)
   8e2c4:	4798      	blx	r3
   8e2c6:	4603      	mov	r3, r0
   8e2c8:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_MacRetval1);
   8e2ca:	79fb      	ldrb	r3, [r7, #7]
   8e2cc:	2b00      	cmp	r3, #0
   8e2ce:	d001      	beq.n	8e2d4 <Cl_MacCheckforConsoleMessage+0x18>
   8e2d0:	4b16      	ldr	r3, [pc, #88]	; (8e32c <Cl_MacCheckforConsoleMessage+0x70>)
   8e2d2:	4798      	blx	r3
			if(Cl_MacRetval1 == CL_OK)
   8e2d4:	79fb      	ldrb	r3, [r7, #7]
   8e2d6:	2b00      	cmp	r3, #0
   8e2d8:	d108      	bne.n	8e2ec <Cl_MacCheckforConsoleMessage+0x30>
			{
		
				Cl_MacRetval1 = Cl_Console_Read_Message_Console();
   8e2da:	4b15      	ldr	r3, [pc, #84]	; (8e330 <Cl_MacCheckforConsoleMessage+0x74>)
   8e2dc:	4798      	blx	r3
   8e2de:	4603      	mov	r3, r0
   8e2e0:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_MacRetval1);
   8e2e2:	79fb      	ldrb	r3, [r7, #7]
   8e2e4:	2b00      	cmp	r3, #0
   8e2e6:	d001      	beq.n	8e2ec <Cl_MacCheckforConsoleMessage+0x30>
   8e2e8:	4b10      	ldr	r3, [pc, #64]	; (8e32c <Cl_MacCheckforConsoleMessage+0x70>)
   8e2ea:	4798      	blx	r3
				
			} else 
			
			{ // LOG ERROR
			}
			if(Cl_MacRetval1 == CL_OK)
   8e2ec:	79fb      	ldrb	r3, [r7, #7]
   8e2ee:	2b00      	cmp	r3, #0
   8e2f0:	d108      	bne.n	8e304 <Cl_MacCheckforConsoleMessage+0x48>
			{
			Cl_MacRetval1 = Cl_Console_Read_Message_Ready_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   8e2f2:	4b10      	ldr	r3, [pc, #64]	; (8e334 <Cl_MacCheckforConsoleMessage+0x78>)
   8e2f4:	4798      	blx	r3
   8e2f6:	4603      	mov	r3, r0
   8e2f8:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_MacRetval1);
   8e2fa:	79fb      	ldrb	r3, [r7, #7]
   8e2fc:	2b00      	cmp	r3, #0
   8e2fe:	d001      	beq.n	8e304 <Cl_MacCheckforConsoleMessage+0x48>
   8e300:	4b0a      	ldr	r3, [pc, #40]	; (8e32c <Cl_MacCheckforConsoleMessage+0x70>)
   8e302:	4798      	blx	r3
			} 
			else { //LOG ERROR
			}
			
			if(Cl_MacRetval1== CL_OK)
   8e304:	79fb      	ldrb	r3, [r7, #7]
   8e306:	2b00      	cmp	r3, #0
   8e308:	d108      	bne.n	8e31c <Cl_MacCheckforConsoleMessage+0x60>
			{
		
				Cl_MacRetval1 = Cl_Mac_Create_ConsoleEvent(); // Create tyhe event and put it in the queue
   8e30a:	4b0b      	ldr	r3, [pc, #44]	; (8e338 <Cl_MacCheckforConsoleMessage+0x7c>)
   8e30c:	4798      	blx	r3
   8e30e:	4603      	mov	r3, r0
   8e310:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_MacRetval1);
   8e312:	79fb      	ldrb	r3, [r7, #7]
   8e314:	2b00      	cmp	r3, #0
   8e316:	d001      	beq.n	8e31c <Cl_MacCheckforConsoleMessage+0x60>
   8e318:	4b04      	ldr	r3, [pc, #16]	; (8e32c <Cl_MacCheckforConsoleMessage+0x70>)
   8e31a:	4798      	blx	r3
				
			} 
			else {// LOG ERROR
			}
			
			return CL_OK; 
   8e31c:	2300      	movs	r3, #0
}
   8e31e:	4618      	mov	r0, r3
   8e320:	3708      	adds	r7, #8
   8e322:	46bd      	mov	sp, r7
   8e324:	bd80      	pop	{r7, pc}
   8e326:	bf00      	nop
   8e328:	0009ce39 	.word	0x0009ce39
   8e32c:	00088b81 	.word	0x00088b81
   8e330:	0009ce9d 	.word	0x0009ce9d
   8e334:	0009ce79 	.word	0x0009ce79
   8e338:	0009d005 	.word	0x0009d005

0008e33c <Cl_MacCreate_Macevent>:
 * \Globals used : 
 */


Cl_ReturnCodeType	Cl_MacCreate_Macevent(void)
{
   8e33c:	b480      	push	{r7}
   8e33e:	b083      	sub	sp, #12
   8e340:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_Mac_retVal = CL_OK;
   8e342:	2300      	movs	r3, #0
   8e344:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type tempcount;
	
	Cl_MacNewEvent  = false;
   8e346:	4ba1      	ldr	r3, [pc, #644]	; (8e5cc <Cl_MacCreate_Macevent+0x290>)
   8e348:	2200      	movs	r2, #0
   8e34a:	701a      	strb	r2, [r3, #0]
	Cl_MacEvent = EVT_NULL;
   8e34c:	4ba0      	ldr	r3, [pc, #640]	; (8e5d0 <Cl_MacCreate_Macevent+0x294>)
   8e34e:	2200      	movs	r2, #0
   8e350:	701a      	strb	r2, [r3, #0]
	
	queue_sequence_counter++;
   8e352:	4ba0      	ldr	r3, [pc, #640]	; (8e5d4 <Cl_MacCreate_Macevent+0x298>)
   8e354:	781b      	ldrb	r3, [r3, #0]
   8e356:	3301      	adds	r3, #1
   8e358:	b2da      	uxtb	r2, r3
   8e35a:	4b9e      	ldr	r3, [pc, #632]	; (8e5d4 <Cl_MacCreate_Macevent+0x298>)
   8e35c:	701a      	strb	r2, [r3, #0]
	if(queue_sequence_counter > 5){
   8e35e:	4b9d      	ldr	r3, [pc, #628]	; (8e5d4 <Cl_MacCreate_Macevent+0x298>)
   8e360:	781b      	ldrb	r3, [r3, #0]
   8e362:	2b05      	cmp	r3, #5
   8e364:	d902      	bls.n	8e36c <Cl_MacCreate_Macevent+0x30>
		
		queue_sequence_counter = 1;
   8e366:	4b9b      	ldr	r3, [pc, #620]	; (8e5d4 <Cl_MacCreate_Macevent+0x298>)
   8e368:	2201      	movs	r2, #1
   8e36a:	701a      	strb	r2, [r3, #0]
	}
	
	switch(queue_sequence_counter){
   8e36c:	4b99      	ldr	r3, [pc, #612]	; (8e5d4 <Cl_MacCreate_Macevent+0x298>)
   8e36e:	781b      	ldrb	r3, [r3, #0]
   8e370:	3b01      	subs	r3, #1
   8e372:	2b04      	cmp	r3, #4
   8e374:	f200 8169 	bhi.w	8e64a <Cl_MacCreate_Macevent+0x30e>
   8e378:	a201      	add	r2, pc, #4	; (adr r2, 8e380 <Cl_MacCreate_Macevent+0x44>)
   8e37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8e37e:	bf00      	nop
   8e380:	0008e395 	.word	0x0008e395
   8e384:	0008e417 	.word	0x0008e417
   8e388:	0008e499 	.word	0x0008e499
   8e38c:	0008e51b 	.word	0x0008e51b
   8e390:	0008e59d 	.word	0x0008e59d
		
		case 1 : // bc switching
		
		if ((Cl_MacEventQueueBc.Cl_MacNewEvent) && (Cl_MacEventQueueBc.Cl_MacNewEventcount > 0))
   8e394:	4b90      	ldr	r3, [pc, #576]	; (8e5d8 <Cl_MacCreate_Macevent+0x29c>)
   8e396:	785b      	ldrb	r3, [r3, #1]
   8e398:	2b00      	cmp	r3, #0
   8e39a:	d035      	beq.n	8e408 <Cl_MacCreate_Macevent+0xcc>
   8e39c:	4b8e      	ldr	r3, [pc, #568]	; (8e5d8 <Cl_MacCreate_Macevent+0x29c>)
   8e39e:	781b      	ldrb	r3, [r3, #0]
   8e3a0:	2b00      	cmp	r3, #0
   8e3a2:	d031      	beq.n	8e408 <Cl_MacCreate_Macevent+0xcc>
		{
			

			Cl_MacNewEvent = true;
   8e3a4:	4b89      	ldr	r3, [pc, #548]	; (8e5cc <Cl_MacCreate_Macevent+0x290>)
   8e3a6:	2201      	movs	r2, #1
   8e3a8:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = Cl_MacEventQueueBc.Cl_MacEvent[0];
   8e3aa:	4b8b      	ldr	r3, [pc, #556]	; (8e5d8 <Cl_MacCreate_Macevent+0x29c>)
   8e3ac:	789a      	ldrb	r2, [r3, #2]
   8e3ae:	4b88      	ldr	r3, [pc, #544]	; (8e5d0 <Cl_MacCreate_Macevent+0x294>)
   8e3b0:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueueBc.Cl_MacNewEventcount--;
   8e3b2:	4b89      	ldr	r3, [pc, #548]	; (8e5d8 <Cl_MacCreate_Macevent+0x29c>)
   8e3b4:	781b      	ldrb	r3, [r3, #0]
   8e3b6:	3b01      	subs	r3, #1
   8e3b8:	b2da      	uxtb	r2, r3
   8e3ba:	4b87      	ldr	r3, [pc, #540]	; (8e5d8 <Cl_MacCreate_Macevent+0x29c>)
   8e3bc:	701a      	strb	r2, [r3, #0]
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueueBc.Cl_MacNewEventcount;tempcount++ )
   8e3be:	2300      	movs	r3, #0
   8e3c0:	71fb      	strb	r3, [r7, #7]
   8e3c2:	e01a      	b.n	8e3fa <Cl_MacCreate_Macevent+0xbe>
			{
				if(tempcount < MAC_EVENT_COUNT_MAX)
   8e3c4:	79fb      	ldrb	r3, [r7, #7]
   8e3c6:	2b09      	cmp	r3, #9
   8e3c8:	d80a      	bhi.n	8e3e0 <Cl_MacCreate_Macevent+0xa4>
				{
					Cl_MacEventQueueBc.Cl_MacEvent[tempcount] = Cl_MacEventQueueBc.Cl_MacEvent[tempcount+1];
   8e3ca:	79fb      	ldrb	r3, [r7, #7]
   8e3cc:	79fa      	ldrb	r2, [r7, #7]
   8e3ce:	3201      	adds	r2, #1
   8e3d0:	4981      	ldr	r1, [pc, #516]	; (8e5d8 <Cl_MacCreate_Macevent+0x29c>)
   8e3d2:	440a      	add	r2, r1
   8e3d4:	7891      	ldrb	r1, [r2, #2]
   8e3d6:	4a80      	ldr	r2, [pc, #512]	; (8e5d8 <Cl_MacCreate_Macevent+0x29c>)
   8e3d8:	4413      	add	r3, r2
   8e3da:	460a      	mov	r2, r1
   8e3dc:	709a      	strb	r2, [r3, #2]
   8e3de:	e009      	b.n	8e3f4 <Cl_MacCreate_Macevent+0xb8>

					
				}
				else
				{
					if(tempcount >= MAC_EVENT_COUNT_MAX)
   8e3e0:	79fb      	ldrb	r3, [r7, #7]
   8e3e2:	2b09      	cmp	r3, #9
   8e3e4:	d905      	bls.n	8e3f2 <Cl_MacCreate_Macevent+0xb6>
					{
						Cl_MacEventQueueBc.Cl_MacEvent[tempcount] = EVT_NULL;
   8e3e6:	79fb      	ldrb	r3, [r7, #7]
   8e3e8:	4a7b      	ldr	r2, [pc, #492]	; (8e5d8 <Cl_MacCreate_Macevent+0x29c>)
   8e3ea:	4413      	add	r3, r2
   8e3ec:	2200      	movs	r2, #0
   8e3ee:	709a      	strb	r2, [r3, #2]
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8e3f0:	e008      	b.n	8e404 <Cl_MacCreate_Macevent+0xc8>
   8e3f2:	e007      	b.n	8e404 <Cl_MacCreate_Macevent+0xc8>

			Cl_MacNewEvent = true;
			Cl_MacEvent = Cl_MacEventQueueBc.Cl_MacEvent[0];
			Cl_MacEventQueueBc.Cl_MacNewEventcount--;
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueueBc.Cl_MacNewEventcount;tempcount++ )
   8e3f4:	79fb      	ldrb	r3, [r7, #7]
   8e3f6:	3301      	adds	r3, #1
   8e3f8:	71fb      	strb	r3, [r7, #7]
   8e3fa:	4b77      	ldr	r3, [pc, #476]	; (8e5d8 <Cl_MacCreate_Macevent+0x29c>)
   8e3fc:	781b      	ldrb	r3, [r3, #0]
   8e3fe:	79fa      	ldrb	r2, [r7, #7]
   8e400:	429a      	cmp	r2, r3
   8e402:	d3df      	bcc.n	8e3c4 <Cl_MacCreate_Macevent+0x88>
	
	switch(queue_sequence_counter){
		
		case 1 : // bc switching
		
		if ((Cl_MacEventQueueBc.Cl_MacNewEvent) && (Cl_MacEventQueueBc.Cl_MacNewEventcount > 0))
   8e404:	bf00      	nop
		else{
			Cl_MacNewEvent = false;
			Cl_MacEvent = EVT_NULL;
		}
		
		break;
   8e406:	e120      	b.n	8e64a <Cl_MacCreate_Macevent+0x30e>
			}
			
			
		}
		else{
			Cl_MacNewEvent = false;
   8e408:	4b70      	ldr	r3, [pc, #448]	; (8e5cc <Cl_MacCreate_Macevent+0x290>)
   8e40a:	2200      	movs	r2, #0
   8e40c:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = EVT_NULL;
   8e40e:	4b70      	ldr	r3, [pc, #448]	; (8e5d0 <Cl_MacCreate_Macevent+0x294>)
   8e410:	2200      	movs	r2, #0
   8e412:	701a      	strb	r2, [r3, #0]
		}
		
		break;
   8e414:	e119      	b.n	8e64a <Cl_MacCreate_Macevent+0x30e>
		
		case 2 : // serial data
		
		if ((Cl_MacEventQueue3.Cl_MacNewEvent) && (Cl_MacEventQueue3.Cl_MacNewEventcount > 0))
   8e416:	4b71      	ldr	r3, [pc, #452]	; (8e5dc <Cl_MacCreate_Macevent+0x2a0>)
   8e418:	785b      	ldrb	r3, [r3, #1]
   8e41a:	2b00      	cmp	r3, #0
   8e41c:	d035      	beq.n	8e48a <Cl_MacCreate_Macevent+0x14e>
   8e41e:	4b6f      	ldr	r3, [pc, #444]	; (8e5dc <Cl_MacCreate_Macevent+0x2a0>)
   8e420:	781b      	ldrb	r3, [r3, #0]
   8e422:	2b00      	cmp	r3, #0
   8e424:	d031      	beq.n	8e48a <Cl_MacCreate_Macevent+0x14e>
		{
	

			Cl_MacNewEvent = true;
   8e426:	4b69      	ldr	r3, [pc, #420]	; (8e5cc <Cl_MacCreate_Macevent+0x290>)
   8e428:	2201      	movs	r2, #1
   8e42a:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = Cl_MacEventQueue3.Cl_MacEvent[0];
   8e42c:	4b6b      	ldr	r3, [pc, #428]	; (8e5dc <Cl_MacCreate_Macevent+0x2a0>)
   8e42e:	789a      	ldrb	r2, [r3, #2]
   8e430:	4b67      	ldr	r3, [pc, #412]	; (8e5d0 <Cl_MacCreate_Macevent+0x294>)
   8e432:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue3.Cl_MacNewEventcount--;
   8e434:	4b69      	ldr	r3, [pc, #420]	; (8e5dc <Cl_MacCreate_Macevent+0x2a0>)
   8e436:	781b      	ldrb	r3, [r3, #0]
   8e438:	3b01      	subs	r3, #1
   8e43a:	b2da      	uxtb	r2, r3
   8e43c:	4b67      	ldr	r3, [pc, #412]	; (8e5dc <Cl_MacCreate_Macevent+0x2a0>)
   8e43e:	701a      	strb	r2, [r3, #0]
	
			for (tempcount =0 ;tempcount < Cl_MacEventQueue3.Cl_MacNewEventcount;tempcount++ )
   8e440:	2300      	movs	r3, #0
   8e442:	71fb      	strb	r3, [r7, #7]
   8e444:	e01a      	b.n	8e47c <Cl_MacCreate_Macevent+0x140>
			{
				if(tempcount < MAC_EVENT_COUNT_MAX)
   8e446:	79fb      	ldrb	r3, [r7, #7]
   8e448:	2b09      	cmp	r3, #9
   8e44a:	d80a      	bhi.n	8e462 <Cl_MacCreate_Macevent+0x126>
				{
					Cl_MacEventQueue3.Cl_MacEvent[tempcount] = Cl_MacEventQueue3.Cl_MacEvent[tempcount+1];
   8e44c:	79fb      	ldrb	r3, [r7, #7]
   8e44e:	79fa      	ldrb	r2, [r7, #7]
   8e450:	3201      	adds	r2, #1
   8e452:	4962      	ldr	r1, [pc, #392]	; (8e5dc <Cl_MacCreate_Macevent+0x2a0>)
   8e454:	440a      	add	r2, r1
   8e456:	7891      	ldrb	r1, [r2, #2]
   8e458:	4a60      	ldr	r2, [pc, #384]	; (8e5dc <Cl_MacCreate_Macevent+0x2a0>)
   8e45a:	4413      	add	r3, r2
   8e45c:	460a      	mov	r2, r1
   8e45e:	709a      	strb	r2, [r3, #2]
   8e460:	e009      	b.n	8e476 <Cl_MacCreate_Macevent+0x13a>

			
				}
				else
				{
					if(tempcount >= MAC_EVENT_COUNT_MAX)
   8e462:	79fb      	ldrb	r3, [r7, #7]
   8e464:	2b09      	cmp	r3, #9
   8e466:	d905      	bls.n	8e474 <Cl_MacCreate_Macevent+0x138>
					{
						Cl_MacEventQueue3.Cl_MacEvent[tempcount] = EVT_NULL;
   8e468:	79fb      	ldrb	r3, [r7, #7]
   8e46a:	4a5c      	ldr	r2, [pc, #368]	; (8e5dc <Cl_MacCreate_Macevent+0x2a0>)
   8e46c:	4413      	add	r3, r2
   8e46e:	2200      	movs	r2, #0
   8e470:	709a      	strb	r2, [r3, #2]
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8e472:	e008      	b.n	8e486 <Cl_MacCreate_Macevent+0x14a>
   8e474:	e007      	b.n	8e486 <Cl_MacCreate_Macevent+0x14a>

			Cl_MacNewEvent = true;
			Cl_MacEvent = Cl_MacEventQueue3.Cl_MacEvent[0];
			Cl_MacEventQueue3.Cl_MacNewEventcount--;
	
			for (tempcount =0 ;tempcount < Cl_MacEventQueue3.Cl_MacNewEventcount;tempcount++ )
   8e476:	79fb      	ldrb	r3, [r7, #7]
   8e478:	3301      	adds	r3, #1
   8e47a:	71fb      	strb	r3, [r7, #7]
   8e47c:	4b57      	ldr	r3, [pc, #348]	; (8e5dc <Cl_MacCreate_Macevent+0x2a0>)
   8e47e:	781b      	ldrb	r3, [r3, #0]
   8e480:	79fa      	ldrb	r2, [r7, #7]
   8e482:	429a      	cmp	r2, r3
   8e484:	d3df      	bcc.n	8e446 <Cl_MacCreate_Macevent+0x10a>
		
		break;
		
		case 2 : // serial data
		
		if ((Cl_MacEventQueue3.Cl_MacNewEvent) && (Cl_MacEventQueue3.Cl_MacNewEventcount > 0))
   8e486:	bf00      	nop
		}
	else{
		Cl_MacNewEvent = false;
			Cl_MacEvent = EVT_NULL;
	}
		break;
   8e488:	e0df      	b.n	8e64a <Cl_MacCreate_Macevent+0x30e>
			}
	
	
		}
	else{
		Cl_MacNewEvent = false;
   8e48a:	4b50      	ldr	r3, [pc, #320]	; (8e5cc <Cl_MacCreate_Macevent+0x290>)
   8e48c:	2200      	movs	r2, #0
   8e48e:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = EVT_NULL;
   8e490:	4b4f      	ldr	r3, [pc, #316]	; (8e5d0 <Cl_MacCreate_Macevent+0x294>)
   8e492:	2200      	movs	r2, #0
   8e494:	701a      	strb	r2, [r3, #0]
	}
		break;
   8e496:	e0d8      	b.n	8e64a <Cl_MacCreate_Macevent+0x30e>
		case 3: // alarm
		
		 if ((Cl_MacEventQueue4.Cl_MacNewEvent) && (Cl_MacEventQueue4.Cl_MacNewEventcount > 0))
   8e498:	4b51      	ldr	r3, [pc, #324]	; (8e5e0 <Cl_MacCreate_Macevent+0x2a4>)
   8e49a:	785b      	ldrb	r3, [r3, #1]
   8e49c:	2b00      	cmp	r3, #0
   8e49e:	d035      	beq.n	8e50c <Cl_MacCreate_Macevent+0x1d0>
   8e4a0:	4b4f      	ldr	r3, [pc, #316]	; (8e5e0 <Cl_MacCreate_Macevent+0x2a4>)
   8e4a2:	781b      	ldrb	r3, [r3, #0]
   8e4a4:	2b00      	cmp	r3, #0
   8e4a6:	d031      	beq.n	8e50c <Cl_MacCreate_Macevent+0x1d0>
		{
			

			Cl_MacNewEvent = true;
   8e4a8:	4b48      	ldr	r3, [pc, #288]	; (8e5cc <Cl_MacCreate_Macevent+0x290>)
   8e4aa:	2201      	movs	r2, #1
   8e4ac:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = Cl_MacEventQueue4.Cl_MacEvent[0];
   8e4ae:	4b4c      	ldr	r3, [pc, #304]	; (8e5e0 <Cl_MacCreate_Macevent+0x2a4>)
   8e4b0:	789a      	ldrb	r2, [r3, #2]
   8e4b2:	4b47      	ldr	r3, [pc, #284]	; (8e5d0 <Cl_MacCreate_Macevent+0x294>)
   8e4b4:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacNewEventcount--;
   8e4b6:	4b4a      	ldr	r3, [pc, #296]	; (8e5e0 <Cl_MacCreate_Macevent+0x2a4>)
   8e4b8:	781b      	ldrb	r3, [r3, #0]
   8e4ba:	3b01      	subs	r3, #1
   8e4bc:	b2da      	uxtb	r2, r3
   8e4be:	4b48      	ldr	r3, [pc, #288]	; (8e5e0 <Cl_MacCreate_Macevent+0x2a4>)
   8e4c0:	701a      	strb	r2, [r3, #0]
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueue4.Cl_MacNewEventcount;tempcount++ )
   8e4c2:	2300      	movs	r3, #0
   8e4c4:	71fb      	strb	r3, [r7, #7]
   8e4c6:	e01a      	b.n	8e4fe <Cl_MacCreate_Macevent+0x1c2>
			{
				if(tempcount < MAC_EVENT_COUNT_MAX)
   8e4c8:	79fb      	ldrb	r3, [r7, #7]
   8e4ca:	2b09      	cmp	r3, #9
   8e4cc:	d80a      	bhi.n	8e4e4 <Cl_MacCreate_Macevent+0x1a8>
				{
					Cl_MacEventQueue4.Cl_MacEvent[tempcount] = Cl_MacEventQueue4.Cl_MacEvent[tempcount+1];
   8e4ce:	79fb      	ldrb	r3, [r7, #7]
   8e4d0:	79fa      	ldrb	r2, [r7, #7]
   8e4d2:	3201      	adds	r2, #1
   8e4d4:	4942      	ldr	r1, [pc, #264]	; (8e5e0 <Cl_MacCreate_Macevent+0x2a4>)
   8e4d6:	440a      	add	r2, r1
   8e4d8:	7891      	ldrb	r1, [r2, #2]
   8e4da:	4a41      	ldr	r2, [pc, #260]	; (8e5e0 <Cl_MacCreate_Macevent+0x2a4>)
   8e4dc:	4413      	add	r3, r2
   8e4de:	460a      	mov	r2, r1
   8e4e0:	709a      	strb	r2, [r3, #2]
   8e4e2:	e009      	b.n	8e4f8 <Cl_MacCreate_Macevent+0x1bc>

					
				}
				else
				{
					if(tempcount >= MAC_EVENT_COUNT_MAX)
   8e4e4:	79fb      	ldrb	r3, [r7, #7]
   8e4e6:	2b09      	cmp	r3, #9
   8e4e8:	d905      	bls.n	8e4f6 <Cl_MacCreate_Macevent+0x1ba>
					{
						Cl_MacEventQueue4.Cl_MacEvent[tempcount] = EVT_NULL;
   8e4ea:	79fb      	ldrb	r3, [r7, #7]
   8e4ec:	4a3c      	ldr	r2, [pc, #240]	; (8e5e0 <Cl_MacCreate_Macevent+0x2a4>)
   8e4ee:	4413      	add	r3, r2
   8e4f0:	2200      	movs	r2, #0
   8e4f2:	709a      	strb	r2, [r3, #2]
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8e4f4:	e008      	b.n	8e508 <Cl_MacCreate_Macevent+0x1cc>
   8e4f6:	e007      	b.n	8e508 <Cl_MacCreate_Macevent+0x1cc>

			Cl_MacNewEvent = true;
			Cl_MacEvent = Cl_MacEventQueue4.Cl_MacEvent[0];
			Cl_MacEventQueue4.Cl_MacNewEventcount--;
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueue4.Cl_MacNewEventcount;tempcount++ )
   8e4f8:	79fb      	ldrb	r3, [r7, #7]
   8e4fa:	3301      	adds	r3, #1
   8e4fc:	71fb      	strb	r3, [r7, #7]
   8e4fe:	4b38      	ldr	r3, [pc, #224]	; (8e5e0 <Cl_MacCreate_Macevent+0x2a4>)
   8e500:	781b      	ldrb	r3, [r3, #0]
   8e502:	79fa      	ldrb	r2, [r7, #7]
   8e504:	429a      	cmp	r2, r3
   8e506:	d3df      	bcc.n	8e4c8 <Cl_MacCreate_Macevent+0x18c>
			Cl_MacEvent = EVT_NULL;
	}
		break;
		case 3: // alarm
		
		 if ((Cl_MacEventQueue4.Cl_MacNewEvent) && (Cl_MacEventQueue4.Cl_MacNewEventcount > 0))
   8e508:	bf00      	nop
		else{
		Cl_MacNewEvent = false;
			Cl_MacEvent = EVT_NULL;
	}
		
		break;
   8e50a:	e09e      	b.n	8e64a <Cl_MacCreate_Macevent+0x30e>
			}
			
			
		}
		else{
		Cl_MacNewEvent = false;
   8e50c:	4b2f      	ldr	r3, [pc, #188]	; (8e5cc <Cl_MacCreate_Macevent+0x290>)
   8e50e:	2200      	movs	r2, #0
   8e510:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = EVT_NULL;
   8e512:	4b2f      	ldr	r3, [pc, #188]	; (8e5d0 <Cl_MacCreate_Macevent+0x294>)
   8e514:	2200      	movs	r2, #0
   8e516:	701a      	strb	r2, [r3, #0]
	}
		
		break;
   8e518:	e097      	b.n	8e64a <Cl_MacCreate_Macevent+0x30e>
		case 4 : // internal state change
		 if ((Cl_MacEventQueue1.Cl_MacNewEvent) && (Cl_MacEventQueue1.Cl_MacNewEventcount > 0))
   8e51a:	4b32      	ldr	r3, [pc, #200]	; (8e5e4 <Cl_MacCreate_Macevent+0x2a8>)
   8e51c:	785b      	ldrb	r3, [r3, #1]
   8e51e:	2b00      	cmp	r3, #0
   8e520:	d035      	beq.n	8e58e <Cl_MacCreate_Macevent+0x252>
   8e522:	4b30      	ldr	r3, [pc, #192]	; (8e5e4 <Cl_MacCreate_Macevent+0x2a8>)
   8e524:	781b      	ldrb	r3, [r3, #0]
   8e526:	2b00      	cmp	r3, #0
   8e528:	d031      	beq.n	8e58e <Cl_MacCreate_Macevent+0x252>
			{
				

				Cl_MacNewEvent = true;
   8e52a:	4b28      	ldr	r3, [pc, #160]	; (8e5cc <Cl_MacCreate_Macevent+0x290>)
   8e52c:	2201      	movs	r2, #1
   8e52e:	701a      	strb	r2, [r3, #0]
				Cl_MacEvent = Cl_MacEventQueue1.Cl_MacEvent[0];
   8e530:	4b2c      	ldr	r3, [pc, #176]	; (8e5e4 <Cl_MacCreate_Macevent+0x2a8>)
   8e532:	789a      	ldrb	r2, [r3, #2]
   8e534:	4b26      	ldr	r3, [pc, #152]	; (8e5d0 <Cl_MacCreate_Macevent+0x294>)
   8e536:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue1.Cl_MacNewEventcount--;
   8e538:	4b2a      	ldr	r3, [pc, #168]	; (8e5e4 <Cl_MacCreate_Macevent+0x2a8>)
   8e53a:	781b      	ldrb	r3, [r3, #0]
   8e53c:	3b01      	subs	r3, #1
   8e53e:	b2da      	uxtb	r2, r3
   8e540:	4b28      	ldr	r3, [pc, #160]	; (8e5e4 <Cl_MacCreate_Macevent+0x2a8>)
   8e542:	701a      	strb	r2, [r3, #0]
				
				for (tempcount =0 ;tempcount < Cl_MacEventQueue1.Cl_MacNewEventcount;tempcount++ )
   8e544:	2300      	movs	r3, #0
   8e546:	71fb      	strb	r3, [r7, #7]
   8e548:	e01a      	b.n	8e580 <Cl_MacCreate_Macevent+0x244>
				{
					if(tempcount < MAC_EVENT_COUNT_MAX)
   8e54a:	79fb      	ldrb	r3, [r7, #7]
   8e54c:	2b09      	cmp	r3, #9
   8e54e:	d80a      	bhi.n	8e566 <Cl_MacCreate_Macevent+0x22a>
					{
						Cl_MacEventQueue1.Cl_MacEvent[tempcount] = Cl_MacEventQueue1.Cl_MacEvent[tempcount+1];
   8e550:	79fb      	ldrb	r3, [r7, #7]
   8e552:	79fa      	ldrb	r2, [r7, #7]
   8e554:	3201      	adds	r2, #1
   8e556:	4923      	ldr	r1, [pc, #140]	; (8e5e4 <Cl_MacCreate_Macevent+0x2a8>)
   8e558:	440a      	add	r2, r1
   8e55a:	7891      	ldrb	r1, [r2, #2]
   8e55c:	4a21      	ldr	r2, [pc, #132]	; (8e5e4 <Cl_MacCreate_Macevent+0x2a8>)
   8e55e:	4413      	add	r3, r2
   8e560:	460a      	mov	r2, r1
   8e562:	709a      	strb	r2, [r3, #2]
   8e564:	e009      	b.n	8e57a <Cl_MacCreate_Macevent+0x23e>

						
					}
					else
					{
						if(tempcount >= MAC_EVENT_COUNT_MAX)
   8e566:	79fb      	ldrb	r3, [r7, #7]
   8e568:	2b09      	cmp	r3, #9
   8e56a:	d905      	bls.n	8e578 <Cl_MacCreate_Macevent+0x23c>
						{
							Cl_MacEventQueue1.Cl_MacEvent[tempcount] = EVT_NULL;
   8e56c:	79fb      	ldrb	r3, [r7, #7]
   8e56e:	4a1d      	ldr	r2, [pc, #116]	; (8e5e4 <Cl_MacCreate_Macevent+0x2a8>)
   8e570:	4413      	add	r3, r2
   8e572:	2200      	movs	r2, #0
   8e574:	709a      	strb	r2, [r3, #2]
						}
						// handle error, raise alarm. system stops
						break; //handle exception
   8e576:	e008      	b.n	8e58a <Cl_MacCreate_Macevent+0x24e>
   8e578:	e007      	b.n	8e58a <Cl_MacCreate_Macevent+0x24e>

				Cl_MacNewEvent = true;
				Cl_MacEvent = Cl_MacEventQueue1.Cl_MacEvent[0];
				Cl_MacEventQueue1.Cl_MacNewEventcount--;
				
				for (tempcount =0 ;tempcount < Cl_MacEventQueue1.Cl_MacNewEventcount;tempcount++ )
   8e57a:	79fb      	ldrb	r3, [r7, #7]
   8e57c:	3301      	adds	r3, #1
   8e57e:	71fb      	strb	r3, [r7, #7]
   8e580:	4b18      	ldr	r3, [pc, #96]	; (8e5e4 <Cl_MacCreate_Macevent+0x2a8>)
   8e582:	781b      	ldrb	r3, [r3, #0]
   8e584:	79fa      	ldrb	r2, [r7, #7]
   8e586:	429a      	cmp	r2, r3
   8e588:	d3df      	bcc.n	8e54a <Cl_MacCreate_Macevent+0x20e>
			Cl_MacEvent = EVT_NULL;
	}
		
		break;
		case 4 : // internal state change
		 if ((Cl_MacEventQueue1.Cl_MacNewEvent) && (Cl_MacEventQueue1.Cl_MacNewEventcount > 0))
   8e58a:	bf00      	nop
			else{
		Cl_MacNewEvent = false;
			Cl_MacEvent = EVT_NULL;
	}
			
		break;
   8e58c:	e05d      	b.n	8e64a <Cl_MacCreate_Macevent+0x30e>
				}
				
				
			}
			else{
		Cl_MacNewEvent = false;
   8e58e:	4b0f      	ldr	r3, [pc, #60]	; (8e5cc <Cl_MacCreate_Macevent+0x290>)
   8e590:	2200      	movs	r2, #0
   8e592:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = EVT_NULL;
   8e594:	4b0e      	ldr	r3, [pc, #56]	; (8e5d0 <Cl_MacCreate_Macevent+0x294>)
   8e596:	2200      	movs	r2, #0
   8e598:	701a      	strb	r2, [r3, #0]
	}
			
		break;
   8e59a:	e056      	b.n	8e64a <Cl_MacCreate_Macevent+0x30e>
		case 5 : // timer events
		if ((Cl_MacEventQueue2.Cl_MacNewEvent) && (Cl_MacEventQueue2.Cl_MacNewEventcount > 0))
   8e59c:	4b12      	ldr	r3, [pc, #72]	; (8e5e8 <Cl_MacCreate_Macevent+0x2ac>)
   8e59e:	785b      	ldrb	r3, [r3, #1]
   8e5a0:	2b00      	cmp	r3, #0
   8e5a2:	d04b      	beq.n	8e63c <Cl_MacCreate_Macevent+0x300>
   8e5a4:	4b10      	ldr	r3, [pc, #64]	; (8e5e8 <Cl_MacCreate_Macevent+0x2ac>)
   8e5a6:	781b      	ldrb	r3, [r3, #0]
   8e5a8:	2b00      	cmp	r3, #0
   8e5aa:	d047      	beq.n	8e63c <Cl_MacCreate_Macevent+0x300>
		{
			

			Cl_MacNewEvent = true;
   8e5ac:	4b07      	ldr	r3, [pc, #28]	; (8e5cc <Cl_MacCreate_Macevent+0x290>)
   8e5ae:	2201      	movs	r2, #1
   8e5b0:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = Cl_MacEventQueue2.Cl_MacEvent[0];
   8e5b2:	4b0d      	ldr	r3, [pc, #52]	; (8e5e8 <Cl_MacCreate_Macevent+0x2ac>)
   8e5b4:	789a      	ldrb	r2, [r3, #2]
   8e5b6:	4b06      	ldr	r3, [pc, #24]	; (8e5d0 <Cl_MacCreate_Macevent+0x294>)
   8e5b8:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue2.Cl_MacNewEventcount--;
   8e5ba:	4b0b      	ldr	r3, [pc, #44]	; (8e5e8 <Cl_MacCreate_Macevent+0x2ac>)
   8e5bc:	781b      	ldrb	r3, [r3, #0]
   8e5be:	3b01      	subs	r3, #1
   8e5c0:	b2da      	uxtb	r2, r3
   8e5c2:	4b09      	ldr	r3, [pc, #36]	; (8e5e8 <Cl_MacCreate_Macevent+0x2ac>)
   8e5c4:	701a      	strb	r2, [r3, #0]
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueue2.Cl_MacNewEventcount;tempcount++ )
   8e5c6:	2300      	movs	r3, #0
   8e5c8:	71fb      	strb	r3, [r7, #7]
   8e5ca:	e02a      	b.n	8e622 <Cl_MacCreate_Macevent+0x2e6>
   8e5cc:	20071b0d 	.word	0x20071b0d
   8e5d0:	20071b0b 	.word	0x20071b0b
   8e5d4:	20071b0e 	.word	0x20071b0e
   8e5d8:	200726bc 	.word	0x200726bc
   8e5dc:	200725f8 	.word	0x200725f8
   8e5e0:	20072480 	.word	0x20072480
   8e5e4:	200724dc 	.word	0x200724dc
   8e5e8:	2007234c 	.word	0x2007234c
			{
				if(tempcount < MAC_EVENT_COUNT_MAX)
   8e5ec:	79fb      	ldrb	r3, [r7, #7]
   8e5ee:	2b09      	cmp	r3, #9
   8e5f0:	d80a      	bhi.n	8e608 <Cl_MacCreate_Macevent+0x2cc>
				{
					Cl_MacEventQueue2.Cl_MacEvent[tempcount] = Cl_MacEventQueue2.Cl_MacEvent[tempcount+1];
   8e5f2:	79fb      	ldrb	r3, [r7, #7]
   8e5f4:	79fa      	ldrb	r2, [r7, #7]
   8e5f6:	3201      	adds	r2, #1
   8e5f8:	4917      	ldr	r1, [pc, #92]	; (8e658 <Cl_MacCreate_Macevent+0x31c>)
   8e5fa:	440a      	add	r2, r1
   8e5fc:	7891      	ldrb	r1, [r2, #2]
   8e5fe:	4a16      	ldr	r2, [pc, #88]	; (8e658 <Cl_MacCreate_Macevent+0x31c>)
   8e600:	4413      	add	r3, r2
   8e602:	460a      	mov	r2, r1
   8e604:	709a      	strb	r2, [r3, #2]
   8e606:	e009      	b.n	8e61c <Cl_MacCreate_Macevent+0x2e0>

					
				}
				else
				{
					if(tempcount >= MAC_EVENT_COUNT_MAX)
   8e608:	79fb      	ldrb	r3, [r7, #7]
   8e60a:	2b09      	cmp	r3, #9
   8e60c:	d905      	bls.n	8e61a <Cl_MacCreate_Macevent+0x2de>
					{
						Cl_MacEventQueue2.Cl_MacEvent[tempcount] = EVT_NULL;
   8e60e:	79fb      	ldrb	r3, [r7, #7]
   8e610:	4a11      	ldr	r2, [pc, #68]	; (8e658 <Cl_MacCreate_Macevent+0x31c>)
   8e612:	4413      	add	r3, r2
   8e614:	2200      	movs	r2, #0
   8e616:	709a      	strb	r2, [r3, #2]
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8e618:	e008      	b.n	8e62c <Cl_MacCreate_Macevent+0x2f0>
   8e61a:	e007      	b.n	8e62c <Cl_MacCreate_Macevent+0x2f0>

			Cl_MacNewEvent = true;
			Cl_MacEvent = Cl_MacEventQueue2.Cl_MacEvent[0];
			Cl_MacEventQueue2.Cl_MacNewEventcount--;
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueue2.Cl_MacNewEventcount;tempcount++ )
   8e61c:	79fb      	ldrb	r3, [r7, #7]
   8e61e:	3301      	adds	r3, #1
   8e620:	71fb      	strb	r3, [r7, #7]
   8e622:	4b0d      	ldr	r3, [pc, #52]	; (8e658 <Cl_MacCreate_Macevent+0x31c>)
   8e624:	781b      	ldrb	r3, [r3, #0]
   8e626:	79fa      	ldrb	r2, [r7, #7]
   8e628:	429a      	cmp	r2, r3
   8e62a:	d3df      	bcc.n	8e5ec <Cl_MacCreate_Macevent+0x2b0>
					}
					// handle error, raise alarm. system stops
					break; //handle exception
				}
			}
			Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = 0;
   8e62c:	4b0a      	ldr	r3, [pc, #40]	; (8e658 <Cl_MacCreate_Macevent+0x31c>)
   8e62e:	781b      	ldrb	r3, [r3, #0]
   8e630:	461a      	mov	r2, r3
   8e632:	4b09      	ldr	r3, [pc, #36]	; (8e658 <Cl_MacCreate_Macevent+0x31c>)
   8e634:	4413      	add	r3, r2
   8e636:	2200      	movs	r2, #0
   8e638:	709a      	strb	r2, [r3, #2]
		{
			Cl_MacNewEvent = false;
			Cl_MacEvent = EVT_NULL;
			
		}
		break;
   8e63a:	e005      	b.n	8e648 <Cl_MacCreate_Macevent+0x30c>
			
			
		}
		else
		{
			Cl_MacNewEvent = false;
   8e63c:	4b07      	ldr	r3, [pc, #28]	; (8e65c <Cl_MacCreate_Macevent+0x320>)
   8e63e:	2200      	movs	r2, #0
   8e640:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = EVT_NULL;
   8e642:	4b07      	ldr	r3, [pc, #28]	; (8e660 <Cl_MacCreate_Macevent+0x324>)
   8e644:	2200      	movs	r2, #0
   8e646:	701a      	strb	r2, [r3, #0]
			
		}
		break;
   8e648:	bf00      	nop
			
			
		}
	*/

	return CL_OK;
   8e64a:	2300      	movs	r3, #0
}
   8e64c:	4618      	mov	r0, r3
   8e64e:	370c      	adds	r7, #12
   8e650:	46bd      	mov	sp, r7
   8e652:	f85d 7b04 	ldr.w	r7, [sp], #4
   8e656:	4770      	bx	lr
   8e658:	2007234c 	.word	0x2007234c
   8e65c:	20071b0d 	.word	0x20071b0d
   8e660:	20071b0b 	.word	0x20071b0b

0008e664 <Cl_Mac_ClearEvents>:
 * \return CL_OK on success.
 * \Globals used : 
 */

Cl_ReturnCodeType Cl_Mac_ClearEvents(void)
{
   8e664:	b480      	push	{r7}
   8e666:	af00      	add	r7, sp, #0
	
	return CL_OK;
   8e668:	2300      	movs	r3, #0
	
}
   8e66a:	4618      	mov	r0, r3
   8e66c:	46bd      	mov	sp, r7
   8e66e:	f85d 7b04 	ldr.w	r7, [sp], #4
   8e672:	4770      	bx	lr

0008e674 <Cl_Mac_CheckforAlarms>:
 */



Cl_ReturnCodeType Cl_Mac_CheckforAlarms(void)
{
   8e674:	b580      	push	{r7, lr}
   8e676:	b082      	sub	sp, #8
   8e678:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_mac_retval;
	
	Cl_mac_retval = Cl_alarms_scanforAlarms();
   8e67a:	4b07      	ldr	r3, [pc, #28]	; (8e698 <Cl_Mac_CheckforAlarms+0x24>)
   8e67c:	4798      	blx	r3
   8e67e:	4603      	mov	r3, r0
   8e680:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_mac_retval);
   8e682:	79fb      	ldrb	r3, [r7, #7]
   8e684:	2b00      	cmp	r3, #0
   8e686:	d001      	beq.n	8e68c <Cl_Mac_CheckforAlarms+0x18>
   8e688:	4b04      	ldr	r3, [pc, #16]	; (8e69c <Cl_Mac_CheckforAlarms+0x28>)
   8e68a:	4798      	blx	r3
	if(Cl_mac_retval != CL_OK)
	{
		// handle error
	}
	
		return CL_OK;
   8e68c:	2300      	movs	r3, #0
}
   8e68e:	4618      	mov	r0, r3
   8e690:	3708      	adds	r7, #8
   8e692:	46bd      	mov	sp, r7
   8e694:	bd80      	pop	{r7, pc}
   8e696:	bf00      	nop
   8e698:	00080f69 	.word	0x00080f69
   8e69c:	00088b81 	.word	0x00088b81

0008e6a0 <Cl_Mac_CheckforBCEvent>:

Cl_ReturnCodeType Cl_Mac_CheckforBCEvent(void)
{
   8e6a0:	b580      	push	{r7, lr}
   8e6a2:	b082      	sub	sp, #8
   8e6a4:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_mac_retval;
	
	Cl_mac_retval = Cl_CheckBcEvent();
   8e6a6:	4b07      	ldr	r3, [pc, #28]	; (8e6c4 <Cl_Mac_CheckforBCEvent+0x24>)
   8e6a8:	4798      	blx	r3
   8e6aa:	4603      	mov	r3, r0
   8e6ac:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_mac_retval);
   8e6ae:	79fb      	ldrb	r3, [r7, #7]
   8e6b0:	2b00      	cmp	r3, #0
   8e6b2:	d001      	beq.n	8e6b8 <Cl_Mac_CheckforBCEvent+0x18>
   8e6b4:	4b04      	ldr	r3, [pc, #16]	; (8e6c8 <Cl_Mac_CheckforBCEvent+0x28>)
   8e6b6:	4798      	blx	r3
	if(Cl_mac_retval != CL_OK)
	{
		// handle error
	}
	
	return CL_OK;
   8e6b8:	2300      	movs	r3, #0
}
   8e6ba:	4618      	mov	r0, r3
   8e6bc:	3708      	adds	r7, #8
   8e6be:	46bd      	mov	sp, r7
   8e6c0:	bd80      	pop	{r7, pc}
   8e6c2:	bf00      	nop
   8e6c4:	00082b69 	.word	0x00082b69
   8e6c8:	00088b81 	.word	0x00088b81

0008e6cc <self_test>:
   Cl_Uint8Type status[CL_SELFTEST_RESULT_MAXSTATE];

  
//	cl_selftest_transelateevent(Cl_Mac_EventsType, Cl_selftest_event*)
Cl_ReturnCodeType self_test(Cl_Mac_EventsType Cl_MacselftestEvent)
	{
   8e6cc:	b580      	push	{r7, lr}
   8e6ce:	b090      	sub	sp, #64	; 0x40
   8e6d0:	af00      	add	r7, sp, #0
   8e6d2:	4603      	mov	r3, r0
   8e6d4:	71fb      	strb	r3, [r7, #7]
	//	Cl_selftest_StatesType cl_selfteststate = CL_SELFTEST_STATE_IDLE;
		Cl_ReturnCodeType  Cl_selftestretcode = CL_OK;
   8e6d6:	2300      	movs	r3, #0
   8e6d8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		cl_ufpump_states uf_pumpstate ;       //= CL_UFP_STATE_IDLE;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   8e6dc:	2359      	movs	r3, #89	; 0x59
   8e6de:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	Cl_Uint8Type dataarray[4] = {0,0,0,0};
   8e6e2:	2300      	movs	r3, #0
   8e6e4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
   8e6e8:	2300      	movs	r3, #0
   8e6ea:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
   8e6ee:	2300      	movs	r3, #0
   8e6f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
   8e6f4:	2300      	movs	r3, #0
   8e6f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	Cl_Uint8Type data = 0;
   8e6fa:	2300      	movs	r3, #0
   8e6fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		 cl_selftest_event cl_selftest_event_type;
		Cl_Uint32Type uf_test_value=0, hp_test_value = 0, bp_test_value =0 ,bicarb_test_value = 0;
   8e700:	2300      	movs	r3, #0
   8e702:	63bb      	str	r3, [r7, #56]	; 0x38
   8e704:	2300      	movs	r3, #0
   8e706:	637b      	str	r3, [r7, #52]	; 0x34
   8e708:	2300      	movs	r3, #0
   8e70a:	633b      	str	r3, [r7, #48]	; 0x30
   8e70c:	2300      	movs	r3, #0
   8e70e:	62fb      	str	r3, [r7, #44]	; 0x2c
		Cl_selftestretcode= cl_selftest_translatemacevent(Cl_MacselftestEvent, &cl_selftest_event_type);
   8e710:	79fa      	ldrb	r2, [r7, #7]
   8e712:	f107 0326 	add.w	r3, r7, #38	; 0x26
   8e716:	4610      	mov	r0, r2
   8e718:	4619      	mov	r1, r3
   8e71a:	4bb7      	ldr	r3, [pc, #732]	; (8e9f8 <self_test+0x32c>)
   8e71c:	4798      	blx	r3
   8e71e:	4603      	mov	r3, r0
   8e720:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		
		  int16_t bf_b=0;
   8e724:	2300      	movs	r3, #0
   8e726:	84bb      	strh	r3, [r7, #36]	; 0x24
		  int16_t af_b=0;
   8e728:	2300      	movs	r3, #0
   8e72a:	847b      	strh	r3, [r7, #34]	; 0x22
		 
		int16_t apt_val= 0,vpt_val=0;
   8e72c:	2300      	movs	r3, #0
   8e72e:	843b      	strh	r3, [r7, #32]
   8e730:	2300      	movs	r3, #0
   8e732:	83fb      	strh	r3, [r7, #30]
		int16_t Ts1=0,Ts2=0,Ts3=0;
   8e734:	2300      	movs	r3, #0
   8e736:	83bb      	strh	r3, [r7, #28]
   8e738:	2300      	movs	r3, #0
   8e73a:	837b      	strh	r3, [r7, #26]
   8e73c:	2300      	movs	r3, #0
   8e73e:	833b      	strh	r3, [r7, #24]
	int16_t Ps_1 =0,Ps_2 =0,Ps_3= 0;
   8e740:	2300      	movs	r3, #0
   8e742:	82fb      	strh	r3, [r7, #22]
   8e744:	2300      	movs	r3, #0
   8e746:	82bb      	strh	r3, [r7, #20]
   8e748:	2300      	movs	r3, #0
   8e74a:	827b      	strh	r3, [r7, #18]
	int16_t cs1 =0,cs2 =0,cs3	= 0;
   8e74c:	2300      	movs	r3, #0
   8e74e:	823b      	strh	r3, [r7, #16]
   8e750:	2300      	movs	r3, #0
   8e752:	81fb      	strh	r3, [r7, #14]
   8e754:	2300      	movs	r3, #0
   8e756:	81bb      	strh	r3, [r7, #12]
	  uint16_t v_C=0;
   8e758:	2300      	movs	r3, #0
   8e75a:	817b      	strh	r3, [r7, #10]
switch(cl_selftest_event_type)
   8e75c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8e760:	3b02      	subs	r3, #2
   8e762:	2b0a      	cmp	r3, #10
   8e764:	d85c      	bhi.n	8e820 <self_test+0x154>
   8e766:	a201      	add	r2, pc, #4	; (adr r2, 8e76c <self_test+0xa0>)
   8e768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8e76c:	0008e7c9 	.word	0x0008e7c9
   8e770:	0008e821 	.word	0x0008e821
   8e774:	0008e821 	.word	0x0008e821
   8e778:	0008e821 	.word	0x0008e821
   8e77c:	0008e821 	.word	0x0008e821
   8e780:	0008e821 	.word	0x0008e821
   8e784:	0008e821 	.word	0x0008e821
   8e788:	0008e821 	.word	0x0008e821
   8e78c:	0008e799 	.word	0x0008e799
   8e790:	0008e7b1 	.word	0x0008e7b1
   8e794:	0008e819 	.word	0x0008e819
{
	case EVENT_selftest_ALARM_PAAS:	
	{
		status[CL_SELFTEST_RESULT_ALARM] = TEST_PAAS;
   8e798:	4b98      	ldr	r3, [pc, #608]	; (8e9fc <self_test+0x330>)
   8e79a:	2201      	movs	r2, #1
   8e79c:	705a      	strb	r2, [r3, #1]
		
			sv_cntrl_nobuzzer();
   8e79e:	4b98      	ldr	r3, [pc, #608]	; (8ea00 <self_test+0x334>)
   8e7a0:	4798      	blx	r3
			sv_cntrl_resetredalarm();
   8e7a2:	4b98      	ldr	r3, [pc, #608]	; (8ea04 <self_test+0x338>)
   8e7a4:	4798      	blx	r3
			sv_cntrl_resetyellowalarm();
   8e7a6:	4b98      	ldr	r3, [pc, #608]	; (8ea08 <self_test+0x33c>)
   8e7a8:	4798      	blx	r3
			sv_cntrl_resetgreenalarm();
   8e7aa:	4b98      	ldr	r3, [pc, #608]	; (8ea0c <self_test+0x340>)
   8e7ac:	4798      	blx	r3
// 			command = CON_TX_COMMAND_SELFTEST_START_ALARM;
// 			Cl_selftestretcode = Cl_SendDatatoconsole(command,&data,0);
			break;
   8e7ae:	e038      	b.n	8e822 <self_test+0x156>
	}
	
	case EVENT_selftest_ALARM_FAIL:	
	{
		status[CL_SELFTEST_RESULT_ALARM] = TEST_FAIL;
   8e7b0:	4b92      	ldr	r3, [pc, #584]	; (8e9fc <self_test+0x330>)
   8e7b2:	2200      	movs	r2, #0
   8e7b4:	705a      	strb	r2, [r3, #1]
		sv_cntrl_nobuzzer();
   8e7b6:	4b92      	ldr	r3, [pc, #584]	; (8ea00 <self_test+0x334>)
   8e7b8:	4798      	blx	r3
		sv_cntrl_resetredalarm();
   8e7ba:	4b92      	ldr	r3, [pc, #584]	; (8ea04 <self_test+0x338>)
   8e7bc:	4798      	blx	r3
		sv_cntrl_resetyellowalarm();
   8e7be:	4b92      	ldr	r3, [pc, #584]	; (8ea08 <self_test+0x33c>)
   8e7c0:	4798      	blx	r3
		sv_cntrl_resetgreenalarm();
   8e7c2:	4b92      	ldr	r3, [pc, #584]	; (8ea0c <self_test+0x340>)
   8e7c4:	4798      	blx	r3
		break;
   8e7c6:	e02c      	b.n	8e822 <self_test+0x156>
	}
	case EVENT_STOP_selftest:
	{
			
				 sv_cntrl_deactivatepump(UFPUMP);
   8e7c8:	2004      	movs	r0, #4
   8e7ca:	4b91      	ldr	r3, [pc, #580]	; (8ea10 <self_test+0x344>)
   8e7cc:	4798      	blx	r3
				 sv_cntrl_deactivatepump(HEPARINPUMP);
   8e7ce:	2005      	movs	r0, #5
   8e7d0:	4b8f      	ldr	r3, [pc, #572]	; (8ea10 <self_test+0x344>)
   8e7d2:	4798      	blx	r3
				 sv_cntrl_deactivatepump(BLOODPUMP);
   8e7d4:	2003      	movs	r0, #3
   8e7d6:	4b8e      	ldr	r3, [pc, #568]	; (8ea10 <self_test+0x344>)
   8e7d8:	4798      	blx	r3
				sv_prop_bicarb_selftest_f_b();
   8e7da:	4b8e      	ldr	r3, [pc, #568]	; (8ea14 <self_test+0x348>)
   8e7dc:	4798      	blx	r3
				status[CL_SELFTEST_RESULT_ALARM] = TEST_FAIL;
   8e7de:	4b87      	ldr	r3, [pc, #540]	; (8e9fc <self_test+0x330>)
   8e7e0:	2200      	movs	r2, #0
   8e7e2:	705a      	strb	r2, [r3, #1]
				sv_prop_stopopenfill();
   8e7e4:	4b8c      	ldr	r3, [pc, #560]	; (8ea18 <self_test+0x34c>)
   8e7e6:	4798      	blx	r3
		sv_cntrl_nobuzzer();
   8e7e8:	4b85      	ldr	r3, [pc, #532]	; (8ea00 <self_test+0x334>)
   8e7ea:	4798      	blx	r3
		sv_cntrl_resetredalarm();
   8e7ec:	4b85      	ldr	r3, [pc, #532]	; (8ea04 <self_test+0x338>)
   8e7ee:	4798      	blx	r3
		sv_cntrl_resetyellowalarm();
   8e7f0:	4b85      	ldr	r3, [pc, #532]	; (8ea08 <self_test+0x33c>)
   8e7f2:	4798      	blx	r3
		sv_cntrl_resetgreenalarm();
   8e7f4:	4b85      	ldr	r3, [pc, #532]	; (8ea0c <self_test+0x340>)
   8e7f6:	4798      	blx	r3
				
				command = CON_TX_COMMAND_SELFTEST_STOPPED;
   8e7f8:	2357      	movs	r3, #87	; 0x57
   8e7fa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				Cl_selftestretcode = Cl_SendDatatoconsole(command,&data,0);
   8e7fe:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
   8e802:	f107 0327 	add.w	r3, r7, #39	; 0x27
   8e806:	4610      	mov	r0, r2
   8e808:	4619      	mov	r1, r3
   8e80a:	2200      	movs	r2, #0
   8e80c:	4b83      	ldr	r3, [pc, #524]	; (8ea1c <self_test+0x350>)
   8e80e:	4798      	blx	r3
   8e810:	4603      	mov	r3, r0
   8e812:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				break;
   8e816:	e004      	b.n	8e822 <self_test+0x156>
			
	}
	case EVENT_selftest_SYNC_ACK:
	status[CL_SELFTEST_RESULT_SYNC] = 1;
   8e818:	4b78      	ldr	r3, [pc, #480]	; (8e9fc <self_test+0x330>)
   8e81a:	2201      	movs	r2, #1
   8e81c:	701a      	strb	r2, [r3, #0]
	break;
   8e81e:	e000      	b.n	8e822 <self_test+0x156>
	
	default:
	
	break;
   8e820:	bf00      	nop
}
	
	
	switch(cl_selfteststate)
   8e822:	4b7f      	ldr	r3, [pc, #508]	; (8ea20 <self_test+0x354>)
   8e824:	781b      	ldrb	r3, [r3, #0]
   8e826:	2b17      	cmp	r3, #23
   8e828:	f200 8621 	bhi.w	8f46e <self_test+0xda2>
   8e82c:	a201      	add	r2, pc, #4	; (adr r2, 8e834 <self_test+0x168>)
   8e82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8e832:	bf00      	nop
   8e834:	0008e895 	.word	0x0008e895
   8e838:	0008e8db 	.word	0x0008e8db
   8e83c:	0008e90f 	.word	0x0008e90f
   8e840:	0008f46f 	.word	0x0008f46f
   8e844:	0008e963 	.word	0x0008e963
   8e848:	0008e9e9 	.word	0x0008e9e9
   8e84c:	0008eacd 	.word	0x0008eacd
   8e850:	0008eb1b 	.word	0x0008eb1b
   8e854:	0008ebb1 	.word	0x0008ebb1
   8e858:	0008ebf5 	.word	0x0008ebf5
   8e85c:	0008ec79 	.word	0x0008ec79
   8e860:	0008ed47 	.word	0x0008ed47
   8e864:	0008eda3 	.word	0x0008eda3
   8e868:	0008ee11 	.word	0x0008ee11
   8e86c:	0008ee5d 	.word	0x0008ee5d
   8e870:	0008eedf 	.word	0x0008eedf
   8e874:	0008ef61 	.word	0x0008ef61
   8e878:	0008f0c5 	.word	0x0008f0c5
   8e87c:	0008f1f1 	.word	0x0008f1f1
   8e880:	0008f33d 	.word	0x0008f33d
   8e884:	0008f36f 	.word	0x0008f36f
   8e888:	0008f46f 	.word	0x0008f46f
   8e88c:	0008f46f 	.word	0x0008f46f
   8e890:	0008f3e1 	.word	0x0008f3e1
	{
		case CL_SELFTEST_STATE_IDLE:
		switch(cl_selftest_event_type)
   8e894:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8e898:	2b01      	cmp	r3, #1
   8e89a:	d000      	beq.n	8e89e <self_test+0x1d2>
// 				break;
// 			}
// 			
		
 			default:
 			break;
   8e89c:	e01b      	b.n	8e8d6 <self_test+0x20a>
		switch(cl_selftest_event_type)
		{
			case EVENT_start_selftest:
			{
				
				data = 0;
   8e89e:	2300      	movs	r3, #0
   8e8a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				startpropFlag = false;
   8e8a4:	4b5f      	ldr	r3, [pc, #380]	; (8ea24 <self_test+0x358>)
   8e8a6:	2200      	movs	r2, #0
   8e8a8:	701a      	strb	r2, [r3, #0]
				durcount = 0;
   8e8aa:	4b5f      	ldr	r3, [pc, #380]	; (8ea28 <self_test+0x35c>)
   8e8ac:	2200      	movs	r2, #0
   8e8ae:	601a      	str	r2, [r3, #0]
			
			command = CON_TX_COMMAND_SELFTEST_STARTED;
   8e8b0:	2352      	movs	r3, #82	; 0x52
   8e8b2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			Cl_selftestretcode = Cl_SendDatatoconsole(command,&data,0);
   8e8b6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
   8e8ba:	f107 0327 	add.w	r3, r7, #39	; 0x27
   8e8be:	4610      	mov	r0, r2
   8e8c0:	4619      	mov	r1, r3
   8e8c2:	2200      	movs	r2, #0
   8e8c4:	4b55      	ldr	r3, [pc, #340]	; (8ea1c <self_test+0x350>)
   8e8c6:	4798      	blx	r3
   8e8c8:	4603      	mov	r3, r0
   8e8ca:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			
		
			         cl_selfteststate = CL_SELFTEST_STATE_sync;
   8e8ce:	4b54      	ldr	r3, [pc, #336]	; (8ea20 <self_test+0x354>)
   8e8d0:	2201      	movs	r2, #1
   8e8d2:	701a      	strb	r2, [r3, #0]
					//cl_selfteststate = CL_SELFTEST_STATE_START_ALARMS_BUZZERS;
			break;
   8e8d4:	bf00      	nop
// 			
		
 			default:
 			break;
		}
		break;
   8e8d6:	f000 bdcb 	b.w	8f470 <self_test+0xda4>
		case CL_SELFTEST_STATE_sync:
			switch (cl_selftest_event_type)
   8e8da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8e8de:	2b06      	cmp	r3, #6
   8e8e0:	d000      	beq.n	8e8e4 <self_test+0x218>
						command = CON_TX_COMMAND_SELFTEST_SYNC_CHECK;
			Cl_selftestretcode = Cl_SendDatatoconsole(command,&data,0);
				cl_selfteststate = CL_SELFTEST_STATE_START_ALARMS_BUZZERS;
				break;
				default:
				break;
   8e8e2:	e012      	b.n	8e90a <self_test+0x23e>
		case CL_SELFTEST_STATE_sync:
			switch (cl_selftest_event_type)
			
			{
					case EVENT_selftest_TICK_100MS:
						command = CON_TX_COMMAND_SELFTEST_SYNC_CHECK;
   8e8e4:	2358      	movs	r3, #88	; 0x58
   8e8e6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			Cl_selftestretcode = Cl_SendDatatoconsole(command,&data,0);
   8e8ea:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
   8e8ee:	f107 0327 	add.w	r3, r7, #39	; 0x27
   8e8f2:	4610      	mov	r0, r2
   8e8f4:	4619      	mov	r1, r3
   8e8f6:	2200      	movs	r2, #0
   8e8f8:	4b48      	ldr	r3, [pc, #288]	; (8ea1c <self_test+0x350>)
   8e8fa:	4798      	blx	r3
   8e8fc:	4603      	mov	r3, r0
   8e8fe:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				cl_selfteststate = CL_SELFTEST_STATE_START_ALARMS_BUZZERS;
   8e902:	4b47      	ldr	r3, [pc, #284]	; (8ea20 <self_test+0x354>)
   8e904:	2202      	movs	r2, #2
   8e906:	701a      	strb	r2, [r3, #0]
				break;
   8e908:	bf00      	nop
				default:
				break;
			}
			break;
   8e90a:	f000 bdb1 	b.w	8f470 <self_test+0xda4>
		case CL_SELFTEST_STATE_START_ALARMS_BUZZERS:
	
			switch(cl_selftest_event_type)
   8e90e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8e912:	2b06      	cmp	r3, #6
   8e914:	d000      	beq.n	8e918 <self_test+0x24c>
				cl_selfteststate = CL_SELFTEST_STATE_START_UFPUMP;
				break;
				}
				break;
			default:
			break;
   8e916:	e022      	b.n	8e95e <self_test+0x292>
		case CL_SELFTEST_STATE_START_ALARMS_BUZZERS:
	
			switch(cl_selftest_event_type)
			{
				case EVENT_selftest_TICK_100MS:
				if(status[CL_SELFTEST_RESULT_ALARM] == TEST_PAAS)
   8e918:	4b38      	ldr	r3, [pc, #224]	; (8e9fc <self_test+0x330>)
   8e91a:	785b      	ldrb	r3, [r3, #1]
   8e91c:	2b01      	cmp	r3, #1
   8e91e:	d103      	bne.n	8e928 <self_test+0x25c>
				{
				cl_selfteststate = CL_SELFTEST_STATE_START_UFPUMP;
   8e920:	4b3f      	ldr	r3, [pc, #252]	; (8ea20 <self_test+0x354>)
   8e922:	2204      	movs	r2, #4
   8e924:	701a      	strb	r2, [r3, #0]
				break;
   8e926:	e01a      	b.n	8e95e <self_test+0x292>
				}
				else	
				{
					sv_cntrl_buzzer();
   8e928:	4b40      	ldr	r3, [pc, #256]	; (8ea2c <self_test+0x360>)
   8e92a:	4798      	blx	r3
				sv_cntrl_setredalarm();
   8e92c:	4b40      	ldr	r3, [pc, #256]	; (8ea30 <self_test+0x364>)
   8e92e:	4798      	blx	r3
				sv_cntrl_setyellowalarm();
   8e930:	4b40      	ldr	r3, [pc, #256]	; (8ea34 <self_test+0x368>)
   8e932:	4798      	blx	r3
				sv_cntrl_setgreenalarm();
   8e934:	4b40      	ldr	r3, [pc, #256]	; (8ea38 <self_test+0x36c>)
   8e936:	4798      	blx	r3
				
				command = CON_TX_COMMAND_SELFTEST_START_ALARM;
   8e938:	2356      	movs	r3, #86	; 0x56
   8e93a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				Cl_selftestretcode = Cl_SendDatatoconsole(command,&data,0);
   8e93e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
   8e942:	f107 0327 	add.w	r3, r7, #39	; 0x27
   8e946:	4610      	mov	r0, r2
   8e948:	4619      	mov	r1, r3
   8e94a:	2200      	movs	r2, #0
   8e94c:	4b33      	ldr	r3, [pc, #204]	; (8ea1c <self_test+0x350>)
   8e94e:	4798      	blx	r3
   8e950:	4603      	mov	r3, r0
   8e952:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				cl_selfteststate = CL_SELFTEST_STATE_START_UFPUMP;
   8e956:	4b32      	ldr	r3, [pc, #200]	; (8ea20 <self_test+0x354>)
   8e958:	2204      	movs	r2, #4
   8e95a:	701a      	strb	r2, [r3, #0]
				break;
   8e95c:	bf00      	nop
				}
				break;
			default:
			break;
		}
		break;
   8e95e:	f000 bd87 	b.w	8f470 <self_test+0xda4>
// 			break;
		
		
		
		case CL_SELFTEST_STATE_START_UFPUMP:
		switch(cl_selftest_event_type)
   8e962:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8e966:	2b06      	cmp	r3, #6
   8e968:	d000      	beq.n	8e96c <self_test+0x2a0>
// 				Cl_selftestretcode = Cl_SendDatatoconsole(command,&data,0);
// 				break;
// 			//}
// 			
			default:
			break;
   8e96a:	e03b      	b.n	8e9e4 <self_test+0x318>
		case CL_SELFTEST_STATE_START_UFPUMP:
		switch(cl_selftest_event_type)
		{ 
			
			case EVENT_selftest_TICK_100MS:
			if(status[CL_SELFTEST_RESULT_UFPUMP] == TEST_PAAS)   
   8e96c:	4b23      	ldr	r3, [pc, #140]	; (8e9fc <self_test+0x330>)
   8e96e:	789b      	ldrb	r3, [r3, #2]
   8e970:	2b01      	cmp	r3, #1
   8e972:	d103      	bne.n	8e97c <self_test+0x2b0>
			{
				cl_selfteststate = CL_SELFTEST_STATE_START_HPPUMP;
   8e974:	4b2a      	ldr	r3, [pc, #168]	; (8ea20 <self_test+0x354>)
   8e976:	2206      	movs	r2, #6
   8e978:	701a      	strb	r2, [r3, #0]
				break;
   8e97a:	e033      	b.n	8e9e4 <self_test+0x318>
			
			else
			{
				//sv_cntrl_setpumpspeed(UFPUMP,1000);
				
			Cl_selftestretcode =  sv_cntrl_activatepump(UFPUMP);
   8e97c:	2004      	movs	r0, #4
   8e97e:	4b2f      	ldr	r3, [pc, #188]	; (8ea3c <self_test+0x370>)
   8e980:	4798      	blx	r3
   8e982:	4603      	mov	r3, r0
   8e984:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			sv_cntrl_setpumpspeed(UFPUMP,12000);
   8e988:	2004      	movs	r0, #4
   8e98a:	f642 61e0 	movw	r1, #12000	; 0x2ee0
   8e98e:	4b2c      	ldr	r3, [pc, #176]	; (8ea40 <self_test+0x374>)
   8e990:	4798      	blx	r3
			cl_wait(100);
   8e992:	2064      	movs	r0, #100	; 0x64
   8e994:	4b2b      	ldr	r3, [pc, #172]	; (8ea44 <self_test+0x378>)
   8e996:	4798      	blx	r3
			sv_cntrl_setpumpspeed(UFPUMP,8000);
   8e998:	2004      	movs	r0, #4
   8e99a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   8e99e:	4b28      	ldr	r3, [pc, #160]	; (8ea40 <self_test+0x374>)
   8e9a0:	4798      	blx	r3
			cl_wait(100);
   8e9a2:	2064      	movs	r0, #100	; 0x64
   8e9a4:	4b27      	ldr	r3, [pc, #156]	; (8ea44 <self_test+0x378>)
   8e9a6:	4798      	blx	r3
			sv_cntrl_setpumpspeed(UFPUMP,6000);
   8e9a8:	2004      	movs	r0, #4
   8e9aa:	f241 7170 	movw	r1, #6000	; 0x1770
   8e9ae:	4b24      	ldr	r3, [pc, #144]	; (8ea40 <self_test+0x374>)
   8e9b0:	4798      	blx	r3
			cl_wait(100);
   8e9b2:	2064      	movs	r0, #100	; 0x64
   8e9b4:	4b23      	ldr	r3, [pc, #140]	; (8ea44 <self_test+0x378>)
   8e9b6:	4798      	blx	r3
			sv_cntrl_setpumpspeed(UFPUMP,1000);
   8e9b8:	2004      	movs	r0, #4
   8e9ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   8e9be:	4b20      	ldr	r3, [pc, #128]	; (8ea40 <self_test+0x374>)
   8e9c0:	4798      	blx	r3
			cl_wait(100);
   8e9c2:	2064      	movs	r0, #100	; 0x64
   8e9c4:	4b1f      	ldr	r3, [pc, #124]	; (8ea44 <self_test+0x378>)
   8e9c6:	4798      	blx	r3
			sv_cntrl_setpumpspeed(UFPUMP,500);
   8e9c8:	2004      	movs	r0, #4
   8e9ca:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   8e9ce:	4b1c      	ldr	r3, [pc, #112]	; (8ea40 <self_test+0x374>)
   8e9d0:	4798      	blx	r3
			cl_wait(100);
   8e9d2:	2064      	movs	r0, #100	; 0x64
   8e9d4:	4b1b      	ldr	r3, [pc, #108]	; (8ea44 <self_test+0x378>)
   8e9d6:	4798      	blx	r3
//			Cl_selftestretcode =  sv_cntrl_activatepump(UFPUMP);
             cl_selftestFeedback_start();
   8e9d8:	4b1b      	ldr	r3, [pc, #108]	; (8ea48 <self_test+0x37c>)
   8e9da:	4798      	blx	r3
			cl_selfteststate = CL_SELFTEST_STATE_UFPUMP_STATUS;
   8e9dc:	4b10      	ldr	r3, [pc, #64]	; (8ea20 <self_test+0x354>)
   8e9de:	2205      	movs	r2, #5
   8e9e0:	701a      	strb	r2, [r3, #0]
			break;
   8e9e2:	bf00      	nop
// 			//}
// 			
			default:
			break;
		}
		break;	 
   8e9e4:	f000 bd44 	b.w	8f470 <self_test+0xda4>
		
		case CL_SELFTEST_STATE_UFPUMP_STATUS:
		switch(cl_selftest_event_type)
   8e9e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8e9ec:	2b02      	cmp	r3, #2
   8e9ee:	d067      	beq.n	8eac0 <self_test+0x3f4>
   8e9f0:	2b08      	cmp	r3, #8
   8e9f2:	d02b      	beq.n	8ea4c <self_test+0x380>
				// {
					 status[CL_SELFTEST_RESULT_UFPUMP] = TEST_FAIL;
					 break;
				// }
			
			default:break;
   8e9f4:	e068      	b.n	8eac8 <self_test+0x3fc>
   8e9f6:	bf00      	nop
   8e9f8:	0008f4a1 	.word	0x0008f4a1
   8e9fc:	20072760 	.word	0x20072760
   8ea00:	0009b6c1 	.word	0x0009b6c1
   8ea04:	0009b685 	.word	0x0009b685
   8ea08:	0009b699 	.word	0x0009b699
   8ea0c:	0009b6ad 	.word	0x0009b6ad
   8ea10:	0009b369 	.word	0x0009b369
   8ea14:	0009b7a1 	.word	0x0009b7a1
   8ea18:	0009b875 	.word	0x0009b875
   8ea1c:	0009d1e9 	.word	0x0009d1e9
   8ea20:	20071b1a 	.word	0x20071b1a
   8ea24:	20071b1e 	.word	0x20071b1e
   8ea28:	20071b20 	.word	0x20071b20
   8ea2c:	0009b671 	.word	0x0009b671
   8ea30:	0009b635 	.word	0x0009b635
   8ea34:	0009b649 	.word	0x0009b649
   8ea38:	0009b65d 	.word	0x0009b65d
   8ea3c:	0009b32d 	.word	0x0009b32d
   8ea40:	0009b461 	.word	0x0009b461
   8ea44:	0009421d 	.word	0x0009421d
   8ea48:	00097215 	.word	0x00097215
		{
			case EVENT_selftest_TICK_SECOND:
			
		//	 int16_t uf_test_value = 0;
			 
				uf_test_value = uf_periodvalue;
   8ea4c:	4b99      	ldr	r3, [pc, #612]	; (8ecb4 <self_test+0x5e8>)
   8ea4e:	881b      	ldrh	r3, [r3, #0]
   8ea50:	63bb      	str	r3, [r7, #56]	; 0x38
				 
				 if ((uf_test_value >= Expected_uf_test_value) && (uf_test_value <= Expected_uf_test_value1))
   8ea52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   8ea54:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   8ea58:	d312      	bcc.n	8ea80 <self_test+0x3b4>
   8ea5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   8ea5c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   8ea60:	d80e      	bhi.n	8ea80 <self_test+0x3b4>
				 {
					 status[CL_SELFTEST_RESULT_UFPUMP] = TEST_PAAS; //test[0] = 1;
   8ea62:	4b95      	ldr	r3, [pc, #596]	; (8ecb8 <self_test+0x5ec>)
   8ea64:	2201      	movs	r2, #1
   8ea66:	709a      	strb	r2, [r3, #2]
					
					 sv_cntrl_deactivatepump(UFPUMP);
   8ea68:	2004      	movs	r0, #4
   8ea6a:	4b94      	ldr	r3, [pc, #592]	; (8ecbc <self_test+0x5f0>)
   8ea6c:	4798      	blx	r3
					 test_time = 0;
   8ea6e:	4b94      	ldr	r3, [pc, #592]	; (8ecc0 <self_test+0x5f4>)
   8ea70:	2200      	movs	r2, #0
   8ea72:	801a      	strh	r2, [r3, #0]
					 cl_selftestFeedback_stop();
   8ea74:	4b93      	ldr	r3, [pc, #588]	; (8ecc4 <self_test+0x5f8>)
   8ea76:	4798      	blx	r3
					/* uf_test_value = 0;*/
					  
					 cl_selfteststate = CL_SELFTEST_STATE_START_HPPUMP;
   8ea78:	4b93      	ldr	r3, [pc, #588]	; (8ecc8 <self_test+0x5fc>)
   8ea7a:	2206      	movs	r2, #6
   8ea7c:	701a      	strb	r2, [r3, #0]
				
					 break;
   8ea7e:	e023      	b.n	8eac8 <self_test+0x3fc>
				 }
				 else
				 {
					  test_time++;
   8ea80:	4b8f      	ldr	r3, [pc, #572]	; (8ecc0 <self_test+0x5f4>)
   8ea82:	881b      	ldrh	r3, [r3, #0]
   8ea84:	b29b      	uxth	r3, r3
   8ea86:	b29b      	uxth	r3, r3
   8ea88:	3301      	adds	r3, #1
   8ea8a:	b29b      	uxth	r3, r3
   8ea8c:	b29a      	uxth	r2, r3
   8ea8e:	4b8c      	ldr	r3, [pc, #560]	; (8ecc0 <self_test+0x5f4>)
   8ea90:	801a      	strh	r2, [r3, #0]
					 if (test_time > 3)
   8ea92:	4b8b      	ldr	r3, [pc, #556]	; (8ecc0 <self_test+0x5f4>)
   8ea94:	881b      	ldrh	r3, [r3, #0]
   8ea96:	b21b      	sxth	r3, r3
   8ea98:	2b03      	cmp	r3, #3
   8ea9a:	dd10      	ble.n	8eabe <self_test+0x3f2>
					 {
						 sv_cntrl_deactivatepump(UFPUMP);
   8ea9c:	2004      	movs	r0, #4
   8ea9e:	4b87      	ldr	r3, [pc, #540]	; (8ecbc <self_test+0x5f0>)
   8eaa0:	4798      	blx	r3
						 cl_selftestFeedback_stop();
   8eaa2:	4b88      	ldr	r3, [pc, #544]	; (8ecc4 <self_test+0x5f8>)
   8eaa4:	4798      	blx	r3
						   status[CL_SELFTEST_RESULT_UFPUMP] = TEST_FAIL  ;      // test[0] = 0;
   8eaa6:	4b84      	ldr	r3, [pc, #528]	; (8ecb8 <self_test+0x5ec>)
   8eaa8:	2200      	movs	r2, #0
   8eaaa:	709a      	strb	r2, [r3, #2]
						  test_time = 0;
   8eaac:	4b84      	ldr	r3, [pc, #528]	; (8ecc0 <self_test+0x5f4>)
   8eaae:	2200      	movs	r2, #0
   8eab0:	801a      	strh	r2, [r3, #0]
						   cl_selftestFeedback_stop();
   8eab2:	4b84      	ldr	r3, [pc, #528]	; (8ecc4 <self_test+0x5f8>)
   8eab4:	4798      	blx	r3
						 cl_selfteststate = CL_SELFTEST_STATE_START_HPPUMP;
   8eab6:	4b84      	ldr	r3, [pc, #528]	; (8ecc8 <self_test+0x5fc>)
   8eab8:	2206      	movs	r2, #6
   8eaba:	701a      	strb	r2, [r3, #0]
						 
						 
						  break;
   8eabc:	e004      	b.n	8eac8 <self_test+0x3fc>
						 
					 }
				 }
				 break;
   8eabe:	e003      	b.n	8eac8 <self_test+0x3fc>
				 case EVENT_STOP_selftest:
				// {
					 status[CL_SELFTEST_RESULT_UFPUMP] = TEST_FAIL;
   8eac0:	4b7d      	ldr	r3, [pc, #500]	; (8ecb8 <self_test+0x5ec>)
   8eac2:	2200      	movs	r2, #0
   8eac4:	709a      	strb	r2, [r3, #2]
					 break;
   8eac6:	bf00      	nop
				// }
			
			default:break;
		}
		
		break;
   8eac8:	f000 bcd2 	b.w	8f470 <self_test+0xda4>

		case CL_SELFTEST_STATE_START_HPPUMP:
		switch(cl_selftest_event_type)
   8eacc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8ead0:	2b02      	cmp	r3, #2
   8ead2:	d01c      	beq.n	8eb0e <self_test+0x442>
   8ead4:	2b05      	cmp	r3, #5
   8ead6:	d000      	beq.n	8eada <self_test+0x40e>
			 //{
				 status[CL_SELFTEST_RESULT_HPPUMP] = TEST_FAIL;
				 
				 break;
			// }
			default:break;
   8ead8:	e01d      	b.n	8eb16 <self_test+0x44a>

		case CL_SELFTEST_STATE_START_HPPUMP:
		switch(cl_selftest_event_type)
		{
			case EVENT_selftest_TICK_50MS:
			if(status[CL_SELFTEST_RESULT_HPPUMP] == TEST_PAAS)
   8eada:	4b77      	ldr	r3, [pc, #476]	; (8ecb8 <self_test+0x5ec>)
   8eadc:	78db      	ldrb	r3, [r3, #3]
   8eade:	2b01      	cmp	r3, #1
   8eae0:	d103      	bne.n	8eaea <self_test+0x41e>
		{
			 cl_selfteststate = CL_SELFTEST_STATE_START_BDPUMP;
   8eae2:	4b79      	ldr	r3, [pc, #484]	; (8ecc8 <self_test+0x5fc>)
   8eae4:	2208      	movs	r2, #8
   8eae6:	701a      	strb	r2, [r3, #0]
			 break;
   8eae8:	e015      	b.n	8eb16 <self_test+0x44a>
		}
		else
			{
				
			sv_cntrl_setHepa_dir();
   8eaea:	4b78      	ldr	r3, [pc, #480]	; (8eccc <self_test+0x600>)
   8eaec:	4798      	blx	r3

			sv_cntrl_activatepump(HEPARINPUMP);
   8eaee:	2005      	movs	r0, #5
   8eaf0:	4b77      	ldr	r3, [pc, #476]	; (8ecd0 <self_test+0x604>)
   8eaf2:	4798      	blx	r3
	        cl_wait(100);
   8eaf4:	2064      	movs	r0, #100	; 0x64
   8eaf6:	4b77      	ldr	r3, [pc, #476]	; (8ecd4 <self_test+0x608>)
   8eaf8:	4798      	blx	r3
			sv_cntrl_setpumpspeed(HEPARINPUMP,2);
   8eafa:	2005      	movs	r0, #5
   8eafc:	2102      	movs	r1, #2
   8eafe:	4b76      	ldr	r3, [pc, #472]	; (8ecd8 <self_test+0x60c>)
   8eb00:	4798      	blx	r3
			cl_hep_selftest_start();
   8eb02:	4b76      	ldr	r3, [pc, #472]	; (8ecdc <self_test+0x610>)
   8eb04:	4798      	blx	r3
			cl_selfteststate = CL_SELFTEST_STATE_HPPUMP_STATUS;
   8eb06:	4b70      	ldr	r3, [pc, #448]	; (8ecc8 <self_test+0x5fc>)
   8eb08:	2207      	movs	r2, #7
   8eb0a:	701a      	strb	r2, [r3, #0]
			break;
   8eb0c:	e003      	b.n	8eb16 <self_test+0x44a>
			}
			break;
			 case EVENT_STOP_selftest:
			 //{
				 status[CL_SELFTEST_RESULT_HPPUMP] = TEST_FAIL;
   8eb0e:	4b6a      	ldr	r3, [pc, #424]	; (8ecb8 <self_test+0x5ec>)
   8eb10:	2200      	movs	r2, #0
   8eb12:	70da      	strb	r2, [r3, #3]
				 
				 break;
   8eb14:	bf00      	nop
			// }
			default:break;
			
		}
		break;
   8eb16:	f000 bcab 	b.w	8f470 <self_test+0xda4>
		
		case CL_SELFTEST_STATE_HPPUMP_STATUS:
		switch(cl_selftest_event_type)
   8eb1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8eb1e:	2b02      	cmp	r3, #2
   8eb20:	d040      	beq.n	8eba4 <self_test+0x4d8>
   8eb22:	2b08      	cmp	r3, #8
   8eb24:	d000      	beq.n	8eb28 <self_test+0x45c>
			// {
				 status[CL_SELFTEST_RESULT_HPPUMP] = TEST_FAIL;
				 break;
			// }
			
			default:break;
   8eb26:	e041      	b.n	8ebac <self_test+0x4e0>
		switch(cl_selftest_event_type)
		{
			case EVENT_selftest_TICK_SECOND:
		//	 uint16_t hp_test_value = 0;
			
		 hp_test_value = hep_periodvalue;
   8eb28:	4b6d      	ldr	r3, [pc, #436]	; (8ece0 <self_test+0x614>)
   8eb2a:	881b      	ldrh	r3, [r3, #0]
   8eb2c:	637b      	str	r3, [r7, #52]	; 0x34
			
			if( (hp_test_value >= Expected_hp_test_value1)&&(hp_test_value <= Expected_hp_test_value2))
   8eb2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   8eb30:	2bc7      	cmp	r3, #199	; 0xc7
   8eb32:	d912      	bls.n	8eb5a <self_test+0x48e>
   8eb34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   8eb36:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   8eb3a:	d80e      	bhi.n	8eb5a <self_test+0x48e>
			{
				status[CL_SELFTEST_RESULT_HPPUMP] = TEST_PAAS;
   8eb3c:	4b5e      	ldr	r3, [pc, #376]	; (8ecb8 <self_test+0x5ec>)
   8eb3e:	2201      	movs	r2, #1
   8eb40:	70da      	strb	r2, [r3, #3]
				sv_cntrl_deactivatepump(HEPARINPUMP);
   8eb42:	2005      	movs	r0, #5
   8eb44:	4b5d      	ldr	r3, [pc, #372]	; (8ecbc <self_test+0x5f0>)
   8eb46:	4798      	blx	r3
				 cl_hep_selftest_stop();
   8eb48:	4b66      	ldr	r3, [pc, #408]	; (8ece4 <self_test+0x618>)
   8eb4a:	4798      	blx	r3
				cl_selfteststate = CL_SELFTEST_STATE_START_BDPUMP;
   8eb4c:	4b5e      	ldr	r3, [pc, #376]	; (8ecc8 <self_test+0x5fc>)
   8eb4e:	2208      	movs	r2, #8
   8eb50:	701a      	strb	r2, [r3, #0]
		
				test_time = 0;
   8eb52:	4b5b      	ldr	r3, [pc, #364]	; (8ecc0 <self_test+0x5f4>)
   8eb54:	2200      	movs	r2, #0
   8eb56:	801a      	strh	r2, [r3, #0]
				break;
   8eb58:	e028      	b.n	8ebac <self_test+0x4e0>
			}
			else
			{
				test_time++;
   8eb5a:	4b59      	ldr	r3, [pc, #356]	; (8ecc0 <self_test+0x5f4>)
   8eb5c:	881b      	ldrh	r3, [r3, #0]
   8eb5e:	b29b      	uxth	r3, r3
   8eb60:	b29b      	uxth	r3, r3
   8eb62:	3301      	adds	r3, #1
   8eb64:	b29b      	uxth	r3, r3
   8eb66:	b29a      	uxth	r2, r3
   8eb68:	4b55      	ldr	r3, [pc, #340]	; (8ecc0 <self_test+0x5f4>)
   8eb6a:	801a      	strh	r2, [r3, #0]
				if (test_time++ > 5)
   8eb6c:	4b54      	ldr	r3, [pc, #336]	; (8ecc0 <self_test+0x5f4>)
   8eb6e:	881b      	ldrh	r3, [r3, #0]
   8eb70:	b29b      	uxth	r3, r3
   8eb72:	b29a      	uxth	r2, r3
   8eb74:	3201      	adds	r2, #1
   8eb76:	b292      	uxth	r2, r2
   8eb78:	b291      	uxth	r1, r2
   8eb7a:	4a51      	ldr	r2, [pc, #324]	; (8ecc0 <self_test+0x5f4>)
   8eb7c:	8011      	strh	r1, [r2, #0]
   8eb7e:	b21b      	sxth	r3, r3
   8eb80:	2b05      	cmp	r3, #5
   8eb82:	dd0e      	ble.n	8eba2 <self_test+0x4d6>
				{
					sv_cntrl_deactivatepump(HEPARINPUMP);
   8eb84:	2005      	movs	r0, #5
   8eb86:	4b4d      	ldr	r3, [pc, #308]	; (8ecbc <self_test+0x5f0>)
   8eb88:	4798      	blx	r3
					status[CL_SELFTEST_RESULT_HPPUMP] = TEST_FAIL;
   8eb8a:	4b4b      	ldr	r3, [pc, #300]	; (8ecb8 <self_test+0x5ec>)
   8eb8c:	2200      	movs	r2, #0
   8eb8e:	70da      	strb	r2, [r3, #3]
					cl_hep_selftest_stop();
   8eb90:	4b54      	ldr	r3, [pc, #336]	; (8ece4 <self_test+0x618>)
   8eb92:	4798      	blx	r3
					cl_selfteststate = CL_SELFTEST_STATE_START_BDPUMP;
   8eb94:	4b4c      	ldr	r3, [pc, #304]	; (8ecc8 <self_test+0x5fc>)
   8eb96:	2208      	movs	r2, #8
   8eb98:	701a      	strb	r2, [r3, #0]
					
					test_time = 0;
   8eb9a:	4b49      	ldr	r3, [pc, #292]	; (8ecc0 <self_test+0x5f4>)
   8eb9c:	2200      	movs	r2, #0
   8eb9e:	801a      	strh	r2, [r3, #0]
					break;
   8eba0:	e004      	b.n	8ebac <self_test+0x4e0>
					
				}
			}
			break;
   8eba2:	e003      	b.n	8ebac <self_test+0x4e0>
			 case EVENT_STOP_selftest:
			// {
				 status[CL_SELFTEST_RESULT_HPPUMP] = TEST_FAIL;
   8eba4:	4b44      	ldr	r3, [pc, #272]	; (8ecb8 <self_test+0x5ec>)
   8eba6:	2200      	movs	r2, #0
   8eba8:	70da      	strb	r2, [r3, #3]
				 break;
   8ebaa:	bf00      	nop
			// }
			
			default:break;
		}
		break;	
   8ebac:	f000 bc60 	b.w	8f470 <self_test+0xda4>
	
				case CL_SELFTEST_STATE_START_BDPUMP:
				switch(cl_selftest_event_type)
   8ebb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8ebb4:	2b05      	cmp	r3, #5
   8ebb6:	d000      	beq.n	8ebba <self_test+0x4ee>
// 					  case EVENT_STOP_selftest:
// 					 // {
// 						  status[CL_SELFTEST_RESULT_BDPUMP] = TEST_FAIL;
// 						  break;
// 					//  }
					default:break;
   8ebb8:	e01a      	b.n	8ebf0 <self_test+0x524>
				case CL_SELFTEST_STATE_START_BDPUMP:
				switch(cl_selftest_event_type)
				{
					case EVENT_selftest_TICK_50MS:
					
                      if(status[CL_SELFTEST_RESULT_BDPUMP] == TEST_PAAS)
   8ebba:	4b3f      	ldr	r3, [pc, #252]	; (8ecb8 <self_test+0x5ec>)
   8ebbc:	791b      	ldrb	r3, [r3, #4]
   8ebbe:	2b01      	cmp	r3, #1
   8ebc0:	d103      	bne.n	8ebca <self_test+0x4fe>
					  {
						  cl_selfteststate = CL_SELFTEST_STATE_START_PISTON_PUMP;
   8ebc2:	4b41      	ldr	r3, [pc, #260]	; (8ecc8 <self_test+0x5fc>)
   8ebc4:	220a      	movs	r2, #10
   8ebc6:	701a      	strb	r2, [r3, #0]
						  break;
   8ebc8:	e012      	b.n	8ebf0 <self_test+0x524>
					  }
					  else
					  {
						  
					  Cl_selftestretcode = sv_cntrl_activatepump(BLOODPUMP);
   8ebca:	2003      	movs	r0, #3
   8ebcc:	4b40      	ldr	r3, [pc, #256]	; (8ecd0 <self_test+0x604>)
   8ebce:	4798      	blx	r3
   8ebd0:	4603      	mov	r3, r0
   8ebd2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
					  cl_wait(100);
   8ebd6:	2064      	movs	r0, #100	; 0x64
   8ebd8:	4b3e      	ldr	r3, [pc, #248]	; (8ecd4 <self_test+0x608>)
   8ebda:	4798      	blx	r3
					sv_cntrl_setpumpspeed(BLOODPUMP,200);
   8ebdc:	2003      	movs	r0, #3
   8ebde:	21c8      	movs	r1, #200	; 0xc8
   8ebe0:	4b3d      	ldr	r3, [pc, #244]	; (8ecd8 <self_test+0x60c>)
   8ebe2:	4798      	blx	r3

				
					cl_bp_selftest_start();
   8ebe4:	4b40      	ldr	r3, [pc, #256]	; (8ece8 <self_test+0x61c>)
   8ebe6:	4798      	blx	r3
					cl_selfteststate = CL_SELFTEST_STATE_BDPUMP_STATUS;
   8ebe8:	4b37      	ldr	r3, [pc, #220]	; (8ecc8 <self_test+0x5fc>)
   8ebea:	2209      	movs	r2, #9
   8ebec:	701a      	strb	r2, [r3, #0]
					break;
   8ebee:	bf00      	nop
// 						  break;
// 					//  }
					default:break;
					
				}
				break;
   8ebf0:	f000 bc3e 	b.w	8f470 <self_test+0xda4>
				
				case CL_SELFTEST_STATE_BDPUMP_STATUS:
				switch(cl_selftest_event_type)
   8ebf4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8ebf8:	2b02      	cmp	r3, #2
   8ebfa:	d038      	beq.n	8ec6e <self_test+0x5a2>
   8ebfc:	2b08      	cmp	r3, #8
   8ebfe:	d000      	beq.n	8ec02 <self_test+0x536>
					// {
						 status[CL_SELFTEST_RESULT_BDPUMP] = TEST_FAIL;
						 break;
					// }
					
					default:break;
   8ec00:	e039      	b.n	8ec76 <self_test+0x5aa>
				case CL_SELFTEST_STATE_BDPUMP_STATUS:
				switch(cl_selftest_event_type)
				{
					case EVENT_selftest_TICK_SECOND:
			//		 uint16_t hp_test_value = 0;
					bp_test_value = bp_periodvalue;
   8ec02:	4b3a      	ldr	r3, [pc, #232]	; (8ecec <self_test+0x620>)
   8ec04:	881b      	ldrh	r3, [r3, #0]
   8ec06:	633b      	str	r3, [r7, #48]	; 0x30
					
					if ((bp_test_value >= Expected_bp_test_value1)&&(bp_test_value <= Expected_bp_test_value2))
   8ec08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   8ec0a:	2b13      	cmp	r3, #19
   8ec0c:	d911      	bls.n	8ec32 <self_test+0x566>
   8ec0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   8ec10:	2b50      	cmp	r3, #80	; 0x50
   8ec12:	d80e      	bhi.n	8ec32 <self_test+0x566>
					{
						status[CL_SELFTEST_RESULT_BDPUMP] = TEST_PAAS;
   8ec14:	4b28      	ldr	r3, [pc, #160]	; (8ecb8 <self_test+0x5ec>)
   8ec16:	2201      	movs	r2, #1
   8ec18:	711a      	strb	r2, [r3, #4]
						sv_cntrl_deactivatepump(BLOODPUMP);
   8ec1a:	2003      	movs	r0, #3
   8ec1c:	4b27      	ldr	r3, [pc, #156]	; (8ecbc <self_test+0x5f0>)
   8ec1e:	4798      	blx	r3
						cl_bp_selftest_stop();
   8ec20:	4b33      	ldr	r3, [pc, #204]	; (8ecf0 <self_test+0x624>)
   8ec22:	4798      	blx	r3
						cl_selfteststate = CL_SELFTEST_STATE_START_PISTON_PUMP;
   8ec24:	4b28      	ldr	r3, [pc, #160]	; (8ecc8 <self_test+0x5fc>)
   8ec26:	220a      	movs	r2, #10
   8ec28:	701a      	strb	r2, [r3, #0]
						test_time = 0;
   8ec2a:	4b25      	ldr	r3, [pc, #148]	; (8ecc0 <self_test+0x5f4>)
   8ec2c:	2200      	movs	r2, #0
   8ec2e:	801a      	strh	r2, [r3, #0]
						break;
   8ec30:	e021      	b.n	8ec76 <self_test+0x5aa>
					}
					else
					{
						test_time++;
   8ec32:	4b23      	ldr	r3, [pc, #140]	; (8ecc0 <self_test+0x5f4>)
   8ec34:	881b      	ldrh	r3, [r3, #0]
   8ec36:	b29b      	uxth	r3, r3
   8ec38:	b29b      	uxth	r3, r3
   8ec3a:	3301      	adds	r3, #1
   8ec3c:	b29b      	uxth	r3, r3
   8ec3e:	b29a      	uxth	r2, r3
   8ec40:	4b1f      	ldr	r3, [pc, #124]	; (8ecc0 <self_test+0x5f4>)
   8ec42:	801a      	strh	r2, [r3, #0]
						if (test_time > 3)
   8ec44:	4b1e      	ldr	r3, [pc, #120]	; (8ecc0 <self_test+0x5f4>)
   8ec46:	881b      	ldrh	r3, [r3, #0]
   8ec48:	b21b      	sxth	r3, r3
   8ec4a:	2b03      	cmp	r3, #3
   8ec4c:	dd0e      	ble.n	8ec6c <self_test+0x5a0>
						{
							sv_cntrl_deactivatepump(BLOODPUMP);
   8ec4e:	2003      	movs	r0, #3
   8ec50:	4b1a      	ldr	r3, [pc, #104]	; (8ecbc <self_test+0x5f0>)
   8ec52:	4798      	blx	r3
							status[CL_SELFTEST_RESULT_BDPUMP] = TEST_FAIL;
   8ec54:	4b18      	ldr	r3, [pc, #96]	; (8ecb8 <self_test+0x5ec>)
   8ec56:	2200      	movs	r2, #0
   8ec58:	711a      	strb	r2, [r3, #4]
							cl_selfteststate = CL_SELFTEST_STATE_START_PISTON_PUMP;
   8ec5a:	4b1b      	ldr	r3, [pc, #108]	; (8ecc8 <self_test+0x5fc>)
   8ec5c:	220a      	movs	r2, #10
   8ec5e:	701a      	strb	r2, [r3, #0]
							cl_bp_selftest_stop();
   8ec60:	4b23      	ldr	r3, [pc, #140]	; (8ecf0 <self_test+0x624>)
   8ec62:	4798      	blx	r3
							test_time = 0;
   8ec64:	4b16      	ldr	r3, [pc, #88]	; (8ecc0 <self_test+0x5f4>)
   8ec66:	2200      	movs	r2, #0
   8ec68:	801a      	strh	r2, [r3, #0]
							break;
   8ec6a:	e004      	b.n	8ec76 <self_test+0x5aa>
							
						}
					}
					break;
   8ec6c:	e003      	b.n	8ec76 <self_test+0x5aa>
					 case EVENT_STOP_selftest:
					// {
						 status[CL_SELFTEST_RESULT_BDPUMP] = TEST_FAIL;
   8ec6e:	4b12      	ldr	r3, [pc, #72]	; (8ecb8 <self_test+0x5ec>)
   8ec70:	2200      	movs	r2, #0
   8ec72:	711a      	strb	r2, [r3, #4]
						 break;
   8ec74:	bf00      	nop
					// }
					
					default:break;
				}
				break;
   8ec76:	e3fb      	b.n	8f470 <self_test+0xda4>
// 				
// 				default:break;
// 			
// 			}
		case CL_SELFTEST_STATE_START_PISTON_PUMP:
		switch(cl_selftest_event_type)
   8ec78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8ec7c:	2b07      	cmp	r3, #7
   8ec7e:	d000      	beq.n	8ec82 <self_test+0x5b6>
			
			}
			}
			break;
			default:
			break;
   8ec80:	e060      	b.n	8ed44 <self_test+0x678>
		switch(cl_selftest_event_type)
		{
			
			
			case EVENT_selftest_TICK_500MS:
			if((status[CL_SELFTEST_RESULT_BICARBPUMP] == TEST_PAAS) && (status[CL_SELFTEST_RESULT_ACIDPUMP] == TEST_PAAS))
   8ec82:	4b0d      	ldr	r3, [pc, #52]	; (8ecb8 <self_test+0x5ec>)
   8ec84:	799b      	ldrb	r3, [r3, #6]
   8ec86:	2b01      	cmp	r3, #1
   8ec88:	d107      	bne.n	8ec9a <self_test+0x5ce>
   8ec8a:	4b0b      	ldr	r3, [pc, #44]	; (8ecb8 <self_test+0x5ec>)
   8ec8c:	795b      	ldrb	r3, [r3, #5]
   8ec8e:	2b01      	cmp	r3, #1
   8ec90:	d103      	bne.n	8ec9a <self_test+0x5ce>
			{
				cl_selfteststate = CL_SELFTEST_STATE_APT_STATUS;
   8ec92:	4b0d      	ldr	r3, [pc, #52]	; (8ecc8 <self_test+0x5fc>)
   8ec94:	220e      	movs	r2, #14
   8ec96:	701a      	strb	r2, [r3, #0]
				break;
   8ec98:	e054      	b.n	8ed44 <self_test+0x678>
			}
			
			else
			{
				
			time_count++;
   8ec9a:	4b16      	ldr	r3, [pc, #88]	; (8ecf4 <self_test+0x628>)
   8ec9c:	881b      	ldrh	r3, [r3, #0]
   8ec9e:	3301      	adds	r3, #1
   8eca0:	b29a      	uxth	r2, r3
   8eca2:	4b14      	ldr	r3, [pc, #80]	; (8ecf4 <self_test+0x628>)
   8eca4:	801a      	strh	r2, [r3, #0]
			if(time_count==2)
   8eca6:	4b13      	ldr	r3, [pc, #76]	; (8ecf4 <self_test+0x628>)
   8eca8:	881b      	ldrh	r3, [r3, #0]
   8ecaa:	2b02      	cmp	r3, #2
   8ecac:	d126      	bne.n	8ecfc <self_test+0x630>
			{
            sv_prop_startpropeo_aligning();
   8ecae:	4b12      	ldr	r3, [pc, #72]	; (8ecf8 <self_test+0x62c>)
   8ecb0:	4798      	blx	r3
			break;
   8ecb2:	e047      	b.n	8ed44 <self_test+0x678>
   8ecb4:	20071b14 	.word	0x20071b14
   8ecb8:	20072760 	.word	0x20072760
   8ecbc:	0009b369 	.word	0x0009b369
   8ecc0:	20071b24 	.word	0x20071b24
   8ecc4:	00097239 	.word	0x00097239
   8ecc8:	20071b1a 	.word	0x20071b1a
   8eccc:	0009b439 	.word	0x0009b439
   8ecd0:	0009b32d 	.word	0x0009b32d
   8ecd4:	0009421d 	.word	0x0009421d
   8ecd8:	0009b461 	.word	0x0009b461
   8ecdc:	00095305 	.word	0x00095305
   8ece0:	20071b16 	.word	0x20071b16
   8ece4:	00095335 	.word	0x00095335
   8ece8:	0009457d 	.word	0x0009457d
   8ecec:	20071b18 	.word	0x20071b18
   8ecf0:	000945a1 	.word	0x000945a1
   8ecf4:	20071b1c 	.word	0x20071b1c
   8ecf8:	0009b759 	.word	0x0009b759
			}
			else if (time_count==15)
   8ecfc:	4b9b      	ldr	r3, [pc, #620]	; (8ef6c <self_test+0x8a0>)
   8ecfe:	881b      	ldrh	r3, [r3, #0]
   8ed00:	2b0f      	cmp	r3, #15
   8ed02:	d105      	bne.n	8ed10 <self_test+0x644>
			{
           
				 //sv_prop_bicarb_selftest();
				 sv_prop_startopenfill(); 
   8ed04:	4b9a      	ldr	r3, [pc, #616]	; (8ef70 <self_test+0x8a4>)
   8ed06:	4798      	blx	r3
				 startpropFlag = true;
   8ed08:	4b9a      	ldr	r3, [pc, #616]	; (8ef74 <self_test+0x8a8>)
   8ed0a:	2201      	movs	r2, #1
   8ed0c:	701a      	strb	r2, [r3, #0]
			
			break;
   8ed0e:	e019      	b.n	8ed44 <self_test+0x678>
			}
			else if(startpropFlag){
   8ed10:	4b98      	ldr	r3, [pc, #608]	; (8ef74 <self_test+0x8a8>)
   8ed12:	781b      	ldrb	r3, [r3, #0]
   8ed14:	2b00      	cmp	r3, #0
   8ed16:	d014      	beq.n	8ed42 <self_test+0x676>
				
			durcount++;
   8ed18:	4b97      	ldr	r3, [pc, #604]	; (8ef78 <self_test+0x8ac>)
   8ed1a:	681b      	ldr	r3, [r3, #0]
   8ed1c:	3301      	adds	r3, #1
   8ed1e:	4a96      	ldr	r2, [pc, #600]	; (8ef78 <self_test+0x8ac>)
   8ed20:	6013      	str	r3, [r2, #0]
			if(durcount >=2){
   8ed22:	4b95      	ldr	r3, [pc, #596]	; (8ef78 <self_test+0x8ac>)
   8ed24:	681b      	ldr	r3, [r3, #0]
   8ed26:	2b01      	cmp	r3, #1
   8ed28:	dd0b      	ble.n	8ed42 <self_test+0x676>
				startpropFlag = false;	
   8ed2a:	4b92      	ldr	r3, [pc, #584]	; (8ef74 <self_test+0x8a8>)
   8ed2c:	2200      	movs	r2, #0
   8ed2e:	701a      	strb	r2, [r3, #0]
				sv_prop_stopopenfill();
   8ed30:	4b92      	ldr	r3, [pc, #584]	; (8ef7c <self_test+0x8b0>)
   8ed32:	4798      	blx	r3
				time_count = 0;
   8ed34:	4b8d      	ldr	r3, [pc, #564]	; (8ef6c <self_test+0x8a0>)
   8ed36:	2200      	movs	r2, #0
   8ed38:	801a      	strh	r2, [r3, #0]
			cl_selfteststate = CL_SELFTEST_STATE_STOP_PISTON_PUMP;
   8ed3a:	4b91      	ldr	r3, [pc, #580]	; (8ef80 <self_test+0x8b4>)
   8ed3c:	220b      	movs	r2, #11
   8ed3e:	701a      	strb	r2, [r3, #0]
			
			}
			
			}
			}
			break;
   8ed40:	e7ff      	b.n	8ed42 <self_test+0x676>
   8ed42:	bf00      	nop
			default:
			break;
			
		}
		break;
   8ed44:	e394      	b.n	8f470 <self_test+0xda4>
		
		case CL_SELFTEST_STATE_STOP_PISTON_PUMP:
		switch(cl_selftest_event_type)
   8ed46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8ed4a:	2b02      	cmp	r3, #2
   8ed4c:	d024      	beq.n	8ed98 <self_test+0x6cc>
   8ed4e:	2b08      	cmp	r3, #8
   8ed50:	d000      	beq.n	8ed54 <self_test+0x688>
			 // {
				  status[CL_SELFTEST_RESULT_BICARBPUMP] = TEST_FAIL;
				  break;
			 // }
			
			default:break;
   8ed52:	e025      	b.n	8eda0 <self_test+0x6d4>
		
		case CL_SELFTEST_STATE_STOP_PISTON_PUMP:
		switch(cl_selftest_event_type)
		{
			case EVENT_selftest_TICK_SECOND:
		test_time++;
   8ed54:	4b8b      	ldr	r3, [pc, #556]	; (8ef84 <self_test+0x8b8>)
   8ed56:	881b      	ldrh	r3, [r3, #0]
   8ed58:	b29b      	uxth	r3, r3
   8ed5a:	b29b      	uxth	r3, r3
   8ed5c:	3301      	adds	r3, #1
   8ed5e:	b29b      	uxth	r3, r3
   8ed60:	b29a      	uxth	r2, r3
   8ed62:	4b88      	ldr	r3, [pc, #544]	; (8ef84 <self_test+0x8b8>)
   8ed64:	801a      	strh	r2, [r3, #0]
		if (test_time==1)
   8ed66:	4b87      	ldr	r3, [pc, #540]	; (8ef84 <self_test+0x8b8>)
   8ed68:	881b      	ldrh	r3, [r3, #0]
   8ed6a:	b21b      	sxth	r3, r3
   8ed6c:	2b01      	cmp	r3, #1
   8ed6e:	d101      	bne.n	8ed74 <self_test+0x6a8>
		{
				sv_prop_bicarb_selftest_f_b();
   8ed70:	4b85      	ldr	r3, [pc, #532]	; (8ef88 <self_test+0x8bc>)
   8ed72:	4798      	blx	r3
				
		}
		if (test_time==5)
   8ed74:	4b83      	ldr	r3, [pc, #524]	; (8ef84 <self_test+0x8b8>)
   8ed76:	881b      	ldrh	r3, [r3, #0]
   8ed78:	b21b      	sxth	r3, r3
   8ed7a:	2b05      	cmp	r3, #5
   8ed7c:	d10b      	bne.n	8ed96 <self_test+0x6ca>
		
			{	
				sv_prop_startpropeo_aligning();
   8ed7e:	4b83      	ldr	r3, [pc, #524]	; (8ef8c <self_test+0x8c0>)
   8ed80:	4798      	blx	r3
				cl_selfteststate = CL_SELFTEST_STATE_ACIDPUMP_STATUS;
   8ed82:	4b7f      	ldr	r3, [pc, #508]	; (8ef80 <self_test+0x8b4>)
   8ed84:	220c      	movs	r2, #12
   8ed86:	701a      	strb	r2, [r3, #0]
				time_count = 0;
   8ed88:	4b78      	ldr	r3, [pc, #480]	; (8ef6c <self_test+0x8a0>)
   8ed8a:	2200      	movs	r2, #0
   8ed8c:	801a      	strh	r2, [r3, #0]
				test_time =0;
   8ed8e:	4b7d      	ldr	r3, [pc, #500]	; (8ef84 <self_test+0x8b8>)
   8ed90:	2200      	movs	r2, #0
   8ed92:	801a      	strh	r2, [r3, #0]
			}
				break;
   8ed94:	e004      	b.n	8eda0 <self_test+0x6d4>
   8ed96:	e003      	b.n	8eda0 <self_test+0x6d4>
// 			}
// 			break;
// 			}
			  case EVENT_STOP_selftest:
			 // {
				  status[CL_SELFTEST_RESULT_BICARBPUMP] = TEST_FAIL;
   8ed98:	4b7d      	ldr	r3, [pc, #500]	; (8ef90 <self_test+0x8c4>)
   8ed9a:	2200      	movs	r2, #0
   8ed9c:	719a      	strb	r2, [r3, #6]
				  break;
   8ed9e:	bf00      	nop
			 // }
			
			default:break;
		}
		break;
   8eda0:	e366      	b.n	8f470 <self_test+0xda4>
		case CL_SELFTEST_STATE_ACIDPUMP_STATUS:
	    switch(cl_selftest_event_type)
   8eda2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8eda6:	2b08      	cmp	r3, #8
   8eda8:	d000      	beq.n	8edac <self_test+0x6e0>
		}
			
				}
		break;
		default:
		break;
   8edaa:	e030      	b.n	8ee0e <self_test+0x742>
		break;
		case CL_SELFTEST_STATE_ACIDPUMP_STATUS:
	    switch(cl_selftest_event_type)
		{
			case EVENT_selftest_TICK_SECOND:
				time_count++;
   8edac:	4b6f      	ldr	r3, [pc, #444]	; (8ef6c <self_test+0x8a0>)
   8edae:	881b      	ldrh	r3, [r3, #0]
   8edb0:	3301      	adds	r3, #1
   8edb2:	b29a      	uxth	r2, r3
   8edb4:	4b6d      	ldr	r3, [pc, #436]	; (8ef6c <self_test+0x8a0>)
   8edb6:	801a      	strh	r2, [r3, #0]
				if(time_count==2)
   8edb8:	4b6c      	ldr	r3, [pc, #432]	; (8ef6c <self_test+0x8a0>)
   8edba:	881b      	ldrh	r3, [r3, #0]
   8edbc:	2b02      	cmp	r3, #2
   8edbe:	d125      	bne.n	8ee0c <self_test+0x740>
				{
				Cl_SysStat_GetSensor_Status_Query(SENSOR_ACID_F_B,&af_b);
   8edc0:	f107 0322 	add.w	r3, r7, #34	; 0x22
   8edc4:	2026      	movs	r0, #38	; 0x26
   8edc6:	4619      	mov	r1, r3
   8edc8:	4b72      	ldr	r3, [pc, #456]	; (8ef94 <self_test+0x8c8>)
   8edca:	4798      	blx	r3
				if ((af_b >= Expected_acid_test_value1) && (af_b <= Expected_acid_test_value2))
   8edcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   8edce:	b21b      	sxth	r3, r3
   8edd0:	2b01      	cmp	r3, #1
   8edd2:	dd0f      	ble.n	8edf4 <self_test+0x728>
   8edd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   8edd6:	b21b      	sxth	r3, r3
   8edd8:	2b0a      	cmp	r3, #10
   8edda:	dc0b      	bgt.n	8edf4 <self_test+0x728>
				 				{
				 					status[CL_SELFTEST_RESULT_ACIDPUMP] = TEST_PAAS;
   8eddc:	4b6c      	ldr	r3, [pc, #432]	; (8ef90 <self_test+0x8c4>)
   8edde:	2201      	movs	r2, #1
   8ede0:	715a      	strb	r2, [r3, #5]
				 						cl_selfteststate =  CL_SELFTEST_STATE_BICARBPUMP_STATUS;
   8ede2:	4b67      	ldr	r3, [pc, #412]	; (8ef80 <self_test+0x8b4>)
   8ede4:	220d      	movs	r2, #13
   8ede6:	701a      	strb	r2, [r3, #0]
										 time_count=0;
   8ede8:	4b60      	ldr	r3, [pc, #384]	; (8ef6c <self_test+0x8a0>)
   8edea:	2200      	movs	r2, #0
   8edec:	801a      	strh	r2, [r3, #0]
										 af_b=0;
   8edee:	2300      	movs	r3, #0
   8edf0:	847b      	strh	r3, [r7, #34]	; 0x22
										 break;
   8edf2:	e00c      	b.n	8ee0e <self_test+0x742>
			
		                         }
		else 
		{
			status[CL_SELFTEST_RESULT_ACIDPUMP] = TEST_FAIL;
   8edf4:	4b66      	ldr	r3, [pc, #408]	; (8ef90 <self_test+0x8c4>)
   8edf6:	2200      	movs	r2, #0
   8edf8:	715a      	strb	r2, [r3, #5]
			cl_selfteststate =  CL_SELFTEST_STATE_BICARBPUMP_STATUS;
   8edfa:	4b61      	ldr	r3, [pc, #388]	; (8ef80 <self_test+0x8b4>)
   8edfc:	220d      	movs	r2, #13
   8edfe:	701a      	strb	r2, [r3, #0]
			af_b=0;
   8ee00:	2300      	movs	r3, #0
   8ee02:	847b      	strh	r3, [r7, #34]	; 0x22
			time_count=0;
   8ee04:	4b59      	ldr	r3, [pc, #356]	; (8ef6c <self_test+0x8a0>)
   8ee06:	2200      	movs	r2, #0
   8ee08:	801a      	strh	r2, [r3, #0]
			break;
   8ee0a:	e000      	b.n	8ee0e <self_test+0x742>
		}
			
				}
		break;
   8ee0c:	bf00      	nop
		default:
		break;
		
		}
		
		break;
   8ee0e:	e32f      	b.n	8f470 <self_test+0xda4>
		case CL_SELFTEST_STATE_BICARBPUMP_STATUS:
		  switch(cl_selftest_event_type)
   8ee10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8ee14:	2b07      	cmp	r3, #7
   8ee16:	d000      	beq.n	8ee1a <self_test+0x74e>
				  bf_b=0;
				  break;
			  }
			  break;
			  default:
			  break;
   8ee18:	e01f      	b.n	8ee5a <self_test+0x78e>
		  switch(cl_selftest_event_type)
		  {
			  case EVENT_selftest_TICK_500MS:
			  
			
			  Cl_SysStat_GetSensor_Status_Query(SENSOR_ACID_F_B,&bf_b);
   8ee1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
   8ee1e:	2026      	movs	r0, #38	; 0x26
   8ee20:	4619      	mov	r1, r3
   8ee22:	4b5c      	ldr	r3, [pc, #368]	; (8ef94 <self_test+0x8c8>)
   8ee24:	4798      	blx	r3
			  if ((bf_b >= Expected_bicarb_test_value1) && (bf_b <= Expected_bicarb_test_value2))
   8ee26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   8ee28:	b21b      	sxth	r3, r3
   8ee2a:	2b01      	cmp	r3, #1
   8ee2c:	dd0c      	ble.n	8ee48 <self_test+0x77c>
   8ee2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   8ee30:	b21b      	sxth	r3, r3
   8ee32:	2b0a      	cmp	r3, #10
   8ee34:	dc08      	bgt.n	8ee48 <self_test+0x77c>
			  {
				  status[CL_SELFTEST_RESULT_BICARBPUMP] = TEST_PAAS;
   8ee36:	4b56      	ldr	r3, [pc, #344]	; (8ef90 <self_test+0x8c4>)
   8ee38:	2201      	movs	r2, #1
   8ee3a:	719a      	strb	r2, [r3, #6]
				  cl_selfteststate = CL_SELFTEST_STATE_APT_STATUS;
   8ee3c:	4b50      	ldr	r3, [pc, #320]	; (8ef80 <self_test+0x8b4>)
   8ee3e:	220e      	movs	r2, #14
   8ee40:	701a      	strb	r2, [r3, #0]
				  bf_b=0;
   8ee42:	2300      	movs	r3, #0
   8ee44:	84bb      	strh	r3, [r7, #36]	; 0x24
				  break;
   8ee46:	e008      	b.n	8ee5a <self_test+0x78e>
				  
			  }
			  else
			  {
				  status[CL_SELFTEST_RESULT_BICARBPUMP] = TEST_FAIL;
   8ee48:	4b51      	ldr	r3, [pc, #324]	; (8ef90 <self_test+0x8c4>)
   8ee4a:	2200      	movs	r2, #0
   8ee4c:	719a      	strb	r2, [r3, #6]
				  cl_selfteststate =  CL_SELFTEST_STATE_APT_STATUS;
   8ee4e:	4b4c      	ldr	r3, [pc, #304]	; (8ef80 <self_test+0x8b4>)
   8ee50:	220e      	movs	r2, #14
   8ee52:	701a      	strb	r2, [r3, #0]
				  bf_b=0;
   8ee54:	2300      	movs	r3, #0
   8ee56:	84bb      	strh	r3, [r7, #36]	; 0x24
				  break;
   8ee58:	bf00      	nop
			  break;
			  
		  }
		
		
		break;
   8ee5a:	e309      	b.n	8f470 <self_test+0xda4>
		
		
		
		
			case CL_SELFTEST_STATE_APT_STATUS:
			switch(cl_selftest_event_type)
   8ee5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8ee60:	2b08      	cmp	r3, #8
   8ee62:	d000      	beq.n	8ee66 <self_test+0x79a>
								break;
							}
				}
				break;
							default:
							break;
   8ee64:	e03a      	b.n	8eedc <self_test+0x810>
			case CL_SELFTEST_STATE_APT_STATUS:
			switch(cl_selftest_event_type)
			{
				
				case EVENT_selftest_TICK_SECOND:
				if (status[CL_SELFTEST_RESULT_APT_STATUS] == TEST_PAAS)
   8ee66:	4b4a      	ldr	r3, [pc, #296]	; (8ef90 <self_test+0x8c4>)
   8ee68:	79db      	ldrb	r3, [r3, #7]
   8ee6a:	2b01      	cmp	r3, #1
   8ee6c:	d103      	bne.n	8ee76 <self_test+0x7aa>
				{
					cl_selfteststate = CL_SELFTEST_STATE_VPT_STATUS;
   8ee6e:	4b44      	ldr	r3, [pc, #272]	; (8ef80 <self_test+0x8b4>)
   8ee70:	220f      	movs	r2, #15
   8ee72:	701a      	strb	r2, [r3, #0]
					break;
   8ee74:	e032      	b.n	8eedc <self_test+0x810>
				}
				else{
				
				test_time++;
   8ee76:	4b43      	ldr	r3, [pc, #268]	; (8ef84 <self_test+0x8b8>)
   8ee78:	881b      	ldrh	r3, [r3, #0]
   8ee7a:	b29b      	uxth	r3, r3
   8ee7c:	b29b      	uxth	r3, r3
   8ee7e:	3301      	adds	r3, #1
   8ee80:	b29b      	uxth	r3, r3
   8ee82:	b29a      	uxth	r2, r3
   8ee84:	4b3f      	ldr	r3, [pc, #252]	; (8ef84 <self_test+0x8b8>)
   8ee86:	801a      	strh	r2, [r3, #0]
				
					Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS,&apt_val);
   8ee88:	f107 0320 	add.w	r3, r7, #32
   8ee8c:	200b      	movs	r0, #11
   8ee8e:	4619      	mov	r1, r3
   8ee90:	4b40      	ldr	r3, [pc, #256]	; (8ef94 <self_test+0x8c8>)
   8ee92:	4798      	blx	r3
				
						apt_val=apt_val-1000;
   8ee94:	8c3b      	ldrh	r3, [r7, #32]
   8ee96:	b29b      	uxth	r3, r3
   8ee98:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   8ee9c:	b29b      	uxth	r3, r3
   8ee9e:	b29b      	uxth	r3, r3
   8eea0:	843b      	strh	r3, [r7, #32]
						if((apt_val >= expected_lowerapt_value)&&(apt_val <= expected_higherapt_value))
   8eea2:	8c3b      	ldrh	r3, [r7, #32]
   8eea4:	b21b      	sxth	r3, r3
   8eea6:	f113 0f32 	cmn.w	r3, #50	; 0x32
   8eeaa:	db0d      	blt.n	8eec8 <self_test+0x7fc>
   8eeac:	8c3b      	ldrh	r3, [r7, #32]
   8eeae:	b21b      	sxth	r3, r3
   8eeb0:	2b32      	cmp	r3, #50	; 0x32
   8eeb2:	dc09      	bgt.n	8eec8 <self_test+0x7fc>
							{
								status[CL_SELFTEST_RESULT_APT_STATUS] = TEST_PAAS;
   8eeb4:	4b36      	ldr	r3, [pc, #216]	; (8ef90 <self_test+0x8c4>)
   8eeb6:	2201      	movs	r2, #1
   8eeb8:	71da      	strb	r2, [r3, #7]
								test_time = 0;
   8eeba:	4b32      	ldr	r3, [pc, #200]	; (8ef84 <self_test+0x8b8>)
   8eebc:	2200      	movs	r2, #0
   8eebe:	801a      	strh	r2, [r3, #0]
								cl_selfteststate =  CL_SELFTEST_STATE_VPT_STATUS;
   8eec0:	4b2f      	ldr	r3, [pc, #188]	; (8ef80 <self_test+0x8b4>)
   8eec2:	220f      	movs	r2, #15
   8eec4:	701a      	strb	r2, [r3, #0]
								break;
   8eec6:	e009      	b.n	8eedc <self_test+0x810>
							}
							
							else
							{
								status[CL_SELFTEST_RESULT_APT_STATUS] = TEST_FAIL;
   8eec8:	4b31      	ldr	r3, [pc, #196]	; (8ef90 <self_test+0x8c4>)
   8eeca:	2200      	movs	r2, #0
   8eecc:	71da      	strb	r2, [r3, #7]
								test_time = 0;
   8eece:	4b2d      	ldr	r3, [pc, #180]	; (8ef84 <self_test+0x8b8>)
   8eed0:	2200      	movs	r2, #0
   8eed2:	801a      	strh	r2, [r3, #0]
								cl_selfteststate =  CL_SELFTEST_STATE_VPT_STATUS;
   8eed4:	4b2a      	ldr	r3, [pc, #168]	; (8ef80 <self_test+0x8b4>)
   8eed6:	220f      	movs	r2, #15
   8eed8:	701a      	strb	r2, [r3, #0]
								break;
   8eeda:	bf00      	nop
							break;
							
						
					
			}
			break;
   8eedc:	e2c8      	b.n	8f470 <self_test+0xda4>
					case CL_SELFTEST_STATE_VPT_STATUS:
					switch(cl_selftest_event_type)
   8eede:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8eee2:	2b08      	cmp	r3, #8
   8eee4:	d000      	beq.n	8eee8 <self_test+0x81c>
									cl_selfteststate =  CL_SELFTEST_STATE_SENSOR_TEMPSTATUS;
									break;
								}
						}
						break;
								default:break;
   8eee6:	e03a      	b.n	8ef5e <self_test+0x892>
					case CL_SELFTEST_STATE_VPT_STATUS:
					switch(cl_selftest_event_type)
					{
						
						case EVENT_selftest_TICK_SECOND:
						if (status[CL_SELFTEST_RESULT_VPT_STATUS] == TEST_PAAS)
   8eee8:	4b29      	ldr	r3, [pc, #164]	; (8ef90 <self_test+0x8c4>)
   8eeea:	7a1b      	ldrb	r3, [r3, #8]
   8eeec:	2b01      	cmp	r3, #1
   8eeee:	d103      	bne.n	8eef8 <self_test+0x82c>
						{
							cl_selfteststate = CL_SELFTEST_STATE_SENSOR_TEMPSTATUS;
   8eef0:	4b23      	ldr	r3, [pc, #140]	; (8ef80 <self_test+0x8b4>)
   8eef2:	2210      	movs	r2, #16
   8eef4:	701a      	strb	r2, [r3, #0]
							break;
   8eef6:	e032      	b.n	8ef5e <self_test+0x892>
						}
						else{
						test_time++;
   8eef8:	4b22      	ldr	r3, [pc, #136]	; (8ef84 <self_test+0x8b8>)
   8eefa:	881b      	ldrh	r3, [r3, #0]
   8eefc:	b29b      	uxth	r3, r3
   8eefe:	b29b      	uxth	r3, r3
   8ef00:	3301      	adds	r3, #1
   8ef02:	b29b      	uxth	r3, r3
   8ef04:	b29a      	uxth	r2, r3
   8ef06:	4b1f      	ldr	r3, [pc, #124]	; (8ef84 <self_test+0x8b8>)
   8ef08:	801a      	strh	r2, [r3, #0]
						
					//	uint16_t vpt_val = 0;
						
						Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS,&vpt_val);
   8ef0a:	f107 031e 	add.w	r3, r7, #30
   8ef0e:	200c      	movs	r0, #12
   8ef10:	4619      	mov	r1, r3
   8ef12:	4b20      	ldr	r3, [pc, #128]	; (8ef94 <self_test+0x8c8>)
   8ef14:	4798      	blx	r3
					//	vpt_val=vpt_val/10;
							vpt_val=(vpt_val-1000);
   8ef16:	8bfb      	ldrh	r3, [r7, #30]
   8ef18:	b29b      	uxth	r3, r3
   8ef1a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   8ef1e:	b29b      	uxth	r3, r3
   8ef20:	b29b      	uxth	r3, r3
   8ef22:	83fb      	strh	r3, [r7, #30]
								if((vpt_val >= expected_lowerapt_value)&&(vpt_val <= expected_higherapt_value) )
   8ef24:	8bfb      	ldrh	r3, [r7, #30]
   8ef26:	b21b      	sxth	r3, r3
   8ef28:	f113 0f32 	cmn.w	r3, #50	; 0x32
   8ef2c:	db0d      	blt.n	8ef4a <self_test+0x87e>
   8ef2e:	8bfb      	ldrh	r3, [r7, #30]
   8ef30:	b21b      	sxth	r3, r3
   8ef32:	2b32      	cmp	r3, #50	; 0x32
   8ef34:	dc09      	bgt.n	8ef4a <self_test+0x87e>
								{
									status[CL_SELFTEST_RESULT_VPT_STATUS] = TEST_PAAS;
   8ef36:	4b16      	ldr	r3, [pc, #88]	; (8ef90 <self_test+0x8c4>)
   8ef38:	2201      	movs	r2, #1
   8ef3a:	721a      	strb	r2, [r3, #8]
									test_time = 0;
   8ef3c:	4b11      	ldr	r3, [pc, #68]	; (8ef84 <self_test+0x8b8>)
   8ef3e:	2200      	movs	r2, #0
   8ef40:	801a      	strh	r2, [r3, #0]
									cl_selfteststate =  CL_SELFTEST_STATE_SENSOR_TEMPSTATUS;
   8ef42:	4b0f      	ldr	r3, [pc, #60]	; (8ef80 <self_test+0x8b4>)
   8ef44:	2210      	movs	r2, #16
   8ef46:	701a      	strb	r2, [r3, #0]
									break;
   8ef48:	e009      	b.n	8ef5e <self_test+0x892>
								}
								
								else
								{
									status[CL_SELFTEST_RESULT_VPT_STATUS] = TEST_FAIL ;
   8ef4a:	4b11      	ldr	r3, [pc, #68]	; (8ef90 <self_test+0x8c4>)
   8ef4c:	2200      	movs	r2, #0
   8ef4e:	721a      	strb	r2, [r3, #8]
									test_time = 0;
   8ef50:	4b0c      	ldr	r3, [pc, #48]	; (8ef84 <self_test+0x8b8>)
   8ef52:	2200      	movs	r2, #0
   8ef54:	801a      	strh	r2, [r3, #0]
									cl_selfteststate =  CL_SELFTEST_STATE_SENSOR_TEMPSTATUS;
   8ef56:	4b0a      	ldr	r3, [pc, #40]	; (8ef80 <self_test+0x8b4>)
   8ef58:	2210      	movs	r2, #16
   8ef5a:	701a      	strb	r2, [r3, #0]
									break;
   8ef5c:	bf00      	nop
								}
						}
						break;
								default:break;
							}
					break;
   8ef5e:	e287      	b.n	8f470 <self_test+0xda4>
				
				case CL_SELFTEST_STATE_SENSOR_TEMPSTATUS:
				switch(cl_selftest_event_type)
   8ef60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8ef64:	2b07      	cmp	r3, #7
   8ef66:	d017      	beq.n	8ef98 <self_test+0x8cc>
								}
							}
					}
					break;
					default:
					break;
   8ef68:	e0ab      	b.n	8f0c2 <self_test+0x9f6>
   8ef6a:	bf00      	nop
   8ef6c:	20071b1c 	.word	0x20071b1c
   8ef70:	0009b851 	.word	0x0009b851
   8ef74:	20071b1e 	.word	0x20071b1e
   8ef78:	20071b20 	.word	0x20071b20
   8ef7c:	0009b875 	.word	0x0009b875
   8ef80:	20071b1a 	.word	0x20071b1a
   8ef84:	20071b24 	.word	0x20071b24
   8ef88:	0009b7a1 	.word	0x0009b7a1
   8ef8c:	0009b759 	.word	0x0009b759
   8ef90:	20072760 	.word	0x20072760
   8ef94:	0008fd69 	.word	0x0008fd69
				case CL_SELFTEST_STATE_SENSOR_TEMPSTATUS:
				switch(cl_selftest_event_type)
				{
					
					case  EVENT_selftest_TICK_500MS:
					if ((status[CL_SELFTEST_RESULT_TEMPSTATUS1] == TEST_PAAS) && (status[CL_SELFTEST_RESULT_TEMPSTATUS2] == TEST_PAAS) && (status[CL_SELFTEST_RESULT_TEMPSTATUS3] == TEST_PAAS))
   8ef98:	4b98      	ldr	r3, [pc, #608]	; (8f1fc <self_test+0xb30>)
   8ef9a:	7a5b      	ldrb	r3, [r3, #9]
   8ef9c:	2b01      	cmp	r3, #1
   8ef9e:	d10b      	bne.n	8efb8 <self_test+0x8ec>
   8efa0:	4b96      	ldr	r3, [pc, #600]	; (8f1fc <self_test+0xb30>)
   8efa2:	7a9b      	ldrb	r3, [r3, #10]
   8efa4:	2b01      	cmp	r3, #1
   8efa6:	d107      	bne.n	8efb8 <self_test+0x8ec>
   8efa8:	4b94      	ldr	r3, [pc, #592]	; (8f1fc <self_test+0xb30>)
   8efaa:	7adb      	ldrb	r3, [r3, #11]
   8efac:	2b01      	cmp	r3, #1
   8efae:	d103      	bne.n	8efb8 <self_test+0x8ec>
					{
						cl_selfteststate = CL_SELFTEST_STATE_SENSOR_PSTATUS;   //	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&TEMP_DATA.Twobyte);
   8efb0:	4b93      	ldr	r3, [pc, #588]	; (8f200 <self_test+0xb34>)
   8efb2:	2211      	movs	r2, #17
   8efb4:	701a      	strb	r2, [r3, #0]
						break;                                                      //Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&TEMP_DATA.Twobyte)
   8efb6:	e084      	b.n	8f0c2 <self_test+0x9f6>
					else
					{
						
							
						
						Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &Ts1);
   8efb8:	f107 031c 	add.w	r3, r7, #28
   8efbc:	2012      	movs	r0, #18
   8efbe:	4619      	mov	r1, r3
   8efc0:	4b90      	ldr	r3, [pc, #576]	; (8f204 <self_test+0xb38>)
   8efc2:	4798      	blx	r3
						Ts1=Ts1/100;
   8efc4:	8bbb      	ldrh	r3, [r7, #28]
   8efc6:	b21b      	sxth	r3, r3
   8efc8:	4a8f      	ldr	r2, [pc, #572]	; (8f208 <self_test+0xb3c>)
   8efca:	fb82 1203 	smull	r1, r2, r2, r3
   8efce:	1152      	asrs	r2, r2, #5
   8efd0:	17db      	asrs	r3, r3, #31
   8efd2:	1ad3      	subs	r3, r2, r3
   8efd4:	b29b      	uxth	r3, r3
   8efd6:	83bb      	strh	r3, [r7, #28]
					
						Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &Ts2);
   8efd8:	f107 031a 	add.w	r3, r7, #26
   8efdc:	2013      	movs	r0, #19
   8efde:	4619      	mov	r1, r3
   8efe0:	4b88      	ldr	r3, [pc, #544]	; (8f204 <self_test+0xb38>)
   8efe2:	4798      	blx	r3
						Ts2=Ts2/100;
   8efe4:	8b7b      	ldrh	r3, [r7, #26]
   8efe6:	b21b      	sxth	r3, r3
   8efe8:	4a87      	ldr	r2, [pc, #540]	; (8f208 <self_test+0xb3c>)
   8efea:	fb82 1203 	smull	r1, r2, r2, r3
   8efee:	1152      	asrs	r2, r2, #5
   8eff0:	17db      	asrs	r3, r3, #31
   8eff2:	1ad3      	subs	r3, r2, r3
   8eff4:	b29b      	uxth	r3, r3
   8eff6:	837b      	strh	r3, [r7, #26]
						Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &Ts3);
   8eff8:	f107 0318 	add.w	r3, r7, #24
   8effc:	2014      	movs	r0, #20
   8effe:	4619      	mov	r1, r3
   8f000:	4b80      	ldr	r3, [pc, #512]	; (8f204 <self_test+0xb38>)
   8f002:	4798      	blx	r3
						Ts3=Ts3/100;
   8f004:	8b3b      	ldrh	r3, [r7, #24]
   8f006:	b21b      	sxth	r3, r3
   8f008:	4a7f      	ldr	r2, [pc, #508]	; (8f208 <self_test+0xb3c>)
   8f00a:	fb82 1203 	smull	r1, r2, r2, r3
   8f00e:	1152      	asrs	r2, r2, #5
   8f010:	17db      	asrs	r3, r3, #31
   8f012:	1ad3      	subs	r3, r2, r3
   8f014:	b29b      	uxth	r3, r3
   8f016:	833b      	strh	r3, [r7, #24]
						
					test_time++;
   8f018:	4b7c      	ldr	r3, [pc, #496]	; (8f20c <self_test+0xb40>)
   8f01a:	881b      	ldrh	r3, [r3, #0]
   8f01c:	b29b      	uxth	r3, r3
   8f01e:	b29b      	uxth	r3, r3
   8f020:	3301      	adds	r3, #1
   8f022:	b29b      	uxth	r3, r3
   8f024:	b29a      	uxth	r2, r3
   8f026:	4b79      	ldr	r3, [pc, #484]	; (8f20c <self_test+0xb40>)
   8f028:	801a      	strh	r2, [r3, #0]
						if(test_time == 1)
   8f02a:	4b78      	ldr	r3, [pc, #480]	; (8f20c <self_test+0xb40>)
   8f02c:	881b      	ldrh	r3, [r3, #0]
   8f02e:	b21b      	sxth	r3, r3
   8f030:	2b01      	cmp	r3, #1
   8f032:	d10f      	bne.n	8f054 <self_test+0x988>
						{
							if((Ts1 >= expected_lowertemp1_value)&&(Ts1 <= expected_highertemp1_value) )
   8f034:	8bbb      	ldrh	r3, [r7, #28]
   8f036:	b21b      	sxth	r3, r3
   8f038:	2b13      	cmp	r3, #19
   8f03a:	dd07      	ble.n	8f04c <self_test+0x980>
   8f03c:	8bbb      	ldrh	r3, [r7, #28]
   8f03e:	b21b      	sxth	r3, r3
   8f040:	2b1c      	cmp	r3, #28
   8f042:	dc03      	bgt.n	8f04c <self_test+0x980>
							
							{
								status[CL_SELFTEST_RESULT_TEMPSTATUS1] = TEST_PAAS;
   8f044:	4b6d      	ldr	r3, [pc, #436]	; (8f1fc <self_test+0xb30>)
   8f046:	2201      	movs	r2, #1
   8f048:	725a      	strb	r2, [r3, #9]
								break;
   8f04a:	e03a      	b.n	8f0c2 <self_test+0x9f6>
							}
							
							
							else
							{
								status[CL_SELFTEST_RESULT_TEMPSTATUS1] = TEST_FAIL;
   8f04c:	4b6b      	ldr	r3, [pc, #428]	; (8f1fc <self_test+0xb30>)
   8f04e:	2200      	movs	r2, #0
   8f050:	725a      	strb	r2, [r3, #9]
								break;
   8f052:	e036      	b.n	8f0c2 <self_test+0x9f6>
							}
						}
						
						if((test_time == 2))
   8f054:	4b6d      	ldr	r3, [pc, #436]	; (8f20c <self_test+0xb40>)
   8f056:	881b      	ldrh	r3, [r3, #0]
   8f058:	b21b      	sxth	r3, r3
   8f05a:	2b02      	cmp	r3, #2
   8f05c:	d10f      	bne.n	8f07e <self_test+0x9b2>
						{
							if((Ts2 >= expected_lowertemp2_value)&&(Ts2 <= expected_highertemp2_value) )
   8f05e:	8b7b      	ldrh	r3, [r7, #26]
   8f060:	b21b      	sxth	r3, r3
   8f062:	2b13      	cmp	r3, #19
   8f064:	dd07      	ble.n	8f076 <self_test+0x9aa>
   8f066:	8b7b      	ldrh	r3, [r7, #26]
   8f068:	b21b      	sxth	r3, r3
   8f06a:	2b1e      	cmp	r3, #30
   8f06c:	dc03      	bgt.n	8f076 <self_test+0x9aa>
							
							{
								status[CL_SELFTEST_RESULT_TEMPSTATUS2] = TEST_PAAS;
   8f06e:	4b63      	ldr	r3, [pc, #396]	; (8f1fc <self_test+0xb30>)
   8f070:	2201      	movs	r2, #1
   8f072:	729a      	strb	r2, [r3, #10]
								break;
   8f074:	e025      	b.n	8f0c2 <self_test+0x9f6>
							}
							
							
							else
							{
								status[CL_SELFTEST_RESULT_TEMPSTATUS2] = TEST_FAIL;
   8f076:	4b61      	ldr	r3, [pc, #388]	; (8f1fc <self_test+0xb30>)
   8f078:	2200      	movs	r2, #0
   8f07a:	729a      	strb	r2, [r3, #10]
								break;
   8f07c:	e021      	b.n	8f0c2 <self_test+0x9f6>
							}
						}
						
							
							if((test_time >= 3))
   8f07e:	4b63      	ldr	r3, [pc, #396]	; (8f20c <self_test+0xb40>)
   8f080:	881b      	ldrh	r3, [r3, #0]
   8f082:	b21b      	sxth	r3, r3
   8f084:	2b02      	cmp	r3, #2
   8f086:	dd1b      	ble.n	8f0c0 <self_test+0x9f4>
							{
								if((Ts3 >= expected_lowertemp3_value)&&(Ts3 <= expected_highertemp3_value) )
   8f088:	8b3b      	ldrh	r3, [r7, #24]
   8f08a:	b21b      	sxth	r3, r3
   8f08c:	2b13      	cmp	r3, #19
   8f08e:	dd0d      	ble.n	8f0ac <self_test+0x9e0>
   8f090:	8b3b      	ldrh	r3, [r7, #24]
   8f092:	b21b      	sxth	r3, r3
   8f094:	2b20      	cmp	r3, #32
   8f096:	dc09      	bgt.n	8f0ac <self_test+0x9e0>
								
								{
									status[CL_SELFTEST_RESULT_TEMPSTATUS3] = TEST_PAAS;
   8f098:	4b58      	ldr	r3, [pc, #352]	; (8f1fc <self_test+0xb30>)
   8f09a:	2201      	movs	r2, #1
   8f09c:	72da      	strb	r2, [r3, #11]
									cl_selfteststate = CL_SELFTEST_STATE_SENSOR_PSTATUS;
   8f09e:	4b58      	ldr	r3, [pc, #352]	; (8f200 <self_test+0xb34>)
   8f0a0:	2211      	movs	r2, #17
   8f0a2:	701a      	strb	r2, [r3, #0]
									test_time = 0;
   8f0a4:	4b59      	ldr	r3, [pc, #356]	; (8f20c <self_test+0xb40>)
   8f0a6:	2200      	movs	r2, #0
   8f0a8:	801a      	strh	r2, [r3, #0]
									break;
   8f0aa:	e00a      	b.n	8f0c2 <self_test+0x9f6>
								}
								
								
								else
								{
									status[CL_SELFTEST_RESULT_TEMPSTATUS3] = TEST_FAIL;
   8f0ac:	4b53      	ldr	r3, [pc, #332]	; (8f1fc <self_test+0xb30>)
   8f0ae:	2200      	movs	r2, #0
   8f0b0:	72da      	strb	r2, [r3, #11]
									cl_selfteststate = CL_SELFTEST_STATE_SENSOR_PSTATUS;
   8f0b2:	4b53      	ldr	r3, [pc, #332]	; (8f200 <self_test+0xb34>)
   8f0b4:	2211      	movs	r2, #17
   8f0b6:	701a      	strb	r2, [r3, #0]
									test_time = 0;
   8f0b8:	4b54      	ldr	r3, [pc, #336]	; (8f20c <self_test+0xb40>)
   8f0ba:	2200      	movs	r2, #0
   8f0bc:	801a      	strh	r2, [r3, #0]
									break;
   8f0be:	e000      	b.n	8f0c2 <self_test+0x9f6>
								}
							}
					}
					break;
   8f0c0:	bf00      	nop
					default:
					break;
		}
		
				break;
   8f0c2:	e1d5      	b.n	8f470 <self_test+0xda4>
				
				case CL_SELFTEST_STATE_SENSOR_PSTATUS:
				switch(cl_selftest_event_type)
   8f0c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8f0c8:	2b07      	cmp	r3, #7
   8f0ca:	d000      	beq.n	8f0ce <self_test+0xa02>
									break;
								}
							}
				}
				break;
						default:break;
   8f0cc:	e08f      	b.n	8f1ee <self_test+0xb22>
				
				case CL_SELFTEST_STATE_SENSOR_PSTATUS:
				switch(cl_selftest_event_type)
				{
					case  EVENT_selftest_TICK_500MS:
					if ((status[CL_SELFTEST_RESULT_PSTATUS1] == TEST_PAAS) && (status[CL_SELFTEST_RESULT_PSTATUS2] == TEST_PAAS) && (status[CL_SELFTEST_RESULT_PSTATUS3] == TEST_PAAS))
   8f0ce:	4b4b      	ldr	r3, [pc, #300]	; (8f1fc <self_test+0xb30>)
   8f0d0:	7b1b      	ldrb	r3, [r3, #12]
   8f0d2:	2b01      	cmp	r3, #1
   8f0d4:	d10b      	bne.n	8f0ee <self_test+0xa22>
   8f0d6:	4b49      	ldr	r3, [pc, #292]	; (8f1fc <self_test+0xb30>)
   8f0d8:	7b5b      	ldrb	r3, [r3, #13]
   8f0da:	2b01      	cmp	r3, #1
   8f0dc:	d107      	bne.n	8f0ee <self_test+0xa22>
   8f0de:	4b47      	ldr	r3, [pc, #284]	; (8f1fc <self_test+0xb30>)
   8f0e0:	7b9b      	ldrb	r3, [r3, #14]
   8f0e2:	2b01      	cmp	r3, #1
   8f0e4:	d103      	bne.n	8f0ee <self_test+0xa22>
					{
						cl_selfteststate = CL_SELFTEST_STATE_SENSOR_CONDSTATUS;
   8f0e6:	4b46      	ldr	r3, [pc, #280]	; (8f200 <self_test+0xb34>)
   8f0e8:	2212      	movs	r2, #18
   8f0ea:	701a      	strb	r2, [r3, #0]
						break;
   8f0ec:	e07f      	b.n	8f1ee <self_test+0xb22>
					}
				else	
				{
					
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS, &Ps_1);
   8f0ee:	f107 0316 	add.w	r3, r7, #22
   8f0f2:	200e      	movs	r0, #14
   8f0f4:	4619      	mov	r1, r3
   8f0f6:	4b43      	ldr	r3, [pc, #268]	; (8f204 <self_test+0xb38>)
   8f0f8:	4798      	blx	r3
		Ps_1=(Ps_1-1000);
   8f0fa:	8afb      	ldrh	r3, [r7, #22]
   8f0fc:	b29b      	uxth	r3, r3
   8f0fe:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   8f102:	b29b      	uxth	r3, r3
   8f104:	b29b      	uxth	r3, r3
   8f106:	82fb      	strh	r3, [r7, #22]
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS, &Ps_2);
   8f108:	f107 0314 	add.w	r3, r7, #20
   8f10c:	200f      	movs	r0, #15
   8f10e:	4619      	mov	r1, r3
   8f110:	4b3c      	ldr	r3, [pc, #240]	; (8f204 <self_test+0xb38>)
   8f112:	4798      	blx	r3
			Ps_2=(Ps_2-1000);
   8f114:	8abb      	ldrh	r3, [r7, #20]
   8f116:	b29b      	uxth	r3, r3
   8f118:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   8f11c:	b29b      	uxth	r3, r3
   8f11e:	b29b      	uxth	r3, r3
   8f120:	82bb      	strh	r3, [r7, #20]
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS, &Ps_3);
   8f122:	f107 0312 	add.w	r3, r7, #18
   8f126:	2010      	movs	r0, #16
   8f128:	4619      	mov	r1, r3
   8f12a:	4b36      	ldr	r3, [pc, #216]	; (8f204 <self_test+0xb38>)
   8f12c:	4798      	blx	r3
			Ps_3=(Ps_3-1000);
   8f12e:	8a7b      	ldrh	r3, [r7, #18]
   8f130:	b29b      	uxth	r3, r3
   8f132:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   8f136:	b29b      	uxth	r3, r3
   8f138:	b29b      	uxth	r3, r3
   8f13a:	827b      	strh	r3, [r7, #18]
			test_time++;
   8f13c:	4b33      	ldr	r3, [pc, #204]	; (8f20c <self_test+0xb40>)
   8f13e:	881b      	ldrh	r3, [r3, #0]
   8f140:	b29b      	uxth	r3, r3
   8f142:	b29b      	uxth	r3, r3
   8f144:	3301      	adds	r3, #1
   8f146:	b29b      	uxth	r3, r3
   8f148:	b29a      	uxth	r2, r3
   8f14a:	4b30      	ldr	r3, [pc, #192]	; (8f20c <self_test+0xb40>)
   8f14c:	801a      	strh	r2, [r3, #0]
			if(test_time == 1)
   8f14e:	4b2f      	ldr	r3, [pc, #188]	; (8f20c <self_test+0xb40>)
   8f150:	881b      	ldrh	r3, [r3, #0]
   8f152:	b21b      	sxth	r3, r3
   8f154:	2b01      	cmp	r3, #1
   8f156:	d110      	bne.n	8f17a <self_test+0xaae>
			{
				if((Ps_1 >= expected_lowerPS1_value)&&(Ps_1<=expected_higherPS1_value) )
   8f158:	8afb      	ldrh	r3, [r7, #22]
   8f15a:	b21b      	sxth	r3, r3
   8f15c:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
   8f160:	db07      	blt.n	8f172 <self_test+0xaa6>
   8f162:	8afb      	ldrh	r3, [r7, #22]
   8f164:	b21b      	sxth	r3, r3
   8f166:	2bc8      	cmp	r3, #200	; 0xc8
   8f168:	dc03      	bgt.n	8f172 <self_test+0xaa6>
			
					{
						status[CL_SELFTEST_RESULT_PSTATUS1] = TEST_PAAS;
   8f16a:	4b24      	ldr	r3, [pc, #144]	; (8f1fc <self_test+0xb30>)
   8f16c:	2201      	movs	r2, #1
   8f16e:	731a      	strb	r2, [r3, #12]
						break;
   8f170:	e03d      	b.n	8f1ee <self_test+0xb22>
					}
					
					
					else
					{
						status[CL_SELFTEST_RESULT_PSTATUS1] = TEST_FAIL;
   8f172:	4b22      	ldr	r3, [pc, #136]	; (8f1fc <self_test+0xb30>)
   8f174:	2200      	movs	r2, #0
   8f176:	731a      	strb	r2, [r3, #12]
						break;
   8f178:	e039      	b.n	8f1ee <self_test+0xb22>
					}
			}
					
					if((test_time == 2) ) 
   8f17a:	4b24      	ldr	r3, [pc, #144]	; (8f20c <self_test+0xb40>)
   8f17c:	881b      	ldrh	r3, [r3, #0]
   8f17e:	b21b      	sxth	r3, r3
   8f180:	2b02      	cmp	r3, #2
   8f182:	d110      	bne.n	8f1a6 <self_test+0xada>
					{
						if((Ps_2 >= expected_lowerPS2_value)&&(Ps_2 <=expected_higherPS2_value) )
   8f184:	8abb      	ldrh	r3, [r7, #20]
   8f186:	b21b      	sxth	r3, r3
   8f188:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
   8f18c:	db07      	blt.n	8f19e <self_test+0xad2>
   8f18e:	8abb      	ldrh	r3, [r7, #20]
   8f190:	b21b      	sxth	r3, r3
   8f192:	2bc8      	cmp	r3, #200	; 0xc8
   8f194:	dc03      	bgt.n	8f19e <self_test+0xad2>
						
						{
							status[CL_SELFTEST_RESULT_PSTATUS2] = TEST_PAAS;
   8f196:	4b19      	ldr	r3, [pc, #100]	; (8f1fc <self_test+0xb30>)
   8f198:	2201      	movs	r2, #1
   8f19a:	735a      	strb	r2, [r3, #13]
							break;
   8f19c:	e027      	b.n	8f1ee <self_test+0xb22>
						}
						
						
						else
						{
							status[CL_SELFTEST_RESULT_PSTATUS2] = TEST_FAIL;
   8f19e:	4b17      	ldr	r3, [pc, #92]	; (8f1fc <self_test+0xb30>)
   8f1a0:	2200      	movs	r2, #0
   8f1a2:	735a      	strb	r2, [r3, #13]
							break;
   8f1a4:	e023      	b.n	8f1ee <self_test+0xb22>
						}
					}
						if((test_time==3) )
   8f1a6:	4b19      	ldr	r3, [pc, #100]	; (8f20c <self_test+0xb40>)
   8f1a8:	881b      	ldrh	r3, [r3, #0]
   8f1aa:	b21b      	sxth	r3, r3
   8f1ac:	2b03      	cmp	r3, #3
   8f1ae:	d11d      	bne.n	8f1ec <self_test+0xb20>
							{
								if((Ps_3 >= expected_lowerPS3_value)&& (Ps_3<=expected_higherPS3_value))
   8f1b0:	8a7b      	ldrh	r3, [r7, #18]
   8f1b2:	b21b      	sxth	r3, r3
   8f1b4:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
   8f1b8:	db0e      	blt.n	8f1d8 <self_test+0xb0c>
   8f1ba:	8a7b      	ldrh	r3, [r7, #18]
   8f1bc:	b21b      	sxth	r3, r3
   8f1be:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   8f1c2:	dc09      	bgt.n	8f1d8 <self_test+0xb0c>
								
								{
									status[CL_SELFTEST_RESULT_PSTATUS3] = TEST_PAAS;
   8f1c4:	4b0d      	ldr	r3, [pc, #52]	; (8f1fc <self_test+0xb30>)
   8f1c6:	2201      	movs	r2, #1
   8f1c8:	739a      	strb	r2, [r3, #14]
									test_time=0;
   8f1ca:	4b10      	ldr	r3, [pc, #64]	; (8f20c <self_test+0xb40>)
   8f1cc:	2200      	movs	r2, #0
   8f1ce:	801a      	strh	r2, [r3, #0]
									cl_selfteststate =  CL_SELFTEST_STATE_SENSOR_CONDSTATUS;
   8f1d0:	4b0b      	ldr	r3, [pc, #44]	; (8f200 <self_test+0xb34>)
   8f1d2:	2212      	movs	r2, #18
   8f1d4:	701a      	strb	r2, [r3, #0]
									break;
   8f1d6:	e00a      	b.n	8f1ee <self_test+0xb22>
								}
								
								
								else
								{
									status[CL_SELFTEST_RESULT_PSTATUS3] = TEST_FAIL;
   8f1d8:	4b08      	ldr	r3, [pc, #32]	; (8f1fc <self_test+0xb30>)
   8f1da:	2200      	movs	r2, #0
   8f1dc:	739a      	strb	r2, [r3, #14]
									test_time=0;
   8f1de:	4b0b      	ldr	r3, [pc, #44]	; (8f20c <self_test+0xb40>)
   8f1e0:	2200      	movs	r2, #0
   8f1e2:	801a      	strh	r2, [r3, #0]
									cl_selfteststate =  CL_SELFTEST_STATE_SENSOR_CONDSTATUS;
   8f1e4:	4b06      	ldr	r3, [pc, #24]	; (8f200 <self_test+0xb34>)
   8f1e6:	2212      	movs	r2, #18
   8f1e8:	701a      	strb	r2, [r3, #0]
									break;
   8f1ea:	e000      	b.n	8f1ee <self_test+0xb22>
								}
							}
				}
				break;
   8f1ec:	bf00      	nop
						default:break;
					
				}
				break;
   8f1ee:	e13f      	b.n	8f470 <self_test+0xda4>
// 						
// 					}
// 					break;
					
							case CL_SELFTEST_STATE_SENSOR_CONDSTATUS:
							switch(cl_selftest_event_type)
   8f1f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8f1f4:	2b07      	cmp	r3, #7
   8f1f6:	d00b      	beq.n	8f210 <self_test+0xb44>
										}
									}
								}
								break;
								default:
								break;
   8f1f8:	e09f      	b.n	8f33a <self_test+0xc6e>
   8f1fa:	bf00      	nop
   8f1fc:	20072760 	.word	0x20072760
   8f200:	20071b1a 	.word	0x20071b1a
   8f204:	0008fd69 	.word	0x0008fd69
   8f208:	51eb851f 	.word	0x51eb851f
   8f20c:	20071b24 	.word	0x20071b24
							case CL_SELFTEST_STATE_SENSOR_CONDSTATUS:
							switch(cl_selftest_event_type)
							{
								
								case  EVENT_selftest_TICK_500MS:
								if ((status[CL_SELFTEST_RESULT_CONDSTATUS1] == TEST_PAAS) && (status[CL_SELFTEST_RESULT_CONDSTATUS2] == TEST_PAAS) && (status[CL_SELFTEST_RESULT_CONDSTATUS3] == TEST_PAAS))
   8f210:	4b9a      	ldr	r3, [pc, #616]	; (8f47c <self_test+0xdb0>)
   8f212:	7bdb      	ldrb	r3, [r3, #15]
   8f214:	2b01      	cmp	r3, #1
   8f216:	d10b      	bne.n	8f230 <self_test+0xb64>
   8f218:	4b98      	ldr	r3, [pc, #608]	; (8f47c <self_test+0xdb0>)
   8f21a:	7c1b      	ldrb	r3, [r3, #16]
   8f21c:	2b01      	cmp	r3, #1
   8f21e:	d107      	bne.n	8f230 <self_test+0xb64>
   8f220:	4b96      	ldr	r3, [pc, #600]	; (8f47c <self_test+0xdb0>)
   8f222:	7c5b      	ldrb	r3, [r3, #17]
   8f224:	2b01      	cmp	r3, #1
   8f226:	d103      	bne.n	8f230 <self_test+0xb64>
								{
									cl_selfteststate = CL_SELFTEST_STATE_SENSOR_VENOUSCLAMP;   //	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&TEMP_DATA.Twobyte);
   8f228:	4b95      	ldr	r3, [pc, #596]	; (8f480 <self_test+0xdb4>)
   8f22a:	2213      	movs	r2, #19
   8f22c:	701a      	strb	r2, [r3, #0]
									break;                                                      //Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&TEMP_DATA.Twobyte)
   8f22e:	e084      	b.n	8f33a <self_test+0xc6e>
								}
								else
								{
									
									Cl_SysStat_GetSensor_Status_Query(SENSOR_ACID_COND, &cs1);//SENSOR_COND_STATUS
   8f230:	f107 0310 	add.w	r3, r7, #16
   8f234:	2022      	movs	r0, #34	; 0x22
   8f236:	4619      	mov	r1, r3
   8f238:	4b92      	ldr	r3, [pc, #584]	; (8f484 <self_test+0xdb8>)
   8f23a:	4798      	blx	r3
									cs1 =cs1/100;
   8f23c:	8a3b      	ldrh	r3, [r7, #16]
   8f23e:	b21b      	sxth	r3, r3
   8f240:	4a91      	ldr	r2, [pc, #580]	; (8f488 <self_test+0xdbc>)
   8f242:	fb82 1203 	smull	r1, r2, r2, r3
   8f246:	1152      	asrs	r2, r2, #5
   8f248:	17db      	asrs	r3, r3, #31
   8f24a:	1ad3      	subs	r3, r2, r3
   8f24c:	b29b      	uxth	r3, r3
   8f24e:	823b      	strh	r3, [r7, #16]
									Cl_SysStat_GetSensor_Status_Query(SENSOR_BICARB_COND, &cs2);
   8f250:	f107 030e 	add.w	r3, r7, #14
   8f254:	2023      	movs	r0, #35	; 0x23
   8f256:	4619      	mov	r1, r3
   8f258:	4b8a      	ldr	r3, [pc, #552]	; (8f484 <self_test+0xdb8>)
   8f25a:	4798      	blx	r3
									cs2=cs2/100;
   8f25c:	89fb      	ldrh	r3, [r7, #14]
   8f25e:	b21b      	sxth	r3, r3
   8f260:	4a89      	ldr	r2, [pc, #548]	; (8f488 <self_test+0xdbc>)
   8f262:	fb82 1203 	smull	r1, r2, r2, r3
   8f266:	1152      	asrs	r2, r2, #5
   8f268:	17db      	asrs	r3, r3, #31
   8f26a:	1ad3      	subs	r3, r2, r3
   8f26c:	b29b      	uxth	r3, r3
   8f26e:	81fb      	strh	r3, [r7, #14]
									Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS, &cs3);
   8f270:	f107 030c 	add.w	r3, r7, #12
   8f274:	2007      	movs	r0, #7
   8f276:	4619      	mov	r1, r3
   8f278:	4b82      	ldr	r3, [pc, #520]	; (8f484 <self_test+0xdb8>)
   8f27a:	4798      	blx	r3
									cs3=cs3/100;
   8f27c:	89bb      	ldrh	r3, [r7, #12]
   8f27e:	b21b      	sxth	r3, r3
   8f280:	4a81      	ldr	r2, [pc, #516]	; (8f488 <self_test+0xdbc>)
   8f282:	fb82 1203 	smull	r1, r2, r2, r3
   8f286:	1152      	asrs	r2, r2, #5
   8f288:	17db      	asrs	r3, r3, #31
   8f28a:	1ad3      	subs	r3, r2, r3
   8f28c:	b29b      	uxth	r3, r3
   8f28e:	81bb      	strh	r3, [r7, #12]
									
									test_time++;
   8f290:	4b7e      	ldr	r3, [pc, #504]	; (8f48c <self_test+0xdc0>)
   8f292:	881b      	ldrh	r3, [r3, #0]
   8f294:	b29b      	uxth	r3, r3
   8f296:	b29b      	uxth	r3, r3
   8f298:	3301      	adds	r3, #1
   8f29a:	b29b      	uxth	r3, r3
   8f29c:	b29a      	uxth	r2, r3
   8f29e:	4b7b      	ldr	r3, [pc, #492]	; (8f48c <self_test+0xdc0>)
   8f2a0:	801a      	strh	r2, [r3, #0]
									if(test_time == 1)
   8f2a2:	4b7a      	ldr	r3, [pc, #488]	; (8f48c <self_test+0xdc0>)
   8f2a4:	881b      	ldrh	r3, [r3, #0]
   8f2a6:	b21b      	sxth	r3, r3
   8f2a8:	2b01      	cmp	r3, #1
   8f2aa:	d10f      	bne.n	8f2cc <self_test+0xc00>
									{
										if((cs1 >= expected_lowercond1_value)&&(cs1 <= expected_highercond1_value) )
   8f2ac:	8a3b      	ldrh	r3, [r7, #16]
   8f2ae:	b21b      	sxth	r3, r3
   8f2b0:	2b00      	cmp	r3, #0
   8f2b2:	db07      	blt.n	8f2c4 <self_test+0xbf8>
   8f2b4:	8a3b      	ldrh	r3, [r7, #16]
   8f2b6:	b21b      	sxth	r3, r3
   8f2b8:	2b05      	cmp	r3, #5
   8f2ba:	dc03      	bgt.n	8f2c4 <self_test+0xbf8>
										
										{
											status[CL_SELFTEST_RESULT_CONDSTATUS1] = TEST_PAAS;
   8f2bc:	4b6f      	ldr	r3, [pc, #444]	; (8f47c <self_test+0xdb0>)
   8f2be:	2201      	movs	r2, #1
   8f2c0:	73da      	strb	r2, [r3, #15]
											break;
   8f2c2:	e03a      	b.n	8f33a <self_test+0xc6e>
										}
										
										
										else
										{
											status[CL_SELFTEST_RESULT_CONDSTATUS1] = TEST_FAIL;
   8f2c4:	4b6d      	ldr	r3, [pc, #436]	; (8f47c <self_test+0xdb0>)
   8f2c6:	2200      	movs	r2, #0
   8f2c8:	73da      	strb	r2, [r3, #15]
											break;
   8f2ca:	e036      	b.n	8f33a <self_test+0xc6e>
										}
									}
									
									if((test_time == 2))
   8f2cc:	4b6f      	ldr	r3, [pc, #444]	; (8f48c <self_test+0xdc0>)
   8f2ce:	881b      	ldrh	r3, [r3, #0]
   8f2d0:	b21b      	sxth	r3, r3
   8f2d2:	2b02      	cmp	r3, #2
   8f2d4:	d10f      	bne.n	8f2f6 <self_test+0xc2a>
									{
										if((cs2 >= expected_lowercond2_value)&&(cs2 <= expected_highercond2_value) )
   8f2d6:	89fb      	ldrh	r3, [r7, #14]
   8f2d8:	b21b      	sxth	r3, r3
   8f2da:	2b00      	cmp	r3, #0
   8f2dc:	db07      	blt.n	8f2ee <self_test+0xc22>
   8f2de:	89fb      	ldrh	r3, [r7, #14]
   8f2e0:	b21b      	sxth	r3, r3
   8f2e2:	2b05      	cmp	r3, #5
   8f2e4:	dc03      	bgt.n	8f2ee <self_test+0xc22>
										
										{
											status[CL_SELFTEST_RESULT_CONDSTATUS2] = TEST_PAAS;
   8f2e6:	4b65      	ldr	r3, [pc, #404]	; (8f47c <self_test+0xdb0>)
   8f2e8:	2201      	movs	r2, #1
   8f2ea:	741a      	strb	r2, [r3, #16]
											break;
   8f2ec:	e025      	b.n	8f33a <self_test+0xc6e>
										}
										
										
										else
										{
											status[CL_SELFTEST_RESULT_CONDSTATUS2] = TEST_FAIL;
   8f2ee:	4b63      	ldr	r3, [pc, #396]	; (8f47c <self_test+0xdb0>)
   8f2f0:	2200      	movs	r2, #0
   8f2f2:	741a      	strb	r2, [r3, #16]
											break;
   8f2f4:	e021      	b.n	8f33a <self_test+0xc6e>
										}
									}
									
									
									if((test_time >= 3))
   8f2f6:	4b65      	ldr	r3, [pc, #404]	; (8f48c <self_test+0xdc0>)
   8f2f8:	881b      	ldrh	r3, [r3, #0]
   8f2fa:	b21b      	sxth	r3, r3
   8f2fc:	2b02      	cmp	r3, #2
   8f2fe:	dd1b      	ble.n	8f338 <self_test+0xc6c>
									{
										if((cs3 >= expected_lowercond3_value)&&(cs3 <= expected_highercond3_value) )
   8f300:	89bb      	ldrh	r3, [r7, #12]
   8f302:	b21b      	sxth	r3, r3
   8f304:	2b00      	cmp	r3, #0
   8f306:	db0d      	blt.n	8f324 <self_test+0xc58>
   8f308:	89bb      	ldrh	r3, [r7, #12]
   8f30a:	b21b      	sxth	r3, r3
   8f30c:	2b05      	cmp	r3, #5
   8f30e:	dc09      	bgt.n	8f324 <self_test+0xc58>
										
										{
											status[CL_SELFTEST_RESULT_CONDSTATUS3] = TEST_PAAS;
   8f310:	4b5a      	ldr	r3, [pc, #360]	; (8f47c <self_test+0xdb0>)
   8f312:	2201      	movs	r2, #1
   8f314:	745a      	strb	r2, [r3, #17]
											cl_selfteststate = CL_SELFTEST_STATE_SENSOR_VENOUSCLAMP;
   8f316:	4b5a      	ldr	r3, [pc, #360]	; (8f480 <self_test+0xdb4>)
   8f318:	2213      	movs	r2, #19
   8f31a:	701a      	strb	r2, [r3, #0]
											test_time = 0;
   8f31c:	4b5b      	ldr	r3, [pc, #364]	; (8f48c <self_test+0xdc0>)
   8f31e:	2200      	movs	r2, #0
   8f320:	801a      	strh	r2, [r3, #0]
											break;
   8f322:	e00a      	b.n	8f33a <self_test+0xc6e>
										}
										
										
										else
										{
											status[CL_SELFTEST_RESULT_CONDSTATUS3] = TEST_FAIL;
   8f324:	4b55      	ldr	r3, [pc, #340]	; (8f47c <self_test+0xdb0>)
   8f326:	2200      	movs	r2, #0
   8f328:	745a      	strb	r2, [r3, #17]
											cl_selfteststate = CL_SELFTEST_STATE_SENSOR_VENOUSCLAMP;
   8f32a:	4b55      	ldr	r3, [pc, #340]	; (8f480 <self_test+0xdb4>)
   8f32c:	2213      	movs	r2, #19
   8f32e:	701a      	strb	r2, [r3, #0]
											test_time = 0;
   8f330:	4b56      	ldr	r3, [pc, #344]	; (8f48c <self_test+0xdc0>)
   8f332:	2200      	movs	r2, #0
   8f334:	801a      	strh	r2, [r3, #0]
											break;
   8f336:	e000      	b.n	8f33a <self_test+0xc6e>
										}
									}
								}
								break;
   8f338:	bf00      	nop
								default:
								break;
							}
							
							break;
   8f33a:	e099      	b.n	8f470 <self_test+0xda4>
							
							case CL_SELFTEST_STATE_SENSOR_VENOUSCLAMP:
							switch(cl_selftest_event_type)
   8f33c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8f340:	2b05      	cmp	r3, #5
   8f342:	d000      	beq.n	8f346 <self_test+0xc7a>
									
									cl_selfteststate = CL_SELFTEST_STATE_VENOUSCLAMP_STATUS;
									break;
								}
								break;
								default:break;
   8f344:	e012      	b.n	8f36c <self_test+0xca0>
							
							case CL_SELFTEST_STATE_SENSOR_VENOUSCLAMP:
							switch(cl_selftest_event_type)
							{
								case EVENT_selftest_TICK_50MS:
								if (status[CL_SELFTEST_RESULT_VENOUSCLAMP] == TEST_PAAS)
   8f346:	4b4d      	ldr	r3, [pc, #308]	; (8f47c <self_test+0xdb0>)
   8f348:	7c9b      	ldrb	r3, [r3, #18]
   8f34a:	2b01      	cmp	r3, #1
   8f34c:	d106      	bne.n	8f35c <self_test+0xc90>
								{
									cl_selfteststate = CL_SELFTEST_STATE_COMPLETED;
   8f34e:	4b4c      	ldr	r3, [pc, #304]	; (8f480 <self_test+0xdb4>)
   8f350:	2217      	movs	r2, #23
   8f352:	701a      	strb	r2, [r3, #0]
									 Cl_mac_apprequesthandler(MACREQ_SELFTEST_COMPLETED);
   8f354:	2065      	movs	r0, #101	; 0x65
   8f356:	4b4e      	ldr	r3, [pc, #312]	; (8f490 <self_test+0xdc4>)
   8f358:	4798      	blx	r3
									break;
   8f35a:	e007      	b.n	8f36c <self_test+0xca0>
								}
								else{
								/*	Cl_SysStat_GetSensor_Status_Query(SENSOR_VC_F_B,&v_C );*/
									sv_cntrl_activatevenousclamp();
   8f35c:	4b4d      	ldr	r3, [pc, #308]	; (8f494 <self_test+0xdc8>)
   8f35e:	4798      	blx	r3
									v_C =0;
   8f360:	2300      	movs	r3, #0
   8f362:	817b      	strh	r3, [r7, #10]

									
									
									cl_selfteststate = CL_SELFTEST_STATE_VENOUSCLAMP_STATUS;
   8f364:	4b46      	ldr	r3, [pc, #280]	; (8f480 <self_test+0xdb4>)
   8f366:	2214      	movs	r2, #20
   8f368:	701a      	strb	r2, [r3, #0]
									break;
   8f36a:	bf00      	nop
								}
								break;
								default:break;
								
							}
							break;
   8f36c:	e080      	b.n	8f470 <self_test+0xda4>
					
		           case CL_SELFTEST_STATE_VENOUSCLAMP_STATUS:
		           switch(cl_selftest_event_type)
   8f36e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8f372:	2b08      	cmp	r3, #8
   8f374:	d000      	beq.n	8f378 <self_test+0xcac>

			          
			           
			          
			           break;
			           default:break;
   8f376:	e032      	b.n	8f3de <self_test+0xd12>
		           case CL_SELFTEST_STATE_VENOUSCLAMP_STATUS:
		           switch(cl_selftest_event_type)
		           {
			           case EVENT_selftest_TICK_SECOND:
                    
					   test_time++;
   8f378:	4b44      	ldr	r3, [pc, #272]	; (8f48c <self_test+0xdc0>)
   8f37a:	881b      	ldrh	r3, [r3, #0]
   8f37c:	b29b      	uxth	r3, r3
   8f37e:	b29b      	uxth	r3, r3
   8f380:	3301      	adds	r3, #1
   8f382:	b29b      	uxth	r3, r3
   8f384:	b29a      	uxth	r2, r3
   8f386:	4b41      	ldr	r3, [pc, #260]	; (8f48c <self_test+0xdc0>)
   8f388:	801a      	strh	r2, [r3, #0]
					   if(test_time=2)
   8f38a:	4b40      	ldr	r3, [pc, #256]	; (8f48c <self_test+0xdc0>)
   8f38c:	2202      	movs	r2, #2
   8f38e:	801a      	strh	r2, [r3, #0]

			          Cl_SysStat_GetSensor_Status_Query(SENSOR_VC_F_B,&v_C );    //for venous
   8f390:	f107 030a 	add.w	r3, r7, #10
   8f394:	2025      	movs	r0, #37	; 0x25
   8f396:	4619      	mov	r1, r3
   8f398:	4b3a      	ldr	r3, [pc, #232]	; (8f484 <self_test+0xdb8>)
   8f39a:	4798      	blx	r3
					   if(v_C==1)
   8f39c:	897b      	ldrh	r3, [r7, #10]
   8f39e:	2b01      	cmp	r3, #1
   8f3a0:	d10e      	bne.n	8f3c0 <self_test+0xcf4>
					   {
						  status[CL_SELFTEST_RESULT_VENOUSCLAMP] = TEST_PAAS; 
   8f3a2:	4b36      	ldr	r3, [pc, #216]	; (8f47c <self_test+0xdb0>)
   8f3a4:	2201      	movs	r2, #1
   8f3a6:	749a      	strb	r2, [r3, #18]
						     sv_cntrl_deactivatevenousclamp();
   8f3a8:	4b3b      	ldr	r3, [pc, #236]	; (8f498 <self_test+0xdcc>)
   8f3aa:	4798      	blx	r3
 						   Cl_mac_apprequesthandler(MACREQ_SELFTEST_COMPLETED);
   8f3ac:	2065      	movs	r0, #101	; 0x65
   8f3ae:	4b38      	ldr	r3, [pc, #224]	; (8f490 <self_test+0xdc4>)
   8f3b0:	4798      	blx	r3
						
						   cl_selfteststate = CL_SELFTEST_STATE_COMPLETED;
   8f3b2:	4b33      	ldr	r3, [pc, #204]	; (8f480 <self_test+0xdb4>)
   8f3b4:	2217      	movs	r2, #23
   8f3b6:	701a      	strb	r2, [r3, #0]
						    test_time =0;
   8f3b8:	4b34      	ldr	r3, [pc, #208]	; (8f48c <self_test+0xdc0>)
   8f3ba:	2200      	movs	r2, #0
   8f3bc:	801a      	strh	r2, [r3, #0]
						  break;
   8f3be:	e00e      	b.n	8f3de <self_test+0xd12>
						  
					   }
					   else
					   {
						   status[CL_SELFTEST_RESULT_VENOUSCLAMP] = TEST_FAIL;
   8f3c0:	4b2e      	ldr	r3, [pc, #184]	; (8f47c <self_test+0xdb0>)
   8f3c2:	2200      	movs	r2, #0
   8f3c4:	749a      	strb	r2, [r3, #18]
						   sv_cntrl_deactivatevenousclamp(); 
   8f3c6:	4b34      	ldr	r3, [pc, #208]	; (8f498 <self_test+0xdcc>)
   8f3c8:	4798      	blx	r3
						    Cl_mac_apprequesthandler(MACREQ_SELFTEST_COMPLETED);
   8f3ca:	2065      	movs	r0, #101	; 0x65
   8f3cc:	4b30      	ldr	r3, [pc, #192]	; (8f490 <self_test+0xdc4>)
   8f3ce:	4798      	blx	r3
							
							   cl_selfteststate =CL_SELFTEST_STATE_COMPLETED;
   8f3d0:	4b2b      	ldr	r3, [pc, #172]	; (8f480 <self_test+0xdb4>)
   8f3d2:	2217      	movs	r2, #23
   8f3d4:	701a      	strb	r2, [r3, #0]
							    test_time =0;
   8f3d6:	4b2d      	ldr	r3, [pc, #180]	; (8f48c <self_test+0xdc0>)
   8f3d8:	2200      	movs	r2, #0
   8f3da:	801a      	strh	r2, [r3, #0]
						   break;
   8f3dc:	bf00      	nop
			          
			           break;
			           default:break;
			           
		           }
				   break;
   8f3de:	e047      	b.n	8f470 <self_test+0xda4>
		   
		 case CL_SELFTEST_STATE_COMPLETED:
		 switch(cl_selftest_event_type)
   8f3e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8f3e4:	2b04      	cmp	r3, #4
   8f3e6:	d002      	beq.n	8f3ee <self_test+0xd22>
   8f3e8:	2b06      	cmp	r3, #6
   8f3ea:	d03f      	beq.n	8f46c <self_test+0xda0>
					 }
				 }
				 
               break;
			// }
			 default:break;
   8f3ec:	e03f      	b.n	8f46e <self_test+0xda2>
		 {
			 case EVENT_selftest_TICK_100MS:
			 break;
			 case EVENT_selftest_COMPLETED:
			// {
				 command = CON_TX_COMMAND_SELFTEST_REPORT;
   8f3ee:	2355      	movs	r3, #85	; 0x55
   8f3f0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				 Cl_selftestretcode = Cl_SendDatatoconsole(command,&status,19);
   8f3f4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
   8f3f8:	4618      	mov	r0, r3
   8f3fa:	4920      	ldr	r1, [pc, #128]	; (8f47c <self_test+0xdb0>)
   8f3fc:	2213      	movs	r2, #19
   8f3fe:	4b27      	ldr	r3, [pc, #156]	; (8f49c <self_test+0xdd0>)
   8f400:	4798      	blx	r3
   8f402:	4603      	mov	r3, r0
   8f404:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				 
				 for(int16_t i=0;i<CL_SELFTEST_RESULT_MAXSTATE;i++)
   8f408:	2300      	movs	r3, #0
   8f40a:	87fb      	strh	r3, [r7, #62]	; 0x3e
   8f40c:	e029      	b.n	8f462 <self_test+0xd96>
				 {
					 if (status[i]== 0)
   8f40e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
   8f412:	4a1a      	ldr	r2, [pc, #104]	; (8f47c <self_test+0xdb0>)
   8f414:	5cd3      	ldrb	r3, [r2, r3]
   8f416:	2b00      	cmp	r3, #0
   8f418:	d10f      	bne.n	8f43a <self_test+0xd6e>
					 {
					 	command = CON_TX_COMMAND_SELFTEST_FAILED;
   8f41a:	2354      	movs	r3, #84	; 0x54
   8f41c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
					 	Cl_selftestretcode = Cl_SendDatatoconsole(command,&data,0);
   8f420:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
   8f424:	f107 0327 	add.w	r3, r7, #39	; 0x27
   8f428:	4610      	mov	r0, r2
   8f42a:	4619      	mov	r1, r3
   8f42c:	2200      	movs	r2, #0
   8f42e:	4b1b      	ldr	r3, [pc, #108]	; (8f49c <self_test+0xdd0>)
   8f430:	4798      	blx	r3
   8f432:	4603      	mov	r3, r0
   8f434:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
						 break;
   8f438:	e017      	b.n	8f46a <self_test+0xd9e>
					 }
					 
					 else
					 {
						 command = CON_TX_COMMAND_SELFTEST_PASSED;
   8f43a:	2353      	movs	r3, #83	; 0x53
   8f43c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
						 Cl_selftestretcode = Cl_SendDatatoconsole(command,&data,0);
   8f440:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
   8f444:	f107 0327 	add.w	r3, r7, #39	; 0x27
   8f448:	4610      	mov	r0, r2
   8f44a:	4619      	mov	r1, r3
   8f44c:	2200      	movs	r2, #0
   8f44e:	4b13      	ldr	r3, [pc, #76]	; (8f49c <self_test+0xdd0>)
   8f450:	4798      	blx	r3
   8f452:	4603      	mov	r3, r0
   8f454:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			 case EVENT_selftest_COMPLETED:
			// {
				 command = CON_TX_COMMAND_SELFTEST_REPORT;
				 Cl_selftestretcode = Cl_SendDatatoconsole(command,&status,19);
				 
				 for(int16_t i=0;i<CL_SELFTEST_RESULT_MAXSTATE;i++)
   8f458:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
   8f45a:	b29b      	uxth	r3, r3
   8f45c:	3301      	adds	r3, #1
   8f45e:	b29b      	uxth	r3, r3
   8f460:	87fb      	strh	r3, [r7, #62]	; 0x3e
   8f462:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
   8f466:	2b12      	cmp	r3, #18
   8f468:	ddd1      	ble.n	8f40e <self_test+0xd42>
						 command = CON_TX_COMMAND_SELFTEST_PASSED;
						 Cl_selftestretcode = Cl_SendDatatoconsole(command,&data,0);
					 }
				 }
				 
               break;
   8f46a:	e000      	b.n	8f46e <self_test+0xda2>
		   
		 case CL_SELFTEST_STATE_COMPLETED:
		 switch(cl_selftest_event_type)
		 {
			 case EVENT_selftest_TICK_100MS:
			 break;
   8f46c:	bf00      	nop
			// }
			 default:break;
			 
		 }
		
      default:break;
   8f46e:	bf00      	nop
		
		
					
	
	}	
	return CL_OK;
   8f470:	2300      	movs	r3, #0
		
	}
   8f472:	4618      	mov	r0, r3
   8f474:	3740      	adds	r7, #64	; 0x40
   8f476:	46bd      	mov	sp, r7
   8f478:	bd80      	pop	{r7, pc}
   8f47a:	bf00      	nop
   8f47c:	20072760 	.word	0x20072760
   8f480:	20071b1a 	.word	0x20071b1a
   8f484:	0008fd69 	.word	0x0008fd69
   8f488:	51eb851f 	.word	0x51eb851f
   8f48c:	20071b24 	.word	0x20071b24
   8f490:	0008bbb9 	.word	0x0008bbb9
   8f494:	0009b535 	.word	0x0009b535
   8f498:	0009b549 	.word	0x0009b549
   8f49c:	0009d1e9 	.word	0x0009d1e9

0008f4a0 <cl_selftest_translatemacevent>:
		
		
		
	
	Cl_ReturnCodeType cl_selftest_translatemacevent(Cl_Mac_EventsType Cl_MacselftestEvent,cl_selftest_event* cl_selftest_event_type) 
	{
   8f4a0:	b480      	push	{r7}
   8f4a2:	b083      	sub	sp, #12
   8f4a4:	af00      	add	r7, sp, #0
   8f4a6:	4603      	mov	r3, r0
   8f4a8:	6039      	str	r1, [r7, #0]
   8f4aa:	71fb      	strb	r3, [r7, #7]
		switch(Cl_MacselftestEvent)
   8f4ac:	79fb      	ldrb	r3, [r7, #7]
   8f4ae:	3b38      	subs	r3, #56	; 0x38
   8f4b0:	2b2f      	cmp	r3, #47	; 0x2f
   8f4b2:	f200 808f 	bhi.w	8f5d4 <cl_selftest_translatemacevent+0x134>
   8f4b6:	a201      	add	r2, pc, #4	; (adr r2, 8f4bc <cl_selftest_translatemacevent+0x1c>)
   8f4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8f4bc:	0008f5ad 	.word	0x0008f5ad
   8f4c0:	0008f5b5 	.word	0x0008f5b5
   8f4c4:	0008f5bd 	.word	0x0008f5bd
   8f4c8:	0008f5c5 	.word	0x0008f5c5
   8f4cc:	0008f5cd 	.word	0x0008f5cd
   8f4d0:	0008f5d5 	.word	0x0008f5d5
   8f4d4:	0008f5d5 	.word	0x0008f5d5
   8f4d8:	0008f5d5 	.word	0x0008f5d5
   8f4dc:	0008f5d5 	.word	0x0008f5d5
   8f4e0:	0008f5d5 	.word	0x0008f5d5
   8f4e4:	0008f5d5 	.word	0x0008f5d5
   8f4e8:	0008f5d5 	.word	0x0008f5d5
   8f4ec:	0008f5d5 	.word	0x0008f5d5
   8f4f0:	0008f5d5 	.word	0x0008f5d5
   8f4f4:	0008f5d5 	.word	0x0008f5d5
   8f4f8:	0008f5d5 	.word	0x0008f5d5
   8f4fc:	0008f5d5 	.word	0x0008f5d5
   8f500:	0008f5d5 	.word	0x0008f5d5
   8f504:	0008f5d5 	.word	0x0008f5d5
   8f508:	0008f5d5 	.word	0x0008f5d5
   8f50c:	0008f5d5 	.word	0x0008f5d5
   8f510:	0008f5d5 	.word	0x0008f5d5
   8f514:	0008f5d5 	.word	0x0008f5d5
   8f518:	0008f5d5 	.word	0x0008f5d5
   8f51c:	0008f5d5 	.word	0x0008f5d5
   8f520:	0008f5d5 	.word	0x0008f5d5
   8f524:	0008f5d5 	.word	0x0008f5d5
   8f528:	0008f5d5 	.word	0x0008f5d5
   8f52c:	0008f5d5 	.word	0x0008f5d5
   8f530:	0008f5d5 	.word	0x0008f5d5
   8f534:	0008f5d5 	.word	0x0008f5d5
   8f538:	0008f5d5 	.word	0x0008f5d5
   8f53c:	0008f5d5 	.word	0x0008f5d5
   8f540:	0008f5d5 	.word	0x0008f5d5
   8f544:	0008f5d5 	.word	0x0008f5d5
   8f548:	0008f5d5 	.word	0x0008f5d5
   8f54c:	0008f5d5 	.word	0x0008f5d5
   8f550:	0008f5d5 	.word	0x0008f5d5
   8f554:	0008f5d5 	.word	0x0008f5d5
   8f558:	0008f5d5 	.word	0x0008f5d5
   8f55c:	0008f5d5 	.word	0x0008f5d5
   8f560:	0008f5d5 	.word	0x0008f5d5
   8f564:	0008f57d 	.word	0x0008f57d
   8f568:	0008f585 	.word	0x0008f585
   8f56c:	0008f58d 	.word	0x0008f58d
   8f570:	0008f5a5 	.word	0x0008f5a5
   8f574:	0008f59d 	.word	0x0008f59d
   8f578:	0008f595 	.word	0x0008f595
		{

			
			case  EVT_CONSOLE_COMMAND_SELFTEST_START:
			*cl_selftest_event_type = EVENT_start_selftest;
   8f57c:	683b      	ldr	r3, [r7, #0]
   8f57e:	2201      	movs	r2, #1
   8f580:	701a      	strb	r2, [r3, #0]
			break;
   8f582:	e028      	b.n	8f5d6 <cl_selftest_translatemacevent+0x136>
			
			case EVT_COSOLE_COMMAND_SELFTEST_ALARM_PAAS:
			*cl_selftest_event_type =EVENT_selftest_ALARM_PAAS;
   8f584:	683b      	ldr	r3, [r7, #0]
   8f586:	220a      	movs	r2, #10
   8f588:	701a      	strb	r2, [r3, #0]
			break;
   8f58a:	e024      	b.n	8f5d6 <cl_selftest_translatemacevent+0x136>
			case EVT_COSOLE_COMMAND_SELFTEST_ALARM_FAIL:
		    *cl_selftest_event_type =EVENT_selftest_ALARM_FAIL;
   8f58c:	683b      	ldr	r3, [r7, #0]
   8f58e:	220b      	movs	r2, #11
   8f590:	701a      	strb	r2, [r3, #0]
		    break;
   8f592:	e020      	b.n	8f5d6 <cl_selftest_translatemacevent+0x136>
			
			case EVT_CONSOLE_COMMAND_SYNCCONFIRMED:
			 *cl_selftest_event_type =EVENT_selftest_SYNC_ACK;
   8f594:	683b      	ldr	r3, [r7, #0]
   8f596:	220c      	movs	r2, #12
   8f598:	701a      	strb	r2, [r3, #0]
			 break;
   8f59a:	e01c      	b.n	8f5d6 <cl_selftest_translatemacevent+0x136>
			case EVT_CONSOLE_COMMAND_SELFTEST_STOP:
			*cl_selftest_event_type = EVENT_STOP_selftest;
   8f59c:	683b      	ldr	r3, [r7, #0]
   8f59e:	2202      	movs	r2, #2
   8f5a0:	701a      	strb	r2, [r3, #0]
			break;
   8f5a2:	e018      	b.n	8f5d6 <cl_selftest_translatemacevent+0x136>
			case MACREQ_SELFTEST_COMPLETED:
			*cl_selftest_event_type = EVENT_selftest_COMPLETED;
   8f5a4:	683b      	ldr	r3, [r7, #0]
   8f5a6:	2204      	movs	r2, #4
   8f5a8:	701a      	strb	r2, [r3, #0]
			break;
   8f5aa:	e014      	b.n	8f5d6 <cl_selftest_translatemacevent+0x136>
			
			
			case EVT_TICK_50M:
			*cl_selftest_event_type =   EVENT_selftest_TICK_50MS;
   8f5ac:	683b      	ldr	r3, [r7, #0]
   8f5ae:	2205      	movs	r2, #5
   8f5b0:	701a      	strb	r2, [r3, #0]
			break;
   8f5b2:	e010      	b.n	8f5d6 <cl_selftest_translatemacevent+0x136>
			break;
			case EVT_TICK_100M:
			*cl_selftest_event_type =  EVENT_selftest_TICK_100MS;
   8f5b4:	683b      	ldr	r3, [r7, #0]
   8f5b6:	2206      	movs	r2, #6
   8f5b8:	701a      	strb	r2, [r3, #0]
			break;
   8f5ba:	e00c      	b.n	8f5d6 <cl_selftest_translatemacevent+0x136>
			case EVT_TICK_500M:
			*cl_selftest_event_type =   EVENT_selftest_TICK_500MS;
   8f5bc:	683b      	ldr	r3, [r7, #0]
   8f5be:	2207      	movs	r2, #7
   8f5c0:	701a      	strb	r2, [r3, #0]
			break;
   8f5c2:	e008      	b.n	8f5d6 <cl_selftest_translatemacevent+0x136>
			case EVT_TICK_SEC:
			*cl_selftest_event_type =  EVENT_selftest_TICK_SECOND;
   8f5c4:	683b      	ldr	r3, [r7, #0]
   8f5c6:	2208      	movs	r2, #8
   8f5c8:	701a      	strb	r2, [r3, #0]
			break;
   8f5ca:	e004      	b.n	8f5d6 <cl_selftest_translatemacevent+0x136>
			case EVT_TICK_MIN:
			*cl_selftest_event_type =   EVENT_selftest_TICK_MINUTE;
   8f5cc:	683b      	ldr	r3, [r7, #0]
   8f5ce:	2209      	movs	r2, #9
   8f5d0:	701a      	strb	r2, [r3, #0]
			break;
   8f5d2:	e000      	b.n	8f5d6 <cl_selftest_translatemacevent+0x136>
			default:
			break;
   8f5d4:	bf00      	nop
		}
		return CL_OK;
   8f5d6:	2300      	movs	r3, #0
	}	
   8f5d8:	4618      	mov	r0, r3
   8f5da:	370c      	adds	r7, #12
   8f5dc:	46bd      	mov	sp, r7
   8f5de:	f85d 7b04 	ldr.w	r7, [sp], #4
   8f5e2:	4770      	bx	lr

0008f5e4 <Cl_selftest_init>:
	
	
	
	
	Cl_ReturnCodeType Cl_selftest_init(void)
	{
   8f5e4:	b480      	push	{r7}
   8f5e6:	af00      	add	r7, sp, #0
		
		cl_selfteststate = CL_SELFTEST_STATE_IDLE;
   8f5e8:	4b05      	ldr	r3, [pc, #20]	; (8f600 <Cl_selftest_init+0x1c>)
   8f5ea:	2200      	movs	r2, #0
   8f5ec:	701a      	strb	r2, [r3, #0]

		//cl_isouf_event = EVENT_NULL_EVENT;
		
		selftest_second_counter=0 ;
   8f5ee:	4b05      	ldr	r3, [pc, #20]	; (8f604 <Cl_selftest_init+0x20>)
   8f5f0:	2200      	movs	r2, #0
   8f5f2:	801a      	strh	r2, [r3, #0]
		return CL_OK;
   8f5f4:	2300      	movs	r3, #0
	}
   8f5f6:	4618      	mov	r0, r3
   8f5f8:	46bd      	mov	sp, r7
   8f5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   8f5fe:	4770      	bx	lr
   8f600:	20071b1a 	.word	0x20071b1a
   8f604:	20071b26 	.word	0x20071b26

0008f608 <Cl_SysStat_System_Status_Query>:
float avgcond = 0;
extern uint16_t update_RC;                                             // Gopal: used to transmit RC to propo in event manager and is being printed here
static float Average_T1 =0,Average_T2 =0,Average_T3 =0;
//float PS1_bar =0,PS2_bar =0,PS3_bar =0 , Apt_bar = 0 , Vpt_bar = 0;  // manav02 added apt and vpt
Cl_ReturnCodeType 		Cl_SysStat_System_Status_Query(void)
{
   8f608:	b590      	push	{r4, r7, lr}
   8f60a:	b09f      	sub	sp, #124	; 0x7c
   8f60c:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType RetVal;
	Sys_statusType sv_sys_statbuffer;
	int16_t temp,temp1, raw_data =0, cal_temp =0 ;
   8f60e:	2300      	movs	r3, #0
   8f610:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
   8f614:	2300      	movs	r3, #0
   8f616:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	float conductivity_CS3 = 0,conductivity_CS2 =0, conductivity_CS1=0,avg_CS2=0 ;
   8f61a:	f04f 0300 	mov.w	r3, #0
   8f61e:	673b      	str	r3, [r7, #112]	; 0x70
   8f620:	f04f 0300 	mov.w	r3, #0
   8f624:	66fb      	str	r3, [r7, #108]	; 0x6c
   8f626:	f04f 0300 	mov.w	r3, #0
   8f62a:	66bb      	str	r3, [r7, #104]	; 0x68
   8f62c:	f04f 0300 	mov.w	r3, #0
   8f630:	667b      	str	r3, [r7, #100]	; 0x64
	
	 RetVal = cl_memset((Cl_Uint8Type*)&sv_sys_statbuffer , sizeof(sv_sys_statbuffer)) ;
   8f632:	463b      	mov	r3, r7
   8f634:	4618      	mov	r0, r3
   8f636:	2162      	movs	r1, #98	; 0x62
   8f638:	4b97      	ldr	r3, [pc, #604]	; (8f898 <Cl_SysStat_System_Status_Query+0x290>)
   8f63a:	4798      	blx	r3
   8f63c:	4603      	mov	r3, r0
   8f63e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	 #ifndef PLATFORMSTUB
	 cl_sys_statbuffer.FPcurrentstatus = 1;
   8f642:	4b96      	ldr	r3, [pc, #600]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f644:	2201      	movs	r2, #1
   8f646:	839a      	strh	r2, [r3, #28]
	 cl_sys_statbuffer.DGPstatus = 1;
   8f648:	4b94      	ldr	r3, [pc, #592]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f64a:	2201      	movs	r2, #1
   8f64c:	83da      	strh	r2, [r3, #30]


	sv_status_getsystemstatus(&sv_sys_statbuffer);
   8f64e:	463b      	mov	r3, r7
   8f650:	4618      	mov	r0, r3
   8f652:	4b93      	ldr	r3, [pc, #588]	; (8f8a0 <Cl_SysStat_System_Status_Query+0x298>)
   8f654:	4798      	blx	r3

	cl_sys_statbuffer.cond_wien_status = sv_sys_statbuffer.cond_wien_status;
   8f656:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
   8f658:	4b90      	ldr	r3, [pc, #576]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f65a:	875a      	strh	r2, [r3, #58]	; 0x3a
	cl_sys_statbuffer.abdstatus = sv_sys_statbuffer.abdstatus;
   8f65c:	8b7a      	ldrh	r2, [r7, #26]
   8f65e:	4b8f      	ldr	r3, [pc, #572]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f660:	831a      	strh	r2, [r3, #24]
	if(sv_sys_statbuffer.aptstatus > 0  && sv_sys_statbuffer.aptstatus < 65535)
   8f662:	8a3b      	ldrh	r3, [r7, #16]
   8f664:	2b00      	cmp	r3, #0
   8f666:	d007      	beq.n	8f678 <Cl_SysStat_System_Status_Query+0x70>
   8f668:	8a3b      	ldrh	r3, [r7, #16]
   8f66a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8f66e:	4293      	cmp	r3, r2
   8f670:	d002      	beq.n	8f678 <Cl_SysStat_System_Status_Query+0x70>
	cl_sys_statbuffer.aptstatus = sv_sys_statbuffer.aptstatus;
   8f672:	8a3a      	ldrh	r2, [r7, #16]
   8f674:	4b89      	ldr	r3, [pc, #548]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f676:	821a      	strh	r2, [r3, #16]
	if(sv_sys_statbuffer.vptstatus > 0 && sv_sys_statbuffer.vptstatus < 65535)
   8f678:	8a7b      	ldrh	r3, [r7, #18]
   8f67a:	2b00      	cmp	r3, #0
   8f67c:	d007      	beq.n	8f68e <Cl_SysStat_System_Status_Query+0x86>
   8f67e:	8a7b      	ldrh	r3, [r7, #18]
   8f680:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8f684:	4293      	cmp	r3, r2
   8f686:	d002      	beq.n	8f68e <Cl_SysStat_System_Status_Query+0x86>
	cl_sys_statbuffer.vptstatus = sv_sys_statbuffer.vptstatus;
   8f688:	8a7a      	ldrh	r2, [r7, #18]
   8f68a:	4b84      	ldr	r3, [pc, #528]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f68c:	825a      	strh	r2, [r3, #18]
	cl_sys_statbuffer.bdstatus = sv_sys_statbuffer.bdstatus;
   8f68e:	8b3a      	ldrh	r2, [r7, #24]
   8f690:	4b82      	ldr	r3, [pc, #520]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f692:	835a      	strh	r2, [r3, #26]
	cl_sys_statbuffer.BP_ON_OFF = sv_sys_statbuffer.BP_ON_OFF;
   8f694:	893a      	ldrh	r2, [r7, #8]
   8f696:	4b81      	ldr	r3, [pc, #516]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f698:	811a      	strh	r2, [r3, #8]
	cl_sys_statbuffer.bldstatus = sv_sys_statbuffer.bldstatus;
   8f69a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
   8f69e:	4b7f      	ldr	r3, [pc, #508]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f6a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	cl_sys_statbuffer.BPstatus = sv_sys_statbuffer.BPstatus;
   8f6a4:	887a      	ldrh	r2, [r7, #2]
   8f6a6:	4b7d      	ldr	r3, [pc, #500]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f6a8:	805a      	strh	r2, [r3, #2]
	cl_sys_statbuffer.cond_status = sv_sys_statbuffer.cond_status;
   8f6aa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
   8f6ac:	4b7b      	ldr	r3, [pc, #492]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f6ae:	86da      	strh	r2, [r3, #54]	; 0x36
	cl_sys_statbuffer.cond_status_dac = sv_sys_statbuffer.cond_status_dac;
   8f6b0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
   8f6b2:	4b7a      	ldr	r3, [pc, #488]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f6b4:	871a      	strh	r2, [r3, #56]	; 0x38
	cl_sys_statbuffer.cond_status  = cl_sys_statbuffer.cond_status_dac; // sanjeer - for now  as hardware connection opending  - to be removed
   8f6b6:	4b79      	ldr	r3, [pc, #484]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f6b8:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   8f6ba:	4b78      	ldr	r3, [pc, #480]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f6bc:	86da      	strh	r2, [r3, #54]	; 0x36
	cl_sys_statbuffer.cond_acid = sv_sys_statbuffer.cond_acid;
   8f6be:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
   8f6c0:	4b76      	ldr	r3, [pc, #472]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f6c2:	879a      	strh	r2, [r3, #60]	; 0x3c
	cl_sys_statbuffer.cond_bicarb = sv_sys_statbuffer.cond_bicarb;
   8f6c4:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
   8f6c6:	4b75      	ldr	r3, [pc, #468]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f6c8:	87da      	strh	r2, [r3, #62]	; 0x3e
	cl_sys_statbuffer.FPcurrentstatus = sv_sys_statbuffer.FPcurrentstatus;
   8f6ca:	8bba      	ldrh	r2, [r7, #28]
   8f6cc:	4b73      	ldr	r3, [pc, #460]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f6ce:	839a      	strh	r2, [r3, #28]
	cl_sys_statbuffer.DGPstatus = sv_sys_statbuffer.DGPstatus;
   8f6d0:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
   8f6d4:	4b71      	ldr	r3, [pc, #452]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f6d6:	83da      	strh	r2, [r3, #30]
	cl_sys_statbuffer.UFPstatus = sv_sys_statbuffer.UFPstatus;
   8f6d8:	8bfa      	ldrh	r2, [r7, #30]
   8f6da:	4b70      	ldr	r3, [pc, #448]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f6dc:	841a      	strh	r2, [r3, #32]
	cl_sys_statbuffer.holder1status = 	sv_sys_statbuffer.holderstatus1;
   8f6de:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
   8f6e2:	2b00      	cmp	r3, #0
   8f6e4:	bf14      	ite	ne
   8f6e6:	2301      	movne	r3, #1
   8f6e8:	2300      	moveq	r3, #0
   8f6ea:	b2da      	uxtb	r2, r3
   8f6ec:	4b6b      	ldr	r3, [pc, #428]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f6ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	cl_sys_statbuffer.holder2status =   sv_sys_statbuffer.holderstatus2;
   8f6f2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
   8f6f6:	2b00      	cmp	r3, #0
   8f6f8:	bf14      	ite	ne
   8f6fa:	2301      	movne	r3, #1
   8f6fc:	2300      	moveq	r3, #0
   8f6fe:	b2da      	uxtb	r2, r3
   8f700:	4b66      	ldr	r3, [pc, #408]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f702:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	cl_sys_statbuffer.bloodpumpdoor = sv_sys_statbuffer.bloodpumpdoor;
   8f706:	783b      	ldrb	r3, [r7, #0]
   8f708:	2b00      	cmp	r3, #0
   8f70a:	bf14      	ite	ne
   8f70c:	2301      	movne	r3, #1
   8f70e:	2300      	moveq	r3, #0
   8f710:	b2da      	uxtb	r2, r3
   8f712:	4b62      	ldr	r3, [pc, #392]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f714:	701a      	strb	r2, [r3, #0]
	cl_sys_statbuffer.levelswitch1 = sv_sys_statbuffer.levelswitch1;
   8f716:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
   8f71a:	2b00      	cmp	r3, #0
   8f71c:	bf14      	ite	ne
   8f71e:	2301      	movne	r3, #1
   8f720:	2300      	moveq	r3, #0
   8f722:	b2da      	uxtb	r2, r3
   8f724:	4b5d      	ldr	r3, [pc, #372]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	cl_sys_statbuffer.ps1status = sv_sys_statbuffer.ps1status;
   8f72a:	8c3a      	ldrh	r2, [r7, #32]
   8f72c:	4b5b      	ldr	r3, [pc, #364]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f72e:	845a      	strh	r2, [r3, #34]	; 0x22
	cl_sys_statbuffer.ps2status = sv_sys_statbuffer.ps2status;
   8f730:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
   8f732:	4b5a      	ldr	r3, [pc, #360]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f734:	849a      	strh	r2, [r3, #36]	; 0x24
	cl_sys_statbuffer.ps3status = sv_sys_statbuffer.ps3status;
   8f736:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   8f738:	4b58      	ldr	r3, [pc, #352]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f73a:	84da      	strh	r2, [r3, #38]	; 0x26
	cl_sys_statbuffer.ps4status = sv_sys_statbuffer.ps4status;
   8f73c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
   8f740:	4b56      	ldr	r3, [pc, #344]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f742:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	cl_sys_statbuffer.UFPstatus = sv_sys_statbuffer.UFPstatus;
   8f746:	8bfa      	ldrh	r2, [r7, #30]
   8f748:	4b54      	ldr	r3, [pc, #336]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f74a:	841a      	strh	r2, [r3, #32]
//	cl_sys_statbuffer.Temp1status = sv_sys_statbuffer.Temp1status;
	raw_data = sv_sys_statbuffer.Temp1status;
   8f74c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   8f74e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	cal_temp  = (402 *100* raw_data)/(2*32768); 
   8f752:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
   8f756:	f649 5208 	movw	r2, #40200	; 0x9d08
   8f75a:	fb02 f303 	mul.w	r3, r2, r3
   8f75e:	2b00      	cmp	r3, #0
   8f760:	da02      	bge.n	8f768 <Cl_SysStat_System_Status_Query+0x160>
   8f762:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8f766:	33ff      	adds	r3, #255	; 0xff
   8f768:	141b      	asrs	r3, r3, #16
   8f76a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	res_temp_lookuptable(cal_temp);
   8f76e:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
   8f772:	4618      	mov	r0, r3
   8f774:	4b4b      	ldr	r3, [pc, #300]	; (8f8a4 <Cl_SysStat_System_Status_Query+0x29c>)
   8f776:	4798      	blx	r3
	//avgtmp1 = (avgtmp1*9 + res_temp_value)/10;
	Average_T1 = (Average_T1*9 + res_temp_value)/10;
   8f778:	4b4b      	ldr	r3, [pc, #300]	; (8f8a8 <Cl_SysStat_System_Status_Query+0x2a0>)
   8f77a:	681a      	ldr	r2, [r3, #0]
   8f77c:	4b4b      	ldr	r3, [pc, #300]	; (8f8ac <Cl_SysStat_System_Status_Query+0x2a4>)
   8f77e:	4610      	mov	r0, r2
   8f780:	494b      	ldr	r1, [pc, #300]	; (8f8b0 <Cl_SysStat_System_Status_Query+0x2a8>)
   8f782:	4798      	blx	r3
   8f784:	4603      	mov	r3, r0
   8f786:	4619      	mov	r1, r3
   8f788:	4b4a      	ldr	r3, [pc, #296]	; (8f8b4 <Cl_SysStat_System_Status_Query+0x2ac>)
   8f78a:	681a      	ldr	r2, [r3, #0]
   8f78c:	4b4a      	ldr	r3, [pc, #296]	; (8f8b8 <Cl_SysStat_System_Status_Query+0x2b0>)
   8f78e:	4608      	mov	r0, r1
   8f790:	4611      	mov	r1, r2
   8f792:	4798      	blx	r3
   8f794:	4603      	mov	r3, r0
   8f796:	461a      	mov	r2, r3
   8f798:	4b48      	ldr	r3, [pc, #288]	; (8f8bc <Cl_SysStat_System_Status_Query+0x2b4>)
   8f79a:	4610      	mov	r0, r2
   8f79c:	4948      	ldr	r1, [pc, #288]	; (8f8c0 <Cl_SysStat_System_Status_Query+0x2b8>)
   8f79e:	4798      	blx	r3
   8f7a0:	4603      	mov	r3, r0
   8f7a2:	461a      	mov	r2, r3
   8f7a4:	4b40      	ldr	r3, [pc, #256]	; (8f8a8 <Cl_SysStat_System_Status_Query+0x2a0>)
   8f7a6:	601a      	str	r2, [r3, #0]
	avgtmp1 = (Average_T1 -175);
   8f7a8:	4b3f      	ldr	r3, [pc, #252]	; (8f8a8 <Cl_SysStat_System_Status_Query+0x2a0>)
   8f7aa:	681a      	ldr	r2, [r3, #0]
   8f7ac:	4b45      	ldr	r3, [pc, #276]	; (8f8c4 <Cl_SysStat_System_Status_Query+0x2bc>)
   8f7ae:	4610      	mov	r0, r2
   8f7b0:	4945      	ldr	r1, [pc, #276]	; (8f8c8 <Cl_SysStat_System_Status_Query+0x2c0>)
   8f7b2:	4798      	blx	r3
   8f7b4:	4603      	mov	r3, r0
   8f7b6:	461a      	mov	r2, r3
   8f7b8:	4b44      	ldr	r3, [pc, #272]	; (8f8cc <Cl_SysStat_System_Status_Query+0x2c4>)
   8f7ba:	601a      	str	r2, [r3, #0]
	cl_sys_statbuffer.Temp1status = avgtmp1;
   8f7bc:	4b43      	ldr	r3, [pc, #268]	; (8f8cc <Cl_SysStat_System_Status_Query+0x2c4>)
   8f7be:	681a      	ldr	r2, [r3, #0]
   8f7c0:	4b43      	ldr	r3, [pc, #268]	; (8f8d0 <Cl_SysStat_System_Status_Query+0x2c8>)
   8f7c2:	4610      	mov	r0, r2
   8f7c4:	4798      	blx	r3
   8f7c6:	4603      	mov	r3, r0
   8f7c8:	b29a      	uxth	r2, r3
   8f7ca:	4b34      	ldr	r3, [pc, #208]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f7cc:	851a      	strh	r2, [r3, #40]	; 0x28
//cl_sys_statbuffer.Temp1status = res_temp_value  -75;                // Manav Machine
//	cl_sys_statbuffer.Temp1status = res_temp_value -80 ;			
				
//	cl_sys_statbuffer.Temp2status = sv_sys_statbuffer.Temp2status;
	raw_data = sv_sys_statbuffer.Temp2status;
   8f7ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   8f7d0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	cal_temp  = (402 *100* raw_data)/(2*32768);
   8f7d4:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
   8f7d8:	f649 5208 	movw	r2, #40200	; 0x9d08
   8f7dc:	fb02 f303 	mul.w	r3, r2, r3
   8f7e0:	2b00      	cmp	r3, #0
   8f7e2:	da02      	bge.n	8f7ea <Cl_SysStat_System_Status_Query+0x1e2>
   8f7e4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8f7e8:	33ff      	adds	r3, #255	; 0xff
   8f7ea:	141b      	asrs	r3, r3, #16
   8f7ec:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	res_temp_lookuptable(cal_temp);
   8f7f0:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
   8f7f4:	4618      	mov	r0, r3
   8f7f6:	4b2b      	ldr	r3, [pc, #172]	; (8f8a4 <Cl_SysStat_System_Status_Query+0x29c>)
   8f7f8:	4798      	blx	r3
//	avgtmp2 = (avgtmp2*9 + res_temp_value)/10;
//	avgtmp2 = (avgtmp2 -35 -85 );
Average_T2 = (Average_T2*9 + res_temp_value)/10;
   8f7fa:	4b36      	ldr	r3, [pc, #216]	; (8f8d4 <Cl_SysStat_System_Status_Query+0x2cc>)
   8f7fc:	681a      	ldr	r2, [r3, #0]
   8f7fe:	4b2b      	ldr	r3, [pc, #172]	; (8f8ac <Cl_SysStat_System_Status_Query+0x2a4>)
   8f800:	4610      	mov	r0, r2
   8f802:	492b      	ldr	r1, [pc, #172]	; (8f8b0 <Cl_SysStat_System_Status_Query+0x2a8>)
   8f804:	4798      	blx	r3
   8f806:	4603      	mov	r3, r0
   8f808:	4619      	mov	r1, r3
   8f80a:	4b2a      	ldr	r3, [pc, #168]	; (8f8b4 <Cl_SysStat_System_Status_Query+0x2ac>)
   8f80c:	681a      	ldr	r2, [r3, #0]
   8f80e:	4b2a      	ldr	r3, [pc, #168]	; (8f8b8 <Cl_SysStat_System_Status_Query+0x2b0>)
   8f810:	4608      	mov	r0, r1
   8f812:	4611      	mov	r1, r2
   8f814:	4798      	blx	r3
   8f816:	4603      	mov	r3, r0
   8f818:	461a      	mov	r2, r3
   8f81a:	4b28      	ldr	r3, [pc, #160]	; (8f8bc <Cl_SysStat_System_Status_Query+0x2b4>)
   8f81c:	4610      	mov	r0, r2
   8f81e:	4928      	ldr	r1, [pc, #160]	; (8f8c0 <Cl_SysStat_System_Status_Query+0x2b8>)
   8f820:	4798      	blx	r3
   8f822:	4603      	mov	r3, r0
   8f824:	461a      	mov	r2, r3
   8f826:	4b2b      	ldr	r3, [pc, #172]	; (8f8d4 <Cl_SysStat_System_Status_Query+0x2cc>)
   8f828:	601a      	str	r2, [r3, #0]
avgtmp2 = (Average_T2 -87);
   8f82a:	4b2a      	ldr	r3, [pc, #168]	; (8f8d4 <Cl_SysStat_System_Status_Query+0x2cc>)
   8f82c:	681a      	ldr	r2, [r3, #0]
   8f82e:	4b25      	ldr	r3, [pc, #148]	; (8f8c4 <Cl_SysStat_System_Status_Query+0x2bc>)
   8f830:	4610      	mov	r0, r2
   8f832:	4929      	ldr	r1, [pc, #164]	; (8f8d8 <Cl_SysStat_System_Status_Query+0x2d0>)
   8f834:	4798      	blx	r3
   8f836:	4603      	mov	r3, r0
   8f838:	461a      	mov	r2, r3
   8f83a:	4b28      	ldr	r3, [pc, #160]	; (8f8dc <Cl_SysStat_System_Status_Query+0x2d4>)
   8f83c:	601a      	str	r2, [r3, #0]
	cl_sys_statbuffer.Temp2status = avgtmp2;
   8f83e:	4b27      	ldr	r3, [pc, #156]	; (8f8dc <Cl_SysStat_System_Status_Query+0x2d4>)
   8f840:	681a      	ldr	r2, [r3, #0]
   8f842:	4b23      	ldr	r3, [pc, #140]	; (8f8d0 <Cl_SysStat_System_Status_Query+0x2c8>)
   8f844:	4610      	mov	r0, r2
   8f846:	4798      	blx	r3
   8f848:	4603      	mov	r3, r0
   8f84a:	b29a      	uxth	r2, r3
   8f84c:	4b13      	ldr	r3, [pc, #76]	; (8f89c <Cl_SysStat_System_Status_Query+0x294>)
   8f84e:	855a      	strh	r2, [r3, #42]	; 0x2a
//	cl_sys_statbuffer.Temp2status = res_temp_value -25;               // Manav Machine       
//	cl_sys_statbuffer.Temp2status = res_temp_value +20 -770;
	
//	cl_sys_statbuffer.Temp3status = sv_sys_statbuffer.Temp3status;
	raw_data = sv_sys_statbuffer.Temp3status;
   8f850:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   8f852:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	cal_temp  = (402 *100* raw_data)/(2*32768);
   8f856:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
   8f85a:	f649 5208 	movw	r2, #40200	; 0x9d08
   8f85e:	fb02 f303 	mul.w	r3, r2, r3
   8f862:	2b00      	cmp	r3, #0
   8f864:	da02      	bge.n	8f86c <Cl_SysStat_System_Status_Query+0x264>
   8f866:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8f86a:	33ff      	adds	r3, #255	; 0xff
   8f86c:	141b      	asrs	r3, r3, #16
   8f86e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	res_temp_lookuptable(cal_temp);
   8f872:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
   8f876:	4618      	mov	r0, r3
   8f878:	4b0a      	ldr	r3, [pc, #40]	; (8f8a4 <Cl_SysStat_System_Status_Query+0x29c>)
   8f87a:	4798      	blx	r3
//	avgtmp3 = (avgtmp3*9 + res_temp_value)/10;
//	avgtmp3 = (avgtmp3 +20-70 -35);
Average_T3 = (Average_T3*9 + res_temp_value)/10;
   8f87c:	4b18      	ldr	r3, [pc, #96]	; (8f8e0 <Cl_SysStat_System_Status_Query+0x2d8>)
   8f87e:	681a      	ldr	r2, [r3, #0]
   8f880:	4b0a      	ldr	r3, [pc, #40]	; (8f8ac <Cl_SysStat_System_Status_Query+0x2a4>)
   8f882:	4610      	mov	r0, r2
   8f884:	490a      	ldr	r1, [pc, #40]	; (8f8b0 <Cl_SysStat_System_Status_Query+0x2a8>)
   8f886:	4798      	blx	r3
   8f888:	4603      	mov	r3, r0
   8f88a:	4619      	mov	r1, r3
   8f88c:	4b09      	ldr	r3, [pc, #36]	; (8f8b4 <Cl_SysStat_System_Status_Query+0x2ac>)
   8f88e:	681a      	ldr	r2, [r3, #0]
   8f890:	4b09      	ldr	r3, [pc, #36]	; (8f8b8 <Cl_SysStat_System_Status_Query+0x2b0>)
   8f892:	4608      	mov	r0, r1
   8f894:	e026      	b.n	8f8e4 <Cl_SysStat_System_Status_Query+0x2dc>
   8f896:	bf00      	nop
   8f898:	00094265 	.word	0x00094265
   8f89c:	200723d8 	.word	0x200723d8
   8f8a0:	0009b919 	.word	0x0009b919
   8f8a4:	00090e5d 	.word	0x00090e5d
   8f8a8:	20071b58 	.word	0x20071b58
   8f8ac:	000a8305 	.word	0x000a8305
   8f8b0:	41100000 	.word	0x41100000
   8f8b4:	20071b8c 	.word	0x20071b8c
   8f8b8:	000a80f5 	.word	0x000a80f5
   8f8bc:	000a846d 	.word	0x000a846d
   8f8c0:	41200000 	.word	0x41200000
   8f8c4:	000a80f1 	.word	0x000a80f1
   8f8c8:	432f0000 	.word	0x432f0000
   8f8cc:	20071b34 	.word	0x20071b34
   8f8d0:	000a86dd 	.word	0x000a86dd
   8f8d4:	20071b5c 	.word	0x20071b5c
   8f8d8:	42ae0000 	.word	0x42ae0000
   8f8dc:	20071b30 	.word	0x20071b30
   8f8e0:	20071b60 	.word	0x20071b60
   8f8e4:	4611      	mov	r1, r2
   8f8e6:	4798      	blx	r3
   8f8e8:	4603      	mov	r3, r0
   8f8ea:	461a      	mov	r2, r3
   8f8ec:	4b94      	ldr	r3, [pc, #592]	; (8fb40 <Cl_SysStat_System_Status_Query+0x538>)
   8f8ee:	4610      	mov	r0, r2
   8f8f0:	4994      	ldr	r1, [pc, #592]	; (8fb44 <Cl_SysStat_System_Status_Query+0x53c>)
   8f8f2:	4798      	blx	r3
   8f8f4:	4603      	mov	r3, r0
   8f8f6:	461a      	mov	r2, r3
   8f8f8:	4b93      	ldr	r3, [pc, #588]	; (8fb48 <Cl_SysStat_System_Status_Query+0x540>)
   8f8fa:	601a      	str	r2, [r3, #0]
avgtmp3 = (Average_T3 -60);
   8f8fc:	4b92      	ldr	r3, [pc, #584]	; (8fb48 <Cl_SysStat_System_Status_Query+0x540>)
   8f8fe:	681a      	ldr	r2, [r3, #0]
   8f900:	4b92      	ldr	r3, [pc, #584]	; (8fb4c <Cl_SysStat_System_Status_Query+0x544>)
   8f902:	4610      	mov	r0, r2
   8f904:	4992      	ldr	r1, [pc, #584]	; (8fb50 <Cl_SysStat_System_Status_Query+0x548>)
   8f906:	4798      	blx	r3
   8f908:	4603      	mov	r3, r0
   8f90a:	461a      	mov	r2, r3
   8f90c:	4b91      	ldr	r3, [pc, #580]	; (8fb54 <Cl_SysStat_System_Status_Query+0x54c>)
   8f90e:	601a      	str	r2, [r3, #0]
	cl_sys_statbuffer.Temp3status = avgtmp3  ;
   8f910:	4b90      	ldr	r3, [pc, #576]	; (8fb54 <Cl_SysStat_System_Status_Query+0x54c>)
   8f912:	681a      	ldr	r2, [r3, #0]
   8f914:	4b90      	ldr	r3, [pc, #576]	; (8fb58 <Cl_SysStat_System_Status_Query+0x550>)
   8f916:	4610      	mov	r0, r2
   8f918:	4798      	blx	r3
   8f91a:	4603      	mov	r3, r0
   8f91c:	b29a      	uxth	r2, r3
   8f91e:	4b8f      	ldr	r3, [pc, #572]	; (8fb5c <Cl_SysStat_System_Status_Query+0x554>)
   8f920:	859a      	strh	r2, [r3, #44]	; 0x2c
// 		res_temp_value = (res_temp_value*9 + res_temp_value)/10;
// 		cl_sys_statbuffer.Temp4status = res_temp_value ;
	
	// ----------------added manav02 for conductivity globalization-------------------------
	
	raw_data = sv_sys_statbuffer.cond_status;
   8f922:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   8f924:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	
	conductivity_CS3 = cl_utilities_CalConductivity(raw_data,(sv_sys_statbuffer.CS3_Tempstatus)/100);
   8f928:	f8b7 4076 	ldrh.w	r4, [r7, #118]	; 0x76
   8f92c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
   8f92e:	4a8c      	ldr	r2, [pc, #560]	; (8fb60 <Cl_SysStat_System_Status_Query+0x558>)
   8f930:	fba2 2303 	umull	r2, r3, r2, r3
   8f934:	095b      	lsrs	r3, r3, #5
   8f936:	b29b      	uxth	r3, r3
   8f938:	461a      	mov	r2, r3
   8f93a:	4b8a      	ldr	r3, [pc, #552]	; (8fb64 <Cl_SysStat_System_Status_Query+0x55c>)
   8f93c:	4610      	mov	r0, r2
   8f93e:	4798      	blx	r3
   8f940:	4603      	mov	r3, r0
   8f942:	4620      	mov	r0, r4
   8f944:	4619      	mov	r1, r3
   8f946:	4b88      	ldr	r3, [pc, #544]	; (8fb68 <Cl_SysStat_System_Status_Query+0x560>)
   8f948:	4798      	blx	r3
   8f94a:	6738      	str	r0, [r7, #112]	; 0x70
	//avgcond = avgcond + conductivity_CS3;
	
	avgcond = (avgcond*9 + conductivity_CS3)/10;
   8f94c:	4b87      	ldr	r3, [pc, #540]	; (8fb6c <Cl_SysStat_System_Status_Query+0x564>)
   8f94e:	681a      	ldr	r2, [r3, #0]
   8f950:	4b87      	ldr	r3, [pc, #540]	; (8fb70 <Cl_SysStat_System_Status_Query+0x568>)
   8f952:	4610      	mov	r0, r2
   8f954:	4987      	ldr	r1, [pc, #540]	; (8fb74 <Cl_SysStat_System_Status_Query+0x56c>)
   8f956:	4798      	blx	r3
   8f958:	4603      	mov	r3, r0
   8f95a:	461a      	mov	r2, r3
   8f95c:	4b86      	ldr	r3, [pc, #536]	; (8fb78 <Cl_SysStat_System_Status_Query+0x570>)
   8f95e:	4610      	mov	r0, r2
   8f960:	6f39      	ldr	r1, [r7, #112]	; 0x70
   8f962:	4798      	blx	r3
   8f964:	4603      	mov	r3, r0
   8f966:	461a      	mov	r2, r3
   8f968:	4b75      	ldr	r3, [pc, #468]	; (8fb40 <Cl_SysStat_System_Status_Query+0x538>)
   8f96a:	4610      	mov	r0, r2
   8f96c:	4975      	ldr	r1, [pc, #468]	; (8fb44 <Cl_SysStat_System_Status_Query+0x53c>)
   8f96e:	4798      	blx	r3
   8f970:	4603      	mov	r3, r0
   8f972:	461a      	mov	r2, r3
   8f974:	4b7d      	ldr	r3, [pc, #500]	; (8fb6c <Cl_SysStat_System_Status_Query+0x564>)
   8f976:	601a      	str	r2, [r3, #0]
	cl_sys_statbuffer.cond_status = avgcond  ;
   8f978:	4b7c      	ldr	r3, [pc, #496]	; (8fb6c <Cl_SysStat_System_Status_Query+0x564>)
   8f97a:	681a      	ldr	r2, [r3, #0]
   8f97c:	4b76      	ldr	r3, [pc, #472]	; (8fb58 <Cl_SysStat_System_Status_Query+0x550>)
   8f97e:	4610      	mov	r0, r2
   8f980:	4798      	blx	r3
   8f982:	4603      	mov	r3, r0
   8f984:	b29a      	uxth	r2, r3
   8f986:	4b75      	ldr	r3, [pc, #468]	; (8fb5c <Cl_SysStat_System_Status_Query+0x554>)
   8f988:	86da      	strh	r2, [r3, #54]	; 0x36
	avg_conductivity = raw_data;
   8f98a:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
   8f98e:	4b75      	ldr	r3, [pc, #468]	; (8fb64 <Cl_SysStat_System_Status_Query+0x55c>)
   8f990:	4610      	mov	r0, r2
   8f992:	4798      	blx	r3
   8f994:	4602      	mov	r2, r0
   8f996:	4b79      	ldr	r3, [pc, #484]	; (8fb7c <Cl_SysStat_System_Status_Query+0x574>)
   8f998:	601a      	str	r2, [r3, #0]
	
	// ----------------added Gopal for conductivity CS2 -------------------------
	
	raw_data = sv_sys_statbuffer.cond_bicarb;
   8f99a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
   8f99c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	conductivity_CS2 = raw_data;
   8f9a0:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
   8f9a4:	4b6f      	ldr	r3, [pc, #444]	; (8fb64 <Cl_SysStat_System_Status_Query+0x55c>)
   8f9a6:	4610      	mov	r0, r2
   8f9a8:	4798      	blx	r3
   8f9aa:	4603      	mov	r3, r0
   8f9ac:	66fb      	str	r3, [r7, #108]	; 0x6c
//	conductivity_CS2 = cl_utilities_CalConductivity(raw_data,(sv_sys_statbuffer.CS2_Tempstatus)/100);
	//avgcond = avgcond + conductivity_CS3;
	avg_CS2 = (avg_CS2 *9 + conductivity_CS2)/10;
   8f9ae:	4b70      	ldr	r3, [pc, #448]	; (8fb70 <Cl_SysStat_System_Status_Query+0x568>)
   8f9b0:	6e78      	ldr	r0, [r7, #100]	; 0x64
   8f9b2:	4970      	ldr	r1, [pc, #448]	; (8fb74 <Cl_SysStat_System_Status_Query+0x56c>)
   8f9b4:	4798      	blx	r3
   8f9b6:	4603      	mov	r3, r0
   8f9b8:	461a      	mov	r2, r3
   8f9ba:	4b6f      	ldr	r3, [pc, #444]	; (8fb78 <Cl_SysStat_System_Status_Query+0x570>)
   8f9bc:	4610      	mov	r0, r2
   8f9be:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
   8f9c0:	4798      	blx	r3
   8f9c2:	4603      	mov	r3, r0
   8f9c4:	461a      	mov	r2, r3
   8f9c6:	4b5e      	ldr	r3, [pc, #376]	; (8fb40 <Cl_SysStat_System_Status_Query+0x538>)
   8f9c8:	4610      	mov	r0, r2
   8f9ca:	495e      	ldr	r1, [pc, #376]	; (8fb44 <Cl_SysStat_System_Status_Query+0x53c>)
   8f9cc:	4798      	blx	r3
   8f9ce:	4603      	mov	r3, r0
   8f9d0:	667b      	str	r3, [r7, #100]	; 0x64
//	conductivity_CS2 = (conductivity_CS2*9 + conductivity_CS2)/10;
	cl_sys_statbuffer.cond_bicarb = avg_CS2 ;
   8f9d2:	4b61      	ldr	r3, [pc, #388]	; (8fb58 <Cl_SysStat_System_Status_Query+0x550>)
   8f9d4:	6e78      	ldr	r0, [r7, #100]	; 0x64
   8f9d6:	4798      	blx	r3
   8f9d8:	4603      	mov	r3, r0
   8f9da:	b29a      	uxth	r2, r3
   8f9dc:	4b5f      	ldr	r3, [pc, #380]	; (8fb5c <Cl_SysStat_System_Status_Query+0x554>)
   8f9de:	87da      	strh	r2, [r3, #62]	; 0x3e
	
	// ----------------added Gopal for conductivity CS1 -------------------------
	
	raw_data = sv_sys_statbuffer.cond_acid;
   8f9e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
   8f9e2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	
	conductivity_CS1 = cl_utilities_CalConductivity(raw_data,(sv_sys_statbuffer.CS1_Tempstatus)/100);
   8f9e6:	f8b7 4076 	ldrh.w	r4, [r7, #118]	; 0x76
   8f9ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
   8f9ec:	4a5c      	ldr	r2, [pc, #368]	; (8fb60 <Cl_SysStat_System_Status_Query+0x558>)
   8f9ee:	fba2 2303 	umull	r2, r3, r2, r3
   8f9f2:	095b      	lsrs	r3, r3, #5
   8f9f4:	b29b      	uxth	r3, r3
   8f9f6:	461a      	mov	r2, r3
   8f9f8:	4b5a      	ldr	r3, [pc, #360]	; (8fb64 <Cl_SysStat_System_Status_Query+0x55c>)
   8f9fa:	4610      	mov	r0, r2
   8f9fc:	4798      	blx	r3
   8f9fe:	4603      	mov	r3, r0
   8fa00:	4620      	mov	r0, r4
   8fa02:	4619      	mov	r1, r3
   8fa04:	4b58      	ldr	r3, [pc, #352]	; (8fb68 <Cl_SysStat_System_Status_Query+0x560>)
   8fa06:	4798      	blx	r3
   8fa08:	66b8      	str	r0, [r7, #104]	; 0x68
	//avgcond = avgcond + conductivity_CS3;
	
	conductivity_CS1 = (conductivity_CS1*9 + conductivity_CS1)/10;
   8fa0a:	4b59      	ldr	r3, [pc, #356]	; (8fb70 <Cl_SysStat_System_Status_Query+0x568>)
   8fa0c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   8fa0e:	4959      	ldr	r1, [pc, #356]	; (8fb74 <Cl_SysStat_System_Status_Query+0x56c>)
   8fa10:	4798      	blx	r3
   8fa12:	4603      	mov	r3, r0
   8fa14:	461a      	mov	r2, r3
   8fa16:	4b58      	ldr	r3, [pc, #352]	; (8fb78 <Cl_SysStat_System_Status_Query+0x570>)
   8fa18:	4610      	mov	r0, r2
   8fa1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   8fa1c:	4798      	blx	r3
   8fa1e:	4603      	mov	r3, r0
   8fa20:	461a      	mov	r2, r3
   8fa22:	4b47      	ldr	r3, [pc, #284]	; (8fb40 <Cl_SysStat_System_Status_Query+0x538>)
   8fa24:	4610      	mov	r0, r2
   8fa26:	4947      	ldr	r1, [pc, #284]	; (8fb44 <Cl_SysStat_System_Status_Query+0x53c>)
   8fa28:	4798      	blx	r3
   8fa2a:	4603      	mov	r3, r0
   8fa2c:	66bb      	str	r3, [r7, #104]	; 0x68
	cl_sys_statbuffer.cond_acid = conductivity_CS1 ;
   8fa2e:	4b4a      	ldr	r3, [pc, #296]	; (8fb58 <Cl_SysStat_System_Status_Query+0x550>)
   8fa30:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   8fa32:	4798      	blx	r3
   8fa34:	4603      	mov	r3, r0
   8fa36:	b29a      	uxth	r2, r3
   8fa38:	4b48      	ldr	r3, [pc, #288]	; (8fb5c <Cl_SysStat_System_Status_Query+0x554>)
   8fa3a:	879a      	strh	r2, [r3, #60]	; 0x3c
	
	
	
	//------------------manav02 added for pressure globalization----------------------------------------------------------------
	
	raw_data = sv_sys_statbuffer.ps1status;
   8fa3c:	8c3b      	ldrh	r3, [r7, #32]
   8fa3e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	PS1_bar = raw_data;
   8fa42:	4a4f      	ldr	r2, [pc, #316]	; (8fb80 <Cl_SysStat_System_Status_Query+0x578>)
   8fa44:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
   8fa48:	8013      	strh	r3, [r2, #0]
// 			PS1_bar = (65536 - raw_data) *(-1);
// 		}
// 		else
// 		PS1_bar = (float)raw_data;
		
		pressure_final_ps1 = (0.091009 * PS1_bar) + 491.794;
   8fa4a:	4b4d      	ldr	r3, [pc, #308]	; (8fb80 <Cl_SysStat_System_Status_Query+0x578>)
   8fa4c:	881b      	ldrh	r3, [r3, #0]
   8fa4e:	b21a      	sxth	r2, r3
   8fa50:	4b4c      	ldr	r3, [pc, #304]	; (8fb84 <Cl_SysStat_System_Status_Query+0x57c>)
   8fa52:	4610      	mov	r0, r2
   8fa54:	4798      	blx	r3
   8fa56:	4602      	mov	r2, r0
   8fa58:	460b      	mov	r3, r1
   8fa5a:	4c4b      	ldr	r4, [pc, #300]	; (8fb88 <Cl_SysStat_System_Status_Query+0x580>)
   8fa5c:	4610      	mov	r0, r2
   8fa5e:	4619      	mov	r1, r3
   8fa60:	a333      	add	r3, pc, #204	; (adr r3, 8fb30 <Cl_SysStat_System_Status_Query+0x528>)
   8fa62:	e9d3 2300 	ldrd	r2, r3, [r3]
   8fa66:	47a0      	blx	r4
   8fa68:	4602      	mov	r2, r0
   8fa6a:	460b      	mov	r3, r1
   8fa6c:	4c47      	ldr	r4, [pc, #284]	; (8fb8c <Cl_SysStat_System_Status_Query+0x584>)
   8fa6e:	4610      	mov	r0, r2
   8fa70:	4619      	mov	r1, r3
   8fa72:	a331      	add	r3, pc, #196	; (adr r3, 8fb38 <Cl_SysStat_System_Status_Query+0x530>)
   8fa74:	e9d3 2300 	ldrd	r2, r3, [r3]
   8fa78:	47a0      	blx	r4
   8fa7a:	4602      	mov	r2, r0
   8fa7c:	460b      	mov	r3, r1
   8fa7e:	4610      	mov	r0, r2
   8fa80:	4619      	mov	r1, r3
   8fa82:	4b43      	ldr	r3, [pc, #268]	; (8fb90 <Cl_SysStat_System_Status_Query+0x588>)
   8fa84:	4798      	blx	r3
   8fa86:	4602      	mov	r2, r0
   8fa88:	4b42      	ldr	r3, [pc, #264]	; (8fb94 <Cl_SysStat_System_Status_Query+0x58c>)
   8fa8a:	601a      	str	r2, [r3, #0]
	
		cl_sys_statbuffer.ps1status = 	pressure_final_ps1 + 1000 ;
   8fa8c:	4b41      	ldr	r3, [pc, #260]	; (8fb94 <Cl_SysStat_System_Status_Query+0x58c>)
   8fa8e:	681a      	ldr	r2, [r3, #0]
   8fa90:	4b39      	ldr	r3, [pc, #228]	; (8fb78 <Cl_SysStat_System_Status_Query+0x570>)
   8fa92:	4610      	mov	r0, r2
   8fa94:	4940      	ldr	r1, [pc, #256]	; (8fb98 <Cl_SysStat_System_Status_Query+0x590>)
   8fa96:	4798      	blx	r3
   8fa98:	4603      	mov	r3, r0
   8fa9a:	461a      	mov	r2, r3
   8fa9c:	4b2e      	ldr	r3, [pc, #184]	; (8fb58 <Cl_SysStat_System_Status_Query+0x550>)
   8fa9e:	4610      	mov	r0, r2
   8faa0:	4798      	blx	r3
   8faa2:	4603      	mov	r3, r0
   8faa4:	b29a      	uxth	r2, r3
   8faa6:	4b2d      	ldr	r3, [pc, #180]	; (8fb5c <Cl_SysStat_System_Status_Query+0x554>)
   8faa8:	845a      	strh	r2, [r3, #34]	; 0x22
	
	raw_data = sv_sys_statbuffer.ps2status;
   8faaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   8faac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	PS2_bar = raw_data;
   8fab0:	4a3a      	ldr	r2, [pc, #232]	; (8fb9c <Cl_SysStat_System_Status_Query+0x594>)
   8fab2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
   8fab6:	8013      	strh	r3, [r2, #0]
// 		PS2_bar = (65536 - raw_data) *(-1);
// 	}
// 	else
// 	PS2_bar = (float)raw_data;
	
	pressure_final_ps2 = (0.091009 * PS2_bar) + 491.794;
   8fab8:	4b38      	ldr	r3, [pc, #224]	; (8fb9c <Cl_SysStat_System_Status_Query+0x594>)
   8faba:	881b      	ldrh	r3, [r3, #0]
   8fabc:	b21a      	sxth	r2, r3
   8fabe:	4b31      	ldr	r3, [pc, #196]	; (8fb84 <Cl_SysStat_System_Status_Query+0x57c>)
   8fac0:	4610      	mov	r0, r2
   8fac2:	4798      	blx	r3
   8fac4:	4602      	mov	r2, r0
   8fac6:	460b      	mov	r3, r1
   8fac8:	4c2f      	ldr	r4, [pc, #188]	; (8fb88 <Cl_SysStat_System_Status_Query+0x580>)
   8faca:	4610      	mov	r0, r2
   8facc:	4619      	mov	r1, r3
   8face:	a318      	add	r3, pc, #96	; (adr r3, 8fb30 <Cl_SysStat_System_Status_Query+0x528>)
   8fad0:	e9d3 2300 	ldrd	r2, r3, [r3]
   8fad4:	47a0      	blx	r4
   8fad6:	4602      	mov	r2, r0
   8fad8:	460b      	mov	r3, r1
   8fada:	4c2c      	ldr	r4, [pc, #176]	; (8fb8c <Cl_SysStat_System_Status_Query+0x584>)
   8fadc:	4610      	mov	r0, r2
   8fade:	4619      	mov	r1, r3
   8fae0:	a315      	add	r3, pc, #84	; (adr r3, 8fb38 <Cl_SysStat_System_Status_Query+0x530>)
   8fae2:	e9d3 2300 	ldrd	r2, r3, [r3]
   8fae6:	47a0      	blx	r4
   8fae8:	4602      	mov	r2, r0
   8faea:	460b      	mov	r3, r1
   8faec:	4610      	mov	r0, r2
   8faee:	4619      	mov	r1, r3
   8faf0:	4b27      	ldr	r3, [pc, #156]	; (8fb90 <Cl_SysStat_System_Status_Query+0x588>)
   8faf2:	4798      	blx	r3
   8faf4:	4602      	mov	r2, r0
   8faf6:	4b2a      	ldr	r3, [pc, #168]	; (8fba0 <Cl_SysStat_System_Status_Query+0x598>)
   8faf8:	601a      	str	r2, [r3, #0]
	
	cl_sys_statbuffer.ps2status = 	pressure_final_ps2 + 1000 ;
   8fafa:	4b29      	ldr	r3, [pc, #164]	; (8fba0 <Cl_SysStat_System_Status_Query+0x598>)
   8fafc:	681a      	ldr	r2, [r3, #0]
   8fafe:	4b1e      	ldr	r3, [pc, #120]	; (8fb78 <Cl_SysStat_System_Status_Query+0x570>)
   8fb00:	4610      	mov	r0, r2
   8fb02:	4925      	ldr	r1, [pc, #148]	; (8fb98 <Cl_SysStat_System_Status_Query+0x590>)
   8fb04:	4798      	blx	r3
   8fb06:	4603      	mov	r3, r0
   8fb08:	461a      	mov	r2, r3
   8fb0a:	4b13      	ldr	r3, [pc, #76]	; (8fb58 <Cl_SysStat_System_Status_Query+0x550>)
   8fb0c:	4610      	mov	r0, r2
   8fb0e:	4798      	blx	r3
   8fb10:	4603      	mov	r3, r0
   8fb12:	b29a      	uxth	r2, r3
   8fb14:	4b11      	ldr	r3, [pc, #68]	; (8fb5c <Cl_SysStat_System_Status_Query+0x554>)
   8fb16:	849a      	strh	r2, [r3, #36]	; 0x24
	
	raw_data = sv_sys_statbuffer.ps3status;
   8fb18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   8fb1a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	PS3_bar = raw_data;
   8fb1e:	4a21      	ldr	r2, [pc, #132]	; (8fba4 <Cl_SysStat_System_Status_Query+0x59c>)
   8fb20:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
   8fb24:	8013      	strh	r3, [r2, #0]
// 		PS3_bar = (65536 - raw_data) *(-1);
// 	}
// 	else
// 	PS3_bar = (float)raw_data;
	
	pressure_final_ps3 = (0.091009 * PS3_bar) + 491.794;
   8fb26:	4b1f      	ldr	r3, [pc, #124]	; (8fba4 <Cl_SysStat_System_Status_Query+0x59c>)
   8fb28:	881b      	ldrh	r3, [r3, #0]
   8fb2a:	b21a      	sxth	r2, r3
   8fb2c:	e03c      	b.n	8fba8 <Cl_SysStat_System_Status_Query+0x5a0>
   8fb2e:	bf00      	nop
   8fb30:	a6a44418 	.word	0xa6a44418
   8fb34:	3fb74c5d 	.word	0x3fb74c5d
   8fb38:	39581062 	.word	0x39581062
   8fb3c:	407ebcb4 	.word	0x407ebcb4
   8fb40:	000a846d 	.word	0x000a846d
   8fb44:	41200000 	.word	0x41200000
   8fb48:	20071b60 	.word	0x20071b60
   8fb4c:	000a80f1 	.word	0x000a80f1
   8fb50:	42700000 	.word	0x42700000
   8fb54:	20071b2c 	.word	0x20071b2c
   8fb58:	000a86dd 	.word	0x000a86dd
   8fb5c:	200723d8 	.word	0x200723d8
   8fb60:	51eb851f 	.word	0x51eb851f
   8fb64:	000a825d 	.word	0x000a825d
   8fb68:	000942a9 	.word	0x000942a9
   8fb6c:	20071b54 	.word	0x20071b54
   8fb70:	000a8305 	.word	0x000a8305
   8fb74:	41100000 	.word	0x41100000
   8fb78:	000a80f5 	.word	0x000a80f5
   8fb7c:	20071b44 	.word	0x20071b44
   8fb80:	20071b4a 	.word	0x20071b4a
   8fb84:	000a79b9 	.word	0x000a79b9
   8fb88:	000a7a85 	.word	0x000a7a85
   8fb8c:	000a7721 	.word	0x000a7721
   8fb90:	000a8049 	.word	0x000a8049
   8fb94:	20071960 	.word	0x20071960
   8fb98:	447a0000 	.word	0x447a0000
   8fb9c:	20071b4c 	.word	0x20071b4c
   8fba0:	20071964 	.word	0x20071964
   8fba4:	20071b4e 	.word	0x20071b4e
   8fba8:	4b61      	ldr	r3, [pc, #388]	; (8fd30 <Cl_SysStat_System_Status_Query+0x728>)
   8fbaa:	4610      	mov	r0, r2
   8fbac:	4798      	blx	r3
   8fbae:	4602      	mov	r2, r0
   8fbb0:	460b      	mov	r3, r1
   8fbb2:	4c60      	ldr	r4, [pc, #384]	; (8fd34 <Cl_SysStat_System_Status_Query+0x72c>)
   8fbb4:	4610      	mov	r0, r2
   8fbb6:	4619      	mov	r1, r3
   8fbb8:	a359      	add	r3, pc, #356	; (adr r3, 8fd20 <Cl_SysStat_System_Status_Query+0x718>)
   8fbba:	e9d3 2300 	ldrd	r2, r3, [r3]
   8fbbe:	47a0      	blx	r4
   8fbc0:	4602      	mov	r2, r0
   8fbc2:	460b      	mov	r3, r1
   8fbc4:	4c5c      	ldr	r4, [pc, #368]	; (8fd38 <Cl_SysStat_System_Status_Query+0x730>)
   8fbc6:	4610      	mov	r0, r2
   8fbc8:	4619      	mov	r1, r3
   8fbca:	a357      	add	r3, pc, #348	; (adr r3, 8fd28 <Cl_SysStat_System_Status_Query+0x720>)
   8fbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   8fbd0:	47a0      	blx	r4
   8fbd2:	4602      	mov	r2, r0
   8fbd4:	460b      	mov	r3, r1
   8fbd6:	4610      	mov	r0, r2
   8fbd8:	4619      	mov	r1, r3
   8fbda:	4b58      	ldr	r3, [pc, #352]	; (8fd3c <Cl_SysStat_System_Status_Query+0x734>)
   8fbdc:	4798      	blx	r3
   8fbde:	4602      	mov	r2, r0
   8fbe0:	4b57      	ldr	r3, [pc, #348]	; (8fd40 <Cl_SysStat_System_Status_Query+0x738>)
   8fbe2:	601a      	str	r2, [r3, #0]
	
	cl_sys_statbuffer.ps3status = 	pressure_final_ps3 + 1000 ;
   8fbe4:	4b56      	ldr	r3, [pc, #344]	; (8fd40 <Cl_SysStat_System_Status_Query+0x738>)
   8fbe6:	681a      	ldr	r2, [r3, #0]
   8fbe8:	4b56      	ldr	r3, [pc, #344]	; (8fd44 <Cl_SysStat_System_Status_Query+0x73c>)
   8fbea:	4610      	mov	r0, r2
   8fbec:	4956      	ldr	r1, [pc, #344]	; (8fd48 <Cl_SysStat_System_Status_Query+0x740>)
   8fbee:	4798      	blx	r3
   8fbf0:	4603      	mov	r3, r0
   8fbf2:	461a      	mov	r2, r3
   8fbf4:	4b55      	ldr	r3, [pc, #340]	; (8fd4c <Cl_SysStat_System_Status_Query+0x744>)
   8fbf6:	4610      	mov	r0, r2
   8fbf8:	4798      	blx	r3
   8fbfa:	4603      	mov	r3, r0
   8fbfc:	b29a      	uxth	r2, r3
   8fbfe:	4b54      	ldr	r3, [pc, #336]	; (8fd50 <Cl_SysStat_System_Status_Query+0x748>)
   8fc00:	84da      	strh	r2, [r3, #38]	; 0x26
	
	raw_data = 	cl_sys_statbuffer.aptstatus;
   8fc02:	4b53      	ldr	r3, [pc, #332]	; (8fd50 <Cl_SysStat_System_Status_Query+0x748>)
   8fc04:	8a1b      	ldrh	r3, [r3, #16]
   8fc06:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	
	//calibration_apt(raw_data);
	
	//Apt_bar = ((Apt_bar* 49) + pressure_final_apt)/50;
//manav03 added	
	if(raw_data > 32268){
   8fc0a:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
   8fc0e:	f647 620c 	movw	r2, #32268	; 0x7e0c
   8fc12:	4293      	cmp	r3, r2
   8fc14:	dd04      	ble.n	8fc20 <Cl_SysStat_System_Status_Query+0x618>
		
		Apt_bar  = (65536 -raw_data)*(-1);
   8fc16:	4a4f      	ldr	r2, [pc, #316]	; (8fd54 <Cl_SysStat_System_Status_Query+0x74c>)
   8fc18:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
   8fc1c:	8013      	strh	r3, [r2, #0]
   8fc1e:	e00c      	b.n	8fc3a <Cl_SysStat_System_Status_Query+0x632>
		
	}
	else{
		Apt_bar = (float)raw_data;
   8fc20:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
   8fc24:	4b4c      	ldr	r3, [pc, #304]	; (8fd58 <Cl_SysStat_System_Status_Query+0x750>)
   8fc26:	4610      	mov	r0, r2
   8fc28:	4798      	blx	r3
   8fc2a:	4602      	mov	r2, r0
   8fc2c:	4b4b      	ldr	r3, [pc, #300]	; (8fd5c <Cl_SysStat_System_Status_Query+0x754>)
   8fc2e:	4610      	mov	r0, r2
   8fc30:	4798      	blx	r3
   8fc32:	4603      	mov	r3, r0
   8fc34:	b29a      	uxth	r2, r3
   8fc36:	4b47      	ldr	r3, [pc, #284]	; (8fd54 <Cl_SysStat_System_Status_Query+0x74c>)
   8fc38:	801a      	strh	r2, [r3, #0]
	}
	
	cl_sys_statbuffer.aptstatus = 	Apt_bar/10 + 1000 ;
   8fc3a:	4b46      	ldr	r3, [pc, #280]	; (8fd54 <Cl_SysStat_System_Status_Query+0x74c>)
   8fc3c:	881b      	ldrh	r3, [r3, #0]
   8fc3e:	b21b      	sxth	r3, r3
   8fc40:	4a47      	ldr	r2, [pc, #284]	; (8fd60 <Cl_SysStat_System_Status_Query+0x758>)
   8fc42:	fb82 1203 	smull	r1, r2, r2, r3
   8fc46:	1092      	asrs	r2, r2, #2
   8fc48:	17db      	asrs	r3, r3, #31
   8fc4a:	1ad3      	subs	r3, r2, r3
   8fc4c:	b29b      	uxth	r3, r3
   8fc4e:	b29b      	uxth	r3, r3
   8fc50:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   8fc54:	b29a      	uxth	r2, r3
   8fc56:	4b3e      	ldr	r3, [pc, #248]	; (8fd50 <Cl_SysStat_System_Status_Query+0x748>)
   8fc58:	821a      	strh	r2, [r3, #16]
	
	raw_data = 	cl_sys_statbuffer.vptstatus;
   8fc5a:	4b3d      	ldr	r3, [pc, #244]	; (8fd50 <Cl_SysStat_System_Status_Query+0x748>)
   8fc5c:	8a5b      	ldrh	r3, [r3, #18]
   8fc5e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
//manav03 added	
	if(raw_data > 32268){
   8fc62:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
   8fc66:	f647 620c 	movw	r2, #32268	; 0x7e0c
   8fc6a:	4293      	cmp	r3, r2
   8fc6c:	dd04      	ble.n	8fc78 <Cl_SysStat_System_Status_Query+0x670>
		
		Vpt_bar  = (65536 -raw_data)*(-1);
   8fc6e:	4a3d      	ldr	r2, [pc, #244]	; (8fd64 <Cl_SysStat_System_Status_Query+0x75c>)
   8fc70:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
   8fc74:	8013      	strh	r3, [r2, #0]
   8fc76:	e00c      	b.n	8fc92 <Cl_SysStat_System_Status_Query+0x68a>
		
	}
	else{
		Vpt_bar = (float)raw_data;
   8fc78:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
   8fc7c:	4b36      	ldr	r3, [pc, #216]	; (8fd58 <Cl_SysStat_System_Status_Query+0x750>)
   8fc7e:	4610      	mov	r0, r2
   8fc80:	4798      	blx	r3
   8fc82:	4602      	mov	r2, r0
   8fc84:	4b35      	ldr	r3, [pc, #212]	; (8fd5c <Cl_SysStat_System_Status_Query+0x754>)
   8fc86:	4610      	mov	r0, r2
   8fc88:	4798      	blx	r3
   8fc8a:	4603      	mov	r3, r0
   8fc8c:	b29a      	uxth	r2, r3
   8fc8e:	4b35      	ldr	r3, [pc, #212]	; (8fd64 <Cl_SysStat_System_Status_Query+0x75c>)
   8fc90:	801a      	strh	r2, [r3, #0]
	}
	
	cl_sys_statbuffer.vptstatus = 	Vpt_bar/10 + 1000 ;
   8fc92:	4b34      	ldr	r3, [pc, #208]	; (8fd64 <Cl_SysStat_System_Status_Query+0x75c>)
   8fc94:	881b      	ldrh	r3, [r3, #0]
   8fc96:	b21b      	sxth	r3, r3
   8fc98:	4a31      	ldr	r2, [pc, #196]	; (8fd60 <Cl_SysStat_System_Status_Query+0x758>)
   8fc9a:	fb82 1203 	smull	r1, r2, r2, r3
   8fc9e:	1092      	asrs	r2, r2, #2
   8fca0:	17db      	asrs	r3, r3, #31
   8fca2:	1ad3      	subs	r3, r2, r3
   8fca4:	b29b      	uxth	r3, r3
   8fca6:	b29b      	uxth	r3, r3
   8fca8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   8fcac:	b29a      	uxth	r2, r3
   8fcae:	4b28      	ldr	r3, [pc, #160]	; (8fd50 <Cl_SysStat_System_Status_Query+0x748>)
   8fcb0:	825a      	strh	r2, [r3, #18]
// 	Vpt_bar = ((Vpt_bar* 49) + pressure_final_vpSt)/50;
// 	
// 	cl_sys_statbuffer.vptstatus =  Vpt_bar + 1000 ;
	
	//-------------------------------------------------------------------------------------------------
	cl_sys_statbuffer.Flowstatus = sv_sys_statbuffer.Flowstatus;
   8fcb2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
   8fcb6:	4b26      	ldr	r3, [pc, #152]	; (8fd50 <Cl_SysStat_System_Status_Query+0x748>)
   8fcb8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	cl_sys_statbuffer.Heparin_full_marker = sv_sys_statbuffer.Heparin_full_marker;
   8fcbc:	89ba      	ldrh	r2, [r7, #12]
   8fcbe:	4b24      	ldr	r3, [pc, #144]	; (8fd50 <Cl_SysStat_System_Status_Query+0x748>)
   8fcc0:	819a      	strh	r2, [r3, #12]
	cl_sys_statbuffer.Heparin_empty_marker = sv_sys_statbuffer.Heparin_empty_marker;
   8fcc2:	89fa      	ldrh	r2, [r7, #14]
   8fcc4:	4b22      	ldr	r3, [pc, #136]	; (8fd50 <Cl_SysStat_System_Status_Query+0x748>)
   8fcc6:	81da      	strh	r2, [r3, #14]
	cl_sys_statbuffer.Heparin_rotation_marker = sv_sys_statbuffer.Heparin_rotation_marker;
   8fcc8:	897a      	ldrh	r2, [r7, #10]
   8fcca:	4b21      	ldr	r3, [pc, #132]	; (8fd50 <Cl_SysStat_System_Status_Query+0x748>)
   8fccc:	815a      	strh	r2, [r3, #10]
	cl_sys_statbuffer.acid_inlet_status = sv_sys_statbuffer.acid_inlet_status;
   8fcce:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
   8fcd2:	4b1f      	ldr	r3, [pc, #124]	; (8fd50 <Cl_SysStat_System_Status_Query+0x748>)
   8fcd4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	cl_sys_statbuffer.bicarb_inlet_status = sv_sys_statbuffer.bicarb_inlet_status;
   8fcd8:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
   8fcdc:	4b1c      	ldr	r3, [pc, #112]	; (8fd50 <Cl_SysStat_System_Status_Query+0x748>)
   8fcde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	cl_sys_statbuffer.BP_DEC = sv_sys_statbuffer.BP_DEC;
   8fce2:	88fa      	ldrh	r2, [r7, #6]
   8fce4:	4b1a      	ldr	r3, [pc, #104]	; (8fd50 <Cl_SysStat_System_Status_Query+0x748>)
   8fce6:	80da      	strh	r2, [r3, #6]
	cl_sys_statbuffer.BP_INC = sv_sys_statbuffer.BP_INC;
   8fce8:	88ba      	ldrh	r2, [r7, #4]
   8fcea:	4b19      	ldr	r3, [pc, #100]	; (8fd50 <Cl_SysStat_System_Status_Query+0x748>)
   8fcec:	809a      	strh	r2, [r3, #4]
	cl_sys_statbuffer.PowerFailure = sv_sys_statbuffer.PowerFailure;
   8fcee:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
   8fcf2:	4b17      	ldr	r3, [pc, #92]	; (8fd50 <Cl_SysStat_System_Status_Query+0x748>)
   8fcf4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	cl_sys_statbuffer.VC_status= sv_sys_statbuffer.VC_status;
   8fcf8:	8aba      	ldrh	r2, [r7, #20]
   8fcfa:	4b15      	ldr	r3, [pc, #84]	; (8fd50 <Cl_SysStat_System_Status_Query+0x748>)
   8fcfc:	829a      	strh	r2, [r3, #20]
	cl_sys_statbuffer.acid_fd_back=sv_sys_statbuffer.acid_fd_back;
   8fcfe:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
   8fd02:	4b13      	ldr	r3, [pc, #76]	; (8fd50 <Cl_SysStat_System_Status_Query+0x748>)
   8fd04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	cl_sys_statbuffer.bicarb_fd_back=sv_sys_statbuffer.bicarb_fd_back;
   8fd08:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
   8fd0c:	4b10      	ldr	r3, [pc, #64]	; (8fd50 <Cl_SysStat_System_Status_Query+0x748>)
   8fd0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	{
		sv_cntrl_deactivate_valve((sv_valvetype)1  );
	}
	//testing
#endif
	return CL_OK;
   8fd12:	2300      	movs	r3, #0
}
   8fd14:	4618      	mov	r0, r3
   8fd16:	377c      	adds	r7, #124	; 0x7c
   8fd18:	46bd      	mov	sp, r7
   8fd1a:	bd90      	pop	{r4, r7, pc}
   8fd1c:	f3af 8000 	nop.w
   8fd20:	a6a44418 	.word	0xa6a44418
   8fd24:	3fb74c5d 	.word	0x3fb74c5d
   8fd28:	39581062 	.word	0x39581062
   8fd2c:	407ebcb4 	.word	0x407ebcb4
   8fd30:	000a79b9 	.word	0x000a79b9
   8fd34:	000a7a85 	.word	0x000a7a85
   8fd38:	000a7721 	.word	0x000a7721
   8fd3c:	000a8049 	.word	0x000a8049
   8fd40:	20071968 	.word	0x20071968
   8fd44:	000a80f5 	.word	0x000a80f5
   8fd48:	447a0000 	.word	0x447a0000
   8fd4c:	000a86dd 	.word	0x000a86dd
   8fd50:	200723d8 	.word	0x200723d8
   8fd54:	20071b50 	.word	0x20071b50
   8fd58:	000a825d 	.word	0x000a825d
   8fd5c:	000a8691 	.word	0x000a8691
   8fd60:	66666667 	.word	0x66666667
   8fd64:	20071b52 	.word	0x20071b52

0008fd68 <Cl_SysStat_GetSensor_Status_Query>:

Cl_ReturnCodeType 		Cl_SysStat_GetSensor_Status_Query(Cl_SensorDeviceIdType dataID, uint16_t* pdata)
{
   8fd68:	b480      	push	{r7}
   8fd6a:	b085      	sub	sp, #20
   8fd6c:	af00      	add	r7, sp, #0
   8fd6e:	4603      	mov	r3, r0
   8fd70:	6039      	str	r1, [r7, #0]
   8fd72:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType RetVal;
	Cl_Uint16Type tempdata=0;
   8fd74:	2300      	movs	r3, #0
   8fd76:	81fb      	strh	r3, [r7, #14]
	
		switch(dataID)
   8fd78:	79fb      	ldrb	r3, [r7, #7]
   8fd7a:	3b01      	subs	r3, #1
   8fd7c:	2b2f      	cmp	r3, #47	; 0x2f
   8fd7e:	f200 81f1 	bhi.w	90164 <Cl_SysStat_GetSensor_Status_Query+0x3fc>
   8fd82:	a201      	add	r2, pc, #4	; (adr r2, 8fd88 <Cl_SysStat_GetSensor_Status_Query+0x20>)
   8fd84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8fd88:	00090129 	.word	0x00090129
   8fd8c:	00090165 	.word	0x00090165
   8fd90:	0008feaf 	.word	0x0008feaf
   8fd94:	0008febf 	.word	0x0008febf
   8fd98:	0008fecf 	.word	0x0008fecf
   8fd9c:	0008ff09 	.word	0x0008ff09
   8fda0:	0008fedf 	.word	0x0008fedf
   8fda4:	0008ff17 	.word	0x0008ff17
   8fda8:	0008ff41 	.word	0x0008ff41
   8fdac:	0008ff4f 	.word	0x0008ff4f
   8fdb0:	0008ff5d 	.word	0x0008ff5d
   8fdb4:	0008ff89 	.word	0x0008ff89
   8fdb8:	0008ffb5 	.word	0x0008ffb5
   8fdbc:	0008ffc5 	.word	0x0008ffc5
   8fdc0:	0008fff1 	.word	0x0008fff1
   8fdc4:	0009001d 	.word	0x0009001d
   8fdc8:	00090165 	.word	0x00090165
   8fdcc:	0009004b 	.word	0x0009004b
   8fdd0:	00090081 	.word	0x00090081
   8fdd4:	000900af 	.word	0x000900af
   8fdd8:	0008ff25 	.word	0x0008ff25
   8fddc:	00090165 	.word	0x00090165
   8fde0:	000900e1 	.word	0x000900e1
   8fde4:	000900ef 	.word	0x000900ef
   8fde8:	00090119 	.word	0x00090119
   8fdec:	0008ff33 	.word	0x0008ff33
   8fdf0:	000900fd 	.word	0x000900fd
   8fdf4:	0009010b 	.word	0x0009010b
   8fdf8:	0008fe85 	.word	0x0008fe85
   8fdfc:	0008fe93 	.word	0x0008fe93
   8fe00:	0008fea1 	.word	0x0008fea1
   8fe04:	0008fe65 	.word	0x0008fe65
   8fe08:	0008fe75 	.word	0x0008fe75
   8fe0c:	0008fe49 	.word	0x0008fe49
   8fe10:	0008fe57 	.word	0x0008fe57
   8fe14:	00090165 	.word	0x00090165
   8fe18:	00090137 	.word	0x00090137
   8fe1c:	00090145 	.word	0x00090145
   8fe20:	00090155 	.word	0x00090155
   8fe24:	00090165 	.word	0x00090165
   8fe28:	00090165 	.word	0x00090165
   8fe2c:	00090165 	.word	0x00090165
   8fe30:	00090165 	.word	0x00090165
   8fe34:	00090165 	.word	0x00090165
   8fe38:	00090165 	.word	0x00090165
   8fe3c:	00090165 	.word	0x00090165
   8fe40:	00090165 	.word	0x00090165
   8fe44:	000900d3 	.word	0x000900d3
		{
			case SENSOR_ACID_COND:
			tempdata =  cl_sys_statbuffer.cond_acid;
   8fe48:	4b87      	ldr	r3, [pc, #540]	; (90068 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8fe4a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   8fe4c:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8fe4e:	683b      	ldr	r3, [r7, #0]
   8fe50:	89fa      	ldrh	r2, [r7, #14]
   8fe52:	801a      	strh	r2, [r3, #0]
			break;
   8fe54:	e187      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_BICARB_COND:
			tempdata =  cl_sys_statbuffer.cond_bicarb;
   8fe56:	4b84      	ldr	r3, [pc, #528]	; (90068 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8fe58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   8fe5a:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8fe5c:	683b      	ldr	r3, [r7, #0]
   8fe5e:	89fa      	ldrh	r2, [r7, #14]
   8fe60:	801a      	strh	r2, [r3, #0]
			break;
   8fe62:	e180      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_ACID_INLET:
			tempdata =  cl_sys_statbuffer.acid_inlet_status;
   8fe64:	4b80      	ldr	r3, [pc, #512]	; (90068 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8fe66:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
   8fe6a:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8fe6c:	683b      	ldr	r3, [r7, #0]
   8fe6e:	89fa      	ldrh	r2, [r7, #14]
   8fe70:	801a      	strh	r2, [r3, #0]
			break;
   8fe72:	e178      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_BICARB_INLET:
			
			tempdata =  cl_sys_statbuffer.bicarb_inlet_status;
   8fe74:	4b7c      	ldr	r3, [pc, #496]	; (90068 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8fe76:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
   8fe7a:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8fe7c:	683b      	ldr	r3, [r7, #0]
   8fe7e:	89fa      	ldrh	r2, [r7, #14]
   8fe80:	801a      	strh	r2, [r3, #0]
			
			break;
   8fe82:	e170      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_BP_INC_M:
			tempdata =  cl_sys_statbuffer.BP_INC;
   8fe84:	4b78      	ldr	r3, [pc, #480]	; (90068 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8fe86:	889b      	ldrh	r3, [r3, #4]
   8fe88:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8fe8a:	683b      	ldr	r3, [r7, #0]
   8fe8c:	89fa      	ldrh	r2, [r7, #14]
   8fe8e:	801a      	strh	r2, [r3, #0]
			break;
   8fe90:	e169      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_BP_DEC_M:
			tempdata =  cl_sys_statbuffer.BP_DEC;
   8fe92:	4b75      	ldr	r3, [pc, #468]	; (90068 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8fe94:	88db      	ldrh	r3, [r3, #6]
   8fe96:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8fe98:	683b      	ldr	r3, [r7, #0]
   8fe9a:	89fa      	ldrh	r2, [r7, #14]
   8fe9c:	801a      	strh	r2, [r3, #0]
			break;
   8fe9e:	e162      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_BP_ON_OFF_M:
			tempdata =  cl_sys_statbuffer.BP_ON_OFF;
   8fea0:	4b71      	ldr	r3, [pc, #452]	; (90068 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8fea2:	891b      	ldrh	r3, [r3, #8]
   8fea4:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8fea6:	683b      	ldr	r3, [r7, #0]
   8fea8:	89fa      	ldrh	r2, [r7, #14]
   8feaa:	801a      	strh	r2, [r3, #0]
			break;
   8feac:	e15b      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_HOLDER1STATUS:
			tempdata =  cl_sys_statbuffer.holder1status;
   8feae:	4b6e      	ldr	r3, [pc, #440]	; (90068 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8feb0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   8feb4:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8feb6:	683b      	ldr	r3, [r7, #0]
   8feb8:	89fa      	ldrh	r2, [r7, #14]
   8feba:	801a      	strh	r2, [r3, #0]
			break;
   8febc:	e153      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_HOLDER2STATUS:
			tempdata =  cl_sys_statbuffer.holder2status;
   8febe:	4b6a      	ldr	r3, [pc, #424]	; (90068 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8fec0:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
   8fec4:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8fec6:	683b      	ldr	r3, [r7, #0]
   8fec8:	89fa      	ldrh	r2, [r7, #14]
   8feca:	801a      	strh	r2, [r3, #0]
			break;
   8fecc:	e14b      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_LEVELSWITCH:
			tempdata =  cl_sys_statbuffer.levelswitch1;
   8fece:	4b66      	ldr	r3, [pc, #408]	; (90068 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8fed0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   8fed4:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8fed6:	683b      	ldr	r3, [r7, #0]
   8fed8:	89fa      	ldrh	r2, [r7, #14]
   8feda:	801a      	strh	r2, [r3, #0]
			break;
   8fedc:	e143      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>

			case SENSOR_COND_STATUS:
			if(!test_sensor_status[SENSOR_COND_STATUS].test_flag)
   8fede:	4b63      	ldr	r3, [pc, #396]	; (9006c <Cl_SysStat_GetSensor_Status_Query+0x304>)
   8fee0:	7f9b      	ldrb	r3, [r3, #30]
   8fee2:	f083 0301 	eor.w	r3, r3, #1
   8fee6:	b2db      	uxtb	r3, r3
   8fee8:	2b00      	cmp	r3, #0
   8feea:	d006      	beq.n	8fefa <Cl_SysStat_GetSensor_Status_Query+0x192>
			{
				tempdata =  cl_sys_statbuffer.cond_status;
   8feec:	4b5e      	ldr	r3, [pc, #376]	; (90068 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8feee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
   8fef0:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8fef2:	683b      	ldr	r3, [r7, #0]
   8fef4:	89fa      	ldrh	r2, [r7, #14]
   8fef6:	801a      	strh	r2, [r3, #0]
			else
			{
				tempdata =  test_sensor_status[SENSOR_COND_STATUS].test_sensord_data;
				*pdata  = tempdata;
			}
			break;
   8fef8:	e135      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
				tempdata =  cl_sys_statbuffer.cond_status;
				*pdata  = tempdata;
			}
			else
			{
				tempdata =  test_sensor_status[SENSOR_COND_STATUS].test_sensord_data;
   8fefa:	4b5c      	ldr	r3, [pc, #368]	; (9006c <Cl_SysStat_GetSensor_Status_Query+0x304>)
   8fefc:	8b9b      	ldrh	r3, [r3, #28]
   8fefe:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8ff00:	683b      	ldr	r3, [r7, #0]
   8ff02:	89fa      	ldrh	r2, [r7, #14]
   8ff04:	801a      	strh	r2, [r3, #0]
			}
			break;
   8ff06:	e12e      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case  SENSOR_COND_WIEN_STATUS:
			tempdata =  cl_sys_statbuffer.cond_wien_status;
   8ff08:	4b57      	ldr	r3, [pc, #348]	; (90068 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8ff0a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
   8ff0c:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8ff0e:	683b      	ldr	r3, [r7, #0]
   8ff10:	89fa      	ldrh	r2, [r7, #14]
   8ff12:	801a      	strh	r2, [r3, #0]
			break;
   8ff14:	e127      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_COND_DAC:
			tempdata =  cl_sys_statbuffer.cond_status_dac;
   8ff16:	4b54      	ldr	r3, [pc, #336]	; (90068 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8ff18:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
   8ff1a:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8ff1c:	683b      	ldr	r3, [r7, #0]
   8ff1e:	89fa      	ldrh	r2, [r7, #14]
   8ff20:	801a      	strh	r2, [r3, #0]
			break;
   8ff22:	e120      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_FPCURRENTSTATUS:
			tempdata =  cl_sys_statbuffer.FPcurrentstatus;
   8ff24:	4b50      	ldr	r3, [pc, #320]	; (90068 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8ff26:	8b9b      	ldrh	r3, [r3, #28]
   8ff28:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8ff2a:	683b      	ldr	r3, [r7, #0]
   8ff2c:	89fa      	ldrh	r2, [r7, #14]
   8ff2e:	801a      	strh	r2, [r3, #0]
			break;
   8ff30:	e119      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_UFP_FB:
			tempdata =  cl_sys_statbuffer.UFPstatus;
   8ff32:	4b4d      	ldr	r3, [pc, #308]	; (90068 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8ff34:	8c1b      	ldrh	r3, [r3, #32]
   8ff36:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8ff38:	683b      	ldr	r3, [r7, #0]
   8ff3a:	89fa      	ldrh	r2, [r7, #14]
   8ff3c:	801a      	strh	r2, [r3, #0]
			break;
   8ff3e:	e112      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_ABDSTATUS:
			tempdata =  cl_sys_statbuffer.abdstatus;
   8ff40:	4b49      	ldr	r3, [pc, #292]	; (90068 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8ff42:	8b1b      	ldrh	r3, [r3, #24]
   8ff44:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8ff46:	683b      	ldr	r3, [r7, #0]
   8ff48:	89fa      	ldrh	r2, [r7, #14]
   8ff4a:	801a      	strh	r2, [r3, #0]
			break;
   8ff4c:	e10b      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_BDSTATUS:
			tempdata =  cl_sys_statbuffer.bdstatus;
   8ff4e:	4b46      	ldr	r3, [pc, #280]	; (90068 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8ff50:	8b5b      	ldrh	r3, [r3, #26]
   8ff52:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8ff54:	683b      	ldr	r3, [r7, #0]
   8ff56:	89fa      	ldrh	r2, [r7, #14]
   8ff58:	801a      	strh	r2, [r3, #0]
			break;
   8ff5a:	e104      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_APTSTATUS:
			if(!test_sensor_status[SENSOR_APTSTATUS].test_flag)
   8ff5c:	4b43      	ldr	r3, [pc, #268]	; (9006c <Cl_SysStat_GetSensor_Status_Query+0x304>)
   8ff5e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   8ff62:	f083 0301 	eor.w	r3, r3, #1
   8ff66:	b2db      	uxtb	r3, r3
   8ff68:	2b00      	cmp	r3, #0
   8ff6a:	d006      	beq.n	8ff7a <Cl_SysStat_GetSensor_Status_Query+0x212>
			{
							tempdata =  cl_sys_statbuffer.aptstatus;
   8ff6c:	4b3e      	ldr	r3, [pc, #248]	; (90068 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8ff6e:	8a1b      	ldrh	r3, [r3, #16]
   8ff70:	81fb      	strh	r3, [r7, #14]
							*pdata  = tempdata;
   8ff72:	683b      	ldr	r3, [r7, #0]
   8ff74:	89fa      	ldrh	r2, [r7, #14]
   8ff76:	801a      	strh	r2, [r3, #0]
			{
				tempdata =  test_sensor_status[SENSOR_APTSTATUS].test_sensord_data;
				*pdata  = tempdata;
			}

			break;
   8ff78:	e0f5      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
							tempdata =  cl_sys_statbuffer.aptstatus;
							*pdata  = tempdata;
			}
			else
			{
				tempdata =  test_sensor_status[SENSOR_APTSTATUS].test_sensord_data;
   8ff7a:	4b3c      	ldr	r3, [pc, #240]	; (9006c <Cl_SysStat_GetSensor_Status_Query+0x304>)
   8ff7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   8ff7e:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8ff80:	683b      	ldr	r3, [r7, #0]
   8ff82:	89fa      	ldrh	r2, [r7, #14]
   8ff84:	801a      	strh	r2, [r3, #0]
			}

			break;
   8ff86:	e0ee      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_VPTSTATUS:
			if(!test_sensor_status[SENSOR_VPTSTATUS].test_flag)
   8ff88:	4b38      	ldr	r3, [pc, #224]	; (9006c <Cl_SysStat_GetSensor_Status_Query+0x304>)
   8ff8a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   8ff8e:	f083 0301 	eor.w	r3, r3, #1
   8ff92:	b2db      	uxtb	r3, r3
   8ff94:	2b00      	cmp	r3, #0
   8ff96:	d006      	beq.n	8ffa6 <Cl_SysStat_GetSensor_Status_Query+0x23e>
			{
				tempdata =  cl_sys_statbuffer.vptstatus;
   8ff98:	4b33      	ldr	r3, [pc, #204]	; (90068 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8ff9a:	8a5b      	ldrh	r3, [r3, #18]
   8ff9c:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8ff9e:	683b      	ldr	r3, [r7, #0]
   8ffa0:	89fa      	ldrh	r2, [r7, #14]
   8ffa2:	801a      	strh	r2, [r3, #0]
			else
			{
				tempdata =  test_sensor_status[SENSOR_VPTSTATUS].test_sensord_data;
				*pdata  = tempdata;
			}
			break;
   8ffa4:	e0df      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
				tempdata =  cl_sys_statbuffer.vptstatus;
				*pdata  = tempdata;
			}
			else
			{
				tempdata =  test_sensor_status[SENSOR_VPTSTATUS].test_sensord_data;
   8ffa6:	4b31      	ldr	r3, [pc, #196]	; (9006c <Cl_SysStat_GetSensor_Status_Query+0x304>)
   8ffa8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   8ffaa:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8ffac:	683b      	ldr	r3, [r7, #0]
   8ffae:	89fa      	ldrh	r2, [r7, #14]
   8ffb0:	801a      	strh	r2, [r3, #0]
			}
			break;
   8ffb2:	e0d8      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_BLDSTATUS:
			tempdata =  cl_sys_statbuffer.bldstatus;
   8ffb4:	4b2c      	ldr	r3, [pc, #176]	; (90068 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8ffb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
   8ffba:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8ffbc:	683b      	ldr	r3, [r7, #0]
   8ffbe:	89fa      	ldrh	r2, [r7, #14]
   8ffc0:	801a      	strh	r2, [r3, #0]
			break;
   8ffc2:	e0d0      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_PS1STATUS:
				if(!test_sensor_status[SENSOR_PS1STATUS].test_flag)
   8ffc4:	4b29      	ldr	r3, [pc, #164]	; (9006c <Cl_SysStat_GetSensor_Status_Query+0x304>)
   8ffc6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   8ffca:	f083 0301 	eor.w	r3, r3, #1
   8ffce:	b2db      	uxtb	r3, r3
   8ffd0:	2b00      	cmp	r3, #0
   8ffd2:	d006      	beq.n	8ffe2 <Cl_SysStat_GetSensor_Status_Query+0x27a>
					{
						tempdata =  cl_sys_statbuffer.ps1status;
   8ffd4:	4b24      	ldr	r3, [pc, #144]	; (90068 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8ffd6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   8ffd8:	81fb      	strh	r3, [r7, #14]
						*pdata  = tempdata;
   8ffda:	683b      	ldr	r3, [r7, #0]
   8ffdc:	89fa      	ldrh	r2, [r7, #14]
   8ffde:	801a      	strh	r2, [r3, #0]
				else
					{
						tempdata =  test_sensor_status[SENSOR_PS1STATUS].test_sensord_data;
						*pdata  = tempdata;
					}
			break;
   8ffe0:	e0c1      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
						tempdata =  cl_sys_statbuffer.ps1status;
						*pdata  = tempdata;
					}
				else
					{
						tempdata =  test_sensor_status[SENSOR_PS1STATUS].test_sensord_data;
   8ffe2:	4b22      	ldr	r3, [pc, #136]	; (9006c <Cl_SysStat_GetSensor_Status_Query+0x304>)
   8ffe4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
   8ffe6:	81fb      	strh	r3, [r7, #14]
						*pdata  = tempdata;
   8ffe8:	683b      	ldr	r3, [r7, #0]
   8ffea:	89fa      	ldrh	r2, [r7, #14]
   8ffec:	801a      	strh	r2, [r3, #0]
					}
			break;
   8ffee:	e0ba      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_PS2STATUS:
				if(!test_sensor_status[SENSOR_PS2STATUS].test_flag)
   8fff0:	4b1e      	ldr	r3, [pc, #120]	; (9006c <Cl_SysStat_GetSensor_Status_Query+0x304>)
   8fff2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   8fff6:	f083 0301 	eor.w	r3, r3, #1
   8fffa:	b2db      	uxtb	r3, r3
   8fffc:	2b00      	cmp	r3, #0
   8fffe:	d006      	beq.n	9000e <Cl_SysStat_GetSensor_Status_Query+0x2a6>
					{
						tempdata =  cl_sys_statbuffer.ps2status;
   90000:	4b19      	ldr	r3, [pc, #100]	; (90068 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   90002:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   90004:	81fb      	strh	r3, [r7, #14]
						*pdata  = tempdata;
   90006:	683b      	ldr	r3, [r7, #0]
   90008:	89fa      	ldrh	r2, [r7, #14]
   9000a:	801a      	strh	r2, [r3, #0]
				else
					{
						tempdata =  test_sensor_status[SENSOR_PS2STATUS].test_sensord_data;
						*pdata  = tempdata;
					}
			break;
   9000c:	e0ab      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
						tempdata =  cl_sys_statbuffer.ps2status;
						*pdata  = tempdata;
					}
				else
					{
						tempdata =  test_sensor_status[SENSOR_PS2STATUS].test_sensord_data;
   9000e:	4b17      	ldr	r3, [pc, #92]	; (9006c <Cl_SysStat_GetSensor_Status_Query+0x304>)
   90010:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   90012:	81fb      	strh	r3, [r7, #14]
						*pdata  = tempdata;
   90014:	683b      	ldr	r3, [r7, #0]
   90016:	89fa      	ldrh	r2, [r7, #14]
   90018:	801a      	strh	r2, [r3, #0]
					}
			break;
   9001a:	e0a4      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_PS3STATUS:

				if(!test_sensor_status[SENSOR_PS3STATUS].test_flag)
   9001c:	4b13      	ldr	r3, [pc, #76]	; (9006c <Cl_SysStat_GetSensor_Status_Query+0x304>)
   9001e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   90022:	f083 0301 	eor.w	r3, r3, #1
   90026:	b2db      	uxtb	r3, r3
   90028:	2b00      	cmp	r3, #0
   9002a:	d006      	beq.n	9003a <Cl_SysStat_GetSensor_Status_Query+0x2d2>
				{
					tempdata =  cl_sys_statbuffer.ps3status;
   9002c:	4b0e      	ldr	r3, [pc, #56]	; (90068 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   9002e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   90030:	81fb      	strh	r3, [r7, #14]
					*pdata  = tempdata;
   90032:	683b      	ldr	r3, [r7, #0]
   90034:	89fa      	ldrh	r2, [r7, #14]
   90036:	801a      	strh	r2, [r3, #0]
				}
			

			//tempdata =  cl_sys_statbuffer.ps3status;
			//*pdata  = tempdata;
			break;
   90038:	e095      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
					tempdata =  cl_sys_statbuffer.ps3status;
					*pdata  = tempdata;
				}
				else
				{
					tempdata =  test_sensor_status[SENSOR_PS3STATUS].test_sensord_data;
   9003a:	4b0c      	ldr	r3, [pc, #48]	; (9006c <Cl_SysStat_GetSensor_Status_Query+0x304>)
   9003c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
   90040:	81fb      	strh	r3, [r7, #14]
					*pdata  = tempdata;
   90042:	683b      	ldr	r3, [r7, #0]
   90044:	89fa      	ldrh	r2, [r7, #14]
   90046:	801a      	strh	r2, [r3, #0]
				}
			

			//tempdata =  cl_sys_statbuffer.ps3status;
			//*pdata  = tempdata;
			break;
   90048:	e08d      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>

			case SENSOR_TEMP1STATUS:
						if(!test_sensor_status[SENSOR_TEMP1STATUS].test_flag)
   9004a:	4b08      	ldr	r3, [pc, #32]	; (9006c <Cl_SysStat_GetSensor_Status_Query+0x304>)
   9004c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
   90050:	f083 0301 	eor.w	r3, r3, #1
   90054:	b2db      	uxtb	r3, r3
   90056:	2b00      	cmp	r3, #0
   90058:	d00a      	beq.n	90070 <Cl_SysStat_GetSensor_Status_Query+0x308>
						{
							tempdata =  cl_sys_statbuffer.Temp1status;
   9005a:	4b03      	ldr	r3, [pc, #12]	; (90068 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   9005c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   9005e:	81fb      	strh	r3, [r7, #14]
							*pdata  = tempdata;
   90060:	683b      	ldr	r3, [r7, #0]
   90062:	89fa      	ldrh	r2, [r7, #14]
   90064:	801a      	strh	r2, [r3, #0]
							tempdata =  test_sensor_status[SENSOR_TEMP1STATUS].test_sensord_data;
							*pdata  = tempdata;
						}


			break;
   90066:	e07e      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
   90068:	200723d8 	.word	0x200723d8
   9006c:	200727d8 	.word	0x200727d8
							tempdata =  cl_sys_statbuffer.Temp1status;
							*pdata  = tempdata;
						}
						else
						{
							tempdata =  test_sensor_status[SENSOR_TEMP1STATUS].test_sensord_data;
   90070:	4b40      	ldr	r3, [pc, #256]	; (90174 <Cl_SysStat_GetSensor_Status_Query+0x40c>)
   90072:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
   90076:	81fb      	strh	r3, [r7, #14]
							*pdata  = tempdata;
   90078:	683b      	ldr	r3, [r7, #0]
   9007a:	89fa      	ldrh	r2, [r7, #14]
   9007c:	801a      	strh	r2, [r3, #0]
						}


			break;
   9007e:	e072      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_TEMP2STATUS:
			if(!test_sensor_status[SENSOR_TEMP2STATUS].test_flag)
   90080:	4b3c      	ldr	r3, [pc, #240]	; (90174 <Cl_SysStat_GetSensor_Status_Query+0x40c>)
   90082:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   90086:	f083 0301 	eor.w	r3, r3, #1
   9008a:	b2db      	uxtb	r3, r3
   9008c:	2b00      	cmp	r3, #0
   9008e:	d006      	beq.n	9009e <Cl_SysStat_GetSensor_Status_Query+0x336>
			{
				tempdata =  cl_sys_statbuffer.Temp2status;
   90090:	4b39      	ldr	r3, [pc, #228]	; (90178 <Cl_SysStat_GetSensor_Status_Query+0x410>)
   90092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   90094:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   90096:	683b      	ldr	r3, [r7, #0]
   90098:	89fa      	ldrh	r2, [r7, #14]
   9009a:	801a      	strh	r2, [r3, #0]
			else
			{
				tempdata =  test_sensor_status[SENSOR_TEMP2STATUS].test_sensord_data;
				*pdata  = tempdata;
			}
			break;
   9009c:	e063      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
				tempdata =  cl_sys_statbuffer.Temp2status;
				*pdata  = tempdata;
			}
			else
			{
				tempdata =  test_sensor_status[SENSOR_TEMP2STATUS].test_sensord_data;
   9009e:	4b35      	ldr	r3, [pc, #212]	; (90174 <Cl_SysStat_GetSensor_Status_Query+0x40c>)
   900a0:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
   900a4:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   900a6:	683b      	ldr	r3, [r7, #0]
   900a8:	89fa      	ldrh	r2, [r7, #14]
   900aa:	801a      	strh	r2, [r3, #0]
			}
			break;
   900ac:	e05b      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_TEMP3STATUS:
			
			if(error_flag == 0)
   900ae:	4b33      	ldr	r3, [pc, #204]	; (9017c <Cl_SysStat_GetSensor_Status_Query+0x414>)
   900b0:	781b      	ldrb	r3, [r3, #0]
   900b2:	2b00      	cmp	r3, #0
   900b4:	d106      	bne.n	900c4 <Cl_SysStat_GetSensor_Status_Query+0x35c>
			{
				tempdata =  cl_sys_statbuffer.Temp3status;
   900b6:	4b30      	ldr	r3, [pc, #192]	; (90178 <Cl_SysStat_GetSensor_Status_Query+0x410>)
   900b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   900ba:	81fb      	strh	r3, [r7, #14]
				//Cl_Uint16Type data=0;
				//tempdata =  Cl_get_Temperature_Value(TS3,&data);
				*pdata  = tempdata;
   900bc:	683b      	ldr	r3, [r7, #0]
   900be:	89fa      	ldrh	r2, [r7, #14]
   900c0:	801a      	strh	r2, [r3, #0]
			else
			{
				tempdata =  400;
				*pdata  = tempdata;
			}
			break;
   900c2:	e050      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
				//tempdata =  Cl_get_Temperature_Value(TS3,&data);
				*pdata  = tempdata;
			}
			else
			{
				tempdata =  400;
   900c4:	f44f 73c8 	mov.w	r3, #400	; 0x190
   900c8:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   900ca:	683b      	ldr	r3, [r7, #0]
   900cc:	89fa      	ldrh	r2, [r7, #14]
   900ce:	801a      	strh	r2, [r3, #0]
			}
			break;
   900d0:	e049      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case HEATER_HIGH_TEMP:
				tempdata =  cl_sys_statbuffer.Temp4status;
   900d2:	4b29      	ldr	r3, [pc, #164]	; (90178 <Cl_SysStat_GetSensor_Status_Query+0x410>)
   900d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   900d6:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   900d8:	683b      	ldr	r3, [r7, #0]
   900da:	89fa      	ldrh	r2, [r7, #14]
   900dc:	801a      	strh	r2, [r3, #0]
			break;
   900de:	e042      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case 	SENSOR_HP_START:
				tempdata =  cl_sys_statbuffer.Heparin_full_marker;
   900e0:	4b25      	ldr	r3, [pc, #148]	; (90178 <Cl_SysStat_GetSensor_Status_Query+0x410>)
   900e2:	899b      	ldrh	r3, [r3, #12]
   900e4:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   900e6:	683b      	ldr	r3, [r7, #0]
   900e8:	89fa      	ldrh	r2, [r7, #14]
   900ea:	801a      	strh	r2, [r3, #0]
			break;
   900ec:	e03b      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_HP_END:
				tempdata =  cl_sys_statbuffer.Heparin_empty_marker;
   900ee:	4b22      	ldr	r3, [pc, #136]	; (90178 <Cl_SysStat_GetSensor_Status_Query+0x410>)
   900f0:	89db      	ldrh	r3, [r3, #14]
   900f2:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   900f4:	683b      	ldr	r3, [r7, #0]
   900f6:	89fa      	ldrh	r2, [r7, #14]
   900f8:	801a      	strh	r2, [r3, #0]
			break;
   900fa:	e034      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_HP_FB:
				tempdata =  cl_sys_statbuffer.Heparin_rotation_marker;
   900fc:	4b1e      	ldr	r3, [pc, #120]	; (90178 <Cl_SysStat_GetSensor_Status_Query+0x410>)
   900fe:	895b      	ldrh	r3, [r3, #10]
   90100:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   90102:	683b      	ldr	r3, [r7, #0]
   90104:	89fa      	ldrh	r2, [r7, #14]
   90106:	801a      	strh	r2, [r3, #0]
			break;
   90108:	e02d      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_BP_FB:
				tempdata =  cl_sys_statbuffer.BPstatus;
   9010a:	4b1b      	ldr	r3, [pc, #108]	; (90178 <Cl_SysStat_GetSensor_Status_Query+0x410>)
   9010c:	885b      	ldrh	r3, [r3, #2]
   9010e:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   90110:	683b      	ldr	r3, [r7, #0]
   90112:	89fa      	ldrh	r2, [r7, #14]
   90114:	801a      	strh	r2, [r3, #0]
			break;
   90116:	e026      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_FLOW_SWITCH:
				tempdata =  cl_sys_statbuffer.Flowstatus;
   90118:	4b17      	ldr	r3, [pc, #92]	; (90178 <Cl_SysStat_GetSensor_Status_Query+0x410>)
   9011a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
   9011e:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   90120:	683b      	ldr	r3, [r7, #0]
   90122:	89fa      	ldrh	r2, [r7, #14]
   90124:	801a      	strh	r2, [r3, #0]
			break;
   90126:	e01e      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_BLOODDOOR_STATUS:
				tempdata =  cl_sys_statbuffer.bloodpumpdoor;
   90128:	4b13      	ldr	r3, [pc, #76]	; (90178 <Cl_SysStat_GetSensor_Status_Query+0x410>)
   9012a:	781b      	ldrb	r3, [r3, #0]
   9012c:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   9012e:	683b      	ldr	r3, [r7, #0]
   90130:	89fa      	ldrh	r2, [r7, #14]
   90132:	801a      	strh	r2, [r3, #0]
				break;
   90134:	e017      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_VC_F_B:	
				tempdata =  cl_sys_statbuffer.VC_status;
   90136:	4b10      	ldr	r3, [pc, #64]	; (90178 <Cl_SysStat_GetSensor_Status_Query+0x410>)
   90138:	8a9b      	ldrh	r3, [r3, #20]
   9013a:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   9013c:	683b      	ldr	r3, [r7, #0]
   9013e:	89fa      	ldrh	r2, [r7, #14]
   90140:	801a      	strh	r2, [r3, #0]
				break;
   90142:	e010      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_ACID_F_B:
				tempdata = cl_sys_statbuffer.acid_fd_back;
   90144:	4b0c      	ldr	r3, [pc, #48]	; (90178 <Cl_SysStat_GetSensor_Status_Query+0x410>)
   90146:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
   9014a:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   9014c:	683b      	ldr	r3, [r7, #0]
   9014e:	89fa      	ldrh	r2, [r7, #14]
   90150:	801a      	strh	r2, [r3, #0]
				break;
   90152:	e008      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			case SENSOR_BICARB_F_B:
			     tempdata = cl_sys_statbuffer.bicarb_fd_back;
   90154:	4b08      	ldr	r3, [pc, #32]	; (90178 <Cl_SysStat_GetSensor_Status_Query+0x410>)
   90156:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
   9015a:	81fb      	strh	r3, [r7, #14]
				 *pdata  = tempdata;
   9015c:	683b      	ldr	r3, [r7, #0]
   9015e:	89fa      	ldrh	r2, [r7, #14]
   90160:	801a      	strh	r2, [r3, #0]
				 break;	
   90162:	e000      	b.n	90166 <Cl_SysStat_GetSensor_Status_Query+0x3fe>
			default:
			break;
   90164:	bf00      	nop
		}
	return CL_OK;
   90166:	2300      	movs	r3, #0
}
   90168:	4618      	mov	r0, r3
   9016a:	3714      	adds	r7, #20
   9016c:	46bd      	mov	sp, r7
   9016e:	f85d 7b04 	ldr.w	r7, [sp], #4
   90172:	4770      	bx	lr
   90174:	200727d8 	.word	0x200727d8
   90178:	200723d8 	.word	0x200723d8
   9017c:	20071a49 	.word	0x20071a49

00090180 <Cl_SysStat_mean_status_update>:

void Cl_SysStat_mean_status_update(void)
{
   90180:	b590      	push	{r4, r7, lr}
   90182:	b09d      	sub	sp, #116	; 0x74
   90184:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType cl_thretval = CL_ERROR;
   90186:	2304      	movs	r3, #4
   90188:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	int16_t Ps1,Ps2,Ps3,Atp,Vtp,TMP = 0;
   9018c:	2300      	movs	r3, #0
   9018e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	int16_t sensordata=0,temp2=0;
   90192:	2300      	movs	r3, #0
   90194:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
   90198:	2300      	movs	r3, #0
   9019a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	static int16_t prev_flow_status=0;
	int16_t Pressuredata=0;
   9019e:	2300      	movs	r3, #0
   901a0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	int16_t sensordatamillivolts =0;
   901a4:	2300      	movs	r3, #0
   901a6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	int16_t tempdata =0,count1;
   901aa:	2300      	movs	r3, #0
   901ac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	int16_t Pressuredatainmillibars =0;
   901b0:	2300      	movs	r3, #0
   901b2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	Cl_Uint8Type* pdataarray;
	cl_Datastreamtype cl_tdata;
	int16_t bulk_data[14];
	uint16_t raw_cond =0;
   901b6:	2300      	movs	r3, #0
   901b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	StateLogDatatype data;
	Cl_Uint8Type dataarray[36] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   901ba:	1d3b      	adds	r3, r7, #4
   901bc:	2200      	movs	r2, #0
   901be:	601a      	str	r2, [r3, #0]
   901c0:	3304      	adds	r3, #4
   901c2:	2200      	movs	r2, #0
   901c4:	601a      	str	r2, [r3, #0]
   901c6:	3304      	adds	r3, #4
   901c8:	2200      	movs	r2, #0
   901ca:	601a      	str	r2, [r3, #0]
   901cc:	3304      	adds	r3, #4
   901ce:	2200      	movs	r2, #0
   901d0:	601a      	str	r2, [r3, #0]
   901d2:	3304      	adds	r3, #4
   901d4:	2200      	movs	r2, #0
   901d6:	601a      	str	r2, [r3, #0]
   901d8:	3304      	adds	r3, #4
   901da:	2200      	movs	r2, #0
   901dc:	601a      	str	r2, [r3, #0]
   901de:	3304      	adds	r3, #4
   901e0:	2200      	movs	r2, #0
   901e2:	601a      	str	r2, [r3, #0]
   901e4:	3304      	adds	r3, #4
   901e6:	2200      	movs	r2, #0
   901e8:	601a      	str	r2, [r3, #0]
   901ea:	3304      	adds	r3, #4
   901ec:	2200      	movs	r2, #0
   901ee:	601a      	str	r2, [r3, #0]
   901f0:	3304      	adds	r3, #4
	Count_500ms++;
   901f2:	4baa      	ldr	r3, [pc, #680]	; (9049c <Cl_SysStat_mean_status_update+0x31c>)
   901f4:	781b      	ldrb	r3, [r3, #0]
   901f6:	3301      	adds	r3, #1
   901f8:	b2da      	uxtb	r2, r3
   901fa:	4ba8      	ldr	r3, [pc, #672]	; (9049c <Cl_SysStat_mean_status_update+0x31c>)
   901fc:	701a      	strb	r2, [r3, #0]
	
	float TS3;
	Cl_Uint8Type count=0;
   901fe:	2300      	movs	r3, #0
   90200:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	static Cl_Uint8Type  flow_counter =0 ;
	static Cl_Uint16Type counter=0,threeseccounter=0,CS_ontimecnter=0,cnt = 0,levelsw_cnter = 0;
	if(syncdone)
   90204:	4ba6      	ldr	r3, [pc, #664]	; (904a0 <Cl_SysStat_mean_status_update+0x320>)
   90206:	781b      	ldrb	r3, [r3, #0]
   90208:	2b00      	cmp	r3, #0
   9020a:	f000 83a4 	beq.w	90956 <Cl_SysStat_mean_status_update+0x7d6>
	{
	
		if(syncdone)
   9020e:	4ba4      	ldr	r3, [pc, #656]	; (904a0 <Cl_SysStat_mean_status_update+0x320>)
   90210:	781b      	ldrb	r3, [r3, #0]
   90212:	2b00      	cmp	r3, #0
   90214:	f000 839f 	beq.w	90956 <Cl_SysStat_mean_status_update+0x7d6>
		{
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &sensordata);
   90218:	f107 0350 	add.w	r3, r7, #80	; 0x50
   9021c:	2012      	movs	r0, #18
   9021e:	4619      	mov	r1, r3
   90220:	4ba0      	ldr	r3, [pc, #640]	; (904a4 <Cl_SysStat_mean_status_update+0x324>)
   90222:	4798      	blx	r3
			{
							
// 				uint16_t cal_data  = (402 *100* sensordata)/(2*32768); 
// 				res_temp_lookuptable(cal_data);
				avgtmp1 =	(avgtmp1*9 + sensordata)/10;
   90224:	4ba0      	ldr	r3, [pc, #640]	; (904a8 <Cl_SysStat_mean_status_update+0x328>)
   90226:	681a      	ldr	r2, [r3, #0]
   90228:	4ba0      	ldr	r3, [pc, #640]	; (904ac <Cl_SysStat_mean_status_update+0x32c>)
   9022a:	4610      	mov	r0, r2
   9022c:	49a0      	ldr	r1, [pc, #640]	; (904b0 <Cl_SysStat_mean_status_update+0x330>)
   9022e:	4798      	blx	r3
   90230:	4603      	mov	r3, r0
   90232:	461c      	mov	r4, r3
   90234:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
   90238:	b21a      	sxth	r2, r3
   9023a:	4b9e      	ldr	r3, [pc, #632]	; (904b4 <Cl_SysStat_mean_status_update+0x334>)
   9023c:	4610      	mov	r0, r2
   9023e:	4798      	blx	r3
   90240:	4602      	mov	r2, r0
   90242:	4b9d      	ldr	r3, [pc, #628]	; (904b8 <Cl_SysStat_mean_status_update+0x338>)
   90244:	4620      	mov	r0, r4
   90246:	4611      	mov	r1, r2
   90248:	4798      	blx	r3
   9024a:	4603      	mov	r3, r0
   9024c:	461a      	mov	r2, r3
   9024e:	4b9b      	ldr	r3, [pc, #620]	; (904bc <Cl_SysStat_mean_status_update+0x33c>)
   90250:	4610      	mov	r0, r2
   90252:	499b      	ldr	r1, [pc, #620]	; (904c0 <Cl_SysStat_mean_status_update+0x340>)
   90254:	4798      	blx	r3
   90256:	4603      	mov	r3, r0
   90258:	461a      	mov	r2, r3
   9025a:	4b93      	ldr	r3, [pc, #588]	; (904a8 <Cl_SysStat_mean_status_update+0x328>)
   9025c:	601a      	str	r2, [r3, #0]
// //				temp = temp - 25 +12 + 2.5;
// 				bulk_data[0] = res_temp_value/10;
// 				//bulk_data[0] = toggle_count_flow;
//				bulk_data[0] = sensordata/10;
			
				bulk_data[0] = avgtmp1/10; // manav changed
   9025e:	4b92      	ldr	r3, [pc, #584]	; (904a8 <Cl_SysStat_mean_status_update+0x328>)
   90260:	681a      	ldr	r2, [r3, #0]
   90262:	4b96      	ldr	r3, [pc, #600]	; (904bc <Cl_SysStat_mean_status_update+0x33c>)
   90264:	4610      	mov	r0, r2
   90266:	4996      	ldr	r1, [pc, #600]	; (904c0 <Cl_SysStat_mean_status_update+0x340>)
   90268:	4798      	blx	r3
   9026a:	4603      	mov	r3, r0
   9026c:	461a      	mov	r2, r3
   9026e:	4b95      	ldr	r3, [pc, #596]	; (904c4 <Cl_SysStat_mean_status_update+0x344>)
   90270:	4610      	mov	r0, r2
   90272:	4798      	blx	r3
   90274:	4603      	mov	r3, r0
   90276:	b29b      	uxth	r3, r3
   90278:	863b      	strh	r3, [r7, #48]	; 0x30
				
				
				data.fourbytedata = avgtmp1/10;
   9027a:	4b8b      	ldr	r3, [pc, #556]	; (904a8 <Cl_SysStat_mean_status_update+0x328>)
   9027c:	681a      	ldr	r2, [r3, #0]
   9027e:	4b8f      	ldr	r3, [pc, #572]	; (904bc <Cl_SysStat_mean_status_update+0x33c>)
   90280:	4610      	mov	r0, r2
   90282:	498f      	ldr	r1, [pc, #572]	; (904c0 <Cl_SysStat_mean_status_update+0x340>)
   90284:	4798      	blx	r3
   90286:	4603      	mov	r3, r0
   90288:	461a      	mov	r2, r3
   9028a:	4b8f      	ldr	r3, [pc, #572]	; (904c8 <Cl_SysStat_mean_status_update+0x348>)
   9028c:	4610      	mov	r0, r2
   9028e:	4798      	blx	r3
   90290:	4603      	mov	r3, r0
   90292:	62bb      	str	r3, [r7, #40]	; 0x28
				dataarray[count++] = data.bytedata[0];
   90294:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   90298:	1c5a      	adds	r2, r3, #1
   9029a:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   9029e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   902a2:	f107 0170 	add.w	r1, r7, #112	; 0x70
   902a6:	440b      	add	r3, r1
   902a8:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[1];
   902ac:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   902b0:	1c5a      	adds	r2, r3, #1
   902b2:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   902b6:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
   902ba:	f107 0170 	add.w	r1, r7, #112	; 0x70
   902be:	440b      	add	r3, r1
   902c0:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[2];
   902c4:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   902c8:	1c5a      	adds	r2, r3, #1
   902ca:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   902ce:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
   902d2:	f107 0170 	add.w	r1, r7, #112	; 0x70
   902d6:	440b      	add	r3, r1
   902d8:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[3];
   902dc:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   902e0:	1c5a      	adds	r2, r3, #1
   902e2:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   902e6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   902ea:	f107 0170 	add.w	r1, r7, #112	; 0x70
   902ee:	440b      	add	r3, r1
   902f0:	f803 2c6c 	strb.w	r2, [r3, #-108]
				
			}
	
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);
   902f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
   902f8:	2013      	movs	r0, #19
   902fa:	4619      	mov	r1, r3
   902fc:	4b69      	ldr	r3, [pc, #420]	; (904a4 <Cl_SysStat_mean_status_update+0x324>)
   902fe:	4798      	blx	r3
			{
// 					
// 				uint16_t cal_data  = (402 *100* sensordata)/(2*32768); 
// 				res_temp_lookuptable(cal_data);
				avgtmp2 =	((avgtmp2*9 + sensordata)/10 );
   90300:	4b72      	ldr	r3, [pc, #456]	; (904cc <Cl_SysStat_mean_status_update+0x34c>)
   90302:	681a      	ldr	r2, [r3, #0]
   90304:	4b69      	ldr	r3, [pc, #420]	; (904ac <Cl_SysStat_mean_status_update+0x32c>)
   90306:	4610      	mov	r0, r2
   90308:	4969      	ldr	r1, [pc, #420]	; (904b0 <Cl_SysStat_mean_status_update+0x330>)
   9030a:	4798      	blx	r3
   9030c:	4603      	mov	r3, r0
   9030e:	461c      	mov	r4, r3
   90310:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
   90314:	b21a      	sxth	r2, r3
   90316:	4b67      	ldr	r3, [pc, #412]	; (904b4 <Cl_SysStat_mean_status_update+0x334>)
   90318:	4610      	mov	r0, r2
   9031a:	4798      	blx	r3
   9031c:	4602      	mov	r2, r0
   9031e:	4b66      	ldr	r3, [pc, #408]	; (904b8 <Cl_SysStat_mean_status_update+0x338>)
   90320:	4620      	mov	r0, r4
   90322:	4611      	mov	r1, r2
   90324:	4798      	blx	r3
   90326:	4603      	mov	r3, r0
   90328:	461a      	mov	r2, r3
   9032a:	4b64      	ldr	r3, [pc, #400]	; (904bc <Cl_SysStat_mean_status_update+0x33c>)
   9032c:	4610      	mov	r0, r2
   9032e:	4964      	ldr	r1, [pc, #400]	; (904c0 <Cl_SysStat_mean_status_update+0x340>)
   90330:	4798      	blx	r3
   90332:	4603      	mov	r3, r0
   90334:	461a      	mov	r2, r3
   90336:	4b65      	ldr	r3, [pc, #404]	; (904cc <Cl_SysStat_mean_status_update+0x34c>)
   90338:	601a      	str	r2, [r3, #0]
// 			//	temp = temp -45;                                      // commented for machine 2
// 			//	temp = temp - 25 +12;
// //				temp = temp - 25 + 8.1 ;
// 				bulk_data[1] = (res_temp_value- 4)/10;
//				bulk_data[1] = sensordata /10;
			bulk_data[1] = avgtmp2 /10; // manav changed
   9033a:	4b64      	ldr	r3, [pc, #400]	; (904cc <Cl_SysStat_mean_status_update+0x34c>)
   9033c:	681a      	ldr	r2, [r3, #0]
   9033e:	4b5f      	ldr	r3, [pc, #380]	; (904bc <Cl_SysStat_mean_status_update+0x33c>)
   90340:	4610      	mov	r0, r2
   90342:	495f      	ldr	r1, [pc, #380]	; (904c0 <Cl_SysStat_mean_status_update+0x340>)
   90344:	4798      	blx	r3
   90346:	4603      	mov	r3, r0
   90348:	461a      	mov	r2, r3
   9034a:	4b5e      	ldr	r3, [pc, #376]	; (904c4 <Cl_SysStat_mean_status_update+0x344>)
   9034c:	4610      	mov	r0, r2
   9034e:	4798      	blx	r3
   90350:	4603      	mov	r3, r0
   90352:	b29b      	uxth	r3, r3
   90354:	867b      	strh	r3, [r7, #50]	; 0x32
				
				data.fourbytedata = avgtmp2/10;
   90356:	4b5d      	ldr	r3, [pc, #372]	; (904cc <Cl_SysStat_mean_status_update+0x34c>)
   90358:	681a      	ldr	r2, [r3, #0]
   9035a:	4b58      	ldr	r3, [pc, #352]	; (904bc <Cl_SysStat_mean_status_update+0x33c>)
   9035c:	4610      	mov	r0, r2
   9035e:	4958      	ldr	r1, [pc, #352]	; (904c0 <Cl_SysStat_mean_status_update+0x340>)
   90360:	4798      	blx	r3
   90362:	4603      	mov	r3, r0
   90364:	461a      	mov	r2, r3
   90366:	4b58      	ldr	r3, [pc, #352]	; (904c8 <Cl_SysStat_mean_status_update+0x348>)
   90368:	4610      	mov	r0, r2
   9036a:	4798      	blx	r3
   9036c:	4603      	mov	r3, r0
   9036e:	62bb      	str	r3, [r7, #40]	; 0x28
				dataarray[count++] = data.bytedata[0];
   90370:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   90374:	1c5a      	adds	r2, r3, #1
   90376:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   9037a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   9037e:	f107 0170 	add.w	r1, r7, #112	; 0x70
   90382:	440b      	add	r3, r1
   90384:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[1];
   90388:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   9038c:	1c5a      	adds	r2, r3, #1
   9038e:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   90392:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
   90396:	f107 0170 	add.w	r1, r7, #112	; 0x70
   9039a:	440b      	add	r3, r1
   9039c:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[2];
   903a0:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   903a4:	1c5a      	adds	r2, r3, #1
   903a6:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   903aa:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
   903ae:	f107 0170 	add.w	r1, r7, #112	; 0x70
   903b2:	440b      	add	r3, r1
   903b4:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[3];
   903b8:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   903bc:	1c5a      	adds	r2, r3, #1
   903be:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   903c2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   903c6:	f107 0170 	add.w	r1, r7, #112	; 0x70
   903ca:	440b      	add	r3, r1
   903cc:	f803 2c6c 	strb.w	r2, [r3, #-108]
			}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   903d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
   903d4:	2014      	movs	r0, #20
   903d6:	4619      	mov	r1, r3
   903d8:	4b32      	ldr	r3, [pc, #200]	; (904a4 <Cl_SysStat_mean_status_update+0x324>)
   903da:	4798      	blx	r3
			{
// 				uint16_t cal_data  = (402 *100* sensordata)/(2*32768); 
// 				res_temp_lookuptable(cal_data);
				avgtmp3 =	(avgtmp3*9 + sensordata)/10;
   903dc:	4b3c      	ldr	r3, [pc, #240]	; (904d0 <Cl_SysStat_mean_status_update+0x350>)
   903de:	681a      	ldr	r2, [r3, #0]
   903e0:	4b32      	ldr	r3, [pc, #200]	; (904ac <Cl_SysStat_mean_status_update+0x32c>)
   903e2:	4610      	mov	r0, r2
   903e4:	4932      	ldr	r1, [pc, #200]	; (904b0 <Cl_SysStat_mean_status_update+0x330>)
   903e6:	4798      	blx	r3
   903e8:	4603      	mov	r3, r0
   903ea:	461c      	mov	r4, r3
   903ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
   903f0:	b21a      	sxth	r2, r3
   903f2:	4b30      	ldr	r3, [pc, #192]	; (904b4 <Cl_SysStat_mean_status_update+0x334>)
   903f4:	4610      	mov	r0, r2
   903f6:	4798      	blx	r3
   903f8:	4602      	mov	r2, r0
   903fa:	4b2f      	ldr	r3, [pc, #188]	; (904b8 <Cl_SysStat_mean_status_update+0x338>)
   903fc:	4620      	mov	r0, r4
   903fe:	4611      	mov	r1, r2
   90400:	4798      	blx	r3
   90402:	4603      	mov	r3, r0
   90404:	461a      	mov	r2, r3
   90406:	4b2d      	ldr	r3, [pc, #180]	; (904bc <Cl_SysStat_mean_status_update+0x33c>)
   90408:	4610      	mov	r0, r2
   9040a:	492d      	ldr	r1, [pc, #180]	; (904c0 <Cl_SysStat_mean_status_update+0x340>)
   9040c:	4798      	blx	r3
   9040e:	4603      	mov	r3, r0
   90410:	461a      	mov	r2, r3
   90412:	4b2f      	ldr	r3, [pc, #188]	; (904d0 <Cl_SysStat_mean_status_update+0x350>)
   90414:	601a      	str	r2, [r3, #0]
// 				TS3 = (res_temp_value/10) - 0.4;
// //				TS3 = (res_temp_value/100) - 3.1 - 2;
// //				TS3 = (avgtmp3/10) - 0.4;
// 				bulk_data[2] =  (uint16_t)(TS3); // * 10);
//				bulk_data[2] = sensordata/10;
			bulk_data[2] = avgtmp3/10;   // manav changed
   90416:	4b2e      	ldr	r3, [pc, #184]	; (904d0 <Cl_SysStat_mean_status_update+0x350>)
   90418:	681a      	ldr	r2, [r3, #0]
   9041a:	4b28      	ldr	r3, [pc, #160]	; (904bc <Cl_SysStat_mean_status_update+0x33c>)
   9041c:	4610      	mov	r0, r2
   9041e:	4928      	ldr	r1, [pc, #160]	; (904c0 <Cl_SysStat_mean_status_update+0x340>)
   90420:	4798      	blx	r3
   90422:	4603      	mov	r3, r0
   90424:	461a      	mov	r2, r3
   90426:	4b27      	ldr	r3, [pc, #156]	; (904c4 <Cl_SysStat_mean_status_update+0x344>)
   90428:	4610      	mov	r0, r2
   9042a:	4798      	blx	r3
   9042c:	4603      	mov	r3, r0
   9042e:	b29b      	uxth	r3, r3
   90430:	86bb      	strh	r3, [r7, #52]	; 0x34
				
				data.fourbytedata = avgtmp3/10;
   90432:	4b27      	ldr	r3, [pc, #156]	; (904d0 <Cl_SysStat_mean_status_update+0x350>)
   90434:	681a      	ldr	r2, [r3, #0]
   90436:	4b21      	ldr	r3, [pc, #132]	; (904bc <Cl_SysStat_mean_status_update+0x33c>)
   90438:	4610      	mov	r0, r2
   9043a:	4921      	ldr	r1, [pc, #132]	; (904c0 <Cl_SysStat_mean_status_update+0x340>)
   9043c:	4798      	blx	r3
   9043e:	4603      	mov	r3, r0
   90440:	461a      	mov	r2, r3
   90442:	4b21      	ldr	r3, [pc, #132]	; (904c8 <Cl_SysStat_mean_status_update+0x348>)
   90444:	4610      	mov	r0, r2
   90446:	4798      	blx	r3
   90448:	4603      	mov	r3, r0
   9044a:	62bb      	str	r3, [r7, #40]	; 0x28
				dataarray[count++] = data.bytedata[0];
   9044c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   90450:	1c5a      	adds	r2, r3, #1
   90452:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   90456:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   9045a:	f107 0170 	add.w	r1, r7, #112	; 0x70
   9045e:	440b      	add	r3, r1
   90460:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[1];
   90464:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   90468:	1c5a      	adds	r2, r3, #1
   9046a:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   9046e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
   90472:	f107 0170 	add.w	r1, r7, #112	; 0x70
   90476:	440b      	add	r3, r1
   90478:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[2];
   9047c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   90480:	1c5a      	adds	r2, r3, #1
   90482:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   90486:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
   9048a:	f107 0170 	add.w	r1, r7, #112	; 0x70
   9048e:	440b      	add	r3, r1
   90490:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[3];
   90494:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   90498:	1c5a      	adds	r2, r3, #1
   9049a:	e01b      	b.n	904d4 <Cl_SysStat_mean_status_update+0x354>
   9049c:	20071b48 	.word	0x20071b48
   904a0:	20071d30 	.word	0x20071d30
   904a4:	0008fd69 	.word	0x0008fd69
   904a8:	20071b34 	.word	0x20071b34
   904ac:	000a8305 	.word	0x000a8305
   904b0:	41100000 	.word	0x41100000
   904b4:	000a825d 	.word	0x000a825d
   904b8:	000a80f5 	.word	0x000a80f5
   904bc:	000a846d 	.word	0x000a846d
   904c0:	41200000 	.word	0x41200000
   904c4:	000a8691 	.word	0x000a8691
   904c8:	000a86dd 	.word	0x000a86dd
   904cc:	20071b30 	.word	0x20071b30
   904d0:	20071b2c 	.word	0x20071b2c
   904d4:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   904d8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   904dc:	f107 0170 	add.w	r1, r7, #112	; 0x70
   904e0:	440b      	add	r3, r1
   904e2:	f803 2c6c 	strb.w	r2, [r3, #-108]
				
				TS3 = (float)avgtmp3 /100;
   904e6:	4b5c      	ldr	r3, [pc, #368]	; (90658 <Cl_SysStat_mean_status_update+0x4d8>)
   904e8:	681a      	ldr	r2, [r3, #0]
   904ea:	4b5c      	ldr	r3, [pc, #368]	; (9065c <Cl_SysStat_mean_status_update+0x4dc>)
   904ec:	4610      	mov	r0, r2
   904ee:	495c      	ldr	r1, [pc, #368]	; (90660 <Cl_SysStat_mean_status_update+0x4e0>)
   904f0:	4798      	blx	r3
   904f2:	4603      	mov	r3, r0
   904f4:	65fb      	str	r3, [r7, #92]	; 0x5c
			}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&raw_cond);
   904f6:	f107 032e 	add.w	r3, r7, #46	; 0x2e
   904fa:	2007      	movs	r0, #7
   904fc:	4619      	mov	r1, r3
   904fe:	4b59      	ldr	r3, [pc, #356]	; (90664 <Cl_SysStat_mean_status_update+0x4e4>)
   90500:	4798      	blx	r3
			}
	
	*/
	
			    //bulk_data[3] = avg_conductivity;  // manav02 commented								// multiplication for display purpose
				bulk_data[3] = raw_cond  ;         // Gopal: adjusted for set value display -50
   90502:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
   90504:	b29b      	uxth	r3, r3
   90506:	86fb      	strh	r3, [r7, #54]	; 0x36
				//data.fourbytedata = avg_conductivity; // manav02 commented
				data.fourbytedata = raw_cond/10;    // manav02 added
   90508:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
   9050a:	4a57      	ldr	r2, [pc, #348]	; (90668 <Cl_SysStat_mean_status_update+0x4e8>)
   9050c:	fba2 2303 	umull	r2, r3, r2, r3
   90510:	08db      	lsrs	r3, r3, #3
   90512:	b29b      	uxth	r3, r3
   90514:	62bb      	str	r3, [r7, #40]	; 0x28
				dataarray[count++] = data.bytedata[0];
   90516:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   9051a:	1c5a      	adds	r2, r3, #1
   9051c:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   90520:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   90524:	f107 0170 	add.w	r1, r7, #112	; 0x70
   90528:	440b      	add	r3, r1
   9052a:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[1];
   9052e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   90532:	1c5a      	adds	r2, r3, #1
   90534:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   90538:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
   9053c:	f107 0170 	add.w	r1, r7, #112	; 0x70
   90540:	440b      	add	r3, r1
   90542:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[2];
   90546:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   9054a:	1c5a      	adds	r2, r3, #1
   9054c:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   90550:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
   90554:	f107 0170 	add.w	r1, r7, #112	; 0x70
   90558:	440b      	add	r3, r1
   9055a:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[3];
   9055e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   90562:	1c5a      	adds	r2, r3, #1
   90564:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   90568:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   9056c:	f107 0170 	add.w	r1, r7, #112	; 0x70
   90570:	440b      	add	r3, r1
   90572:	f803 2c6c 	strb.w	r2, [r3, #-108]
		//		bulk_data[3] = cond1x100;                    //   chnaged on 01072017
		
//				bulk_data[3] = raw_cond;
***********************************************************************/	
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_ACID_COND,&sensordata);
   90576:	f107 0350 	add.w	r3, r7, #80	; 0x50
   9057a:	2022      	movs	r0, #34	; 0x22
   9057c:	4619      	mov	r1, r3
   9057e:	4b39      	ldr	r3, [pc, #228]	; (90664 <Cl_SysStat_mean_status_update+0x4e4>)
   90580:	4798      	blx	r3
				
			}
			#endif
			//	bulk_data[0] = sensordata;
			
				if(avgcond == 0)
   90582:	4b3a      	ldr	r3, [pc, #232]	; (9066c <Cl_SysStat_mean_status_update+0x4ec>)
   90584:	681a      	ldr	r2, [r3, #0]
   90586:	4b3a      	ldr	r3, [pc, #232]	; (90670 <Cl_SysStat_mean_status_update+0x4f0>)
   90588:	4610      	mov	r0, r2
   9058a:	f04f 0100 	mov.w	r1, #0
   9058e:	4798      	blx	r3
   90590:	4603      	mov	r3, r0
   90592:	2b00      	cmp	r3, #0
   90594:	d009      	beq.n	905aa <Cl_SysStat_mean_status_update+0x42a>
				{
					avgcond_acid = sensordata;
   90596:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
   9059a:	b21a      	sxth	r2, r3
   9059c:	4b35      	ldr	r3, [pc, #212]	; (90674 <Cl_SysStat_mean_status_update+0x4f4>)
   9059e:	4610      	mov	r0, r2
   905a0:	4798      	blx	r3
   905a2:	4602      	mov	r2, r0
   905a4:	4b34      	ldr	r3, [pc, #208]	; (90678 <Cl_SysStat_mean_status_update+0x4f8>)
   905a6:	601a      	str	r2, [r3, #0]
   905a8:	e01c      	b.n	905e4 <Cl_SysStat_mean_status_update+0x464>
				}
				else
				{
					avgcond_acid =(avgcond_acid*5 + sensordata)/6;
   905aa:	4b33      	ldr	r3, [pc, #204]	; (90678 <Cl_SysStat_mean_status_update+0x4f8>)
   905ac:	681a      	ldr	r2, [r3, #0]
   905ae:	4b33      	ldr	r3, [pc, #204]	; (9067c <Cl_SysStat_mean_status_update+0x4fc>)
   905b0:	4610      	mov	r0, r2
   905b2:	4933      	ldr	r1, [pc, #204]	; (90680 <Cl_SysStat_mean_status_update+0x500>)
   905b4:	4798      	blx	r3
   905b6:	4603      	mov	r3, r0
   905b8:	461c      	mov	r4, r3
   905ba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
   905be:	b21a      	sxth	r2, r3
   905c0:	4b2c      	ldr	r3, [pc, #176]	; (90674 <Cl_SysStat_mean_status_update+0x4f4>)
   905c2:	4610      	mov	r0, r2
   905c4:	4798      	blx	r3
   905c6:	4602      	mov	r2, r0
   905c8:	4b2e      	ldr	r3, [pc, #184]	; (90684 <Cl_SysStat_mean_status_update+0x504>)
   905ca:	4620      	mov	r0, r4
   905cc:	4611      	mov	r1, r2
   905ce:	4798      	blx	r3
   905d0:	4603      	mov	r3, r0
   905d2:	461a      	mov	r2, r3
   905d4:	4b21      	ldr	r3, [pc, #132]	; (9065c <Cl_SysStat_mean_status_update+0x4dc>)
   905d6:	4610      	mov	r0, r2
   905d8:	492b      	ldr	r1, [pc, #172]	; (90688 <Cl_SysStat_mean_status_update+0x508>)
   905da:	4798      	blx	r3
   905dc:	4603      	mov	r3, r0
   905de:	461a      	mov	r2, r3
   905e0:	4b25      	ldr	r3, [pc, #148]	; (90678 <Cl_SysStat_mean_status_update+0x4f8>)
   905e2:	601a      	str	r2, [r3, #0]
				
			//	bulk_data[3] = avgcond;
			
			
				cl_Datastreamtype cl_tdata;
				cl_tdata.word =0;
   905e4:	2300      	movs	r3, #0
   905e6:	603b      	str	r3, [r7, #0]
				cl_tdata.Twobyte = avgcond_acid;
   905e8:	4b23      	ldr	r3, [pc, #140]	; (90678 <Cl_SysStat_mean_status_update+0x4f8>)
   905ea:	681a      	ldr	r2, [r3, #0]
   905ec:	4b27      	ldr	r3, [pc, #156]	; (9068c <Cl_SysStat_mean_status_update+0x50c>)
   905ee:	4610      	mov	r0, r2
   905f0:	4798      	blx	r3
   905f2:	4603      	mov	r3, r0
   905f4:	b29b      	uxth	r3, r3
   905f6:	803b      	strh	r3, [r7, #0]
				cl_tdata.bytearray[2] = 4;
   905f8:	2304      	movs	r3, #4
   905fa:	70bb      	strb	r3, [r7, #2]
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   905fc:	463b      	mov	r3, r7
   905fe:	2037      	movs	r0, #55	; 0x37
   90600:	4619      	mov	r1, r3
   90602:	2204      	movs	r2, #4
   90604:	4b22      	ldr	r3, [pc, #136]	; (90690 <Cl_SysStat_mean_status_update+0x510>)
   90606:	4798      	blx	r3
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_BICARB_COND,&raw_cond);
   90608:	f107 032e 	add.w	r3, r7, #46	; 0x2e
   9060c:	2023      	movs	r0, #35	; 0x23
   9060e:	4619      	mov	r1, r3
   90610:	4b14      	ldr	r3, [pc, #80]	; (90664 <Cl_SysStat_mean_status_update+0x4e4>)
   90612:	4798      	blx	r3

//		bulk_data[0]=update_RC;                                             // Gopal: used to transmit RC to propo in event manager and is being printed here
//		bulk_data[1]=raw_cond;                                             // Gopal: used to transmit CS2 to propo in event manager and is being printed here

		}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_FLOW_SWITCH,&sensordata);
   90614:	f107 0350 	add.w	r3, r7, #80	; 0x50
   90618:	2019      	movs	r0, #25
   9061a:	4619      	mov	r1, r3
   9061c:	4b11      	ldr	r3, [pc, #68]	; (90664 <Cl_SysStat_mean_status_update+0x4e4>)
   9061e:	4798      	blx	r3
			{

				cl_tdata.word = 0;
   90620:	2300      	movs	r3, #0
   90622:	64fb      	str	r3, [r7, #76]	; 0x4c
				cl_tdata.Twobyte = sensordata;
   90624:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
   90628:	b29b      	uxth	r3, r3
   9062a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				cl_tdata.bytearray[2] = 3;
   9062e:	2303      	movs	r3, #3
   90630:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
				bulk_data[4] = sensordata; // manav changed
   90634:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
   90638:	873b      	strh	r3, [r7, #56]	; 0x38
				dataarray[count++] = data.bytedata[2];
				dataarray[count++] = data.bytedata[3];
				*/
				
				
				if(prev_flow_status == sensordata)
   9063a:	4b16      	ldr	r3, [pc, #88]	; (90694 <Cl_SysStat_mean_status_update+0x514>)
   9063c:	881a      	ldrh	r2, [r3, #0]
   9063e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
   90642:	b212      	sxth	r2, r2
   90644:	b21b      	sxth	r3, r3
   90646:	429a      	cmp	r2, r3
   90648:	d128      	bne.n	9069c <Cl_SysStat_mean_status_update+0x51c>
				{
					if(flow_counter++ > 10)
   9064a:	4b13      	ldr	r3, [pc, #76]	; (90698 <Cl_SysStat_mean_status_update+0x518>)
   9064c:	781b      	ldrb	r3, [r3, #0]
   9064e:	3301      	adds	r3, #1
   90650:	b2da      	uxtb	r2, r3
   90652:	4b11      	ldr	r3, [pc, #68]	; (90698 <Cl_SysStat_mean_status_update+0x518>)
   90654:	701a      	strb	r2, [r3, #0]
   90656:	e024      	b.n	906a2 <Cl_SysStat_mean_status_update+0x522>
   90658:	20071b2c 	.word	0x20071b2c
   9065c:	000a846d 	.word	0x000a846d
   90660:	42c80000 	.word	0x42c80000
   90664:	0008fd69 	.word	0x0008fd69
   90668:	cccccccd 	.word	0xcccccccd
   9066c:	20071b54 	.word	0x20071b54
   90670:	000a862d 	.word	0x000a862d
   90674:	000a825d 	.word	0x000a825d
   90678:	20071b38 	.word	0x20071b38
   9067c:	000a8305 	.word	0x000a8305
   90680:	40a00000 	.word	0x40a00000
   90684:	000a80f5 	.word	0x000a80f5
   90688:	40c00000 	.word	0x40c00000
   9068c:	000a86dd 	.word	0x000a86dd
   90690:	0009d1e9 	.word	0x0009d1e9
   90694:	20071b64 	.word	0x20071b64
   90698:	20071b66 	.word	0x20071b66
					}
					
				}
				else
				{
					flow_counter = 0;
   9069c:	4baf      	ldr	r3, [pc, #700]	; (9095c <Cl_SysStat_mean_status_update+0x7dc>)
   9069e:	2200      	movs	r2, #0
   906a0:	701a      	strb	r2, [r3, #0]
				}
				prev_flow_status = sensordata;
   906a2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
   906a6:	4bae      	ldr	r3, [pc, #696]	; (90960 <Cl_SysStat_mean_status_update+0x7e0>)
   906a8:	801a      	strh	r2, [r3, #0]
			}

			
			//	cl_testgetsensordata(APTSTATUS_HIGH, &Atp);//0x0F
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &Atp);
   906aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
   906ae:	200b      	movs	r0, #11
   906b0:	4619      	mov	r1, r3
   906b2:	4bac      	ldr	r3, [pc, #688]	; (90964 <Cl_SysStat_mean_status_update+0x7e4>)
   906b4:	4798      	blx	r3
// 				cl_tdata.Twobyte = aptavg + 1000;
// 				cl_tdata.bytearray[2] = 14;

//				bulk_data[5] = Atp;//cl_tdata.Twobyte;                          // Gopal commented for displaying CS2      manav02 changed
				
				data.fourbytedata = Atp; //aptavg;                                    // manav02 changed
   906b6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
   906ba:	b21b      	sxth	r3, r3
   906bc:	62bb      	str	r3, [r7, #40]	; 0x28
				dataarray[count++] = data.bytedata[0];
   906be:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   906c2:	1c5a      	adds	r2, r3, #1
   906c4:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   906c8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   906cc:	f107 0170 	add.w	r1, r7, #112	; 0x70
   906d0:	440b      	add	r3, r1
   906d2:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[1];
   906d6:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   906da:	1c5a      	adds	r2, r3, #1
   906dc:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   906e0:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
   906e4:	f107 0170 	add.w	r1, r7, #112	; 0x70
   906e8:	440b      	add	r3, r1
   906ea:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[2];
   906ee:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   906f2:	1c5a      	adds	r2, r3, #1
   906f4:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   906f8:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
   906fc:	f107 0170 	add.w	r1, r7, #112	; 0x70
   90700:	440b      	add	r3, r1
   90702:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[3];
   90706:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   9070a:	1c5a      	adds	r2, r3, #1
   9070c:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   90710:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   90714:	f107 0170 	add.w	r1, r7, #112	; 0x70
   90718:	440b      	add	r3, r1
   9071a:	f803 2c6c 	strb.w	r2, [r3, #-108]
				
								
			Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS, &Vtp);
   9071e:	f107 0352 	add.w	r3, r7, #82	; 0x52
   90722:	200c      	movs	r0, #12
   90724:	4619      	mov	r1, r3
   90726:	4b8f      	ldr	r3, [pc, #572]	; (90964 <Cl_SysStat_mean_status_update+0x7e4>)
   90728:	4798      	blx	r3
// 			calibration_vpt(Vtp);												// manav02 commented
// 			vptavg = ((vptavg* 2) + pressure_final_vpt)/3;
// 			cl_tdata.word = 0;
// 			cl_tdata.Twobyte = vptavg + 1000;
// 			cl_tdata.bytearray[2] = 15;                                         
			bulk_data[6] = Vtp;//cl_tdata.Twobyte;									// manav02 changed			
   9072a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
   9072e:	87bb      	strh	r3, [r7, #60]	; 0x3c
	
	data.fourbytedata = Vtp;//vptavg;                                                    // manav02 changed
   90730:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
   90734:	b21b      	sxth	r3, r3
   90736:	62bb      	str	r3, [r7, #40]	; 0x28
	dataarray[count++] = data.bytedata[0];
   90738:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   9073c:	1c5a      	adds	r2, r3, #1
   9073e:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   90742:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   90746:	f107 0170 	add.w	r1, r7, #112	; 0x70
   9074a:	440b      	add	r3, r1
   9074c:	f803 2c6c 	strb.w	r2, [r3, #-108]
	dataarray[count++] = data.bytedata[1];
   90750:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   90754:	1c5a      	adds	r2, r3, #1
   90756:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   9075a:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
   9075e:	f107 0170 	add.w	r1, r7, #112	; 0x70
   90762:	440b      	add	r3, r1
   90764:	f803 2c6c 	strb.w	r2, [r3, #-108]
	dataarray[count++] = data.bytedata[2];
   90768:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   9076c:	1c5a      	adds	r2, r3, #1
   9076e:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   90772:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
   90776:	f107 0170 	add.w	r1, r7, #112	; 0x70
   9077a:	440b      	add	r3, r1
   9077c:	f803 2c6c 	strb.w	r2, [r3, #-108]
	dataarray[count++] = data.bytedata[3];
   90780:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   90784:	1c5a      	adds	r2, r3, #1
   90786:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   9078a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   9078e:	f107 0170 	add.w	r1, r7, #112	; 0x70
   90792:	440b      	add	r3, r1
   90794:	f803 2c6c 	strb.w	r2, [r3, #-108]
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS,&Ps3);
   90798:	f107 0356 	add.w	r3, r7, #86	; 0x56
   9079c:	2010      	movs	r0, #16
   9079e:	4619      	mov	r1, r3
   907a0:	4b70      	ldr	r3, [pc, #448]	; (90964 <Cl_SysStat_mean_status_update+0x7e4>)
   907a2:	4798      	blx	r3
// 			}			
// 			cl_tdata.word = 0;
// 			cl_tdata.Twobyte = 1000 + ps3avg;
// 			cl_tdata.bytearray[2] = 20;
// //			bulk_data[7] = cl_tdata.Twobyte;
			bulk_data[7] = Ps3;//+ 1000 ; manav02 commented
   907a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
   907a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
		data.fourbytedata = Ps3 ;
   907aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
   907ae:	b21b      	sxth	r3, r3
   907b0:	62bb      	str	r3, [r7, #40]	; 0x28
		dataarray[count++] = data.bytedata[0];
   907b2:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   907b6:	1c5a      	adds	r2, r3, #1
   907b8:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   907bc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   907c0:	f107 0170 	add.w	r1, r7, #112	; 0x70
   907c4:	440b      	add	r3, r1
   907c6:	f803 2c6c 	strb.w	r2, [r3, #-108]
		dataarray[count++] = data.bytedata[1];
   907ca:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   907ce:	1c5a      	adds	r2, r3, #1
   907d0:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   907d4:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
   907d8:	f107 0170 	add.w	r1, r7, #112	; 0x70
   907dc:	440b      	add	r3, r1
   907de:	f803 2c6c 	strb.w	r2, [r3, #-108]
		dataarray[count++] = data.bytedata[2];
   907e2:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   907e6:	1c5a      	adds	r2, r3, #1
   907e8:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   907ec:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
   907f0:	f107 0170 	add.w	r1, r7, #112	; 0x70
   907f4:	440b      	add	r3, r1
   907f6:	f803 2c6c 	strb.w	r2, [r3, #-108]
		dataarray[count++] = data.bytedata[3];
   907fa:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   907fe:	1c5a      	adds	r2, r3, #1
   90800:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   90804:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   90808:	f107 0170 	add.w	r1, r7, #112	; 0x70
   9080c:	440b      	add	r3, r1
   9080e:	f803 2c6c 	strb.w	r2, [r3, #-108]
	
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
			/////////////////
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS,&Ps2);
   90812:	f107 0358 	add.w	r3, r7, #88	; 0x58
   90816:	200f      	movs	r0, #15
   90818:	4619      	mov	r1, r3
   9081a:	4b52      	ldr	r3, [pc, #328]	; (90964 <Cl_SysStat_mean_status_update+0x7e4>)
   9081c:	4798      	blx	r3
				PS2_bar = (float)Ps2;
				
				PS2_bar = (0.091009 * PS2_bar) + 491.794;
	*/
	
			bulk_data[8] = Ps2 ;//+ 1000  ; manav02 removed 1000
   9081e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
   90822:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

			data.fourbytedata = Ps2;
   90826:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
   9082a:	b21b      	sxth	r3, r3
   9082c:	62bb      	str	r3, [r7, #40]	; 0x28
			dataarray[count++] = data.bytedata[0];
   9082e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   90832:	1c5a      	adds	r2, r3, #1
   90834:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   90838:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   9083c:	f107 0170 	add.w	r1, r7, #112	; 0x70
   90840:	440b      	add	r3, r1
   90842:	f803 2c6c 	strb.w	r2, [r3, #-108]
			dataarray[count++] = data.bytedata[1];
   90846:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   9084a:	1c5a      	adds	r2, r3, #1
   9084c:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   90850:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
   90854:	f107 0170 	add.w	r1, r7, #112	; 0x70
   90858:	440b      	add	r3, r1
   9085a:	f803 2c6c 	strb.w	r2, [r3, #-108]
			dataarray[count++] = data.bytedata[2];
   9085e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   90862:	1c5a      	adds	r2, r3, #1
   90864:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   90868:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
   9086c:	f107 0170 	add.w	r1, r7, #112	; 0x70
   90870:	440b      	add	r3, r1
   90872:	f803 2c6c 	strb.w	r2, [r3, #-108]
			dataarray[count++] = data.bytedata[3];
   90876:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   9087a:	1c5a      	adds	r2, r3, #1
   9087c:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   90880:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   90884:	f107 0170 	add.w	r1, r7, #112	; 0x70
   90888:	440b      	add	r3, r1
   9088a:	f803 2c6c 	strb.w	r2, [r3, #-108]
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
			
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&Ps1);
   9088e:	f107 035a 	add.w	r3, r7, #90	; 0x5a
   90892:	200e      	movs	r0, #14
   90894:	4619      	mov	r1, r3
   90896:	4b33      	ldr	r3, [pc, #204]	; (90964 <Cl_SysStat_mean_status_update+0x7e4>)
   90898:	4798      	blx	r3
				
				PS1_bar = (0.091009 * PS1_bar) + 491.794;
			
			//Cl_Uint16Type ps1temp =  (int)PS1_bar + 1000 ;//* 100;
*/			
			bulk_data[9] = Ps1;// + 1000;//PS1_bar * 100; manav02 removed 1000
   9089a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
   9089e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			
			data.fourbytedata = Ps1;
   908a2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
   908a6:	b21b      	sxth	r3, r3
   908a8:	62bb      	str	r3, [r7, #40]	; 0x28
		dataarray[count++] = data.bytedata[0];
   908aa:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   908ae:	1c5a      	adds	r2, r3, #1
   908b0:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   908b4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   908b8:	f107 0170 	add.w	r1, r7, #112	; 0x70
   908bc:	440b      	add	r3, r1
   908be:	f803 2c6c 	strb.w	r2, [r3, #-108]
		dataarray[count++] = data.bytedata[1];
   908c2:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   908c6:	1c5a      	adds	r2, r3, #1
   908c8:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   908cc:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
   908d0:	f107 0170 	add.w	r1, r7, #112	; 0x70
   908d4:	440b      	add	r3, r1
   908d6:	f803 2c6c 	strb.w	r2, [r3, #-108]
		dataarray[count++] = data.bytedata[2];
   908da:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   908de:	1c5a      	adds	r2, r3, #1
   908e0:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   908e4:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
   908e8:	f107 0170 	add.w	r1, r7, #112	; 0x70
   908ec:	440b      	add	r3, r1
   908ee:	f803 2c6c 	strb.w	r2, [r3, #-108]
		dataarray[count++] = data.bytedata[3];
   908f2:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   908f6:	1c5a      	adds	r2, r3, #1
   908f8:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   908fc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   90900:	f107 0170 	add.w	r1, r7, #112	; 0x70
   90904:	440b      	add	r3, r1
   90906:	f803 2c6c 	strb.w	r2, [r3, #-108]
	
			if(ps1avg > 300)
   9090a:	4b17      	ldr	r3, [pc, #92]	; (90968 <Cl_SysStat_mean_status_update+0x7e8>)
   9090c:	681a      	ldr	r2, [r3, #0]
   9090e:	4b17      	ldr	r3, [pc, #92]	; (9096c <Cl_SysStat_mean_status_update+0x7ec>)
   90910:	4610      	mov	r0, r2
   90912:	4917      	ldr	r1, [pc, #92]	; (90970 <Cl_SysStat_mean_status_update+0x7f0>)
   90914:	4798      	blx	r3
   90916:	4603      	mov	r3, r0
   90918:	2b00      	cmp	r3, #0
   9091a:	d006      	beq.n	9092a <Cl_SysStat_mean_status_update+0x7aa>
			{
				//  sv_cntrl_activate_valve(VALVE_ID4 );
				  valve_4_count++;
   9091c:	4b15      	ldr	r3, [pc, #84]	; (90974 <Cl_SysStat_mean_status_update+0x7f4>)
   9091e:	881b      	ldrh	r3, [r3, #0]
   90920:	3301      	adds	r3, #1
   90922:	b29a      	uxth	r2, r3
   90924:	4b13      	ldr	r3, [pc, #76]	; (90974 <Cl_SysStat_mean_status_update+0x7f4>)
   90926:	801a      	strh	r2, [r3, #0]
   90928:	e00c      	b.n	90944 <Cl_SysStat_mean_status_update+0x7c4>
			}
			else
			{
				 valve_4_count++;
   9092a:	4b12      	ldr	r3, [pc, #72]	; (90974 <Cl_SysStat_mean_status_update+0x7f4>)
   9092c:	881b      	ldrh	r3, [r3, #0]
   9092e:	3301      	adds	r3, #1
   90930:	b29a      	uxth	r2, r3
   90932:	4b10      	ldr	r3, [pc, #64]	; (90974 <Cl_SysStat_mean_status_update+0x7f4>)
   90934:	801a      	strh	r2, [r3, #0]
				if(valve_4_count >= 1)
   90936:	4b0f      	ldr	r3, [pc, #60]	; (90974 <Cl_SysStat_mean_status_update+0x7f4>)
   90938:	881b      	ldrh	r3, [r3, #0]
   9093a:	2b00      	cmp	r3, #0
   9093c:	d002      	beq.n	90944 <Cl_SysStat_mean_status_update+0x7c4>
				{
				//  sv_cntrl_deactivate_valve(VALVE_ID4 );
				  valve_4_count = 0;
   9093e:	4b0d      	ldr	r3, [pc, #52]	; (90974 <Cl_SysStat_mean_status_update+0x7f4>)
   90940:	2200      	movs	r2, #0
   90942:	801a      	strh	r2, [r3, #0]
				}
			}
	
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_BULK_PRINT,&bulk_data,30);
		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_BULK_PRINT,&dataarray,36);
   90944:	1d3b      	adds	r3, r7, #4
   90946:	203e      	movs	r0, #62	; 0x3e
   90948:	4619      	mov	r1, r3
   9094a:	2224      	movs	r2, #36	; 0x24
   9094c:	4b0a      	ldr	r3, [pc, #40]	; (90978 <Cl_SysStat_mean_status_update+0x7f8>)
   9094e:	4798      	blx	r3
   90950:	4603      	mov	r3, r0
   90952:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			}
		
	}
}
   90956:	3774      	adds	r7, #116	; 0x74
   90958:	46bd      	mov	sp, r7
   9095a:	bd90      	pop	{r4, r7, pc}
   9095c:	20071b66 	.word	0x20071b66
   90960:	20071b64 	.word	0x20071b64
   90964:	0008fd69 	.word	0x0008fd69
   90968:	20071b28 	.word	0x20071b28
   9096c:	000a867d 	.word	0x000a867d
   90970:	43960000 	.word	0x43960000
   90974:	20071b3c 	.word	0x20071b3c
   90978:	0009d1e9 	.word	0x0009d1e9
   9097c:	00000000 	.word	0x00000000

00090980 <Cl_Conductivity_Sensor_Controller>:
Cl_CondSensor_StateType Cond_Sensor_State = COND_STATE_IDLE;

Cl_ReturnCodeType  Cl_Conductivity_Sensor_Controller(Cl_CondSensor_EventType Cl_cond_Event);

Cl_ReturnCodeType  Cl_Conductivity_Sensor_Controller(Cl_CondSensor_EventType Cl_cond_Event)
{
   90980:	b590      	push	{r4, r7, lr}
   90982:	b085      	sub	sp, #20
   90984:	af00      	add	r7, sp, #0
   90986:	4603      	mov	r3, r0
   90988:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType cl_retval = CL_OK;
   9098a:	2300      	movs	r3, #0
   9098c:	73fb      	strb	r3, [r7, #15]
		Cl_Uint16Type temp_val  = 0, cond_millivolts = 0;
   9098e:	2300      	movs	r3, #0
   90990:	817b      	strh	r3, [r7, #10]
   90992:	2300      	movs	r3, #0
   90994:	81bb      	strh	r3, [r7, #12]
		static Cl_Uint16Type cond_pot_val_2volts = (7000 * 1024)/10000; 
		static Cl_Uint16Type cond_millivolts_avg = 0,cond_3sec_avg=0;
		
		switch(Cond_Sensor_State)
   90996:	4b72      	ldr	r3, [pc, #456]	; (90b60 <Cl_Conductivity_Sensor_Controller+0x1e0>)
   90998:	781b      	ldrb	r3, [r3, #0]
   9099a:	2b00      	cmp	r3, #0
   9099c:	d002      	beq.n	909a4 <Cl_Conductivity_Sensor_Controller+0x24>
   9099e:	2b02      	cmp	r3, #2
   909a0:	d062      	beq.n	90a68 <Cl_Conductivity_Sensor_Controller+0xe8>
					break;
					default:break;
				}
				
			break;
			default:break;
   909a2:	e0d4      	b.n	90b4e <Cl_Conductivity_Sensor_Controller+0x1ce>
		
		switch(Cond_Sensor_State)
		{
			
			case COND_STATE_IDLE:
				switch (Cl_cond_Event)
   909a4:	79fb      	ldrb	r3, [r7, #7]
   909a6:	2b00      	cmp	r3, #0
   909a8:	d003      	beq.n	909b2 <Cl_Conductivity_Sensor_Controller+0x32>
   909aa:	2b02      	cmp	r3, #2
   909ac:	d023      	beq.n	909f6 <Cl_Conductivity_Sensor_Controller+0x76>
							sv_cs_setcondpotvalue(cond_pot_val_2volts);
							return CL_OK;
						}
						
						break;
						default:break;
   909ae:	bf00      	nop
					}
			break;
   909b0:	e0cd      	b.n	90b4e <Cl_Conductivity_Sensor_Controller+0x1ce>
			
			case COND_STATE_IDLE:
				switch (Cl_cond_Event)
					{
						case COND_EVENT_INIT:
						sv_cs_setcondpotvalue(cond_pot_val_2volts);
   909b2:	4b6c      	ldr	r3, [pc, #432]	; (90b64 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   909b4:	881b      	ldrh	r3, [r3, #0]
   909b6:	4618      	mov	r0, r3
   909b8:	4b6b      	ldr	r3, [pc, #428]	; (90b68 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   909ba:	4798      	blx	r3
						cl_wait(100);
   909bc:	2064      	movs	r0, #100	; 0x64
   909be:	4b6b      	ldr	r3, [pc, #428]	; (90b6c <Cl_Conductivity_Sensor_Controller+0x1ec>)
   909c0:	4798      	blx	r3
						Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_WIEN_STATUS,&temp_val);
   909c2:	f107 030a 	add.w	r3, r7, #10
   909c6:	2006      	movs	r0, #6
   909c8:	4619      	mov	r1, r3
   909ca:	4b69      	ldr	r3, [pc, #420]	; (90b70 <Cl_Conductivity_Sensor_Controller+0x1f0>)
   909cc:	4798      	blx	r3
						cond_millivolts = 5 * temp_val;
   909ce:	897b      	ldrh	r3, [r7, #10]
   909d0:	461a      	mov	r2, r3
   909d2:	0092      	lsls	r2, r2, #2
   909d4:	4413      	add	r3, r2
   909d6:	81bb      	strh	r3, [r7, #12]
						if((cond_millivolts_avg > 1800) && (cond_millivolts_avg < 2200))
   909d8:	4b66      	ldr	r3, [pc, #408]	; (90b74 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   909da:	881b      	ldrh	r3, [r3, #0]
   909dc:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   909e0:	d907      	bls.n	909f2 <Cl_Conductivity_Sensor_Controller+0x72>
   909e2:	4b64      	ldr	r3, [pc, #400]	; (90b74 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   909e4:	881b      	ldrh	r3, [r3, #0]
   909e6:	f640 0297 	movw	r2, #2199	; 0x897
   909ea:	4293      	cmp	r3, r2
   909ec:	d801      	bhi.n	909f2 <Cl_Conductivity_Sensor_Controller+0x72>
						{
							return CL_OK;
   909ee:	2300      	movs	r3, #0
   909f0:	e0ae      	b.n	90b50 <Cl_Conductivity_Sensor_Controller+0x1d0>
						}
						else
						{
							return CL_ERROR;
   909f2:	2304      	movs	r3, #4
   909f4:	e0ac      	b.n	90b50 <Cl_Conductivity_Sensor_Controller+0x1d0>
						
						break;
		
						case COND_EVENT_1SEC:
		
						Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_WIEN_STATUS,&temp_val);
   909f6:	f107 030a 	add.w	r3, r7, #10
   909fa:	2006      	movs	r0, #6
   909fc:	4619      	mov	r1, r3
   909fe:	4b5c      	ldr	r3, [pc, #368]	; (90b70 <Cl_Conductivity_Sensor_Controller+0x1f0>)
   90a00:	4798      	blx	r3
						cond_millivolts = 0.8036 * temp_val;
   90a02:	897b      	ldrh	r3, [r7, #10]
   90a04:	461a      	mov	r2, r3
   90a06:	4b5c      	ldr	r3, [pc, #368]	; (90b78 <Cl_Conductivity_Sensor_Controller+0x1f8>)
   90a08:	4610      	mov	r0, r2
   90a0a:	4798      	blx	r3
   90a0c:	4602      	mov	r2, r0
   90a0e:	460b      	mov	r3, r1
   90a10:	4c5a      	ldr	r4, [pc, #360]	; (90b7c <Cl_Conductivity_Sensor_Controller+0x1fc>)
   90a12:	4610      	mov	r0, r2
   90a14:	4619      	mov	r1, r3
   90a16:	a350      	add	r3, pc, #320	; (adr r3, 90b58 <Cl_Conductivity_Sensor_Controller+0x1d8>)
   90a18:	e9d3 2300 	ldrd	r2, r3, [r3]
   90a1c:	47a0      	blx	r4
   90a1e:	4602      	mov	r2, r0
   90a20:	460b      	mov	r3, r1
   90a22:	4610      	mov	r0, r2
   90a24:	4619      	mov	r1, r3
   90a26:	4b56      	ldr	r3, [pc, #344]	; (90b80 <Cl_Conductivity_Sensor_Controller+0x200>)
   90a28:	4798      	blx	r3
   90a2a:	4603      	mov	r3, r0
   90a2c:	81bb      	strh	r3, [r7, #12]
						cond_millivolts_avg = cond_millivolts;
   90a2e:	4a51      	ldr	r2, [pc, #324]	; (90b74 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   90a30:	89bb      	ldrh	r3, [r7, #12]
   90a32:	8013      	strh	r3, [r2, #0]
						cond_3sec_avg = cond_millivolts;
   90a34:	4a53      	ldr	r2, [pc, #332]	; (90b84 <Cl_Conductivity_Sensor_Controller+0x204>)
   90a36:	89bb      	ldrh	r3, [r7, #12]
   90a38:	8013      	strh	r3, [r2, #0]
						Cond_Sensor_State = COND_STATE_ACTIVE;
   90a3a:	4b49      	ldr	r3, [pc, #292]	; (90b60 <Cl_Conductivity_Sensor_Controller+0x1e0>)
   90a3c:	2202      	movs	r2, #2
   90a3e:	701a      	strb	r2, [r3, #0]
						if((cond_millivolts_avg > 1800) && (cond_millivolts_avg < 2200))
   90a40:	4b4c      	ldr	r3, [pc, #304]	; (90b74 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   90a42:	881b      	ldrh	r3, [r3, #0]
   90a44:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   90a48:	d907      	bls.n	90a5a <Cl_Conductivity_Sensor_Controller+0xda>
   90a4a:	4b4a      	ldr	r3, [pc, #296]	; (90b74 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   90a4c:	881b      	ldrh	r3, [r3, #0]
   90a4e:	f640 0297 	movw	r2, #2199	; 0x897
   90a52:	4293      	cmp	r3, r2
   90a54:	d801      	bhi.n	90a5a <Cl_Conductivity_Sensor_Controller+0xda>
						{
							return CL_OK;
   90a56:	2300      	movs	r3, #0
   90a58:	e07a      	b.n	90b50 <Cl_Conductivity_Sensor_Controller+0x1d0>
						}
						else
						{
							sv_cs_setcondpotvalue(cond_pot_val_2volts);
   90a5a:	4b42      	ldr	r3, [pc, #264]	; (90b64 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   90a5c:	881b      	ldrh	r3, [r3, #0]
   90a5e:	4618      	mov	r0, r3
   90a60:	4b41      	ldr	r3, [pc, #260]	; (90b68 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   90a62:	4798      	blx	r3
							return CL_OK;
   90a64:	2300      	movs	r3, #0
   90a66:	e073      	b.n	90b50 <Cl_Conductivity_Sensor_Controller+0x1d0>
						break;
						default:break;
					}
			break;
			case COND_STATE_ACTIVE:
				switch (Cl_cond_Event)
   90a68:	79fb      	ldrb	r3, [r7, #7]
   90a6a:	2b02      	cmp	r3, #2
   90a6c:	d000      	beq.n	90a70 <Cl_Conductivity_Sensor_Controller+0xf0>
					else
					{
						return CL_ERROR;
					}
					break;
					default:break;
   90a6e:	e06d      	b.n	90b4c <Cl_Conductivity_Sensor_Controller+0x1cc>
				switch (Cl_cond_Event)
				{

					case COND_EVENT_1SEC:
		
					Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_WIEN_STATUS,&temp_val);
   90a70:	f107 030a 	add.w	r3, r7, #10
   90a74:	2006      	movs	r0, #6
   90a76:	4619      	mov	r1, r3
   90a78:	4b3d      	ldr	r3, [pc, #244]	; (90b70 <Cl_Conductivity_Sensor_Controller+0x1f0>)
   90a7a:	4798      	blx	r3
					cond_millivolts = 0.8036 * temp_val;
   90a7c:	897b      	ldrh	r3, [r7, #10]
   90a7e:	461a      	mov	r2, r3
   90a80:	4b3d      	ldr	r3, [pc, #244]	; (90b78 <Cl_Conductivity_Sensor_Controller+0x1f8>)
   90a82:	4610      	mov	r0, r2
   90a84:	4798      	blx	r3
   90a86:	4602      	mov	r2, r0
   90a88:	460b      	mov	r3, r1
   90a8a:	4c3c      	ldr	r4, [pc, #240]	; (90b7c <Cl_Conductivity_Sensor_Controller+0x1fc>)
   90a8c:	4610      	mov	r0, r2
   90a8e:	4619      	mov	r1, r3
   90a90:	a331      	add	r3, pc, #196	; (adr r3, 90b58 <Cl_Conductivity_Sensor_Controller+0x1d8>)
   90a92:	e9d3 2300 	ldrd	r2, r3, [r3]
   90a96:	47a0      	blx	r4
   90a98:	4602      	mov	r2, r0
   90a9a:	460b      	mov	r3, r1
   90a9c:	4610      	mov	r0, r2
   90a9e:	4619      	mov	r1, r3
   90aa0:	4b37      	ldr	r3, [pc, #220]	; (90b80 <Cl_Conductivity_Sensor_Controller+0x200>)
   90aa2:	4798      	blx	r3
   90aa4:	4603      	mov	r3, r0
   90aa6:	81bb      	strh	r3, [r7, #12]
					
					if((cond_millivolts_avg > 1800) && (cond_millivolts_avg < 2200))
   90aa8:	4b32      	ldr	r3, [pc, #200]	; (90b74 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   90aaa:	881b      	ldrh	r3, [r3, #0]
   90aac:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   90ab0:	d94a      	bls.n	90b48 <Cl_Conductivity_Sensor_Controller+0x1c8>
   90ab2:	4b30      	ldr	r3, [pc, #192]	; (90b74 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   90ab4:	881b      	ldrh	r3, [r3, #0]
   90ab6:	f640 0297 	movw	r2, #2199	; 0x897
   90aba:	4293      	cmp	r3, r2
   90abc:	d844      	bhi.n	90b48 <Cl_Conductivity_Sensor_Controller+0x1c8>
					{
							cond_millivolts_avg = (cond_millivolts_avg * 19 +cond_millivolts)/20;
   90abe:	4b2d      	ldr	r3, [pc, #180]	; (90b74 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   90ac0:	881b      	ldrh	r3, [r3, #0]
   90ac2:	461a      	mov	r2, r3
   90ac4:	4613      	mov	r3, r2
   90ac6:	00db      	lsls	r3, r3, #3
   90ac8:	4413      	add	r3, r2
   90aca:	005b      	lsls	r3, r3, #1
   90acc:	441a      	add	r2, r3
   90ace:	89bb      	ldrh	r3, [r7, #12]
   90ad0:	4413      	add	r3, r2
   90ad2:	4a2d      	ldr	r2, [pc, #180]	; (90b88 <Cl_Conductivity_Sensor_Controller+0x208>)
   90ad4:	fb82 1203 	smull	r1, r2, r2, r3
   90ad8:	10d2      	asrs	r2, r2, #3
   90ada:	17db      	asrs	r3, r3, #31
   90adc:	1ad3      	subs	r3, r2, r3
   90ade:	b29a      	uxth	r2, r3
   90ae0:	4b24      	ldr	r3, [pc, #144]	; (90b74 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   90ae2:	801a      	strh	r2, [r3, #0]
							cond_3sec_avg = (cond_millivolts_avg * 2 +cond_millivolts)/3;
   90ae4:	4b23      	ldr	r3, [pc, #140]	; (90b74 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   90ae6:	881b      	ldrh	r3, [r3, #0]
   90ae8:	005a      	lsls	r2, r3, #1
   90aea:	89bb      	ldrh	r3, [r7, #12]
   90aec:	4413      	add	r3, r2
   90aee:	4a27      	ldr	r2, [pc, #156]	; (90b8c <Cl_Conductivity_Sensor_Controller+0x20c>)
   90af0:	fb82 1203 	smull	r1, r2, r2, r3
   90af4:	17db      	asrs	r3, r3, #31
   90af6:	1ad3      	subs	r3, r2, r3
   90af8:	b29a      	uxth	r2, r3
   90afa:	4b22      	ldr	r3, [pc, #136]	; (90b84 <Cl_Conductivity_Sensor_Controller+0x204>)
   90afc:	801a      	strh	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_3sec_avg,2);
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"AVG",3);
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_millivolts_avg,2);
						if (cond_3sec_avg > 2005 )
   90afe:	4b21      	ldr	r3, [pc, #132]	; (90b84 <Cl_Conductivity_Sensor_Controller+0x204>)
   90b00:	881b      	ldrh	r3, [r3, #0]
   90b02:	f240 72d5 	movw	r2, #2005	; 0x7d5
   90b06:	4293      	cmp	r3, r2
   90b08:	d90b      	bls.n	90b22 <Cl_Conductivity_Sensor_Controller+0x1a2>
						{
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"MORE",4);
							cond_pot_val_2volts = cond_pot_val_2volts -1;
   90b0a:	4b16      	ldr	r3, [pc, #88]	; (90b64 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   90b0c:	881b      	ldrh	r3, [r3, #0]
   90b0e:	3b01      	subs	r3, #1
   90b10:	b29a      	uxth	r2, r3
   90b12:	4b14      	ldr	r3, [pc, #80]	; (90b64 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   90b14:	801a      	strh	r2, [r3, #0]
							sv_cs_setcondpotvalue(cond_pot_val_2volts );
   90b16:	4b13      	ldr	r3, [pc, #76]	; (90b64 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   90b18:	881b      	ldrh	r3, [r3, #0]
   90b1a:	4618      	mov	r0, r3
   90b1c:	4b12      	ldr	r3, [pc, #72]	; (90b68 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   90b1e:	4798      	blx	r3
   90b20:	e010      	b.n	90b44 <Cl_Conductivity_Sensor_Controller+0x1c4>
						}
						else if (cond_3sec_avg < 1995 )
   90b22:	4b18      	ldr	r3, [pc, #96]	; (90b84 <Cl_Conductivity_Sensor_Controller+0x204>)
   90b24:	881b      	ldrh	r3, [r3, #0]
   90b26:	f240 72ca 	movw	r2, #1994	; 0x7ca
   90b2a:	4293      	cmp	r3, r2
   90b2c:	d80a      	bhi.n	90b44 <Cl_Conductivity_Sensor_Controller+0x1c4>
						{
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"LESS",4);
							cond_pot_val_2volts = cond_pot_val_2volts + 1;
   90b2e:	4b0d      	ldr	r3, [pc, #52]	; (90b64 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   90b30:	881b      	ldrh	r3, [r3, #0]
   90b32:	3301      	adds	r3, #1
   90b34:	b29a      	uxth	r2, r3
   90b36:	4b0b      	ldr	r3, [pc, #44]	; (90b64 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   90b38:	801a      	strh	r2, [r3, #0]
							sv_cs_setcondpotvalue(cond_pot_val_2volts );
   90b3a:	4b0a      	ldr	r3, [pc, #40]	; (90b64 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   90b3c:	881b      	ldrh	r3, [r3, #0]
   90b3e:	4618      	mov	r0, r3
   90b40:	4b09      	ldr	r3, [pc, #36]	; (90b68 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   90b42:	4798      	blx	r3
							cond_millivolts_avg = (cond_millivolts_avg * 19 +cond_millivolts)/20;
							cond_3sec_avg = (cond_millivolts_avg * 2 +cond_millivolts)/3;
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_3sec_avg,2);
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"AVG",3);
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_millivolts_avg,2);
						if (cond_3sec_avg > 2005 )
   90b44:	bf00      	nop
					}
					else
					{
						return CL_ERROR;
					}
					break;
   90b46:	e001      	b.n	90b4c <Cl_Conductivity_Sensor_Controller+0x1cc>
			
						}
					}
					else
					{
						return CL_ERROR;
   90b48:	2304      	movs	r3, #4
   90b4a:	e001      	b.n	90b50 <Cl_Conductivity_Sensor_Controller+0x1d0>
					}
					break;
					default:break;
				}
				
			break;
   90b4c:	bf00      	nop
			default:break;
		}
		
	return CL_OK;
   90b4e:	2300      	movs	r3, #0
   90b50:	4618      	mov	r0, r3
   90b52:	3714      	adds	r7, #20
   90b54:	46bd      	mov	sp, r7
   90b56:	bd90      	pop	{r4, r7, pc}
   90b58:	58e21965 	.word	0x58e21965
   90b5c:	3fe9b717 	.word	0x3fe9b717
   90b60:	20071b67 	.word	0x20071b67
   90b64:	20070734 	.word	0x20070734
   90b68:	0009b8b9 	.word	0x0009b8b9
   90b6c:	0009421d 	.word	0x0009421d
   90b70:	0008fd69 	.word	0x0008fd69
   90b74:	20071b68 	.word	0x20071b68
   90b78:	000a79b9 	.word	0x000a79b9
   90b7c:	000a7a85 	.word	0x000a7a85
   90b80:	000a8009 	.word	0x000a8009
   90b84:	20071b6a 	.word	0x20071b6a
   90b88:	66666667 	.word	0x66666667
   90b8c:	55555556 	.word	0x55555556

00090b90 <Cl_Pressure_Controller_Handler>:
static Cl_PressureSensor_StateType Cl_PressureSensor_State = PS_STATE_IDLE;
extern Cl_ReturnCodeType Cl_SysStat_GetSensor_Status_Query(Cl_SensorDeviceIdType, uint16_t*);
Cl_ReturnCodeType  Cl_Pressure_Controller_Handler(Cl_PressureSensor_EventType Cl_Ps_Event);

Cl_ReturnCodeType  Cl_Pressure_Controller_Handler(Cl_PressureSensor_EventType Cl_Ps_Event)
{
   90b90:	b580      	push	{r7, lr}
   90b92:	b084      	sub	sp, #16
   90b94:	af00      	add	r7, sp, #0
   90b96:	4603      	mov	r3, r0
   90b98:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_retval = CL_OK;
   90b9a:	2300      	movs	r3, #0
   90b9c:	73fb      	strb	r3, [r7, #15]
	Cl_Uint16Type temp_val  = 0;
   90b9e:	2300      	movs	r3, #0
   90ba0:	81bb      	strh	r3, [r7, #12]
	
	if(Cl_PressureSensor_State == PS_STATE_INITIALISING)
   90ba2:	4b90      	ldr	r3, [pc, #576]	; (90de4 <Cl_Pressure_Controller_Handler+0x254>)
   90ba4:	781b      	ldrb	r3, [r3, #0]
   90ba6:	2b01      	cmp	r3, #1
   90ba8:	f040 8098 	bne.w	90cdc <Cl_Pressure_Controller_Handler+0x14c>
	{
		switch(Cl_Ps_Event)
   90bac:	79fb      	ldrb	r3, [r7, #7]
   90bae:	2b00      	cmp	r3, #0
   90bb0:	f000 8092 	beq.w	90cd8 <Cl_Pressure_Controller_Handler+0x148>
   90bb4:	2b01      	cmp	r3, #1
   90bb6:	d000      	beq.n	90bba <Cl_Pressure_Controller_Handler+0x2a>
			{
				counter = 0;
				Cl_PressureSensor_State = PS_STATE_ACTIVE;
			}
			break;
			default:break;
   90bb8:	e08f      	b.n	90cda <Cl_Pressure_Controller_Handler+0x14a>
		{
			
			case PS_EVENT_50MS:
			break;
			case PS_EVENT_100MS:
			if ( counter == 0 )
   90bba:	4b8b      	ldr	r3, [pc, #556]	; (90de8 <Cl_Pressure_Controller_Handler+0x258>)
   90bbc:	881b      	ldrh	r3, [r3, #0]
   90bbe:	2b00      	cmp	r3, #0
   90bc0:	d114      	bne.n	90bec <Cl_Pressure_Controller_Handler+0x5c>
			{
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS, &Ps1);
   90bc2:	200e      	movs	r0, #14
   90bc4:	4989      	ldr	r1, [pc, #548]	; (90dec <Cl_Pressure_Controller_Handler+0x25c>)
   90bc6:	4b8a      	ldr	r3, [pc, #552]	; (90df0 <Cl_Pressure_Controller_Handler+0x260>)
   90bc8:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS, &Ps2);
   90bca:	200f      	movs	r0, #15
   90bcc:	4989      	ldr	r1, [pc, #548]	; (90df4 <Cl_Pressure_Controller_Handler+0x264>)
   90bce:	4b88      	ldr	r3, [pc, #544]	; (90df0 <Cl_Pressure_Controller_Handler+0x260>)
   90bd0:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS, &Ps3);
   90bd2:	2010      	movs	r0, #16
   90bd4:	4988      	ldr	r1, [pc, #544]	; (90df8 <Cl_Pressure_Controller_Handler+0x268>)
   90bd6:	4b86      	ldr	r3, [pc, #536]	; (90df0 <Cl_Pressure_Controller_Handler+0x260>)
   90bd8:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &apt);
   90bda:	200b      	movs	r0, #11
   90bdc:	4987      	ldr	r1, [pc, #540]	; (90dfc <Cl_Pressure_Controller_Handler+0x26c>)
   90bde:	4b84      	ldr	r3, [pc, #528]	; (90df0 <Cl_Pressure_Controller_Handler+0x260>)
   90be0:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &vpt);
   90be2:	200b      	movs	r0, #11
   90be4:	4986      	ldr	r1, [pc, #536]	; (90e00 <Cl_Pressure_Controller_Handler+0x270>)
   90be6:	4b82      	ldr	r3, [pc, #520]	; (90df0 <Cl_Pressure_Controller_Handler+0x260>)
   90be8:	4798      	blx	r3
   90bea:	e063      	b.n	90cb4 <Cl_Pressure_Controller_Handler+0x124>
			}
			else
			{
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS, &temp_val);
   90bec:	f107 030c 	add.w	r3, r7, #12
   90bf0:	200e      	movs	r0, #14
   90bf2:	4619      	mov	r1, r3
   90bf4:	4b7e      	ldr	r3, [pc, #504]	; (90df0 <Cl_Pressure_Controller_Handler+0x260>)
   90bf6:	4798      	blx	r3
				Ps1 = ( Ps1 +temp_val)/counter+1 ;
   90bf8:	4b7c      	ldr	r3, [pc, #496]	; (90dec <Cl_Pressure_Controller_Handler+0x25c>)
   90bfa:	881b      	ldrh	r3, [r3, #0]
   90bfc:	461a      	mov	r2, r3
   90bfe:	89bb      	ldrh	r3, [r7, #12]
   90c00:	4413      	add	r3, r2
   90c02:	4a79      	ldr	r2, [pc, #484]	; (90de8 <Cl_Pressure_Controller_Handler+0x258>)
   90c04:	8812      	ldrh	r2, [r2, #0]
   90c06:	fb93 f3f2 	sdiv	r3, r3, r2
   90c0a:	b29b      	uxth	r3, r3
   90c0c:	3301      	adds	r3, #1
   90c0e:	b29a      	uxth	r2, r3
   90c10:	4b76      	ldr	r3, [pc, #472]	; (90dec <Cl_Pressure_Controller_Handler+0x25c>)
   90c12:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS, &temp_val);
   90c14:	f107 030c 	add.w	r3, r7, #12
   90c18:	200f      	movs	r0, #15
   90c1a:	4619      	mov	r1, r3
   90c1c:	4b74      	ldr	r3, [pc, #464]	; (90df0 <Cl_Pressure_Controller_Handler+0x260>)
   90c1e:	4798      	blx	r3
				Ps2 = ( Ps2 +temp_val)/counter+1 ;
   90c20:	4b74      	ldr	r3, [pc, #464]	; (90df4 <Cl_Pressure_Controller_Handler+0x264>)
   90c22:	881b      	ldrh	r3, [r3, #0]
   90c24:	461a      	mov	r2, r3
   90c26:	89bb      	ldrh	r3, [r7, #12]
   90c28:	4413      	add	r3, r2
   90c2a:	4a6f      	ldr	r2, [pc, #444]	; (90de8 <Cl_Pressure_Controller_Handler+0x258>)
   90c2c:	8812      	ldrh	r2, [r2, #0]
   90c2e:	fb93 f3f2 	sdiv	r3, r3, r2
   90c32:	b29b      	uxth	r3, r3
   90c34:	3301      	adds	r3, #1
   90c36:	b29a      	uxth	r2, r3
   90c38:	4b6e      	ldr	r3, [pc, #440]	; (90df4 <Cl_Pressure_Controller_Handler+0x264>)
   90c3a:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS, &temp_val);
   90c3c:	f107 030c 	add.w	r3, r7, #12
   90c40:	2010      	movs	r0, #16
   90c42:	4619      	mov	r1, r3
   90c44:	4b6a      	ldr	r3, [pc, #424]	; (90df0 <Cl_Pressure_Controller_Handler+0x260>)
   90c46:	4798      	blx	r3
				Ps3 = ( Ps3 +temp_val)/counter+1 ;
   90c48:	4b6b      	ldr	r3, [pc, #428]	; (90df8 <Cl_Pressure_Controller_Handler+0x268>)
   90c4a:	881b      	ldrh	r3, [r3, #0]
   90c4c:	461a      	mov	r2, r3
   90c4e:	89bb      	ldrh	r3, [r7, #12]
   90c50:	4413      	add	r3, r2
   90c52:	4a65      	ldr	r2, [pc, #404]	; (90de8 <Cl_Pressure_Controller_Handler+0x258>)
   90c54:	8812      	ldrh	r2, [r2, #0]
   90c56:	fb93 f3f2 	sdiv	r3, r3, r2
   90c5a:	b29b      	uxth	r3, r3
   90c5c:	3301      	adds	r3, #1
   90c5e:	b29a      	uxth	r2, r3
   90c60:	4b65      	ldr	r3, [pc, #404]	; (90df8 <Cl_Pressure_Controller_Handler+0x268>)
   90c62:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &temp_val);
   90c64:	f107 030c 	add.w	r3, r7, #12
   90c68:	200b      	movs	r0, #11
   90c6a:	4619      	mov	r1, r3
   90c6c:	4b60      	ldr	r3, [pc, #384]	; (90df0 <Cl_Pressure_Controller_Handler+0x260>)
   90c6e:	4798      	blx	r3
				apt = ( apt +temp_val)/counter+1 ;
   90c70:	4b62      	ldr	r3, [pc, #392]	; (90dfc <Cl_Pressure_Controller_Handler+0x26c>)
   90c72:	881b      	ldrh	r3, [r3, #0]
   90c74:	461a      	mov	r2, r3
   90c76:	89bb      	ldrh	r3, [r7, #12]
   90c78:	4413      	add	r3, r2
   90c7a:	4a5b      	ldr	r2, [pc, #364]	; (90de8 <Cl_Pressure_Controller_Handler+0x258>)
   90c7c:	8812      	ldrh	r2, [r2, #0]
   90c7e:	fb93 f3f2 	sdiv	r3, r3, r2
   90c82:	b29b      	uxth	r3, r3
   90c84:	3301      	adds	r3, #1
   90c86:	b29a      	uxth	r2, r3
   90c88:	4b5c      	ldr	r3, [pc, #368]	; (90dfc <Cl_Pressure_Controller_Handler+0x26c>)
   90c8a:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &temp_val);
   90c8c:	f107 030c 	add.w	r3, r7, #12
   90c90:	200b      	movs	r0, #11
   90c92:	4619      	mov	r1, r3
   90c94:	4b56      	ldr	r3, [pc, #344]	; (90df0 <Cl_Pressure_Controller_Handler+0x260>)
   90c96:	4798      	blx	r3
				vpt = ( vpt +temp_val)/counter+1 ;
   90c98:	4b59      	ldr	r3, [pc, #356]	; (90e00 <Cl_Pressure_Controller_Handler+0x270>)
   90c9a:	881b      	ldrh	r3, [r3, #0]
   90c9c:	461a      	mov	r2, r3
   90c9e:	89bb      	ldrh	r3, [r7, #12]
   90ca0:	4413      	add	r3, r2
   90ca2:	4a51      	ldr	r2, [pc, #324]	; (90de8 <Cl_Pressure_Controller_Handler+0x258>)
   90ca4:	8812      	ldrh	r2, [r2, #0]
   90ca6:	fb93 f3f2 	sdiv	r3, r3, r2
   90caa:	b29b      	uxth	r3, r3
   90cac:	3301      	adds	r3, #1
   90cae:	b29a      	uxth	r2, r3
   90cb0:	4b53      	ldr	r3, [pc, #332]	; (90e00 <Cl_Pressure_Controller_Handler+0x270>)
   90cb2:	801a      	strh	r2, [r3, #0]
			}

			counter++;
   90cb4:	4b4c      	ldr	r3, [pc, #304]	; (90de8 <Cl_Pressure_Controller_Handler+0x258>)
   90cb6:	881b      	ldrh	r3, [r3, #0]
   90cb8:	3301      	adds	r3, #1
   90cba:	b29a      	uxth	r2, r3
   90cbc:	4b4a      	ldr	r3, [pc, #296]	; (90de8 <Cl_Pressure_Controller_Handler+0x258>)
   90cbe:	801a      	strh	r2, [r3, #0]
			if(counter > 10)
   90cc0:	4b49      	ldr	r3, [pc, #292]	; (90de8 <Cl_Pressure_Controller_Handler+0x258>)
   90cc2:	881b      	ldrh	r3, [r3, #0]
   90cc4:	2b0a      	cmp	r3, #10
   90cc6:	d906      	bls.n	90cd6 <Cl_Pressure_Controller_Handler+0x146>
			{
				counter = 0;
   90cc8:	4b47      	ldr	r3, [pc, #284]	; (90de8 <Cl_Pressure_Controller_Handler+0x258>)
   90cca:	2200      	movs	r2, #0
   90ccc:	801a      	strh	r2, [r3, #0]
				Cl_PressureSensor_State = PS_STATE_ACTIVE;
   90cce:	4b45      	ldr	r3, [pc, #276]	; (90de4 <Cl_Pressure_Controller_Handler+0x254>)
   90cd0:	2202      	movs	r2, #2
   90cd2:	701a      	strb	r2, [r3, #0]
			}
			break;
   90cd4:	e001      	b.n	90cda <Cl_Pressure_Controller_Handler+0x14a>
   90cd6:	e000      	b.n	90cda <Cl_Pressure_Controller_Handler+0x14a>
	{
		switch(Cl_Ps_Event)
		{
			
			case PS_EVENT_50MS:
			break;
   90cd8:	bf00      	nop
   90cda:	e07e      	b.n	90dda <Cl_Pressure_Controller_Handler+0x24a>
			}
			break;
			default:break;
		}
	}
	else if(Cl_PressureSensor_State == PS_STATE_ACTIVE)
   90cdc:	4b41      	ldr	r3, [pc, #260]	; (90de4 <Cl_Pressure_Controller_Handler+0x254>)
   90cde:	781b      	ldrb	r3, [r3, #0]
   90ce0:	2b02      	cmp	r3, #2
   90ce2:	d17a      	bne.n	90dda <Cl_Pressure_Controller_Handler+0x24a>
	{
		switch(Cl_Ps_Event)
   90ce4:	79fb      	ldrb	r3, [r7, #7]
   90ce6:	2b00      	cmp	r3, #0
   90ce8:	d076      	beq.n	90dd8 <Cl_Pressure_Controller_Handler+0x248>
   90cea:	2b01      	cmp	r3, #1
   90cec:	d000      	beq.n	90cf0 <Cl_Pressure_Controller_Handler+0x160>
				vpt = ( 9* vpt +temp_val)/10 ;

			
			
			break;
			default:break;
   90cee:	e074      	b.n	90dda <Cl_Pressure_Controller_Handler+0x24a>
		{
			
			case PS_EVENT_50MS:
			break;
			case PS_EVENT_100MS:
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS, &temp_val);
   90cf0:	f107 030c 	add.w	r3, r7, #12
   90cf4:	200e      	movs	r0, #14
   90cf6:	4619      	mov	r1, r3
   90cf8:	4b3d      	ldr	r3, [pc, #244]	; (90df0 <Cl_Pressure_Controller_Handler+0x260>)
   90cfa:	4798      	blx	r3
				Ps1 = ( 9 *Ps1 +temp_val)/10 ;
   90cfc:	4b3b      	ldr	r3, [pc, #236]	; (90dec <Cl_Pressure_Controller_Handler+0x25c>)
   90cfe:	881b      	ldrh	r3, [r3, #0]
   90d00:	461a      	mov	r2, r3
   90d02:	4613      	mov	r3, r2
   90d04:	00db      	lsls	r3, r3, #3
   90d06:	4413      	add	r3, r2
   90d08:	89ba      	ldrh	r2, [r7, #12]
   90d0a:	4413      	add	r3, r2
   90d0c:	4a3d      	ldr	r2, [pc, #244]	; (90e04 <Cl_Pressure_Controller_Handler+0x274>)
   90d0e:	fb82 1203 	smull	r1, r2, r2, r3
   90d12:	1092      	asrs	r2, r2, #2
   90d14:	17db      	asrs	r3, r3, #31
   90d16:	1ad3      	subs	r3, r2, r3
   90d18:	b29a      	uxth	r2, r3
   90d1a:	4b34      	ldr	r3, [pc, #208]	; (90dec <Cl_Pressure_Controller_Handler+0x25c>)
   90d1c:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS, &temp_val);
   90d1e:	f107 030c 	add.w	r3, r7, #12
   90d22:	200f      	movs	r0, #15
   90d24:	4619      	mov	r1, r3
   90d26:	4b32      	ldr	r3, [pc, #200]	; (90df0 <Cl_Pressure_Controller_Handler+0x260>)
   90d28:	4798      	blx	r3
				Ps2 = ( 9 * Ps2 +temp_val)/10 ;
   90d2a:	4b32      	ldr	r3, [pc, #200]	; (90df4 <Cl_Pressure_Controller_Handler+0x264>)
   90d2c:	881b      	ldrh	r3, [r3, #0]
   90d2e:	461a      	mov	r2, r3
   90d30:	4613      	mov	r3, r2
   90d32:	00db      	lsls	r3, r3, #3
   90d34:	4413      	add	r3, r2
   90d36:	89ba      	ldrh	r2, [r7, #12]
   90d38:	4413      	add	r3, r2
   90d3a:	4a32      	ldr	r2, [pc, #200]	; (90e04 <Cl_Pressure_Controller_Handler+0x274>)
   90d3c:	fb82 1203 	smull	r1, r2, r2, r3
   90d40:	1092      	asrs	r2, r2, #2
   90d42:	17db      	asrs	r3, r3, #31
   90d44:	1ad3      	subs	r3, r2, r3
   90d46:	b29a      	uxth	r2, r3
   90d48:	4b2a      	ldr	r3, [pc, #168]	; (90df4 <Cl_Pressure_Controller_Handler+0x264>)
   90d4a:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS, &temp_val);
   90d4c:	f107 030c 	add.w	r3, r7, #12
   90d50:	2010      	movs	r0, #16
   90d52:	4619      	mov	r1, r3
   90d54:	4b26      	ldr	r3, [pc, #152]	; (90df0 <Cl_Pressure_Controller_Handler+0x260>)
   90d56:	4798      	blx	r3
				Ps3 = ( 9*Ps3 +temp_val)/10 ;
   90d58:	4b27      	ldr	r3, [pc, #156]	; (90df8 <Cl_Pressure_Controller_Handler+0x268>)
   90d5a:	881b      	ldrh	r3, [r3, #0]
   90d5c:	461a      	mov	r2, r3
   90d5e:	4613      	mov	r3, r2
   90d60:	00db      	lsls	r3, r3, #3
   90d62:	4413      	add	r3, r2
   90d64:	89ba      	ldrh	r2, [r7, #12]
   90d66:	4413      	add	r3, r2
   90d68:	4a26      	ldr	r2, [pc, #152]	; (90e04 <Cl_Pressure_Controller_Handler+0x274>)
   90d6a:	fb82 1203 	smull	r1, r2, r2, r3
   90d6e:	1092      	asrs	r2, r2, #2
   90d70:	17db      	asrs	r3, r3, #31
   90d72:	1ad3      	subs	r3, r2, r3
   90d74:	b29a      	uxth	r2, r3
   90d76:	4b20      	ldr	r3, [pc, #128]	; (90df8 <Cl_Pressure_Controller_Handler+0x268>)
   90d78:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &temp_val);
   90d7a:	f107 030c 	add.w	r3, r7, #12
   90d7e:	200b      	movs	r0, #11
   90d80:	4619      	mov	r1, r3
   90d82:	4b1b      	ldr	r3, [pc, #108]	; (90df0 <Cl_Pressure_Controller_Handler+0x260>)
   90d84:	4798      	blx	r3
				apt = ( 9* apt +temp_val)/10 ;
   90d86:	4b1d      	ldr	r3, [pc, #116]	; (90dfc <Cl_Pressure_Controller_Handler+0x26c>)
   90d88:	881b      	ldrh	r3, [r3, #0]
   90d8a:	461a      	mov	r2, r3
   90d8c:	4613      	mov	r3, r2
   90d8e:	00db      	lsls	r3, r3, #3
   90d90:	4413      	add	r3, r2
   90d92:	89ba      	ldrh	r2, [r7, #12]
   90d94:	4413      	add	r3, r2
   90d96:	4a1b      	ldr	r2, [pc, #108]	; (90e04 <Cl_Pressure_Controller_Handler+0x274>)
   90d98:	fb82 1203 	smull	r1, r2, r2, r3
   90d9c:	1092      	asrs	r2, r2, #2
   90d9e:	17db      	asrs	r3, r3, #31
   90da0:	1ad3      	subs	r3, r2, r3
   90da2:	b29a      	uxth	r2, r3
   90da4:	4b15      	ldr	r3, [pc, #84]	; (90dfc <Cl_Pressure_Controller_Handler+0x26c>)
   90da6:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS, &temp_val);
   90da8:	f107 030c 	add.w	r3, r7, #12
   90dac:	200c      	movs	r0, #12
   90dae:	4619      	mov	r1, r3
   90db0:	4b0f      	ldr	r3, [pc, #60]	; (90df0 <Cl_Pressure_Controller_Handler+0x260>)
   90db2:	4798      	blx	r3
				vpt = ( 9* vpt +temp_val)/10 ;
   90db4:	4b12      	ldr	r3, [pc, #72]	; (90e00 <Cl_Pressure_Controller_Handler+0x270>)
   90db6:	881b      	ldrh	r3, [r3, #0]
   90db8:	461a      	mov	r2, r3
   90dba:	4613      	mov	r3, r2
   90dbc:	00db      	lsls	r3, r3, #3
   90dbe:	4413      	add	r3, r2
   90dc0:	89ba      	ldrh	r2, [r7, #12]
   90dc2:	4413      	add	r3, r2
   90dc4:	4a0f      	ldr	r2, [pc, #60]	; (90e04 <Cl_Pressure_Controller_Handler+0x274>)
   90dc6:	fb82 1203 	smull	r1, r2, r2, r3
   90dca:	1092      	asrs	r2, r2, #2
   90dcc:	17db      	asrs	r3, r3, #31
   90dce:	1ad3      	subs	r3, r2, r3
   90dd0:	b29a      	uxth	r2, r3
   90dd2:	4b0b      	ldr	r3, [pc, #44]	; (90e00 <Cl_Pressure_Controller_Handler+0x270>)
   90dd4:	801a      	strh	r2, [r3, #0]

			
			
			break;
   90dd6:	e000      	b.n	90dda <Cl_Pressure_Controller_Handler+0x24a>
	{
		switch(Cl_Ps_Event)
		{
			
			case PS_EVENT_50MS:
			break;
   90dd8:	bf00      	nop
		
	}

	
	
	return cl_retval;
   90dda:	7bfb      	ldrb	r3, [r7, #15]
}
   90ddc:	4618      	mov	r0, r3
   90dde:	3710      	adds	r7, #16
   90de0:	46bd      	mov	sp, r7
   90de2:	bd80      	pop	{r7, pc}
   90de4:	20071b78 	.word	0x20071b78
   90de8:	20071b76 	.word	0x20071b76
   90dec:	20071b6c 	.word	0x20071b6c
   90df0:	0008fd69 	.word	0x0008fd69
   90df4:	20071b6e 	.word	0x20071b6e
   90df8:	20071b70 	.word	0x20071b70
   90dfc:	20071b72 	.word	0x20071b72
   90e00:	20071b74 	.word	0x20071b74
   90e04:	66666667 	.word	0x66666667

00090e08 <Cl_Pressure_Controller_Init>:

Cl_ReturnCodeType  Cl_Pressure_Controller_Init(void)
{
   90e08:	b480      	push	{r7}
   90e0a:	b083      	sub	sp, #12
   90e0c:	af00      	add	r7, sp, #0

	Cl_ReturnCodeType cl_retval = CL_OK;
   90e0e:	2300      	movs	r3, #0
   90e10:	71fb      	strb	r3, [r7, #7]
	 Ps1 = 0;
   90e12:	4b0c      	ldr	r3, [pc, #48]	; (90e44 <Cl_Pressure_Controller_Init+0x3c>)
   90e14:	2200      	movs	r2, #0
   90e16:	801a      	strh	r2, [r3, #0]
	Ps2 = 0;
   90e18:	4b0b      	ldr	r3, [pc, #44]	; (90e48 <Cl_Pressure_Controller_Init+0x40>)
   90e1a:	2200      	movs	r2, #0
   90e1c:	801a      	strh	r2, [r3, #0]
	Ps3 = 0;
   90e1e:	4b0b      	ldr	r3, [pc, #44]	; (90e4c <Cl_Pressure_Controller_Init+0x44>)
   90e20:	2200      	movs	r2, #0
   90e22:	801a      	strh	r2, [r3, #0]
	apt =0 ;
   90e24:	4b0a      	ldr	r3, [pc, #40]	; (90e50 <Cl_Pressure_Controller_Init+0x48>)
   90e26:	2200      	movs	r2, #0
   90e28:	801a      	strh	r2, [r3, #0]
	vpt = 0;
   90e2a:	4b0a      	ldr	r3, [pc, #40]	; (90e54 <Cl_Pressure_Controller_Init+0x4c>)
   90e2c:	2200      	movs	r2, #0
   90e2e:	801a      	strh	r2, [r3, #0]
	Cl_PressureSensor_State = PS_STATE_INITIALISING;
   90e30:	4b09      	ldr	r3, [pc, #36]	; (90e58 <Cl_Pressure_Controller_Init+0x50>)
   90e32:	2201      	movs	r2, #1
   90e34:	701a      	strb	r2, [r3, #0]
	
	return cl_retval;
   90e36:	79fb      	ldrb	r3, [r7, #7]
   90e38:	4618      	mov	r0, r3
   90e3a:	370c      	adds	r7, #12
   90e3c:	46bd      	mov	sp, r7
   90e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
   90e42:	4770      	bx	lr
   90e44:	20071b6c 	.word	0x20071b6c
   90e48:	20071b6e 	.word	0x20071b6e
   90e4c:	20071b70 	.word	0x20071b70
   90e50:	20071b72 	.word	0x20071b72
   90e54:	20071b74 	.word	0x20071b74
   90e58:	20071b78 	.word	0x20071b78

00090e5c <res_temp_lookuptable>:
	{11708,4400},{11747,4500},{11785,4600},{11824,4700},{11862,4800},{11901,4900},{11940,5000},{11978,5100},{12016,5200},{12055,5300},{12093,5400},{12132,5500},{12170,5600},{12209,5700},{12247,5800},{12286,5900},{12324,6000},{12362,6100},{12401,6200},
	{12439,6300},{12477,6400},{12516,6500},{12554,6600},{12592,6700},{12631,6800},{12669,6900},{12707,7000},{12745,7100},{12784,7200},{12822,7300},{12860,7400},{12898,7500},{12937,7600},{12975,7700},{13013,7800},{13051,7900},{13089,8000},{13127,8100},
	{13166,8200},{13204,8300},{13242,8400},{13280,8500},{13318,8600},{13356,8700},{13394,8800},{13432,8900},{13470,9000},{13508,9100},{13546,9200}
};
void res_temp_lookuptable(Cl_Uint32Type res)
{
   90e5c:	b590      	push	{r4, r7, lr}
   90e5e:	b085      	sub	sp, #20
   90e60:	af00      	add	r7, sp, #0
   90e62:	6078      	str	r0, [r7, #4]
	int i;
	float slope=0;
   90e64:	f04f 0300 	mov.w	r3, #0
   90e68:	60bb      	str	r3, [r7, #8]
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<150;i++)
   90e6a:	2300      	movs	r3, #0
   90e6c:	60fb      	str	r3, [r7, #12]
   90e6e:	e080      	b.n	90f72 <res_temp_lookuptable+0x116>
	{
		if (res == res_temp[i].resistance)
   90e70:	4b43      	ldr	r3, [pc, #268]	; (90f80 <res_temp_lookuptable+0x124>)
   90e72:	6878      	ldr	r0, [r7, #4]
   90e74:	4798      	blx	r3
   90e76:	4601      	mov	r1, r0
   90e78:	4a42      	ldr	r2, [pc, #264]	; (90f84 <res_temp_lookuptable+0x128>)
   90e7a:	68fb      	ldr	r3, [r7, #12]
   90e7c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   90e80:	4b41      	ldr	r3, [pc, #260]	; (90f88 <res_temp_lookuptable+0x12c>)
   90e82:	4608      	mov	r0, r1
   90e84:	4611      	mov	r1, r2
   90e86:	4798      	blx	r3
   90e88:	4603      	mov	r3, r0
   90e8a:	2b00      	cmp	r3, #0
   90e8c:	d007      	beq.n	90e9e <res_temp_lookuptable+0x42>
		{
			res_temp_value=res_temp[i].temperature;
   90e8e:	4a3d      	ldr	r2, [pc, #244]	; (90f84 <res_temp_lookuptable+0x128>)
   90e90:	68fb      	ldr	r3, [r7, #12]
   90e92:	00db      	lsls	r3, r3, #3
   90e94:	4413      	add	r3, r2
   90e96:	685b      	ldr	r3, [r3, #4]
   90e98:	4a3c      	ldr	r2, [pc, #240]	; (90f8c <res_temp_lookuptable+0x130>)
   90e9a:	6013      	str	r3, [r2, #0]
			break;
   90e9c:	e06d      	b.n	90f7a <res_temp_lookuptable+0x11e>
		}
		else if ((res > res_temp[i].resistance) && (res < res_temp[i+1].resistance))
   90e9e:	4b38      	ldr	r3, [pc, #224]	; (90f80 <res_temp_lookuptable+0x124>)
   90ea0:	6878      	ldr	r0, [r7, #4]
   90ea2:	4798      	blx	r3
   90ea4:	4601      	mov	r1, r0
   90ea6:	4a37      	ldr	r2, [pc, #220]	; (90f84 <res_temp_lookuptable+0x128>)
   90ea8:	68fb      	ldr	r3, [r7, #12]
   90eaa:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   90eae:	4b38      	ldr	r3, [pc, #224]	; (90f90 <res_temp_lookuptable+0x134>)
   90eb0:	4608      	mov	r0, r1
   90eb2:	4611      	mov	r1, r2
   90eb4:	4798      	blx	r3
   90eb6:	4603      	mov	r3, r0
   90eb8:	2b00      	cmp	r3, #0
   90eba:	d057      	beq.n	90f6c <res_temp_lookuptable+0x110>
   90ebc:	4b30      	ldr	r3, [pc, #192]	; (90f80 <res_temp_lookuptable+0x124>)
   90ebe:	6878      	ldr	r0, [r7, #4]
   90ec0:	4798      	blx	r3
   90ec2:	4601      	mov	r1, r0
   90ec4:	68fb      	ldr	r3, [r7, #12]
   90ec6:	3301      	adds	r3, #1
   90ec8:	4a2e      	ldr	r2, [pc, #184]	; (90f84 <res_temp_lookuptable+0x128>)
   90eca:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   90ece:	4b31      	ldr	r3, [pc, #196]	; (90f94 <res_temp_lookuptable+0x138>)
   90ed0:	4608      	mov	r0, r1
   90ed2:	4611      	mov	r1, r2
   90ed4:	4798      	blx	r3
   90ed6:	4603      	mov	r3, r0
   90ed8:	2b00      	cmp	r3, #0
   90eda:	d047      	beq.n	90f6c <res_temp_lookuptable+0x110>
		{
			slope = ((res_temp[i+1].temperature-res_temp[i].temperature)/(res_temp[i+1].resistance-res_temp[i].resistance));
   90edc:	68fb      	ldr	r3, [r7, #12]
   90ede:	3301      	adds	r3, #1
   90ee0:	4a28      	ldr	r2, [pc, #160]	; (90f84 <res_temp_lookuptable+0x128>)
   90ee2:	00db      	lsls	r3, r3, #3
   90ee4:	4413      	add	r3, r2
   90ee6:	6859      	ldr	r1, [r3, #4]
   90ee8:	4a26      	ldr	r2, [pc, #152]	; (90f84 <res_temp_lookuptable+0x128>)
   90eea:	68fb      	ldr	r3, [r7, #12]
   90eec:	00db      	lsls	r3, r3, #3
   90eee:	4413      	add	r3, r2
   90ef0:	685a      	ldr	r2, [r3, #4]
   90ef2:	4b29      	ldr	r3, [pc, #164]	; (90f98 <res_temp_lookuptable+0x13c>)
   90ef4:	4608      	mov	r0, r1
   90ef6:	4611      	mov	r1, r2
   90ef8:	4798      	blx	r3
   90efa:	4603      	mov	r3, r0
   90efc:	461c      	mov	r4, r3
   90efe:	68fb      	ldr	r3, [r7, #12]
   90f00:	3301      	adds	r3, #1
   90f02:	4a20      	ldr	r2, [pc, #128]	; (90f84 <res_temp_lookuptable+0x128>)
   90f04:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
   90f08:	4a1e      	ldr	r2, [pc, #120]	; (90f84 <res_temp_lookuptable+0x128>)
   90f0a:	68fb      	ldr	r3, [r7, #12]
   90f0c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   90f10:	4b21      	ldr	r3, [pc, #132]	; (90f98 <res_temp_lookuptable+0x13c>)
   90f12:	4608      	mov	r0, r1
   90f14:	4611      	mov	r1, r2
   90f16:	4798      	blx	r3
   90f18:	4603      	mov	r3, r0
   90f1a:	461a      	mov	r2, r3
   90f1c:	4b1f      	ldr	r3, [pc, #124]	; (90f9c <res_temp_lookuptable+0x140>)
   90f1e:	4620      	mov	r0, r4
   90f20:	4611      	mov	r1, r2
   90f22:	4798      	blx	r3
   90f24:	4603      	mov	r3, r0
   90f26:	60bb      	str	r3, [r7, #8]
			res_temp_value = slope * (res-res_temp[i].resistance) + res_temp[i].temperature;
   90f28:	4b15      	ldr	r3, [pc, #84]	; (90f80 <res_temp_lookuptable+0x124>)
   90f2a:	6878      	ldr	r0, [r7, #4]
   90f2c:	4798      	blx	r3
   90f2e:	4601      	mov	r1, r0
   90f30:	4a14      	ldr	r2, [pc, #80]	; (90f84 <res_temp_lookuptable+0x128>)
   90f32:	68fb      	ldr	r3, [r7, #12]
   90f34:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   90f38:	4b17      	ldr	r3, [pc, #92]	; (90f98 <res_temp_lookuptable+0x13c>)
   90f3a:	4608      	mov	r0, r1
   90f3c:	4611      	mov	r1, r2
   90f3e:	4798      	blx	r3
   90f40:	4603      	mov	r3, r0
   90f42:	461a      	mov	r2, r3
   90f44:	4b16      	ldr	r3, [pc, #88]	; (90fa0 <res_temp_lookuptable+0x144>)
   90f46:	4610      	mov	r0, r2
   90f48:	68b9      	ldr	r1, [r7, #8]
   90f4a:	4798      	blx	r3
   90f4c:	4603      	mov	r3, r0
   90f4e:	4619      	mov	r1, r3
   90f50:	4a0c      	ldr	r2, [pc, #48]	; (90f84 <res_temp_lookuptable+0x128>)
   90f52:	68fb      	ldr	r3, [r7, #12]
   90f54:	00db      	lsls	r3, r3, #3
   90f56:	4413      	add	r3, r2
   90f58:	685a      	ldr	r2, [r3, #4]
   90f5a:	4b12      	ldr	r3, [pc, #72]	; (90fa4 <res_temp_lookuptable+0x148>)
   90f5c:	4608      	mov	r0, r1
   90f5e:	4611      	mov	r1, r2
   90f60:	4798      	blx	r3
   90f62:	4603      	mov	r3, r0
   90f64:	461a      	mov	r2, r3
   90f66:	4b09      	ldr	r3, [pc, #36]	; (90f8c <res_temp_lookuptable+0x130>)
   90f68:	601a      	str	r2, [r3, #0]
			//sv_cntrl_setpumpspeed(HEPARINPUMP,hep_speed);
			break;
   90f6a:	e006      	b.n	90f7a <res_temp_lookuptable+0x11e>
void res_temp_lookuptable(Cl_Uint32Type res)
{
	int i;
	float slope=0;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<150;i++)
   90f6c:	68fb      	ldr	r3, [r7, #12]
   90f6e:	3301      	adds	r3, #1
   90f70:	60fb      	str	r3, [r7, #12]
   90f72:	68fb      	ldr	r3, [r7, #12]
   90f74:	2b95      	cmp	r3, #149	; 0x95
   90f76:	f77f af7b 	ble.w	90e70 <res_temp_lookuptable+0x14>
			//sv_cntrl_setpumpspeed(HEPARINPUMP,hep_speed);
			break;
		}
	}
	
}
   90f7a:	3714      	adds	r7, #20
   90f7c:	46bd      	mov	sp, r7
   90f7e:	bd90      	pop	{r4, r7, pc}
   90f80:	000a8255 	.word	0x000a8255
   90f84:	20070738 	.word	0x20070738
   90f88:	000a862d 	.word	0x000a862d
   90f8c:	20071b8c 	.word	0x20071b8c
   90f90:	000a867d 	.word	0x000a867d
   90f94:	000a8641 	.word	0x000a8641
   90f98:	000a80f1 	.word	0x000a80f1
   90f9c:	000a846d 	.word	0x000a846d
   90fa0:	000a8305 	.word	0x000a8305
   90fa4:	000a80f5 	.word	0x000a80f5

00090fa8 <Cl_Temperature_Controller_Handler>:
Cl_ReturnCodeType  Cl_Temperature_Controller_Handler(Cl_Temp_EventType Cl_Tc_Event)
{
   90fa8:	b590      	push	{r4, r7, lr}
   90faa:	b08b      	sub	sp, #44	; 0x2c
   90fac:	af00      	add	r7, sp, #0
   90fae:	4603      	mov	r3, r0
   90fb0:	71fb      	strb	r3, [r7, #7]
float temp=0,cal_data=0;
   90fb2:	f04f 0300 	mov.w	r3, #0
   90fb6:	627b      	str	r3, [r7, #36]	; 0x24
   90fb8:	f04f 0300 	mov.w	r3, #0
   90fbc:	623b      	str	r3, [r7, #32]
	Cl_ReturnCodeType cl_retval = CL_OK;
   90fbe:	2300      	movs	r3, #0
   90fc0:	77fb      	strb	r3, [r7, #31]
	 Cl_Uint16Type temp_val  = 0;
   90fc2:	2300      	movs	r3, #0
   90fc4:	82bb      	strh	r3, [r7, #20]
	Cl_Uint16Type data=0;
   90fc6:	2300      	movs	r3, #0
   90fc8:	827b      	strh	r3, [r7, #18]
	if(Cl_Temp_State == TS_STATE_INITIALISING)
   90fca:	4b94      	ldr	r3, [pc, #592]	; (9121c <Cl_Temperature_Controller_Handler+0x274>)
   90fcc:	781b      	ldrb	r3, [r3, #0]
   90fce:	2b01      	cmp	r3, #1
   90fd0:	f040 8096 	bne.w	91100 <Cl_Temperature_Controller_Handler+0x158>
	{
			switch(Cl_Tc_Event)
   90fd4:	79fb      	ldrb	r3, [r7, #7]
   90fd6:	2b01      	cmp	r3, #1
   90fd8:	d005      	beq.n	90fe6 <Cl_Temperature_Controller_Handler+0x3e>
   90fda:	2b03      	cmp	r3, #3
   90fdc:	d078      	beq.n	910d0 <Cl_Temperature_Controller_Handler+0x128>
   90fde:	2b00      	cmp	r3, #0
   90fe0:	f000 808c 	beq.w	910fc <Cl_Temperature_Controller_Handler+0x154>
				case TS_EVENT_5SEC:
					
					sv_spi_blood_read_temp(&data);
					temp3_correcton = data - Temp3;
				break;
				default:break;
   90fe4:	e08b      	b.n	910fe <Cl_Temperature_Controller_Handler+0x156>
			{
				
				case TS_EVENT_50MS:
				break;
				case TS_EVENT_100MS:
				if ( counter == 0 )
   90fe6:	4b8e      	ldr	r3, [pc, #568]	; (91220 <Cl_Temperature_Controller_Handler+0x278>)
   90fe8:	881b      	ldrh	r3, [r3, #0]
   90fea:	2b00      	cmp	r3, #0
   90fec:	d10c      	bne.n	91008 <Cl_Temperature_Controller_Handler+0x60>
				{
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &Temp1);
   90fee:	2012      	movs	r0, #18
   90ff0:	498c      	ldr	r1, [pc, #560]	; (91224 <Cl_Temperature_Controller_Handler+0x27c>)
   90ff2:	4b8d      	ldr	r3, [pc, #564]	; (91228 <Cl_Temperature_Controller_Handler+0x280>)
   90ff4:	4798      	blx	r3
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &Temp2);
   90ff6:	2013      	movs	r0, #19
   90ff8:	498c      	ldr	r1, [pc, #560]	; (9122c <Cl_Temperature_Controller_Handler+0x284>)
   90ffa:	4b8b      	ldr	r3, [pc, #556]	; (91228 <Cl_Temperature_Controller_Handler+0x280>)
   90ffc:	4798      	blx	r3
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &Temp3);
   90ffe:	2014      	movs	r0, #20
   91000:	498b      	ldr	r1, [pc, #556]	; (91230 <Cl_Temperature_Controller_Handler+0x288>)
   91002:	4b89      	ldr	r3, [pc, #548]	; (91228 <Cl_Temperature_Controller_Handler+0x280>)
   91004:	4798      	blx	r3
   91006:	e051      	b.n	910ac <Cl_Temperature_Controller_Handler+0x104>
				}
				else
				{
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &temp_val);
   91008:	f107 0314 	add.w	r3, r7, #20
   9100c:	2012      	movs	r0, #18
   9100e:	4619      	mov	r1, r3
   91010:	4b85      	ldr	r3, [pc, #532]	; (91228 <Cl_Temperature_Controller_Handler+0x280>)
   91012:	4798      	blx	r3
					Temp1 = ( Temp1 +temp_val)/counter+1 ;
   91014:	4b83      	ldr	r3, [pc, #524]	; (91224 <Cl_Temperature_Controller_Handler+0x27c>)
   91016:	881b      	ldrh	r3, [r3, #0]
   91018:	461a      	mov	r2, r3
   9101a:	8abb      	ldrh	r3, [r7, #20]
   9101c:	4413      	add	r3, r2
   9101e:	4a80      	ldr	r2, [pc, #512]	; (91220 <Cl_Temperature_Controller_Handler+0x278>)
   91020:	8812      	ldrh	r2, [r2, #0]
   91022:	fb93 f3f2 	sdiv	r3, r3, r2
   91026:	b29b      	uxth	r3, r3
   91028:	3301      	adds	r3, #1
   9102a:	b29a      	uxth	r2, r3
   9102c:	4b7d      	ldr	r3, [pc, #500]	; (91224 <Cl_Temperature_Controller_Handler+0x27c>)
   9102e:	801a      	strh	r2, [r3, #0]
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &temp_val);
   91030:	f107 0314 	add.w	r3, r7, #20
   91034:	2013      	movs	r0, #19
   91036:	4619      	mov	r1, r3
   91038:	4b7b      	ldr	r3, [pc, #492]	; (91228 <Cl_Temperature_Controller_Handler+0x280>)
   9103a:	4798      	blx	r3
					Temp2 = ( Temp2 +temp_val)/counter+1 ;
   9103c:	4b7b      	ldr	r3, [pc, #492]	; (9122c <Cl_Temperature_Controller_Handler+0x284>)
   9103e:	881b      	ldrh	r3, [r3, #0]
   91040:	461a      	mov	r2, r3
   91042:	8abb      	ldrh	r3, [r7, #20]
   91044:	4413      	add	r3, r2
   91046:	4a76      	ldr	r2, [pc, #472]	; (91220 <Cl_Temperature_Controller_Handler+0x278>)
   91048:	8812      	ldrh	r2, [r2, #0]
   9104a:	fb93 f3f2 	sdiv	r3, r3, r2
   9104e:	b29b      	uxth	r3, r3
   91050:	3301      	adds	r3, #1
   91052:	b29a      	uxth	r2, r3
   91054:	4b75      	ldr	r3, [pc, #468]	; (9122c <Cl_Temperature_Controller_Handler+0x284>)
   91056:	801a      	strh	r2, [r3, #0]
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &temp_val);
   91058:	f107 0314 	add.w	r3, r7, #20
   9105c:	2014      	movs	r0, #20
   9105e:	4619      	mov	r1, r3
   91060:	4b71      	ldr	r3, [pc, #452]	; (91228 <Cl_Temperature_Controller_Handler+0x280>)
   91062:	4798      	blx	r3
					Temp3 = ( Temp3 +temp_val)/counter+1 ;
   91064:	8abb      	ldrh	r3, [r7, #20]
   91066:	461a      	mov	r2, r3
   91068:	4b72      	ldr	r3, [pc, #456]	; (91234 <Cl_Temperature_Controller_Handler+0x28c>)
   9106a:	4610      	mov	r0, r2
   9106c:	4798      	blx	r3
   9106e:	4601      	mov	r1, r0
   91070:	4b6f      	ldr	r3, [pc, #444]	; (91230 <Cl_Temperature_Controller_Handler+0x288>)
   91072:	681a      	ldr	r2, [r3, #0]
   91074:	4b70      	ldr	r3, [pc, #448]	; (91238 <Cl_Temperature_Controller_Handler+0x290>)
   91076:	4608      	mov	r0, r1
   91078:	4611      	mov	r1, r2
   9107a:	4798      	blx	r3
   9107c:	4603      	mov	r3, r0
   9107e:	461c      	mov	r4, r3
   91080:	4b67      	ldr	r3, [pc, #412]	; (91220 <Cl_Temperature_Controller_Handler+0x278>)
   91082:	881b      	ldrh	r3, [r3, #0]
   91084:	461a      	mov	r2, r3
   91086:	4b6b      	ldr	r3, [pc, #428]	; (91234 <Cl_Temperature_Controller_Handler+0x28c>)
   91088:	4610      	mov	r0, r2
   9108a:	4798      	blx	r3
   9108c:	4602      	mov	r2, r0
   9108e:	4b6b      	ldr	r3, [pc, #428]	; (9123c <Cl_Temperature_Controller_Handler+0x294>)
   91090:	4620      	mov	r0, r4
   91092:	4611      	mov	r1, r2
   91094:	4798      	blx	r3
   91096:	4603      	mov	r3, r0
   91098:	461a      	mov	r2, r3
   9109a:	4b67      	ldr	r3, [pc, #412]	; (91238 <Cl_Temperature_Controller_Handler+0x290>)
   9109c:	4610      	mov	r0, r2
   9109e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   910a2:	4798      	blx	r3
   910a4:	4603      	mov	r3, r0
   910a6:	461a      	mov	r2, r3
   910a8:	4b61      	ldr	r3, [pc, #388]	; (91230 <Cl_Temperature_Controller_Handler+0x288>)
   910aa:	601a      	str	r2, [r3, #0]
				}

				counter++;
   910ac:	4b5c      	ldr	r3, [pc, #368]	; (91220 <Cl_Temperature_Controller_Handler+0x278>)
   910ae:	881b      	ldrh	r3, [r3, #0]
   910b0:	3301      	adds	r3, #1
   910b2:	b29a      	uxth	r2, r3
   910b4:	4b5a      	ldr	r3, [pc, #360]	; (91220 <Cl_Temperature_Controller_Handler+0x278>)
   910b6:	801a      	strh	r2, [r3, #0]
				if(counter > 10)
   910b8:	4b59      	ldr	r3, [pc, #356]	; (91220 <Cl_Temperature_Controller_Handler+0x278>)
   910ba:	881b      	ldrh	r3, [r3, #0]
   910bc:	2b0a      	cmp	r3, #10
   910be:	d906      	bls.n	910ce <Cl_Temperature_Controller_Handler+0x126>
				{
					counter = 0;
   910c0:	4b57      	ldr	r3, [pc, #348]	; (91220 <Cl_Temperature_Controller_Handler+0x278>)
   910c2:	2200      	movs	r2, #0
   910c4:	801a      	strh	r2, [r3, #0]
					Cl_Temp_State = TS_STATE_ACTIVE;
   910c6:	4b55      	ldr	r3, [pc, #340]	; (9121c <Cl_Temperature_Controller_Handler+0x274>)
   910c8:	2202      	movs	r2, #2
   910ca:	701a      	strb	r2, [r3, #0]
				}
				break;
   910cc:	e017      	b.n	910fe <Cl_Temperature_Controller_Handler+0x156>
   910ce:	e016      	b.n	910fe <Cl_Temperature_Controller_Handler+0x156>
				case TS_EVENT_5SEC:
					
					sv_spi_blood_read_temp(&data);
   910d0:	f107 0312 	add.w	r3, r7, #18
   910d4:	4618      	mov	r0, r3
   910d6:	4b5a      	ldr	r3, [pc, #360]	; (91240 <Cl_Temperature_Controller_Handler+0x298>)
   910d8:	4798      	blx	r3
					temp3_correcton = data - Temp3;
   910da:	8a7b      	ldrh	r3, [r7, #18]
   910dc:	461a      	mov	r2, r3
   910de:	4b55      	ldr	r3, [pc, #340]	; (91234 <Cl_Temperature_Controller_Handler+0x28c>)
   910e0:	4610      	mov	r0, r2
   910e2:	4798      	blx	r3
   910e4:	4601      	mov	r1, r0
   910e6:	4b52      	ldr	r3, [pc, #328]	; (91230 <Cl_Temperature_Controller_Handler+0x288>)
   910e8:	681a      	ldr	r2, [r3, #0]
   910ea:	4b56      	ldr	r3, [pc, #344]	; (91244 <Cl_Temperature_Controller_Handler+0x29c>)
   910ec:	4608      	mov	r0, r1
   910ee:	4611      	mov	r1, r2
   910f0:	4798      	blx	r3
   910f2:	4603      	mov	r3, r0
   910f4:	461a      	mov	r2, r3
   910f6:	4b54      	ldr	r3, [pc, #336]	; (91248 <Cl_Temperature_Controller_Handler+0x2a0>)
   910f8:	601a      	str	r2, [r3, #0]
				break;
   910fa:	e000      	b.n	910fe <Cl_Temperature_Controller_Handler+0x156>
	{
			switch(Cl_Tc_Event)
			{
				
				case TS_EVENT_50MS:
				break;
   910fc:	bf00      	nop
   910fe:	e0e0      	b.n	912c2 <Cl_Temperature_Controller_Handler+0x31a>
					temp3_correcton = data - Temp3;
				break;
				default:break;
			}
	}
	else if(Cl_Temp_State == TS_STATE_ACTIVE)
   91100:	4b46      	ldr	r3, [pc, #280]	; (9121c <Cl_Temperature_Controller_Handler+0x274>)
   91102:	781b      	ldrb	r3, [r3, #0]
   91104:	2b02      	cmp	r3, #2
   91106:	f040 80dc 	bne.w	912c2 <Cl_Temperature_Controller_Handler+0x31a>
	{
			switch(Cl_Tc_Event)
   9110a:	79fb      	ldrb	r3, [r7, #7]
   9110c:	2b01      	cmp	r3, #1
   9110e:	d006      	beq.n	9111e <Cl_Temperature_Controller_Handler+0x176>
   91110:	2b03      	cmp	r3, #3
   91112:	f000 80ab 	beq.w	9126c <Cl_Temperature_Controller_Handler+0x2c4>
   91116:	2b00      	cmp	r3, #0
   91118:	f000 80d2 	beq.w	912c0 <Cl_Temperature_Controller_Handler+0x318>
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
				
				}
				
				break;
				default:break;
   9111c:	e0d1      	b.n	912c2 <Cl_Temperature_Controller_Handler+0x31a>
			{
				
				case TS_EVENT_50MS:
				break;
				case TS_EVENT_100MS:
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &temp_val);
   9111e:	f107 0314 	add.w	r3, r7, #20
   91122:	2012      	movs	r0, #18
   91124:	4619      	mov	r1, r3
   91126:	4b40      	ldr	r3, [pc, #256]	; (91228 <Cl_Temperature_Controller_Handler+0x280>)
   91128:	4798      	blx	r3
				
////				(402 *100* temp_val)/(2*32768);								// resistance of PT100
//				res_temp_lookuptable((402 *100* temp_val)/(2*32768));		// temperature from look up table in 4 digits
//				Temp1 = res_temp_value/100;									// Temp3 value in XX.yy format
//				Temp1 = Temp1 - 2.5 + 0.25;										// sensor offset 
				Temp1 = (float)temp_val /100;
   9112a:	8aba      	ldrh	r2, [r7, #20]
   9112c:	4b47      	ldr	r3, [pc, #284]	; (9124c <Cl_Temperature_Controller_Handler+0x2a4>)
   9112e:	4610      	mov	r0, r2
   91130:	4798      	blx	r3
   91132:	4602      	mov	r2, r0
   91134:	4b41      	ldr	r3, [pc, #260]	; (9123c <Cl_Temperature_Controller_Handler+0x294>)
   91136:	4610      	mov	r0, r2
   91138:	4945      	ldr	r1, [pc, #276]	; (91250 <Cl_Temperature_Controller_Handler+0x2a8>)
   9113a:	4798      	blx	r3
   9113c:	4603      	mov	r3, r0
   9113e:	461a      	mov	r2, r3
   91140:	4b44      	ldr	r3, [pc, #272]	; (91254 <Cl_Temperature_Controller_Handler+0x2ac>)
   91142:	4610      	mov	r0, r2
   91144:	4798      	blx	r3
   91146:	4603      	mov	r3, r0
   91148:	b29a      	uxth	r2, r3
   9114a:	4b36      	ldr	r3, [pc, #216]	; (91224 <Cl_Temperature_Controller_Handler+0x27c>)
   9114c:	801a      	strh	r2, [r3, #0]
				Temp1 = (Temp1 *9 + temp_val)/10;
   9114e:	4b35      	ldr	r3, [pc, #212]	; (91224 <Cl_Temperature_Controller_Handler+0x27c>)
   91150:	881b      	ldrh	r3, [r3, #0]
   91152:	461a      	mov	r2, r3
   91154:	4613      	mov	r3, r2
   91156:	00db      	lsls	r3, r3, #3
   91158:	4413      	add	r3, r2
   9115a:	8aba      	ldrh	r2, [r7, #20]
   9115c:	4413      	add	r3, r2
   9115e:	4a3e      	ldr	r2, [pc, #248]	; (91258 <Cl_Temperature_Controller_Handler+0x2b0>)
   91160:	fb82 1203 	smull	r1, r2, r2, r3
   91164:	1092      	asrs	r2, r2, #2
   91166:	17db      	asrs	r3, r3, #31
   91168:	1ad3      	subs	r3, r2, r3
   9116a:	b29a      	uxth	r2, r3
   9116c:	4b2d      	ldr	r3, [pc, #180]	; (91224 <Cl_Temperature_Controller_Handler+0x27c>)
   9116e:	801a      	strh	r2, [r3, #0]
				
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &temp_val);
   91170:	f107 0314 	add.w	r3, r7, #20
   91174:	2013      	movs	r0, #19
   91176:	4619      	mov	r1, r3
   91178:	4b2b      	ldr	r3, [pc, #172]	; (91228 <Cl_Temperature_Controller_Handler+0x280>)
   9117a:	4798      	blx	r3
// 				//				(402 *100* temp_val)/(2*32768);								// resistance of PT100
// 				res_temp_lookuptable((402 *100* temp_val)/(2*32768));		// temperature from look up table in 4 digits
// 				Temp2 = res_temp_value/100;									// Temp3 value in XX.yy format
// 				Temp2 = Temp2 - 0.4;                                            // sensor offset
				Temp2 = (float)temp_val /100;
   9117c:	8aba      	ldrh	r2, [r7, #20]
   9117e:	4b33      	ldr	r3, [pc, #204]	; (9124c <Cl_Temperature_Controller_Handler+0x2a4>)
   91180:	4610      	mov	r0, r2
   91182:	4798      	blx	r3
   91184:	4602      	mov	r2, r0
   91186:	4b2d      	ldr	r3, [pc, #180]	; (9123c <Cl_Temperature_Controller_Handler+0x294>)
   91188:	4610      	mov	r0, r2
   9118a:	4931      	ldr	r1, [pc, #196]	; (91250 <Cl_Temperature_Controller_Handler+0x2a8>)
   9118c:	4798      	blx	r3
   9118e:	4603      	mov	r3, r0
   91190:	461a      	mov	r2, r3
   91192:	4b30      	ldr	r3, [pc, #192]	; (91254 <Cl_Temperature_Controller_Handler+0x2ac>)
   91194:	4610      	mov	r0, r2
   91196:	4798      	blx	r3
   91198:	4603      	mov	r3, r0
   9119a:	b29a      	uxth	r2, r3
   9119c:	4b23      	ldr	r3, [pc, #140]	; (9122c <Cl_Temperature_Controller_Handler+0x284>)
   9119e:	801a      	strh	r2, [r3, #0]
				Temp2 = (Temp2 *9 + temp_val)/10;
   911a0:	4b22      	ldr	r3, [pc, #136]	; (9122c <Cl_Temperature_Controller_Handler+0x284>)
   911a2:	881b      	ldrh	r3, [r3, #0]
   911a4:	461a      	mov	r2, r3
   911a6:	4613      	mov	r3, r2
   911a8:	00db      	lsls	r3, r3, #3
   911aa:	4413      	add	r3, r2
   911ac:	8aba      	ldrh	r2, [r7, #20]
   911ae:	4413      	add	r3, r2
   911b0:	4a29      	ldr	r2, [pc, #164]	; (91258 <Cl_Temperature_Controller_Handler+0x2b0>)
   911b2:	fb82 1203 	smull	r1, r2, r2, r3
   911b6:	1092      	asrs	r2, r2, #2
   911b8:	17db      	asrs	r3, r3, #31
   911ba:	1ad3      	subs	r3, r2, r3
   911bc:	b29a      	uxth	r2, r3
   911be:	4b1b      	ldr	r3, [pc, #108]	; (9122c <Cl_Temperature_Controller_Handler+0x284>)
   911c0:	801a      	strh	r2, [r3, #0]
				
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &temp_val);
   911c2:	f107 0314 	add.w	r3, r7, #20
   911c6:	2014      	movs	r0, #20
   911c8:	4619      	mov	r1, r3
   911ca:	4b17      	ldr	r3, [pc, #92]	; (91228 <Cl_Temperature_Controller_Handler+0x280>)
   911cc:	4798      	blx	r3
// 				Temp3 = Temp3 - 0.4 ;										// sensor offset 
// 				
// 				
// // 				temp = temp_val * 0.8036;
// // 				calibration_tmp(temp,TS3);
				Temp3 = (float)temp_val /100;
   911ce:	8aba      	ldrh	r2, [r7, #20]
   911d0:	4b1e      	ldr	r3, [pc, #120]	; (9124c <Cl_Temperature_Controller_Handler+0x2a4>)
   911d2:	4610      	mov	r0, r2
   911d4:	4798      	blx	r3
   911d6:	4602      	mov	r2, r0
   911d8:	4b18      	ldr	r3, [pc, #96]	; (9123c <Cl_Temperature_Controller_Handler+0x294>)
   911da:	4610      	mov	r0, r2
   911dc:	491c      	ldr	r1, [pc, #112]	; (91250 <Cl_Temperature_Controller_Handler+0x2a8>)
   911de:	4798      	blx	r3
   911e0:	4603      	mov	r3, r0
   911e2:	461a      	mov	r2, r3
   911e4:	4b12      	ldr	r3, [pc, #72]	; (91230 <Cl_Temperature_Controller_Handler+0x288>)
   911e6:	601a      	str	r2, [r3, #0]
				Temp3 =(Temp3*5 + temprature_final_value_3)/6;
   911e8:	4b11      	ldr	r3, [pc, #68]	; (91230 <Cl_Temperature_Controller_Handler+0x288>)
   911ea:	681a      	ldr	r2, [r3, #0]
   911ec:	4b1b      	ldr	r3, [pc, #108]	; (9125c <Cl_Temperature_Controller_Handler+0x2b4>)
   911ee:	4610      	mov	r0, r2
   911f0:	491b      	ldr	r1, [pc, #108]	; (91260 <Cl_Temperature_Controller_Handler+0x2b8>)
   911f2:	4798      	blx	r3
   911f4:	4603      	mov	r3, r0
   911f6:	4619      	mov	r1, r3
   911f8:	4b1a      	ldr	r3, [pc, #104]	; (91264 <Cl_Temperature_Controller_Handler+0x2bc>)
   911fa:	681a      	ldr	r2, [r3, #0]
   911fc:	4b0e      	ldr	r3, [pc, #56]	; (91238 <Cl_Temperature_Controller_Handler+0x290>)
   911fe:	4608      	mov	r0, r1
   91200:	4611      	mov	r1, r2
   91202:	4798      	blx	r3
   91204:	4603      	mov	r3, r0
   91206:	461a      	mov	r2, r3
   91208:	4b0c      	ldr	r3, [pc, #48]	; (9123c <Cl_Temperature_Controller_Handler+0x294>)
   9120a:	4610      	mov	r0, r2
   9120c:	4916      	ldr	r1, [pc, #88]	; (91268 <Cl_Temperature_Controller_Handler+0x2c0>)
   9120e:	4798      	blx	r3
   91210:	4603      	mov	r3, r0
   91212:	461a      	mov	r2, r3
   91214:	4b06      	ldr	r3, [pc, #24]	; (91230 <Cl_Temperature_Controller_Handler+0x288>)
   91216:	601a      	str	r2, [r3, #0]
				break;
   91218:	e053      	b.n	912c2 <Cl_Temperature_Controller_Handler+0x31a>
   9121a:	bf00      	nop
   9121c:	20071b88 	.word	0x20071b88
   91220:	20071b7e 	.word	0x20071b7e
   91224:	20071b7a 	.word	0x20071b7a
   91228:	0008fd69 	.word	0x0008fd69
   9122c:	20071b7c 	.word	0x20071b7c
   91230:	20071b80 	.word	0x20071b80
   91234:	000a825d 	.word	0x000a825d
   91238:	000a80f5 	.word	0x000a80f5
   9123c:	000a846d 	.word	0x000a846d
   91240:	0009b4b5 	.word	0x0009b4b5
   91244:	000a80f1 	.word	0x000a80f1
   91248:	20071b84 	.word	0x20071b84
   9124c:	000a8255 	.word	0x000a8255
   91250:	42c80000 	.word	0x42c80000
   91254:	000a86dd 	.word	0x000a86dd
   91258:	66666667 	.word	0x66666667
   9125c:	000a8305 	.word	0x000a8305
   91260:	40a00000 	.word	0x40a00000
   91264:	20071970 	.word	0x20071970
   91268:	40c00000 	.word	0x40c00000
				case TS_EVENT_5SEC:
				data = 0;
   9126c:	2300      	movs	r3, #0
   9126e:	827b      	strh	r3, [r7, #18]
				{
					float temp=0;
   91270:	f04f 0300 	mov.w	r3, #0
   91274:	61bb      	str	r3, [r7, #24]
					Cl_Uint16Type test_data =0 ;
   91276:	2300      	movs	r3, #0
   91278:	82fb      	strh	r3, [r7, #22]
					
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &data);
   9127a:	f107 0312 	add.w	r3, r7, #18
   9127e:	2014      	movs	r0, #20
   91280:	4619      	mov	r1, r3
   91282:	4b12      	ldr	r3, [pc, #72]	; (912cc <Cl_Temperature_Controller_Handler+0x324>)
   91284:	4798      	blx	r3
// 				res_temp_lookuptable((402 *100* temp_val)/(2*32768));		// temperature from look up table in 4 digits
// 				temp = res_temp_value/100;									// Temp3 value in XX.yy format
// //				temp = temp - 31 + 14;										// sensor offset
// 				temp = temp - 0.4;										// sensor offset
				temp = (float)data /100;
   91286:	8a7a      	ldrh	r2, [r7, #18]
   91288:	4b11      	ldr	r3, [pc, #68]	; (912d0 <Cl_Temperature_Controller_Handler+0x328>)
   9128a:	4610      	mov	r0, r2
   9128c:	4798      	blx	r3
   9128e:	4602      	mov	r2, r0
   91290:	4b10      	ldr	r3, [pc, #64]	; (912d4 <Cl_Temperature_Controller_Handler+0x32c>)
   91292:	4610      	mov	r0, r2
   91294:	4910      	ldr	r1, [pc, #64]	; (912d8 <Cl_Temperature_Controller_Handler+0x330>)
   91296:	4798      	blx	r3
   91298:	4603      	mov	r3, r0
   9129a:	61bb      	str	r3, [r7, #24]
				cl_Datastreamtype cl_tdata;
				cl_tdata.word =0;
   9129c:	2300      	movs	r3, #0
   9129e:	60fb      	str	r3, [r7, #12]
				cl_tdata.Twobyte = temp;
   912a0:	4b0e      	ldr	r3, [pc, #56]	; (912dc <Cl_Temperature_Controller_Handler+0x334>)
   912a2:	69b8      	ldr	r0, [r7, #24]
   912a4:	4798      	blx	r3
   912a6:	4603      	mov	r3, r0
   912a8:	b29b      	uxth	r3, r3
   912aa:	81bb      	strh	r3, [r7, #12]
				cl_tdata.bytearray[2] = 31;
   912ac:	231f      	movs	r3, #31
   912ae:	73bb      	strb	r3, [r7, #14]
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   912b0:	f107 030c 	add.w	r3, r7, #12
   912b4:	2037      	movs	r0, #55	; 0x37
   912b6:	4619      	mov	r1, r3
   912b8:	2204      	movs	r2, #4
   912ba:	4b09      	ldr	r3, [pc, #36]	; (912e0 <Cl_Temperature_Controller_Handler+0x338>)
   912bc:	4798      	blx	r3
				
				}
				
				break;
   912be:	e000      	b.n	912c2 <Cl_Temperature_Controller_Handler+0x31a>
	{
			switch(Cl_Tc_Event)
			{
				
				case TS_EVENT_50MS:
				break;
   912c0:	bf00      	nop
			
	}

	
	
	return cl_retval;
   912c2:	7ffb      	ldrb	r3, [r7, #31]
}
   912c4:	4618      	mov	r0, r3
   912c6:	372c      	adds	r7, #44	; 0x2c
   912c8:	46bd      	mov	sp, r7
   912ca:	bd90      	pop	{r4, r7, pc}
   912cc:	0008fd69 	.word	0x0008fd69
   912d0:	000a8255 	.word	0x000a8255
   912d4:	000a846d 	.word	0x000a846d
   912d8:	42c80000 	.word	0x42c80000
   912dc:	000a86dd 	.word	0x000a86dd
   912e0:	0009d1e9 	.word	0x0009d1e9

000912e4 <Cl_Temperature_Controller_Init>:

Cl_ReturnCodeType  Cl_Temperature_Controller_Init(void)
{
   912e4:	b480      	push	{r7}
   912e6:	b083      	sub	sp, #12
   912e8:	af00      	add	r7, sp, #0

	Cl_ReturnCodeType cl_retval = CL_OK;
   912ea:	2300      	movs	r3, #0
   912ec:	71fb      	strb	r3, [r7, #7]
		 Temp1 = 0;
   912ee:	4b0a      	ldr	r3, [pc, #40]	; (91318 <Cl_Temperature_Controller_Init+0x34>)
   912f0:	2200      	movs	r2, #0
   912f2:	801a      	strh	r2, [r3, #0]
		 Temp2 = 0;
   912f4:	4b09      	ldr	r3, [pc, #36]	; (9131c <Cl_Temperature_Controller_Init+0x38>)
   912f6:	2200      	movs	r2, #0
   912f8:	801a      	strh	r2, [r3, #0]
		 Temp3 = 0;
   912fa:	4b09      	ldr	r3, [pc, #36]	; (91320 <Cl_Temperature_Controller_Init+0x3c>)
   912fc:	f04f 0200 	mov.w	r2, #0
   91300:	601a      	str	r2, [r3, #0]
		 Cl_Temp_State = TS_STATE_INITIALISING;
   91302:	4b08      	ldr	r3, [pc, #32]	; (91324 <Cl_Temperature_Controller_Init+0x40>)
   91304:	2201      	movs	r2, #1
   91306:	701a      	strb	r2, [r3, #0]
		 
		 return cl_retval;
   91308:	79fb      	ldrb	r3, [r7, #7]
}
   9130a:	4618      	mov	r0, r3
   9130c:	370c      	adds	r7, #12
   9130e:	46bd      	mov	sp, r7
   91310:	f85d 7b04 	ldr.w	r7, [sp], #4
   91314:	4770      	bx	lr
   91316:	bf00      	nop
   91318:	20071b7a 	.word	0x20071b7a
   9131c:	20071b7c 	.word	0x20071b7c
   91320:	20071b80 	.word	0x20071b80
   91324:	20071b88 	.word	0x20071b88

00091328 <cl_testharnesscommandhandler>:
static int16_t avgtmp3   = 0;
//array_command_type cmd_backup;
Cl_testsensorType test_sensor_status[SENSOR_MAX_INPUT];

Cl_ReturnCodeType cl_testharnesscommandhandler(Cl_ConsoleMsgType* pCl_ConsoleMsg)
{
   91328:	b590      	push	{r4, r7, lr}
   9132a:	b0c9      	sub	sp, #292	; 0x124
   9132c:	af00      	add	r7, sp, #0
   9132e:	1d3b      	adds	r3, r7, #4
   91330:	6018      	str	r0, [r3, #0]
	Cl_ReturnCodeType cl_thretval = CL_ERROR;
   91332:	2304      	movs	r3, #4
   91334:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	cl_Datastreamtype cl_indata  ;
	Cl_ConsoleMsgType TestMsg;
	Cl_Uint8Type datasize;
	Cl_Uint8Type version;
	int16_t sensordata=0;
   91338:	2300      	movs	r3, #0
   9133a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	int16_t Pressuredata=0;
   9133e:	2300      	movs	r3, #0
   91340:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
	int16_t sensordatamillivolts =0;
   91344:	2300      	movs	r3, #0
   91346:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
	int16_t tempdata =0;
   9134a:	2300      	movs	r3, #0
   9134c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	int16_t Pressuredatainmillibars =0;
   91350:	2300      	movs	r3, #0
   91352:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
	int16_t Ps1,Ps2,Atp,Vtp,TMP = 0;
   91356:	2300      	movs	r3, #0
   91358:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	Cl_Uint8Type temp;
	Cl_Uint32Type rateval;
	Cl_Testcommandtype test;
	Cl_Uint32Type count1;
	
	cl_indata.bytearray[0] = 0;
   9135c:	2300      	movs	r3, #0
   9135e:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
	cl_indata.bytearray[1] = 0;
   91362:	2300      	movs	r3, #0
   91364:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
	cl_indata.bytearray[2] = 0;
   91368:	2300      	movs	r3, #0
   9136a:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
	cl_indata.bytearray[3] = 0;
   9136e:	2300      	movs	r3, #0
   91370:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
	cl_indata.Twobyte = 0;
   91374:	2300      	movs	r3, #0
   91376:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	cl_indata.word = 0;
   9137a:	2300      	movs	r3, #0
   9137c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	
	
	for( temp =0; temp < MAX_DATA_SIZE ;temp++ )
   91380:	2300      	movs	r3, #0
   91382:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   91386:	e01c      	b.n	913c2 <cl_testharnesscommandhandler+0x9a>
	{
		TestMsg.data.byte[temp] = 0;
   91388:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   9138c:	f507 7290 	add.w	r2, r7, #288	; 0x120
   91390:	4413      	add	r3, r2
   91392:	2200      	movs	r2, #0
   91394:	f803 2c88 	strb.w	r2, [r3, #-136]
		dataarray[temp]=0;
   91398:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   9139c:	f507 7290 	add.w	r2, r7, #288	; 0x120
   913a0:	4413      	add	r3, r2
   913a2:	2200      	movs	r2, #0
   913a4:	f803 2ca8 	strb.w	r2, [r3, #-168]
		datatxarray[temp]=0;
   913a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   913ac:	f507 7290 	add.w	r2, r7, #288	; 0x120
   913b0:	4413      	add	r3, r2
   913b2:	2200      	movs	r2, #0
   913b4:	f803 2cbc 	strb.w	r2, [r3, #-188]
	cl_indata.bytearray[3] = 0;
	cl_indata.Twobyte = 0;
	cl_indata.word = 0;
	
	
	for( temp =0; temp < MAX_DATA_SIZE ;temp++ )
   913b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   913bc:	3301      	adds	r3, #1
   913be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   913c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   913c6:	2b13      	cmp	r3, #19
   913c8:	d9de      	bls.n	91388 <cl_testharnesscommandhandler+0x60>
		dataarray[temp]=0;
		datatxarray[temp]=0;
				
	}
	
	TestMsg.datasize = pCl_ConsoleMsg->datasize;
   913ca:	1d3b      	adds	r3, r7, #4
   913cc:	681b      	ldr	r3, [r3, #0]
   913ce:	78db      	ldrb	r3, [r3, #3]
   913d0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	
	for( temp =0; temp <TestMsg.datasize ;temp++ )
   913d4:	2300      	movs	r3, #0
   913d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   913da:	e01e      	b.n	9141a <cl_testharnesscommandhandler+0xf2>
	{
		TestMsg.data.byte[temp] = pCl_ConsoleMsg->data.byte[temp];
   913dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   913e0:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
   913e4:	1d39      	adds	r1, r7, #4
   913e6:	6809      	ldr	r1, [r1, #0]
   913e8:	440a      	add	r2, r1
   913ea:	7912      	ldrb	r2, [r2, #4]
   913ec:	f507 7190 	add.w	r1, r7, #288	; 0x120
   913f0:	440b      	add	r3, r1
   913f2:	f803 2c88 	strb.w	r2, [r3, #-136]
		dataarray[temp]= pCl_ConsoleMsg->data.byte[temp];
   913f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   913fa:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
   913fe:	1d39      	adds	r1, r7, #4
   91400:	6809      	ldr	r1, [r1, #0]
   91402:	440a      	add	r2, r1
   91404:	7912      	ldrb	r2, [r2, #4]
   91406:	f507 7190 	add.w	r1, r7, #288	; 0x120
   9140a:	440b      	add	r3, r1
   9140c:	f803 2ca8 	strb.w	r2, [r3, #-168]
				
	}
	
	TestMsg.datasize = pCl_ConsoleMsg->datasize;
	
	for( temp =0; temp <TestMsg.datasize ;temp++ )
   91410:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   91414:	3301      	adds	r3, #1
   91416:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   9141a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   9141e:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
   91422:	429a      	cmp	r2, r3
   91424:	d3da      	bcc.n	913dc <cl_testharnesscommandhandler+0xb4>
	




	switch ((Cl_Testcommandtype)TestMsg.data.byte[0])
   91426:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
   9142a:	2b6e      	cmp	r3, #110	; 0x6e
   9142c:	f202 83e7 	bhi.w	93bfe <cl_testharnesscommandhandler+0x28d6>
   91430:	a201      	add	r2, pc, #4	; (adr r2, 91438 <cl_testharnesscommandhandler+0x110>)
   91432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   91436:	bf00      	nop
   91438:	0009173f 	.word	0x0009173f
   9143c:	00091753 	.word	0x00091753
   91440:	00091769 	.word	0x00091769
   91444:	00093bff 	.word	0x00093bff
   91448:	00093bff 	.word	0x00093bff
   9144c:	00093bff 	.word	0x00093bff
   91450:	00093bff 	.word	0x00093bff
   91454:	0009177f 	.word	0x0009177f
   91458:	0009179f 	.word	0x0009179f
   9145c:	000917bf 	.word	0x000917bf
   91460:	000917df 	.word	0x000917df
   91464:	000917ff 	.word	0x000917ff
   91468:	0009180d 	.word	0x0009180d
   9146c:	0009181b 	.word	0x0009181b
   91470:	000918c7 	.word	0x000918c7
   91474:	000918d5 	.word	0x000918d5
   91478:	000918e9 	.word	0x000918e9
   9147c:	00091931 	.word	0x00091931
   91480:	0009193f 	.word	0x0009193f
   91484:	0009183d 	.word	0x0009183d
   91488:	00091873 	.word	0x00091873
   9148c:	00091991 	.word	0x00091991
   91490:	000919df 	.word	0x000919df
   91494:	00091c0b 	.word	0x00091c0b
   91498:	00091d0d 	.word	0x00091d0d
   9149c:	00091d2f 	.word	0x00091d2f
   914a0:	00091d51 	.word	0x00091d51
   914a4:	00091e53 	.word	0x00091e53
   914a8:	00091e97 	.word	0x00091e97
   914ac:	00091eb9 	.word	0x00091eb9
   914b0:	00091f0b 	.word	0x00091f0b
   914b4:	00091f63 	.word	0x00091f63
   914b8:	00091fe5 	.word	0x00091fe5
   914bc:	00092007 	.word	0x00092007
   914c0:	000920cb 	.word	0x000920cb
   914c4:	000920df 	.word	0x000920df
   914c8:	000920f9 	.word	0x000920f9
   914cc:	00092113 	.word	0x00092113
   914d0:	00092129 	.word	0x00092129
   914d4:	00092211 	.word	0x00092211
   914d8:	00093bff 	.word	0x00093bff
   914dc:	000921cd 	.word	0x000921cd
   914e0:	000921f1 	.word	0x000921f1
   914e4:	00092251 	.word	0x00092251
   914e8:	00092273 	.word	0x00092273
   914ec:	00092295 	.word	0x00092295
   914f0:	00092351 	.word	0x00092351
   914f4:	00091cc1 	.word	0x00091cc1
   914f8:	00091da3 	.word	0x00091da3
   914fc:	00093bff 	.word	0x00093bff
   91500:	00093bff 	.word	0x00093bff
   91504:	000923b5 	.word	0x000923b5
   91508:	000923ef 	.word	0x000923ef
   9150c:	0009254d 	.word	0x0009254d
   91510:	00092429 	.word	0x00092429
   91514:	0009246f 	.word	0x0009246f
   91518:	000924b5 	.word	0x000924b5
   9151c:	00092501 	.word	0x00092501
   91520:	000925dd 	.word	0x000925dd
   91524:	00092635 	.word	0x00092635
   91528:	000926bb 	.word	0x000926bb
   9152c:	00092663 	.word	0x00092663
   91530:	000935a5 	.word	0x000935a5
   91534:	0009194f 	.word	0x0009194f
   91538:	0009196b 	.word	0x0009196b
   9153c:	000926d1 	.word	0x000926d1
   91540:	000926dd 	.word	0x000926dd
   91544:	0009272f 	.word	0x0009272f
   91548:	00092751 	.word	0x00092751
   9154c:	0009275f 	.word	0x0009275f
   91550:	00092785 	.word	0x00092785
   91554:	0009278f 	.word	0x0009278f
   91558:	00091def 	.word	0x00091def
   9155c:	000927b7 	.word	0x000927b7
   91560:	00093bff 	.word	0x00093bff
   91564:	000927d3 	.word	0x000927d3
   91568:	000927e9 	.word	0x000927e9
   9156c:	00091829 	.word	0x00091829
   91570:	00091833 	.word	0x00091833
   91574:	000926e9 	.word	0x000926e9
   91578:	000927f1 	.word	0x000927f1
   9157c:	00091f1f 	.word	0x00091f1f
   91580:	00091f41 	.word	0x00091f41
   91584:	00092339 	.word	0x00092339
   91588:	000919b3 	.word	0x000919b3
   9158c:	00091a01 	.word	0x00091a01
   91590:	0009205b 	.word	0x0009205b
   91594:	00092093 	.word	0x00092093
   91598:	00093bff 	.word	0x00093bff
   9159c:	000916b1 	.word	0x000916b1
   915a0:	00091609 	.word	0x00091609
   915a4:	00091637 	.word	0x00091637
   915a8:	00091665 	.word	0x00091665
   915ac:	00092831 	.word	0x00092831
   915b0:	00092845 	.word	0x00092845
   915b4:	00092819 	.word	0x00092819
   915b8:	00092821 	.word	0x00092821
   915bc:	000915f5 	.word	0x000915f5
   915c0:	000915ff 	.word	0x000915ff
   915c4:	0009213f 	.word	0x0009213f
   915c8:	00092161 	.word	0x00092161
   915cc:	00092853 	.word	0x00092853
   915d0:	0009285b 	.word	0x0009285b
   915d4:	00092863 	.word	0x00092863
   915d8:	0009286f 	.word	0x0009286f
   915dc:	0009287b 	.word	0x0009287b
   915e0:	00091a7d 	.word	0x00091a7d
   915e4:	00091b49 	.word	0x00091b49
   915e8:	00091af9 	.word	0x00091af9
   915ec:	00093bff 	.word	0x00093bff
   915f0:	00093bff 	.word	0x00093bff
	//switch (test)
	{
		case TEST_HEATER_UPDATE_DISABLE:
		heater_update_disble = true;
   915f4:	4bc0      	ldr	r3, [pc, #768]	; (918f8 <cl_testharnesscommandhandler+0x5d0>)
   915f6:	2201      	movs	r2, #1
   915f8:	701a      	strb	r2, [r3, #0]
		break;
   915fa:	f002 bb01 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_HEATER_UPDATE_ENABLE:
		heater_update_disble = false;
   915fe:	4bbe      	ldr	r3, [pc, #760]	; (918f8 <cl_testharnesscommandhandler+0x5d0>)
   91600:	2200      	movs	r2, #0
   91602:	701a      	strb	r2, [r3, #0]
		break;
   91604:	f002 bafc 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_ENABLE_ALARM:
		prev_gate_status = TEST_STUB_ENABLEGATE;
   91608:	4bbc      	ldr	r3, [pc, #752]	; (918fc <cl_testharnesscommandhandler+0x5d4>)
   9160a:	781a      	ldrb	r2, [r3, #0]
   9160c:	4bbc      	ldr	r3, [pc, #752]	; (91900 <cl_testharnesscommandhandler+0x5d8>)
   9160e:	701a      	strb	r2, [r3, #0]
		TEST_STUB_ENABLEGATE = 1;
   91610:	4bba      	ldr	r3, [pc, #744]	; (918fc <cl_testharnesscommandhandler+0x5d4>)
   91612:	2201      	movs	r2, #1
   91614:	701a      	strb	r2, [r3, #0]
		cl_testalarm_id = TestMsg.data.byte[1];
   91616:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
   9161a:	4bba      	ldr	r3, [pc, #744]	; (91904 <cl_testharnesscommandhandler+0x5dc>)
   9161c:	701a      	strb	r2, [r3, #0]
		//Cl_AlarmActivateAlarms(alarmmap[cl_testalarm_id],true);
		Cl_AlarmActivateAlarms(cl_testalarm_id,true);
   9161e:	4bb9      	ldr	r3, [pc, #740]	; (91904 <cl_testharnesscommandhandler+0x5dc>)
   91620:	781b      	ldrb	r3, [r3, #0]
   91622:	4618      	mov	r0, r3
   91624:	2101      	movs	r1, #1
   91626:	4bb8      	ldr	r3, [pc, #736]	; (91908 <cl_testharnesscommandhandler+0x5e0>)
   91628:	4798      	blx	r3
		TEST_STUB_ENABLEGATE = prev_gate_status;
   9162a:	4bb5      	ldr	r3, [pc, #724]	; (91900 <cl_testharnesscommandhandler+0x5d8>)
   9162c:	781a      	ldrb	r2, [r3, #0]
   9162e:	4bb3      	ldr	r3, [pc, #716]	; (918fc <cl_testharnesscommandhandler+0x5d4>)
   91630:	701a      	strb	r2, [r3, #0]
		break;
   91632:	f002 bae5 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_DISABLE_ALARM:
		prev_gate_status = TEST_STUB_ENABLEGATE;
   91636:	4bb1      	ldr	r3, [pc, #708]	; (918fc <cl_testharnesscommandhandler+0x5d4>)
   91638:	781a      	ldrb	r2, [r3, #0]
   9163a:	4bb1      	ldr	r3, [pc, #708]	; (91900 <cl_testharnesscommandhandler+0x5d8>)
   9163c:	701a      	strb	r2, [r3, #0]
		TEST_STUB_ENABLEGATE = 1;
   9163e:	4baf      	ldr	r3, [pc, #700]	; (918fc <cl_testharnesscommandhandler+0x5d4>)
   91640:	2201      	movs	r2, #1
   91642:	701a      	strb	r2, [r3, #0]
			cl_testalarm_id = TestMsg.data.byte[1];
   91644:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
   91648:	4bae      	ldr	r3, [pc, #696]	; (91904 <cl_testharnesscommandhandler+0x5dc>)
   9164a:	701a      	strb	r2, [r3, #0]
		Cl_AlarmActivateAlarms(cl_testalarm_id,false);
   9164c:	4bad      	ldr	r3, [pc, #692]	; (91904 <cl_testharnesscommandhandler+0x5dc>)
   9164e:	781b      	ldrb	r3, [r3, #0]
   91650:	4618      	mov	r0, r3
   91652:	2100      	movs	r1, #0
   91654:	4bac      	ldr	r3, [pc, #688]	; (91908 <cl_testharnesscommandhandler+0x5e0>)
   91656:	4798      	blx	r3
		TEST_STUB_ENABLEGATE = prev_gate_status;
   91658:	4ba9      	ldr	r3, [pc, #676]	; (91900 <cl_testharnesscommandhandler+0x5d8>)
   9165a:	781a      	ldrb	r2, [r3, #0]
   9165c:	4ba7      	ldr	r3, [pc, #668]	; (918fc <cl_testharnesscommandhandler+0x5d4>)
   9165e:	701a      	strb	r2, [r3, #0]
		
		break;
   91660:	f002 bace 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_DISABLE_ALL_ALARMS:
		prev_gate_status = TEST_STUB_ENABLEGATE;
   91664:	4ba5      	ldr	r3, [pc, #660]	; (918fc <cl_testharnesscommandhandler+0x5d4>)
   91666:	781a      	ldrb	r2, [r3, #0]
   91668:	4ba5      	ldr	r3, [pc, #660]	; (91900 <cl_testharnesscommandhandler+0x5d8>)
   9166a:	701a      	strb	r2, [r3, #0]
		TEST_STUB_ENABLEGATE = 1;
   9166c:	4ba3      	ldr	r3, [pc, #652]	; (918fc <cl_testharnesscommandhandler+0x5d4>)
   9166e:	2201      	movs	r2, #1
   91670:	701a      	strb	r2, [r3, #0]
		temp = 0;
   91672:	2300      	movs	r3, #0
   91674:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		while ( temp < _ALARM_MAX_ID )
   91678:	e008      	b.n	9168c <cl_testharnesscommandhandler+0x364>
		Cl_AlarmActivateAlarms(temp++,false);
   9167a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   9167e:	1c5a      	adds	r2, r3, #1
   91680:	f887 211f 	strb.w	r2, [r7, #287]	; 0x11f
   91684:	4618      	mov	r0, r3
   91686:	2100      	movs	r1, #0
   91688:	4b9f      	ldr	r3, [pc, #636]	; (91908 <cl_testharnesscommandhandler+0x5e0>)
   9168a:	4798      	blx	r3
		break;
		case TEST_DISABLE_ALL_ALARMS:
		prev_gate_status = TEST_STUB_ENABLEGATE;
		TEST_STUB_ENABLEGATE = 1;
		temp = 0;
		while ( temp < _ALARM_MAX_ID )
   9168c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   91690:	2b42      	cmp	r3, #66	; 0x42
   91692:	d9f2      	bls.n	9167a <cl_testharnesscommandhandler+0x352>
		Cl_AlarmActivateAlarms(temp++,false);
		TEST_STUB_ENABLEGATE = 0;
   91694:	4b99      	ldr	r3, [pc, #612]	; (918fc <cl_testharnesscommandhandler+0x5d4>)
   91696:	2200      	movs	r2, #0
   91698:	701a      	strb	r2, [r3, #0]
			static int16_t ms_count = 0;
			cl_Datastreamtype cl_tdata;
			ms_count++;
   9169a:	4b9c      	ldr	r3, [pc, #624]	; (9190c <cl_testharnesscommandhandler+0x5e4>)
   9169c:	881b      	ldrh	r3, [r3, #0]
   9169e:	b29b      	uxth	r3, r3
   916a0:	b29b      	uxth	r3, r3
   916a2:	3301      	adds	r3, #1
   916a4:	b29b      	uxth	r3, r3
   916a6:	b29a      	uxth	r2, r3
   916a8:	4b98      	ldr	r3, [pc, #608]	; (9190c <cl_testharnesscommandhandler+0x5e4>)
   916aa:	801a      	strh	r2, [r3, #0]
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
				
			//	ms_count = 0;
				
			
		break;
   916ac:	f002 baa8 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		
		case TEST_SET_BP_DC_DAC:
		cl_indata.bytearray[0] = TestMsg.data.byte[1];
   916b0:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   916b4:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
		
		cl_indata.bytearray[0] = TestMsg.data.byte[1];
   916b8:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   916bc:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
		if(cl_indata.bytearray[0] & 0x01)
   916c0:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   916c4:	f003 0301 	and.w	r3, r3, #1
   916c8:	2b00      	cmp	r3, #0
   916ca:	d004      	beq.n	916d6 <cl_testharnesscommandhandler+0x3ae>
		{
			PIOC->PIO_SODR = 1 <<28;
   916cc:	4b90      	ldr	r3, [pc, #576]	; (91910 <cl_testharnesscommandhandler+0x5e8>)
   916ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   916d2:	631a      	str	r2, [r3, #48]	; 0x30
   916d4:	e003      	b.n	916de <cl_testharnesscommandhandler+0x3b6>
			
		}
		else
		{
			PIOC->PIO_CODR = 1 <<28;
   916d6:	4b8e      	ldr	r3, [pc, #568]	; (91910 <cl_testharnesscommandhandler+0x5e8>)
   916d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   916dc:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if(cl_indata.bytearray[0] & 0x02)
   916de:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   916e2:	f003 0302 	and.w	r3, r3, #2
   916e6:	2b00      	cmp	r3, #0
   916e8:	d004      	beq.n	916f4 <cl_testharnesscommandhandler+0x3cc>
		{
			PIOC->PIO_SODR = 1 <<26;
   916ea:	4b89      	ldr	r3, [pc, #548]	; (91910 <cl_testharnesscommandhandler+0x5e8>)
   916ec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   916f0:	631a      	str	r2, [r3, #48]	; 0x30
   916f2:	e003      	b.n	916fc <cl_testharnesscommandhandler+0x3d4>
			
		}
		else
		{
			PIOC->PIO_CODR = 1 <<26;
   916f4:	4b86      	ldr	r3, [pc, #536]	; (91910 <cl_testharnesscommandhandler+0x5e8>)
   916f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   916fa:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if(cl_indata.bytearray[0] & 0x04)
   916fc:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   91700:	f003 0304 	and.w	r3, r3, #4
   91704:	2b00      	cmp	r3, #0
   91706:	d004      	beq.n	91712 <cl_testharnesscommandhandler+0x3ea>
		{
			PIOC->PIO_SODR = 1 <<25;
   91708:	4b81      	ldr	r3, [pc, #516]	; (91910 <cl_testharnesscommandhandler+0x5e8>)
   9170a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   9170e:	631a      	str	r2, [r3, #48]	; 0x30
   91710:	e003      	b.n	9171a <cl_testharnesscommandhandler+0x3f2>
			
		}
		else
		{
			PIOC->PIO_CODR = 1 <<25;
   91712:	4b7f      	ldr	r3, [pc, #508]	; (91910 <cl_testharnesscommandhandler+0x5e8>)
   91714:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   91718:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if(cl_indata.bytearray[0] & 0x08)
   9171a:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   9171e:	f003 0308 	and.w	r3, r3, #8
   91722:	2b00      	cmp	r3, #0
   91724:	d005      	beq.n	91732 <cl_testharnesscommandhandler+0x40a>
		{
			PIOC->PIO_SODR = 1 <<29;
   91726:	4b7a      	ldr	r3, [pc, #488]	; (91910 <cl_testharnesscommandhandler+0x5e8>)
   91728:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   9172c:	631a      	str	r2, [r3, #48]	; 0x30
		}
		else
		{
			PIOC->PIO_CODR = 1 <<29;
		}
		break;
   9172e:	f002 ba67 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		{
			PIOC->PIO_SODR = 1 <<29;
		}
		else
		{
			PIOC->PIO_CODR = 1 <<29;
   91732:	4b77      	ldr	r3, [pc, #476]	; (91910 <cl_testharnesscommandhandler+0x5e8>)
   91734:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   91738:	635a      	str	r2, [r3, #52]	; 0x34
		}
		break;
   9173a:	f002 ba61 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_COND:
		
		cl_sys_statbuffer.cond_status = TestMsg.data.byte[1];
   9173e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91742:	b29a      	uxth	r2, r3
   91744:	4b73      	ldr	r3, [pc, #460]	; (91914 <cl_testharnesscommandhandler+0x5ec>)
   91746:	86da      	strh	r2, [r3, #54]	; 0x36
		
		cl_thretval = CL_OK;
   91748:	2300      	movs	r3, #0
   9174a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		break;
   9174e:	f002 ba57 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_CS1:
		
		cl_sys_statbuffer.cs1status = TestMsg.data.byte[1];
   91752:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91756:	b29a      	uxth	r2, r3
   91758:	4b6e      	ldr	r3, [pc, #440]	; (91914 <cl_testharnesscommandhandler+0x5ec>)
   9175a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
				cl_thretval = CL_OK;
   9175e:	2300      	movs	r3, #0
   91760:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		break;
   91764:	f002 ba4c 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_CS2:
		cl_sys_statbuffer.cs2status = TestMsg.data.byte[1];
   91768:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9176c:	b29a      	uxth	r2, r3
   9176e:	4b69      	ldr	r3, [pc, #420]	; (91914 <cl_testharnesscommandhandler+0x5ec>)
   91770:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
				cl_thretval = CL_OK;
   91774:	2300      	movs	r3, #0
   91776:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		break;
   9177a:	f002 ba41 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		break;
		case TEST_SET_ALARM_PS3:
		break;
		case TEST_SET_ALARM_FL1:
		
		if(TestMsg.data.byte[1] == 0 )
   9177e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91782:	2b00      	cmp	r3, #0
   91784:	d105      	bne.n	91792 <cl_testharnesscommandhandler+0x46a>
		cl_sys_statbuffer.levelswitch1 = false;
   91786:	4b63      	ldr	r3, [pc, #396]	; (91914 <cl_testharnesscommandhandler+0x5ec>)
   91788:	2200      	movs	r2, #0
   9178a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		else
		cl_sys_statbuffer.levelswitch1 = true;
		break;
   9178e:	f002 ba37 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_FL1:
		
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.levelswitch1 = false;
		else
		cl_sys_statbuffer.levelswitch1 = true;
   91792:	4b60      	ldr	r3, [pc, #384]	; (91914 <cl_testharnesscommandhandler+0x5ec>)
   91794:	2201      	movs	r2, #1
   91796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		break;
   9179a:	f002 ba31 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		
		break;

		case TEST_SET_ALARM_FL2:
		if(TestMsg.data.byte[1] == 0 )
   9179e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   917a2:	2b00      	cmp	r3, #0
   917a4:	d105      	bne.n	917b2 <cl_testharnesscommandhandler+0x48a>
		cl_sys_statbuffer.levelswitch2 = false;
   917a6:	4b5b      	ldr	r3, [pc, #364]	; (91914 <cl_testharnesscommandhandler+0x5ec>)
   917a8:	2200      	movs	r2, #0
   917aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		else
		cl_sys_statbuffer.levelswitch2 = true;
		break;
   917ae:	f002 ba27 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>

		case TEST_SET_ALARM_FL2:
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.levelswitch2 = false;
		else
		cl_sys_statbuffer.levelswitch2 = true;
   917b2:	4b58      	ldr	r3, [pc, #352]	; (91914 <cl_testharnesscommandhandler+0x5ec>)
   917b4:	2201      	movs	r2, #1
   917b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		break;
   917ba:	f002 ba21 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_HOLD1:
		if(TestMsg.data.byte[1] == 0 )
   917be:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   917c2:	2b00      	cmp	r3, #0
   917c4:	d105      	bne.n	917d2 <cl_testharnesscommandhandler+0x4aa>
		cl_sys_statbuffer.holder1status = false;
   917c6:	4b53      	ldr	r3, [pc, #332]	; (91914 <cl_testharnesscommandhandler+0x5ec>)
   917c8:	2200      	movs	r2, #0
   917ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		else 
		cl_sys_statbuffer.holder1status = true;
		break;
   917ce:	f002 ba17 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		break;
		case TEST_SET_ALARM_HOLD1:
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.holder1status = false;
		else 
		cl_sys_statbuffer.holder1status = true;
   917d2:	4b50      	ldr	r3, [pc, #320]	; (91914 <cl_testharnesscommandhandler+0x5ec>)
   917d4:	2201      	movs	r2, #1
   917d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		break;
   917da:	f002 ba11 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_HOLD2:
		if(TestMsg.data.byte[1] == 0 )
   917de:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   917e2:	2b00      	cmp	r3, #0
   917e4:	d105      	bne.n	917f2 <cl_testharnesscommandhandler+0x4ca>
		cl_sys_statbuffer.holder2status = false;
   917e6:	4b4b      	ldr	r3, [pc, #300]	; (91914 <cl_testharnesscommandhandler+0x5ec>)
   917e8:	2200      	movs	r2, #0
   917ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		else
		cl_sys_statbuffer.holder2status = true;
		break;
   917ee:	f002 ba07 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		break;
		case TEST_SET_ALARM_HOLD2:
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.holder2status = false;
		else
		cl_sys_statbuffer.holder2status = true;
   917f2:	4b48      	ldr	r3, [pc, #288]	; (91914 <cl_testharnesscommandhandler+0x5ec>)
   917f4:	2201      	movs	r2, #1
   917f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		break;
   917fa:	f002 ba01 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_TEMP1:
		cl_sys_statbuffer.Temp1status = TestMsg.data.byte[1];
   917fe:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91802:	b29a      	uxth	r2, r3
   91804:	4b43      	ldr	r3, [pc, #268]	; (91914 <cl_testharnesscommandhandler+0x5ec>)
   91806:	851a      	strh	r2, [r3, #40]	; 0x28
		break;
   91808:	f002 b9fa 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_TEMP2:
		cl_sys_statbuffer.Temp2status = TestMsg.data.byte[1];
   9180c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91810:	b29a      	uxth	r2, r3
   91812:	4b40      	ldr	r3, [pc, #256]	; (91914 <cl_testharnesscommandhandler+0x5ec>)
   91814:	855a      	strh	r2, [r3, #42]	; 0x2a
		break;
   91816:	f002 b9f3 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_TEMP3:
		cl_sys_statbuffer.Temp3status = TestMsg.data.byte[1];
   9181a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9181e:	b29a      	uxth	r2, r3
   91820:	4b3c      	ldr	r3, [pc, #240]	; (91914 <cl_testharnesscommandhandler+0x5ec>)
   91822:	859a      	strh	r2, [r3, #44]	; 0x2c
		break;
   91824:	f002 b9ec 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_CURRENT_SENSE_ON:
		dummy_currentsence = true;
   91828:	4b3b      	ldr	r3, [pc, #236]	; (91918 <cl_testharnesscommandhandler+0x5f0>)
   9182a:	2201      	movs	r2, #1
   9182c:	701a      	strb	r2, [r3, #0]
		break;
   9182e:	f002 b9e7 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_CURRENT_SENSE_OFF:
		dummy_currentsence = false;
   91832:	4b39      	ldr	r3, [pc, #228]	; (91918 <cl_testharnesscommandhandler+0x5f0>)
   91834:	2200      	movs	r2, #0
   91836:	701a      	strb	r2, [r3, #0]
		break;
   91838:	f002 b9e2 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SETDATA:
		cl_thretval = sv_nvmsetdata( TestMsg.data.byte[1], &(dataarray[2]),TestMsg.datasize);
   9183c:	f897 1099 	ldrb.w	r1, [r7, #153]	; 0x99
   91840:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
   91844:	f107 0378 	add.w	r3, r7, #120	; 0x78
   91848:	3302      	adds	r3, #2
   9184a:	4608      	mov	r0, r1
   9184c:	4619      	mov	r1, r3
   9184e:	4b33      	ldr	r3, [pc, #204]	; (9191c <cl_testharnesscommandhandler+0x5f4>)
   91850:	4798      	blx	r3
   91852:	4603      	mov	r3, r0
   91854:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	cl_thretval = sv_nvmsetdata( dataarray[1], &dataarray[2],TestMsg.datasize);
		cl_thretval = sv_nvmgetdata( dataarray[1], &datatxarray[0]);
   91858:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
   9185c:	f107 0364 	add.w	r3, r7, #100	; 0x64
   91860:	4610      	mov	r0, r2
   91862:	4619      	mov	r1, r3
   91864:	4b2e      	ldr	r3, [pc, #184]	; (91920 <cl_testharnesscommandhandler+0x5f8>)
   91866:	4798      	blx	r3
   91868:	4603      	mov	r3, r0
   9186a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SET",3);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&datatxarray[0],2);
		break;
   9186e:	f002 b9c7 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_GETDATA:

	if( dataarray[1] == NV_DIALYSATE_TEMP || dataarray[1] == NV_APT_VALUE ||dataarray[1] == NV_VPT_VALUE ||  dataarray[1] == NV_CONDUCTIVITY   )
   91872:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   91876:	2b06      	cmp	r3, #6
   91878:	d00b      	beq.n	91892 <cl_testharnesscommandhandler+0x56a>
   9187a:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   9187e:	2b07      	cmp	r3, #7
   91880:	d007      	beq.n	91892 <cl_testharnesscommandhandler+0x56a>
   91882:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   91886:	2b08      	cmp	r3, #8
   91888:	d003      	beq.n	91892 <cl_testharnesscommandhandler+0x56a>
   9188a:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   9188e:	2b0a      	cmp	r3, #10
   91890:	d10c      	bne.n	918ac <cl_testharnesscommandhandler+0x584>
	{
		
		cl_thretval = cl_testgetsensordata( dataarray[1], &datatxarray[0]);
   91892:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
   91896:	f107 0364 	add.w	r3, r7, #100	; 0x64
   9189a:	4610      	mov	r0, r2
   9189c:	4619      	mov	r1, r3
   9189e:	4b21      	ldr	r3, [pc, #132]	; (91924 <cl_testharnesscommandhandler+0x5fc>)
   918a0:	4798      	blx	r3
   918a2:	4603      	mov	r3, r0
   918a4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_TEST_SYSDATA,&datatxarray,2);
		
	
	

		break;
   918a8:	f002 b9aa 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND=",5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&datatxarray[0],1);
	}
	else
	{
		cl_thretval = sv_nvmgetdata( dataarray[1], &datatxarray[0]);
   918ac:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
   918b0:	f107 0364 	add.w	r3, r7, #100	; 0x64
   918b4:	4610      	mov	r0, r2
   918b6:	4619      	mov	r1, r3
   918b8:	4b19      	ldr	r3, [pc, #100]	; (91920 <cl_testharnesscommandhandler+0x5f8>)
   918ba:	4798      	blx	r3
   918bc:	4603      	mov	r3, r0
   918be:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_TEST_SYSDATA,&datatxarray,2);
		
	
	

		break;
   918c2:	f002 b99d 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_ABDSTATUS://14
		cl_sys_statbuffer.abdstatus =  TestMsg.data.byte[1];
   918c6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   918ca:	b29a      	uxth	r2, r3
   918cc:	4b11      	ldr	r3, [pc, #68]	; (91914 <cl_testharnesscommandhandler+0x5ec>)
   918ce:	831a      	strh	r2, [r3, #24]
		break;
   918d0:	f002 b996 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_BDSTATUS://15
		test_enabled = false;
   918d4:	4b14      	ldr	r3, [pc, #80]	; (91928 <cl_testharnesscommandhandler+0x600>)
   918d6:	2200      	movs	r2, #0
   918d8:	701a      	strb	r2, [r3, #0]
		cl_sys_statbuffer_test.bdstatus =  TestMsg.data.byte[1];
   918da:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   918de:	b29a      	uxth	r2, r3
   918e0:	4b12      	ldr	r3, [pc, #72]	; (9192c <cl_testharnesscommandhandler+0x604>)
   918e2:	835a      	strh	r2, [r3, #26]
		break;
   918e4:	f002 b98c 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_APTSTATUS://16
		cl_sys_statbuffer.aptstatus =  TestMsg.data.byte[1];
   918e8:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   918ec:	b29a      	uxth	r2, r3
   918ee:	4b09      	ldr	r3, [pc, #36]	; (91914 <cl_testharnesscommandhandler+0x5ec>)
   918f0:	821a      	strh	r2, [r3, #16]
		break;
   918f2:	f002 b985 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
   918f6:	bf00      	nop
   918f8:	20071b92 	.word	0x20071b92
   918fc:	20070be8 	.word	0x20070be8
   91900:	20070be9 	.word	0x20070be9
   91904:	200727d4 	.word	0x200727d4
   91908:	00082a35 	.word	0x00082a35
   9190c:	20071baa 	.word	0x20071baa
   91910:	400e1200 	.word	0x400e1200
   91914:	200723d8 	.word	0x200723d8
   91918:	20071b9c 	.word	0x20071b9c
   9191c:	0009bd15 	.word	0x0009bd15
   91920:	0009bcdd 	.word	0x0009bcdd
   91924:	00093c61 	.word	0x00093c61
   91928:	20071b91 	.word	0x20071b91
   9192c:	20072774 	.word	0x20072774
		case TEST_SET_ALARM_BPTSTATUS://17
		cl_sys_statbuffer.vptstatus =  TestMsg.data.byte[1];
   91930:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91934:	b29a      	uxth	r2, r3
   91936:	4bbc      	ldr	r3, [pc, #752]	; (91c28 <cl_testharnesscommandhandler+0x900>)
   91938:	825a      	strh	r2, [r3, #18]
		break;
   9193a:	f002 b961 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_BLDSTATUS://18
		cl_sys_statbuffer.bldstatus =  TestMsg.data.byte[1];
   9193e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91942:	b29a      	uxth	r2, r3
   91944:	4bb8      	ldr	r3, [pc, #736]	; (91c28 <cl_testharnesscommandhandler+0x900>)
   91946:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		break;
   9194a:	f002 b959 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_HEATERON://63 0x3F
		cl_wait(100);
   9194e:	2064      	movs	r0, #100	; 0x64
   91950:	4bb6      	ldr	r3, [pc, #728]	; (91c2c <cl_testharnesscommandhandler+0x904>)
   91952:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"HE_ON";
   91954:	4bb6      	ldr	r3, [pc, #728]	; (91c30 <cl_testharnesscommandhandler+0x908>)
   91956:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = sv_cntrl_poweronheater();
		SetHeaterState(CL_HEATER_STATE_ON);
   9195a:	2001      	movs	r0, #1
   9195c:	4bb5      	ldr	r3, [pc, #724]	; (91c34 <cl_testharnesscommandhandler+0x90c>)
   9195e:	4798      	blx	r3
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91960:	2064      	movs	r0, #100	; 0x64
   91962:	4bb2      	ldr	r3, [pc, #712]	; (91c2c <cl_testharnesscommandhandler+0x904>)
   91964:	4798      	blx	r3
		break;
   91966:	f002 b94b 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_HEATEROFF://64 0x40
		cl_wait(100);
   9196a:	2064      	movs	r0, #100	; 0x64
   9196c:	4baf      	ldr	r3, [pc, #700]	; (91c2c <cl_testharnesscommandhandler+0x904>)
   9196e:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"HE_OFF";
   91970:	4bb1      	ldr	r3, [pc, #708]	; (91c38 <cl_testharnesscommandhandler+0x910>)
   91972:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		cl_thretval = sv_cntrl_poweroffheater();
   91976:	4bb1      	ldr	r3, [pc, #708]	; (91c3c <cl_testharnesscommandhandler+0x914>)
   91978:	4798      	blx	r3
   9197a:	4603      	mov	r3, r0
   9197c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		SetHeaterState(CL_HEATER_STATE_OFF);
   91980:	2004      	movs	r0, #4
   91982:	4bac      	ldr	r3, [pc, #688]	; (91c34 <cl_testharnesscommandhandler+0x90c>)
   91984:	4798      	blx	r3
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91986:	2064      	movs	r0, #100	; 0x64
   91988:	4ba8      	ldr	r3, [pc, #672]	; (91c2c <cl_testharnesscommandhandler+0x904>)
   9198a:	4798      	blx	r3
		break;
   9198c:	f002 b938 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_FLOW_PUMPON://21 0x15
		cl_wait(100);
   91990:	2064      	movs	r0, #100	; 0x64
   91992:	4ba6      	ldr	r3, [pc, #664]	; (91c2c <cl_testharnesscommandhandler+0x904>)
   91994:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"FP_ON";
   91996:	4baa      	ldr	r3, [pc, #680]	; (91c40 <cl_testharnesscommandhandler+0x918>)
   91998:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		cl_thretval = sv_cntrl_activatepump(DCMOTOR1);
   9199c:	2001      	movs	r0, #1
   9199e:	4ba9      	ldr	r3, [pc, #676]	; (91c44 <cl_testharnesscommandhandler+0x91c>)
   919a0:	4798      	blx	r3
   919a2:	4603      	mov	r3, r0
   919a4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		//cl_thretval =  sv_cntrl_activatepump(BLOODPUMP);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   919a8:	2064      	movs	r0, #100	; 0x64
   919aa:	4ba0      	ldr	r3, [pc, #640]	; (91c2c <cl_testharnesscommandhandler+0x904>)
   919ac:	4798      	blx	r3
		break;
   919ae:	f002 b927 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
	case TEST_SET_FLOW_PUMPON_ONESEC://21 0x15
	cl_wait(100);
   919b2:	2064      	movs	r0, #100	; 0x64
   919b4:	4b9d      	ldr	r3, [pc, #628]	; (91c2c <cl_testharnesscommandhandler+0x904>)
   919b6:	4798      	blx	r3
	pdataarray = (Cl_Uint8Type *)"FP_ON";
   919b8:	4ba1      	ldr	r3, [pc, #644]	; (91c40 <cl_testharnesscommandhandler+0x918>)
   919ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//cl_thretval = sv_cntrl_activatepump(DCMOTOR1);
	Cl_Uint32Type t = 300;
   919be:	f44f 7396 	mov.w	r3, #300	; 0x12c
   919c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	//sv_cntrl_setpumpspeed(BLOODPUMP,t);
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
	cl_wait(2000);
   919c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   919ca:	4b98      	ldr	r3, [pc, #608]	; (91c2c <cl_testharnesscommandhandler+0x904>)
   919cc:	4798      	blx	r3
	cl_thretval = sv_cntrl_deactivatepump(DCMOTOR1);
   919ce:	2001      	movs	r0, #1
   919d0:	4b9d      	ldr	r3, [pc, #628]	; (91c48 <cl_testharnesscommandhandler+0x920>)
   919d2:	4798      	blx	r3
   919d4:	4603      	mov	r3, r0
   919d6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	break;
   919da:	f002 b911 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
	
	case TEST_SET_FLOW_PUMPOFF://22 0x16
	cl_wait(100);
   919de:	2064      	movs	r0, #100	; 0x64
   919e0:	4b92      	ldr	r3, [pc, #584]	; (91c2c <cl_testharnesscommandhandler+0x904>)
   919e2:	4798      	blx	r3
	pdataarray = (Cl_Uint8Type *)"FP_OFF";
   919e4:	4b99      	ldr	r3, [pc, #612]	; (91c4c <cl_testharnesscommandhandler+0x924>)
   919e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   919ea:	2001      	movs	r0, #1
   919ec:	4b96      	ldr	r3, [pc, #600]	; (91c48 <cl_testharnesscommandhandler+0x920>)
   919ee:	4798      	blx	r3
   919f0:	4603      	mov	r3, r0
   919f2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//cl_thretval =  sv_cntrl_deactivatepump(BLOODPUMP);
	
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
	cl_wait(100);
   919f6:	2064      	movs	r0, #100	; 0x64
   919f8:	4b8c      	ldr	r3, [pc, #560]	; (91c2c <cl_testharnesscommandhandler+0x904>)
   919fa:	4798      	blx	r3
	break;	
   919fc:	f002 b900 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
	case TEST_SET_CS_POT_VALUE:
//while (1)
{
	cl_wait(10);
   91a00:	200a      	movs	r0, #10
   91a02:	4b8a      	ldr	r3, [pc, #552]	; (91c2c <cl_testharnesscommandhandler+0x904>)
   91a04:	4798      	blx	r3
			if(iic_nack)
   91a06:	4b92      	ldr	r3, [pc, #584]	; (91c50 <cl_testharnesscommandhandler+0x928>)
   91a08:	781b      	ldrb	r3, [r3, #0]
   91a0a:	2b00      	cmp	r3, #0
   91a0c:	d002      	beq.n	91a14 <cl_testharnesscommandhandler+0x6ec>
			{
//				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"NACK",4);
				iic_nack = false;
   91a0e:	4b90      	ldr	r3, [pc, #576]	; (91c50 <cl_testharnesscommandhandler+0x928>)
   91a10:	2200      	movs	r2, #0
   91a12:	701a      	strb	r2, [r3, #0]
			}
	 if(TestMsg.datasize == 3)
   91a14:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91a18:	2b03      	cmp	r3, #3
   91a1a:	d104      	bne.n	91a26 <cl_testharnesscommandhandler+0x6fe>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   91a1c:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   91a20:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   91a24:	e00b      	b.n	91a3e <cl_testharnesscommandhandler+0x716>
		
			
		}
		else if(TestMsg.datasize == 4)
   91a26:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91a2a:	2b04      	cmp	r3, #4
   91a2c:	d107      	bne.n	91a3e <cl_testharnesscommandhandler+0x716>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[2];
   91a2e:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   91a32:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[3];
   91a36:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   91a3a:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		if(TestMsg.data.byte[1] == 2)
   91a3e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91a42:	2b02      	cmp	r3, #2
   91a44:	d115      	bne.n	91a72 <cl_testharnesscommandhandler+0x74a>
		{
			Cl_Uint16Type potvalue = 0;
   91a46:	2300      	movs	r3, #0
   91a48:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
				pdataarray = (Cl_Uint8Type *)"CS_POT_SET";
   91a4c:	4b81      	ldr	r3, [pc, #516]	; (91c54 <cl_testharnesscommandhandler+0x92c>)
   91a4e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				potvalue = (cl_indata.Twobyte * 1024)/10000;
   91a52:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91a56:	029b      	lsls	r3, r3, #10
   91a58:	4a7f      	ldr	r2, [pc, #508]	; (91c58 <cl_testharnesscommandhandler+0x930>)
   91a5a:	fb82 1203 	smull	r1, r2, r2, r3
   91a5e:	1312      	asrs	r2, r2, #12
   91a60:	17db      	asrs	r3, r3, #31
   91a62:	1ad3      	subs	r3, r2, r3
   91a64:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
			sv_cs_setpotvalue(potvalue);
   91a68:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
   91a6c:	4618      	mov	r0, r3
   91a6e:	4b7b      	ldr	r3, [pc, #492]	; (91c5c <cl_testharnesscommandhandler+0x934>)
   91a70:	4798      	blx	r3
		
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,10);
	//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.Twobyte,2);
//	cl_wait(20);
	cl_indata.word = 0;
   91a72:	2300      	movs	r3, #0
   91a74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
//	sv_cs_readpotvalue(&cl_indata.Twobyte);
}
	break;
   91a78:	f002 b8c2 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
	case TEST_SET_COND_POT_VALUE:
	//while (1)
	{
		cl_wait(10);
   91a7c:	200a      	movs	r0, #10
   91a7e:	4b6b      	ldr	r3, [pc, #428]	; (91c2c <cl_testharnesscommandhandler+0x904>)
   91a80:	4798      	blx	r3
		if(iic_nack)
   91a82:	4b73      	ldr	r3, [pc, #460]	; (91c50 <cl_testharnesscommandhandler+0x928>)
   91a84:	781b      	ldrb	r3, [r3, #0]
   91a86:	2b00      	cmp	r3, #0
   91a88:	d002      	beq.n	91a90 <cl_testharnesscommandhandler+0x768>
		{
			//				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"NACK",4);
			iic_nack = false;
   91a8a:	4b71      	ldr	r3, [pc, #452]	; (91c50 <cl_testharnesscommandhandler+0x928>)
   91a8c:	2200      	movs	r2, #0
   91a8e:	701a      	strb	r2, [r3, #0]
		}
		if(TestMsg.datasize == 3)
   91a90:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91a94:	2b03      	cmp	r3, #3
   91a96:	d104      	bne.n	91aa2 <cl_testharnesscommandhandler+0x77a>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   91a98:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   91a9c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   91aa0:	e00b      	b.n	91aba <cl_testharnesscommandhandler+0x792>
			
			
		}
		else if(TestMsg.datasize == 4)
   91aa2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91aa6:	2b04      	cmp	r3, #4
   91aa8:	d107      	bne.n	91aba <cl_testharnesscommandhandler+0x792>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[2];
   91aaa:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   91aae:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[3];
   91ab2:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   91ab6:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		if(TestMsg.data.byte[1] == 2)
   91aba:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91abe:	2b02      	cmp	r3, #2
   91ac0:	d115      	bne.n	91aee <cl_testharnesscommandhandler+0x7c6>
		{
			Cl_Uint16Type potvalue = 0;
   91ac2:	2300      	movs	r3, #0
   91ac4:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
			pdataarray = (Cl_Uint8Type *)"CS_POT_SET";
   91ac8:	4b62      	ldr	r3, [pc, #392]	; (91c54 <cl_testharnesscommandhandler+0x92c>)
   91aca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			potvalue = (cl_indata.Twobyte * 1024)/10000;
   91ace:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91ad2:	029b      	lsls	r3, r3, #10
   91ad4:	4a60      	ldr	r2, [pc, #384]	; (91c58 <cl_testharnesscommandhandler+0x930>)
   91ad6:	fb82 1203 	smull	r1, r2, r2, r3
   91ada:	1312      	asrs	r2, r2, #12
   91adc:	17db      	asrs	r3, r3, #31
   91ade:	1ad3      	subs	r3, r2, r3
   91ae0:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
			sv_cs_setcondpotvalue(potvalue);
   91ae4:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
   91ae8:	4618      	mov	r0, r3
   91aea:	4b5d      	ldr	r3, [pc, #372]	; (91c60 <cl_testharnesscommandhandler+0x938>)
   91aec:	4798      	blx	r3
		
		
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,10);
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.Twobyte,2);
		//	cl_wait(20);
		cl_indata.word = 0;
   91aee:	2300      	movs	r3, #0
   91af0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		//	sv_cs_readpotvalue(&cl_indata.Twobyte);
	}
	break;
   91af4:	f002 b884 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
	case TEST_GET_SYSTEM_STATE:
	{
		
	
	Cl_Uint8Type system_status[10];
	 system_status[0] = Cl_Mac_StateDummy;
   91af8:	4b5a      	ldr	r3, [pc, #360]	; (91c64 <cl_testharnesscommandhandler+0x93c>)
   91afa:	781b      	ldrb	r3, [r3, #0]
   91afc:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	 system_status[1] =  Rinsestatedummy;
   91b00:	4b59      	ldr	r3, [pc, #356]	; (91c68 <cl_testharnesscommandhandler+0x940>)
   91b02:	781b      	ldrb	r3, [r3, #0]
   91b04:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	 system_status[2] =  cl_dprep_prime_stateDummy;
   91b08:	4b58      	ldr	r3, [pc, #352]	; (91c6c <cl_testharnesscommandhandler+0x944>)
   91b0a:	781b      	ldrb	r3, [r3, #0]
   91b0c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	 system_status[3] =  cl_dprepstatedummy;
   91b10:	4b57      	ldr	r3, [pc, #348]	; (91c70 <cl_testharnesscommandhandler+0x948>)
   91b12:	781b      	ldrb	r3, [r3, #0]
   91b14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	 system_status[4] =  cl_dlsis_state_dummy;
   91b18:	4b56      	ldr	r3, [pc, #344]	; (91c74 <cl_testharnesscommandhandler+0x94c>)
   91b1a:	781b      	ldrb	r3, [r3, #0]
   91b1c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	 system_status[5] =  Loopbackstatus;
   91b20:	4b55      	ldr	r3, [pc, #340]	; (91c78 <cl_testharnesscommandhandler+0x950>)
   91b22:	781b      	ldrb	r3, [r3, #0]
   91b24:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	 system_status[6] =  Bypassstatus;
   91b28:	4b54      	ldr	r3, [pc, #336]	; (91c7c <cl_testharnesscommandhandler+0x954>)
   91b2a:	781b      	ldrb	r3, [r3, #0]
   91b2c:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	 
	 cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATUS,system_status,7);
   91b30:	f107 0354 	add.w	r3, r7, #84	; 0x54
   91b34:	2047      	movs	r0, #71	; 0x47
   91b36:	4619      	mov	r1, r3
   91b38:	2207      	movs	r2, #7
   91b3a:	4b51      	ldr	r3, [pc, #324]	; (91c80 <cl_testharnesscommandhandler+0x958>)
   91b3c:	4798      	blx	r3
   91b3e:	4603      	mov	r3, r0
   91b40:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	}
	
	break;
   91b44:	f002 b85c 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
	case TEST_GET_ALARM_TABLE:
	{
		
	
		Cl_Uint8Type temparray[4];
		Cl_Uint8Type cntr = 0, cntr_1 =0;
   91b48:	2300      	movs	r3, #0
   91b4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
   91b4e:	2300      	movs	r3, #0
   91b50:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
	
		for ( cntr =0; cntr <  _ALARM_MAX_ID ; cntr++)
   91b54:	2300      	movs	r3, #0
   91b56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
   91b5a:	e050      	b.n	91bfe <cl_testharnesscommandhandler+0x8d6>
		{
				temparray[cntr_1++] = cntr;
   91b5c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   91b60:	1c5a      	adds	r2, r3, #1
   91b62:	f887 2116 	strb.w	r2, [r7, #278]	; 0x116
   91b66:	f507 7290 	add.w	r2, r7, #288	; 0x120
   91b6a:	4413      	add	r3, r2
   91b6c:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
   91b70:	f803 2cd0 	strb.w	r2, [r3, #-208]
				temparray[cntr_1++] = Cl_alarms_alarms[cntr].cl_is_enabled;
   91b74:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   91b78:	1c5a      	adds	r2, r3, #1
   91b7a:	f887 2116 	strb.w	r2, [r7, #278]	; 0x116
   91b7e:	4619      	mov	r1, r3
   91b80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   91b84:	4a3f      	ldr	r2, [pc, #252]	; (91c84 <cl_testharnesscommandhandler+0x95c>)
   91b86:	011b      	lsls	r3, r3, #4
   91b88:	4413      	add	r3, r2
   91b8a:	3308      	adds	r3, #8
   91b8c:	799b      	ldrb	r3, [r3, #6]
   91b8e:	461a      	mov	r2, r3
   91b90:	f507 7390 	add.w	r3, r7, #288	; 0x120
   91b94:	440b      	add	r3, r1
   91b96:	f803 2cd0 	strb.w	r2, [r3, #-208]
				temparray[cntr_1++] = Cl_alarms_alarms[cntr].cl_is_raised;
   91b9a:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   91b9e:	1c5a      	adds	r2, r3, #1
   91ba0:	f887 2116 	strb.w	r2, [r7, #278]	; 0x116
   91ba4:	4619      	mov	r1, r3
   91ba6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   91baa:	4a36      	ldr	r2, [pc, #216]	; (91c84 <cl_testharnesscommandhandler+0x95c>)
   91bac:	011b      	lsls	r3, r3, #4
   91bae:	4413      	add	r3, r2
   91bb0:	3308      	adds	r3, #8
   91bb2:	79db      	ldrb	r3, [r3, #7]
   91bb4:	461a      	mov	r2, r3
   91bb6:	f507 7390 	add.w	r3, r7, #288	; 0x120
   91bba:	440b      	add	r3, r1
   91bbc:	f803 2cd0 	strb.w	r2, [r3, #-208]
				temparray[cntr_1] = Cl_alarms_alarms[cntr].cl_alarmstate;
   91bc0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   91bc4:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
   91bc8:	492e      	ldr	r1, [pc, #184]	; (91c84 <cl_testharnesscommandhandler+0x95c>)
   91bca:	0112      	lsls	r2, r2, #4
   91bcc:	440a      	add	r2, r1
   91bce:	7892      	ldrb	r2, [r2, #2]
   91bd0:	f507 7190 	add.w	r1, r7, #288	; 0x120
   91bd4:	440b      	add	r3, r1
   91bd6:	f803 2cd0 	strb.w	r2, [r3, #-208]
			
				cntr_1 = 0;
   91bda:	2300      	movs	r3, #0
   91bdc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_ALARM_STATUS,temparray,4);
   91be0:	f107 0350 	add.w	r3, r7, #80	; 0x50
   91be4:	2048      	movs	r0, #72	; 0x48
   91be6:	4619      	mov	r1, r3
   91be8:	2204      	movs	r2, #4
   91bea:	4b25      	ldr	r3, [pc, #148]	; (91c80 <cl_testharnesscommandhandler+0x958>)
   91bec:	4798      	blx	r3
   91bee:	4603      	mov	r3, r0
   91bf0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
	
		Cl_Uint8Type temparray[4];
		Cl_Uint8Type cntr = 0, cntr_1 =0;
	
		for ( cntr =0; cntr <  _ALARM_MAX_ID ; cntr++)
   91bf4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   91bf8:	3301      	adds	r3, #1
   91bfa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
   91bfe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   91c02:	2b42      	cmp	r3, #66	; 0x42
   91c04:	d9aa      	bls.n	91b5c <cl_testharnesscommandhandler+0x834>
		
		}
			
	}
	
	break;
   91c06:	f001 bffb 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
	
	break;
	
	
		case TEST_SET_FLOW_PUMPRATE ://23 0x17
		cl_wait(100);
   91c0a:	2064      	movs	r0, #100	; 0x64
   91c0c:	4b07      	ldr	r3, [pc, #28]	; (91c2c <cl_testharnesscommandhandler+0x904>)
   91c0e:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"FP_RATE";
   91c10:	4b1d      	ldr	r3, [pc, #116]	; (91c88 <cl_testharnesscommandhandler+0x960>)
   91c12:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(TestMsg.datasize == 2)
   91c16:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91c1a:	2b02      	cmp	r3, #2
   91c1c:	d136      	bne.n	91c8c <cl_testharnesscommandhandler+0x964>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   91c1e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91c22:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   91c26:	e03d      	b.n	91ca4 <cl_testharnesscommandhandler+0x97c>
   91c28:	200723d8 	.word	0x200723d8
   91c2c:	0009421d 	.word	0x0009421d
   91c30:	000aa25c 	.word	0x000aa25c
   91c34:	00089381 	.word	0x00089381
   91c38:	000aa264 	.word	0x000aa264
   91c3c:	0009b3d5 	.word	0x0009b3d5
   91c40:	000aa26c 	.word	0x000aa26c
   91c44:	0009b32d 	.word	0x0009b32d
   91c48:	0009b369 	.word	0x0009b369
   91c4c:	000aa274 	.word	0x000aa274
   91c50:	20071ba7 	.word	0x20071ba7
   91c54:	000aa27c 	.word	0x000aa27c
   91c58:	68db8bad 	.word	0x68db8bad
   91c5c:	0009b899 	.word	0x0009b899
   91c60:	0009b8b9 	.word	0x0009b8b9
   91c64:	200727d7 	.word	0x200727d7
   91c68:	200727d6 	.word	0x200727d6
   91c6c:	20072878 	.word	0x20072878
   91c70:	2007287b 	.word	0x2007287b
   91c74:	2007287a 	.word	0x2007287a
   91c78:	200727d5 	.word	0x200727d5
   91c7c:	20072879 	.word	0x20072879
   91c80:	0009d1e9 	.word	0x0009d1e9
   91c84:	20071e70 	.word	0x20071e70
   91c88:	000aa288 	.word	0x000aa288
		}
		else if(TestMsg.datasize == 3)
   91c8c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91c90:	2b03      	cmp	r3, #3
   91c92:	d107      	bne.n	91ca4 <cl_testharnesscommandhandler+0x97c>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   91c94:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91c98:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   91c9c:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   91ca0:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,cl_indata.word);
   91ca4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   91ca8:	2001      	movs	r0, #1
   91caa:	4619      	mov	r1, r3
   91cac:	4bb6      	ldr	r3, [pc, #728]	; (91f88 <cl_testharnesscommandhandler+0xc60>)
   91cae:	4798      	blx	r3
   91cb0:	4603      	mov	r3, r0
   91cb2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.word,TestMsg.datasize-1);
		cl_wait(100);
   91cb6:	2064      	movs	r0, #100	; 0x64
   91cb8:	4bb4      	ldr	r3, [pc, #720]	; (91f8c <cl_testharnesscommandhandler+0xc64>)
   91cba:	4798      	blx	r3
		break;
   91cbc:	f001 bfa0 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_FLOW_PUMP_FREQ:
		cl_wait(100);
   91cc0:	2064      	movs	r0, #100	; 0x64
   91cc2:	4bb2      	ldr	r3, [pc, #712]	; (91f8c <cl_testharnesscommandhandler+0xc64>)
   91cc4:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"FP_FRQ";
   91cc6:	4bb2      	ldr	r3, [pc, #712]	; (91f90 <cl_testharnesscommandhandler+0xc68>)
   91cc8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(TestMsg.datasize == 2)
   91ccc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91cd0:	2b02      	cmp	r3, #2
   91cd2:	d104      	bne.n	91cde <cl_testharnesscommandhandler+0x9b6>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   91cd4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91cd8:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   91cdc:	e00b      	b.n	91cf6 <cl_testharnesscommandhandler+0x9ce>
		}
		else if(TestMsg.datasize == 3)
   91cde:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91ce2:	2b03      	cmp	r3, #3
   91ce4:	d107      	bne.n	91cf6 <cl_testharnesscommandhandler+0x9ce>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   91ce6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91cea:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   91cee:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   91cf2:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		//cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,cl_indata.word);
		sv_cntrl_setpumpfreq(DCMOTOR1 , cl_indata.word);
   91cf6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   91cfa:	2001      	movs	r0, #1
   91cfc:	4619      	mov	r1, r3
   91cfe:	4ba5      	ldr	r3, [pc, #660]	; (91f94 <cl_testharnesscommandhandler+0xc6c>)
   91d00:	4798      	blx	r3
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91d02:	2064      	movs	r0, #100	; 0x64
   91d04:	4ba1      	ldr	r3, [pc, #644]	; (91f8c <cl_testharnesscommandhandler+0xc64>)
   91d06:	4798      	blx	r3
		break;
   91d08:	f001 bf7a 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_DEGAS_PUMPON://24 0x18
		cl_wait(100);
   91d0c:	2064      	movs	r0, #100	; 0x64
   91d0e:	4b9f      	ldr	r3, [pc, #636]	; (91f8c <cl_testharnesscommandhandler+0xc64>)
   91d10:	4798      	blx	r3
		cl_thretval =  sv_cntrl_activatepump(DCMOTOR2);
   91d12:	2002      	movs	r0, #2
   91d14:	4ba0      	ldr	r3, [pc, #640]	; (91f98 <cl_testharnesscommandhandler+0xc70>)
   91d16:	4798      	blx	r3
   91d18:	4603      	mov	r3, r0
   91d1a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			
		//cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR2);
		pdataarray = (Cl_Uint8Type *)"DGP_ON";
   91d1e:	4b9f      	ldr	r3, [pc, #636]	; (91f9c <cl_testharnesscommandhandler+0xc74>)
   91d20:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91d24:	2064      	movs	r0, #100	; 0x64
   91d26:	4b99      	ldr	r3, [pc, #612]	; (91f8c <cl_testharnesscommandhandler+0xc64>)
   91d28:	4798      	blx	r3
		break;
   91d2a:	f001 bf69 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_DEGAS_PUMPOFF://25 0x19
		cl_wait(100);
   91d2e:	2064      	movs	r0, #100	; 0x64
   91d30:	4b96      	ldr	r3, [pc, #600]	; (91f8c <cl_testharnesscommandhandler+0xc64>)
   91d32:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR2);
   91d34:	2002      	movs	r0, #2
   91d36:	4b9a      	ldr	r3, [pc, #616]	; (91fa0 <cl_testharnesscommandhandler+0xc78>)
   91d38:	4798      	blx	r3
   91d3a:	4603      	mov	r3, r0
   91d3c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,900);
		pdataarray = (Cl_Uint8Type *)"DGP_OFF";
   91d40:	4b98      	ldr	r3, [pc, #608]	; (91fa4 <cl_testharnesscommandhandler+0xc7c>)
   91d42:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91d46:	2064      	movs	r0, #100	; 0x64
   91d48:	4b90      	ldr	r3, [pc, #576]	; (91f8c <cl_testharnesscommandhandler+0xc64>)
   91d4a:	4798      	blx	r3
		break;
   91d4c:	f001 bf58 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_DEGAS_PUMPRATE://26 0x1A
		cl_wait(100);
   91d50:	2064      	movs	r0, #100	; 0x64
   91d52:	4b8e      	ldr	r3, [pc, #568]	; (91f8c <cl_testharnesscommandhandler+0xc64>)
   91d54:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"DGP_RATE";
   91d56:	4b94      	ldr	r3, [pc, #592]	; (91fa8 <cl_testharnesscommandhandler+0xc80>)
   91d58:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(TestMsg.datasize == 2)
   91d5c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91d60:	2b02      	cmp	r3, #2
   91d62:	d104      	bne.n	91d6e <cl_testharnesscommandhandler+0xa46>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   91d64:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91d68:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   91d6c:	e00b      	b.n	91d86 <cl_testharnesscommandhandler+0xa5e>
		}
		else if(TestMsg.datasize == 3)
   91d6e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91d72:	2b03      	cmp	r3, #3
   91d74:	d107      	bne.n	91d86 <cl_testharnesscommandhandler+0xa5e>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   91d76:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91d7a:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   91d7e:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   91d82:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,cl_indata.word);
   91d86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   91d8a:	2002      	movs	r0, #2
   91d8c:	4619      	mov	r1, r3
   91d8e:	4b7e      	ldr	r3, [pc, #504]	; (91f88 <cl_testharnesscommandhandler+0xc60>)
   91d90:	4798      	blx	r3
   91d92:	4603      	mov	r3, r0
   91d94:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.word,TestMsg.datasize-1);
		cl_wait(100);
   91d98:	2064      	movs	r0, #100	; 0x64
   91d9a:	4b7c      	ldr	r3, [pc, #496]	; (91f8c <cl_testharnesscommandhandler+0xc64>)
   91d9c:	4798      	blx	r3
		break;
   91d9e:	f001 bf2f 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_DG_PUMP_FREQ:
		cl_wait(100);
   91da2:	2064      	movs	r0, #100	; 0x64
   91da4:	4b79      	ldr	r3, [pc, #484]	; (91f8c <cl_testharnesscommandhandler+0xc64>)
   91da6:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"DGP_FRQ";
   91da8:	4b80      	ldr	r3, [pc, #512]	; (91fac <cl_testharnesscommandhandler+0xc84>)
   91daa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(TestMsg.datasize == 2)
   91dae:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91db2:	2b02      	cmp	r3, #2
   91db4:	d104      	bne.n	91dc0 <cl_testharnesscommandhandler+0xa98>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   91db6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91dba:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   91dbe:	e00b      	b.n	91dd8 <cl_testharnesscommandhandler+0xab0>
		}
		else if(TestMsg.datasize == 3)
   91dc0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91dc4:	2b03      	cmp	r3, #3
   91dc6:	d107      	bne.n	91dd8 <cl_testharnesscommandhandler+0xab0>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   91dc8:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91dcc:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   91dd0:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   91dd4:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		//cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,cl_indata.word);
		 sv_cntrl_setpumpfreq(DCMOTOR2 , cl_indata.word);
   91dd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   91ddc:	2002      	movs	r0, #2
   91dde:	4619      	mov	r1, r3
   91de0:	4b6c      	ldr	r3, [pc, #432]	; (91f94 <cl_testharnesscommandhandler+0xc6c>)
   91de2:	4798      	blx	r3
	///	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91de4:	2064      	movs	r0, #100	; 0x64
   91de6:	4b69      	ldr	r3, [pc, #420]	; (91f8c <cl_testharnesscommandhandler+0xc64>)
   91de8:	4798      	blx	r3
		break;
   91dea:	f001 bf09 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		
		case 	TEST_SET_BC_PS_THRESHOLD:
		if(TestMsg.datasize == 2)
   91dee:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91df2:	2b02      	cmp	r3, #2
   91df4:	d104      	bne.n	91e00 <cl_testharnesscommandhandler+0xad8>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   91df6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91dfa:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   91dfe:	e00b      	b.n	91e18 <cl_testharnesscommandhandler+0xaf0>
		}
		else if(TestMsg.datasize == 3)
   91e00:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91e04:	2b03      	cmp	r3, #3
   91e06:	d107      	bne.n	91e18 <cl_testharnesscommandhandler+0xaf0>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   91e08:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91e0c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   91e10:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   91e14:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
			ps3_threshold = cl_indata.word *  1.8432;
   91e18:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
   91e1c:	4b64      	ldr	r3, [pc, #400]	; (91fb0 <cl_testharnesscommandhandler+0xc88>)
   91e1e:	4610      	mov	r0, r2
   91e20:	4798      	blx	r3
   91e22:	4602      	mov	r2, r0
   91e24:	460b      	mov	r3, r1
   91e26:	4c63      	ldr	r4, [pc, #396]	; (91fb4 <cl_testharnesscommandhandler+0xc8c>)
   91e28:	4610      	mov	r0, r2
   91e2a:	4619      	mov	r1, r3
   91e2c:	a354      	add	r3, pc, #336	; (adr r3, 91f80 <cl_testharnesscommandhandler+0xc58>)
   91e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   91e32:	47a0      	blx	r4
   91e34:	4602      	mov	r2, r0
   91e36:	460b      	mov	r3, r1
   91e38:	4610      	mov	r0, r2
   91e3a:	4619      	mov	r1, r3
   91e3c:	4b5e      	ldr	r3, [pc, #376]	; (91fb8 <cl_testharnesscommandhandler+0xc90>)
   91e3e:	4798      	blx	r3
   91e40:	4603      	mov	r3, r0
   91e42:	b29a      	uxth	r2, r3
   91e44:	4b5d      	ldr	r3, [pc, #372]	; (91fbc <cl_testharnesscommandhandler+0xc94>)
   91e46:	801a      	strh	r2, [r3, #0]
			pdataarray = (Cl_Uint8Type*) "PS_T";
   91e48:	4b5d      	ldr	r3, [pc, #372]	; (91fc0 <cl_testharnesscommandhandler+0xc98>)
   91e4a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			

			
		
		
		break;
   91e4e:	f001 bed7 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_UF_PUMPON://27 0x1B
		cl_wait(100);
   91e52:	2064      	movs	r0, #100	; 0x64
   91e54:	4b4d      	ldr	r3, [pc, #308]	; (91f8c <cl_testharnesscommandhandler+0xc64>)
   91e56:	4798      	blx	r3
//		cl_thretval =  sv_cntrl_activatepump(UFPUMP);
//		sv_cntrl_setpumpspeed(UFPUMP,10000);
				cl_uf_controller(CL_UF_EVENT_START,0);
   91e58:	2002      	movs	r0, #2
   91e5a:	2100      	movs	r1, #0
   91e5c:	4b59      	ldr	r3, [pc, #356]	; (91fc4 <cl_testharnesscommandhandler+0xc9c>)
   91e5e:	4798      	blx	r3
				cl_ufpumpFeedback_start();
   91e60:	4b59      	ldr	r3, [pc, #356]	; (91fc8 <cl_testharnesscommandhandler+0xca0>)
   91e62:	4798      	blx	r3
				cl_wait(100);
   91e64:	2064      	movs	r0, #100	; 0x64
   91e66:	4b49      	ldr	r3, [pc, #292]	; (91f8c <cl_testharnesscommandhandler+0xc64>)
   91e68:	4798      	blx	r3
				cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2000);
   91e6a:	2001      	movs	r0, #1
   91e6c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   91e70:	4b54      	ldr	r3, [pc, #336]	; (91fc4 <cl_testharnesscommandhandler+0xc9c>)
   91e72:	4798      	blx	r3
				cl_wait(100);
   91e74:	2064      	movs	r0, #100	; 0x64
   91e76:	4b45      	ldr	r3, [pc, #276]	; (91f8c <cl_testharnesscommandhandler+0xc64>)
   91e78:	4798      	blx	r3
				cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,1000);
   91e7a:	2001      	movs	r0, #1
   91e7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   91e80:	4b50      	ldr	r3, [pc, #320]	; (91fc4 <cl_testharnesscommandhandler+0xc9c>)
   91e82:	4798      	blx	r3
				cl_wait(100);
   91e84:	2064      	movs	r0, #100	; 0x64
   91e86:	4b41      	ldr	r3, [pc, #260]	; (91f8c <cl_testharnesscommandhandler+0xc64>)
   91e88:	4798      	blx	r3
				cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,150);
   91e8a:	2001      	movs	r0, #1
   91e8c:	2196      	movs	r1, #150	; 0x96
   91e8e:	4b4d      	ldr	r3, [pc, #308]	; (91fc4 <cl_testharnesscommandhandler+0xc9c>)
   91e90:	4798      	blx	r3
				
		break;
   91e92:	f001 beb5 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
		break;
		case TEST_SET_UF_PUMPOFF://28 0x1C
		cl_wait(100);
   91e96:	2064      	movs	r0, #100	; 0x64
   91e98:	4b3c      	ldr	r3, [pc, #240]	; (91f8c <cl_testharnesscommandhandler+0xc64>)
   91e9a:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(UFPUMP);
   91e9c:	2004      	movs	r0, #4
   91e9e:	4b40      	ldr	r3, [pc, #256]	; (91fa0 <cl_testharnesscommandhandler+0xc78>)
   91ea0:	4798      	blx	r3
   91ea2:	4603      	mov	r3, r0
   91ea4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		pdataarray = (Cl_Uint8Type *)"UFP_OFF";
   91ea8:	4b48      	ldr	r3, [pc, #288]	; (91fcc <cl_testharnesscommandhandler+0xca4>)
   91eaa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91eae:	2064      	movs	r0, #100	; 0x64
   91eb0:	4b36      	ldr	r3, [pc, #216]	; (91f8c <cl_testharnesscommandhandler+0xc64>)
   91eb2:	4798      	blx	r3
		break;
   91eb4:	f001 bea4 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_UF_PUMPRATE://29 0x1D
		cl_wait(100);
   91eb8:	2064      	movs	r0, #100	; 0x64
   91eba:	4b34      	ldr	r3, [pc, #208]	; (91f8c <cl_testharnesscommandhandler+0xc64>)
   91ebc:	4798      	blx	r3
		if(TestMsg.datasize == 2)
   91ebe:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91ec2:	2b02      	cmp	r3, #2
   91ec4:	d104      	bne.n	91ed0 <cl_testharnesscommandhandler+0xba8>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   91ec6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91eca:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   91ece:	e00b      	b.n	91ee8 <cl_testharnesscommandhandler+0xbc0>
		}
		else if(TestMsg.datasize == 3)
   91ed0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91ed4:	2b03      	cmp	r3, #3
   91ed6:	d107      	bne.n	91ee8 <cl_testharnesscommandhandler+0xbc0>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   91ed8:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91edc:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   91ee0:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   91ee4:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		sv_cntrl_setpumpspeed(UFPUMP,cl_indata.word);
   91ee8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   91eec:	2004      	movs	r0, #4
   91eee:	4619      	mov	r1, r3
   91ef0:	4b25      	ldr	r3, [pc, #148]	; (91f88 <cl_testharnesscommandhandler+0xc60>)
   91ef2:	4798      	blx	r3
		uf_rotation_counter = 0;
   91ef4:	4b36      	ldr	r3, [pc, #216]	; (91fd0 <cl_testharnesscommandhandler+0xca8>)
   91ef6:	2200      	movs	r2, #0
   91ef8:	801a      	strh	r2, [r3, #0]
		pdataarray = (Cl_Uint8Type *)"UFP_RATE";
   91efa:	4b36      	ldr	r3, [pc, #216]	; (91fd4 <cl_testharnesscommandhandler+0xcac>)
   91efc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91f00:	2064      	movs	r0, #100	; 0x64
   91f02:	4b22      	ldr	r3, [pc, #136]	; (91f8c <cl_testharnesscommandhandler+0xc64>)
   91f04:	4798      	blx	r3
		break;
   91f06:	f001 be7b 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
				
		case TEST_SET_VCLAMP_ON://32 0x20
		cl_wait(100);
   91f0a:	2064      	movs	r0, #100	; 0x64
   91f0c:	4b1f      	ldr	r3, [pc, #124]	; (91f8c <cl_testharnesscommandhandler+0xc64>)
   91f0e:	4798      	blx	r3
		sv_cntrl_activatevenousclamp();
   91f10:	4b31      	ldr	r3, [pc, #196]	; (91fd8 <cl_testharnesscommandhandler+0xcb0>)
   91f12:	4798      	blx	r3
					//sv_cntrl_deactivate_valve(VALVE_ID4);
					//cl_wait(50);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
	//flag_hotrinse_1 = 1;
		cl_wait(100);
   91f14:	2064      	movs	r0, #100	; 0x64
   91f16:	4b1d      	ldr	r3, [pc, #116]	; (91f8c <cl_testharnesscommandhandler+0xc64>)
   91f18:	4798      	blx	r3
		break;
   91f1a:	f001 be71 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>

				
		case TEST_SET_VLA_PUMP_PUMPON://81 0x51
		cl_wait(100);
   91f1e:	2064      	movs	r0, #100	; 0x64
   91f20:	4b1a      	ldr	r3, [pc, #104]	; (91f8c <cl_testharnesscommandhandler+0xc64>)
   91f22:	4798      	blx	r3
				
		cl_thretval =  sv_cntrl_activatepump(VLA_PUMP);
   91f24:	2006      	movs	r0, #6
   91f26:	4b1c      	ldr	r3, [pc, #112]	; (91f98 <cl_testharnesscommandhandler+0xc70>)
   91f28:	4798      	blx	r3
   91f2a:	4603      	mov	r3, r0
   91f2c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				
		pdataarray = (Cl_Uint8Type *)"VLA_PUMP_ON";
   91f30:	4b2a      	ldr	r3, [pc, #168]	; (91fdc <cl_testharnesscommandhandler+0xcb4>)
   91f32:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,10);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91f36:	2064      	movs	r0, #100	; 0x64
   91f38:	4b14      	ldr	r3, [pc, #80]	; (91f8c <cl_testharnesscommandhandler+0xc64>)
   91f3a:	4798      	blx	r3
		break;
   91f3c:	f001 be60 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_VLA_PUMP_PUMPOFF://82 0x52
		cl_wait(100);
   91f40:	2064      	movs	r0, #100	; 0x64
   91f42:	4b12      	ldr	r3, [pc, #72]	; (91f8c <cl_testharnesscommandhandler+0xc64>)
   91f44:	4798      	blx	r3
				
		cl_thretval =  sv_cntrl_deactivatepump(VLA_PUMP);
   91f46:	2006      	movs	r0, #6
   91f48:	4b15      	ldr	r3, [pc, #84]	; (91fa0 <cl_testharnesscommandhandler+0xc78>)
   91f4a:	4798      	blx	r3
   91f4c:	4603      	mov	r3, r0
   91f4e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				
		pdataarray = pdataarray = (Cl_Uint8Type *)"VLA_PUMP_OFF";
   91f52:	4b23      	ldr	r3, [pc, #140]	; (91fe0 <cl_testharnesscommandhandler+0xcb8>)
   91f54:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91f58:	2064      	movs	r0, #100	; 0x64
   91f5a:	4b0c      	ldr	r3, [pc, #48]	; (91f8c <cl_testharnesscommandhandler+0xc64>)
   91f5c:	4798      	blx	r3
		break;
   91f5e:	f001 be4f 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
				
		case TEST_SET_BLOOD_PUMPON://33 0x21
		cl_wait(100);
   91f62:	2064      	movs	r0, #100	; 0x64
   91f64:	4b09      	ldr	r3, [pc, #36]	; (91f8c <cl_testharnesscommandhandler+0xc64>)
   91f66:	4798      	blx	r3
				

				
		//pdataarray = (Cl_Uint8Type *)"BP_ON";
		Cl_Uint16Type temp_10;
		Cl_Uint16Type potvalue1,read_data = 0;
   91f68:	2300      	movs	r3, #0
   91f6a:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
		{
		// cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,0,0);
	//	for ( temp_10 = 0 ; temp_10 < 5000; temp_10++)
		{
		//	cl_wait(1);
		cl_thretval =  sv_cntrl_activatepump(BLOODPUMP);
   91f6e:	2003      	movs	r0, #3
   91f70:	4b09      	ldr	r3, [pc, #36]	; (91f98 <cl_testharnesscommandhandler+0xc70>)
   91f72:	4798      	blx	r3
   91f74:	4603      	mov	r3, r0
   91f76:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	if(!(temp_10 % 50 ))
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_10,2);
	//	cl_wait(1);
		}
		
		break;		
   91f7a:	f001 be41 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
   91f7e:	bf00      	nop
   91f80:	487fcb92 	.word	0x487fcb92
   91f84:	3ffd7dbf 	.word	0x3ffd7dbf
   91f88:	0009b461 	.word	0x0009b461
   91f8c:	0009421d 	.word	0x0009421d
   91f90:	000aa290 	.word	0x000aa290
   91f94:	0009b611 	.word	0x0009b611
   91f98:	0009b32d 	.word	0x0009b32d
   91f9c:	000aa298 	.word	0x000aa298
   91fa0:	0009b369 	.word	0x0009b369
   91fa4:	000aa2a0 	.word	0x000aa2a0
   91fa8:	000aa2a8 	.word	0x000aa2a8
   91fac:	000aa2b4 	.word	0x000aa2b4
   91fb0:	000a7999 	.word	0x000a7999
   91fb4:	000a7a85 	.word	0x000a7a85
   91fb8:	000a7fb9 	.word	0x000a7fb9
   91fbc:	2007010a 	.word	0x2007010a
   91fc0:	000aa2bc 	.word	0x000aa2bc
   91fc4:	00097499 	.word	0x00097499
   91fc8:	00097255 	.word	0x00097255
   91fcc:	000aa2c4 	.word	0x000aa2c4
   91fd0:	20071ba8 	.word	0x20071ba8
   91fd4:	000aa2cc 	.word	0x000aa2cc
   91fd8:	0009b535 	.word	0x0009b535
   91fdc:	000aa2d8 	.word	0x000aa2d8
   91fe0:	000aa2e4 	.word	0x000aa2e4

		case TEST_SET_BLOOD_PUMPOFF://34 0x22
		cl_wait(100);
   91fe4:	2064      	movs	r0, #100	; 0x64
   91fe6:	4bb1      	ldr	r3, [pc, #708]	; (922ac <cl_testharnesscommandhandler+0xf84>)
   91fe8:	4798      	blx	r3
		Cl_Uint8Type data =0;
   91fea:	2300      	movs	r3, #0
   91fec:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
		cl_thretval =  sv_cntrl_deactivatepump(BLOODPUMP);
   91ff0:	2003      	movs	r0, #3
   91ff2:	4baf      	ldr	r3, [pc, #700]	; (922b0 <cl_testharnesscommandhandler+0xf88>)
   91ff4:	4798      	blx	r3
   91ff6:	4603      	mov	r3, r0
   91ff8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
	//	pdataarray = (Cl_Uint8Type *)"BP_OFF";
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91ffc:	2064      	movs	r0, #100	; 0x64
   91ffe:	4bab      	ldr	r3, [pc, #684]	; (922ac <cl_testharnesscommandhandler+0xf84>)
   92000:	4798      	blx	r3
		break;
   92002:	f001 bdfd 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_BLOOD_PUMPSRATE://35 0x23
		cl_wait(100);
   92006:	2064      	movs	r0, #100	; 0x64
   92008:	4ba8      	ldr	r3, [pc, #672]	; (922ac <cl_testharnesscommandhandler+0xf84>)
   9200a:	4798      	blx	r3
				if(TestMsg.datasize == 2)
   9200c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   92010:	2b02      	cmp	r3, #2
   92012:	d104      	bne.n	9201e <cl_testharnesscommandhandler+0xcf6>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   92014:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   92018:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   9201c:	e00b      	b.n	92036 <cl_testharnesscommandhandler+0xd0e>
		}
		else if(TestMsg.datasize == 3)
   9201e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   92022:	2b03      	cmp	r3, #3
   92024:	d107      	bne.n	92036 <cl_testharnesscommandhandler+0xd0e>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   92026:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9202a:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   9202e:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   92032:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		Treatdata[ID_bloodratetreat] = cl_indata.word;
   92036:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   9203a:	4a9e      	ldr	r2, [pc, #632]	; (922b4 <cl_testharnesscommandhandler+0xf8c>)
   9203c:	65d3      	str	r3, [r2, #92]	; 0x5c
		sv_cntrl_setpumpspeed(BLOODPUMP,cl_indata.word);
   9203e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   92042:	2003      	movs	r0, #3
   92044:	4619      	mov	r1, r3
   92046:	4b9c      	ldr	r3, [pc, #624]	; (922b8 <cl_testharnesscommandhandler+0xf90>)
   92048:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BP_RATE";
   9204a:	4b9c      	ldr	r3, [pc, #624]	; (922bc <cl_testharnesscommandhandler+0xf94>)
   9204c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   92050:	2064      	movs	r0, #100	; 0x64
   92052:	4b96      	ldr	r3, [pc, #600]	; (922ac <cl_testharnesscommandhandler+0xf84>)
   92054:	4798      	blx	r3
		break;
   92056:	f001 bdd3 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		
		case TEST_SET_PIC_COUNT:
				cl_wait(100);
   9205a:	2064      	movs	r0, #100	; 0x64
   9205c:	4b93      	ldr	r3, [pc, #588]	; (922ac <cl_testharnesscommandhandler+0xf84>)
   9205e:	4798      	blx	r3
		if(TestMsg.datasize == 2)
   92060:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   92064:	2b02      	cmp	r3, #2
   92066:	d104      	bne.n	92072 <cl_testharnesscommandhandler+0xd4a>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   92068:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9206c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   92070:	e00d      	b.n	9208e <cl_testharnesscommandhandler+0xd66>
		}
		else if(TestMsg.datasize == 3)
   92072:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   92076:	2b03      	cmp	r3, #3
   92078:	d109      	bne.n	9208e <cl_testharnesscommandhandler+0xd66>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   9207a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9207e:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   92082:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   92086:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0

			   //DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed , 0x03);

	
	
		break;
   9208a:	f001 bdb9 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
   9208e:	f001 bdb7 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_PIC_CURRENT:
			cl_wait(100);
   92092:	2064      	movs	r0, #100	; 0x64
   92094:	4b85      	ldr	r3, [pc, #532]	; (922ac <cl_testharnesscommandhandler+0xf84>)
   92096:	4798      	blx	r3
		if(TestMsg.datasize == 2)
   92098:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   9209c:	2b02      	cmp	r3, #2
   9209e:	d104      	bne.n	920aa <cl_testharnesscommandhandler+0xd82>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   920a0:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   920a4:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   920a8:	e00d      	b.n	920c6 <cl_testharnesscommandhandler+0xd9e>
		}
		else if(TestMsg.datasize == 3)
   920aa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   920ae:	2b03      	cmp	r3, #3
   920b0:	d109      	bne.n	920c6 <cl_testharnesscommandhandler+0xd9e>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   920b2:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   920b6:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   920ba:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   920be:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
		



		//	   DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed1 , 0x03);
		break;
   920c2:	f001 bd9d 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
   920c6:	f001 bd9b 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>


			//	DD_IIC_SET_BLOODPUP( 0x0E,  &cpu2command , 0x01);
		break;
		case TEST_SET_VCLAMP_OFF://36 0x24
		cl_wait(100);
   920ca:	2064      	movs	r0, #100	; 0x64
   920cc:	4b77      	ldr	r3, [pc, #476]	; (922ac <cl_testharnesscommandhandler+0xf84>)
   920ce:	4798      	blx	r3
		sv_cntrl_deactivatevenousclamp();
   920d0:	4b7b      	ldr	r3, [pc, #492]	; (922c0 <cl_testharnesscommandhandler+0xf98>)
   920d2:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"VC_OFF";
   920d4:	4b7b      	ldr	r3, [pc, #492]	; (922c4 <cl_testharnesscommandhandler+0xf9c>)
   920d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			//		cl_wait(50);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		//flag_hotrinse = 1;
		//cl_wait(100);
		break;
   920da:	f001 bd91 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_WATERINLET_ON://35 0x23
		cl_wait(100);
   920de:	2064      	movs	r0, #100	; 0x64
   920e0:	4b72      	ldr	r3, [pc, #456]	; (922ac <cl_testharnesscommandhandler+0xf84>)
   920e2:	4798      	blx	r3
		sv_cntrl_setHepa_dir();
   920e4:	4b78      	ldr	r3, [pc, #480]	; (922c8 <cl_testharnesscommandhandler+0xfa0>)
   920e6:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"WI_ON";
   920e8:	4b78      	ldr	r3, [pc, #480]	; (922cc <cl_testharnesscommandhandler+0xfa4>)
   920ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   920ee:	2064      	movs	r0, #100	; 0x64
   920f0:	4b6e      	ldr	r3, [pc, #440]	; (922ac <cl_testharnesscommandhandler+0xf84>)
   920f2:	4798      	blx	r3
		break;
   920f4:	f001 bd84 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_WATERINLET_OFF://36 0x24
		cl_wait(100);
   920f8:	2064      	movs	r0, #100	; 0x64
   920fa:	4b6c      	ldr	r3, [pc, #432]	; (922ac <cl_testharnesscommandhandler+0xf84>)
   920fc:	4798      	blx	r3
		sv_cntrl_resetHepa_dir();
   920fe:	4b74      	ldr	r3, [pc, #464]	; (922d0 <cl_testharnesscommandhandler+0xfa8>)
   92100:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"WI_OFF";
   92102:	4b74      	ldr	r3, [pc, #464]	; (922d4 <cl_testharnesscommandhandler+0xfac>)
   92104:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   92108:	2064      	movs	r0, #100	; 0x64
   9210a:	4b68      	ldr	r3, [pc, #416]	; (922ac <cl_testharnesscommandhandler+0xf84>)
   9210c:	4798      	blx	r3
		break;
   9210e:	f001 bd77 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_DRAIN_ON://39 0x27
		cl_wait(100);
   92112:	2064      	movs	r0, #100	; 0x64
   92114:	4b65      	ldr	r3, [pc, #404]	; (922ac <cl_testharnesscommandhandler+0xf84>)
   92116:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"DRAIN_ON";
   92118:	4b6f      	ldr	r3, [pc, #444]	; (922d8 <cl_testharnesscommandhandler+0xfb0>)
   9211a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   9211e:	2064      	movs	r0, #100	; 0x64
   92120:	4b62      	ldr	r3, [pc, #392]	; (922ac <cl_testharnesscommandhandler+0xf84>)
   92122:	4798      	blx	r3
		break;
   92124:	f001 bd6c 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_DRAIN_OFF://40 0x28
		cl_wait(100);
   92128:	2064      	movs	r0, #100	; 0x64
   9212a:	4b60      	ldr	r3, [pc, #384]	; (922ac <cl_testharnesscommandhandler+0xf84>)
   9212c:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"DRAIN_OFF";
   9212e:	4b6b      	ldr	r3, [pc, #428]	; (922dc <cl_testharnesscommandhandler+0xfb4>)
   92130:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   92134:	2064      	movs	r0, #100	; 0x64
   92136:	4b5d      	ldr	r3, [pc, #372]	; (922ac <cl_testharnesscommandhandler+0xf84>)
   92138:	4798      	blx	r3
		break;
   9213a:	f001 bd61 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_DAC2_VALVE_OPEN: // 42 0x30
		//cl_wait(100);
		pdataarray = (Cl_Uint8Type *)"V_OPEN";
   9213e:	4b68      	ldr	r3, [pc, #416]	; (922e0 <cl_testharnesscommandhandler+0xfb8>)
   92140:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		sv_cntrl_activate_valve( VALVE_ID4);
   92144:	2004      	movs	r0, #4
   92146:	4b67      	ldr	r3, [pc, #412]	; (922e4 <cl_testharnesscommandhandler+0xfbc>)
   92148:	4798      	blx	r3
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   9214a:	2064      	movs	r0, #100	; 0x64
   9214c:	4b57      	ldr	r3, [pc, #348]	; (922ac <cl_testharnesscommandhandler+0xf84>)
   9214e:	4798      	blx	r3
		sv_cntrl_deactivate_valve(VALVE_ID4);
   92150:	2004      	movs	r0, #4
   92152:	4b65      	ldr	r3, [pc, #404]	; (922e8 <cl_testharnesscommandhandler+0xfc0>)
   92154:	4798      	blx	r3
		cl_wait(100);
   92156:	2064      	movs	r0, #100	; 0x64
   92158:	4b54      	ldr	r3, [pc, #336]	; (922ac <cl_testharnesscommandhandler+0xf84>)
   9215a:	4798      	blx	r3
		break;
   9215c:	f001 bd50 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		
		case TEST_SET_FLOWRATE:
		
		if(TestMsg.data.byte[1] == 0)
   92160:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   92164:	2b00      	cmp	r3, #0
   92166:	d10c      	bne.n	92182 <cl_testharnesscommandhandler+0xe5a>
		{
			sv_cs_setpotvalue(3800);
   92168:	f640 60d8 	movw	r0, #3800	; 0xed8
   9216c:	4b5f      	ldr	r3, [pc, #380]	; (922ec <cl_testharnesscommandhandler+0xfc4>)
   9216e:	4798      	blx	r3
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,1050);
   92170:	2001      	movs	r0, #1
   92172:	f240 411a 	movw	r1, #1050	; 0x41a
   92176:	4b50      	ldr	r3, [pc, #320]	; (922b8 <cl_testharnesscommandhandler+0xf90>)
   92178:	4798      	blx	r3
   9217a:	4603      	mov	r3, r0
   9217c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   92180:	e022      	b.n	921c8 <cl_testharnesscommandhandler+0xea0>
			
		}
		else if(TestMsg.data.byte[1] == 1)
   92182:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   92186:	2b01      	cmp	r3, #1
   92188:	d10c      	bne.n	921a4 <cl_testharnesscommandhandler+0xe7c>
		{
						sv_cs_setpotvalue(2450);
   9218a:	f640 1092 	movw	r0, #2450	; 0x992
   9218e:	4b57      	ldr	r3, [pc, #348]	; (922ec <cl_testharnesscommandhandler+0xfc4>)
   92190:	4798      	blx	r3
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,745);
   92192:	2001      	movs	r0, #1
   92194:	f240 21e9 	movw	r1, #745	; 0x2e9
   92198:	4b47      	ldr	r3, [pc, #284]	; (922b8 <cl_testharnesscommandhandler+0xf90>)
   9219a:	4798      	blx	r3
   9219c:	4603      	mov	r3, r0
   9219e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   921a2:	e011      	b.n	921c8 <cl_testharnesscommandhandler+0xea0>
		}
		else if(TestMsg.data.byte[1] == 2)
   921a4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   921a8:	2b02      	cmp	r3, #2
   921aa:	d10d      	bne.n	921c8 <cl_testharnesscommandhandler+0xea0>
		{
						sv_cs_setpotvalue(1090);
   921ac:	f240 4042 	movw	r0, #1090	; 0x442
   921b0:	4b4e      	ldr	r3, [pc, #312]	; (922ec <cl_testharnesscommandhandler+0xfc4>)
   921b2:	4798      	blx	r3
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,370);
   921b4:	2001      	movs	r0, #1
   921b6:	f44f 71b9 	mov.w	r1, #370	; 0x172
   921ba:	4b3f      	ldr	r3, [pc, #252]	; (922b8 <cl_testharnesscommandhandler+0xf90>)
   921bc:	4798      	blx	r3
   921be:	4603      	mov	r3, r0
   921c0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		}
		break;
   921c4:	f001 bd1c 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
   921c8:	f001 bd1a 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_VALVE_OPEN: // 42 0x30	
		{
								cl_Datastreamtype cl_tdata;
								cl_tdata.word = 0;
   921cc:	2300      	movs	r3, #0
   921ce:	64fb      	str	r3, [r7, #76]	; 0x4c
		}



		{
					cl_wait(100);
   921d0:	2064      	movs	r0, #100	; 0x64
   921d2:	4b36      	ldr	r3, [pc, #216]	; (922ac <cl_testharnesscommandhandler+0xf84>)
   921d4:	4798      	blx	r3
					pdataarray = (Cl_Uint8Type *)"V_OPEN";
   921d6:	4b42      	ldr	r3, [pc, #264]	; (922e0 <cl_testharnesscommandhandler+0xfb8>)
   921d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					sv_cntrl_activate_valve((sv_valvetype)TestMsg.data.byte[1]);
   921dc:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   921e0:	4618      	mov	r0, r3
   921e2:	4b40      	ldr	r3, [pc, #256]	; (922e4 <cl_testharnesscommandhandler+0xfbc>)
   921e4:	4798      	blx	r3
					//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
					//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
					cl_wait(100);
   921e6:	2064      	movs	r0, #100	; 0x64
   921e8:	4b30      	ldr	r3, [pc, #192]	; (922ac <cl_testharnesscommandhandler+0xf84>)
   921ea:	4798      	blx	r3
					
		}
		}
		break;
   921ec:	f001 bd08 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_VALVE_CLOSE: // 43 0c31
		cl_wait(100);
   921f0:	2064      	movs	r0, #100	; 0x64
   921f2:	4b2e      	ldr	r3, [pc, #184]	; (922ac <cl_testharnesscommandhandler+0xf84>)
   921f4:	4798      	blx	r3
		sv_cntrl_deactivate_valve((sv_valvetype)TestMsg.data.byte[1]);
   921f6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   921fa:	4618      	mov	r0, r3
   921fc:	4b3a      	ldr	r3, [pc, #232]	; (922e8 <cl_testharnesscommandhandler+0xfc0>)
   921fe:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"V_CLOSE";
   92200:	4b3b      	ldr	r3, [pc, #236]	; (922f0 <cl_testharnesscommandhandler+0xfc8>)
   92202:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   92206:	2064      	movs	r0, #100	; 0x64
   92208:	4b28      	ldr	r3, [pc, #160]	; (922ac <cl_testharnesscommandhandler+0xf84>)
   9220a:	4798      	blx	r3
		break;
   9220c:	f001 bcf8 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALL_VALVES_OPEN:
		cl_wait(100);
   92210:	2064      	movs	r0, #100	; 0x64
   92212:	4b26      	ldr	r3, [pc, #152]	; (922ac <cl_testharnesscommandhandler+0xf84>)
   92214:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"V_ALLOPEN";
   92216:	4b37      	ldr	r3, [pc, #220]	; (922f4 <cl_testharnesscommandhandler+0xfcc>)
   92218:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		 for(temp = 1;temp<=20; temp++)
   9221c:	2301      	movs	r3, #1
   9221e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   92222:	e00c      	b.n	9223e <cl_testharnesscommandhandler+0xf16>
		 {
				sv_cntrl_activate_valve((sv_valvetype)temp);
   92224:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   92228:	4618      	mov	r0, r3
   9222a:	4b2e      	ldr	r3, [pc, #184]	; (922e4 <cl_testharnesscommandhandler+0xfbc>)
   9222c:	4798      	blx	r3
				cl_wait(10);
   9222e:	200a      	movs	r0, #10
   92230:	4b1e      	ldr	r3, [pc, #120]	; (922ac <cl_testharnesscommandhandler+0xf84>)
   92232:	4798      	blx	r3
		cl_wait(100);
		break;
		case TEST_SET_ALL_VALVES_OPEN:
		cl_wait(100);
		pdataarray = (Cl_Uint8Type *)"V_ALLOPEN";
		 for(temp = 1;temp<=20; temp++)
   92234:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   92238:	3301      	adds	r3, #1
   9223a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   9223e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   92242:	2b14      	cmp	r3, #20
   92244:	d9ee      	bls.n	92224 <cl_testharnesscommandhandler+0xefc>
				sv_cntrl_activate_valve((sv_valvetype)temp);
				cl_wait(10);
		 }
				//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
				
		cl_wait(100);
   92246:	2064      	movs	r0, #100	; 0x64
   92248:	4b18      	ldr	r3, [pc, #96]	; (922ac <cl_testharnesscommandhandler+0xf84>)
   9224a:	4798      	blx	r3
		break;
   9224c:	f001 bcd8 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_HP_PUMPON:
		cl_wait(100);
   92250:	2064      	movs	r0, #100	; 0x64
   92252:	4b16      	ldr	r3, [pc, #88]	; (922ac <cl_testharnesscommandhandler+0xf84>)
   92254:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_activatepump(HEPARINPUMP);
   92256:	2005      	movs	r0, #5
   92258:	4b27      	ldr	r3, [pc, #156]	; (922f8 <cl_testharnesscommandhandler+0xfd0>)
   9225a:	4798      	blx	r3
   9225c:	4603      	mov	r3, r0
   9225e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
		pdataarray = (Cl_Uint8Type *)"HP_ON";
   92262:	4b26      	ldr	r3, [pc, #152]	; (922fc <cl_testharnesscommandhandler+0xfd4>)
   92264:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   92268:	2064      	movs	r0, #100	; 0x64
   9226a:	4b10      	ldr	r3, [pc, #64]	; (922ac <cl_testharnesscommandhandler+0xf84>)
   9226c:	4798      	blx	r3
		break;
   9226e:	f001 bcc7 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_HP_PUMPOFF:
		cl_wait(100);
   92272:	2064      	movs	r0, #100	; 0x64
   92274:	4b0d      	ldr	r3, [pc, #52]	; (922ac <cl_testharnesscommandhandler+0xf84>)
   92276:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(HEPARINPUMP);
   92278:	2005      	movs	r0, #5
   9227a:	4b0d      	ldr	r3, [pc, #52]	; (922b0 <cl_testharnesscommandhandler+0xf88>)
   9227c:	4798      	blx	r3
   9227e:	4603      	mov	r3, r0
   92280:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
		pdataarray = (Cl_Uint8Type *)"HP_OFF";
   92284:	4b1e      	ldr	r3, [pc, #120]	; (92300 <cl_testharnesscommandhandler+0xfd8>)
   92286:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   9228a:	2064      	movs	r0, #100	; 0x64
   9228c:	4b07      	ldr	r3, [pc, #28]	; (922ac <cl_testharnesscommandhandler+0xf84>)
   9228e:	4798      	blx	r3
		break;
   92290:	f001 bcb6 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_HP_PUMPRATE:
		cl_wait(100);
   92294:	2064      	movs	r0, #100	; 0x64
   92296:	4b05      	ldr	r3, [pc, #20]	; (922ac <cl_testharnesscommandhandler+0xf84>)
   92298:	4798      	blx	r3
						if(TestMsg.datasize == 2)
   9229a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   9229e:	2b02      	cmp	r3, #2
   922a0:	d130      	bne.n	92304 <cl_testharnesscommandhandler+0xfdc>
						{
							//rateval = TestMsg.data[1];
							cl_indata.bytearray[0] = TestMsg.data.byte[1];
   922a2:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   922a6:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   922aa:	e037      	b.n	9231c <cl_testharnesscommandhandler+0xff4>
   922ac:	0009421d 	.word	0x0009421d
   922b0:	0009b369 	.word	0x0009b369
   922b4:	20072880 	.word	0x20072880
   922b8:	0009b461 	.word	0x0009b461
   922bc:	000aa2f4 	.word	0x000aa2f4
   922c0:	0009b549 	.word	0x0009b549
   922c4:	000aa2fc 	.word	0x000aa2fc
   922c8:	0009b439 	.word	0x0009b439
   922cc:	000aa304 	.word	0x000aa304
   922d0:	0009b44d 	.word	0x0009b44d
   922d4:	000aa30c 	.word	0x000aa30c
   922d8:	000aa314 	.word	0x000aa314
   922dc:	000aa320 	.word	0x000aa320
   922e0:	000aa32c 	.word	0x000aa32c
   922e4:	0009b3e9 	.word	0x0009b3e9
   922e8:	0009b409 	.word	0x0009b409
   922ec:	0009b899 	.word	0x0009b899
   922f0:	000aa334 	.word	0x000aa334
   922f4:	000aa33c 	.word	0x000aa33c
   922f8:	0009b32d 	.word	0x0009b32d
   922fc:	000aa348 	.word	0x000aa348
   92300:	000aa350 	.word	0x000aa350
						}
						else if(TestMsg.datasize == 3)
   92304:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   92308:	2b03      	cmp	r3, #3
   9230a:	d107      	bne.n	9231c <cl_testharnesscommandhandler+0xff4>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[1] = TestMsg.data.byte[1];
   9230c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   92310:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
							cl_indata.bytearray[0] = TestMsg.data.byte[2];
   92314:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   92318:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
							
						}
						

						sv_cntrl_setpumpspeed(HEPARINPUMP,cl_indata.word);
   9231c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   92320:	2005      	movs	r0, #5
   92322:	4619      	mov	r1, r3
   92324:	4b9e      	ldr	r3, [pc, #632]	; (925a0 <cl_testharnesscommandhandler+0x1278>)
   92326:	4798      	blx	r3
						pdataarray = (Cl_Uint8Type *)"HP_RATE";
   92328:	4b9e      	ldr	r3, [pc, #632]	; (925a4 <cl_testharnesscommandhandler+0x127c>)
   9232a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
			//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   9232e:	2064      	movs	r0, #100	; 0x64
   92330:	4b9d      	ldr	r3, [pc, #628]	; (925a8 <cl_testharnesscommandhandler+0x1280>)
   92332:	4798      	blx	r3
		break;
   92334:	f001 bc64 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_HP_PUMPDIR:
		if(TestMsg.data.byte[1])
   92338:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9233c:	2b00      	cmp	r3, #0
   9233e:	d003      	beq.n	92348 <cl_testharnesscommandhandler+0x1020>
		{
			sv_cntrl_setHepa_dir();
   92340:	4b9a      	ldr	r3, [pc, #616]	; (925ac <cl_testharnesscommandhandler+0x1284>)
   92342:	4798      	blx	r3
		}
		else
		{
			sv_cntrl_resetHepa_dir();
		}
		break;
   92344:	f001 bc5c 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		{
			sv_cntrl_setHepa_dir();
		}
		else
		{
			sv_cntrl_resetHepa_dir();
   92348:	4b99      	ldr	r3, [pc, #612]	; (925b0 <cl_testharnesscommandhandler+0x1288>)
   9234a:	4798      	blx	r3
		}
		break;
   9234c:	f001 bc58 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALL_PUMPS_OFF:
		cl_wait(50);
   92350:	2032      	movs	r0, #50	; 0x32
   92352:	4b95      	ldr	r3, [pc, #596]	; (925a8 <cl_testharnesscommandhandler+0x1280>)
   92354:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   92356:	2001      	movs	r0, #1
   92358:	4b96      	ldr	r3, [pc, #600]	; (925b4 <cl_testharnesscommandhandler+0x128c>)
   9235a:	4798      	blx	r3
   9235c:	4603      	mov	r3, r0
   9235e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		cl_wait(10);
   92362:	200a      	movs	r0, #10
   92364:	4b90      	ldr	r3, [pc, #576]	; (925a8 <cl_testharnesscommandhandler+0x1280>)
   92366:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR2);
   92368:	2002      	movs	r0, #2
   9236a:	4b92      	ldr	r3, [pc, #584]	; (925b4 <cl_testharnesscommandhandler+0x128c>)
   9236c:	4798      	blx	r3
   9236e:	4603      	mov	r3, r0
   92370:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		cl_wait(10);
   92374:	200a      	movs	r0, #10
   92376:	4b8c      	ldr	r3, [pc, #560]	; (925a8 <cl_testharnesscommandhandler+0x1280>)
   92378:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(BLOODPUMP);
   9237a:	2003      	movs	r0, #3
   9237c:	4b8d      	ldr	r3, [pc, #564]	; (925b4 <cl_testharnesscommandhandler+0x128c>)
   9237e:	4798      	blx	r3
   92380:	4603      	mov	r3, r0
   92382:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		cl_wait(10);
   92386:	200a      	movs	r0, #10
   92388:	4b87      	ldr	r3, [pc, #540]	; (925a8 <cl_testharnesscommandhandler+0x1280>)
   9238a:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(UFPUMP);
   9238c:	2004      	movs	r0, #4
   9238e:	4b89      	ldr	r3, [pc, #548]	; (925b4 <cl_testharnesscommandhandler+0x128c>)
   92390:	4798      	blx	r3
   92392:	4603      	mov	r3, r0
   92394:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		cl_wait(10);
   92398:	200a      	movs	r0, #10
   9239a:	4b83      	ldr	r3, [pc, #524]	; (925a8 <cl_testharnesscommandhandler+0x1280>)
   9239c:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(HEPARINPUMP);
   9239e:	2005      	movs	r0, #5
   923a0:	4b84      	ldr	r3, [pc, #528]	; (925b4 <cl_testharnesscommandhandler+0x128c>)
   923a2:	4798      	blx	r3
   923a4:	4603      	mov	r3, r0
   923a6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
				
		cl_wait(50);
   923aa:	2032      	movs	r0, #50	; 0x32
   923ac:	4b7e      	ldr	r3, [pc, #504]	; (925a8 <cl_testharnesscommandhandler+0x1280>)
   923ae:	4798      	blx	r3
		break;
   923b0:	f001 bc26 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_BC_V1:
		sv_cntrl_activate_valve(6);
   923b4:	2006      	movs	r0, #6
   923b6:	4b80      	ldr	r3, [pc, #512]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   923b8:	4798      	blx	r3
		sv_cntrl_activate_valve(7);
   923ba:	2007      	movs	r0, #7
   923bc:	4b7e      	ldr	r3, [pc, #504]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   923be:	4798      	blx	r3
		sv_cntrl_activate_valve(12);
   923c0:	200c      	movs	r0, #12
   923c2:	4b7d      	ldr	r3, [pc, #500]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   923c4:	4798      	blx	r3
		sv_cntrl_activate_valve(9);
   923c6:	2009      	movs	r0, #9
   923c8:	4b7b      	ldr	r3, [pc, #492]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   923ca:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(5);
   923cc:	2005      	movs	r0, #5
   923ce:	4b7b      	ldr	r3, [pc, #492]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   923d0:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   923d2:	2008      	movs	r0, #8
   923d4:	4b79      	ldr	r3, [pc, #484]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   923d6:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   923d8:	200a      	movs	r0, #10
   923da:	4b78      	ldr	r3, [pc, #480]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   923dc:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   923de:	200b      	movs	r0, #11
   923e0:	4b76      	ldr	r3, [pc, #472]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   923e2:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BC_V1 SET";
   923e4:	4b76      	ldr	r3, [pc, #472]	; (925c0 <cl_testharnesscommandhandler+0x1298>)
   923e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		break;
   923ea:	f001 bc09 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_BC_V2:
		sv_cntrl_activate_valve(5);
   923ee:	2005      	movs	r0, #5
   923f0:	4b71      	ldr	r3, [pc, #452]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   923f2:	4798      	blx	r3
		sv_cntrl_activate_valve(8);
   923f4:	2008      	movs	r0, #8
   923f6:	4b70      	ldr	r3, [pc, #448]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   923f8:	4798      	blx	r3
		sv_cntrl_activate_valve(10);
   923fa:	200a      	movs	r0, #10
   923fc:	4b6e      	ldr	r3, [pc, #440]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   923fe:	4798      	blx	r3
		sv_cntrl_activate_valve(11);
   92400:	200b      	movs	r0, #11
   92402:	4b6d      	ldr	r3, [pc, #436]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   92404:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   92406:	200c      	movs	r0, #12
   92408:	4b6c      	ldr	r3, [pc, #432]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   9240a:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   9240c:	2009      	movs	r0, #9
   9240e:	4b6b      	ldr	r3, [pc, #428]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   92410:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   92412:	2006      	movs	r0, #6
   92414:	4b69      	ldr	r3, [pc, #420]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   92416:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   92418:	2007      	movs	r0, #7
   9241a:	4b68      	ldr	r3, [pc, #416]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   9241c:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BC_V2 SET";
   9241e:	4b69      	ldr	r3, [pc, #420]	; (925c4 <cl_testharnesscommandhandler+0x129c>)
   92420:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		break;
   92424:	f001 bbec 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_BC_V1_1314:
		sv_cntrl_activate_valve(6);
   92428:	2006      	movs	r0, #6
   9242a:	4b63      	ldr	r3, [pc, #396]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   9242c:	4798      	blx	r3
		sv_cntrl_activate_valve(7);
   9242e:	2007      	movs	r0, #7
   92430:	4b61      	ldr	r3, [pc, #388]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   92432:	4798      	blx	r3
		sv_cntrl_activate_valve(12);
   92434:	200c      	movs	r0, #12
   92436:	4b60      	ldr	r3, [pc, #384]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   92438:	4798      	blx	r3
		sv_cntrl_activate_valve(9);
   9243a:	2009      	movs	r0, #9
   9243c:	4b5e      	ldr	r3, [pc, #376]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   9243e:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(5);
   92440:	2005      	movs	r0, #5
   92442:	4b5e      	ldr	r3, [pc, #376]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   92444:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   92446:	2008      	movs	r0, #8
   92448:	4b5c      	ldr	r3, [pc, #368]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   9244a:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   9244c:	200a      	movs	r0, #10
   9244e:	4b5b      	ldr	r3, [pc, #364]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   92450:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   92452:	200b      	movs	r0, #11
   92454:	4b59      	ldr	r3, [pc, #356]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   92456:	4798      	blx	r3
		sv_cntrl_activate_valve(13);
   92458:	200d      	movs	r0, #13
   9245a:	4b57      	ldr	r3, [pc, #348]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   9245c:	4798      	blx	r3
		sv_cntrl_activate_valve(14);
   9245e:	200e      	movs	r0, #14
   92460:	4b55      	ldr	r3, [pc, #340]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   92462:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BC_V1_1314 SET";
   92464:	4b58      	ldr	r3, [pc, #352]	; (925c8 <cl_testharnesscommandhandler+0x12a0>)
   92466:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,14);
		break;
   9246a:	f001 bbc9 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_BC_V2_1314:
		sv_cntrl_activate_valve(5);
   9246e:	2005      	movs	r0, #5
   92470:	4b51      	ldr	r3, [pc, #324]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   92472:	4798      	blx	r3
		sv_cntrl_activate_valve(8);
   92474:	2008      	movs	r0, #8
   92476:	4b50      	ldr	r3, [pc, #320]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   92478:	4798      	blx	r3
		sv_cntrl_activate_valve(10);
   9247a:	200a      	movs	r0, #10
   9247c:	4b4e      	ldr	r3, [pc, #312]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   9247e:	4798      	blx	r3
		sv_cntrl_activate_valve(11);
   92480:	200b      	movs	r0, #11
   92482:	4b4d      	ldr	r3, [pc, #308]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   92484:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   92486:	200c      	movs	r0, #12
   92488:	4b4c      	ldr	r3, [pc, #304]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   9248a:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   9248c:	2009      	movs	r0, #9
   9248e:	4b4b      	ldr	r3, [pc, #300]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   92490:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   92492:	2006      	movs	r0, #6
   92494:	4b49      	ldr	r3, [pc, #292]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   92496:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   92498:	2007      	movs	r0, #7
   9249a:	4b48      	ldr	r3, [pc, #288]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   9249c:	4798      	blx	r3
		sv_cntrl_activate_valve(13);
   9249e:	200d      	movs	r0, #13
   924a0:	4b45      	ldr	r3, [pc, #276]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   924a2:	4798      	blx	r3
		sv_cntrl_activate_valve(14);
   924a4:	200e      	movs	r0, #14
   924a6:	4b44      	ldr	r3, [pc, #272]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   924a8:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BC_V2_1314 SET";
   924aa:	4b48      	ldr	r3, [pc, #288]	; (925cc <cl_testharnesscommandhandler+0x12a4>)
   924ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,14);
		break;
   924b0:	f001 bba6 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_BC_V1_4:
		sv_cntrl_activate_valve(6);
   924b4:	2006      	movs	r0, #6
   924b6:	4b40      	ldr	r3, [pc, #256]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   924b8:	4798      	blx	r3
		sv_cntrl_activate_valve(7);
   924ba:	2007      	movs	r0, #7
   924bc:	4b3e      	ldr	r3, [pc, #248]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   924be:	4798      	blx	r3
		sv_cntrl_activate_valve(12);
   924c0:	200c      	movs	r0, #12
   924c2:	4b3d      	ldr	r3, [pc, #244]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   924c4:	4798      	blx	r3
		sv_cntrl_activate_valve(9);
   924c6:	2009      	movs	r0, #9
   924c8:	4b3b      	ldr	r3, [pc, #236]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   924ca:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(5);
   924cc:	2005      	movs	r0, #5
   924ce:	4b3b      	ldr	r3, [pc, #236]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   924d0:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   924d2:	2008      	movs	r0, #8
   924d4:	4b39      	ldr	r3, [pc, #228]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   924d6:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   924d8:	200a      	movs	r0, #10
   924da:	4b38      	ldr	r3, [pc, #224]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   924dc:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   924de:	200b      	movs	r0, #11
   924e0:	4b36      	ldr	r3, [pc, #216]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   924e2:	4798      	blx	r3
		sv_cntrl_activate_valve(4);
   924e4:	2004      	movs	r0, #4
   924e6:	4b34      	ldr	r3, [pc, #208]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   924e8:	4798      	blx	r3
		sv_cntrl_deactivate_valve(13);
   924ea:	200d      	movs	r0, #13
   924ec:	4b33      	ldr	r3, [pc, #204]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   924ee:	4798      	blx	r3
		sv_cntrl_deactivate_valve(14);
   924f0:	200e      	movs	r0, #14
   924f2:	4b32      	ldr	r3, [pc, #200]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   924f4:	4798      	blx	r3
		
		pdataarray = (Cl_Uint8Type *)"BC_V1_4 SET";
   924f6:	4b36      	ldr	r3, [pc, #216]	; (925d0 <cl_testharnesscommandhandler+0x12a8>)
   924f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
		break;
   924fc:	f001 bb80 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_BC_V2_4:
		sv_cntrl_activate_valve(5);
   92500:	2005      	movs	r0, #5
   92502:	4b2d      	ldr	r3, [pc, #180]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   92504:	4798      	blx	r3
		sv_cntrl_activate_valve(8);
   92506:	2008      	movs	r0, #8
   92508:	4b2b      	ldr	r3, [pc, #172]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   9250a:	4798      	blx	r3
		sv_cntrl_activate_valve(10);
   9250c:	200a      	movs	r0, #10
   9250e:	4b2a      	ldr	r3, [pc, #168]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   92510:	4798      	blx	r3
		sv_cntrl_activate_valve(11);
   92512:	200b      	movs	r0, #11
   92514:	4b28      	ldr	r3, [pc, #160]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   92516:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   92518:	200c      	movs	r0, #12
   9251a:	4b28      	ldr	r3, [pc, #160]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   9251c:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   9251e:	2009      	movs	r0, #9
   92520:	4b26      	ldr	r3, [pc, #152]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   92522:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   92524:	2006      	movs	r0, #6
   92526:	4b25      	ldr	r3, [pc, #148]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   92528:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   9252a:	2007      	movs	r0, #7
   9252c:	4b23      	ldr	r3, [pc, #140]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   9252e:	4798      	blx	r3
		sv_cntrl_activate_valve(4);
   92530:	2004      	movs	r0, #4
   92532:	4b21      	ldr	r3, [pc, #132]	; (925b8 <cl_testharnesscommandhandler+0x1290>)
   92534:	4798      	blx	r3
		sv_cntrl_deactivate_valve(13);
   92536:	200d      	movs	r0, #13
   92538:	4b20      	ldr	r3, [pc, #128]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   9253a:	4798      	blx	r3
		sv_cntrl_deactivate_valve(14);
   9253c:	200e      	movs	r0, #14
   9253e:	4b1f      	ldr	r3, [pc, #124]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   92540:	4798      	blx	r3
		
		pdataarray = (Cl_Uint8Type *)"BC_V2_4 SET";
   92542:	4b24      	ldr	r3, [pc, #144]	; (925d4 <cl_testharnesscommandhandler+0x12ac>)
   92544:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
		break;
   92548:	f001 bb5a 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_RESET_BC:
		sv_cntrl_deactivate_valve(5);
   9254c:	2005      	movs	r0, #5
   9254e:	4b1b      	ldr	r3, [pc, #108]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   92550:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   92552:	2008      	movs	r0, #8
   92554:	4b19      	ldr	r3, [pc, #100]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   92556:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   92558:	200a      	movs	r0, #10
   9255a:	4b18      	ldr	r3, [pc, #96]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   9255c:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   9255e:	200b      	movs	r0, #11
   92560:	4b16      	ldr	r3, [pc, #88]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   92562:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   92564:	200c      	movs	r0, #12
   92566:	4b15      	ldr	r3, [pc, #84]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   92568:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   9256a:	2009      	movs	r0, #9
   9256c:	4b13      	ldr	r3, [pc, #76]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   9256e:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   92570:	2006      	movs	r0, #6
   92572:	4b12      	ldr	r3, [pc, #72]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   92574:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   92576:	2007      	movs	r0, #7
   92578:	4b10      	ldr	r3, [pc, #64]	; (925bc <cl_testharnesscommandhandler+0x1294>)
   9257a:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   9257c:	2001      	movs	r0, #1
   9257e:	4b0d      	ldr	r3, [pc, #52]	; (925b4 <cl_testharnesscommandhandler+0x128c>)
   92580:	4798      	blx	r3
   92582:	4603      	mov	r3, r0
   92584:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115

		cl_thretval=  sv_cntrl_deactivatepump(DCMOTOR2);
   92588:	2002      	movs	r0, #2
   9258a:	4b0a      	ldr	r3, [pc, #40]	; (925b4 <cl_testharnesscommandhandler+0x128c>)
   9258c:	4798      	blx	r3
   9258e:	4603      	mov	r3, r0
   92590:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
		pdataarray = (Cl_Uint8Type *)"BC_RESET";
   92594:	4b10      	ldr	r3, [pc, #64]	; (925d8 <cl_testharnesscommandhandler+0x12b0>)
   92596:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
		break;
   9259a:	f001 bb31 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
   9259e:	bf00      	nop
   925a0:	0009b461 	.word	0x0009b461
   925a4:	000aa358 	.word	0x000aa358
   925a8:	0009421d 	.word	0x0009421d
   925ac:	0009b439 	.word	0x0009b439
   925b0:	0009b44d 	.word	0x0009b44d
   925b4:	0009b369 	.word	0x0009b369
   925b8:	0009b3e9 	.word	0x0009b3e9
   925bc:	0009b409 	.word	0x0009b409
   925c0:	000aa360 	.word	0x000aa360
   925c4:	000aa36c 	.word	0x000aa36c
   925c8:	000aa378 	.word	0x000aa378
   925cc:	000aa388 	.word	0x000aa388
   925d0:	000aa398 	.word	0x000aa398
   925d4:	000aa3a4 	.word	0x000aa3a4
   925d8:	000aa3b0 	.word	0x000aa3b0
		case TEST_SET_BC_FREEZE:
		g_testbcfreeze = true;
   925dc:	4bb2      	ldr	r3, [pc, #712]	; (928a8 <cl_testharnesscommandhandler+0x1580>)
   925de:	2201      	movs	r2, #1
   925e0:	701a      	strb	r2, [r3, #0]
				sv_cntrl_deactivate_valve(5);
   925e2:	2005      	movs	r0, #5
   925e4:	4bb1      	ldr	r3, [pc, #708]	; (928ac <cl_testharnesscommandhandler+0x1584>)
   925e6:	4798      	blx	r3
				sv_cntrl_deactivate_valve(8);
   925e8:	2008      	movs	r0, #8
   925ea:	4bb0      	ldr	r3, [pc, #704]	; (928ac <cl_testharnesscommandhandler+0x1584>)
   925ec:	4798      	blx	r3
				sv_cntrl_deactivate_valve(10);
   925ee:	200a      	movs	r0, #10
   925f0:	4bae      	ldr	r3, [pc, #696]	; (928ac <cl_testharnesscommandhandler+0x1584>)
   925f2:	4798      	blx	r3
				sv_cntrl_deactivate_valve(11);
   925f4:	200b      	movs	r0, #11
   925f6:	4bad      	ldr	r3, [pc, #692]	; (928ac <cl_testharnesscommandhandler+0x1584>)
   925f8:	4798      	blx	r3
				
				sv_cntrl_deactivate_valve(12);
   925fa:	200c      	movs	r0, #12
   925fc:	4bab      	ldr	r3, [pc, #684]	; (928ac <cl_testharnesscommandhandler+0x1584>)
   925fe:	4798      	blx	r3
				sv_cntrl_deactivate_valve(9);
   92600:	2009      	movs	r0, #9
   92602:	4baa      	ldr	r3, [pc, #680]	; (928ac <cl_testharnesscommandhandler+0x1584>)
   92604:	4798      	blx	r3
				sv_cntrl_deactivate_valve(6);
   92606:	2006      	movs	r0, #6
   92608:	4ba8      	ldr	r3, [pc, #672]	; (928ac <cl_testharnesscommandhandler+0x1584>)
   9260a:	4798      	blx	r3
				sv_cntrl_deactivate_valve(7);
   9260c:	2007      	movs	r0, #7
   9260e:	4ba7      	ldr	r3, [pc, #668]	; (928ac <cl_testharnesscommandhandler+0x1584>)
   92610:	4798      	blx	r3

				cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   92612:	2001      	movs	r0, #1
   92614:	4ba6      	ldr	r3, [pc, #664]	; (928b0 <cl_testharnesscommandhandler+0x1588>)
   92616:	4798      	blx	r3
   92618:	4603      	mov	r3, r0
   9261a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115

				cl_thretval=  sv_cntrl_deactivatepump(DCMOTOR2);
   9261e:	2002      	movs	r0, #2
   92620:	4ba3      	ldr	r3, [pc, #652]	; (928b0 <cl_testharnesscommandhandler+0x1588>)
   92622:	4798      	blx	r3
   92624:	4603      	mov	r3, r0
   92626:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				pdataarray = (Cl_Uint8Type *)"BC_FREEZE";
   9262a:	4ba2      	ldr	r3, [pc, #648]	; (928b4 <cl_testharnesscommandhandler+0x158c>)
   9262c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		break;
   92630:	f001 bae6 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_BC_UNFREEZE:
		
		g_testbcfreeze = false;
   92634:	4b9c      	ldr	r3, [pc, #624]	; (928a8 <cl_testharnesscommandhandler+0x1580>)
   92636:	2200      	movs	r2, #0
   92638:	701a      	strb	r2, [r3, #0]
				pdataarray = (Cl_Uint8Type *)"BC_UNFREEZE";
   9263a:	4b9f      	ldr	r3, [pc, #636]	; (928b8 <cl_testharnesscommandhandler+0x1590>)
   9263c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

				cl_thretval =  sv_cntrl_activatepump(DCMOTOR1);
   92640:	2001      	movs	r0, #1
   92642:	4b9e      	ldr	r3, [pc, #632]	; (928bc <cl_testharnesscommandhandler+0x1594>)
   92644:	4798      	blx	r3
   92646:	4603      	mov	r3, r0
   92648:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				
				cl_thretval=  sv_cntrl_activatepump(DCMOTOR2);
   9264c:	2002      	movs	r0, #2
   9264e:	4b9b      	ldr	r3, [pc, #620]	; (928bc <cl_testharnesscommandhandler+0x1594>)
   92650:	4798      	blx	r3
   92652:	4603      	mov	r3, r0
   92654:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
										
	//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
		g_testbcfreeze = false;
   92658:	4b93      	ldr	r3, [pc, #588]	; (928a8 <cl_testharnesscommandhandler+0x1580>)
   9265a:	2200      	movs	r2, #0
   9265c:	701a      	strb	r2, [r3, #0]
		break;
   9265e:	f001 bacf 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		
					case TEST_SET_OPENFILL:
					
					
					pdataarray = (Cl_Uint8Type *)"OPENFILL";
   92662:	4b97      	ldr	r3, [pc, #604]	; (928c0 <cl_testharnesscommandhandler+0x1598>)
   92664:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

				sv_cntrl_activate_valve(5);
   92668:	2005      	movs	r0, #5
   9266a:	4b96      	ldr	r3, [pc, #600]	; (928c4 <cl_testharnesscommandhandler+0x159c>)
   9266c:	4798      	blx	r3
				sv_cntrl_activate_valve(8);
   9266e:	2008      	movs	r0, #8
   92670:	4b94      	ldr	r3, [pc, #592]	; (928c4 <cl_testharnesscommandhandler+0x159c>)
   92672:	4798      	blx	r3
				sv_cntrl_activate_valve(10);
   92674:	200a      	movs	r0, #10
   92676:	4b93      	ldr	r3, [pc, #588]	; (928c4 <cl_testharnesscommandhandler+0x159c>)
   92678:	4798      	blx	r3
				sv_cntrl_activate_valve(11);
   9267a:	200b      	movs	r0, #11
   9267c:	4b91      	ldr	r3, [pc, #580]	; (928c4 <cl_testharnesscommandhandler+0x159c>)
   9267e:	4798      	blx	r3
				
				sv_cntrl_activate_valve(12);
   92680:	200c      	movs	r0, #12
   92682:	4b90      	ldr	r3, [pc, #576]	; (928c4 <cl_testharnesscommandhandler+0x159c>)
   92684:	4798      	blx	r3
				sv_cntrl_activate_valve(9);
   92686:	2009      	movs	r0, #9
   92688:	4b8e      	ldr	r3, [pc, #568]	; (928c4 <cl_testharnesscommandhandler+0x159c>)
   9268a:	4798      	blx	r3
				sv_cntrl_activate_valve(6);
   9268c:	2006      	movs	r0, #6
   9268e:	4b8d      	ldr	r3, [pc, #564]	; (928c4 <cl_testharnesscommandhandler+0x159c>)
   92690:	4798      	blx	r3
				sv_cntrl_activate_valve(7);
   92692:	2007      	movs	r0, #7
   92694:	4b8b      	ldr	r3, [pc, #556]	; (928c4 <cl_testharnesscommandhandler+0x159c>)
   92696:	4798      	blx	r3
				cl_thretval =  sv_cntrl_activatepump(DCMOTOR1);
   92698:	2001      	movs	r0, #1
   9269a:	4b88      	ldr	r3, [pc, #544]	; (928bc <cl_testharnesscommandhandler+0x1594>)
   9269c:	4798      	blx	r3
   9269e:	4603      	mov	r3, r0
   926a0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				cl_thretval=  sv_cntrl_activatepump(DCMOTOR2);
   926a4:	2002      	movs	r0, #2
   926a6:	4b85      	ldr	r3, [pc, #532]	; (928bc <cl_testharnesscommandhandler+0x1594>)
   926a8:	4798      	blx	r3
   926aa:	4603      	mov	r3, r0
   926ac:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
					
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
					g_testbcfreeze = false;
   926b0:	4b7d      	ldr	r3, [pc, #500]	; (928a8 <cl_testharnesscommandhandler+0x1580>)
   926b2:	2200      	movs	r2, #0
   926b4:	701a      	strb	r2, [r3, #0]
					break;
   926b6:	f001 baa3 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
				
			case TEST_SKIPOPENFILL:
			
			
			pdataarray = (Cl_Uint8Type *)"JTR";
   926ba:	4b83      	ldr	r3, [pc, #524]	; (928c8 <cl_testharnesscommandhandler+0x15a0>)
   926bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			Cl_RinseMinutescounter = CL_RINSE_OPENFILL_TIMEOUT;
   926c0:	4b82      	ldr	r3, [pc, #520]	; (928cc <cl_testharnesscommandhandler+0x15a4>)
   926c2:	2205      	movs	r2, #5
   926c4:	601a      	str	r2, [r3, #0]
			
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,3);
			g_testbcfreeze = false;
   926c6:	4b78      	ldr	r3, [pc, #480]	; (928a8 <cl_testharnesscommandhandler+0x1580>)
   926c8:	2200      	movs	r2, #0
   926ca:	701a      	strb	r2, [r3, #0]
			break;
   926cc:	f001 ba98 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
			case TEST_HEATER_FAST:
			sv_cntrl_incheater(0x900);
   926d0:	f44f 6010 	mov.w	r0, #2304	; 0x900
   926d4:	4b7e      	ldr	r3, [pc, #504]	; (928d0 <cl_testharnesscommandhandler+0x15a8>)
   926d6:	4798      	blx	r3
			
			break;
   926d8:	f001 ba92 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
			
			case TEST_HEATER_SLOW:
			sv_cntrl_incheater(0x600);
   926dc:	f44f 60c0 	mov.w	r0, #1536	; 0x600
   926e0:	4b7b      	ldr	r3, [pc, #492]	; (928d0 <cl_testharnesscommandhandler+0x15a8>)
   926e2:	4798      	blx	r3
			break;
   926e4:	f001 ba8c 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
			case TEST_SET_HEATER_RATE:
			
				cl_wait(100);
   926e8:	2064      	movs	r0, #100	; 0x64
   926ea:	4b7a      	ldr	r3, [pc, #488]	; (928d4 <cl_testharnesscommandhandler+0x15ac>)
   926ec:	4798      	blx	r3
				if(TestMsg.datasize == 2)
   926ee:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   926f2:	2b02      	cmp	r3, #2
   926f4:	d104      	bne.n	92700 <cl_testharnesscommandhandler+0x13d8>
				{
					//rateval = TestMsg.data[1];
					cl_indata.bytearray[0] = TestMsg.data.byte[1];
   926f6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   926fa:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   926fe:	e00b      	b.n	92718 <cl_testharnesscommandhandler+0x13f0>
				}
				else if(TestMsg.datasize == 3)
   92700:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   92704:	2b03      	cmp	r3, #3
   92706:	d107      	bne.n	92718 <cl_testharnesscommandhandler+0x13f0>
				{
					//rateval = (uint16_t)TestMsg.data[1];
					cl_indata.bytearray[1] = TestMsg.data.byte[1];
   92708:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9270c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
					cl_indata.bytearray[0] = TestMsg.data.byte[2];
   92710:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   92714:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
					
				}
				heater_duty = cl_indata.word;
   92718:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   9271c:	4a6e      	ldr	r2, [pc, #440]	; (928d8 <cl_testharnesscommandhandler+0x15b0>)
   9271e:	6013      	str	r3, [r2, #0]
			
				//sv_cntrl_incheater(4096 * heater_duty/100);
				sv_cntrl_incheater( heater_duty);
   92720:	4b6d      	ldr	r3, [pc, #436]	; (928d8 <cl_testharnesscommandhandler+0x15b0>)
   92722:	681b      	ldr	r3, [r3, #0]
   92724:	4618      	mov	r0, r3
   92726:	4b6a      	ldr	r3, [pc, #424]	; (928d0 <cl_testharnesscommandhandler+0x15a8>)
   92728:	4798      	blx	r3
			break;
   9272a:	f001 ba69 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
			case TEST_VCLAMP_ON:
		//	sv_cntrl_activatevenousclamp();
			
			pdataarray = (Cl_Uint8Type *)"VC_ON";
   9272e:	4b6b      	ldr	r3, [pc, #428]	; (928dc <cl_testharnesscommandhandler+0x15b4>)
   92730:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	
						sv_cntrl_activate_valve( VALVE_ID4);
   92734:	2004      	movs	r0, #4
   92736:	4b63      	ldr	r3, [pc, #396]	; (928c4 <cl_testharnesscommandhandler+0x159c>)
   92738:	4798      	blx	r3
						//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
						//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
						cl_wait(50);
   9273a:	2032      	movs	r0, #50	; 0x32
   9273c:	4b65      	ldr	r3, [pc, #404]	; (928d4 <cl_testharnesscommandhandler+0x15ac>)
   9273e:	4798      	blx	r3
						sv_cntrl_deactivate_valve(VALVE_ID4);
   92740:	2004      	movs	r0, #4
   92742:	4b5a      	ldr	r3, [pc, #360]	; (928ac <cl_testharnesscommandhandler+0x1584>)
   92744:	4798      	blx	r3
						cl_wait(50);
   92746:	2032      	movs	r0, #50	; 0x32
   92748:	4b62      	ldr	r3, [pc, #392]	; (928d4 <cl_testharnesscommandhandler+0x15ac>)
   9274a:	4798      	blx	r3
			break;
   9274c:	f001 ba58 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
			case TEST_VCLAMP_OFF:
			sv_cntrl_deactivatevenousclamp();
   92750:	4b63      	ldr	r3, [pc, #396]	; (928e0 <cl_testharnesscommandhandler+0x15b8>)
   92752:	4798      	blx	r3
			pdataarray = (Cl_Uint8Type *)"VC_OFF";
   92754:	4b63      	ldr	r3, [pc, #396]	; (928e4 <cl_testharnesscommandhandler+0x15bc>)
   92756:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
			break;
   9275a:	f001 ba51 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
						
			case TEST_RAPIDFIRE:
			for ( count1 = 0 ; count1 < 16 ; count1++)
   9275e:	2300      	movs	r3, #0
   92760:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   92764:	e008      	b.n	92778 <cl_testharnesscommandhandler+0x1450>
			{
							cl_indata.word = count1;
   92766:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   9276a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			pdataarray = (Cl_Uint8Type *)"VC_OFF";
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
			break;
						
			case TEST_RAPIDFIRE:
			for ( count1 = 0 ; count1 < 16 ; count1++)
   9276e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   92772:	3301      	adds	r3, #1
   92774:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   92778:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   9277c:	2b0f      	cmp	r3, #15
   9277e:	d9f2      	bls.n	92766 <cl_testharnesscommandhandler+0x143e>
			{
							cl_indata.word = count1;
		//					cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.word,4);
				
			}
			break;
   92780:	f001 ba3e 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
			case TEST_SCAN_PRESSURE:
				start_pressurecapture = true;
   92784:	4b58      	ldr	r3, [pc, #352]	; (928e8 <cl_testharnesscommandhandler+0x15c0>)
   92786:	2201      	movs	r2, #1
   92788:	701a      	strb	r2, [r3, #0]
			break;
   9278a:	f001 ba39 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
			case TEST_BC_TRIGGER:
				 if(TestMsg.data.byte[1] == 1)
   9278e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   92792:	2b01      	cmp	r3, #1
   92794:	d107      	bne.n	927a6 <cl_testharnesscommandhandler+0x147e>
				{
					Current_sense_trigger = true;
   92796:	4b55      	ldr	r3, [pc, #340]	; (928ec <cl_testharnesscommandhandler+0x15c4>)
   92798:	2201      	movs	r2, #1
   9279a:	701a      	strb	r2, [r3, #0]
					pdataarray = (Cl_Uint8Type*) "CS_TRIGGER";
   9279c:	4b54      	ldr	r3, [pc, #336]	; (928f0 <cl_testharnesscommandhandler+0x15c8>)
   9279e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					 //Cl_AlarmActivateAlarms( PS3_HIGH_THRESHOLD,true );
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
					
				break;
   927a2:	f001 ba2d 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
					//Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
	//				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
				}
				else
				{
					Current_sense_trigger = false;
   927a6:	4b51      	ldr	r3, [pc, #324]	; (928ec <cl_testharnesscommandhandler+0x15c4>)
   927a8:	2200      	movs	r2, #0
   927aa:	701a      	strb	r2, [r3, #0]
					pdataarray = (Cl_Uint8Type*) "PS_TRIGGER";
   927ac:	4b51      	ldr	r3, [pc, #324]	; (928f4 <cl_testharnesscommandhandler+0x15cc>)
   927ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					 //Cl_AlarmActivateAlarms( PS3_HIGH_THRESHOLD,true );
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
					
				break;
   927b2:	f001 ba25 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
				
			case TEST_SYS_VERSION:
					
			pdataarray = (Cl_Uint8Type *)"Ver:T.4";
   927b6:	4b50      	ldr	r3, [pc, #320]	; (928f8 <cl_testharnesscommandhandler+0x15d0>)
   927b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
   927bc:	2018      	movs	r0, #24
   927be:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   927c2:	2207      	movs	r2, #7
   927c4:	4b4d      	ldr	r3, [pc, #308]	; (928fc <cl_testharnesscommandhandler+0x15d4>)
   927c6:	4798      	blx	r3
   927c8:	4603      	mov	r3, r0
   927ca:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			//cl_testgetversion(&version);
			//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_SYS_VERSION,&version,1);
			//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_SYS_VERSION,"K",1);
			break;
   927ce:	f001 ba17 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>

								//		cl_sys_statbuffer.levelswitch1 = true;
		
	
							#endif
							sv_cntrl_activate_valve(VALVE_ID4);
   927d2:	2004      	movs	r0, #4
   927d4:	4b3b      	ldr	r3, [pc, #236]	; (928c4 <cl_testharnesscommandhandler+0x159c>)
   927d6:	4798      	blx	r3
							cl_wait(50);
   927d8:	2032      	movs	r0, #50	; 0x32
   927da:	4b3e      	ldr	r3, [pc, #248]	; (928d4 <cl_testharnesscommandhandler+0x15ac>)
   927dc:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID4);
   927de:	2004      	movs	r0, #4
   927e0:	4b32      	ldr	r3, [pc, #200]	; (928ac <cl_testharnesscommandhandler+0x1584>)
   927e2:	4798      	blx	r3
						break;
   927e4:	f001 ba0c 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
			case TEST_SHORT_RINSE:
			sv_prop_startacidpump();
   927e8:	4b45      	ldr	r3, [pc, #276]	; (92900 <cl_testharnesscommandhandler+0x15d8>)
   927ea:	4798      	blx	r3
							cl_tdata.bytearray[2] = 23;
							Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&test_hstate,1);
						}
							
			#endif
			break;
   927ec:	f001 ba08 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
			 case TEST_SET_FLOW_SENSE_ENABLE:
			 
			 	 if(TestMsg.data.byte[1] == 1)
   927f0:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   927f4:	2b01      	cmp	r3, #1
   927f6:	d107      	bne.n	92808 <cl_testharnesscommandhandler+0x14e0>
				{
						gflow_en = true;
   927f8:	4b42      	ldr	r3, [pc, #264]	; (92904 <cl_testharnesscommandhandler+0x15dc>)
   927fa:	2201      	movs	r2, #1
   927fc:	701a      	strb	r2, [r3, #0]
					pdataarray = (Cl_Uint8Type*) "FLOW_EN";
   927fe:	4b42      	ldr	r3, [pc, #264]	; (92908 <cl_testharnesscommandhandler+0x15e0>)
   92800:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					pdataarray = (Cl_Uint8Type*) "FLOW_DIS";

		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
				break;
   92804:	f001 b9fc 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
				}
				else
				{
				
					gflow_en = false;
   92808:	4b3e      	ldr	r3, [pc, #248]	; (92904 <cl_testharnesscommandhandler+0x15dc>)
   9280a:	2200      	movs	r2, #0
   9280c:	701a      	strb	r2, [r3, #0]
					pdataarray = (Cl_Uint8Type*) "FLOW_DIS";
   9280e:	4b3f      	ldr	r3, [pc, #252]	; (9290c <cl_testharnesscommandhandler+0x15e4>)
   92810:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
				break;
   92814:	f001 b9f4 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_START_PROPO:
		sv_prop_startmixing();
   92818:	4b3d      	ldr	r3, [pc, #244]	; (92910 <cl_testharnesscommandhandler+0x15e8>)
   9281a:	4798      	blx	r3
		//sv_prop_startacidpump();
		//sv_prop_startbicarbpump();
		
				break;
   9281c:	f001 b9f0 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		
		case TEST_SET_PROPO_RC:
		 sv_prop_set_propo_ACIDrc( TestMsg.data.byte[1]);
   92820:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   92824:	b29b      	uxth	r3, r3
   92826:	4618      	mov	r0, r3
   92828:	4b3a      	ldr	r3, [pc, #232]	; (92914 <cl_testharnesscommandhandler+0x15ec>)
   9282a:	4798      	blx	r3
		break;
   9282c:	f001 b9e8 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_START_PROPO_ALIGN:
		
		 mix_count = 0;
   92830:	4b39      	ldr	r3, [pc, #228]	; (92918 <cl_testharnesscommandhandler+0x15f0>)
   92832:	2200      	movs	r2, #0
   92834:	801a      	strh	r2, [r3, #0]
		//	pdataarray = (Cl_Uint8Type *)"BP_ON";
		//	int16_t temp_10;
		//	int16_t potvalue1;
		//	for ( temp_10 = 0 ; temp_10 < 10; temp_10++)
			{
				Cl_Uint16Type read_data = 0;
   92836:	2300      	movs	r3, #0
   92838:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
				
				//  sv_prop_startmixing();
				
			//	sv_cs_setpotvalue(600);
			//for ( temp_10 = 0 ; temp_10 < 1000; temp_10++)
				sv_prop_startpropeo_aligning();
   9283c:	4b37      	ldr	r3, [pc, #220]	; (9291c <cl_testharnesscommandhandler+0x15f4>)
   9283e:	4798      	blx	r3
		
	//	cl_wait(2);
		//	DD_IIC_SEND_PROP( 0x61, 3);
		
			
		break;
   92840:	f001 b9de 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_STOP_PROPO:
			cl_wait(100);
   92844:	2064      	movs	r0, #100	; 0x64
   92846:	4b23      	ldr	r3, [pc, #140]	; (928d4 <cl_testharnesscommandhandler+0x15ac>)
   92848:	4798      	blx	r3
		//	int16_t temp_10;
		//	int16_t potvalue1;
			//for ( temp_10 = 0 ; temp_10 < 10000; temp_10++)
			{
				
				  sv_prop_stopmixing();
   9284a:	4b35      	ldr	r3, [pc, #212]	; (92920 <cl_testharnesscommandhandler+0x15f8>)
   9284c:	4798      	blx	r3
				//	cl_thretval =  	sv_cs_setpotvalue(potvalue1);
				//	if(!(temp_10 % 50 ))
				//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_10,2);
				//	cl_wait(1);
			}
		break;
   9284e:	f001 b9d7 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_BYON:
		sv_cntrl_enable_bypass();
   92852:	4b34      	ldr	r3, [pc, #208]	; (92924 <cl_testharnesscommandhandler+0x15fc>)
   92854:	4798      	blx	r3
		break;
   92856:	f001 b9d3 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_BYOFF:
		sv_cntrl_disable_bypass();
   9285a:	4b33      	ldr	r3, [pc, #204]	; (92928 <cl_testharnesscommandhandler+0x1600>)
   9285c:	4798      	blx	r3
		break;
   9285e:	f001 b9cf 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_LON:
		sv_cntrl_enable_loopback();
   92862:	4b32      	ldr	r3, [pc, #200]	; (9292c <cl_testharnesscommandhandler+0x1604>)
   92864:	4798      	blx	r3
		 sv_prop_stopmixing();
   92866:	4b2e      	ldr	r3, [pc, #184]	; (92920 <cl_testharnesscommandhandler+0x15f8>)
   92868:	4798      	blx	r3
		// DD_SET_VALVE (VALVE_ID2);
		// DD_SET_VALVE (VALVE_ID3);
		// sv_prop_startmixing();
		break;
   9286a:	f001 b9c9 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_LOFF:
		sv_cntrl_disable_loopback();
   9286e:	4b30      	ldr	r3, [pc, #192]	; (92930 <cl_testharnesscommandhandler+0x1608>)
   92870:	4798      	blx	r3
		 sv_prop_stopmixing();
   92872:	4b2b      	ldr	r3, [pc, #172]	; (92920 <cl_testharnesscommandhandler+0x15f8>)
   92874:	4798      	blx	r3
		break;
   92876:	f001 b9c3 	b.w	93c00 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_LIMIT:
		
						if(TestMsg.datasize == 2)
   9287a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   9287e:	2b02      	cmp	r3, #2
   92880:	d104      	bne.n	9288c <cl_testharnesscommandhandler+0x1564>
						{
							//rateval = TestMsg.data[1];
							cl_indata.bytearray[0] = TestMsg.data.byte[1];
   92882:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   92886:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   9288a:	e078      	b.n	9297e <cl_testharnesscommandhandler+0x1656>
						}
						else if(TestMsg.datasize == 3)
   9288c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   92890:	2b03      	cmp	r3, #3
   92892:	d14f      	bne.n	92934 <cl_testharnesscommandhandler+0x160c>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[1] = TestMsg.data.byte[1];
   92894:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   92898:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
							cl_indata.bytearray[0] = TestMsg.data.byte[2];
   9289c:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   928a0:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   928a4:	e06b      	b.n	9297e <cl_testharnesscommandhandler+0x1656>
   928a6:	bf00      	nop
   928a8:	20071b9b 	.word	0x20071b9b
   928ac:	0009b409 	.word	0x0009b409
   928b0:	0009b369 	.word	0x0009b369
   928b4:	000aa3bc 	.word	0x000aa3bc
   928b8:	000aa3c8 	.word	0x000aa3c8
   928bc:	0009b32d 	.word	0x0009b32d
   928c0:	000aa3d4 	.word	0x000aa3d4
   928c4:	0009b3e9 	.word	0x0009b3e9
   928c8:	000aa3e0 	.word	0x000aa3e0
   928cc:	20071df8 	.word	0x20071df8
   928d0:	0009b4c9 	.word	0x0009b4c9
   928d4:	0009421d 	.word	0x0009421d
   928d8:	200706f4 	.word	0x200706f4
   928dc:	000aa3e4 	.word	0x000aa3e4
   928e0:	0009b549 	.word	0x0009b549
   928e4:	000aa2fc 	.word	0x000aa2fc
   928e8:	20071b9a 	.word	0x20071b9a
   928ec:	20070bea 	.word	0x20070bea
   928f0:	000aa3ec 	.word	0x000aa3ec
   928f4:	000aa3f8 	.word	0x000aa3f8
   928f8:	000aa404 	.word	0x000aa404
   928fc:	0009d1e9 	.word	0x0009d1e9
   92900:	0009b7b5 	.word	0x0009b7b5
   92904:	20071b9d 	.word	0x20071b9d
   92908:	000aa40c 	.word	0x000aa40c
   9290c:	000aa414 	.word	0x000aa414
   92910:	0009b785 	.word	0x0009b785
   92914:	0009b7c9 	.word	0x0009b7c9
   92918:	20071b98 	.word	0x20071b98
   9291c:	0009b759 	.word	0x0009b759
   92920:	0009b7ed 	.word	0x0009b7ed
   92924:	0009b595 	.word	0x0009b595
   92928:	0009b5b1 	.word	0x0009b5b1
   9292c:	0009b55d 	.word	0x0009b55d
   92930:	0009b579 	.word	0x0009b579
							
						}
							else if(TestMsg.datasize == 4)
   92934:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   92938:	2b04      	cmp	r3, #4
   9293a:	d10c      	bne.n	92956 <cl_testharnesscommandhandler+0x162e>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[2] = TestMsg.data.byte[1];
   9293c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   92940:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
							cl_indata.bytearray[1] = TestMsg.data.byte[2];
   92944:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   92948:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
							cl_indata.bytearray[0] = TestMsg.data.byte[3];
   9294c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   92950:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   92954:	e013      	b.n	9297e <cl_testharnesscommandhandler+0x1656>
							
						}
							else if(TestMsg.datasize == 5)
   92956:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   9295a:	2b05      	cmp	r3, #5
   9295c:	d10f      	bne.n	9297e <cl_testharnesscommandhandler+0x1656>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[3] = TestMsg.data.byte[1];
   9295e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   92962:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
   92966:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   9296a:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
   9296e:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   92972:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
   92976:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
   9297a:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
							
						}
						switch(cl_indata.bytearray[3])
   9297e:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
   92982:	2b0c      	cmp	r3, #12
   92984:	d028      	beq.n	929d8 <cl_testharnesscommandhandler+0x16b0>
   92986:	2b0c      	cmp	r3, #12
   92988:	dc11      	bgt.n	929ae <cl_testharnesscommandhandler+0x1686>
   9298a:	2b05      	cmp	r3, #5
   9298c:	f000 83f5 	beq.w	9317a <cl_testharnesscommandhandler+0x1e52>
   92990:	2b05      	cmp	r3, #5
   92992:	dc04      	bgt.n	9299e <cl_testharnesscommandhandler+0x1676>
   92994:	2b01      	cmp	r3, #1
   92996:	f000 835c 	beq.w	93052 <cl_testharnesscommandhandler+0x1d2a>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   9299a:	f000 be02 	b.w	935a2 <cl_testharnesscommandhandler+0x227a>
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
							
						}
						switch(cl_indata.bytearray[3])
   9299e:	2b06      	cmp	r3, #6
   929a0:	f000 848e 	beq.w	932c0 <cl_testharnesscommandhandler+0x1f98>
   929a4:	2b07      	cmp	r3, #7
   929a6:	f000 8548 	beq.w	9343a <cl_testharnesscommandhandler+0x2112>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   929aa:	f000 bdfa 	b.w	935a2 <cl_testharnesscommandhandler+0x227a>
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
							
						}
						switch(cl_indata.bytearray[3])
   929ae:	2b11      	cmp	r3, #17
   929b0:	f000 8203 	beq.w	92dba <cl_testharnesscommandhandler+0x1a92>
   929b4:	2b11      	cmp	r3, #17
   929b6:	dc07      	bgt.n	929c8 <cl_testharnesscommandhandler+0x16a0>
   929b8:	2b0d      	cmp	r3, #13
   929ba:	f000 80af 	beq.w	92b1c <cl_testharnesscommandhandler+0x17f4>
   929be:	2b0e      	cmp	r3, #14
   929c0:	f000 814a 	beq.w	92c58 <cl_testharnesscommandhandler+0x1930>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   929c4:	f000 bded 	b.w	935a2 <cl_testharnesscommandhandler+0x227a>
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
							
						}
						switch(cl_indata.bytearray[3])
   929c8:	2b12      	cmp	r3, #18
   929ca:	f000 828f 	beq.w	92eec <cl_testharnesscommandhandler+0x1bc4>
   929ce:	2bff      	cmp	r3, #255	; 0xff
   929d0:	f000 85d7 	beq.w	93582 <cl_testharnesscommandhandler+0x225a>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   929d4:	f000 bde5 	b.w	935a2 <cl_testharnesscommandhandler+0x227a>
							
						}
						switch(cl_indata.bytearray[3])
						{
							case TEST_SENSOR_TEMP1:
							if(cl_indata.bytearray[2]== 1)
   929d8:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   929dc:	2b01      	cmp	r3, #1
   929de:	d11e      	bne.n	92a1e <cl_testharnesscommandhandler+0x16f6>
							{
								Cl_alarmThresholdTable.temp1_high_threshold = cl_indata.Twobyte;
   929e0:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   929e4:	4bad      	ldr	r3, [pc, #692]	; (92c9c <cl_testharnesscommandhandler+0x1974>)
   929e6:	4610      	mov	r0, r2
   929e8:	4798      	blx	r3
   929ea:	4602      	mov	r2, r0
   929ec:	4bac      	ldr	r3, [pc, #688]	; (92ca0 <cl_testharnesscommandhandler+0x1978>)
   929ee:	639a      	str	r2, [r3, #56]	; 0x38
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   929f0:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   929f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_HIGH",10);
   929f8:	2018      	movs	r0, #24
   929fa:	49aa      	ldr	r1, [pc, #680]	; (92ca4 <cl_testharnesscommandhandler+0x197c>)
   929fc:	220a      	movs	r2, #10
   929fe:	4baa      	ldr	r3, [pc, #680]	; (92ca8 <cl_testharnesscommandhandler+0x1980>)
   92a00:	4798      	blx	r3
   92a02:	4603      	mov	r3, r0
   92a04:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92a08:	f107 034a 	add.w	r3, r7, #74	; 0x4a
   92a0c:	2019      	movs	r0, #25
   92a0e:	4619      	mov	r1, r3
   92a10:	2202      	movs	r2, #2
   92a12:	4ba5      	ldr	r3, [pc, #660]	; (92ca8 <cl_testharnesscommandhandler+0x1980>)
   92a14:	4798      	blx	r3
   92a16:	4603      	mov	r3, r0
   92a18:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   92a1c:	e07c      	b.n	92b18 <cl_testharnesscommandhandler+0x17f0>
							}
							else if(cl_indata.bytearray[2]== 0)
   92a1e:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92a22:	2b00      	cmp	r3, #0
   92a24:	d125      	bne.n	92a72 <cl_testharnesscommandhandler+0x174a>
							{
								int16_t temp=0,temp1=0;
   92a26:	2300      	movs	r3, #0
   92a28:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
   92a2c:	2300      	movs	r3, #0
   92a2e:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
								//temp = cl_indata.Twobyte-1000;
								Cl_alarmThresholdTable.temp1_low_threshold =cl_indata.Twobyte;
   92a32:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   92a36:	4b99      	ldr	r3, [pc, #612]	; (92c9c <cl_testharnesscommandhandler+0x1974>)
   92a38:	4610      	mov	r0, r2
   92a3a:	4798      	blx	r3
   92a3c:	4602      	mov	r2, r0
   92a3e:	4b98      	ldr	r3, [pc, #608]	; (92ca0 <cl_testharnesscommandhandler+0x1978>)
   92a40:	63da      	str	r2, [r3, #60]	; 0x3c
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92a42:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92a46:	b29b      	uxth	r3, r3
   92a48:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_LOW",9);
   92a4c:	2018      	movs	r0, #24
   92a4e:	4997      	ldr	r1, [pc, #604]	; (92cac <cl_testharnesscommandhandler+0x1984>)
   92a50:	2209      	movs	r2, #9
   92a52:	4b95      	ldr	r3, [pc, #596]	; (92ca8 <cl_testharnesscommandhandler+0x1980>)
   92a54:	4798      	blx	r3
   92a56:	4603      	mov	r3, r0
   92a58:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92a5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
   92a60:	2019      	movs	r0, #25
   92a62:	4619      	mov	r1, r3
   92a64:	2202      	movs	r2, #2
   92a66:	4b90      	ldr	r3, [pc, #576]	; (92ca8 <cl_testharnesscommandhandler+0x1980>)
   92a68:	4798      	blx	r3
   92a6a:	4603      	mov	r3, r0
   92a6c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   92a70:	e052      	b.n	92b18 <cl_testharnesscommandhandler+0x17f0>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 2)
   92a72:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92a76:	2b02      	cmp	r3, #2
   92a78:	d127      	bne.n	92aca <cl_testharnesscommandhandler+0x17a2>
							{
								int16_t temp=0,temp1=0;
   92a7a:	2300      	movs	r3, #0
   92a7c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
   92a80:	2300      	movs	r3, #0
   92a82:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_TEMP1STATUS].test_sensord_data =cl_indata.Twobyte;
   92a86:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92a8a:	b29a      	uxth	r2, r3
   92a8c:	4b88      	ldr	r3, [pc, #544]	; (92cb0 <cl_testharnesscommandhandler+0x1988>)
   92a8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
								test_sensor_status[SENSOR_TEMP1STATUS].test_flag = true;
   92a92:	4b87      	ldr	r3, [pc, #540]	; (92cb0 <cl_testharnesscommandhandler+0x1988>)
   92a94:	2201      	movs	r2, #1
   92a96:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92a9a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92a9e:	b29b      	uxth	r3, r3
   92aa0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_LOW",9);
   92aa4:	2018      	movs	r0, #24
   92aa6:	4981      	ldr	r1, [pc, #516]	; (92cac <cl_testharnesscommandhandler+0x1984>)
   92aa8:	2209      	movs	r2, #9
   92aaa:	4b7f      	ldr	r3, [pc, #508]	; (92ca8 <cl_testharnesscommandhandler+0x1980>)
   92aac:	4798      	blx	r3
   92aae:	4603      	mov	r3, r0
   92ab0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92ab4:	f107 0346 	add.w	r3, r7, #70	; 0x46
   92ab8:	2019      	movs	r0, #25
   92aba:	4619      	mov	r1, r3
   92abc:	2202      	movs	r2, #2
   92abe:	4b7a      	ldr	r3, [pc, #488]	; (92ca8 <cl_testharnesscommandhandler+0x1980>)
   92ac0:	4798      	blx	r3
   92ac2:	4603      	mov	r3, r0
   92ac4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   92ac8:	e026      	b.n	92b18 <cl_testharnesscommandhandler+0x17f0>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   92aca:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92ace:	2b03      	cmp	r3, #3
   92ad0:	d122      	bne.n	92b18 <cl_testharnesscommandhandler+0x17f0>
							{
								int16_t temp=0,temp1=0;
   92ad2:	2300      	movs	r3, #0
   92ad4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
   92ad8:	2300      	movs	r3, #0
   92ada:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_TEMP1STATUS].test_flag = false;
   92ade:	4b74      	ldr	r3, [pc, #464]	; (92cb0 <cl_testharnesscommandhandler+0x1988>)
   92ae0:	2200      	movs	r2, #0
   92ae2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92ae6:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92aea:	b29b      	uxth	r3, r3
   92aec:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1",5);
   92af0:	2018      	movs	r0, #24
   92af2:	4970      	ldr	r1, [pc, #448]	; (92cb4 <cl_testharnesscommandhandler+0x198c>)
   92af4:	2205      	movs	r2, #5
   92af6:	4b6c      	ldr	r3, [pc, #432]	; (92ca8 <cl_testharnesscommandhandler+0x1980>)
   92af8:	4798      	blx	r3
   92afa:	4603      	mov	r3, r0
   92afc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92b00:	f107 0344 	add.w	r3, r7, #68	; 0x44
   92b04:	2019      	movs	r0, #25
   92b06:	4619      	mov	r1, r3
   92b08:	2202      	movs	r2, #2
   92b0a:	4b67      	ldr	r3, [pc, #412]	; (92ca8 <cl_testharnesscommandhandler+0x1980>)
   92b0c:	4798      	blx	r3
   92b0e:	4603      	mov	r3, r0
   92b10:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92b14:	f000 bd45 	b.w	935a2 <cl_testharnesscommandhandler+0x227a>
   92b18:	f000 bd43 	b.w	935a2 <cl_testharnesscommandhandler+0x227a>
							case TEST_SENSOR_TEMP2:
							if(cl_indata.bytearray[2]== 1)
   92b1c:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92b20:	2b01      	cmp	r3, #1
   92b22:	d11e      	bne.n	92b62 <cl_testharnesscommandhandler+0x183a>
							{
								Cl_alarmThresholdTable.temp2_high_threshold = cl_indata.Twobyte;
   92b24:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   92b28:	4b5c      	ldr	r3, [pc, #368]	; (92c9c <cl_testharnesscommandhandler+0x1974>)
   92b2a:	4610      	mov	r0, r2
   92b2c:	4798      	blx	r3
   92b2e:	4602      	mov	r2, r0
   92b30:	4b5b      	ldr	r3, [pc, #364]	; (92ca0 <cl_testharnesscommandhandler+0x1978>)
   92b32:	641a      	str	r2, [r3, #64]	; 0x40
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92b34:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92b38:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2_HIGH",10);
   92b3c:	2018      	movs	r0, #24
   92b3e:	495e      	ldr	r1, [pc, #376]	; (92cb8 <cl_testharnesscommandhandler+0x1990>)
   92b40:	220a      	movs	r2, #10
   92b42:	4b59      	ldr	r3, [pc, #356]	; (92ca8 <cl_testharnesscommandhandler+0x1980>)
   92b44:	4798      	blx	r3
   92b46:	4603      	mov	r3, r0
   92b48:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92b4c:	f107 0342 	add.w	r3, r7, #66	; 0x42
   92b50:	2019      	movs	r0, #25
   92b52:	4619      	mov	r1, r3
   92b54:	2202      	movs	r2, #2
   92b56:	4b54      	ldr	r3, [pc, #336]	; (92ca8 <cl_testharnesscommandhandler+0x1980>)
   92b58:	4798      	blx	r3
   92b5a:	4603      	mov	r3, r0
   92b5c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   92b60:	e078      	b.n	92c54 <cl_testharnesscommandhandler+0x192c>
							}
							else if (cl_indata.bytearray[2]== 0)
   92b62:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92b66:	2b00      	cmp	r3, #0
   92b68:	d125      	bne.n	92bb6 <cl_testharnesscommandhandler+0x188e>
							{
								int16_t temp=0,temp1=0;
   92b6a:	2300      	movs	r3, #0
   92b6c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   92b70:	2300      	movs	r3, #0
   92b72:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
								//temp = cl_indata.Twobyte-1000;
								Cl_alarmThresholdTable.temp2_low_threshold =cl_indata.Twobyte;
   92b76:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   92b7a:	4b48      	ldr	r3, [pc, #288]	; (92c9c <cl_testharnesscommandhandler+0x1974>)
   92b7c:	4610      	mov	r0, r2
   92b7e:	4798      	blx	r3
   92b80:	4602      	mov	r2, r0
   92b82:	4b47      	ldr	r3, [pc, #284]	; (92ca0 <cl_testharnesscommandhandler+0x1978>)
   92b84:	645a      	str	r2, [r3, #68]	; 0x44
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92b86:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92b8a:	b29b      	uxth	r3, r3
   92b8c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2_LOW",9);
   92b90:	2018      	movs	r0, #24
   92b92:	494a      	ldr	r1, [pc, #296]	; (92cbc <cl_testharnesscommandhandler+0x1994>)
   92b94:	2209      	movs	r2, #9
   92b96:	4b44      	ldr	r3, [pc, #272]	; (92ca8 <cl_testharnesscommandhandler+0x1980>)
   92b98:	4798      	blx	r3
   92b9a:	4603      	mov	r3, r0
   92b9c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92ba0:	f107 0340 	add.w	r3, r7, #64	; 0x40
   92ba4:	2019      	movs	r0, #25
   92ba6:	4619      	mov	r1, r3
   92ba8:	2202      	movs	r2, #2
   92baa:	4b3f      	ldr	r3, [pc, #252]	; (92ca8 <cl_testharnesscommandhandler+0x1980>)
   92bac:	4798      	blx	r3
   92bae:	4603      	mov	r3, r0
   92bb0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   92bb4:	e04e      	b.n	92c54 <cl_testharnesscommandhandler+0x192c>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 2)
   92bb6:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92bba:	2b02      	cmp	r3, #2
   92bbc:	d125      	bne.n	92c0a <cl_testharnesscommandhandler+0x18e2>
							{
								int16_t temp=0,temp1=0;
   92bbe:	2300      	movs	r3, #0
   92bc0:	87fb      	strh	r3, [r7, #62]	; 0x3e
   92bc2:	2300      	movs	r3, #0
   92bc4:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_TEMP2STATUS].test_sensord_data =cl_indata.Twobyte;
   92bc8:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92bcc:	b29a      	uxth	r2, r3
   92bce:	4b38      	ldr	r3, [pc, #224]	; (92cb0 <cl_testharnesscommandhandler+0x1988>)
   92bd0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
								test_sensor_status[SENSOR_TEMP2STATUS].test_flag = true;
   92bd4:	4b36      	ldr	r3, [pc, #216]	; (92cb0 <cl_testharnesscommandhandler+0x1988>)
   92bd6:	2201      	movs	r2, #1
   92bd8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92bdc:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92be0:	b29b      	uxth	r3, r3
   92be2:	87fb      	strh	r3, [r7, #62]	; 0x3e
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   92be4:	2018      	movs	r0, #24
   92be6:	4936      	ldr	r1, [pc, #216]	; (92cc0 <cl_testharnesscommandhandler+0x1998>)
   92be8:	2209      	movs	r2, #9
   92bea:	4b2f      	ldr	r3, [pc, #188]	; (92ca8 <cl_testharnesscommandhandler+0x1980>)
   92bec:	4798      	blx	r3
   92bee:	4603      	mov	r3, r0
   92bf0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92bf4:	f107 033e 	add.w	r3, r7, #62	; 0x3e
   92bf8:	2019      	movs	r0, #25
   92bfa:	4619      	mov	r1, r3
   92bfc:	2202      	movs	r2, #2
   92bfe:	4b2a      	ldr	r3, [pc, #168]	; (92ca8 <cl_testharnesscommandhandler+0x1980>)
   92c00:	4798      	blx	r3
   92c02:	4603      	mov	r3, r0
   92c04:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   92c08:	e024      	b.n	92c54 <cl_testharnesscommandhandler+0x192c>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   92c0a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92c0e:	2b03      	cmp	r3, #3
   92c10:	d120      	bne.n	92c54 <cl_testharnesscommandhandler+0x192c>
							{
								int16_t temp=0,temp1=0;
   92c12:	2300      	movs	r3, #0
   92c14:	87bb      	strh	r3, [r7, #60]	; 0x3c
   92c16:	2300      	movs	r3, #0
   92c18:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_TEMP2STATUS].test_flag = false;
   92c1c:	4b24      	ldr	r3, [pc, #144]	; (92cb0 <cl_testharnesscommandhandler+0x1988>)
   92c1e:	2200      	movs	r2, #0
   92c20:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92c24:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92c28:	b29b      	uxth	r3, r3
   92c2a:	87bb      	strh	r3, [r7, #60]	; 0x3c
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2",5);
   92c2c:	2018      	movs	r0, #24
   92c2e:	4925      	ldr	r1, [pc, #148]	; (92cc4 <cl_testharnesscommandhandler+0x199c>)
   92c30:	2205      	movs	r2, #5
   92c32:	4b1d      	ldr	r3, [pc, #116]	; (92ca8 <cl_testharnesscommandhandler+0x1980>)
   92c34:	4798      	blx	r3
   92c36:	4603      	mov	r3, r0
   92c38:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92c3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   92c40:	2019      	movs	r0, #25
   92c42:	4619      	mov	r1, r3
   92c44:	2202      	movs	r2, #2
   92c46:	4b18      	ldr	r3, [pc, #96]	; (92ca8 <cl_testharnesscommandhandler+0x1980>)
   92c48:	4798      	blx	r3
   92c4a:	4603      	mov	r3, r0
   92c4c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92c50:	f000 bca7 	b.w	935a2 <cl_testharnesscommandhandler+0x227a>
   92c54:	f000 bca5 	b.w	935a2 <cl_testharnesscommandhandler+0x227a>
							
							
							case TEST_SENSOR_TEMP3:
							if(cl_indata.bytearray[2]== 1)
   92c58:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92c5c:	2b01      	cmp	r3, #1
   92c5e:	d135      	bne.n	92ccc <cl_testharnesscommandhandler+0x19a4>
							{
								Cl_alarmThresholdTable.temp3_high_threshold = cl_indata.Twobyte;
   92c60:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   92c64:	4b0d      	ldr	r3, [pc, #52]	; (92c9c <cl_testharnesscommandhandler+0x1974>)
   92c66:	4610      	mov	r0, r2
   92c68:	4798      	blx	r3
   92c6a:	4602      	mov	r2, r0
   92c6c:	4b0c      	ldr	r3, [pc, #48]	; (92ca0 <cl_testharnesscommandhandler+0x1978>)
   92c6e:	649a      	str	r2, [r3, #72]	; 0x48
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92c70:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92c74:	877b      	strh	r3, [r7, #58]	; 0x3a
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP_HIGH",8);
   92c76:	2018      	movs	r0, #24
   92c78:	4913      	ldr	r1, [pc, #76]	; (92cc8 <cl_testharnesscommandhandler+0x19a0>)
   92c7a:	2208      	movs	r2, #8
   92c7c:	4b0a      	ldr	r3, [pc, #40]	; (92ca8 <cl_testharnesscommandhandler+0x1980>)
   92c7e:	4798      	blx	r3
   92c80:	4603      	mov	r3, r0
   92c82:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);								
   92c86:	f107 033a 	add.w	r3, r7, #58	; 0x3a
   92c8a:	2019      	movs	r0, #25
   92c8c:	4619      	mov	r1, r3
   92c8e:	2202      	movs	r2, #2
   92c90:	4b05      	ldr	r3, [pc, #20]	; (92ca8 <cl_testharnesscommandhandler+0x1980>)
   92c92:	4798      	blx	r3
   92c94:	4603      	mov	r3, r0
   92c96:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   92c9a:	e08d      	b.n	92db8 <cl_testharnesscommandhandler+0x1a90>
   92c9c:	000a8255 	.word	0x000a8255
   92ca0:	200722a8 	.word	0x200722a8
   92ca4:	000aa420 	.word	0x000aa420
   92ca8:	0009d1e9 	.word	0x0009d1e9
   92cac:	000aa42c 	.word	0x000aa42c
   92cb0:	200727d8 	.word	0x200727d8
   92cb4:	000aa438 	.word	0x000aa438
   92cb8:	000aa440 	.word	0x000aa440
   92cbc:	000aa44c 	.word	0x000aa44c
   92cc0:	000aa458 	.word	0x000aa458
   92cc4:	000aa460 	.word	0x000aa460
   92cc8:	000aa468 	.word	0x000aa468
							}
							else if (cl_indata.bytearray[2]== 0)
   92ccc:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92cd0:	2b00      	cmp	r3, #0
   92cd2:	d123      	bne.n	92d1c <cl_testharnesscommandhandler+0x19f4>
							{
								int16_t temp=0,temp1=0;
   92cd4:	2300      	movs	r3, #0
   92cd6:	873b      	strh	r3, [r7, #56]	; 0x38
   92cd8:	2300      	movs	r3, #0
   92cda:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
								//temp = cl_indata.Twobyte-1000;
								Cl_alarmThresholdTable.temp3_low_threshold =cl_indata.Twobyte;
   92cde:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   92ce2:	4bbc      	ldr	r3, [pc, #752]	; (92fd4 <cl_testharnesscommandhandler+0x1cac>)
   92ce4:	4610      	mov	r0, r2
   92ce6:	4798      	blx	r3
   92ce8:	4602      	mov	r2, r0
   92cea:	4bbb      	ldr	r3, [pc, #748]	; (92fd8 <cl_testharnesscommandhandler+0x1cb0>)
   92cec:	64da      	str	r2, [r3, #76]	; 0x4c
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92cee:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92cf2:	b29b      	uxth	r3, r3
   92cf4:	873b      	strh	r3, [r7, #56]	; 0x38
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP_LOW",7);
   92cf6:	2018      	movs	r0, #24
   92cf8:	49b8      	ldr	r1, [pc, #736]	; (92fdc <cl_testharnesscommandhandler+0x1cb4>)
   92cfa:	2207      	movs	r2, #7
   92cfc:	4bb8      	ldr	r3, [pc, #736]	; (92fe0 <cl_testharnesscommandhandler+0x1cb8>)
   92cfe:	4798      	blx	r3
   92d00:	4603      	mov	r3, r0
   92d02:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92d06:	f107 0338 	add.w	r3, r7, #56	; 0x38
   92d0a:	2019      	movs	r0, #25
   92d0c:	4619      	mov	r1, r3
   92d0e:	2202      	movs	r2, #2
   92d10:	4bb3      	ldr	r3, [pc, #716]	; (92fe0 <cl_testharnesscommandhandler+0x1cb8>)
   92d12:	4798      	blx	r3
   92d14:	4603      	mov	r3, r0
   92d16:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   92d1a:	e04d      	b.n	92db8 <cl_testharnesscommandhandler+0x1a90>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 2)
   92d1c:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92d20:	2b02      	cmp	r3, #2
   92d22:	d125      	bne.n	92d70 <cl_testharnesscommandhandler+0x1a48>
							{
								int16_t temp=0,temp1=0;
   92d24:	2300      	movs	r3, #0
   92d26:	86fb      	strh	r3, [r7, #54]	; 0x36
   92d28:	2300      	movs	r3, #0
   92d2a:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_TEMP3STATUS].test_sensord_data =cl_indata.Twobyte;
   92d2e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92d32:	b29a      	uxth	r2, r3
   92d34:	4bab      	ldr	r3, [pc, #684]	; (92fe4 <cl_testharnesscommandhandler+0x1cbc>)
   92d36:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
								test_sensor_status[SENSOR_TEMP3STATUS].test_flag = true;
   92d3a:	4baa      	ldr	r3, [pc, #680]	; (92fe4 <cl_testharnesscommandhandler+0x1cbc>)
   92d3c:	2201      	movs	r2, #1
   92d3e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92d42:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92d46:	b29b      	uxth	r3, r3
   92d48:	86fb      	strh	r3, [r7, #54]	; 0x36
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   92d4a:	2018      	movs	r0, #24
   92d4c:	49a6      	ldr	r1, [pc, #664]	; (92fe8 <cl_testharnesscommandhandler+0x1cc0>)
   92d4e:	2209      	movs	r2, #9
   92d50:	4ba3      	ldr	r3, [pc, #652]	; (92fe0 <cl_testharnesscommandhandler+0x1cb8>)
   92d52:	4798      	blx	r3
   92d54:	4603      	mov	r3, r0
   92d56:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92d5a:	f107 0336 	add.w	r3, r7, #54	; 0x36
   92d5e:	2019      	movs	r0, #25
   92d60:	4619      	mov	r1, r3
   92d62:	2202      	movs	r2, #2
   92d64:	4b9e      	ldr	r3, [pc, #632]	; (92fe0 <cl_testharnesscommandhandler+0x1cb8>)
   92d66:	4798      	blx	r3
   92d68:	4603      	mov	r3, r0
   92d6a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   92d6e:	e023      	b.n	92db8 <cl_testharnesscommandhandler+0x1a90>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   92d70:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92d74:	2b03      	cmp	r3, #3
   92d76:	d11f      	bne.n	92db8 <cl_testharnesscommandhandler+0x1a90>
							{
								int16_t temp=0,temp1=0;
   92d78:	2300      	movs	r3, #0
   92d7a:	86bb      	strh	r3, [r7, #52]	; 0x34
   92d7c:	2300      	movs	r3, #0
   92d7e:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_TEMP3STATUS].test_flag = false;
   92d82:	4b98      	ldr	r3, [pc, #608]	; (92fe4 <cl_testharnesscommandhandler+0x1cbc>)
   92d84:	2200      	movs	r2, #0
   92d86:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92d8a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92d8e:	b29b      	uxth	r3, r3
   92d90:	86bb      	strh	r3, [r7, #52]	; 0x34
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP3",5);
   92d92:	2018      	movs	r0, #24
   92d94:	4995      	ldr	r1, [pc, #596]	; (92fec <cl_testharnesscommandhandler+0x1cc4>)
   92d96:	2205      	movs	r2, #5
   92d98:	4b91      	ldr	r3, [pc, #580]	; (92fe0 <cl_testharnesscommandhandler+0x1cb8>)
   92d9a:	4798      	blx	r3
   92d9c:	4603      	mov	r3, r0
   92d9e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92da2:	f107 0334 	add.w	r3, r7, #52	; 0x34
   92da6:	2019      	movs	r0, #25
   92da8:	4619      	mov	r1, r3
   92daa:	2202      	movs	r2, #2
   92dac:	4b8c      	ldr	r3, [pc, #560]	; (92fe0 <cl_testharnesscommandhandler+0x1cb8>)
   92dae:	4798      	blx	r3
   92db0:	4603      	mov	r3, r0
   92db2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92db6:	e3f4      	b.n	935a2 <cl_testharnesscommandhandler+0x227a>
   92db8:	e3f3      	b.n	935a2 <cl_testharnesscommandhandler+0x227a>
							
							case TEST_SENSOR_APT:
							if(cl_indata.bytearray[2]== 1)
   92dba:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92dbe:	2b01      	cmp	r3, #1
   92dc0:	d11d      	bne.n	92dfe <cl_testharnesscommandhandler+0x1ad6>
								{
								Cl_alarmThresholdTable.apt_high_threshold = cl_indata.Twobyte;
   92dc2:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   92dc6:	4b83      	ldr	r3, [pc, #524]	; (92fd4 <cl_testharnesscommandhandler+0x1cac>)
   92dc8:	4610      	mov	r0, r2
   92dca:	4798      	blx	r3
   92dcc:	4602      	mov	r2, r0
   92dce:	4b82      	ldr	r3, [pc, #520]	; (92fd8 <cl_testharnesscommandhandler+0x1cb0>)
   92dd0:	609a      	str	r2, [r3, #8]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92dd2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92dd6:	867b      	strh	r3, [r7, #50]	; 0x32
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_HIGH",8);
   92dd8:	2018      	movs	r0, #24
   92dda:	4985      	ldr	r1, [pc, #532]	; (92ff0 <cl_testharnesscommandhandler+0x1cc8>)
   92ddc:	2208      	movs	r2, #8
   92dde:	4b80      	ldr	r3, [pc, #512]	; (92fe0 <cl_testharnesscommandhandler+0x1cb8>)
   92de0:	4798      	blx	r3
   92de2:	4603      	mov	r3, r0
   92de4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92de8:	f107 0332 	add.w	r3, r7, #50	; 0x32
   92dec:	2019      	movs	r0, #25
   92dee:	4619      	mov	r1, r3
   92df0:	2202      	movs	r2, #2
   92df2:	4b7b      	ldr	r3, [pc, #492]	; (92fe0 <cl_testharnesscommandhandler+0x1cb8>)
   92df4:	4798      	blx	r3
   92df6:	4603      	mov	r3, r0
   92df8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   92dfc:	e075      	b.n	92eea <cl_testharnesscommandhandler+0x1bc2>
								}
								else if (cl_indata.bytearray[2]== 0)
   92dfe:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92e02:	2b00      	cmp	r3, #0
   92e04:	d124      	bne.n	92e50 <cl_testharnesscommandhandler+0x1b28>
								{
									int16_t temp=0,temp1=0;
   92e06:	2300      	movs	r3, #0
   92e08:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
   92e0c:	2300      	movs	r3, #0
   92e0e:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
									temp = cl_indata.Twobyte-1000;
   92e12:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92e16:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   92e1a:	b29b      	uxth	r3, r3
   92e1c:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
									//temp = cl_indata.Twobyte;
									Cl_alarmThresholdTable.apt_low_threshold =temp;
   92e20:	f9b7 20e6 	ldrsh.w	r2, [r7, #230]	; 0xe6
   92e24:	4b73      	ldr	r3, [pc, #460]	; (92ff4 <cl_testharnesscommandhandler+0x1ccc>)
   92e26:	4610      	mov	r0, r2
   92e28:	4798      	blx	r3
   92e2a:	4602      	mov	r2, r0
   92e2c:	4b6a      	ldr	r3, [pc, #424]	; (92fd8 <cl_testharnesscommandhandler+0x1cb0>)
   92e2e:	60da      	str	r2, [r3, #12]
									temp1=temp+1000;
   92e30:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
   92e34:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   92e38:	b29b      	uxth	r3, r3
   92e3a:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW= (-)",12);
   92e3e:	2018      	movs	r0, #24
   92e40:	496d      	ldr	r1, [pc, #436]	; (92ff8 <cl_testharnesscommandhandler+0x1cd0>)
   92e42:	220c      	movs	r2, #12
   92e44:	4b66      	ldr	r3, [pc, #408]	; (92fe0 <cl_testharnesscommandhandler+0x1cb8>)
   92e46:	4798      	blx	r3
   92e48:	4603      	mov	r3, r0
   92e4a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   92e4e:	e04c      	b.n	92eea <cl_testharnesscommandhandler+0x1bc2>
									//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
									//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp,2);
								}
								else if(cl_indata.bytearray[2]== 2)
   92e50:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92e54:	2b02      	cmp	r3, #2
   92e56:	d124      	bne.n	92ea2 <cl_testharnesscommandhandler+0x1b7a>
								{
									int16_t temp=0,temp1=0;
   92e58:	2300      	movs	r3, #0
   92e5a:	863b      	strh	r3, [r7, #48]	; 0x30
   92e5c:	2300      	movs	r3, #0
   92e5e:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
									//temp = cl_indata.Twobyte-1000;
									test_sensor_status[SENSOR_APTSTATUS].test_sensord_data =cl_indata.Twobyte;
   92e62:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92e66:	b29a      	uxth	r2, r3
   92e68:	4b5e      	ldr	r3, [pc, #376]	; (92fe4 <cl_testharnesscommandhandler+0x1cbc>)
   92e6a:	859a      	strh	r2, [r3, #44]	; 0x2c
									test_sensor_status[SENSOR_APTSTATUS].test_flag = true;
   92e6c:	4b5d      	ldr	r3, [pc, #372]	; (92fe4 <cl_testharnesscommandhandler+0x1cbc>)
   92e6e:	2201      	movs	r2, #1
   92e70:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
									//temp1=temp+1000;
									//Cl_Uint16Type temp;
									temp = cl_indata.Twobyte;
   92e74:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92e78:	b29b      	uxth	r3, r3
   92e7a:	863b      	strh	r3, [r7, #48]	; 0x30
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   92e7c:	2018      	movs	r0, #24
   92e7e:	495a      	ldr	r1, [pc, #360]	; (92fe8 <cl_testharnesscommandhandler+0x1cc0>)
   92e80:	2209      	movs	r2, #9
   92e82:	4b57      	ldr	r3, [pc, #348]	; (92fe0 <cl_testharnesscommandhandler+0x1cb8>)
   92e84:	4798      	blx	r3
   92e86:	4603      	mov	r3, r0
   92e88:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92e8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
   92e90:	2019      	movs	r0, #25
   92e92:	4619      	mov	r1, r3
   92e94:	2202      	movs	r2, #2
   92e96:	4b52      	ldr	r3, [pc, #328]	; (92fe0 <cl_testharnesscommandhandler+0x1cb8>)
   92e98:	4798      	blx	r3
   92e9a:	4603      	mov	r3, r0
   92e9c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   92ea0:	e023      	b.n	92eea <cl_testharnesscommandhandler+0x1bc2>
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								else if(cl_indata.bytearray[2]== 3)
   92ea2:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92ea6:	2b03      	cmp	r3, #3
   92ea8:	d11f      	bne.n	92eea <cl_testharnesscommandhandler+0x1bc2>
								{
									int16_t temp=0,temp1=0;
   92eaa:	2300      	movs	r3, #0
   92eac:	85fb      	strh	r3, [r7, #46]	; 0x2e
   92eae:	2300      	movs	r3, #0
   92eb0:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
									//temp = cl_indata.Twobyte-1000;
									//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
									test_sensor_status[SENSOR_APTSTATUS].test_flag = false;
   92eb4:	4b4b      	ldr	r3, [pc, #300]	; (92fe4 <cl_testharnesscommandhandler+0x1cbc>)
   92eb6:	2200      	movs	r2, #0
   92eb8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
									//temp1=temp+1000;
									//Cl_Uint16Type temp;
									temp = cl_indata.Twobyte;
   92ebc:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92ec0:	b29b      	uxth	r3, r3
   92ec2:	85fb      	strh	r3, [r7, #46]	; 0x2e
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW",9);
   92ec4:	2018      	movs	r0, #24
   92ec6:	494d      	ldr	r1, [pc, #308]	; (92ffc <cl_testharnesscommandhandler+0x1cd4>)
   92ec8:	2209      	movs	r2, #9
   92eca:	4b45      	ldr	r3, [pc, #276]	; (92fe0 <cl_testharnesscommandhandler+0x1cb8>)
   92ecc:	4798      	blx	r3
   92ece:	4603      	mov	r3, r0
   92ed0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92ed4:	f107 032e 	add.w	r3, r7, #46	; 0x2e
   92ed8:	2019      	movs	r0, #25
   92eda:	4619      	mov	r1, r3
   92edc:	2202      	movs	r2, #2
   92ede:	4b40      	ldr	r3, [pc, #256]	; (92fe0 <cl_testharnesscommandhandler+0x1cb8>)
   92ee0:	4798      	blx	r3
   92ee2:	4603      	mov	r3, r0
   92ee4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								break;
   92ee8:	e35b      	b.n	935a2 <cl_testharnesscommandhandler+0x227a>
   92eea:	e35a      	b.n	935a2 <cl_testharnesscommandhandler+0x227a>
							break;
							case TEST_SENSOR_VPT:
							if(cl_indata.bytearray[2]== 1)
   92eec:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92ef0:	2b01      	cmp	r3, #1
   92ef2:	d11d      	bne.n	92f30 <cl_testharnesscommandhandler+0x1c08>
							{
								Cl_alarmThresholdTable.vpt_high_threshold = cl_indata.Twobyte;
   92ef4:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   92ef8:	4b36      	ldr	r3, [pc, #216]	; (92fd4 <cl_testharnesscommandhandler+0x1cac>)
   92efa:	4610      	mov	r0, r2
   92efc:	4798      	blx	r3
   92efe:	4602      	mov	r2, r0
   92f00:	4b35      	ldr	r3, [pc, #212]	; (92fd8 <cl_testharnesscommandhandler+0x1cb0>)
   92f02:	611a      	str	r2, [r3, #16]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92f04:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92f08:	85bb      	strh	r3, [r7, #44]	; 0x2c
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPT_HIGH",8);
   92f0a:	2018      	movs	r0, #24
   92f0c:	493c      	ldr	r1, [pc, #240]	; (93000 <cl_testharnesscommandhandler+0x1cd8>)
   92f0e:	2208      	movs	r2, #8
   92f10:	4b33      	ldr	r3, [pc, #204]	; (92fe0 <cl_testharnesscommandhandler+0x1cb8>)
   92f12:	4798      	blx	r3
   92f14:	4603      	mov	r3, r0
   92f16:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92f1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   92f1e:	2019      	movs	r0, #25
   92f20:	4619      	mov	r1, r3
   92f22:	2202      	movs	r2, #2
   92f24:	4b2e      	ldr	r3, [pc, #184]	; (92fe0 <cl_testharnesscommandhandler+0x1cb8>)
   92f26:	4798      	blx	r3
   92f28:	4603      	mov	r3, r0
   92f2a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   92f2e:	e08f      	b.n	93050 <cl_testharnesscommandhandler+0x1d28>
							}
							else if (cl_indata.bytearray[2]== 0)
   92f30:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92f34:	2b00      	cmp	r3, #0
   92f36:	d124      	bne.n	92f82 <cl_testharnesscommandhandler+0x1c5a>
							{
								int16_t temp=0,temp1=0;
   92f38:	2300      	movs	r3, #0
   92f3a:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
   92f3e:	2300      	movs	r3, #0
   92f40:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
								temp = cl_indata.Twobyte-1000;
   92f44:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92f48:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   92f4c:	b29b      	uxth	r3, r3
   92f4e:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
								//temp = cl_indata.Twobyte;
								Cl_alarmThresholdTable.vpt_low_threshold =temp;
   92f52:	f9b7 20de 	ldrsh.w	r2, [r7, #222]	; 0xde
   92f56:	4b27      	ldr	r3, [pc, #156]	; (92ff4 <cl_testharnesscommandhandler+0x1ccc>)
   92f58:	4610      	mov	r0, r2
   92f5a:	4798      	blx	r3
   92f5c:	4602      	mov	r2, r0
   92f5e:	4b1e      	ldr	r3, [pc, #120]	; (92fd8 <cl_testharnesscommandhandler+0x1cb0>)
   92f60:	615a      	str	r2, [r3, #20]
								temp1=temp+1000;
   92f62:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
   92f66:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   92f6a:	b29b      	uxth	r3, r3
   92f6c:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPT_LOW= (-)",12);
   92f70:	2018      	movs	r0, #24
   92f72:	4924      	ldr	r1, [pc, #144]	; (93004 <cl_testharnesscommandhandler+0x1cdc>)
   92f74:	220c      	movs	r2, #12
   92f76:	4b1a      	ldr	r3, [pc, #104]	; (92fe0 <cl_testharnesscommandhandler+0x1cb8>)
   92f78:	4798      	blx	r3
   92f7a:	4603      	mov	r3, r0
   92f7c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   92f80:	e066      	b.n	93050 <cl_testharnesscommandhandler+0x1d28>
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp,2);
							}
							else if(cl_indata.bytearray[2]== 2)
   92f82:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92f86:	2b02      	cmp	r3, #2
   92f88:	d13e      	bne.n	93008 <cl_testharnesscommandhandler+0x1ce0>
							{
								int16_t temp=0,temp1=0;
   92f8a:	2300      	movs	r3, #0
   92f8c:	857b      	strh	r3, [r7, #42]	; 0x2a
   92f8e:	2300      	movs	r3, #0
   92f90:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_VPTSTATUS].test_sensord_data =cl_indata.Twobyte;
   92f94:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92f98:	b29a      	uxth	r2, r3
   92f9a:	4b12      	ldr	r3, [pc, #72]	; (92fe4 <cl_testharnesscommandhandler+0x1cbc>)
   92f9c:	861a      	strh	r2, [r3, #48]	; 0x30
								test_sensor_status[SENSOR_VPTSTATUS].test_flag = true;
   92f9e:	4b11      	ldr	r3, [pc, #68]	; (92fe4 <cl_testharnesscommandhandler+0x1cbc>)
   92fa0:	2201      	movs	r2, #1
   92fa2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92fa6:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92faa:	b29b      	uxth	r3, r3
   92fac:	857b      	strh	r3, [r7, #42]	; 0x2a
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   92fae:	2018      	movs	r0, #24
   92fb0:	490d      	ldr	r1, [pc, #52]	; (92fe8 <cl_testharnesscommandhandler+0x1cc0>)
   92fb2:	2209      	movs	r2, #9
   92fb4:	4b0a      	ldr	r3, [pc, #40]	; (92fe0 <cl_testharnesscommandhandler+0x1cb8>)
   92fb6:	4798      	blx	r3
   92fb8:	4603      	mov	r3, r0
   92fba:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92fbe:	f107 032a 	add.w	r3, r7, #42	; 0x2a
   92fc2:	2019      	movs	r0, #25
   92fc4:	4619      	mov	r1, r3
   92fc6:	2202      	movs	r2, #2
   92fc8:	4b05      	ldr	r3, [pc, #20]	; (92fe0 <cl_testharnesscommandhandler+0x1cb8>)
   92fca:	4798      	blx	r3
   92fcc:	4603      	mov	r3, r0
   92fce:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   92fd2:	e03d      	b.n	93050 <cl_testharnesscommandhandler+0x1d28>
   92fd4:	000a8255 	.word	0x000a8255
   92fd8:	200722a8 	.word	0x200722a8
   92fdc:	000aa474 	.word	0x000aa474
   92fe0:	0009d1e9 	.word	0x0009d1e9
   92fe4:	200727d8 	.word	0x200727d8
   92fe8:	000aa458 	.word	0x000aa458
   92fec:	000aa480 	.word	0x000aa480
   92ff0:	000aa488 	.word	0x000aa488
   92ff4:	000a825d 	.word	0x000a825d
   92ff8:	000aa494 	.word	0x000aa494
   92ffc:	000aa4a4 	.word	0x000aa4a4
   93000:	000aa4ac 	.word	0x000aa4ac
   93004:	000aa4b8 	.word	0x000aa4b8
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   93008:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9300c:	2b03      	cmp	r3, #3
   9300e:	d11f      	bne.n	93050 <cl_testharnesscommandhandler+0x1d28>
							{
								int16_t temp=0,temp1=0;
   93010:	2300      	movs	r3, #0
   93012:	853b      	strh	r3, [r7, #40]	; 0x28
   93014:	2300      	movs	r3, #0
   93016:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_VPTSTATUS].test_flag = false;
   9301a:	4bbb      	ldr	r3, [pc, #748]	; (93308 <cl_testharnesscommandhandler+0x1fe0>)
   9301c:	2200      	movs	r2, #0
   9301e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   93022:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   93026:	b29b      	uxth	r3, r3
   93028:	853b      	strh	r3, [r7, #40]	; 0x28
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
   9302a:	2018      	movs	r0, #24
   9302c:	49b7      	ldr	r1, [pc, #732]	; (9330c <cl_testharnesscommandhandler+0x1fe4>)
   9302e:	2209      	movs	r2, #9
   93030:	4bb7      	ldr	r3, [pc, #732]	; (93310 <cl_testharnesscommandhandler+0x1fe8>)
   93032:	4798      	blx	r3
   93034:	4603      	mov	r3, r0
   93036:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9303a:	f107 0328 	add.w	r3, r7, #40	; 0x28
   9303e:	2019      	movs	r0, #25
   93040:	4619      	mov	r1, r3
   93042:	2202      	movs	r2, #2
   93044:	4bb2      	ldr	r3, [pc, #712]	; (93310 <cl_testharnesscommandhandler+0x1fe8>)
   93046:	4798      	blx	r3
   93048:	4603      	mov	r3, r0
   9304a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   9304e:	e2a8      	b.n	935a2 <cl_testharnesscommandhandler+0x227a>
   93050:	e2a7      	b.n	935a2 <cl_testharnesscommandhandler+0x227a>
							break;
							case TEST_SENSOR_COND:
							if(cl_indata.bytearray[2]== 1)
   93052:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   93056:	2b01      	cmp	r3, #1
   93058:	d11a      	bne.n	93090 <cl_testharnesscommandhandler+0x1d68>
							{
								Cl_alarmThresholdTable.cond_high_threshold = cl_indata.Twobyte;
   9305a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9305e:	b29a      	uxth	r2, r3
   93060:	4bac      	ldr	r3, [pc, #688]	; (93314 <cl_testharnesscommandhandler+0x1fec>)
   93062:	805a      	strh	r2, [r3, #2]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   93064:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   93068:	84fb      	strh	r3, [r7, #38]	; 0x26
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND_HIGH",8);
   9306a:	2018      	movs	r0, #24
   9306c:	49aa      	ldr	r1, [pc, #680]	; (93318 <cl_testharnesscommandhandler+0x1ff0>)
   9306e:	2208      	movs	r2, #8
   93070:	4ba7      	ldr	r3, [pc, #668]	; (93310 <cl_testharnesscommandhandler+0x1fe8>)
   93072:	4798      	blx	r3
   93074:	4603      	mov	r3, r0
   93076:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9307a:	f107 0326 	add.w	r3, r7, #38	; 0x26
   9307e:	2019      	movs	r0, #25
   93080:	4619      	mov	r1, r3
   93082:	2202      	movs	r2, #2
   93084:	4ba2      	ldr	r3, [pc, #648]	; (93310 <cl_testharnesscommandhandler+0x1fe8>)
   93086:	4798      	blx	r3
   93088:	4603      	mov	r3, r0
   9308a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   9308e:	e073      	b.n	93178 <cl_testharnesscommandhandler+0x1e50>
							}
							else if(cl_indata.bytearray[2]== 0)
   93090:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   93094:	2b00      	cmp	r3, #0
   93096:	d120      	bne.n	930da <cl_testharnesscommandhandler+0x1db2>
							{
								
								int16_t temp=0,temp1=0;
   93098:	2300      	movs	r3, #0
   9309a:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
   9309e:	2300      	movs	r3, #0
   930a0:	84bb      	strh	r3, [r7, #36]	; 0x24
								//temp = cl_indata.Twobyte-1000;
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
   930a2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   930a6:	b29a      	uxth	r2, r3
   930a8:	4b9a      	ldr	r3, [pc, #616]	; (93314 <cl_testharnesscommandhandler+0x1fec>)
   930aa:	801a      	strh	r2, [r3, #0]
								temp1=cl_indata.Twobyte;
   930ac:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   930b0:	b29b      	uxth	r3, r3
   930b2:	84bb      	strh	r3, [r7, #36]	; 0x24
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND_LOW",8);
   930b4:	2018      	movs	r0, #24
   930b6:	4999      	ldr	r1, [pc, #612]	; (9331c <cl_testharnesscommandhandler+0x1ff4>)
   930b8:	2208      	movs	r2, #8
   930ba:	4b95      	ldr	r3, [pc, #596]	; (93310 <cl_testharnesscommandhandler+0x1fe8>)
   930bc:	4798      	blx	r3
   930be:	4603      	mov	r3, r0
   930c0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   930c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
   930c8:	2019      	movs	r0, #25
   930ca:	4619      	mov	r1, r3
   930cc:	2202      	movs	r2, #2
   930ce:	4b90      	ldr	r3, [pc, #576]	; (93310 <cl_testharnesscommandhandler+0x1fe8>)
   930d0:	4798      	blx	r3
   930d2:	4603      	mov	r3, r0
   930d4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   930d8:	e04e      	b.n	93178 <cl_testharnesscommandhandler+0x1e50>
							}
							else if(cl_indata.bytearray[2]== 2)
   930da:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   930de:	2b02      	cmp	r3, #2
   930e0:	d123      	bne.n	9312a <cl_testharnesscommandhandler+0x1e02>
							{
								int16_t temp=0,temp1=0;
   930e2:	2300      	movs	r3, #0
   930e4:	847b      	strh	r3, [r7, #34]	; 0x22
   930e6:	2300      	movs	r3, #0
   930e8:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_COND_STATUS].test_sensord_data =cl_indata.Twobyte;
   930ec:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   930f0:	b29a      	uxth	r2, r3
   930f2:	4b85      	ldr	r3, [pc, #532]	; (93308 <cl_testharnesscommandhandler+0x1fe0>)
   930f4:	839a      	strh	r2, [r3, #28]
								test_sensor_status[SENSOR_COND_STATUS].test_flag = true;
   930f6:	4b84      	ldr	r3, [pc, #528]	; (93308 <cl_testharnesscommandhandler+0x1fe0>)
   930f8:	2201      	movs	r2, #1
   930fa:	779a      	strb	r2, [r3, #30]
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   930fc:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   93100:	b29b      	uxth	r3, r3
   93102:	847b      	strh	r3, [r7, #34]	; 0x22
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   93104:	2018      	movs	r0, #24
   93106:	4986      	ldr	r1, [pc, #536]	; (93320 <cl_testharnesscommandhandler+0x1ff8>)
   93108:	2209      	movs	r2, #9
   9310a:	4b81      	ldr	r3, [pc, #516]	; (93310 <cl_testharnesscommandhandler+0x1fe8>)
   9310c:	4798      	blx	r3
   9310e:	4603      	mov	r3, r0
   93110:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   93114:	f107 0322 	add.w	r3, r7, #34	; 0x22
   93118:	2019      	movs	r0, #25
   9311a:	4619      	mov	r1, r3
   9311c:	2202      	movs	r2, #2
   9311e:	4b7c      	ldr	r3, [pc, #496]	; (93310 <cl_testharnesscommandhandler+0x1fe8>)
   93120:	4798      	blx	r3
   93122:	4603      	mov	r3, r0
   93124:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   93128:	e026      	b.n	93178 <cl_testharnesscommandhandler+0x1e50>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   9312a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9312e:	2b03      	cmp	r3, #3
   93130:	d122      	bne.n	93178 <cl_testharnesscommandhandler+0x1e50>
							{
								int16_t temp=0,temp1=0;
   93132:	f107 0320 	add.w	r3, r7, #32
   93136:	2200      	movs	r2, #0
   93138:	801a      	strh	r2, [r3, #0]
   9313a:	2300      	movs	r3, #0
   9313c:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_COND_STATUS].test_flag = false;
   93140:	4b71      	ldr	r3, [pc, #452]	; (93308 <cl_testharnesscommandhandler+0x1fe0>)
   93142:	2200      	movs	r2, #0
   93144:	779a      	strb	r2, [r3, #30]
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   93146:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9314a:	b29a      	uxth	r2, r3
   9314c:	f107 0320 	add.w	r3, r7, #32
   93150:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CON_LOW",7);
   93152:	2018      	movs	r0, #24
   93154:	4973      	ldr	r1, [pc, #460]	; (93324 <cl_testharnesscommandhandler+0x1ffc>)
   93156:	2207      	movs	r2, #7
   93158:	4b6d      	ldr	r3, [pc, #436]	; (93310 <cl_testharnesscommandhandler+0x1fe8>)
   9315a:	4798      	blx	r3
   9315c:	4603      	mov	r3, r0
   9315e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   93162:	f107 0320 	add.w	r3, r7, #32
   93166:	2019      	movs	r0, #25
   93168:	4619      	mov	r1, r3
   9316a:	2202      	movs	r2, #2
   9316c:	4b68      	ldr	r3, [pc, #416]	; (93310 <cl_testharnesscommandhandler+0x1fe8>)
   9316e:	4798      	blx	r3
   93170:	4603      	mov	r3, r0
   93172:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   93176:	e214      	b.n	935a2 <cl_testharnesscommandhandler+0x227a>
   93178:	e213      	b.n	935a2 <cl_testharnesscommandhandler+0x227a>
							
							case TEST_SENSOR_PS1:
							if(cl_indata.bytearray[2]== 1)
   9317a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9317e:	2b01      	cmp	r3, #1
   93180:	d11f      	bne.n	931c2 <cl_testharnesscommandhandler+0x1e9a>
							{
								Cl_alarmThresholdTable.ps1_high_threshold = cl_indata.Twobyte;
   93182:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   93186:	4b68      	ldr	r3, [pc, #416]	; (93328 <cl_testharnesscommandhandler+0x2000>)
   93188:	4610      	mov	r0, r2
   9318a:	4798      	blx	r3
   9318c:	4602      	mov	r2, r0
   9318e:	4b61      	ldr	r3, [pc, #388]	; (93314 <cl_testharnesscommandhandler+0x1fec>)
   93190:	619a      	str	r2, [r3, #24]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   93192:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   93196:	f107 031e 	add.w	r3, r7, #30
   9319a:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1_HIGH",8);
   9319c:	2018      	movs	r0, #24
   9319e:	4963      	ldr	r1, [pc, #396]	; (9332c <cl_testharnesscommandhandler+0x2004>)
   931a0:	2208      	movs	r2, #8
   931a2:	4b5b      	ldr	r3, [pc, #364]	; (93310 <cl_testharnesscommandhandler+0x1fe8>)
   931a4:	4798      	blx	r3
   931a6:	4603      	mov	r3, r0
   931a8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   931ac:	f107 031e 	add.w	r3, r7, #30
   931b0:	2019      	movs	r0, #25
   931b2:	4619      	mov	r1, r3
   931b4:	2202      	movs	r2, #2
   931b6:	4b56      	ldr	r3, [pc, #344]	; (93310 <cl_testharnesscommandhandler+0x1fe8>)
   931b8:	4798      	blx	r3
   931ba:	4603      	mov	r3, r0
   931bc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   931c0:	e07d      	b.n	932be <cl_testharnesscommandhandler+0x1f96>
							}
							else if (cl_indata.bytearray[2]== 0)
   931c2:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   931c6:	2b00      	cmp	r3, #0
   931c8:	d124      	bne.n	93214 <cl_testharnesscommandhandler+0x1eec>
							{
								int16_t temp=0,temp1=0;
   931ca:	2300      	movs	r3, #0
   931cc:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
   931d0:	2300      	movs	r3, #0
   931d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
								temp = cl_indata.Twobyte-1000;
   931d6:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   931da:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   931de:	b29b      	uxth	r3, r3
   931e0:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
								//temp = cl_indata.Twobyte;
								Cl_alarmThresholdTable.ps1_low_threshold =temp;
   931e4:	f9b7 20d0 	ldrsh.w	r2, [r7, #208]	; 0xd0
   931e8:	4b51      	ldr	r3, [pc, #324]	; (93330 <cl_testharnesscommandhandler+0x2008>)
   931ea:	4610      	mov	r0, r2
   931ec:	4798      	blx	r3
   931ee:	4602      	mov	r2, r0
   931f0:	4b48      	ldr	r3, [pc, #288]	; (93314 <cl_testharnesscommandhandler+0x1fec>)
   931f2:	61da      	str	r2, [r3, #28]
								temp1=temp+1000;
   931f4:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
   931f8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   931fc:	b29b      	uxth	r3, r3
   931fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1_LOW= (-)",12);
   93202:	2018      	movs	r0, #24
   93204:	494b      	ldr	r1, [pc, #300]	; (93334 <cl_testharnesscommandhandler+0x200c>)
   93206:	220c      	movs	r2, #12
   93208:	4b41      	ldr	r3, [pc, #260]	; (93310 <cl_testharnesscommandhandler+0x1fe8>)
   9320a:	4798      	blx	r3
   9320c:	4603      	mov	r3, r0
   9320e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   93212:	e054      	b.n	932be <cl_testharnesscommandhandler+0x1f96>
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp,2);
							}
							else if(cl_indata.bytearray[2]== 2)
   93214:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   93218:	2b02      	cmp	r3, #2
   9321a:	d128      	bne.n	9326e <cl_testharnesscommandhandler+0x1f46>
							{
								int16_t temp=0,temp1=0;
   9321c:	f107 031c 	add.w	r3, r7, #28
   93220:	2200      	movs	r2, #0
   93222:	801a      	strh	r2, [r3, #0]
   93224:	2300      	movs	r3, #0
   93226:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_PS1STATUS].test_sensord_data =cl_indata.Twobyte;
   9322a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9322e:	b29a      	uxth	r2, r3
   93230:	4b35      	ldr	r3, [pc, #212]	; (93308 <cl_testharnesscommandhandler+0x1fe0>)
   93232:	871a      	strh	r2, [r3, #56]	; 0x38
								test_sensor_status[SENSOR_PS1STATUS].test_flag = true;
   93234:	4b34      	ldr	r3, [pc, #208]	; (93308 <cl_testharnesscommandhandler+0x1fe0>)
   93236:	2201      	movs	r2, #1
   93238:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   9323c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   93240:	b29a      	uxth	r2, r3
   93242:	f107 031c 	add.w	r3, r7, #28
   93246:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   93248:	2018      	movs	r0, #24
   9324a:	4935      	ldr	r1, [pc, #212]	; (93320 <cl_testharnesscommandhandler+0x1ff8>)
   9324c:	2209      	movs	r2, #9
   9324e:	4b30      	ldr	r3, [pc, #192]	; (93310 <cl_testharnesscommandhandler+0x1fe8>)
   93250:	4798      	blx	r3
   93252:	4603      	mov	r3, r0
   93254:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   93258:	f107 031c 	add.w	r3, r7, #28
   9325c:	2019      	movs	r0, #25
   9325e:	4619      	mov	r1, r3
   93260:	2202      	movs	r2, #2
   93262:	4b2b      	ldr	r3, [pc, #172]	; (93310 <cl_testharnesscommandhandler+0x1fe8>)
   93264:	4798      	blx	r3
   93266:	4603      	mov	r3, r0
   93268:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   9326c:	e027      	b.n	932be <cl_testharnesscommandhandler+0x1f96>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   9326e:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   93272:	2b03      	cmp	r3, #3
   93274:	d123      	bne.n	932be <cl_testharnesscommandhandler+0x1f96>
							{
								int16_t temp=0,temp1=0;
   93276:	f107 031a 	add.w	r3, r7, #26
   9327a:	2200      	movs	r2, #0
   9327c:	801a      	strh	r2, [r3, #0]
   9327e:	2300      	movs	r3, #0
   93280:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_PS1STATUS].test_flag = false;
   93284:	4b20      	ldr	r3, [pc, #128]	; (93308 <cl_testharnesscommandhandler+0x1fe0>)
   93286:	2200      	movs	r2, #0
   93288:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   9328c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   93290:	b29a      	uxth	r2, r3
   93292:	f107 031a 	add.w	r3, r7, #26
   93296:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
   93298:	2018      	movs	r0, #24
   9329a:	491c      	ldr	r1, [pc, #112]	; (9330c <cl_testharnesscommandhandler+0x1fe4>)
   9329c:	2209      	movs	r2, #9
   9329e:	4b1c      	ldr	r3, [pc, #112]	; (93310 <cl_testharnesscommandhandler+0x1fe8>)
   932a0:	4798      	blx	r3
   932a2:	4603      	mov	r3, r0
   932a4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   932a8:	f107 031a 	add.w	r3, r7, #26
   932ac:	2019      	movs	r0, #25
   932ae:	4619      	mov	r1, r3
   932b0:	2202      	movs	r2, #2
   932b2:	4b17      	ldr	r3, [pc, #92]	; (93310 <cl_testharnesscommandhandler+0x1fe8>)
   932b4:	4798      	blx	r3
   932b6:	4603      	mov	r3, r0
   932b8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   932bc:	e171      	b.n	935a2 <cl_testharnesscommandhandler+0x227a>
   932be:	e170      	b.n	935a2 <cl_testharnesscommandhandler+0x227a>
							case TEST_SENSOR_PS2:
							if(cl_indata.bytearray[2]== 1)
   932c0:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   932c4:	2b01      	cmp	r3, #1
   932c6:	d139      	bne.n	9333c <cl_testharnesscommandhandler+0x2014>
							{
								Cl_alarmThresholdTable.ps2_high_threshold = cl_indata.Twobyte;
   932c8:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   932cc:	4b16      	ldr	r3, [pc, #88]	; (93328 <cl_testharnesscommandhandler+0x2000>)
   932ce:	4610      	mov	r0, r2
   932d0:	4798      	blx	r3
   932d2:	4602      	mov	r2, r0
   932d4:	4b0f      	ldr	r3, [pc, #60]	; (93314 <cl_testharnesscommandhandler+0x1fec>)
   932d6:	621a      	str	r2, [r3, #32]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   932d8:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   932dc:	f107 0318 	add.w	r3, r7, #24
   932e0:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2",3);
   932e2:	2018      	movs	r0, #24
   932e4:	4914      	ldr	r1, [pc, #80]	; (93338 <cl_testharnesscommandhandler+0x2010>)
   932e6:	2203      	movs	r2, #3
   932e8:	4b09      	ldr	r3, [pc, #36]	; (93310 <cl_testharnesscommandhandler+0x1fe8>)
   932ea:	4798      	blx	r3
   932ec:	4603      	mov	r3, r0
   932ee:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   932f2:	f107 0318 	add.w	r3, r7, #24
   932f6:	2019      	movs	r0, #25
   932f8:	4619      	mov	r1, r3
   932fa:	2202      	movs	r2, #2
   932fc:	4b04      	ldr	r3, [pc, #16]	; (93310 <cl_testharnesscommandhandler+0x1fe8>)
   932fe:	4798      	blx	r3
   93300:	4603      	mov	r3, r0
   93302:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   93306:	e097      	b.n	93438 <cl_testharnesscommandhandler+0x2110>
   93308:	200727d8 	.word	0x200727d8
   9330c:	000aa4c8 	.word	0x000aa4c8
   93310:	0009d1e9 	.word	0x0009d1e9
   93314:	200722a8 	.word	0x200722a8
   93318:	000aa4d0 	.word	0x000aa4d0
   9331c:	000aa4dc 	.word	0x000aa4dc
   93320:	000aa458 	.word	0x000aa458
   93324:	000aa4e8 	.word	0x000aa4e8
   93328:	000a8255 	.word	0x000a8255
   9332c:	000aa4f0 	.word	0x000aa4f0
   93330:	000a825d 	.word	0x000a825d
   93334:	000aa4fc 	.word	0x000aa4fc
   93338:	000aa50c 	.word	0x000aa50c
							}
							else if (cl_indata.bytearray[2]== 0)
   9333c:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   93340:	2b00      	cmp	r3, #0
   93342:	d124      	bne.n	9338e <cl_testharnesscommandhandler+0x2066>
							{
								int16_t temp=0,temp1=0;
   93344:	2300      	movs	r3, #0
   93346:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
   9334a:	2300      	movs	r3, #0
   9334c:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
								temp = cl_indata.Twobyte-1000;
   93350:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   93354:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   93358:	b29b      	uxth	r3, r3
   9335a:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
								Cl_alarmThresholdTable.ps2_low_threshold = temp;
   9335e:	f9b7 20c8 	ldrsh.w	r2, [r7, #200]	; 0xc8
   93362:	4bb1      	ldr	r3, [pc, #708]	; (93628 <cl_testharnesscommandhandler+0x2300>)
   93364:	4610      	mov	r0, r2
   93366:	4798      	blx	r3
   93368:	4602      	mov	r2, r0
   9336a:	4bb0      	ldr	r3, [pc, #704]	; (9362c <cl_testharnesscommandhandler+0x2304>)
   9336c:	625a      	str	r2, [r3, #36]	; 0x24
								temp1=temp+1000;
   9336e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
   93372:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   93376:	b29b      	uxth	r3, r3
   93378:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW= (-)",12);
   9337c:	2018      	movs	r0, #24
   9337e:	49ac      	ldr	r1, [pc, #688]	; (93630 <cl_testharnesscommandhandler+0x2308>)
   93380:	220c      	movs	r2, #12
   93382:	4bac      	ldr	r3, [pc, #688]	; (93634 <cl_testharnesscommandhandler+0x230c>)
   93384:	4798      	blx	r3
   93386:	4603      	mov	r3, r0
   93388:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   9338c:	e054      	b.n	93438 <cl_testharnesscommandhandler+0x2110>
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
							}
							else if(cl_indata.bytearray[2]== 2)
   9338e:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   93392:	2b02      	cmp	r3, #2
   93394:	d128      	bne.n	933e8 <cl_testharnesscommandhandler+0x20c0>
							{
								int16_t temp=0,temp1=0;
   93396:	f107 0316 	add.w	r3, r7, #22
   9339a:	2200      	movs	r2, #0
   9339c:	801a      	strh	r2, [r3, #0]
   9339e:	2300      	movs	r3, #0
   933a0:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_PS2STATUS].test_sensord_data =cl_indata.Twobyte;
   933a4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   933a8:	b29a      	uxth	r2, r3
   933aa:	4ba3      	ldr	r3, [pc, #652]	; (93638 <cl_testharnesscommandhandler+0x2310>)
   933ac:	879a      	strh	r2, [r3, #60]	; 0x3c
								test_sensor_status[SENSOR_PS2STATUS].test_flag = true;
   933ae:	4ba2      	ldr	r3, [pc, #648]	; (93638 <cl_testharnesscommandhandler+0x2310>)
   933b0:	2201      	movs	r2, #1
   933b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   933b6:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   933ba:	b29a      	uxth	r2, r3
   933bc:	f107 0316 	add.w	r3, r7, #22
   933c0:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   933c2:	2018      	movs	r0, #24
   933c4:	499d      	ldr	r1, [pc, #628]	; (9363c <cl_testharnesscommandhandler+0x2314>)
   933c6:	2209      	movs	r2, #9
   933c8:	4b9a      	ldr	r3, [pc, #616]	; (93634 <cl_testharnesscommandhandler+0x230c>)
   933ca:	4798      	blx	r3
   933cc:	4603      	mov	r3, r0
   933ce:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   933d2:	f107 0316 	add.w	r3, r7, #22
   933d6:	2019      	movs	r0, #25
   933d8:	4619      	mov	r1, r3
   933da:	2202      	movs	r2, #2
   933dc:	4b95      	ldr	r3, [pc, #596]	; (93634 <cl_testharnesscommandhandler+0x230c>)
   933de:	4798      	blx	r3
   933e0:	4603      	mov	r3, r0
   933e2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   933e6:	e027      	b.n	93438 <cl_testharnesscommandhandler+0x2110>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   933e8:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   933ec:	2b03      	cmp	r3, #3
   933ee:	d123      	bne.n	93438 <cl_testharnesscommandhandler+0x2110>
							{
								int16_t temp=0,temp1=0;
   933f0:	f107 0314 	add.w	r3, r7, #20
   933f4:	2200      	movs	r2, #0
   933f6:	801a      	strh	r2, [r3, #0]
   933f8:	2300      	movs	r3, #0
   933fa:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_PS2STATUS].test_flag = false;
   933fe:	4b8e      	ldr	r3, [pc, #568]	; (93638 <cl_testharnesscommandhandler+0x2310>)
   93400:	2200      	movs	r2, #0
   93402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   93406:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9340a:	b29a      	uxth	r2, r3
   9340c:	f107 0314 	add.w	r3, r7, #20
   93410:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
   93412:	2018      	movs	r0, #24
   93414:	498a      	ldr	r1, [pc, #552]	; (93640 <cl_testharnesscommandhandler+0x2318>)
   93416:	2209      	movs	r2, #9
   93418:	4b86      	ldr	r3, [pc, #536]	; (93634 <cl_testharnesscommandhandler+0x230c>)
   9341a:	4798      	blx	r3
   9341c:	4603      	mov	r3, r0
   9341e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   93422:	f107 0314 	add.w	r3, r7, #20
   93426:	2019      	movs	r0, #25
   93428:	4619      	mov	r1, r3
   9342a:	2202      	movs	r2, #2
   9342c:	4b81      	ldr	r3, [pc, #516]	; (93634 <cl_testharnesscommandhandler+0x230c>)
   9342e:	4798      	blx	r3
   93430:	4603      	mov	r3, r0
   93432:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   93436:	e0b4      	b.n	935a2 <cl_testharnesscommandhandler+0x227a>
   93438:	e0b3      	b.n	935a2 <cl_testharnesscommandhandler+0x227a>
							case TEST_SENSOR_PS3:
							if(cl_indata.bytearray[2]== 1)
   9343a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9343e:	2b01      	cmp	r3, #1
   93440:	d11f      	bne.n	93482 <cl_testharnesscommandhandler+0x215a>
							{
								Cl_alarmThresholdTable.ps3_high_threshold = cl_indata.Twobyte;
   93442:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   93446:	4b7f      	ldr	r3, [pc, #508]	; (93644 <cl_testharnesscommandhandler+0x231c>)
   93448:	4610      	mov	r0, r2
   9344a:	4798      	blx	r3
   9344c:	4602      	mov	r2, r0
   9344e:	4b77      	ldr	r3, [pc, #476]	; (9362c <cl_testharnesscommandhandler+0x2304>)
   93450:	629a      	str	r2, [r3, #40]	; 0x28
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   93452:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   93456:	f107 0312 	add.w	r3, r7, #18
   9345a:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3",3);
   9345c:	2018      	movs	r0, #24
   9345e:	497a      	ldr	r1, [pc, #488]	; (93648 <cl_testharnesscommandhandler+0x2320>)
   93460:	2203      	movs	r2, #3
   93462:	4b74      	ldr	r3, [pc, #464]	; (93634 <cl_testharnesscommandhandler+0x230c>)
   93464:	4798      	blx	r3
   93466:	4603      	mov	r3, r0
   93468:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9346c:	f107 0312 	add.w	r3, r7, #18
   93470:	2019      	movs	r0, #25
   93472:	4619      	mov	r1, r3
   93474:	2202      	movs	r2, #2
   93476:	4b6f      	ldr	r3, [pc, #444]	; (93634 <cl_testharnesscommandhandler+0x230c>)
   93478:	4798      	blx	r3
   9347a:	4603      	mov	r3, r0
   9347c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   93480:	e07e      	b.n	93580 <cl_testharnesscommandhandler+0x2258>
							}
							else if(cl_indata.bytearray[2]== 0)
   93482:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   93486:	2b00      	cmp	r3, #0
   93488:	d124      	bne.n	934d4 <cl_testharnesscommandhandler+0x21ac>
							{
								int16_t temp=0,temp1=0;
   9348a:	2300      	movs	r3, #0
   9348c:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
   93490:	2300      	movs	r3, #0
   93492:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
								temp = cl_indata.Twobyte-1000;
   93496:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9349a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   9349e:	b29b      	uxth	r3, r3
   934a0:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
								//temp = cl_indata.Twobyte;
								Cl_alarmThresholdTable.ps3_low_threshold = temp;
   934a4:	f9b7 20c0 	ldrsh.w	r2, [r7, #192]	; 0xc0
   934a8:	4b5f      	ldr	r3, [pc, #380]	; (93628 <cl_testharnesscommandhandler+0x2300>)
   934aa:	4610      	mov	r0, r2
   934ac:	4798      	blx	r3
   934ae:	4602      	mov	r2, r0
   934b0:	4b5e      	ldr	r3, [pc, #376]	; (9362c <cl_testharnesscommandhandler+0x2304>)
   934b2:	62da      	str	r2, [r3, #44]	; 0x2c
								temp1=temp+1000;
   934b4:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
   934b8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   934bc:	b29b      	uxth	r3, r3
   934be:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW= (-)",12);
   934c2:	2018      	movs	r0, #24
   934c4:	4961      	ldr	r1, [pc, #388]	; (9364c <cl_testharnesscommandhandler+0x2324>)
   934c6:	220c      	movs	r2, #12
   934c8:	4b5a      	ldr	r3, [pc, #360]	; (93634 <cl_testharnesscommandhandler+0x230c>)
   934ca:	4798      	blx	r3
   934cc:	4603      	mov	r3, r0
   934ce:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   934d2:	e055      	b.n	93580 <cl_testharnesscommandhandler+0x2258>
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.ps3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 2)
   934d4:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   934d8:	2b02      	cmp	r3, #2
   934da:	d129      	bne.n	93530 <cl_testharnesscommandhandler+0x2208>
							{
								int16_t temp=0,temp1=0;
   934dc:	f107 0310 	add.w	r3, r7, #16
   934e0:	2200      	movs	r2, #0
   934e2:	801a      	strh	r2, [r3, #0]
   934e4:	2300      	movs	r3, #0
   934e6:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_PS3STATUS].test_sensord_data =cl_indata.Twobyte;
   934ea:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   934ee:	b29a      	uxth	r2, r3
   934f0:	4b51      	ldr	r3, [pc, #324]	; (93638 <cl_testharnesscommandhandler+0x2310>)
   934f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
								test_sensor_status[SENSOR_PS3STATUS].test_flag = true;
   934f6:	4b50      	ldr	r3, [pc, #320]	; (93638 <cl_testharnesscommandhandler+0x2310>)
   934f8:	2201      	movs	r2, #1
   934fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   934fe:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   93502:	b29a      	uxth	r2, r3
   93504:	f107 0310 	add.w	r3, r7, #16
   93508:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   9350a:	2018      	movs	r0, #24
   9350c:	494b      	ldr	r1, [pc, #300]	; (9363c <cl_testharnesscommandhandler+0x2314>)
   9350e:	2209      	movs	r2, #9
   93510:	4b48      	ldr	r3, [pc, #288]	; (93634 <cl_testharnesscommandhandler+0x230c>)
   93512:	4798      	blx	r3
   93514:	4603      	mov	r3, r0
   93516:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9351a:	f107 0310 	add.w	r3, r7, #16
   9351e:	2019      	movs	r0, #25
   93520:	4619      	mov	r1, r3
   93522:	2202      	movs	r2, #2
   93524:	4b43      	ldr	r3, [pc, #268]	; (93634 <cl_testharnesscommandhandler+0x230c>)
   93526:	4798      	blx	r3
   93528:	4603      	mov	r3, r0
   9352a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   9352e:	e027      	b.n	93580 <cl_testharnesscommandhandler+0x2258>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   93530:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   93534:	2b03      	cmp	r3, #3
   93536:	d123      	bne.n	93580 <cl_testharnesscommandhandler+0x2258>
							{
								int16_t temp=0,temp1=0;
   93538:	f107 030e 	add.w	r3, r7, #14
   9353c:	2200      	movs	r2, #0
   9353e:	801a      	strh	r2, [r3, #0]
   93540:	2300      	movs	r3, #0
   93542:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_PS3STATUS].test_flag = false;
   93546:	4b3c      	ldr	r3, [pc, #240]	; (93638 <cl_testharnesscommandhandler+0x2310>)
   93548:	2200      	movs	r2, #0
   9354a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   9354e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   93552:	b29a      	uxth	r2, r3
   93554:	f107 030e 	add.w	r3, r7, #14
   93558:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW",9);
   9355a:	2018      	movs	r0, #24
   9355c:	493c      	ldr	r1, [pc, #240]	; (93650 <cl_testharnesscommandhandler+0x2328>)
   9355e:	2209      	movs	r2, #9
   93560:	4b34      	ldr	r3, [pc, #208]	; (93634 <cl_testharnesscommandhandler+0x230c>)
   93562:	4798      	blx	r3
   93564:	4603      	mov	r3, r0
   93566:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9356a:	f107 030e 	add.w	r3, r7, #14
   9356e:	2019      	movs	r0, #25
   93570:	4619      	mov	r1, r3
   93572:	2202      	movs	r2, #2
   93574:	4b2f      	ldr	r3, [pc, #188]	; (93634 <cl_testharnesscommandhandler+0x230c>)
   93576:	4798      	blx	r3
   93578:	4603      	mov	r3, r0
   9357a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   9357e:	e010      	b.n	935a2 <cl_testharnesscommandhandler+0x227a>
   93580:	e00f      	b.n	935a2 <cl_testharnesscommandhandler+0x227a>
							
							case 255:
							if(cl_indata.bytearray[2]== 1)
   93582:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   93586:	2b01      	cmp	r3, #1
   93588:	d105      	bne.n	93596 <cl_testharnesscommandhandler+0x226e>
							{
								Cl_alarmThresholdTable.cond_high_threshold = cl_indata.Twobyte;
   9358a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9358e:	b29a      	uxth	r2, r3
   93590:	4b26      	ldr	r3, [pc, #152]	; (9362c <cl_testharnesscommandhandler+0x2304>)
   93592:	805a      	strh	r2, [r3, #2]
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
   93594:	e004      	b.n	935a0 <cl_testharnesscommandhandler+0x2278>
							if(cl_indata.bytearray[2]== 1)
							{
								Cl_alarmThresholdTable.cond_high_threshold = cl_indata.Twobyte;
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
   93596:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9359a:	b29a      	uxth	r2, r3
   9359c:	4b23      	ldr	r3, [pc, #140]	; (9362c <cl_testharnesscommandhandler+0x2304>)
   9359e:	801a      	strh	r2, [r3, #0]
							}
							break;
   935a0:	bf00      	nop
							default:break;
						}
		break;
   935a2:	e32d      	b.n	93c00 <cl_testharnesscommandhandler+0x28d8>
		
		case TEST_GET_SENSORDATA:
//		sensordata =0;
		switch(TestMsg.data.byte[1] )
   935a4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   935a8:	3b05      	subs	r3, #5
   935aa:	2b11      	cmp	r3, #17
   935ac:	f200 8325 	bhi.w	93bfa <cl_testharnesscommandhandler+0x28d2>
   935b0:	a201      	add	r2, pc, #4	; (adr r2, 935b8 <cl_testharnesscommandhandler+0x2290>)
   935b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   935b6:	bf00      	nop
   935b8:	00093661 	.word	0x00093661
   935bc:	000936ff 	.word	0x000936ff
   935c0:	0009379d 	.word	0x0009379d
   935c4:	00093bfb 	.word	0x00093bfb
   935c8:	00093bfb 	.word	0x00093bfb
   935cc:	00093bfb 	.word	0x00093bfb
   935d0:	00093bfb 	.word	0x00093bfb
   935d4:	00093a0f 	.word	0x00093a0f
   935d8:	00093ab3 	.word	0x00093ab3
   935dc:	00093b57 	.word	0x00093b57
   935e0:	00093bfb 	.word	0x00093bfb
   935e4:	00093bfb 	.word	0x00093bfb
   935e8:	00093815 	.word	0x00093815
   935ec:	00093879 	.word	0x00093879
   935f0:	00093bfb 	.word	0x00093bfb
   935f4:	00093945 	.word	0x00093945
   935f8:	00093601 	.word	0x00093601
   935fc:	00093615 	.word	0x00093615
		{
			
			case TEST_SENSOR_HP_1:
			pdataarray = (Cl_Uint8Type *)"HP_START=";
   93600:	4b14      	ldr	r3, [pc, #80]	; (93654 <cl_testharnesscommandhandler+0x232c>)
   93602:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			//int16_t heparin_start;
			cl_testgetsensordata(SENSOR_HP_START,&sensordata);
   93606:	f107 0392 	add.w	r3, r7, #146	; 0x92
   9360a:	2017      	movs	r0, #23
   9360c:	4619      	mov	r1, r3
   9360e:	4b12      	ldr	r3, [pc, #72]	; (93658 <cl_testharnesscommandhandler+0x2330>)
   93610:	4798      	blx	r3
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&sensordata,2);
			
			break;
   93612:	e2f3      	b.n	93bfc <cl_testharnesscommandhandler+0x28d4>
			case  TEST_SENSOR_HP_2:
			cl_testgetsensordata(SENSOR_HP_END,&sensordata);
   93614:	f107 0392 	add.w	r3, r7, #146	; 0x92
   93618:	2018      	movs	r0, #24
   9361a:	4619      	mov	r1, r3
   9361c:	4b0e      	ldr	r3, [pc, #56]	; (93658 <cl_testharnesscommandhandler+0x2330>)
   9361e:	4798      	blx	r3
						pdataarray = (Cl_Uint8Type *)"HP_END=";
   93620:	4b0e      	ldr	r3, [pc, #56]	; (9365c <cl_testharnesscommandhandler+0x2334>)
   93622:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			//int16_t heparin_start;
			
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&sensordata,2);
			break;
   93626:	e2e9      	b.n	93bfc <cl_testharnesscommandhandler+0x28d4>
   93628:	000a825d 	.word	0x000a825d
   9362c:	200722a8 	.word	0x200722a8
   93630:	000aa510 	.word	0x000aa510
   93634:	0009d1e9 	.word	0x0009d1e9
   93638:	200727d8 	.word	0x200727d8
   9363c:	000aa458 	.word	0x000aa458
   93640:	000aa4c8 	.word	0x000aa4c8
   93644:	000a8255 	.word	0x000a8255
   93648:	000aa520 	.word	0x000aa520
   9364c:	000aa524 	.word	0x000aa524
   93650:	000aa534 	.word	0x000aa534
   93654:	000aa53c 	.word	0x000aa53c
   93658:	00093c61 	.word	0x00093c61
   9365c:	000aa548 	.word	0x000aa548
			case TEST_SENSOR_PS1:
			
			cl_testgetsensordata(SENSOR_PS1STATUS,&sensordata);
   93660:	f107 0392 	add.w	r3, r7, #146	; 0x92
   93664:	200e      	movs	r0, #14
   93666:	4619      	mov	r1, r3
   93668:	4bab      	ldr	r3, [pc, #684]	; (93918 <cl_testharnesscommandhandler+0x25f0>)
   9366a:	4798      	blx	r3
			pdataarray = (Cl_Uint8Type *)"PS1=";
   9366c:	4bab      	ldr	r3, [pc, #684]	; (9391c <cl_testharnesscommandhandler+0x25f4>)
   9366e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		//	sensordatamillivolts = ((sensordata* 3300 /4096) ) - 870;
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   93672:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
   93676:	b21b      	sxth	r3, r3
   93678:	f640 42e4 	movw	r2, #3300	; 0xce4
   9367c:	fb02 f303 	mul.w	r3, r2, r3
   93680:	2b00      	cmp	r3, #0
   93682:	da01      	bge.n	93688 <cl_testharnesscommandhandler+0x2360>
   93684:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   93688:	131b      	asrs	r3, r3, #12
   9368a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			
				Pressuredatainmillibars =  ((sensordatamillivolts - 860)/0.78 ) ;
   9368e:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   93692:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
   93696:	4ba2      	ldr	r3, [pc, #648]	; (93920 <cl_testharnesscommandhandler+0x25f8>)
   93698:	4610      	mov	r0, r2
   9369a:	4798      	blx	r3
   9369c:	4602      	mov	r2, r0
   9369e:	460b      	mov	r3, r1
   936a0:	4ca0      	ldr	r4, [pc, #640]	; (93924 <cl_testharnesscommandhandler+0x25fc>)
   936a2:	4610      	mov	r0, r2
   936a4:	4619      	mov	r1, r3
   936a6:	a398      	add	r3, pc, #608	; (adr r3, 93908 <cl_testharnesscommandhandler+0x25e0>)
   936a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   936ac:	47a0      	blx	r4
   936ae:	4602      	mov	r2, r0
   936b0:	460b      	mov	r3, r1
   936b2:	4610      	mov	r0, r2
   936b4:	4619      	mov	r1, r3
   936b6:	4b9c      	ldr	r3, [pc, #624]	; (93928 <cl_testharnesscommandhandler+0x2600>)
   936b8:	4798      	blx	r3
   936ba:	4603      	mov	r3, r0
   936bc:	b29b      	uxth	r3, r3
   936be:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
				if (  sensordatamillivolts < 1360 )
   936c2:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   936c6:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
   936ca:	da08      	bge.n	936de <cl_testharnesscommandhandler+0x23b6>
				{
					Pressuredatainmillibars = Pressuredatainmillibars- 50 ;
   936cc:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
   936d0:	b29b      	uxth	r3, r3
   936d2:	3b32      	subs	r3, #50	; 0x32
   936d4:	b29b      	uxth	r3, r3
   936d6:	b29b      	uxth	r3, r3
   936d8:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
   936dc:	e00e      	b.n	936fc <cl_testharnesscommandhandler+0x23d4>
				}
				else if(  sensordatamillivolts < 1650 )
   936de:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   936e2:	f240 6271 	movw	r2, #1649	; 0x671
   936e6:	4293      	cmp	r3, r2
   936e8:	dc08      	bgt.n	936fc <cl_testharnesscommandhandler+0x23d4>
				{
					Pressuredatainmillibars = Pressuredatainmillibars- 25 ;
   936ea:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
   936ee:	b29b      	uxth	r3, r3
   936f0:	3b19      	subs	r3, #25
   936f2:	b29b      	uxth	r3, r3
   936f4:	b29b      	uxth	r3, r3
   936f6:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
				
			}
			#endif

			
			break;
   936fa:	e27f      	b.n	93bfc <cl_testharnesscommandhandler+0x28d4>
   936fc:	e27e      	b.n	93bfc <cl_testharnesscommandhandler+0x28d4>
			case TEST_SENSOR_PS2:
			cl_testgetsensordata(SENSOR_PS2STATUS,&sensordata);
   936fe:	f107 0392 	add.w	r3, r7, #146	; 0x92
   93702:	200f      	movs	r0, #15
   93704:	4619      	mov	r1, r3
   93706:	4b84      	ldr	r3, [pc, #528]	; (93918 <cl_testharnesscommandhandler+0x25f0>)
   93708:	4798      	blx	r3
					pdataarray = (Cl_Uint8Type *)"PS2=";
   9370a:	4b88      	ldr	r3, [pc, #544]	; (9392c <cl_testharnesscommandhandler+0x2604>)
   9370c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   93710:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
   93714:	b21b      	sxth	r3, r3
   93716:	f640 42e4 	movw	r2, #3300	; 0xce4
   9371a:	fb02 f303 	mul.w	r3, r2, r3
   9371e:	2b00      	cmp	r3, #0
   93720:	da01      	bge.n	93726 <cl_testharnesscommandhandler+0x23fe>
   93722:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   93726:	131b      	asrs	r3, r3, #12
   93728:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			Pressuredatainmillibars =  ((sensordatamillivolts - 860)/0.78 ) ;
   9372c:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   93730:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
   93734:	4b7a      	ldr	r3, [pc, #488]	; (93920 <cl_testharnesscommandhandler+0x25f8>)
   93736:	4610      	mov	r0, r2
   93738:	4798      	blx	r3
   9373a:	4602      	mov	r2, r0
   9373c:	460b      	mov	r3, r1
   9373e:	4c79      	ldr	r4, [pc, #484]	; (93924 <cl_testharnesscommandhandler+0x25fc>)
   93740:	4610      	mov	r0, r2
   93742:	4619      	mov	r1, r3
   93744:	a370      	add	r3, pc, #448	; (adr r3, 93908 <cl_testharnesscommandhandler+0x25e0>)
   93746:	e9d3 2300 	ldrd	r2, r3, [r3]
   9374a:	47a0      	blx	r4
   9374c:	4602      	mov	r2, r0
   9374e:	460b      	mov	r3, r1
   93750:	4610      	mov	r0, r2
   93752:	4619      	mov	r1, r3
   93754:	4b74      	ldr	r3, [pc, #464]	; (93928 <cl_testharnesscommandhandler+0x2600>)
   93756:	4798      	blx	r3
   93758:	4603      	mov	r3, r0
   9375a:	b29b      	uxth	r3, r3
   9375c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			if (  sensordatamillivolts < 1360 )
   93760:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   93764:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
   93768:	da08      	bge.n	9377c <cl_testharnesscommandhandler+0x2454>
			{
				Pressuredatainmillibars = Pressuredatainmillibars- 50 ;
   9376a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
   9376e:	b29b      	uxth	r3, r3
   93770:	3b32      	subs	r3, #50	; 0x32
   93772:	b29b      	uxth	r3, r3
   93774:	b29b      	uxth	r3, r3
   93776:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
   9377a:	e00e      	b.n	9379a <cl_testharnesscommandhandler+0x2472>
			}
			else if(  sensordatamillivolts < 1650 )
   9377c:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   93780:	f240 6271 	movw	r2, #1649	; 0x671
   93784:	4293      	cmp	r3, r2
   93786:	dc08      	bgt.n	9379a <cl_testharnesscommandhandler+0x2472>
			{
				Pressuredatainmillibars = Pressuredatainmillibars- 25 ;
   93788:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
   9378c:	b29b      	uxth	r3, r3
   9378e:	3b19      	subs	r3, #25
   93790:	b29b      	uxth	r3, r3
   93792:	b29b      	uxth	r3, r3
   93794:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif

			break;
   93798:	e230      	b.n	93bfc <cl_testharnesscommandhandler+0x28d4>
   9379a:	e22f      	b.n	93bfc <cl_testharnesscommandhandler+0x28d4>
			case TEST_SENSOR_PS3:
			cl_testgetsensordata(PS3_HIGH_THRESHOLD,&sensordata);
   9379c:	f107 0392 	add.w	r3, r7, #146	; 0x92
   937a0:	2027      	movs	r0, #39	; 0x27
   937a2:	4619      	mov	r1, r3
   937a4:	4b5c      	ldr	r3, [pc, #368]	; (93918 <cl_testharnesscommandhandler+0x25f0>)
   937a6:	4798      	blx	r3
					pdataarray = (Cl_Uint8Type *)"PS3=";
   937a8:	4b61      	ldr	r3, [pc, #388]	; (93930 <cl_testharnesscommandhandler+0x2608>)
   937aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   937ae:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
   937b2:	b21b      	sxth	r3, r3
   937b4:	f640 42e4 	movw	r2, #3300	; 0xce4
   937b8:	fb02 f303 	mul.w	r3, r2, r3
   937bc:	2b00      	cmp	r3, #0
   937be:	da01      	bge.n	937c4 <cl_testharnesscommandhandler+0x249c>
   937c0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   937c4:	131b      	asrs	r3, r3, #12
   937c6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
		//	Pressuredatainmillibars =  (sensordatamillivolts/1.485 ) ;
			Pressuredatainmillibars = 1000 * (sensordatamillivolts - 1100)/1100;
   937ca:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   937ce:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
   937d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   937d6:	fb02 f303 	mul.w	r3, r2, r3
   937da:	4a56      	ldr	r2, [pc, #344]	; (93934 <cl_testharnesscommandhandler+0x260c>)
   937dc:	fb82 1203 	smull	r1, r2, r2, r3
   937e0:	1252      	asrs	r2, r2, #9
   937e2:	17db      	asrs	r3, r3, #31
   937e4:	1ad3      	subs	r3, r2, r3
   937e6:	b29b      	uxth	r3, r3
   937e8:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
		
			// if(Pressuredatainmillibars> 0)
			{
						//	Pressuredatainmillibars = Pressuredatainmillibars - 1000;
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   937ec:	2018      	movs	r0, #24
   937ee:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   937f2:	2204      	movs	r2, #4
   937f4:	4b50      	ldr	r3, [pc, #320]	; (93938 <cl_testharnesscommandhandler+0x2610>)
   937f6:	4798      	blx	r3
   937f8:	4603      	mov	r3, r0
   937fa:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
   937fe:	f107 0390 	add.w	r3, r7, #144	; 0x90
   93802:	2019      	movs	r0, #25
   93804:	4619      	mov	r1, r3
   93806:	2202      	movs	r2, #2
   93808:	4b4b      	ldr	r3, [pc, #300]	; (93938 <cl_testharnesscommandhandler+0x2610>)
   9380a:	4798      	blx	r3
   9380c:	4603      	mov	r3, r0
   9380e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif
			break;
   93812:	e1f3      	b.n	93bfc <cl_testharnesscommandhandler+0x28d4>
			case TEST_SENSOR_APT:
			cl_testgetsensordata(APTSTATUS_HIGH,&sensordata);
   93814:	f107 0392 	add.w	r3, r7, #146	; 0x92
   93818:	2024      	movs	r0, #36	; 0x24
   9381a:	4619      	mov	r1, r3
   9381c:	4b3e      	ldr	r3, [pc, #248]	; (93918 <cl_testharnesscommandhandler+0x25f0>)
   9381e:	4798      	blx	r3
					
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   93820:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
   93824:	b21b      	sxth	r3, r3
   93826:	f640 42e4 	movw	r2, #3300	; 0xce4
   9382a:	fb02 f303 	mul.w	r3, r2, r3
   9382e:	2b00      	cmp	r3, #0
   93830:	da01      	bge.n	93836 <cl_testharnesscommandhandler+0x250e>
   93832:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   93836:	131b      	asrs	r3, r3, #12
   93838:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			
			Pressuredatainmillibars = (sensordatamillivolts - 1640)/0.6;
   9383c:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   93840:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
   93844:	4b36      	ldr	r3, [pc, #216]	; (93920 <cl_testharnesscommandhandler+0x25f8>)
   93846:	4610      	mov	r0, r2
   93848:	4798      	blx	r3
   9384a:	4602      	mov	r2, r0
   9384c:	460b      	mov	r3, r1
   9384e:	4c35      	ldr	r4, [pc, #212]	; (93924 <cl_testharnesscommandhandler+0x25fc>)
   93850:	4610      	mov	r0, r2
   93852:	4619      	mov	r1, r3
   93854:	a32e      	add	r3, pc, #184	; (adr r3, 93910 <cl_testharnesscommandhandler+0x25e8>)
   93856:	e9d3 2300 	ldrd	r2, r3, [r3]
   9385a:	47a0      	blx	r4
   9385c:	4602      	mov	r2, r0
   9385e:	460b      	mov	r3, r1
   93860:	4610      	mov	r0, r2
   93862:	4619      	mov	r1, r3
   93864:	4b30      	ldr	r3, [pc, #192]	; (93928 <cl_testharnesscommandhandler+0x2600>)
   93866:	4798      	blx	r3
   93868:	4603      	mov	r3, r0
   9386a:	b29b      	uxth	r3, r3
   9386c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			//if(sensordatamillivolts > 1600 )
			{
				pdataarray = (Cl_Uint8Type *)"APT=";
   93870:	4b32      	ldr	r3, [pc, #200]	; (9393c <cl_testharnesscommandhandler+0x2614>)
   93872:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif

			break;
   93876:	e1c1      	b.n	93bfc <cl_testharnesscommandhandler+0x28d4>
			case TEST_SENSOR_VPT:
			cl_testgetsensordata(VPTSTATUS_HIGH,&sensordata);
   93878:	f107 0392 	add.w	r3, r7, #146	; 0x92
   9387c:	2026      	movs	r0, #38	; 0x26
   9387e:	4619      	mov	r1, r3
   93880:	4b25      	ldr	r3, [pc, #148]	; (93918 <cl_testharnesscommandhandler+0x25f0>)
   93882:	4798      	blx	r3
					pdataarray = (Cl_Uint8Type *)"VPT=";
   93884:	4b2e      	ldr	r3, [pc, #184]	; (93940 <cl_testharnesscommandhandler+0x2618>)
   93886:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   9388a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
   9388e:	b21b      	sxth	r3, r3
   93890:	f640 42e4 	movw	r2, #3300	; 0xce4
   93894:	fb02 f303 	mul.w	r3, r2, r3
   93898:	2b00      	cmp	r3, #0
   9389a:	da01      	bge.n	938a0 <cl_testharnesscommandhandler+0x2578>
   9389c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   938a0:	131b      	asrs	r3, r3, #12
   938a2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			Pressuredatainmillibars = (sensordatamillivolts - 1640)/0.6;
   938a6:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   938aa:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
   938ae:	4b1c      	ldr	r3, [pc, #112]	; (93920 <cl_testharnesscommandhandler+0x25f8>)
   938b0:	4610      	mov	r0, r2
   938b2:	4798      	blx	r3
   938b4:	4602      	mov	r2, r0
   938b6:	460b      	mov	r3, r1
   938b8:	4c1a      	ldr	r4, [pc, #104]	; (93924 <cl_testharnesscommandhandler+0x25fc>)
   938ba:	4610      	mov	r0, r2
   938bc:	4619      	mov	r1, r3
   938be:	a314      	add	r3, pc, #80	; (adr r3, 93910 <cl_testharnesscommandhandler+0x25e8>)
   938c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   938c4:	47a0      	blx	r4
   938c6:	4602      	mov	r2, r0
   938c8:	460b      	mov	r3, r1
   938ca:	4610      	mov	r0, r2
   938cc:	4619      	mov	r1, r3
   938ce:	4b16      	ldr	r3, [pc, #88]	; (93928 <cl_testharnesscommandhandler+0x2600>)
   938d0:	4798      	blx	r3
   938d2:	4603      	mov	r3, r0
   938d4:	b29b      	uxth	r3, r3
   938d6:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			//if(sensordatamillivolts > 1600 )
			{
				pdataarray = (Cl_Uint8Type *)"VPT=";
   938da:	4b19      	ldr	r3, [pc, #100]	; (93940 <cl_testharnesscommandhandler+0x2618>)
   938dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				//Pressuredatainmillibars = (sensordatamillivolts - 1600)/0.578;
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   938e0:	2018      	movs	r0, #24
   938e2:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   938e6:	2204      	movs	r2, #4
   938e8:	4b13      	ldr	r3, [pc, #76]	; (93938 <cl_testharnesscommandhandler+0x2610>)
   938ea:	4798      	blx	r3
   938ec:	4603      	mov	r3, r0
   938ee:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
   938f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
   938f6:	2019      	movs	r0, #25
   938f8:	4619      	mov	r1, r3
   938fa:	2202      	movs	r2, #2
   938fc:	4b0e      	ldr	r3, [pc, #56]	; (93938 <cl_testharnesscommandhandler+0x2610>)
   938fe:	4798      	blx	r3
   93900:	4603      	mov	r3, r0
   93902:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif
			break;
   93906:	e179      	b.n	93bfc <cl_testharnesscommandhandler+0x28d4>
   93908:	8f5c28f6 	.word	0x8f5c28f6
   9390c:	3fe8f5c2 	.word	0x3fe8f5c2
   93910:	33333333 	.word	0x33333333
   93914:	3fe33333 	.word	0x3fe33333
   93918:	00093c61 	.word	0x00093c61
   9391c:	000aa550 	.word	0x000aa550
   93920:	000a79b9 	.word	0x000a79b9
   93924:	000a7cd9 	.word	0x000a7cd9
   93928:	000a7fb9 	.word	0x000a7fb9
   9392c:	000aa558 	.word	0x000aa558
   93930:	000aa560 	.word	0x000aa560
   93934:	77280773 	.word	0x77280773
   93938:	0009d1e9 	.word	0x0009d1e9
   9393c:	000aa568 	.word	0x000aa568
   93940:	000aa570 	.word	0x000aa570
			
			pdataarray = (Cl_Uint8Type *)"TMP1=";
			TMP = Vtp - Ps1;
		#endif
		
					TMP = vptavg - ps1avg;
   93944:	4bb6      	ldr	r3, [pc, #728]	; (93c20 <cl_testharnesscommandhandler+0x28f8>)
   93946:	881b      	ldrh	r3, [r3, #0]
   93948:	b29a      	uxth	r2, r3
   9394a:	4bb6      	ldr	r3, [pc, #728]	; (93c24 <cl_testharnesscommandhandler+0x28fc>)
   9394c:	881b      	ldrh	r3, [r3, #0]
   9394e:	b29b      	uxth	r3, r3
   93950:	1ad3      	subs	r3, r2, r3
   93952:	b29b      	uxth	r3, r3
   93954:	b29b      	uxth	r3, r3
   93956:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
				//	if(TMP > 0)
					{
						Pressuredatainmillibars = Pressuredatainmillibars - 1000;
   9395a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
   9395e:	b29b      	uxth	r3, r3
   93960:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   93964:	b29b      	uxth	r3, r3
   93966:	b29b      	uxth	r3, r3
   93968:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
						pdataarray = (Cl_Uint8Type *)"TMP1=";
   9396c:	4bae      	ldr	r3, [pc, #696]	; (93c28 <cl_testharnesscommandhandler+0x2900>)
   9396e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   93972:	2018      	movs	r0, #24
   93974:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   93978:	2204      	movs	r2, #4
   9397a:	4bac      	ldr	r3, [pc, #688]	; (93c2c <cl_testharnesscommandhandler+0x2904>)
   9397c:	4798      	blx	r3
   9397e:	4603      	mov	r3, r0
   93980:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TMP,2);
   93984:	f107 038e 	add.w	r3, r7, #142	; 0x8e
   93988:	2019      	movs	r0, #25
   9398a:	4619      	mov	r1, r3
   9398c:	2202      	movs	r2, #2
   9398e:	4ba7      	ldr	r3, [pc, #668]	; (93c2c <cl_testharnesscommandhandler+0x2904>)
   93990:	4798      	blx	r3
   93992:	4603      	mov	r3, r0
   93994:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TMP,2);
						
					}
					
					#endif
					TMP = (vptavg + aptavg)/2 - (ps1avg+ps2avg)/2;
   93998:	4ba1      	ldr	r3, [pc, #644]	; (93c20 <cl_testharnesscommandhandler+0x28f8>)
   9399a:	881b      	ldrh	r3, [r3, #0]
   9399c:	b21a      	sxth	r2, r3
   9399e:	4ba4      	ldr	r3, [pc, #656]	; (93c30 <cl_testharnesscommandhandler+0x2908>)
   939a0:	881b      	ldrh	r3, [r3, #0]
   939a2:	b21b      	sxth	r3, r3
   939a4:	4413      	add	r3, r2
   939a6:	0fda      	lsrs	r2, r3, #31
   939a8:	4413      	add	r3, r2
   939aa:	105b      	asrs	r3, r3, #1
   939ac:	b29a      	uxth	r2, r3
   939ae:	4b9d      	ldr	r3, [pc, #628]	; (93c24 <cl_testharnesscommandhandler+0x28fc>)
   939b0:	881b      	ldrh	r3, [r3, #0]
   939b2:	b219      	sxth	r1, r3
   939b4:	4b9f      	ldr	r3, [pc, #636]	; (93c34 <cl_testharnesscommandhandler+0x290c>)
   939b6:	881b      	ldrh	r3, [r3, #0]
   939b8:	b21b      	sxth	r3, r3
   939ba:	440b      	add	r3, r1
   939bc:	0fd9      	lsrs	r1, r3, #31
   939be:	440b      	add	r3, r1
   939c0:	105b      	asrs	r3, r3, #1
   939c2:	b29b      	uxth	r3, r3
   939c4:	1ad3      	subs	r3, r2, r3
   939c6:	b29b      	uxth	r3, r3
   939c8:	b29b      	uxth	r3, r3
   939ca:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
					// if(TMP > 0)
					{
						pdataarray = (Cl_Uint8Type *)"TMP2=";
   939ce:	4b9a      	ldr	r3, [pc, #616]	; (93c38 <cl_testharnesscommandhandler+0x2910>)
   939d0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
						Pressuredatainmillibars = Pressuredatainmillibars - 1000;
   939d4:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
   939d8:	b29b      	uxth	r3, r3
   939da:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   939de:	b29b      	uxth	r3, r3
   939e0:	b29b      	uxth	r3, r3
   939e2:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   939e6:	2018      	movs	r0, #24
   939e8:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   939ec:	2204      	movs	r2, #4
   939ee:	4b8f      	ldr	r3, [pc, #572]	; (93c2c <cl_testharnesscommandhandler+0x2904>)
   939f0:	4798      	blx	r3
   939f2:	4603      	mov	r3, r0
   939f4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TMP,2);
   939f8:	f107 038e 	add.w	r3, r7, #142	; 0x8e
   939fc:	2019      	movs	r0, #25
   939fe:	4619      	mov	r1, r3
   93a00:	2202      	movs	r2, #2
   93a02:	4b8a      	ldr	r3, [pc, #552]	; (93c2c <cl_testharnesscommandhandler+0x2904>)
   93a04:	4798      	blx	r3
   93a06:	4603      	mov	r3, r0
   93a08:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
					}
					
					#endif


			break;
   93a0c:	e0f6      	b.n	93bfc <cl_testharnesscommandhandler+0x28d4>
			case TEST_SENSOR_TEMP1:

			cl_testgetsensordata(SENSOR_TEMP1STATUS,&sensordata);
   93a0e:	f107 0392 	add.w	r3, r7, #146	; 0x92
   93a12:	2012      	movs	r0, #18
   93a14:	4619      	mov	r1, r3
   93a16:	4b89      	ldr	r3, [pc, #548]	; (93c3c <cl_testharnesscommandhandler+0x2914>)
   93a18:	4798      	blx	r3
			{
							int16_t temp,temp1;
							temp = (0.8056 * sensordata) - 1450 ;
   93a1a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
   93a1e:	b21a      	sxth	r2, r3
   93a20:	4b87      	ldr	r3, [pc, #540]	; (93c40 <cl_testharnesscommandhandler+0x2918>)
   93a22:	4610      	mov	r0, r2
   93a24:	4798      	blx	r3
   93a26:	4602      	mov	r2, r0
   93a28:	460b      	mov	r3, r1
   93a2a:	4c86      	ldr	r4, [pc, #536]	; (93c44 <cl_testharnesscommandhandler+0x291c>)
   93a2c:	4610      	mov	r0, r2
   93a2e:	4619      	mov	r1, r3
   93a30:	a377      	add	r3, pc, #476	; (adr r3, 93c10 <cl_testharnesscommandhandler+0x28e8>)
   93a32:	e9d3 2300 	ldrd	r2, r3, [r3]
   93a36:	47a0      	blx	r4
   93a38:	4602      	mov	r2, r0
   93a3a:	460b      	mov	r3, r1
   93a3c:	4c82      	ldr	r4, [pc, #520]	; (93c48 <cl_testharnesscommandhandler+0x2920>)
   93a3e:	4610      	mov	r0, r2
   93a40:	4619      	mov	r1, r3
   93a42:	a375      	add	r3, pc, #468	; (adr r3, 93c18 <cl_testharnesscommandhandler+0x28f0>)
   93a44:	e9d3 2300 	ldrd	r2, r3, [r3]
   93a48:	47a0      	blx	r4
   93a4a:	4602      	mov	r2, r0
   93a4c:	460b      	mov	r3, r1
   93a4e:	4610      	mov	r0, r2
   93a50:	4619      	mov	r1, r3
   93a52:	4b7e      	ldr	r3, [pc, #504]	; (93c4c <cl_testharnesscommandhandler+0x2924>)
   93a54:	4798      	blx	r3
   93a56:	4603      	mov	r3, r0
   93a58:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
							temp1 = 3700 + (temp * 1000)/340;
   93a5c:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	; 0xb8
   93a60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   93a64:	fb02 f303 	mul.w	r3, r2, r3
   93a68:	4a79      	ldr	r2, [pc, #484]	; (93c50 <cl_testharnesscommandhandler+0x2928>)
   93a6a:	fb82 1203 	smull	r1, r2, r2, r3
   93a6e:	11d2      	asrs	r2, r2, #7
   93a70:	17db      	asrs	r3, r3, #31
   93a72:	1ad3      	subs	r3, r2, r3
   93a74:	b29b      	uxth	r3, r3
   93a76:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   93a7a:	b29b      	uxth	r3, r3
   93a7c:	b29a      	uxth	r2, r3
   93a7e:	f107 030c 	add.w	r3, r7, #12
   93a82:	801a      	strh	r2, [r3, #0]
							
							pdataarray = (Cl_Uint8Type *)"TEMP1=";
   93a84:	4b73      	ldr	r3, [pc, #460]	; (93c54 <cl_testharnesscommandhandler+0x292c>)
   93a86:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
   93a8a:	2018      	movs	r0, #24
   93a8c:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   93a90:	2206      	movs	r2, #6
   93a92:	4b66      	ldr	r3, [pc, #408]	; (93c2c <cl_testharnesscommandhandler+0x2904>)
   93a94:	4798      	blx	r3
   93a96:	4603      	mov	r3, r0
   93a98:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   93a9c:	f107 030c 	add.w	r3, r7, #12
   93aa0:	2019      	movs	r0, #25
   93aa2:	4619      	mov	r1, r3
   93aa4:	2202      	movs	r2, #2
   93aa6:	4b61      	ldr	r3, [pc, #388]	; (93c2c <cl_testharnesscommandhandler+0x2904>)
   93aa8:	4798      	blx	r3
   93aaa:	4603      	mov	r3, r0
   93aac:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			}

			break;
   93ab0:	e0a4      	b.n	93bfc <cl_testharnesscommandhandler+0x28d4>
			case TEST_SENSOR_TEMP2:
			{
				int16_t temp,temp1;
			cl_testgetsensordata(SENSOR_TEMP2STATUS,&sensordata);
   93ab2:	f107 0392 	add.w	r3, r7, #146	; 0x92
   93ab6:	2013      	movs	r0, #19
   93ab8:	4619      	mov	r1, r3
   93aba:	4b60      	ldr	r3, [pc, #384]	; (93c3c <cl_testharnesscommandhandler+0x2914>)
   93abc:	4798      	blx	r3
					
					temp = (0.8056 * sensordata) - 1450 ;
   93abe:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
   93ac2:	b21a      	sxth	r2, r3
   93ac4:	4b5e      	ldr	r3, [pc, #376]	; (93c40 <cl_testharnesscommandhandler+0x2918>)
   93ac6:	4610      	mov	r0, r2
   93ac8:	4798      	blx	r3
   93aca:	4602      	mov	r2, r0
   93acc:	460b      	mov	r3, r1
   93ace:	4c5d      	ldr	r4, [pc, #372]	; (93c44 <cl_testharnesscommandhandler+0x291c>)
   93ad0:	4610      	mov	r0, r2
   93ad2:	4619      	mov	r1, r3
   93ad4:	a34e      	add	r3, pc, #312	; (adr r3, 93c10 <cl_testharnesscommandhandler+0x28e8>)
   93ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
   93ada:	47a0      	blx	r4
   93adc:	4602      	mov	r2, r0
   93ade:	460b      	mov	r3, r1
   93ae0:	4c59      	ldr	r4, [pc, #356]	; (93c48 <cl_testharnesscommandhandler+0x2920>)
   93ae2:	4610      	mov	r0, r2
   93ae4:	4619      	mov	r1, r3
   93ae6:	a34c      	add	r3, pc, #304	; (adr r3, 93c18 <cl_testharnesscommandhandler+0x28f0>)
   93ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
   93aec:	47a0      	blx	r4
   93aee:	4602      	mov	r2, r0
   93af0:	460b      	mov	r3, r1
   93af2:	4610      	mov	r0, r2
   93af4:	4619      	mov	r1, r3
   93af6:	4b55      	ldr	r3, [pc, #340]	; (93c4c <cl_testharnesscommandhandler+0x2924>)
   93af8:	4798      	blx	r3
   93afa:	4603      	mov	r3, r0
   93afc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
					temp1 = 3700 + (temp * 1000)/340;
   93b00:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
   93b04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   93b08:	fb02 f303 	mul.w	r3, r2, r3
   93b0c:	4a50      	ldr	r2, [pc, #320]	; (93c50 <cl_testharnesscommandhandler+0x2928>)
   93b0e:	fb82 1203 	smull	r1, r2, r2, r3
   93b12:	11d2      	asrs	r2, r2, #7
   93b14:	17db      	asrs	r3, r3, #31
   93b16:	1ad3      	subs	r3, r2, r3
   93b18:	b29b      	uxth	r3, r3
   93b1a:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   93b1e:	b29b      	uxth	r3, r3
   93b20:	b29a      	uxth	r2, r3
   93b22:	f107 030a 	add.w	r3, r7, #10
   93b26:	801a      	strh	r2, [r3, #0]
									
			pdataarray = (Cl_Uint8Type *)"TEMP2=";
   93b28:	4b4b      	ldr	r3, [pc, #300]	; (93c58 <cl_testharnesscommandhandler+0x2930>)
   93b2a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
   93b2e:	2018      	movs	r0, #24
   93b30:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   93b34:	2206      	movs	r2, #6
   93b36:	4b3d      	ldr	r3, [pc, #244]	; (93c2c <cl_testharnesscommandhandler+0x2904>)
   93b38:	4798      	blx	r3
   93b3a:	4603      	mov	r3, r0
   93b3c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   93b40:	f107 030a 	add.w	r3, r7, #10
   93b44:	2019      	movs	r0, #25
   93b46:	4619      	mov	r1, r3
   93b48:	2202      	movs	r2, #2
   93b4a:	4b38      	ldr	r3, [pc, #224]	; (93c2c <cl_testharnesscommandhandler+0x2904>)
   93b4c:	4798      	blx	r3
   93b4e:	4603      	mov	r3, r0
   93b50:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			}
			break;
   93b54:	e052      	b.n	93bfc <cl_testharnesscommandhandler+0x28d4>
			case TEST_SENSOR_TEMP3:
			{
				int16_t temp,temp1;
				cl_testgetsensordata(SENSOR_TEMP3STATUS,&sensordata);
   93b56:	f107 0392 	add.w	r3, r7, #146	; 0x92
   93b5a:	2014      	movs	r0, #20
   93b5c:	4619      	mov	r1, r3
   93b5e:	4b37      	ldr	r3, [pc, #220]	; (93c3c <cl_testharnesscommandhandler+0x2914>)
   93b60:	4798      	blx	r3
				
				
				temp = (0.8056 * sensordata) - 1450 ;
   93b62:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
   93b66:	b21a      	sxth	r2, r3
   93b68:	4b35      	ldr	r3, [pc, #212]	; (93c40 <cl_testharnesscommandhandler+0x2918>)
   93b6a:	4610      	mov	r0, r2
   93b6c:	4798      	blx	r3
   93b6e:	4602      	mov	r2, r0
   93b70:	460b      	mov	r3, r1
   93b72:	4c34      	ldr	r4, [pc, #208]	; (93c44 <cl_testharnesscommandhandler+0x291c>)
   93b74:	4610      	mov	r0, r2
   93b76:	4619      	mov	r1, r3
   93b78:	a325      	add	r3, pc, #148	; (adr r3, 93c10 <cl_testharnesscommandhandler+0x28e8>)
   93b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   93b7e:	47a0      	blx	r4
   93b80:	4602      	mov	r2, r0
   93b82:	460b      	mov	r3, r1
   93b84:	4c30      	ldr	r4, [pc, #192]	; (93c48 <cl_testharnesscommandhandler+0x2920>)
   93b86:	4610      	mov	r0, r2
   93b88:	4619      	mov	r1, r3
   93b8a:	a323      	add	r3, pc, #140	; (adr r3, 93c18 <cl_testharnesscommandhandler+0x28f0>)
   93b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   93b90:	47a0      	blx	r4
   93b92:	4602      	mov	r2, r0
   93b94:	460b      	mov	r3, r1
   93b96:	4610      	mov	r0, r2
   93b98:	4619      	mov	r1, r3
   93b9a:	4b2c      	ldr	r3, [pc, #176]	; (93c4c <cl_testharnesscommandhandler+0x2924>)
   93b9c:	4798      	blx	r3
   93b9e:	4603      	mov	r3, r0
   93ba0:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
				temp1 = 3700 + (temp * 1000)/340;
   93ba4:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
   93ba8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   93bac:	fb02 f303 	mul.w	r3, r2, r3
   93bb0:	4a27      	ldr	r2, [pc, #156]	; (93c50 <cl_testharnesscommandhandler+0x2928>)
   93bb2:	fb82 1203 	smull	r1, r2, r2, r3
   93bb6:	11d2      	asrs	r2, r2, #7
   93bb8:	17db      	asrs	r3, r3, #31
   93bba:	1ad3      	subs	r3, r2, r3
   93bbc:	b29b      	uxth	r3, r3
   93bbe:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   93bc2:	b29b      	uxth	r3, r3
   93bc4:	b29a      	uxth	r2, r3
   93bc6:	f107 0308 	add.w	r3, r7, #8
   93bca:	801a      	strh	r2, [r3, #0]
				
				pdataarray = (Cl_Uint8Type *)"TEMP3=";
   93bcc:	4b23      	ldr	r3, [pc, #140]	; (93c5c <cl_testharnesscommandhandler+0x2934>)
   93bce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
   93bd2:	2018      	movs	r0, #24
   93bd4:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   93bd8:	2206      	movs	r2, #6
   93bda:	4b14      	ldr	r3, [pc, #80]	; (93c2c <cl_testharnesscommandhandler+0x2904>)
   93bdc:	4798      	blx	r3
   93bde:	4603      	mov	r3, r0
   93be0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   93be4:	f107 0308 	add.w	r3, r7, #8
   93be8:	2019      	movs	r0, #25
   93bea:	4619      	mov	r1, r3
   93bec:	2202      	movs	r2, #2
   93bee:	4b0f      	ldr	r3, [pc, #60]	; (93c2c <cl_testharnesscommandhandler+0x2904>)
   93bf0:	4798      	blx	r3
   93bf2:	4603      	mov	r3, r0
   93bf4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				
			}

			break;
   93bf8:	e000      	b.n	93bfc <cl_testharnesscommandhandler+0x28d4>


			
			default: break;
   93bfa:	bf00      	nop
		}

		break;
   93bfc:	e000      	b.n	93c00 <cl_testharnesscommandhandler+0x28d8>
		default:
		
		break;
   93bfe:	bf00      	nop
	}
	
	
	
	return CL_OK;
   93c00:	2300      	movs	r3, #0
	
}
   93c02:	4618      	mov	r0, r3
   93c04:	f507 7792 	add.w	r7, r7, #292	; 0x124
   93c08:	46bd      	mov	sp, r7
   93c0a:	bd90      	pop	{r4, r7, pc}
   93c0c:	f3af 8000 	nop.w
   93c10:	a6b50b0f 	.word	0xa6b50b0f
   93c14:	3fe9c779 	.word	0x3fe9c779
   93c18:	00000000 	.word	0x00000000
   93c1c:	4096a800 	.word	0x4096a800
   93c20:	20071ba4 	.word	0x20071ba4
   93c24:	20071b9e 	.word	0x20071b9e
   93c28:	000aa578 	.word	0x000aa578
   93c2c:	0009d1e9 	.word	0x0009d1e9
   93c30:	20071ba2 	.word	0x20071ba2
   93c34:	20071ba0 	.word	0x20071ba0
   93c38:	000aa580 	.word	0x000aa580
   93c3c:	00093c61 	.word	0x00093c61
   93c40:	000a79b9 	.word	0x000a79b9
   93c44:	000a7a85 	.word	0x000a7a85
   93c48:	000a771d 	.word	0x000a771d
   93c4c:	000a7fb9 	.word	0x000a7fb9
   93c50:	60606061 	.word	0x60606061
   93c54:	000aa588 	.word	0x000aa588
   93c58:	000aa590 	.word	0x000aa590
   93c5c:	000aa598 	.word	0x000aa598

00093c60 <cl_testgetsensordata>:


Cl_ReturnCodeType  cl_testgetsensordata(Cl_Uint8Type dataId, uint16_t* dataItem)
{
   93c60:	b580      	push	{r7, lr}
   93c62:	b086      	sub	sp, #24
   93c64:	af00      	add	r7, sp, #0
   93c66:	4603      	mov	r3, r0
   93c68:	6039      	str	r1, [r7, #0]
   93c6a:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_thretval = CL_ERROR;
   93c6c:	2304      	movs	r3, #4
   93c6e:	75fb      	strb	r3, [r7, #23]
	Cl_Uint8Type bytedata =0 ;
   93c70:	2300      	movs	r3, #0
   93c72:	73fb      	strb	r3, [r7, #15]
	Cl_Uint16Type twobytedatal=0;
   93c74:	2300      	movs	r3, #0
   93c76:	81bb      	strh	r3, [r7, #12]
	Cl_Uint32Type worddata=0;
   93c78:	2300      	movs	r3, #0
   93c7a:	60bb      	str	r3, [r7, #8]
	
	Cl_Uint8Type pbytedata;
	Cl_Uint16Type p2bytedatal;
	Cl_Uint32Type pworddata;
	
	pbytedata = &bytedata;
   93c7c:	f107 030f 	add.w	r3, r7, #15
   93c80:	75bb      	strb	r3, [r7, #22]
	p2bytedatal = &twobytedatal;
   93c82:	f107 030c 	add.w	r3, r7, #12
   93c86:	82bb      	strh	r3, [r7, #20]
	pworddata =  &worddata;
   93c88:	f107 0308 	add.w	r3, r7, #8
   93c8c:	613b      	str	r3, [r7, #16]
	

		
	Cl_SysStat_GetSensor_Status_Query(dataId, dataItem);
   93c8e:	79fb      	ldrb	r3, [r7, #7]
   93c90:	4618      	mov	r0, r3
   93c92:	6839      	ldr	r1, [r7, #0]
   93c94:	4b03      	ldr	r3, [pc, #12]	; (93ca4 <cl_testgetsensordata+0x44>)
   93c96:	4798      	blx	r3
	
return CL_OK;	
   93c98:	2300      	movs	r3, #0
}
   93c9a:	4618      	mov	r0, r3
   93c9c:	3718      	adds	r7, #24
   93c9e:	46bd      	mov	sp, r7
   93ca0:	bd80      	pop	{r7, pc}
   93ca2:	bf00      	nop
   93ca4:	0008fd69 	.word	0x0008fd69

00093ca8 <pinclock>:
	#endif

}

void pinclock(void)
{
   93ca8:	b480      	push	{r7}
   93caa:	af00      	add	r7, sp, #0
					// Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hp_end_status,1);
					}
				}
#endif
	
}
   93cac:	46bd      	mov	sp, r7
   93cae:	f85d 7b04 	ldr.w	r7, [sp], #4
   93cb2:	4770      	bx	lr

00093cb4 <testsectclock>:
	minute_count++;
}


void testsectclock(void)
{
   93cb4:	b580      	push	{r7, lr}
   93cb6:	b086      	sub	sp, #24
   93cb8:	af00      	add	r7, sp, #0
	int16_t cond_status = 0,hold1_status=0,hold2_status=0; 
   93cba:	2300      	movs	r3, #0
   93cbc:	82fb      	strh	r3, [r7, #22]
   93cbe:	2300      	movs	r3, #0
   93cc0:	82bb      	strh	r3, [r7, #20]
   93cc2:	2300      	movs	r3, #0
   93cc4:	827b      	strh	r3, [r7, #18]
	int16_t hold1 = 0, hold2=0,blood_door = 0;
   93cc6:	2300      	movs	r3, #0
   93cc8:	823b      	strh	r3, [r7, #16]
   93cca:	2300      	movs	r3, #0
   93ccc:	81fb      	strh	r3, [r7, #14]
   93cce:	2300      	movs	r3, #0
   93cd0:	81bb      	strh	r3, [r7, #12]
	float temp = 0,temp1;
   93cd2:	f04f 0300 	mov.w	r3, #0
   93cd6:	60bb      	str	r3, [r7, #8]
	Cl_Uint16Type int_temp;

				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &int_temp);
   93cd8:	1dbb      	adds	r3, r7, #6
   93cda:	2013      	movs	r0, #19
   93cdc:	4619      	mov	r1, r3
   93cde:	4b0e      	ldr	r3, [pc, #56]	; (93d18 <testsectclock+0x64>)
   93ce0:	4798      	blx	r3
		//		temp = int_temp * 0.805;
		//		calibration_tmp(temp,TS2);

	if(temprature_final_value_2 > 40000)
   93ce2:	4b0e      	ldr	r3, [pc, #56]	; (93d1c <testsectclock+0x68>)
   93ce4:	681a      	ldr	r2, [r3, #0]
   93ce6:	4b0e      	ldr	r3, [pc, #56]	; (93d20 <testsectclock+0x6c>)
   93ce8:	4610      	mov	r0, r2
   93cea:	490e      	ldr	r1, [pc, #56]	; (93d24 <testsectclock+0x70>)
   93cec:	4798      	blx	r3
   93cee:	4603      	mov	r3, r0
   93cf0:	2b00      	cmp	r3, #0
   93cf2:	d00d      	beq.n	93d10 <testsectclock+0x5c>
	{
		if (flag_hotcitric == 1 || hotrinse_flag == 1)
   93cf4:	4b0c      	ldr	r3, [pc, #48]	; (93d28 <testsectclock+0x74>)
   93cf6:	781b      	ldrb	r3, [r3, #0]
   93cf8:	b2db      	uxtb	r3, r3
   93cfa:	2b01      	cmp	r3, #1
   93cfc:	d008      	beq.n	93d10 <testsectclock+0x5c>
   93cfe:	4b0b      	ldr	r3, [pc, #44]	; (93d2c <testsectclock+0x78>)
   93d00:	781b      	ldrb	r3, [r3, #0]
   93d02:	2b01      	cmp	r3, #1
   93d04:	d004      	beq.n	93d10 <testsectclock+0x5c>
		{
			
		}
		else
		{
		sv_cntrl_poweroffheater();
   93d06:	4b0a      	ldr	r3, [pc, #40]	; (93d30 <testsectclock+0x7c>)
   93d08:	4798      	blx	r3
		SetHeaterState(CL_HEATER_STATE_OFF);
   93d0a:	2004      	movs	r0, #4
   93d0c:	4b09      	ldr	r3, [pc, #36]	; (93d34 <testsectclock+0x80>)
   93d0e:	4798      	blx	r3
	}
		
	}
		
	
}
   93d10:	3718      	adds	r7, #24
   93d12:	46bd      	mov	sp, r7
   93d14:	bd80      	pop	{r7, pc}
   93d16:	bf00      	nop
   93d18:	0008fd69 	.word	0x0008fd69
   93d1c:	2007196c 	.word	0x2007196c
   93d20:	000a867d 	.word	0x000a867d
   93d24:	471c4000 	.word	0x471c4000
   93d28:	20071b93 	.word	0x20071b93
   93d2c:	20071e15 	.word	0x20071e15
   93d30:	0009b3d5 	.word	0x0009b3d5
   93d34:	00089381 	.word	0x00089381

00093d38 <Cl_TimerTickCallback>:

Cl_ReturnCodeType Cl_RetValue;
int gmstick = 0;
volatile int func_timer =0;
Cl_ReturnCodeType Cl_TimerTickCallback()
{
   93d38:	b580      	push	{r7, lr}
   93d3a:	af00      	add	r7, sp, #0
	static int Cl_ticks =0 , Cl_Seconds =0 , Cl_Minutes = 0 , Cl_Hours = 0;
	
	Cl_ticks ++;
   93d3c:	4b1c      	ldr	r3, [pc, #112]	; (93db0 <Cl_TimerTickCallback+0x78>)
   93d3e:	681b      	ldr	r3, [r3, #0]
   93d40:	3301      	adds	r3, #1
   93d42:	4a1b      	ldr	r2, [pc, #108]	; (93db0 <Cl_TimerTickCallback+0x78>)
   93d44:	6013      	str	r3, [r2, #0]
	
	 if (Cl_ticks >= TICKS_PER_SEC)
   93d46:	4b1a      	ldr	r3, [pc, #104]	; (93db0 <Cl_TimerTickCallback+0x78>)
   93d48:	681b      	ldr	r3, [r3, #0]
   93d4a:	2b00      	cmp	r3, #0
   93d4c:	dd07      	ble.n	93d5e <Cl_TimerTickCallback+0x26>
	 {
		 Cl_ticks = 0;
   93d4e:	4b18      	ldr	r3, [pc, #96]	; (93db0 <Cl_TimerTickCallback+0x78>)
   93d50:	2200      	movs	r2, #0
   93d52:	601a      	str	r2, [r3, #0]
		 Cl_Seconds++;
   93d54:	4b17      	ldr	r3, [pc, #92]	; (93db4 <Cl_TimerTickCallback+0x7c>)
   93d56:	681b      	ldr	r3, [r3, #0]
   93d58:	3301      	adds	r3, #1
   93d5a:	4a16      	ldr	r2, [pc, #88]	; (93db4 <Cl_TimerTickCallback+0x7c>)
   93d5c:	6013      	str	r3, [r2, #0]
		// Cl_RetValue = Cl_Timer_Create_TickSec_Event();
	 }
	 
	// if(Cl_Seconds >= SIXTY)
	 if(Cl_Seconds >= SIXTY)
   93d5e:	4b15      	ldr	r3, [pc, #84]	; (93db4 <Cl_TimerTickCallback+0x7c>)
   93d60:	681b      	ldr	r3, [r3, #0]
   93d62:	2b3b      	cmp	r3, #59	; 0x3b
   93d64:	dd07      	ble.n	93d76 <Cl_TimerTickCallback+0x3e>
	 {
		 Cl_Seconds = 0;
   93d66:	4b13      	ldr	r3, [pc, #76]	; (93db4 <Cl_TimerTickCallback+0x7c>)
   93d68:	2200      	movs	r2, #0
   93d6a:	601a      	str	r2, [r3, #0]
		  Cl_Minutes++;
   93d6c:	4b12      	ldr	r3, [pc, #72]	; (93db8 <Cl_TimerTickCallback+0x80>)
   93d6e:	681b      	ldr	r3, [r3, #0]
   93d70:	3301      	adds	r3, #1
   93d72:	4a11      	ldr	r2, [pc, #68]	; (93db8 <Cl_TimerTickCallback+0x80>)
   93d74:	6013      	str	r3, [r2, #0]
		// Cl_RetValue = Cl_Timer_Create_TickMin_Event();
	 }
	 
	if(Cl_Minutes >= SIXTY)
   93d76:	4b10      	ldr	r3, [pc, #64]	; (93db8 <Cl_TimerTickCallback+0x80>)
   93d78:	681b      	ldr	r3, [r3, #0]
   93d7a:	2b3b      	cmp	r3, #59	; 0x3b
   93d7c:	dd0d      	ble.n	93d9a <Cl_TimerTickCallback+0x62>
//	if(Cl_Minutes >= 10)
	{
		Cl_Minutes = 0;
   93d7e:	4b0e      	ldr	r3, [pc, #56]	; (93db8 <Cl_TimerTickCallback+0x80>)
   93d80:	2200      	movs	r2, #0
   93d82:	601a      	str	r2, [r3, #0]
		Cl_Hours++;
   93d84:	4b0d      	ldr	r3, [pc, #52]	; (93dbc <Cl_TimerTickCallback+0x84>)
   93d86:	681b      	ldr	r3, [r3, #0]
   93d88:	3301      	adds	r3, #1
   93d8a:	4a0c      	ldr	r2, [pc, #48]	; (93dbc <Cl_TimerTickCallback+0x84>)
   93d8c:	6013      	str	r3, [r2, #0]
		Cl_RetValue = Cl_Timer_Create_TickHour_Event();
   93d8e:	4b0c      	ldr	r3, [pc, #48]	; (93dc0 <Cl_TimerTickCallback+0x88>)
   93d90:	4798      	blx	r3
   93d92:	4603      	mov	r3, r0
   93d94:	461a      	mov	r2, r3
   93d96:	4b0b      	ldr	r3, [pc, #44]	; (93dc4 <Cl_TimerTickCallback+0x8c>)
   93d98:	701a      	strb	r2, [r3, #0]
	}
	
	if(Cl_Hours >= 24)
   93d9a:	4b08      	ldr	r3, [pc, #32]	; (93dbc <Cl_TimerTickCallback+0x84>)
   93d9c:	681b      	ldr	r3, [r3, #0]
   93d9e:	2b17      	cmp	r3, #23
   93da0:	dd02      	ble.n	93da8 <Cl_TimerTickCallback+0x70>
	{
		Cl_Hours =0;
   93da2:	4b06      	ldr	r3, [pc, #24]	; (93dbc <Cl_TimerTickCallback+0x84>)
   93da4:	2200      	movs	r2, #0
   93da6:	601a      	str	r2, [r3, #0]
	}
	
	return CL_OK;
   93da8:	2300      	movs	r3, #0
}
   93daa:	4618      	mov	r0, r3
   93dac:	bd80      	pop	{r7, pc}
   93dae:	bf00      	nop
   93db0:	20071bb4 	.word	0x20071bb4
   93db4:	20071bb8 	.word	0x20071bb8
   93db8:	20071bbc 	.word	0x20071bbc
   93dbc:	20071bc0 	.word	0x20071bc0
   93dc0:	000941b5 	.word	0x000941b5
   93dc4:	2007287c 	.word	0x2007287c

00093dc8 <Cl_MilliTickcallBack>:




Cl_ReturnCodeType Cl_MilliTickcallBack(void)
{
   93dc8:	b580      	push	{r7, lr}
   93dca:	b082      	sub	sp, #8
   93dcc:	af00      	add	r7, sp, #0
	
//Cl_tg_prick_1ms();



if (FUNC_ENTRY == 1)
   93dce:	4b63      	ldr	r3, [pc, #396]	; (93f5c <Cl_MilliTickcallBack+0x194>)
   93dd0:	681b      	ldr	r3, [r3, #0]
   93dd2:	2b01      	cmp	r3, #1
   93dd4:	d10d      	bne.n	93df2 <Cl_MilliTickcallBack+0x2a>
{
	func_timer++;
   93dd6:	4b62      	ldr	r3, [pc, #392]	; (93f60 <Cl_MilliTickcallBack+0x198>)
   93dd8:	681b      	ldr	r3, [r3, #0]
   93dda:	3301      	adds	r3, #1
   93ddc:	4a60      	ldr	r2, [pc, #384]	; (93f60 <Cl_MilliTickcallBack+0x198>)
   93dde:	6013      	str	r3, [r2, #0]
	if(func_timer > 1000)
   93de0:	4b5f      	ldr	r3, [pc, #380]	; (93f60 <Cl_MilliTickcallBack+0x198>)
   93de2:	681b      	ldr	r3, [r3, #0]
   93de4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   93de8:	dd06      	ble.n	93df8 <Cl_MilliTickcallBack+0x30>
			
			if(syncdone)
			{
		//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
			}
		func_timer = 0;
   93dea:	4b5d      	ldr	r3, [pc, #372]	; (93f60 <Cl_MilliTickcallBack+0x198>)
   93dec:	2200      	movs	r2, #0
   93dee:	601a      	str	r2, [r3, #0]
   93df0:	e002      	b.n	93df8 <Cl_MilliTickcallBack+0x30>
	}
}else
{
	func_timer = 0;
   93df2:	4b5b      	ldr	r3, [pc, #364]	; (93f60 <Cl_MilliTickcallBack+0x198>)
   93df4:	2200      	movs	r2, #0
   93df6:	601a      	str	r2, [r3, #0]
}
			gmstick++;
   93df8:	4b5a      	ldr	r3, [pc, #360]	; (93f64 <Cl_MilliTickcallBack+0x19c>)
   93dfa:	681b      	ldr	r3, [r3, #0]
   93dfc:	3301      	adds	r3, #1
   93dfe:	4a59      	ldr	r2, [pc, #356]	; (93f64 <Cl_MilliTickcallBack+0x19c>)
   93e00:	6013      	str	r3, [r2, #0]
			 if(gmstick > 50)
   93e02:	4b58      	ldr	r3, [pc, #352]	; (93f64 <Cl_MilliTickcallBack+0x19c>)
   93e04:	681b      	ldr	r3, [r3, #0]
   93e06:	2b32      	cmp	r3, #50	; 0x32
   93e08:	dd02      	ble.n	93e10 <Cl_MilliTickcallBack+0x48>
			 {
				 gmstick = 0;
   93e0a:	4b56      	ldr	r3, [pc, #344]	; (93f64 <Cl_MilliTickcallBack+0x19c>)
   93e0c:	2200      	movs	r2, #0
   93e0e:	601a      	str	r2, [r3, #0]
			 }
			 
		Cl_msticks++;
   93e10:	4b55      	ldr	r3, [pc, #340]	; (93f68 <Cl_MilliTickcallBack+0x1a0>)
   93e12:	681b      	ldr	r3, [r3, #0]
   93e14:	3301      	adds	r3, #1
   93e16:	4a54      	ldr	r2, [pc, #336]	; (93f68 <Cl_MilliTickcallBack+0x1a0>)
   93e18:	6013      	str	r3, [r2, #0]
		if(!(Cl_msticks % 20))
   93e1a:	4b53      	ldr	r3, [pc, #332]	; (93f68 <Cl_MilliTickcallBack+0x1a0>)
   93e1c:	6819      	ldr	r1, [r3, #0]
   93e1e:	4b53      	ldr	r3, [pc, #332]	; (93f6c <Cl_MilliTickcallBack+0x1a4>)
   93e20:	fb83 2301 	smull	r2, r3, r3, r1
   93e24:	10da      	asrs	r2, r3, #3
   93e26:	17cb      	asrs	r3, r1, #31
   93e28:	1ad2      	subs	r2, r2, r3
   93e2a:	4613      	mov	r3, r2
   93e2c:	009b      	lsls	r3, r3, #2
   93e2e:	4413      	add	r3, r2
   93e30:	009b      	lsls	r3, r3, #2
   93e32:	1aca      	subs	r2, r1, r3
   93e34:	2a00      	cmp	r2, #0
   93e36:	d103      	bne.n	93e40 <Cl_MilliTickcallBack+0x78>
		{
		//	pinclock(); 
		Cl_TimerRetValue = Cl_Timer_Create_Tick20Ms_Event();
   93e38:	4b4d      	ldr	r3, [pc, #308]	; (93f70 <Cl_MilliTickcallBack+0x1a8>)
   93e3a:	4798      	blx	r3
   93e3c:	4603      	mov	r3, r0
   93e3e:	71fb      	strb	r3, [r7, #7]
		//Cl_tg_prick_100ms();
		


		}
		if(!(Cl_msticks % 2))
   93e40:	4b49      	ldr	r3, [pc, #292]	; (93f68 <Cl_MilliTickcallBack+0x1a0>)
   93e42:	681b      	ldr	r3, [r3, #0]
   93e44:	f003 0301 	and.w	r3, r3, #1
   93e48:	2b00      	cmp	r3, #0
   93e4a:	d105      	bne.n	93e58 <Cl_MilliTickcallBack+0x90>
		{
			pinclock(); 
   93e4c:	4b49      	ldr	r3, [pc, #292]	; (93f74 <Cl_MilliTickcallBack+0x1ac>)
   93e4e:	4798      	blx	r3
			//pinclock();
			//pinclock1();
			Cl_TimerRetValue = Cl_Timer_Create_Tick2Ms_Event();
   93e50:	4b49      	ldr	r3, [pc, #292]	; (93f78 <Cl_MilliTickcallBack+0x1b0>)
   93e52:	4798      	blx	r3
   93e54:	4603      	mov	r3, r0
   93e56:	71fb      	strb	r3, [r7, #7]
			
			//	cl_ufpumpFeedback_timer();
			//	cl_hep_pumpFeedback_timer();
		}
		if(!(Cl_msticks % 5))
   93e58:	4b43      	ldr	r3, [pc, #268]	; (93f68 <Cl_MilliTickcallBack+0x1a0>)
   93e5a:	6819      	ldr	r1, [r3, #0]
   93e5c:	4b43      	ldr	r3, [pc, #268]	; (93f6c <Cl_MilliTickcallBack+0x1a4>)
   93e5e:	fb83 2301 	smull	r2, r3, r3, r1
   93e62:	105a      	asrs	r2, r3, #1
   93e64:	17cb      	asrs	r3, r1, #31
   93e66:	1ad2      	subs	r2, r2, r3
   93e68:	4613      	mov	r3, r2
   93e6a:	009b      	lsls	r3, r3, #2
   93e6c:	4413      	add	r3, r2
   93e6e:	1aca      	subs	r2, r1, r3
   93e70:	2a00      	cmp	r2, #0
   93e72:	d103      	bne.n	93e7c <Cl_MilliTickcallBack+0xb4>
		{
			
			//pinclock();
			//pinclock1(); 
			Cl_TimerRetValue = Cl_Timer_Create_Tick5Ms_Event();
   93e74:	4b41      	ldr	r3, [pc, #260]	; (93f7c <Cl_MilliTickcallBack+0x1b4>)
   93e76:	4798      	blx	r3
   93e78:	4603      	mov	r3, r0
   93e7a:	71fb      	strb	r3, [r7, #7]
	
		//	cl_ufpumpFeedback_timer();
		//	cl_hep_pumpFeedback_timer();
		}
		if(!(Cl_msticks % 10))
   93e7c:	4b3a      	ldr	r3, [pc, #232]	; (93f68 <Cl_MilliTickcallBack+0x1a0>)
   93e7e:	6819      	ldr	r1, [r3, #0]
   93e80:	4b3a      	ldr	r3, [pc, #232]	; (93f6c <Cl_MilliTickcallBack+0x1a4>)
   93e82:	fb83 2301 	smull	r2, r3, r3, r1
   93e86:	109a      	asrs	r2, r3, #2
   93e88:	17cb      	asrs	r3, r1, #31
   93e8a:	1ad2      	subs	r2, r2, r3
   93e8c:	4613      	mov	r3, r2
   93e8e:	009b      	lsls	r3, r3, #2
   93e90:	4413      	add	r3, r2
   93e92:	005b      	lsls	r3, r3, #1
   93e94:	1aca      	subs	r2, r1, r3
   93e96:	2a00      	cmp	r2, #0
   93e98:	d103      	bne.n	93ea2 <Cl_MilliTickcallBack+0xda>
		{
			Cl_TimerRetValue = Cl_Timer_Create_Tick10Ms_Event();
   93e9a:	4b39      	ldr	r3, [pc, #228]	; (93f80 <Cl_MilliTickcallBack+0x1b8>)
   93e9c:	4798      	blx	r3
   93e9e:	4603      	mov	r3, r0
   93ea0:	71fb      	strb	r3, [r7, #7]
			//pinclock1(); 
			
			

		}
		if(!(Cl_msticks % 50))
   93ea2:	4b31      	ldr	r3, [pc, #196]	; (93f68 <Cl_MilliTickcallBack+0x1a0>)
   93ea4:	681a      	ldr	r2, [r3, #0]
   93ea6:	4b37      	ldr	r3, [pc, #220]	; (93f84 <Cl_MilliTickcallBack+0x1bc>)
   93ea8:	fb83 1302 	smull	r1, r3, r3, r2
   93eac:	1119      	asrs	r1, r3, #4
   93eae:	17d3      	asrs	r3, r2, #31
   93eb0:	1acb      	subs	r3, r1, r3
   93eb2:	2132      	movs	r1, #50	; 0x32
   93eb4:	fb01 f303 	mul.w	r3, r1, r3
   93eb8:	1ad3      	subs	r3, r2, r3
   93eba:	2b00      	cmp	r3, #0
   93ebc:	d103      	bne.n	93ec6 <Cl_MilliTickcallBack+0xfe>
		{
			Cl_TimerRetValue = Cl_Timer_Create_Tick50Ms_Event();
   93ebe:	4b32      	ldr	r3, [pc, #200]	; (93f88 <Cl_MilliTickcallBack+0x1c0>)
   93ec0:	4798      	blx	r3
   93ec2:	4603      	mov	r3, r0
   93ec4:	71fb      	strb	r3, [r7, #7]

		}

		
		
		if(Cl_msticks == 100)
   93ec6:	4b28      	ldr	r3, [pc, #160]	; (93f68 <Cl_MilliTickcallBack+0x1a0>)
   93ec8:	681b      	ldr	r3, [r3, #0]
   93eca:	2b64      	cmp	r3, #100	; 0x64
   93ecc:	d108      	bne.n	93ee0 <Cl_MilliTickcallBack+0x118>
		{
			//Cl_msticks = 0;
			Cl_ms100ticks++;
   93ece:	4b2f      	ldr	r3, [pc, #188]	; (93f8c <Cl_MilliTickcallBack+0x1c4>)
   93ed0:	681b      	ldr	r3, [r3, #0]
   93ed2:	3301      	adds	r3, #1
   93ed4:	4a2d      	ldr	r2, [pc, #180]	; (93f8c <Cl_MilliTickcallBack+0x1c4>)
   93ed6:	6013      	str	r3, [r2, #0]
			Cl_TimerRetValue = Cl_Timer_Create_Tick100Ms_Event();
   93ed8:	4b2d      	ldr	r3, [pc, #180]	; (93f90 <Cl_MilliTickcallBack+0x1c8>)
   93eda:	4798      	blx	r3
   93edc:	4603      	mov	r3, r0
   93ede:	71fb      	strb	r3, [r7, #7]
				//cl_hep_pump_enddetction_timer();


		}

if(Cl_msticks == 150)
   93ee0:	4b21      	ldr	r3, [pc, #132]	; (93f68 <Cl_MilliTickcallBack+0x1a0>)
   93ee2:	681b      	ldr	r3, [r3, #0]
   93ee4:	2b96      	cmp	r3, #150	; 0x96
   93ee6:	d10b      	bne.n	93f00 <Cl_MilliTickcallBack+0x138>
		{
			Cl_msticks = 0;
   93ee8:	4b1f      	ldr	r3, [pc, #124]	; (93f68 <Cl_MilliTickcallBack+0x1a0>)
   93eea:	2200      	movs	r2, #0
   93eec:	601a      	str	r2, [r3, #0]
			Cl_ms150ticks++;
   93eee:	4b29      	ldr	r3, [pc, #164]	; (93f94 <Cl_MilliTickcallBack+0x1cc>)
   93ef0:	681b      	ldr	r3, [r3, #0]
   93ef2:	3301      	adds	r3, #1
   93ef4:	4a27      	ldr	r2, [pc, #156]	; (93f94 <Cl_MilliTickcallBack+0x1cc>)
   93ef6:	6013      	str	r3, [r2, #0]
			Cl_TimerRetValue = Cl_Timer_Create_Tick150Ms_Event();
   93ef8:	4b27      	ldr	r3, [pc, #156]	; (93f98 <Cl_MilliTickcallBack+0x1d0>)
   93efa:	4798      	blx	r3
   93efc:	4603      	mov	r3, r0
   93efe:	71fb      	strb	r3, [r7, #7]


		}


		if(Cl_ms100ticks == 3 )
   93f00:	4b22      	ldr	r3, [pc, #136]	; (93f8c <Cl_MilliTickcallBack+0x1c4>)
   93f02:	681b      	ldr	r3, [r3, #0]
   93f04:	2b03      	cmp	r3, #3
   93f06:	d11d      	bne.n	93f44 <Cl_MilliTickcallBack+0x17c>
		{
			Cl_ms100ticks = 0;
   93f08:	4b20      	ldr	r3, [pc, #128]	; (93f8c <Cl_MilliTickcallBack+0x1c4>)
   93f0a:	2200      	movs	r2, #0
   93f0c:	601a      	str	r2, [r3, #0]
			Cl_ms500ticks++;
   93f0e:	4b23      	ldr	r3, [pc, #140]	; (93f9c <Cl_MilliTickcallBack+0x1d4>)
   93f10:	681b      	ldr	r3, [r3, #0]
   93f12:	3301      	adds	r3, #1
   93f14:	4a21      	ldr	r2, [pc, #132]	; (93f9c <Cl_MilliTickcallBack+0x1d4>)
   93f16:	6013      	str	r3, [r2, #0]
			if(Cl_ms500ticks == 2 )
   93f18:	4b20      	ldr	r3, [pc, #128]	; (93f9c <Cl_MilliTickcallBack+0x1d4>)
   93f1a:	681b      	ldr	r3, [r3, #0]
   93f1c:	2b02      	cmp	r3, #2
   93f1e:	d10d      	bne.n	93f3c <Cl_MilliTickcallBack+0x174>
			{
				Cl_ms500ticks = 0;
   93f20:	4b1e      	ldr	r3, [pc, #120]	; (93f9c <Cl_MilliTickcallBack+0x1d4>)
   93f22:	2200      	movs	r2, #0
   93f24:	601a      	str	r2, [r3, #0]
				Cl_TimerRetValue  = Cl_Timer_Create_TickSec_Event();
   93f26:	4b1e      	ldr	r3, [pc, #120]	; (93fa0 <Cl_MilliTickcallBack+0x1d8>)
   93f28:	4798      	blx	r3
   93f2a:	4603      	mov	r3, r0
   93f2c:	71fb      	strb	r3, [r7, #7]
				Cl_ms1000ticks++;
   93f2e:	4b1d      	ldr	r3, [pc, #116]	; (93fa4 <Cl_MilliTickcallBack+0x1dc>)
   93f30:	681b      	ldr	r3, [r3, #0]
   93f32:	3301      	adds	r3, #1
   93f34:	4a1b      	ldr	r2, [pc, #108]	; (93fa4 <Cl_MilliTickcallBack+0x1dc>)
   93f36:	6013      	str	r3, [r2, #0]
				testsectclock();
   93f38:	4b1b      	ldr	r3, [pc, #108]	; (93fa8 <Cl_MilliTickcallBack+0x1e0>)
   93f3a:	4798      	blx	r3
				
			}
			Cl_TimerRetValue = Cl_Timer_Create_Tick500Ms_Event();
   93f3c:	4b1b      	ldr	r3, [pc, #108]	; (93fac <Cl_MilliTickcallBack+0x1e4>)
   93f3e:	4798      	blx	r3
   93f40:	4603      	mov	r3, r0
   93f42:	71fb      	strb	r3, [r7, #7]
			
		}
		if(Cl_ms1000ticks == 2)
   93f44:	4b17      	ldr	r3, [pc, #92]	; (93fa4 <Cl_MilliTickcallBack+0x1dc>)
   93f46:	681b      	ldr	r3, [r3, #0]
   93f48:	2b02      	cmp	r3, #2
   93f4a:	d102      	bne.n	93f52 <Cl_MilliTickcallBack+0x18a>
		{
			Cl_ms1000ticks =0;
   93f4c:	4b15      	ldr	r3, [pc, #84]	; (93fa4 <Cl_MilliTickcallBack+0x1dc>)
   93f4e:	2200      	movs	r2, #0
   93f50:	601a      	str	r2, [r3, #0]
		//	Cl_Alarm_TriggerAlarm(FPCURRENTSTATUS,1);
		}
		return CL_OK;
   93f52:	2300      	movs	r3, #0
}
   93f54:	4618      	mov	r0, r3
   93f56:	3708      	adds	r7, #8
   93f58:	46bd      	mov	sp, r7
   93f5a:	bd80      	pop	{r7, pc}
   93f5c:	20071c90 	.word	0x20071c90
   93f60:	20071bb0 	.word	0x20071bb0
   93f64:	20071bac 	.word	0x20071bac
   93f68:	20071bc4 	.word	0x20071bc4
   93f6c:	66666667 	.word	0x66666667
   93f70:	00093fe1 	.word	0x00093fe1
   93f74:	00093ca9 	.word	0x00093ca9
   93f78:	00093fb1 	.word	0x00093fb1
   93f7c:	00093fc1 	.word	0x00093fc1
   93f80:	00093fd1 	.word	0x00093fd1
   93f84:	51eb851f 	.word	0x51eb851f
   93f88:	0009401d 	.word	0x0009401d
   93f8c:	20071bc8 	.word	0x20071bc8
   93f90:	0009405d 	.word	0x0009405d
   93f94:	20071bcc 	.word	0x20071bcc
   93f98:	00094099 	.word	0x00094099
   93f9c:	20071bd0 	.word	0x20071bd0
   93fa0:	00094111 	.word	0x00094111
   93fa4:	20071bd4 	.word	0x20071bd4
   93fa8:	00093cb5 	.word	0x00093cb5
   93fac:	000940d5 	.word	0x000940d5

00093fb0 <Cl_Timer_Create_Tick2Ms_Event>:


 Cl_ReturnCodeType  Cl_Timer_Create_Tick2Ms_Event(void)
 {
   93fb0:	b480      	push	{r7}
   93fb2:	af00      	add	r7, sp, #0
	 {
	//	 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_2M;
	//	 Cl_MacEventQueue2.Cl_MacNewEvent = true;
	//	 Cl_MacEventQueue2.Cl_MacNewEventcount++;
	 }
	 return CL_OK;
   93fb4:	2300      	movs	r3, #0
	 
 }
   93fb6:	4618      	mov	r0, r3
   93fb8:	46bd      	mov	sp, r7
   93fba:	f85d 7b04 	ldr.w	r7, [sp], #4
   93fbe:	4770      	bx	lr

00093fc0 <Cl_Timer_Create_Tick5Ms_Event>:

 Cl_ReturnCodeType  Cl_Timer_Create_Tick5Ms_Event(void)
 {
   93fc0:	b480      	push	{r7}
   93fc2:	af00      	add	r7, sp, #0
	 {
	//	 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_5M;
	//	 Cl_MacEventQueue2.Cl_MacNewEvent = true;
	//	 Cl_MacEventQueue2.Cl_MacNewEventcount++;
	 }
	 return CL_OK;
   93fc4:	2300      	movs	r3, #0
	 
 }
   93fc6:	4618      	mov	r0, r3
   93fc8:	46bd      	mov	sp, r7
   93fca:	f85d 7b04 	ldr.w	r7, [sp], #4
   93fce:	4770      	bx	lr

00093fd0 <Cl_Timer_Create_Tick10Ms_Event>:

 Cl_ReturnCodeType  Cl_Timer_Create_Tick10Ms_Event(void)
 {
   93fd0:	b480      	push	{r7}
   93fd2:	af00      	add	r7, sp, #0
	 {
	//	 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_10M;
	//	 Cl_MacEventQueue2.Cl_MacNewEvent = true;
	//	 Cl_MacEventQueue2.Cl_MacNewEventcount++;
	 }
	 return CL_OK;
   93fd4:	2300      	movs	r3, #0
	 
 }
   93fd6:	4618      	mov	r0, r3
   93fd8:	46bd      	mov	sp, r7
   93fda:	f85d 7b04 	ldr.w	r7, [sp], #4
   93fde:	4770      	bx	lr

00093fe0 <Cl_Timer_Create_Tick20Ms_Event>:

 Cl_ReturnCodeType  Cl_Timer_Create_Tick20Ms_Event(void)
 {
   93fe0:	b480      	push	{r7}
   93fe2:	af00      	add	r7, sp, #0
	 	 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   93fe4:	4b0c      	ldr	r3, [pc, #48]	; (94018 <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   93fe6:	781b      	ldrb	r3, [r3, #0]
   93fe8:	2b09      	cmp	r3, #9
   93fea:	d80f      	bhi.n	9400c <Cl_Timer_Create_Tick20Ms_Event+0x2c>
// 				  
// 			  }
// 			  
// 			  testFPcurrentstatus_prev = cl_sys_statbuffer.FPcurrentstatus;
// 			  
		 	 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_20M;
   93fec:	4b0a      	ldr	r3, [pc, #40]	; (94018 <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   93fee:	781b      	ldrb	r3, [r3, #0]
   93ff0:	461a      	mov	r2, r3
   93ff2:	4b09      	ldr	r3, [pc, #36]	; (94018 <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   93ff4:	4413      	add	r3, r2
   93ff6:	2237      	movs	r2, #55	; 0x37
   93ff8:	709a      	strb	r2, [r3, #2]
		 	 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   93ffa:	4b07      	ldr	r3, [pc, #28]	; (94018 <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   93ffc:	2201      	movs	r2, #1
   93ffe:	705a      	strb	r2, [r3, #1]
		 	 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   94000:	4b05      	ldr	r3, [pc, #20]	; (94018 <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   94002:	781b      	ldrb	r3, [r3, #0]
   94004:	3301      	adds	r3, #1
   94006:	b2da      	uxtb	r2, r3
   94008:	4b03      	ldr	r3, [pc, #12]	; (94018 <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   9400a:	701a      	strb	r2, [r3, #0]
	 	 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);       //12-04
		 }
	 	 return CL_OK;
   9400c:	2300      	movs	r3, #0
	 	 
 }
   9400e:	4618      	mov	r0, r3
   94010:	46bd      	mov	sp, r7
   94012:	f85d 7b04 	ldr.w	r7, [sp], #4
   94016:	4770      	bx	lr
   94018:	2007234c 	.word	0x2007234c

0009401c <Cl_Timer_Create_Tick50Ms_Event>:

 Cl_ReturnCodeType  Cl_Timer_Create_Tick50Ms_Event(void)
 {
   9401c:	b580      	push	{r7, lr}
   9401e:	af00      	add	r7, sp, #0
	 // Cl_MacEvent = EVT_TICK_SEC;
	 // Cl_MacNewEvent = true;
	 Cl_Alarm_timmer_50millisec();// testing
   94020:	4b0c      	ldr	r3, [pc, #48]	; (94054 <Cl_Timer_Create_Tick50Ms_Event+0x38>)
   94022:	4798      	blx	r3
	 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   94024:	4b0c      	ldr	r3, [pc, #48]	; (94058 <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   94026:	781b      	ldrb	r3, [r3, #0]
   94028:	2b09      	cmp	r3, #9
   9402a:	d80f      	bhi.n	9404c <Cl_Timer_Create_Tick50Ms_Event+0x30>
	 
	 
	 {
		 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_50M;
   9402c:	4b0a      	ldr	r3, [pc, #40]	; (94058 <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   9402e:	781b      	ldrb	r3, [r3, #0]
   94030:	461a      	mov	r2, r3
   94032:	4b09      	ldr	r3, [pc, #36]	; (94058 <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   94034:	4413      	add	r3, r2
   94036:	2238      	movs	r2, #56	; 0x38
   94038:	709a      	strb	r2, [r3, #2]
		 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   9403a:	4b07      	ldr	r3, [pc, #28]	; (94058 <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   9403c:	2201      	movs	r2, #1
   9403e:	705a      	strb	r2, [r3, #1]
		 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   94040:	4b05      	ldr	r3, [pc, #20]	; (94058 <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   94042:	781b      	ldrb	r3, [r3, #0]
   94044:	3301      	adds	r3, #1
   94046:	b2da      	uxtb	r2, r3
   94048:	4b03      	ldr	r3, [pc, #12]	; (94058 <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   9404a:	701a      	strb	r2, [r3, #0]
	 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);   //12-04
		 }
	 return CL_OK;
   9404c:	2300      	movs	r3, #0
	 
	 
 }
   9404e:	4618      	mov	r0, r3
   94050:	bd80      	pop	{r7, pc}
   94052:	bf00      	nop
   94054:	00082d81 	.word	0x00082d81
   94058:	2007234c 	.word	0x2007234c

0009405c <Cl_Timer_Create_Tick100Ms_Event>:
 

	 Cl_ReturnCodeType  Cl_Timer_Create_Tick100Ms_Event(void)
	 {
   9405c:	b480      	push	{r7}
   9405e:	af00      	add	r7, sp, #0
		 // Cl_MacEvent = EVT_TICK_SEC;
		 // Cl_MacNewEvent = true;
		 
		 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   94060:	4b0c      	ldr	r3, [pc, #48]	; (94094 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   94062:	781b      	ldrb	r3, [r3, #0]
   94064:	2b09      	cmp	r3, #9
   94066:	d80f      	bhi.n	94088 <Cl_Timer_Create_Tick100Ms_Event+0x2c>
		 		 
		 {	
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_100M ;
   94068:	4b0a      	ldr	r3, [pc, #40]	; (94094 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   9406a:	781b      	ldrb	r3, [r3, #0]
   9406c:	461a      	mov	r2, r3
   9406e:	4b09      	ldr	r3, [pc, #36]	; (94094 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   94070:	4413      	add	r3, r2
   94072:	2239      	movs	r2, #57	; 0x39
   94074:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   94076:	4b07      	ldr	r3, [pc, #28]	; (94094 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   94078:	2201      	movs	r2, #1
   9407a:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   9407c:	4b05      	ldr	r3, [pc, #20]	; (94094 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   9407e:	781b      	ldrb	r3, [r3, #0]
   94080:	3301      	adds	r3, #1
   94082:	b2da      	uxtb	r2, r3
   94084:	4b03      	ldr	r3, [pc, #12]	; (94094 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   94086:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);   ////12-04
		 }
		 return CL_OK;
   94088:	2300      	movs	r3, #0
		 
		 
	 }
   9408a:	4618      	mov	r0, r3
   9408c:	46bd      	mov	sp, r7
   9408e:	f85d 7b04 	ldr.w	r7, [sp], #4
   94092:	4770      	bx	lr
   94094:	2007234c 	.word	0x2007234c

00094098 <Cl_Timer_Create_Tick150Ms_Event>:



	 Cl_ReturnCodeType  Cl_Timer_Create_Tick150Ms_Event(void)
	 {
   94098:	b480      	push	{r7}
   9409a:	af00      	add	r7, sp, #0
		 // Cl_MacEvent = EVT_TICK_SEC;
		 // Cl_MacNewEvent = true;
		 
		 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   9409c:	4b0c      	ldr	r3, [pc, #48]	; (940d0 <Cl_Timer_Create_Tick150Ms_Event+0x38>)
   9409e:	781b      	ldrb	r3, [r3, #0]
   940a0:	2b09      	cmp	r3, #9
   940a2:	d80f      	bhi.n	940c4 <Cl_Timer_Create_Tick150Ms_Event+0x2c>
		 		 
		 {	
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_150M ;
   940a4:	4b0a      	ldr	r3, [pc, #40]	; (940d0 <Cl_Timer_Create_Tick150Ms_Event+0x38>)
   940a6:	781b      	ldrb	r3, [r3, #0]
   940a8:	461a      	mov	r2, r3
   940aa:	4b09      	ldr	r3, [pc, #36]	; (940d0 <Cl_Timer_Create_Tick150Ms_Event+0x38>)
   940ac:	4413      	add	r3, r2
   940ae:	225d      	movs	r2, #93	; 0x5d
   940b0:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   940b2:	4b07      	ldr	r3, [pc, #28]	; (940d0 <Cl_Timer_Create_Tick150Ms_Event+0x38>)
   940b4:	2201      	movs	r2, #1
   940b6:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   940b8:	4b05      	ldr	r3, [pc, #20]	; (940d0 <Cl_Timer_Create_Tick150Ms_Event+0x38>)
   940ba:	781b      	ldrb	r3, [r3, #0]
   940bc:	3301      	adds	r3, #1
   940be:	b2da      	uxtb	r2, r3
   940c0:	4b03      	ldr	r3, [pc, #12]	; (940d0 <Cl_Timer_Create_Tick150Ms_Event+0x38>)
   940c2:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);   ////12-04
		 }
		 return CL_OK;
   940c4:	2300      	movs	r3, #0
		 
		 
	 }
   940c6:	4618      	mov	r0, r3
   940c8:	46bd      	mov	sp, r7
   940ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   940ce:	4770      	bx	lr
   940d0:	2007234c 	.word	0x2007234c

000940d4 <Cl_Timer_Create_Tick500Ms_Event>:
	 
	 
	 Cl_ReturnCodeType  Cl_Timer_Create_Tick500Ms_Event(void)
	 {
   940d4:	b480      	push	{r7}
   940d6:	af00      	add	r7, sp, #0
		 // Cl_MacEvent = EVT_TICK_SEC;
		 // Cl_MacNewEvent = true;
		 
		 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   940d8:	4b0c      	ldr	r3, [pc, #48]	; (9410c <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   940da:	781b      	ldrb	r3, [r3, #0]
   940dc:	2b09      	cmp	r3, #9
   940de:	d80f      	bhi.n	94100 <Cl_Timer_Create_Tick500Ms_Event+0x2c>
		 
		 
		 {
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_500M ;
   940e0:	4b0a      	ldr	r3, [pc, #40]	; (9410c <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   940e2:	781b      	ldrb	r3, [r3, #0]
   940e4:	461a      	mov	r2, r3
   940e6:	4b09      	ldr	r3, [pc, #36]	; (9410c <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   940e8:	4413      	add	r3, r2
   940ea:	223a      	movs	r2, #58	; 0x3a
   940ec:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   940ee:	4b07      	ldr	r3, [pc, #28]	; (9410c <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   940f0:	2201      	movs	r2, #1
   940f2:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   940f4:	4b05      	ldr	r3, [pc, #20]	; (9410c <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   940f6:	781b      	ldrb	r3, [r3, #0]
   940f8:	3301      	adds	r3, #1
   940fa:	b2da      	uxtb	r2, r3
   940fc:	4b03      	ldr	r3, [pc, #12]	; (9410c <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   940fe:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);   //12-04
		 }
		 return CL_OK;
   94100:	2300      	movs	r3, #0
		 
		 
	 }
   94102:	4618      	mov	r0, r3
   94104:	46bd      	mov	sp, r7
   94106:	f85d 7b04 	ldr.w	r7, [sp], #4
   9410a:	4770      	bx	lr
   9410c:	2007234c 	.word	0x2007234c

00094110 <Cl_Timer_Create_TickSec_Event>:



	 Cl_ReturnCodeType  Cl_Timer_Create_TickSec_Event(void)
	 {
   94110:	b580      	push	{r7, lr}
   94112:	af00      	add	r7, sp, #0
		// Cl_MacEvent = EVT_TICK_SEC;
		// Cl_MacNewEvent = true;
		static Cl_Uint8Type Cl_Secondscnt = 0;
		
		Cl_Secondscnt++;
   94114:	4b14      	ldr	r3, [pc, #80]	; (94168 <Cl_Timer_Create_TickSec_Event+0x58>)
   94116:	781b      	ldrb	r3, [r3, #0]
   94118:	3301      	adds	r3, #1
   9411a:	b2da      	uxtb	r2, r3
   9411c:	4b12      	ldr	r3, [pc, #72]	; (94168 <Cl_Timer_Create_TickSec_Event+0x58>)
   9411e:	701a      	strb	r2, [r3, #0]
		// Cl_Mac_GetSystem_Status_Query();
		 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   94120:	4b12      	ldr	r3, [pc, #72]	; (9416c <Cl_Timer_Create_TickSec_Event+0x5c>)
   94122:	781b      	ldrb	r3, [r3, #0]
   94124:	2b09      	cmp	r3, #9
   94126:	d80f      	bhi.n	94148 <Cl_Timer_Create_TickSec_Event+0x38>
		
		
		 {
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_SEC ;
   94128:	4b10      	ldr	r3, [pc, #64]	; (9416c <Cl_Timer_Create_TickSec_Event+0x5c>)
   9412a:	781b      	ldrb	r3, [r3, #0]
   9412c:	461a      	mov	r2, r3
   9412e:	4b0f      	ldr	r3, [pc, #60]	; (9416c <Cl_Timer_Create_TickSec_Event+0x5c>)
   94130:	4413      	add	r3, r2
   94132:	223b      	movs	r2, #59	; 0x3b
   94134:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   94136:	4b0d      	ldr	r3, [pc, #52]	; (9416c <Cl_Timer_Create_TickSec_Event+0x5c>)
   94138:	2201      	movs	r2, #1
   9413a:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   9413c:	4b0b      	ldr	r3, [pc, #44]	; (9416c <Cl_Timer_Create_TickSec_Event+0x5c>)
   9413e:	781b      	ldrb	r3, [r3, #0]
   94140:	3301      	adds	r3, #1
   94142:	b2da      	uxtb	r2, r3
   94144:	4b09      	ldr	r3, [pc, #36]	; (9416c <Cl_Timer_Create_TickSec_Event+0x5c>)
   94146:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);            //12-04
		 }		 
		if(Cl_Secondscnt >= 60)
   94148:	4b07      	ldr	r3, [pc, #28]	; (94168 <Cl_Timer_Create_TickSec_Event+0x58>)
   9414a:	781b      	ldrb	r3, [r3, #0]
   9414c:	2b3b      	cmp	r3, #59	; 0x3b
   9414e:	d908      	bls.n	94162 <Cl_Timer_Create_TickSec_Event+0x52>
		 {
			 Cl_Secondscnt = 0;
   94150:	4b05      	ldr	r3, [pc, #20]	; (94168 <Cl_Timer_Create_TickSec_Event+0x58>)
   94152:	2200      	movs	r2, #0
   94154:	701a      	strb	r2, [r3, #0]
			//  Cl_Minutes++;
			 Cl_RetValue = Cl_Timer_Create_TickMin_Event();
   94156:	4b06      	ldr	r3, [pc, #24]	; (94170 <Cl_Timer_Create_TickSec_Event+0x60>)
   94158:	4798      	blx	r3
   9415a:	4603      	mov	r3, r0
   9415c:	461a      	mov	r2, r3
   9415e:	4b05      	ldr	r3, [pc, #20]	; (94174 <Cl_Timer_Create_TickSec_Event+0x64>)
   94160:	701a      	strb	r2, [r3, #0]
			// tg_timer_minute();
		 }
			 return CL_OK;
   94162:	2300      	movs	r3, #0
		 
		
		 }
   94164:	4618      	mov	r0, r3
   94166:	bd80      	pop	{r7, pc}
   94168:	20071bd8 	.word	0x20071bd8
   9416c:	2007234c 	.word	0x2007234c
   94170:	00094179 	.word	0x00094179
   94174:	2007287c 	.word	0x2007287c

00094178 <Cl_Timer_Create_TickMin_Event>:

	 Cl_ReturnCodeType  Cl_Timer_Create_TickMin_Event(void)
	 {
   94178:	b480      	push	{r7}
   9417a:	af00      	add	r7, sp, #0
		 
		 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )	
   9417c:	4b0c      	ldr	r3, [pc, #48]	; (941b0 <Cl_Timer_Create_TickMin_Event+0x38>)
   9417e:	781b      	ldrb	r3, [r3, #0]
   94180:	2b09      	cmp	r3, #9
   94182:	d80f      	bhi.n	941a4 <Cl_Timer_Create_TickMin_Event+0x2c>
		 {
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_MIN ;
   94184:	4b0a      	ldr	r3, [pc, #40]	; (941b0 <Cl_Timer_Create_TickMin_Event+0x38>)
   94186:	781b      	ldrb	r3, [r3, #0]
   94188:	461a      	mov	r2, r3
   9418a:	4b09      	ldr	r3, [pc, #36]	; (941b0 <Cl_Timer_Create_TickMin_Event+0x38>)
   9418c:	4413      	add	r3, r2
   9418e:	223c      	movs	r2, #60	; 0x3c
   94190:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   94192:	4b07      	ldr	r3, [pc, #28]	; (941b0 <Cl_Timer_Create_TickMin_Event+0x38>)
   94194:	2201      	movs	r2, #1
   94196:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   94198:	4b05      	ldr	r3, [pc, #20]	; (941b0 <Cl_Timer_Create_TickMin_Event+0x38>)
   9419a:	781b      	ldrb	r3, [r3, #0]
   9419c:	3301      	adds	r3, #1
   9419e:	b2da      	uxtb	r2, r3
   941a0:	4b03      	ldr	r3, [pc, #12]	; (941b0 <Cl_Timer_Create_TickMin_Event+0x38>)
   941a2:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);             //12-04
		 }
		 return CL_OK;
   941a4:	2300      	movs	r3, #0
		 
		 // Cl_Console_ConvertTimeoutEvent_toMacEvent(Cl_ConsoleRxEventsType command ,Cl_Mac_EventsType* MacEvent)
	 }
   941a6:	4618      	mov	r0, r3
   941a8:	46bd      	mov	sp, r7
   941aa:	f85d 7b04 	ldr.w	r7, [sp], #4
   941ae:	4770      	bx	lr
   941b0:	2007234c 	.word	0x2007234c

000941b4 <Cl_Timer_Create_TickHour_Event>:

	 Cl_ReturnCodeType  Cl_Timer_Create_TickHour_Event(void)
	 {
   941b4:	b480      	push	{r7}
   941b6:	af00      	add	r7, sp, #0

		 if( Cl_MacEventQueue2.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )	
   941b8:	4b0c      	ldr	r3, [pc, #48]	; (941ec <Cl_Timer_Create_TickHour_Event+0x38>)
   941ba:	781b      	ldrb	r3, [r3, #0]
   941bc:	2b0a      	cmp	r3, #10
   941be:	d80f      	bhi.n	941e0 <Cl_Timer_Create_TickHour_Event+0x2c>
		 {
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_HOUR ;
   941c0:	4b0a      	ldr	r3, [pc, #40]	; (941ec <Cl_Timer_Create_TickHour_Event+0x38>)
   941c2:	781b      	ldrb	r3, [r3, #0]
   941c4:	461a      	mov	r2, r3
   941c6:	4b09      	ldr	r3, [pc, #36]	; (941ec <Cl_Timer_Create_TickHour_Event+0x38>)
   941c8:	4413      	add	r3, r2
   941ca:	223d      	movs	r2, #61	; 0x3d
   941cc:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   941ce:	4b07      	ldr	r3, [pc, #28]	; (941ec <Cl_Timer_Create_TickHour_Event+0x38>)
   941d0:	2201      	movs	r2, #1
   941d2:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   941d4:	4b05      	ldr	r3, [pc, #20]	; (941ec <Cl_Timer_Create_TickHour_Event+0x38>)
   941d6:	781b      	ldrb	r3, [r3, #0]
   941d8:	3301      	adds	r3, #1
   941da:	b2da      	uxtb	r2, r3
   941dc:	4b03      	ldr	r3, [pc, #12]	; (941ec <Cl_Timer_Create_TickHour_Event+0x38>)
   941de:	701a      	strb	r2, [r3, #0]
			 
		 }
		 return CL_OK;
   941e0:	2300      	movs	r3, #0
		 
		 // Cl_Console_ConvertTimeoutEvent_toMacEvent(Cl_ConsoleRxEventsType command ,Cl_Mac_EventsType* MacEvent)
	 }
   941e2:	4618      	mov	r0, r3
   941e4:	46bd      	mov	sp, r7
   941e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   941ea:	4770      	bx	lr
   941ec:	2007234c 	.word	0x2007234c

000941f0 <mdelay>:
Cl_ReturnCodeType cl_memset(Cl_Uint8Type* , Cl_Uint8Type );

volatile Cl_Uint32Type g_ul_ms_ticks = 0;

static void mdelay(Cl_Uint32Type ul_dly_ticks)
{
   941f0:	b480      	push	{r7}
   941f2:	b085      	sub	sp, #20
   941f4:	af00      	add	r7, sp, #0
   941f6:	6078      	str	r0, [r7, #4]
	Cl_Uint32Type ul_cur_ticks;

	ul_cur_ticks = g_ul_ms_ticks;
   941f8:	4b07      	ldr	r3, [pc, #28]	; (94218 <mdelay+0x28>)
   941fa:	681b      	ldr	r3, [r3, #0]
   941fc:	60fb      	str	r3, [r7, #12]
	while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
   941fe:	bf00      	nop
   94200:	4b05      	ldr	r3, [pc, #20]	; (94218 <mdelay+0x28>)
   94202:	681a      	ldr	r2, [r3, #0]
   94204:	68fb      	ldr	r3, [r7, #12]
   94206:	1ad2      	subs	r2, r2, r3
   94208:	687b      	ldr	r3, [r7, #4]
   9420a:	429a      	cmp	r2, r3
   9420c:	d3f8      	bcc.n	94200 <mdelay+0x10>
}
   9420e:	3714      	adds	r7, #20
   94210:	46bd      	mov	sp, r7
   94212:	f85d 7b04 	ldr.w	r7, [sp], #4
   94216:	4770      	bx	lr
   94218:	20071bdc 	.word	0x20071bdc

0009421c <cl_wait>:

Cl_ReturnCodeType cl_wait(Cl_Uint32Type ul_dly_ticks)
{
   9421c:	b580      	push	{r7, lr}
   9421e:	b082      	sub	sp, #8
   94220:	af00      	add	r7, sp, #0
   94222:	6078      	str	r0, [r7, #4]
	mdelay(ul_dly_ticks);
   94224:	6878      	ldr	r0, [r7, #4]
   94226:	4b03      	ldr	r3, [pc, #12]	; (94234 <cl_wait+0x18>)
   94228:	4798      	blx	r3
	return CL_OK;
   9422a:	2300      	movs	r3, #0
}
   9422c:	4618      	mov	r0, r3
   9422e:	3708      	adds	r7, #8
   94230:	46bd      	mov	sp, r7
   94232:	bd80      	pop	{r7, pc}
   94234:	000941f1 	.word	0x000941f1

00094238 <cl_systemtickcallback>:

Cl_ReturnCodeType cl_systemtickcallback(void)
{
   94238:	b580      	push	{r7, lr}
   9423a:	b082      	sub	sp, #8
   9423c:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_retVal;
	Cl_retVal = Cl_MilliTickcallBack();
   9423e:	4b07      	ldr	r3, [pc, #28]	; (9425c <cl_systemtickcallback+0x24>)
   94240:	4798      	blx	r3
   94242:	4603      	mov	r3, r0
   94244:	71fb      	strb	r3, [r7, #7]
	g_ul_ms_ticks++;
   94246:	4b06      	ldr	r3, [pc, #24]	; (94260 <cl_systemtickcallback+0x28>)
   94248:	681b      	ldr	r3, [r3, #0]
   9424a:	3301      	adds	r3, #1
   9424c:	4a04      	ldr	r2, [pc, #16]	; (94260 <cl_systemtickcallback+0x28>)
   9424e:	6013      	str	r3, [r2, #0]
	return  CL_OK;
   94250:	2300      	movs	r3, #0
}
   94252:	4618      	mov	r0, r3
   94254:	3708      	adds	r7, #8
   94256:	46bd      	mov	sp, r7
   94258:	bd80      	pop	{r7, pc}
   9425a:	bf00      	nop
   9425c:	00093dc9 	.word	0x00093dc9
   94260:	20071bdc 	.word	0x20071bdc

00094264 <cl_memset>:


Cl_ReturnCodeType cl_memset(Cl_Uint8Type* pdata, Cl_Uint8Type datasize)
{
   94264:	b480      	push	{r7}
   94266:	b085      	sub	sp, #20
   94268:	af00      	add	r7, sp, #0
   9426a:	6078      	str	r0, [r7, #4]
   9426c:	460b      	mov	r3, r1
   9426e:	70fb      	strb	r3, [r7, #3]
	Cl_Uint8Type tempcnt = 0 ;
   94270:	2300      	movs	r3, #0
   94272:	73fb      	strb	r3, [r7, #15]
	Cl_Uint8Type* pdata1;
	
	pdata1 = (Cl_Uint8Type*)pdata;
   94274:	687b      	ldr	r3, [r7, #4]
   94276:	60bb      	str	r3, [r7, #8]
	
	for (tempcnt = 0 ; tempcnt < datasize ; tempcnt++)
   94278:	2300      	movs	r3, #0
   9427a:	73fb      	strb	r3, [r7, #15]
   9427c:	e007      	b.n	9428e <cl_memset+0x2a>
	{
		pdata[tempcnt] = 0;
   9427e:	7bfb      	ldrb	r3, [r7, #15]
   94280:	687a      	ldr	r2, [r7, #4]
   94282:	4413      	add	r3, r2
   94284:	2200      	movs	r2, #0
   94286:	701a      	strb	r2, [r3, #0]
	Cl_Uint8Type tempcnt = 0 ;
	Cl_Uint8Type* pdata1;
	
	pdata1 = (Cl_Uint8Type*)pdata;
	
	for (tempcnt = 0 ; tempcnt < datasize ; tempcnt++)
   94288:	7bfb      	ldrb	r3, [r7, #15]
   9428a:	3301      	adds	r3, #1
   9428c:	73fb      	strb	r3, [r7, #15]
   9428e:	7bfa      	ldrb	r2, [r7, #15]
   94290:	78fb      	ldrb	r3, [r7, #3]
   94292:	429a      	cmp	r2, r3
   94294:	d3f3      	bcc.n	9427e <cl_memset+0x1a>
	//	*pdata = 1;
	//	pdata++;
	//	*pdata1 = (Cl_Uint8Type*)0;
	//	pdata1 =  pdata1 +1;
	}
	return CL_OK;
   94296:	2300      	movs	r3, #0
}
   94298:	4618      	mov	r0, r3
   9429a:	3714      	adds	r7, #20
   9429c:	46bd      	mov	sp, r7
   9429e:	f85d 7b04 	ldr.w	r7, [sp], #4
   942a2:	4770      	bx	lr
   942a4:	0000      	movs	r0, r0
	...

000942a8 <cl_utilities_CalConductivity>:
//			return conductivity;
			return conductivity; ///10;
}*/

float cl_utilities_CalConductivity(uint16_t raw_cond,float temperature)
{
   942a8:	b590      	push	{r4, r7, lr}
   942aa:	b085      	sub	sp, #20
   942ac:	af00      	add	r7, sp, #0
   942ae:	4603      	mov	r3, r0
   942b0:	6039      	str	r1, [r7, #0]
   942b2:	80fb      	strh	r3, [r7, #6]
			float conductivity, conductance;
			conductance = raw_cond;// /1000; 
   942b4:	88fa      	ldrh	r2, [r7, #6]
   942b6:	4b16      	ldr	r3, [pc, #88]	; (94310 <cl_utilities_CalConductivity+0x68>)
   942b8:	4610      	mov	r0, r2
   942ba:	4798      	blx	r3
   942bc:	4603      	mov	r3, r0
   942be:	60fb      	str	r3, [r7, #12]
//			conductivity = (raw_cond -66.67)/100;                                 // raw conductance contains conductance of fixed 150 ohm resistance
	//		cond_final = 0.0001*cond1*cond1 + 0.032*cond1 +0.91 + 0.4;
//			conductivity = conductance * 1.272;                             // Conductance * cell constant = conductivity
			conductivity = conductance * 0.004544786 *100;
   942c0:	4b14      	ldr	r3, [pc, #80]	; (94314 <cl_utilities_CalConductivity+0x6c>)
   942c2:	68f8      	ldr	r0, [r7, #12]
   942c4:	4798      	blx	r3
   942c6:	4602      	mov	r2, r0
   942c8:	460b      	mov	r3, r1
   942ca:	4c13      	ldr	r4, [pc, #76]	; (94318 <cl_utilities_CalConductivity+0x70>)
   942cc:	4610      	mov	r0, r2
   942ce:	4619      	mov	r1, r3
   942d0:	a30d      	add	r3, pc, #52	; (adr r3, 94308 <cl_utilities_CalConductivity+0x60>)
   942d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   942d6:	47a0      	blx	r4
   942d8:	4602      	mov	r2, r0
   942da:	460b      	mov	r3, r1
   942dc:	4c0e      	ldr	r4, [pc, #56]	; (94318 <cl_utilities_CalConductivity+0x70>)
   942de:	4610      	mov	r0, r2
   942e0:	4619      	mov	r1, r3
   942e2:	f04f 0200 	mov.w	r2, #0
   942e6:	4b0d      	ldr	r3, [pc, #52]	; (9431c <cl_utilities_CalConductivity+0x74>)
   942e8:	47a0      	blx	r4
   942ea:	4602      	mov	r2, r0
   942ec:	460b      	mov	r3, r1
   942ee:	4610      	mov	r0, r2
   942f0:	4619      	mov	r1, r3
   942f2:	4b0b      	ldr	r3, [pc, #44]	; (94320 <cl_utilities_CalConductivity+0x78>)
   942f4:	4798      	blx	r3
   942f6:	4603      	mov	r3, r0
   942f8:	60bb      	str	r3, [r7, #8]
	//		conductivity = (0.0001*conductivity*conductivity + 0.032*conductivity) * 100;                          // Gopal: Need to check for offset if required based on the observations in IBP 02082017
// 			conductivity = (conductivity/(1+(temperature  -25.0)*0.021));                    // conductivity compensated at 25 degrees using win-situ formula

			return conductivity; ///10;
   942fa:	68bb      	ldr	r3, [r7, #8]
   942fc:	4618      	mov	r0, r3
   942fe:	3714      	adds	r7, #20
   94300:	46bd      	mov	sp, r7
   94302:	bd90      	pop	{r4, r7, pc}
   94304:	f3af 8000 	nop.w
   94308:	b3cc0ea6 	.word	0xb3cc0ea6
   9430c:	3f729d8d 	.word	0x3f729d8d
   94310:	000a8255 	.word	0x000a8255
   94314:	000a79dd 	.word	0x000a79dd
   94318:	000a7a85 	.word	0x000a7a85
   9431c:	40590000 	.word	0x40590000
   94320:	000a8049 	.word	0x000a8049

00094324 <cl_bp_controller>:
	}
	return CL_OK;
}

Cl_ReturnCodeType cl_bp_controller(cl_bp_events bp_event , Cl_Uint32Type data)
{
   94324:	b580      	push	{r7, lr}
   94326:	b084      	sub	sp, #16
   94328:	af00      	add	r7, sp, #0
   9432a:	4603      	mov	r3, r0
   9432c:	6039      	str	r1, [r7, #0]
   9432e:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_bp_retcode = CL_OK;
   94330:	2300      	movs	r3, #0
   94332:	73fb      	strb	r3, [r7, #15]
	cl_bp_pump_states bp_pumpstate = CL_BP_P_STATE_IDLE;
   94334:	2300      	movs	r3, #0
   94336:	73bb      	strb	r3, [r7, #14]
	Cl_Uint16Type bp_delta_value = 0 ;
   94338:	2300      	movs	r3, #0
   9433a:	81bb      	strh	r3, [r7, #12]
	
	
	switch(bp_state)
   9433c:	4b84      	ldr	r3, [pc, #528]	; (94550 <cl_bp_controller+0x22c>)
   9433e:	781b      	ldrb	r3, [r3, #0]
   94340:	2b04      	cmp	r3, #4
   94342:	f200 80fe 	bhi.w	94542 <cl_bp_controller+0x21e>
   94346:	a201      	add	r2, pc, #4	; (adr r2, 9434c <cl_bp_controller+0x28>)
   94348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9434c:	00094361 	.word	0x00094361
   94350:	000943c5 	.word	0x000943c5
   94354:	00094477 	.word	0x00094477
   94358:	000944d1 	.word	0x000944d1
   9435c:	00094543 	.word	0x00094543
	{
		case CL_BP_STATE_IDLE:
		switch (bp_event)
   94360:	79fb      	ldrb	r3, [r7, #7]
   94362:	2b01      	cmp	r3, #1
   94364:	d002      	beq.n	9436c <cl_bp_controller+0x48>
   94366:	2b02      	cmp	r3, #2
   94368:	d012      	beq.n	94390 <cl_bp_controller+0x6c>
			cl_bp_pumpFeedback_start();
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
			bp_state = CL_BP_STATE_STARTED;
			break;
			
			default:break;
   9436a:	e02a      	b.n	943c2 <cl_bp_controller+0x9e>
	{
		case CL_BP_STATE_IDLE:
		switch (bp_event)
		{
			case CL_BP_EVENT_SET_BP_RATE:
			cl_bp_rate = data;
   9436c:	683b      	ldr	r3, [r7, #0]
   9436e:	4a79      	ldr	r2, [pc, #484]	; (94554 <cl_bp_controller+0x230>)
   94370:	6013      	str	r3, [r2, #0]
			pwm_period = cl_bp_rate ;
   94372:	4b78      	ldr	r3, [pc, #480]	; (94554 <cl_bp_controller+0x230>)
   94374:	681b      	ldr	r3, [r3, #0]
   94376:	4a78      	ldr	r2, [pc, #480]	; (94558 <cl_bp_controller+0x234>)
   94378:	6013      	str	r3, [r2, #0]
			speedchange_bloodpump_feedback(data);
   9437a:	683b      	ldr	r3, [r7, #0]
   9437c:	4618      	mov	r0, r3
   9437e:	4b77      	ldr	r3, [pc, #476]	; (9455c <cl_bp_controller+0x238>)
   94380:	4798      	blx	r3
			sv_cntrl_setpumpspeed(BLOODPUMP,pwm_period);
   94382:	4b75      	ldr	r3, [pc, #468]	; (94558 <cl_bp_controller+0x234>)
   94384:	681b      	ldr	r3, [r3, #0]
   94386:	2003      	movs	r0, #3
   94388:	4619      	mov	r1, r3
   9438a:	4b75      	ldr	r3, [pc, #468]	; (94560 <cl_bp_controller+0x23c>)
   9438c:	4798      	blx	r3
			break;
   9438e:	e018      	b.n	943c2 <cl_bp_controller+0x9e>
			case CL_BP_EVENT_START:
			cl_bp_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   94390:	2001      	movs	r0, #1
   94392:	2101      	movs	r1, #1
   94394:	4b73      	ldr	r3, [pc, #460]	; (94564 <cl_bp_controller+0x240>)
   94396:	4798      	blx	r3
   94398:	4603      	mov	r3, r0
   9439a:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   9439c:	2003      	movs	r0, #3
   9439e:	4b72      	ldr	r3, [pc, #456]	; (94568 <cl_bp_controller+0x244>)
   943a0:	4798      	blx	r3
   943a2:	4603      	mov	r3, r0
   943a4:	73fb      	strb	r3, [r7, #15]
			
			cl_bp_pumpFeedback_start();
   943a6:	4b71      	ldr	r3, [pc, #452]	; (9456c <cl_bp_controller+0x248>)
   943a8:	4798      	blx	r3
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   943aa:	463b      	mov	r3, r7
   943ac:	2035      	movs	r0, #53	; 0x35
   943ae:	4619      	mov	r1, r3
   943b0:	2200      	movs	r2, #0
   943b2:	4b6f      	ldr	r3, [pc, #444]	; (94570 <cl_bp_controller+0x24c>)
   943b4:	4798      	blx	r3
   943b6:	4603      	mov	r3, r0
   943b8:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STARTED;
   943ba:	4b65      	ldr	r3, [pc, #404]	; (94550 <cl_bp_controller+0x22c>)
   943bc:	2201      	movs	r2, #1
   943be:	701a      	strb	r2, [r3, #0]
			break;
   943c0:	bf00      	nop
			
			default:break;
			
		}
		break;
   943c2:	e0bf      	b.n	94544 <cl_bp_controller+0x220>
		case CL_BP_STATE_STARTED:
		switch (bp_event)
   943c4:	79fb      	ldrb	r3, [r7, #7]
   943c6:	3b01      	subs	r3, #1
   943c8:	2b06      	cmp	r3, #6
   943ca:	d852      	bhi.n	94472 <cl_bp_controller+0x14e>
   943cc:	a201      	add	r2, pc, #4	; (adr r2, 943d4 <cl_bp_controller+0xb0>)
   943ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   943d2:	bf00      	nop
   943d4:	00094423 	.word	0x00094423
   943d8:	000943f1 	.word	0x000943f1
   943dc:	00094473 	.word	0x00094473
   943e0:	0009443d 	.word	0x0009443d
   943e4:	0009446b 	.word	0x0009446b
   943e8:	00094473 	.word	0x00094473
   943ec:	00094473 	.word	0x00094473
		{
			case CL_BP_EVENT_START:
			
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   943f0:	2003      	movs	r0, #3
   943f2:	4b5d      	ldr	r3, [pc, #372]	; (94568 <cl_bp_controller+0x244>)
   943f4:	4798      	blx	r3
   943f6:	4603      	mov	r3, r0
   943f8:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   943fa:	2001      	movs	r0, #1
   943fc:	2101      	movs	r1, #1
   943fe:	4b59      	ldr	r3, [pc, #356]	; (94564 <cl_bp_controller+0x240>)
   94400:	4798      	blx	r3
   94402:	4603      	mov	r3, r0
   94404:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   94406:	4b59      	ldr	r3, [pc, #356]	; (9456c <cl_bp_controller+0x248>)
   94408:	4798      	blx	r3
		//	speedchange_bloodpump_feedback(data);
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   9440a:	463b      	mov	r3, r7
   9440c:	2035      	movs	r0, #53	; 0x35
   9440e:	4619      	mov	r1, r3
   94410:	2200      	movs	r2, #0
   94412:	4b57      	ldr	r3, [pc, #348]	; (94570 <cl_bp_controller+0x24c>)
   94414:	4798      	blx	r3
   94416:	4603      	mov	r3, r0
   94418:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STARTED;
   9441a:	4b4d      	ldr	r3, [pc, #308]	; (94550 <cl_bp_controller+0x22c>)
   9441c:	2201      	movs	r2, #1
   9441e:	701a      	strb	r2, [r3, #0]
			
			break;
   94420:	e028      	b.n	94474 <cl_bp_controller+0x150>
			{
				
			}
			break;
			case CL_BP_EVENT_SET_BP_RATE:
			speedchange_bloodpump_feedback(data);
   94422:	683b      	ldr	r3, [r7, #0]
   94424:	4618      	mov	r0, r3
   94426:	4b4d      	ldr	r3, [pc, #308]	; (9455c <cl_bp_controller+0x238>)
   94428:	4798      	blx	r3
			sv_cntrl_setpumpspeed(BLOODPUMP,data);
   9442a:	683b      	ldr	r3, [r7, #0]
   9442c:	2003      	movs	r0, #3
   9442e:	4619      	mov	r1, r3
   94430:	4b4b      	ldr	r3, [pc, #300]	; (94560 <cl_bp_controller+0x23c>)
   94432:	4798      	blx	r3
			
			bp_state =  CL_BP_STATE_STARTED;
   94434:	4b46      	ldr	r3, [pc, #280]	; (94550 <cl_bp_controller+0x22c>)
   94436:	2201      	movs	r2, #1
   94438:	701a      	strb	r2, [r3, #0]
			break;
   9443a:	e01b      	b.n	94474 <cl_bp_controller+0x150>
			case CL_BP_EVENT_PAUSE:
			break;
			case CL_BP_EVENT_STOP:
		//	cl_wait(200);
			cl_bp_retcode =  sv_cntrl_deactivatepump(BLOODPUMP);
   9443c:	2003      	movs	r0, #3
   9443e:	4b4d      	ldr	r3, [pc, #308]	; (94574 <cl_bp_controller+0x250>)
   94440:	4798      	blx	r3
   94442:	4603      	mov	r3, r0
   94444:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   94446:	4b49      	ldr	r3, [pc, #292]	; (9456c <cl_bp_controller+0x248>)
   94448:	4798      	blx	r3
		//	cl_wait(20);
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_OFF,&data,0);
   9444a:	463b      	mov	r3, r7
   9444c:	2036      	movs	r0, #54	; 0x36
   9444e:	4619      	mov	r1, r3
   94450:	2200      	movs	r2, #0
   94452:	4b47      	ldr	r3, [pc, #284]	; (94570 <cl_bp_controller+0x24c>)
   94454:	4798      	blx	r3
   94456:	4603      	mov	r3, r0
   94458:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  cl_bp_pumpFeedback_stop();
   9445a:	4b47      	ldr	r3, [pc, #284]	; (94578 <cl_bp_controller+0x254>)
   9445c:	4798      	blx	r3
   9445e:	4603      	mov	r3, r0
   94460:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STOPPED;
   94462:	4b3b      	ldr	r3, [pc, #236]	; (94550 <cl_bp_controller+0x22c>)
   94464:	2202      	movs	r2, #2
   94466:	701a      	strb	r2, [r3, #0]
			break;
   94468:	e004      	b.n	94474 <cl_bp_controller+0x150>
			case CL_BP_EVENT_COMPLETED:
			bp_state = CL_BP_STATE_IDLE;
   9446a:	4b39      	ldr	r3, [pc, #228]	; (94550 <cl_bp_controller+0x22c>)
   9446c:	2200      	movs	r2, #0
   9446e:	701a      	strb	r2, [r3, #0]
			break;
   94470:	e000      	b.n	94474 <cl_bp_controller+0x150>
			default:break;
   94472:	bf00      	nop
			
		}
		break;
   94474:	e066      	b.n	94544 <cl_bp_controller+0x220>
		case CL_BP_STATE_STOPPED:
		switch (bp_event)
   94476:	79fb      	ldrb	r3, [r7, #7]
   94478:	2b01      	cmp	r3, #1
   9447a:	d002      	beq.n	94482 <cl_bp_controller+0x15e>
   9447c:	2b02      	cmp	r3, #2
   9447e:	d00d      	beq.n	9449c <cl_bp_controller+0x178>
			cl_bp_pumpFeedback_start();
	//		speedchange_bloodpump_feedback(data);
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
			bp_state = CL_BP_STATE_STARTED;
			break;
			default:break;
   94480:	e025      	b.n	944ce <cl_bp_controller+0x1aa>
		break;
		case CL_BP_STATE_STOPPED:
		switch (bp_event)
		{
			case CL_BP_EVENT_SET_BP_RATE:
			cl_bp_rate = data;
   94482:	683b      	ldr	r3, [r7, #0]
   94484:	4a33      	ldr	r2, [pc, #204]	; (94554 <cl_bp_controller+0x230>)
   94486:	6013      	str	r3, [r2, #0]
			speedchange_bloodpump_feedback(data);
   94488:	683b      	ldr	r3, [r7, #0]
   9448a:	4618      	mov	r0, r3
   9448c:	4b33      	ldr	r3, [pc, #204]	; (9455c <cl_bp_controller+0x238>)
   9448e:	4798      	blx	r3
			sv_cntrl_setpumpspeed(BLOODPUMP,data);
   94490:	683b      	ldr	r3, [r7, #0]
   94492:	2003      	movs	r0, #3
   94494:	4619      	mov	r1, r3
   94496:	4b32      	ldr	r3, [pc, #200]	; (94560 <cl_bp_controller+0x23c>)
   94498:	4798      	blx	r3
			break;
   9449a:	e018      	b.n	944ce <cl_bp_controller+0x1aa>
			case CL_BP_EVENT_START:
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   9449c:	2003      	movs	r0, #3
   9449e:	4b32      	ldr	r3, [pc, #200]	; (94568 <cl_bp_controller+0x244>)
   944a0:	4798      	blx	r3
   944a2:	4603      	mov	r3, r0
   944a4:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   944a6:	2001      	movs	r0, #1
   944a8:	2101      	movs	r1, #1
   944aa:	4b2e      	ldr	r3, [pc, #184]	; (94564 <cl_bp_controller+0x240>)
   944ac:	4798      	blx	r3
   944ae:	4603      	mov	r3, r0
   944b0:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   944b2:	4b2e      	ldr	r3, [pc, #184]	; (9456c <cl_bp_controller+0x248>)
   944b4:	4798      	blx	r3
	//		speedchange_bloodpump_feedback(data);
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   944b6:	463b      	mov	r3, r7
   944b8:	2035      	movs	r0, #53	; 0x35
   944ba:	4619      	mov	r1, r3
   944bc:	2200      	movs	r2, #0
   944be:	4b2c      	ldr	r3, [pc, #176]	; (94570 <cl_bp_controller+0x24c>)
   944c0:	4798      	blx	r3
   944c2:	4603      	mov	r3, r0
   944c4:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STARTED;
   944c6:	4b22      	ldr	r3, [pc, #136]	; (94550 <cl_bp_controller+0x22c>)
   944c8:	2201      	movs	r2, #1
   944ca:	701a      	strb	r2, [r3, #0]
			break;
   944cc:	bf00      	nop
			default:break;
			
		}
		break;
   944ce:	e039      	b.n	94544 <cl_bp_controller+0x220>
		case CL_BP_STATE_PAUSED:
		switch (bp_event)
   944d0:	79fb      	ldrb	r3, [r7, #7]
   944d2:	2b02      	cmp	r3, #2
   944d4:	d008      	beq.n	944e8 <cl_bp_controller+0x1c4>
   944d6:	2b04      	cmp	r3, #4
   944d8:	d01f      	beq.n	9451a <cl_bp_controller+0x1f6>
   944da:	2b01      	cmp	r3, #1
   944dc:	d000      	beq.n	944e0 <cl_bp_controller+0x1bc>
			cl_bp_retcode =  sv_cntrl_deactivatepump(BLOODPUMP);
			cl_bp_pumpFeedback_start();
			bp_state = CL_BP_STATE_STOPPED;
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_OFF,&data,0);
			break;
			default:break;
   944de:	e02f      	b.n	94540 <cl_bp_controller+0x21c>
		break;
		case CL_BP_STATE_PAUSED:
		switch (bp_event)
		{
			case CL_BP_EVENT_SET_BP_RATE:
			cl_bp_rate = data;
   944e0:	683b      	ldr	r3, [r7, #0]
   944e2:	4a1c      	ldr	r2, [pc, #112]	; (94554 <cl_bp_controller+0x230>)
   944e4:	6013      	str	r3, [r2, #0]
	//		sv_cntrl_setpumpspeed(BLOODPUMP,data);
			break;
   944e6:	e02b      	b.n	94540 <cl_bp_controller+0x21c>
			case CL_BP_EVENT_START:
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   944e8:	2003      	movs	r0, #3
   944ea:	4b1f      	ldr	r3, [pc, #124]	; (94568 <cl_bp_controller+0x244>)
   944ec:	4798      	blx	r3
   944ee:	4603      	mov	r3, r0
   944f0:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   944f2:	2001      	movs	r0, #1
   944f4:	2101      	movs	r1, #1
   944f6:	4b1b      	ldr	r3, [pc, #108]	; (94564 <cl_bp_controller+0x240>)
   944f8:	4798      	blx	r3
   944fa:	4603      	mov	r3, r0
   944fc:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   944fe:	4b1b      	ldr	r3, [pc, #108]	; (9456c <cl_bp_controller+0x248>)
   94500:	4798      	blx	r3
		//	speedchange_bloodpump_feedback(data);
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   94502:	463b      	mov	r3, r7
   94504:	2035      	movs	r0, #53	; 0x35
   94506:	4619      	mov	r1, r3
   94508:	2200      	movs	r2, #0
   9450a:	4b19      	ldr	r3, [pc, #100]	; (94570 <cl_bp_controller+0x24c>)
   9450c:	4798      	blx	r3
   9450e:	4603      	mov	r3, r0
   94510:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STARTED;
   94512:	4b0f      	ldr	r3, [pc, #60]	; (94550 <cl_bp_controller+0x22c>)
   94514:	2201      	movs	r2, #1
   94516:	701a      	strb	r2, [r3, #0]
			break;
   94518:	e012      	b.n	94540 <cl_bp_controller+0x21c>
			case CL_BP_EVENT_STOP:
			cl_bp_retcode =  sv_cntrl_deactivatepump(BLOODPUMP);
   9451a:	2003      	movs	r0, #3
   9451c:	4b15      	ldr	r3, [pc, #84]	; (94574 <cl_bp_controller+0x250>)
   9451e:	4798      	blx	r3
   94520:	4603      	mov	r3, r0
   94522:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   94524:	4b11      	ldr	r3, [pc, #68]	; (9456c <cl_bp_controller+0x248>)
   94526:	4798      	blx	r3
			bp_state = CL_BP_STATE_STOPPED;
   94528:	4b09      	ldr	r3, [pc, #36]	; (94550 <cl_bp_controller+0x22c>)
   9452a:	2202      	movs	r2, #2
   9452c:	701a      	strb	r2, [r3, #0]
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_OFF,&data,0);
   9452e:	463b      	mov	r3, r7
   94530:	2036      	movs	r0, #54	; 0x36
   94532:	4619      	mov	r1, r3
   94534:	2200      	movs	r2, #0
   94536:	4b0e      	ldr	r3, [pc, #56]	; (94570 <cl_bp_controller+0x24c>)
   94538:	4798      	blx	r3
   9453a:	4603      	mov	r3, r0
   9453c:	73fb      	strb	r3, [r7, #15]
			break;
   9453e:	bf00      	nop
			default:break;
			
		}
		break;
   94540:	e000      	b.n	94544 <cl_bp_controller+0x220>
		case CL_BP_STATE_COMPLETED:
		break;
		default:break;
   94542:	bf00      	nop
		
		
	}
	return CL_OK;
   94544:	2300      	movs	r3, #0
   94546:	4618      	mov	r0, r3
   94548:	3710      	adds	r7, #16
   9454a:	46bd      	mov	sp, r7
   9454c:	bd80      	pop	{r7, pc}
   9454e:	bf00      	nop
   94550:	20071be0 	.word	0x20071be0
   94554:	20071be4 	.word	0x20071be4
   94558:	20070bec 	.word	0x20070bec
   9455c:	00083b95 	.word	0x00083b95
   94560:	0009b461 	.word	0x0009b461
   94564:	00082a35 	.word	0x00082a35
   94568:	0009b32d 	.word	0x0009b32d
   9456c:	000945bd 	.word	0x000945bd
   94570:	0009d1e9 	.word	0x0009d1e9
   94574:	0009b369 	.word	0x0009b369
   94578:	000945d9 	.word	0x000945d9

0009457c <cl_bp_selftest_start>:
static Cl_Uint16Type bp_rotation_counter = 0,bp_selftest_rotation_counter = 0;
static Cl_BoolType count_state = false;


Cl_ReturnCodeType cl_bp_selftest_start(void)
{
   9457c:	b480      	push	{r7}
   9457e:	af00      	add	r7, sp, #0
	cl_bp_pump_state = CL_BP_P_SELFTEST_START;
   94580:	4b05      	ldr	r3, [pc, #20]	; (94598 <cl_bp_selftest_start+0x1c>)
   94582:	2202      	movs	r2, #2
   94584:	701a      	strb	r2, [r3, #0]
	bp_periodvalue = 0;
   94586:	4b05      	ldr	r3, [pc, #20]	; (9459c <cl_bp_selftest_start+0x20>)
   94588:	2200      	movs	r2, #0
   9458a:	801a      	strh	r2, [r3, #0]
	return 0;
   9458c:	2300      	movs	r3, #0
}
   9458e:	4618      	mov	r0, r3
   94590:	46bd      	mov	sp, r7
   94592:	f85d 7b04 	ldr.w	r7, [sp], #4
   94596:	4770      	bx	lr
   94598:	20071bea 	.word	0x20071bea
   9459c:	20071b18 	.word	0x20071b18

000945a0 <cl_bp_selftest_stop>:
Cl_ReturnCodeType cl_bp_selftest_stop(void)
{
   945a0:	b480      	push	{r7}
   945a2:	af00      	add	r7, sp, #0
	cl_bp_pump_state = CL_BP_P_STATE_IDLE;
   945a4:	4b04      	ldr	r3, [pc, #16]	; (945b8 <cl_bp_selftest_stop+0x18>)
   945a6:	2200      	movs	r2, #0
   945a8:	701a      	strb	r2, [r3, #0]
	return 0;
   945aa:	2300      	movs	r3, #0
}
   945ac:	4618      	mov	r0, r3
   945ae:	46bd      	mov	sp, r7
   945b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   945b4:	4770      	bx	lr
   945b6:	bf00      	nop
   945b8:	20071bea 	.word	0x20071bea

000945bc <cl_bp_pumpFeedback_start>:



Cl_ReturnCodeType cl_bp_pumpFeedback_start(void)
{
   945bc:	b480      	push	{r7}
   945be:	af00      	add	r7, sp, #0
	cl_bp_pump_state = CL_BP_P_STATE_STARTED;
   945c0:	4b04      	ldr	r3, [pc, #16]	; (945d4 <cl_bp_pumpFeedback_start+0x18>)
   945c2:	2201      	movs	r2, #1
   945c4:	701a      	strb	r2, [r3, #0]
	return 0;
   945c6:	2300      	movs	r3, #0
}
   945c8:	4618      	mov	r0, r3
   945ca:	46bd      	mov	sp, r7
   945cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   945d0:	4770      	bx	lr
   945d2:	bf00      	nop
   945d4:	20071bea 	.word	0x20071bea

000945d8 <cl_bp_pumpFeedback_stop>:
Cl_ReturnCodeType cl_bp_pumpFeedback_stop(void)
{
   945d8:	b480      	push	{r7}
   945da:	af00      	add	r7, sp, #0
	
	return 0;
   945dc:	2300      	movs	r3, #0
}
   945de:	4618      	mov	r0, r3
   945e0:	46bd      	mov	sp, r7
   945e2:	f85d 7b04 	ldr.w	r7, [sp], #4
   945e6:	4770      	bx	lr

000945e8 <cl_bp_feedback_hemo>:
	bp_expected_period = period;
	return 0;
}


Cl_ReturnCodeType cl_bp_feedback_hemo(void){
   945e8:	b580      	push	{r7, lr}
   945ea:	af00      	add	r7, sp, #0
	
	// read expected feedback from can   fed_value 
	// read current feedback from can  BPCanFeedBackValue

if((cl_bp_pump_state == CL_BP_P_STATE_STARTED) && (cl_bp_pump_state !=CL_BP_P_SELFTEST_START))
   945ec:	4b11      	ldr	r3, [pc, #68]	; (94634 <cl_bp_feedback_hemo+0x4c>)
   945ee:	781b      	ldrb	r3, [r3, #0]
   945f0:	2b01      	cmp	r3, #1
   945f2:	d11c      	bne.n	9462e <cl_bp_feedback_hemo+0x46>
   945f4:	4b0f      	ldr	r3, [pc, #60]	; (94634 <cl_bp_feedback_hemo+0x4c>)
   945f6:	781b      	ldrb	r3, [r3, #0]
   945f8:	2b02      	cmp	r3, #2
   945fa:	d018      	beq.n	9462e <cl_bp_feedback_hemo+0x46>
{	
	if(BPCanFeedBackValue > (fed_value + 30)){
   945fc:	4b0e      	ldr	r3, [pc, #56]	; (94638 <cl_bp_feedback_hemo+0x50>)
   945fe:	881b      	ldrh	r3, [r3, #0]
   94600:	461a      	mov	r2, r3
   94602:	4b0e      	ldr	r3, [pc, #56]	; (9463c <cl_bp_feedback_hemo+0x54>)
   94604:	681b      	ldr	r3, [r3, #0]
   94606:	331e      	adds	r3, #30
   94608:	429a      	cmp	r2, r3
   9460a:	d904      	bls.n	94616 <cl_bp_feedback_hemo+0x2e>
		
		Cl_Alarm_TriggerAlarm(BP_UNDERRUN,1);
   9460c:	2037      	movs	r0, #55	; 0x37
   9460e:	2101      	movs	r1, #1
   94610:	4b0b      	ldr	r3, [pc, #44]	; (94640 <cl_bp_feedback_hemo+0x58>)
   94612:	4798      	blx	r3
   94614:	e00b      	b.n	9462e <cl_bp_feedback_hemo+0x46>
		
	}
	else if(BPCanFeedBackValue < (fed_value - 30)){
   94616:	4b08      	ldr	r3, [pc, #32]	; (94638 <cl_bp_feedback_hemo+0x50>)
   94618:	881b      	ldrh	r3, [r3, #0]
   9461a:	461a      	mov	r2, r3
   9461c:	4b07      	ldr	r3, [pc, #28]	; (9463c <cl_bp_feedback_hemo+0x54>)
   9461e:	681b      	ldr	r3, [r3, #0]
   94620:	3b1e      	subs	r3, #30
   94622:	429a      	cmp	r2, r3
   94624:	d203      	bcs.n	9462e <cl_bp_feedback_hemo+0x46>
		
		Cl_Alarm_TriggerAlarm(BP_OVERRUN,1);
   94626:	2036      	movs	r0, #54	; 0x36
   94628:	2101      	movs	r1, #1
   9462a:	4b05      	ldr	r3, [pc, #20]	; (94640 <cl_bp_feedback_hemo+0x58>)
   9462c:	4798      	blx	r3
	}

}
}
   9462e:	4618      	mov	r0, r3
   94630:	bd80      	pop	{r7, pc}
   94632:	bf00      	nop
   94634:	20071bea 	.word	0x20071bea
   94638:	20071c86 	.word	0x20071c86
   9463c:	20071a44 	.word	0x20071a44
   94640:	00082c75 	.word	0x00082c75
   94644:	00000000 	.word	0x00000000

00094648 <cl_bp_pumpFeedback_timer>:


Cl_ReturnCodeType cl_bp_pumpFeedback_timer(void) // 5 ms clock
{
   94648:	e92d 4398 	stmdb	sp!, {r3, r4, r7, r8, r9, lr}
   9464c:	af00      	add	r7, sp, #0
	//cl_Datastreamtype cl_data;
	//cl_testgetsensordata(BP_ROTATION_MARKER,&bp_rotataion_marker);

	if(cl_bp_pump_state != CL_BP_P_STATE_IDLE)
   9464e:	4b62      	ldr	r3, [pc, #392]	; (947d8 <cl_bp_pumpFeedback_timer+0x190>)
   94650:	781b      	ldrb	r3, [r3, #0]
   94652:	2b00      	cmp	r3, #0
   94654:	f000 80b1 	beq.w	947ba <cl_bp_pumpFeedback_timer+0x172>
	{
	Cl_SysStat_GetSensor_Status_Query(SENSOR_BP_FB, &bp_rotataion_marker);
   94658:	201c      	movs	r0, #28
   9465a:	4960      	ldr	r1, [pc, #384]	; (947dc <cl_bp_pumpFeedback_timer+0x194>)
   9465c:	4b60      	ldr	r3, [pc, #384]	; (947e0 <cl_bp_pumpFeedback_timer+0x198>)
   9465e:	4798      	blx	r3

	twentymscounter++;
   94660:	4b60      	ldr	r3, [pc, #384]	; (947e4 <cl_bp_pumpFeedback_timer+0x19c>)
   94662:	881b      	ldrh	r3, [r3, #0]
   94664:	3301      	adds	r3, #1
   94666:	b29a      	uxth	r2, r3
   94668:	4b5e      	ldr	r3, [pc, #376]	; (947e4 <cl_bp_pumpFeedback_timer+0x19c>)
   9466a:	801a      	strh	r2, [r3, #0]
			if(twentymscounter > 1000)
   9466c:	4b5d      	ldr	r3, [pc, #372]	; (947e4 <cl_bp_pumpFeedback_timer+0x19c>)
   9466e:	881b      	ldrh	r3, [r3, #0]
   94670:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   94674:	d903      	bls.n	9467e <cl_bp_pumpFeedback_timer+0x36>
			{
				// raise BP alarm
				Cl_Alarm_TriggerAlarm(BP_UNDERRUN,1);
   94676:	2037      	movs	r0, #55	; 0x37
   94678:	2101      	movs	r1, #1
   9467a:	4b5b      	ldr	r3, [pc, #364]	; (947e8 <cl_bp_pumpFeedback_timer+0x1a0>)
   9467c:	4798      	blx	r3
// 			{
// 				cl_bp_pump_state = CL_BP_P_STATE_RUNNING;
// 			}
	
		
			if(count_state == false)
   9467e:	4b5b      	ldr	r3, [pc, #364]	; (947ec <cl_bp_pumpFeedback_timer+0x1a4>)
   94680:	781b      	ldrb	r3, [r3, #0]
   94682:	f083 0301 	eor.w	r3, r3, #1
   94686:	b2db      	uxtb	r3, r3
   94688:	2b00      	cmp	r3, #0
   9468a:	d012      	beq.n	946b2 <cl_bp_pumpFeedback_timer+0x6a>
			{
				if(bp_rotataion_marker == 0 )
   9468c:	4b53      	ldr	r3, [pc, #332]	; (947dc <cl_bp_pumpFeedback_timer+0x194>)
   9468e:	881b      	ldrh	r3, [r3, #0]
   94690:	2b00      	cmp	r3, #0
   94692:	f040 808e 	bne.w	947b2 <cl_bp_pumpFeedback_timer+0x16a>
				{
					if(prev_bp_rotataion_marker != bp_rotataion_marker)
   94696:	4b56      	ldr	r3, [pc, #344]	; (947f0 <cl_bp_pumpFeedback_timer+0x1a8>)
   94698:	881a      	ldrh	r2, [r3, #0]
   9469a:	4b50      	ldr	r3, [pc, #320]	; (947dc <cl_bp_pumpFeedback_timer+0x194>)
   9469c:	881b      	ldrh	r3, [r3, #0]
   9469e:	429a      	cmp	r2, r3
   946a0:	f000 8087 	beq.w	947b2 <cl_bp_pumpFeedback_timer+0x16a>
					{
						count_state = true;
   946a4:	4b51      	ldr	r3, [pc, #324]	; (947ec <cl_bp_pumpFeedback_timer+0x1a4>)
   946a6:	2201      	movs	r2, #1
   946a8:	701a      	strb	r2, [r3, #0]
						//bp_rotation_counter++;
						twentymscounter = 0;
   946aa:	4b4e      	ldr	r3, [pc, #312]	; (947e4 <cl_bp_pumpFeedback_timer+0x19c>)
   946ac:	2200      	movs	r2, #0
   946ae:	801a      	strh	r2, [r3, #0]
   946b0:	e07f      	b.n	947b2 <cl_bp_pumpFeedback_timer+0x16a>
					}
				}
			}
			else
			{
				if(bp_rotataion_marker == 0 )
   946b2:	4b4a      	ldr	r3, [pc, #296]	; (947dc <cl_bp_pumpFeedback_timer+0x194>)
   946b4:	881b      	ldrh	r3, [r3, #0]
   946b6:	2b00      	cmp	r3, #0
   946b8:	d17b      	bne.n	947b2 <cl_bp_pumpFeedback_timer+0x16a>
				{
					if(prev_bp_rotataion_marker != bp_rotataion_marker)
   946ba:	4b4d      	ldr	r3, [pc, #308]	; (947f0 <cl_bp_pumpFeedback_timer+0x1a8>)
   946bc:	881a      	ldrh	r2, [r3, #0]
   946be:	4b47      	ldr	r3, [pc, #284]	; (947dc <cl_bp_pumpFeedback_timer+0x194>)
   946c0:	881b      	ldrh	r3, [r3, #0]
   946c2:	429a      	cmp	r2, r3
   946c4:	d075      	beq.n	947b2 <cl_bp_pumpFeedback_timer+0x16a>
					{
						count_state = true;
   946c6:	4b49      	ldr	r3, [pc, #292]	; (947ec <cl_bp_pumpFeedback_timer+0x1a4>)
   946c8:	2201      	movs	r2, #1
   946ca:	701a      	strb	r2, [r3, #0]
						bp_rotation_counter++;
   946cc:	4b49      	ldr	r3, [pc, #292]	; (947f4 <cl_bp_pumpFeedback_timer+0x1ac>)
   946ce:	881b      	ldrh	r3, [r3, #0]
   946d0:	3301      	adds	r3, #1
   946d2:	b29a      	uxth	r2, r3
   946d4:	4b47      	ldr	r3, [pc, #284]	; (947f4 <cl_bp_pumpFeedback_timer+0x1ac>)
   946d6:	801a      	strh	r2, [r3, #0]
						bp_selftest_rotation_counter++;
   946d8:	4b47      	ldr	r3, [pc, #284]	; (947f8 <cl_bp_pumpFeedback_timer+0x1b0>)
   946da:	881b      	ldrh	r3, [r3, #0]
   946dc:	3301      	adds	r3, #1
   946de:	b29a      	uxth	r2, r3
   946e0:	4b45      	ldr	r3, [pc, #276]	; (947f8 <cl_bp_pumpFeedback_timer+0x1b0>)
   946e2:	801a      	strh	r2, [r3, #0]
						
						bp_period = twentymscounter*20;
   946e4:	4b3f      	ldr	r3, [pc, #252]	; (947e4 <cl_bp_pumpFeedback_timer+0x19c>)
   946e6:	881b      	ldrh	r3, [r3, #0]
   946e8:	461a      	mov	r2, r3
   946ea:	0092      	lsls	r2, r2, #2
   946ec:	4413      	add	r3, r2
   946ee:	009b      	lsls	r3, r3, #2
   946f0:	b29a      	uxth	r2, r3
   946f2:	4b42      	ldr	r3, [pc, #264]	; (947fc <cl_bp_pumpFeedback_timer+0x1b4>)
   946f4:	801a      	strh	r2, [r3, #0]
						
								
								if (bp_selftest_rotation_counter >= 20)
   946f6:	4b40      	ldr	r3, [pc, #256]	; (947f8 <cl_bp_pumpFeedback_timer+0x1b0>)
   946f8:	881b      	ldrh	r3, [r3, #0]
   946fa:	2b13      	cmp	r3, #19
   946fc:	d909      	bls.n	94712 <cl_bp_pumpFeedback_timer+0xca>
								{
									
									bp_periodvalue = bp_period;
   946fe:	4b3f      	ldr	r3, [pc, #252]	; (947fc <cl_bp_pumpFeedback_timer+0x1b4>)
   94700:	881a      	ldrh	r2, [r3, #0]
   94702:	4b3f      	ldr	r3, [pc, #252]	; (94800 <cl_bp_pumpFeedback_timer+0x1b8>)
   94704:	801a      	strh	r2, [r3, #0]
									bp_selftest_rotation_counter = 0;
   94706:	4b3c      	ldr	r3, [pc, #240]	; (947f8 <cl_bp_pumpFeedback_timer+0x1b0>)
   94708:	2200      	movs	r2, #0
   9470a:	801a      	strh	r2, [r3, #0]
										twentymscounter = 0;
   9470c:	4b35      	ldr	r3, [pc, #212]	; (947e4 <cl_bp_pumpFeedback_timer+0x19c>)
   9470e:	2200      	movs	r2, #0
   94710:	801a      	strh	r2, [r3, #0]
								}
						
						
						
				
						if((cl_bp_pump_state != CL_BP_P_STATE_STARTED) && (cl_bp_pump_state !=CL_BP_P_SELFTEST_START))
   94712:	4b31      	ldr	r3, [pc, #196]	; (947d8 <cl_bp_pumpFeedback_timer+0x190>)
   94714:	781b      	ldrb	r3, [r3, #0]
   94716:	2b01      	cmp	r3, #1
   94718:	d03e      	beq.n	94798 <cl_bp_pumpFeedback_timer+0x150>
   9471a:	4b2f      	ldr	r3, [pc, #188]	; (947d8 <cl_bp_pumpFeedback_timer+0x190>)
   9471c:	781b      	ldrb	r3, [r3, #0]
   9471e:	2b02      	cmp	r3, #2
   94720:	d03a      	beq.n	94798 <cl_bp_pumpFeedback_timer+0x150>
						{
							if((bp_period > (1.01 *bp_expected_period)) || bp_period > 3000 )
   94722:	4b36      	ldr	r3, [pc, #216]	; (947fc <cl_bp_pumpFeedback_timer+0x1b4>)
   94724:	881b      	ldrh	r3, [r3, #0]
   94726:	461a      	mov	r2, r3
   94728:	4b36      	ldr	r3, [pc, #216]	; (94804 <cl_bp_pumpFeedback_timer+0x1bc>)
   9472a:	4610      	mov	r0, r2
   9472c:	4798      	blx	r3
   9472e:	4680      	mov	r8, r0
   94730:	4689      	mov	r9, r1
   94732:	4b35      	ldr	r3, [pc, #212]	; (94808 <cl_bp_pumpFeedback_timer+0x1c0>)
   94734:	881b      	ldrh	r3, [r3, #0]
   94736:	461a      	mov	r2, r3
   94738:	4b32      	ldr	r3, [pc, #200]	; (94804 <cl_bp_pumpFeedback_timer+0x1bc>)
   9473a:	4610      	mov	r0, r2
   9473c:	4798      	blx	r3
   9473e:	4602      	mov	r2, r0
   94740:	460b      	mov	r3, r1
   94742:	4c32      	ldr	r4, [pc, #200]	; (9480c <cl_bp_pumpFeedback_timer+0x1c4>)
   94744:	4610      	mov	r0, r2
   94746:	4619      	mov	r1, r3
   94748:	a31f      	add	r3, pc, #124	; (adr r3, 947c8 <cl_bp_pumpFeedback_timer+0x180>)
   9474a:	e9d3 2300 	ldrd	r2, r3, [r3]
   9474e:	47a0      	blx	r4
   94750:	4602      	mov	r2, r0
   94752:	460b      	mov	r3, r1
   94754:	4c2e      	ldr	r4, [pc, #184]	; (94810 <cl_bp_pumpFeedback_timer+0x1c8>)
   94756:	4640      	mov	r0, r8
   94758:	4649      	mov	r1, r9
   9475a:	47a0      	blx	r4
   9475c:	4603      	mov	r3, r0
   9475e:	2b00      	cmp	r3, #0
   94760:	d11a      	bne.n	94798 <cl_bp_pumpFeedback_timer+0x150>
   94762:	4b26      	ldr	r3, [pc, #152]	; (947fc <cl_bp_pumpFeedback_timer+0x1b4>)
   94764:	881b      	ldrh	r3, [r3, #0]
   94766:	f640 32b8 	movw	r2, #3000	; 0xbb8
   9476a:	4293      	cmp	r3, r2
   9476c:	d814      	bhi.n	94798 <cl_bp_pumpFeedback_timer+0x150>
							{
						//		cl_bp_pump_state = CL_BP_P_STATE_RUNNING_SLOW;
					//		Cl_Alarm_TriggerAlarm(BP_UNDERRUN,1);
							}
							else if(bp_period < (0.99 *bp_expected_period))
   9476e:	4b23      	ldr	r3, [pc, #140]	; (947fc <cl_bp_pumpFeedback_timer+0x1b4>)
   94770:	881b      	ldrh	r3, [r3, #0]
   94772:	461a      	mov	r2, r3
   94774:	4b23      	ldr	r3, [pc, #140]	; (94804 <cl_bp_pumpFeedback_timer+0x1bc>)
   94776:	4610      	mov	r0, r2
   94778:	4798      	blx	r3
   9477a:	4b23      	ldr	r3, [pc, #140]	; (94808 <cl_bp_pumpFeedback_timer+0x1c0>)
   9477c:	881b      	ldrh	r3, [r3, #0]
   9477e:	461a      	mov	r2, r3
   94780:	4b20      	ldr	r3, [pc, #128]	; (94804 <cl_bp_pumpFeedback_timer+0x1bc>)
   94782:	4610      	mov	r0, r2
   94784:	4798      	blx	r3
   94786:	4602      	mov	r2, r0
   94788:	460b      	mov	r3, r1
   9478a:	4c20      	ldr	r4, [pc, #128]	; (9480c <cl_bp_pumpFeedback_timer+0x1c4>)
   9478c:	4610      	mov	r0, r2
   9478e:	4619      	mov	r1, r3
   94790:	a30f      	add	r3, pc, #60	; (adr r3, 947d0 <cl_bp_pumpFeedback_timer+0x188>)
   94792:	e9d3 2300 	ldrd	r2, r3, [r3]
   94796:	47a0      	blx	r4
						//		cl_bp_pump_state = CL_BP_P_STATE_RUNNING_NORMAL;
							}
						}

				
						bp_freq_in_min  = ( 60000) / bp_period;
   94798:	4b18      	ldr	r3, [pc, #96]	; (947fc <cl_bp_pumpFeedback_timer+0x1b4>)
   9479a:	881b      	ldrh	r3, [r3, #0]
   9479c:	461a      	mov	r2, r3
   9479e:	f64e 2360 	movw	r3, #60000	; 0xea60
   947a2:	fb93 f3f2 	sdiv	r3, r3, r2
   947a6:	b29a      	uxth	r2, r3
   947a8:	4b1a      	ldr	r3, [pc, #104]	; (94814 <cl_bp_pumpFeedback_timer+0x1cc>)
   947aa:	801a      	strh	r2, [r3, #0]
						twentymscounter = 0;
   947ac:	4b0d      	ldr	r3, [pc, #52]	; (947e4 <cl_bp_pumpFeedback_timer+0x19c>)
   947ae:	2200      	movs	r2, #0
   947b0:	801a      	strh	r2, [r3, #0]
				
					}
				}
		
			}
			prev_bp_rotataion_marker = bp_rotataion_marker;
   947b2:	4b0a      	ldr	r3, [pc, #40]	; (947dc <cl_bp_pumpFeedback_timer+0x194>)
   947b4:	881a      	ldrh	r2, [r3, #0]
   947b6:	4b0e      	ldr	r3, [pc, #56]	; (947f0 <cl_bp_pumpFeedback_timer+0x1a8>)
   947b8:	801a      	strh	r2, [r3, #0]
	
	}
	
	return 0;
   947ba:	2300      	movs	r3, #0
}
   947bc:	4618      	mov	r0, r3
   947be:	e8bd 8398 	ldmia.w	sp!, {r3, r4, r7, r8, r9, pc}
   947c2:	bf00      	nop
   947c4:	f3af 8000 	nop.w
   947c8:	c28f5c29 	.word	0xc28f5c29
   947cc:	3ff028f5 	.word	0x3ff028f5
   947d0:	7ae147ae 	.word	0x7ae147ae
   947d4:	3fefae14 	.word	0x3fefae14
   947d8:	20071bea 	.word	0x20071bea
   947dc:	20070bf0 	.word	0x20070bf0
   947e0:	0008fd69 	.word	0x0008fd69
   947e4:	20071bec 	.word	0x20071bec
   947e8:	00082c75 	.word	0x00082c75
   947ec:	20071bf6 	.word	0x20071bf6
   947f0:	20070bf2 	.word	0x20070bf2
   947f4:	20071bf2 	.word	0x20071bf2
   947f8:	20071bf4 	.word	0x20071bf4
   947fc:	20071bee 	.word	0x20071bee
   94800:	20071b18 	.word	0x20071b18
   94804:	000a79b9 	.word	0x000a79b9
   94808:	20071be8 	.word	0x20071be8
   9480c:	000a7a85 	.word	0x000a7a85
   94810:	000a7fa5 	.word	0x000a7fa5
   94814:	20071bf0 	.word	0x20071bf0

00094818 <cl_deaeration_controller>:
// extern Cl_Uint8Type sv_cntrl_deactivate_valve(sv_valvetype );

cl_deaeration_state_type cl_deaeration_state = CL_DEAER_STATE_IDLE;

Cl_ReturnCodeType cl_deaeration_controller(cl_deaeration_event_type cntrl_event)
{
   94818:	b580      	push	{r7, lr}
   9481a:	b084      	sub	sp, #16
   9481c:	af00      	add	r7, sp, #0
   9481e:	4603      	mov	r3, r0
   94820:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_ret_value = CL_OK;
   94822:	2300      	movs	r3, #0
   94824:	73fb      	strb	r3, [r7, #15]
	Cl_Uint16Type dac2_status  ;
	
	switch (cl_deaeration_state)
   94826:	4b28      	ldr	r3, [pc, #160]	; (948c8 <cl_deaeration_controller+0xb0>)
   94828:	781b      	ldrb	r3, [r3, #0]
   9482a:	2b01      	cmp	r3, #1
   9482c:	d00d      	beq.n	9484a <cl_deaeration_controller+0x32>
   9482e:	2b02      	cmp	r3, #2
   94830:	d02a      	beq.n	94888 <cl_deaeration_controller+0x70>
   94832:	2b00      	cmp	r3, #0
   94834:	d000      	beq.n	94838 <cl_deaeration_controller+0x20>
						cl_deaeration_state = CL_DEAER_ACTIVE;
						}
					}
		
		break;
		default:break;
   94836:	e042      	b.n	948be <cl_deaeration_controller+0xa6>
	Cl_Uint16Type dac2_status  ;
	
	switch (cl_deaeration_state)
	{
		case CL_DEAER_STATE_IDLE:
				switch(cntrl_event)
   94838:	79fb      	ldrb	r3, [r7, #7]
   9483a:	2b00      	cmp	r3, #0
   9483c:	d000      	beq.n	94840 <cl_deaeration_controller+0x28>
				{
					case CL_DEAER_EVENT_ACTIVATE:
					cl_deaeration_state = CL_DEAER_ACTIVE;
					break;
					default:break;
   9483e:	e003      	b.n	94848 <cl_deaeration_controller+0x30>
	{
		case CL_DEAER_STATE_IDLE:
				switch(cntrl_event)
				{
					case CL_DEAER_EVENT_ACTIVATE:
					cl_deaeration_state = CL_DEAER_ACTIVE;
   94840:	4b21      	ldr	r3, [pc, #132]	; (948c8 <cl_deaeration_controller+0xb0>)
   94842:	2201      	movs	r2, #1
   94844:	701a      	strb	r2, [r3, #0]
					break;
   94846:	bf00      	nop
					default:break;
				}
		break;
   94848:	e039      	b.n	948be <cl_deaeration_controller+0xa6>
		case CL_DEAER_ACTIVE:
			switch(cntrl_event)
   9484a:	79fb      	ldrb	r3, [r7, #7]
   9484c:	2b01      	cmp	r3, #1
   9484e:	d002      	beq.n	94856 <cl_deaeration_controller+0x3e>
   94850:	2b02      	cmp	r3, #2
   94852:	d004      	beq.n	9485e <cl_deaeration_controller+0x46>
				{
					sv_cntrl_deactivate_valve(VALVE_ID19);	
				}
				break;
				default:
				break;
   94854:	e017      	b.n	94886 <cl_deaeration_controller+0x6e>
			switch(cntrl_event)
			{
				

				case CL_DEAER_EVENT_DEACTIVATE:
				cl_deaeration_state = CL_DEAER_STATE_IDLE;
   94856:	4b1c      	ldr	r3, [pc, #112]	; (948c8 <cl_deaeration_controller+0xb0>)
   94858:	2200      	movs	r2, #0
   9485a:	701a      	strb	r2, [r3, #0]
				break;
   9485c:	e013      	b.n	94886 <cl_deaeration_controller+0x6e>
				case CL_DEAER_EVENT_50MS:
				// check for deaeartion 
				Cl_SysStat_GetSensor_Status_Query(COND_DAC_RO,&dac2_status);
   9485e:	f107 030c 	add.w	r3, r7, #12
   94862:	200a      	movs	r0, #10
   94864:	4619      	mov	r1, r3
   94866:	4b19      	ldr	r3, [pc, #100]	; (948cc <cl_deaeration_controller+0xb4>)
   94868:	4798      	blx	r3
				if (dac2_status < 10)
   9486a:	89bb      	ldrh	r3, [r7, #12]
   9486c:	2b09      	cmp	r3, #9
   9486e:	d806      	bhi.n	9487e <cl_deaeration_controller+0x66>
				{
					sv_cntrl_activate_valve(VALVE_ID19);
   94870:	2013      	movs	r0, #19
   94872:	4b17      	ldr	r3, [pc, #92]	; (948d0 <cl_deaeration_controller+0xb8>)
   94874:	4798      	blx	r3
					cl_deaeration_state = CL_DEAER_ACTIVE_INPROGRESS;
   94876:	4b14      	ldr	r3, [pc, #80]	; (948c8 <cl_deaeration_controller+0xb0>)
   94878:	2202      	movs	r2, #2
   9487a:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					sv_cntrl_deactivate_valve(VALVE_ID19);	
				}
				break;
   9487c:	e002      	b.n	94884 <cl_deaeration_controller+0x6c>
					sv_cntrl_activate_valve(VALVE_ID19);
					cl_deaeration_state = CL_DEAER_ACTIVE_INPROGRESS;
				}
				else
				{
					sv_cntrl_deactivate_valve(VALVE_ID19);	
   9487e:	2013      	movs	r0, #19
   94880:	4b14      	ldr	r3, [pc, #80]	; (948d4 <cl_deaeration_controller+0xbc>)
   94882:	4798      	blx	r3
				}
				break;
   94884:	bf00      	nop
				default:
				break;
			}
		break;
   94886:	e01a      	b.n	948be <cl_deaeration_controller+0xa6>
		case CL_DEAER_ACTIVE_INPROGRESS:
					switch(cntrl_event)
   94888:	79fb      	ldrb	r3, [r7, #7]
   9488a:	2b01      	cmp	r3, #1
   9488c:	d002      	beq.n	94894 <cl_deaeration_controller+0x7c>
   9488e:	2b03      	cmp	r3, #3
   94890:	d004      	beq.n	9489c <cl_deaeration_controller+0x84>
						sv_cntrl_deactivate_valve(VALVE_ID19);
						cl_deaeration_state = CL_DEAER_ACTIVE;
						}
					}
		
		break;
   94892:	e013      	b.n	948bc <cl_deaeration_controller+0xa4>
		case CL_DEAER_ACTIVE_INPROGRESS:
					switch(cntrl_event)
					{
						
						case CL_DEAER_EVENT_DEACTIVATE:
						cl_deaeration_state = CL_DEAER_STATE_IDLE;
   94894:	4b0c      	ldr	r3, [pc, #48]	; (948c8 <cl_deaeration_controller+0xb0>)
   94896:	2200      	movs	r2, #0
   94898:	701a      	strb	r2, [r3, #0]
						break;
   9489a:	e00f      	b.n	948bc <cl_deaeration_controller+0xa4>
						case CL_DEAER_EVENT_500MS:
						Cl_SysStat_GetSensor_Status_Query(COND_DAC_RO,&dac2_status);
   9489c:	f107 030c 	add.w	r3, r7, #12
   948a0:	200a      	movs	r0, #10
   948a2:	4619      	mov	r1, r3
   948a4:	4b09      	ldr	r3, [pc, #36]	; (948cc <cl_deaeration_controller+0xb4>)
   948a6:	4798      	blx	r3
						if (dac2_status > 5)
   948a8:	89bb      	ldrh	r3, [r7, #12]
   948aa:	2b05      	cmp	r3, #5
   948ac:	d906      	bls.n	948bc <cl_deaeration_controller+0xa4>
						{
						sv_cntrl_deactivate_valve(VALVE_ID19);
   948ae:	2013      	movs	r0, #19
   948b0:	4b08      	ldr	r3, [pc, #32]	; (948d4 <cl_deaeration_controller+0xbc>)
   948b2:	4798      	blx	r3
						cl_deaeration_state = CL_DEAER_ACTIVE;
   948b4:	4b04      	ldr	r3, [pc, #16]	; (948c8 <cl_deaeration_controller+0xb0>)
   948b6:	2201      	movs	r2, #1
   948b8:	701a      	strb	r2, [r3, #0]
						}
					}
		
		break;
   948ba:	e7ff      	b.n	948bc <cl_deaeration_controller+0xa4>
   948bc:	bf00      	nop
		default:break;
	}

	return CL_OK;
   948be:	2300      	movs	r3, #0
   948c0:	4618      	mov	r0, r3
   948c2:	3710      	adds	r7, #16
   948c4:	46bd      	mov	sp, r7
   948c6:	bd80      	pop	{r7, pc}
   948c8:	20071bf7 	.word	0x20071bf7
   948cc:	0008fd69 	.word	0x0008fd69
   948d0:	0009b3e9 	.word	0x0009b3e9
   948d4:	0009b409 	.word	0x0009b409

000948d8 <cl_flow_switchcontroller>:
int lowflowCounter = 0;
int noflowCounter = 0;
int highflowCounter = 0;
	extern Cl_Sys_statusType cl_sys_statbuffer; // manav03 added
	Cl_ReturnCodeType cl_flow_switchcontroller(flowswitchcntrl_event_type cntrl_event)
	{
   948d8:	b580      	push	{r7, lr}
   948da:	b084      	sub	sp, #16
   948dc:	af00      	add	r7, sp, #0
   948de:	4603      	mov	r3, r0
   948e0:	71fb      	strb	r3, [r7, #7]
		cl_Datastreamtype cl_tdata;
		static uint8_t three_sec_count = 0;
		
		switch(flowswitchcntrlstate)
   948e2:	4b93      	ldr	r3, [pc, #588]	; (94b30 <cl_flow_switchcontroller+0x258>)
   948e4:	781b      	ldrb	r3, [r3, #0]
   948e6:	2b03      	cmp	r3, #3
   948e8:	f200 811c 	bhi.w	94b24 <cl_flow_switchcontroller+0x24c>
   948ec:	a201      	add	r2, pc, #4	; (adr r2, 948f4 <cl_flow_switchcontroller+0x1c>)
   948ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   948f2:	bf00      	nop
   948f4:	00094a91 	.word	0x00094a91
   948f8:	00094aa5 	.word	0x00094aa5
   948fc:	00094905 	.word	0x00094905
   94900:	00094b11 	.word	0x00094b11
		{
			case FLOW_SWITCH_CNTRL_ACTIVE:
					switch(cntrl_event)
   94904:	79fb      	ldrb	r3, [r7, #7]
   94906:	3b01      	subs	r3, #1
   94908:	2b05      	cmp	r3, #5
   9490a:	f200 80bf 	bhi.w	94a8c <cl_flow_switchcontroller+0x1b4>
   9490e:	a201      	add	r2, pc, #4	; (adr r2, 94914 <cl_flow_switchcontroller+0x3c>)
   94910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   94914:	0009492d 	.word	0x0009492d
   94918:	00094935 	.word	0x00094935
   9491c:	0009494d 	.word	0x0009494d
   94920:	00094a8d 	.word	0x00094a8d
   94924:	00094a17 	.word	0x00094a17
   94928:	00094a17 	.word	0x00094a17
					{
						case FLOW_SWITCH_CNTRLER_EVENT_START:
						flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_READY;
   9492c:	4b80      	ldr	r3, [pc, #512]	; (94b30 <cl_flow_switchcontroller+0x258>)
   9492e:	2201      	movs	r2, #1
   94930:	701a      	strb	r2, [r3, #0]
			
						break;
   94932:	e0ac      	b.n	94a8e <cl_flow_switchcontroller+0x1b6>
						case FLOW_SWITCH_CNTRLER_EVENT_STOP:
						Cl_Alarm_TriggerAlarm(FLOW_LOW_FLOWRATE,0);
   94934:	200d      	movs	r0, #13
   94936:	2100      	movs	r1, #0
   94938:	4b7e      	ldr	r3, [pc, #504]	; (94b34 <cl_flow_switchcontroller+0x25c>)
   9493a:	4798      	blx	r3
						Cl_Alarm_TriggerAlarm(FLOW_HIGH_FLOWRATE,0);
   9493c:	200e      	movs	r0, #14
   9493e:	2100      	movs	r1, #0
   94940:	4b7c      	ldr	r3, [pc, #496]	; (94b34 <cl_flow_switchcontroller+0x25c>)
   94942:	4798      	blx	r3
						flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
   94944:	4b7a      	ldr	r3, [pc, #488]	; (94b30 <cl_flow_switchcontroller+0x258>)
   94946:	2200      	movs	r2, #0
   94948:	701a      	strb	r2, [r3, #0]
						break;
   9494a:	e0a0      	b.n	94a8e <cl_flow_switchcontroller+0x1b6>
						case FLOW_SWITCH_CNTRLER_EVENT_SEC:
						three_sec_count++;
   9494c:	4b7a      	ldr	r3, [pc, #488]	; (94b38 <cl_flow_switchcontroller+0x260>)
   9494e:	781b      	ldrb	r3, [r3, #0]
   94950:	3301      	adds	r3, #1
   94952:	b2da      	uxtb	r2, r3
   94954:	4b78      	ldr	r3, [pc, #480]	; (94b38 <cl_flow_switchcontroller+0x260>)
   94956:	701a      	strb	r2, [r3, #0]
						if(three_sec_count > 3)
   94958:	4b77      	ldr	r3, [pc, #476]	; (94b38 <cl_flow_switchcontroller+0x260>)
   9495a:	781b      	ldrb	r3, [r3, #0]
   9495c:	2b03      	cmp	r3, #3
   9495e:	d959      	bls.n	94a14 <cl_flow_switchcontroller+0x13c>
						{
							three_sec_count = 0;
   94960:	4b75      	ldr	r3, [pc, #468]	; (94b38 <cl_flow_switchcontroller+0x260>)
   94962:	2200      	movs	r2, #0
   94964:	701a      	strb	r2, [r3, #0]
						
						Cl_AlarmResetAlarm(FLOW_NO_FLOW);
   94966:	200c      	movs	r0, #12
   94968:	4b74      	ldr	r3, [pc, #464]	; (94b3c <cl_flow_switchcontroller+0x264>)
   9496a:	4798      	blx	r3
						Cl_AlarmResetAlarm(FLOW_LOW_FLOWRATE);
   9496c:	200d      	movs	r0, #13
   9496e:	4b73      	ldr	r3, [pc, #460]	; (94b3c <cl_flow_switchcontroller+0x264>)
   94970:	4798      	blx	r3
						
										cl_tdata.word = 0;
   94972:	2300      	movs	r3, #0
   94974:	60fb      	str	r3, [r7, #12]

										
										cl_tdata.Twobyte = toggle_count_flow;
   94976:	4b72      	ldr	r3, [pc, #456]	; (94b40 <cl_flow_switchcontroller+0x268>)
   94978:	881b      	ldrh	r3, [r3, #0]
   9497a:	81bb      	strh	r3, [r7, #12]
										cl_tdata.bytearray[2] = 21;
   9497c:	2315      	movs	r3, #21
   9497e:	73bb      	strb	r3, [r7, #14]
										
										
									//	 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
						
						
						if(toggle_count_flow < 50 ) // manav02 added         // 200 incase no flow
   94980:	4b6f      	ldr	r3, [pc, #444]	; (94b40 <cl_flow_switchcontroller+0x268>)
   94982:	881b      	ldrh	r3, [r3, #0]
   94984:	2b31      	cmp	r3, #49	; 0x31
   94986:	d810      	bhi.n	949aa <cl_flow_switchcontroller+0xd2>
						{
							// low  flow alarm
							noflowCounter++ ;
   94988:	4b6e      	ldr	r3, [pc, #440]	; (94b44 <cl_flow_switchcontroller+0x26c>)
   9498a:	681b      	ldr	r3, [r3, #0]
   9498c:	3301      	adds	r3, #1
   9498e:	4a6d      	ldr	r2, [pc, #436]	; (94b44 <cl_flow_switchcontroller+0x26c>)
   94990:	6013      	str	r3, [r2, #0]
							if(noflowCounter > 3){
   94992:	4b6c      	ldr	r3, [pc, #432]	; (94b44 <cl_flow_switchcontroller+0x26c>)
   94994:	681b      	ldr	r3, [r3, #0]
   94996:	2b03      	cmp	r3, #3
   94998:	dd33      	ble.n	94a02 <cl_flow_switchcontroller+0x12a>
							noflowCounter = 0;
   9499a:	4b6a      	ldr	r3, [pc, #424]	; (94b44 <cl_flow_switchcontroller+0x26c>)
   9499c:	2200      	movs	r2, #0
   9499e:	601a      	str	r2, [r3, #0]
							Cl_Alarm_TriggerAlarm(FLOW_NO_FLOW,1);
   949a0:	200c      	movs	r0, #12
   949a2:	2101      	movs	r1, #1
   949a4:	4b63      	ldr	r3, [pc, #396]	; (94b34 <cl_flow_switchcontroller+0x25c>)
   949a6:	4798      	blx	r3
   949a8:	e02b      	b.n	94a02 <cl_flow_switchcontroller+0x12a>
							//	flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_STOPPED;
							//flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
						}
						
						
						else if(toggle_count_flow < 600 ) // manav02 changed from 0 to 200  600 incase of switching
   949aa:	4b65      	ldr	r3, [pc, #404]	; (94b40 <cl_flow_switchcontroller+0x268>)
   949ac:	881b      	ldrh	r3, [r3, #0]
   949ae:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   949b2:	d210      	bcs.n	949d6 <cl_flow_switchcontroller+0xfe>
						{
							// low  flow alarm 
							lowflowCounter++ ;
   949b4:	4b64      	ldr	r3, [pc, #400]	; (94b48 <cl_flow_switchcontroller+0x270>)
   949b6:	681b      	ldr	r3, [r3, #0]
   949b8:	3301      	adds	r3, #1
   949ba:	4a63      	ldr	r2, [pc, #396]	; (94b48 <cl_flow_switchcontroller+0x270>)
   949bc:	6013      	str	r3, [r2, #0]
							if(lowflowCounter > 3){
   949be:	4b62      	ldr	r3, [pc, #392]	; (94b48 <cl_flow_switchcontroller+0x270>)
   949c0:	681b      	ldr	r3, [r3, #0]
   949c2:	2b03      	cmp	r3, #3
   949c4:	dd1d      	ble.n	94a02 <cl_flow_switchcontroller+0x12a>
							lowflowCounter = 0;
   949c6:	4b60      	ldr	r3, [pc, #384]	; (94b48 <cl_flow_switchcontroller+0x270>)
   949c8:	2200      	movs	r2, #0
   949ca:	601a      	str	r2, [r3, #0]
							Cl_Alarm_TriggerAlarm(FLOW_LOW_FLOWRATE,1);
   949cc:	200d      	movs	r0, #13
   949ce:	2101      	movs	r1, #1
   949d0:	4b58      	ldr	r3, [pc, #352]	; (94b34 <cl_flow_switchcontroller+0x25c>)
   949d2:	4798      	blx	r3
   949d4:	e015      	b.n	94a02 <cl_flow_switchcontroller+0x12a>
							//flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
						}
						
						
						
						else if(toggle_count_flow > 2700 )
   949d6:	4b5a      	ldr	r3, [pc, #360]	; (94b40 <cl_flow_switchcontroller+0x268>)
   949d8:	881b      	ldrh	r3, [r3, #0]
   949da:	f640 228c 	movw	r2, #2700	; 0xa8c
   949de:	4293      	cmp	r3, r2
   949e0:	d90f      	bls.n	94a02 <cl_flow_switchcontroller+0x12a>
						{
							//  high  flow alarm 
							highflowCounter++ ;
   949e2:	4b5a      	ldr	r3, [pc, #360]	; (94b4c <cl_flow_switchcontroller+0x274>)
   949e4:	681b      	ldr	r3, [r3, #0]
   949e6:	3301      	adds	r3, #1
   949e8:	4a58      	ldr	r2, [pc, #352]	; (94b4c <cl_flow_switchcontroller+0x274>)
   949ea:	6013      	str	r3, [r2, #0]
							if(highflowCounter > 3){
   949ec:	4b57      	ldr	r3, [pc, #348]	; (94b4c <cl_flow_switchcontroller+0x274>)
   949ee:	681b      	ldr	r3, [r3, #0]
   949f0:	2b03      	cmp	r3, #3
   949f2:	dd06      	ble.n	94a02 <cl_flow_switchcontroller+0x12a>
							highflowCounter = 0;
   949f4:	4b55      	ldr	r3, [pc, #340]	; (94b4c <cl_flow_switchcontroller+0x274>)
   949f6:	2200      	movs	r2, #0
   949f8:	601a      	str	r2, [r3, #0]
							Cl_Alarm_TriggerAlarm(FLOW_HIGH_FLOWRATE,1);
   949fa:	200e      	movs	r0, #14
   949fc:	2101      	movs	r1, #1
   949fe:	4b4d      	ldr	r3, [pc, #308]	; (94b34 <cl_flow_switchcontroller+0x25c>)
   94a00:	4798      	blx	r3
							}
						//	flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_STOPPED;
							//flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
						}
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&toggle_count_flow,2);
   94a02:	2019      	movs	r0, #25
   94a04:	494e      	ldr	r1, [pc, #312]	; (94b40 <cl_flow_switchcontroller+0x268>)
   94a06:	2202      	movs	r2, #2
   94a08:	4b51      	ldr	r3, [pc, #324]	; (94b50 <cl_flow_switchcontroller+0x278>)
   94a0a:	4798      	blx	r3
						toggle_count_flow = 0;
   94a0c:	4b4c      	ldr	r3, [pc, #304]	; (94b40 <cl_flow_switchcontroller+0x268>)
   94a0e:	2200      	movs	r2, #0
   94a10:	801a      	strh	r2, [r3, #0]
						}
						
						break;
   94a12:	e03c      	b.n	94a8e <cl_flow_switchcontroller+0x1b6>
   94a14:	e03b      	b.n	94a8e <cl_flow_switchcontroller+0x1b6>
						case FLOW_SWITCH_CNTRLER_EVENT_10MS:
						//break;
						case FLOW_SWITCH_CNTRLER_EVENT_INSTANT:
			
			//---------------manav03 added form alarm detector
			if(cl_sys_statbuffer.Flowstatus)
   94a16:	4b4f      	ldr	r3, [pc, #316]	; (94b54 <cl_flow_switchcontroller+0x27c>)
   94a18:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
   94a1c:	2b00      	cmp	r3, #0
   94a1e:	d002      	beq.n	94a26 <cl_flow_switchcontroller+0x14e>
			{
				Flowswitch_msg.flowswitch_event = FLOW_SWITCH_EVENT_LEVEL_HIGH;
   94a20:	4b4d      	ldr	r3, [pc, #308]	; (94b58 <cl_flow_switchcontroller+0x280>)
   94a22:	2201      	movs	r2, #1
   94a24:	701a      	strb	r2, [r3, #0]
			}
			if(!cl_sys_statbuffer.Flowstatus)
   94a26:	4b4b      	ldr	r3, [pc, #300]	; (94b54 <cl_flow_switchcontroller+0x27c>)
   94a28:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
   94a2c:	2b00      	cmp	r3, #0
   94a2e:	d102      	bne.n	94a36 <cl_flow_switchcontroller+0x15e>
			{
				Flowswitch_msg.flowswitch_event = FLOW_SWITCH_EVENT_LEVEL_LOW;
   94a30:	4b49      	ldr	r3, [pc, #292]	; (94b58 <cl_flow_switchcontroller+0x280>)
   94a32:	2202      	movs	r2, #2
   94a34:	701a      	strb	r2, [r3, #0]
			}
			//-------------------------------------------------------------------------
			
							if(Flowswitch_msg.flowswitch_event == FLOW_SWITCH_EVENT_LEVEL_HIGH)
   94a36:	4b48      	ldr	r3, [pc, #288]	; (94b58 <cl_flow_switchcontroller+0x280>)
   94a38:	781b      	ldrb	r3, [r3, #0]
   94a3a:	2b01      	cmp	r3, #1
   94a3c:	d110      	bne.n	94a60 <cl_flow_switchcontroller+0x188>
							{
								Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   94a3e:	4b46      	ldr	r3, [pc, #280]	; (94b58 <cl_flow_switchcontroller+0x280>)
   94a40:	2200      	movs	r2, #0
   94a42:	701a      	strb	r2, [r3, #0]
				
								if(flow_switch_state != FLOW_SWITCH_LEVEL_HIGH )
   94a44:	4b45      	ldr	r3, [pc, #276]	; (94b5c <cl_flow_switchcontroller+0x284>)
   94a46:	781b      	ldrb	r3, [r3, #0]
   94a48:	2b01      	cmp	r3, #1
   94a4a:	d01e      	beq.n	94a8a <cl_flow_switchcontroller+0x1b2>
								{
									
									toggle_count_flow++;
   94a4c:	4b3c      	ldr	r3, [pc, #240]	; (94b40 <cl_flow_switchcontroller+0x268>)
   94a4e:	881b      	ldrh	r3, [r3, #0]
   94a50:	3301      	adds	r3, #1
   94a52:	b29a      	uxth	r2, r3
   94a54:	4b3a      	ldr	r3, [pc, #232]	; (94b40 <cl_flow_switchcontroller+0x268>)
   94a56:	801a      	strh	r2, [r3, #0]
									flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
   94a58:	4b40      	ldr	r3, [pc, #256]	; (94b5c <cl_flow_switchcontroller+0x284>)
   94a5a:	2201      	movs	r2, #1
   94a5c:	701a      	strb	r2, [r3, #0]
									flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
								}

					
							}
						break;
   94a5e:	e016      	b.n	94a8e <cl_flow_switchcontroller+0x1b6>
									toggle_count_flow++;
									flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
								}

							}
							else if(Flowswitch_msg.flowswitch_event ==  FLOW_SWITCH_EVENT_LEVEL_LOW)
   94a60:	4b3d      	ldr	r3, [pc, #244]	; (94b58 <cl_flow_switchcontroller+0x280>)
   94a62:	781b      	ldrb	r3, [r3, #0]
   94a64:	2b02      	cmp	r3, #2
   94a66:	d110      	bne.n	94a8a <cl_flow_switchcontroller+0x1b2>
							{

								Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   94a68:	4b3b      	ldr	r3, [pc, #236]	; (94b58 <cl_flow_switchcontroller+0x280>)
   94a6a:	2200      	movs	r2, #0
   94a6c:	701a      	strb	r2, [r3, #0]

								if(flow_switch_state != FLOW_SWITCH_LEVEL_LOW )
   94a6e:	4b3b      	ldr	r3, [pc, #236]	; (94b5c <cl_flow_switchcontroller+0x284>)
   94a70:	781b      	ldrb	r3, [r3, #0]
   94a72:	2b02      	cmp	r3, #2
   94a74:	d009      	beq.n	94a8a <cl_flow_switchcontroller+0x1b2>
								{
									toggle_count_flow++;
   94a76:	4b32      	ldr	r3, [pc, #200]	; (94b40 <cl_flow_switchcontroller+0x268>)
   94a78:	881b      	ldrh	r3, [r3, #0]
   94a7a:	3301      	adds	r3, #1
   94a7c:	b29a      	uxth	r2, r3
   94a7e:	4b30      	ldr	r3, [pc, #192]	; (94b40 <cl_flow_switchcontroller+0x268>)
   94a80:	801a      	strh	r2, [r3, #0]
									flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
   94a82:	4b36      	ldr	r3, [pc, #216]	; (94b5c <cl_flow_switchcontroller+0x284>)
   94a84:	2202      	movs	r2, #2
   94a86:	701a      	strb	r2, [r3, #0]
								}

					
							}
						break;
   94a88:	e001      	b.n	94a8e <cl_flow_switchcontroller+0x1b6>
   94a8a:	e000      	b.n	94a8e <cl_flow_switchcontroller+0x1b6>
						
						default:break;
   94a8c:	bf00      	nop
					}
			break;
   94a8e:	e049      	b.n	94b24 <cl_flow_switchcontroller+0x24c>
			case FLOW_SWITCH_CNTRL_IDLE:
								switch(cntrl_event)
   94a90:	79fb      	ldrb	r3, [r7, #7]
   94a92:	2b01      	cmp	r3, #1
   94a94:	d001      	beq.n	94a9a <cl_flow_switchcontroller+0x1c2>
   94a96:	2b02      	cmp	r3, #2
								{
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_READY;
									break;
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
   94a98:	e003      	b.n	94aa2 <cl_flow_switchcontroller+0x1ca>
			break;
			case FLOW_SWITCH_CNTRL_IDLE:
								switch(cntrl_event)
								{
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_READY;
   94a9a:	4b25      	ldr	r3, [pc, #148]	; (94b30 <cl_flow_switchcontroller+0x258>)
   94a9c:	2201      	movs	r2, #1
   94a9e:	701a      	strb	r2, [r3, #0]
									break;
   94aa0:	bf00      	nop
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
								}
			break;
   94aa2:	e03f      	b.n	94b24 <cl_flow_switchcontroller+0x24c>
			
			case FLOW_SWITCH_CNTRL_READY:
								switch(cntrl_event)
   94aa4:	79fb      	ldrb	r3, [r7, #7]
   94aa6:	2b03      	cmp	r3, #3
   94aa8:	d002      	beq.n	94ab0 <cl_flow_switchcontroller+0x1d8>
   94aaa:	2b06      	cmp	r3, #6
   94aac:	d004      	beq.n	94ab8 <cl_flow_switchcontroller+0x1e0>
										}

					
									}
								break;
									default:break;
   94aae:	e02e      	b.n	94b0e <cl_flow_switchcontroller+0x236>
			
			case FLOW_SWITCH_CNTRL_READY:
								switch(cntrl_event)
								{			
									case FLOW_SWITCH_CNTRLER_EVENT_SEC:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_ACTIVE;
   94ab0:	4b1f      	ldr	r3, [pc, #124]	; (94b30 <cl_flow_switchcontroller+0x258>)
   94ab2:	2202      	movs	r2, #2
   94ab4:	701a      	strb	r2, [r3, #0]
									break;
   94ab6:	e02a      	b.n	94b0e <cl_flow_switchcontroller+0x236>
									case FLOW_SWITCH_CNTRLER_EVENT_INSTANT:
			
									if(Flowswitch_msg.flowswitch_event == FLOW_SWITCH_EVENT_LEVEL_HIGH)
   94ab8:	4b27      	ldr	r3, [pc, #156]	; (94b58 <cl_flow_switchcontroller+0x280>)
   94aba:	781b      	ldrb	r3, [r3, #0]
   94abc:	2b01      	cmp	r3, #1
   94abe:	d110      	bne.n	94ae2 <cl_flow_switchcontroller+0x20a>
									{
										Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   94ac0:	4b25      	ldr	r3, [pc, #148]	; (94b58 <cl_flow_switchcontroller+0x280>)
   94ac2:	2200      	movs	r2, #0
   94ac4:	701a      	strb	r2, [r3, #0]
				
										if(flow_switch_state != FLOW_SWITCH_LEVEL_HIGH )
   94ac6:	4b25      	ldr	r3, [pc, #148]	; (94b5c <cl_flow_switchcontroller+0x284>)
   94ac8:	781b      	ldrb	r3, [r3, #0]
   94aca:	2b01      	cmp	r3, #1
   94acc:	d01e      	beq.n	94b0c <cl_flow_switchcontroller+0x234>
										{
									
											toggle_count_flow++;
   94ace:	4b1c      	ldr	r3, [pc, #112]	; (94b40 <cl_flow_switchcontroller+0x268>)
   94ad0:	881b      	ldrh	r3, [r3, #0]
   94ad2:	3301      	adds	r3, #1
   94ad4:	b29a      	uxth	r2, r3
   94ad6:	4b1a      	ldr	r3, [pc, #104]	; (94b40 <cl_flow_switchcontroller+0x268>)
   94ad8:	801a      	strh	r2, [r3, #0]
											flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
   94ada:	4b20      	ldr	r3, [pc, #128]	; (94b5c <cl_flow_switchcontroller+0x284>)
   94adc:	2201      	movs	r2, #1
   94ade:	701a      	strb	r2, [r3, #0]
											flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
										}

					
									}
								break;
   94ae0:	e014      	b.n	94b0c <cl_flow_switchcontroller+0x234>
											toggle_count_flow++;
											flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
										}

									}
									else if(Flowswitch_msg.flowswitch_event ==  FLOW_SWITCH_EVENT_LEVEL_LOW)
   94ae2:	4b1d      	ldr	r3, [pc, #116]	; (94b58 <cl_flow_switchcontroller+0x280>)
   94ae4:	781b      	ldrb	r3, [r3, #0]
   94ae6:	2b02      	cmp	r3, #2
   94ae8:	d110      	bne.n	94b0c <cl_flow_switchcontroller+0x234>
									{

										Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   94aea:	4b1b      	ldr	r3, [pc, #108]	; (94b58 <cl_flow_switchcontroller+0x280>)
   94aec:	2200      	movs	r2, #0
   94aee:	701a      	strb	r2, [r3, #0]

										if(flow_switch_state != FLOW_SWITCH_LEVEL_LOW )
   94af0:	4b1a      	ldr	r3, [pc, #104]	; (94b5c <cl_flow_switchcontroller+0x284>)
   94af2:	781b      	ldrb	r3, [r3, #0]
   94af4:	2b02      	cmp	r3, #2
   94af6:	d009      	beq.n	94b0c <cl_flow_switchcontroller+0x234>
										{
											toggle_count_flow++;
   94af8:	4b11      	ldr	r3, [pc, #68]	; (94b40 <cl_flow_switchcontroller+0x268>)
   94afa:	881b      	ldrh	r3, [r3, #0]
   94afc:	3301      	adds	r3, #1
   94afe:	b29a      	uxth	r2, r3
   94b00:	4b0f      	ldr	r3, [pc, #60]	; (94b40 <cl_flow_switchcontroller+0x268>)
   94b02:	801a      	strh	r2, [r3, #0]
											flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
   94b04:	4b15      	ldr	r3, [pc, #84]	; (94b5c <cl_flow_switchcontroller+0x284>)
   94b06:	2202      	movs	r2, #2
   94b08:	701a      	strb	r2, [r3, #0]
										}

					
									}
								break;
   94b0a:	e7ff      	b.n	94b0c <cl_flow_switchcontroller+0x234>
   94b0c:	bf00      	nop
									default:break;
								}
			break;
   94b0e:	e009      	b.n	94b24 <cl_flow_switchcontroller+0x24c>
			case FLOW_SWITCH_CNTRL_STOPPED:
								switch(cntrl_event)
   94b10:	79fb      	ldrb	r3, [r7, #7]
   94b12:	2b01      	cmp	r3, #1
   94b14:	d001      	beq.n	94b1a <cl_flow_switchcontroller+0x242>
   94b16:	2b02      	cmp	r3, #2
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_ACTIVE;
									
									break;
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
   94b18:	e003      	b.n	94b22 <cl_flow_switchcontroller+0x24a>
			break;
			case FLOW_SWITCH_CNTRL_STOPPED:
								switch(cntrl_event)
								{
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_ACTIVE;
   94b1a:	4b05      	ldr	r3, [pc, #20]	; (94b30 <cl_flow_switchcontroller+0x258>)
   94b1c:	2202      	movs	r2, #2
   94b1e:	701a      	strb	r2, [r3, #0]
									
									break;
   94b20:	bf00      	nop
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
								}
			break;
   94b22:	bf00      	nop
		}
		return CL_OK;
   94b24:	2300      	movs	r3, #0
   94b26:	4618      	mov	r0, r3
   94b28:	3710      	adds	r7, #16
   94b2a:	46bd      	mov	sp, r7
   94b2c:	bd80      	pop	{r7, pc}
   94b2e:	bf00      	nop
   94b30:	20071bfb 	.word	0x20071bfb
   94b34:	00082c75 	.word	0x00082c75
   94b38:	20071c0c 	.word	0x20071c0c
   94b3c:	00082b25 	.word	0x00082b25
   94b40:	20071bfc 	.word	0x20071bfc
   94b44:	20071c04 	.word	0x20071c04
   94b48:	20071c00 	.word	0x20071c00
   94b4c:	20071c08 	.word	0x20071c08
   94b50:	0009d1e9 	.word	0x0009d1e9
   94b54:	200723d8 	.word	0x200723d8
   94b58:	20071bf8 	.word	0x20071bf8
   94b5c:	20071bfa 	.word	0x20071bfa

00094b60 <cl_hep_controller>:
{
	return CL_OK;
}

Cl_ReturnCodeType cl_hep_controller(cl_hep_events hp_event , int32_t data)
{
   94b60:	b580      	push	{r7, lr}
   94b62:	b084      	sub	sp, #16
   94b64:	af00      	add	r7, sp, #0
   94b66:	4603      	mov	r3, r0
   94b68:	6039      	str	r1, [r7, #0]
   94b6a:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_hep_retcode = CL_OK;
   94b6c:	2300      	movs	r3, #0
   94b6e:	73fb      	strb	r3, [r7, #15]
		cl_hep_pump_states hep_pumpstate = CL_HEP_STATE_IDLE;
   94b70:	2300      	movs	r3, #0
   94b72:	73bb      	strb	r3, [r7, #14]
		int16_t hep_delta_value = 0 ;
   94b74:	2300      	movs	r3, #0
   94b76:	81bb      	strh	r3, [r7, #12]
		static Cl_Uint32Type pwm_period = 0;
	    static Cl_Uint32Type pwm_count = 0;
	switch(hp_State)
   94b78:	4baf      	ldr	r3, [pc, #700]	; (94e38 <cl_hep_controller+0x2d8>)
   94b7a:	781b      	ldrb	r3, [r3, #0]
   94b7c:	2b10      	cmp	r3, #16
   94b7e:	f200 8389 	bhi.w	95294 <cl_hep_controller+0x734>
   94b82:	a201      	add	r2, pc, #4	; (adr r2, 94b88 <cl_hep_controller+0x28>)
   94b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   94b88:	00094bcd 	.word	0x00094bcd
   94b8c:	00094d89 	.word	0x00094d89
   94b90:	00094e71 	.word	0x00094e71
   94b94:	00094f8d 	.word	0x00094f8d
   94b98:	00094f17 	.word	0x00094f17
   94b9c:	00095005 	.word	0x00095005
   94ba0:	0009506d 	.word	0x0009506d
   94ba4:	00095295 	.word	0x00095295
   94ba8:	00095137 	.word	0x00095137
   94bac:	00095295 	.word	0x00095295
   94bb0:	00095295 	.word	0x00095295
   94bb4:	00095295 	.word	0x00095295
   94bb8:	00095295 	.word	0x00095295
   94bbc:	00095295 	.word	0x00095295
   94bc0:	00095295 	.word	0x00095295
   94bc4:	00095295 	.word	0x00095295
   94bc8:	00095295 	.word	0x00095295
	{	
		case	CL_HEP_STATE_IDLE:
		switch(hp_event)
   94bcc:	79fb      	ldrb	r3, [r7, #7]
   94bce:	3b01      	subs	r3, #1
   94bd0:	2b12      	cmp	r3, #18
   94bd2:	f200 8361 	bhi.w	95298 <cl_hep_controller+0x738>
   94bd6:	a201      	add	r2, pc, #4	; (adr r2, 94bdc <cl_hep_controller+0x7c>)
   94bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   94bdc:	00094cd5 	.word	0x00094cd5
   94be0:	00094d49 	.word	0x00094d49
   94be4:	00094d67 	.word	0x00094d67
   94be8:	00094d0f 	.word	0x00094d0f
   94bec:	00095299 	.word	0x00095299
   94bf0:	00095299 	.word	0x00095299
   94bf4:	00094c29 	.word	0x00094c29
   94bf8:	00095299 	.word	0x00095299
   94bfc:	00094c5f 	.word	0x00094c5f
   94c00:	00095299 	.word	0x00095299
   94c04:	00094c71 	.word	0x00094c71
   94c08:	00095299 	.word	0x00095299
   94c0c:	00094cb7 	.word	0x00094cb7
   94c10:	00095299 	.word	0x00095299
   94c14:	00095299 	.word	0x00095299
   94c18:	00095299 	.word	0x00095299
   94c1c:	00095299 	.word	0x00095299
   94c20:	00094d85 	.word	0x00094d85
   94c24:	00094d85 	.word	0x00094d85
			{
				
				case CL_HEP_EVENT_STARTBOLUS:
					pwm_period =  cl_hep_deliveryrate ;
   94c28:	4b84      	ldr	r3, [pc, #528]	; (94e3c <cl_hep_controller+0x2dc>)
   94c2a:	681b      	ldr	r3, [r3, #0]
   94c2c:	4a84      	ldr	r2, [pc, #528]	; (94e40 <cl_hep_controller+0x2e0>)
   94c2e:	6013      	str	r3, [r2, #0]
					pwm_period = 2;
   94c30:	4b83      	ldr	r3, [pc, #524]	; (94e40 <cl_hep_controller+0x2e0>)
   94c32:	2202      	movs	r2, #2
   94c34:	601a      	str	r2, [r3, #0]
				//	cl_wait(100);
					
				//	cl_wait(100);
					sv_cntrl_activatepump(HEPARINPUMP);
   94c36:	2005      	movs	r0, #5
   94c38:	4b82      	ldr	r3, [pc, #520]	; (94e44 <cl_hep_controller+0x2e4>)
   94c3a:	4798      	blx	r3
					sv_cntrl_setHepa_dir();
   94c3c:	4b82      	ldr	r3, [pc, #520]	; (94e48 <cl_hep_controller+0x2e8>)
   94c3e:	4798      	blx	r3
					cl_wait(100);
   94c40:	2064      	movs	r0, #100	; 0x64
   94c42:	4b82      	ldr	r3, [pc, #520]	; (94e4c <cl_hep_controller+0x2ec>)
   94c44:	4798      	blx	r3
					sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   94c46:	4b7e      	ldr	r3, [pc, #504]	; (94e40 <cl_hep_controller+0x2e0>)
   94c48:	681b      	ldr	r3, [r3, #0]
   94c4a:	2005      	movs	r0, #5
   94c4c:	4619      	mov	r1, r3
   94c4e:	4b80      	ldr	r3, [pc, #512]	; (94e50 <cl_hep_controller+0x2f0>)
   94c50:	4798      	blx	r3
	//				cl_hep_bolus_count_rate = cl_hep_bolus_count_rate;//300;
				//	cl_hep_pumpFeedback_start();
				    cl_hep_bolus_start();
   94c52:	4b80      	ldr	r3, [pc, #512]	; (94e54 <cl_hep_controller+0x2f4>)
   94c54:	4798      	blx	r3
				hp_State = CL_HEP_STATE_BOLUS_ON;
   94c56:	4b78      	ldr	r3, [pc, #480]	; (94e38 <cl_hep_controller+0x2d8>)
   94c58:	2206      	movs	r2, #6
   94c5a:	701a      	strb	r2, [r3, #0]
				break;
   94c5c:	e093      	b.n	94d86 <cl_hep_controller+0x226>
				case CL_HEP_EVENT_STOPBOLUS:
					cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   94c5e:	2005      	movs	r0, #5
   94c60:	4b7d      	ldr	r3, [pc, #500]	; (94e58 <cl_hep_controller+0x2f8>)
   94c62:	4798      	blx	r3
   94c64:	4603      	mov	r3, r0
   94c66:	73fb      	strb	r3, [r7, #15]
					hp_State = CL_HEP_STATE_IDLE;
   94c68:	4b73      	ldr	r3, [pc, #460]	; (94e38 <cl_hep_controller+0x2d8>)
   94c6a:	2200      	movs	r2, #0
   94c6c:	701a      	strb	r2, [r3, #0]
				break;
   94c6e:	e08a      	b.n	94d86 <cl_hep_controller+0x226>
				case CL_HEP_EVENT_START_NORMAL_DELIVERY:
						//pwm_period = Treatdata[ID_heprate] ;
							pwm_period = hep_calibration(data);
   94c70:	683b      	ldr	r3, [r7, #0]
   94c72:	4618      	mov	r0, r3
   94c74:	4b79      	ldr	r3, [pc, #484]	; (94e5c <cl_hep_controller+0x2fc>)
   94c76:	4798      	blx	r3
   94c78:	4602      	mov	r2, r0
   94c7a:	4b71      	ldr	r3, [pc, #452]	; (94e40 <cl_hep_controller+0x2e0>)
   94c7c:	601a      	str	r2, [r3, #0]
							
						//	cl_wait(100);
						//	pwm_count = rin_calibration(data);
						
						
						sv_cntrl_setHepa_dir();
   94c7e:	4b72      	ldr	r3, [pc, #456]	; (94e48 <cl_hep_controller+0x2e8>)
   94c80:	4798      	blx	r3
						sv_cntrl_activatepump(HEPARINPUMP);
   94c82:	2005      	movs	r0, #5
   94c84:	4b6f      	ldr	r3, [pc, #444]	; (94e44 <cl_hep_controller+0x2e4>)
   94c86:	4798      	blx	r3
					//	pwm_period = 10 ;
						cl_wait(100);
   94c88:	2064      	movs	r0, #100	; 0x64
   94c8a:	4b70      	ldr	r3, [pc, #448]	; (94e4c <cl_hep_controller+0x2ec>)
   94c8c:	4798      	blx	r3
						sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   94c8e:	4b6c      	ldr	r3, [pc, #432]	; (94e40 <cl_hep_controller+0x2e0>)
   94c90:	681b      	ldr	r3, [r3, #0]
   94c92:	2005      	movs	r0, #5
   94c94:	4619      	mov	r1, r3
   94c96:	4b6e      	ldr	r3, [pc, #440]	; (94e50 <cl_hep_controller+0x2f0>)
   94c98:	4798      	blx	r3
					//	cl_wait(100);
						
					//	cl_wait(100);
						
					//	cl_hep_pumpFeedback_set_expected_period(cl_hep_deliveryrate);
						cl_hep_pumpFeedback_start();
   94c9a:	4b71      	ldr	r3, [pc, #452]	; (94e60 <cl_hep_controller+0x300>)
   94c9c:	4798      	blx	r3
						Cl_AlarmActivateAlarms(HP_OVERRUN,true);
   94c9e:	2034      	movs	r0, #52	; 0x34
   94ca0:	2101      	movs	r1, #1
   94ca2:	4b70      	ldr	r3, [pc, #448]	; (94e64 <cl_hep_controller+0x304>)
   94ca4:	4798      	blx	r3
						Cl_AlarmActivateAlarms(HP_UNDERRUN,true);
   94ca6:	2035      	movs	r0, #53	; 0x35
   94ca8:	2101      	movs	r1, #1
   94caa:	4b6e      	ldr	r3, [pc, #440]	; (94e64 <cl_hep_controller+0x304>)
   94cac:	4798      	blx	r3

				hp_State = CL_HEP_STATE_NORMAL_DELIVERY_ON;
   94cae:	4b62      	ldr	r3, [pc, #392]	; (94e38 <cl_hep_controller+0x2d8>)
   94cb0:	2208      	movs	r2, #8
   94cb2:	701a      	strb	r2, [r3, #0]

				break;
   94cb4:	e067      	b.n	94d86 <cl_hep_controller+0x226>
				
				case CL_HEP_EVENT_STOP_NORMAL_DELIVERY:
				sv_cntrl_deactivatepump(HEPARINPUMP);
   94cb6:	2005      	movs	r0, #5
   94cb8:	4b67      	ldr	r3, [pc, #412]	; (94e58 <cl_hep_controller+0x2f8>)
   94cba:	4798      	blx	r3
				Cl_AlarmActivateAlarms(HP_OVERRUN,false);
   94cbc:	2034      	movs	r0, #52	; 0x34
   94cbe:	2100      	movs	r1, #0
   94cc0:	4b68      	ldr	r3, [pc, #416]	; (94e64 <cl_hep_controller+0x304>)
   94cc2:	4798      	blx	r3
				Cl_AlarmActivateAlarms(HP_UNDERRUN,false);
   94cc4:	2035      	movs	r0, #53	; 0x35
   94cc6:	2100      	movs	r1, #0
   94cc8:	4b66      	ldr	r3, [pc, #408]	; (94e64 <cl_hep_controller+0x304>)
   94cca:	4798      	blx	r3
				hp_State =  CL_HEP_STATE_IDLE;
   94ccc:	4b5a      	ldr	r3, [pc, #360]	; (94e38 <cl_hep_controller+0x2d8>)
   94cce:	2200      	movs	r2, #0
   94cd0:	701a      	strb	r2, [r3, #0]
				break;
   94cd2:	e058      	b.n	94d86 <cl_hep_controller+0x226>
				case CL_HEP_EVENT_GO_TO_LEFTEND:
				pwm_period = 2 ;
   94cd4:	4b5a      	ldr	r3, [pc, #360]	; (94e40 <cl_hep_controller+0x2e0>)
   94cd6:	2202      	movs	r2, #2
   94cd8:	601a      	str	r2, [r3, #0]
				
				sv_cntrl_setHepa_dir();
   94cda:	4b5b      	ldr	r3, [pc, #364]	; (94e48 <cl_hep_controller+0x2e8>)
   94cdc:	4798      	blx	r3
				sv_cntrl_activatepump(HEPARINPUMP);
   94cde:	2005      	movs	r0, #5
   94ce0:	4b58      	ldr	r3, [pc, #352]	; (94e44 <cl_hep_controller+0x2e4>)
   94ce2:	4798      	blx	r3
				//cl_hep_pumpFeedback_start();
				cl_wait(100);
   94ce4:	2064      	movs	r0, #100	; 0x64
   94ce6:	4b59      	ldr	r3, [pc, #356]	; (94e4c <cl_hep_controller+0x2ec>)
   94ce8:	4798      	blx	r3
				Cl_AlarmActivateAlarms(HP_OVERRUN,false);
   94cea:	2034      	movs	r0, #52	; 0x34
   94cec:	2100      	movs	r1, #0
   94cee:	4b5d      	ldr	r3, [pc, #372]	; (94e64 <cl_hep_controller+0x304>)
   94cf0:	4798      	blx	r3
				Cl_AlarmActivateAlarms(HP_UNDERRUN,false);
   94cf2:	2035      	movs	r0, #53	; 0x35
   94cf4:	2100      	movs	r1, #0
   94cf6:	4b5b      	ldr	r3, [pc, #364]	; (94e64 <cl_hep_controller+0x304>)
   94cf8:	4798      	blx	r3
				sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   94cfa:	4b51      	ldr	r3, [pc, #324]	; (94e40 <cl_hep_controller+0x2e0>)
   94cfc:	681b      	ldr	r3, [r3, #0]
   94cfe:	2005      	movs	r0, #5
   94d00:	4619      	mov	r1, r3
   94d02:	4b53      	ldr	r3, [pc, #332]	; (94e50 <cl_hep_controller+0x2f0>)
   94d04:	4798      	blx	r3
				hp_State = CL_HEP_STATE_MOVING_LEFT;
   94d06:	4b4c      	ldr	r3, [pc, #304]	; (94e38 <cl_hep_controller+0x2d8>)
   94d08:	2203      	movs	r2, #3
   94d0a:	701a      	strb	r2, [r3, #0]
				break;
   94d0c:	e03b      	b.n	94d86 <cl_hep_controller+0x226>
				case CL_HEP_EVENT_GO_TO_RIGHTEND:
				pwm_period = 2 ;
   94d0e:	4b4c      	ldr	r3, [pc, #304]	; (94e40 <cl_hep_controller+0x2e0>)
   94d10:	2202      	movs	r2, #2
   94d12:	601a      	str	r2, [r3, #0]
				
					sv_cntrl_resetHepa_dir();
   94d14:	4b54      	ldr	r3, [pc, #336]	; (94e68 <cl_hep_controller+0x308>)
   94d16:	4798      	blx	r3
					sv_cntrl_activatepump(HEPARINPUMP);
   94d18:	2005      	movs	r0, #5
   94d1a:	4b4a      	ldr	r3, [pc, #296]	; (94e44 <cl_hep_controller+0x2e4>)
   94d1c:	4798      	blx	r3
				//	cl_hep_pumpFeedback_start();
					cl_wait(100);
   94d1e:	2064      	movs	r0, #100	; 0x64
   94d20:	4b4a      	ldr	r3, [pc, #296]	; (94e4c <cl_hep_controller+0x2ec>)
   94d22:	4798      	blx	r3
					Cl_AlarmActivateAlarms(HP_OVERRUN,false);
   94d24:	2034      	movs	r0, #52	; 0x34
   94d26:	2100      	movs	r1, #0
   94d28:	4b4e      	ldr	r3, [pc, #312]	; (94e64 <cl_hep_controller+0x304>)
   94d2a:	4798      	blx	r3
					Cl_AlarmActivateAlarms(HP_UNDERRUN,false);
   94d2c:	2035      	movs	r0, #53	; 0x35
   94d2e:	2100      	movs	r1, #0
   94d30:	4b4c      	ldr	r3, [pc, #304]	; (94e64 <cl_hep_controller+0x304>)
   94d32:	4798      	blx	r3
					sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   94d34:	4b42      	ldr	r3, [pc, #264]	; (94e40 <cl_hep_controller+0x2e0>)
   94d36:	681b      	ldr	r3, [r3, #0]
   94d38:	2005      	movs	r0, #5
   94d3a:	4619      	mov	r1, r3
   94d3c:	4b44      	ldr	r3, [pc, #272]	; (94e50 <cl_hep_controller+0x2f0>)
   94d3e:	4798      	blx	r3
				hp_State = CL_HEP_STATE_MOVING_RIGHT;
   94d40:	4b3d      	ldr	r3, [pc, #244]	; (94e38 <cl_hep_controller+0x2d8>)
   94d42:	2204      	movs	r2, #4
   94d44:	701a      	strb	r2, [r3, #0]
				break;
   94d46:	e01e      	b.n	94d86 <cl_hep_controller+0x226>
				case CL_HEP_EVENT_LEFT_END_REACHED:
				sv_cntrl_deactivatepump(HEPARINPUMP);
   94d48:	2005      	movs	r0, #5
   94d4a:	4b43      	ldr	r3, [pc, #268]	; (94e58 <cl_hep_controller+0x2f8>)
   94d4c:	4798      	blx	r3
				Cl_AlarmActivateAlarms(HP_OVERRUN,false);
   94d4e:	2034      	movs	r0, #52	; 0x34
   94d50:	2100      	movs	r1, #0
   94d52:	4b44      	ldr	r3, [pc, #272]	; (94e64 <cl_hep_controller+0x304>)
   94d54:	4798      	blx	r3
				Cl_AlarmActivateAlarms(HP_UNDERRUN,false);
   94d56:	2035      	movs	r0, #53	; 0x35
   94d58:	2100      	movs	r1, #0
   94d5a:	4b42      	ldr	r3, [pc, #264]	; (94e64 <cl_hep_controller+0x304>)
   94d5c:	4798      	blx	r3
				hp_State = CL_HEP_STATE_IDLE;
   94d5e:	4b36      	ldr	r3, [pc, #216]	; (94e38 <cl_hep_controller+0x2d8>)
   94d60:	2200      	movs	r2, #0
   94d62:	701a      	strb	r2, [r3, #0]
				break;
   94d64:	e00f      	b.n	94d86 <cl_hep_controller+0x226>
				
			
				case CL_HEP_EVENT_RIGHT_END_REACHED:
				sv_cntrl_deactivatepump(HEPARINPUMP);
   94d66:	2005      	movs	r0, #5
   94d68:	4b3b      	ldr	r3, [pc, #236]	; (94e58 <cl_hep_controller+0x2f8>)
   94d6a:	4798      	blx	r3
				Cl_AlarmActivateAlarms(HP_OVERRUN,false);
   94d6c:	2034      	movs	r0, #52	; 0x34
   94d6e:	2100      	movs	r1, #0
   94d70:	4b3c      	ldr	r3, [pc, #240]	; (94e64 <cl_hep_controller+0x304>)
   94d72:	4798      	blx	r3
				Cl_AlarmActivateAlarms(HP_UNDERRUN,false);
   94d74:	2035      	movs	r0, #53	; 0x35
   94d76:	2100      	movs	r1, #0
   94d78:	4b3a      	ldr	r3, [pc, #232]	; (94e64 <cl_hep_controller+0x304>)
   94d7a:	4798      	blx	r3
				hp_State = CL_HEP_STATE_IDLE;
   94d7c:	4b2e      	ldr	r3, [pc, #184]	; (94e38 <cl_hep_controller+0x2d8>)
   94d7e:	2200      	movs	r2, #0
   94d80:	701a      	strb	r2, [r3, #0]
				break;
   94d82:	e000      	b.n	94d86 <cl_hep_controller+0x226>
					//sv_cntrl_setHepa_dir();
					//sv_cntrl_activatepump(HEPARINPUMP);
					
					
					
					break;
   94d84:	bf00      	nop
					//	sv_cntrl_setHepa_dir();
					//	sv_cntrl_activatepump(HEPARINPUMP);
					
					break;
			}
		break;
   94d86:	e287      	b.n	95298 <cl_hep_controller+0x738>
		case	CL_HEP_STATE_REACHED_LEFTEND:
		switch(hp_event)
   94d88:	79fb      	ldrb	r3, [r7, #7]
   94d8a:	3b02      	subs	r3, #2
   94d8c:	2b10      	cmp	r3, #16
   94d8e:	f200 8285 	bhi.w	9529c <cl_hep_controller+0x73c>
   94d92:	a201      	add	r2, pc, #4	; (adr r2, 94d98 <cl_hep_controller+0x238>)
   94d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   94d98:	00094e07 	.word	0x00094e07
   94d9c:	00094e15 	.word	0x00094e15
   94da0:	00094ddd 	.word	0x00094ddd
   94da4:	00094e23 	.word	0x00094e23
   94da8:	00094e2d 	.word	0x00094e2d
   94dac:	0009529d 	.word	0x0009529d
   94db0:	0009529d 	.word	0x0009529d
   94db4:	0009529d 	.word	0x0009529d
   94db8:	0009529d 	.word	0x0009529d
   94dbc:	0009529d 	.word	0x0009529d
   94dc0:	0009529d 	.word	0x0009529d
   94dc4:	0009529d 	.word	0x0009529d
   94dc8:	0009529d 	.word	0x0009529d
   94dcc:	0009529d 	.word	0x0009529d
   94dd0:	0009529d 	.word	0x0009529d
   94dd4:	0009529d 	.word	0x0009529d
   94dd8:	00094e07 	.word	0x00094e07
		{
			
			
			case CL_HEP_EVENT_GO_TO_RIGHTEND:
			sv_cntrl_resetHepa_dir();   ///change direction 24 july
   94ddc:	4b22      	ldr	r3, [pc, #136]	; (94e68 <cl_hep_controller+0x308>)
   94dde:	4798      	blx	r3
		//	sv_cntrl_setHepa_dir();
			pwm_period = 2;
   94de0:	4b17      	ldr	r3, [pc, #92]	; (94e40 <cl_hep_controller+0x2e0>)
   94de2:	2202      	movs	r2, #2
   94de4:	601a      	str	r2, [r3, #0]
			sv_cntrl_activatepump(HEPARINPUMP);
   94de6:	2005      	movs	r0, #5
   94de8:	4b16      	ldr	r3, [pc, #88]	; (94e44 <cl_hep_controller+0x2e4>)
   94dea:	4798      	blx	r3
		//	cl_hep_pumpFeedback_start();
			cl_wait(100);
   94dec:	2064      	movs	r0, #100	; 0x64
   94dee:	4b17      	ldr	r3, [pc, #92]	; (94e4c <cl_hep_controller+0x2ec>)
   94df0:	4798      	blx	r3
			sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   94df2:	4b13      	ldr	r3, [pc, #76]	; (94e40 <cl_hep_controller+0x2e0>)
   94df4:	681b      	ldr	r3, [r3, #0]
   94df6:	2005      	movs	r0, #5
   94df8:	4619      	mov	r1, r3
   94dfa:	4b15      	ldr	r3, [pc, #84]	; (94e50 <cl_hep_controller+0x2f0>)
   94dfc:	4798      	blx	r3
			hp_State = CL_HEP_STATE_MOVING_RIGHT;
   94dfe:	4b0e      	ldr	r3, [pc, #56]	; (94e38 <cl_hep_controller+0x2d8>)
   94e00:	2204      	movs	r2, #4
   94e02:	701a      	strb	r2, [r3, #0]
			break;
   94e04:	e016      	b.n	94e34 <cl_hep_controller+0x2d4>
			case CL_HEP_EVENT_AT_LEFT_END:
			case CL_HEP_EVENT_LEFT_END_REACHED:
		    sv_cntrl_deactivatepump(HEPARINPUMP);
   94e06:	2005      	movs	r0, #5
   94e08:	4b13      	ldr	r3, [pc, #76]	; (94e58 <cl_hep_controller+0x2f8>)
   94e0a:	4798      	blx	r3
		   hp_State = CL_HEP_STATE_IDLE;
   94e0c:	4b0a      	ldr	r3, [pc, #40]	; (94e38 <cl_hep_controller+0x2d8>)
   94e0e:	2200      	movs	r2, #0
   94e10:	701a      	strb	r2, [r3, #0]
		    break;
   94e12:	e00f      	b.n	94e34 <cl_hep_controller+0x2d4>
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			sv_cntrl_deactivatepump(HEPARINPUMP);
   94e14:	2005      	movs	r0, #5
   94e16:	4b10      	ldr	r3, [pc, #64]	; (94e58 <cl_hep_controller+0x2f8>)
   94e18:	4798      	blx	r3
			hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   94e1a:	4b07      	ldr	r3, [pc, #28]	; (94e38 <cl_hep_controller+0x2d8>)
   94e1c:	2202      	movs	r2, #2
   94e1e:	701a      	strb	r2, [r3, #0]
			break;
   94e20:	e008      	b.n	94e34 <cl_hep_controller+0x2d4>
			
			case CL_HEP_EVENT_SET_BOLUS_RATE:
			cl_hep_bolusrate = data ;
   94e22:	683b      	ldr	r3, [r7, #0]
   94e24:	b29a      	uxth	r2, r3
   94e26:	4b11      	ldr	r3, [pc, #68]	; (94e6c <cl_hep_controller+0x30c>)
   94e28:	801a      	strh	r2, [r3, #0]
			break;
   94e2a:	e003      	b.n	94e34 <cl_hep_controller+0x2d4>
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
   94e2c:	683b      	ldr	r3, [r7, #0]
   94e2e:	4a03      	ldr	r2, [pc, #12]	; (94e3c <cl_hep_controller+0x2dc>)
   94e30:	6013      	str	r3, [r2, #0]
			break;
   94e32:	bf00      	nop
		}
		break;
   94e34:	e232      	b.n	9529c <cl_hep_controller+0x73c>
   94e36:	bf00      	nop
   94e38:	20071c0d 	.word	0x20071c0d
   94e3c:	20070bf4 	.word	0x20070bf4
   94e40:	20071c14 	.word	0x20071c14
   94e44:	0009b32d 	.word	0x0009b32d
   94e48:	0009b439 	.word	0x0009b439
   94e4c:	0009421d 	.word	0x0009421d
   94e50:	0009b461 	.word	0x0009b461
   94e54:	00095351 	.word	0x00095351
   94e58:	0009b369 	.word	0x0009b369
   94e5c:	00083cc1 	.word	0x00083cc1
   94e60:	000952e1 	.word	0x000952e1
   94e64:	00082a35 	.word	0x00082a35
   94e68:	0009b44d 	.word	0x0009b44d
   94e6c:	20071c0e 	.word	0x20071c0e
		case	CL_HEP_STATE_REACHED_RIGHTEND:
		switch(hp_event)
   94e70:	79fb      	ldrb	r3, [r7, #7]
   94e72:	3b01      	subs	r3, #1
   94e74:	2b12      	cmp	r3, #18
   94e76:	f200 8213 	bhi.w	952a0 <cl_hep_controller+0x740>
   94e7a:	a201      	add	r2, pc, #4	; (adr r2, 94e80 <cl_hep_controller+0x320>)
   94e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   94e80:	00094ed5 	.word	0x00094ed5
   94e84:	00094ef9 	.word	0x00094ef9
   94e88:	00094f07 	.word	0x00094f07
   94e8c:	000952a1 	.word	0x000952a1
   94e90:	000952a1 	.word	0x000952a1
   94e94:	000952a1 	.word	0x000952a1
   94e98:	000952a1 	.word	0x000952a1
   94e9c:	000952a1 	.word	0x000952a1
   94ea0:	000952a1 	.word	0x000952a1
   94ea4:	000952a1 	.word	0x000952a1
   94ea8:	00094ecd 	.word	0x00094ecd
   94eac:	000952a1 	.word	0x000952a1
   94eb0:	000952a1 	.word	0x000952a1
   94eb4:	000952a1 	.word	0x000952a1
   94eb8:	000952a1 	.word	0x000952a1
   94ebc:	000952a1 	.word	0x000952a1
   94ec0:	000952a1 	.word	0x000952a1
   94ec4:	000952a1 	.word	0x000952a1
   94ec8:	00094f07 	.word	0x00094f07
// 			case CL_HEP_EVENT_STARTBOLUS:
// 			hp_State = CL_HEP_STATE_BOLUS_ON;
// 			break;

			case CL_HEP_EVENT_START_NORMAL_DELIVERY:
			hp_State =  CL_HEP_STATE_IDLE;
   94ecc:	4bb8      	ldr	r3, [pc, #736]	; (951b0 <cl_hep_controller+0x650>)
   94ece:	2200      	movs	r2, #0
   94ed0:	701a      	strb	r2, [r3, #0]
			//hp_State = CL_HEP_STATE_NORMAL_DELIVERY_ON;/24july
			break;
   94ed2:	e01f      	b.n	94f14 <cl_hep_controller+0x3b4>
			case CL_HEP_EVENT_GO_TO_LEFTEND:
			sv_cntrl_setHepa_dir();     //change direction 24 july
   94ed4:	4bb7      	ldr	r3, [pc, #732]	; (951b4 <cl_hep_controller+0x654>)
   94ed6:	4798      	blx	r3
		//	sv_cntrl_resetHepa_dir();
			sv_cntrl_activatepump(HEPARINPUMP);
   94ed8:	2005      	movs	r0, #5
   94eda:	4bb7      	ldr	r3, [pc, #732]	; (951b8 <cl_hep_controller+0x658>)
   94edc:	4798      	blx	r3
		//	cl_hep_pumpFeedback_start();
			cl_wait(100);
   94ede:	2064      	movs	r0, #100	; 0x64
   94ee0:	4bb6      	ldr	r3, [pc, #728]	; (951bc <cl_hep_controller+0x65c>)
   94ee2:	4798      	blx	r3
			sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   94ee4:	4bb6      	ldr	r3, [pc, #728]	; (951c0 <cl_hep_controller+0x660>)
   94ee6:	681b      	ldr	r3, [r3, #0]
   94ee8:	2005      	movs	r0, #5
   94eea:	4619      	mov	r1, r3
   94eec:	4bb5      	ldr	r3, [pc, #724]	; (951c4 <cl_hep_controller+0x664>)
   94eee:	4798      	blx	r3
			hp_State = CL_HEP_STATE_MOVING_LEFT;
   94ef0:	4baf      	ldr	r3, [pc, #700]	; (951b0 <cl_hep_controller+0x650>)
   94ef2:	2203      	movs	r2, #3
   94ef4:	701a      	strb	r2, [r3, #0]
			break;
   94ef6:	e00d      	b.n	94f14 <cl_hep_controller+0x3b4>
			case CL_HEP_EVENT_LEFT_END_REACHED:
				sv_cntrl_deactivatepump(HEPARINPUMP);
   94ef8:	2005      	movs	r0, #5
   94efa:	4bb3      	ldr	r3, [pc, #716]	; (951c8 <cl_hep_controller+0x668>)
   94efc:	4798      	blx	r3
				hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   94efe:	4bac      	ldr	r3, [pc, #688]	; (951b0 <cl_hep_controller+0x650>)
   94f00:	2201      	movs	r2, #1
   94f02:	701a      	strb	r2, [r3, #0]
				break;
   94f04:	e006      	b.n	94f14 <cl_hep_controller+0x3b4>
				case CL_HEP_EVENT_AT_RIGHT_END:
			    case CL_HEP_EVENT_RIGHT_END_REACHED:
			    sv_cntrl_deactivatepump(HEPARINPUMP);
   94f06:	2005      	movs	r0, #5
   94f08:	4baf      	ldr	r3, [pc, #700]	; (951c8 <cl_hep_controller+0x668>)
   94f0a:	4798      	blx	r3
			    hp_State = CL_HEP_STATE_IDLE;
   94f0c:	4ba8      	ldr	r3, [pc, #672]	; (951b0 <cl_hep_controller+0x650>)
   94f0e:	2200      	movs	r2, #0
   94f10:	701a      	strb	r2, [r3, #0]
			    break;
   94f12:	bf00      	nop
// 			break;
// 			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
// 			cl_hep_deliveryrate = data;
// 			break;
		}
		break;
   94f14:	e1c4      	b.n	952a0 <cl_hep_controller+0x740>

		case CL_HEP_STATE_MOVING_RIGHT:
		switch(hp_event)
   94f16:	79fb      	ldrb	r3, [r7, #7]
   94f18:	3b03      	subs	r3, #3
   94f1a:	2b10      	cmp	r3, #16
   94f1c:	d834      	bhi.n	94f88 <cl_hep_controller+0x428>
   94f1e:	a201      	add	r2, pc, #4	; (adr r2, 94f24 <cl_hep_controller+0x3c4>)
   94f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   94f24:	00094f69 	.word	0x00094f69
   94f28:	00094f89 	.word	0x00094f89
   94f2c:	00094f89 	.word	0x00094f89
   94f30:	00094f89 	.word	0x00094f89
   94f34:	00094f89 	.word	0x00094f89
   94f38:	00094f89 	.word	0x00094f89
   94f3c:	00094f77 	.word	0x00094f77
   94f40:	00094f89 	.word	0x00094f89
   94f44:	00094f89 	.word	0x00094f89
   94f48:	00094f89 	.word	0x00094f89
   94f4c:	00094f77 	.word	0x00094f77
   94f50:	00094f89 	.word	0x00094f89
   94f54:	00094f89 	.word	0x00094f89
   94f58:	00094f89 	.word	0x00094f89
   94f5c:	00094f89 	.word	0x00094f89
   94f60:	00094f89 	.word	0x00094f89
   94f64:	00094f69 	.word	0x00094f69
		{
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			case CL_HEP_EVENT_AT_RIGHT_END:
			sv_cntrl_deactivatepump(HEPARINPUMP);
   94f68:	2005      	movs	r0, #5
   94f6a:	4b97      	ldr	r3, [pc, #604]	; (951c8 <cl_hep_controller+0x668>)
   94f6c:	4798      	blx	r3
			hp_State = CL_HEP_STATE_IDLE;
   94f6e:	4b90      	ldr	r3, [pc, #576]	; (951b0 <cl_hep_controller+0x650>)
   94f70:	2200      	movs	r2, #0
   94f72:	701a      	strb	r2, [r3, #0]
			break;
   94f74:	e009      	b.n	94f8a <cl_hep_controller+0x42a>

			case CL_HEP_EVENT_STOP_NORMAL_DELIVERY:
			case CL_HEP_EVENT_STOPBOLUS:
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   94f76:	2005      	movs	r0, #5
   94f78:	4b93      	ldr	r3, [pc, #588]	; (951c8 <cl_hep_controller+0x668>)
   94f7a:	4798      	blx	r3
   94f7c:	4603      	mov	r3, r0
   94f7e:	73fb      	strb	r3, [r7, #15]
			hp_State = CL_HEP_STATE_IDLE;
   94f80:	4b8b      	ldr	r3, [pc, #556]	; (951b0 <cl_hep_controller+0x650>)
   94f82:	2200      	movs	r2, #0
   94f84:	701a      	strb	r2, [r3, #0]
			break;
   94f86:	e000      	b.n	94f8a <cl_hep_controller+0x42a>
			default:break;
   94f88:	bf00      	nop

		}
		break;
   94f8a:	e190      	b.n	952ae <cl_hep_controller+0x74e>
		case CL_HEP_STATE_MOVING_LEFT:
		switch(hp_event)
   94f8c:	79fb      	ldrb	r3, [r7, #7]
   94f8e:	3b02      	subs	r3, #2
   94f90:	2b10      	cmp	r3, #16
   94f92:	d835      	bhi.n	95000 <cl_hep_controller+0x4a0>
   94f94:	a201      	add	r2, pc, #4	; (adr r2, 94f9c <cl_hep_controller+0x43c>)
   94f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   94f9a:	bf00      	nop
   94f9c:	00094fe1 	.word	0x00094fe1
   94fa0:	00095001 	.word	0x00095001
   94fa4:	00095001 	.word	0x00095001
   94fa8:	00095001 	.word	0x00095001
   94fac:	00095001 	.word	0x00095001
   94fb0:	00095001 	.word	0x00095001
   94fb4:	00095001 	.word	0x00095001
   94fb8:	00094fef 	.word	0x00094fef
   94fbc:	00095001 	.word	0x00095001
   94fc0:	00095001 	.word	0x00095001
   94fc4:	00095001 	.word	0x00095001
   94fc8:	00094fef 	.word	0x00094fef
   94fcc:	00095001 	.word	0x00095001
   94fd0:	00095001 	.word	0x00095001
   94fd4:	00095001 	.word	0x00095001
   94fd8:	00095001 	.word	0x00095001
   94fdc:	00094fe1 	.word	0x00094fe1
// 				break;
// 			}
// 			break;
 			case CL_HEP_EVENT_LEFT_END_REACHED:
			case CL_HEP_EVENT_AT_LEFT_END:
			sv_cntrl_deactivatepump(HEPARINPUMP);
   94fe0:	2005      	movs	r0, #5
   94fe2:	4b79      	ldr	r3, [pc, #484]	; (951c8 <cl_hep_controller+0x668>)
   94fe4:	4798      	blx	r3
			hp_State = CL_HEP_STATE_IDLE;
   94fe6:	4b72      	ldr	r3, [pc, #456]	; (951b0 <cl_hep_controller+0x650>)
   94fe8:	2200      	movs	r2, #0
   94fea:	701a      	strb	r2, [r3, #0]
			break;
   94fec:	e009      	b.n	95002 <cl_hep_controller+0x4a2>
			case CL_HEP_EVENT_STOP_NORMAL_DELIVERY:
			case CL_HEP_EVENT_STOPBOLUS:
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   94fee:	2005      	movs	r0, #5
   94ff0:	4b75      	ldr	r3, [pc, #468]	; (951c8 <cl_hep_controller+0x668>)
   94ff2:	4798      	blx	r3
   94ff4:	4603      	mov	r3, r0
   94ff6:	73fb      	strb	r3, [r7, #15]
			hp_State = CL_HEP_STATE_IDLE;
   94ff8:	4b6d      	ldr	r3, [pc, #436]	; (951b0 <cl_hep_controller+0x650>)
   94ffa:	2200      	movs	r2, #0
   94ffc:	701a      	strb	r2, [r3, #0]
			break;
   94ffe:	e000      	b.n	95002 <cl_hep_controller+0x4a2>
			default:break;
   95000:	bf00      	nop

		}
		break;
   95002:	e154      	b.n	952ae <cl_hep_controller+0x74e>
		case	CL_HEP_STATE_READY_FORBOLUS:
		switch(hp_event)
   95004:	79fb      	ldrb	r3, [r7, #7]
   95006:	3b01      	subs	r3, #1
   95008:	2b06      	cmp	r3, #6
   9500a:	f200 814b 	bhi.w	952a4 <cl_hep_controller+0x744>
   9500e:	a201      	add	r2, pc, #4	; (adr r2, 95014 <cl_hep_controller+0x4b4>)
   95010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   95014:	00095039 	.word	0x00095039
   95018:	00095049 	.word	0x00095049
   9501c:	00095051 	.word	0x00095051
   95020:	00095041 	.word	0x00095041
   95024:	00095059 	.word	0x00095059
   95028:	00095063 	.word	0x00095063
   9502c:	00095031 	.word	0x00095031
		{
			case CL_HEP_EVENT_STARTBOLUS:
			hp_State = CL_HEP_STATE_BOLUS_ON;
   95030:	4b5f      	ldr	r3, [pc, #380]	; (951b0 <cl_hep_controller+0x650>)
   95032:	2206      	movs	r2, #6
   95034:	701a      	strb	r2, [r3, #0]
			break;
   95036:	e018      	b.n	9506a <cl_hep_controller+0x50a>
			case CL_HEP_EVENT_GO_TO_LEFTEND:
			hp_State = CL_HEP_STATE_MOVING_LEFT;
   95038:	4b5d      	ldr	r3, [pc, #372]	; (951b0 <cl_hep_controller+0x650>)
   9503a:	2203      	movs	r2, #3
   9503c:	701a      	strb	r2, [r3, #0]
			break;
   9503e:	e014      	b.n	9506a <cl_hep_controller+0x50a>
			case CL_HEP_EVENT_GO_TO_RIGHTEND:
			hp_State = CL_HEP_STATE_MOVING_RIGHT;
   95040:	4b5b      	ldr	r3, [pc, #364]	; (951b0 <cl_hep_controller+0x650>)
   95042:	2204      	movs	r2, #4
   95044:	701a      	strb	r2, [r3, #0]
			break;
   95046:	e010      	b.n	9506a <cl_hep_controller+0x50a>
			case CL_HEP_EVENT_LEFT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   95048:	4b59      	ldr	r3, [pc, #356]	; (951b0 <cl_hep_controller+0x650>)
   9504a:	2201      	movs	r2, #1
   9504c:	701a      	strb	r2, [r3, #0]
			break;
   9504e:	e00c      	b.n	9506a <cl_hep_controller+0x50a>
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   95050:	4b57      	ldr	r3, [pc, #348]	; (951b0 <cl_hep_controller+0x650>)
   95052:	2202      	movs	r2, #2
   95054:	701a      	strb	r2, [r3, #0]
			break;
   95056:	e008      	b.n	9506a <cl_hep_controller+0x50a>
			case CL_HEP_EVENT_SET_BOLUS_RATE:
			cl_hep_bolusrate = data ;
   95058:	683b      	ldr	r3, [r7, #0]
   9505a:	b29a      	uxth	r2, r3
   9505c:	4b5b      	ldr	r3, [pc, #364]	; (951cc <cl_hep_controller+0x66c>)
   9505e:	801a      	strh	r2, [r3, #0]
			break;
   95060:	e003      	b.n	9506a <cl_hep_controller+0x50a>
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
   95062:	683b      	ldr	r3, [r7, #0]
   95064:	4a5a      	ldr	r2, [pc, #360]	; (951d0 <cl_hep_controller+0x670>)
   95066:	6013      	str	r3, [r2, #0]
			break;
   95068:	bf00      	nop
		}
		break;
   9506a:	e11b      	b.n	952a4 <cl_hep_controller+0x744>
		case	CL_HEP_STATE_BOLUS_ON:
		switch(hp_event)
   9506c:	79fb      	ldrb	r3, [r7, #7]
   9506e:	3b02      	subs	r3, #2
   95070:	2b0c      	cmp	r3, #12
   95072:	f200 8119 	bhi.w	952a8 <cl_hep_controller+0x748>
   95076:	a201      	add	r2, pc, #4	; (adr r2, 9507c <cl_hep_controller+0x51c>)
   95078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9507c:	0009510d 	.word	0x0009510d
   95080:	00095115 	.word	0x00095115
   95084:	000952a9 	.word	0x000952a9
   95088:	000952a9 	.word	0x000952a9
   9508c:	000952a9 	.word	0x000952a9
   95090:	000952a9 	.word	0x000952a9
   95094:	000952a9 	.word	0x000952a9
   95098:	0009511d 	.word	0x0009511d
   9509c:	000950eb 	.word	0x000950eb
   950a0:	000952a9 	.word	0x000952a9
   950a4:	000952a9 	.word	0x000952a9
   950a8:	0009511d 	.word	0x0009511d
   950ac:	000950b1 	.word	0x000950b1
		{
	//	case CL_HEP_EVENT_SEC_TICK:
			case CL_HEP_EVENT_100ms_TICK:
			cl_hep_100mseconds++;
   950b0:	4b48      	ldr	r3, [pc, #288]	; (951d4 <cl_hep_controller+0x674>)
   950b2:	881b      	ldrh	r3, [r3, #0]
   950b4:	3301      	adds	r3, #1
   950b6:	b29a      	uxth	r2, r3
   950b8:	4b46      	ldr	r3, [pc, #280]	; (951d4 <cl_hep_controller+0x674>)
   950ba:	801a      	strh	r2, [r3, #0]
	//		Cl_SysStat_GetSensor_Status_Query(SENSOR_HP_FB, &hep_rotataion_marker);
			
			if(cl_hep_100mseconds >=600)
   950bc:	4b45      	ldr	r3, [pc, #276]	; (951d4 <cl_hep_controller+0x674>)
   950be:	881b      	ldrh	r3, [r3, #0]
   950c0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   950c4:	d310      	bcc.n	950e8 <cl_hep_controller+0x588>
			{
				//cl_hep_seconds = 0;
				//if(++cl_hep_minutes > HEPARIN_BOLUS_TIMEOUT)
			//	if(++cl_hep_seconds > HEPARIN_BOLUS_TIMEOUT)
//				{
					cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   950c6:	2005      	movs	r0, #5
   950c8:	4b3f      	ldr	r3, [pc, #252]	; (951c8 <cl_hep_controller+0x668>)
   950ca:	4798      	blx	r3
   950cc:	4603      	mov	r3, r0
   950ce:	73fb      	strb	r3, [r7, #15]
					hp_State = CL_HEP_STATE_IDLE;
   950d0:	4b37      	ldr	r3, [pc, #220]	; (951b0 <cl_hep_controller+0x650>)
   950d2:	2200      	movs	r2, #0
   950d4:	701a      	strb	r2, [r3, #0]
					cl_hep_pumpFeedback_stop();
   950d6:	4b40      	ldr	r3, [pc, #256]	; (951d8 <cl_hep_controller+0x678>)
   950d8:	4798      	blx	r3
					cl_hep_seconds = 0;
   950da:	4b40      	ldr	r3, [pc, #256]	; (951dc <cl_hep_controller+0x67c>)
   950dc:	2200      	movs	r2, #0
   950de:	801a      	strh	r2, [r3, #0]
					cl_hep_100mseconds=0;
   950e0:	4b3c      	ldr	r3, [pc, #240]	; (951d4 <cl_hep_controller+0x674>)
   950e2:	2200      	movs	r2, #0
   950e4:	801a      	strh	r2, [r3, #0]
					//cl_hep_minutes = 0;
					//Cl_mac_apprequesthandler(MACREQ_HEPARIN_BOLUS_COMPLETED);
	//			}
			}

			break;
   950e6:	e025      	b.n	95134 <cl_hep_controller+0x5d4>
   950e8:	e024      	b.n	95134 <cl_hep_controller+0x5d4>
			
			case CL_HEP_EVENT_STOP_BOLUS:
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   950ea:	2005      	movs	r0, #5
   950ec:	4b36      	ldr	r3, [pc, #216]	; (951c8 <cl_hep_controller+0x668>)
   950ee:	4798      	blx	r3
   950f0:	4603      	mov	r3, r0
   950f2:	73fb      	strb	r3, [r7, #15]
			hp_State = CL_HEP_STATE_IDLE;
   950f4:	4b2e      	ldr	r3, [pc, #184]	; (951b0 <cl_hep_controller+0x650>)
   950f6:	2200      	movs	r2, #0
   950f8:	701a      	strb	r2, [r3, #0]
			cl_hep_pumpFeedback_stop();
   950fa:	4b37      	ldr	r3, [pc, #220]	; (951d8 <cl_hep_controller+0x678>)
   950fc:	4798      	blx	r3
			cl_hep_seconds = 0;
   950fe:	4b37      	ldr	r3, [pc, #220]	; (951dc <cl_hep_controller+0x67c>)
   95100:	2200      	movs	r2, #0
   95102:	801a      	strh	r2, [r3, #0]
			cl_hep_100mseconds=0;
   95104:	4b33      	ldr	r3, [pc, #204]	; (951d4 <cl_hep_controller+0x674>)
   95106:	2200      	movs	r2, #0
   95108:	801a      	strh	r2, [r3, #0]
			break;
   9510a:	e013      	b.n	95134 <cl_hep_controller+0x5d4>
			
			case CL_HEP_EVENT_LEFT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   9510c:	4b28      	ldr	r3, [pc, #160]	; (951b0 <cl_hep_controller+0x650>)
   9510e:	2201      	movs	r2, #1
   95110:	701a      	strb	r2, [r3, #0]
			break;
   95112:	e00f      	b.n	95134 <cl_hep_controller+0x5d4>
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   95114:	4b26      	ldr	r3, [pc, #152]	; (951b0 <cl_hep_controller+0x650>)
   95116:	2202      	movs	r2, #2
   95118:	701a      	strb	r2, [r3, #0]
			break;
   9511a:	e00b      	b.n	95134 <cl_hep_controller+0x5d4>
// 			hp_State = CL_HEP_STATE_IDLE;
// 			break;
// 			
			case CL_HEP_EVENT_STOP_NORMAL_DELIVERY:
			case	CL_HEP_EVENT_STOPBOLUS:
			cl_hep_seconds = 0;
   9511c:	4b2f      	ldr	r3, [pc, #188]	; (951dc <cl_hep_controller+0x67c>)
   9511e:	2200      	movs	r2, #0
   95120:	801a      	strh	r2, [r3, #0]
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   95122:	2005      	movs	r0, #5
   95124:	4b28      	ldr	r3, [pc, #160]	; (951c8 <cl_hep_controller+0x668>)
   95126:	4798      	blx	r3
   95128:	4603      	mov	r3, r0
   9512a:	73fb      	strb	r3, [r7, #15]
			hp_State = CL_HEP_STATE_IDLE;
   9512c:	4b20      	ldr	r3, [pc, #128]	; (951b0 <cl_hep_controller+0x650>)
   9512e:	2200      	movs	r2, #0
   95130:	701a      	strb	r2, [r3, #0]
			break;
   95132:	bf00      	nop
		}
		break;
   95134:	e0b8      	b.n	952a8 <cl_hep_controller+0x748>
		case	CL_HEP_STATE_READY_FOR_DELIVERY:
		break;
		case	CL_HEP_STATE_NORMAL_DELIVERY_ON:
			switch(hp_event)
   95136:	79fb      	ldrb	r3, [r7, #7]
   95138:	3b02      	subs	r3, #2
   9513a:	2b0d      	cmp	r3, #13
   9513c:	f200 80b6 	bhi.w	952ac <cl_hep_controller+0x74c>
   95140:	a201      	add	r2, pc, #4	; (adr r2, 95148 <cl_hep_controller+0x5e8>)
   95142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   95146:	bf00      	nop
   95148:	000951e9 	.word	0x000951e9
   9514c:	000951fb 	.word	0x000951fb
   95150:	000952ad 	.word	0x000952ad
   95154:	000952ad 	.word	0x000952ad
   95158:	0009520d 	.word	0x0009520d
   9515c:	0009525d 	.word	0x0009525d
   95160:	000952ad 	.word	0x000952ad
   95164:	00095239 	.word	0x00095239
   95168:	000952ad 	.word	0x000952ad
   9516c:	000952ad 	.word	0x000952ad
   95170:	000952ad 	.word	0x000952ad
   95174:	0009524b 	.word	0x0009524b
   95178:	000952ad 	.word	0x000952ad
   9517c:	00095181 	.word	0x00095181
			{
				case CL_HEP_EVENT_SEC_TICK:

					cl_hep_pumpFeedback_get_state(&hep_pumpstate);
   95180:	f107 030e 	add.w	r3, r7, #14
   95184:	4618      	mov	r0, r3
   95186:	4b16      	ldr	r3, [pc, #88]	; (951e0 <cl_hep_controller+0x680>)
   95188:	4798      	blx	r3
					cl_hep_pumpFeedback_get_delta(&hep_delta_value);
   9518a:	f107 030c 	add.w	r3, r7, #12
   9518e:	4618      	mov	r0, r3
   95190:	4b14      	ldr	r3, [pc, #80]	; (951e4 <cl_hep_controller+0x684>)
   95192:	4798      	blx	r3
			//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_RPM",6);
			//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_delta_value,2);
					switch(hep_pumpstate)
   95194:	7bbb      	ldrb	r3, [r7, #14]
   95196:	2b06      	cmp	r3, #6
   95198:	d004      	beq.n	951a4 <cl_hep_controller+0x644>
   9519a:	2b07      	cmp	r3, #7
   9519c:	d004      	beq.n	951a8 <cl_hep_controller+0x648>
   9519e:	2b02      	cmp	r3, #2
   951a0:	d004      	beq.n	951ac <cl_hep_controller+0x64c>
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_END",6);
							//sv_cntrl_deactivatepump(HEPARINPUMP);
							//hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
						break;
						
						default:break;
   951a2:	e004      	b.n	951ae <cl_hep_controller+0x64e>
						case CL_HEP_P_STATE_RUNNING_SLOW:
							//apply correction
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_SLOW",7);
						//	pwm_period = pwm_period - 5;
						//	sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
						break;
   951a4:	bf00      	nop
   951a6:	e074      	b.n	95292 <cl_hep_controller+0x732>
						case CL_HEP_P_STATE_RUNNING_FAST:
							//apply correction
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_FAST",7);
						//	pwm_period = pwm_period + 5;
						//	sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period );
						break;
   951a8:	bf00      	nop
   951aa:	e072      	b.n	95292 <cl_hep_controller+0x732>
						break;
						case CL_HEP_P_STATE_STOPPED_AT_END:
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_END",6);
							//sv_cntrl_deactivatepump(HEPARINPUMP);
							//hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
						break;
   951ac:	bf00      	nop
						
						default:break;
					}


				break;
   951ae:	e070      	b.n	95292 <cl_hep_controller+0x732>
   951b0:	20071c0d 	.word	0x20071c0d
   951b4:	0009b439 	.word	0x0009b439
   951b8:	0009b32d 	.word	0x0009b32d
   951bc:	0009421d 	.word	0x0009421d
   951c0:	20071c14 	.word	0x20071c14
   951c4:	0009b461 	.word	0x0009b461
   951c8:	0009b369 	.word	0x0009b369
   951cc:	20071c0e 	.word	0x20071c0e
   951d0:	20070bf4 	.word	0x20070bf4
   951d4:	20071c12 	.word	0x20071c12
   951d8:	00095375 	.word	0x00095375
   951dc:	20071c10 	.word	0x20071c10
   951e0:	00095391 	.word	0x00095391
   951e4:	000953b5 	.word	0x000953b5
				case CL_HEP_EVENT_LEFT_END_REACHED:
				cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   951e8:	2005      	movs	r0, #5
   951ea:	4b33      	ldr	r3, [pc, #204]	; (952b8 <cl_hep_controller+0x758>)
   951ec:	4798      	blx	r3
   951ee:	4603      	mov	r3, r0
   951f0:	73fb      	strb	r3, [r7, #15]
					
				
				hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   951f2:	4b32      	ldr	r3, [pc, #200]	; (952bc <cl_hep_controller+0x75c>)
   951f4:	2201      	movs	r2, #1
   951f6:	701a      	strb	r2, [r3, #0]
				break;
   951f8:	e04b      	b.n	95292 <cl_hep_controller+0x732>
				case CL_HEP_EVENT_RIGHT_END_REACHED:
				cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   951fa:	2005      	movs	r0, #5
   951fc:	4b2e      	ldr	r3, [pc, #184]	; (952b8 <cl_hep_controller+0x758>)
   951fe:	4798      	blx	r3
   95200:	4603      	mov	r3, r0
   95202:	73fb      	strb	r3, [r7, #15]
				hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   95204:	4b2d      	ldr	r3, [pc, #180]	; (952bc <cl_hep_controller+0x75c>)
   95206:	2202      	movs	r2, #2
   95208:	701a      	strb	r2, [r3, #0]
				break;
   9520a:	e042      	b.n	95292 <cl_hep_controller+0x732>
// 				case CL_HEP_EVENT_SET_BOLUS_RATE:
// 				cl_hep_bolusrate = data ;
// 				break;
 				case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
 				
				 pwm_period = hep_calibration(data);
   9520c:	683b      	ldr	r3, [r7, #0]
   9520e:	4618      	mov	r0, r3
   95210:	4b2b      	ldr	r3, [pc, #172]	; (952c0 <cl_hep_controller+0x760>)
   95212:	4798      	blx	r3
   95214:	4602      	mov	r2, r0
   95216:	4b2b      	ldr	r3, [pc, #172]	; (952c4 <cl_hep_controller+0x764>)
   95218:	601a      	str	r2, [r3, #0]
				 sv_cntrl_setHepa_dir();
   9521a:	4b2b      	ldr	r3, [pc, #172]	; (952c8 <cl_hep_controller+0x768>)
   9521c:	4798      	blx	r3
				 sv_cntrl_activatepump(HEPARINPUMP);
   9521e:	2005      	movs	r0, #5
   95220:	4b2a      	ldr	r3, [pc, #168]	; (952cc <cl_hep_controller+0x76c>)
   95222:	4798      	blx	r3
				 cl_wait(100);
   95224:	2064      	movs	r0, #100	; 0x64
   95226:	4b2a      	ldr	r3, [pc, #168]	; (952d0 <cl_hep_controller+0x770>)
   95228:	4798      	blx	r3
				 sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   9522a:	4b26      	ldr	r3, [pc, #152]	; (952c4 <cl_hep_controller+0x764>)
   9522c:	681b      	ldr	r3, [r3, #0]
   9522e:	2005      	movs	r0, #5
   95230:	4619      	mov	r1, r3
   95232:	4b28      	ldr	r3, [pc, #160]	; (952d4 <cl_hep_controller+0x774>)
   95234:	4798      	blx	r3
				 
 				break;
   95236:	e02c      	b.n	95292 <cl_hep_controller+0x732>
// 				case 	CL_HEP_EVENT_PAUSEBOLUS:
// 				hp_State = CL_HEP_STATE_PAUSED;
// 				break;
 				case	CL_HEP_EVENT_STOPBOLUS:
				 	cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);      //added for normal delivery stop
   95238:	2005      	movs	r0, #5
   9523a:	4b1f      	ldr	r3, [pc, #124]	; (952b8 <cl_hep_controller+0x758>)
   9523c:	4798      	blx	r3
   9523e:	4603      	mov	r3, r0
   95240:	73fb      	strb	r3, [r7, #15]
			//	 	hp_State = CL_HEP_STATE_IDLE;
				 
				 
 				hp_State = CL_HEP_STATE_IDLE;
   95242:	4b1e      	ldr	r3, [pc, #120]	; (952bc <cl_hep_controller+0x75c>)
   95244:	2200      	movs	r2, #0
   95246:	701a      	strb	r2, [r3, #0]
 				break;
   95248:	e023      	b.n	95292 <cl_hep_controller+0x732>
				 case CL_HEP_EVENT_STOP_NORMAL_DELIVERY:
				 	cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP); 
   9524a:	2005      	movs	r0, #5
   9524c:	4b1a      	ldr	r3, [pc, #104]	; (952b8 <cl_hep_controller+0x758>)
   9524e:	4798      	blx	r3
   95250:	4603      	mov	r3, r0
   95252:	73fb      	strb	r3, [r7, #15]
					hp_State = CL_HEP_STATE_IDLE;
   95254:	4b19      	ldr	r3, [pc, #100]	; (952bc <cl_hep_controller+0x75c>)
   95256:	2200      	movs	r2, #0
   95258:	701a      	strb	r2, [r3, #0]
 				break; 
   9525a:	e01a      	b.n	95292 <cl_hep_controller+0x732>
				 
				 case CL_HEP_EVENT_STARTBOLUS:
				 pwm_period =  cl_hep_deliveryrate ;
   9525c:	4b1e      	ldr	r3, [pc, #120]	; (952d8 <cl_hep_controller+0x778>)
   9525e:	681b      	ldr	r3, [r3, #0]
   95260:	4a18      	ldr	r2, [pc, #96]	; (952c4 <cl_hep_controller+0x764>)
   95262:	6013      	str	r3, [r2, #0]
				 pwm_period = 2;
   95264:	4b17      	ldr	r3, [pc, #92]	; (952c4 <cl_hep_controller+0x764>)
   95266:	2202      	movs	r2, #2
   95268:	601a      	str	r2, [r3, #0]
				 //	cl_wait(100);
				 
				 //	cl_wait(100);
				 sv_cntrl_activatepump(HEPARINPUMP);
   9526a:	2005      	movs	r0, #5
   9526c:	4b17      	ldr	r3, [pc, #92]	; (952cc <cl_hep_controller+0x76c>)
   9526e:	4798      	blx	r3
				 sv_cntrl_setHepa_dir();
   95270:	4b15      	ldr	r3, [pc, #84]	; (952c8 <cl_hep_controller+0x768>)
   95272:	4798      	blx	r3
				 cl_wait(100);
   95274:	2064      	movs	r0, #100	; 0x64
   95276:	4b16      	ldr	r3, [pc, #88]	; (952d0 <cl_hep_controller+0x770>)
   95278:	4798      	blx	r3
				 sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   9527a:	4b12      	ldr	r3, [pc, #72]	; (952c4 <cl_hep_controller+0x764>)
   9527c:	681b      	ldr	r3, [r3, #0]
   9527e:	2005      	movs	r0, #5
   95280:	4619      	mov	r1, r3
   95282:	4b14      	ldr	r3, [pc, #80]	; (952d4 <cl_hep_controller+0x774>)
   95284:	4798      	blx	r3
				 //				cl_hep_bolus_count_rate = cl_hep_bolus_count_rate;//300;
			//	 cl_hep_pumpFeedback_start();
		    	cl_hep_bolus_start();
   95286:	4b15      	ldr	r3, [pc, #84]	; (952dc <cl_hep_controller+0x77c>)
   95288:	4798      	blx	r3
				 hp_State = CL_HEP_STATE_BOLUS_ON;
   9528a:	4b0c      	ldr	r3, [pc, #48]	; (952bc <cl_hep_controller+0x75c>)
   9528c:	2206      	movs	r2, #6
   9528e:	701a      	strb	r2, [r3, #0]
				 break;
   95290:	bf00      	nop
			}
		
		break;
   95292:	e00b      	b.n	952ac <cl_hep_controller+0x74c>
		case	CL_HEP_STATE_STOPPED:
		break;

		case	CL_HEP_STATE_COMPLETED:
		break;
		default: break;
   95294:	bf00      	nop
   95296:	e00a      	b.n	952ae <cl_hep_controller+0x74e>
					//	sv_cntrl_setHepa_dir();
					//	sv_cntrl_activatepump(HEPARINPUMP);
					
					break;
			}
		break;
   95298:	bf00      	nop
   9529a:	e008      	b.n	952ae <cl_hep_controller+0x74e>
			break;
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
			break;
		}
		break;
   9529c:	bf00      	nop
   9529e:	e006      	b.n	952ae <cl_hep_controller+0x74e>
// 			break;
// 			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
// 			cl_hep_deliveryrate = data;
// 			break;
		}
		break;
   952a0:	bf00      	nop
   952a2:	e004      	b.n	952ae <cl_hep_controller+0x74e>
			break;
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
			break;
		}
		break;
   952a4:	bf00      	nop
   952a6:	e002      	b.n	952ae <cl_hep_controller+0x74e>
			cl_hep_seconds = 0;
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
			hp_State = CL_HEP_STATE_IDLE;
			break;
		}
		break;
   952a8:	bf00      	nop
   952aa:	e000      	b.n	952ae <cl_hep_controller+0x74e>
		    	cl_hep_bolus_start();
				 hp_State = CL_HEP_STATE_BOLUS_ON;
				 break;
			}
		
		break;
   952ac:	bf00      	nop

		case	CL_HEP_STATE_COMPLETED:
		break;
		default: break;
	}
return CL_OK;	
   952ae:	2300      	movs	r3, #0
   952b0:	4618      	mov	r0, r3
   952b2:	3710      	adds	r7, #16
   952b4:	46bd      	mov	sp, r7
   952b6:	bd80      	pop	{r7, pc}
   952b8:	0009b369 	.word	0x0009b369
   952bc:	20071c0d 	.word	0x20071c0d
   952c0:	00083cc1 	.word	0x00083cc1
   952c4:	20071c14 	.word	0x20071c14
   952c8:	0009b439 	.word	0x0009b439
   952cc:	0009b32d 	.word	0x0009b32d
   952d0:	0009421d 	.word	0x0009421d
   952d4:	0009b461 	.word	0x0009b461
   952d8:	20070bf4 	.word	0x20070bf4
   952dc:	00095351 	.word	0x00095351

000952e0 <cl_hep_pumpFeedback_start>:
Cl_Uint16Type temparray[35];
Cl_Uint16Type icont = 0;
extern Cl_Uint32Type hep_fblower , hep_fbupper;
//static Cl_Uint16Type counter = 0;
Cl_ReturnCodeType cl_hep_pumpFeedback_start(void)
{
   952e0:	b480      	push	{r7}
   952e2:	af00      	add	r7, sp, #0
	cl_hep_pump_state = CL_HEP_P_STATE_STARTED;
   952e4:	4b05      	ldr	r3, [pc, #20]	; (952fc <cl_hep_pumpFeedback_start+0x1c>)
   952e6:	2203      	movs	r2, #3
   952e8:	701a      	strb	r2, [r3, #0]
	hep_rotation_counter=0;
   952ea:	4b05      	ldr	r3, [pc, #20]	; (95300 <cl_hep_pumpFeedback_start+0x20>)
   952ec:	2200      	movs	r2, #0
   952ee:	801a      	strh	r2, [r3, #0]
	return 0;
   952f0:	2300      	movs	r3, #0
}
   952f2:	4618      	mov	r0, r3
   952f4:	46bd      	mov	sp, r7
   952f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   952fa:	4770      	bx	lr
   952fc:	20071c1a 	.word	0x20071c1a
   95300:	20071c26 	.word	0x20071c26

00095304 <cl_hep_selftest_start>:


Cl_ReturnCodeType cl_hep_selftest_start(void)
{
   95304:	b480      	push	{r7}
   95306:	af00      	add	r7, sp, #0
	cl_hep_pump_state = CL_HEP_SELFTEST;
   95308:	4b07      	ldr	r3, [pc, #28]	; (95328 <cl_hep_selftest_start+0x24>)
   9530a:	220d      	movs	r2, #13
   9530c:	701a      	strb	r2, [r3, #0]
	hep_periodvalue =0;
   9530e:	4b07      	ldr	r3, [pc, #28]	; (9532c <cl_hep_selftest_start+0x28>)
   95310:	2200      	movs	r2, #0
   95312:	801a      	strh	r2, [r3, #0]
	twentymscounter = 0;
   95314:	4b06      	ldr	r3, [pc, #24]	; (95330 <cl_hep_selftest_start+0x2c>)
   95316:	2200      	movs	r2, #0
   95318:	801a      	strh	r2, [r3, #0]
	return 0;
   9531a:	2300      	movs	r3, #0
}
   9531c:	4618      	mov	r0, r3
   9531e:	46bd      	mov	sp, r7
   95320:	f85d 7b04 	ldr.w	r7, [sp], #4
   95324:	4770      	bx	lr
   95326:	bf00      	nop
   95328:	20071c1a 	.word	0x20071c1a
   9532c:	20071b16 	.word	0x20071b16
   95330:	20071c1c 	.word	0x20071c1c

00095334 <cl_hep_selftest_stop>:

Cl_ReturnCodeType cl_hep_selftest_stop(void)
{
   95334:	b480      	push	{r7}
   95336:	af00      	add	r7, sp, #0
	cl_hep_pump_state = CL_HEP_P_STATE_IDLE;
   95338:	4b04      	ldr	r3, [pc, #16]	; (9534c <cl_hep_selftest_stop+0x18>)
   9533a:	2200      	movs	r2, #0
   9533c:	701a      	strb	r2, [r3, #0]
	return 0;
   9533e:	2300      	movs	r3, #0
}
   95340:	4618      	mov	r0, r3
   95342:	46bd      	mov	sp, r7
   95344:	f85d 7b04 	ldr.w	r7, [sp], #4
   95348:	4770      	bx	lr
   9534a:	bf00      	nop
   9534c:	20071c1a 	.word	0x20071c1a

00095350 <cl_hep_bolus_start>:

Cl_ReturnCodeType cl_hep_bolus_start(void)
{
   95350:	b480      	push	{r7}
   95352:	af00      	add	r7, sp, #0
	cl_hep_pump_state = CL_HEP_BOLUS;
   95354:	4b05      	ldr	r3, [pc, #20]	; (9536c <cl_hep_bolus_start+0x1c>)
   95356:	220e      	movs	r2, #14
   95358:	701a      	strb	r2, [r3, #0]
	hep_rotation_counter=0;
   9535a:	4b05      	ldr	r3, [pc, #20]	; (95370 <cl_hep_bolus_start+0x20>)
   9535c:	2200      	movs	r2, #0
   9535e:	801a      	strh	r2, [r3, #0]
	return 0;
   95360:	2300      	movs	r3, #0
	
}
   95362:	4618      	mov	r0, r3
   95364:	46bd      	mov	sp, r7
   95366:	f85d 7b04 	ldr.w	r7, [sp], #4
   9536a:	4770      	bx	lr
   9536c:	20071c1a 	.word	0x20071c1a
   95370:	20071c26 	.word	0x20071c26

00095374 <cl_hep_pumpFeedback_stop>:
	cl_hep_pump_state = CL_HEP_P_STATE_IDLE;
	return 0;
	
}
Cl_ReturnCodeType cl_hep_pumpFeedback_stop(void)
{
   95374:	b480      	push	{r7}
   95376:	af00      	add	r7, sp, #0
	
		cl_hep_pump_state = CL_HEP_P_STATE_IDLE;
   95378:	4b04      	ldr	r3, [pc, #16]	; (9538c <cl_hep_pumpFeedback_stop+0x18>)
   9537a:	2200      	movs	r2, #0
   9537c:	701a      	strb	r2, [r3, #0]
	return 0;
   9537e:	2300      	movs	r3, #0
}
   95380:	4618      	mov	r0, r3
   95382:	46bd      	mov	sp, r7
   95384:	f85d 7b04 	ldr.w	r7, [sp], #4
   95388:	4770      	bx	lr
   9538a:	bf00      	nop
   9538c:	20071c1a 	.word	0x20071c1a

00095390 <cl_hep_pumpFeedback_get_state>:
Cl_ReturnCodeType cl_hep_pumpFeedback_get_state(cl_hep_pump_states* pstate)
{
   95390:	b480      	push	{r7}
   95392:	b083      	sub	sp, #12
   95394:	af00      	add	r7, sp, #0
   95396:	6078      	str	r0, [r7, #4]
	*pstate = cl_hep_pump_state;
   95398:	4b05      	ldr	r3, [pc, #20]	; (953b0 <cl_hep_pumpFeedback_get_state+0x20>)
   9539a:	781a      	ldrb	r2, [r3, #0]
   9539c:	687b      	ldr	r3, [r7, #4]
   9539e:	701a      	strb	r2, [r3, #0]
	return 0;
   953a0:	2300      	movs	r3, #0
}
   953a2:	4618      	mov	r0, r3
   953a4:	370c      	adds	r7, #12
   953a6:	46bd      	mov	sp, r7
   953a8:	f85d 7b04 	ldr.w	r7, [sp], #4
   953ac:	4770      	bx	lr
   953ae:	bf00      	nop
   953b0:	20071c1a 	.word	0x20071c1a

000953b4 <cl_hep_pumpFeedback_get_delta>:
Cl_ReturnCodeType cl_hep_pumpFeedback_get_delta(int16_t* pdelta)
{
   953b4:	b480      	push	{r7}
   953b6:	b083      	sub	sp, #12
   953b8:	af00      	add	r7, sp, #0
   953ba:	6078      	str	r0, [r7, #4]
	*pdelta = hep_period - hep_expected_period;
   953bc:	4b07      	ldr	r3, [pc, #28]	; (953dc <cl_hep_pumpFeedback_get_delta+0x28>)
   953be:	881a      	ldrh	r2, [r3, #0]
   953c0:	4b07      	ldr	r3, [pc, #28]	; (953e0 <cl_hep_pumpFeedback_get_delta+0x2c>)
   953c2:	881b      	ldrh	r3, [r3, #0]
   953c4:	1ad3      	subs	r3, r2, r3
   953c6:	b29b      	uxth	r3, r3
   953c8:	b29a      	uxth	r2, r3
   953ca:	687b      	ldr	r3, [r7, #4]
   953cc:	801a      	strh	r2, [r3, #0]
	return 0;
   953ce:	2300      	movs	r3, #0
}
   953d0:	4618      	mov	r0, r3
   953d2:	370c      	adds	r7, #12
   953d4:	46bd      	mov	sp, r7
   953d6:	f85d 7b04 	ldr.w	r7, [sp], #4
   953da:	4770      	bx	lr
   953dc:	20071c1e 	.word	0x20071c1e
   953e0:	20071c18 	.word	0x20071c18

000953e4 <cl_hep_pumpFeedback_timer>:
	hep_expected_period = period;
	return 0;
}

Cl_ReturnCodeType cl_hep_pumpFeedback_timer(void) // 20 ms clock
{
   953e4:	b580      	push	{r7, lr}
   953e6:	af00      	add	r7, sp, #0
	
	if(cl_hep_pump_state != CL_HEP_P_STATE_IDLE)
   953e8:	4b68      	ldr	r3, [pc, #416]	; (9558c <cl_hep_pumpFeedback_timer+0x1a8>)
   953ea:	781b      	ldrb	r3, [r3, #0]
   953ec:	2b00      	cmp	r3, #0
   953ee:	f000 80ca 	beq.w	95586 <cl_hep_pumpFeedback_timer+0x1a2>
	{
		
	
		Cl_SysStat_GetSensor_Status_Query(SENSOR_HP_FB, &hep_rotataion_marker);
   953f2:	201b      	movs	r0, #27
   953f4:	4966      	ldr	r1, [pc, #408]	; (95590 <cl_hep_pumpFeedback_timer+0x1ac>)
   953f6:	4b67      	ldr	r3, [pc, #412]	; (95594 <cl_hep_pumpFeedback_timer+0x1b0>)
   953f8:	4798      	blx	r3

		twentymscounter++;
   953fa:	4b67      	ldr	r3, [pc, #412]	; (95598 <cl_hep_pumpFeedback_timer+0x1b4>)
   953fc:	881b      	ldrh	r3, [r3, #0]
   953fe:	3301      	adds	r3, #1
   95400:	b29a      	uxth	r2, r3
   95402:	4b65      	ldr	r3, [pc, #404]	; (95598 <cl_hep_pumpFeedback_timer+0x1b4>)
   95404:	801a      	strh	r2, [r3, #0]
		temptwentycounter++;
   95406:	4b65      	ldr	r3, [pc, #404]	; (9559c <cl_hep_pumpFeedback_timer+0x1b8>)
   95408:	881b      	ldrh	r3, [r3, #0]
   9540a:	3301      	adds	r3, #1
   9540c:	b29a      	uxth	r2, r3
   9540e:	4b63      	ldr	r3, [pc, #396]	; (9559c <cl_hep_pumpFeedback_timer+0x1b8>)
   95410:	801a      	strh	r2, [r3, #0]
				
				if(hep_rotataion_marker == 1){
   95412:	4b5f      	ldr	r3, [pc, #380]	; (95590 <cl_hep_pumpFeedback_timer+0x1ac>)
   95414:	881b      	ldrh	r3, [r3, #0]
   95416:	2b01      	cmp	r3, #1
   95418:	d13b      	bne.n	95492 <cl_hep_pumpFeedback_timer+0xae>
					
					if(prevhep == 0){
   9541a:	4b61      	ldr	r3, [pc, #388]	; (955a0 <cl_hep_pumpFeedback_timer+0x1bc>)
   9541c:	881b      	ldrh	r3, [r3, #0]
   9541e:	2b00      	cmp	r3, #0
   95420:	d134      	bne.n	9548c <cl_hep_pumpFeedback_timer+0xa8>
						
						newhep_period = temptwentycounter*100 ;
   95422:	4b5e      	ldr	r3, [pc, #376]	; (9559c <cl_hep_pumpFeedback_timer+0x1b8>)
   95424:	881b      	ldrh	r3, [r3, #0]
   95426:	461a      	mov	r2, r3
   95428:	0092      	lsls	r2, r2, #2
   9542a:	4413      	add	r3, r2
   9542c:	461a      	mov	r2, r3
   9542e:	0091      	lsls	r1, r2, #2
   95430:	461a      	mov	r2, r3
   95432:	460b      	mov	r3, r1
   95434:	4413      	add	r3, r2
   95436:	009b      	lsls	r3, r3, #2
   95438:	b29a      	uxth	r2, r3
   9543a:	4b5a      	ldr	r3, [pc, #360]	; (955a4 <cl_hep_pumpFeedback_timer+0x1c0>)
   9543c:	801a      	strh	r2, [r3, #0]
							icont = 0;
						}
						icont++;
				*/
			
							if((cl_hep_pump_state == CL_HEP_P_STATE_STARTED))
   9543e:	4b53      	ldr	r3, [pc, #332]	; (9558c <cl_hep_pumpFeedback_timer+0x1a8>)
   95440:	781b      	ldrb	r3, [r3, #0]
   95442:	2b03      	cmp	r3, #3
   95444:	d11e      	bne.n	95484 <cl_hep_pumpFeedback_timer+0xa0>
							{
								
								if(newhep_period < 200){
   95446:	4b57      	ldr	r3, [pc, #348]	; (955a4 <cl_hep_pumpFeedback_timer+0x1c0>)
   95448:	881b      	ldrh	r3, [r3, #0]
   9544a:	2bc7      	cmp	r3, #199	; 0xc7
   9544c:	d803      	bhi.n	95456 <cl_hep_pumpFeedback_timer+0x72>
									
									Cl_Alarm_TriggerAlarm(HP_UNDERRUN,1);
   9544e:	2035      	movs	r0, #53	; 0x35
   95450:	2101      	movs	r1, #1
   95452:	4b55      	ldr	r3, [pc, #340]	; (955a8 <cl_hep_pumpFeedback_timer+0x1c4>)
   95454:	4798      	blx	r3
								}
								
								if((newhep_period > hep_fbupper))
   95456:	4b53      	ldr	r3, [pc, #332]	; (955a4 <cl_hep_pumpFeedback_timer+0x1c0>)
   95458:	881b      	ldrh	r3, [r3, #0]
   9545a:	461a      	mov	r2, r3
   9545c:	4b53      	ldr	r3, [pc, #332]	; (955ac <cl_hep_pumpFeedback_timer+0x1c8>)
   9545e:	681b      	ldr	r3, [r3, #0]
   95460:	429a      	cmp	r2, r3
   95462:	d904      	bls.n	9546e <cl_hep_pumpFeedback_timer+0x8a>
								{
									
									//	cl_hep_pump_state = CL_HEP_P_STATE_RUNNING_SLOW;
									Cl_Alarm_TriggerAlarm(HP_UNDERRUN,1);
   95464:	2035      	movs	r0, #53	; 0x35
   95466:	2101      	movs	r1, #1
   95468:	4b4f      	ldr	r3, [pc, #316]	; (955a8 <cl_hep_pumpFeedback_timer+0x1c4>)
   9546a:	4798      	blx	r3
   9546c:	e00a      	b.n	95484 <cl_hep_pumpFeedback_timer+0xa0>
								}
								else if((newhep_period < hep_fblower))
   9546e:	4b4d      	ldr	r3, [pc, #308]	; (955a4 <cl_hep_pumpFeedback_timer+0x1c0>)
   95470:	881b      	ldrh	r3, [r3, #0]
   95472:	461a      	mov	r2, r3
   95474:	4b4e      	ldr	r3, [pc, #312]	; (955b0 <cl_hep_pumpFeedback_timer+0x1cc>)
   95476:	681b      	ldr	r3, [r3, #0]
   95478:	429a      	cmp	r2, r3
   9547a:	d203      	bcs.n	95484 <cl_hep_pumpFeedback_timer+0xa0>
								{
									//	cl_hep_pump_state = CL_HEP_P_STATE_RUNNING_FAST;
									Cl_Alarm_TriggerAlarm(HP_OVERRUN,1);
   9547c:	2034      	movs	r0, #52	; 0x34
   9547e:	2101      	movs	r1, #1
   95480:	4b49      	ldr	r3, [pc, #292]	; (955a8 <cl_hep_pumpFeedback_timer+0x1c4>)
   95482:	4798      	blx	r3
							}

			
			
			
						temptwentycounter = 0;
   95484:	4b45      	ldr	r3, [pc, #276]	; (9559c <cl_hep_pumpFeedback_timer+0x1b8>)
   95486:	2200      	movs	r2, #0
   95488:	801a      	strh	r2, [r3, #0]
   9548a:	e002      	b.n	95492 <cl_hep_pumpFeedback_timer+0xae>
						
					}
					else{
						temptwentycounter = 0;
   9548c:	4b43      	ldr	r3, [pc, #268]	; (9559c <cl_hep_pumpFeedback_timer+0x1b8>)
   9548e:	2200      	movs	r2, #0
   95490:	801a      	strh	r2, [r3, #0]
					}
					
				}
					
				prevhep = hep_rotataion_marker ;
   95492:	4b3f      	ldr	r3, [pc, #252]	; (95590 <cl_hep_pumpFeedback_timer+0x1ac>)
   95494:	881a      	ldrh	r2, [r3, #0]
   95496:	4b42      	ldr	r3, [pc, #264]	; (955a0 <cl_hep_pumpFeedback_timer+0x1bc>)
   95498:	801a      	strh	r2, [r3, #0]
// 		{
// 			cl_hep_pump_state = CL_HEP_P_STATE_RUNNING;
//  		}


		if(count_state == false)
   9549a:	4b46      	ldr	r3, [pc, #280]	; (955b4 <cl_hep_pumpFeedback_timer+0x1d0>)
   9549c:	781b      	ldrb	r3, [r3, #0]
   9549e:	f083 0301 	eor.w	r3, r3, #1
   954a2:	b2db      	uxtb	r3, r3
   954a4:	2b00      	cmp	r3, #0
   954a6:	d010      	beq.n	954ca <cl_hep_pumpFeedback_timer+0xe6>
		{
			if(hep_rotataion_marker == 0 )
   954a8:	4b39      	ldr	r3, [pc, #228]	; (95590 <cl_hep_pumpFeedback_timer+0x1ac>)
   954aa:	881b      	ldrh	r3, [r3, #0]
   954ac:	2b00      	cmp	r3, #0
   954ae:	d166      	bne.n	9557e <cl_hep_pumpFeedback_timer+0x19a>
			{
				if(prev_hep_rotataion_marker != hep_rotataion_marker)
   954b0:	4b41      	ldr	r3, [pc, #260]	; (955b8 <cl_hep_pumpFeedback_timer+0x1d4>)
   954b2:	881a      	ldrh	r2, [r3, #0]
   954b4:	4b36      	ldr	r3, [pc, #216]	; (95590 <cl_hep_pumpFeedback_timer+0x1ac>)
   954b6:	881b      	ldrh	r3, [r3, #0]
   954b8:	429a      	cmp	r2, r3
   954ba:	d060      	beq.n	9557e <cl_hep_pumpFeedback_timer+0x19a>
				{
					count_state = true;
   954bc:	4b3d      	ldr	r3, [pc, #244]	; (955b4 <cl_hep_pumpFeedback_timer+0x1d0>)
   954be:	2201      	movs	r2, #1
   954c0:	701a      	strb	r2, [r3, #0]
					//hep_rotation_counter++;
					twentymscounter = 0;
   954c2:	4b35      	ldr	r3, [pc, #212]	; (95598 <cl_hep_pumpFeedback_timer+0x1b4>)
   954c4:	2200      	movs	r2, #0
   954c6:	801a      	strh	r2, [r3, #0]
   954c8:	e059      	b.n	9557e <cl_hep_pumpFeedback_timer+0x19a>
				}
			}
		}
		else
		{
			if(hep_rotataion_marker == 0 )
   954ca:	4b31      	ldr	r3, [pc, #196]	; (95590 <cl_hep_pumpFeedback_timer+0x1ac>)
   954cc:	881b      	ldrh	r3, [r3, #0]
   954ce:	2b00      	cmp	r3, #0
   954d0:	d155      	bne.n	9557e <cl_hep_pumpFeedback_timer+0x19a>
			{
				if(prev_hep_rotataion_marker != hep_rotataion_marker)
   954d2:	4b39      	ldr	r3, [pc, #228]	; (955b8 <cl_hep_pumpFeedback_timer+0x1d4>)
   954d4:	881a      	ldrh	r2, [r3, #0]
   954d6:	4b2e      	ldr	r3, [pc, #184]	; (95590 <cl_hep_pumpFeedback_timer+0x1ac>)
   954d8:	881b      	ldrh	r3, [r3, #0]
   954da:	429a      	cmp	r2, r3
   954dc:	d04f      	beq.n	9557e <cl_hep_pumpFeedback_timer+0x19a>
				{
					count_state = true;
   954de:	4b35      	ldr	r3, [pc, #212]	; (955b4 <cl_hep_pumpFeedback_timer+0x1d0>)
   954e0:	2201      	movs	r2, #1
   954e2:	701a      	strb	r2, [r3, #0]
					hep_rotation_counter++;
   954e4:	4b35      	ldr	r3, [pc, #212]	; (955bc <cl_hep_pumpFeedback_timer+0x1d8>)
   954e6:	881b      	ldrh	r3, [r3, #0]
   954e8:	3301      	adds	r3, #1
   954ea:	b29a      	uxth	r2, r3
   954ec:	4b33      	ldr	r3, [pc, #204]	; (955bc <cl_hep_pumpFeedback_timer+0x1d8>)
   954ee:	801a      	strh	r2, [r3, #0]
					
					hep_period =(twentymscounter*100);
   954f0:	4b29      	ldr	r3, [pc, #164]	; (95598 <cl_hep_pumpFeedback_timer+0x1b4>)
   954f2:	881b      	ldrh	r3, [r3, #0]
   954f4:	461a      	mov	r2, r3
   954f6:	0092      	lsls	r2, r2, #2
   954f8:	4413      	add	r3, r2
   954fa:	461a      	mov	r2, r3
   954fc:	0091      	lsls	r1, r2, #2
   954fe:	461a      	mov	r2, r3
   95500:	460b      	mov	r3, r1
   95502:	4413      	add	r3, r2
   95504:	009b      	lsls	r3, r3, #2
   95506:	b29a      	uxth	r2, r3
   95508:	4b2d      	ldr	r3, [pc, #180]	; (955c0 <cl_hep_pumpFeedback_timer+0x1dc>)
   9550a:	801a      	strh	r2, [r3, #0]
					
					if(cl_hep_pump_state==CL_HEP_BOLUS)
   9550c:	4b1f      	ldr	r3, [pc, #124]	; (9558c <cl_hep_pumpFeedback_timer+0x1a8>)
   9550e:	781b      	ldrb	r3, [r3, #0]
   95510:	2b0e      	cmp	r3, #14
   95512:	d10f      	bne.n	95534 <cl_hep_pumpFeedback_timer+0x150>
					{
						
				
					if (hep_rotation_counter >= cl_hep_bolus_count_rate)
   95514:	4b29      	ldr	r3, [pc, #164]	; (955bc <cl_hep_pumpFeedback_timer+0x1d8>)
   95516:	881a      	ldrh	r2, [r3, #0]
   95518:	4b2a      	ldr	r3, [pc, #168]	; (955c4 <cl_hep_pumpFeedback_timer+0x1e0>)
   9551a:	881b      	ldrh	r3, [r3, #0]
   9551c:	429a      	cmp	r2, r3
   9551e:	d309      	bcc.n	95534 <cl_hep_pumpFeedback_timer+0x150>
					
					{
						cl_hep_controller(CL_HEP_EVENT_STOP_BOLUS,0);
   95520:	200a      	movs	r0, #10
   95522:	2100      	movs	r1, #0
   95524:	4b28      	ldr	r3, [pc, #160]	; (955c8 <cl_hep_pumpFeedback_timer+0x1e4>)
   95526:	4798      	blx	r3
						hep_rotation_counter=0;
   95528:	4b24      	ldr	r3, [pc, #144]	; (955bc <cl_hep_pumpFeedback_timer+0x1d8>)
   9552a:	2200      	movs	r2, #0
   9552c:	801a      	strh	r2, [r3, #0]
						hep_selftest_rotation_counter = 0;
   9552e:	4b27      	ldr	r3, [pc, #156]	; (955cc <cl_hep_pumpFeedback_timer+0x1e8>)
   95530:	2200      	movs	r2, #0
   95532:	801a      	strh	r2, [r3, #0]
					}
					}
					if(cl_hep_pump_state == CL_HEP_SELFTEST)
   95534:	4b15      	ldr	r3, [pc, #84]	; (9558c <cl_hep_pumpFeedback_timer+0x1a8>)
   95536:	781b      	ldrb	r3, [r3, #0]
   95538:	2b0d      	cmp	r3, #13
   9553a:	d113      	bne.n	95564 <cl_hep_pumpFeedback_timer+0x180>
					{							
						hep_selftest_rotation_counter++;
   9553c:	4b23      	ldr	r3, [pc, #140]	; (955cc <cl_hep_pumpFeedback_timer+0x1e8>)
   9553e:	881b      	ldrh	r3, [r3, #0]
   95540:	3301      	adds	r3, #1
   95542:	b29a      	uxth	r2, r3
   95544:	4b21      	ldr	r3, [pc, #132]	; (955cc <cl_hep_pumpFeedback_timer+0x1e8>)
   95546:	801a      	strh	r2, [r3, #0]
						
						if (hep_selftest_rotation_counter >= 4)
   95548:	4b20      	ldr	r3, [pc, #128]	; (955cc <cl_hep_pumpFeedback_timer+0x1e8>)
   9554a:	881b      	ldrh	r3, [r3, #0]
   9554c:	2b03      	cmp	r3, #3
   9554e:	d909      	bls.n	95564 <cl_hep_pumpFeedback_timer+0x180>
						{
							
							hep_periodvalue = hep_period;
   95550:	4b1b      	ldr	r3, [pc, #108]	; (955c0 <cl_hep_pumpFeedback_timer+0x1dc>)
   95552:	881a      	ldrh	r2, [r3, #0]
   95554:	4b1e      	ldr	r3, [pc, #120]	; (955d0 <cl_hep_pumpFeedback_timer+0x1ec>)
   95556:	801a      	strh	r2, [r3, #0]
							hep_selftest_rotation_counter = 0;
   95558:	4b1c      	ldr	r3, [pc, #112]	; (955cc <cl_hep_pumpFeedback_timer+0x1e8>)
   9555a:	2200      	movs	r2, #0
   9555c:	801a      	strh	r2, [r3, #0]
							twentymscounter = 0;
   9555e:	4b0e      	ldr	r3, [pc, #56]	; (95598 <cl_hep_pumpFeedback_timer+0x1b4>)
   95560:	2200      	movs	r2, #0
   95562:	801a      	strh	r2, [r3, #0]
						//	cl_hep_pump_state = CL_HEP_P_STATE_STARTED;//CL_HEP_P_STATE_RUNNING_NORMAL;
						}
					}
*/
				
					hep_freq_in_min  = ( 60000) / hep_period;
   95564:	4b16      	ldr	r3, [pc, #88]	; (955c0 <cl_hep_pumpFeedback_timer+0x1dc>)
   95566:	881b      	ldrh	r3, [r3, #0]
   95568:	461a      	mov	r2, r3
   9556a:	f64e 2360 	movw	r3, #60000	; 0xea60
   9556e:	fb93 f3f2 	sdiv	r3, r3, r2
   95572:	b29a      	uxth	r2, r3
   95574:	4b17      	ldr	r3, [pc, #92]	; (955d4 <cl_hep_pumpFeedback_timer+0x1f0>)
   95576:	801a      	strh	r2, [r3, #0]
					twentymscounter = 0;
   95578:	4b07      	ldr	r3, [pc, #28]	; (95598 <cl_hep_pumpFeedback_timer+0x1b4>)
   9557a:	2200      	movs	r2, #0
   9557c:	801a      	strh	r2, [r3, #0]
				
				}
			}
		
		}
		prev_hep_rotataion_marker = hep_rotataion_marker;
   9557e:	4b04      	ldr	r3, [pc, #16]	; (95590 <cl_hep_pumpFeedback_timer+0x1ac>)
   95580:	881a      	ldrh	r2, [r3, #0]
   95582:	4b0d      	ldr	r3, [pc, #52]	; (955b8 <cl_hep_pumpFeedback_timer+0x1d4>)
   95584:	801a      	strh	r2, [r3, #0]
	
	}
	
	 return 0;
   95586:	2300      	movs	r3, #0
}
   95588:	4618      	mov	r0, r3
   9558a:	bd80      	pop	{r7, pc}
   9558c:	20071c1a 	.word	0x20071c1a
   95590:	20070bf8 	.word	0x20070bf8
   95594:	0008fd69 	.word	0x0008fd69
   95598:	20071c1c 	.word	0x20071c1c
   9559c:	20071c22 	.word	0x20071c22
   955a0:	20070bfc 	.word	0x20070bfc
   955a4:	20071c24 	.word	0x20071c24
   955a8:	00082c75 	.word	0x00082c75
   955ac:	2007231c 	.word	0x2007231c
   955b0:	20072320 	.word	0x20072320
   955b4:	20071c2a 	.word	0x20071c2a
   955b8:	20070bfa 	.word	0x20070bfa
   955bc:	20071c26 	.word	0x20071c26
   955c0:	20071c1e 	.word	0x20071c1e
   955c4:	20070bfe 	.word	0x20070bfe
   955c8:	00094b61 	.word	0x00094b61
   955cc:	20071c28 	.word	0x20071c28
   955d0:	20071b16 	.word	0x20071b16
   955d4:	20071c20 	.word	0x20071c20

000955d8 <cl_hep_pump_enddetction_timer>:



//Cl_ReturnCodeType cl_hep_pump_enddetction_timer(void) // 20 ms clock
Cl_ReturnCodeType cl_hep_pump_enddetction_timer(void) // 100 ms clock
{
   955d8:	b580      	push	{r7, lr}
   955da:	af00      	add	r7, sp, #0
		// START END  DETECTION
		{
			Cl_SysStat_GetSensor_Status_Query(SENSOR_HP_START,&hp_start_status);
   955dc:	2017      	movs	r0, #23
   955de:	4920      	ldr	r1, [pc, #128]	; (95660 <cl_hep_pump_enddetction_timer+0x88>)
   955e0:	4b20      	ldr	r3, [pc, #128]	; (95664 <cl_hep_pump_enddetction_timer+0x8c>)
   955e2:	4798      	blx	r3
			
			if(	prev_hp_start_status != hp_start_status)
   955e4:	4b20      	ldr	r3, [pc, #128]	; (95668 <cl_hep_pump_enddetction_timer+0x90>)
   955e6:	881a      	ldrh	r2, [r3, #0]
   955e8:	4b1d      	ldr	r3, [pc, #116]	; (95660 <cl_hep_pump_enddetction_timer+0x88>)
   955ea:	881b      	ldrh	r3, [r3, #0]
   955ec:	429a      	cmp	r2, r3
   955ee:	d00c      	beq.n	9560a <cl_hep_pump_enddetction_timer+0x32>
			{
				prev_hp_start_status = hp_start_status;
   955f0:	4b1b      	ldr	r3, [pc, #108]	; (95660 <cl_hep_pump_enddetction_timer+0x88>)
   955f2:	881a      	ldrh	r2, [r3, #0]
   955f4:	4b1c      	ldr	r3, [pc, #112]	; (95668 <cl_hep_pump_enddetction_timer+0x90>)
   955f6:	801a      	strh	r2, [r3, #0]
				if(hp_start_status == 0)
   955f8:	4b19      	ldr	r3, [pc, #100]	; (95660 <cl_hep_pump_enddetction_timer+0x88>)
   955fa:	881b      	ldrh	r3, [r3, #0]
   955fc:	2b00      	cmp	r3, #0
   955fe:	d10c      	bne.n	9561a <cl_hep_pump_enddetction_timer+0x42>
				{
						cl_hep_controller(CL_HEP_EVENT_RIGHT_END_REACHED , 0);
   95600:	2003      	movs	r0, #3
   95602:	2100      	movs	r1, #0
   95604:	4b19      	ldr	r3, [pc, #100]	; (9566c <cl_hep_pump_enddetction_timer+0x94>)
   95606:	4798      	blx	r3
   95608:	e007      	b.n	9561a <cl_hep_pump_enddetction_timer+0x42>
						//sv_cntrl_resetHepa_dir();
						//	sv_cntrl_setHepa_dir();
					
				}
			}
				else if(hp_start_status == 0)
   9560a:	4b15      	ldr	r3, [pc, #84]	; (95660 <cl_hep_pump_enddetction_timer+0x88>)
   9560c:	881b      	ldrh	r3, [r3, #0]
   9560e:	2b00      	cmp	r3, #0
   95610:	d103      	bne.n	9561a <cl_hep_pump_enddetction_timer+0x42>
				{
					cl_hep_controller(CL_HEP_EVENT_AT_RIGHT_END , 0); // here the information that we are at right end is sent to the controller.
   95612:	2013      	movs	r0, #19
   95614:	2100      	movs	r1, #0
   95616:	4b15      	ldr	r3, [pc, #84]	; (9566c <cl_hep_pump_enddetction_timer+0x94>)
   95618:	4798      	blx	r3
				}
				



			Cl_SysStat_GetSensor_Status_Query(SENSOR_HP_END,&hp_end_status);
   9561a:	2018      	movs	r0, #24
   9561c:	4914      	ldr	r1, [pc, #80]	; (95670 <cl_hep_pump_enddetction_timer+0x98>)
   9561e:	4b11      	ldr	r3, [pc, #68]	; (95664 <cl_hep_pump_enddetction_timer+0x8c>)
   95620:	4798      	blx	r3
			
			
			if(	prev_hp_end_status != hp_end_status)
   95622:	4b14      	ldr	r3, [pc, #80]	; (95674 <cl_hep_pump_enddetction_timer+0x9c>)
   95624:	881a      	ldrh	r2, [r3, #0]
   95626:	4b12      	ldr	r3, [pc, #72]	; (95670 <cl_hep_pump_enddetction_timer+0x98>)
   95628:	881b      	ldrh	r3, [r3, #0]
   9562a:	429a      	cmp	r2, r3
   9562c:	d00c      	beq.n	95648 <cl_hep_pump_enddetction_timer+0x70>
			{
				prev_hp_end_status = hp_end_status;
   9562e:	4b10      	ldr	r3, [pc, #64]	; (95670 <cl_hep_pump_enddetction_timer+0x98>)
   95630:	881a      	ldrh	r2, [r3, #0]
   95632:	4b10      	ldr	r3, [pc, #64]	; (95674 <cl_hep_pump_enddetction_timer+0x9c>)
   95634:	801a      	strh	r2, [r3, #0]
				if(hp_end_status == 0)
   95636:	4b0e      	ldr	r3, [pc, #56]	; (95670 <cl_hep_pump_enddetction_timer+0x98>)
   95638:	881b      	ldrh	r3, [r3, #0]
   9563a:	2b00      	cmp	r3, #0
   9563c:	d10c      	bne.n	95658 <cl_hep_pump_enddetction_timer+0x80>
				{
					cl_hep_controller(CL_HEP_EVENT_LEFT_END_REACHED , 0);
   9563e:	2002      	movs	r0, #2
   95640:	2100      	movs	r1, #0
   95642:	4b0a      	ldr	r3, [pc, #40]	; (9566c <cl_hep_pump_enddetction_timer+0x94>)
   95644:	4798      	blx	r3
   95646:	e007      	b.n	95658 <cl_hep_pump_enddetction_timer+0x80>
					
					//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_END",8);
					//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hp_end_status,1);
				}
			}
			else if(hp_end_status == 0)
   95648:	4b09      	ldr	r3, [pc, #36]	; (95670 <cl_hep_pump_enddetction_timer+0x98>)
   9564a:	881b      	ldrh	r3, [r3, #0]
   9564c:	2b00      	cmp	r3, #0
   9564e:	d103      	bne.n	95658 <cl_hep_pump_enddetction_timer+0x80>
			{
				cl_hep_controller(CL_HEP_EVENT_AT_LEFT_END , 0);
   95650:	2012      	movs	r0, #18
   95652:	2100      	movs	r1, #0
   95654:	4b05      	ldr	r3, [pc, #20]	; (9566c <cl_hep_pump_enddetction_timer+0x94>)
   95656:	4798      	blx	r3
			
		}
			
		
		
		return 0;
   95658:	2300      	movs	r3, #0
   9565a:	4618      	mov	r0, r3
   9565c:	bd80      	pop	{r7, pc}
   9565e:	bf00      	nop
   95660:	20071c2c 	.word	0x20071c2c
   95664:	0008fd69 	.word	0x0008fd69
   95668:	20071c2e 	.word	0x20071c2e
   9566c:	00094b61 	.word	0x00094b61
   95670:	20071c30 	.word	0x20071c30
   95674:	20071c32 	.word	0x20071c32

00095678 <cl_level_switchcontroller>:
static InletValvestate_type v1_status = V1_UNDEFINED;
// extern Cl_Uint8Type sv_cntrl_activate_valve(sv_valvetype );
// extern Cl_Uint8Type sv_cntrl_deactivate_valve(sv_valvetype );
extern Cl_BoolType IntakeReadyFlag;
Cl_ReturnCodeType cl_level_switchcontroller(levelswitchcntrl_event_type cntrl_event)
{
   95678:	b580      	push	{r7, lr}
   9567a:	b084      	sub	sp, #16
   9567c:	af00      	add	r7, sp, #0
   9567e:	4603      	mov	r3, r0
   95680:	71fb      	strb	r3, [r7, #7]
	cl_Datastreamtype cl_tdata;
	switch(cntrl_event)
   95682:	79fb      	ldrb	r3, [r7, #7]
   95684:	3b01      	subs	r3, #1
   95686:	2b03      	cmp	r3, #3
   95688:	d862      	bhi.n	95750 <cl_level_switchcontroller+0xd8>
   9568a:	a201      	add	r2, pc, #4	; (adr r2, 95690 <cl_level_switchcontroller+0x18>)
   9568c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   95690:	000956a1 	.word	0x000956a1
   95694:	00095751 	.word	0x00095751
   95698:	00095751 	.word	0x00095751
   9569c:	000956cf 	.word	0x000956cf
	{
		case LEVEL_SWITCH_CNTRLER_EVENT_SEC:
		Cl_AlarmResetAlarm(LEVELSWITCH_ON_TO_OFF);
   956a0:	203e      	movs	r0, #62	; 0x3e
   956a2:	4b2e      	ldr	r3, [pc, #184]	; (9575c <cl_level_switchcontroller+0xe4>)
   956a4:	4798      	blx	r3
		Cl_AlarmResetAlarm(LEVELSWITCH_OFF_TO_ON);
   956a6:	203d      	movs	r0, #61	; 0x3d
   956a8:	4b2c      	ldr	r3, [pc, #176]	; (9575c <cl_level_switchcontroller+0xe4>)
   956aa:	4798      	blx	r3
		Cl_AlarmResetAlarm(LEVEL_SWITCH_LOW_TOGGLERATE);
   956ac:	202d      	movs	r0, #45	; 0x2d
   956ae:	4b2b      	ldr	r3, [pc, #172]	; (9575c <cl_level_switchcontroller+0xe4>)
   956b0:	4798      	blx	r3
		
		toggle_count++;
   956b2:	4b2b      	ldr	r3, [pc, #172]	; (95760 <cl_level_switchcontroller+0xe8>)
   956b4:	881b      	ldrh	r3, [r3, #0]
   956b6:	3301      	adds	r3, #1
   956b8:	b29a      	uxth	r2, r3
   956ba:	4b29      	ldr	r3, [pc, #164]	; (95760 <cl_level_switchcontroller+0xe8>)
   956bc:	801a      	strh	r2, [r3, #0]
												cl_tdata.word = 0;
   956be:	2300      	movs	r3, #0
   956c0:	60fb      	str	r3, [r7, #12]

										
										cl_tdata.Twobyte = toggle_count;
   956c2:	4b27      	ldr	r3, [pc, #156]	; (95760 <cl_level_switchcontroller+0xe8>)
   956c4:	881b      	ldrh	r3, [r3, #0]
   956c6:	81bb      	strh	r3, [r7, #12]
										cl_tdata.bytearray[2] = 21;
   956c8:	2315      	movs	r3, #21
   956ca:	73bb      	strb	r3, [r7, #14]
			// low inlet flow alarm or level switch  malfunction
	//		Cl_Alarm_TriggerAlarm(LEVEL_SWITCH_LOW_TOGGLERATE,1);    commented
		}

	
		break;
   956cc:	e041      	b.n	95752 <cl_level_switchcontroller+0xda>
		case LEVEL_SWITCH_CNTRLER_EVENT_100MS:
		break;
		case LEVEL_SWITCH_CNTRLER_EVENT_10MS:
		break;
		case LEVEL_SWITCH_CNTRLER_EVENT_INSTANT:
		if(Levelswitch_msg.levelswitch_event == LEVEL_SWITCH_EVENT_ON_TO_OFF)
   956ce:	4b25      	ldr	r3, [pc, #148]	; (95764 <cl_level_switchcontroller+0xec>)
   956d0:	781b      	ldrb	r3, [r3, #0]
   956d2:	2b01      	cmp	r3, #1
   956d4:	d11b      	bne.n	9570e <cl_level_switchcontroller+0x96>
		{
			//stop flow
			if(IntakeReadyFlag){
   956d6:	4b24      	ldr	r3, [pc, #144]	; (95768 <cl_level_switchcontroller+0xf0>)
   956d8:	781b      	ldrb	r3, [r3, #0]
   956da:	2b00      	cmp	r3, #0
   956dc:	d003      	beq.n	956e6 <cl_level_switchcontroller+0x6e>
				sv_cntrl_deactivate_valve(VALVE_ID1);
   956de:	2001      	movs	r0, #1
   956e0:	4b22      	ldr	r3, [pc, #136]	; (9576c <cl_level_switchcontroller+0xf4>)
   956e2:	4798      	blx	r3
   956e4:	e033      	b.n	9574e <cl_level_switchcontroller+0xd6>
			}
			else{
				
			
			
			sv_cntrl_deactivate_valve(VALVE_ID1);
   956e6:	2001      	movs	r0, #1
   956e8:	4b20      	ldr	r3, [pc, #128]	; (9576c <cl_level_switchcontroller+0xf4>)
   956ea:	4798      	blx	r3
			Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_UNDEFINED;
   956ec:	4b1d      	ldr	r3, [pc, #116]	; (95764 <cl_level_switchcontroller+0xec>)
   956ee:	2200      	movs	r2, #0
   956f0:	701a      	strb	r2, [r3, #0]
			levelswitch_offtime = 0;
   956f2:	4b1f      	ldr	r3, [pc, #124]	; (95770 <cl_level_switchcontroller+0xf8>)
   956f4:	2200      	movs	r2, #0
   956f6:	801a      	strh	r2, [r3, #0]
			if(v1_status != V1_OFF )
   956f8:	4b1e      	ldr	r3, [pc, #120]	; (95774 <cl_level_switchcontroller+0xfc>)
   956fa:	781b      	ldrb	r3, [r3, #0]
   956fc:	2b02      	cmp	r3, #2
   956fe:	d026      	beq.n	9574e <cl_level_switchcontroller+0xd6>
			{
				toggle_count = 0;
   95700:	4b17      	ldr	r3, [pc, #92]	; (95760 <cl_level_switchcontroller+0xe8>)
   95702:	2200      	movs	r2, #0
   95704:	801a      	strh	r2, [r3, #0]
				v1_status = V1_OFF;
   95706:	4b1b      	ldr	r3, [pc, #108]	; (95774 <cl_level_switchcontroller+0xfc>)
   95708:	2202      	movs	r2, #2
   9570a:	701a      	strb	r2, [r3, #0]
				toggle_count = 0;
				v1_status = V1_ON;
			}
			}
		}
		break;
   9570c:	e021      	b.n	95752 <cl_level_switchcontroller+0xda>
				toggle_count = 0;
				v1_status = V1_OFF;
			}
			}
		}
		else if(Levelswitch_msg.levelswitch_event == LEVEL_SWITCH_EVENT_OFF_TO_ON)
   9570e:	4b15      	ldr	r3, [pc, #84]	; (95764 <cl_level_switchcontroller+0xec>)
   95710:	781b      	ldrb	r3, [r3, #0]
   95712:	2b02      	cmp	r3, #2
   95714:	d11b      	bne.n	9574e <cl_level_switchcontroller+0xd6>
		{
			//start flow
			if(IntakeReadyFlag){
   95716:	4b14      	ldr	r3, [pc, #80]	; (95768 <cl_level_switchcontroller+0xf0>)
   95718:	781b      	ldrb	r3, [r3, #0]
   9571a:	2b00      	cmp	r3, #0
   9571c:	d003      	beq.n	95726 <cl_level_switchcontroller+0xae>
				sv_cntrl_deactivate_valve(VALVE_ID1);
   9571e:	2001      	movs	r0, #1
   95720:	4b12      	ldr	r3, [pc, #72]	; (9576c <cl_level_switchcontroller+0xf4>)
   95722:	4798      	blx	r3
   95724:	e013      	b.n	9574e <cl_level_switchcontroller+0xd6>
			}
			else{
			
			sv_cntrl_activate_valve(VALVE_ID1);
   95726:	2001      	movs	r0, #1
   95728:	4b13      	ldr	r3, [pc, #76]	; (95778 <cl_level_switchcontroller+0x100>)
   9572a:	4798      	blx	r3
			Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_UNDEFINED;
   9572c:	4b0d      	ldr	r3, [pc, #52]	; (95764 <cl_level_switchcontroller+0xec>)
   9572e:	2200      	movs	r2, #0
   95730:	701a      	strb	r2, [r3, #0]
			levelswitch_ontime = 0;
   95732:	4b12      	ldr	r3, [pc, #72]	; (9577c <cl_level_switchcontroller+0x104>)
   95734:	2200      	movs	r2, #0
   95736:	801a      	strh	r2, [r3, #0]
			if(v1_status != V1_ON )
   95738:	4b0e      	ldr	r3, [pc, #56]	; (95774 <cl_level_switchcontroller+0xfc>)
   9573a:	781b      	ldrb	r3, [r3, #0]
   9573c:	2b01      	cmp	r3, #1
   9573e:	d006      	beq.n	9574e <cl_level_switchcontroller+0xd6>
			{
				toggle_count = 0;
   95740:	4b07      	ldr	r3, [pc, #28]	; (95760 <cl_level_switchcontroller+0xe8>)
   95742:	2200      	movs	r2, #0
   95744:	801a      	strh	r2, [r3, #0]
				v1_status = V1_ON;
   95746:	4b0b      	ldr	r3, [pc, #44]	; (95774 <cl_level_switchcontroller+0xfc>)
   95748:	2201      	movs	r2, #1
   9574a:	701a      	strb	r2, [r3, #0]
			}
			}
		}
		break;
   9574c:	e001      	b.n	95752 <cl_level_switchcontroller+0xda>
   9574e:	e000      	b.n	95752 <cl_level_switchcontroller+0xda>
		default:break;
   95750:	bf00      	nop
		
	}
	return CL_OK;
   95752:	2300      	movs	r3, #0
   95754:	4618      	mov	r0, r3
   95756:	3710      	adds	r7, #16
   95758:	46bd      	mov	sp, r7
   9575a:	bd80      	pop	{r7, pc}
   9575c:	00082b25 	.word	0x00082b25
   95760:	20071c3a 	.word	0x20071c3a
   95764:	20071c34 	.word	0x20071c34
   95768:	20071d70 	.word	0x20071d70
   9576c:	0009b409 	.word	0x0009b409
   95770:	20071c38 	.word	0x20071c38
   95774:	20071c3c 	.word	0x20071c3c
   95778:	0009b3e9 	.word	0x0009b3e9
   9577c:	20071c36 	.word	0x20071c36

00095780 <cl_isouf_controller>:
	{FPCURRENTSTATUS,false,false,false},
	*/
};

Cl_ReturnCodeType cl_isouf_controller(Cl_Mac_EventsType Cl_MacDlsisEvent)
{
   95780:	b580      	push	{r7, lr}
   95782:	b090      	sub	sp, #64	; 0x40
   95784:	af00      	add	r7, sp, #0
   95786:	4603      	mov	r3, r0
   95788:	71fb      	strb	r3, [r7, #7]
	
//	cl_ufpump_states uf_pumpstate = CL_UFP_STATE_IDLE;
	Cl_Uint16Type uf_delta_value = 0 ;
   9578a:	2300      	movs	r3, #0
   9578c:	87fb      	strh	r3, [r7, #62]	; 0x3e
	static Cl_Uint16Type pwm_period = 0;
	Cl_Uint32Type temp = 0;
   9578e:	2300      	movs	r3, #0
   95790:	63bb      	str	r3, [r7, #56]	; 0x38
	Cl_Uint32Type temptime = 0;
   95792:	2300      	movs	r3, #0
   95794:	637b      	str	r3, [r7, #52]	; 0x34
	
	StateDatatype abfdata;
	Cl_Uint8Type abfdataarray[5] =  {0,0,0,0,0};
   95796:	2300      	movs	r3, #0
   95798:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   9579c:	2300      	movs	r3, #0
   9579e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   957a2:	2300      	movs	r3, #0
   957a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   957a8:	2300      	movs	r3, #0
   957aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   957ae:	2300      	movs	r3, #0
   957b0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   957b4:	2359      	movs	r3, #89	; 0x59
   957b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	Cl_Uint8Type data = 0;
   957ba:	2300      	movs	r3, #0
   957bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	Cl_Uint8Type datasize = 0;
   957c0:	2300      	movs	r3, #0
   957c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	Cl_Uint8Type dataarray[4] =  {0,0,0,0};
   957c6:	2300      	movs	r3, #0
   957c8:	773b      	strb	r3, [r7, #28]
   957ca:	2300      	movs	r3, #0
   957cc:	777b      	strb	r3, [r7, #29]
   957ce:	2300      	movs	r3, #0
   957d0:	77bb      	strb	r3, [r7, #30]
   957d2:	2300      	movs	r3, #0
   957d4:	77fb      	strb	r3, [r7, #31]
	
	cl_isouf_events cl_isouf_event = EVENT_ISOUF_NULL_EVENT;
   957d6:	2300      	movs	r3, #0
   957d8:	76fb      	strb	r3, [r7, #27]
	
	cl_isouf_retcode =  cl_isouf_translatemacevent( Cl_MacDlsisEvent, &cl_isouf_event);
   957da:	79fa      	ldrb	r2, [r7, #7]
   957dc:	f107 031b 	add.w	r3, r7, #27
   957e0:	4610      	mov	r0, r2
   957e2:	4619      	mov	r1, r3
   957e4:	4bb1      	ldr	r3, [pc, #708]	; (95aac <cl_isouf_controller+0x32c>)
   957e6:	4798      	blx	r3
   957e8:	4603      	mov	r3, r0
   957ea:	461a      	mov	r2, r3
   957ec:	4bb0      	ldr	r3, [pc, #704]	; (95ab0 <cl_isouf_controller+0x330>)
   957ee:	701a      	strb	r2, [r3, #0]
	
	
	switch(cl_isouf_event){
   957f0:	7efb      	ldrb	r3, [r7, #27]
   957f2:	3b10      	subs	r3, #16
   957f4:	2b4c      	cmp	r3, #76	; 0x4c
   957f6:	f200 8199 	bhi.w	95b2c <cl_isouf_controller+0x3ac>
   957fa:	a201      	add	r2, pc, #4	; (adr r2, 95800 <cl_isouf_controller+0x80>)
   957fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   95800:	00095a19 	.word	0x00095a19
   95804:	000959dd 	.word	0x000959dd
   95808:	000959f7 	.word	0x000959f7
   9580c:	0009593f 	.word	0x0009593f
   95810:	00095977 	.word	0x00095977
   95814:	000959d3 	.word	0x000959d3
   95818:	00095b2d 	.word	0x00095b2d
   9581c:	00095b2d 	.word	0x00095b2d
   95820:	00095b2d 	.word	0x00095b2d
   95824:	00095b2d 	.word	0x00095b2d
   95828:	00095b2d 	.word	0x00095b2d
   9582c:	00095935 	.word	0x00095935
   95830:	00095b2d 	.word	0x00095b2d
   95834:	00095b2d 	.word	0x00095b2d
   95838:	00095b2d 	.word	0x00095b2d
   9583c:	00095b2d 	.word	0x00095b2d
   95840:	00095b2d 	.word	0x00095b2d
   95844:	00095b2d 	.word	0x00095b2d
   95848:	00095b2d 	.word	0x00095b2d
   9584c:	00095b2d 	.word	0x00095b2d
   95850:	00095b2d 	.word	0x00095b2d
   95854:	00095b2d 	.word	0x00095b2d
   95858:	00095b2d 	.word	0x00095b2d
   9585c:	00095b2d 	.word	0x00095b2d
   95860:	00095b2d 	.word	0x00095b2d
   95864:	00095b2d 	.word	0x00095b2d
   95868:	00095b2d 	.word	0x00095b2d
   9586c:	00095b2d 	.word	0x00095b2d
   95870:	00095b2d 	.word	0x00095b2d
   95874:	00095b2d 	.word	0x00095b2d
   95878:	00095b2d 	.word	0x00095b2d
   9587c:	00095b2d 	.word	0x00095b2d
   95880:	00095b2d 	.word	0x00095b2d
   95884:	00095b2d 	.word	0x00095b2d
   95888:	00095b2d 	.word	0x00095b2d
   9588c:	00095b2d 	.word	0x00095b2d
   95890:	00095b2d 	.word	0x00095b2d
   95894:	00095b2d 	.word	0x00095b2d
   95898:	00095b2d 	.word	0x00095b2d
   9589c:	00095b2d 	.word	0x00095b2d
   958a0:	00095b2d 	.word	0x00095b2d
   958a4:	00095b2d 	.word	0x00095b2d
   958a8:	00095b2d 	.word	0x00095b2d
   958ac:	00095b2d 	.word	0x00095b2d
   958b0:	00095b2d 	.word	0x00095b2d
   958b4:	00095b2d 	.word	0x00095b2d
   958b8:	00095b2d 	.word	0x00095b2d
   958bc:	00095b2d 	.word	0x00095b2d
   958c0:	00095b2d 	.word	0x00095b2d
   958c4:	00095b2d 	.word	0x00095b2d
   958c8:	00095b2d 	.word	0x00095b2d
   958cc:	00095b2d 	.word	0x00095b2d
   958d0:	00095b2d 	.word	0x00095b2d
   958d4:	00095b2d 	.word	0x00095b2d
   958d8:	00095b2d 	.word	0x00095b2d
   958dc:	00095b2d 	.word	0x00095b2d
   958e0:	00095b2d 	.word	0x00095b2d
   958e4:	00095b2d 	.word	0x00095b2d
   958e8:	00095b2d 	.word	0x00095b2d
   958ec:	00095b2d 	.word	0x00095b2d
   958f0:	00095b2d 	.word	0x00095b2d
   958f4:	00095b2d 	.word	0x00095b2d
   958f8:	00095b2d 	.word	0x00095b2d
   958fc:	00095b2d 	.word	0x00095b2d
   95900:	00095b2d 	.word	0x00095b2d
   95904:	00095b2d 	.word	0x00095b2d
   95908:	00095b2d 	.word	0x00095b2d
   9590c:	00095b2d 	.word	0x00095b2d
   95910:	00095b2d 	.word	0x00095b2d
   95914:	00095b2d 	.word	0x00095b2d
   95918:	00095b2d 	.word	0x00095b2d
   9591c:	00095b2d 	.word	0x00095b2d
   95920:	00095b2d 	.word	0x00095b2d
   95924:	00095b2d 	.word	0x00095b2d
   95928:	00095b2d 	.word	0x00095b2d
   9592c:	00095a4f 	.word	0x00095a4f
   95930:	00095ad1 	.word	0x00095ad1
		
		case EVENT_ISOUF_HEAPARIN_BOLUS:
		cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
   95934:	2007      	movs	r0, #7
   95936:	2100      	movs	r1, #0
   95938:	4b5e      	ldr	r3, [pc, #376]	; (95ab4 <cl_isouf_controller+0x334>)
   9593a:	4798      	blx	r3
		break;
   9593c:	e0f7      	b.n	95b2e <cl_isouf_controller+0x3ae>
		
		
		case EVENT_ISOUF_HEP_RATE:
		if(Cl_ConsoleRxMsg.msgready == true)
   9593e:	4b5e      	ldr	r3, [pc, #376]	; (95ab8 <cl_isouf_controller+0x338>)
   95940:	7e1b      	ldrb	r3, [r3, #24]
   95942:	2b00      	cmp	r3, #0
   95944:	d016      	beq.n	95974 <cl_isouf_controller+0x1f4>
		{
			
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   95946:	4b5c      	ldr	r3, [pc, #368]	; (95ab8 <cl_isouf_controller+0x338>)
   95948:	791b      	ldrb	r3, [r3, #4]
   9594a:	753b      	strb	r3, [r7, #20]
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   9594c:	4b5a      	ldr	r3, [pc, #360]	; (95ab8 <cl_isouf_controller+0x338>)
   9594e:	795b      	ldrb	r3, [r3, #5]
   95950:	757b      	strb	r3, [r7, #21]
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   95952:	4b59      	ldr	r3, [pc, #356]	; (95ab8 <cl_isouf_controller+0x338>)
   95954:	799b      	ldrb	r3, [r3, #6]
   95956:	75bb      	strb	r3, [r7, #22]
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   95958:	4b57      	ldr	r3, [pc, #348]	; (95ab8 <cl_isouf_controller+0x338>)
   9595a:	79db      	ldrb	r3, [r3, #7]
   9595c:	75fb      	strb	r3, [r7, #23]
			Treatdata[ID_heprate] = cl_temp.Twobyte;
   9595e:	8abb      	ldrh	r3, [r7, #20]
   95960:	461a      	mov	r2, r3
   95962:	4b56      	ldr	r3, [pc, #344]	; (95abc <cl_isouf_controller+0x33c>)
   95964:	61da      	str	r2, [r3, #28]
			//	hep_calibration(Treatdata[ID_heprate]);
			cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,Treatdata[ID_heprate]);
   95966:	4b55      	ldr	r3, [pc, #340]	; (95abc <cl_isouf_controller+0x33c>)
   95968:	69db      	ldr	r3, [r3, #28]
   9596a:	2006      	movs	r0, #6
   9596c:	4619      	mov	r1, r3
   9596e:	4b51      	ldr	r3, [pc, #324]	; (95ab4 <cl_isouf_controller+0x334>)
   95970:	4798      	blx	r3
		}
		break;
   95972:	e0dc      	b.n	95b2e <cl_isouf_controller+0x3ae>
   95974:	e0db      	b.n	95b2e <cl_isouf_controller+0x3ae>
		case EVENT_ISOUF_HEP_ON:
		
		if(Cl_ConsoleRxMsg.msgready == true)
   95976:	4b50      	ldr	r3, [pc, #320]	; (95ab8 <cl_isouf_controller+0x338>)
   95978:	7e1b      	ldrb	r3, [r3, #24]
   9597a:	2b00      	cmp	r3, #0
   9597c:	d028      	beq.n	959d0 <cl_isouf_controller+0x250>
		
		{
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   9597e:	4b4e      	ldr	r3, [pc, #312]	; (95ab8 <cl_isouf_controller+0x338>)
   95980:	795b      	ldrb	r3, [r3, #5]
   95982:	743b      	strb	r3, [r7, #16]
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   95984:	4b4c      	ldr	r3, [pc, #304]	; (95ab8 <cl_isouf_controller+0x338>)
   95986:	799b      	ldrb	r3, [r3, #6]
   95988:	747b      	strb	r3, [r7, #17]
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   9598a:	4b4b      	ldr	r3, [pc, #300]	; (95ab8 <cl_isouf_controller+0x338>)
   9598c:	79db      	ldrb	r3, [r3, #7]
   9598e:	74bb      	strb	r3, [r7, #18]
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   95990:	4b49      	ldr	r3, [pc, #292]	; (95ab8 <cl_isouf_controller+0x338>)
   95992:	7a1b      	ldrb	r3, [r3, #8]
   95994:	74fb      	strb	r3, [r7, #19]
			
			if(Cl_ConsoleRxMsg.data.byte[0] == 1)
   95996:	4b48      	ldr	r3, [pc, #288]	; (95ab8 <cl_isouf_controller+0x338>)
   95998:	791b      	ldrb	r3, [r3, #4]
   9599a:	2b01      	cmp	r3, #1
   9599c:	d104      	bne.n	959a8 <cl_isouf_controller+0x228>
			{
				cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
   9599e:	2001      	movs	r0, #1
   959a0:	2100      	movs	r1, #0
   959a2:	4b44      	ldr	r3, [pc, #272]	; (95ab4 <cl_isouf_controller+0x334>)
   959a4:	4798      	blx	r3
   959a6:	e013      	b.n	959d0 <cl_isouf_controller+0x250>
				
			}
			else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
   959a8:	4b43      	ldr	r3, [pc, #268]	; (95ab8 <cl_isouf_controller+0x338>)
   959aa:	791b      	ldrb	r3, [r3, #4]
   959ac:	2b02      	cmp	r3, #2
   959ae:	d104      	bne.n	959ba <cl_isouf_controller+0x23a>
			{
				cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
   959b0:	2004      	movs	r0, #4
   959b2:	2100      	movs	r1, #0
   959b4:	4b3f      	ldr	r3, [pc, #252]	; (95ab4 <cl_isouf_controller+0x334>)
   959b6:	4798      	blx	r3
   959b8:	e00a      	b.n	959d0 <cl_isouf_controller+0x250>
			}
			else if(Cl_ConsoleRxMsg.data.byte[0] == 0)
   959ba:	4b3f      	ldr	r3, [pc, #252]	; (95ab8 <cl_isouf_controller+0x338>)
   959bc:	791b      	ldrb	r3, [r3, #4]
   959be:	2b00      	cmp	r3, #0
   959c0:	d106      	bne.n	959d0 <cl_isouf_controller+0x250>
			{
				cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,Treatdata[ID_heprate]);
   959c2:	4b3e      	ldr	r3, [pc, #248]	; (95abc <cl_isouf_controller+0x33c>)
   959c4:	69db      	ldr	r3, [r3, #28]
   959c6:	200b      	movs	r0, #11
   959c8:	4619      	mov	r1, r3
   959ca:	4b3a      	ldr	r3, [pc, #232]	; (95ab4 <cl_isouf_controller+0x334>)
   959cc:	4798      	blx	r3
			}
			
		}
		
		
		break;
   959ce:	e0ae      	b.n	95b2e <cl_isouf_controller+0x3ae>
   959d0:	e0ad      	b.n	95b2e <cl_isouf_controller+0x3ae>
		case EVENT_ISOUF_HEP_OFF:
		cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
   959d2:	2009      	movs	r0, #9
   959d4:	2100      	movs	r1, #0
   959d6:	4b37      	ldr	r3, [pc, #220]	; (95ab4 <cl_isouf_controller+0x334>)
   959d8:	4798      	blx	r3
		break;
   959da:	e0a8      	b.n	95b2e <cl_isouf_controller+0x3ae>
		case EVENT_ISOUF_COMMAND_SET_BLDPMP_ON:
		cl_bp_controller(CL_BP_EVENT_START,0);
   959dc:	2002      	movs	r0, #2
   959de:	2100      	movs	r1, #0
   959e0:	4b37      	ldr	r3, [pc, #220]	; (95ac0 <cl_isouf_controller+0x340>)
   959e2:	4798      	blx	r3
		cl_isouf_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
   959e4:	2001      	movs	r0, #1
   959e6:	2101      	movs	r1, #1
   959e8:	4b36      	ldr	r3, [pc, #216]	; (95ac4 <cl_isouf_controller+0x344>)
   959ea:	4798      	blx	r3
   959ec:	4603      	mov	r3, r0
   959ee:	461a      	mov	r2, r3
   959f0:	4b2f      	ldr	r3, [pc, #188]	; (95ab0 <cl_isouf_controller+0x330>)
   959f2:	701a      	strb	r2, [r3, #0]
		break;
   959f4:	e09b      	b.n	95b2e <cl_isouf_controller+0x3ae>
		case EVENT_ISOUF_COMMAND_SET_BLDPMP_OFF:
		cl_bp_controller(CL_BP_EVENT_STOP,0);
   959f6:	2004      	movs	r0, #4
   959f8:	2100      	movs	r1, #0
   959fa:	4b31      	ldr	r3, [pc, #196]	; (95ac0 <cl_isouf_controller+0x340>)
   959fc:	4798      	blx	r3
		Cl_Alarm_TriggerAlarm(BP_STOPPED,1);
   959fe:	203f      	movs	r0, #63	; 0x3f
   95a00:	2101      	movs	r1, #1
   95a02:	4b31      	ldr	r3, [pc, #196]	; (95ac8 <cl_isouf_controller+0x348>)
   95a04:	4798      	blx	r3
		cl_isouf_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false);
   95a06:	2001      	movs	r0, #1
   95a08:	2100      	movs	r1, #0
   95a0a:	4b2e      	ldr	r3, [pc, #184]	; (95ac4 <cl_isouf_controller+0x344>)
   95a0c:	4798      	blx	r3
   95a0e:	4603      	mov	r3, r0
   95a10:	461a      	mov	r2, r3
   95a12:	4b27      	ldr	r3, [pc, #156]	; (95ab0 <cl_isouf_controller+0x330>)
   95a14:	701a      	strb	r2, [r3, #0]
		break;
   95a16:	e08a      	b.n	95b2e <cl_isouf_controller+0x3ae>
		case EVENT_ISOUF_COMMAND_SET_BLDPUMPRATE:
		if(Cl_ConsoleRxMsg.msgready == true)
   95a18:	4b27      	ldr	r3, [pc, #156]	; (95ab8 <cl_isouf_controller+0x338>)
   95a1a:	7e1b      	ldrb	r3, [r3, #24]
   95a1c:	2b00      	cmp	r3, #0
   95a1e:	d015      	beq.n	95a4c <cl_isouf_controller+0x2cc>
		{
			
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   95a20:	4b25      	ldr	r3, [pc, #148]	; (95ab8 <cl_isouf_controller+0x338>)
   95a22:	791b      	ldrb	r3, [r3, #4]
   95a24:	733b      	strb	r3, [r7, #12]
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   95a26:	4b24      	ldr	r3, [pc, #144]	; (95ab8 <cl_isouf_controller+0x338>)
   95a28:	795b      	ldrb	r3, [r3, #5]
   95a2a:	737b      	strb	r3, [r7, #13]
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   95a2c:	4b22      	ldr	r3, [pc, #136]	; (95ab8 <cl_isouf_controller+0x338>)
   95a2e:	799b      	ldrb	r3, [r3, #6]
   95a30:	73bb      	strb	r3, [r7, #14]
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   95a32:	4b21      	ldr	r3, [pc, #132]	; (95ab8 <cl_isouf_controller+0x338>)
   95a34:	79db      	ldrb	r3, [r3, #7]
   95a36:	73fb      	strb	r3, [r7, #15]
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   95a38:	89bb      	ldrh	r3, [r7, #12]
   95a3a:	2001      	movs	r0, #1
   95a3c:	4619      	mov	r1, r3
   95a3e:	4b20      	ldr	r3, [pc, #128]	; (95ac0 <cl_isouf_controller+0x340>)
   95a40:	4798      	blx	r3
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
   95a42:	89bb      	ldrh	r3, [r7, #12]
   95a44:	461a      	mov	r2, r3
   95a46:	4b1d      	ldr	r3, [pc, #116]	; (95abc <cl_isouf_controller+0x33c>)
   95a48:	65da      	str	r2, [r3, #92]	; 0x5c
		}
		break;
   95a4a:	e070      	b.n	95b2e <cl_isouf_controller+0x3ae>
   95a4c:	e06f      	b.n	95b2e <cl_isouf_controller+0x3ae>
		
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		
		if(Treatdata[ID_bloodrate] <= 450){
   95a4e:	4b1b      	ldr	r3, [pc, #108]	; (95abc <cl_isouf_controller+0x33c>)
   95a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   95a52:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
   95a56:	d828      	bhi.n	95aaa <cl_isouf_controller+0x32a>
			
			Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] + 10;
   95a58:	4b18      	ldr	r3, [pc, #96]	; (95abc <cl_isouf_controller+0x33c>)
   95a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   95a5c:	330a      	adds	r3, #10
   95a5e:	4a17      	ldr	r2, [pc, #92]	; (95abc <cl_isouf_controller+0x33c>)
   95a60:	63d3      	str	r3, [r2, #60]	; 0x3c
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   95a62:	4b16      	ldr	r3, [pc, #88]	; (95abc <cl_isouf_controller+0x33c>)
   95a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   95a66:	2001      	movs	r0, #1
   95a68:	4619      	mov	r1, r3
   95a6a:	4b15      	ldr	r3, [pc, #84]	; (95ac0 <cl_isouf_controller+0x340>)
   95a6c:	4798      	blx	r3
			
			// send blood rate data to console
			
			
			abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   95a6e:	230f      	movs	r3, #15
   95a70:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			abfdata.fourbytedata = Treatdata[ID_bloodrate];
   95a74:	4b11      	ldr	r3, [pc, #68]	; (95abc <cl_isouf_controller+0x33c>)
   95a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   95a78:	62fb      	str	r3, [r7, #44]	; 0x2c
			abfdataarray[1] = abfdata.bytedata[0];
   95a7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   95a7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			abfdataarray[2] = abfdata.bytedata[1];
   95a82:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   95a86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			abfdataarray[3] = abfdata.bytedata[2];
   95a8a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   95a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			abfdataarray[4] = abfdata.bytedata[3];
   95a92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   95a96:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   95a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
   95a9e:	202a      	movs	r0, #42	; 0x2a
   95aa0:	4619      	mov	r1, r3
   95aa2:	2205      	movs	r2, #5
   95aa4:	4b09      	ldr	r3, [pc, #36]	; (95acc <cl_isouf_controller+0x34c>)
   95aa6:	4798      	blx	r3
			
		}
		
		cl_isouf_event == EVENT_ISOUF_NULL_EVENT;
		break;
   95aa8:	e041      	b.n	95b2e <cl_isouf_controller+0x3ae>
   95aaa:	e040      	b.n	95b2e <cl_isouf_controller+0x3ae>
   95aac:	00096f45 	.word	0x00096f45
   95ab0:	20071c3e 	.word	0x20071c3e
   95ab4:	00094b61 	.word	0x00094b61
   95ab8:	200725bc 	.word	0x200725bc
   95abc:	20072880 	.word	0x20072880
   95ac0:	00094325 	.word	0x00094325
   95ac4:	00082a35 	.word	0x00082a35
   95ac8:	00082c75 	.word	0x00082c75
   95acc:	0009d1e9 	.word	0x0009d1e9
		
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		
		if(Treatdata[ID_bloodrate] >= 100){
   95ad0:	4ba3      	ldr	r3, [pc, #652]	; (95d60 <cl_isouf_controller+0x5e0>)
   95ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   95ad4:	2b63      	cmp	r3, #99	; 0x63
   95ad6:	d928      	bls.n	95b2a <cl_isouf_controller+0x3aa>
			
			Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] - 10;
   95ad8:	4ba1      	ldr	r3, [pc, #644]	; (95d60 <cl_isouf_controller+0x5e0>)
   95ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   95adc:	3b0a      	subs	r3, #10
   95ade:	4aa0      	ldr	r2, [pc, #640]	; (95d60 <cl_isouf_controller+0x5e0>)
   95ae0:	63d3      	str	r3, [r2, #60]	; 0x3c
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   95ae2:	4b9f      	ldr	r3, [pc, #636]	; (95d60 <cl_isouf_controller+0x5e0>)
   95ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   95ae6:	2001      	movs	r0, #1
   95ae8:	4619      	mov	r1, r3
   95aea:	4b9e      	ldr	r3, [pc, #632]	; (95d64 <cl_isouf_controller+0x5e4>)
   95aec:	4798      	blx	r3
			
			
			abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   95aee:	230f      	movs	r3, #15
   95af0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			abfdata.fourbytedata = Treatdata[ID_bloodrate];
   95af4:	4b9a      	ldr	r3, [pc, #616]	; (95d60 <cl_isouf_controller+0x5e0>)
   95af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   95af8:	62fb      	str	r3, [r7, #44]	; 0x2c
			abfdataarray[1] = abfdata.bytedata[0];
   95afa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   95afe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			abfdataarray[2] = abfdata.bytedata[1];
   95b02:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   95b06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			abfdataarray[3] = abfdata.bytedata[2];
   95b0a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   95b0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			abfdataarray[4] = abfdata.bytedata[3];
   95b12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   95b16:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   95b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
   95b1e:	202a      	movs	r0, #42	; 0x2a
   95b20:	4619      	mov	r1, r3
   95b22:	2205      	movs	r2, #5
   95b24:	4b90      	ldr	r3, [pc, #576]	; (95d68 <cl_isouf_controller+0x5e8>)
   95b26:	4798      	blx	r3
		}
		
		cl_isouf_event == EVENT_ISOUF_NULL_EVENT;
		break;
   95b28:	e001      	b.n	95b2e <cl_isouf_controller+0x3ae>
   95b2a:	e000      	b.n	95b2e <cl_isouf_controller+0x3ae>
		
		
		default : break;
   95b2c:	bf00      	nop
	}
	
	
	switch(cl_isouf_state)
   95b2e:	4b8f      	ldr	r3, [pc, #572]	; (95d6c <cl_isouf_controller+0x5ec>)
   95b30:	781b      	ldrb	r3, [r3, #0]
   95b32:	2b08      	cmp	r3, #8
   95b34:	f200 810d 	bhi.w	95d52 <cl_isouf_controller+0x5d2>
   95b38:	a201      	add	r2, pc, #4	; (adr r2, 95b40 <cl_isouf_controller+0x3c0>)
   95b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   95b3e:	bf00      	nop
   95b40:	00095b65 	.word	0x00095b65
   95b44:	00095b83 	.word	0x00095b83
   95b48:	00095cfd 	.word	0x00095cfd
   95b4c:	00095d53 	.word	0x00095d53
   95b50:	00095d1b 	.word	0x00095d1b
   95b54:	00095d53 	.word	0x00095d53
   95b58:	00095d53 	.word	0x00095d53
   95b5c:	00095d3f 	.word	0x00095d3f
   95b60:	00095c69 	.word	0x00095c69
	{
			case CL_ISOUF_STATE_IDLE:
			switch (cl_isouf_event)
   95b64:	7efb      	ldrb	r3, [r7, #27]
   95b66:	2b16      	cmp	r3, #22
   95b68:	d000      	beq.n	95b6c <cl_isouf_controller+0x3ec>
					ufRemoved = 0;
					Cl_Isouf_start();
				
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
					break;
					default: break;
   95b6a:	e009      	b.n	95b80 <cl_isouf_controller+0x400>
				
				{
					case EVENT_ISOUF_START:
					
					//cl_dialysate_ready_isouf();
					ufRemoved = 0;
   95b6c:	4b80      	ldr	r3, [pc, #512]	; (95d70 <cl_isouf_controller+0x5f0>)
   95b6e:	f04f 0200 	mov.w	r2, #0
   95b72:	601a      	str	r2, [r3, #0]
					Cl_Isouf_start();
   95b74:	4b7f      	ldr	r3, [pc, #508]	; (95d74 <cl_isouf_controller+0x5f4>)
   95b76:	4798      	blx	r3
				
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
   95b78:	4b7c      	ldr	r3, [pc, #496]	; (95d6c <cl_isouf_controller+0x5ec>)
   95b7a:	2201      	movs	r2, #1
   95b7c:	701a      	strb	r2, [r3, #0]
					break;
   95b7e:	bf00      	nop
					default: break;
				}
				break;
   95b80:	e0e8      	b.n	95d54 <cl_isouf_controller+0x5d4>
				
					
			case CL_ISOUF_STATE_STARTED:
			
			switch(cl_isouf_event){
   95b82:	7efb      	ldrb	r3, [r7, #27]
   95b84:	3b08      	subs	r3, #8
   95b86:	2b10      	cmp	r3, #16
   95b88:	d86c      	bhi.n	95c64 <cl_isouf_controller+0x4e4>
   95b8a:	a201      	add	r2, pc, #4	; (adr r2, 95b90 <cl_isouf_controller+0x410>)
   95b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   95b90:	00095bd5 	.word	0x00095bd5
   95b94:	00095bf3 	.word	0x00095bf3
   95b98:	00095bdb 	.word	0x00095bdb
   95b9c:	00095c65 	.word	0x00095c65
   95ba0:	00095be5 	.word	0x00095be5
   95ba4:	00095c65 	.word	0x00095c65
   95ba8:	00095c65 	.word	0x00095c65
   95bac:	00095c65 	.word	0x00095c65
   95bb0:	00095c65 	.word	0x00095c65
   95bb4:	00095c65 	.word	0x00095c65
   95bb8:	00095c65 	.word	0x00095c65
   95bbc:	00095c65 	.word	0x00095c65
   95bc0:	00095c65 	.word	0x00095c65
   95bc4:	00095c65 	.word	0x00095c65
   95bc8:	00095c65 	.word	0x00095c65
   95bcc:	00095c65 	.word	0x00095c65
   95bd0:	00095c5f 	.word	0x00095c5f
// 				cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
// 				break;
				
				case EVENT_ISOUF_TICK_500MS :
				
					cl_isouf_retcode == cl_checkforblooddetection();
   95bd4:	4b68      	ldr	r3, [pc, #416]	; (95d78 <cl_isouf_controller+0x5f8>)
   95bd6:	4798      	blx	r3
				
				break;
   95bd8:	e045      	b.n	95c66 <cl_isouf_controller+0x4e6>
				
				case EVENT_ISOUF_TICK_MINUTE:
				
				//isoufRemoved =  isoufRemoved + (Treatdata[ID_ufrate]/10);
				
				cl_uf_controller(CL_UF_EVENT_MINUTE,0);
   95bda:	200a      	movs	r0, #10
   95bdc:	2100      	movs	r1, #0
   95bde:	4b67      	ldr	r3, [pc, #412]	; (95d7c <cl_isouf_controller+0x5fc>)
   95be0:	4798      	blx	r3
			break;
   95be2:	e040      	b.n	95c66 <cl_isouf_controller+0x4e6>
			
			case EVENT_ISOUF_ALARM:
			cl_isouf_retcode = Cl_Isouf_ProcessAlarms();
   95be4:	4b66      	ldr	r3, [pc, #408]	; (95d80 <cl_isouf_controller+0x600>)
   95be6:	4798      	blx	r3
   95be8:	4603      	mov	r3, r0
   95bea:	461a      	mov	r2, r3
   95bec:	4b65      	ldr	r3, [pc, #404]	; (95d84 <cl_isouf_controller+0x604>)
   95bee:	701a      	strb	r2, [r3, #0]
				break;
   95bf0:	e039      	b.n	95c66 <cl_isouf_controller+0x4e6>
				case EVENT_ISOUF_TICK_SECOND :
				
					Cl_ISOufTotalSecondscounter ++ ;
   95bf2:	4b65      	ldr	r3, [pc, #404]	; (95d88 <cl_isouf_controller+0x608>)
   95bf4:	681b      	ldr	r3, [r3, #0]
   95bf6:	3301      	adds	r3, #1
   95bf8:	4a63      	ldr	r2, [pc, #396]	; (95d88 <cl_isouf_controller+0x608>)
   95bfa:	6013      	str	r3, [r2, #0]
				//	if(cl_isouf_retcode == CL_OK){    // manav03 commented
					
					// check for completion
					//cl_sendisoufdata();
					
						Cl_Iso_Senddata();
   95bfc:	4b63      	ldr	r3, [pc, #396]	; (95d8c <cl_isouf_controller+0x60c>)
   95bfe:	4798      	blx	r3
						if(Cl_ISOufTotalSecondscounter >= Treatdata[ID_treattime]){
   95c00:	4b61      	ldr	r3, [pc, #388]	; (95d88 <cl_isouf_controller+0x608>)
   95c02:	681b      	ldr	r3, [r3, #0]
   95c04:	461a      	mov	r2, r3
   95c06:	4b56      	ldr	r3, [pc, #344]	; (95d60 <cl_isouf_controller+0x5e0>)
   95c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   95c0a:	429a      	cmp	r2, r3
   95c0c:	d326      	bcc.n	95c5c <cl_isouf_controller+0x4dc>
						
						// complete
						cl_isouf_retcode == cl_isoufcompleted();
   95c0e:	4b60      	ldr	r3, [pc, #384]	; (95d90 <cl_isouf_controller+0x610>)
   95c10:	4798      	blx	r3
						if(cl_isouf_retcode == CL_OK){
   95c12:	4b5c      	ldr	r3, [pc, #368]	; (95d84 <cl_isouf_controller+0x604>)
   95c14:	781b      	ldrb	r3, [r3, #0]
   95c16:	2b00      	cmp	r3, #0
   95c18:	d120      	bne.n	95c5c <cl_isouf_controller+0x4dc>
							
												
							cl_isouf_state = CL_ISOUF_STATE_COMPLETED;
   95c1a:	4b54      	ldr	r3, [pc, #336]	; (95d6c <cl_isouf_controller+0x5ec>)
   95c1c:	2204      	movs	r2, #4
   95c1e:	701a      	strb	r2, [r3, #0]
							isouf = false;
   95c20:	4b5c      	ldr	r3, [pc, #368]	; (95d94 <cl_isouf_controller+0x614>)
   95c22:	2200      	movs	r2, #0
   95c24:	701a      	strb	r2, [r3, #0]
							command = CON_TX_COMMAND_COMMAND_ISOUF_COMPLETED;
   95c26:	234a      	movs	r3, #74	; 0x4a
   95c28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
							data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   95c2c:	2301      	movs	r3, #1
   95c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
							cl_isouf_retcode = Cl_SendDatatoconsole(command,&data,1);
   95c32:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
   95c36:	f107 0323 	add.w	r3, r7, #35	; 0x23
   95c3a:	4610      	mov	r0, r2
   95c3c:	4619      	mov	r1, r3
   95c3e:	2201      	movs	r2, #1
   95c40:	4b49      	ldr	r3, [pc, #292]	; (95d68 <cl_isouf_controller+0x5e8>)
   95c42:	4798      	blx	r3
   95c44:	4603      	mov	r3, r0
   95c46:	461a      	mov	r2, r3
   95c48:	4b4e      	ldr	r3, [pc, #312]	; (95d84 <cl_isouf_controller+0x604>)
   95c4a:	701a      	strb	r2, [r3, #0]
							cl_isouf_retcode = Cl_mac_apprequesthandler(MACREQ_ISOUF_COMPLETED);
   95c4c:	205a      	movs	r0, #90	; 0x5a
   95c4e:	4b52      	ldr	r3, [pc, #328]	; (95d98 <cl_isouf_controller+0x618>)
   95c50:	4798      	blx	r3
   95c52:	4603      	mov	r3, r0
   95c54:	461a      	mov	r2, r3
   95c56:	4b4b      	ldr	r3, [pc, #300]	; (95d84 <cl_isouf_controller+0x604>)
   95c58:	701a      	strb	r2, [r3, #0]
			//	}	
			//	else{
					// raise alarm
			//	}
				
				break;
   95c5a:	e004      	b.n	95c66 <cl_isouf_controller+0x4e6>
   95c5c:	e003      	b.n	95c66 <cl_isouf_controller+0x4e6>
				
				
				case EVENT_ISOUF_STOP :
				
					Cl_Isouf_stop();
   95c5e:	4b4f      	ldr	r3, [pc, #316]	; (95d9c <cl_isouf_controller+0x61c>)
   95c60:	4798      	blx	r3
				// stop uf pump
					
				
				break;
   95c62:	e000      	b.n	95c66 <cl_isouf_controller+0x4e6>
				// implement iso uf stop state
				// implement bp on event
				// implement bp off event  , iso uf should stop
				
				
				default: break;
   95c64:	bf00      	nop
				
			}
			
			break;
   95c66:	e075      	b.n	95d54 <cl_isouf_controller+0x5d4>
			
			case CL_ISOUF_STATE_CRITICAL_ALARM:
			
			switch(cl_isouf_event){
   95c68:	7efb      	ldrb	r3, [r7, #27]
   95c6a:	2b01      	cmp	r3, #1
   95c6c:	d008      	beq.n	95c80 <cl_isouf_controller+0x500>
   95c6e:	2b16      	cmp	r3, #22
   95c70:	d000      	beq.n	95c74 <cl_isouf_controller+0x4f4>
				
				
				break;
				
				
				default: break;
   95c72:	e042      	b.n	95cfa <cl_isouf_controller+0x57a>
				
				case EVENT_ISOUF_START:
				
				//Cl_ISOufTotalSecondscounter = 0;
				//	cl_dialysate_ready_isouf();
				Cl_Isouf_start();
   95c74:	4b3f      	ldr	r3, [pc, #252]	; (95d74 <cl_isouf_controller+0x5f4>)
   95c76:	4798      	blx	r3
				cl_isouf_state = CL_ISOUF_STATE_STARTED;
   95c78:	4b3c      	ldr	r3, [pc, #240]	; (95d6c <cl_isouf_controller+0x5ec>)
   95c7a:	2201      	movs	r2, #1
   95c7c:	701a      	strb	r2, [r3, #0]
				break;
   95c7e:	e03c      	b.n	95cfa <cl_isouf_controller+0x57a>
				case EVENT_ISOUF_CLR_ALARM:
				
				//Cl_ISOufTotalSecondscounter = 0;
				//	cl_dialysate_ready_isouf();
				// manav03 added
				if(isopowerFailureFlag == 1){
   95c80:	4b47      	ldr	r3, [pc, #284]	; (95da0 <cl_isouf_controller+0x620>)
   95c82:	681b      	ldr	r3, [r3, #0]
   95c84:	2b01      	cmp	r3, #1
   95c86:	d121      	bne.n	95ccc <cl_isouf_controller+0x54c>
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_POWER_FAILURE,&isouf_powerFailSensorData);
   95c88:	2024      	movs	r0, #36	; 0x24
   95c8a:	4946      	ldr	r1, [pc, #280]	; (95da4 <cl_isouf_controller+0x624>)
   95c8c:	4b46      	ldr	r3, [pc, #280]	; (95da8 <cl_isouf_controller+0x628>)
   95c8e:	4798      	blx	r3
					
					if(isouf_powerFailSensorData == 0){
   95c90:	4b44      	ldr	r3, [pc, #272]	; (95da4 <cl_isouf_controller+0x624>)
   95c92:	881b      	ldrh	r3, [r3, #0]
   95c94:	2b00      	cmp	r3, #0
   95c96:	d12f      	bne.n	95cf8 <cl_isouf_controller+0x578>
						
						sv_cntrl_resetyellowalarm();
   95c98:	4b44      	ldr	r3, [pc, #272]	; (95dac <cl_isouf_controller+0x62c>)
   95c9a:	4798      	blx	r3
						sv_cntrl_resetredalarm();
   95c9c:	4b44      	ldr	r3, [pc, #272]	; (95db0 <cl_isouf_controller+0x630>)
   95c9e:	4798      	blx	r3
						sv_cntrl_nobuzzer();
   95ca0:	4b44      	ldr	r3, [pc, #272]	; (95db4 <cl_isouf_controller+0x634>)
   95ca2:	4798      	blx	r3
						
						isopowerFailureFlag = 0;
   95ca4:	4b3e      	ldr	r3, [pc, #248]	; (95da0 <cl_isouf_controller+0x620>)
   95ca6:	2200      	movs	r2, #0
   95ca8:	601a      	str	r2, [r3, #0]
						command = CON_TX_COMMAND_ALARM_CLEARED;
   95caa:	2351      	movs	r3, #81	; 0x51
   95cac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
						Cl_SendDatatoconsole(command,&data,0);
   95cb0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
   95cb4:	f107 0323 	add.w	r3, r7, #35	; 0x23
   95cb8:	4610      	mov	r0, r2
   95cba:	4619      	mov	r1, r3
   95cbc:	2200      	movs	r2, #0
   95cbe:	4b2a      	ldr	r3, [pc, #168]	; (95d68 <cl_isouf_controller+0x5e8>)
   95cc0:	4798      	blx	r3
						Cl_Isouf_ResetAlertsforReassertion();
   95cc2:	4b3d      	ldr	r3, [pc, #244]	; (95db8 <cl_isouf_controller+0x638>)
   95cc4:	4798      	blx	r3
						sv_cntrl_activatevenousclamp();
   95cc6:	4b3d      	ldr	r3, [pc, #244]	; (95dbc <cl_isouf_controller+0x63c>)
   95cc8:	4798      	blx	r3
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
				}
				
				
				
				break;
   95cca:	e015      	b.n	95cf8 <cl_isouf_controller+0x578>
					
					}
				}
				else{
					
					command = CON_TX_COMMAND_ALARM_CLEARED;
   95ccc:	2351      	movs	r3, #81	; 0x51
   95cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					Cl_SendDatatoconsole(command,&data,0);
   95cd2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
   95cd6:	f107 0323 	add.w	r3, r7, #35	; 0x23
   95cda:	4610      	mov	r0, r2
   95cdc:	4619      	mov	r1, r3
   95cde:	2200      	movs	r2, #0
   95ce0:	4b21      	ldr	r3, [pc, #132]	; (95d68 <cl_isouf_controller+0x5e8>)
   95ce2:	4798      	blx	r3
					
					Cl_Isouf_ResetAlertsforReassertion();
   95ce4:	4b34      	ldr	r3, [pc, #208]	; (95db8 <cl_isouf_controller+0x638>)
   95ce6:	4798      	blx	r3
					sv_cntrl_activatevenousclamp();
   95ce8:	4b34      	ldr	r3, [pc, #208]	; (95dbc <cl_isouf_controller+0x63c>)
   95cea:	4798      	blx	r3
					Cl_Isouf_start();
   95cec:	4b21      	ldr	r3, [pc, #132]	; (95d74 <cl_isouf_controller+0x5f4>)
   95cee:	4798      	blx	r3
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
   95cf0:	4b1e      	ldr	r3, [pc, #120]	; (95d6c <cl_isouf_controller+0x5ec>)
   95cf2:	2201      	movs	r2, #1
   95cf4:	701a      	strb	r2, [r3, #0]
				}
				
				
				
				break;
   95cf6:	e7ff      	b.n	95cf8 <cl_isouf_controller+0x578>
   95cf8:	bf00      	nop
				
				
				default: break;
			}
			
			break;
   95cfa:	e02b      	b.n	95d54 <cl_isouf_controller+0x5d4>
			
			case CL_ISOUF_STATE_STOPPED:
			
				switch(cl_isouf_event){
   95cfc:	7efb      	ldrb	r3, [r7, #27]
   95cfe:	2b16      	cmp	r3, #22
   95d00:	d000      	beq.n	95d04 <cl_isouf_controller+0x584>
				ufRemoved = 0;
					Cl_Isouf_start();
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
				break;
					
				default: break;	
   95d02:	e009      	b.n	95d18 <cl_isouf_controller+0x598>
					
					case EVENT_ISOUF_START:
				
				//Cl_ISOufTotalSecondscounter = 0;
				//	cl_dialysate_ready_isouf();
				ufRemoved = 0;
   95d04:	4b1a      	ldr	r3, [pc, #104]	; (95d70 <cl_isouf_controller+0x5f0>)
   95d06:	f04f 0200 	mov.w	r2, #0
   95d0a:	601a      	str	r2, [r3, #0]
					Cl_Isouf_start();
   95d0c:	4b19      	ldr	r3, [pc, #100]	; (95d74 <cl_isouf_controller+0x5f4>)
   95d0e:	4798      	blx	r3
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
   95d10:	4b16      	ldr	r3, [pc, #88]	; (95d6c <cl_isouf_controller+0x5ec>)
   95d12:	2201      	movs	r2, #1
   95d14:	701a      	strb	r2, [r3, #0]
				break;
   95d16:	bf00      	nop
				default: break;	
					
					
				}
			
			break;
   95d18:	e01c      	b.n	95d54 <cl_isouf_controller+0x5d4>
			
			case CL_ISOUF_STATE_COMPLETED:
			switch(cl_isouf_event){
   95d1a:	7efb      	ldrb	r3, [r7, #27]
   95d1c:	2b09      	cmp	r3, #9
   95d1e:	d00c      	beq.n	95d3a <cl_isouf_controller+0x5ba>
   95d20:	2b16      	cmp	r3, #22
   95d22:	d000      	beq.n	95d26 <cl_isouf_controller+0x5a6>
					ufRemoved = 0;
					Cl_Isouf_start();
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
				break;
			
			default : break;	
   95d24:	e00a      	b.n	95d3c <cl_isouf_controller+0x5bc>
				
				case EVENT_ISOUF_START:
				
				//Cl_ISOufTotalSecondscounter = 0;
					//cl_dialysate_ready_isouf();
					ufRemoved = 0;
   95d26:	4b12      	ldr	r3, [pc, #72]	; (95d70 <cl_isouf_controller+0x5f0>)
   95d28:	f04f 0200 	mov.w	r2, #0
   95d2c:	601a      	str	r2, [r3, #0]
					Cl_Isouf_start();
   95d2e:	4b11      	ldr	r3, [pc, #68]	; (95d74 <cl_isouf_controller+0x5f4>)
   95d30:	4798      	blx	r3
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
   95d32:	4b0e      	ldr	r3, [pc, #56]	; (95d6c <cl_isouf_controller+0x5ec>)
   95d34:	2201      	movs	r2, #1
   95d36:	701a      	strb	r2, [r3, #0]
				break;
   95d38:	e000      	b.n	95d3c <cl_isouf_controller+0x5bc>
			case CL_ISOUF_STATE_COMPLETED:
			switch(cl_isouf_event){
				
				case EVENT_ISOUF_TICK_SECOND :
				
				break;
   95d3a:	bf00      	nop
				break;
			
			default : break;	
			
			}
			break;
   95d3c:	e00a      	b.n	95d54 <cl_isouf_controller+0x5d4>
			
			case CL_ISOUF_STATE_POST_COMPLETION:
			
			switch(cl_isouf_event){
   95d3e:	7efb      	ldrb	r3, [r7, #27]
   95d40:	2b09      	cmp	r3, #9
   95d42:	d002      	beq.n	95d4a <cl_isouf_controller+0x5ca>
   95d44:	2b0e      	cmp	r3, #14
   95d46:	d002      	beq.n	95d4e <cl_isouf_controller+0x5ce>
				
				break;
				
				
				
				default:break;
   95d48:	e002      	b.n	95d50 <cl_isouf_controller+0x5d0>
			
			switch(cl_isouf_event){
				
				case EVENT_ISOUF_TICK_SECOND :
				
				break;
   95d4a:	bf00      	nop
   95d4c:	e002      	b.n	95d54 <cl_isouf_controller+0x5d4>
				
				case EVENT_ISOUF_START_RETURN:
				
				break;
   95d4e:	bf00      	nop
				
				
				default:break;
			}
			
			break;
   95d50:	e000      	b.n	95d54 <cl_isouf_controller+0x5d4>
			
			default:break;
   95d52:	bf00      	nop
			
			
	}
	return CL_OK;
   95d54:	2300      	movs	r3, #0
	
	
}
   95d56:	4618      	mov	r0, r3
   95d58:	3740      	adds	r7, #64	; 0x40
   95d5a:	46bd      	mov	sp, r7
   95d5c:	bd80      	pop	{r7, pc}
   95d5e:	bf00      	nop
   95d60:	20072880 	.word	0x20072880
   95d64:	00094325 	.word	0x00094325
   95d68:	0009d1e9 	.word	0x0009d1e9
   95d6c:	20071c3d 	.word	0x20071c3d
   95d70:	20071c7c 	.word	0x20071c7c
   95d74:	000963c5 	.word	0x000963c5
   95d78:	00096f19 	.word	0x00096f19
   95d7c:	00097499 	.word	0x00097499
   95d80:	00095dc1 	.word	0x00095dc1
   95d84:	20071c3e 	.word	0x20071c3e
   95d88:	20071c40 	.word	0x20071c40
   95d8c:	000966b1 	.word	0x000966b1
   95d90:	000971b9 	.word	0x000971b9
   95d94:	20071c44 	.word	0x20071c44
   95d98:	0008bbb9 	.word	0x0008bbb9
   95d9c:	00096345 	.word	0x00096345
   95da0:	20071c48 	.word	0x20071c48
   95da4:	20071c46 	.word	0x20071c46
   95da8:	0008fd69 	.word	0x0008fd69
   95dac:	0009b699 	.word	0x0009b699
   95db0:	0009b685 	.word	0x0009b685
   95db4:	0009b6c1 	.word	0x0009b6c1
   95db8:	00096199 	.word	0x00096199
   95dbc:	0009b535 	.word	0x0009b535

00095dc0 <Cl_Isouf_ProcessAlarms>:




Cl_ReturnCodeType Cl_Isouf_ProcessAlarms()
{
   95dc0:	b580      	push	{r7, lr}
   95dc2:	b082      	sub	sp, #8
   95dc4:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_isoufretcode = CL_OK;
   95dc6:	2300      	movs	r3, #0
   95dc8:	71fb      	strb	r3, [r7, #7]
	ClIsoufAlarmIdType  ClIsoufAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   95dca:	2359      	movs	r3, #89	; 0x59
   95dcc:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_alarmid;
	
	cl_isouf_retcode = Cl_Isouf_UpdateAlarmTable(&ClIsoufAlarmId);
   95dce:	1d7b      	adds	r3, r7, #5
   95dd0:	4618      	mov	r0, r3
   95dd2:	4b06      	ldr	r3, [pc, #24]	; (95dec <Cl_Isouf_ProcessAlarms+0x2c>)
   95dd4:	4798      	blx	r3
   95dd6:	4603      	mov	r3, r0
   95dd8:	461a      	mov	r2, r3
   95dda:	4b05      	ldr	r3, [pc, #20]	; (95df0 <Cl_Isouf_ProcessAlarms+0x30>)
   95ddc:	701a      	strb	r2, [r3, #0]
	//   	Cl_rinseretcode =	Cl_Alarm_GetLastAlarm(&cl_rinsealarmid);
	//   	data = (Cl_Uint8Type)cl_rinsealarmid;
	//   	command = CON_TX_COMMAND_ALARM;
	//   	Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
	
	return (cl_isouf_retcode );
   95dde:	4b04      	ldr	r3, [pc, #16]	; (95df0 <Cl_Isouf_ProcessAlarms+0x30>)
   95de0:	781b      	ldrb	r3, [r3, #0]
	
}
   95de2:	4618      	mov	r0, r3
   95de4:	3708      	adds	r7, #8
   95de6:	46bd      	mov	sp, r7
   95de8:	bd80      	pop	{r7, pc}
   95dea:	bf00      	nop
   95dec:	00095df5 	.word	0x00095df5
   95df0:	20071c3e 	.word	0x20071c3e

00095df4 <Cl_Isouf_UpdateAlarmTable>:

Cl_ReturnCodeType Cl_Isouf_UpdateAlarmTable(ClIsoufAlarmIdType *ClIsoufAlarmId)
{
   95df4:	b580      	push	{r7, lr}
   95df6:	b084      	sub	sp, #16
   95df8:	af00      	add	r7, sp, #0
   95dfa:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	Cl_isoufretcode = CL_OK;
   95dfc:	2300      	movs	r3, #0
   95dfe:	73fb      	strb	r3, [r7, #15]
	Cl_NewAlarmIdType cl_alarmId;
	Cl_Uint8Type tempcount = 0;
   95e00:	2300      	movs	r3, #0
   95e02:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[2];
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   95e04:	2359      	movs	r3, #89	; 0x59
   95e06:	737b      	strb	r3, [r7, #13]
	
	for (tempcount = 0 ; tempcount < CL_ISOUF_ALRM_MAX ; tempcount++)
   95e08:	2300      	movs	r3, #0
   95e0a:	73bb      	strb	r3, [r7, #14]
   95e0c:	e065      	b.n	95eda <Cl_Isouf_UpdateAlarmTable+0xe6>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_IsoufAlarmTable[tempcount].Cl_IsoufAlarmId,&Cl_IsoufAlarmTable[tempcount].IsActive);
   95e0e:	7bba      	ldrb	r2, [r7, #14]
   95e10:	4936      	ldr	r1, [pc, #216]	; (95eec <Cl_Isouf_UpdateAlarmTable+0xf8>)
   95e12:	4613      	mov	r3, r2
   95e14:	00db      	lsls	r3, r3, #3
   95e16:	1a9b      	subs	r3, r3, r2
   95e18:	440b      	add	r3, r1
   95e1a:	7819      	ldrb	r1, [r3, #0]
   95e1c:	7bba      	ldrb	r2, [r7, #14]
   95e1e:	4613      	mov	r3, r2
   95e20:	00db      	lsls	r3, r3, #3
   95e22:	1a9b      	subs	r3, r3, r2
   95e24:	4a31      	ldr	r2, [pc, #196]	; (95eec <Cl_Isouf_UpdateAlarmTable+0xf8>)
   95e26:	4413      	add	r3, r2
   95e28:	3302      	adds	r3, #2
   95e2a:	4608      	mov	r0, r1
   95e2c:	4619      	mov	r1, r3
   95e2e:	4b30      	ldr	r3, [pc, #192]	; (95ef0 <Cl_Isouf_UpdateAlarmTable+0xfc>)
   95e30:	4798      	blx	r3
		if (Cl_IsoufAlarmTable[tempcount].IsActive)
   95e32:	7bba      	ldrb	r2, [r7, #14]
   95e34:	492d      	ldr	r1, [pc, #180]	; (95eec <Cl_Isouf_UpdateAlarmTable+0xf8>)
   95e36:	4613      	mov	r3, r2
   95e38:	00db      	lsls	r3, r3, #3
   95e3a:	1a9b      	subs	r3, r3, r2
   95e3c:	440b      	add	r3, r1
   95e3e:	789b      	ldrb	r3, [r3, #2]
   95e40:	2b00      	cmp	r3, #0
   95e42:	d020      	beq.n	95e86 <Cl_Isouf_UpdateAlarmTable+0x92>
		{
			if(!Cl_IsoufAlarmTable[tempcount].IsRaised)
   95e44:	7bba      	ldrb	r2, [r7, #14]
   95e46:	4929      	ldr	r1, [pc, #164]	; (95eec <Cl_Isouf_UpdateAlarmTable+0xf8>)
   95e48:	4613      	mov	r3, r2
   95e4a:	00db      	lsls	r3, r3, #3
   95e4c:	1a9b      	subs	r3, r3, r2
   95e4e:	440b      	add	r3, r1
   95e50:	78db      	ldrb	r3, [r3, #3]
   95e52:	f083 0301 	eor.w	r3, r3, #1
   95e56:	b2db      	uxtb	r3, r3
   95e58:	2b00      	cmp	r3, #0
   95e5a:	d03b      	beq.n	95ed4 <Cl_Isouf_UpdateAlarmTable+0xe0>
				//	data[0] = (Cl_Uint8Type)Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId;
				//	data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
				//	data[1] = (Cl_Uint8Type) CRITICAL;
				//	command = CON_TX_COMMAND_ALARM;
				//	Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);
				Cl_IsoufAlarmTable[tempcount].IsRaised = true;
   95e5c:	7bba      	ldrb	r2, [r7, #14]
   95e5e:	4923      	ldr	r1, [pc, #140]	; (95eec <Cl_Isouf_UpdateAlarmTable+0xf8>)
   95e60:	4613      	mov	r3, r2
   95e62:	00db      	lsls	r3, r3, #3
   95e64:	1a9b      	subs	r3, r3, r2
   95e66:	440b      	add	r3, r1
   95e68:	2201      	movs	r2, #1
   95e6a:	70da      	strb	r2, [r3, #3]
				Cl_isoufretcode = CL_IsoufAlarmActon(Cl_IsoufAlarmTable[tempcount].Cl_IsoufAlarmId);
   95e6c:	7bba      	ldrb	r2, [r7, #14]
   95e6e:	491f      	ldr	r1, [pc, #124]	; (95eec <Cl_Isouf_UpdateAlarmTable+0xf8>)
   95e70:	4613      	mov	r3, r2
   95e72:	00db      	lsls	r3, r3, #3
   95e74:	1a9b      	subs	r3, r3, r2
   95e76:	440b      	add	r3, r1
   95e78:	781b      	ldrb	r3, [r3, #0]
   95e7a:	4618      	mov	r0, r3
   95e7c:	4b1d      	ldr	r3, [pc, #116]	; (95ef4 <Cl_Isouf_UpdateAlarmTable+0x100>)
   95e7e:	4798      	blx	r3
   95e80:	4603      	mov	r3, r0
   95e82:	73fb      	strb	r3, [r7, #15]
   95e84:	e026      	b.n	95ed4 <Cl_Isouf_UpdateAlarmTable+0xe0>
			
		}
		else
		{
			// alarm was present before , but not active now.
			if(Cl_IsoufAlarmTable[tempcount].IsRaised == true)
   95e86:	7bba      	ldrb	r2, [r7, #14]
   95e88:	4918      	ldr	r1, [pc, #96]	; (95eec <Cl_Isouf_UpdateAlarmTable+0xf8>)
   95e8a:	4613      	mov	r3, r2
   95e8c:	00db      	lsls	r3, r3, #3
   95e8e:	1a9b      	subs	r3, r3, r2
   95e90:	440b      	add	r3, r1
   95e92:	78db      	ldrb	r3, [r3, #3]
   95e94:	2b00      	cmp	r3, #0
   95e96:	d01d      	beq.n	95ed4 <Cl_Isouf_UpdateAlarmTable+0xe0>
			{
				Cl_IsoufAlarmTable[tempcount].IsRaised = false;
   95e98:	7bba      	ldrb	r2, [r7, #14]
   95e9a:	4914      	ldr	r1, [pc, #80]	; (95eec <Cl_Isouf_UpdateAlarmTable+0xf8>)
   95e9c:	4613      	mov	r3, r2
   95e9e:	00db      	lsls	r3, r3, #3
   95ea0:	1a9b      	subs	r3, r3, r2
   95ea2:	440b      	add	r3, r1
   95ea4:	2200      	movs	r2, #0
   95ea6:	70da      	strb	r2, [r3, #3]
				command = CON_TX_COMMAND_ALARM;
   95ea8:	2307      	movs	r3, #7
   95eaa:	737b      	strb	r3, [r7, #13]
				data[0] = (Cl_Uint8Type)(Cl_IsoufAlarmTable[tempcount].Cl_IsoufAlarmId);
   95eac:	7bba      	ldrb	r2, [r7, #14]
   95eae:	490f      	ldr	r1, [pc, #60]	; (95eec <Cl_Isouf_UpdateAlarmTable+0xf8>)
   95eb0:	4613      	mov	r3, r2
   95eb2:	00db      	lsls	r3, r3, #3
   95eb4:	1a9b      	subs	r3, r3, r2
   95eb6:	440b      	add	r3, r1
   95eb8:	781b      	ldrb	r3, [r3, #0]
   95eba:	723b      	strb	r3, [r7, #8]
				data[1] = (Cl_Uint8Type) 0;
   95ebc:	2300      	movs	r3, #0
   95ebe:	727b      	strb	r3, [r7, #9]
				Cl_isoufretcode = Cl_SendDatatoconsole(command,&data,2);
   95ec0:	7b7a      	ldrb	r2, [r7, #13]
   95ec2:	f107 0308 	add.w	r3, r7, #8
   95ec6:	4610      	mov	r0, r2
   95ec8:	4619      	mov	r1, r3
   95eca:	2202      	movs	r2, #2
   95ecc:	4b0a      	ldr	r3, [pc, #40]	; (95ef8 <Cl_Isouf_UpdateAlarmTable+0x104>)
   95ece:	4798      	blx	r3
   95ed0:	4603      	mov	r3, r0
   95ed2:	73fb      	strb	r3, [r7, #15]
	Cl_NewAlarmIdType cl_alarmId;
	Cl_Uint8Type tempcount = 0;
	Cl_Uint8Type data[2];
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	for (tempcount = 0 ; tempcount < CL_ISOUF_ALRM_MAX ; tempcount++)
   95ed4:	7bbb      	ldrb	r3, [r7, #14]
   95ed6:	3301      	adds	r3, #1
   95ed8:	73bb      	strb	r3, [r7, #14]
   95eda:	7bbb      	ldrb	r3, [r7, #14]
   95edc:	2b1d      	cmp	r3, #29
   95ede:	d996      	bls.n	95e0e <Cl_Isouf_UpdateAlarmTable+0x1a>
	}
	

	

	return (Cl_isoufretcode );
   95ee0:	7bfb      	ldrb	r3, [r7, #15]
}
   95ee2:	4618      	mov	r0, r3
   95ee4:	3710      	adds	r7, #16
   95ee6:	46bd      	mov	sp, r7
   95ee8:	bd80      	pop	{r7, pc}
   95eea:	bf00      	nop
   95eec:	20070c00 	.word	0x20070c00
   95ef0:	00082c09 	.word	0x00082c09
   95ef4:	00095efd 	.word	0x00095efd
   95ef8:	0009d1e9 	.word	0x0009d1e9

00095efc <CL_IsoufAlarmActon>:


Cl_ReturnCodeType  CL_IsoufAlarmActon(Cl_NewAlarmIdType cl_isoufalarmid)
{
   95efc:	b580      	push	{r7, lr}
   95efe:	b086      	sub	sp, #24
   95f00:	af00      	add	r7, sp, #0
   95f02:	4603      	mov	r3, r0
   95f04:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType 	Cl_isoufretcode = CL_OK;
   95f06:	2300      	movs	r3, #0
   95f08:	75fb      	strb	r3, [r7, #23]
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   95f0a:	2300      	movs	r3, #0
   95f0c:	813b      	strh	r3, [r7, #8]
   95f0e:	2300      	movs	r3, #0
   95f10:	72bb      	strb	r3, [r7, #10]
   95f12:	2300      	movs	r3, #0
   95f14:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   95f16:	2359      	movs	r3, #89	; 0x59
   95f18:	73fb      	strb	r3, [r7, #15]
			Cl_Uint16Type levelswitchstatus = 0;	
   95f1a:	2300      	movs	r3, #0
   95f1c:	81bb      	strh	r3, [r7, #12]
			static Cl_Uint8Type fillseccounter = 0;
			Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   95f1e:	2300      	movs	r3, #0
   95f20:	72fb      	strb	r3, [r7, #11]
		

			

							
		switch(cl_isoufalarmid)
   95f22:	79fb      	ldrb	r3, [r7, #7]
   95f24:	3b01      	subs	r3, #1
   95f26:	2b3e      	cmp	r3, #62	; 0x3e
   95f28:	f200 810f 	bhi.w	9614a <CL_IsoufAlarmActon+0x24e>
   95f2c:	a201      	add	r2, pc, #4	; (adr r2, 95f34 <CL_IsoufAlarmActon+0x38>)
   95f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   95f32:	bf00      	nop
   95f34:	00096085 	.word	0x00096085
   95f38:	0009614b 	.word	0x0009614b
   95f3c:	0009614b 	.word	0x0009614b
   95f40:	0009614b 	.word	0x0009614b
   95f44:	000960d3 	.word	0x000960d3
   95f48:	000960d3 	.word	0x000960d3
   95f4c:	000960d3 	.word	0x000960d3
   95f50:	000960d3 	.word	0x000960d3
   95f54:	000960d3 	.word	0x000960d3
   95f58:	0009614b 	.word	0x0009614b
   95f5c:	000960d3 	.word	0x000960d3
   95f60:	000960d3 	.word	0x000960d3
   95f64:	000960d3 	.word	0x000960d3
   95f68:	000960d3 	.word	0x000960d3
   95f6c:	000960d3 	.word	0x000960d3
   95f70:	000960d3 	.word	0x000960d3
   95f74:	000960d3 	.word	0x000960d3
   95f78:	000960d3 	.word	0x000960d3
   95f7c:	000960d3 	.word	0x000960d3
   95f80:	000960d3 	.word	0x000960d3
   95f84:	000960d3 	.word	0x000960d3
   95f88:	000960d3 	.word	0x000960d3
   95f8c:	000960d3 	.word	0x000960d3
   95f90:	000960d3 	.word	0x000960d3
   95f94:	0009614b 	.word	0x0009614b
   95f98:	000960d3 	.word	0x000960d3
   95f9c:	0009614b 	.word	0x0009614b
   95fa0:	0009614b 	.word	0x0009614b
   95fa4:	00096031 	.word	0x00096031
   95fa8:	0009614b 	.word	0x0009614b
   95fac:	0009614b 	.word	0x0009614b
   95fb0:	00096085 	.word	0x00096085
   95fb4:	000960d3 	.word	0x000960d3
   95fb8:	00096085 	.word	0x00096085
   95fbc:	00096085 	.word	0x00096085
   95fc0:	00096085 	.word	0x00096085
   95fc4:	00096085 	.word	0x00096085
   95fc8:	00096085 	.word	0x00096085
   95fcc:	000960d3 	.word	0x000960d3
   95fd0:	000960d3 	.word	0x000960d3
   95fd4:	0009614b 	.word	0x0009614b
   95fd8:	000960d3 	.word	0x000960d3
   95fdc:	0009614b 	.word	0x0009614b
   95fe0:	000960d3 	.word	0x000960d3
   95fe4:	0009614b 	.word	0x0009614b
   95fe8:	0009614b 	.word	0x0009614b
   95fec:	0009614b 	.word	0x0009614b
   95ff0:	0009614b 	.word	0x0009614b
   95ff4:	0009614b 	.word	0x0009614b
   95ff8:	000960d3 	.word	0x000960d3
   95ffc:	000960d3 	.word	0x000960d3
   96000:	0009614b 	.word	0x0009614b
   96004:	0009614b 	.word	0x0009614b
   96008:	0009614b 	.word	0x0009614b
   9600c:	0009614b 	.word	0x0009614b
   96010:	0009614b 	.word	0x0009614b
   96014:	000960d3 	.word	0x000960d3
   96018:	000960d3 	.word	0x000960d3
   9601c:	000960d3 	.word	0x000960d3
   96020:	0009614b 	.word	0x0009614b
   96024:	0009614b 	.word	0x0009614b
   96028:	0009614b 	.word	0x0009614b
   9602c:	00096085 	.word	0x00096085
		{
			
			case POWER_FAILURE:
			
			isopowerFailureFlag = 1;
   96030:	4b49      	ldr	r3, [pc, #292]	; (96158 <CL_IsoufAlarmActon+0x25c>)
   96032:	2201      	movs	r2, #1
   96034:	601a      	str	r2, [r3, #0]
			sv_cntrl_setredalarm();
   96036:	4b49      	ldr	r3, [pc, #292]	; (9615c <CL_IsoufAlarmActon+0x260>)
   96038:	4798      	blx	r3
			sv_cntrl_buzzer();
   9603a:	4b49      	ldr	r3, [pc, #292]	; (96160 <CL_IsoufAlarmActon+0x264>)
   9603c:	4798      	blx	r3
			Cl_Isouf_stop();
   9603e:	4b49      	ldr	r3, [pc, #292]	; (96164 <CL_IsoufAlarmActon+0x268>)
   96040:	4798      	blx	r3
			
			 if(cl_isoufalarmid != _NO_ALARM)
   96042:	79fb      	ldrb	r3, [r7, #7]
   96044:	2b00      	cmp	r3, #0
   96046:	d01c      	beq.n	96082 <CL_IsoufAlarmActon+0x186>
			 {
				 isoufalarm = cl_isoufalarmid;
   96048:	4a47      	ldr	r2, [pc, #284]	; (96168 <CL_IsoufAlarmActon+0x26c>)
   9604a:	79fb      	ldrb	r3, [r7, #7]
   9604c:	7013      	strb	r3, [r2, #0]
				 isoufalarm1 = isoufalarm;
   9604e:	4b46      	ldr	r3, [pc, #280]	; (96168 <CL_IsoufAlarmActon+0x26c>)
   96050:	781a      	ldrb	r2, [r3, #0]
   96052:	4b46      	ldr	r3, [pc, #280]	; (9616c <CL_IsoufAlarmActon+0x270>)
   96054:	701a      	strb	r2, [r3, #0]
				 data[0] = (Cl_Uint8Type)cl_isoufalarmid;
   96056:	79fb      	ldrb	r3, [r7, #7]
   96058:	723b      	strb	r3, [r7, #8]
				 data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   9605a:	2301      	movs	r3, #1
   9605c:	727b      	strb	r3, [r7, #9]
				 data[2] = (Cl_Uint8Type)CRITICAL;
   9605e:	2302      	movs	r3, #2
   96060:	72bb      	strb	r3, [r7, #10]
				 command = CON_TX_COMMAND_ALARM;
   96062:	2307      	movs	r3, #7
   96064:	73fb      	strb	r3, [r7, #15]
				 cl_wait(10);
   96066:	200a      	movs	r0, #10
   96068:	4b41      	ldr	r3, [pc, #260]	; (96170 <CL_IsoufAlarmActon+0x274>)
   9606a:	4798      	blx	r3
				 Cl_isoufretcode = Cl_SendDatatoconsole(command,&data,3);
   9606c:	7bfa      	ldrb	r2, [r7, #15]
   9606e:	f107 0308 	add.w	r3, r7, #8
   96072:	4610      	mov	r0, r2
   96074:	4619      	mov	r1, r3
   96076:	2203      	movs	r2, #3
   96078:	4b3e      	ldr	r3, [pc, #248]	; (96174 <CL_IsoufAlarmActon+0x278>)
   9607a:	4798      	blx	r3
   9607c:	4603      	mov	r3, r0
   9607e:	75fb      	strb	r3, [r7, #23]
				 // 			data[0] = (Cl_Uint8Type)CLEANING;
				 // 			data[1] = (Cl_Uint8Type)CLEAN_CLEAN_ALARM_STOPPED;
				 // 			Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,2);
			 }
			
			break;
   96080:	e064      	b.n	9614c <CL_IsoufAlarmActon+0x250>
   96082:	e063      	b.n	9614c <CL_IsoufAlarmActon+0x250>
			case VPTSTATUS_LOW:
			case VPTSTATUS_HIGH:
			case ABD_EVENT:
			case BLD_EVENT:
							
				sv_cntrl_setredalarm();
   96084:	4b35      	ldr	r3, [pc, #212]	; (9615c <CL_IsoufAlarmActon+0x260>)
   96086:	4798      	blx	r3
				sv_cntrl_buzzer();
   96088:	4b35      	ldr	r3, [pc, #212]	; (96160 <CL_IsoufAlarmActon+0x264>)
   9608a:	4798      	blx	r3
				Cl_Isouf_safesate();	
   9608c:	4b3a      	ldr	r3, [pc, #232]	; (96178 <CL_IsoufAlarmActon+0x27c>)
   9608e:	4798      	blx	r3
				 if(cl_isoufalarmid != _NO_ALARM)
   96090:	79fb      	ldrb	r3, [r7, #7]
   96092:	2b00      	cmp	r3, #0
   96094:	d01c      	beq.n	960d0 <CL_IsoufAlarmActon+0x1d4>
				 {
					 isoufalarm = cl_isoufalarmid;
   96096:	4a34      	ldr	r2, [pc, #208]	; (96168 <CL_IsoufAlarmActon+0x26c>)
   96098:	79fb      	ldrb	r3, [r7, #7]
   9609a:	7013      	strb	r3, [r2, #0]
					 isoufalarm1 = isoufalarm;
   9609c:	4b32      	ldr	r3, [pc, #200]	; (96168 <CL_IsoufAlarmActon+0x26c>)
   9609e:	781a      	ldrb	r2, [r3, #0]
   960a0:	4b32      	ldr	r3, [pc, #200]	; (9616c <CL_IsoufAlarmActon+0x270>)
   960a2:	701a      	strb	r2, [r3, #0]
					 data[0] = (Cl_Uint8Type)cl_isoufalarmid;
   960a4:	79fb      	ldrb	r3, [r7, #7]
   960a6:	723b      	strb	r3, [r7, #8]
					 data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   960a8:	2301      	movs	r3, #1
   960aa:	727b      	strb	r3, [r7, #9]
					 data[2] = (Cl_Uint8Type)CRITICAL;
   960ac:	2302      	movs	r3, #2
   960ae:	72bb      	strb	r3, [r7, #10]
					 command = CON_TX_COMMAND_ALARM;
   960b0:	2307      	movs	r3, #7
   960b2:	73fb      	strb	r3, [r7, #15]
					 cl_wait(10);
   960b4:	200a      	movs	r0, #10
   960b6:	4b2e      	ldr	r3, [pc, #184]	; (96170 <CL_IsoufAlarmActon+0x274>)
   960b8:	4798      	blx	r3
					 Cl_isoufretcode = Cl_SendDatatoconsole(command,&data,3);
   960ba:	7bfa      	ldrb	r2, [r7, #15]
   960bc:	f107 0308 	add.w	r3, r7, #8
   960c0:	4610      	mov	r0, r2
   960c2:	4619      	mov	r1, r3
   960c4:	2203      	movs	r2, #3
   960c6:	4b2b      	ldr	r3, [pc, #172]	; (96174 <CL_IsoufAlarmActon+0x278>)
   960c8:	4798      	blx	r3
   960ca:	4603      	mov	r3, r0
   960cc:	75fb      	strb	r3, [r7, #23]
					 // 			command = CON_TX_COMMAND_CL_SYS_STATE;
					 // 			data[0] = (Cl_Uint8Type)CLEANING;
					 // 			data[1] = (Cl_Uint8Type)CLEAN_CLEAN_ALARM_STOPPED;
					 // 			Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,2);
				 }
			break;
   960ce:	e03d      	b.n	9614c <CL_IsoufAlarmActon+0x250>
   960d0:	e03c      	b.n	9614c <CL_IsoufAlarmActon+0x250>
			case TEMP1_LOW_THRESHOLD:
			case COND_STATUS_LOW:
			case COND_STATUS_HIGH:	
				// do nothing as the alarm limits were increased
			
			sv_cntrl_setyellowalarm();
   960d2:	4b2a      	ldr	r3, [pc, #168]	; (9617c <CL_IsoufAlarmActon+0x280>)
   960d4:	4798      	blx	r3
			sv_cntrl_buzzer();
   960d6:	4b22      	ldr	r3, [pc, #136]	; (96160 <CL_IsoufAlarmActon+0x264>)
   960d8:	4798      	blx	r3
			
				Cl_bc_controller(BC_EVENT_STOP);
   960da:	2005      	movs	r0, #5
   960dc:	4b28      	ldr	r3, [pc, #160]	; (96180 <CL_IsoufAlarmActon+0x284>)
   960de:	4798      	blx	r3
				sv_cntrl_deactivate_valve(VALVE_ID15);
   960e0:	200f      	movs	r0, #15
   960e2:	4b28      	ldr	r3, [pc, #160]	; (96184 <CL_IsoufAlarmActon+0x288>)
   960e4:	4798      	blx	r3
				sv_cntrl_deactivate_valve(VALVE_ID13);
   960e6:	200d      	movs	r0, #13
   960e8:	4b26      	ldr	r3, [pc, #152]	; (96184 <CL_IsoufAlarmActon+0x288>)
   960ea:	4798      	blx	r3
				sv_cntrl_activate_valve(VALVE_ID14);
   960ec:	200e      	movs	r0, #14
   960ee:	4b26      	ldr	r3, [pc, #152]	; (96188 <CL_IsoufAlarmActon+0x28c>)
   960f0:	4798      	blx	r3
				//DD_SET_VALVE(VALVE_ID1);
				sv_cntrl_deactivatepump(DCMOTOR1);
   960f2:	2001      	movs	r0, #1
   960f4:	4b25      	ldr	r3, [pc, #148]	; (9618c <CL_IsoufAlarmActon+0x290>)
   960f6:	4798      	blx	r3
				sv_cntrl_deactivatepump(DCMOTOR2);
   960f8:	2002      	movs	r0, #2
   960fa:	4b24      	ldr	r3, [pc, #144]	; (9618c <CL_IsoufAlarmActon+0x290>)
   960fc:	4798      	blx	r3
				// send alert message
				Cl_isoufretcode = sv_cntrl_poweroffheater();
   960fe:	4b24      	ldr	r3, [pc, #144]	; (96190 <CL_IsoufAlarmActon+0x294>)
   96100:	4798      	blx	r3
   96102:	4603      	mov	r3, r0
   96104:	75fb      	strb	r3, [r7, #23]
				Cl_isoufretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   96106:	2004      	movs	r0, #4
   96108:	4b22      	ldr	r3, [pc, #136]	; (96194 <CL_IsoufAlarmActon+0x298>)
   9610a:	4798      	blx	r3
   9610c:	4603      	mov	r3, r0
   9610e:	75fb      	strb	r3, [r7, #23]
				 isoufalarm = cl_isoufalarmid;
   96110:	4a15      	ldr	r2, [pc, #84]	; (96168 <CL_IsoufAlarmActon+0x26c>)
   96112:	79fb      	ldrb	r3, [r7, #7]
   96114:	7013      	strb	r3, [r2, #0]
				 isoufalarm1 = isoufalarm;
   96116:	4b14      	ldr	r3, [pc, #80]	; (96168 <CL_IsoufAlarmActon+0x26c>)
   96118:	781a      	ldrb	r2, [r3, #0]
   9611a:	4b14      	ldr	r3, [pc, #80]	; (9616c <CL_IsoufAlarmActon+0x270>)
   9611c:	701a      	strb	r2, [r3, #0]
				 data[0] = (Cl_Uint8Type)cl_isoufalarmid;
   9611e:	79fb      	ldrb	r3, [r7, #7]
   96120:	723b      	strb	r3, [r7, #8]
				 data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   96122:	2301      	movs	r3, #1
   96124:	727b      	strb	r3, [r7, #9]
				 data[2] = (Cl_Uint8Type)CRITICAL;
   96126:	2302      	movs	r3, #2
   96128:	72bb      	strb	r3, [r7, #10]
				 command = CON_TX_COMMAND_ALERT;
   9612a:	234f      	movs	r3, #79	; 0x4f
   9612c:	73fb      	strb	r3, [r7, #15]
				 cl_wait(10);
   9612e:	200a      	movs	r0, #10
   96130:	4b0f      	ldr	r3, [pc, #60]	; (96170 <CL_IsoufAlarmActon+0x274>)
   96132:	4798      	blx	r3
				 Cl_isoufretcode = Cl_SendDatatoconsole(command,&data,3);
   96134:	7bfa      	ldrb	r2, [r7, #15]
   96136:	f107 0308 	add.w	r3, r7, #8
   9613a:	4610      	mov	r0, r2
   9613c:	4619      	mov	r1, r3
   9613e:	2203      	movs	r2, #3
   96140:	4b0c      	ldr	r3, [pc, #48]	; (96174 <CL_IsoufAlarmActon+0x278>)
   96142:	4798      	blx	r3
   96144:	4603      	mov	r3, r0
   96146:	75fb      	strb	r3, [r7, #23]
				
			break;
   96148:	e000      	b.n	9614c <CL_IsoufAlarmActon+0x250>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND",4);
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
			break;*/
			
			default:
			break;
   9614a:	bf00      	nop

		}
		
return CL_OK;			
   9614c:	2300      	movs	r3, #0
}
   9614e:	4618      	mov	r0, r3
   96150:	3718      	adds	r7, #24
   96152:	46bd      	mov	sp, r7
   96154:	bd80      	pop	{r7, pc}
   96156:	bf00      	nop
   96158:	20071c48 	.word	0x20071c48
   9615c:	0009b635 	.word	0x0009b635
   96160:	0009b671 	.word	0x0009b671
   96164:	00096345 	.word	0x00096345
   96168:	200729c8 	.word	0x200729c8
   9616c:	200729c9 	.word	0x200729c9
   96170:	0009421d 	.word	0x0009421d
   96174:	0009d1e9 	.word	0x0009d1e9
   96178:	00096321 	.word	0x00096321
   9617c:	0009b649 	.word	0x0009b649
   96180:	00082ee1 	.word	0x00082ee1
   96184:	0009b409 	.word	0x0009b409
   96188:	0009b3e9 	.word	0x0009b3e9
   9618c:	0009b369 	.word	0x0009b369
   96190:	0009b3d5 	.word	0x0009b3d5
   96194:	00089381 	.word	0x00089381

00096198 <Cl_Isouf_ResetAlertsforReassertion>:

Cl_ReturnCodeType Cl_Isouf_ResetAlertsforReassertion(void )
{
   96198:	b580      	push	{r7, lr}
   9619a:	b082      	sub	sp, #8
   9619c:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   9619e:	2300      	movs	r3, #0
   961a0:	71fb      	strb	r3, [r7, #7]
	ClDlsisAlarmIdType ClDlsisAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   961a2:	2359      	movs	r3, #89	; 0x59
   961a4:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_dlsisalarmid;
	
	Cl_IsoufAlarmTable[CL_DLSIS_ALARM_HOLDER1STATUS_CLOSE].IsRaised = false;
   961a6:	4b5c      	ldr	r3, [pc, #368]	; (96318 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   961a8:	2200      	movs	r2, #0
   961aa:	70da      	strb	r2, [r3, #3]
	Cl_IsoufAlarmTable[CL_DLSIS_ALARM_HOLDER2STATUS_CLOSE].IsRaised = false;
   961ac:	4b5a      	ldr	r3, [pc, #360]	; (96318 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   961ae:	2200      	movs	r2, #0
   961b0:	729a      	strb	r2, [r3, #10]
	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
   961b2:	2005      	movs	r0, #5
   961b4:	4b59      	ldr	r3, [pc, #356]	; (9631c <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   961b6:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
   961b8:	2006      	movs	r0, #6
   961ba:	4b58      	ldr	r3, [pc, #352]	; (9631c <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   961bc:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_DLSIS_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   961be:	4b56      	ldr	r3, [pc, #344]	; (96318 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   961c0:	2200      	movs	r2, #0
   961c2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
   961c6:	2001      	movs	r0, #1
   961c8:	4b54      	ldr	r3, [pc, #336]	; (9631c <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   961ca:	4798      	blx	r3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_HIGH].IsRaised = false;
	//Cl_AlarmResetAlarm(COND_STATUS_HIGH);
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_OPEN].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_RO].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_HIGH].IsRaised = false;
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   961cc:	4b52      	ldr	r3, [pc, #328]	; (96318 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   961ce:	2200      	movs	r2, #0
   961d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   961d4:	4b50      	ldr	r3, [pc, #320]	; (96318 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   961d6:	2200      	movs	r2, #0
   961d8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   961dc:	2015      	movs	r0, #21
   961de:	4b4f      	ldr	r3, [pc, #316]	; (9631c <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   961e0:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   961e2:	2016      	movs	r0, #22
   961e4:	4b4d      	ldr	r3, [pc, #308]	; (9631c <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   961e6:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   961e8:	4b4b      	ldr	r3, [pc, #300]	; (96318 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   961ea:	2200      	movs	r2, #0
   961ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   961f0:	4b49      	ldr	r3, [pc, #292]	; (96318 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   961f2:	2200      	movs	r2, #0
   961f4:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   961f8:	2017      	movs	r0, #23
   961fa:	4b48      	ldr	r3, [pc, #288]	; (9631c <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   961fc:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   961fe:	2018      	movs	r0, #24
   96200:	4b46      	ldr	r3, [pc, #280]	; (9631c <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   96202:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   96204:	4b44      	ldr	r3, [pc, #272]	; (96318 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   96206:	2200      	movs	r2, #0
   96208:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   9620c:	4b42      	ldr	r3, [pc, #264]	; (96318 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   9620e:	2200      	movs	r2, #0
   96210:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   96214:	2027      	movs	r0, #39	; 0x27
   96216:	4b41      	ldr	r3, [pc, #260]	; (9631c <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   96218:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   9621a:	2028      	movs	r0, #40	; 0x28
   9621c:	4b3f      	ldr	r3, [pc, #252]	; (9631c <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   9621e:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_DLSIS_BDSTATUS].IsRaised = false;
   96220:	4b3d      	ldr	r3, [pc, #244]	; (96318 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   96222:	2200      	movs	r2, #0
   96224:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	Cl_AlarmResetAlarm(BD_EVENT);
   96228:	2021      	movs	r0, #33	; 0x21
   9622a:	4b3c      	ldr	r3, [pc, #240]	; (9631c <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   9622c:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_DLSIS_ABDSTATUS].IsRaised = false;
   9622e:	4b3a      	ldr	r3, [pc, #232]	; (96318 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   96230:	2200      	movs	r2, #0
   96232:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_AlarmResetAlarm(ABD_EVENT);
   96236:	2020      	movs	r0, #32
   96238:	4b38      	ldr	r3, [pc, #224]	; (9631c <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   9623a:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_DLSIS_BLDSTATUS].IsRaised = false;
   9623c:	4b36      	ldr	r3, [pc, #216]	; (96318 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   9623e:	2200      	movs	r2, #0
   96240:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	Cl_AlarmResetAlarm(BLD_EVENT);
   96244:	2022      	movs	r0, #34	; 0x22
   96246:	4b35      	ldr	r3, [pc, #212]	; (9631c <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   96248:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_DLSIS_APTSTATUS_HIGH].IsRaised = false;
   9624a:	4b33      	ldr	r3, [pc, #204]	; (96318 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   9624c:	2200      	movs	r2, #0
   9624e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	Cl_IsoufAlarmTable[CL_DLSIS_APTSTATUS_LOW].IsRaised = false;
   96252:	4b31      	ldr	r3, [pc, #196]	; (96318 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   96254:	2200      	movs	r2, #0
   96256:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	Cl_AlarmResetAlarm(APTSTATUS_HIGH);
   9625a:	2024      	movs	r0, #36	; 0x24
   9625c:	4b2f      	ldr	r3, [pc, #188]	; (9631c <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   9625e:	4798      	blx	r3
	Cl_AlarmResetAlarm(APTSTATUS_LOW);
   96260:	2023      	movs	r0, #35	; 0x23
   96262:	4b2e      	ldr	r3, [pc, #184]	; (9631c <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   96264:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_DLSIS_VPTSTATUS_HIGH].IsRaised = false;
   96266:	4b2c      	ldr	r3, [pc, #176]	; (96318 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   96268:	2200      	movs	r2, #0
   9626a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	Cl_IsoufAlarmTable[CL_DLSIS_VPTSTATUS_LOW].IsRaised = false;
   9626e:	4b2a      	ldr	r3, [pc, #168]	; (96318 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   96270:	2200      	movs	r2, #0
   96272:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	Cl_AlarmResetAlarm(VPTSTATUS_HIGH);
   96276:	2026      	movs	r0, #38	; 0x26
   96278:	4b28      	ldr	r3, [pc, #160]	; (9631c <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   9627a:	4798      	blx	r3
	Cl_AlarmResetAlarm(VPTSTATUS_LOW);
   9627c:	2025      	movs	r0, #37	; 0x25
   9627e:	4b27      	ldr	r3, [pc, #156]	; (9631c <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   96280:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_DLSIS_COND_STATUS_LOW].IsRaised = false;
   96282:	4b25      	ldr	r3, [pc, #148]	; (96318 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   96284:	2200      	movs	r2, #0
   96286:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	Cl_IsoufAlarmTable[CL_DLSIS_COND_STATUS_HIGH].IsRaised = false;
   9628a:	4b23      	ldr	r3, [pc, #140]	; (96318 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   9628c:	2200      	movs	r2, #0
   9628e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	Cl_AlarmResetAlarm(COND_STATUS_LOW);
   96292:	2007      	movs	r0, #7
   96294:	4b21      	ldr	r3, [pc, #132]	; (9631c <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   96296:	4798      	blx	r3
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   96298:	2008      	movs	r0, #8
   9629a:	4b20      	ldr	r3, [pc, #128]	; (9631c <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   9629c:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   9629e:	4b1e      	ldr	r3, [pc, #120]	; (96318 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   962a0:	2200      	movs	r2, #0
   962a2:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   962a6:	4b1c      	ldr	r3, [pc, #112]	; (96318 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   962a8:	2200      	movs	r2, #0
   962aa:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	Cl_AlarmResetAlarm(TEMP3_HIGH_THRESHOLD);
   962ae:	2013      	movs	r0, #19
   962b0:	4b1a      	ldr	r3, [pc, #104]	; (9631c <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   962b2:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP3_LOW_THRESHOLD);
   962b4:	2014      	movs	r0, #20
   962b6:	4b19      	ldr	r3, [pc, #100]	; (9631c <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   962b8:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   962ba:	4b17      	ldr	r3, [pc, #92]	; (96318 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   962bc:	2200      	movs	r2, #0
   962be:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_TEMP2_LOW_THRESHOLD].IsRaised = false;
   962c2:	4b15      	ldr	r3, [pc, #84]	; (96318 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   962c4:	2200      	movs	r2, #0
   962c6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   962ca:	2011      	movs	r0, #17
   962cc:	4b13      	ldr	r3, [pc, #76]	; (9631c <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   962ce:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   962d0:	2012      	movs	r0, #18
   962d2:	4b12      	ldr	r3, [pc, #72]	; (9631c <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   962d4:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_TEMP1_HIGH_THRESHOLD].IsRaised = false;
   962d6:	4b10      	ldr	r3, [pc, #64]	; (96318 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   962d8:	2200      	movs	r2, #0
   962da:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_TEMP1_LOW_THRESHOLD].IsRaised = false;
   962de:	4b0e      	ldr	r3, [pc, #56]	; (96318 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   962e0:	2200      	movs	r2, #0
   962e2:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	Cl_AlarmResetAlarm(TEMP1_HIGH_THRESHOLD);
   962e6:	200f      	movs	r0, #15
   962e8:	4b0c      	ldr	r3, [pc, #48]	; (9631c <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   962ea:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP1_LOW_THRESHOLD);
   962ec:	2010      	movs	r0, #16
   962ee:	4b0b      	ldr	r3, [pc, #44]	; (9631c <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   962f0:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_BP_STOPPED].IsRaised = false;
   962f2:	4b09      	ldr	r3, [pc, #36]	; (96318 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   962f4:	2200      	movs	r2, #0
   962f6:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	Cl_AlarmResetAlarm(BP_STOPPED);
   962fa:	203f      	movs	r0, #63	; 0x3f
   962fc:	4b07      	ldr	r3, [pc, #28]	; (9631c <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   962fe:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_POWER_FAILURE].IsRaised = false;
   96300:	4b05      	ldr	r3, [pc, #20]	; (96318 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   96302:	2200      	movs	r2, #0
   96304:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	Cl_AlarmResetAlarm(POWER_FAILURE);
   96308:	201d      	movs	r0, #29
   9630a:	4b04      	ldr	r3, [pc, #16]	; (9631c <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   9630c:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
	Cl_RinseAlarmTable[CL_RINSE_ALARM_LEVEL_SWITCH_LOW_TOGGLERATE].IsRaised = false;*/
	
	
	
	return (Cl_dlsisretcode);
   9630e:	79fb      	ldrb	r3, [r7, #7]
}
   96310:	4618      	mov	r0, r3
   96312:	3708      	adds	r7, #8
   96314:	46bd      	mov	sp, r7
   96316:	bd80      	pop	{r7, pc}
   96318:	20070c00 	.word	0x20070c00
   9631c:	00082b25 	.word	0x00082b25

00096320 <Cl_Isouf_safesate>:


Cl_ReturnCodeType Cl_Isouf_safesate(){
   96320:	b580      	push	{r7, lr}
   96322:	af00      	add	r7, sp, #0
	
	Cl_Isouf_stop();
   96324:	4b04      	ldr	r3, [pc, #16]	; (96338 <Cl_Isouf_safesate+0x18>)
   96326:	4798      	blx	r3
	cl_wait(10);
   96328:	200a      	movs	r0, #10
   9632a:	4b04      	ldr	r3, [pc, #16]	; (9633c <Cl_Isouf_safesate+0x1c>)
   9632c:	4798      	blx	r3
	cl_isouf_state = CL_ISOUF_STATE_CRITICAL_ALARM;
   9632e:	4b04      	ldr	r3, [pc, #16]	; (96340 <Cl_Isouf_safesate+0x20>)
   96330:	2208      	movs	r2, #8
   96332:	701a      	strb	r2, [r3, #0]
}
   96334:	4618      	mov	r0, r3
   96336:	bd80      	pop	{r7, pc}
   96338:	00096345 	.word	0x00096345
   9633c:	0009421d 	.word	0x0009421d
   96340:	20071c3d 	.word	0x20071c3d

00096344 <Cl_Isouf_stop>:
	
}



Cl_ReturnCodeType Cl_Isouf_stop(){
   96344:	b580      	push	{r7, lr}
   96346:	b082      	sub	sp, #8
   96348:	af00      	add	r7, sp, #0
	
	Cl_Uint8Type data;
	
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false);
   9634a:	2001      	movs	r0, #1
   9634c:	2100      	movs	r1, #0
   9634e:	4b14      	ldr	r3, [pc, #80]	; (963a0 <Cl_Isouf_stop+0x5c>)
   96350:	4798      	blx	r3
   96352:	4603      	mov	r3, r0
   96354:	461a      	mov	r2, r3
   96356:	4b13      	ldr	r3, [pc, #76]	; (963a4 <Cl_Isouf_stop+0x60>)
   96358:	701a      	strb	r2, [r3, #0]
// 	sv_cntrl_deactivate_valve(VALVE_ID13);
// 	sv_cntrl_deactivate_valve(VALVE_ID14);
// 	sv_cntrl_activate_valve(VALVE_ID15);
	cl_bp_controller(CL_BP_EVENT_STOP,0);
   9635a:	2004      	movs	r0, #4
   9635c:	2100      	movs	r1, #0
   9635e:	4b12      	ldr	r3, [pc, #72]	; (963a8 <Cl_Isouf_stop+0x64>)
   96360:	4798      	blx	r3
	sv_cntrl_deactivatevenousclamp();
   96362:	4b12      	ldr	r3, [pc, #72]	; (963ac <Cl_Isouf_stop+0x68>)
   96364:	4798      	blx	r3
	
	cl_uf_controller(CL_UF_EVENT_STOP,0);
   96366:	2004      	movs	r0, #4
   96368:	2100      	movs	r1, #0
   9636a:	4b11      	ldr	r3, [pc, #68]	; (963b0 <Cl_Isouf_stop+0x6c>)
   9636c:	4798      	blx	r3
	isouf = false;
   9636e:	4b11      	ldr	r3, [pc, #68]	; (963b4 <Cl_Isouf_stop+0x70>)
   96370:	2200      	movs	r2, #0
   96372:	701a      	strb	r2, [r3, #0]
	sv_cntrl_enable_bypass();
   96374:	4b10      	ldr	r3, [pc, #64]	; (963b8 <Cl_Isouf_stop+0x74>)
   96376:	4798      	blx	r3
	cl_isouf_retcode = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_ISOUF_STOPPED,&data,0);
   96378:	1dfb      	adds	r3, r7, #7
   9637a:	204c      	movs	r0, #76	; 0x4c
   9637c:	4619      	mov	r1, r3
   9637e:	2200      	movs	r2, #0
   96380:	4b0e      	ldr	r3, [pc, #56]	; (963bc <Cl_Isouf_stop+0x78>)
   96382:	4798      	blx	r3
   96384:	4603      	mov	r3, r0
   96386:	461a      	mov	r2, r3
   96388:	4b06      	ldr	r3, [pc, #24]	; (963a4 <Cl_Isouf_stop+0x60>)
   9638a:	701a      	strb	r2, [r3, #0]
	
	isouf = false;
   9638c:	4b09      	ldr	r3, [pc, #36]	; (963b4 <Cl_Isouf_stop+0x70>)
   9638e:	2200      	movs	r2, #0
   96390:	701a      	strb	r2, [r3, #0]
	cl_isouf_state = CL_ISOUF_STATE_STOPPED;
   96392:	4b0b      	ldr	r3, [pc, #44]	; (963c0 <Cl_Isouf_stop+0x7c>)
   96394:	2202      	movs	r2, #2
   96396:	701a      	strb	r2, [r3, #0]
	
}
   96398:	4618      	mov	r0, r3
   9639a:	3708      	adds	r7, #8
   9639c:	46bd      	mov	sp, r7
   9639e:	bd80      	pop	{r7, pc}
   963a0:	00082a35 	.word	0x00082a35
   963a4:	20071c3e 	.word	0x20071c3e
   963a8:	00094325 	.word	0x00094325
   963ac:	0009b549 	.word	0x0009b549
   963b0:	00097499 	.word	0x00097499
   963b4:	20071c44 	.word	0x20071c44
   963b8:	0009b595 	.word	0x0009b595
   963bc:	0009d1e9 	.word	0x0009d1e9
   963c0:	20071c3d 	.word	0x20071c3d

000963c4 <Cl_Isouf_start>:

Cl_ReturnCodeType Cl_Isouf_start(){
   963c4:	b590      	push	{r4, r7, lr}
   963c6:	b085      	sub	sp, #20
   963c8:	af02      	add	r7, sp, #8
	
	Cl_Uint8Type data;
	
	
	sv_cntrl_nobuzzer();
   963ca:	4ba8      	ldr	r3, [pc, #672]	; (9666c <Cl_Isouf_start+0x2a8>)
   963cc:	4798      	blx	r3
	sv_cntrl_resetyellowalarm();
   963ce:	4ba8      	ldr	r3, [pc, #672]	; (96670 <Cl_Isouf_start+0x2ac>)
   963d0:	4798      	blx	r3
	sv_cntrl_resetgreenalarm();
   963d2:	4ba8      	ldr	r3, [pc, #672]	; (96674 <Cl_Isouf_start+0x2b0>)
   963d4:	4798      	blx	r3
	sv_cntrl_resetredalarm();
   963d6:	4ba8      	ldr	r3, [pc, #672]	; (96678 <Cl_Isouf_start+0x2b4>)
   963d8:	4798      	blx	r3
	
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
   963da:	2001      	movs	r0, #1
   963dc:	2101      	movs	r1, #1
   963de:	4ba7      	ldr	r3, [pc, #668]	; (9667c <Cl_Isouf_start+0x2b8>)
   963e0:	4798      	blx	r3
   963e2:	4603      	mov	r3, r0
   963e4:	461a      	mov	r2, r3
   963e6:	4ba6      	ldr	r3, [pc, #664]	; (96680 <Cl_Isouf_start+0x2bc>)
   963e8:	701a      	strb	r2, [r3, #0]
	
	cl_isouf_retcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);
   963ea:	2300      	movs	r3, #0
   963ec:	9300      	str	r3, [sp, #0]
   963ee:	2001      	movs	r0, #1
   963f0:	2101      	movs	r1, #1
   963f2:	f04f 0200 	mov.w	r2, #0
   963f6:	f04f 0300 	mov.w	r3, #0
   963fa:	4ca2      	ldr	r4, [pc, #648]	; (96684 <Cl_Isouf_start+0x2c0>)
   963fc:	47a0      	blx	r4
   963fe:	4603      	mov	r3, r0
   96400:	461a      	mov	r2, r3
   96402:	4b9f      	ldr	r3, [pc, #636]	; (96680 <Cl_Isouf_start+0x2bc>)
   96404:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);
   96406:	2300      	movs	r3, #0
   96408:	9300      	str	r3, [sp, #0]
   9640a:	2029      	movs	r0, #41	; 0x29
   9640c:	2100      	movs	r1, #0
   9640e:	f04f 0200 	mov.w	r2, #0
   96412:	f04f 0300 	mov.w	r3, #0
   96416:	4c9b      	ldr	r4, [pc, #620]	; (96684 <Cl_Isouf_start+0x2c0>)
   96418:	47a0      	blx	r4
   9641a:	4603      	mov	r3, r0
   9641c:	461a      	mov	r2, r3
   9641e:	4b98      	ldr	r3, [pc, #608]	; (96680 <Cl_Isouf_start+0x2bc>)
   96420:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);
   96422:	2300      	movs	r3, #0
   96424:	9300      	str	r3, [sp, #0]
   96426:	202b      	movs	r0, #43	; 0x2b
   96428:	2100      	movs	r1, #0
   9642a:	f04f 0200 	mov.w	r2, #0
   9642e:	f04f 0300 	mov.w	r3, #0
   96432:	4c94      	ldr	r4, [pc, #592]	; (96684 <Cl_Isouf_start+0x2c0>)
   96434:	47a0      	blx	r4
   96436:	4603      	mov	r3, r0
   96438:	461a      	mov	r2, r3
   9643a:	4b91      	ldr	r3, [pc, #580]	; (96680 <Cl_Isouf_start+0x2bc>)
   9643c:	701a      	strb	r2, [r3, #0]
	
	
	//Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   9643e:	203d      	movs	r0, #61	; 0x3d
   96440:	2101      	movs	r1, #1
   96442:	4b8e      	ldr	r3, [pc, #568]	; (9667c <Cl_Isouf_start+0x2b8>)
   96444:	4798      	blx	r3
   96446:	4603      	mov	r3, r0
   96448:	461a      	mov	r2, r3
   9644a:	4b8d      	ldr	r3, [pc, #564]	; (96680 <Cl_Isouf_start+0x2bc>)
   9644c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,true);
   9644e:	203e      	movs	r0, #62	; 0x3e
   96450:	2101      	movs	r1, #1
   96452:	4b8a      	ldr	r3, [pc, #552]	; (9667c <Cl_Isouf_start+0x2b8>)
   96454:	4798      	blx	r3
   96456:	4603      	mov	r3, r0
   96458:	461a      	mov	r2, r3
   9645a:	4b89      	ldr	r3, [pc, #548]	; (96680 <Cl_Isouf_start+0x2bc>)
   9645c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,true );
   9645e:	2005      	movs	r0, #5
   96460:	2101      	movs	r1, #1
   96462:	4b86      	ldr	r3, [pc, #536]	; (9667c <Cl_Isouf_start+0x2b8>)
   96464:	4798      	blx	r3
   96466:	4603      	mov	r3, r0
   96468:	461a      	mov	r2, r3
   9646a:	4b85      	ldr	r3, [pc, #532]	; (96680 <Cl_Isouf_start+0x2bc>)
   9646c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,true );
   9646e:	2006      	movs	r0, #6
   96470:	2101      	movs	r1, #1
   96472:	4b82      	ldr	r3, [pc, #520]	; (9667c <Cl_Isouf_start+0x2b8>)
   96474:	4798      	blx	r3
   96476:	4603      	mov	r3, r0
   96478:	461a      	mov	r2, r3
   9647a:	4b81      	ldr	r3, [pc, #516]	; (96680 <Cl_Isouf_start+0x2bc>)
   9647c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   9647e:	2003      	movs	r0, #3
   96480:	2100      	movs	r1, #0
   96482:	4b7e      	ldr	r3, [pc, #504]	; (9667c <Cl_Isouf_start+0x2b8>)
   96484:	4798      	blx	r3
   96486:	4603      	mov	r3, r0
   96488:	461a      	mov	r2, r3
   9648a:	4b7d      	ldr	r3, [pc, #500]	; (96680 <Cl_Isouf_start+0x2bc>)
   9648c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   9648e:	2004      	movs	r0, #4
   96490:	2100      	movs	r1, #0
   96492:	4b7a      	ldr	r3, [pc, #488]	; (9667c <Cl_Isouf_start+0x2b8>)
   96494:	4798      	blx	r3
   96496:	4603      	mov	r3, r0
   96498:	461a      	mov	r2, r3
   9649a:	4b79      	ldr	r3, [pc, #484]	; (96680 <Cl_Isouf_start+0x2bc>)
   9649c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   9649e:	2007      	movs	r0, #7
   964a0:	2100      	movs	r1, #0
   964a2:	4b76      	ldr	r3, [pc, #472]	; (9667c <Cl_Isouf_start+0x2b8>)
   964a4:	4798      	blx	r3
   964a6:	4603      	mov	r3, r0
   964a8:	461a      	mov	r2, r3
   964aa:	4b75      	ldr	r3, [pc, #468]	; (96680 <Cl_Isouf_start+0x2bc>)
   964ac:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   964ae:	2008      	movs	r0, #8
   964b0:	2100      	movs	r1, #0
   964b2:	4b72      	ldr	r3, [pc, #456]	; (9667c <Cl_Isouf_start+0x2b8>)
   964b4:	4798      	blx	r3
   964b6:	4603      	mov	r3, r0
   964b8:	461a      	mov	r2, r3
   964ba:	4b71      	ldr	r3, [pc, #452]	; (96680 <Cl_Isouf_start+0x2bc>)
   964bc:	701a      	strb	r2, [r3, #0]
	//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_OPEN,true );
	//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_RO,true );
	//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_HIGH,true );
	cl_isouf_retcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
   964be:	2020      	movs	r0, #32
   964c0:	2101      	movs	r1, #1
   964c2:	4b6e      	ldr	r3, [pc, #440]	; (9667c <Cl_Isouf_start+0x2b8>)
   964c4:	4798      	blx	r3
   964c6:	4603      	mov	r3, r0
   964c8:	461a      	mov	r2, r3
   964ca:	4b6d      	ldr	r3, [pc, #436]	; (96680 <Cl_Isouf_start+0x2bc>)
   964cc:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   964ce:	2021      	movs	r0, #33	; 0x21
   964d0:	2100      	movs	r1, #0
   964d2:	4b6a      	ldr	r3, [pc, #424]	; (9667c <Cl_Isouf_start+0x2b8>)
   964d4:	4798      	blx	r3
   964d6:	4603      	mov	r3, r0
   964d8:	461a      	mov	r2, r3
   964da:	4b69      	ldr	r3, [pc, #420]	; (96680 <Cl_Isouf_start+0x2bc>)
   964dc:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,false );
   964de:	2024      	movs	r0, #36	; 0x24
   964e0:	2100      	movs	r1, #0
   964e2:	4b66      	ldr	r3, [pc, #408]	; (9667c <Cl_Isouf_start+0x2b8>)
   964e4:	4798      	blx	r3
   964e6:	4603      	mov	r3, r0
   964e8:	461a      	mov	r2, r3
   964ea:	4b65      	ldr	r3, [pc, #404]	; (96680 <Cl_Isouf_start+0x2bc>)
   964ec:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,false);
   964ee:	2026      	movs	r0, #38	; 0x26
   964f0:	2100      	movs	r1, #0
   964f2:	4b62      	ldr	r3, [pc, #392]	; (9667c <Cl_Isouf_start+0x2b8>)
   964f4:	4798      	blx	r3
   964f6:	4603      	mov	r3, r0
   964f8:	461a      	mov	r2, r3
   964fa:	4b61      	ldr	r3, [pc, #388]	; (96680 <Cl_Isouf_start+0x2bc>)
   964fc:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,false );
   964fe:	2023      	movs	r0, #35	; 0x23
   96500:	2100      	movs	r1, #0
   96502:	4b5e      	ldr	r3, [pc, #376]	; (9667c <Cl_Isouf_start+0x2b8>)
   96504:	4798      	blx	r3
   96506:	4603      	mov	r3, r0
   96508:	461a      	mov	r2, r3
   9650a:	4b5d      	ldr	r3, [pc, #372]	; (96680 <Cl_Isouf_start+0x2bc>)
   9650c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,false);
   9650e:	2025      	movs	r0, #37	; 0x25
   96510:	2100      	movs	r1, #0
   96512:	4b5a      	ldr	r3, [pc, #360]	; (9667c <Cl_Isouf_start+0x2b8>)
   96514:	4798      	blx	r3
   96516:	4603      	mov	r3, r0
   96518:	461a      	mov	r2, r3
   9651a:	4b59      	ldr	r3, [pc, #356]	; (96680 <Cl_Isouf_start+0x2bc>)
   9651c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms( BLD_EVENT,true );
   9651e:	2022      	movs	r0, #34	; 0x22
   96520:	2101      	movs	r1, #1
   96522:	4b56      	ldr	r3, [pc, #344]	; (9667c <Cl_Isouf_start+0x2b8>)
   96524:	4798      	blx	r3
   96526:	4603      	mov	r3, r0
   96528:	461a      	mov	r2, r3
   9652a:	4b55      	ldr	r3, [pc, #340]	; (96680 <Cl_Isouf_start+0x2bc>)
   9652c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
   9652e:	2017      	movs	r0, #23
   96530:	2100      	movs	r1, #0
   96532:	4b52      	ldr	r3, [pc, #328]	; (9667c <Cl_Isouf_start+0x2b8>)
   96534:	4798      	blx	r3
   96536:	4603      	mov	r3, r0
   96538:	461a      	mov	r2, r3
   9653a:	4b51      	ldr	r3, [pc, #324]	; (96680 <Cl_Isouf_start+0x2bc>)
   9653c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
   9653e:	2018      	movs	r0, #24
   96540:	2100      	movs	r1, #0
   96542:	4b4e      	ldr	r3, [pc, #312]	; (9667c <Cl_Isouf_start+0x2b8>)
   96544:	4798      	blx	r3
   96546:	4603      	mov	r3, r0
   96548:	461a      	mov	r2, r3
   9654a:	4b4d      	ldr	r3, [pc, #308]	; (96680 <Cl_Isouf_start+0x2bc>)
   9654c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,false );
   9654e:	2015      	movs	r0, #21
   96550:	2100      	movs	r1, #0
   96552:	4b4a      	ldr	r3, [pc, #296]	; (9667c <Cl_Isouf_start+0x2b8>)
   96554:	4798      	blx	r3
   96556:	4603      	mov	r3, r0
   96558:	461a      	mov	r2, r3
   9655a:	4b49      	ldr	r3, [pc, #292]	; (96680 <Cl_Isouf_start+0x2bc>)
   9655c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,false );
   9655e:	2016      	movs	r0, #22
   96560:	2100      	movs	r1, #0
   96562:	4b46      	ldr	r3, [pc, #280]	; (9667c <Cl_Isouf_start+0x2b8>)
   96564:	4798      	blx	r3
   96566:	4603      	mov	r3, r0
   96568:	461a      	mov	r2, r3
   9656a:	4b45      	ldr	r3, [pc, #276]	; (96680 <Cl_Isouf_start+0x2bc>)
   9656c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD ,false);
   9656e:	2027      	movs	r0, #39	; 0x27
   96570:	2100      	movs	r1, #0
   96572:	4b42      	ldr	r3, [pc, #264]	; (9667c <Cl_Isouf_start+0x2b8>)
   96574:	4798      	blx	r3
   96576:	4603      	mov	r3, r0
   96578:	461a      	mov	r2, r3
   9657a:	4b41      	ldr	r3, [pc, #260]	; (96680 <Cl_Isouf_start+0x2bc>)
   9657c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD ,false);
   9657e:	2028      	movs	r0, #40	; 0x28
   96580:	2100      	movs	r1, #0
   96582:	4b3e      	ldr	r3, [pc, #248]	; (9667c <Cl_Isouf_start+0x2b8>)
   96584:	4798      	blx	r3
   96586:	4603      	mov	r3, r0
   96588:	461a      	mov	r2, r3
   9658a:	4b3d      	ldr	r3, [pc, #244]	; (96680 <Cl_Isouf_start+0x2bc>)
   9658c:	701a      	strb	r2, [r3, #0]
	
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP3STATUS,false );
   9658e:	2014      	movs	r0, #20
   96590:	2100      	movs	r1, #0
   96592:	4b3a      	ldr	r3, [pc, #232]	; (9667c <Cl_Isouf_start+0x2b8>)
   96594:	4798      	blx	r3
   96596:	4603      	mov	r3, r0
   96598:	461a      	mov	r2, r3
   9659a:	4b39      	ldr	r3, [pc, #228]	; (96680 <Cl_Isouf_start+0x2bc>)
   9659c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP2STATUS,false );
   9659e:	2013      	movs	r0, #19
   965a0:	2100      	movs	r1, #0
   965a2:	4b36      	ldr	r3, [pc, #216]	; (9667c <Cl_Isouf_start+0x2b8>)
   965a4:	4798      	blx	r3
   965a6:	4603      	mov	r3, r0
   965a8:	461a      	mov	r2, r3
   965aa:	4b35      	ldr	r3, [pc, #212]	; (96680 <Cl_Isouf_start+0x2bc>)
   965ac:	701a      	strb	r2, [r3, #0]
	
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,false );
   965ae:	200f      	movs	r0, #15
   965b0:	2100      	movs	r1, #0
   965b2:	4b32      	ldr	r3, [pc, #200]	; (9667c <Cl_Isouf_start+0x2b8>)
   965b4:	4798      	blx	r3
   965b6:	4603      	mov	r3, r0
   965b8:	461a      	mov	r2, r3
   965ba:	4b31      	ldr	r3, [pc, #196]	; (96680 <Cl_Isouf_start+0x2bc>)
   965bc:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,false );
   965be:	2010      	movs	r0, #16
   965c0:	2100      	movs	r1, #0
   965c2:	4b2e      	ldr	r3, [pc, #184]	; (9667c <Cl_Isouf_start+0x2b8>)
   965c4:	4798      	blx	r3
   965c6:	4603      	mov	r3, r0
   965c8:	461a      	mov	r2, r3
   965ca:	4b2d      	ldr	r3, [pc, #180]	; (96680 <Cl_Isouf_start+0x2bc>)
   965cc:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,false );
   965ce:	2011      	movs	r0, #17
   965d0:	2100      	movs	r1, #0
   965d2:	4b2a      	ldr	r3, [pc, #168]	; (9667c <Cl_Isouf_start+0x2b8>)
   965d4:	4798      	blx	r3
   965d6:	4603      	mov	r3, r0
   965d8:	461a      	mov	r2, r3
   965da:	4b29      	ldr	r3, [pc, #164]	; (96680 <Cl_Isouf_start+0x2bc>)
   965dc:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,false );
   965de:	2012      	movs	r0, #18
   965e0:	2100      	movs	r1, #0
   965e2:	4b26      	ldr	r3, [pc, #152]	; (9667c <Cl_Isouf_start+0x2b8>)
   965e4:	4798      	blx	r3
   965e6:	4603      	mov	r3, r0
   965e8:	461a      	mov	r2, r3
   965ea:	4b25      	ldr	r3, [pc, #148]	; (96680 <Cl_Isouf_start+0x2bc>)
   965ec:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   965ee:	2013      	movs	r0, #19
   965f0:	2100      	movs	r1, #0
   965f2:	4b22      	ldr	r3, [pc, #136]	; (9667c <Cl_Isouf_start+0x2b8>)
   965f4:	4798      	blx	r3
   965f6:	4603      	mov	r3, r0
   965f8:	461a      	mov	r2, r3
   965fa:	4b21      	ldr	r3, [pc, #132]	; (96680 <Cl_Isouf_start+0x2bc>)
   965fc:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   965fe:	2014      	movs	r0, #20
   96600:	2100      	movs	r1, #0
   96602:	4b1e      	ldr	r3, [pc, #120]	; (9667c <Cl_Isouf_start+0x2b8>)
   96604:	4798      	blx	r3
   96606:	4603      	mov	r3, r0
   96608:	461a      	mov	r2, r3
   9660a:	4b1d      	ldr	r3, [pc, #116]	; (96680 <Cl_Isouf_start+0x2bc>)
   9660c:	701a      	strb	r2, [r3, #0]
	
	Cl_ISOufTotalSecondscounter = 0;
   9660e:	4b1e      	ldr	r3, [pc, #120]	; (96688 <Cl_Isouf_start+0x2c4>)
   96610:	2200      	movs	r2, #0
   96612:	601a      	str	r2, [r3, #0]
	//	cl_dialysate_ready_isouf();
	sv_cntrl_deactivate_valve(VALVE_ID13);
   96614:	200d      	movs	r0, #13
   96616:	4b1d      	ldr	r3, [pc, #116]	; (9668c <Cl_Isouf_start+0x2c8>)
   96618:	4798      	blx	r3
	sv_cntrl_activate_valve(VALVE_ID14);
   9661a:	200e      	movs	r0, #14
   9661c:	4b1c      	ldr	r3, [pc, #112]	; (96690 <Cl_Isouf_start+0x2cc>)
   9661e:	4798      	blx	r3
	sv_cntrl_deactivate_valve(VALVE_ID15);
   96620:	200f      	movs	r0, #15
   96622:	4b1a      	ldr	r3, [pc, #104]	; (9668c <Cl_Isouf_start+0x2c8>)
   96624:	4798      	blx	r3
	cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
   96626:	200b      	movs	r0, #11
   96628:	2100      	movs	r1, #0
   9662a:	4b1a      	ldr	r3, [pc, #104]	; (96694 <Cl_Isouf_start+0x2d0>)
   9662c:	4798      	blx	r3
	cl_bp_controller(CL_BP_EVENT_START,0);
   9662e:	2002      	movs	r0, #2
   96630:	2100      	movs	r1, #0
   96632:	4b19      	ldr	r3, [pc, #100]	; (96698 <Cl_Isouf_start+0x2d4>)
   96634:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_START,0);
   96636:	2002      	movs	r0, #2
   96638:	2100      	movs	r1, #0
   9663a:	4b18      	ldr	r3, [pc, #96]	; (9669c <Cl_Isouf_start+0x2d8>)
   9663c:	4798      	blx	r3
	
	
	isouf = true;
   9663e:	4b18      	ldr	r3, [pc, #96]	; (966a0 <Cl_Isouf_start+0x2dc>)
   96640:	2201      	movs	r2, #1
   96642:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_ISOUF_STARTED,&data,0);
   96644:	1dfb      	adds	r3, r7, #7
   96646:	204b      	movs	r0, #75	; 0x4b
   96648:	4619      	mov	r1, r3
   9664a:	2200      	movs	r2, #0
   9664c:	4b15      	ldr	r3, [pc, #84]	; (966a4 <Cl_Isouf_start+0x2e0>)
   9664e:	4798      	blx	r3
   96650:	4603      	mov	r3, r0
   96652:	461a      	mov	r2, r3
   96654:	4b0a      	ldr	r3, [pc, #40]	; (96680 <Cl_Isouf_start+0x2bc>)
   96656:	701a      	strb	r2, [r3, #0]
	cl_wait(10);
   96658:	200a      	movs	r0, #10
   9665a:	4b13      	ldr	r3, [pc, #76]	; (966a8 <Cl_Isouf_start+0x2e4>)
   9665c:	4798      	blx	r3
		Cl_Iso_UpdateTimeInfo();
   9665e:	4b13      	ldr	r3, [pc, #76]	; (966ac <Cl_Isouf_start+0x2e8>)
   96660:	4798      	blx	r3
}
   96662:	4618      	mov	r0, r3
   96664:	370c      	adds	r7, #12
   96666:	46bd      	mov	sp, r7
   96668:	bd90      	pop	{r4, r7, pc}
   9666a:	bf00      	nop
   9666c:	0009b6c1 	.word	0x0009b6c1
   96670:	0009b699 	.word	0x0009b699
   96674:	0009b6ad 	.word	0x0009b6ad
   96678:	0009b685 	.word	0x0009b685
   9667c:	00082a35 	.word	0x00082a35
   96680:	20071c3e 	.word	0x20071c3e
   96684:	000829dd 	.word	0x000829dd
   96688:	20071c40 	.word	0x20071c40
   9668c:	0009b409 	.word	0x0009b409
   96690:	0009b3e9 	.word	0x0009b3e9
   96694:	00094b61 	.word	0x00094b61
   96698:	00094325 	.word	0x00094325
   9669c:	00097499 	.word	0x00097499
   966a0:	20071c44 	.word	0x20071c44
   966a4:	0009d1e9 	.word	0x0009d1e9
   966a8:	0009421d 	.word	0x0009421d
   966ac:	00096ec1 	.word	0x00096ec1

000966b0 <Cl_Iso_Senddata>:

Cl_ReturnCodeType Cl_Iso_Senddata(){
   966b0:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   966b4:	b093      	sub	sp, #76	; 0x4c
   966b6:	af00      	add	r7, sp, #0
	
	static float cond = 0;
	Cl_Uint8Type systemdataarray[44] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   966b8:	f107 030c 	add.w	r3, r7, #12
   966bc:	2200      	movs	r2, #0
   966be:	601a      	str	r2, [r3, #0]
   966c0:	3304      	adds	r3, #4
   966c2:	2200      	movs	r2, #0
   966c4:	601a      	str	r2, [r3, #0]
   966c6:	3304      	adds	r3, #4
   966c8:	2200      	movs	r2, #0
   966ca:	601a      	str	r2, [r3, #0]
   966cc:	3304      	adds	r3, #4
   966ce:	2200      	movs	r2, #0
   966d0:	601a      	str	r2, [r3, #0]
   966d2:	3304      	adds	r3, #4
   966d4:	2200      	movs	r2, #0
   966d6:	601a      	str	r2, [r3, #0]
   966d8:	3304      	adds	r3, #4
   966da:	2200      	movs	r2, #0
   966dc:	601a      	str	r2, [r3, #0]
   966de:	3304      	adds	r3, #4
   966e0:	2200      	movs	r2, #0
   966e2:	601a      	str	r2, [r3, #0]
   966e4:	3304      	adds	r3, #4
   966e6:	2200      	movs	r2, #0
   966e8:	601a      	str	r2, [r3, #0]
   966ea:	3304      	adds	r3, #4
   966ec:	2200      	movs	r2, #0
   966ee:	601a      	str	r2, [r3, #0]
   966f0:	3304      	adds	r3, #4
   966f2:	2200      	movs	r2, #0
   966f4:	601a      	str	r2, [r3, #0]
   966f6:	3304      	adds	r3, #4
   966f8:	2200      	movs	r2, #0
   966fa:	601a      	str	r2, [r3, #0]
   966fc:	3304      	adds	r3, #4
	cl_IsoUfDatatype tempdata;
	Cl_Uint16Type temp=0, temp1=0;
   966fe:	2300      	movs	r3, #0
   96700:	807b      	strh	r3, [r7, #2]
   96702:	2300      	movs	r3, #0
   96704:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	static float avgtmp3=0,apt=0,vpt=0,ps1=0,ps2=0;
	static Cl_Uint32Type timecount = 0;
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   96708:	2300      	movs	r3, #0
   9670a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	Cl_Uint8Type count = 0;
   9670e:	2300      	movs	r3, #0
   96710:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   96714:	2359      	movs	r3, #89	; 0x59
   96716:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	Cl_Uint16Type sensordatamillivolts;
	command = CON_TX_COMMAND_CL_SYS_STATE_DATA ;
   9671a:	232a      	movs	r3, #42	; 0x2a
   9671c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	systemdataarray[0] = ISOUF_DATA;
   96720:	230c      	movs	r3, #12
   96722:	733b      	strb	r3, [r7, #12]
	count++;
   96724:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96728:	3301      	adds	r3, #1
   9672a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	APT,
	VPT,
	TMP,
	UF_REMOVED
	*/
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   9672e:	1cbb      	adds	r3, r7, #2
   96730:	2014      	movs	r0, #20
   96732:	4619      	mov	r1, r3
   96734:	4b6e      	ldr	r3, [pc, #440]	; (968f0 <Cl_Iso_Senddata+0x240>)
   96736:	4798      	blx	r3
// 							//	tmp3 =	(tmp3*5 + res_temp_value)/6;
// //							temp1 = res_temp_value/10;
// //							temp1 = temp1 - 31 -20;
// //							avgtmp3 =(avgtmp3*5 + temp1)/6;
// 							avgtmp3 = (res_temp_value  - 0.4)/10;
							avgtmp3 = (float)temp/10;
   96738:	887a      	ldrh	r2, [r7, #2]
   9673a:	4b6e      	ldr	r3, [pc, #440]	; (968f4 <Cl_Iso_Senddata+0x244>)
   9673c:	4610      	mov	r0, r2
   9673e:	4798      	blx	r3
   96740:	4602      	mov	r2, r0
   96742:	4b6d      	ldr	r3, [pc, #436]	; (968f8 <Cl_Iso_Senddata+0x248>)
   96744:	4610      	mov	r0, r2
   96746:	496d      	ldr	r1, [pc, #436]	; (968fc <Cl_Iso_Senddata+0x24c>)
   96748:	4798      	blx	r3
   9674a:	4603      	mov	r3, r0
   9674c:	461a      	mov	r2, r3
   9674e:	4b6c      	ldr	r3, [pc, #432]	; (96900 <Cl_Iso_Senddata+0x250>)
   96750:	601a      	str	r2, [r3, #0]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&temp);
   96752:	1cbb      	adds	r3, r7, #2
   96754:	2007      	movs	r0, #7
   96756:	4619      	mov	r1, r3
   96758:	4b65      	ldr	r3, [pc, #404]	; (968f0 <Cl_Iso_Senddata+0x240>)
   9675a:	4798      	blx	r3
		{
			float cond_comp;
				float temp2;
				
				if (temp > 50)
   9675c:	887b      	ldrh	r3, [r7, #2]
   9675e:	2b32      	cmp	r3, #50	; 0x32
   96760:	f240 80e6 	bls.w	96930 <Cl_Iso_Senddata+0x280>
			{
				//	calibration_cond(temp);
					cond =  -0.0001 * temp* temp  + 0.36 * temp  - 38.39 ;
   96764:	887b      	ldrh	r3, [r7, #2]
   96766:	461a      	mov	r2, r3
   96768:	4b66      	ldr	r3, [pc, #408]	; (96904 <Cl_Iso_Senddata+0x254>)
   9676a:	4610      	mov	r0, r2
   9676c:	4798      	blx	r3
   9676e:	4602      	mov	r2, r0
   96770:	460b      	mov	r3, r1
   96772:	4c65      	ldr	r4, [pc, #404]	; (96908 <Cl_Iso_Senddata+0x258>)
   96774:	4610      	mov	r0, r2
   96776:	4619      	mov	r1, r3
   96778:	a355      	add	r3, pc, #340	; (adr r3, 968d0 <Cl_Iso_Senddata+0x220>)
   9677a:	e9d3 2300 	ldrd	r2, r3, [r3]
   9677e:	47a0      	blx	r4
   96780:	4602      	mov	r2, r0
   96782:	460b      	mov	r3, r1
   96784:	4690      	mov	r8, r2
   96786:	4699      	mov	r9, r3
   96788:	887b      	ldrh	r3, [r7, #2]
   9678a:	461a      	mov	r2, r3
   9678c:	4b5d      	ldr	r3, [pc, #372]	; (96904 <Cl_Iso_Senddata+0x254>)
   9678e:	4610      	mov	r0, r2
   96790:	4798      	blx	r3
   96792:	4602      	mov	r2, r0
   96794:	460b      	mov	r3, r1
   96796:	4c5c      	ldr	r4, [pc, #368]	; (96908 <Cl_Iso_Senddata+0x258>)
   96798:	4640      	mov	r0, r8
   9679a:	4649      	mov	r1, r9
   9679c:	47a0      	blx	r4
   9679e:	4602      	mov	r2, r0
   967a0:	460b      	mov	r3, r1
   967a2:	4690      	mov	r8, r2
   967a4:	4699      	mov	r9, r3
   967a6:	887b      	ldrh	r3, [r7, #2]
   967a8:	461a      	mov	r2, r3
   967aa:	4b56      	ldr	r3, [pc, #344]	; (96904 <Cl_Iso_Senddata+0x254>)
   967ac:	4610      	mov	r0, r2
   967ae:	4798      	blx	r3
   967b0:	4602      	mov	r2, r0
   967b2:	460b      	mov	r3, r1
   967b4:	4c54      	ldr	r4, [pc, #336]	; (96908 <Cl_Iso_Senddata+0x258>)
   967b6:	4610      	mov	r0, r2
   967b8:	4619      	mov	r1, r3
   967ba:	a347      	add	r3, pc, #284	; (adr r3, 968d8 <Cl_Iso_Senddata+0x228>)
   967bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   967c0:	47a0      	blx	r4
   967c2:	4602      	mov	r2, r0
   967c4:	460b      	mov	r3, r1
   967c6:	4c51      	ldr	r4, [pc, #324]	; (9690c <Cl_Iso_Senddata+0x25c>)
   967c8:	4640      	mov	r0, r8
   967ca:	4649      	mov	r1, r9
   967cc:	47a0      	blx	r4
   967ce:	4602      	mov	r2, r0
   967d0:	460b      	mov	r3, r1
   967d2:	4c4f      	ldr	r4, [pc, #316]	; (96910 <Cl_Iso_Senddata+0x260>)
   967d4:	4610      	mov	r0, r2
   967d6:	4619      	mov	r1, r3
   967d8:	a341      	add	r3, pc, #260	; (adr r3, 968e0 <Cl_Iso_Senddata+0x230>)
   967da:	e9d3 2300 	ldrd	r2, r3, [r3]
   967de:	47a0      	blx	r4
   967e0:	4602      	mov	r2, r0
   967e2:	460b      	mov	r3, r1
   967e4:	4610      	mov	r0, r2
   967e6:	4619      	mov	r1, r3
   967e8:	4b4a      	ldr	r3, [pc, #296]	; (96914 <Cl_Iso_Senddata+0x264>)
   967ea:	4798      	blx	r3
   967ec:	4602      	mov	r2, r0
   967ee:	4b4a      	ldr	r3, [pc, #296]	; (96918 <Cl_Iso_Senddata+0x268>)
   967f0:	601a      	str	r2, [r3, #0]
				//	cond =(cond*5 + cond_final_cs3)/6;
					cond_comp= cond/(1+(avgtmp3/10-25.0)*0.020);
   967f2:	4b49      	ldr	r3, [pc, #292]	; (96918 <Cl_Iso_Senddata+0x268>)
   967f4:	681a      	ldr	r2, [r3, #0]
   967f6:	4b49      	ldr	r3, [pc, #292]	; (9691c <Cl_Iso_Senddata+0x26c>)
   967f8:	4610      	mov	r0, r2
   967fa:	4798      	blx	r3
   967fc:	4680      	mov	r8, r0
   967fe:	4689      	mov	r9, r1
   96800:	4b3f      	ldr	r3, [pc, #252]	; (96900 <Cl_Iso_Senddata+0x250>)
   96802:	681a      	ldr	r2, [r3, #0]
   96804:	4b3c      	ldr	r3, [pc, #240]	; (968f8 <Cl_Iso_Senddata+0x248>)
   96806:	4610      	mov	r0, r2
   96808:	493c      	ldr	r1, [pc, #240]	; (968fc <Cl_Iso_Senddata+0x24c>)
   9680a:	4798      	blx	r3
   9680c:	4603      	mov	r3, r0
   9680e:	461a      	mov	r2, r3
   96810:	4b42      	ldr	r3, [pc, #264]	; (9691c <Cl_Iso_Senddata+0x26c>)
   96812:	4610      	mov	r0, r2
   96814:	4798      	blx	r3
   96816:	4602      	mov	r2, r0
   96818:	460b      	mov	r3, r1
   9681a:	4c3d      	ldr	r4, [pc, #244]	; (96910 <Cl_Iso_Senddata+0x260>)
   9681c:	4610      	mov	r0, r2
   9681e:	4619      	mov	r1, r3
   96820:	f04f 0200 	mov.w	r2, #0
   96824:	4b3e      	ldr	r3, [pc, #248]	; (96920 <Cl_Iso_Senddata+0x270>)
   96826:	47a0      	blx	r4
   96828:	4602      	mov	r2, r0
   9682a:	460b      	mov	r3, r1
   9682c:	4c36      	ldr	r4, [pc, #216]	; (96908 <Cl_Iso_Senddata+0x258>)
   9682e:	4610      	mov	r0, r2
   96830:	4619      	mov	r1, r3
   96832:	a32d      	add	r3, pc, #180	; (adr r3, 968e8 <Cl_Iso_Senddata+0x238>)
   96834:	e9d3 2300 	ldrd	r2, r3, [r3]
   96838:	47a0      	blx	r4
   9683a:	4602      	mov	r2, r0
   9683c:	460b      	mov	r3, r1
   9683e:	4c33      	ldr	r4, [pc, #204]	; (9690c <Cl_Iso_Senddata+0x25c>)
   96840:	4610      	mov	r0, r2
   96842:	4619      	mov	r1, r3
   96844:	f04f 0200 	mov.w	r2, #0
   96848:	4b36      	ldr	r3, [pc, #216]	; (96924 <Cl_Iso_Senddata+0x274>)
   9684a:	47a0      	blx	r4
   9684c:	4602      	mov	r2, r0
   9684e:	460b      	mov	r3, r1
   96850:	4c35      	ldr	r4, [pc, #212]	; (96928 <Cl_Iso_Senddata+0x278>)
   96852:	4640      	mov	r0, r8
   96854:	4649      	mov	r1, r9
   96856:	47a0      	blx	r4
   96858:	4602      	mov	r2, r0
   9685a:	460b      	mov	r3, r1
   9685c:	4610      	mov	r0, r2
   9685e:	4619      	mov	r1, r3
   96860:	4b2c      	ldr	r3, [pc, #176]	; (96914 <Cl_Iso_Senddata+0x264>)
   96862:	4798      	blx	r3
   96864:	4603      	mov	r3, r0
   96866:	63fb      	str	r3, [r7, #60]	; 0x3c
				
					
					tempdata.word = (cond_comp);
   96868:	4b30      	ldr	r3, [pc, #192]	; (9692c <Cl_Iso_Senddata+0x27c>)
   9686a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   9686c:	4798      	blx	r3
   9686e:	4603      	mov	r3, r0
   96870:	607b      	str	r3, [r7, #4]
					systemdataarray[count++] = tempdata.bytearray[0];
   96872:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96876:	1c5a      	adds	r2, r3, #1
   96878:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   9687c:	793a      	ldrb	r2, [r7, #4]
   9687e:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96882:	440b      	add	r3, r1
   96884:	f803 2c3c 	strb.w	r2, [r3, #-60]
					systemdataarray[count++] = tempdata.bytearray[1];
   96888:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9688c:	1c5a      	adds	r2, r3, #1
   9688e:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96892:	797a      	ldrb	r2, [r7, #5]
   96894:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96898:	440b      	add	r3, r1
   9689a:	f803 2c3c 	strb.w	r2, [r3, #-60]
					systemdataarray[count++] = tempdata.bytearray[2];
   9689e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   968a2:	1c5a      	adds	r2, r3, #1
   968a4:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   968a8:	79ba      	ldrb	r2, [r7, #6]
   968aa:	f107 0148 	add.w	r1, r7, #72	; 0x48
   968ae:	440b      	add	r3, r1
   968b0:	f803 2c3c 	strb.w	r2, [r3, #-60]
					systemdataarray[count++] = tempdata.bytearray[3];
   968b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   968b8:	1c5a      	adds	r2, r3, #1
   968ba:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   968be:	79fa      	ldrb	r2, [r7, #7]
   968c0:	f107 0148 	add.w	r1, r7, #72	; 0x48
   968c4:	440b      	add	r3, r1
   968c6:	f803 2c3c 	strb.w	r2, [r3, #-60]
   968ca:	e05f      	b.n	9698c <Cl_Iso_Senddata+0x2dc>
   968cc:	f3af 8000 	nop.w
   968d0:	eb1c432d 	.word	0xeb1c432d
   968d4:	bf1a36e2 	.word	0xbf1a36e2
   968d8:	70a3d70a 	.word	0x70a3d70a
   968dc:	3fd70a3d 	.word	0x3fd70a3d
   968e0:	851eb852 	.word	0x851eb852
   968e4:	404331eb 	.word	0x404331eb
   968e8:	47ae147b 	.word	0x47ae147b
   968ec:	3f947ae1 	.word	0x3f947ae1
   968f0:	0008fd69 	.word	0x0008fd69
   968f4:	000a8255 	.word	0x000a8255
   968f8:	000a846d 	.word	0x000a846d
   968fc:	41200000 	.word	0x41200000
   96900:	20071c4c 	.word	0x20071c4c
   96904:	000a79b9 	.word	0x000a79b9
   96908:	000a7a85 	.word	0x000a7a85
   9690c:	000a7721 	.word	0x000a7721
   96910:	000a771d 	.word	0x000a771d
   96914:	000a8049 	.word	0x000a8049
   96918:	20071c50 	.word	0x20071c50
   9691c:	000a79dd 	.word	0x000a79dd
   96920:	40390000 	.word	0x40390000
   96924:	3ff00000 	.word	0x3ff00000
   96928:	000a7cd9 	.word	0x000a7cd9
   9692c:	000a86dd 	.word	0x000a86dd
			}
				else
				{
					tempdata.word = 0;
   96930:	2300      	movs	r3, #0
   96932:	607b      	str	r3, [r7, #4]
			systemdataarray[count++] = tempdata.bytearray[0];
   96934:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96938:	1c5a      	adds	r2, r3, #1
   9693a:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   9693e:	793a      	ldrb	r2, [r7, #4]
   96940:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96944:	440b      	add	r3, r1
   96946:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[1];
   9694a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9694e:	1c5a      	adds	r2, r3, #1
   96950:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96954:	797a      	ldrb	r2, [r7, #5]
   96956:	f107 0148 	add.w	r1, r7, #72	; 0x48
   9695a:	440b      	add	r3, r1
   9695c:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[2];
   96960:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96964:	1c5a      	adds	r2, r3, #1
   96966:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   9696a:	79ba      	ldrb	r2, [r7, #6]
   9696c:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96970:	440b      	add	r3, r1
   96972:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[3];
   96976:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9697a:	1c5a      	adds	r2, r3, #1
   9697c:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96980:	79fa      	ldrb	r2, [r7, #7]
   96982:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96986:	440b      	add	r3, r1
   96988:	f803 2c3c 	strb.w	r2, [r3, #-60]
			
		//	float ftemp,ftemp1;
		//	ftemp = temp * 0.803;
		//	calibration_tmp(ftemp,TS3);
		//	avgtmp3 =(avgtmp3*5 + temprature_final_value_3)/6;
			tempdata.word = (avgtmp3);
   9698c:	4bae      	ldr	r3, [pc, #696]	; (96c48 <Cl_Iso_Senddata+0x598>)
   9698e:	681a      	ldr	r2, [r3, #0]
   96990:	4bae      	ldr	r3, [pc, #696]	; (96c4c <Cl_Iso_Senddata+0x59c>)
   96992:	4610      	mov	r0, r2
   96994:	4798      	blx	r3
   96996:	4603      	mov	r3, r0
   96998:	607b      	str	r3, [r7, #4]
			systemdataarray[count++] = tempdata.bytearray[0];
   9699a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9699e:	1c5a      	adds	r2, r3, #1
   969a0:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   969a4:	793a      	ldrb	r2, [r7, #4]
   969a6:	f107 0148 	add.w	r1, r7, #72	; 0x48
   969aa:	440b      	add	r3, r1
   969ac:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[1];
   969b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   969b4:	1c5a      	adds	r2, r3, #1
   969b6:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   969ba:	797a      	ldrb	r2, [r7, #5]
   969bc:	f107 0148 	add.w	r1, r7, #72	; 0x48
   969c0:	440b      	add	r3, r1
   969c2:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[2];
   969c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   969ca:	1c5a      	adds	r2, r3, #1
   969cc:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   969d0:	79ba      	ldrb	r2, [r7, #6]
   969d2:	f107 0148 	add.w	r1, r7, #72	; 0x48
   969d6:	440b      	add	r3, r1
   969d8:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[3];
   969dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   969e0:	1c5a      	adds	r2, r3, #1
   969e2:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   969e6:	79fa      	ldrb	r2, [r7, #7]
   969e8:	f107 0148 	add.w	r1, r7, #72	; 0x48
   969ec:	440b      	add	r3, r1
   969ee:	f803 2c3c 	strb.w	r2, [r3, #-60]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS,&tempdata.Twobyte);
   969f2:	1d3b      	adds	r3, r7, #4
   969f4:	200b      	movs	r0, #11
   969f6:	4619      	mov	r1, r3
   969f8:	4b95      	ldr	r3, [pc, #596]	; (96c50 <Cl_Iso_Senddata+0x5a0>)
   969fa:	4798      	blx	r3
		{
			
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   969fc:	88bb      	ldrh	r3, [r7, #4]
   969fe:	461a      	mov	r2, r3
   96a00:	4b94      	ldr	r3, [pc, #592]	; (96c54 <Cl_Iso_Senddata+0x5a4>)
   96a02:	4610      	mov	r0, r2
   96a04:	4798      	blx	r3
   96a06:	4602      	mov	r2, r0
   96a08:	460b      	mov	r3, r1
   96a0a:	4c93      	ldr	r4, [pc, #588]	; (96c58 <Cl_Iso_Senddata+0x5a8>)
   96a0c:	4610      	mov	r0, r2
   96a0e:	4619      	mov	r1, r3
   96a10:	a38b      	add	r3, pc, #556	; (adr r3, 96c40 <Cl_Iso_Senddata+0x590>)
   96a12:	e9d3 2300 	ldrd	r2, r3, [r3]
   96a16:	47a0      	blx	r4
   96a18:	4602      	mov	r2, r0
   96a1a:	460b      	mov	r3, r1
   96a1c:	4610      	mov	r0, r2
   96a1e:	4619      	mov	r1, r3
   96a20:	4b8e      	ldr	r3, [pc, #568]	; (96c5c <Cl_Iso_Senddata+0x5ac>)
   96a22:	4798      	blx	r3
   96a24:	4603      	mov	r3, r0
   96a26:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_apt(sensordatamillivolts);
   96a28:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
   96a2a:	b21b      	sxth	r3, r3
   96a2c:	4618      	mov	r0, r3
   96a2e:	4b8c      	ldr	r3, [pc, #560]	; (96c60 <Cl_Iso_Senddata+0x5b0>)
   96a30:	4798      	blx	r3
			apt =(apt*5 + pressure_final_apt)/6;
   96a32:	4b8c      	ldr	r3, [pc, #560]	; (96c64 <Cl_Iso_Senddata+0x5b4>)
   96a34:	681a      	ldr	r2, [r3, #0]
   96a36:	4b8c      	ldr	r3, [pc, #560]	; (96c68 <Cl_Iso_Senddata+0x5b8>)
   96a38:	4610      	mov	r0, r2
   96a3a:	498c      	ldr	r1, [pc, #560]	; (96c6c <Cl_Iso_Senddata+0x5bc>)
   96a3c:	4798      	blx	r3
   96a3e:	4603      	mov	r3, r0
   96a40:	4619      	mov	r1, r3
   96a42:	4b8b      	ldr	r3, [pc, #556]	; (96c70 <Cl_Iso_Senddata+0x5c0>)
   96a44:	681a      	ldr	r2, [r3, #0]
   96a46:	4b8b      	ldr	r3, [pc, #556]	; (96c74 <Cl_Iso_Senddata+0x5c4>)
   96a48:	4608      	mov	r0, r1
   96a4a:	4611      	mov	r1, r2
   96a4c:	4798      	blx	r3
   96a4e:	4603      	mov	r3, r0
   96a50:	461a      	mov	r2, r3
   96a52:	4b89      	ldr	r3, [pc, #548]	; (96c78 <Cl_Iso_Senddata+0x5c8>)
   96a54:	4610      	mov	r0, r2
   96a56:	4989      	ldr	r1, [pc, #548]	; (96c7c <Cl_Iso_Senddata+0x5cc>)
   96a58:	4798      	blx	r3
   96a5a:	4603      	mov	r3, r0
   96a5c:	461a      	mov	r2, r3
   96a5e:	4b81      	ldr	r3, [pc, #516]	; (96c64 <Cl_Iso_Senddata+0x5b4>)
   96a60:	601a      	str	r2, [r3, #0]
			tempdata.word	= apt;
   96a62:	4b80      	ldr	r3, [pc, #512]	; (96c64 <Cl_Iso_Senddata+0x5b4>)
   96a64:	681a      	ldr	r2, [r3, #0]
   96a66:	4b79      	ldr	r3, [pc, #484]	; (96c4c <Cl_Iso_Senddata+0x59c>)
   96a68:	4610      	mov	r0, r2
   96a6a:	4798      	blx	r3
   96a6c:	4603      	mov	r3, r0
   96a6e:	607b      	str	r3, [r7, #4]
			systemdataarray[count++] = tempdata.bytearray[0] ;
   96a70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96a74:	1c5a      	adds	r2, r3, #1
   96a76:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96a7a:	793a      	ldrb	r2, [r7, #4]
   96a7c:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96a80:	440b      	add	r3, r1
   96a82:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   96a86:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96a8a:	1c5a      	adds	r2, r3, #1
   96a8c:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96a90:	797a      	ldrb	r2, [r7, #5]
   96a92:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96a96:	440b      	add	r3, r1
   96a98:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   96a9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96aa0:	1c5a      	adds	r2, r3, #1
   96aa2:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96aa6:	79ba      	ldrb	r2, [r7, #6]
   96aa8:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96aac:	440b      	add	r3, r1
   96aae:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   96ab2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96ab6:	1c5a      	adds	r2, r3, #1
   96ab8:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96abc:	79fa      	ldrb	r2, [r7, #7]
   96abe:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96ac2:	440b      	add	r3, r1
   96ac4:	f803 2c3c 	strb.w	r2, [r3, #-60]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS,&tempdata.Twobyte);
   96ac8:	1d3b      	adds	r3, r7, #4
   96aca:	200c      	movs	r0, #12
   96acc:	4619      	mov	r1, r3
   96ace:	4b60      	ldr	r3, [pc, #384]	; (96c50 <Cl_Iso_Senddata+0x5a0>)
   96ad0:	4798      	blx	r3
		{
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   96ad2:	88bb      	ldrh	r3, [r7, #4]
   96ad4:	461a      	mov	r2, r3
   96ad6:	4b5f      	ldr	r3, [pc, #380]	; (96c54 <Cl_Iso_Senddata+0x5a4>)
   96ad8:	4610      	mov	r0, r2
   96ada:	4798      	blx	r3
   96adc:	4602      	mov	r2, r0
   96ade:	460b      	mov	r3, r1
   96ae0:	4c5d      	ldr	r4, [pc, #372]	; (96c58 <Cl_Iso_Senddata+0x5a8>)
   96ae2:	4610      	mov	r0, r2
   96ae4:	4619      	mov	r1, r3
   96ae6:	a356      	add	r3, pc, #344	; (adr r3, 96c40 <Cl_Iso_Senddata+0x590>)
   96ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
   96aec:	47a0      	blx	r4
   96aee:	4602      	mov	r2, r0
   96af0:	460b      	mov	r3, r1
   96af2:	4610      	mov	r0, r2
   96af4:	4619      	mov	r1, r3
   96af6:	4b59      	ldr	r3, [pc, #356]	; (96c5c <Cl_Iso_Senddata+0x5ac>)
   96af8:	4798      	blx	r3
   96afa:	4603      	mov	r3, r0
   96afc:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_vpt(sensordatamillivolts);
   96afe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
   96b00:	b21b      	sxth	r3, r3
   96b02:	4618      	mov	r0, r3
   96b04:	4b5e      	ldr	r3, [pc, #376]	; (96c80 <Cl_Iso_Senddata+0x5d0>)
   96b06:	4798      	blx	r3
			vpt =(vpt*5 + pressure_final_vpt)/6;
   96b08:	4b5e      	ldr	r3, [pc, #376]	; (96c84 <Cl_Iso_Senddata+0x5d4>)
   96b0a:	681a      	ldr	r2, [r3, #0]
   96b0c:	4b56      	ldr	r3, [pc, #344]	; (96c68 <Cl_Iso_Senddata+0x5b8>)
   96b0e:	4610      	mov	r0, r2
   96b10:	4956      	ldr	r1, [pc, #344]	; (96c6c <Cl_Iso_Senddata+0x5bc>)
   96b12:	4798      	blx	r3
   96b14:	4603      	mov	r3, r0
   96b16:	4619      	mov	r1, r3
   96b18:	4b5b      	ldr	r3, [pc, #364]	; (96c88 <Cl_Iso_Senddata+0x5d8>)
   96b1a:	681a      	ldr	r2, [r3, #0]
   96b1c:	4b55      	ldr	r3, [pc, #340]	; (96c74 <Cl_Iso_Senddata+0x5c4>)
   96b1e:	4608      	mov	r0, r1
   96b20:	4611      	mov	r1, r2
   96b22:	4798      	blx	r3
   96b24:	4603      	mov	r3, r0
   96b26:	461a      	mov	r2, r3
   96b28:	4b53      	ldr	r3, [pc, #332]	; (96c78 <Cl_Iso_Senddata+0x5c8>)
   96b2a:	4610      	mov	r0, r2
   96b2c:	4953      	ldr	r1, [pc, #332]	; (96c7c <Cl_Iso_Senddata+0x5cc>)
   96b2e:	4798      	blx	r3
   96b30:	4603      	mov	r3, r0
   96b32:	461a      	mov	r2, r3
   96b34:	4b53      	ldr	r3, [pc, #332]	; (96c84 <Cl_Iso_Senddata+0x5d4>)
   96b36:	601a      	str	r2, [r3, #0]
			tempdata.word	 = vpt;
   96b38:	4b52      	ldr	r3, [pc, #328]	; (96c84 <Cl_Iso_Senddata+0x5d4>)
   96b3a:	681a      	ldr	r2, [r3, #0]
   96b3c:	4b43      	ldr	r3, [pc, #268]	; (96c4c <Cl_Iso_Senddata+0x59c>)
   96b3e:	4610      	mov	r0, r2
   96b40:	4798      	blx	r3
   96b42:	4603      	mov	r3, r0
   96b44:	607b      	str	r3, [r7, #4]
			systemdataarray[count++] = tempdata.bytearray[0] ;
   96b46:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96b4a:	1c5a      	adds	r2, r3, #1
   96b4c:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96b50:	793a      	ldrb	r2, [r7, #4]
   96b52:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96b56:	440b      	add	r3, r1
   96b58:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   96b5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96b60:	1c5a      	adds	r2, r3, #1
   96b62:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96b66:	797a      	ldrb	r2, [r7, #5]
   96b68:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96b6c:	440b      	add	r3, r1
   96b6e:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   96b72:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96b76:	1c5a      	adds	r2, r3, #1
   96b78:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96b7c:	79ba      	ldrb	r2, [r7, #6]
   96b7e:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96b82:	440b      	add	r3, r1
   96b84:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   96b88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96b8c:	1c5a      	adds	r2, r3, #1
   96b8e:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96b92:	79fa      	ldrb	r2, [r7, #7]
   96b94:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96b98:	440b      	add	r3, r1
   96b9a:	f803 2c3c 	strb.w	r2, [r3, #-60]
		}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&tempdata.Twobyte);
   96b9e:	1d3b      	adds	r3, r7, #4
   96ba0:	200e      	movs	r0, #14
   96ba2:	4619      	mov	r1, r3
   96ba4:	4b2a      	ldr	r3, [pc, #168]	; (96c50 <Cl_Iso_Senddata+0x5a0>)
   96ba6:	4798      	blx	r3
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   96ba8:	88bb      	ldrh	r3, [r7, #4]
   96baa:	461a      	mov	r2, r3
   96bac:	4b29      	ldr	r3, [pc, #164]	; (96c54 <Cl_Iso_Senddata+0x5a4>)
   96bae:	4610      	mov	r0, r2
   96bb0:	4798      	blx	r3
   96bb2:	4602      	mov	r2, r0
   96bb4:	460b      	mov	r3, r1
   96bb6:	4c28      	ldr	r4, [pc, #160]	; (96c58 <Cl_Iso_Senddata+0x5a8>)
   96bb8:	4610      	mov	r0, r2
   96bba:	4619      	mov	r1, r3
   96bbc:	a320      	add	r3, pc, #128	; (adr r3, 96c40 <Cl_Iso_Senddata+0x590>)
   96bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
   96bc2:	47a0      	blx	r4
   96bc4:	4602      	mov	r2, r0
   96bc6:	460b      	mov	r3, r1
   96bc8:	4610      	mov	r0, r2
   96bca:	4619      	mov	r1, r3
   96bcc:	4b23      	ldr	r3, [pc, #140]	; (96c5c <Cl_Iso_Senddata+0x5ac>)
   96bce:	4798      	blx	r3
   96bd0:	4603      	mov	r3, r0
   96bd2:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_ps1(sensordatamillivolts);
   96bd4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
   96bd6:	b21b      	sxth	r3, r3
   96bd8:	4618      	mov	r0, r3
   96bda:	4b2c      	ldr	r3, [pc, #176]	; (96c8c <Cl_Iso_Senddata+0x5dc>)
   96bdc:	4798      	blx	r3
			ps1=(ps1*5 + pressure_final_ps1)/6;
   96bde:	4b2c      	ldr	r3, [pc, #176]	; (96c90 <Cl_Iso_Senddata+0x5e0>)
   96be0:	681a      	ldr	r2, [r3, #0]
   96be2:	4b21      	ldr	r3, [pc, #132]	; (96c68 <Cl_Iso_Senddata+0x5b8>)
   96be4:	4610      	mov	r0, r2
   96be6:	4921      	ldr	r1, [pc, #132]	; (96c6c <Cl_Iso_Senddata+0x5bc>)
   96be8:	4798      	blx	r3
   96bea:	4603      	mov	r3, r0
   96bec:	4619      	mov	r1, r3
   96bee:	4b29      	ldr	r3, [pc, #164]	; (96c94 <Cl_Iso_Senddata+0x5e4>)
   96bf0:	681a      	ldr	r2, [r3, #0]
   96bf2:	4b20      	ldr	r3, [pc, #128]	; (96c74 <Cl_Iso_Senddata+0x5c4>)
   96bf4:	4608      	mov	r0, r1
   96bf6:	4611      	mov	r1, r2
   96bf8:	4798      	blx	r3
   96bfa:	4603      	mov	r3, r0
   96bfc:	461a      	mov	r2, r3
   96bfe:	4b1e      	ldr	r3, [pc, #120]	; (96c78 <Cl_Iso_Senddata+0x5c8>)
   96c00:	4610      	mov	r0, r2
   96c02:	491e      	ldr	r1, [pc, #120]	; (96c7c <Cl_Iso_Senddata+0x5cc>)
   96c04:	4798      	blx	r3
   96c06:	4603      	mov	r3, r0
   96c08:	461a      	mov	r2, r3
   96c0a:	4b21      	ldr	r3, [pc, #132]	; (96c90 <Cl_Iso_Senddata+0x5e0>)
   96c0c:	601a      	str	r2, [r3, #0]
	
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS,&tempdata.Twobyte);
   96c0e:	1d3b      	adds	r3, r7, #4
   96c10:	200f      	movs	r0, #15
   96c12:	4619      	mov	r1, r3
   96c14:	4b0e      	ldr	r3, [pc, #56]	; (96c50 <Cl_Iso_Senddata+0x5a0>)
   96c16:	4798      	blx	r3
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   96c18:	88bb      	ldrh	r3, [r7, #4]
   96c1a:	461a      	mov	r2, r3
   96c1c:	4b0d      	ldr	r3, [pc, #52]	; (96c54 <Cl_Iso_Senddata+0x5a4>)
   96c1e:	4610      	mov	r0, r2
   96c20:	4798      	blx	r3
   96c22:	4602      	mov	r2, r0
   96c24:	460b      	mov	r3, r1
   96c26:	4c0c      	ldr	r4, [pc, #48]	; (96c58 <Cl_Iso_Senddata+0x5a8>)
   96c28:	4610      	mov	r0, r2
   96c2a:	4619      	mov	r1, r3
   96c2c:	a304      	add	r3, pc, #16	; (adr r3, 96c40 <Cl_Iso_Senddata+0x590>)
   96c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   96c32:	47a0      	blx	r4
   96c34:	4602      	mov	r2, r0
   96c36:	460b      	mov	r3, r1
   96c38:	4610      	mov	r0, r2
   96c3a:	4619      	mov	r1, r3
   96c3c:	e02c      	b.n	96c98 <Cl_Iso_Senddata+0x5e8>
   96c3e:	bf00      	nop
   96c40:	58e21965 	.word	0x58e21965
   96c44:	3fe9b717 	.word	0x3fe9b717
   96c48:	20071c4c 	.word	0x20071c4c
   96c4c:	000a86dd 	.word	0x000a86dd
   96c50:	0008fd69 	.word	0x0008fd69
   96c54:	000a79b9 	.word	0x000a79b9
   96c58:	000a7a85 	.word	0x000a7a85
   96c5c:	000a8009 	.word	0x000a8009
   96c60:	00083ffd 	.word	0x00083ffd
   96c64:	20071c54 	.word	0x20071c54
   96c68:	000a8305 	.word	0x000a8305
   96c6c:	40a00000 	.word	0x40a00000
   96c70:	20072314 	.word	0x20072314
   96c74:	000a80f5 	.word	0x000a80f5
   96c78:	000a846d 	.word	0x000a846d
   96c7c:	40c00000 	.word	0x40c00000
   96c80:	00084195 	.word	0x00084195
   96c84:	20071c58 	.word	0x20071c58
   96c88:	2007195c 	.word	0x2007195c
   96c8c:	0008432d 	.word	0x0008432d
   96c90:	20071c5c 	.word	0x20071c5c
   96c94:	20071960 	.word	0x20071960
   96c98:	4b76      	ldr	r3, [pc, #472]	; (96e74 <Cl_Iso_Senddata+0x7c4>)
   96c9a:	4798      	blx	r3
   96c9c:	4603      	mov	r3, r0
   96c9e:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_ps2(sensordatamillivolts);
   96ca0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
   96ca2:	b21b      	sxth	r3, r3
   96ca4:	4618      	mov	r0, r3
   96ca6:	4b74      	ldr	r3, [pc, #464]	; (96e78 <Cl_Iso_Senddata+0x7c8>)
   96ca8:	4798      	blx	r3
			ps2=(ps2*5 + pressure_final_ps2)/6;
   96caa:	4b74      	ldr	r3, [pc, #464]	; (96e7c <Cl_Iso_Senddata+0x7cc>)
   96cac:	681a      	ldr	r2, [r3, #0]
   96cae:	4b74      	ldr	r3, [pc, #464]	; (96e80 <Cl_Iso_Senddata+0x7d0>)
   96cb0:	4610      	mov	r0, r2
   96cb2:	4974      	ldr	r1, [pc, #464]	; (96e84 <Cl_Iso_Senddata+0x7d4>)
   96cb4:	4798      	blx	r3
   96cb6:	4603      	mov	r3, r0
   96cb8:	4619      	mov	r1, r3
   96cba:	4b73      	ldr	r3, [pc, #460]	; (96e88 <Cl_Iso_Senddata+0x7d8>)
   96cbc:	681a      	ldr	r2, [r3, #0]
   96cbe:	4b73      	ldr	r3, [pc, #460]	; (96e8c <Cl_Iso_Senddata+0x7dc>)
   96cc0:	4608      	mov	r0, r1
   96cc2:	4611      	mov	r1, r2
   96cc4:	4798      	blx	r3
   96cc6:	4603      	mov	r3, r0
   96cc8:	461a      	mov	r2, r3
   96cca:	4b71      	ldr	r3, [pc, #452]	; (96e90 <Cl_Iso_Senddata+0x7e0>)
   96ccc:	4610      	mov	r0, r2
   96cce:	4971      	ldr	r1, [pc, #452]	; (96e94 <Cl_Iso_Senddata+0x7e4>)
   96cd0:	4798      	blx	r3
   96cd2:	4603      	mov	r3, r0
   96cd4:	461a      	mov	r2, r3
   96cd6:	4b69      	ldr	r3, [pc, #420]	; (96e7c <Cl_Iso_Senddata+0x7cc>)
   96cd8:	601a      	str	r2, [r3, #0]
			
			tempdata.word	 = (((apt + vpt) - (ps1+ps2))/2)-25;
   96cda:	4b6f      	ldr	r3, [pc, #444]	; (96e98 <Cl_Iso_Senddata+0x7e8>)
   96cdc:	6819      	ldr	r1, [r3, #0]
   96cde:	4b6f      	ldr	r3, [pc, #444]	; (96e9c <Cl_Iso_Senddata+0x7ec>)
   96ce0:	681a      	ldr	r2, [r3, #0]
   96ce2:	4b6a      	ldr	r3, [pc, #424]	; (96e8c <Cl_Iso_Senddata+0x7dc>)
   96ce4:	4608      	mov	r0, r1
   96ce6:	4611      	mov	r1, r2
   96ce8:	4798      	blx	r3
   96cea:	4603      	mov	r3, r0
   96cec:	461c      	mov	r4, r3
   96cee:	4b6c      	ldr	r3, [pc, #432]	; (96ea0 <Cl_Iso_Senddata+0x7f0>)
   96cf0:	6819      	ldr	r1, [r3, #0]
   96cf2:	4b62      	ldr	r3, [pc, #392]	; (96e7c <Cl_Iso_Senddata+0x7cc>)
   96cf4:	681a      	ldr	r2, [r3, #0]
   96cf6:	4b65      	ldr	r3, [pc, #404]	; (96e8c <Cl_Iso_Senddata+0x7dc>)
   96cf8:	4608      	mov	r0, r1
   96cfa:	4611      	mov	r1, r2
   96cfc:	4798      	blx	r3
   96cfe:	4603      	mov	r3, r0
   96d00:	461a      	mov	r2, r3
   96d02:	4b68      	ldr	r3, [pc, #416]	; (96ea4 <Cl_Iso_Senddata+0x7f4>)
   96d04:	4620      	mov	r0, r4
   96d06:	4611      	mov	r1, r2
   96d08:	4798      	blx	r3
   96d0a:	4603      	mov	r3, r0
   96d0c:	461a      	mov	r2, r3
   96d0e:	4b60      	ldr	r3, [pc, #384]	; (96e90 <Cl_Iso_Senddata+0x7e0>)
   96d10:	4610      	mov	r0, r2
   96d12:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   96d16:	4798      	blx	r3
   96d18:	4603      	mov	r3, r0
   96d1a:	461a      	mov	r2, r3
   96d1c:	4b61      	ldr	r3, [pc, #388]	; (96ea4 <Cl_Iso_Senddata+0x7f4>)
   96d1e:	4610      	mov	r0, r2
   96d20:	4961      	ldr	r1, [pc, #388]	; (96ea8 <Cl_Iso_Senddata+0x7f8>)
   96d22:	4798      	blx	r3
   96d24:	4603      	mov	r3, r0
   96d26:	461a      	mov	r2, r3
   96d28:	4b60      	ldr	r3, [pc, #384]	; (96eac <Cl_Iso_Senddata+0x7fc>)
   96d2a:	4610      	mov	r0, r2
   96d2c:	4798      	blx	r3
   96d2e:	4603      	mov	r3, r0
   96d30:	607b      	str	r3, [r7, #4]


			systemdataarray[count++] = tempdata.bytearray[0] ;
   96d32:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96d36:	1c5a      	adds	r2, r3, #1
   96d38:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96d3c:	793a      	ldrb	r2, [r7, #4]
   96d3e:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96d42:	440b      	add	r3, r1
   96d44:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   96d48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96d4c:	1c5a      	adds	r2, r3, #1
   96d4e:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96d52:	797a      	ldrb	r2, [r7, #5]
   96d54:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96d58:	440b      	add	r3, r1
   96d5a:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   96d5e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96d62:	1c5a      	adds	r2, r3, #1
   96d64:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96d68:	79ba      	ldrb	r2, [r7, #6]
   96d6a:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96d6e:	440b      	add	r3, r1
   96d70:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   96d74:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96d78:	1c5a      	adds	r2, r3, #1
   96d7a:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96d7e:	79fa      	ldrb	r2, [r7, #7]
   96d80:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96d84:	440b      	add	r3, r1
   96d86:	f803 2c3c 	strb.w	r2, [r3, #-60]
// 			systemdataarray[count++] = 0x0A; // tmp
// 			systemdataarray[count++] = 0x0A; // tmp
// 			systemdataarray[count++] = 0x00;
// 			systemdataarray[count++] = 0x00;
// 			
			tempdata.word = ufRemoved ;
   96d8a:	4b49      	ldr	r3, [pc, #292]	; (96eb0 <Cl_Iso_Senddata+0x800>)
   96d8c:	681a      	ldr	r2, [r3, #0]
   96d8e:	4b47      	ldr	r3, [pc, #284]	; (96eac <Cl_Iso_Senddata+0x7fc>)
   96d90:	4610      	mov	r0, r2
   96d92:	4798      	blx	r3
   96d94:	4603      	mov	r3, r0
   96d96:	607b      	str	r3, [r7, #4]
			
			systemdataarray[count++] = tempdata.bytearray[0] ;
   96d98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96d9c:	1c5a      	adds	r2, r3, #1
   96d9e:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96da2:	793a      	ldrb	r2, [r7, #4]
   96da4:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96da8:	440b      	add	r3, r1
   96daa:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   96dae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96db2:	1c5a      	adds	r2, r3, #1
   96db4:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96db8:	797a      	ldrb	r2, [r7, #5]
   96dba:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96dbe:	440b      	add	r3, r1
   96dc0:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   96dc4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96dc8:	1c5a      	adds	r2, r3, #1
   96dca:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96dce:	79ba      	ldrb	r2, [r7, #6]
   96dd0:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96dd4:	440b      	add	r3, r1
   96dd6:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   96dda:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96dde:	1c5a      	adds	r2, r3, #1
   96de0:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96de4:	79fa      	ldrb	r2, [r7, #7]
   96de6:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96dea:	440b      	add	r3, r1
   96dec:	f803 2c3c 	strb.w	r2, [r3, #-60]
			
			tempdata.word = Treatdata[ID_ufrate] ;
   96df0:	4b30      	ldr	r3, [pc, #192]	; (96eb4 <Cl_Iso_Senddata+0x804>)
   96df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   96df4:	607b      	str	r3, [r7, #4]
			
			systemdataarray[count++] = tempdata.bytearray[0] ;
   96df6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96dfa:	1c5a      	adds	r2, r3, #1
   96dfc:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96e00:	793a      	ldrb	r2, [r7, #4]
   96e02:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96e06:	440b      	add	r3, r1
   96e08:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   96e0c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96e10:	1c5a      	adds	r2, r3, #1
   96e12:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96e16:	797a      	ldrb	r2, [r7, #5]
   96e18:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96e1c:	440b      	add	r3, r1
   96e1e:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   96e22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96e26:	1c5a      	adds	r2, r3, #1
   96e28:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96e2c:	79ba      	ldrb	r2, [r7, #6]
   96e2e:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96e32:	440b      	add	r3, r1
   96e34:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   96e38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96e3c:	1c5a      	adds	r2, r3, #1
   96e3e:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96e42:	79fa      	ldrb	r2, [r7, #7]
   96e44:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96e48:	440b      	add	r3, r1
   96e4a:	f803 2c3c 	strb.w	r2, [r3, #-60]
			
			cl_isouf_retcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&systemdataarray,count);
   96e4e:	f107 020c 	add.w	r2, r7, #12
   96e52:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96e56:	202a      	movs	r0, #42	; 0x2a
   96e58:	4611      	mov	r1, r2
   96e5a:	461a      	mov	r2, r3
   96e5c:	4b16      	ldr	r3, [pc, #88]	; (96eb8 <Cl_Iso_Senddata+0x808>)
   96e5e:	4798      	blx	r3
   96e60:	4603      	mov	r3, r0
   96e62:	461a      	mov	r2, r3
   96e64:	4b15      	ldr	r3, [pc, #84]	; (96ebc <Cl_Iso_Senddata+0x80c>)
   96e66:	701a      	strb	r2, [r3, #0]
	//Cl_dlsisretcode = Cl_SendDatatoconsole(command,&systemdataarray,count);
	
	return CL_OK;
   96e68:	2300      	movs	r3, #0
	
	
}
   96e6a:	4618      	mov	r0, r3
   96e6c:	374c      	adds	r7, #76	; 0x4c
   96e6e:	46bd      	mov	sp, r7
   96e70:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   96e74:	000a8009 	.word	0x000a8009
   96e78:	00084449 	.word	0x00084449
   96e7c:	20071c60 	.word	0x20071c60
   96e80:	000a8305 	.word	0x000a8305
   96e84:	40a00000 	.word	0x40a00000
   96e88:	20071964 	.word	0x20071964
   96e8c:	000a80f5 	.word	0x000a80f5
   96e90:	000a846d 	.word	0x000a846d
   96e94:	40c00000 	.word	0x40c00000
   96e98:	20071c54 	.word	0x20071c54
   96e9c:	20071c58 	.word	0x20071c58
   96ea0:	20071c5c 	.word	0x20071c5c
   96ea4:	000a80f1 	.word	0x000a80f1
   96ea8:	41c80000 	.word	0x41c80000
   96eac:	000a86dd 	.word	0x000a86dd
   96eb0:	20071c7c 	.word	0x20071c7c
   96eb4:	20072880 	.word	0x20072880
   96eb8:	0009d1e9 	.word	0x0009d1e9
   96ebc:	20071c3e 	.word	0x20071c3e

00096ec0 <Cl_Iso_UpdateTimeInfo>:

Cl_ReturnCodeType Cl_Iso_UpdateTimeInfo(void)
{
   96ec0:	b580      	push	{r7, lr}
   96ec2:	b084      	sub	sp, #16
   96ec4:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType Cl_rinseretcode = CL_ERROR;
   96ec6:	2304      	movs	r3, #4
   96ec8:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   96eca:	2359      	movs	r3, #89	; 0x59
   96ecc:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0,0 ,0,0};
   96ece:	2300      	movs	r3, #0
   96ed0:	713b      	strb	r3, [r7, #4]
   96ed2:	2300      	movs	r3, #0
   96ed4:	717b      	strb	r3, [r7, #5]
   96ed6:	2300      	movs	r3, #0
   96ed8:	71bb      	strb	r3, [r7, #6]
   96eda:	2300      	movs	r3, #0
   96edc:	71fb      	strb	r3, [r7, #7]
   96ede:	2300      	movs	r3, #0
   96ee0:	723b      	strb	r3, [r7, #8]
   96ee2:	2300      	movs	r3, #0
   96ee4:	727b      	strb	r3, [r7, #9]
   96ee6:	2300      	movs	r3, #0
   96ee8:	72bb      	strb	r3, [r7, #10]
	
	command = CON_TX_COMMAND_REM_TIME;
   96eea:	230a      	movs	r3, #10
   96eec:	73bb      	strb	r3, [r7, #14]

	
	data[0]= (Cl_Uint8Type)ISOUF_DATA;
   96eee:	230c      	movs	r3, #12
   96ef0:	713b      	strb	r3, [r7, #4]
	data[1]= (Cl_Uint8Type)1;
   96ef2:	2301      	movs	r3, #1
   96ef4:	717b      	strb	r3, [r7, #5]

	
	Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,2);
   96ef6:	7bba      	ldrb	r2, [r7, #14]
   96ef8:	1d3b      	adds	r3, r7, #4
   96efa:	4610      	mov	r0, r2
   96efc:	4619      	mov	r1, r3
   96efe:	2202      	movs	r2, #2
   96f00:	4b04      	ldr	r3, [pc, #16]	; (96f14 <Cl_Iso_UpdateTimeInfo+0x54>)
   96f02:	4798      	blx	r3
   96f04:	4603      	mov	r3, r0
   96f06:	73fb      	strb	r3, [r7, #15]
	return CL_OK;
   96f08:	2300      	movs	r3, #0
	
}
   96f0a:	4618      	mov	r0, r3
   96f0c:	3710      	adds	r7, #16
   96f0e:	46bd      	mov	sp, r7
   96f10:	bd80      	pop	{r7, pc}
   96f12:	bf00      	nop
   96f14:	0009d1e9 	.word	0x0009d1e9

00096f18 <cl_checkforblooddetection>:

Cl_ReturnCodeType cl_checkforblooddetection(){
   96f18:	b580      	push	{r7, lr}
   96f1a:	b082      	sub	sp, #8
   96f1c:	af00      	add	r7, sp, #0
	
	Cl_Uint16Type bldtemp = 0;
   96f1e:	2300      	movs	r3, #0
   96f20:	80fb      	strh	r3, [r7, #6]
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &bldtemp);
   96f22:	1dbb      	adds	r3, r7, #6
   96f24:	200a      	movs	r0, #10
   96f26:	4619      	mov	r1, r3
   96f28:	4b05      	ldr	r3, [pc, #20]	; (96f40 <cl_checkforblooddetection+0x28>)
   96f2a:	4798      	blx	r3
	
	if(bldtemp == 1){
   96f2c:	88fb      	ldrh	r3, [r7, #6]
   96f2e:	2b01      	cmp	r3, #1
   96f30:	d101      	bne.n	96f36 <cl_checkforblooddetection+0x1e>
		return CL_OK;
   96f32:	2300      	movs	r3, #0
   96f34:	e000      	b.n	96f38 <cl_checkforblooddetection+0x20>
	}
	else{
		return CL_OK; // should be CL_REJECTED
   96f36:	2300      	movs	r3, #0
	}
	
	
}
   96f38:	4618      	mov	r0, r3
   96f3a:	3708      	adds	r7, #8
   96f3c:	46bd      	mov	sp, r7
   96f3e:	bd80      	pop	{r7, pc}
   96f40:	0008fd69 	.word	0x0008fd69

00096f44 <cl_isouf_translatemacevent>:

Cl_ReturnCodeType  cl_isouf_translatemacevent(Cl_Mac_EventsType Cl_MacISOufEvt,cl_isouf_events* cl_isouf_event)
{
   96f44:	b480      	push	{r7}
   96f46:	b083      	sub	sp, #12
   96f48:	af00      	add	r7, sp, #0
   96f4a:	4603      	mov	r3, r0
   96f4c:	6039      	str	r1, [r7, #0]
   96f4e:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacISOufEvt)
   96f50:	79fb      	ldrb	r3, [r7, #7]
   96f52:	3b07      	subs	r3, #7
   96f54:	2b57      	cmp	r3, #87	; 0x57
   96f56:	f200 8127 	bhi.w	971a8 <cl_isouf_translatemacevent+0x264>
   96f5a:	a201      	add	r2, pc, #4	; (adr r2, 96f60 <cl_isouf_translatemacevent+0x1c>)
   96f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   96f60:	00097101 	.word	0x00097101
   96f64:	000971a9 	.word	0x000971a9
   96f68:	000971a9 	.word	0x000971a9
   96f6c:	000970e1 	.word	0x000970e1
   96f70:	000970e9 	.word	0x000970e9
   96f74:	000970d9 	.word	0x000970d9
   96f78:	000970f9 	.word	0x000970f9
   96f7c:	000970f1 	.word	0x000970f1
   96f80:	000971a9 	.word	0x000971a9
   96f84:	000971a9 	.word	0x000971a9
   96f88:	000971a9 	.word	0x000971a9
   96f8c:	000971a9 	.word	0x000971a9
   96f90:	000971a9 	.word	0x000971a9
   96f94:	000971a9 	.word	0x000971a9
   96f98:	00097159 	.word	0x00097159
   96f9c:	000971a9 	.word	0x000971a9
   96fa0:	00097109 	.word	0x00097109
   96fa4:	000971a9 	.word	0x000971a9
   96fa8:	000971a9 	.word	0x000971a9
   96fac:	00097199 	.word	0x00097199
   96fb0:	000971a1 	.word	0x000971a1
   96fb4:	000971a9 	.word	0x000971a9
   96fb8:	000971a9 	.word	0x000971a9
   96fbc:	000971a9 	.word	0x000971a9
   96fc0:	000971a9 	.word	0x000971a9
   96fc4:	000971a9 	.word	0x000971a9
   96fc8:	000971a9 	.word	0x000971a9
   96fcc:	00097149 	.word	0x00097149
   96fd0:	00097151 	.word	0x00097151
   96fd4:	000971a9 	.word	0x000971a9
   96fd8:	000971a9 	.word	0x000971a9
   96fdc:	00097181 	.word	0x00097181
   96fe0:	00097161 	.word	0x00097161
   96fe4:	00097169 	.word	0x00097169
   96fe8:	000970d1 	.word	0x000970d1
   96fec:	000971a9 	.word	0x000971a9
   96ff0:	000971a9 	.word	0x000971a9
   96ff4:	000971a9 	.word	0x000971a9
   96ff8:	00097141 	.word	0x00097141
   96ffc:	00097139 	.word	0x00097139
   97000:	000971a9 	.word	0x000971a9
   97004:	000971a9 	.word	0x000971a9
   97008:	000971a9 	.word	0x000971a9
   9700c:	000971a9 	.word	0x000971a9
   97010:	000971a9 	.word	0x000971a9
   97014:	000971a9 	.word	0x000971a9
   97018:	000971a9 	.word	0x000971a9
   9701c:	000971a9 	.word	0x000971a9
   97020:	000971a9 	.word	0x000971a9
   97024:	00097111 	.word	0x00097111
   97028:	000971a9 	.word	0x000971a9
   9702c:	00097119 	.word	0x00097119
   97030:	00097121 	.word	0x00097121
   97034:	00097129 	.word	0x00097129
   97038:	00097131 	.word	0x00097131
   9703c:	000971a9 	.word	0x000971a9
   97040:	000971a9 	.word	0x000971a9
   97044:	000971a9 	.word	0x000971a9
   97048:	000971a9 	.word	0x000971a9
   9704c:	000971a9 	.word	0x000971a9
   97050:	000971a9 	.word	0x000971a9
   97054:	000971a9 	.word	0x000971a9
   97058:	000971a9 	.word	0x000971a9
   9705c:	000971a9 	.word	0x000971a9
   97060:	000971a9 	.word	0x000971a9
   97064:	000971a9 	.word	0x000971a9
   97068:	000971a9 	.word	0x000971a9
   9706c:	000971a9 	.word	0x000971a9
   97070:	000971a9 	.word	0x000971a9
   97074:	000971a9 	.word	0x000971a9
   97078:	000971a9 	.word	0x000971a9
   9707c:	000971a9 	.word	0x000971a9
   97080:	000971a9 	.word	0x000971a9
   97084:	000971a9 	.word	0x000971a9
   97088:	000971a9 	.word	0x000971a9
   9708c:	000971a9 	.word	0x000971a9
   97090:	000971a9 	.word	0x000971a9
   97094:	000971a9 	.word	0x000971a9
   97098:	000971a9 	.word	0x000971a9
   9709c:	000971a9 	.word	0x000971a9
   970a0:	000971a9 	.word	0x000971a9
   970a4:	000970c1 	.word	0x000970c1
   970a8:	000970c9 	.word	0x000970c9
   970ac:	00097171 	.word	0x00097171
   970b0:	00097189 	.word	0x00097189
   970b4:	00097191 	.word	0x00097191
   970b8:	000971a9 	.word	0x000971a9
   970bc:	00097179 	.word	0x00097179
	{
		
		case EVT_CONSOLE_COMMAND_ISOUF_START :
		*cl_isouf_event = EVENT_ISOUF_START;
   970c0:	683b      	ldr	r3, [r7, #0]
   970c2:	2216      	movs	r2, #22
   970c4:	701a      	strb	r2, [r3, #0]
		break;
   970c6:	e070      	b.n	971aa <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_ISOUF_STOP :
		*cl_isouf_event = EVENT_ISOUF_STOP;
   970c8:	683b      	ldr	r3, [r7, #0]
   970ca:	2218      	movs	r2, #24
   970cc:	701a      	strb	r2, [r3, #0]
		break;
   970ce:	e06c      	b.n	971aa <cl_isouf_translatemacevent+0x266>
		
		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_isouf_event = EVENT_ISOUF_CLR_ALARM;
   970d0:	683b      	ldr	r3, [r7, #0]
   970d2:	2201      	movs	r2, #1
   970d4:	701a      	strb	r2, [r3, #0]
		break;
   970d6:	e068      	b.n	971aa <cl_isouf_translatemacevent+0x266>
		case 	EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_isouf_event = EVENT_ISOUF_COMMAND_SET_BLDPUMPRATE;
   970d8:	683b      	ldr	r3, [r7, #0]
   970da:	2210      	movs	r2, #16
   970dc:	701a      	strb	r2, [r3, #0]
		break;
   970de:	e064      	b.n	971aa <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_isouf_event = EVENT_ISOUF_COMMAND_SET_BLDPMP_ON;
   970e0:	683b      	ldr	r3, [r7, #0]
   970e2:	2211      	movs	r2, #17
   970e4:	701a      	strb	r2, [r3, #0]
		break;
   970e6:	e060      	b.n	971aa <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_isouf_event = EVENT_ISOUF_COMMAND_SET_BLDPMP_OFF;
   970e8:	683b      	ldr	r3, [r7, #0]
   970ea:	2212      	movs	r2, #18
   970ec:	701a      	strb	r2, [r3, #0]
		break;
   970ee:	e05c      	b.n	971aa <cl_isouf_translatemacevent+0x266>
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_isouf_event = EVENT_ISOUF_GET_DATA;
   970f0:	683b      	ldr	r3, [r7, #0]
   970f2:	2202      	movs	r2, #2
   970f4:	701a      	strb	r2, [r3, #0]
		break;
   970f6:	e058      	b.n	971aa <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_isouf_event = EVENT_ISOUF_SET_DATA;
   970f8:	683b      	ldr	r3, [r7, #0]
   970fa:	2203      	movs	r2, #3
   970fc:	701a      	strb	r2, [r3, #0]
		break;
   970fe:	e054      	b.n	971aa <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_isouf_event= EVENT_ISOUF_START_RINSE;
   97100:	683b      	ldr	r3, [r7, #0]
   97102:	2204      	movs	r2, #4
   97104:	701a      	strb	r2, [r3, #0]
		break;
   97106:	e050      	b.n	971aa <cl_isouf_translatemacevent+0x266>
		case  EVT_CONSOLE_COMMAND_DIALYSIS_START:
		*cl_isouf_event= EVENT_ISOUF_START_DIALYSIS;
   97108:	683b      	ldr	r3, [r7, #0]
   9710a:	2205      	movs	r2, #5
   9710c:	701a      	strb	r2, [r3, #0]
		break;
   9710e:	e04c      	b.n	971aa <cl_isouf_translatemacevent+0x266>
		case  EVT_TIMER_EXPIRED:
		
		break;
		case EVT_TICK_50M:
		*cl_isouf_event =   EVENT_ISOUF_TICK_50MS;
   97110:	683b      	ldr	r3, [r7, #0]
   97112:	2207      	movs	r2, #7
   97114:	701a      	strb	r2, [r3, #0]
		break;
   97116:	e048      	b.n	971aa <cl_isouf_translatemacevent+0x266>
		case EVT_TICK_500M:
		*cl_isouf_event = EVENT_ISOUF_TICK_500MS;
   97118:	683b      	ldr	r3, [r7, #0]
   9711a:	2208      	movs	r2, #8
   9711c:	701a      	strb	r2, [r3, #0]
		break;
   9711e:	e044      	b.n	971aa <cl_isouf_translatemacevent+0x266>
		case EVT_TICK_SEC:
		*cl_isouf_event =   EVENT_ISOUF_TICK_SECOND;
   97120:	683b      	ldr	r3, [r7, #0]
   97122:	2209      	movs	r2, #9
   97124:	701a      	strb	r2, [r3, #0]
		break;
   97126:	e040      	b.n	971aa <cl_isouf_translatemacevent+0x266>
		case EVT_TICK_MIN:
		*cl_isouf_event =   EVENT_ISOUF_TICK_MINUTE;
   97128:	683b      	ldr	r3, [r7, #0]
   9712a:	220a      	movs	r2, #10
   9712c:	701a      	strb	r2, [r3, #0]
		break;
   9712e:	e03c      	b.n	971aa <cl_isouf_translatemacevent+0x266>
		case EVT_TICK_HOUR:
		*cl_isouf_event =   EVENT_ISOUF_TICK_HOUR;
   97130:	683b      	ldr	r3, [r7, #0]
   97132:	220b      	movs	r2, #11
   97134:	701a      	strb	r2, [r3, #0]
		break;
   97136:	e038      	b.n	971aa <cl_isouf_translatemacevent+0x266>
		case EVT_ALARM_TRIGGERED:
		*cl_isouf_event =   EVENT_ISOUF_ALARM;
   97138:	683b      	ldr	r3, [r7, #0]
   9713a:	220c      	movs	r2, #12
   9713c:	701a      	strb	r2, [r3, #0]
		break;
   9713e:	e034      	b.n	971aa <cl_isouf_translatemacevent+0x266>
		case EVT_ALERT_TRIGGERED:
		*cl_isouf_event =   EVENT_ISOUF_ALERT;
   97140:	683b      	ldr	r3, [r7, #0]
   97142:	220d      	movs	r2, #13
   97144:	701a      	strb	r2, [r3, #0]
		break;
   97146:	e030      	b.n	971aa <cl_isouf_translatemacevent+0x266>
		
		case EVT_CONSOLE_COMMAND_START_RETURN:
		*cl_isouf_event =   EVENT_ISOUF_STOP_RETURN;
   97148:	683b      	ldr	r3, [r7, #0]
   9714a:	220f      	movs	r2, #15
   9714c:	701a      	strb	r2, [r3, #0]
		break;
   9714e:	e02c      	b.n	971aa <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_STOP_RETURN:
		*cl_isouf_event =   EVENT_ISOUF_STOP_RETURN;
   97150:	683b      	ldr	r3, [r7, #0]
   97152:	220f      	movs	r2, #15
   97154:	701a      	strb	r2, [r3, #0]
		break;
   97156:	e028      	b.n	971aa <cl_isouf_translatemacevent+0x266>
		
		case EVT_CONSOLE_COMMAND_HEP_PMP_RATE:
		*cl_isouf_event =   EVENT_ISOUF_HEP_RATE;
   97158:	683b      	ldr	r3, [r7, #0]
   9715a:	2213      	movs	r2, #19
   9715c:	701a      	strb	r2, [r3, #0]
		break;
   9715e:	e024      	b.n	971aa <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_HEPARIN_START:
		*cl_isouf_event =   EVENT_ISOUF_HEP_ON;
   97160:	683b      	ldr	r3, [r7, #0]
   97162:	2214      	movs	r2, #20
   97164:	701a      	strb	r2, [r3, #0]
		break;
   97166:	e020      	b.n	971aa <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
		*cl_isouf_event =   EVENT_ISOUF_HEP_OFF;
   97168:	683b      	ldr	r3, [r7, #0]
   9716a:	2215      	movs	r2, #21
   9716c:	701a      	strb	r2, [r3, #0]
		
		break;
   9716e:	e01c      	b.n	971aa <cl_isouf_translatemacevent+0x266>
		
		case MACREQ_ISOUF_COMPLETED:
		*cl_isouf_event =   CL_ISOUF_STATE_POST_COMPLETION;
   97170:	683b      	ldr	r3, [r7, #0]
   97172:	2207      	movs	r2, #7
   97174:	701a      	strb	r2, [r3, #0]
		break;
   97176:	e018      	b.n	971aa <cl_isouf_translatemacevent+0x266>
		case MACREQ_POST_DIALYSIS_ISOUF_REQ:
		*cl_isouf_event =   EVENT_ISOUF_START;
   97178:	683b      	ldr	r3, [r7, #0]
   9717a:	2216      	movs	r2, #22
   9717c:	701a      	strb	r2, [r3, #0]
		break;
   9717e:	e014      	b.n	971aa <cl_isouf_translatemacevent+0x266>
		case 	EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
		*cl_isouf_event = EVENT_ISOUF_HEAPARIN_BOLUS;
   97180:	683b      	ldr	r3, [r7, #0]
   97182:	221b      	movs	r2, #27
   97184:	701a      	strb	r2, [r3, #0]
		break;
   97186:	e010      	b.n	971aa <cl_isouf_translatemacevent+0x266>
		
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		*cl_isouf_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL;
   97188:	683b      	ldr	r3, [r7, #0]
   9718a:	225b      	movs	r2, #91	; 0x5b
   9718c:	701a      	strb	r2, [r3, #0]
		break;
   9718e:	e00c      	b.n	971aa <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		*cl_isouf_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL;
   97190:	683b      	ldr	r3, [r7, #0]
   97192:	225c      	movs	r2, #92	; 0x5c
   97194:	701a      	strb	r2, [r3, #0]
		break;
   97196:	e008      	b.n	971aa <cl_isouf_translatemacevent+0x266>
		
		case EVT_CONSOLE_COMMAND_BYPASS_ON:
		*cl_isouf_event = EVENT_ISOUF_BYPASS_ON;
   97198:	683b      	ldr	r3, [r7, #0]
   9719a:	221c      	movs	r2, #28
   9719c:	701a      	strb	r2, [r3, #0]
		break;
   9719e:	e004      	b.n	971aa <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_BYPASS_OFF:
		*cl_isouf_event = EVENT_ISOUF_BYPASS_OFF;
   971a0:	683b      	ldr	r3, [r7, #0]
   971a2:	221d      	movs	r2, #29
   971a4:	701a      	strb	r2, [r3, #0]
		break;
   971a6:	e000      	b.n	971aa <cl_isouf_translatemacevent+0x266>
		default:
		break;
   971a8:	bf00      	nop
	}
	return CL_OK;
   971aa:	2300      	movs	r3, #0
}
   971ac:	4618      	mov	r0, r3
   971ae:	370c      	adds	r7, #12
   971b0:	46bd      	mov	sp, r7
   971b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   971b6:	4770      	bx	lr

000971b8 <cl_isoufcompleted>:


Cl_ReturnCodeType cl_isoufcompleted(){
   971b8:	b580      	push	{r7, lr}
   971ba:	af00      	add	r7, sp, #0
	
	// stop uf pump
	cl_uf_controller(CL_UF_EVENT_STOP,0);
   971bc:	2004      	movs	r0, #4
   971be:	2100      	movs	r1, #0
   971c0:	4b07      	ldr	r3, [pc, #28]	; (971e0 <cl_isoufcompleted+0x28>)
   971c2:	4798      	blx	r3
	
	cl_isouf_retcode =  sv_cntrl_deactivatepump(UFPUMP);
   971c4:	2004      	movs	r0, #4
   971c6:	4b07      	ldr	r3, [pc, #28]	; (971e4 <cl_isoufcompleted+0x2c>)
   971c8:	4798      	blx	r3
   971ca:	4603      	mov	r3, r0
   971cc:	461a      	mov	r2, r3
   971ce:	4b06      	ldr	r3, [pc, #24]	; (971e8 <cl_isoufcompleted+0x30>)
   971d0:	701a      	strb	r2, [r3, #0]
	isouf = false;
   971d2:	4b06      	ldr	r3, [pc, #24]	; (971ec <cl_isoufcompleted+0x34>)
   971d4:	2200      	movs	r2, #0
   971d6:	701a      	strb	r2, [r3, #0]
	return CL_OK;
   971d8:	2300      	movs	r3, #0
}
   971da:	4618      	mov	r0, r3
   971dc:	bd80      	pop	{r7, pc}
   971de:	bf00      	nop
   971e0:	00097499 	.word	0x00097499
   971e4:	0009b369 	.word	0x0009b369
   971e8:	20071c3e 	.word	0x20071c3e
   971ec:	20071c44 	.word	0x20071c44

000971f0 <Cl_isouf_init>:
return CL_OK;

}

 Cl_ReturnCodeType Cl_isouf_init(void)
 {
   971f0:	b480      	push	{r7}
   971f2:	af00      	add	r7, sp, #0
	 
	 cl_isouf_state = CL_ISOUF_STATE_IDLE;
   971f4:	4b05      	ldr	r3, [pc, #20]	; (9720c <Cl_isouf_init+0x1c>)
   971f6:	2200      	movs	r2, #0
   971f8:	701a      	strb	r2, [r3, #0]

	 //cl_isouf_event = EVENT_NULL_EVENT;
	 
	 Cl_ISOufTotalSecondscounter=0 ;
   971fa:	4b05      	ldr	r3, [pc, #20]	; (97210 <Cl_isouf_init+0x20>)
   971fc:	2200      	movs	r2, #0
   971fe:	601a      	str	r2, [r3, #0]
	 return CL_OK;
   97200:	2300      	movs	r3, #0
 }
   97202:	4618      	mov	r0, r3
   97204:	46bd      	mov	sp, r7
   97206:	f85d 7b04 	ldr.w	r7, [sp], #4
   9720a:	4770      	bx	lr
   9720c:	20071c3d 	.word	0x20071c3d
   97210:	20071c40 	.word	0x20071c40

00097214 <cl_selftestFeedback_start>:
static Cl_Uint16Type uf_rotataion_marker = 1,prev_uf_rotataion_marker = 1;
static Cl_Uint16Type twentymscounter=0,uf_period = 0,uf_avg_period = 0, uf_freq_in_min = 0;
static Cl_Uint16Type uf_rotation_counter = 0,uf_selftest_rotation_counter = 0;
static Cl_BoolType count_state = false;
Cl_ReturnCodeType cl_selftestFeedback_start(void)
{
   97214:	b480      	push	{r7}
   97216:	af00      	add	r7, sp, #0
	cl_ufpump_state = CL_UFP_SELFTEST_STARTED;
   97218:	4b05      	ldr	r3, [pc, #20]	; (97230 <cl_selftestFeedback_start+0x1c>)
   9721a:	2209      	movs	r2, #9
   9721c:	701a      	strb	r2, [r3, #0]
	uf_periodvalue = 0;
   9721e:	4b05      	ldr	r3, [pc, #20]	; (97234 <cl_selftestFeedback_start+0x20>)
   97220:	2200      	movs	r2, #0
   97222:	801a      	strh	r2, [r3, #0]
	return 0;
   97224:	2300      	movs	r3, #0
}
   97226:	4618      	mov	r0, r3
   97228:	46bd      	mov	sp, r7
   9722a:	f85d 7b04 	ldr.w	r7, [sp], #4
   9722e:	4770      	bx	lr
   97230:	20071c66 	.word	0x20071c66
   97234:	20071b14 	.word	0x20071b14

00097238 <cl_selftestFeedback_stop>:

Cl_ReturnCodeType cl_selftestFeedback_stop(void)
{
   97238:	b480      	push	{r7}
   9723a:	af00      	add	r7, sp, #0
	cl_ufpump_state = CL_UFP_STATE_IDLE;
   9723c:	4b04      	ldr	r3, [pc, #16]	; (97250 <cl_selftestFeedback_stop+0x18>)
   9723e:	2200      	movs	r2, #0
   97240:	701a      	strb	r2, [r3, #0]
	return 0;
   97242:	2300      	movs	r3, #0
}
   97244:	4618      	mov	r0, r3
   97246:	46bd      	mov	sp, r7
   97248:	f85d 7b04 	ldr.w	r7, [sp], #4
   9724c:	4770      	bx	lr
   9724e:	bf00      	nop
   97250:	20071c66 	.word	0x20071c66

00097254 <cl_ufpumpFeedback_start>:
Cl_ReturnCodeType cl_ufpumpFeedback_start(void) 
{
   97254:	b480      	push	{r7}
   97256:	af00      	add	r7, sp, #0
	cl_ufpump_state = CL_UFP_STATE_STARTED;
   97258:	4b04      	ldr	r3, [pc, #16]	; (9726c <cl_ufpumpFeedback_start+0x18>)
   9725a:	2201      	movs	r2, #1
   9725c:	701a      	strb	r2, [r3, #0]
	return 0;
   9725e:	2300      	movs	r3, #0
}
   97260:	4618      	mov	r0, r3
   97262:	46bd      	mov	sp, r7
   97264:	f85d 7b04 	ldr.w	r7, [sp], #4
   97268:	4770      	bx	lr
   9726a:	bf00      	nop
   9726c:	20071c66 	.word	0x20071c66

00097270 <cl_ufpumpFeedback_stop>:
Cl_ReturnCodeType cl_ufpumpFeedback_stop(void)
{
   97270:	b480      	push	{r7}
   97272:	af00      	add	r7, sp, #0
	
	return 0;
   97274:	2300      	movs	r3, #0
}
   97276:	4618      	mov	r0, r3
   97278:	46bd      	mov	sp, r7
   9727a:	f85d 7b04 	ldr.w	r7, [sp], #4
   9727e:	4770      	bx	lr

00097280 <cl_ufpumpFeedback_set_expected_period>:
{
	*pdelta = uf_period - uf_expected_period;
	return 0;
}
Cl_ReturnCodeType cl_ufpumpFeedback_set_expected_period(int16_t period)
{
   97280:	b480      	push	{r7}
   97282:	b083      	sub	sp, #12
   97284:	af00      	add	r7, sp, #0
   97286:	4603      	mov	r3, r0
   97288:	80fb      	strh	r3, [r7, #6]
	uf_expected_period = period;
   9728a:	88fa      	ldrh	r2, [r7, #6]
   9728c:	4b04      	ldr	r3, [pc, #16]	; (972a0 <cl_ufpumpFeedback_set_expected_period+0x20>)
   9728e:	801a      	strh	r2, [r3, #0]
	return 0;
   97290:	2300      	movs	r3, #0
}
   97292:	4618      	mov	r0, r3
   97294:	370c      	adds	r7, #12
   97296:	46bd      	mov	sp, r7
   97298:	f85d 7b04 	ldr.w	r7, [sp], #4
   9729c:	4770      	bx	lr
   9729e:	bf00      	nop
   972a0:	20071c64 	.word	0x20071c64
   972a4:	00000000 	.word	0x00000000

000972a8 <cl_ufpumpFeedback_timer>:

Cl_ReturnCodeType cl_ufpumpFeedback_timer(void) // 20 ms clock
{
   972a8:	e92d 4398 	stmdb	sp!, {r3, r4, r7, r8, r9, lr}
   972ac:	af00      	add	r7, sp, #0
	if(cl_ufpump_state != CL_UFP_STATE_IDLE)
   972ae:	4b6a      	ldr	r3, [pc, #424]	; (97458 <cl_ufpumpFeedback_timer+0x1b0>)
   972b0:	781b      	ldrb	r3, [r3, #0]
   972b2:	2b00      	cmp	r3, #0
   972b4:	f000 80c2 	beq.w	9743c <cl_ufpumpFeedback_timer+0x194>
	{
	//cl_Datastreamtype cl_data;	
	//cl_testgetsensordata(UF_ROTATION_MARKER,&uf_rotataion_marker);
	Cl_SysStat_GetSensor_Status_Query(SENSOR_UFP_FB, &uf_rotataion_marker);
   972b8:	201a      	movs	r0, #26
   972ba:	4968      	ldr	r1, [pc, #416]	; (9745c <cl_ufpumpFeedback_timer+0x1b4>)
   972bc:	4b68      	ldr	r3, [pc, #416]	; (97460 <cl_ufpumpFeedback_timer+0x1b8>)
   972be:	4798      	blx	r3

	twentymscounter++;
   972c0:	4b68      	ldr	r3, [pc, #416]	; (97464 <cl_ufpumpFeedback_timer+0x1bc>)
   972c2:	881b      	ldrh	r3, [r3, #0]
   972c4:	3301      	adds	r3, #1
   972c6:	b29a      	uxth	r2, r3
   972c8:	4b66      	ldr	r3, [pc, #408]	; (97464 <cl_ufpumpFeedback_timer+0x1bc>)
   972ca:	801a      	strh	r2, [r3, #0]
// 	{
// 		cl_ufpump_state = CL_UFP_STATE_RUNNING;
// 	}
	
	
	if(count_state == false)
   972cc:	4b66      	ldr	r3, [pc, #408]	; (97468 <cl_ufpumpFeedback_timer+0x1c0>)
   972ce:	781b      	ldrb	r3, [r3, #0]
   972d0:	f083 0301 	eor.w	r3, r3, #1
   972d4:	b2db      	uxtb	r3, r3
   972d6:	2b00      	cmp	r3, #0
   972d8:	d012      	beq.n	97300 <cl_ufpumpFeedback_timer+0x58>
	{
		if(uf_rotataion_marker == 0 )
   972da:	4b60      	ldr	r3, [pc, #384]	; (9745c <cl_ufpumpFeedback_timer+0x1b4>)
   972dc:	881b      	ldrh	r3, [r3, #0]
   972de:	2b00      	cmp	r3, #0
   972e0:	f040 80a8 	bne.w	97434 <cl_ufpumpFeedback_timer+0x18c>
		{
			if(prev_uf_rotataion_marker != uf_rotataion_marker)
   972e4:	4b61      	ldr	r3, [pc, #388]	; (9746c <cl_ufpumpFeedback_timer+0x1c4>)
   972e6:	881a      	ldrh	r2, [r3, #0]
   972e8:	4b5c      	ldr	r3, [pc, #368]	; (9745c <cl_ufpumpFeedback_timer+0x1b4>)
   972ea:	881b      	ldrh	r3, [r3, #0]
   972ec:	429a      	cmp	r2, r3
   972ee:	f000 80a1 	beq.w	97434 <cl_ufpumpFeedback_timer+0x18c>
			{
				count_state = true;
   972f2:	4b5d      	ldr	r3, [pc, #372]	; (97468 <cl_ufpumpFeedback_timer+0x1c0>)
   972f4:	2201      	movs	r2, #1
   972f6:	701a      	strb	r2, [r3, #0]
				//uf_rotation_counter++;
				twentymscounter = 0;
   972f8:	4b5a      	ldr	r3, [pc, #360]	; (97464 <cl_ufpumpFeedback_timer+0x1bc>)
   972fa:	2200      	movs	r2, #0
   972fc:	801a      	strh	r2, [r3, #0]
   972fe:	e099      	b.n	97434 <cl_ufpumpFeedback_timer+0x18c>
			}
		}
	}
	else
	{
		if(uf_rotataion_marker == 0 )
   97300:	4b56      	ldr	r3, [pc, #344]	; (9745c <cl_ufpumpFeedback_timer+0x1b4>)
   97302:	881b      	ldrh	r3, [r3, #0]
   97304:	2b00      	cmp	r3, #0
   97306:	f040 8095 	bne.w	97434 <cl_ufpumpFeedback_timer+0x18c>
		{
			if(prev_uf_rotataion_marker != uf_rotataion_marker)
   9730a:	4b58      	ldr	r3, [pc, #352]	; (9746c <cl_ufpumpFeedback_timer+0x1c4>)
   9730c:	881a      	ldrh	r2, [r3, #0]
   9730e:	4b53      	ldr	r3, [pc, #332]	; (9745c <cl_ufpumpFeedback_timer+0x1b4>)
   97310:	881b      	ldrh	r3, [r3, #0]
   97312:	429a      	cmp	r2, r3
   97314:	f000 808e 	beq.w	97434 <cl_ufpumpFeedback_timer+0x18c>
			{
				count_state = true;
   97318:	4b53      	ldr	r3, [pc, #332]	; (97468 <cl_ufpumpFeedback_timer+0x1c0>)
   9731a:	2201      	movs	r2, #1
   9731c:	701a      	strb	r2, [r3, #0]
				uf_rotation_counter++;
   9731e:	4b54      	ldr	r3, [pc, #336]	; (97470 <cl_ufpumpFeedback_timer+0x1c8>)
   97320:	881b      	ldrh	r3, [r3, #0]
   97322:	3301      	adds	r3, #1
   97324:	b29a      	uxth	r2, r3
   97326:	4b52      	ldr	r3, [pc, #328]	; (97470 <cl_ufpumpFeedback_timer+0x1c8>)
   97328:	801a      	strh	r2, [r3, #0]
				uf_period = twentymscounter*100;
   9732a:	4b4e      	ldr	r3, [pc, #312]	; (97464 <cl_ufpumpFeedback_timer+0x1bc>)
   9732c:	881b      	ldrh	r3, [r3, #0]
   9732e:	461a      	mov	r2, r3
   97330:	0092      	lsls	r2, r2, #2
   97332:	4413      	add	r3, r2
   97334:	461a      	mov	r2, r3
   97336:	0091      	lsls	r1, r2, #2
   97338:	461a      	mov	r2, r3
   9733a:	460b      	mov	r3, r1
   9733c:	4413      	add	r3, r2
   9733e:	009b      	lsls	r3, r3, #2
   97340:	b29a      	uxth	r2, r3
   97342:	4b4c      	ldr	r3, [pc, #304]	; (97474 <cl_ufpumpFeedback_timer+0x1cc>)
   97344:	801a      	strh	r2, [r3, #0]
				uf_selftest_rotation_counter++;
   97346:	4b4c      	ldr	r3, [pc, #304]	; (97478 <cl_ufpumpFeedback_timer+0x1d0>)
   97348:	881b      	ldrh	r3, [r3, #0]
   9734a:	3301      	adds	r3, #1
   9734c:	b29a      	uxth	r2, r3
   9734e:	4b4a      	ldr	r3, [pc, #296]	; (97478 <cl_ufpumpFeedback_timer+0x1d0>)
   97350:	801a      	strh	r2, [r3, #0]
				
				if (uf_selftest_rotation_counter >= 4)
   97352:	4b49      	ldr	r3, [pc, #292]	; (97478 <cl_ufpumpFeedback_timer+0x1d0>)
   97354:	881b      	ldrh	r3, [r3, #0]
   97356:	2b03      	cmp	r3, #3
   97358:	d90c      	bls.n	97374 <cl_ufpumpFeedback_timer+0xcc>
				{
					
			      uf_periodvalue = uf_period;   //  uf_periodvalue = &uf_period;
   9735a:	4b46      	ldr	r3, [pc, #280]	; (97474 <cl_ufpumpFeedback_timer+0x1cc>)
   9735c:	881a      	ldrh	r2, [r3, #0]
   9735e:	4b47      	ldr	r3, [pc, #284]	; (9747c <cl_ufpumpFeedback_timer+0x1d4>)
   97360:	801a      	strh	r2, [r3, #0]
			       uf_selftest_rotation_counter = 0;
   97362:	4b45      	ldr	r3, [pc, #276]	; (97478 <cl_ufpumpFeedback_timer+0x1d0>)
   97364:	2200      	movs	r2, #0
   97366:	801a      	strh	r2, [r3, #0]
				   uf_rotation_counter = 0;
   97368:	4b41      	ldr	r3, [pc, #260]	; (97470 <cl_ufpumpFeedback_timer+0x1c8>)
   9736a:	2200      	movs	r2, #0
   9736c:	801a      	strh	r2, [r3, #0]
				   twentymscounter = 0;
   9736e:	4b3d      	ldr	r3, [pc, #244]	; (97464 <cl_ufpumpFeedback_timer+0x1bc>)
   97370:	2200      	movs	r2, #0
   97372:	801a      	strh	r2, [r3, #0]
				
	
			
			
				
				if((cl_ufpump_state != CL_UFP_STATE_STARTED) && (cl_ufpump_state !=  CL_UFP_SELFTEST_STARTED))
   97374:	4b38      	ldr	r3, [pc, #224]	; (97458 <cl_ufpumpFeedback_timer+0x1b0>)
   97376:	781b      	ldrb	r3, [r3, #0]
   97378:	2b01      	cmp	r3, #1
   9737a:	d04e      	beq.n	9741a <cl_ufpumpFeedback_timer+0x172>
   9737c:	4b36      	ldr	r3, [pc, #216]	; (97458 <cl_ufpumpFeedback_timer+0x1b0>)
   9737e:	781b      	ldrb	r3, [r3, #0]
   97380:	2b09      	cmp	r3, #9
   97382:	d04a      	beq.n	9741a <cl_ufpumpFeedback_timer+0x172>
				{
					if(uf_period > (1.01 *uf_expected_period))
   97384:	4b3b      	ldr	r3, [pc, #236]	; (97474 <cl_ufpumpFeedback_timer+0x1cc>)
   97386:	881b      	ldrh	r3, [r3, #0]
   97388:	461a      	mov	r2, r3
   9738a:	4b3d      	ldr	r3, [pc, #244]	; (97480 <cl_ufpumpFeedback_timer+0x1d8>)
   9738c:	4610      	mov	r0, r2
   9738e:	4798      	blx	r3
   97390:	4680      	mov	r8, r0
   97392:	4689      	mov	r9, r1
   97394:	4b3b      	ldr	r3, [pc, #236]	; (97484 <cl_ufpumpFeedback_timer+0x1dc>)
   97396:	881b      	ldrh	r3, [r3, #0]
   97398:	461a      	mov	r2, r3
   9739a:	4b39      	ldr	r3, [pc, #228]	; (97480 <cl_ufpumpFeedback_timer+0x1d8>)
   9739c:	4610      	mov	r0, r2
   9739e:	4798      	blx	r3
   973a0:	4602      	mov	r2, r0
   973a2:	460b      	mov	r3, r1
   973a4:	4c38      	ldr	r4, [pc, #224]	; (97488 <cl_ufpumpFeedback_timer+0x1e0>)
   973a6:	4610      	mov	r0, r2
   973a8:	4619      	mov	r1, r3
   973aa:	a327      	add	r3, pc, #156	; (adr r3, 97448 <cl_ufpumpFeedback_timer+0x1a0>)
   973ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   973b0:	47a0      	blx	r4
   973b2:	4602      	mov	r2, r0
   973b4:	460b      	mov	r3, r1
   973b6:	4c35      	ldr	r4, [pc, #212]	; (9748c <cl_ufpumpFeedback_timer+0x1e4>)
   973b8:	4640      	mov	r0, r8
   973ba:	4649      	mov	r1, r9
   973bc:	47a0      	blx	r4
   973be:	4603      	mov	r3, r0
   973c0:	2b00      	cmp	r3, #0
   973c2:	d003      	beq.n	973cc <cl_ufpumpFeedback_timer+0x124>
					{
						cl_ufpump_state = CL_UFP_STATE_RUNNING_SLOW;
   973c4:	4b24      	ldr	r3, [pc, #144]	; (97458 <cl_ufpumpFeedback_timer+0x1b0>)
   973c6:	2204      	movs	r2, #4
   973c8:	701a      	strb	r2, [r3, #0]
   973ca:	e026      	b.n	9741a <cl_ufpumpFeedback_timer+0x172>
					}
					else if(uf_period < (0.99 *uf_expected_period))
   973cc:	4b29      	ldr	r3, [pc, #164]	; (97474 <cl_ufpumpFeedback_timer+0x1cc>)
   973ce:	881b      	ldrh	r3, [r3, #0]
   973d0:	461a      	mov	r2, r3
   973d2:	4b2b      	ldr	r3, [pc, #172]	; (97480 <cl_ufpumpFeedback_timer+0x1d8>)
   973d4:	4610      	mov	r0, r2
   973d6:	4798      	blx	r3
   973d8:	4680      	mov	r8, r0
   973da:	4689      	mov	r9, r1
   973dc:	4b29      	ldr	r3, [pc, #164]	; (97484 <cl_ufpumpFeedback_timer+0x1dc>)
   973de:	881b      	ldrh	r3, [r3, #0]
   973e0:	461a      	mov	r2, r3
   973e2:	4b27      	ldr	r3, [pc, #156]	; (97480 <cl_ufpumpFeedback_timer+0x1d8>)
   973e4:	4610      	mov	r0, r2
   973e6:	4798      	blx	r3
   973e8:	4602      	mov	r2, r0
   973ea:	460b      	mov	r3, r1
   973ec:	4c26      	ldr	r4, [pc, #152]	; (97488 <cl_ufpumpFeedback_timer+0x1e0>)
   973ee:	4610      	mov	r0, r2
   973f0:	4619      	mov	r1, r3
   973f2:	a317      	add	r3, pc, #92	; (adr r3, 97450 <cl_ufpumpFeedback_timer+0x1a8>)
   973f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   973f8:	47a0      	blx	r4
   973fa:	4602      	mov	r2, r0
   973fc:	460b      	mov	r3, r1
   973fe:	4c24      	ldr	r4, [pc, #144]	; (97490 <cl_ufpumpFeedback_timer+0x1e8>)
   97400:	4640      	mov	r0, r8
   97402:	4649      	mov	r1, r9
   97404:	47a0      	blx	r4
   97406:	4603      	mov	r3, r0
   97408:	2b00      	cmp	r3, #0
   9740a:	d003      	beq.n	97414 <cl_ufpumpFeedback_timer+0x16c>
					{
						cl_ufpump_state = CL_UFP_STATE_RUNNING_FAST;
   9740c:	4b12      	ldr	r3, [pc, #72]	; (97458 <cl_ufpumpFeedback_timer+0x1b0>)
   9740e:	2205      	movs	r2, #5
   97410:	701a      	strb	r2, [r3, #0]
   97412:	e002      	b.n	9741a <cl_ufpumpFeedback_timer+0x172>
					}
					else
					{
						cl_ufpump_state = CL_UFP_STATE_RUNNING_NORMAL;
   97414:	4b10      	ldr	r3, [pc, #64]	; (97458 <cl_ufpumpFeedback_timer+0x1b0>)
   97416:	2203      	movs	r2, #3
   97418:	701a      	strb	r2, [r3, #0]
					}
				}

				
				uf_freq_in_min  = ( 60000) / uf_period;
   9741a:	4b16      	ldr	r3, [pc, #88]	; (97474 <cl_ufpumpFeedback_timer+0x1cc>)
   9741c:	881b      	ldrh	r3, [r3, #0]
   9741e:	461a      	mov	r2, r3
   97420:	f64e 2360 	movw	r3, #60000	; 0xea60
   97424:	fb93 f3f2 	sdiv	r3, r3, r2
   97428:	b29a      	uxth	r2, r3
   9742a:	4b1a      	ldr	r3, [pc, #104]	; (97494 <cl_ufpumpFeedback_timer+0x1ec>)
   9742c:	801a      	strh	r2, [r3, #0]
				twentymscounter = 0;
   9742e:	4b0d      	ldr	r3, [pc, #52]	; (97464 <cl_ufpumpFeedback_timer+0x1bc>)
   97430:	2200      	movs	r2, #0
   97432:	801a      	strh	r2, [r3, #0]
				
			}
		}
		
	}
	prev_uf_rotataion_marker = uf_rotataion_marker;
   97434:	4b09      	ldr	r3, [pc, #36]	; (9745c <cl_ufpumpFeedback_timer+0x1b4>)
   97436:	881a      	ldrh	r2, [r3, #0]
   97438:	4b0c      	ldr	r3, [pc, #48]	; (9746c <cl_ufpumpFeedback_timer+0x1c4>)
   9743a:	801a      	strh	r2, [r3, #0]
	}
	return 0;
   9743c:	2300      	movs	r3, #0
}
   9743e:	4618      	mov	r0, r3
   97440:	e8bd 8398 	ldmia.w	sp!, {r3, r4, r7, r8, r9, pc}
   97444:	f3af 8000 	nop.w
   97448:	c28f5c29 	.word	0xc28f5c29
   9744c:	3ff028f5 	.word	0x3ff028f5
   97450:	7ae147ae 	.word	0x7ae147ae
   97454:	3fefae14 	.word	0x3fefae14
   97458:	20071c66 	.word	0x20071c66
   9745c:	20070cd2 	.word	0x20070cd2
   97460:	0008fd69 	.word	0x0008fd69
   97464:	20071c68 	.word	0x20071c68
   97468:	20071c72 	.word	0x20071c72
   9746c:	20070cd4 	.word	0x20070cd4
   97470:	20071c6e 	.word	0x20071c6e
   97474:	20071c6a 	.word	0x20071c6a
   97478:	20071c70 	.word	0x20071c70
   9747c:	20071b14 	.word	0x20071b14
   97480:	000a79b9 	.word	0x000a79b9
   97484:	20071c64 	.word	0x20071c64
   97488:	000a7a85 	.word	0x000a7a85
   9748c:	000a7fa5 	.word	0x000a7fa5
   97490:	000a7f69 	.word	0x000a7f69
   97494:	20071c6c 	.word	0x20071c6c

00097498 <cl_uf_controller>:
float ufRemoved =0;
int ufTimeElapsed = 0;
int minCounter = 0 ;
extern bool isouf;
Cl_ReturnCodeType cl_uf_controller(cl_uf_events uf_event , int32_t data )
{
   97498:	b580      	push	{r7, lr}
   9749a:	b08e      	sub	sp, #56	; 0x38
   9749c:	af00      	add	r7, sp, #0
   9749e:	4603      	mov	r3, r0
   974a0:	6039      	str	r1, [r7, #0]
   974a2:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_uf_retcode = CL_OK;
   974a4:	2300      	movs	r3, #0
   974a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	cl_ufpump_states uf_pumpstate = CL_UFP_STATE_IDLE;
   974aa:	2300      	movs	r3, #0
   974ac:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	Cl_Uint16Type uf_delta_value = 0 ;
   974b0:	2300      	movs	r3, #0
   974b2:	86bb      	strh	r3, [r7, #52]	; 0x34
	static Cl_Uint16Type pwm_period = 0;
	Cl_Uint32Type temp = 0;
   974b4:	2300      	movs	r3, #0
   974b6:	633b      	str	r3, [r7, #48]	; 0x30
	Cl_Uint32Type temptime = 0;
   974b8:	2300      	movs	r3, #0
   974ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	
	switch(uf_state)
   974bc:	4b9c      	ldr	r3, [pc, #624]	; (97730 <cl_uf_controller+0x298>)
   974be:	781b      	ldrb	r3, [r3, #0]
   974c0:	2b04      	cmp	r3, #4
   974c2:	f200 8277 	bhi.w	979b4 <cl_uf_controller+0x51c>
   974c6:	a201      	add	r2, pc, #4	; (adr r2, 974cc <cl_uf_controller+0x34>)
   974c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   974cc:	000974e1 	.word	0x000974e1
   974d0:	000976ad 	.word	0x000976ad
   974d4:	0009787b 	.word	0x0009787b
   974d8:	00097969 	.word	0x00097969
   974dc:	000979b5 	.word	0x000979b5
	{
			case CL_UF_STATE_IDLE:
			switch (uf_event)
   974e0:	79fb      	ldrb	r3, [r7, #7]
   974e2:	2b02      	cmp	r3, #2
   974e4:	d014      	beq.n	97510 <cl_uf_controller+0x78>
   974e6:	2b08      	cmp	r3, #8
   974e8:	f000 808f 	beq.w	9760a <cl_uf_controller+0x172>
   974ec:	2b01      	cmp	r3, #1
   974ee:	d000      	beq.n	974f2 <cl_uf_controller+0x5a>
					}
					
				
					break;
					
					default:break;
   974f0:	e0db      	b.n	976aa <cl_uf_controller+0x212>
			case CL_UF_STATE_IDLE:
			switch (uf_event)
				{
					case CL_UF_EVENT_SET_UF_RATE:
					
					cl_uf_rate = data;
   974f2:	683b      	ldr	r3, [r7, #0]
   974f4:	4a8f      	ldr	r2, [pc, #572]	; (97734 <cl_uf_controller+0x29c>)
   974f6:	6013      	str	r3, [r2, #0]
					pwm_period =  cl_uf_rate ;
   974f8:	4b8e      	ldr	r3, [pc, #568]	; (97734 <cl_uf_controller+0x29c>)
   974fa:	681b      	ldr	r3, [r3, #0]
   974fc:	b29a      	uxth	r2, r3
   974fe:	4b8e      	ldr	r3, [pc, #568]	; (97738 <cl_uf_controller+0x2a0>)
   97500:	801a      	strh	r2, [r3, #0]
					sv_cntrl_setpumpspeed(UFPUMP,pwm_period);
   97502:	4b8d      	ldr	r3, [pc, #564]	; (97738 <cl_uf_controller+0x2a0>)
   97504:	881b      	ldrh	r3, [r3, #0]
   97506:	2004      	movs	r0, #4
   97508:	4619      	mov	r1, r3
   9750a:	4b8c      	ldr	r3, [pc, #560]	; (9773c <cl_uf_controller+0x2a4>)
   9750c:	4798      	blx	r3
					break;
   9750e:	e0cc      	b.n	976aa <cl_uf_controller+0x212>
					case CL_UF_EVENT_START:
				
				if(Cl_MacState == MAC_DIALYSIS)
   97510:	4b8b      	ldr	r3, [pc, #556]	; (97740 <cl_uf_controller+0x2a8>)
   97512:	781b      	ldrb	r3, [r3, #0]
   97514:	2b0f      	cmp	r3, #15
   97516:	d165      	bne.n	975e4 <cl_uf_controller+0x14c>
				{
					
					sv_cntrl_setpumpspeed(UFPUMP,12000);
   97518:	2004      	movs	r0, #4
   9751a:	f642 61e0 	movw	r1, #12000	; 0x2ee0
   9751e:	4b87      	ldr	r3, [pc, #540]	; (9773c <cl_uf_controller+0x2a4>)
   97520:	4798      	blx	r3
					cl_wait(100);
   97522:	2064      	movs	r0, #100	; 0x64
   97524:	4b87      	ldr	r3, [pc, #540]	; (97744 <cl_uf_controller+0x2ac>)
   97526:	4798      	blx	r3
					sv_cntrl_setpumpspeed(UFPUMP,8000);
   97528:	2004      	movs	r0, #4
   9752a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   9752e:	4b83      	ldr	r3, [pc, #524]	; (9773c <cl_uf_controller+0x2a4>)
   97530:	4798      	blx	r3
					cl_wait(100);
   97532:	2064      	movs	r0, #100	; 0x64
   97534:	4b83      	ldr	r3, [pc, #524]	; (97744 <cl_uf_controller+0x2ac>)
   97536:	4798      	blx	r3
					sv_cntrl_setpumpspeed(UFPUMP,6000);
   97538:	2004      	movs	r0, #4
   9753a:	f241 7170 	movw	r1, #6000	; 0x1770
   9753e:	4b7f      	ldr	r3, [pc, #508]	; (9773c <cl_uf_controller+0x2a4>)
   97540:	4798      	blx	r3
					cl_wait(100);
   97542:	2064      	movs	r0, #100	; 0x64
   97544:	4b7f      	ldr	r3, [pc, #508]	; (97744 <cl_uf_controller+0x2ac>)
   97546:	4798      	blx	r3
					sv_cntrl_setpumpspeed(UFPUMP,200);
   97548:	2004      	movs	r0, #4
   9754a:	21c8      	movs	r1, #200	; 0xc8
   9754c:	4b7b      	ldr	r3, [pc, #492]	; (9773c <cl_uf_controller+0x2a4>)
   9754e:	4798      	blx	r3
					cl_wait(100);
   97550:	2064      	movs	r0, #100	; 0x64
   97552:	4b7c      	ldr	r3, [pc, #496]	; (97744 <cl_uf_controller+0x2ac>)
   97554:	4798      	blx	r3
					
					
					 temp = Treatdata[ID_ufgoal];
   97556:	4b7c      	ldr	r3, [pc, #496]	; (97748 <cl_uf_controller+0x2b0>)
   97558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   9755a:	633b      	str	r3, [r7, #48]	; 0x30
					
					 temptime = Treatdata[ID_treattime]; // added to get the dialysis duration
   9755c:	4b7a      	ldr	r3, [pc, #488]	; (97748 <cl_uf_controller+0x2b0>)
   9755e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   97560:	62fb      	str	r3, [r7, #44]	; 0x2c
					
					float tempUfRate = temp/((temptime)/60);
   97562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   97564:	4a79      	ldr	r2, [pc, #484]	; (9774c <cl_uf_controller+0x2b4>)
   97566:	fba2 2303 	umull	r2, r3, r2, r3
   9756a:	095b      	lsrs	r3, r3, #5
   9756c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   9756e:	fbb2 f2f3 	udiv	r2, r2, r3
   97572:	4b77      	ldr	r3, [pc, #476]	; (97750 <cl_uf_controller+0x2b8>)
   97574:	4610      	mov	r0, r2
   97576:	4798      	blx	r3
   97578:	4603      	mov	r3, r0
   9757a:	62bb      	str	r3, [r7, #40]	; 0x28
					int16_t intufrate =tempUfRate * 10;
   9757c:	4b75      	ldr	r3, [pc, #468]	; (97754 <cl_uf_controller+0x2bc>)
   9757e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   97580:	4975      	ldr	r1, [pc, #468]	; (97758 <cl_uf_controller+0x2c0>)
   97582:	4798      	blx	r3
   97584:	4603      	mov	r3, r0
   97586:	461a      	mov	r2, r3
   97588:	4b74      	ldr	r3, [pc, #464]	; (9775c <cl_uf_controller+0x2c4>)
   9758a:	4610      	mov	r0, r2
   9758c:	4798      	blx	r3
   9758e:	4603      	mov	r3, r0
   97590:	84fb      	strh	r3, [r7, #38]	; 0x26
					
					Cl_Uint32Type calcufrate = tempUfRate * 10;
   97592:	4b70      	ldr	r3, [pc, #448]	; (97754 <cl_uf_controller+0x2bc>)
   97594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   97596:	4970      	ldr	r1, [pc, #448]	; (97758 <cl_uf_controller+0x2c0>)
   97598:	4798      	blx	r3
   9759a:	4603      	mov	r3, r0
   9759c:	461a      	mov	r2, r3
   9759e:	4b70      	ldr	r3, [pc, #448]	; (97760 <cl_uf_controller+0x2c8>)
   975a0:	4610      	mov	r0, r2
   975a2:	4798      	blx	r3
   975a4:	4603      	mov	r3, r0
   975a6:	623b      	str	r3, [r7, #32]
					Treatdata[ID_ufrate] = calcufrate;
   975a8:	4a67      	ldr	r2, [pc, #412]	; (97748 <cl_uf_controller+0x2b0>)
   975aa:	6a3b      	ldr	r3, [r7, #32]
   975ac:	6313      	str	r3, [r2, #48]	; 0x30
					calibrate_uf(intufrate);
   975ae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   975b2:	4618      	mov	r0, r3
   975b4:	4b6b      	ldr	r3, [pc, #428]	; (97764 <cl_uf_controller+0x2cc>)
   975b6:	4798      	blx	r3
					// based on this uf rate calculate the PWM
					// below logic needs to be changed lookup table needs to be implemented between uf rate and pwm

					if(temp > 0){
   975b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   975ba:	2b00      	cmp	r3, #0
   975bc:	d011      	beq.n	975e2 <cl_uf_controller+0x14a>
	
					
					sv_cntrl_setpumpspeed(UFPUMP,uf_final); // enter pwm data from the lookuop table
   975be:	4b6a      	ldr	r3, [pc, #424]	; (97768 <cl_uf_controller+0x2d0>)
   975c0:	681b      	ldr	r3, [r3, #0]
   975c2:	2004      	movs	r0, #4
   975c4:	4619      	mov	r1, r3
   975c6:	4b5d      	ldr	r3, [pc, #372]	; (9773c <cl_uf_controller+0x2a4>)
   975c8:	4798      	blx	r3
				//	cl_ufpumpFeedback_set_expected_period(uf_final); // not required for now
					cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   975ca:	2004      	movs	r0, #4
   975cc:	4b67      	ldr	r3, [pc, #412]	; (9776c <cl_uf_controller+0x2d4>)
   975ce:	4798      	blx	r3
   975d0:	4603      	mov	r3, r0
   975d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					cl_ufpumpFeedback_start();
   975d6:	4b66      	ldr	r3, [pc, #408]	; (97770 <cl_uf_controller+0x2d8>)
   975d8:	4798      	blx	r3
					uf_state = CL_UF_STATE_STARTED;
   975da:	4b55      	ldr	r3, [pc, #340]	; (97730 <cl_uf_controller+0x298>)
   975dc:	2201      	movs	r2, #1
   975de:	701a      	strb	r2, [r3, #0]
   975e0:	e012      	b.n	97608 <cl_uf_controller+0x170>
   975e2:	e011      	b.n	97608 <cl_uf_controller+0x170>
					}
					
				}
					else{
				
					sv_cntrl_setpumpspeed(UFPUMP,pwm_period); // enter pwm data from the lookuop table
   975e4:	4b54      	ldr	r3, [pc, #336]	; (97738 <cl_uf_controller+0x2a0>)
   975e6:	881b      	ldrh	r3, [r3, #0]
   975e8:	2004      	movs	r0, #4
   975ea:	4619      	mov	r1, r3
   975ec:	4b53      	ldr	r3, [pc, #332]	; (9773c <cl_uf_controller+0x2a4>)
   975ee:	4798      	blx	r3
					cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   975f0:	2004      	movs	r0, #4
   975f2:	4b5e      	ldr	r3, [pc, #376]	; (9776c <cl_uf_controller+0x2d4>)
   975f4:	4798      	blx	r3
   975f6:	4603      	mov	r3, r0
   975f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					cl_ufpumpFeedback_start();
   975fc:	4b5c      	ldr	r3, [pc, #368]	; (97770 <cl_uf_controller+0x2d8>)
   975fe:	4798      	blx	r3
					uf_state = CL_UF_STATE_STARTED;
   97600:	4b4b      	ldr	r3, [pc, #300]	; (97730 <cl_uf_controller+0x298>)
   97602:	2201      	movs	r2, #1
   97604:	701a      	strb	r2, [r3, #0]
				
						
					}
					
					break;
   97606:	e050      	b.n	976aa <cl_uf_controller+0x212>
   97608:	e04f      	b.n	976aa <cl_uf_controller+0x212>
					
					case CL_UF_EVENT_RESET:
					
					
					 temp = Treatdata[ID_ufgoal];
   9760a:	4b4f      	ldr	r3, [pc, #316]	; (97748 <cl_uf_controller+0x2b0>)
   9760c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   9760e:	633b      	str	r3, [r7, #48]	; 0x30
					 temptime = CL_DLSIS_TIMEOUT_MIN;//Treatdata[ID_treattime]; // added to get the dialysis duration
   97610:	23f0      	movs	r3, #240	; 0xf0
   97612:	62fb      	str	r3, [r7, #44]	; 0x2c
					
					float tempUfRate2 = temp/((temptime)/60);
   97614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   97616:	4a4d      	ldr	r2, [pc, #308]	; (9774c <cl_uf_controller+0x2b4>)
   97618:	fba2 2303 	umull	r2, r3, r2, r3
   9761c:	095b      	lsrs	r3, r3, #5
   9761e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   97620:	fbb2 f2f3 	udiv	r2, r2, r3
   97624:	4b4a      	ldr	r3, [pc, #296]	; (97750 <cl_uf_controller+0x2b8>)
   97626:	4610      	mov	r0, r2
   97628:	4798      	blx	r3
   9762a:	4603      	mov	r3, r0
   9762c:	61fb      	str	r3, [r7, #28]
					intufrate2 =tempUfRate2 * 10;
   9762e:	4b49      	ldr	r3, [pc, #292]	; (97754 <cl_uf_controller+0x2bc>)
   97630:	69f8      	ldr	r0, [r7, #28]
   97632:	4949      	ldr	r1, [pc, #292]	; (97758 <cl_uf_controller+0x2c0>)
   97634:	4798      	blx	r3
   97636:	4603      	mov	r3, r0
   97638:	461a      	mov	r2, r3
   9763a:	4b48      	ldr	r3, [pc, #288]	; (9775c <cl_uf_controller+0x2c4>)
   9763c:	4610      	mov	r0, r2
   9763e:	4798      	blx	r3
   97640:	4603      	mov	r3, r0
   97642:	b29a      	uxth	r2, r3
   97644:	4b4b      	ldr	r3, [pc, #300]	; (97774 <cl_uf_controller+0x2dc>)
   97646:	801a      	strh	r2, [r3, #0]
					
					Cl_Uint32Type calcufrate = tempUfRate2 * 10;
   97648:	4b42      	ldr	r3, [pc, #264]	; (97754 <cl_uf_controller+0x2bc>)
   9764a:	69f8      	ldr	r0, [r7, #28]
   9764c:	4942      	ldr	r1, [pc, #264]	; (97758 <cl_uf_controller+0x2c0>)
   9764e:	4798      	blx	r3
   97650:	4603      	mov	r3, r0
   97652:	461a      	mov	r2, r3
   97654:	4b42      	ldr	r3, [pc, #264]	; (97760 <cl_uf_controller+0x2c8>)
   97656:	4610      	mov	r0, r2
   97658:	4798      	blx	r3
   9765a:	4603      	mov	r3, r0
   9765c:	61bb      	str	r3, [r7, #24]
					Treatdata[ID_ufrate] = calcufrate;
   9765e:	4a3a      	ldr	r2, [pc, #232]	; (97748 <cl_uf_controller+0x2b0>)
   97660:	69bb      	ldr	r3, [r7, #24]
   97662:	6313      	str	r3, [r2, #48]	; 0x30
					
					calibrate_uf(intufrate2);
   97664:	4b43      	ldr	r3, [pc, #268]	; (97774 <cl_uf_controller+0x2dc>)
   97666:	881b      	ldrh	r3, [r3, #0]
   97668:	b21b      	sxth	r3, r3
   9766a:	4618      	mov	r0, r3
   9766c:	4b3d      	ldr	r3, [pc, #244]	; (97764 <cl_uf_controller+0x2cc>)
   9766e:	4798      	blx	r3
					// based on this uf rate calculate the PWM
					// below logic needs to be changed lookup table needs to be implemented between uf rate and pwm

					if(temp > 0){
   97670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   97672:	2b00      	cmp	r3, #0
   97674:	d018      	beq.n	976a8 <cl_uf_controller+0x210>
						
						
						sv_cntrl_setpumpspeed(UFPUMP,uf_final); // enter pwm data from the lookuop table
   97676:	4b3c      	ldr	r3, [pc, #240]	; (97768 <cl_uf_controller+0x2d0>)
   97678:	681b      	ldr	r3, [r3, #0]
   9767a:	2004      	movs	r0, #4
   9767c:	4619      	mov	r1, r3
   9767e:	4b2f      	ldr	r3, [pc, #188]	; (9773c <cl_uf_controller+0x2a4>)
   97680:	4798      	blx	r3
						cl_ufpumpFeedback_set_expected_period(uf_final); // not required
   97682:	4b39      	ldr	r3, [pc, #228]	; (97768 <cl_uf_controller+0x2d0>)
   97684:	681b      	ldr	r3, [r3, #0]
   97686:	b29b      	uxth	r3, r3
   97688:	b21b      	sxth	r3, r3
   9768a:	4618      	mov	r0, r3
   9768c:	4b3a      	ldr	r3, [pc, #232]	; (97778 <cl_uf_controller+0x2e0>)
   9768e:	4798      	blx	r3
						cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   97690:	2004      	movs	r0, #4
   97692:	4b36      	ldr	r3, [pc, #216]	; (9776c <cl_uf_controller+0x2d4>)
   97694:	4798      	blx	r3
   97696:	4603      	mov	r3, r0
   97698:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						cl_ufpumpFeedback_start();
   9769c:	4b34      	ldr	r3, [pc, #208]	; (97770 <cl_uf_controller+0x2d8>)
   9769e:	4798      	blx	r3
						uf_state = CL_UF_STATE_STARTED;
   976a0:	4b23      	ldr	r3, [pc, #140]	; (97730 <cl_uf_controller+0x298>)
   976a2:	2201      	movs	r2, #1
   976a4:	701a      	strb	r2, [r3, #0]
					}
					
				
					break;
   976a6:	e7ff      	b.n	976a8 <cl_uf_controller+0x210>
   976a8:	bf00      	nop
					
					default:break;
					
				}
			break;
   976aa:	e184      	b.n	979b6 <cl_uf_controller+0x51e>
			case CL_UF_STATE_STARTED:
			switch (uf_event)
   976ac:	79fb      	ldrb	r3, [r7, #7]
   976ae:	3b01      	subs	r3, #1
   976b0:	2b09      	cmp	r3, #9
   976b2:	f200 80e0 	bhi.w	97876 <cl_uf_controller+0x3de>
   976b6:	a201      	add	r2, pc, #4	; (adr r2, 976bc <cl_uf_controller+0x224>)
   976b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   976bc:	000976f7 	.word	0x000976f7
   976c0:	00097877 	.word	0x00097877
   976c4:	00097877 	.word	0x00097877
   976c8:	00097709 	.word	0x00097709
   976cc:	00097727 	.word	0x00097727
   976d0:	000976eb 	.word	0x000976eb
   976d4:	00097877 	.word	0x00097877
   976d8:	0009778d 	.word	0x0009778d
   976dc:	00097877 	.word	0x00097877
   976e0:	000976e5 	.word	0x000976e5
			{
				
				case CL_UF_EVENT_MINUTE:
				
				Cl_SendUfdata();
   976e4:	4b25      	ldr	r3, [pc, #148]	; (9777c <cl_uf_controller+0x2e4>)
   976e6:	4798      	blx	r3
				break;
   976e8:	e0c6      	b.n	97878 <cl_uf_controller+0x3e0>
				case CL_UF_EVENT_SECOND:
				//cl_ufpumpFeedback_get_state(&uf_pumpstate);
				//cl_ufpumpFeedback_get_delta(&uf_delta_value);
			
				
					ufTimeElapsed++;
   976ea:	4b25      	ldr	r3, [pc, #148]	; (97780 <cl_uf_controller+0x2e8>)
   976ec:	681b      	ldr	r3, [r3, #0]
   976ee:	3301      	adds	r3, #1
   976f0:	4a23      	ldr	r2, [pc, #140]	; (97780 <cl_uf_controller+0x2e8>)
   976f2:	6013      	str	r3, [r2, #0]
// 				}
// 				else
// 				{
// 					
// 				}
				break;
   976f4:	e0c0      	b.n	97878 <cl_uf_controller+0x3e0>
				
				
				case CL_UF_EVENT_SET_UF_RATE:
					cl_uf_rate = data;
   976f6:	683b      	ldr	r3, [r7, #0]
   976f8:	4a0e      	ldr	r2, [pc, #56]	; (97734 <cl_uf_controller+0x29c>)
   976fa:	6013      	str	r3, [r2, #0]
					sv_cntrl_setpumpspeed(UFPUMP,data);
   976fc:	683b      	ldr	r3, [r7, #0]
   976fe:	2004      	movs	r0, #4
   97700:	4619      	mov	r1, r3
   97702:	4b0e      	ldr	r3, [pc, #56]	; (9773c <cl_uf_controller+0x2a4>)
   97704:	4798      	blx	r3
				break;
   97706:	e0b7      	b.n	97878 <cl_uf_controller+0x3e0>
				case CL_UF_EVENT_PAUSE:
				break;
				case CL_UF_EVENT_STOP:
				cl_uf_retcode =  sv_cntrl_deactivatepump(UFPUMP);
   97708:	2004      	movs	r0, #4
   9770a:	4b1e      	ldr	r3, [pc, #120]	; (97784 <cl_uf_controller+0x2ec>)
   9770c:	4798      	blx	r3
   9770e:	4603      	mov	r3, r0
   97710:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				cl_uf_retcode =  cl_ufpumpFeedback_stop();
   97714:	4b1c      	ldr	r3, [pc, #112]	; (97788 <cl_uf_controller+0x2f0>)
   97716:	4798      	blx	r3
   97718:	4603      	mov	r3, r0
   9771a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				uf_state = CL_UF_STATE_STOPPED;
   9771e:	4b04      	ldr	r3, [pc, #16]	; (97730 <cl_uf_controller+0x298>)
   97720:	2202      	movs	r2, #2
   97722:	701a      	strb	r2, [r3, #0]
				break;
   97724:	e0a8      	b.n	97878 <cl_uf_controller+0x3e0>
				case CL_UF_EVENT_COMPLETED:
				uf_state = CL_UF_STATE_IDLE;
   97726:	4b02      	ldr	r3, [pc, #8]	; (97730 <cl_uf_controller+0x298>)
   97728:	2200      	movs	r2, #0
   9772a:	701a      	strb	r2, [r3, #0]
				break;
   9772c:	e0a4      	b.n	97878 <cl_uf_controller+0x3e0>
   9772e:	bf00      	nop
   97730:	20071c73 	.word	0x20071c73
   97734:	20071c74 	.word	0x20071c74
   97738:	20071c84 	.word	0x20071c84
   9773c:	0009b461 	.word	0x0009b461
   97740:	20070730 	.word	0x20070730
   97744:	0009421d 	.word	0x0009421d
   97748:	20072880 	.word	0x20072880
   9774c:	88888889 	.word	0x88888889
   97750:	000a8255 	.word	0x000a8255
   97754:	000a8305 	.word	0x000a8305
   97758:	41200000 	.word	0x41200000
   9775c:	000a8691 	.word	0x000a8691
   97760:	000a86dd 	.word	0x000a86dd
   97764:	000846d9 	.word	0x000846d9
   97768:	20071978 	.word	0x20071978
   9776c:	0009b32d 	.word	0x0009b32d
   97770:	00097255 	.word	0x00097255
   97774:	20071c78 	.word	0x20071c78
   97778:	00097281 	.word	0x00097281
   9777c:	00097a15 	.word	0x00097a15
   97780:	20071c80 	.word	0x20071c80
   97784:	0009b369 	.word	0x0009b369
   97788:	00097271 	.word	0x00097271
				case CL_UF_EVENT_RESET:				
				
				sv_cntrl_setpumpspeed(UFPUMP,12000);
   9778c:	2004      	movs	r0, #4
   9778e:	f642 61e0 	movw	r1, #12000	; 0x2ee0
   97792:	4b8b      	ldr	r3, [pc, #556]	; (979c0 <cl_uf_controller+0x528>)
   97794:	4798      	blx	r3
				cl_wait(100);
   97796:	2064      	movs	r0, #100	; 0x64
   97798:	4b8a      	ldr	r3, [pc, #552]	; (979c4 <cl_uf_controller+0x52c>)
   9779a:	4798      	blx	r3
				sv_cntrl_setpumpspeed(UFPUMP,8000);
   9779c:	2004      	movs	r0, #4
   9779e:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   977a2:	4b87      	ldr	r3, [pc, #540]	; (979c0 <cl_uf_controller+0x528>)
   977a4:	4798      	blx	r3
				cl_wait(100);
   977a6:	2064      	movs	r0, #100	; 0x64
   977a8:	4b86      	ldr	r3, [pc, #536]	; (979c4 <cl_uf_controller+0x52c>)
   977aa:	4798      	blx	r3
				sv_cntrl_setpumpspeed(UFPUMP,6000);
   977ac:	2004      	movs	r0, #4
   977ae:	f241 7170 	movw	r1, #6000	; 0x1770
   977b2:	4b83      	ldr	r3, [pc, #524]	; (979c0 <cl_uf_controller+0x528>)
   977b4:	4798      	blx	r3
				cl_wait(100);
   977b6:	2064      	movs	r0, #100	; 0x64
   977b8:	4b82      	ldr	r3, [pc, #520]	; (979c4 <cl_uf_controller+0x52c>)
   977ba:	4798      	blx	r3
				sv_cntrl_setpumpspeed(UFPUMP,200);
   977bc:	2004      	movs	r0, #4
   977be:	21c8      	movs	r1, #200	; 0xc8
   977c0:	4b7f      	ldr	r3, [pc, #508]	; (979c0 <cl_uf_controller+0x528>)
   977c2:	4798      	blx	r3
				cl_wait(100);
   977c4:	2064      	movs	r0, #100	; 0x64
   977c6:	4b7f      	ldr	r3, [pc, #508]	; (979c4 <cl_uf_controller+0x52c>)
   977c8:	4798      	blx	r3
				
										// added this event
				
					
					
					temptime = Treatdata[ID_treattime] - ufTimeElapsed;//Treatdata[ID_treattime]; // added to get the dialysis duration	
   977ca:	4b7f      	ldr	r3, [pc, #508]	; (979c8 <cl_uf_controller+0x530>)
   977cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   977ce:	4a7f      	ldr	r2, [pc, #508]	; (979cc <cl_uf_controller+0x534>)
   977d0:	6812      	ldr	r2, [r2, #0]
   977d2:	1a9b      	subs	r3, r3, r2
   977d4:	62fb      	str	r3, [r7, #44]	; 0x2c
						temp = Treatdata[ID_ufgoal] - ufRemoved;
   977d6:	4b7c      	ldr	r3, [pc, #496]	; (979c8 <cl_uf_controller+0x530>)
   977d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   977da:	4b7d      	ldr	r3, [pc, #500]	; (979d0 <cl_uf_controller+0x538>)
   977dc:	4610      	mov	r0, r2
   977de:	4798      	blx	r3
   977e0:	4601      	mov	r1, r0
   977e2:	4b7c      	ldr	r3, [pc, #496]	; (979d4 <cl_uf_controller+0x53c>)
   977e4:	681a      	ldr	r2, [r3, #0]
   977e6:	4b7c      	ldr	r3, [pc, #496]	; (979d8 <cl_uf_controller+0x540>)
   977e8:	4608      	mov	r0, r1
   977ea:	4611      	mov	r1, r2
   977ec:	4798      	blx	r3
   977ee:	4603      	mov	r3, r0
   977f0:	461a      	mov	r2, r3
   977f2:	4b7a      	ldr	r3, [pc, #488]	; (979dc <cl_uf_controller+0x544>)
   977f4:	4610      	mov	r0, r2
   977f6:	4798      	blx	r3
   977f8:	4603      	mov	r3, r0
   977fa:	633b      	str	r3, [r7, #48]	; 0x30
					
					
					
					float tempUfRate = temp/((temptime)/60);
   977fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   977fe:	4a78      	ldr	r2, [pc, #480]	; (979e0 <cl_uf_controller+0x548>)
   97800:	fba2 2303 	umull	r2, r3, r2, r3
   97804:	095b      	lsrs	r3, r3, #5
   97806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   97808:	fbb2 f2f3 	udiv	r2, r2, r3
   9780c:	4b70      	ldr	r3, [pc, #448]	; (979d0 <cl_uf_controller+0x538>)
   9780e:	4610      	mov	r0, r2
   97810:	4798      	blx	r3
   97812:	4603      	mov	r3, r0
   97814:	617b      	str	r3, [r7, #20]
					intufrate2 =tempUfRate * 10;
   97816:	4b73      	ldr	r3, [pc, #460]	; (979e4 <cl_uf_controller+0x54c>)
   97818:	6978      	ldr	r0, [r7, #20]
   9781a:	4973      	ldr	r1, [pc, #460]	; (979e8 <cl_uf_controller+0x550>)
   9781c:	4798      	blx	r3
   9781e:	4603      	mov	r3, r0
   97820:	461a      	mov	r2, r3
   97822:	4b72      	ldr	r3, [pc, #456]	; (979ec <cl_uf_controller+0x554>)
   97824:	4610      	mov	r0, r2
   97826:	4798      	blx	r3
   97828:	4603      	mov	r3, r0
   9782a:	b29a      	uxth	r2, r3
   9782c:	4b70      	ldr	r3, [pc, #448]	; (979f0 <cl_uf_controller+0x558>)
   9782e:	801a      	strh	r2, [r3, #0]
					
					calibrate_uf(intufrate2);
   97830:	4b6f      	ldr	r3, [pc, #444]	; (979f0 <cl_uf_controller+0x558>)
   97832:	881b      	ldrh	r3, [r3, #0]
   97834:	b21b      	sxth	r3, r3
   97836:	4618      	mov	r0, r3
   97838:	4b6e      	ldr	r3, [pc, #440]	; (979f4 <cl_uf_controller+0x55c>)
   9783a:	4798      	blx	r3
					// based on this uf rate calculate the PWM
					// below logic needs to be changed lookup table needs to be implemented between uf rate and pwm

					if(temp > 0){
   9783c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   9783e:	2b00      	cmp	r3, #0
   97840:	d018      	beq.n	97874 <cl_uf_controller+0x3dc>
						
						
						sv_cntrl_setpumpspeed(UFPUMP,uf_final); // enter pwm data from the lookuop table
   97842:	4b6d      	ldr	r3, [pc, #436]	; (979f8 <cl_uf_controller+0x560>)
   97844:	681b      	ldr	r3, [r3, #0]
   97846:	2004      	movs	r0, #4
   97848:	4619      	mov	r1, r3
   9784a:	4b5d      	ldr	r3, [pc, #372]	; (979c0 <cl_uf_controller+0x528>)
   9784c:	4798      	blx	r3
						cl_ufpumpFeedback_set_expected_period(uf_final); // not required
   9784e:	4b6a      	ldr	r3, [pc, #424]	; (979f8 <cl_uf_controller+0x560>)
   97850:	681b      	ldr	r3, [r3, #0]
   97852:	b29b      	uxth	r3, r3
   97854:	b21b      	sxth	r3, r3
   97856:	4618      	mov	r0, r3
   97858:	4b68      	ldr	r3, [pc, #416]	; (979fc <cl_uf_controller+0x564>)
   9785a:	4798      	blx	r3
						cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   9785c:	2004      	movs	r0, #4
   9785e:	4b68      	ldr	r3, [pc, #416]	; (97a00 <cl_uf_controller+0x568>)
   97860:	4798      	blx	r3
   97862:	4603      	mov	r3, r0
   97864:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						cl_ufpumpFeedback_start();
   97868:	4b66      	ldr	r3, [pc, #408]	; (97a04 <cl_uf_controller+0x56c>)
   9786a:	4798      	blx	r3
						uf_state = CL_UF_STATE_STARTED;
   9786c:	4b66      	ldr	r3, [pc, #408]	; (97a08 <cl_uf_controller+0x570>)
   9786e:	2201      	movs	r2, #1
   97870:	701a      	strb	r2, [r3, #0]
					}
					
				break;
   97872:	e001      	b.n	97878 <cl_uf_controller+0x3e0>
   97874:	e000      	b.n	97878 <cl_uf_controller+0x3e0>
				default:break;
   97876:	bf00      	nop
				
			}
			break;
   97878:	e09d      	b.n	979b6 <cl_uf_controller+0x51e>
			case CL_UF_STATE_STOPPED:
			switch (uf_event)
   9787a:	79fb      	ldrb	r3, [r7, #7]
   9787c:	2b01      	cmp	r3, #1
   9787e:	d002      	beq.n	97886 <cl_uf_controller+0x3ee>
   97880:	2b02      	cmp	r3, #2
   97882:	d009      	beq.n	97898 <cl_uf_controller+0x400>
					uf_state = CL_UF_STATE_STARTED;
				}
				
				
				break;
				default:break;
   97884:	e06f      	b.n	97966 <cl_uf_controller+0x4ce>
			break;
			case CL_UF_STATE_STOPPED:
			switch (uf_event)
			{
				case CL_UF_EVENT_SET_UF_RATE:
					cl_uf_rate = data;
   97886:	683b      	ldr	r3, [r7, #0]
   97888:	4a60      	ldr	r2, [pc, #384]	; (97a0c <cl_uf_controller+0x574>)
   9788a:	6013      	str	r3, [r2, #0]
					sv_cntrl_setpumpspeed(UFPUMP,data);
   9788c:	683b      	ldr	r3, [r7, #0]
   9788e:	2004      	movs	r0, #4
   97890:	4619      	mov	r1, r3
   97892:	4b4b      	ldr	r3, [pc, #300]	; (979c0 <cl_uf_controller+0x528>)
   97894:	4798      	blx	r3
				break;
   97896:	e066      	b.n	97966 <cl_uf_controller+0x4ce>
				case CL_UF_EVENT_START:													// added this event
				//cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
				//uf_state = CL_UF_STATE_STARTED;
				
				sv_cntrl_setpumpspeed(UFPUMP,12000);
   97898:	2004      	movs	r0, #4
   9789a:	f642 61e0 	movw	r1, #12000	; 0x2ee0
   9789e:	4b48      	ldr	r3, [pc, #288]	; (979c0 <cl_uf_controller+0x528>)
   978a0:	4798      	blx	r3
				cl_wait(100);
   978a2:	2064      	movs	r0, #100	; 0x64
   978a4:	4b47      	ldr	r3, [pc, #284]	; (979c4 <cl_uf_controller+0x52c>)
   978a6:	4798      	blx	r3
				sv_cntrl_setpumpspeed(UFPUMP,8000);
   978a8:	2004      	movs	r0, #4
   978aa:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   978ae:	4b44      	ldr	r3, [pc, #272]	; (979c0 <cl_uf_controller+0x528>)
   978b0:	4798      	blx	r3
				cl_wait(100);
   978b2:	2064      	movs	r0, #100	; 0x64
   978b4:	4b43      	ldr	r3, [pc, #268]	; (979c4 <cl_uf_controller+0x52c>)
   978b6:	4798      	blx	r3
				sv_cntrl_setpumpspeed(UFPUMP,6000);
   978b8:	2004      	movs	r0, #4
   978ba:	f241 7170 	movw	r1, #6000	; 0x1770
   978be:	4b40      	ldr	r3, [pc, #256]	; (979c0 <cl_uf_controller+0x528>)
   978c0:	4798      	blx	r3
				cl_wait(100);
   978c2:	2064      	movs	r0, #100	; 0x64
   978c4:	4b3f      	ldr	r3, [pc, #252]	; (979c4 <cl_uf_controller+0x52c>)
   978c6:	4798      	blx	r3
				sv_cntrl_setpumpspeed(UFPUMP,200);
   978c8:	2004      	movs	r0, #4
   978ca:	21c8      	movs	r1, #200	; 0xc8
   978cc:	4b3c      	ldr	r3, [pc, #240]	; (979c0 <cl_uf_controller+0x528>)
   978ce:	4798      	blx	r3
				cl_wait(100);
   978d0:	2064      	movs	r0, #100	; 0x64
   978d2:	4b3c      	ldr	r3, [pc, #240]	; (979c4 <cl_uf_controller+0x52c>)
   978d4:	4798      	blx	r3
				
			
			temp = Treatdata[ID_ufgoal] ;//- ufRemoved;
   978d6:	4b3c      	ldr	r3, [pc, #240]	; (979c8 <cl_uf_controller+0x530>)
   978d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   978da:	633b      	str	r3, [r7, #48]	; 0x30
			temptime = Treatdata[ID_treattime]; //- ufTimeElapsed;//Treatdata[ID_treattime]; // added to get the dialysis duration
   978dc:	4b3a      	ldr	r3, [pc, #232]	; (979c8 <cl_uf_controller+0x530>)
   978de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   978e0:	62fb      	str	r3, [r7, #44]	; 0x2c
						
				float tempUfRate = temp/((temptime)/60);
   978e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   978e4:	4a3e      	ldr	r2, [pc, #248]	; (979e0 <cl_uf_controller+0x548>)
   978e6:	fba2 2303 	umull	r2, r3, r2, r3
   978ea:	095b      	lsrs	r3, r3, #5
   978ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   978ee:	fbb2 f2f3 	udiv	r2, r2, r3
   978f2:	4b37      	ldr	r3, [pc, #220]	; (979d0 <cl_uf_controller+0x538>)
   978f4:	4610      	mov	r0, r2
   978f6:	4798      	blx	r3
   978f8:	4603      	mov	r3, r0
   978fa:	613b      	str	r3, [r7, #16]
				intufrate2 =tempUfRate * 10;
   978fc:	4b39      	ldr	r3, [pc, #228]	; (979e4 <cl_uf_controller+0x54c>)
   978fe:	6938      	ldr	r0, [r7, #16]
   97900:	4939      	ldr	r1, [pc, #228]	; (979e8 <cl_uf_controller+0x550>)
   97902:	4798      	blx	r3
   97904:	4603      	mov	r3, r0
   97906:	461a      	mov	r2, r3
   97908:	4b38      	ldr	r3, [pc, #224]	; (979ec <cl_uf_controller+0x554>)
   9790a:	4610      	mov	r0, r2
   9790c:	4798      	blx	r3
   9790e:	4603      	mov	r3, r0
   97910:	b29a      	uxth	r2, r3
   97912:	4b37      	ldr	r3, [pc, #220]	; (979f0 <cl_uf_controller+0x558>)
   97914:	801a      	strh	r2, [r3, #0]
				Cl_Uint32Type calcufrate = tempUfRate * 10;
   97916:	4b33      	ldr	r3, [pc, #204]	; (979e4 <cl_uf_controller+0x54c>)
   97918:	6938      	ldr	r0, [r7, #16]
   9791a:	4933      	ldr	r1, [pc, #204]	; (979e8 <cl_uf_controller+0x550>)
   9791c:	4798      	blx	r3
   9791e:	4603      	mov	r3, r0
   97920:	461a      	mov	r2, r3
   97922:	4b2e      	ldr	r3, [pc, #184]	; (979dc <cl_uf_controller+0x544>)
   97924:	4610      	mov	r0, r2
   97926:	4798      	blx	r3
   97928:	4603      	mov	r3, r0
   9792a:	60fb      	str	r3, [r7, #12]
					Treatdata[ID_ufrate] = calcufrate;
   9792c:	4a26      	ldr	r2, [pc, #152]	; (979c8 <cl_uf_controller+0x530>)
   9792e:	68fb      	ldr	r3, [r7, #12]
   97930:	6313      	str	r3, [r2, #48]	; 0x30
				calibrate_uf(intufrate2);
   97932:	4b2f      	ldr	r3, [pc, #188]	; (979f0 <cl_uf_controller+0x558>)
   97934:	881b      	ldrh	r3, [r3, #0]
   97936:	b21b      	sxth	r3, r3
   97938:	4618      	mov	r0, r3
   9793a:	4b2e      	ldr	r3, [pc, #184]	; (979f4 <cl_uf_controller+0x55c>)
   9793c:	4798      	blx	r3
				// based on this uf rate calculate the PWM
				// below logic needs to be changed lookup table needs to be implemented between uf rate and pwm

				if(temp > 0){
   9793e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   97940:	2b00      	cmp	r3, #0
   97942:	d00f      	beq.n	97964 <cl_uf_controller+0x4cc>
					
					
		//			sv_cntrl_setpumpspeed(UFPUMP,uf_final); // enter pwm data from the lookuop table
//					cl_ufpumpFeedback_set_expected_period(uf_final); // not required
					cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   97944:	2004      	movs	r0, #4
   97946:	4b2e      	ldr	r3, [pc, #184]	; (97a00 <cl_uf_controller+0x568>)
   97948:	4798      	blx	r3
   9794a:	4603      	mov	r3, r0
   9794c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					sv_cntrl_setpumpspeed(UFPUMP,uf_final);
   97950:	4b29      	ldr	r3, [pc, #164]	; (979f8 <cl_uf_controller+0x560>)
   97952:	681b      	ldr	r3, [r3, #0]
   97954:	2004      	movs	r0, #4
   97956:	4619      	mov	r1, r3
   97958:	4b19      	ldr	r3, [pc, #100]	; (979c0 <cl_uf_controller+0x528>)
   9795a:	4798      	blx	r3
//					cl_ufpumpFeedback_start();
					uf_state = CL_UF_STATE_STARTED;
   9795c:	4b2a      	ldr	r3, [pc, #168]	; (97a08 <cl_uf_controller+0x570>)
   9795e:	2201      	movs	r2, #1
   97960:	701a      	strb	r2, [r3, #0]
				}
				
				
				break;
   97962:	e7ff      	b.n	97964 <cl_uf_controller+0x4cc>
   97964:	bf00      	nop
				default:break;
				
			}
			break;
   97966:	e026      	b.n	979b6 <cl_uf_controller+0x51e>
			case CL_UF_STATE_PAUSED:
			switch (uf_event)
   97968:	79fb      	ldrb	r3, [r7, #7]
   9796a:	2b02      	cmp	r3, #2
   9796c:	d00d      	beq.n	9798a <cl_uf_controller+0x4f2>
   9796e:	2b04      	cmp	r3, #4
   97970:	d015      	beq.n	9799e <cl_uf_controller+0x506>
   97972:	2b01      	cmp	r3, #1
   97974:	d000      	beq.n	97978 <cl_uf_controller+0x4e0>
				break;
				case CL_UF_EVENT_STOP:
				cl_uf_retcode =  sv_cntrl_deactivatepump(UFPUMP);
				uf_state = CL_UF_STATE_STOPPED;
				break;
				default:break;
   97976:	e01c      	b.n	979b2 <cl_uf_controller+0x51a>
			break;
			case CL_UF_STATE_PAUSED:
			switch (uf_event)
			{
				case CL_UF_EVENT_SET_UF_RATE:
					cl_uf_rate = data;
   97978:	683b      	ldr	r3, [r7, #0]
   9797a:	4a24      	ldr	r2, [pc, #144]	; (97a0c <cl_uf_controller+0x574>)
   9797c:	6013      	str	r3, [r2, #0]
					sv_cntrl_setpumpspeed(UFPUMP,data);
   9797e:	683b      	ldr	r3, [r7, #0]
   97980:	2004      	movs	r0, #4
   97982:	4619      	mov	r1, r3
   97984:	4b0e      	ldr	r3, [pc, #56]	; (979c0 <cl_uf_controller+0x528>)
   97986:	4798      	blx	r3
				break;
   97988:	e013      	b.n	979b2 <cl_uf_controller+0x51a>
				case CL_UF_EVENT_START:
				cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   9798a:	2004      	movs	r0, #4
   9798c:	4b1c      	ldr	r3, [pc, #112]	; (97a00 <cl_uf_controller+0x568>)
   9798e:	4798      	blx	r3
   97990:	4603      	mov	r3, r0
   97992:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				uf_state = CL_UF_STATE_STARTED;
   97996:	4b1c      	ldr	r3, [pc, #112]	; (97a08 <cl_uf_controller+0x570>)
   97998:	2201      	movs	r2, #1
   9799a:	701a      	strb	r2, [r3, #0]
				break;
   9799c:	e009      	b.n	979b2 <cl_uf_controller+0x51a>
				case CL_UF_EVENT_STOP:
				cl_uf_retcode =  sv_cntrl_deactivatepump(UFPUMP);
   9799e:	2004      	movs	r0, #4
   979a0:	4b1b      	ldr	r3, [pc, #108]	; (97a10 <cl_uf_controller+0x578>)
   979a2:	4798      	blx	r3
   979a4:	4603      	mov	r3, r0
   979a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				uf_state = CL_UF_STATE_STOPPED;
   979aa:	4b17      	ldr	r3, [pc, #92]	; (97a08 <cl_uf_controller+0x570>)
   979ac:	2202      	movs	r2, #2
   979ae:	701a      	strb	r2, [r3, #0]
				break;
   979b0:	bf00      	nop
				default:break;
				
			}
			break;
   979b2:	e000      	b.n	979b6 <cl_uf_controller+0x51e>
			case CL_UF_STATE_COMPLETED:
			break;
			
			default:break;
   979b4:	bf00      	nop
			
			
	}
	return CL_OK;
   979b6:	2300      	movs	r3, #0
	
	
}
   979b8:	4618      	mov	r0, r3
   979ba:	3738      	adds	r7, #56	; 0x38
   979bc:	46bd      	mov	sp, r7
   979be:	bd80      	pop	{r7, pc}
   979c0:	0009b461 	.word	0x0009b461
   979c4:	0009421d 	.word	0x0009421d
   979c8:	20072880 	.word	0x20072880
   979cc:	20071c80 	.word	0x20071c80
   979d0:	000a8255 	.word	0x000a8255
   979d4:	20071c7c 	.word	0x20071c7c
   979d8:	000a80f1 	.word	0x000a80f1
   979dc:	000a86dd 	.word	0x000a86dd
   979e0:	88888889 	.word	0x88888889
   979e4:	000a8305 	.word	0x000a8305
   979e8:	41200000 	.word	0x41200000
   979ec:	000a8691 	.word	0x000a8691
   979f0:	20071c78 	.word	0x20071c78
   979f4:	000846d9 	.word	0x000846d9
   979f8:	20071978 	.word	0x20071978
   979fc:	00097281 	.word	0x00097281
   97a00:	0009b32d 	.word	0x0009b32d
   97a04:	00097255 	.word	0x00097255
   97a08:	20071c73 	.word	0x20071c73
   97a0c:	20071c74 	.word	0x20071c74
   97a10:	0009b369 	.word	0x0009b369

00097a14 <Cl_SendUfdata>:


Cl_ReturnCodeType Cl_SendUfdata(){
   97a14:	b580      	push	{r7, lr}
   97a16:	af00      	add	r7, sp, #0
	
	ufRemoved =  ufRemoved + (intufrate2/10);
   97a18:	4b0d      	ldr	r3, [pc, #52]	; (97a50 <Cl_SendUfdata+0x3c>)
   97a1a:	881b      	ldrh	r3, [r3, #0]
   97a1c:	b21b      	sxth	r3, r3
   97a1e:	4a0d      	ldr	r2, [pc, #52]	; (97a54 <Cl_SendUfdata+0x40>)
   97a20:	fb82 1203 	smull	r1, r2, r2, r3
   97a24:	1092      	asrs	r2, r2, #2
   97a26:	17db      	asrs	r3, r3, #31
   97a28:	1ad3      	subs	r3, r2, r3
   97a2a:	b29b      	uxth	r3, r3
   97a2c:	b21a      	sxth	r2, r3
   97a2e:	4b0a      	ldr	r3, [pc, #40]	; (97a58 <Cl_SendUfdata+0x44>)
   97a30:	4610      	mov	r0, r2
   97a32:	4798      	blx	r3
   97a34:	4601      	mov	r1, r0
   97a36:	4b09      	ldr	r3, [pc, #36]	; (97a5c <Cl_SendUfdata+0x48>)
   97a38:	681a      	ldr	r2, [r3, #0]
   97a3a:	4b09      	ldr	r3, [pc, #36]	; (97a60 <Cl_SendUfdata+0x4c>)
   97a3c:	4608      	mov	r0, r1
   97a3e:	4611      	mov	r1, r2
   97a40:	4798      	blx	r3
   97a42:	4603      	mov	r3, r0
   97a44:	461a      	mov	r2, r3
   97a46:	4b05      	ldr	r3, [pc, #20]	; (97a5c <Cl_SendUfdata+0x48>)
   97a48:	601a      	str	r2, [r3, #0]
	
	return CL_OK;
   97a4a:	2300      	movs	r3, #0
	
}
   97a4c:	4618      	mov	r0, r3
   97a4e:	bd80      	pop	{r7, pc}
   97a50:	20071c78 	.word	0x20071c78
   97a54:	66666667 	.word	0x66666667
   97a58:	000a825d 	.word	0x000a825d
   97a5c:	20071c7c 	.word	0x20071c7c
   97a60:	000a80f5 	.word	0x000a80f5

00097a64 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   97a64:	b480      	push	{r7}
   97a66:	b083      	sub	sp, #12
   97a68:	af00      	add	r7, sp, #0
   97a6a:	4603      	mov	r3, r0
   97a6c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   97a6e:	4908      	ldr	r1, [pc, #32]	; (97a90 <NVIC_EnableIRQ+0x2c>)
   97a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
   97a74:	095b      	lsrs	r3, r3, #5
   97a76:	79fa      	ldrb	r2, [r7, #7]
   97a78:	f002 021f 	and.w	r2, r2, #31
   97a7c:	2001      	movs	r0, #1
   97a7e:	fa00 f202 	lsl.w	r2, r0, r2
   97a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   97a86:	370c      	adds	r7, #12
   97a88:	46bd      	mov	sp, r7
   97a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
   97a8e:	4770      	bx	lr
   97a90:	e000e100 	.word	0xe000e100

00097a94 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
   97a94:	b480      	push	{r7}
   97a96:	b08b      	sub	sp, #44	; 0x2c
   97a98:	af00      	add	r7, sp, #0
   97a9a:	6078      	str	r0, [r7, #4]
   97a9c:	460b      	mov	r3, r1
   97a9e:	70fb      	strb	r3, [r7, #3]
   97aa0:	687b      	ldr	r3, [r7, #4]
   97aa2:	627b      	str	r3, [r7, #36]	; 0x24
   97aa4:	78fb      	ldrb	r3, [r7, #3]
   97aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   97aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   97aac:	61fb      	str	r3, [r7, #28]
   97aae:	69fb      	ldr	r3, [r7, #28]
   97ab0:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   97ab2:	69bb      	ldr	r3, [r7, #24]
   97ab4:	095b      	lsrs	r3, r3, #5
   97ab6:	617b      	str	r3, [r7, #20]
}

__always_inline static Pio *arch_ioport_port_to_base(ioport_port_t port)
{
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   97ab8:	697b      	ldr	r3, [r7, #20]
   97aba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   97abe:	f203 7307 	addw	r3, r3, #1799	; 0x707
   97ac2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   97ac4:	613b      	str	r3, [r7, #16]

	if (level) {
   97ac6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   97aca:	2b00      	cmp	r3, #0
   97acc:	d009      	beq.n	97ae2 <ioport_set_pin_level+0x4e>
   97ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   97ad0:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   97ad2:	68fb      	ldr	r3, [r7, #12]
   97ad4:	f003 031f 	and.w	r3, r3, #31
   97ad8:	2201      	movs	r2, #1
   97ada:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   97adc:	693b      	ldr	r3, [r7, #16]
   97ade:	631a      	str	r2, [r3, #48]	; 0x30
   97ae0:	e008      	b.n	97af4 <ioport_set_pin_level+0x60>
   97ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   97ae4:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   97ae6:	68bb      	ldr	r3, [r7, #8]
   97ae8:	f003 031f 	and.w	r3, r3, #31
   97aec:	2201      	movs	r2, #1
   97aee:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   97af0:	693b      	ldr	r3, [r7, #16]
   97af2:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
   97af4:	372c      	adds	r7, #44	; 0x2c
   97af6:	46bd      	mov	sp, r7
   97af8:	f85d 7b04 	ldr.w	r7, [sp], #4
   97afc:	4770      	bx	lr
   97afe:	bf00      	nop

00097b00 <sn65hvda540_set_en>:
extern	volatile  uint32_t delay_cnt ;
extern  volatile uint32_t delay ;
extern volatile uint32_t g_ul_ms_ticks ;
uint16_t BPCanFeedBackValue = 0;
void sn65hvda540_set_en(sn65hvda540_ctrl_t *p_component, uint32_t pin_idx)
{
   97b00:	b480      	push	{r7}
   97b02:	b083      	sub	sp, #12
   97b04:	af00      	add	r7, sp, #0
   97b06:	6078      	str	r0, [r7, #4]
   97b08:	6039      	str	r1, [r7, #0]
	p_component->pio_en_idx = pin_idx;
   97b0a:	687b      	ldr	r3, [r7, #4]
   97b0c:	683a      	ldr	r2, [r7, #0]
   97b0e:	601a      	str	r2, [r3, #0]
}
   97b10:	370c      	adds	r7, #12
   97b12:	46bd      	mov	sp, r7
   97b14:	f85d 7b04 	ldr.w	r7, [sp], #4
   97b18:	4770      	bx	lr
   97b1a:	bf00      	nop

00097b1c <sn65hvda540_normal_mode>:

void sn65hvda540_normal_mode(sn65hvda540_ctrl_t *p_component)
{
   97b1c:	b580      	push	{r7, lr}
   97b1e:	b082      	sub	sp, #8
   97b20:	af00      	add	r7, sp, #0
   97b22:	6078      	str	r0, [r7, #4]
	/* Raise EN pin of SN65HVD234 to High Level (Vcc). */
	ioport_set_pin_level(p_component->pio_en_idx, CAN_NORMAL_MODE);
   97b24:	687b      	ldr	r3, [r7, #4]
   97b26:	681b      	ldr	r3, [r3, #0]
   97b28:	4618      	mov	r0, r3
   97b2a:	2100      	movs	r1, #0
   97b2c:	4b02      	ldr	r3, [pc, #8]	; (97b38 <sn65hvda540_normal_mode+0x1c>)
   97b2e:	4798      	blx	r3
}
   97b30:	3708      	adds	r7, #8
   97b32:	46bd      	mov	sp, r7
   97b34:	bd80      	pop	{r7, pc}
   97b36:	bf00      	nop
   97b38:	00097a95 	.word	0x00097a95

00097b3c <CAN0_Handler>:
uint32_t can_flag=0;
volatile DD_Sensor_status_type DD_Sensor_status ;
volatile temp_struct_type temp_struct;
//can_structure_id_type can_structure_id;

void CAN0_Handler(void)   {
   97b3c:	b580      	push	{r7, lr}
   97b3e:	b082      	sub	sp, #8
   97b40:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	ul_status = (CAN0 -> CAN_SR);
   97b42:	4b13      	ldr	r3, [pc, #76]	; (97b90 <CAN0_Handler+0x54>)
   97b44:	691b      	ldr	r3, [r3, #16]
   97b46:	607b      	str	r3, [r7, #4]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   97b48:	687b      	ldr	r3, [r7, #4]
   97b4a:	b2db      	uxtb	r3, r3
   97b4c:	2b00      	cmp	r3, #0
   97b4e:	d01b      	beq.n	97b88 <CAN0_Handler+0x4c>
		ul_status = CAN0->CAN_MB[1].CAN_MSR ;
   97b50:	4b0f      	ldr	r3, [pc, #60]	; (97b90 <CAN0_Handler+0x54>)
   97b52:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
   97b56:	607b      	str	r3, [r7, #4]
		if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   97b58:	687b      	ldr	r3, [r7, #4]
   97b5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   97b5e:	2b00      	cmp	r3, #0
   97b60:	d012      	beq.n	97b88 <CAN0_Handler+0x4c>
			can0_mailbox.ul_mb_idx = 1;
   97b62:	4b0c      	ldr	r3, [pc, #48]	; (97b94 <CAN0_Handler+0x58>)
   97b64:	2201      	movs	r2, #1
   97b66:	601a      	str	r2, [r3, #0]
			can0_mailbox.ul_status = ul_status;
   97b68:	4a0a      	ldr	r2, [pc, #40]	; (97b94 <CAN0_Handler+0x58>)
   97b6a:	687b      	ldr	r3, [r7, #4]
   97b6c:	6093      	str	r3, [r2, #8]
			dd_can_mailbox_read(&can0_mailbox);
   97b6e:	4809      	ldr	r0, [pc, #36]	; (97b94 <CAN0_Handler+0x58>)
   97b70:	4b09      	ldr	r3, [pc, #36]	; (97b98 <CAN0_Handler+0x5c>)
   97b72:	4798      	blx	r3
			dd_can_dump_mailbox_data(&can0_mailbox);
   97b74:	4807      	ldr	r0, [pc, #28]	; (97b94 <CAN0_Handler+0x58>)
   97b76:	4b09      	ldr	r3, [pc, #36]	; (97b9c <CAN0_Handler+0x60>)
   97b78:	4798      	blx	r3
			g_ul_recv_status = 1;
   97b7a:	4b09      	ldr	r3, [pc, #36]	; (97ba0 <CAN0_Handler+0x64>)
   97b7c:	2201      	movs	r2, #1
   97b7e:	601a      	str	r2, [r3, #0]
			can_flag = g_ul_recv_status;
   97b80:	4b07      	ldr	r3, [pc, #28]	; (97ba0 <CAN0_Handler+0x64>)
   97b82:	681b      	ldr	r3, [r3, #0]
   97b84:	4a07      	ldr	r2, [pc, #28]	; (97ba4 <CAN0_Handler+0x68>)
   97b86:	6013      	str	r3, [r2, #0]
		}
		
	}
}
   97b88:	3708      	adds	r7, #8
   97b8a:	46bd      	mov	sp, r7
   97b8c:	bd80      	pop	{r7, pc}
   97b8e:	bf00      	nop
   97b90:	400b4000 	.word	0x400b4000
   97b94:	20072a04 	.word	0x20072a04
   97b98:	00097e69 	.word	0x00097e69
   97b9c:	00097c4d 	.word	0x00097c4d
   97ba0:	20071c88 	.word	0x20071c88
   97ba4:	20071c8c 	.word	0x20071c8c

00097ba8 <dd_master_command>:

 uint16_t dd_master_command(dd_cpu_id_type  cpu_id, MASTER_CMD_ID_TYPE command_id, uint16_t speed ) 
   {
   97ba8:	b580      	push	{r7, lr}
   97baa:	b084      	sub	sp, #16
   97bac:	af00      	add	r7, sp, #0
   97bae:	4603      	mov	r3, r0
   97bb0:	71fb      	strb	r3, [r7, #7]
   97bb2:	460b      	mov	r3, r1
   97bb4:	71bb      	strb	r3, [r7, #6]
   97bb6:	4613      	mov	r3, r2
   97bb8:	80bb      	strh	r3, [r7, #4]
	 dd_data_size_type dd_data_size;
	dd_data_size.bytes_array[0] =  MASTER_CPU_id;         //senders id;
   97bba:	230a      	movs	r3, #10
   97bbc:	733b      	strb	r3, [r7, #12]
	dd_data_size.bytes_array[1] =  command_id;
   97bbe:	79bb      	ldrb	r3, [r7, #6]
   97bc0:	737b      	strb	r3, [r7, #13]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(cpu_id); // receivers id
   97bc2:	79fb      	ldrb	r3, [r7, #7]
   97bc4:	049b      	lsls	r3, r3, #18
   97bc6:	461a      	mov	r2, r3
   97bc8:	4b1b      	ldr	r3, [pc, #108]	; (97c38 <dd_master_command+0x90>)
   97bca:	4013      	ands	r3, r2
   97bcc:	4a1b      	ldr	r2, [pc, #108]	; (97c3c <dd_master_command+0x94>)
   97bce:	6113      	str	r3, [r2, #16]
//	dd_data_size.bytes_array[2] =0;
	
//	dd_data_size.bytes_array[3] =0;
    dd_data_size.two_bytes[1] = speed;
   97bd0:	88bb      	ldrh	r3, [r7, #4]
   97bd2:	81fb      	strh	r3, [r7, #14]
	can0_mailbox.ul_datal =  dd_data_size.four_bytes;
   97bd4:	68fb      	ldr	r3, [r7, #12]
   97bd6:	4a19      	ldr	r2, [pc, #100]	; (97c3c <dd_master_command+0x94>)
   97bd8:	6193      	str	r3, [r2, #24]
	can0_mailbox.ul_datah =0;
   97bda:	4b18      	ldr	r3, [pc, #96]	; (97c3c <dd_master_command+0x94>)
   97bdc:	2200      	movs	r2, #0
   97bde:	61da      	str	r2, [r3, #28]
	
	CAN0->CAN_IDR = 0xffffffff;
   97be0:	4b17      	ldr	r3, [pc, #92]	; (97c40 <dd_master_command+0x98>)
   97be2:	f04f 32ff 	mov.w	r2, #4294967295
   97be6:	609a      	str	r2, [r3, #8]
	NVIC_EnableIRQ(CAN0_IRQn);	
   97be8:	202b      	movs	r0, #43	; 0x2b
   97bea:	4b16      	ldr	r3, [pc, #88]	; (97c44 <dd_master_command+0x9c>)
   97bec:	4798      	blx	r3
    can0_mailbox.ul_mb_idx =   MAILBOX_0;  // transmit for master
   97bee:	4b13      	ldr	r3, [pc, #76]	; (97c3c <dd_master_command+0x94>)
   97bf0:	2200      	movs	r2, #0
   97bf2:	601a      	str	r2, [r3, #0]
    can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;  // message type , transmitting or receiving
   97bf4:	4b11      	ldr	r3, [pc, #68]	; (97c3c <dd_master_command+0x94>)
   97bf6:	2203      	movs	r2, #3
   97bf8:	711a      	strb	r2, [r3, #4]
    can0_mailbox.uc_tx_prio = 0;                   // Message Priority
   97bfa:	4b10      	ldr	r3, [pc, #64]	; (97c3c <dd_master_command+0x94>)
   97bfc:	2200      	movs	r2, #0
   97bfe:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_length = 4;                    // Can Message Length Header+data
   97c00:	4b0e      	ldr	r3, [pc, #56]	; (97c3c <dd_master_command+0x94>)
   97c02:	2204      	movs	r2, #4
   97c04:	719a      	strb	r2, [r3, #6]
    can0_mailbox.uc_id_ver = 0;                   // Can standard Version
   97c06:	4b0d      	ldr	r3, [pc, #52]	; (97c3c <dd_master_command+0x94>)
   97c08:	2200      	movs	r2, #0
   97c0a:	715a      	strb	r2, [r3, #5]
    can0_mailbox.ul_id_msk = 0x7fc;			      // 
   97c0c:	4b0b      	ldr	r3, [pc, #44]	; (97c3c <dd_master_command+0x94>)
   97c0e:	f240 72fc 	movw	r2, #2044	; 0x7fc
   97c12:	60da      	str	r2, [r3, #12]
	uint32_t ul_status;	
	uint32_t ul_reg;
	uint32_t can_retun_cal ;
	while (CAN_MAILBOX_NOT_READY == dd_can_mailbox_write(&can0_mailbox));	
   97c14:	bf00      	nop
   97c16:	4809      	ldr	r0, [pc, #36]	; (97c3c <dd_master_command+0x94>)
   97c18:	4b0b      	ldr	r3, [pc, #44]	; (97c48 <dd_master_command+0xa0>)
   97c1a:	4798      	blx	r3
   97c1c:	4603      	mov	r3, r0
   97c1e:	2b01      	cmp	r3, #1
   97c20:	d0f9      	beq.n	97c16 <dd_master_command+0x6e>
	
	NVIC_EnableIRQ(CAN0_IRQn);
   97c22:	202b      	movs	r0, #43	; 0x2b
   97c24:	4b07      	ldr	r3, [pc, #28]	; (97c44 <dd_master_command+0x9c>)
   97c26:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   97c28:	4b05      	ldr	r3, [pc, #20]	; (97c40 <dd_master_command+0x98>)
   97c2a:	2202      	movs	r2, #2
   97c2c:	605a      	str	r2, [r3, #4]
	
	return CAN_MAILBOX_TRANSFER_OK;
   97c2e:	2300      	movs	r3, #0
}
   97c30:	4618      	mov	r0, r3
   97c32:	3710      	adds	r7, #16
   97c34:	46bd      	mov	sp, r7
   97c36:	bd80      	pop	{r7, pc}
   97c38:	1ffc0000 	.word	0x1ffc0000
   97c3c:	20072a04 	.word	0x20072a04
   97c40:	400b4000 	.word	0x400b4000
   97c44:	00097a65 	.word	0x00097a65
   97c48:	00097f39 	.word	0x00097f39

00097c4c <dd_can_dump_mailbox_data>:


static void dd_can_dump_mailbox_data(can_mb_conf_t *p_mailbox )   {
   97c4c:	b480      	push	{r7}
   97c4e:	b083      	sub	sp, #12
   97c50:	af00      	add	r7, sp, #0
   97c52:	6078      	str	r0, [r7, #4]
	temp_struct.temp_reg_32 = (p_mailbox->ul_datal);
   97c54:	687b      	ldr	r3, [r7, #4]
   97c56:	699b      	ldr	r3, [r3, #24]
   97c58:	4a7c      	ldr	r2, [pc, #496]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97c5a:	6013      	str	r3, [r2, #0]
	DD_Sensor_status.CPU_SENDER_type_reg =  temp_struct.temp_reg_8[0]  ;
   97c5c:	4b7b      	ldr	r3, [pc, #492]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97c5e:	781b      	ldrb	r3, [r3, #0]
   97c60:	b2da      	uxtb	r2, r3
   97c62:	4b7b      	ldr	r3, [pc, #492]	; (97e50 <dd_can_dump_mailbox_data+0x204>)
   97c64:	701a      	strb	r2, [r3, #0]
	DD_Sensor_status.SENSOR_GROUP_type_reg = temp_struct.temp_reg_8[1]  ;
   97c66:	4b79      	ldr	r3, [pc, #484]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97c68:	785b      	ldrb	r3, [r3, #1]
   97c6a:	b2da      	uxtb	r2, r3
   97c6c:	4b78      	ldr	r3, [pc, #480]	; (97e50 <dd_can_dump_mailbox_data+0x204>)
   97c6e:	705a      	strb	r2, [r3, #1]
	
	switch(DD_Sensor_status.CPU_SENDER_type_reg)   {
   97c70:	4b77      	ldr	r3, [pc, #476]	; (97e50 <dd_can_dump_mailbox_data+0x204>)
   97c72:	781b      	ldrb	r3, [r3, #0]
   97c74:	b2db      	uxtb	r3, r3
   97c76:	2b02      	cmp	r3, #2
   97c78:	d01f      	beq.n	97cba <dd_can_dump_mailbox_data+0x6e>
   97c7a:	2b03      	cmp	r3, #3
   97c7c:	d038      	beq.n	97cf0 <dd_can_dump_mailbox_data+0xa4>
   97c7e:	2b01      	cmp	r3, #1
   97c80:	d000      	beq.n	97c84 <dd_can_dump_mailbox_data+0x38>
		} //switch(DD_Sensor_status.SENSOR_GROUP_type_reg)  ends here
		
		break;
		
		default:
		break;
   97c82:	e0de      	b.n	97e42 <dd_can_dump_mailbox_data+0x1f6>
	
	switch(DD_Sensor_status.CPU_SENDER_type_reg)   {
		
		case HEMO_CPU_id :
		
		switch(DD_Sensor_status.SENSOR_GROUP_type_reg)   {
   97c84:	4b72      	ldr	r3, [pc, #456]	; (97e50 <dd_can_dump_mailbox_data+0x204>)
   97c86:	785b      	ldrb	r3, [r3, #1]
   97c88:	b2db      	uxtb	r3, r3
   97c8a:	2b07      	cmp	r3, #7
   97c8c:	d000      	beq.n	97c90 <dd_can_dump_mailbox_data+0x44>
			DD_Sensor_status.vptstatus  =  temp_struct.temp_reg_16[0] ;
			BPCanFeedBackValue =   temp_struct.temp_reg_16[1] ;
			break;
			
			default :
			break;
   97c8e:	e013      	b.n	97cb8 <dd_can_dump_mailbox_data+0x6c>
		case HEMO_CPU_id :
		
		switch(DD_Sensor_status.SENSOR_GROUP_type_reg)   {
			
			case Sensor_group_7 :
			DD_Sensor_status.aptstatus = temp_struct.temp_reg_16[1] ;		
   97c90:	4b6e      	ldr	r3, [pc, #440]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97c92:	885b      	ldrh	r3, [r3, #2]
   97c94:	b29a      	uxth	r2, r3
   97c96:	4b6e      	ldr	r3, [pc, #440]	; (97e50 <dd_can_dump_mailbox_data+0x204>)
   97c98:	84da      	strh	r2, [r3, #38]	; 0x26
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   97c9a:	687b      	ldr	r3, [r7, #4]
   97c9c:	69db      	ldr	r3, [r3, #28]
   97c9e:	4a6b      	ldr	r2, [pc, #428]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97ca0:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.vptstatus  =  temp_struct.temp_reg_16[0] ;
   97ca2:	4b6a      	ldr	r3, [pc, #424]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97ca4:	881b      	ldrh	r3, [r3, #0]
   97ca6:	b29a      	uxth	r2, r3
   97ca8:	4b69      	ldr	r3, [pc, #420]	; (97e50 <dd_can_dump_mailbox_data+0x204>)
   97caa:	851a      	strh	r2, [r3, #40]	; 0x28
			BPCanFeedBackValue =   temp_struct.temp_reg_16[1] ;
   97cac:	4b67      	ldr	r3, [pc, #412]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97cae:	885b      	ldrh	r3, [r3, #2]
   97cb0:	b29a      	uxth	r2, r3
   97cb2:	4b68      	ldr	r3, [pc, #416]	; (97e54 <dd_can_dump_mailbox_data+0x208>)
   97cb4:	801a      	strh	r2, [r3, #0]
			break;
   97cb6:	bf00      	nop
			
			default :
			break;
		}
		break;
   97cb8:	e0c3      	b.n	97e42 <dd_can_dump_mailbox_data+0x1f6>
		
		case PROPORTIONING_CPU_id :
				switch(DD_Sensor_status.SENSOR_GROUP_type_reg)   {
   97cba:	4b65      	ldr	r3, [pc, #404]	; (97e50 <dd_can_dump_mailbox_data+0x204>)
   97cbc:	785b      	ldrb	r3, [r3, #1]
   97cbe:	b2db      	uxtb	r3, r3
   97cc0:	2b08      	cmp	r3, #8
   97cc2:	d000      	beq.n	97cc6 <dd_can_dump_mailbox_data+0x7a>
					DD_Sensor_status.bicar_feed_back  =  temp_struct.temp_reg_16[0] ;
					DD_Sensor_status.dummy_data =   temp_struct.temp_reg_16[1] ;
					break;
					
					default :
					break;
   97cc4:	e013      	b.n	97cee <dd_can_dump_mailbox_data+0xa2>
		
		case PROPORTIONING_CPU_id :
				switch(DD_Sensor_status.SENSOR_GROUP_type_reg)   {
					
					case Sensor_group_8 :
					DD_Sensor_status.acid_feed_back = temp_struct.temp_reg_16[1] ;
   97cc6:	4b61      	ldr	r3, [pc, #388]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97cc8:	885b      	ldrh	r3, [r3, #2]
   97cca:	b29a      	uxth	r2, r3
   97ccc:	4b60      	ldr	r3, [pc, #384]	; (97e50 <dd_can_dump_mailbox_data+0x204>)
   97cce:	859a      	strh	r2, [r3, #44]	; 0x2c
					temp_struct.temp_reg_32 = (p_mailbox->ul_datah);
   97cd0:	687b      	ldr	r3, [r7, #4]
   97cd2:	69db      	ldr	r3, [r3, #28]
   97cd4:	4a5d      	ldr	r2, [pc, #372]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97cd6:	6013      	str	r3, [r2, #0]
					DD_Sensor_status.bicar_feed_back  =  temp_struct.temp_reg_16[0] ;
   97cd8:	4b5c      	ldr	r3, [pc, #368]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97cda:	881b      	ldrh	r3, [r3, #0]
   97cdc:	b29a      	uxth	r2, r3
   97cde:	4b5c      	ldr	r3, [pc, #368]	; (97e50 <dd_can_dump_mailbox_data+0x204>)
   97ce0:	85da      	strh	r2, [r3, #46]	; 0x2e
					DD_Sensor_status.dummy_data =   temp_struct.temp_reg_16[1] ;
   97ce2:	4b5a      	ldr	r3, [pc, #360]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97ce4:	885b      	ldrh	r3, [r3, #2]
   97ce6:	b29a      	uxth	r2, r3
   97ce8:	4b59      	ldr	r3, [pc, #356]	; (97e50 <dd_can_dump_mailbox_data+0x204>)
   97cea:	861a      	strh	r2, [r3, #48]	; 0x30
					break;
   97cec:	bf00      	nop
					
					default :
					break;
				}
				break;
   97cee:	e0a8      	b.n	97e42 <dd_can_dump_mailbox_data+0x1f6>
		
		case SENSOR_CPU_id:
		
		switch(DD_Sensor_status.SENSOR_GROUP_type_reg)   {
   97cf0:	4b57      	ldr	r3, [pc, #348]	; (97e50 <dd_can_dump_mailbox_data+0x204>)
   97cf2:	785b      	ldrb	r3, [r3, #1]
   97cf4:	b2db      	uxtb	r3, r3
   97cf6:	3b01      	subs	r3, #1
   97cf8:	2b05      	cmp	r3, #5
   97cfa:	f200 80a0 	bhi.w	97e3e <dd_can_dump_mailbox_data+0x1f2>
   97cfe:	a201      	add	r2, pc, #4	; (adr r2, 97d04 <dd_can_dump_mailbox_data+0xb8>)
   97d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   97d04:	00097d1d 	.word	0x00097d1d
   97d08:	00097d59 	.word	0x00097d59
   97d0c:	00097d87 	.word	0x00097d87
   97d10:	00097db5 	.word	0x00097db5
   97d14:	00097de3 	.word	0x00097de3
   97d18:	00097e11 	.word	0x00097e11
			
			case Sensor_group_1 :													// Pressure Sensors 1,2 and 3
			DD_Sensor_status.ps1status = temp_struct.temp_reg_16[1] ;			
   97d1c:	4b4b      	ldr	r3, [pc, #300]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97d1e:	885b      	ldrh	r3, [r3, #2]
   97d20:	b29a      	uxth	r2, r3
   97d22:	4b4b      	ldr	r3, [pc, #300]	; (97e50 <dd_can_dump_mailbox_data+0x204>)
   97d24:	805a      	strh	r2, [r3, #2]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   97d26:	687b      	ldr	r3, [r7, #4]
   97d28:	69db      	ldr	r3, [r3, #28]
   97d2a:	4a48      	ldr	r2, [pc, #288]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97d2c:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.ps2status  =  temp_struct.temp_reg_16[0] ;
   97d2e:	4b47      	ldr	r3, [pc, #284]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97d30:	881b      	ldrh	r3, [r3, #0]
   97d32:	b29a      	uxth	r2, r3
   97d34:	4b46      	ldr	r3, [pc, #280]	; (97e50 <dd_can_dump_mailbox_data+0x204>)
   97d36:	809a      	strh	r2, [r3, #4]
			DD_Sensor_status.ps3status =   temp_struct.temp_reg_16[1] ;		
   97d38:	4b44      	ldr	r3, [pc, #272]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97d3a:	885b      	ldrh	r3, [r3, #2]
   97d3c:	b29a      	uxth	r2, r3
   97d3e:	4b44      	ldr	r3, [pc, #272]	; (97e50 <dd_can_dump_mailbox_data+0x204>)
   97d40:	80da      	strh	r2, [r3, #6]
			  array1[1]	= 1;
   97d42:	4b45      	ldr	r3, [pc, #276]	; (97e58 <dd_can_dump_mailbox_data+0x20c>)
   97d44:	2201      	movs	r2, #1
   97d46:	705a      	strb	r2, [r3, #1]
			delay = g_ul_ms_ticks -  delay_cnt ;
   97d48:	4b44      	ldr	r3, [pc, #272]	; (97e5c <dd_can_dump_mailbox_data+0x210>)
   97d4a:	681a      	ldr	r2, [r3, #0]
   97d4c:	4b44      	ldr	r3, [pc, #272]	; (97e60 <dd_can_dump_mailbox_data+0x214>)
   97d4e:	681b      	ldr	r3, [r3, #0]
   97d50:	1ad3      	subs	r3, r2, r3
   97d52:	4a44      	ldr	r2, [pc, #272]	; (97e64 <dd_can_dump_mailbox_data+0x218>)
   97d54:	6013      	str	r3, [r2, #0]
			break;
   97d56:	e073      	b.n	97e40 <dd_can_dump_mailbox_data+0x1f4>
			
			case Sensor_group_2 :													// Thermocouple, Temp1 and Temp2
			DD_Sensor_status.thermocouple_status = temp_struct.temp_reg_16[1] ;			
   97d58:	4b3c      	ldr	r3, [pc, #240]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97d5a:	885b      	ldrh	r3, [r3, #2]
   97d5c:	b29a      	uxth	r2, r3
   97d5e:	4b3c      	ldr	r3, [pc, #240]	; (97e50 <dd_can_dump_mailbox_data+0x204>)
   97d60:	811a      	strh	r2, [r3, #8]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   97d62:	687b      	ldr	r3, [r7, #4]
   97d64:	69db      	ldr	r3, [r3, #28]
   97d66:	4a39      	ldr	r2, [pc, #228]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97d68:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.Temp1status =  temp_struct.temp_reg_16[0] ;
   97d6a:	4b38      	ldr	r3, [pc, #224]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97d6c:	881b      	ldrh	r3, [r3, #0]
   97d6e:	b29a      	uxth	r2, r3
   97d70:	4b37      	ldr	r3, [pc, #220]	; (97e50 <dd_can_dump_mailbox_data+0x204>)
   97d72:	815a      	strh	r2, [r3, #10]
			DD_Sensor_status.Temp2status=   temp_struct.temp_reg_16[1] ;	
   97d74:	4b35      	ldr	r3, [pc, #212]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97d76:	885b      	ldrh	r3, [r3, #2]
   97d78:	b29a      	uxth	r2, r3
   97d7a:	4b35      	ldr	r3, [pc, #212]	; (97e50 <dd_can_dump_mailbox_data+0x204>)
   97d7c:	819a      	strh	r2, [r3, #12]
			array1[2]	= 1;		
   97d7e:	4b36      	ldr	r3, [pc, #216]	; (97e58 <dd_can_dump_mailbox_data+0x20c>)
   97d80:	2201      	movs	r2, #1
   97d82:	709a      	strb	r2, [r3, #2]
			break;
   97d84:	e05c      	b.n	97e40 <dd_can_dump_mailbox_data+0x1f4>
			
			case Sensor_group_3 :													// Temp3, CS1-Temp and CS2-Temp
			DD_Sensor_status.CS1_Tempstatus = temp_struct.temp_reg_16[1];			
   97d86:	4b31      	ldr	r3, [pc, #196]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97d88:	885b      	ldrh	r3, [r3, #2]
   97d8a:	b29a      	uxth	r2, r3
   97d8c:	4b30      	ldr	r3, [pc, #192]	; (97e50 <dd_can_dump_mailbox_data+0x204>)
   97d8e:	821a      	strh	r2, [r3, #16]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   97d90:	687b      	ldr	r3, [r7, #4]
   97d92:	69db      	ldr	r3, [r3, #28]
   97d94:	4a2d      	ldr	r2, [pc, #180]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97d96:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.CS2_Tempstatus =  temp_struct.temp_reg_16[0] ;
   97d98:	4b2c      	ldr	r3, [pc, #176]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97d9a:	881b      	ldrh	r3, [r3, #0]
   97d9c:	b29a      	uxth	r2, r3
   97d9e:	4b2c      	ldr	r3, [pc, #176]	; (97e50 <dd_can_dump_mailbox_data+0x204>)
   97da0:	825a      	strh	r2, [r3, #18]
			DD_Sensor_status.Temp3status=   temp_struct.temp_reg_16[1] ;			
   97da2:	4b2a      	ldr	r3, [pc, #168]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97da4:	885b      	ldrh	r3, [r3, #2]
   97da6:	b29a      	uxth	r2, r3
   97da8:	4b29      	ldr	r3, [pc, #164]	; (97e50 <dd_can_dump_mailbox_data+0x204>)
   97daa:	81da      	strh	r2, [r3, #14]
			array1[3]	= 1;
   97dac:	4b2a      	ldr	r3, [pc, #168]	; (97e58 <dd_can_dump_mailbox_data+0x20c>)
   97dae:	2201      	movs	r2, #1
   97db0:	70da      	strb	r2, [r3, #3]
			break;
   97db2:	e045      	b.n	97e40 <dd_can_dump_mailbox_data+0x1f4>
			
			case Sensor_group_4 :													// CS3- Temp, CS1 and CS2
			DD_Sensor_status.CS3_Tempstatus = temp_struct.temp_reg_16[1];			
   97db4:	4b25      	ldr	r3, [pc, #148]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97db6:	885b      	ldrh	r3, [r3, #2]
   97db8:	b29a      	uxth	r2, r3
   97dba:	4b25      	ldr	r3, [pc, #148]	; (97e50 <dd_can_dump_mailbox_data+0x204>)
   97dbc:	829a      	strh	r2, [r3, #20]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   97dbe:	687b      	ldr	r3, [r7, #4]
   97dc0:	69db      	ldr	r3, [r3, #28]
   97dc2:	4a22      	ldr	r2, [pc, #136]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97dc4:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.CS1status =  temp_struct.temp_reg_16[0] ;
   97dc6:	4b21      	ldr	r3, [pc, #132]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97dc8:	881b      	ldrh	r3, [r3, #0]
   97dca:	b29a      	uxth	r2, r3
   97dcc:	4b20      	ldr	r3, [pc, #128]	; (97e50 <dd_can_dump_mailbox_data+0x204>)
   97dce:	82da      	strh	r2, [r3, #22]
			DD_Sensor_status.CS2status=   temp_struct.temp_reg_16[1] ;	
   97dd0:	4b1e      	ldr	r3, [pc, #120]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97dd2:	885b      	ldrh	r3, [r3, #2]
   97dd4:	b29a      	uxth	r2, r3
   97dd6:	4b1e      	ldr	r3, [pc, #120]	; (97e50 <dd_can_dump_mailbox_data+0x204>)
   97dd8:	831a      	strh	r2, [r3, #24]
			array1[4]	= 1;		
   97dda:	4b1f      	ldr	r3, [pc, #124]	; (97e58 <dd_can_dump_mailbox_data+0x20c>)
   97ddc:	2201      	movs	r2, #1
   97dde:	711a      	strb	r2, [r3, #4]
			break;
   97de0:	e02e      	b.n	97e40 <dd_can_dump_mailbox_data+0x1f4>
			
			case Sensor_group_5 :													// CS3, DAC1 and DAA
			DD_Sensor_status.CS3status = temp_struct.temp_reg_16[1];			
   97de2:	4b1a      	ldr	r3, [pc, #104]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97de4:	885b      	ldrh	r3, [r3, #2]
   97de6:	b29a      	uxth	r2, r3
   97de8:	4b19      	ldr	r3, [pc, #100]	; (97e50 <dd_can_dump_mailbox_data+0x204>)
   97dea:	835a      	strh	r2, [r3, #26]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   97dec:	687b      	ldr	r3, [r7, #4]
   97dee:	69db      	ldr	r3, [r3, #28]
   97df0:	4a16      	ldr	r2, [pc, #88]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97df2:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.DAC1status =  temp_struct.temp_reg_16[0] ;
   97df4:	4b15      	ldr	r3, [pc, #84]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97df6:	881b      	ldrh	r3, [r3, #0]
   97df8:	b29a      	uxth	r2, r3
   97dfa:	4b15      	ldr	r3, [pc, #84]	; (97e50 <dd_can_dump_mailbox_data+0x204>)
   97dfc:	839a      	strh	r2, [r3, #28]
			DD_Sensor_status.DAAstatus=   temp_struct.temp_reg_16[1] ;		
   97dfe:	4b13      	ldr	r3, [pc, #76]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97e00:	885b      	ldrh	r3, [r3, #2]
   97e02:	b29a      	uxth	r2, r3
   97e04:	4b12      	ldr	r3, [pc, #72]	; (97e50 <dd_can_dump_mailbox_data+0x204>)
   97e06:	83da      	strh	r2, [r3, #30]
			array1[5]	= 1;	
   97e08:	4b13      	ldr	r3, [pc, #76]	; (97e58 <dd_can_dump_mailbox_data+0x20c>)
   97e0a:	2201      	movs	r2, #1
   97e0c:	715a      	strb	r2, [r3, #5]
			break;
   97e0e:	e017      	b.n	97e40 <dd_can_dump_mailbox_data+0x1f4>
			
			case Sensor_group_6 :													// DAB, DAC2 and flow Sensor
			DD_Sensor_status.DABstatus = temp_struct.temp_reg_16[1];			
   97e10:	4b0e      	ldr	r3, [pc, #56]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97e12:	885b      	ldrh	r3, [r3, #2]
   97e14:	b29a      	uxth	r2, r3
   97e16:	4b0e      	ldr	r3, [pc, #56]	; (97e50 <dd_can_dump_mailbox_data+0x204>)
   97e18:	841a      	strh	r2, [r3, #32]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   97e1a:	687b      	ldr	r3, [r7, #4]
   97e1c:	69db      	ldr	r3, [r3, #28]
   97e1e:	4a0b      	ldr	r2, [pc, #44]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97e20:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.DAC2status =  temp_struct.temp_reg_16[0] ;
   97e22:	4b0a      	ldr	r3, [pc, #40]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97e24:	881b      	ldrh	r3, [r3, #0]
   97e26:	b29a      	uxth	r2, r3
   97e28:	4b09      	ldr	r3, [pc, #36]	; (97e50 <dd_can_dump_mailbox_data+0x204>)
   97e2a:	845a      	strh	r2, [r3, #34]	; 0x22
			DD_Sensor_status.flow_sensor_status=   temp_struct.temp_reg_16[1] ;	
   97e2c:	4b07      	ldr	r3, [pc, #28]	; (97e4c <dd_can_dump_mailbox_data+0x200>)
   97e2e:	885b      	ldrh	r3, [r3, #2]
   97e30:	b29a      	uxth	r2, r3
   97e32:	4b07      	ldr	r3, [pc, #28]	; (97e50 <dd_can_dump_mailbox_data+0x204>)
   97e34:	849a      	strh	r2, [r3, #36]	; 0x24
			array1[6]	= 1;	
   97e36:	4b08      	ldr	r3, [pc, #32]	; (97e58 <dd_can_dump_mailbox_data+0x20c>)
   97e38:	2201      	movs	r2, #1
   97e3a:	719a      	strb	r2, [r3, #6]
			
			break;
   97e3c:	e000      	b.n	97e40 <dd_can_dump_mailbox_data+0x1f4>
			
			default :
			break;
   97e3e:	bf00      	nop
		} //switch(DD_Sensor_status.SENSOR_GROUP_type_reg)  ends here
		
		break;
   97e40:	bf00      	nop
		
		default:
		break;
	}
}
   97e42:	370c      	adds	r7, #12
   97e44:	46bd      	mov	sp, r7
   97e46:	f85d 7b04 	ldr.w	r7, [sp], #4
   97e4a:	4770      	bx	lr
   97e4c:	200729cc 	.word	0x200729cc
   97e50:	200729d0 	.word	0x200729d0
   97e54:	20071c86 	.word	0x20071c86
   97e58:	20071ca4 	.word	0x20071ca4
   97e5c:	20071bdc 	.word	0x20071bdc
   97e60:	20071cb0 	.word	0x20071cb0
   97e64:	20071cb4 	.word	0x20071cb4

00097e68 <dd_can_mailbox_read>:


static uint32_t dd_can_mailbox_read(can_mb_conf_t *p_mailbox)   {
   97e68:	b480      	push	{r7}
   97e6a:	b087      	sub	sp, #28
   97e6c:	af00      	add	r7, sp, #0
   97e6e:	6078      	str	r0, [r7, #4]

	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   97e70:	2300      	movs	r3, #0
   97e72:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   97e74:	687b      	ldr	r3, [r7, #4]
   97e76:	681b      	ldr	r3, [r3, #0]
   97e78:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   97e7a:	687b      	ldr	r3, [r7, #4]
   97e7c:	689b      	ldr	r3, [r3, #8]
   97e7e:	60fb      	str	r3, [r7, #12]
	 /* Check whether there is overwriting happening in Receive with * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	 
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {	ul_retval = CAN_MAILBOX_RX_OVER;	}
   97e80:	68fb      	ldr	r3, [r7, #12]
   97e82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   97e86:	2b00      	cmp	r3, #0
   97e88:	d006      	beq.n	97e98 <dd_can_mailbox_read+0x30>
   97e8a:	68fb      	ldr	r3, [r7, #12]
   97e8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   97e90:	2b00      	cmp	r3, #0
   97e92:	d001      	beq.n	97e98 <dd_can_mailbox_read+0x30>
   97e94:	2302      	movs	r3, #2
   97e96:	617b      	str	r3, [r7, #20]

	/* Read the message family ID. */
	p_mailbox->ul_fid =	CAN0->CAN_MB[uc_index].CAN_MFID & CAN_MFID_MFID_Msk;	
   97e98:	4a26      	ldr	r2, [pc, #152]	; (97f34 <dd_can_mailbox_read+0xcc>)
   97e9a:	7cfb      	ldrb	r3, [r7, #19]
   97e9c:	015b      	lsls	r3, r3, #5
   97e9e:	4413      	add	r3, r2
   97ea0:	f503 7302 	add.w	r3, r3, #520	; 0x208
   97ea4:	685b      	ldr	r3, [r3, #4]
   97ea6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   97eaa:	687b      	ldr	r3, [r7, #4]
   97eac:	615a      	str	r2, [r3, #20]

	/* Read received data length. */
	p_mailbox->uc_length = (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   97eae:	68fb      	ldr	r3, [r7, #12]
   97eb0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   97eb4:	0c1b      	lsrs	r3, r3, #16
   97eb6:	b2da      	uxtb	r2, r3
   97eb8:	687b      	ldr	r3, [r7, #4]
   97eba:	719a      	strb	r2, [r3, #6]
	
	/* Read received data. */
	p_mailbox->ul_datal = CAN0->CAN_MB[uc_index].CAN_MDL;
   97ebc:	4a1d      	ldr	r2, [pc, #116]	; (97f34 <dd_can_mailbox_read+0xcc>)
   97ebe:	7cfb      	ldrb	r3, [r7, #19]
   97ec0:	015b      	lsls	r3, r3, #5
   97ec2:	4413      	add	r3, r2
   97ec4:	f503 7304 	add.w	r3, r3, #528	; 0x210
   97ec8:	685a      	ldr	r2, [r3, #4]
   97eca:	687b      	ldr	r3, [r7, #4]
   97ecc:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = CAN0->CAN_MB[uc_index].CAN_MDH;
   97ece:	4a19      	ldr	r2, [pc, #100]	; (97f34 <dd_can_mailbox_read+0xcc>)
   97ed0:	7cfb      	ldrb	r3, [r7, #19]
   97ed2:	015b      	lsls	r3, r3, #5
   97ed4:	4413      	add	r3, r2
   97ed6:	f503 7306 	add.w	r3, r3, #536	; 0x218
   97eda:	681a      	ldr	r2, [r3, #0]
   97edc:	687b      	ldr	r3, [r7, #4]
   97ede:	61da      	str	r2, [r3, #28]
	
	
	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   97ee0:	4a14      	ldr	r2, [pc, #80]	; (97f34 <dd_can_mailbox_read+0xcc>)
   97ee2:	7cfb      	ldrb	r3, [r7, #19]
   97ee4:	015b      	lsls	r3, r3, #5
   97ee6:	4413      	add	r3, r2
   97ee8:	f503 7304 	add.w	r3, r3, #528	; 0x210
   97eec:	681a      	ldr	r2, [r3, #0]
   97eee:	687b      	ldr	r3, [r7, #4]
   97ef0:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   97ef2:	687b      	ldr	r3, [r7, #4]
   97ef4:	689b      	ldr	r3, [r3, #8]
   97ef6:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;	}
   97ef8:	68fb      	ldr	r3, [r7, #12]
   97efa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   97efe:	2b00      	cmp	r3, #0
   97f00:	d003      	beq.n	97f0a <dd_can_mailbox_read+0xa2>
   97f02:	697b      	ldr	r3, [r7, #20]
   97f04:	f043 0304 	orr.w	r3, r3, #4
   97f08:	617b      	str	r3, [r7, #20]
	else { ul_retval |= CAN_MAILBOX_TRANSFER_OK; }		
		
	/* Enable next receive process. */	 // Allows the reception of the next message
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |CAN_MCR_MDLC(p_mailbox->uc_length);    
   97f0a:	490a      	ldr	r1, [pc, #40]	; (97f34 <dd_can_mailbox_read+0xcc>)
   97f0c:	7cfb      	ldrb	r3, [r7, #19]
   97f0e:	687a      	ldr	r2, [r7, #4]
   97f10:	7992      	ldrb	r2, [r2, #6]
   97f12:	0412      	lsls	r2, r2, #16
   97f14:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   97f18:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   97f1c:	015b      	lsls	r3, r3, #5
   97f1e:	440b      	add	r3, r1
   97f20:	f503 7306 	add.w	r3, r3, #536	; 0x218
   97f24:	605a      	str	r2, [r3, #4]
	return ul_retval;
   97f26:	697b      	ldr	r3, [r7, #20]
}
   97f28:	4618      	mov	r0, r3
   97f2a:	371c      	adds	r7, #28
   97f2c:	46bd      	mov	sp, r7
   97f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
   97f32:	4770      	bx	lr
   97f34:	400b4000 	.word	0x400b4000

00097f38 <dd_can_mailbox_write>:

		
static uint32_t dd_can_mailbox_write(can_mb_conf_t *p_mailbox)
{
   97f38:	b480      	push	{r7}
   97f3a:	b085      	sub	sp, #20
   97f3c:	af00      	add	r7, sp, #0
   97f3e:	6078      	str	r0, [r7, #4]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   97f40:	687b      	ldr	r3, [r7, #4]
   97f42:	681b      	ldr	r3, [r3, #0]
   97f44:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   97f46:	4a2a      	ldr	r2, [pc, #168]	; (97ff0 <dd_can_mailbox_write+0xb8>)
   97f48:	7bfb      	ldrb	r3, [r7, #15]
   97f4a:	015b      	lsls	r3, r3, #5
   97f4c:	4413      	add	r3, r2
   97f4e:	f503 7304 	add.w	r3, r3, #528	; 0x210
   97f52:	681a      	ldr	r2, [r3, #0]
   97f54:	687b      	ldr	r3, [r7, #4]
   97f56:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   97f58:	687b      	ldr	r3, [r7, #4]
   97f5a:	689b      	ldr	r3, [r3, #8]
   97f5c:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
   97f5e:	68bb      	ldr	r3, [r7, #8]
   97f60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   97f64:	2b00      	cmp	r3, #0
   97f66:	d101      	bne.n	97f6c <dd_can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
   97f68:	2301      	movs	r3, #1
   97f6a:	e03b      	b.n	97fe4 <dd_can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) { 
   97f6c:	687b      	ldr	r3, [r7, #4]
   97f6e:	795b      	ldrb	r3, [r3, #5]
   97f70:	2b00      	cmp	r3, #0
   97f72:	d00b      	beq.n	97f8c <dd_can_mailbox_write+0x54>
		CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id | CAN_MAM_MIDE;
   97f74:	491e      	ldr	r1, [pc, #120]	; (97ff0 <dd_can_mailbox_write+0xb8>)
   97f76:	7bfb      	ldrb	r3, [r7, #15]
   97f78:	687a      	ldr	r2, [r7, #4]
   97f7a:	6912      	ldr	r2, [r2, #16]
   97f7c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   97f80:	015b      	lsls	r3, r3, #5
   97f82:	440b      	add	r3, r1
   97f84:	f503 7302 	add.w	r3, r3, #520	; 0x208
   97f88:	601a      	str	r2, [r3, #0]
   97f8a:	e008      	b.n	97f9e <dd_can_mailbox_write+0x66>
	} else {
		CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   97f8c:	4918      	ldr	r1, [pc, #96]	; (97ff0 <dd_can_mailbox_write+0xb8>)
   97f8e:	7bfb      	ldrb	r3, [r7, #15]
   97f90:	687a      	ldr	r2, [r7, #4]
   97f92:	6912      	ldr	r2, [r2, #16]
   97f94:	015b      	lsls	r3, r3, #5
   97f96:	440b      	add	r3, r1
   97f98:	f503 7302 	add.w	r3, r3, #520	; 0x208
   97f9c:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	CAN0->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
   97f9e:	4914      	ldr	r1, [pc, #80]	; (97ff0 <dd_can_mailbox_write+0xb8>)
   97fa0:	7bfb      	ldrb	r3, [r7, #15]
   97fa2:	687a      	ldr	r2, [r7, #4]
   97fa4:	6992      	ldr	r2, [r2, #24]
   97fa6:	015b      	lsls	r3, r3, #5
   97fa8:	440b      	add	r3, r1
   97faa:	f503 7304 	add.w	r3, r3, #528	; 0x210
   97fae:	605a      	str	r2, [r3, #4]
	if (p_mailbox->uc_length > 4) {  CAN0->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
   97fb0:	687b      	ldr	r3, [r7, #4]
   97fb2:	799b      	ldrb	r3, [r3, #6]
   97fb4:	2b04      	cmp	r3, #4
   97fb6:	d908      	bls.n	97fca <dd_can_mailbox_write+0x92>
   97fb8:	490d      	ldr	r1, [pc, #52]	; (97ff0 <dd_can_mailbox_write+0xb8>)
   97fba:	7bfb      	ldrb	r3, [r7, #15]
   97fbc:	687a      	ldr	r2, [r7, #4]
   97fbe:	69d2      	ldr	r2, [r2, #28]
   97fc0:	015b      	lsls	r3, r3, #5
   97fc2:	440b      	add	r3, r1
   97fc4:	f503 7306 	add.w	r3, r3, #536	; 0x218
   97fc8:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
   97fca:	4909      	ldr	r1, [pc, #36]	; (97ff0 <dd_can_mailbox_write+0xb8>)
   97fcc:	7bfb      	ldrb	r3, [r7, #15]
   97fce:	687a      	ldr	r2, [r7, #4]
   97fd0:	7992      	ldrb	r2, [r2, #6]
   97fd2:	0412      	lsls	r2, r2, #16
   97fd4:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   97fd8:	015b      	lsls	r3, r3, #5
   97fda:	440b      	add	r3, r1
   97fdc:	f503 7306 	add.w	r3, r3, #536	; 0x218
   97fe0:	605a      	str	r2, [r3, #4]

	return CAN_MAILBOX_TRANSFER_OK;
   97fe2:	2300      	movs	r3, #0
}
   97fe4:	4618      	mov	r0, r3
   97fe6:	3714      	adds	r7, #20
   97fe8:	46bd      	mov	sp, r7
   97fea:	f85d 7b04 	ldr.w	r7, [sp], #4
   97fee:	4770      	bx	lr
   97ff0:	400b4000 	.word	0x400b4000

00097ff4 <dd_can_global_send_transfer_cmd>:

void dd_can_global_send_transfer_cmd(uint8_t uc_mask)
{
   97ff4:	b480      	push	{r7}
   97ff6:	b085      	sub	sp, #20
   97ff8:	af00      	add	r7, sp, #0
   97ffa:	4603      	mov	r3, r0
   97ffc:	71fb      	strb	r3, [r7, #7]
	uint32_t ul_reg;

	ul_reg = CAN0->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
   97ffe:	4b07      	ldr	r3, [pc, #28]	; (9801c <dd_can_global_send_transfer_cmd+0x28>)
   98000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   98002:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   98006:	60fb      	str	r3, [r7, #12]
	CAN0->CAN_TCR = ul_reg | uc_mask;
   98008:	4904      	ldr	r1, [pc, #16]	; (9801c <dd_can_global_send_transfer_cmd+0x28>)
   9800a:	79fa      	ldrb	r2, [r7, #7]
   9800c:	68fb      	ldr	r3, [r7, #12]
   9800e:	4313      	orrs	r3, r2
   98010:	624b      	str	r3, [r1, #36]	; 0x24
}
   98012:	3714      	adds	r7, #20
   98014:	46bd      	mov	sp, r7
   98016:	f85d 7b04 	ldr.w	r7, [sp], #4
   9801a:	4770      	bx	lr
   9801c:	400b4000 	.word	0x400b4000

00098020 <dd_can_mailbox_conf>:



static void dd_can_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   98020:	b480      	push	{r7}
   98022:	b085      	sub	sp, #20
   98024:	af00      	add	r7, sp, #0
   98026:	6078      	str	r0, [r7, #4]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   98028:	687b      	ldr	r3, [r7, #4]
   9802a:	681b      	ldr	r3, [r3, #0]
   9802c:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   9802e:	687b      	ldr	r3, [r7, #4]
   98030:	791b      	ldrb	r3, [r3, #4]
   98032:	2b00      	cmp	r3, #0
   98034:	d12e      	bne.n	98094 <dd_can_mailbox_conf+0x74>
		CAN0->CAN_MB[uc_index].CAN_MMR = 0;
   98036:	4a34      	ldr	r2, [pc, #208]	; (98108 <dd_can_mailbox_conf+0xe8>)
   98038:	7bfb      	ldrb	r3, [r7, #15]
   9803a:	3310      	adds	r3, #16
   9803c:	015b      	lsls	r3, r3, #5
   9803e:	4413      	add	r3, r2
   98040:	2200      	movs	r2, #0
   98042:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MAM = 0;
   98044:	4a30      	ldr	r2, [pc, #192]	; (98108 <dd_can_mailbox_conf+0xe8>)
   98046:	7bfb      	ldrb	r3, [r7, #15]
   98048:	3310      	adds	r3, #16
   9804a:	015b      	lsls	r3, r3, #5
   9804c:	4413      	add	r3, r2
   9804e:	2200      	movs	r2, #0
   98050:	605a      	str	r2, [r3, #4]
		CAN0->CAN_MB[uc_index].CAN_MID = 0;
   98052:	4a2d      	ldr	r2, [pc, #180]	; (98108 <dd_can_mailbox_conf+0xe8>)
   98054:	7bfb      	ldrb	r3, [r7, #15]
   98056:	015b      	lsls	r3, r3, #5
   98058:	4413      	add	r3, r2
   9805a:	f503 7302 	add.w	r3, r3, #520	; 0x208
   9805e:	2200      	movs	r2, #0
   98060:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDL = 0;
   98062:	4a29      	ldr	r2, [pc, #164]	; (98108 <dd_can_mailbox_conf+0xe8>)
   98064:	7bfb      	ldrb	r3, [r7, #15]
   98066:	015b      	lsls	r3, r3, #5
   98068:	4413      	add	r3, r2
   9806a:	f503 7304 	add.w	r3, r3, #528	; 0x210
   9806e:	2200      	movs	r2, #0
   98070:	605a      	str	r2, [r3, #4]
		CAN0->CAN_MB[uc_index].CAN_MDH = 0;
   98072:	4a25      	ldr	r2, [pc, #148]	; (98108 <dd_can_mailbox_conf+0xe8>)
   98074:	7bfb      	ldrb	r3, [r7, #15]
   98076:	015b      	lsls	r3, r3, #5
   98078:	4413      	add	r3, r2
   9807a:	f503 7306 	add.w	r3, r3, #536	; 0x218
   9807e:	2200      	movs	r2, #0
   98080:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MCR = 0;
   98082:	4a21      	ldr	r2, [pc, #132]	; (98108 <dd_can_mailbox_conf+0xe8>)
   98084:	7bfb      	ldrb	r3, [r7, #15]
   98086:	015b      	lsls	r3, r3, #5
   98088:	4413      	add	r3, r2
   9808a:	f503 7306 	add.w	r3, r3, #536	; 0x218
   9808e:	2200      	movs	r2, #0
   98090:	605a      	str	r2, [r3, #4]
		return;
   98092:	e034      	b.n	980fe <dd_can_mailbox_conf+0xde>
	}
	
	/* Set the priority in Transmit mode. */                                                                   
	CAN0->CAN_MB[uc_index].CAN_MMR = (CAN0->CAN_MB[uc_index].CAN_MMR &  ~CAN_MMR_PRIOR_Msk) | (p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);  
   98094:	481c      	ldr	r0, [pc, #112]	; (98108 <dd_can_mailbox_conf+0xe8>)
   98096:	7bfb      	ldrb	r3, [r7, #15]
   98098:	491b      	ldr	r1, [pc, #108]	; (98108 <dd_can_mailbox_conf+0xe8>)
   9809a:	7bfa      	ldrb	r2, [r7, #15]
   9809c:	3210      	adds	r2, #16
   9809e:	0152      	lsls	r2, r2, #5
   980a0:	440a      	add	r2, r1
   980a2:	6812      	ldr	r2, [r2, #0]
   980a4:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
   980a8:	6879      	ldr	r1, [r7, #4]
   980aa:	79c9      	ldrb	r1, [r1, #7]
   980ac:	0409      	lsls	r1, r1, #16
   980ae:	430a      	orrs	r2, r1
   980b0:	3310      	adds	r3, #16
   980b2:	015b      	lsls	r3, r3, #5
   980b4:	4403      	add	r3, r0
   980b6:	601a      	str	r2, [r3, #0]
	/* Set the message ID and message acceptance mask for the mailbox in * other modes. */	
		CAN0 ->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   980b8:	4913      	ldr	r1, [pc, #76]	; (98108 <dd_can_mailbox_conf+0xe8>)
   980ba:	7bfb      	ldrb	r3, [r7, #15]
   980bc:	687a      	ldr	r2, [r7, #4]
   980be:	68d2      	ldr	r2, [r2, #12]
   980c0:	3310      	adds	r3, #16
   980c2:	015b      	lsls	r3, r3, #5
   980c4:	440b      	add	r3, r1
   980c6:	605a      	str	r2, [r3, #4]
		CAN0 ->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;	
   980c8:	490f      	ldr	r1, [pc, #60]	; (98108 <dd_can_mailbox_conf+0xe8>)
   980ca:	7bfb      	ldrb	r3, [r7, #15]
   980cc:	687a      	ldr	r2, [r7, #4]
   980ce:	6912      	ldr	r2, [r2, #16]
   980d0:	015b      	lsls	r3, r3, #5
   980d2:	440b      	add	r3, r1
   980d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
   980d8:	601a      	str	r2, [r3, #0]

	/* Set up mailbox in one of the five different modes. */                                                      
	CAN0 ->CAN_MB[uc_index].CAN_MMR = (CAN0 ->CAN_MB[uc_index].CAN_MMR & ~CAN_MMR_MOT_Msk) | (p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);		
   980da:	480b      	ldr	r0, [pc, #44]	; (98108 <dd_can_mailbox_conf+0xe8>)
   980dc:	7bfb      	ldrb	r3, [r7, #15]
   980de:	490a      	ldr	r1, [pc, #40]	; (98108 <dd_can_mailbox_conf+0xe8>)
   980e0:	7bfa      	ldrb	r2, [r7, #15]
   980e2:	3210      	adds	r2, #16
   980e4:	0152      	lsls	r2, r2, #5
   980e6:	440a      	add	r2, r1
   980e8:	6812      	ldr	r2, [r2, #0]
   980ea:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
   980ee:	6879      	ldr	r1, [r7, #4]
   980f0:	7909      	ldrb	r1, [r1, #4]
   980f2:	0609      	lsls	r1, r1, #24
   980f4:	430a      	orrs	r2, r1
   980f6:	3310      	adds	r3, #16
   980f8:	015b      	lsls	r3, r3, #5
   980fa:	4403      	add	r3, r0
   980fc:	601a      	str	r2, [r3, #0]
}
   980fe:	3714      	adds	r7, #20
   98100:	46bd      	mov	sp, r7
   98102:	f85d 7b04 	ldr.w	r7, [sp], #4
   98106:	4770      	bx	lr
   98108:	400b4000 	.word	0x400b4000

0009810c <DD_CAN_WRITE_PROPO>:
	p_mailbox->ul_datal = 0;
	p_mailbox->ul_datah = 0;
}

void DD_CAN_WRITE_PROPO(uint16_t data, uint16_t rc_count)
{
   9810c:	b580      	push	{r7, lr}
   9810e:	b084      	sub	sp, #16
   98110:	af00      	add	r7, sp, #0
   98112:	4603      	mov	r3, r0
   98114:	460a      	mov	r2, r1
   98116:	80fb      	strh	r3, [r7, #6]
   98118:	4613      	mov	r3, r2
   9811a:	80bb      	strh	r3, [r7, #4]
// 	 can0_mailbox.ul_datah = 0x55AAAA55;
// 	 can0_mailbox.uc_length = 8;
// 	 dd_can_mailbox_write(&can0_mailbox);
// 	 dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
MASTER_CMD_ID_TYPE dd_propo_cmd;
dd_propo_cmd = data;
   9811c:	88fb      	ldrh	r3, [r7, #6]
   9811e:	73fb      	strb	r3, [r7, #15]
dd_master_command(PROPORTIONING_CPU_id, dd_propo_cmd,rc_count);
   98120:	7bfa      	ldrb	r2, [r7, #15]
   98122:	88bb      	ldrh	r3, [r7, #4]
   98124:	2002      	movs	r0, #2
   98126:	4611      	mov	r1, r2
   98128:	461a      	mov	r2, r3
   9812a:	4b04      	ldr	r3, [pc, #16]	; (9813c <DD_CAN_WRITE_PROPO+0x30>)
   9812c:	4798      	blx	r3
dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
   9812e:	2001      	movs	r0, #1
   98130:	4b03      	ldr	r3, [pc, #12]	; (98140 <DD_CAN_WRITE_PROPO+0x34>)
   98132:	4798      	blx	r3

}
   98134:	3710      	adds	r7, #16
   98136:	46bd      	mov	sp, r7
   98138:	bd80      	pop	{r7, pc}
   9813a:	bf00      	nop
   9813c:	00097ba9 	.word	0x00097ba9
   98140:	00097ff5 	.word	0x00097ff5

00098144 <DD_CAN_WRITE_HEMO>:

void DD_CAN_WRITE_HEMO(uint16_t data, uint16_t speed)
{
   98144:	b580      	push	{r7, lr}
   98146:	b084      	sub	sp, #16
   98148:	af00      	add	r7, sp, #0
   9814a:	4603      	mov	r3, r0
   9814c:	460a      	mov	r2, r1
   9814e:	80fb      	strh	r3, [r7, #6]
   98150:	4613      	mov	r3, r2
   98152:	80bb      	strh	r3, [r7, #4]
	// 	 can0_mailbox.ul_datah = 0x55AAAA55;
	// 	 can0_mailbox.uc_length = 8;
	// 	 dd_can_mailbox_write(&can0_mailbox);
	// 	 dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
	MASTER_CMD_ID_TYPE dd_hemo_cmd;
	dd_hemo_cmd = data;
   98154:	88fb      	ldrh	r3, [r7, #6]
   98156:	73fb      	strb	r3, [r7, #15]
	CAN0->CAN_IDR = 0xffffffff;
   98158:	4b09      	ldr	r3, [pc, #36]	; (98180 <DD_CAN_WRITE_HEMO+0x3c>)
   9815a:	f04f 32ff 	mov.w	r2, #4294967295
   9815e:	609a      	str	r2, [r3, #8]
	dd_master_command(HEMO_CPU_id, dd_hemo_cmd, speed);
   98160:	7bfa      	ldrb	r2, [r7, #15]
   98162:	88bb      	ldrh	r3, [r7, #4]
   98164:	2001      	movs	r0, #1
   98166:	4611      	mov	r1, r2
   98168:	461a      	mov	r2, r3
   9816a:	4b06      	ldr	r3, [pc, #24]	; (98184 <DD_CAN_WRITE_HEMO+0x40>)
   9816c:	4798      	blx	r3
	dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
   9816e:	2001      	movs	r0, #1
   98170:	4b05      	ldr	r3, [pc, #20]	; (98188 <DD_CAN_WRITE_HEMO+0x44>)
   98172:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   98174:	4b02      	ldr	r3, [pc, #8]	; (98180 <DD_CAN_WRITE_HEMO+0x3c>)
   98176:	2202      	movs	r2, #2
   98178:	605a      	str	r2, [r3, #4]
}
   9817a:	3710      	adds	r7, #16
   9817c:	46bd      	mov	sp, r7
   9817e:	bd80      	pop	{r7, pc}
   98180:	400b4000 	.word	0x400b4000
   98184:	00097ba9 	.word	0x00097ba9
   98188:	00097ff5 	.word	0x00097ff5

0009818c <DD_CAN_WRITE_SENSOR>:

void DD_CAN_WRITE_SENSOR(uint16_t data)
{
   9818c:	b580      	push	{r7, lr}
   9818e:	b084      	sub	sp, #16
   98190:	af00      	add	r7, sp, #0
   98192:	4603      	mov	r3, r0
   98194:	80fb      	strh	r3, [r7, #6]
	// 	 can0_mailbox.ul_datah = 0x55AAAA55;
	// 	 can0_mailbox.uc_length = 8;
	// 	 dd_can_mailbox_write(&can0_mailbox);
	// 	 dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
	MASTER_CMD_ID_TYPE dd_sensor_cmd;
	dd_sensor_cmd = data;
   98196:	88fb      	ldrh	r3, [r7, #6]
   98198:	73fb      	strb	r3, [r7, #15]
	CAN0->CAN_IDR = 0xffffffff;
   9819a:	4b09      	ldr	r3, [pc, #36]	; (981c0 <DD_CAN_WRITE_SENSOR+0x34>)
   9819c:	f04f 32ff 	mov.w	r2, #4294967295
   981a0:	609a      	str	r2, [r3, #8]
	dd_master_command(SENSOR_CPU_id, dd_sensor_cmd, 0);
   981a2:	7bfb      	ldrb	r3, [r7, #15]
   981a4:	2003      	movs	r0, #3
   981a6:	4619      	mov	r1, r3
   981a8:	2200      	movs	r2, #0
   981aa:	4b06      	ldr	r3, [pc, #24]	; (981c4 <DD_CAN_WRITE_SENSOR+0x38>)
   981ac:	4798      	blx	r3
	dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
   981ae:	2001      	movs	r0, #1
   981b0:	4b05      	ldr	r3, [pc, #20]	; (981c8 <DD_CAN_WRITE_SENSOR+0x3c>)
   981b2:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   981b4:	4b02      	ldr	r3, [pc, #8]	; (981c0 <DD_CAN_WRITE_SENSOR+0x34>)
   981b6:	2202      	movs	r2, #2
   981b8:	605a      	str	r2, [r3, #4]
}
   981ba:	3710      	adds	r7, #16
   981bc:	46bd      	mov	sp, r7
   981be:	bd80      	pop	{r7, pc}
   981c0:	400b4000 	.word	0x400b4000
   981c4:	00097ba9 	.word	0x00097ba9
   981c8:	00097ff5 	.word	0x00097ff5

000981cc <DD_CAN_READ_APTVPT>:


void DD_CAN_READ_APTVPT(void)
{
   981cc:	b580      	push	{r7, lr}
   981ce:	af00      	add	r7, sp, #0
	
	DD_CAN_WRITE_HEMO(BP_APT_VPT_SEND_TO_MASTER, 0);
   981d0:	2027      	movs	r0, #39	; 0x27
   981d2:	2100      	movs	r1, #0
   981d4:	4b01      	ldr	r3, [pc, #4]	; (981dc <DD_CAN_READ_APTVPT+0x10>)
   981d6:	4798      	blx	r3
	
}
   981d8:	bd80      	pop	{r7, pc}
   981da:	bf00      	nop
   981dc:	00098145 	.word	0x00098145

000981e0 <DD_INIT_CAN>:



void DD_INIT_CAN()    

	{
   981e0:	b580      	push	{r7, lr}
   981e2:	b08e      	sub	sp, #56	; 0x38
   981e4:	af00      	add	r7, sp, #0
				
	can_bit_timing_t  *p_bit_time ;
	p_bit_time = (can_bit_timing_t *)&can_bit_time[6];
   981e6:	4b4f      	ldr	r3, [pc, #316]	; (98324 <DD_INIT_CAN+0x144>)
   981e8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ul_flag;
	uint32_t ul_tick;
	uint8_t uc_prescale = 120;
   981ea:	2378      	movs	r3, #120	; 0x78
   981ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t ul_sysclk;
	CAN0 ->CAN_WPMR = 0x43414E00;  //Can write protection disabled
   981f0:	4b4d      	ldr	r3, [pc, #308]	; (98328 <DD_INIT_CAN+0x148>)
   981f2:	4a4e      	ldr	r2, [pc, #312]	; (9832c <DD_INIT_CAN+0x14c>)
   981f4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	CAN0 ->CAN_MR &= ~CAN_MR_CANEN ;  //0xFFFFFFFE; // DISABLE CAN0
   981f8:	4a4b      	ldr	r2, [pc, #300]	; (98328 <DD_INIT_CAN+0x148>)
   981fa:	4b4b      	ldr	r3, [pc, #300]	; (98328 <DD_INIT_CAN+0x148>)
   981fc:	681b      	ldr	r3, [r3, #0]
   981fe:	f023 0301 	bic.w	r3, r3, #1
   98202:	6013      	str	r3, [r2, #0]
	CAN0->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) | CAN_BR_PROPAG(p_bit_time->uc_prog - 1) | CAN_BR_SJW(p_bit_time->uc_sjw - 1) |	CAN_BR_BRP(uc_prescale - 1);
   98204:	4948      	ldr	r1, [pc, #288]	; (98328 <DD_INIT_CAN+0x148>)
   98206:	6abb      	ldr	r3, [r7, #40]	; 0x28
   98208:	78db      	ldrb	r3, [r3, #3]
   9820a:	3b01      	subs	r3, #1
   9820c:	f003 0207 	and.w	r2, r3, #7
   98210:	6abb      	ldr	r3, [r7, #40]	; 0x28
   98212:	789b      	ldrb	r3, [r3, #2]
   98214:	3b01      	subs	r3, #1
   98216:	011b      	lsls	r3, r3, #4
   98218:	f003 0370 	and.w	r3, r3, #112	; 0x70
   9821c:	431a      	orrs	r2, r3
   9821e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   98220:	785b      	ldrb	r3, [r3, #1]
   98222:	3b01      	subs	r3, #1
   98224:	021b      	lsls	r3, r3, #8
   98226:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   9822a:	431a      	orrs	r2, r3
   9822c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   9822e:	791b      	ldrb	r3, [r3, #4]
   98230:	3b01      	subs	r3, #1
   98232:	031b      	lsls	r3, r3, #12
   98234:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   98238:	431a      	orrs	r2, r3
   9823a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9823e:	3b01      	subs	r3, #1
   98240:	041b      	lsls	r3, r3, #16
   98242:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   98246:	4313      	orrs	r3, r2
   98248:	614b      	str	r3, [r1, #20]
	can_mb_conf_t mb_config_t;
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   9824a:	2300      	movs	r3, #0
   9824c:	723b      	strb	r3, [r7, #8]
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   9824e:	2300      	movs	r3, #0
   98250:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   98254:	e00b      	b.n	9826e <DD_INIT_CAN+0x8e>
		mb_config_t.ul_mb_idx = i;
   98256:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   9825a:	607b      	str	r3, [r7, #4]
		dd_can_mailbox_conf(&mb_config_t);
   9825c:	1d3b      	adds	r3, r7, #4
   9825e:	4618      	mov	r0, r3
   98260:	4b33      	ldr	r3, [pc, #204]	; (98330 <DD_INIT_CAN+0x150>)
   98262:	4798      	blx	r3
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   98264:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   98268:	3301      	adds	r3, #1
   9826a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   9826e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   98272:	2b07      	cmp	r3, #7
   98274:	d9ef      	bls.n	98256 <DD_INIT_CAN+0x76>
		mb_config_t.ul_mb_idx = i;
		dd_can_mailbox_conf(&mb_config_t);
	}
	// ALL MAIL BOX HAS BEEN RESET
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
   98276:	4a2c      	ldr	r2, [pc, #176]	; (98328 <DD_INIT_CAN+0x148>)
   98278:	4b2b      	ldr	r3, [pc, #172]	; (98328 <DD_INIT_CAN+0x148>)
   9827a:	681b      	ldr	r3, [r3, #0]
   9827c:	f043 0301 	orr.w	r3, r3, #1
   98280:	6013      	str	r3, [r2, #0]
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   98282:	2300      	movs	r3, #0
   98284:	637b      	str	r3, [r7, #52]	; 0x34
	ul_tick = 0;
   98286:	2300      	movs	r3, #0
   98288:	633b      	str	r3, [r7, #48]	; 0x30
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   9828a:	e005      	b.n	98298 <DD_INIT_CAN+0xb8>
		ul_flag = (CAN0->CAN_SR);
   9828c:	4b26      	ldr	r3, [pc, #152]	; (98328 <DD_INIT_CAN+0x148>)
   9828e:	691b      	ldr	r3, [r3, #16]
   98290:	637b      	str	r3, [r7, #52]	; 0x34
		ul_tick++;
   98292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   98294:	3301      	adds	r3, #1
   98296:	633b      	str	r3, [r7, #48]	; 0x30
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   98298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   9829a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   9829e:	2b00      	cmp	r3, #0
   982a0:	d103      	bne.n	982aa <DD_INIT_CAN+0xca>
   982a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   982a4:	4a23      	ldr	r2, [pc, #140]	; (98334 <DD_INIT_CAN+0x154>)
   982a6:	4293      	cmp	r3, r2
   982a8:	d9f0      	bls.n	9828c <DD_INIT_CAN+0xac>
	/* Timeout or the CAN module has been synchronized with the bus. */
/*	if (CAN_TIMEOUT == ul_tick) { puts("CAN initialization (sync) ERROR" STRING_EOL);	}
	else {	puts("CAN initialization is completed." STRING_EOL);
	}*/
	//NVIC-> ISER reset_mailbox_conf(&can0_mailbox);
	can0_mailbox.ul_mb_idx =   MAILBOX_1;
   982aa:	4b23      	ldr	r3, [pc, #140]	; (98338 <DD_INIT_CAN+0x158>)
   982ac:	2201      	movs	r2, #1
   982ae:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_RX_MODE ;
   982b0:	4b21      	ldr	r3, [pc, #132]	; (98338 <DD_INIT_CAN+0x158>)
   982b2:	2201      	movs	r2, #1
   982b4:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 0;
   982b6:	4b20      	ldr	r3, [pc, #128]	; (98338 <DD_INIT_CAN+0x158>)
   982b8:	2200      	movs	r2, #0
   982ba:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   982bc:	4b1e      	ldr	r3, [pc, #120]	; (98338 <DD_INIT_CAN+0x158>)
   982be:	2200      	movs	r2, #0
   982c0:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk =  CAN_MFID_MFID_VA_dd(CAN_MASK);   // 0x7FC | CAN_MAM_MIDvA_Msk ;
   982c2:	4b1d      	ldr	r3, [pc, #116]	; (98338 <DD_INIT_CAN+0x158>)
   982c4:	4a1d      	ldr	r2, [pc, #116]	; (9833c <DD_INIT_CAN+0x15c>)
   982c6:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(MASTER_CPU_id) ;
   982c8:	4b1b      	ldr	r3, [pc, #108]	; (98338 <DD_INIT_CAN+0x158>)
   982ca:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   982ce:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);	
   982d0:	4819      	ldr	r0, [pc, #100]	; (98338 <DD_INIT_CAN+0x158>)
   982d2:	4b17      	ldr	r3, [pc, #92]	; (98330 <DD_INIT_CAN+0x150>)
   982d4:	4798      	blx	r3
	
	can0_mailbox.ul_mb_idx =   MAILBOX_0;
   982d6:	4b18      	ldr	r3, [pc, #96]	; (98338 <DD_INIT_CAN+0x158>)
   982d8:	2200      	movs	r2, #0
   982da:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;
   982dc:	4b16      	ldr	r3, [pc, #88]	; (98338 <DD_INIT_CAN+0x158>)
   982de:	2203      	movs	r2, #3
   982e0:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 1;
   982e2:	4b15      	ldr	r3, [pc, #84]	; (98338 <DD_INIT_CAN+0x158>)
   982e4:	2201      	movs	r2, #1
   982e6:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   982e8:	4b13      	ldr	r3, [pc, #76]	; (98338 <DD_INIT_CAN+0x158>)
   982ea:	2200      	movs	r2, #0
   982ec:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = CAN_MFID_MFID_VA_dd(CAN_MASK);// 0x7FC | CAN_MAM_MIDvA_Msk | CAN_MAM_MIDvB_Msk ;
   982ee:	4b12      	ldr	r3, [pc, #72]	; (98338 <DD_INIT_CAN+0x158>)
   982f0:	4a12      	ldr	r2, [pc, #72]	; (9833c <DD_INIT_CAN+0x15c>)
   982f2:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(PROPORTIONING_CPU_id);
   982f4:	4b10      	ldr	r3, [pc, #64]	; (98338 <DD_INIT_CAN+0x158>)
   982f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   982fa:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);	
   982fc:	480e      	ldr	r0, [pc, #56]	; (98338 <DD_INIT_CAN+0x158>)
   982fe:	4b0c      	ldr	r3, [pc, #48]	; (98330 <DD_INIT_CAN+0x150>)
   98300:	4798      	blx	r3
		
		NVIC_EnableIRQ(CAN0_IRQn);
   98302:	202b      	movs	r0, #43	; 0x2b
   98304:	4b0e      	ldr	r3, [pc, #56]	; (98340 <DD_INIT_CAN+0x160>)
   98306:	4798      	blx	r3
		CAN0->CAN_IER = CAN_IER_MB1;
   98308:	4b07      	ldr	r3, [pc, #28]	; (98328 <DD_INIT_CAN+0x148>)
   9830a:	2202      	movs	r2, #2
   9830c:	605a      	str	r2, [r3, #4]
// 					
	
	sn65hvda540_set_en(&can0_transceiver ,PIN_CAN0_STANDBY_IDX);
   9830e:	480d      	ldr	r0, [pc, #52]	; (98344 <DD_INIT_CAN+0x164>)
   98310:	2103      	movs	r1, #3
   98312:	4b0d      	ldr	r3, [pc, #52]	; (98348 <DD_INIT_CAN+0x168>)
   98314:	4798      	blx	r3
	sn65hvda540_normal_mode(&can0_transceiver);
   98316:	480b      	ldr	r0, [pc, #44]	; (98344 <DD_INIT_CAN+0x164>)
   98318:	4b0c      	ldr	r3, [pc, #48]	; (9834c <DD_INIT_CAN+0x16c>)
   9831a:	4798      	blx	r3
		
		
	}
   9831c:	3738      	adds	r7, #56	; 0x38
   9831e:	46bd      	mov	sp, r7
   98320:	bd80      	pop	{r7, pc}
   98322:	bf00      	nop
   98324:	000aa5cc 	.word	0x000aa5cc
   98328:	400b4000 	.word	0x400b4000
   9832c:	43414e00 	.word	0x43414e00
   98330:	00098021 	.word	0x00098021
   98334:	0001869f 	.word	0x0001869f
   98338:	20072a04 	.word	0x20072a04
   9833c:	1ffc0000 	.word	0x1ffc0000
   98340:	00097a65 	.word	0x00097a65
   98344:	20072a24 	.word	0x20072a24
   98348:	00097b01 	.word	0x00097b01
   9834c:	00097b1d 	.word	0x00097b1d

00098350 <DD_CAN_READ_SENSORS>:
	
	
	

uint16_t DD_CAN_READ_SENSORS(DD_sensortype ID_SENSOR)
{
   98350:	b480      	push	{r7}
   98352:	b085      	sub	sp, #20
   98354:	af00      	add	r7, sp, #0
   98356:	4603      	mov	r3, r0
   98358:	71fb      	strb	r3, [r7, #7]
	uint16_t SENSOR_VAL;
	uint8_t channel = 0;
   9835a:	2300      	movs	r3, #0
   9835c:	737b      	strb	r3, [r7, #13]
	//adc_chnl channel = channel_0;
	switch(ID_SENSOR)
   9835e:	79fb      	ldrb	r3, [r7, #7]
   98360:	3b01      	subs	r3, #1
   98362:	2b15      	cmp	r3, #21
   98364:	f200 8088 	bhi.w	98478 <DD_CAN_READ_SENSORS+0x128>
   98368:	a201      	add	r2, pc, #4	; (adr r2, 98370 <DD_CAN_READ_SENSORS+0x20>)
   9836a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9836e:	bf00      	nop
   98370:	000983c9 	.word	0x000983c9
   98374:	000983d1 	.word	0x000983d1
   98378:	000983d9 	.word	0x000983d9
   9837c:	000983e1 	.word	0x000983e1
   98380:	000983e9 	.word	0x000983e9
   98384:	000983f1 	.word	0x000983f1
   98388:	000983f9 	.word	0x000983f9
   9838c:	00098401 	.word	0x00098401
   98390:	00098409 	.word	0x00098409
   98394:	00098411 	.word	0x00098411
   98398:	00098419 	.word	0x00098419
   9839c:	00098421 	.word	0x00098421
   983a0:	00098429 	.word	0x00098429
   983a4:	00098431 	.word	0x00098431
   983a8:	00098439 	.word	0x00098439
   983ac:	00098441 	.word	0x00098441
   983b0:	00098449 	.word	0x00098449
   983b4:	00098451 	.word	0x00098451
   983b8:	00098459 	.word	0x00098459
   983bc:	00098461 	.word	0x00098461
   983c0:	00098469 	.word	0x00098469
   983c4:	00098471 	.word	0x00098471
	{
		case DD_CAN_SENSOR_ID1:
		
		SENSOR_VAL = DD_Sensor_status.ps1status;
   983c8:	4b2f      	ldr	r3, [pc, #188]	; (98488 <DD_CAN_READ_SENSORS+0x138>)
   983ca:	885b      	ldrh	r3, [r3, #2]
   983cc:	81fb      	strh	r3, [r7, #14]
		break;
   983ce:	e053      	b.n	98478 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID2:
		SENSOR_VAL = DD_Sensor_status.ps2status;
   983d0:	4b2d      	ldr	r3, [pc, #180]	; (98488 <DD_CAN_READ_SENSORS+0x138>)
   983d2:	889b      	ldrh	r3, [r3, #4]
   983d4:	81fb      	strh	r3, [r7, #14]
		break;
   983d6:	e04f      	b.n	98478 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID3:
		SENSOR_VAL = DD_Sensor_status.ps3status;
   983d8:	4b2b      	ldr	r3, [pc, #172]	; (98488 <DD_CAN_READ_SENSORS+0x138>)
   983da:	88db      	ldrh	r3, [r3, #6]
   983dc:	81fb      	strh	r3, [r7, #14]
		break;
   983de:	e04b      	b.n	98478 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID4:
		SENSOR_VAL = DD_Sensor_status.thermocouple_status;
   983e0:	4b29      	ldr	r3, [pc, #164]	; (98488 <DD_CAN_READ_SENSORS+0x138>)
   983e2:	891b      	ldrh	r3, [r3, #8]
   983e4:	81fb      	strh	r3, [r7, #14]
		break;
   983e6:	e047      	b.n	98478 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID5:
		SENSOR_VAL = DD_Sensor_status.Temp1status;
   983e8:	4b27      	ldr	r3, [pc, #156]	; (98488 <DD_CAN_READ_SENSORS+0x138>)
   983ea:	895b      	ldrh	r3, [r3, #10]
   983ec:	81fb      	strh	r3, [r7, #14]
		
		break;
   983ee:	e043      	b.n	98478 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID6:
		SENSOR_VAL = DD_Sensor_status.Temp2status;
   983f0:	4b25      	ldr	r3, [pc, #148]	; (98488 <DD_CAN_READ_SENSORS+0x138>)
   983f2:	899b      	ldrh	r3, [r3, #12]
   983f4:	81fb      	strh	r3, [r7, #14]
		break;
   983f6:	e03f      	b.n	98478 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID7:
		SENSOR_VAL = DD_Sensor_status.Temp3status;
   983f8:	4b23      	ldr	r3, [pc, #140]	; (98488 <DD_CAN_READ_SENSORS+0x138>)
   983fa:	89db      	ldrh	r3, [r3, #14]
   983fc:	81fb      	strh	r3, [r7, #14]
		break;
   983fe:	e03b      	b.n	98478 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID8:
		SENSOR_VAL = DD_Sensor_status.CS1_Tempstatus;
   98400:	4b21      	ldr	r3, [pc, #132]	; (98488 <DD_CAN_READ_SENSORS+0x138>)
   98402:	8a1b      	ldrh	r3, [r3, #16]
   98404:	81fb      	strh	r3, [r7, #14]
		break;
   98406:	e037      	b.n	98478 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID9:
		SENSOR_VAL = DD_Sensor_status.CS2_Tempstatus;
   98408:	4b1f      	ldr	r3, [pc, #124]	; (98488 <DD_CAN_READ_SENSORS+0x138>)
   9840a:	8a5b      	ldrh	r3, [r3, #18]
   9840c:	81fb      	strh	r3, [r7, #14]
		break;
   9840e:	e033      	b.n	98478 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID10:
		SENSOR_VAL = DD_Sensor_status.CS3_Tempstatus;
   98410:	4b1d      	ldr	r3, [pc, #116]	; (98488 <DD_CAN_READ_SENSORS+0x138>)
   98412:	8a9b      	ldrh	r3, [r3, #20]
   98414:	81fb      	strh	r3, [r7, #14]
		break;
   98416:	e02f      	b.n	98478 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID11:
		SENSOR_VAL = DD_Sensor_status.CS1status;
   98418:	4b1b      	ldr	r3, [pc, #108]	; (98488 <DD_CAN_READ_SENSORS+0x138>)
   9841a:	8adb      	ldrh	r3, [r3, #22]
   9841c:	81fb      	strh	r3, [r7, #14]
		break;
   9841e:	e02b      	b.n	98478 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID12:
		SENSOR_VAL = DD_Sensor_status.CS2status;
   98420:	4b19      	ldr	r3, [pc, #100]	; (98488 <DD_CAN_READ_SENSORS+0x138>)
   98422:	8b1b      	ldrh	r3, [r3, #24]
   98424:	81fb      	strh	r3, [r7, #14]
		break;
   98426:	e027      	b.n	98478 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID13:
		SENSOR_VAL = DD_Sensor_status.CS3status;
   98428:	4b17      	ldr	r3, [pc, #92]	; (98488 <DD_CAN_READ_SENSORS+0x138>)
   9842a:	8b5b      	ldrh	r3, [r3, #26]
   9842c:	81fb      	strh	r3, [r7, #14]
		break;
   9842e:	e023      	b.n	98478 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID14:
		SENSOR_VAL = DD_Sensor_status.DAC1status;
   98430:	4b15      	ldr	r3, [pc, #84]	; (98488 <DD_CAN_READ_SENSORS+0x138>)
   98432:	8b9b      	ldrh	r3, [r3, #28]
   98434:	81fb      	strh	r3, [r7, #14]
		break;
   98436:	e01f      	b.n	98478 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID15:
		SENSOR_VAL = DD_Sensor_status.DAAstatus;
   98438:	4b13      	ldr	r3, [pc, #76]	; (98488 <DD_CAN_READ_SENSORS+0x138>)
   9843a:	8bdb      	ldrh	r3, [r3, #30]
   9843c:	81fb      	strh	r3, [r7, #14]
		break;
   9843e:	e01b      	b.n	98478 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID16:
		SENSOR_VAL = DD_Sensor_status.DABstatus;
   98440:	4b11      	ldr	r3, [pc, #68]	; (98488 <DD_CAN_READ_SENSORS+0x138>)
   98442:	8c1b      	ldrh	r3, [r3, #32]
   98444:	81fb      	strh	r3, [r7, #14]
		break;
   98446:	e017      	b.n	98478 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID17:
		SENSOR_VAL = DD_Sensor_status.DAC2status;
   98448:	4b0f      	ldr	r3, [pc, #60]	; (98488 <DD_CAN_READ_SENSORS+0x138>)
   9844a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   9844c:	81fb      	strh	r3, [r7, #14]
		break;
   9844e:	e013      	b.n	98478 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID18:
		SENSOR_VAL = DD_Sensor_status.flow_sensor_status;
   98450:	4b0d      	ldr	r3, [pc, #52]	; (98488 <DD_CAN_READ_SENSORS+0x138>)
   98452:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   98454:	81fb      	strh	r3, [r7, #14]
		break;
   98456:	e00f      	b.n	98478 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID19:
		SENSOR_VAL = DD_Sensor_status.aptstatus;
   98458:	4b0b      	ldr	r3, [pc, #44]	; (98488 <DD_CAN_READ_SENSORS+0x138>)
   9845a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   9845c:	81fb      	strh	r3, [r7, #14]
		break;
   9845e:	e00b      	b.n	98478 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID20:
		SENSOR_VAL = DD_Sensor_status.vptstatus;
   98460:	4b09      	ldr	r3, [pc, #36]	; (98488 <DD_CAN_READ_SENSORS+0x138>)
   98462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   98464:	81fb      	strh	r3, [r7, #14]
		break;
   98466:	e007      	b.n	98478 <DD_CAN_READ_SENSORS+0x128>
		case DD_CAN_SENSOR_ID21:
		 SENSOR_VAL=DD_Sensor_status.acid_feed_back;
   98468:	4b07      	ldr	r3, [pc, #28]	; (98488 <DD_CAN_READ_SENSORS+0x138>)
   9846a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   9846c:	81fb      	strh	r3, [r7, #14]
		 break;
   9846e:	e003      	b.n	98478 <DD_CAN_READ_SENSORS+0x128>
		 case DD_CAN_SENSOR_ID22:
		 SENSOR_VAL=DD_Sensor_status.bicar_feed_back;
   98470:	4b05      	ldr	r3, [pc, #20]	; (98488 <DD_CAN_READ_SENSORS+0x138>)
   98472:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   98474:	81fb      	strh	r3, [r7, #14]
		 break;
   98476:	bf00      	nop
 	}
	
		
	return SENSOR_VAL;
   98478:	89fb      	ldrh	r3, [r7, #14]
	
}
   9847a:	4618      	mov	r0, r3
   9847c:	3714      	adds	r7, #20
   9847e:	46bd      	mov	sp, r7
   98480:	f85d 7b04 	ldr.w	r7, [sp], #4
   98484:	4770      	bx	lr
   98486:	bf00      	nop
   98488:	200729d0 	.word	0x200729d0

0009848c <DD_INIT_CLOCK>:
// void check_interrupt(void);
// extern uint8_t sv_cntrl_activate_valve(sv_valvetype sv_valve_id);
// extern uint8_t sv_cntrl_deactivate_valve(sv_valvetype sv_valve_id);
// static chk_flag_toggle =0;
void DD_INIT_CLOCK()
{
   9848c:	b580      	push	{r7, lr}
   9848e:	af00      	add	r7, sp, #0
	
	sysclk_init();
   98490:	4b07      	ldr	r3, [pc, #28]	; (984b0 <DD_INIT_CLOCK+0x24>)
   98492:	4798      	blx	r3
	PMC->PMC_WPMR  = 0x504D4300;
   98494:	4b07      	ldr	r3, [pc, #28]	; (984b4 <DD_INIT_CLOCK+0x28>)
   98496:	4a08      	ldr	r2, [pc, #32]	; (984b8 <DD_INIT_CLOCK+0x2c>)
   98498:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PMC->PMC_PCER0 = 0xF8007900;
   9849c:	4b05      	ldr	r3, [pc, #20]	; (984b4 <DD_INIT_CLOCK+0x28>)
   9849e:	4a07      	ldr	r2, [pc, #28]	; (984bc <DD_INIT_CLOCK+0x30>)
   984a0:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER1 = 0x0000083F;
   984a2:	4b04      	ldr	r3, [pc, #16]	; (984b4 <DD_INIT_CLOCK+0x28>)
   984a4:	f640 023f 	movw	r2, #2111	; 0x83f
   984a8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	
}
   984ac:	bd80      	pop	{r7, pc}
   984ae:	bf00      	nop
   984b0:	0008043d 	.word	0x0008043d
   984b4:	400e0600 	.word	0x400e0600
   984b8:	504d4300 	.word	0x504d4300
   984bc:	f8007900 	.word	0xf8007900

000984c0 <DD_INIT_PIO>:
#include "cl_consolecontroller.h"
extern Cl_ReturnCodeType  Cl_SendDatatoconsole(Cl_ConsoleTxCommandtype , uint8_t* ,uint8_t );


void DD_INIT_PIO()
{
   984c0:	b580      	push	{r7, lr}
   984c2:	af00      	add	r7, sp, #0
	
	
PIOA->PIO_WPMR = 0x50494F00;			//PIOA->PIO_WPMR = 0x50494F00;
   984c4:	4b3e      	ldr	r3, [pc, #248]	; (985c0 <DD_INIT_PIO+0x100>)
   984c6:	4a3f      	ldr	r2, [pc, #252]	; (985c4 <DD_INIT_PIO+0x104>)
   984c8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
//PIOA->PIO_PER =  0x21C9ECFC;			//PIOA->PIO_PER  = 0x01C9ECF0;
PIOA->PIO_PER =  0x21C9ECFC;
   984cc:	4b3c      	ldr	r3, [pc, #240]	; (985c0 <DD_INIT_PIO+0x100>)
   984ce:	4a3e      	ldr	r2, [pc, #248]	; (985c8 <DD_INIT_PIO+0x108>)
   984d0:	601a      	str	r2, [r3, #0]
PIOA->PIO_OER =  0x20F0B86C;			//PIOA->PIO_OER  = 0x00C0AC70;
   984d2:	4b3b      	ldr	r3, [pc, #236]	; (985c0 <DD_INIT_PIO+0x100>)
   984d4:	4a3d      	ldr	r2, [pc, #244]	; (985cc <DD_INIT_PIO+0x10c>)
   984d6:	611a      	str	r2, [r3, #16]
PIOA->PIO_ODR =  0x01094494;			//PIOA->PIO_ODR  = 0x01094080;
   984d8:	4b39      	ldr	r3, [pc, #228]	; (985c0 <DD_INIT_PIO+0x100>)
   984da:	4a3d      	ldr	r2, [pc, #244]	; (985d0 <DD_INIT_PIO+0x110>)
   984dc:	615a      	str	r2, [r3, #20]
PIOA->PIO_PDR =  0x1E361303;			//PIOA->PIO_PDR =  0x00060000;
   984de:	4b38      	ldr	r3, [pc, #224]	; (985c0 <DD_INIT_PIO+0x100>)
   984e0:	4a3c      	ldr	r2, [pc, #240]	; (985d4 <DD_INIT_PIO+0x114>)
   984e2:	605a      	str	r2, [r3, #4]
PIOA->PIO_PUER = 0x00060000;
   984e4:	4b36      	ldr	r3, [pc, #216]	; (985c0 <DD_INIT_PIO+0x100>)
   984e6:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   984ea:	665a      	str	r2, [r3, #100]	; 0x64
PIOA->PIO_ABSR = 0x00391000;
   984ec:	4b34      	ldr	r3, [pc, #208]	; (985c0 <DD_INIT_PIO+0x100>)
   984ee:	4a3a      	ldr	r2, [pc, #232]	; (985d8 <DD_INIT_PIO+0x118>)
   984f0:	671a      	str	r2, [r3, #112]	; 0x70
PIOA->PIO_DIFSR =0x00004000;			 //Blood pump on off debouncing PA14 //PIOA->PIO_DIFSR = 0x08000001;
   984f2:	4b33      	ldr	r3, [pc, #204]	; (985c0 <DD_INIT_PIO+0x100>)
   984f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   984f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 PIOA->PIO_SODR = 1<<2;
   984fc:	4b30      	ldr	r3, [pc, #192]	; (985c0 <DD_INIT_PIO+0x100>)
   984fe:	2204      	movs	r2, #4
   98500:	631a      	str	r2, [r3, #48]	; 0x30
 PIOA->PIO_PER = 1<<2;
   98502:	4b2f      	ldr	r3, [pc, #188]	; (985c0 <DD_INIT_PIO+0x100>)
   98504:	2204      	movs	r2, #4
   98506:	601a      	str	r2, [r3, #0]
 PIOA->PIO_OER = 1<<2;
   98508:	4b2d      	ldr	r3, [pc, #180]	; (985c0 <DD_INIT_PIO+0x100>)
   9850a:	2204      	movs	r2, #4
   9850c:	611a      	str	r2, [r3, #16]

//PIOA->PIO_CODR = 0x0600A800;
//PIOA->PIO_SODR = 0x00004000;

PIOB->PIO_WPMR = 0x50494F00;			//PIOB->PIO_WPMR = 0x50494F00;
   9850e:	4b33      	ldr	r3, [pc, #204]	; (985dc <DD_INIT_PIO+0x11c>)
   98510:	4a2c      	ldr	r2, [pc, #176]	; (985c4 <DD_INIT_PIO+0x104>)
   98512:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
PIOB->PIO_PER  = 0x0FE7F700;			//PIOB->PIO_PER  = 0x0B45D300;     PIO enable Register
   98516:	4b31      	ldr	r3, [pc, #196]	; (985dc <DD_INIT_PIO+0x11c>)
   98518:	4a31      	ldr	r2, [pc, #196]	; (985e0 <DD_INIT_PIO+0x120>)
   9851a:	601a      	str	r2, [r3, #0]
PIOB->PIO_OER  = 0x00026400;			//PIOB->PIO_OER  = 0x00004000;     Output Enable Register
   9851c:	4b2f      	ldr	r3, [pc, #188]	; (985dc <DD_INIT_PIO+0x11c>)
   9851e:	f44f 3219 	mov.w	r2, #156672	; 0x26400
   98522:	611a      	str	r2, [r3, #16]
PIOB->PIO_ODR  = 0x0FE59300; // 0x0FE59300			//PIOB->PIO_ODR  = 0x0B459300;     Output Disable Register
   98524:	4b2d      	ldr	r3, [pc, #180]	; (985dc <DD_INIT_PIO+0x11c>)
   98526:	4a2f      	ldr	r2, [pc, #188]	; (985e4 <DD_INIT_PIO+0x124>)
   98528:	615a      	str	r2, [r3, #20]
PIOB->PIO_PDR  = 0xF01800FF;			// Pio Disable Register
   9852a:	4b2c      	ldr	r3, [pc, #176]	; (985dc <DD_INIT_PIO+0x11c>)
   9852c:	4a2e      	ldr	r2, [pc, #184]	; (985e8 <DD_INIT_PIO+0x128>)
   9852e:	605a      	str	r2, [r3, #4]
//PIOB->PIO_SODR = 0x04004000;
//PIOB->PIO_CODR = 0x02000000;

PIOC->PIO_WPMR = 0x50494F00;			//PIOC->PIO_WPMR = 0x50494F00;
   98530:	4b2e      	ldr	r3, [pc, #184]	; (985ec <DD_INIT_PIO+0x12c>)
   98532:	4a24      	ldr	r2, [pc, #144]	; (985c4 <DD_INIT_PIO+0x104>)
   98534:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
PIOC->PIO_PER  = 0x7F9FFFFE;			//PIOC->PIO_PER  = 0x7F9FFFFE;
   98538:	4b2c      	ldr	r3, [pc, #176]	; (985ec <DD_INIT_PIO+0x12c>)
   9853a:	4a2d      	ldr	r2, [pc, #180]	; (985f0 <DD_INIT_PIO+0x130>)
   9853c:	601a      	str	r2, [r3, #0]
PIOC->PIO_OER  = 0x18E1FFFE;			//PIOC->PIO_OER  = 0x1881FFFE;
   9853e:	4b2b      	ldr	r3, [pc, #172]	; (985ec <DD_INIT_PIO+0x12c>)
   98540:	4a2c      	ldr	r2, [pc, #176]	; (985f4 <DD_INIT_PIO+0x134>)
   98542:	611a      	str	r2, [r3, #16]
PIOC->PIO_ODR  = 0x671E0000;			//PIOC->PIO_ODR  = 0x671E0000;
   98544:	4b29      	ldr	r3, [pc, #164]	; (985ec <DD_INIT_PIO+0x12c>)
   98546:	4a2c      	ldr	r2, [pc, #176]	; (985f8 <DD_INIT_PIO+0x138>)
   98548:	615a      	str	r2, [r3, #20]
PIOC->PIO_PDR  = 0x80600001;			//
   9854a:	4b28      	ldr	r3, [pc, #160]	; (985ec <DD_INIT_PIO+0x12c>)
   9854c:	4a2b      	ldr	r2, [pc, #172]	; (985fc <DD_INIT_PIO+0x13c>)
   9854e:	605a      	str	r2, [r3, #4]
PIOC->PIO_ABSR = 0x00600000;
   98550:	4b26      	ldr	r3, [pc, #152]	; (985ec <DD_INIT_PIO+0x12c>)
   98552:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
   98556:	671a      	str	r2, [r3, #112]	; 0x70
//PIOC->PIO_CODR = 0x360830C4;
//PIOC->PIO_SODR = 0x00000002;

PIOD->PIO_WPMR = 0x50494F00;			//PIOD->PIO_WPMR = 0x50494F00;
   98558:	4b29      	ldr	r3, [pc, #164]	; (98600 <DD_INIT_PIO+0x140>)
   9855a:	4a1a      	ldr	r2, [pc, #104]	; (985c4 <DD_INIT_PIO+0x104>)
   9855c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
PIOD->PIO_PER  = 0x000007FF;			//PIOD->PIO_PER  = 0x000007FF;
   98560:	4b27      	ldr	r3, [pc, #156]	; (98600 <DD_INIT_PIO+0x140>)
   98562:	f240 72ff 	movw	r2, #2047	; 0x7ff
   98566:	601a      	str	r2, [r3, #0]
PIOD->PIO_OER  = 0x00000186;			//PIOD->PIO_OER  = 0x00000106;
   98568:	4b25      	ldr	r3, [pc, #148]	; (98600 <DD_INIT_PIO+0x140>)
   9856a:	f44f 72c3 	mov.w	r2, #390	; 0x186
   9856e:	611a      	str	r2, [r3, #16]
PIOD->PIO_ODR  = 0X00000679;			//PIOD->PIO_ODR  = 0x000006F9;
   98570:	4b23      	ldr	r3, [pc, #140]	; (98600 <DD_INIT_PIO+0x140>)
   98572:	f240 6279 	movw	r2, #1657	; 0x679
   98576:	615a      	str	r2, [r3, #20]

//p_io = 21;
//peri = PC;
//DD_RESET_PIO(PC,21);
//PIOA->PIO_WPMR = 0<2;
 PIOC->PIO_CODR = 1<<21;               
   98578:	4b1c      	ldr	r3, [pc, #112]	; (985ec <DD_INIT_PIO+0x12c>)
   9857a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   9857e:	635a      	str	r2, [r3, #52]	; 0x34
 PIOB->PIO_SODR = 1<<17;
   98580:	4b16      	ldr	r3, [pc, #88]	; (985dc <DD_INIT_PIO+0x11c>)
   98582:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   98586:	631a      	str	r2, [r3, #48]	; 0x30
 PIOD->PIO_SODR = 1<<2;
   98588:	4b1d      	ldr	r3, [pc, #116]	; (98600 <DD_INIT_PIO+0x140>)
   9858a:	2204      	movs	r2, #4
   9858c:	631a      	str	r2, [r3, #48]	; 0x30
gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
   9858e:	2055      	movs	r0, #85	; 0x55
   98590:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   98594:	4b1b      	ldr	r3, [pc, #108]	; (98604 <DD_INIT_PIO+0x144>)
   98596:	4798      	blx	r3
gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
   98598:	2055      	movs	r0, #85	; 0x55
   9859a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   9859e:	4b19      	ldr	r3, [pc, #100]	; (98604 <DD_INIT_PIO+0x144>)
   985a0:	4798      	blx	r3


gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   985a2:	2001      	movs	r0, #1
   985a4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   985a8:	4b16      	ldr	r3, [pc, #88]	; (98604 <DD_INIT_PIO+0x144>)
   985aa:	4798      	blx	r3
gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   985ac:	2000      	movs	r0, #0
   985ae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   985b2:	4b14      	ldr	r3, [pc, #80]	; (98604 <DD_INIT_PIO+0x144>)
   985b4:	4798      	blx	r3
gpio_configure_pin(PIN_CAN0_STANDBY_IDX, PIN_CAN0_STANDBY_FLAGS);
   985b6:	2003      	movs	r0, #3
   985b8:	4913      	ldr	r1, [pc, #76]	; (98608 <DD_INIT_PIO+0x148>)
   985ba:	4b12      	ldr	r3, [pc, #72]	; (98604 <DD_INIT_PIO+0x144>)
   985bc:	4798      	blx	r3


}
   985be:	bd80      	pop	{r7, pc}
   985c0:	400e0e00 	.word	0x400e0e00
   985c4:	50494f00 	.word	0x50494f00
   985c8:	21c9ecfc 	.word	0x21c9ecfc
   985cc:	20f0b86c 	.word	0x20f0b86c
   985d0:	01094494 	.word	0x01094494
   985d4:	1e361303 	.word	0x1e361303
   985d8:	00391000 	.word	0x00391000
   985dc:	400e1000 	.word	0x400e1000
   985e0:	0fe7f700 	.word	0x0fe7f700
   985e4:	0fe59300 	.word	0x0fe59300
   985e8:	f01800ff 	.word	0xf01800ff
   985ec:	400e1200 	.word	0x400e1200
   985f0:	7f9ffffe 	.word	0x7f9ffffe
   985f4:	18e1fffe 	.word	0x18e1fffe
   985f8:	671e0000 	.word	0x671e0000
   985fc:	80600001 	.word	0x80600001
   98600:	400e1400 	.word	0x400e1400
   98604:	0009c001 	.word	0x0009c001
   98608:	30000001 	.word	0x30000001

0009860c <DD_DIS_PERI_AND_RESET_PIO>:

uint8_t DD_DIS_PERI_AND_RESET_PIO(pio_type peripheral,uint32_t pio)
{
   9860c:	b480      	push	{r7}
   9860e:	b083      	sub	sp, #12
   98610:	af00      	add	r7, sp, #0
   98612:	6078      	str	r0, [r7, #4]
   98614:	6039      	str	r1, [r7, #0]
				if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
				{
				//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
				}
	switch (peripheral)
   98616:	687b      	ldr	r3, [r7, #4]
   98618:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   9861c:	d01a      	beq.n	98654 <DD_DIS_PERI_AND_RESET_PIO+0x48>
   9861e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   98622:	d803      	bhi.n	9862c <DD_DIS_PERI_AND_RESET_PIO+0x20>
   98624:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   98628:	d007      	beq.n	9863a <DD_DIS_PERI_AND_RESET_PIO+0x2e>
   9862a:	e03a      	b.n	986a2 <DD_DIS_PERI_AND_RESET_PIO+0x96>
   9862c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   98630:	d01d      	beq.n	9866e <DD_DIS_PERI_AND_RESET_PIO+0x62>
   98632:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   98636:	d027      	beq.n	98688 <DD_DIS_PERI_AND_RESET_PIO+0x7c>
   98638:	e033      	b.n	986a2 <DD_DIS_PERI_AND_RESET_PIO+0x96>
	{
		case PA:
		PIOA->PIO_PER = 1<<pio;
   9863a:	4a1d      	ldr	r2, [pc, #116]	; (986b0 <DD_DIS_PERI_AND_RESET_PIO+0xa4>)
   9863c:	683b      	ldr	r3, [r7, #0]
   9863e:	2101      	movs	r1, #1
   98640:	fa01 f303 	lsl.w	r3, r1, r3
   98644:	6013      	str	r3, [r2, #0]
		PIOA->PIO_CODR = 1<<pio;
   98646:	4a1a      	ldr	r2, [pc, #104]	; (986b0 <DD_DIS_PERI_AND_RESET_PIO+0xa4>)
   98648:	683b      	ldr	r3, [r7, #0]
   9864a:	2101      	movs	r1, #1
   9864c:	fa01 f303 	lsl.w	r3, r1, r3
   98650:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   98652:	e026      	b.n	986a2 <DD_DIS_PERI_AND_RESET_PIO+0x96>
		case PB:
		PIOB->PIO_PER = 1<<pio;
   98654:	4a17      	ldr	r2, [pc, #92]	; (986b4 <DD_DIS_PERI_AND_RESET_PIO+0xa8>)
   98656:	683b      	ldr	r3, [r7, #0]
   98658:	2101      	movs	r1, #1
   9865a:	fa01 f303 	lsl.w	r3, r1, r3
   9865e:	6013      	str	r3, [r2, #0]
		PIOB->PIO_CODR = 1<<pio;
   98660:	4a14      	ldr	r2, [pc, #80]	; (986b4 <DD_DIS_PERI_AND_RESET_PIO+0xa8>)
   98662:	683b      	ldr	r3, [r7, #0]
   98664:	2101      	movs	r1, #1
   98666:	fa01 f303 	lsl.w	r3, r1, r3
   9866a:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   9866c:	e019      	b.n	986a2 <DD_DIS_PERI_AND_RESET_PIO+0x96>
		case PC:
		PIOC->PIO_PER = 1<<pio;
   9866e:	4a12      	ldr	r2, [pc, #72]	; (986b8 <DD_DIS_PERI_AND_RESET_PIO+0xac>)
   98670:	683b      	ldr	r3, [r7, #0]
   98672:	2101      	movs	r1, #1
   98674:	fa01 f303 	lsl.w	r3, r1, r3
   98678:	6013      	str	r3, [r2, #0]
		PIOC->PIO_CODR = 1<<pio;
   9867a:	4a0f      	ldr	r2, [pc, #60]	; (986b8 <DD_DIS_PERI_AND_RESET_PIO+0xac>)
   9867c:	683b      	ldr	r3, [r7, #0]
   9867e:	2101      	movs	r1, #1
   98680:	fa01 f303 	lsl.w	r3, r1, r3
   98684:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   98686:	e00c      	b.n	986a2 <DD_DIS_PERI_AND_RESET_PIO+0x96>
		case PD:
		PIOD->PIO_PER = 1<<pio;
   98688:	4a0c      	ldr	r2, [pc, #48]	; (986bc <DD_DIS_PERI_AND_RESET_PIO+0xb0>)
   9868a:	683b      	ldr	r3, [r7, #0]
   9868c:	2101      	movs	r1, #1
   9868e:	fa01 f303 	lsl.w	r3, r1, r3
   98692:	6013      	str	r3, [r2, #0]
		PIOD->PIO_CODR = 1<<pio;
   98694:	4a09      	ldr	r2, [pc, #36]	; (986bc <DD_DIS_PERI_AND_RESET_PIO+0xb0>)
   98696:	683b      	ldr	r3, [r7, #0]
   98698:	2101      	movs	r1, #1
   9869a:	fa01 f303 	lsl.w	r3, r1, r3
   9869e:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   986a0:	bf00      	nop
			
	}
}
   986a2:	4618      	mov	r0, r3
   986a4:	370c      	adds	r7, #12
   986a6:	46bd      	mov	sp, r7
   986a8:	f85d 7b04 	ldr.w	r7, [sp], #4
   986ac:	4770      	bx	lr
   986ae:	bf00      	nop
   986b0:	400e0e00 	.word	0x400e0e00
   986b4:	400e1000 	.word	0x400e1000
   986b8:	400e1200 	.word	0x400e1200
   986bc:	400e1400 	.word	0x400e1400

000986c0 <DD_EN_PERI_AND_SET_PIO>:

uint8_t DD_EN_PERI_AND_SET_PIO(pio_type peripheral,uint32_t pio)
{
   986c0:	b480      	push	{r7}
   986c2:	b083      	sub	sp, #12
   986c4:	af00      	add	r7, sp, #0
   986c6:	6078      	str	r0, [r7, #4]
   986c8:	6039      	str	r1, [r7, #0]
			if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
		{
		//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
		}
	switch (peripheral)
   986ca:	687b      	ldr	r3, [r7, #4]
   986cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   986d0:	d014      	beq.n	986fc <DD_EN_PERI_AND_SET_PIO+0x3c>
   986d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   986d6:	d803      	bhi.n	986e0 <DD_EN_PERI_AND_SET_PIO+0x20>
   986d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   986dc:	d007      	beq.n	986ee <DD_EN_PERI_AND_SET_PIO+0x2e>
   986de:	e022      	b.n	98726 <DD_EN_PERI_AND_SET_PIO+0x66>
   986e0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   986e4:	d011      	beq.n	9870a <DD_EN_PERI_AND_SET_PIO+0x4a>
   986e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   986ea:	d015      	beq.n	98718 <DD_EN_PERI_AND_SET_PIO+0x58>
   986ec:	e01b      	b.n	98726 <DD_EN_PERI_AND_SET_PIO+0x66>
	{
		case PA:
		PIOA->PIO_PDR = 1<<pio;
   986ee:	4a11      	ldr	r2, [pc, #68]	; (98734 <DD_EN_PERI_AND_SET_PIO+0x74>)
   986f0:	683b      	ldr	r3, [r7, #0]
   986f2:	2101      	movs	r1, #1
   986f4:	fa01 f303 	lsl.w	r3, r1, r3
   986f8:	6053      	str	r3, [r2, #4]
	//	PIOA->PIO_SCDR = 1<<pio;
		break;
   986fa:	e014      	b.n	98726 <DD_EN_PERI_AND_SET_PIO+0x66>
		case PB:
		PIOB->PIO_PDR = 1<<pio;
   986fc:	4a0e      	ldr	r2, [pc, #56]	; (98738 <DD_EN_PERI_AND_SET_PIO+0x78>)
   986fe:	683b      	ldr	r3, [r7, #0]
   98700:	2101      	movs	r1, #1
   98702:	fa01 f303 	lsl.w	r3, r1, r3
   98706:	6053      	str	r3, [r2, #4]
	//	PIOB->PIO_SODR = 1<<pio;
		break;
   98708:	e00d      	b.n	98726 <DD_EN_PERI_AND_SET_PIO+0x66>
		case PC:
		PIOC->PIO_PDR = 1<<pio;
   9870a:	4a0c      	ldr	r2, [pc, #48]	; (9873c <DD_EN_PERI_AND_SET_PIO+0x7c>)
   9870c:	683b      	ldr	r3, [r7, #0]
   9870e:	2101      	movs	r1, #1
   98710:	fa01 f303 	lsl.w	r3, r1, r3
   98714:	6053      	str	r3, [r2, #4]
	//	PIOC->PIO_CODR = 1<<pio;
		break;
   98716:	e006      	b.n	98726 <DD_EN_PERI_AND_SET_PIO+0x66>
		case PD:
		PIOD->PIO_PDR = 1<<pio;
   98718:	4a09      	ldr	r2, [pc, #36]	; (98740 <DD_EN_PERI_AND_SET_PIO+0x80>)
   9871a:	683b      	ldr	r3, [r7, #0]
   9871c:	2101      	movs	r1, #1
   9871e:	fa01 f303 	lsl.w	r3, r1, r3
   98722:	6053      	str	r3, [r2, #4]
	//	PIOD->PIO_CODR = 1<<pio;
		break;
   98724:	bf00      	nop
		

		
	}
}
   98726:	4618      	mov	r0, r3
   98728:	370c      	adds	r7, #12
   9872a:	46bd      	mov	sp, r7
   9872c:	f85d 7b04 	ldr.w	r7, [sp], #4
   98730:	4770      	bx	lr
   98732:	bf00      	nop
   98734:	400e0e00 	.word	0x400e0e00
   98738:	400e1000 	.word	0x400e1000
   9873c:	400e1200 	.word	0x400e1200
   98740:	400e1400 	.word	0x400e1400

00098744 <DD_SET_PIO>:

uint8_t DD_SET_PIO(pio_type peripheral,uint32_t pio)
{
   98744:	b480      	push	{r7}
   98746:	b083      	sub	sp, #12
   98748:	af00      	add	r7, sp, #0
   9874a:	6078      	str	r0, [r7, #4]
   9874c:	6039      	str	r1, [r7, #0]
					if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
				{
				//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
				}
	switch (peripheral)
   9874e:	687b      	ldr	r3, [r7, #4]
   98750:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   98754:	d014      	beq.n	98780 <DD_SET_PIO+0x3c>
   98756:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   9875a:	d803      	bhi.n	98764 <DD_SET_PIO+0x20>
   9875c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   98760:	d007      	beq.n	98772 <DD_SET_PIO+0x2e>
   98762:	e022      	b.n	987aa <DD_SET_PIO+0x66>
   98764:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   98768:	d011      	beq.n	9878e <DD_SET_PIO+0x4a>
   9876a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   9876e:	d015      	beq.n	9879c <DD_SET_PIO+0x58>
   98770:	e01b      	b.n	987aa <DD_SET_PIO+0x66>
	{
		case PA:
		PIOA->PIO_SODR = 1<<pio;
   98772:	4a11      	ldr	r2, [pc, #68]	; (987b8 <DD_SET_PIO+0x74>)
   98774:	683b      	ldr	r3, [r7, #0]
   98776:	2101      	movs	r1, #1
   98778:	fa01 f303 	lsl.w	r3, r1, r3
   9877c:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   9877e:	e014      	b.n	987aa <DD_SET_PIO+0x66>
		case PB:
		PIOB->PIO_SODR = 1<<pio;
   98780:	4a0e      	ldr	r2, [pc, #56]	; (987bc <DD_SET_PIO+0x78>)
   98782:	683b      	ldr	r3, [r7, #0]
   98784:	2101      	movs	r1, #1
   98786:	fa01 f303 	lsl.w	r3, r1, r3
   9878a:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   9878c:	e00d      	b.n	987aa <DD_SET_PIO+0x66>
		case PC:
		PIOC->PIO_SODR = 1<<pio;
   9878e:	4a0c      	ldr	r2, [pc, #48]	; (987c0 <DD_SET_PIO+0x7c>)
   98790:	683b      	ldr	r3, [r7, #0]
   98792:	2101      	movs	r1, #1
   98794:	fa01 f303 	lsl.w	r3, r1, r3
   98798:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   9879a:	e006      	b.n	987aa <DD_SET_PIO+0x66>
		case PD:
		PIOD->PIO_SODR = 1<<pio;
   9879c:	4a09      	ldr	r2, [pc, #36]	; (987c4 <DD_SET_PIO+0x80>)
   9879e:	683b      	ldr	r3, [r7, #0]
   987a0:	2101      	movs	r1, #1
   987a2:	fa01 f303 	lsl.w	r3, r1, r3
   987a6:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   987a8:	bf00      	nop
				

	}
	
	return 0;
   987aa:	2300      	movs	r3, #0
}
   987ac:	4618      	mov	r0, r3
   987ae:	370c      	adds	r7, #12
   987b0:	46bd      	mov	sp, r7
   987b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   987b6:	4770      	bx	lr
   987b8:	400e0e00 	.word	0x400e0e00
   987bc:	400e1000 	.word	0x400e1000
   987c0:	400e1200 	.word	0x400e1200
   987c4:	400e1400 	.word	0x400e1400

000987c8 <DD_RESET_PIO>:

uint8_t DD_RESET_PIO(const pio_type peripheral,uint32_t pio)
  {
   987c8:	b480      	push	{r7}
   987ca:	b083      	sub	sp, #12
   987cc:	af00      	add	r7, sp, #0
   987ce:	6078      	str	r0, [r7, #4]
   987d0:	6039      	str	r1, [r7, #0]
	  		  		if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
		  		{
			//  		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
		  		}
	  switch (peripheral)
   987d2:	687b      	ldr	r3, [r7, #4]
   987d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   987d8:	d014      	beq.n	98804 <DD_RESET_PIO+0x3c>
   987da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   987de:	d803      	bhi.n	987e8 <DD_RESET_PIO+0x20>
   987e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   987e4:	d007      	beq.n	987f6 <DD_RESET_PIO+0x2e>
   987e6:	e022      	b.n	9882e <DD_RESET_PIO+0x66>
   987e8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   987ec:	d011      	beq.n	98812 <DD_RESET_PIO+0x4a>
   987ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   987f2:	d015      	beq.n	98820 <DD_RESET_PIO+0x58>
   987f4:	e01b      	b.n	9882e <DD_RESET_PIO+0x66>
	  {
		  case PA:
		  PIOA->PIO_CODR = 1<<pio;
   987f6:	4a11      	ldr	r2, [pc, #68]	; (9883c <DD_RESET_PIO+0x74>)
   987f8:	683b      	ldr	r3, [r7, #0]
   987fa:	2101      	movs	r1, #1
   987fc:	fa01 f303 	lsl.w	r3, r1, r3
   98800:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   98802:	e014      	b.n	9882e <DD_RESET_PIO+0x66>
		  case PB:
		  PIOB->PIO_CODR = 1<<pio;
   98804:	4a0e      	ldr	r2, [pc, #56]	; (98840 <DD_RESET_PIO+0x78>)
   98806:	683b      	ldr	r3, [r7, #0]
   98808:	2101      	movs	r1, #1
   9880a:	fa01 f303 	lsl.w	r3, r1, r3
   9880e:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   98810:	e00d      	b.n	9882e <DD_RESET_PIO+0x66>
		  case PC:
		  PIOC->PIO_CODR = 1<<pio;
   98812:	4a0c      	ldr	r2, [pc, #48]	; (98844 <DD_RESET_PIO+0x7c>)
   98814:	683b      	ldr	r3, [r7, #0]
   98816:	2101      	movs	r1, #1
   98818:	fa01 f303 	lsl.w	r3, r1, r3
   9881c:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   9881e:	e006      	b.n	9882e <DD_RESET_PIO+0x66>
		  case PD:
		  PIOD->PIO_CODR = 1<<pio;
   98820:	4a09      	ldr	r2, [pc, #36]	; (98848 <DD_RESET_PIO+0x80>)
   98822:	683b      	ldr	r3, [r7, #0]
   98824:	2101      	movs	r1, #1
   98826:	fa01 f303 	lsl.w	r3, r1, r3
   9882a:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   9882c:	bf00      	nop
		  		

	  }
	  
	  return 0;
   9882e:	2300      	movs	r3, #0
  }
   98830:	4618      	mov	r0, r3
   98832:	370c      	adds	r7, #12
   98834:	46bd      	mov	sp, r7
   98836:	f85d 7b04 	ldr.w	r7, [sp], #4
   9883a:	4770      	bx	lr
   9883c:	400e0e00 	.word	0x400e0e00
   98840:	400e1000 	.word	0x400e1000
   98844:	400e1200 	.word	0x400e1200
   98848:	400e1400 	.word	0x400e1400

0009884c <DD_READ_PIO>:
  
  uint16_t DD_READ_PIO( pio_type peripheral,uint32_t pio)
  {
   9884c:	b480      	push	{r7}
   9884e:	b085      	sub	sp, #20
   98850:	af00      	add	r7, sp, #0
   98852:	6078      	str	r0, [r7, #4]
   98854:	6039      	str	r1, [r7, #0]
	  uint32_t read = 0;
   98856:	2300      	movs	r3, #0
   98858:	60fb      	str	r3, [r7, #12]
	  uint16_t ret_val=0;
   9885a:	2300      	movs	r3, #0
   9885c:	817b      	strh	r3, [r7, #10]
	  /*read= PIOC->PIO_ODSR;
	  printf("%d",pio);
	  printf("%d", read);*/
	  switch (peripheral)
   9885e:	687b      	ldr	r3, [r7, #4]
   98860:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   98864:	d01a      	beq.n	9889c <DD_READ_PIO+0x50>
   98866:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   9886a:	d803      	bhi.n	98874 <DD_READ_PIO+0x28>
   9886c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   98870:	d007      	beq.n	98882 <DD_READ_PIO+0x36>
   98872:	e03c      	b.n	988ee <DD_READ_PIO+0xa2>
   98874:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   98878:	d01d      	beq.n	988b6 <DD_READ_PIO+0x6a>
   9887a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   9887e:	d029      	beq.n	988d4 <DD_READ_PIO+0x88>
   98880:	e035      	b.n	988ee <DD_READ_PIO+0xa2>
	  {
		  case PA:
		  
		  if( (PIOA->PIO_PDSR & (1<<pio)) == 0)
   98882:	4b1e      	ldr	r3, [pc, #120]	; (988fc <DD_READ_PIO+0xb0>)
   98884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   98886:	683a      	ldr	r2, [r7, #0]
   98888:	2101      	movs	r1, #1
   9888a:	fa01 f202 	lsl.w	r2, r1, r2
   9888e:	4013      	ands	r3, r2
   98890:	2b00      	cmp	r3, #0
   98892:	d101      	bne.n	98898 <DD_READ_PIO+0x4c>
		  {
			//  printf("A0");
			  return 0;
   98894:	2300      	movs	r3, #0
   98896:	e02a      	b.n	988ee <DD_READ_PIO+0xa2>
		  }
		  else
		  {
		//	  printf("A1");
			  return 1;
   98898:	2301      	movs	r3, #1
   9889a:	e028      	b.n	988ee <DD_READ_PIO+0xa2>
		  } 
		  break;
		  case PB:
		  if( (PIOB->PIO_PDSR & (1<<pio)) == 0)
   9889c:	4b18      	ldr	r3, [pc, #96]	; (98900 <DD_READ_PIO+0xb4>)
   9889e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   988a0:	683a      	ldr	r2, [r7, #0]
   988a2:	2101      	movs	r1, #1
   988a4:	fa01 f202 	lsl.w	r2, r1, r2
   988a8:	4013      	ands	r3, r2
   988aa:	2b00      	cmp	r3, #0
   988ac:	d101      	bne.n	988b2 <DD_READ_PIO+0x66>
		  {
		//	  printf("B0");
			  return 0;
   988ae:	2300      	movs	r3, #0
   988b0:	e01d      	b.n	988ee <DD_READ_PIO+0xa2>
		  }
		  else
		  {
			//  printf("B1");
			  return 1;
   988b2:	2301      	movs	r3, #1
   988b4:	e01b      	b.n	988ee <DD_READ_PIO+0xa2>
		//		{
			//	printf("c");
			//	}
		//	}
			
		  if( (PIOC->PIO_PDSR & (1<<pio)) == 0)
   988b6:	4b13      	ldr	r3, [pc, #76]	; (98904 <DD_READ_PIO+0xb8>)
   988b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   988ba:	683a      	ldr	r2, [r7, #0]
   988bc:	2101      	movs	r1, #1
   988be:	fa01 f202 	lsl.w	r2, r1, r2
   988c2:	4013      	ands	r3, r2
   988c4:	2b00      	cmp	r3, #0
   988c6:	d101      	bne.n	988cc <DD_READ_PIO+0x80>
		  {
			  
			
			//  printf("C0");
			  return 0;
   988c8:	2300      	movs	r3, #0
   988ca:	e010      	b.n	988ee <DD_READ_PIO+0xa2>
		  }
		  else
		  {
			//  printf("C1");
			 // return 1;
			 ret_val = 1;
   988cc:	2301      	movs	r3, #1
   988ce:	817b      	strh	r3, [r7, #10]
		//	 				printf("%d",ret_val);
			 return(ret_val);
   988d0:	897b      	ldrh	r3, [r7, #10]
   988d2:	e00c      	b.n	988ee <DD_READ_PIO+0xa2>
			 
		  }
		  break;
		  case PD:
		  if( (PIOD->PIO_PDSR & (1<<pio)) == 0)
   988d4:	4b0c      	ldr	r3, [pc, #48]	; (98908 <DD_READ_PIO+0xbc>)
   988d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   988d8:	683a      	ldr	r2, [r7, #0]
   988da:	2101      	movs	r1, #1
   988dc:	fa01 f202 	lsl.w	r2, r1, r2
   988e0:	4013      	ands	r3, r2
   988e2:	2b00      	cmp	r3, #0
   988e4:	d101      	bne.n	988ea <DD_READ_PIO+0x9e>
		  {
			//  printf("D0");
			  return 0;
   988e6:	2300      	movs	r3, #0
   988e8:	e001      	b.n	988ee <DD_READ_PIO+0xa2>
		  }
		  else
		  {
			//  printf("D1");
			  return 1;
   988ea:	2301      	movs	r3, #1
   988ec:	e7ff      	b.n	988ee <DD_READ_PIO+0xa2>
		  break;
		  
	  }
	  
	
  }
   988ee:	4618      	mov	r0, r3
   988f0:	3714      	adds	r7, #20
   988f2:	46bd      	mov	sp, r7
   988f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   988f8:	4770      	bx	lr
   988fa:	bf00      	nop
   988fc:	400e0e00 	.word	0x400e0e00
   98900:	400e1000 	.word	0x400e1000
   98904:	400e1200 	.word	0x400e1200
   98908:	400e1400 	.word	0x400e1400

0009890c <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   9890c:	b480      	push	{r7}
   9890e:	b083      	sub	sp, #12
   98910:	af00      	add	r7, sp, #0
   98912:	4603      	mov	r3, r0
   98914:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   98916:	4909      	ldr	r1, [pc, #36]	; (9893c <NVIC_ClearPendingIRQ+0x30>)
   98918:	f997 3007 	ldrsb.w	r3, [r7, #7]
   9891c:	095b      	lsrs	r3, r3, #5
   9891e:	79fa      	ldrb	r2, [r7, #7]
   98920:	f002 021f 	and.w	r2, r2, #31
   98924:	2001      	movs	r0, #1
   98926:	fa00 f202 	lsl.w	r2, r0, r2
   9892a:	3360      	adds	r3, #96	; 0x60
   9892c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   98930:	370c      	adds	r7, #12
   98932:	46bd      	mov	sp, r7
   98934:	f85d 7b04 	ldr.w	r7, [sp], #4
   98938:	4770      	bx	lr
   9893a:	bf00      	nop
   9893c:	e000e100 	.word	0xe000e100

00098940 <UART_Handler>:

extern Cl_ReturnCodeType Cl_TimerTickCallback(void);
extern Cl_ReturnCodeType cl_systemtickcallback(void);

void UART_Handler(void)
{
   98940:	b580      	push	{r7, lr}
   98942:	b084      	sub	sp, #16
   98944:	af00      	add	r7, sp, #0
	
	char rx_val ;
	uint32_t i,status;
	status= UART->UART_SR;
   98946:	4b0b      	ldr	r3, [pc, #44]	; (98974 <UART_Handler+0x34>)
   98948:	695b      	ldr	r3, [r3, #20]
   9894a:	60bb      	str	r3, [r7, #8]
//	if(status & 0x01)
	{
		rx_val=UART->UART_RHR;
   9894c:	4b09      	ldr	r3, [pc, #36]	; (98974 <UART_Handler+0x34>)
   9894e:	699b      	ldr	r3, [r3, #24]
   98950:	71fb      	strb	r3, [r7, #7]
	
		DD_CONSOLE_RX(rx_val);
   98952:	79fb      	ldrb	r3, [r7, #7]
   98954:	4618      	mov	r0, r3
   98956:	4b08      	ldr	r3, [pc, #32]	; (98978 <UART_Handler+0x38>)
   98958:	4798      	blx	r3
	
		for(i=0; i< 0xff;i++)
   9895a:	2300      	movs	r3, #0
   9895c:	60fb      	str	r3, [r7, #12]
   9895e:	e002      	b.n	98966 <UART_Handler+0x26>
   98960:	68fb      	ldr	r3, [r7, #12]
   98962:	3301      	adds	r3, #1
   98964:	60fb      	str	r3, [r7, #12]
   98966:	68fb      	ldr	r3, [r7, #12]
   98968:	2bfe      	cmp	r3, #254	; 0xfe
   9896a:	d9f9      	bls.n	98960 <UART_Handler+0x20>
		{
			;
		}
	}

}
   9896c:	3710      	adds	r7, #16
   9896e:	46bd      	mov	sp, r7
   98970:	bd80      	pop	{r7, pc}
   98972:	bf00      	nop
   98974:	400e0800 	.word	0x400e0800
   98978:	0009a38d 	.word	0x0009a38d

0009897c <TC0_Handler>:


void TC0_Handler()
{
   9897c:	b580      	push	{r7, lr}
   9897e:	b082      	sub	sp, #8
   98980:	af00      	add	r7, sp, #0
	if ((tc_get_status(TC0, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   98982:	4808      	ldr	r0, [pc, #32]	; (989a4 <TC0_Handler+0x28>)
   98984:	2100      	movs	r1, #0
   98986:	4b08      	ldr	r3, [pc, #32]	; (989a8 <TC0_Handler+0x2c>)
   98988:	4798      	blx	r3
   9898a:	4603      	mov	r3, r0
   9898c:	f003 0310 	and.w	r3, r3, #16
   98990:	2b00      	cmp	r3, #0
   98992:	d003      	beq.n	9899c <TC0_Handler+0x20>
	{
		//printf("i m in handler tc0\n");
		
			Cl_ReturnCodeType RetVal;
			RetVal = Cl_TimerTickCallback();
   98994:	4b05      	ldr	r3, [pc, #20]	; (989ac <TC0_Handler+0x30>)
   98996:	4798      	blx	r3
   98998:	4603      	mov	r3, r0
   9899a:	71fb      	strb	r3, [r7, #7]
	}
}
   9899c:	3708      	adds	r7, #8
   9899e:	46bd      	mov	sp, r7
   989a0:	bd80      	pop	{r7, pc}
   989a2:	bf00      	nop
   989a4:	40080000 	.word	0x40080000
   989a8:	0009c6b5 	.word	0x0009c6b5
   989ac:	00093d39 	.word	0x00093d39

000989b0 <TC6_Handler>:

void TC6_Handler()
{
   989b0:	b580      	push	{r7, lr}
   989b2:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TC6_IRQn);
   989b4:	2021      	movs	r0, #33	; 0x21
   989b6:	4b03      	ldr	r3, [pc, #12]	; (989c4 <TC6_Handler+0x14>)
   989b8:	4798      	blx	r3
	if ((tc_get_status(TC2, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   989ba:	4803      	ldr	r0, [pc, #12]	; (989c8 <TC6_Handler+0x18>)
   989bc:	2100      	movs	r1, #0
   989be:	4b03      	ldr	r3, [pc, #12]	; (989cc <TC6_Handler+0x1c>)
   989c0:	4798      	blx	r3
	{
		//printf("i m in handler tc6\n");
		
	}
}
   989c2:	bd80      	pop	{r7, pc}
   989c4:	0009890d 	.word	0x0009890d
   989c8:	40088000 	.word	0x40088000
   989cc:	0009c6b5 	.word	0x0009c6b5

000989d0 <TC3_Handler>:
	//printf("inside tc6\n");



void TC3_Handler()
{
   989d0:	b580      	push	{r7, lr}
   989d2:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TC3_IRQn);
   989d4:	201e      	movs	r0, #30
   989d6:	4b03      	ldr	r3, [pc, #12]	; (989e4 <TC3_Handler+0x14>)
   989d8:	4798      	blx	r3
	if ((tc_get_status(TC1, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   989da:	4803      	ldr	r0, [pc, #12]	; (989e8 <TC3_Handler+0x18>)
   989dc:	2100      	movs	r1, #0
   989de:	4b03      	ldr	r3, [pc, #12]	; (989ec <TC3_Handler+0x1c>)
   989e0:	4798      	blx	r3
	{
		//printf("i m in handler tc3\n");
		
	}
}
   989e2:	bd80      	pop	{r7, pc}
   989e4:	0009890d 	.word	0x0009890d
   989e8:	40084000 	.word	0x40084000
   989ec:	0009c6b5 	.word	0x0009c6b5

000989f0 <SysTick_Handler>:

void SysTick_Handler(void)
{
   989f0:	b580      	push	{r7, lr}
   989f2:	b082      	sub	sp, #8
   989f4:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType RetVal;
	RetVal = cl_systemtickcallback();
   989f6:	4b03      	ldr	r3, [pc, #12]	; (98a04 <SysTick_Handler+0x14>)
   989f8:	4798      	blx	r3
   989fa:	4603      	mov	r3, r0
   989fc:	71fb      	strb	r3, [r7, #7]
   989fe:	3708      	adds	r7, #8
   98a00:	46bd      	mov	sp, r7
   98a02:	bd80      	pop	{r7, pc}
   98a04:	00094239 	.word	0x00094239

00098a08 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   98a08:	b480      	push	{r7}
   98a0a:	b083      	sub	sp, #12
   98a0c:	af00      	add	r7, sp, #0
   98a0e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   98a10:	687b      	ldr	r3, [r7, #4]
   98a12:	2b07      	cmp	r3, #7
   98a14:	d825      	bhi.n	98a62 <osc_get_rate+0x5a>
   98a16:	a201      	add	r2, pc, #4	; (adr r2, 98a1c <osc_get_rate+0x14>)
   98a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   98a1c:	00098a3d 	.word	0x00098a3d
   98a20:	00098a43 	.word	0x00098a43
   98a24:	00098a49 	.word	0x00098a49
   98a28:	00098a4f 	.word	0x00098a4f
   98a2c:	00098a53 	.word	0x00098a53
   98a30:	00098a57 	.word	0x00098a57
   98a34:	00098a5b 	.word	0x00098a5b
   98a38:	00098a5f 	.word	0x00098a5f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   98a3c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   98a40:	e010      	b.n	98a64 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   98a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   98a46:	e00d      	b.n	98a64 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   98a48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   98a4c:	e00a      	b.n	98a64 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   98a4e:	4b08      	ldr	r3, [pc, #32]	; (98a70 <osc_get_rate+0x68>)
   98a50:	e008      	b.n	98a64 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   98a52:	4b08      	ldr	r3, [pc, #32]	; (98a74 <osc_get_rate+0x6c>)
   98a54:	e006      	b.n	98a64 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   98a56:	4b08      	ldr	r3, [pc, #32]	; (98a78 <osc_get_rate+0x70>)
   98a58:	e004      	b.n	98a64 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   98a5a:	4b07      	ldr	r3, [pc, #28]	; (98a78 <osc_get_rate+0x70>)
   98a5c:	e002      	b.n	98a64 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   98a5e:	4b06      	ldr	r3, [pc, #24]	; (98a78 <osc_get_rate+0x70>)
   98a60:	e000      	b.n	98a64 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   98a62:	2300      	movs	r3, #0
}
   98a64:	4618      	mov	r0, r3
   98a66:	370c      	adds	r7, #12
   98a68:	46bd      	mov	sp, r7
   98a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
   98a6e:	4770      	bx	lr
   98a70:	003d0900 	.word	0x003d0900
   98a74:	007a1200 	.word	0x007a1200
   98a78:	00b71b00 	.word	0x00b71b00

00098a7c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   98a7c:	b580      	push	{r7, lr}
   98a7e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   98a80:	2006      	movs	r0, #6
   98a82:	4b04      	ldr	r3, [pc, #16]	; (98a94 <sysclk_get_main_hz+0x18>)
   98a84:	4798      	blx	r3
   98a86:	4602      	mov	r2, r0
   98a88:	4613      	mov	r3, r2
   98a8a:	00db      	lsls	r3, r3, #3
   98a8c:	1a9b      	subs	r3, r3, r2
   98a8e:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   98a90:	4618      	mov	r0, r3
   98a92:	bd80      	pop	{r7, pc}
   98a94:	00098a09 	.word	0x00098a09

00098a98 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   98a98:	b580      	push	{r7, lr}
   98a9a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   98a9c:	4b02      	ldr	r3, [pc, #8]	; (98aa8 <sysclk_get_cpu_hz+0x10>)
   98a9e:	4798      	blx	r3
   98aa0:	4603      	mov	r3, r0
   98aa2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   98aa4:	4618      	mov	r0, r3
   98aa6:	bd80      	pop	{r7, pc}
   98aa8:	00098a7d 	.word	0x00098a7d

00098aac <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   98aac:	b580      	push	{r7, lr}
   98aae:	b082      	sub	sp, #8
   98ab0:	af00      	add	r7, sp, #0
   98ab2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   98ab4:	6878      	ldr	r0, [r7, #4]
   98ab6:	4b02      	ldr	r3, [pc, #8]	; (98ac0 <sysclk_enable_peripheral_clock+0x14>)
   98ab8:	4798      	blx	r3
}
   98aba:	3708      	adds	r7, #8
   98abc:	46bd      	mov	sp, r7
   98abe:	bd80      	pop	{r7, pc}
   98ac0:	0009c58d 	.word	0x0009c58d

00098ac4 <twi_master_setup>:
typedef twi_options_t twi_master_options_t;
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
   98ac4:	b580      	push	{r7, lr}
   98ac6:	b082      	sub	sp, #8
   98ac8:	af00      	add	r7, sp, #0
   98aca:	6078      	str	r0, [r7, #4]
   98acc:	6039      	str	r1, [r7, #0]
	p_opt->master_clk = sysclk_get_cpu_hz();
   98ace:	4b10      	ldr	r3, [pc, #64]	; (98b10 <twi_master_setup+0x4c>)
   98ad0:	4798      	blx	r3
   98ad2:	4602      	mov	r2, r0
   98ad4:	683b      	ldr	r3, [r7, #0]
   98ad6:	601a      	str	r2, [r3, #0]
	p_opt->smbus      = 0;
   98ad8:	683b      	ldr	r3, [r7, #0]
   98ada:	2200      	movs	r2, #0
   98adc:	725a      	strb	r2, [r3, #9]

	if (p_twi == TWI0) {
   98ade:	687b      	ldr	r3, [r7, #4]
   98ae0:	4a0c      	ldr	r2, [pc, #48]	; (98b14 <twi_master_setup+0x50>)
   98ae2:	4293      	cmp	r3, r2
   98ae4:	d103      	bne.n	98aee <twi_master_setup+0x2a>
		sysclk_enable_peripheral_clock(ID_TWI0);
   98ae6:	2016      	movs	r0, #22
   98ae8:	4b0b      	ldr	r3, [pc, #44]	; (98b18 <twi_master_setup+0x54>)
   98aea:	4798      	blx	r3
   98aec:	e006      	b.n	98afc <twi_master_setup+0x38>
	} else if (p_twi == TWI1) {
   98aee:	687b      	ldr	r3, [r7, #4]
   98af0:	4a0a      	ldr	r2, [pc, #40]	; (98b1c <twi_master_setup+0x58>)
   98af2:	4293      	cmp	r3, r2
   98af4:	d102      	bne.n	98afc <twi_master_setup+0x38>
		sysclk_enable_peripheral_clock(ID_TWI1);
   98af6:	2017      	movs	r0, #23
   98af8:	4b07      	ldr	r3, [pc, #28]	; (98b18 <twi_master_setup+0x54>)
   98afa:	4798      	blx	r3
#endif
	} else {
		// Do Nothing
	}

	return (twi_master_init(p_twi, p_opt));
   98afc:	6878      	ldr	r0, [r7, #4]
   98afe:	6839      	ldr	r1, [r7, #0]
   98b00:	4b07      	ldr	r3, [pc, #28]	; (98b20 <twi_master_setup+0x5c>)
   98b02:	4798      	blx	r3
   98b04:	4603      	mov	r3, r0
}
   98b06:	4618      	mov	r0, r3
   98b08:	3708      	adds	r7, #8
   98b0a:	46bd      	mov	sp, r7
   98b0c:	bd80      	pop	{r7, pc}
   98b0e:	bf00      	nop
   98b10:	00098a99 	.word	0x00098a99
   98b14:	4008c000 	.word	0x4008c000
   98b18:	00098aad 	.word	0x00098aad
   98b1c:	40090000 	.word	0x40090000
   98b20:	00080615 	.word	0x00080615

00098b24 <twi_master_write1>:

}

uint32_t twi_master_write1(Twi *p_twi, twi_packet_t *p_packet)

{
   98b24:	b580      	push	{r7, lr}
   98b26:	b086      	sub	sp, #24
   98b28:	af00      	add	r7, sp, #0
   98b2a:	6078      	str	r0, [r7, #4]
   98b2c:	6039      	str	r1, [r7, #0]
	
 func_timer = 0;
   98b2e:	4b64      	ldr	r3, [pc, #400]	; (98cc0 <twi_master_write1+0x19c>)
   98b30:	2200      	movs	r2, #0
   98b32:	601a      	str	r2, [r3, #0]
FUNC_ENTRY++;
   98b34:	4b63      	ldr	r3, [pc, #396]	; (98cc4 <twi_master_write1+0x1a0>)
   98b36:	681b      	ldr	r3, [r3, #0]
   98b38:	3301      	adds	r3, #1
   98b3a:	4a62      	ldr	r2, [pc, #392]	; (98cc4 <twi_master_write1+0x1a0>)
   98b3c:	6013      	str	r3, [r2, #0]

if(FUNC_ENTRY > 1)
   98b3e:	4b61      	ldr	r3, [pc, #388]	; (98cc4 <twi_master_write1+0x1a0>)
   98b40:	681b      	ldr	r3, [r3, #0]
   98b42:	2b01      	cmp	r3, #1
   98b44:	dd04      	ble.n	98b50 <twi_master_write1+0x2c>
{
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
   98b46:	203d      	movs	r0, #61	; 0x3d
   98b48:	2100      	movs	r1, #0
   98b4a:	2200      	movs	r2, #0
   98b4c:	4b5e      	ldr	r3, [pc, #376]	; (98cc8 <twi_master_write1+0x1a4>)
   98b4e:	4798      	blx	r3
}

	twi_master_setup(TWI0, &opt);
   98b50:	485e      	ldr	r0, [pc, #376]	; (98ccc <twi_master_write1+0x1a8>)
   98b52:	495f      	ldr	r1, [pc, #380]	; (98cd0 <twi_master_write1+0x1ac>)
   98b54:	4b5f      	ldr	r3, [pc, #380]	; (98cd4 <twi_master_write1+0x1b0>)
   98b56:	4798      	blx	r3
//cl_wait(10);
	uint32_t status, cnt = p_packet->length;
   98b58:	683b      	ldr	r3, [r7, #0]
   98b5a:	68db      	ldr	r3, [r3, #12]
   98b5c:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = (uint8_t*) p_packet->buffer;
   98b5e:	683b      	ldr	r3, [r7, #0]
   98b60:	689b      	ldr	r3, [r3, #8]
   98b62:	613b      	str	r3, [r7, #16]
	iic_nack = false;
   98b64:	4b5c      	ldr	r3, [pc, #368]	; (98cd8 <twi_master_write1+0x1b4>)
   98b66:	2200      	movs	r2, #0
   98b68:	701a      	strb	r2, [r3, #0]
	/* Check argument */
	if (cnt == 0) {
   98b6a:	697b      	ldr	r3, [r7, #20]
   98b6c:	2b00      	cmp	r3, #0
   98b6e:	d104      	bne.n	98b7a <twi_master_write1+0x56>
		FUNC_ENTRY = 0;
   98b70:	4b54      	ldr	r3, [pc, #336]	; (98cc4 <twi_master_write1+0x1a0>)
   98b72:	2200      	movs	r2, #0
   98b74:	601a      	str	r2, [r3, #0]
		return TWI_INVALID_ARGUMENT;
   98b76:	2301      	movs	r3, #1
   98b78:	e09e      	b.n	98cb8 <twi_master_write1+0x194>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   98b7a:	687b      	ldr	r3, [r7, #4]
   98b7c:	2200      	movs	r2, #0
   98b7e:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   98b80:	683b      	ldr	r3, [r7, #0]
   98b82:	7c1b      	ldrb	r3, [r3, #16]
   98b84:	041b      	lsls	r3, r3, #16
   98b86:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   98b8a:	683b      	ldr	r3, [r7, #0]
   98b8c:	685b      	ldr	r3, [r3, #4]
   98b8e:	021b      	lsls	r3, r3, #8
   98b90:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   98b94:	431a      	orrs	r2, r3
   98b96:	687b      	ldr	r3, [r7, #4]
   98b98:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   98b9a:	687b      	ldr	r3, [r7, #4]
   98b9c:	2200      	movs	r2, #0
   98b9e:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   98ba0:	683a      	ldr	r2, [r7, #0]
   98ba2:	683b      	ldr	r3, [r7, #0]
   98ba4:	685b      	ldr	r3, [r3, #4]
   98ba6:	4610      	mov	r0, r2
   98ba8:	4619      	mov	r1, r3
   98baa:	4b4c      	ldr	r3, [pc, #304]	; (98cdc <twi_master_write1+0x1b8>)
   98bac:	4798      	blx	r3
   98bae:	4602      	mov	r2, r0
   98bb0:	687b      	ldr	r3, [r7, #4]
   98bb2:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
   98bb4:	e034      	b.n	98c20 <twi_master_write1+0xfc>
	//	cl_wait(1);
		status = p_twi->TWI_SR;
   98bb6:	687b      	ldr	r3, [r7, #4]
   98bb8:	6a1b      	ldr	r3, [r3, #32]
   98bba:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
   98bbc:	68fb      	ldr	r3, [r7, #12]
   98bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
   98bc2:	2b00      	cmp	r3, #0
   98bc4:	d007      	beq.n	98bd6 <twi_master_write1+0xb2>
			iic_nack = true;
   98bc6:	4b44      	ldr	r3, [pc, #272]	; (98cd8 <twi_master_write1+0x1b4>)
   98bc8:	2201      	movs	r2, #1
   98bca:	701a      	strb	r2, [r3, #0]
			FUNC_ENTRY = 0;
   98bcc:	4b3d      	ldr	r3, [pc, #244]	; (98cc4 <twi_master_write1+0x1a0>)
   98bce:	2200      	movs	r2, #0
   98bd0:	601a      	str	r2, [r3, #0]
			return TWI_RECEIVE_NACK;
   98bd2:	2305      	movs	r3, #5
   98bd4:	e070      	b.n	98cb8 <twi_master_write1+0x194>
		}
		
	

		if (!(status & TWI_SR_TXRDY)) {
   98bd6:	68fb      	ldr	r3, [r7, #12]
   98bd8:	f003 0304 	and.w	r3, r3, #4
   98bdc:	2b00      	cmp	r3, #0
   98bde:	d115      	bne.n	98c0c <twi_master_write1+0xe8>
			if(func_timer > 3)
   98be0:	4b37      	ldr	r3, [pc, #220]	; (98cc0 <twi_master_write1+0x19c>)
   98be2:	681b      	ldr	r3, [r3, #0]
   98be4:	2b03      	cmp	r3, #3
   98be6:	dd10      	ble.n	98c0a <twi_master_write1+0xe6>
			{
		//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
				
				func_timer = 0;
   98be8:	4b35      	ldr	r3, [pc, #212]	; (98cc0 <twi_master_write1+0x19c>)
   98bea:	2200      	movs	r2, #0
   98bec:	601a      	str	r2, [r3, #0]
			//	p_twi->TWI_CR = TWI_CR_STOP;
			//	p_twi->TWI_CR = TWI_CR_START;
			//	p_twi->TWI_CR = TWI_CR_SWRST;
		//	twi_master_setup(TWI0, &opt);
					p_twi->TWI_CR = TWI_CR_SWRST;
   98bee:	687b      	ldr	r3, [r7, #4]
   98bf0:	2280      	movs	r2, #128	; 0x80
   98bf2:	601a      	str	r2, [r3, #0]
				//	p_twi->TWI_RHR;

				
				clock_it();
   98bf4:	4b3a      	ldr	r3, [pc, #232]	; (98ce0 <twi_master_write1+0x1bc>)
   98bf6:	4798      	blx	r3
				twi_master_setup(TWI0, &opt);
   98bf8:	4834      	ldr	r0, [pc, #208]	; (98ccc <twi_master_write1+0x1a8>)
   98bfa:	4935      	ldr	r1, [pc, #212]	; (98cd0 <twi_master_write1+0x1ac>)
   98bfc:	4b35      	ldr	r3, [pc, #212]	; (98cd4 <twi_master_write1+0x1b0>)
   98bfe:	4798      	blx	r3
				
			FUNC_ENTRY = 0;
   98c00:	4b30      	ldr	r3, [pc, #192]	; (98cc4 <twi_master_write1+0x1a0>)
   98c02:	2200      	movs	r2, #0
   98c04:	601a      	str	r2, [r3, #0]
			return(TWI_BUSY);
   98c06:	2308      	movs	r3, #8
   98c08:	e056      	b.n	98cb8 <twi_master_write1+0x194>
				break;
			}
			else
			{
				continue;
   98c0a:	e009      	b.n	98c20 <twi_master_write1+0xfc>
			}
			
		}
		p_twi->TWI_THR = *buffer++;
   98c0c:	693b      	ldr	r3, [r7, #16]
   98c0e:	1c5a      	adds	r2, r3, #1
   98c10:	613a      	str	r2, [r7, #16]
   98c12:	781b      	ldrb	r3, [r3, #0]
   98c14:	461a      	mov	r2, r3
   98c16:	687b      	ldr	r3, [r7, #4]
   98c18:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
   98c1a:	697b      	ldr	r3, [r7, #20]
   98c1c:	3b01      	subs	r3, #1
   98c1e:	617b      	str	r3, [r7, #20]
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
   98c20:	697b      	ldr	r3, [r7, #20]
   98c22:	2b00      	cmp	r3, #0
   98c24:	d1c7      	bne.n	98bb6 <twi_master_write1+0x92>
		cnt--;
	}

	while (1) {
	//	cl_wait(1);
		status = p_twi->TWI_SR;
   98c26:	687b      	ldr	r3, [r7, #4]
   98c28:	6a1b      	ldr	r3, [r3, #32]
   98c2a:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
   98c2c:	68fb      	ldr	r3, [r7, #12]
   98c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
   98c32:	2b00      	cmp	r3, #0
   98c34:	d004      	beq.n	98c40 <twi_master_write1+0x11c>
			FUNC_ENTRY = 0;
   98c36:	4b23      	ldr	r3, [pc, #140]	; (98cc4 <twi_master_write1+0x1a0>)
   98c38:	2200      	movs	r2, #0
   98c3a:	601a      	str	r2, [r3, #0]
			return TWI_RECEIVE_NACK;
   98c3c:	2305      	movs	r3, #5
   98c3e:	e03b      	b.n	98cb8 <twi_master_write1+0x194>
		}

		if (status & TWI_SR_TXRDY) {
   98c40:	68fb      	ldr	r3, [r7, #12]
   98c42:	f003 0304 	and.w	r3, r3, #4
   98c46:	2b00      	cmp	r3, #0
   98c48:	d004      	beq.n	98c54 <twi_master_write1+0x130>
			break;
   98c4a:	bf00      	nop

			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
   98c4c:	687b      	ldr	r3, [r7, #4]
   98c4e:	2202      	movs	r2, #2
   98c50:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   98c52:	e027      	b.n	98ca4 <twi_master_write1+0x180>

		if (status & TWI_SR_TXRDY) {
			break;
		}
		
		if(func_timer > 3)
   98c54:	4b1a      	ldr	r3, [pc, #104]	; (98cc0 <twi_master_write1+0x19c>)
   98c56:	681b      	ldr	r3, [r3, #0]
   98c58:	2b03      	cmp	r3, #3
   98c5a:	dd0d      	ble.n	98c78 <twi_master_write1+0x154>
		//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
			//	p_twi->TWI_CR = TWI_CR_STOP;
			//	p_twi->TWI_CR = TWI_CR_START;
			//	p_twi->TWI_CR = TWI_CR_SWRST;
			//twi_master_setup(TWI0, &opt);
				p_twi->TWI_CR = TWI_CR_SWRST;
   98c5c:	687b      	ldr	r3, [r7, #4]
   98c5e:	2280      	movs	r2, #128	; 0x80
   98c60:	601a      	str	r2, [r3, #0]
				//p_twi->TWI_RHR;
			clock_it();
   98c62:	4b1f      	ldr	r3, [pc, #124]	; (98ce0 <twi_master_write1+0x1bc>)
   98c64:	4798      	blx	r3
			FUNC_ENTRY = 0;
   98c66:	4b17      	ldr	r3, [pc, #92]	; (98cc4 <twi_master_write1+0x1a0>)
   98c68:	2200      	movs	r2, #0
   98c6a:	601a      	str	r2, [r3, #0]
			twi_master_setup(TWI0, &opt);
   98c6c:	4817      	ldr	r0, [pc, #92]	; (98ccc <twi_master_write1+0x1a8>)
   98c6e:	4918      	ldr	r1, [pc, #96]	; (98cd0 <twi_master_write1+0x1ac>)
   98c70:	4b18      	ldr	r3, [pc, #96]	; (98cd4 <twi_master_write1+0x1b0>)
   98c72:	4798      	blx	r3
			return(TWI_BUSY);
   98c74:	2308      	movs	r3, #8
   98c76:	e01f      	b.n	98cb8 <twi_master_write1+0x194>

			break;
		}
	}
   98c78:	e7d5      	b.n	98c26 <twi_master_write1+0x102>

	p_twi->TWI_CR = TWI_CR_STOP;

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
					if(func_timer > 3)
   98c7a:	4b11      	ldr	r3, [pc, #68]	; (98cc0 <twi_master_write1+0x19c>)
   98c7c:	681b      	ldr	r3, [r3, #0]
   98c7e:	2b03      	cmp	r3, #3
   98c80:	dd10      	ble.n	98ca4 <twi_master_write1+0x180>
					{
				//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
						func_timer = 0;
   98c82:	4b0f      	ldr	r3, [pc, #60]	; (98cc0 <twi_master_write1+0x19c>)
   98c84:	2200      	movs	r2, #0
   98c86:	601a      	str	r2, [r3, #0]
			//	p_twi->TWI_CR = TWI_CR_STOP;
			//	p_twi->TWI_CR = TWI_CR_START;
			//	p_twi->TWI_CR = TWI_CR_SWRST;

				//p_twi->TWI_RHR;
			clock_it();
   98c88:	4b15      	ldr	r3, [pc, #84]	; (98ce0 <twi_master_write1+0x1bc>)
   98c8a:	4798      	blx	r3
			FUNC_ENTRY = 0;
   98c8c:	4b0d      	ldr	r3, [pc, #52]	; (98cc4 <twi_master_write1+0x1a0>)
   98c8e:	2200      	movs	r2, #0
   98c90:	601a      	str	r2, [r3, #0]
					twi_master_setup(TWI0, &opt);
   98c92:	480e      	ldr	r0, [pc, #56]	; (98ccc <twi_master_write1+0x1a8>)
   98c94:	490e      	ldr	r1, [pc, #56]	; (98cd0 <twi_master_write1+0x1ac>)
   98c96:	4b0f      	ldr	r3, [pc, #60]	; (98cd4 <twi_master_write1+0x1b0>)
   98c98:	4798      	blx	r3
				p_twi->TWI_CR = TWI_CR_SWRST;
   98c9a:	687b      	ldr	r3, [r7, #4]
   98c9c:	2280      	movs	r2, #128	; 0x80
   98c9e:	601a      	str	r2, [r3, #0]
		//	twi_master_setup(TWI0, &opt);
			return(TWI_BUSY);
   98ca0:	2308      	movs	r3, #8
   98ca2:	e009      	b.n	98cb8 <twi_master_write1+0x194>
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   98ca4:	687b      	ldr	r3, [r7, #4]
   98ca6:	6a1b      	ldr	r3, [r3, #32]
   98ca8:	f003 0301 	and.w	r3, r3, #1
   98cac:	2b00      	cmp	r3, #0
   98cae:	d0e4      	beq.n	98c7a <twi_master_write1+0x156>
		//	twi_master_setup(TWI0, &opt);
			return(TWI_BUSY);
						break;
					}
	}
FUNC_ENTRY = 0;
   98cb0:	4b04      	ldr	r3, [pc, #16]	; (98cc4 <twi_master_write1+0x1a0>)
   98cb2:	2200      	movs	r2, #0
   98cb4:	601a      	str	r2, [r3, #0]
//cl_wait(10);
	return TWI_SUCCESS;
   98cb6:	2300      	movs	r3, #0
}
   98cb8:	4618      	mov	r0, r3
   98cba:	3718      	adds	r7, #24
   98cbc:	46bd      	mov	sp, r7
   98cbe:	bd80      	pop	{r7, pc}
   98cc0:	20071bb0 	.word	0x20071bb0
   98cc4:	20071c90 	.word	0x20071c90
   98cc8:	0009d1e9 	.word	0x0009d1e9
   98ccc:	4008c000 	.word	0x4008c000
   98cd0:	20070cd8 	.word	0x20070cd8
   98cd4:	00098ac5 	.word	0x00098ac5
   98cd8:	20071ba7 	.word	0x20071ba7
   98cdc:	00098ce5 	.word	0x00098ce5
   98ce0:	00098e09 	.word	0x00098e09

00098ce4 <twi_mk_addr>:
	return TWI_SUCCESS;
}


static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
   98ce4:	b480      	push	{r7}
   98ce6:	b085      	sub	sp, #20
   98ce8:	af00      	add	r7, sp, #0
   98cea:	6078      	str	r0, [r7, #4]
   98cec:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
   98cee:	683b      	ldr	r3, [r7, #0]
   98cf0:	2b00      	cmp	r3, #0
   98cf2:	d101      	bne.n	98cf8 <twi_mk_addr+0x14>
	return 0;
   98cf4:	2300      	movs	r3, #0
   98cf6:	e01d      	b.n	98d34 <twi_mk_addr+0x50>

	val = addr[0];
   98cf8:	687b      	ldr	r3, [r7, #4]
   98cfa:	781b      	ldrb	r3, [r3, #0]
   98cfc:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
   98cfe:	683b      	ldr	r3, [r7, #0]
   98d00:	2b01      	cmp	r3, #1
   98d02:	dd09      	ble.n	98d18 <twi_mk_addr+0x34>
		val <<= 8;
   98d04:	68fb      	ldr	r3, [r7, #12]
   98d06:	021b      	lsls	r3, r3, #8
   98d08:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
   98d0a:	687b      	ldr	r3, [r7, #4]
   98d0c:	3301      	adds	r3, #1
   98d0e:	781b      	ldrb	r3, [r3, #0]
   98d10:	461a      	mov	r2, r3
   98d12:	68fb      	ldr	r3, [r7, #12]
   98d14:	4313      	orrs	r3, r2
   98d16:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
   98d18:	683b      	ldr	r3, [r7, #0]
   98d1a:	2b02      	cmp	r3, #2
   98d1c:	dd09      	ble.n	98d32 <twi_mk_addr+0x4e>
		val <<= 8;
   98d1e:	68fb      	ldr	r3, [r7, #12]
   98d20:	021b      	lsls	r3, r3, #8
   98d22:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
   98d24:	687b      	ldr	r3, [r7, #4]
   98d26:	3302      	adds	r3, #2
   98d28:	781b      	ldrb	r3, [r3, #0]
   98d2a:	461a      	mov	r2, r3
   98d2c:	68fb      	ldr	r3, [r7, #12]
   98d2e:	4313      	orrs	r3, r2
   98d30:	60fb      	str	r3, [r7, #12]
	}
	return val;
   98d32:	68fb      	ldr	r3, [r7, #12]
}
   98d34:	4618      	mov	r0, r3
   98d36:	3714      	adds	r7, #20
   98d38:	46bd      	mov	sp, r7
   98d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
   98d3e:	4770      	bx	lr

00098d40 <DD_INIT_IIC>:
 }
	


 void DD_INIT_IIC(void)
{
   98d40:	b580      	push	{r7, lr}
   98d42:	af00      	add	r7, sp, #0
	

		PIOA->PIO_WPMR = 0x50494F00;
   98d44:	4b06      	ldr	r3, [pc, #24]	; (98d60 <DD_INIT_IIC+0x20>)
   98d46:	4a07      	ldr	r2, [pc, #28]	; (98d64 <DD_INIT_IIC+0x24>)
   98d48:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		//PIOA->PIO_PUER = 0x00000300;
		PIOA->PIO_PDR =	 0x00060000;
   98d4c:	4b04      	ldr	r3, [pc, #16]	; (98d60 <DD_INIT_IIC+0x20>)
   98d4e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   98d52:	605a      	str	r2, [r3, #4]
	//	PIOA->PIO_PUER = 0x00040000;
	//	PIOA->PIO_PUDR = 0x00060000;
		
	//	PIOA->PIO_ABSR = 0x00090000;
		twi_master_setup(TWI0, &opt);
   98d54:	4804      	ldr	r0, [pc, #16]	; (98d68 <DD_INIT_IIC+0x28>)
   98d56:	4905      	ldr	r1, [pc, #20]	; (98d6c <DD_INIT_IIC+0x2c>)
   98d58:	4b05      	ldr	r3, [pc, #20]	; (98d70 <DD_INIT_IIC+0x30>)
   98d5a:	4798      	blx	r3
		
			
	
}
   98d5c:	bd80      	pop	{r7, pc}
   98d5e:	bf00      	nop
   98d60:	400e0e00 	.word	0x400e0e00
   98d64:	50494f00 	.word	0x50494f00
   98d68:	4008c000 	.word	0x4008c000
   98d6c:	20070cd8 	.word	0x20070cd8
   98d70:	00098ac5 	.word	0x00098ac5

00098d74 <DD_IIC_SET_POT>:

	}
	
}
void DD_IIC_SET_POT(uint8_t iic_address, uint16_t data)
{
   98d74:	b580      	push	{r7, lr}
   98d76:	b088      	sub	sp, #32
   98d78:	af00      	add	r7, sp, #0
   98d7a:	4603      	mov	r3, r0
   98d7c:	460a      	mov	r2, r1
   98d7e:	71fb      	strb	r3, [r7, #7]
   98d80:	4613      	mov	r3, r2
   98d82:	80bb      	strh	r3, [r7, #4]
	//DD_WRITE_IIC( iic_address,  *data , sizeof(uint16_t));
	
		 uint8_t test_pattern_inc[] =
   98d84:	4a1d      	ldr	r2, [pc, #116]	; (98dfc <DD_IIC_SET_POT+0x88>)
   98d86:	f107 031c 	add.w	r3, r7, #28
   98d8a:	6810      	ldr	r0, [r2, #0]
   98d8c:	6018      	str	r0, [r3, #0]
			 0x1C,
			 0x02,
			 0x04,
			 0x00
		 };
		 twi_packet_t iic_packet = {
   98d8e:	f107 0308 	add.w	r3, r7, #8
   98d92:	2200      	movs	r2, #0
   98d94:	601a      	str	r2, [r3, #0]
   98d96:	3304      	adds	r3, #4
   98d98:	2200      	movs	r2, #0
   98d9a:	601a      	str	r2, [r3, #0]
   98d9c:	3304      	adds	r3, #4
   98d9e:	2200      	movs	r2, #0
   98da0:	601a      	str	r2, [r3, #0]
   98da2:	3304      	adds	r3, #4
   98da4:	2200      	movs	r2, #0
   98da6:	601a      	str	r2, [r3, #0]
   98da8:	3304      	adds	r3, #4
   98daa:	2200      	movs	r2, #0
   98dac:	601a      	str	r2, [r3, #0]
   98dae:	3304      	adds	r3, #4
   98db0:	f107 031c 	add.w	r3, r7, #28
   98db4:	613b      	str	r3, [r7, #16]
   98db6:	2304      	movs	r3, #4
   98db8:	617b      	str	r3, [r7, #20]
   98dba:	79fb      	ldrb	r3, [r7, #7]
   98dbc:	763b      	strb	r3, [r7, #24]
			 .chip         = iic_address,
			 .buffer       = (void *)test_pattern_inc, // transfer data source buffer
			 .length       = 4   // transfer data size (bytes)
			// .length       = length   // transfer data size (bytes)
		 };
		 if ( data > 1024)
   98dbe:	88bb      	ldrh	r3, [r7, #4]
   98dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   98dc4:	d817      	bhi.n	98df6 <DD_IIC_SET_POT+0x82>
			 
		 }
		 else
		 {

				 test_pattern_inc[3] = (Byte)(data & 0xFF);
   98dc6:	88bb      	ldrh	r3, [r7, #4]
   98dc8:	b2db      	uxtb	r3, r3
   98dca:	77fb      	strb	r3, [r7, #31]
				 test_pattern_inc[2] = 0x04 | (data >> 8 ) & 0x03;
   98dcc:	88bb      	ldrh	r3, [r7, #4]
   98dce:	0a1b      	lsrs	r3, r3, #8
   98dd0:	b29b      	uxth	r3, r3
   98dd2:	b2db      	uxtb	r3, r3
   98dd4:	f003 0303 	and.w	r3, r3, #3
   98dd8:	b2db      	uxtb	r3, r3
   98dda:	f043 0304 	orr.w	r3, r3, #4
   98dde:	b2db      	uxtb	r3, r3
   98de0:	b2db      	uxtb	r3, r3
   98de2:	77bb      	strb	r3, [r7, #30]
	

			 iic_packet.buffer =  (void *)test_pattern_inc;
   98de4:	f107 031c 	add.w	r3, r7, #28
   98de8:	613b      	str	r3, [r7, #16]
			 twi_master_write1(TWI_EXAMPLE, &iic_packet)	;
   98dea:	f107 0308 	add.w	r3, r7, #8
   98dee:	4804      	ldr	r0, [pc, #16]	; (98e00 <DD_IIC_SET_POT+0x8c>)
   98df0:	4619      	mov	r1, r3
   98df2:	4b04      	ldr	r3, [pc, #16]	; (98e04 <DD_IIC_SET_POT+0x90>)
   98df4:	4798      	blx	r3
		 }

}
   98df6:	3720      	adds	r7, #32
   98df8:	46bd      	mov	sp, r7
   98dfa:	bd80      	pop	{r7, pc}
   98dfc:	000aa618 	.word	0x000aa618
   98e00:	4008c000 	.word	0x4008c000
   98e04:	00098b25 	.word	0x00098b25

00098e08 <clock_it>:
			
}


void clock_it(void)
{
   98e08:	b480      	push	{r7}
   98e0a:	af00      	add	r7, sp, #0
	return;
   98e0c:	bf00      	nop

						//PIOA->PIO_CODR = 0x0E002800;
						PIOA->PIO_CODR = 0x0E00A800;
						
						TWI0->TWI_CR = TWI_CR_STOP;
}					
   98e0e:	46bd      	mov	sp, r7
   98e10:	f85d 7b04 	ldr.w	r7, [sp], #4
   98e14:	4770      	bx	lr
   98e16:	bf00      	nop

00098e18 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   98e18:	b480      	push	{r7}
   98e1a:	b083      	sub	sp, #12
   98e1c:	af00      	add	r7, sp, #0
   98e1e:	4603      	mov	r3, r0
   98e20:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   98e22:	4908      	ldr	r1, [pc, #32]	; (98e44 <NVIC_EnableIRQ+0x2c>)
   98e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
   98e28:	095b      	lsrs	r3, r3, #5
   98e2a:	79fa      	ldrb	r2, [r7, #7]
   98e2c:	f002 021f 	and.w	r2, r2, #31
   98e30:	2001      	movs	r0, #1
   98e32:	fa00 f202 	lsl.w	r2, r0, r2
   98e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   98e3a:	370c      	adds	r7, #12
   98e3c:	46bd      	mov	sp, r7
   98e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
   98e42:	4770      	bx	lr
   98e44:	e000e100 	.word	0xe000e100

00098e48 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   98e48:	b480      	push	{r7}
   98e4a:	b083      	sub	sp, #12
   98e4c:	af00      	add	r7, sp, #0
   98e4e:	4603      	mov	r3, r0
   98e50:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   98e52:	4909      	ldr	r1, [pc, #36]	; (98e78 <NVIC_DisableIRQ+0x30>)
   98e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
   98e58:	095b      	lsrs	r3, r3, #5
   98e5a:	79fa      	ldrb	r2, [r7, #7]
   98e5c:	f002 021f 	and.w	r2, r2, #31
   98e60:	2001      	movs	r0, #1
   98e62:	fa00 f202 	lsl.w	r2, r0, r2
   98e66:	3320      	adds	r3, #32
   98e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   98e6c:	370c      	adds	r7, #12
   98e6e:	46bd      	mov	sp, r7
   98e70:	f85d 7b04 	ldr.w	r7, [sp], #4
   98e74:	4770      	bx	lr
   98e76:	bf00      	nop
   98e78:	e000e100 	.word	0xe000e100

00098e7c <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   98e7c:	b480      	push	{r7}
   98e7e:	b083      	sub	sp, #12
   98e80:	af00      	add	r7, sp, #0
   98e82:	4603      	mov	r3, r0
   98e84:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   98e86:	4909      	ldr	r1, [pc, #36]	; (98eac <NVIC_ClearPendingIRQ+0x30>)
   98e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
   98e8c:	095b      	lsrs	r3, r3, #5
   98e8e:	79fa      	ldrb	r2, [r7, #7]
   98e90:	f002 021f 	and.w	r2, r2, #31
   98e94:	2001      	movs	r0, #1
   98e96:	fa00 f202 	lsl.w	r2, r0, r2
   98e9a:	3360      	adds	r3, #96	; 0x60
   98e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   98ea0:	370c      	adds	r7, #12
   98ea2:	46bd      	mov	sp, r7
   98ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
   98ea8:	4770      	bx	lr
   98eaa:	bf00      	nop
   98eac:	e000e100 	.word	0xe000e100

00098eb0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   98eb0:	b480      	push	{r7}
   98eb2:	b083      	sub	sp, #12
   98eb4:	af00      	add	r7, sp, #0
   98eb6:	4603      	mov	r3, r0
   98eb8:	6039      	str	r1, [r7, #0]
   98eba:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   98ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
   98ec0:	2b00      	cmp	r3, #0
   98ec2:	da0b      	bge.n	98edc <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   98ec4:	490d      	ldr	r1, [pc, #52]	; (98efc <NVIC_SetPriority+0x4c>)
   98ec6:	79fb      	ldrb	r3, [r7, #7]
   98ec8:	f003 030f 	and.w	r3, r3, #15
   98ecc:	3b04      	subs	r3, #4
   98ece:	683a      	ldr	r2, [r7, #0]
   98ed0:	b2d2      	uxtb	r2, r2
   98ed2:	0112      	lsls	r2, r2, #4
   98ed4:	b2d2      	uxtb	r2, r2
   98ed6:	440b      	add	r3, r1
   98ed8:	761a      	strb	r2, [r3, #24]
   98eda:	e009      	b.n	98ef0 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   98edc:	4908      	ldr	r1, [pc, #32]	; (98f00 <NVIC_SetPriority+0x50>)
   98ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
   98ee2:	683a      	ldr	r2, [r7, #0]
   98ee4:	b2d2      	uxtb	r2, r2
   98ee6:	0112      	lsls	r2, r2, #4
   98ee8:	b2d2      	uxtb	r2, r2
   98eea:	440b      	add	r3, r1
   98eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   98ef0:	370c      	adds	r7, #12
   98ef2:	46bd      	mov	sp, r7
   98ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
   98ef8:	4770      	bx	lr
   98efa:	bf00      	nop
   98efc:	e000ed00 	.word	0xe000ed00
   98f00:	e000e100 	.word	0xe000e100

00098f04 <DD_INIT_INT>:

extern Cl_Mac_EventQueueType Cl_MacEventQueue1;


void DD_INIT_INT()
{
   98f04:	b580      	push	{r7, lr}
   98f06:	af00      	add	r7, sp, #0
	
	
	NVIC_DisableIRQ(UART_IRQn);
   98f08:	2008      	movs	r0, #8
   98f0a:	4b2e      	ldr	r3, [pc, #184]	; (98fc4 <DD_INIT_INT+0xc0>)
   98f0c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(UART_IRQn);
   98f0e:	2008      	movs	r0, #8
   98f10:	4b2d      	ldr	r3, [pc, #180]	; (98fc8 <DD_INIT_INT+0xc4>)
   98f12:	4798      	blx	r3
	NVIC_SetPriority(UART_IRQn, 0);
   98f14:	2008      	movs	r0, #8
   98f16:	2100      	movs	r1, #0
   98f18:	4b2c      	ldr	r3, [pc, #176]	; (98fcc <DD_INIT_INT+0xc8>)
   98f1a:	4798      	blx	r3
	NVIC_EnableIRQ(UART_IRQn);
   98f1c:	2008      	movs	r0, #8
   98f1e:	4b2c      	ldr	r3, [pc, #176]	; (98fd0 <DD_INIT_INT+0xcc>)
   98f20:	4798      	blx	r3
	uart_enable_interrupt(UART,UART_SR_RXRDY);
   98f22:	482c      	ldr	r0, [pc, #176]	; (98fd4 <DD_INIT_INT+0xd0>)
   98f24:	2101      	movs	r1, #1
   98f26:	4b2c      	ldr	r3, [pc, #176]	; (98fd8 <DD_INIT_INT+0xd4>)
   98f28:	4798      	blx	r3
		
	NVIC_DisableIRQ(TC0_IRQn);
   98f2a:	201b      	movs	r0, #27
   98f2c:	4b25      	ldr	r3, [pc, #148]	; (98fc4 <DD_INIT_INT+0xc0>)
   98f2e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC0_IRQn);
   98f30:	201b      	movs	r0, #27
   98f32:	4b25      	ldr	r3, [pc, #148]	; (98fc8 <DD_INIT_INT+0xc4>)
   98f34:	4798      	blx	r3
	NVIC_SetPriority(TC0_IRQn, 0);
   98f36:	201b      	movs	r0, #27
   98f38:	2100      	movs	r1, #0
   98f3a:	4b24      	ldr	r3, [pc, #144]	; (98fcc <DD_INIT_INT+0xc8>)
   98f3c:	4798      	blx	r3
	NVIC_EnableIRQ(TC0_IRQn);
   98f3e:	201b      	movs	r0, #27
   98f40:	4b23      	ldr	r3, [pc, #140]	; (98fd0 <DD_INIT_INT+0xcc>)
   98f42:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC2_IRQn);
	NVIC_ClearPendingIRQ(TC2_IRQn);
	NVIC_SetPriority(TC2_IRQn, 0);*/
	
	NVIC_DisableIRQ(TC3_IRQn);
   98f44:	201e      	movs	r0, #30
   98f46:	4b1f      	ldr	r3, [pc, #124]	; (98fc4 <DD_INIT_INT+0xc0>)
   98f48:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC3_IRQn);
   98f4a:	201e      	movs	r0, #30
   98f4c:	4b1e      	ldr	r3, [pc, #120]	; (98fc8 <DD_INIT_INT+0xc4>)
   98f4e:	4798      	blx	r3
	NVIC_SetPriority(TC3_IRQn,0);
   98f50:	201e      	movs	r0, #30
   98f52:	2100      	movs	r1, #0
   98f54:	4b1d      	ldr	r3, [pc, #116]	; (98fcc <DD_INIT_INT+0xc8>)
   98f56:	4798      	blx	r3
	NVIC_EnableIRQ(TC3_IRQn);
   98f58:	201e      	movs	r0, #30
   98f5a:	4b1d      	ldr	r3, [pc, #116]	; (98fd0 <DD_INIT_INT+0xcc>)
   98f5c:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC5_IRQn);
	NVIC_ClearPendingIRQ(TC5_IRQn);
	NVIC_SetPriority(TC5_IRQn, 0);
	*/
	NVIC_DisableIRQ(TC6_IRQn);
   98f5e:	2021      	movs	r0, #33	; 0x21
   98f60:	4b18      	ldr	r3, [pc, #96]	; (98fc4 <DD_INIT_INT+0xc0>)
   98f62:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC6_IRQn);
   98f64:	2021      	movs	r0, #33	; 0x21
   98f66:	4b18      	ldr	r3, [pc, #96]	; (98fc8 <DD_INIT_INT+0xc4>)
   98f68:	4798      	blx	r3
	NVIC_SetPriority(TC6_IRQn, 0);
   98f6a:	2021      	movs	r0, #33	; 0x21
   98f6c:	2100      	movs	r1, #0
   98f6e:	4b17      	ldr	r3, [pc, #92]	; (98fcc <DD_INIT_INT+0xc8>)
   98f70:	4798      	blx	r3
	NVIC_EnableIRQ(TC6_IRQn);
   98f72:	2021      	movs	r0, #33	; 0x21
   98f74:	4b16      	ldr	r3, [pc, #88]	; (98fd0 <DD_INIT_INT+0xcc>)
   98f76:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC8_IRQn);
	NVIC_SetPriority(TC8_IRQn, 0);
*/
	
	
	NVIC->ICER[6] = 0xFFFFFFFF;
   98f78:	4b18      	ldr	r3, [pc, #96]	; (98fdc <DD_INIT_INT+0xd8>)
   98f7a:	f04f 32ff 	mov.w	r2, #4294967295
   98f7e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	NVIC->ICPR[6] = 0XFFFFFFFF;
   98f82:	4b16      	ldr	r3, [pc, #88]	; (98fdc <DD_INIT_INT+0xd8>)
   98f84:	f04f 32ff 	mov.w	r2, #4294967295
   98f88:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	NVIC_SetPriority(TC6_IRQn, 0);
   98f8c:	2021      	movs	r0, #33	; 0x21
   98f8e:	2100      	movs	r1, #0
   98f90:	4b0e      	ldr	r3, [pc, #56]	; (98fcc <DD_INIT_INT+0xc8>)
   98f92:	4798      	blx	r3
	//NVIC_EnableIRQ(TC6_IRQn);
	NVIC->ISER[6] = 0xFFFFFFFF;
   98f94:	4b11      	ldr	r3, [pc, #68]	; (98fdc <DD_INIT_INT+0xd8>)
   98f96:	f04f 32ff 	mov.w	r2, #4294967295
   98f9a:	619a      	str	r2, [r3, #24]
	
	
	// FOR TIMER2 OF 100ms MEANS 10HZ FREQUENCY
	NVIC->ICER[3] = 0xFFFFFFFF;
   98f9c:	4b0f      	ldr	r3, [pc, #60]	; (98fdc <DD_INIT_INT+0xd8>)
   98f9e:	f04f 32ff 	mov.w	r2, #4294967295
   98fa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	NVIC->ICPR[3] = 0XFFFFFFFF;
   98fa6:	4b0d      	ldr	r3, [pc, #52]	; (98fdc <DD_INIT_INT+0xd8>)
   98fa8:	f04f 32ff 	mov.w	r2, #4294967295
   98fac:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	//NVIC_DisableIRQ(TC3_IRQn);
	//NVIC_ClearPendingIRQ(TC3_IRQn);
	NVIC_SetPriority(TC3_IRQn, 0);
   98fb0:	201e      	movs	r0, #30
   98fb2:	2100      	movs	r1, #0
   98fb4:	4b05      	ldr	r3, [pc, #20]	; (98fcc <DD_INIT_INT+0xc8>)
   98fb6:	4798      	blx	r3
	//NVIC_EnableIRQ(TC3_IRQn);
	NVIC->ISER[3] = 0xFFFFFFFF;
   98fb8:	4b08      	ldr	r3, [pc, #32]	; (98fdc <DD_INIT_INT+0xd8>)
   98fba:	f04f 32ff 	mov.w	r2, #4294967295
   98fbe:	60da      	str	r2, [r3, #12]
// 		NVIC_SetPriority(PIOB_IRQn, 15);
//  		NVIC_EnableIRQ(PIOB_IRQn);
		
		

}
   98fc0:	bd80      	pop	{r7, pc}
   98fc2:	bf00      	nop
   98fc4:	00098e49 	.word	0x00098e49
   98fc8:	00098e7d 	.word	0x00098e7d
   98fcc:	00098eb1 	.word	0x00098eb1
   98fd0:	00098e19 	.word	0x00098e19
   98fd4:	400e0800 	.word	0x400e0800
   98fd8:	0009c785 	.word	0x0009c785
   98fdc:	e000e100 	.word	0xe000e100

00098fe0 <DD_INIT_NVM>:
 */ 

#include "DD_NVM.h"

void DD_INIT_NVM()
{
   98fe0:	b590      	push	{r4, r7, lr}
   98fe2:	b0c7      	sub	sp, #284	; 0x11c
   98fe4:	af00      	add	r7, sp, #0
	
	uint32_t ul_last_page_addr = LAST_PAGE_ADDRESS;
   98fe6:	4b49      	ldr	r3, [pc, #292]	; (9910c <DD_INIT_NVM+0x12c>)
   98fe8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint32_t *pul_last_page = (uint32_t *) ul_last_page_addr;
   98fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
   98ff0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t ul_rc;
	uint32_t ul_idx;
	uint8_t uc_key, cnt = 0;
   98ff4:	2300      	movs	r3, #0
   98ff6:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	
	uint32_t ul_page_buffer[IFLASH_PAGE_SIZE / sizeof(uint32_t)];
	
	
	ul_rc = flash_init(FLASH_ACCESS_MODE_128, 6);
   98ffa:	2000      	movs	r0, #0
   98ffc:	2106      	movs	r1, #6
   98ffe:	4b44      	ldr	r3, [pc, #272]	; (99110 <DD_INIT_NVM+0x130>)
   99000:	4798      	blx	r3
   99002:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	if (ul_rc != FLASH_RC_OK)
   99006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   9900a:	2b00      	cmp	r3, #0
   9900c:	d000      	beq.n	99010 <DD_INIT_NVM+0x30>
	 {
	//	printf("-F- Initialization error %lu\n\r", (UL)ul_rc);
		return 0;
   9900e:	e079      	b.n	99104 <DD_INIT_NVM+0x124>
		
	
	
	/* Unlock page */
	//printf("-I- Unlocking last page: 0x%08x\r\n", ul_last_page_addr);
	ul_rc = flash_unlock(ul_last_page_addr,
   99010:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
   99014:	33ff      	adds	r3, #255	; 0xff
   99016:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
   9901a:	4619      	mov	r1, r3
   9901c:	2200      	movs	r2, #0
   9901e:	2300      	movs	r3, #0
   99020:	4c3c      	ldr	r4, [pc, #240]	; (99114 <DD_INIT_NVM+0x134>)
   99022:	47a0      	blx	r4
   99024:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	ul_last_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
	if (ul_rc != FLASH_RC_OK) {
   99028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   9902c:	2b00      	cmp	r3, #0
   9902e:	d000      	beq.n	99032 <DD_INIT_NVM+0x52>
		//printf("-F- Unlock error %lu\n\r", (UL)ul_rc);
		return 0;
   99030:	e068      	b.n	99104 <DD_INIT_NVM+0x124>
	}
	
	/* Write page */
	//printf("-I- Writing last page with walking bit pattern\n\r");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++)
   99032:	2300      	movs	r3, #0
   99034:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   99038:	e010      	b.n	9905c <DD_INIT_NVM+0x7c>
	 {
		ul_page_buffer[ul_idx] = cnt ;   //1 << (ul_idx % 32);
   9903a:	f897 1113 	ldrb.w	r1, [r7, #275]	; 0x113
   9903e:	463b      	mov	r3, r7
   99040:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
   99044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		cnt ++;
   99048:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
   9904c:	3301      	adds	r3, #1
   9904e:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		return 0;
	}
	
	/* Write page */
	//printf("-I- Writing last page with walking bit pattern\n\r");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++)
   99052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   99056:	3301      	adds	r3, #1
   99058:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   9905c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   99060:	2b3f      	cmp	r3, #63	; 0x3f
   99062:	d9ea      	bls.n	9903a <DD_INIT_NVM+0x5a>
// 	}
	
	
	/* Validate page */
	//printf("-I- Checking page contents ");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++) {
   99064:	2300      	movs	r3, #0
   99066:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   9906a:	e013      	b.n	99094 <DD_INIT_NVM+0xb4>
		//printf(".");
		if (pul_last_page[ul_idx] != ul_page_buffer[ul_idx]) {
   9906c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   99070:	009b      	lsls	r3, r3, #2
   99072:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
   99076:	4413      	add	r3, r2
   99078:	681a      	ldr	r2, [r3, #0]
   9907a:	463b      	mov	r3, r7
   9907c:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
   99080:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   99084:	429a      	cmp	r2, r3
   99086:	d000      	beq.n	9908a <DD_INIT_NVM+0xaa>
			//printf("\n\r-F- data error\n\r");
			return 0;
   99088:	e03c      	b.n	99104 <DD_INIT_NVM+0x124>
// 	}
	
	
	/* Validate page */
	//printf("-I- Checking page contents ");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++) {
   9908a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   9908e:	3301      	adds	r3, #1
   99090:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   99094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   99098:	2b3f      	cmp	r3, #63	; 0x3f
   9909a:	d9e7      	bls.n	9906c <DD_INIT_NVM+0x8c>
	
	
	
		/* Lock page */
		//printf("-I- Locking last page\n\r");
		ul_rc = flash_lock(ul_last_page_addr,
   9909c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
   990a0:	33ff      	adds	r3, #255	; 0xff
   990a2:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
   990a6:	4619      	mov	r1, r3
   990a8:	2200      	movs	r2, #0
   990aa:	2300      	movs	r3, #0
   990ac:	4c1a      	ldr	r4, [pc, #104]	; (99118 <DD_INIT_NVM+0x138>)
   990ae:	47a0      	blx	r4
   990b0:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
		ul_last_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
		if (ul_rc != FLASH_RC_OK) {
   990b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   990b8:	2b00      	cmp	r3, #0
   990ba:	d000      	beq.n	990be <DD_INIT_NVM+0xde>
			//printf("-F- Flash locking error %lu\n\r", (UL)ul_rc);
			return 0;
   990bc:	e022      	b.n	99104 <DD_INIT_NVM+0x124>
		}

		/* Check if the associated region is locked. */
		//printf("-I- Try to program the locked page ...\n\r");
		ul_rc = flash_write(ul_last_page_addr, ul_page_buffer,
   990be:	463b      	mov	r3, r7
   990c0:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
   990c4:	4619      	mov	r1, r3
   990c6:	f44f 7280 	mov.w	r2, #256	; 0x100
   990ca:	2301      	movs	r3, #1
   990cc:	4c13      	ldr	r4, [pc, #76]	; (9911c <DD_INIT_NVM+0x13c>)
   990ce:	47a0      	blx	r4
   990d0:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
		}

		//printf("-I- Please open Segger's JMem program \n\r");
		//printf("-I- Read memory at address 0x%08lx to check contents\n\r",		(UL)ul_last_page_addr);
		//printf("-I- Press any key to continue...\n\r");
		while (0 != uart_read(CONSOLE_UART, &uc_key));
   990d4:	bf00      	nop
   990d6:	f207 1303 	addw	r3, r7, #259	; 0x103
   990da:	4811      	ldr	r0, [pc, #68]	; (99120 <DD_INIT_NVM+0x140>)
   990dc:	4619      	mov	r1, r3
   990de:	4b11      	ldr	r3, [pc, #68]	; (99124 <DD_INIT_NVM+0x144>)
   990e0:	4798      	blx	r3
   990e2:	4603      	mov	r3, r0
   990e4:	2b00      	cmp	r3, #0
   990e6:	d1f6      	bne.n	990d6 <DD_INIT_NVM+0xf6>

		//printf("-I- Good job!\n\r""-I- Now set the security bit \n\r"		"-I- Press any key to continue to see what happened...\n\r");
		while (0 != uart_read(CONSOLE_UART, &uc_key));
   990e8:	bf00      	nop
   990ea:	f207 1303 	addw	r3, r7, #259	; 0x103
   990ee:	480c      	ldr	r0, [pc, #48]	; (99120 <DD_INIT_NVM+0x140>)
   990f0:	4619      	mov	r1, r3
   990f2:	4b0c      	ldr	r3, [pc, #48]	; (99124 <DD_INIT_NVM+0x144>)
   990f4:	4798      	blx	r3
   990f6:	4603      	mov	r3, r0
   990f8:	2b00      	cmp	r3, #0
   990fa:	d1f6      	bne.n	990ea <DD_INIT_NVM+0x10a>
		
		
		/* Set security bit */
		//printf("-I- Setting security bit \n\r");
		ul_rc = flash_enable_security_bit();
   990fc:	4b0a      	ldr	r3, [pc, #40]	; (99128 <DD_INIT_NVM+0x148>)
   990fe:	4798      	blx	r3
   99100:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

		//printf("-I- All tests done\n\r");



}
   99104:	f507 778e 	add.w	r7, r7, #284	; 0x11c
   99108:	46bd      	mov	sp, r7
   9910a:	bd90      	pop	{r4, r7, pc}
   9910c:	000fff00 	.word	0x000fff00
   99110:	00080831 	.word	0x00080831
   99114:	00080a69 	.word	0x00080a69
   99118:	000809c5 	.word	0x000809c5
   9911c:	00080865 	.word	0x00080865
   99120:	400e0800 	.word	0x400e0800
   99124:	0009c7e9 	.word	0x0009c7e9
   99128:	00080bb5 	.word	0x00080bb5

0009912c <DD_INIT_PWM>:

#include "DD_PWM.h"
#include "Platform/Drivers/DD_SYS/DD_SYS.h"

void DD_INIT_PWM()
{
   9912c:	b480      	push	{r7}
   9912e:	af00      	add	r7, sp, #0
	PWM->PWM_WPCR = 0x50574D00;
   99130:	4b2b      	ldr	r3, [pc, #172]	; (991e0 <DD_INIT_PWM+0xb4>)
   99132:	4a2c      	ldr	r2, [pc, #176]	; (991e4 <DD_INIT_PWM+0xb8>)
   99134:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PWM->PWM_CH_NUM[0].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   99138:	4b29      	ldr	r3, [pc, #164]	; (991e0 <DD_INIT_PWM+0xb4>)
   9913a:	4a2b      	ldr	r2, [pc, #172]	; (991e8 <DD_INIT_PWM+0xbc>)
   9913c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	PWM->PWM_CH_NUM[1].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   99140:	4b27      	ldr	r3, [pc, #156]	; (991e0 <DD_INIT_PWM+0xb4>)
   99142:	4a29      	ldr	r2, [pc, #164]	; (991e8 <DD_INIT_PWM+0xbc>)
   99144:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	PWM->PWM_CH_NUM[2].PWM_CMR= PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   99148:	4b25      	ldr	r3, [pc, #148]	; (991e0 <DD_INIT_PWM+0xb4>)
   9914a:	4a27      	ldr	r2, [pc, #156]	; (991e8 <DD_INIT_PWM+0xbc>)
   9914c:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	//PWM->PWM_CH_NUM[4].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
	PWM->PWM_CH_NUM[5].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_16|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   99150:	4b23      	ldr	r3, [pc, #140]	; (991e0 <DD_INIT_PWM+0xb4>)
   99152:	4a26      	ldr	r2, [pc, #152]	; (991ec <DD_INIT_PWM+0xc0>)
   99154:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0


	//PIOC->PIO_ABSR = 0x00E00054;


	PWM->PWM_DIS = 0x000000FF;
   99158:	4b21      	ldr	r3, [pc, #132]	; (991e0 <DD_INIT_PWM+0xb4>)
   9915a:	22ff      	movs	r2, #255	; 0xff
   9915c:	609a      	str	r2, [r3, #8]
	PWM->PWM_CLK = 0X00000A05; // earlier a06
   9915e:	4b20      	ldr	r3, [pc, #128]	; (991e0 <DD_INIT_PWM+0xb4>)
   99160:	f640 2205 	movw	r2, #2565	; 0xa05
   99164:	601a      	str	r2, [r3, #0]
	PWM->PWM_CH_NUM[4].PWM_CMR = 0x0000000B; // selecting CLOCKA
   99166:	4b1e      	ldr	r3, [pc, #120]	; (991e0 <DD_INIT_PWM+0xb4>)
   99168:	220b      	movs	r2, #11
   9916a:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
// 	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x000001FA;
// 	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x000000FD;
// 	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x000000F8;
// 	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x0000007C;
	PWM->PWM_CH_NUM[4].PWM_CPRD =1000;
   9916e:	4b1c      	ldr	r3, [pc, #112]	; (991e0 <DD_INIT_PWM+0xb4>)
   99170:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   99174:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	PWM->PWM_CH_NUM[4].PWM_CDTY = 500;
   99178:	4b19      	ldr	r3, [pc, #100]	; (991e0 <DD_INIT_PWM+0xb4>)
   9917a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   9917e:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284


	
	//PWM->PWM_CH_NUM[5].PWM_CPRD = 0x000016b5;
	PWM->PWM_CH_NUM[5].PWM_CPRD = 28000;
   99182:	4b17      	ldr	r3, [pc, #92]	; (991e0 <DD_INIT_PWM+0xb4>)
   99184:	f646 5260 	movw	r2, #28000	; 0x6d60
   99188:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY = 0x00000b5a;
   9918c:	4b14      	ldr	r3, [pc, #80]	; (991e0 <DD_INIT_PWM+0xb4>)
   9918e:	f640 325a 	movw	r2, #2906	; 0xb5a
   99192:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	
//	PWM->PWM_CH_NUM[6].PWM_CPRD = 0x00000600;
//	PWM->PWM_CH_NUM[6].PWM_CDTY = 0x00000200;

	PWM->PWM_CH_NUM[0].PWM_CPRD = 0x00000550;
   99196:	4b12      	ldr	r3, [pc, #72]	; (991e0 <DD_INIT_PWM+0xb4>)
   99198:	f44f 62aa 	mov.w	r2, #1360	; 0x550
   9919c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	//PWM->PWM_CH_NUM[0].PWM_CDTY = 0x00000000;		//0x00000514;     commented on 12-05-2017 to start with zero duty dc motor2
	PWM->PWM_CH_NUM[0].PWM_CDTY = 800;
   991a0:	4b0f      	ldr	r3, [pc, #60]	; (991e0 <DD_INIT_PWM+0xb4>)
   991a2:	f44f 7248 	mov.w	r2, #800	; 0x320
   991a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	
	
	
	PWM->PWM_CH_NUM[1].PWM_CPRD = 0x00001000;  // heater
   991aa:	4b0d      	ldr	r3, [pc, #52]	; (991e0 <DD_INIT_PWM+0xb4>)
   991ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   991b0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	PWM->PWM_CH_NUM[1].PWM_CDTY = 0x00000800;
   991b4:	4b0a      	ldr	r3, [pc, #40]	; (991e0 <DD_INIT_PWM+0xb4>)
   991b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   991ba:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	

	PWM->PWM_CH_NUM[2].PWM_CPRD = 0x00000550;
   991be:	4b08      	ldr	r3, [pc, #32]	; (991e0 <DD_INIT_PWM+0xb4>)
   991c0:	f44f 62aa 	mov.w	r2, #1360	; 0x550
   991c4:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
	//PWM->PWM_CH_NUM[2].PWM_CDTY = 0x0000038E;
//	PWM->PWM_CH_NUM[2].PWM_CDTY = 0x00000000;		//0x000003B6;     commented on 12-05-2017 to start with zero duty   dc motor1
	PWM->PWM_CH_NUM[2].PWM_CDTY = 800;
   991c8:	4b05      	ldr	r3, [pc, #20]	; (991e0 <DD_INIT_PWM+0xb4>)
   991ca:	f44f 7248 	mov.w	r2, #800	; 0x320
   991ce:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
//	PWM->PWM_ENA = 0x000000FF;
	PWM->PWM_ENA = 0x00000037;	                    
   991d2:	4b03      	ldr	r3, [pc, #12]	; (991e0 <DD_INIT_PWM+0xb4>)
   991d4:	2237      	movs	r2, #55	; 0x37
   991d6:	605a      	str	r2, [r3, #4]


	
	
}
   991d8:	46bd      	mov	sp, r7
   991da:	f85d 7b04 	ldr.w	r7, [sp], #4
   991de:	4770      	bx	lr
   991e0:	40094000 	.word	0x40094000
   991e4:	50574d00 	.word	0x50574d00
   991e8:	00070605 	.word	0x00070605
   991ec:	00070604 	.word	0x00070604

000991f0 <DD_SET_DUTY>:


 uint32_t DD_SET_DUTY(const pwm_chnl CHANNEL_NUMBER,uint32_t DUTY)
 {
   991f0:	b480      	push	{r7}
   991f2:	b083      	sub	sp, #12
   991f4:	af00      	add	r7, sp, #0
   991f6:	4603      	mov	r3, r0
   991f8:	6039      	str	r1, [r7, #0]
   991fa:	71fb      	strb	r3, [r7, #7]
	// PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CDTYUPD = DUTY;
//	PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CPRD = 0x800;
	 PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CDTY = DUTY;
   991fc:	4a06      	ldr	r2, [pc, #24]	; (99218 <DD_SET_DUTY+0x28>)
   991fe:	79fb      	ldrb	r3, [r7, #7]
   99200:	3310      	adds	r3, #16
   99202:	015b      	lsls	r3, r3, #5
   99204:	4413      	add	r3, r2
   99206:	683a      	ldr	r2, [r7, #0]
   99208:	605a      	str	r2, [r3, #4]
	 
	 return 0;
   9920a:	2300      	movs	r3, #0
 }
   9920c:	4618      	mov	r0, r3
   9920e:	370c      	adds	r7, #12
   99210:	46bd      	mov	sp, r7
   99212:	f85d 7b04 	ldr.w	r7, [sp], #4
   99216:	4770      	bx	lr
   99218:	40094000 	.word	0x40094000

0009921c <DD_SET_PRDY>:
 
 uint32_t DD_SET_PRDY(const pwm_chnl CHANNEL_NUMBER,uint32_t PERIOD_VALUE)
 {
   9921c:	b480      	push	{r7}
   9921e:	b083      	sub	sp, #12
   99220:	af00      	add	r7, sp, #0
   99222:	4603      	mov	r3, r0
   99224:	6039      	str	r1, [r7, #0]
   99226:	71fb      	strb	r3, [r7, #7]
	 PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CPRDUPD = PERIOD_VALUE;
   99228:	4a07      	ldr	r2, [pc, #28]	; (99248 <DD_SET_PRDY+0x2c>)
   9922a:	79fb      	ldrb	r3, [r7, #7]
   9922c:	015b      	lsls	r3, r3, #5
   9922e:	4413      	add	r3, r2
   99230:	f503 7304 	add.w	r3, r3, #528	; 0x210
   99234:	683a      	ldr	r2, [r7, #0]
   99236:	601a      	str	r2, [r3, #0]
	// PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CPRD = PERIOD_VALUE;
	 
	 return 0;
   99238:	2300      	movs	r3, #0
 }
   9923a:	4618      	mov	r0, r3
   9923c:	370c      	adds	r7, #12
   9923e:	46bd      	mov	sp, r7
   99240:	f85d 7b04 	ldr.w	r7, [sp], #4
   99244:	4770      	bx	lr
   99246:	bf00      	nop
   99248:	40094000 	.word	0x40094000

0009924c <dd_spi_set_transfer_delay>:
void dd_spi_set_delay_between_chip_select(uint32_t ul_delay) {
	SPI0->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
	SPI0->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
}

void dd_spi_set_transfer_delay(uint16_t ul_pcs_group_id, uint8_t uc_dlybs, uint8_t uc_dlybct)  {
   9924c:	b490      	push	{r4, r7}
   9924e:	b082      	sub	sp, #8
   99250:	af00      	add	r7, sp, #0
   99252:	4603      	mov	r3, r0
   99254:	80fb      	strh	r3, [r7, #6]
   99256:	460b      	mov	r3, r1
   99258:	717b      	strb	r3, [r7, #5]
   9925a:	4613      	mov	r3, r2
   9925c:	713b      	strb	r3, [r7, #4]
	SPI0->SPI_CSR[ul_pcs_group_id] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   9925e:	4910      	ldr	r1, [pc, #64]	; (992a0 <dd_spi_set_transfer_delay+0x54>)
   99260:	88fb      	ldrh	r3, [r7, #6]
   99262:	480f      	ldr	r0, [pc, #60]	; (992a0 <dd_spi_set_transfer_delay+0x54>)
   99264:	88fa      	ldrh	r2, [r7, #6]
   99266:	320c      	adds	r2, #12
   99268:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   9926c:	b292      	uxth	r2, r2
   9926e:	330c      	adds	r3, #12
   99270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_DLYBS(uc_dlybs) | SPI_CSR_DLYBCT(uc_dlybct);
   99274:	4c0a      	ldr	r4, [pc, #40]	; (992a0 <dd_spi_set_transfer_delay+0x54>)
   99276:	88fb      	ldrh	r3, [r7, #6]
   99278:	4909      	ldr	r1, [pc, #36]	; (992a0 <dd_spi_set_transfer_delay+0x54>)
   9927a:	88fa      	ldrh	r2, [r7, #6]
   9927c:	320c      	adds	r2, #12
   9927e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   99282:	797a      	ldrb	r2, [r7, #5]
   99284:	0412      	lsls	r2, r2, #16
   99286:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   9928a:	7938      	ldrb	r0, [r7, #4]
   9928c:	0600      	lsls	r0, r0, #24
   9928e:	4302      	orrs	r2, r0
   99290:	430a      	orrs	r2, r1
   99292:	330c      	adds	r3, #12
   99294:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
}
   99298:	3708      	adds	r7, #8
   9929a:	46bd      	mov	sp, r7
   9929c:	bc90      	pop	{r4, r7}
   9929e:	4770      	bx	lr
   992a0:	40008000 	.word	0x40008000

000992a4 <dd_spi_set_bits_per_transfer>:

void dd_spi_set_bits_per_transfer(uint16_t ul_pcs_group_id, uint32_t ul_bits)
{
   992a4:	b480      	push	{r7}
   992a6:	b083      	sub	sp, #12
   992a8:	af00      	add	r7, sp, #0
   992aa:	4603      	mov	r3, r0
   992ac:	6039      	str	r1, [r7, #0]
   992ae:	80fb      	strh	r3, [r7, #6]
	SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_BITS_Msk);
   992b0:	490e      	ldr	r1, [pc, #56]	; (992ec <dd_spi_set_bits_per_transfer+0x48>)
   992b2:	88fb      	ldrh	r3, [r7, #6]
   992b4:	480d      	ldr	r0, [pc, #52]	; (992ec <dd_spi_set_bits_per_transfer+0x48>)
   992b6:	88fa      	ldrh	r2, [r7, #6]
   992b8:	320c      	adds	r2, #12
   992ba:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   992be:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
   992c2:	330c      	adds	r3, #12
   992c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= ul_bits;
   992c8:	4808      	ldr	r0, [pc, #32]	; (992ec <dd_spi_set_bits_per_transfer+0x48>)
   992ca:	88fb      	ldrh	r3, [r7, #6]
   992cc:	4907      	ldr	r1, [pc, #28]	; (992ec <dd_spi_set_bits_per_transfer+0x48>)
   992ce:	88fa      	ldrh	r2, [r7, #6]
   992d0:	320c      	adds	r2, #12
   992d2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   992d6:	683a      	ldr	r2, [r7, #0]
   992d8:	430a      	orrs	r2, r1
   992da:	330c      	adds	r3, #12
   992dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   992e0:	370c      	adds	r7, #12
   992e2:	46bd      	mov	sp, r7
   992e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   992e8:	4770      	bx	lr
   992ea:	bf00      	nop
   992ec:	40008000 	.word	0x40008000

000992f0 <dd_spi_set_clock_polarity>:
		SPI0->SPI_WPMR =  (0x5350490u << 1);
	}
	
}

void dd_spi_set_clock_polarity(uint16_t ul_pcs_group_id, uint32_t ul_polarity)   {
   992f0:	b480      	push	{r7}
   992f2:	b083      	sub	sp, #12
   992f4:	af00      	add	r7, sp, #0
   992f6:	4603      	mov	r3, r0
   992f8:	6039      	str	r1, [r7, #0]
   992fa:	80fb      	strh	r3, [r7, #6]
	
	if (ul_polarity) {
   992fc:	683b      	ldr	r3, [r7, #0]
   992fe:	2b00      	cmp	r3, #0
   99300:	d00c      	beq.n	9931c <dd_spi_set_clock_polarity+0x2c>
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_CPOL;
   99302:	490f      	ldr	r1, [pc, #60]	; (99340 <dd_spi_set_clock_polarity+0x50>)
   99304:	88fb      	ldrh	r3, [r7, #6]
   99306:	480e      	ldr	r0, [pc, #56]	; (99340 <dd_spi_set_clock_polarity+0x50>)
   99308:	88fa      	ldrh	r2, [r7, #6]
   9930a:	320c      	adds	r2, #12
   9930c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   99310:	f042 0201 	orr.w	r2, r2, #1
   99314:	330c      	adds	r3, #12
   99316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   9931a:	e00b      	b.n	99334 <dd_spi_set_clock_polarity+0x44>
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_CPOL);
   9931c:	4908      	ldr	r1, [pc, #32]	; (99340 <dd_spi_set_clock_polarity+0x50>)
   9931e:	88fb      	ldrh	r3, [r7, #6]
   99320:	4807      	ldr	r0, [pc, #28]	; (99340 <dd_spi_set_clock_polarity+0x50>)
   99322:	88fa      	ldrh	r2, [r7, #6]
   99324:	320c      	adds	r2, #12
   99326:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   9932a:	f022 0201 	bic.w	r2, r2, #1
   9932e:	330c      	adds	r3, #12
   99330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}	
}
   99334:	370c      	adds	r7, #12
   99336:	46bd      	mov	sp, r7
   99338:	f85d 7b04 	ldr.w	r7, [sp], #4
   9933c:	4770      	bx	lr
   9933e:	bf00      	nop
   99340:	40008000 	.word	0x40008000

00099344 <dd_spi_set_clock_phase>:

void dd_spi_set_clock_phase(uint16_t ul_pcs_group_id, uint32_t ul_phase)
{
   99344:	b480      	push	{r7}
   99346:	b083      	sub	sp, #12
   99348:	af00      	add	r7, sp, #0
   9934a:	4603      	mov	r3, r0
   9934c:	6039      	str	r1, [r7, #0]
   9934e:	80fb      	strh	r3, [r7, #6]
	if (ul_phase) {
   99350:	683b      	ldr	r3, [r7, #0]
   99352:	2b00      	cmp	r3, #0
   99354:	d00c      	beq.n	99370 <dd_spi_set_clock_phase+0x2c>
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_NCPHA;
   99356:	490f      	ldr	r1, [pc, #60]	; (99394 <dd_spi_set_clock_phase+0x50>)
   99358:	88fb      	ldrh	r3, [r7, #6]
   9935a:	480e      	ldr	r0, [pc, #56]	; (99394 <dd_spi_set_clock_phase+0x50>)
   9935c:	88fa      	ldrh	r2, [r7, #6]
   9935e:	320c      	adds	r2, #12
   99360:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   99364:	f042 0202 	orr.w	r2, r2, #2
   99368:	330c      	adds	r3, #12
   9936a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   9936e:	e00b      	b.n	99388 <dd_spi_set_clock_phase+0x44>
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_NCPHA);
   99370:	4908      	ldr	r1, [pc, #32]	; (99394 <dd_spi_set_clock_phase+0x50>)
   99372:	88fb      	ldrh	r3, [r7, #6]
   99374:	4807      	ldr	r0, [pc, #28]	; (99394 <dd_spi_set_clock_phase+0x50>)
   99376:	88fa      	ldrh	r2, [r7, #6]
   99378:	320c      	adds	r2, #12
   9937a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   9937e:	f022 0202 	bic.w	r2, r2, #2
   99382:	330c      	adds	r3, #12
   99384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
   99388:	370c      	adds	r7, #12
   9938a:	46bd      	mov	sp, r7
   9938c:	f85d 7b04 	ldr.w	r7, [sp], #4
   99390:	4770      	bx	lr
   99392:	bf00      	nop
   99394:	40008000 	.word	0x40008000

00099398 <dd_spi_set_baudrate_div>:

int16_t dd_spi_set_baudrate_div(uint16_t ul_pcs_group_id,uint8_t uc_baudrate_divider)
{
   99398:	b480      	push	{r7}
   9939a:	b083      	sub	sp, #12
   9939c:	af00      	add	r7, sp, #0
   9939e:	4603      	mov	r3, r0
   993a0:	460a      	mov	r2, r1
   993a2:	80fb      	strh	r3, [r7, #6]
   993a4:	4613      	mov	r3, r2
   993a6:	717b      	strb	r3, [r7, #5]
	/* Programming the SCBR field to 0 is forbidden */
	if (!uc_baudrate_divider)
   993a8:	797b      	ldrb	r3, [r7, #5]
   993aa:	2b00      	cmp	r3, #0
   993ac:	d102      	bne.n	993b4 <dd_spi_set_baudrate_div+0x1c>
	return -1;
   993ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
   993b2:	e01a      	b.n	993ea <dd_spi_set_baudrate_div+0x52>

	SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_SCBR_Msk);
   993b4:	4910      	ldr	r1, [pc, #64]	; (993f8 <dd_spi_set_baudrate_div+0x60>)
   993b6:	88fb      	ldrh	r3, [r7, #6]
   993b8:	480f      	ldr	r0, [pc, #60]	; (993f8 <dd_spi_set_baudrate_div+0x60>)
   993ba:	88fa      	ldrh	r2, [r7, #6]
   993bc:	320c      	adds	r2, #12
   993be:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   993c2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
   993c6:	330c      	adds	r3, #12
   993c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_SCBR(uc_baudrate_divider);
   993cc:	480a      	ldr	r0, [pc, #40]	; (993f8 <dd_spi_set_baudrate_div+0x60>)
   993ce:	88fb      	ldrh	r3, [r7, #6]
   993d0:	4909      	ldr	r1, [pc, #36]	; (993f8 <dd_spi_set_baudrate_div+0x60>)
   993d2:	88fa      	ldrh	r2, [r7, #6]
   993d4:	320c      	adds	r2, #12
   993d6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   993da:	797a      	ldrb	r2, [r7, #5]
   993dc:	0212      	lsls	r2, r2, #8
   993de:	b292      	uxth	r2, r2
   993e0:	430a      	orrs	r2, r1
   993e2:	330c      	adds	r3, #12
   993e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	return 0;
   993e8:	2300      	movs	r3, #0
   993ea:	b21b      	sxth	r3, r3
}
   993ec:	4618      	mov	r0, r3
   993ee:	370c      	adds	r7, #12
   993f0:	46bd      	mov	sp, r7
   993f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   993f6:	4770      	bx	lr
   993f8:	40008000 	.word	0x40008000

000993fc <DD_SPI_SET_POT>:
{
	SPI0->SPI_MR &= (~SPI_MR_PCS_Msk);
	SPI0->SPI_MR |= ((SPI_MR_PCS_Msk & ((pcs_ul_value) << SPI_MR_PCS_Pos)));
}

void DD_SPI_SET_POT(void *p_buf, uint32_t size)  {
   993fc:	b580      	push	{r7, lr}
   993fe:	b086      	sub	sp, #24
   99400:	af00      	add	r7, sp, #0
   99402:	6078      	str	r0, [r7, #4]
   99404:	6039      	str	r1, [r7, #0]
	uint8_t uc_pcs;
	static uint16_t data;

	uint16_t *p_buffer;

	p_buffer = p_buf;
   99406:	687b      	ldr	r3, [r7, #4]
   99408:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < size; i++) {
   9940a:	2300      	movs	r3, #0
   9940c:	617b      	str	r3, [r7, #20]
   9940e:	e029      	b.n	99464 <DD_SPI_SET_POT+0x68>
		dd_spi_write(p_buffer[i]);
   99410:	697b      	ldr	r3, [r7, #20]
   99412:	005b      	lsls	r3, r3, #1
   99414:	68fa      	ldr	r2, [r7, #12]
   99416:	4413      	add	r3, r2
   99418:	881b      	ldrh	r3, [r3, #0]
   9941a:	4618      	mov	r0, r3
   9941c:	4b15      	ldr	r3, [pc, #84]	; (99474 <DD_SPI_SET_POT+0x78>)
   9941e:	4798      	blx	r3
		
		for (uint32_t  j=0;j<10000;j++)
   99420:	2300      	movs	r3, #0
   99422:	613b      	str	r3, [r7, #16]
   99424:	e002      	b.n	9942c <DD_SPI_SET_POT+0x30>
   99426:	693b      	ldr	r3, [r7, #16]
   99428:	3301      	adds	r3, #1
   9942a:	613b      	str	r3, [r7, #16]
   9942c:	693b      	ldr	r3, [r7, #16]
   9942e:	f242 720f 	movw	r2, #9999	; 0x270f
   99432:	4293      	cmp	r3, r2
   99434:	d9f7      	bls.n	99426 <DD_SPI_SET_POT+0x2a>
		{
			;
		}
		/* Wait transfer done. */
		while  ( ((SPI0->SPI_SR) & SPI_SR_RDRF) == 0);
   99436:	bf00      	nop
   99438:	4b0f      	ldr	r3, [pc, #60]	; (99478 <DD_SPI_SET_POT+0x7c>)
   9943a:	691b      	ldr	r3, [r3, #16]
   9943c:	f003 0301 	and.w	r3, r3, #1
   99440:	2b00      	cmp	r3, #0
   99442:	d0f9      	beq.n	99438 <DD_SPI_SET_POT+0x3c>
		dd_spi_read(&data, &uc_pcs);
   99444:	f107 030b 	add.w	r3, r7, #11
   99448:	480c      	ldr	r0, [pc, #48]	; (9947c <DD_SPI_SET_POT+0x80>)
   9944a:	4619      	mov	r1, r3
   9944c:	4b0c      	ldr	r3, [pc, #48]	; (99480 <DD_SPI_SET_POT+0x84>)
   9944e:	4798      	blx	r3
		p_buffer[i] = data;
   99450:	697b      	ldr	r3, [r7, #20]
   99452:	005b      	lsls	r3, r3, #1
   99454:	68fa      	ldr	r2, [r7, #12]
   99456:	4413      	add	r3, r2
   99458:	4a08      	ldr	r2, [pc, #32]	; (9947c <DD_SPI_SET_POT+0x80>)
   9945a:	8812      	ldrh	r2, [r2, #0]
   9945c:	801a      	strh	r2, [r3, #0]

	uint16_t *p_buffer;

	p_buffer = p_buf;

	for (i = 0; i < size; i++) {
   9945e:	697b      	ldr	r3, [r7, #20]
   99460:	3301      	adds	r3, #1
   99462:	617b      	str	r3, [r7, #20]
   99464:	697a      	ldr	r2, [r7, #20]
   99466:	683b      	ldr	r3, [r7, #0]
   99468:	429a      	cmp	r2, r3
   9946a:	d3d1      	bcc.n	99410 <DD_SPI_SET_POT+0x14>
		/* Wait transfer done. */
		while  ( ((SPI0->SPI_SR) & SPI_SR_RDRF) == 0);
		dd_spi_read(&data, &uc_pcs);
		p_buffer[i] = data;
	}
}
   9946c:	3718      	adds	r7, #24
   9946e:	46bd      	mov	sp, r7
   99470:	bd80      	pop	{r7, pc}
   99472:	bf00      	nop
   99474:	000994f9 	.word	0x000994f9
   99478:	40008000 	.word	0x40008000
   9947c:	20071c96 	.word	0x20071c96
   99480:	00099485 	.word	0x00099485

00099484 <dd_spi_read>:

spi_status_t dd_spi_read(uint16_t *us_data, uint8_t *p_pcs) {
   99484:	b480      	push	{r7}
   99486:	b085      	sub	sp, #20
   99488:	af00      	add	r7, sp, #0
   9948a:	6078      	str	r0, [r7, #4]
   9948c:	6039      	str	r1, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
   9948e:	f643 2398 	movw	r3, #15000	; 0x3a98
   99492:	60fb      	str	r3, [r7, #12]
	static uint32_t reg_value;

	while (!(SPI0->SPI_SR & SPI_SR_RDRF)) {
   99494:	e006      	b.n	994a4 <dd_spi_read+0x20>
		if (!timeout--) {
   99496:	68fb      	ldr	r3, [r7, #12]
   99498:	1e5a      	subs	r2, r3, #1
   9949a:	60fa      	str	r2, [r7, #12]
   9949c:	2b00      	cmp	r3, #0
   9949e:	d101      	bne.n	994a4 <dd_spi_read+0x20>
			return SPI_ERROR_TIMEOUT;
   994a0:	2301      	movs	r3, #1
   994a2:	e01d      	b.n	994e0 <dd_spi_read+0x5c>

spi_status_t dd_spi_read(uint16_t *us_data, uint8_t *p_pcs) {
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(SPI0->SPI_SR & SPI_SR_RDRF)) {
   994a4:	4b12      	ldr	r3, [pc, #72]	; (994f0 <dd_spi_read+0x6c>)
   994a6:	691b      	ldr	r3, [r3, #16]
   994a8:	f003 0301 	and.w	r3, r3, #1
   994ac:	2b00      	cmp	r3, #0
   994ae:	d0f2      	beq.n	99496 <dd_spi_read+0x12>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = SPI0->SPI_RDR;
   994b0:	4b0f      	ldr	r3, [pc, #60]	; (994f0 <dd_spi_read+0x6c>)
   994b2:	689b      	ldr	r3, [r3, #8]
   994b4:	4a0f      	ldr	r2, [pc, #60]	; (994f4 <dd_spi_read+0x70>)
   994b6:	6013      	str	r3, [r2, #0]
	if ((SPI0->SPI_MR & SPI_MR_PS)) {
   994b8:	4b0d      	ldr	r3, [pc, #52]	; (994f0 <dd_spi_read+0x6c>)
   994ba:	685b      	ldr	r3, [r3, #4]
   994bc:	f003 0302 	and.w	r3, r3, #2
   994c0:	2b00      	cmp	r3, #0
   994c2:	d007      	beq.n	994d4 <dd_spi_read+0x50>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   994c4:	4b0b      	ldr	r3, [pc, #44]	; (994f4 <dd_spi_read+0x70>)
   994c6:	681b      	ldr	r3, [r3, #0]
   994c8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   994cc:	0c1b      	lsrs	r3, r3, #16
   994ce:	b2da      	uxtb	r2, r3
   994d0:	683b      	ldr	r3, [r7, #0]
   994d2:	701a      	strb	r2, [r3, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   994d4:	4b07      	ldr	r3, [pc, #28]	; (994f4 <dd_spi_read+0x70>)
   994d6:	681b      	ldr	r3, [r3, #0]
   994d8:	b29a      	uxth	r2, r3
   994da:	687b      	ldr	r3, [r7, #4]
   994dc:	801a      	strh	r2, [r3, #0]

	return SPI_OK;
   994de:	2300      	movs	r3, #0
   994e0:	b25b      	sxtb	r3, r3
}
   994e2:	4618      	mov	r0, r3
   994e4:	3714      	adds	r7, #20
   994e6:	46bd      	mov	sp, r7
   994e8:	f85d 7b04 	ldr.w	r7, [sp], #4
   994ec:	4770      	bx	lr
   994ee:	bf00      	nop
   994f0:	40008000 	.word	0x40008000
   994f4:	20071c98 	.word	0x20071c98

000994f8 <dd_spi_write>:

spi_status_t dd_spi_write(uint16_t us_data)  {
   994f8:	b480      	push	{r7}
   994fa:	b085      	sub	sp, #20
   994fc:	af00      	add	r7, sp, #0
   994fe:	4603      	mov	r3, r0
   99500:	80fb      	strh	r3, [r7, #6]
	uint32_t timeout = SPI_TIMEOUT;
   99502:	f643 2398 	movw	r3, #15000	; 0x3a98
   99506:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(SPI0->SPI_SR & SPI_SR_TDRE)) {
   99508:	e006      	b.n	99518 <dd_spi_write+0x20>
		if (!timeout--) {
   9950a:	68fb      	ldr	r3, [r7, #12]
   9950c:	1e5a      	subs	r2, r3, #1
   9950e:	60fa      	str	r2, [r7, #12]
   99510:	2b00      	cmp	r3, #0
   99512:	d101      	bne.n	99518 <dd_spi_write+0x20>
			return SPI_ERROR_TIMEOUT;
   99514:	2301      	movs	r3, #1
   99516:	e00b      	b.n	99530 <dd_spi_write+0x38>

spi_status_t dd_spi_write(uint16_t us_data)  {
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(SPI0->SPI_SR & SPI_SR_TDRE)) {
   99518:	4b09      	ldr	r3, [pc, #36]	; (99540 <dd_spi_write+0x48>)
   9951a:	691b      	ldr	r3, [r3, #16]
   9951c:	f003 0302 	and.w	r3, r3, #2
   99520:	2b00      	cmp	r3, #0
   99522:	d0f2      	beq.n	9950a <dd_spi_write+0x12>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}
	value = SPI_TDR_TD(us_data);
   99524:	88fb      	ldrh	r3, [r7, #6]
   99526:	60bb      	str	r3, [r7, #8]
	SPI0->SPI_TDR = value;
   99528:	4a05      	ldr	r2, [pc, #20]	; (99540 <dd_spi_write+0x48>)
   9952a:	68bb      	ldr	r3, [r7, #8]
   9952c:	60d3      	str	r3, [r2, #12]

	return SPI_OK;
   9952e:	2300      	movs	r3, #0
   99530:	b25b      	sxtb	r3, r3
}
   99532:	4618      	mov	r0, r3
   99534:	3714      	adds	r7, #20
   99536:	46bd      	mov	sp, r7
   99538:	f85d 7b04 	ldr.w	r7, [sp], #4
   9953c:	4770      	bx	lr
   9953e:	bf00      	nop
   99540:	40008000 	.word	0x40008000

00099544 <DD_INIT_SPI>:
}
}

//void dd_spi_master_initialize(void)
void DD_INIT_SPI()
{
   99544:	b580      	push	{r7, lr}
   99546:	af00      	add	r7, sp, #0
	PIOA->PIO_WPMR = 0x50494F00;
   99548:	4b39      	ldr	r3, [pc, #228]	; (99630 <DD_INIT_SPI+0xec>)
   9954a:	4a3a      	ldr	r2, [pc, #232]	; (99634 <DD_INIT_SPI+0xf0>)
   9954c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//PIOA->PIO_PER  = 0x10000000;
	//PIOA->PIO_OER  = 0x10000000;         //CS0
	PIOA->PIO_PDR  = 0x1E000000;         //MISO,MOSI,SCK
   99550:	4b37      	ldr	r3, [pc, #220]	; (99630 <DD_INIT_SPI+0xec>)
   99552:	f04f 52f0 	mov.w	r2, #503316480	; 0x1e000000
   99556:	605a      	str	r2, [r3, #4]
//	PIOA->PIO_ABSR = 0x00000000;
	
	
	SPI0->SPI_WPMR = 0x53504900;         // SPI_WPMR_WPEN
   99558:	4b37      	ldr	r3, [pc, #220]	; (99638 <DD_INIT_SPI+0xf4>)
   9955a:	4a38      	ldr	r2, [pc, #224]	; (9963c <DD_INIT_SPI+0xf8>)
   9955c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//puts("-I- Initialize SPI as master\r");
	//dd_spi_set_writeprotect(0);
	
	PMC->PMC_WPMR = 0x504D4300;
   99560:	4b37      	ldr	r3, [pc, #220]	; (99640 <DD_INIT_SPI+0xfc>)
   99562:	4a38      	ldr	r2, [pc, #224]	; (99644 <DD_INIT_SPI+0x100>)
   99564:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	spi_enable_clock(SPI_MASTER_BASE);
   99568:	4833      	ldr	r0, [pc, #204]	; (99638 <DD_INIT_SPI+0xf4>)
   9956a:	4b37      	ldr	r3, [pc, #220]	; (99648 <DD_INIT_SPI+0x104>)
   9956c:	4798      	blx	r3
	
	
	
	SPI0->SPI_CR = SPI_CR_SPIDIS;
   9956e:	4b32      	ldr	r3, [pc, #200]	; (99638 <DD_INIT_SPI+0xf4>)
   99570:	2202      	movs	r2, #2
   99572:	601a      	str	r2, [r3, #0]
	//spi_disable(SPI_MASTER_BASE);
	
	SPI0->SPI_CR = SPI_CR_SWRST;
   99574:	4b30      	ldr	r3, [pc, #192]	; (99638 <DD_INIT_SPI+0xf4>)
   99576:	2280      	movs	r2, #128	; 0x80
   99578:	601a      	str	r2, [r3, #0]
	//spi_reset(SPI_MASTER_BASE);
	
	SPI0->SPI_CR = SPI_CR_LASTXFER;
   9957a:	4b2f      	ldr	r3, [pc, #188]	; (99638 <DD_INIT_SPI+0xf4>)
   9957c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   99580:	601a      	str	r2, [r3, #0]
	//spi_set_lastxfer(SPI_MASTER_BASE);
	
	SPI0->SPI_MR |= SPI_MR_MSTR;
   99582:	4a2d      	ldr	r2, [pc, #180]	; (99638 <DD_INIT_SPI+0xf4>)
   99584:	4b2c      	ldr	r3, [pc, #176]	; (99638 <DD_INIT_SPI+0xf4>)
   99586:	685b      	ldr	r3, [r3, #4]
   99588:	f043 0301 	orr.w	r3, r3, #1
   9958c:	6053      	str	r3, [r2, #4]
	//spi_set_master_mode(SPI_MASTER_BASE);
	
	SPI0->SPI_MR |= SPI_MR_MODFDIS;
   9958e:	4a2a      	ldr	r2, [pc, #168]	; (99638 <DD_INIT_SPI+0xf4>)
   99590:	4b29      	ldr	r3, [pc, #164]	; (99638 <DD_INIT_SPI+0xf4>)
   99592:	685b      	ldr	r3, [r3, #4]
   99594:	f043 0310 	orr.w	r3, r3, #16
   99598:	6053      	str	r3, [r2, #4]
	
	
	
	
	//chip selection procedure done here
	SPI0->SPI_MR &= (~SPI_MR_PS); // SPI SET FIXED PERIPHERAL.	/ 	SPI0->SPI_MR &= (~SPI_MR_PCSDEC); // The chip selects are directly connected to a peripheral device.
   9959a:	4a27      	ldr	r2, [pc, #156]	; (99638 <DD_INIT_SPI+0xf4>)
   9959c:	4b26      	ldr	r3, [pc, #152]	; (99638 <DD_INIT_SPI+0xf4>)
   9959e:	685b      	ldr	r3, [r3, #4]
   995a0:	f023 0302 	bic.w	r3, r3, #2
   995a4:	6053      	str	r3, [r2, #4]
	SPI0->SPI_MR &= (~SPI_MR_PCS_Msk);
   995a6:	4a24      	ldr	r2, [pc, #144]	; (99638 <DD_INIT_SPI+0xf4>)
   995a8:	4b23      	ldr	r3, [pc, #140]	; (99638 <DD_INIT_SPI+0xf4>)
   995aa:	685b      	ldr	r3, [r3, #4]
   995ac:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
   995b0:	6053      	str	r3, [r2, #4]
	SPI0->SPI_MR &= (~SPI_MR_PCSDEC);
   995b2:	4a21      	ldr	r2, [pc, #132]	; (99638 <DD_INIT_SPI+0xf4>)
   995b4:	4b20      	ldr	r3, [pc, #128]	; (99638 <DD_INIT_SPI+0xf4>)
   995b6:	685b      	ldr	r3, [r3, #4]
   995b8:	f023 0304 	bic.w	r3, r3, #4
   995bc:	6053      	str	r3, [r2, #4]
	SPI0->SPI_MR |= SPI_MR_PCS(SPI_CHIP_PCS);
   995be:	491e      	ldr	r1, [pc, #120]	; (99638 <DD_INIT_SPI+0xf4>)
   995c0:	4b1d      	ldr	r3, [pc, #116]	; (99638 <DD_INIT_SPI+0xf4>)
   995c2:	685a      	ldr	r2, [r3, #4]
   995c4:	4b21      	ldr	r3, [pc, #132]	; (9964c <DD_INIT_SPI+0x108>)
   995c6:	781b      	ldrb	r3, [r3, #0]
   995c8:	4618      	mov	r0, r3
   995ca:	2301      	movs	r3, #1
   995cc:	4083      	lsls	r3, r0
   995ce:	43db      	mvns	r3, r3
   995d0:	f003 030f 	and.w	r3, r3, #15
   995d4:	041b      	lsls	r3, r3, #16
   995d6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   995da:	4313      	orrs	r3, r2
   995dc:	604b      	str	r3, [r1, #4]
	// 	SPI0->SPI_MR = 0x00000001;
	// 	SPI0->SPI_CSR = 0x10800080;
	
	
	//spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, SPI_CHIP_PCS);
	dd_spi_set_clock_polarity(SPI_CHIP_SEL, SPI_CLK_POLARITY_0);
   995de:	4b1b      	ldr	r3, [pc, #108]	; (9964c <DD_INIT_SPI+0x108>)
   995e0:	781b      	ldrb	r3, [r3, #0]
   995e2:	b29b      	uxth	r3, r3
   995e4:	4618      	mov	r0, r3
   995e6:	2100      	movs	r1, #0
   995e8:	4b19      	ldr	r3, [pc, #100]	; (99650 <DD_INIT_SPI+0x10c>)
   995ea:	4798      	blx	r3
	dd_spi_set_clock_phase(SPI_CHIP_SEL, SPI_CLK_PHASE_0);
   995ec:	4b17      	ldr	r3, [pc, #92]	; (9964c <DD_INIT_SPI+0x108>)
   995ee:	781b      	ldrb	r3, [r3, #0]
   995f0:	b29b      	uxth	r3, r3
   995f2:	4618      	mov	r0, r3
   995f4:	2100      	movs	r1, #0
   995f6:	4b17      	ldr	r3, [pc, #92]	; (99654 <DD_INIT_SPI+0x110>)
   995f8:	4798      	blx	r3
	dd_spi_set_bits_per_transfer(SPI_CHIP_SEL,SPI_CSR_BITS_16_BIT);
   995fa:	4b14      	ldr	r3, [pc, #80]	; (9964c <DD_INIT_SPI+0x108>)
   995fc:	781b      	ldrb	r3, [r3, #0]
   995fe:	b29b      	uxth	r3, r3
   99600:	4618      	mov	r0, r3
   99602:	2180      	movs	r1, #128	; 0x80
   99604:	4b14      	ldr	r3, [pc, #80]	; (99658 <DD_INIT_SPI+0x114>)
   99606:	4798      	blx	r3
	dd_spi_set_baudrate_div(SPI_CHIP_SEL, 0xff );	//(sysclk_get_peripheral_hz()/ gs_ul_spi_clock)
   99608:	4b10      	ldr	r3, [pc, #64]	; (9964c <DD_INIT_SPI+0x108>)
   9960a:	781b      	ldrb	r3, [r3, #0]
   9960c:	b29b      	uxth	r3, r3
   9960e:	4618      	mov	r0, r3
   99610:	21ff      	movs	r1, #255	; 0xff
   99612:	4b12      	ldr	r3, [pc, #72]	; (9965c <DD_INIT_SPI+0x118>)
   99614:	4798      	blx	r3
	dd_spi_set_transfer_delay(SPI_CHIP_SEL, SPI_DLYBS,SPI_DLYBCT);
   99616:	4b0d      	ldr	r3, [pc, #52]	; (9964c <DD_INIT_SPI+0x108>)
   99618:	781b      	ldrb	r3, [r3, #0]
   9961a:	b29b      	uxth	r3, r3
   9961c:	4618      	mov	r0, r3
   9961e:	2180      	movs	r1, #128	; 0x80
   99620:	2210      	movs	r2, #16
   99622:	4b0f      	ldr	r3, [pc, #60]	; (99660 <DD_INIT_SPI+0x11c>)
   99624:	4798      	blx	r3
	SPI0->SPI_CR = SPI_CR_SPIEN;
   99626:	4b04      	ldr	r3, [pc, #16]	; (99638 <DD_INIT_SPI+0xf4>)
   99628:	2201      	movs	r2, #1
   9962a:	601a      	str	r2, [r3, #0]
}
   9962c:	bd80      	pop	{r7, pc}
   9962e:	bf00      	nop
   99630:	400e0e00 	.word	0x400e0e00
   99634:	50494f00 	.word	0x50494f00
   99638:	40008000 	.word	0x40008000
   9963c:	53504900 	.word	0x53504900
   99640:	400e0600 	.word	0x400e0600
   99644:	504d4300 	.word	0x504d4300
   99648:	000805cd 	.word	0x000805cd
   9964c:	20071c94 	.word	0x20071c94
   99650:	000992f1 	.word	0x000992f1
   99654:	00099345 	.word	0x00099345
   99658:	000992a5 	.word	0x000992a5
   9965c:	00099399 	.word	0x00099399
   99660:	0009924d 	.word	0x0009924d

00099664 <DD_ENABLE_BYPASS>:
//void BC_Switch1(void);
//void BC_Switch2(void);


uint8_t DD_ENABLE_BYPASS()
{
   99664:	b580      	push	{r7, lr}
   99666:	af00      	add	r7, sp, #0
				DD_SET_VALVE (VALVE_ID15);
   99668:	200f      	movs	r0, #15
   9966a:	4b07      	ldr	r3, [pc, #28]	; (99688 <DD_ENABLE_BYPASS+0x24>)
   9966c:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID13);
   9966e:	200d      	movs	r0, #13
   99670:	4b06      	ldr	r3, [pc, #24]	; (9968c <DD_ENABLE_BYPASS+0x28>)
   99672:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID14);
   99674:	200e      	movs	r0, #14
   99676:	4b05      	ldr	r3, [pc, #20]	; (9968c <DD_ENABLE_BYPASS+0x28>)
   99678:	4798      	blx	r3
				ByPass = true;
   9967a:	4b05      	ldr	r3, [pc, #20]	; (99690 <DD_ENABLE_BYPASS+0x2c>)
   9967c:	2201      	movs	r2, #1
   9967e:	701a      	strb	r2, [r3, #0]
	
	return 0;
   99680:	2300      	movs	r3, #0
}
   99682:	4618      	mov	r0, r3
   99684:	bd80      	pop	{r7, pc}
   99686:	bf00      	nop
   99688:	00099c2d 	.word	0x00099c2d
   9968c:	00099ced 	.word	0x00099ced
   99690:	20071ca0 	.word	0x20071ca0

00099694 <DD_DISABLE_BYPASS>:
uint8_t DD_DISABLE_BYPASS()
{
   99694:	b580      	push	{r7, lr}
   99696:	af00      	add	r7, sp, #0
				DD_RESET_VALVE (VALVE_ID15);
   99698:	200f      	movs	r0, #15
   9969a:	4b07      	ldr	r3, [pc, #28]	; (996b8 <DD_DISABLE_BYPASS+0x24>)
   9969c:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID13);
   9969e:	200d      	movs	r0, #13
   996a0:	4b06      	ldr	r3, [pc, #24]	; (996bc <DD_DISABLE_BYPASS+0x28>)
   996a2:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID14);
   996a4:	200e      	movs	r0, #14
   996a6:	4b05      	ldr	r3, [pc, #20]	; (996bc <DD_DISABLE_BYPASS+0x28>)
   996a8:	4798      	blx	r3
				ByPass = false;
   996aa:	4b05      	ldr	r3, [pc, #20]	; (996c0 <DD_DISABLE_BYPASS+0x2c>)
   996ac:	2200      	movs	r2, #0
   996ae:	701a      	strb	r2, [r3, #0]
	
	return 0;
   996b0:	2300      	movs	r3, #0
}
   996b2:	4618      	mov	r0, r3
   996b4:	bd80      	pop	{r7, pc}
   996b6:	bf00      	nop
   996b8:	00099ced 	.word	0x00099ced
   996bc:	00099c2d 	.word	0x00099c2d
   996c0:	20071ca0 	.word	0x20071ca0

000996c4 <DD_ENABLE_LOOPBACK>:


uint8_t DD_ENABLE_LOOPBACK()
{
   996c4:	b580      	push	{r7, lr}
   996c6:	af00      	add	r7, sp, #0
	
	LoopBack = true;
   996c8:	4b05      	ldr	r3, [pc, #20]	; (996e0 <DD_ENABLE_LOOPBACK+0x1c>)
   996ca:	2201      	movs	r2, #1
   996cc:	701a      	strb	r2, [r3, #0]
				DD_SET_VALVE (VALVE_ID16);
   996ce:	2010      	movs	r0, #16
   996d0:	4b04      	ldr	r3, [pc, #16]	; (996e4 <DD_ENABLE_LOOPBACK+0x20>)
   996d2:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID18);
   996d4:	2012      	movs	r0, #18
   996d6:	4b04      	ldr	r3, [pc, #16]	; (996e8 <DD_ENABLE_LOOPBACK+0x24>)
   996d8:	4798      	blx	r3
				
	return 0;
   996da:	2300      	movs	r3, #0
}
   996dc:	4618      	mov	r0, r3
   996de:	bd80      	pop	{r7, pc}
   996e0:	20071ca1 	.word	0x20071ca1
   996e4:	00099c2d 	.word	0x00099c2d
   996e8:	00099ced 	.word	0x00099ced

000996ec <DD_DISABLE_LOOPBACK>:
uint8_t DD_DISABLE_LOOPBACK()
{
   996ec:	b580      	push	{r7, lr}
   996ee:	af00      	add	r7, sp, #0
	
	LoopBack = false;
   996f0:	4b05      	ldr	r3, [pc, #20]	; (99708 <DD_DISABLE_LOOPBACK+0x1c>)
   996f2:	2200      	movs	r2, #0
   996f4:	701a      	strb	r2, [r3, #0]
				DD_RESET_VALVE (VALVE_ID16);
   996f6:	2010      	movs	r0, #16
   996f8:	4b04      	ldr	r3, [pc, #16]	; (9970c <DD_DISABLE_LOOPBACK+0x20>)
   996fa:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID18);
   996fc:	2012      	movs	r0, #18
   996fe:	4b04      	ldr	r3, [pc, #16]	; (99710 <DD_DISABLE_LOOPBACK+0x24>)
   99700:	4798      	blx	r3
	return 0;
   99702:	2300      	movs	r3, #0
}
   99704:	4618      	mov	r0, r3
   99706:	bd80      	pop	{r7, pc}
   99708:	20071ca1 	.word	0x20071ca1
   9970c:	00099ced 	.word	0x00099ced
   99710:	00099c2d 	.word	0x00099c2d

00099714 <DD_SET_PUMP>:
uint8_t DD_SET_PUMP(sv_pumptype id_pump)
{
   99714:	b580      	push	{r7, lr}
   99716:	b084      	sub	sp, #16
   99718:	af00      	add	r7, sp, #0
   9971a:	4603      	mov	r3, r0
   9971c:	71fb      	strb	r3, [r7, #7]
	
	uint32_t p_io,peri;
	

	switch (id_pump)
   9971e:	79fb      	ldrb	r3, [r7, #7]
   99720:	3b01      	subs	r3, #1
   99722:	2b04      	cmp	r3, #4
   99724:	d858      	bhi.n	997d8 <DD_SET_PUMP+0xc4>
   99726:	a201      	add	r2, pc, #4	; (adr r2, 9972c <DD_SET_PUMP+0x18>)
   99728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9972c:	00099741 	.word	0x00099741
   99730:	00099765 	.word	0x00099765
   99734:	000997d9 	.word	0x000997d9
   99738:	00099789 	.word	0x00099789
   9973c:	000997bf 	.word	0x000997bf
	{
		case DCMOTOR1:  // DC MOTOR 1
		p_io = 20;
   99740:	2314      	movs	r3, #20
   99742:	60fb      	str	r3, [r7, #12]
		peri = PA;
   99744:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   99748:	60bb      	str	r3, [r7, #8]
		PWM->PWM_ENA =0x00000004;
   9974a:	4b26      	ldr	r3, [pc, #152]	; (997e4 <DD_SET_PUMP+0xd0>)
   9974c:	2204      	movs	r2, #4
   9974e:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED5_GPIO,PIN_PWM_LED5_FLAGS);
   99750:	2014      	movs	r0, #20
   99752:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   99756:	4b24      	ldr	r3, [pc, #144]	; (997e8 <DD_SET_PUMP+0xd4>)
   99758:	4798      	blx	r3
		DD_EN_PERI_AND_SET_PIO(peri,p_io);
   9975a:	68b8      	ldr	r0, [r7, #8]
   9975c:	68f9      	ldr	r1, [r7, #12]
   9975e:	4b23      	ldr	r3, [pc, #140]	; (997ec <DD_SET_PUMP+0xd8>)
   99760:	4798      	blx	r3
		//DD_SET_PIO(peri,p_io);
		break;
   99762:	e039      	b.n	997d8 <DD_SET_PUMP+0xc4>
		
		case DCMOTOR2: // DC MOTOR 2
		p_io = 21;
   99764:	2315      	movs	r3, #21
   99766:	60fb      	str	r3, [r7, #12]
		peri = PA;
   99768:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   9976c:	60bb      	str	r3, [r7, #8]
		PWM->PWM_ENA =0x00000001;
   9976e:	4b1d      	ldr	r3, [pc, #116]	; (997e4 <DD_SET_PUMP+0xd0>)
   99770:	2201      	movs	r2, #1
   99772:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED3_GPIO,PIN_PWM_LED3_FLAGS);
   99774:	2015      	movs	r0, #21
   99776:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   9977a:	4b1b      	ldr	r3, [pc, #108]	; (997e8 <DD_SET_PUMP+0xd4>)
   9977c:	4798      	blx	r3
		DD_EN_PERI_AND_SET_PIO(peri,p_io);
   9977e:	68b8      	ldr	r0, [r7, #8]
   99780:	68f9      	ldr	r1, [r7, #12]
   99782:	4b1a      	ldr	r3, [pc, #104]	; (997ec <DD_SET_PUMP+0xd8>)
   99784:	4798      	blx	r3
		//DD_SET_PIO(peri,p_io);
		break;
   99786:	e027      	b.n	997d8 <DD_SET_PUMP+0xc4>
		case BLOODPUMP: //BLOOD PUMP
	
		break;
		
		case UFPUMP: // UF PUMP
		p_io = 22;
   99788:	2316      	movs	r3, #22
   9978a:	60fb      	str	r3, [r7, #12]
		peri = PC;
   9978c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99790:	60bb      	str	r3, [r7, #8]
		DD_RESET_PIO(peri,p_io);
   99792:	68b8      	ldr	r0, [r7, #8]
   99794:	68f9      	ldr	r1, [r7, #12]
   99796:	4b16      	ldr	r3, [pc, #88]	; (997f0 <DD_SET_PUMP+0xdc>)
   99798:	4798      	blx	r3
		PWM->PWM_ENA =0x00000020;
   9979a:	4b12      	ldr	r3, [pc, #72]	; (997e4 <DD_SET_PUMP+0xd0>)
   9979c:	2220      	movs	r2, #32
   9979e:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED1_GPIO,PIN_PWM_LED1_FLAGS);
   997a0:	2056      	movs	r0, #86	; 0x56
   997a2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   997a6:	4b10      	ldr	r3, [pc, #64]	; (997e8 <DD_SET_PUMP+0xd4>)
   997a8:	4798      	blx	r3
		
		p_io = 15;
   997aa:	230f      	movs	r3, #15
   997ac:	60fb      	str	r3, [r7, #12]
		peri = PA;
   997ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   997b2:	60bb      	str	r3, [r7, #8]
		DD_RESET_PIO(peri,p_io);
   997b4:	68b8      	ldr	r0, [r7, #8]
   997b6:	68f9      	ldr	r1, [r7, #12]
   997b8:	4b0d      	ldr	r3, [pc, #52]	; (997f0 <DD_SET_PUMP+0xdc>)
   997ba:	4798      	blx	r3
		break;
   997bc:	e00c      	b.n	997d8 <DD_SET_PUMP+0xc4>
		
		case HEPARINPUMP: // HEPARIN PUMP

		PWM->PWM_ENA =0x00000010;
   997be:	4b09      	ldr	r3, [pc, #36]	; (997e4 <DD_SET_PUMP+0xd0>)
   997c0:	2210      	movs	r2, #16
   997c2:	605a      	str	r2, [r3, #4]
//		gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
		p_io = 2;
   997c4:	2302      	movs	r3, #2
   997c6:	60fb      	str	r3, [r7, #12]
		peri = PD;
   997c8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   997cc:	60bb      	str	r3, [r7, #8]
		DD_RESET_PIO(peri,p_io);
   997ce:	68b8      	ldr	r0, [r7, #8]
   997d0:	68f9      	ldr	r1, [r7, #12]
   997d2:	4b07      	ldr	r3, [pc, #28]	; (997f0 <DD_SET_PUMP+0xdc>)
   997d4:	4798      	blx	r3

		break;
   997d6:	bf00      	nop
				
	}
	
	
	
	return 0;
   997d8:	2300      	movs	r3, #0
}
   997da:	4618      	mov	r0, r3
   997dc:	3710      	adds	r7, #16
   997de:	46bd      	mov	sp, r7
   997e0:	bd80      	pop	{r7, pc}
   997e2:	bf00      	nop
   997e4:	40094000 	.word	0x40094000
   997e8:	0009c001 	.word	0x0009c001
   997ec:	000986c1 	.word	0x000986c1
   997f0:	000987c9 	.word	0x000987c9

000997f4 <DD_SET_HEATER>:
uint8_t DD_SET_HEATER()
{
   997f4:	b580      	push	{r7, lr}
   997f6:	b082      	sub	sp, #8
   997f8:	af00      	add	r7, sp, #0
	uint32_t p_io,peri;
	
	p_io = 28;
   997fa:	231c      	movs	r3, #28
   997fc:	607b      	str	r3, [r7, #4]
	peri = PC;                               // tURN ON SAFETY RELAY  WAIT FOR 100ms BEFORE TRIAC (pwm) ON 
   997fe:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99802:	603b      	str	r3, [r7, #0]
	DD_SET_PIO(peri,p_io);
   99804:	6838      	ldr	r0, [r7, #0]
   99806:	6879      	ldr	r1, [r7, #4]
   99808:	4b0d      	ldr	r3, [pc, #52]	; (99840 <DD_SET_HEATER+0x4c>)
   9980a:	4798      	blx	r3
	cl_wait(100);
   9980c:	2064      	movs	r0, #100	; 0x64
   9980e:	4b0d      	ldr	r3, [pc, #52]	; (99844 <DD_SET_HEATER+0x50>)
   99810:	4798      	blx	r3
	
	PWM->PWM_ENA =0x00000002;
   99812:	4b0d      	ldr	r3, [pc, #52]	; (99848 <DD_SET_HEATER+0x54>)
   99814:	2202      	movs	r2, #2
   99816:	605a      	str	r2, [r3, #4]
	p_io = 12;
   99818:	230c      	movs	r3, #12
   9981a:	607b      	str	r3, [r7, #4]
	peri = PA;
   9981c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   99820:	603b      	str	r3, [r7, #0]
	//PIOA->PIO_ABSR = 0x00390000;            // TURN ON pwm ( TRIAC) AFTER 100ms DELAY
	PIOA->PIO_PDR = 1<<p_io;
   99822:	4a0a      	ldr	r2, [pc, #40]	; (9984c <DD_SET_HEATER+0x58>)
   99824:	687b      	ldr	r3, [r7, #4]
   99826:	2101      	movs	r1, #1
   99828:	fa01 f303 	lsl.w	r3, r1, r3
   9982c:	6053      	str	r3, [r2, #4]
	DD_EN_PERI_AND_SET_PIO(peri,p_io);
   9982e:	6838      	ldr	r0, [r7, #0]
   99830:	6879      	ldr	r1, [r7, #4]
   99832:	4b07      	ldr	r3, [pc, #28]	; (99850 <DD_SET_HEATER+0x5c>)
   99834:	4798      	blx	r3
	
	
	
	//gpio_configure_pin(PIN_PWM_LED4_GPIO,PIN_PWM_LED4_FLAGS);
	
	return 0;
   99836:	2300      	movs	r3, #0
}
   99838:	4618      	mov	r0, r3
   9983a:	3708      	adds	r7, #8
   9983c:	46bd      	mov	sp, r7
   9983e:	bd80      	pop	{r7, pc}
   99840:	00098745 	.word	0x00098745
   99844:	0009421d 	.word	0x0009421d
   99848:	40094000 	.word	0x40094000
   9984c:	400e0e00 	.word	0x400e0e00
   99850:	000986c1 	.word	0x000986c1

00099854 <DD_RESET_HEATER>:

uint8_t DD_RESET_HEATER()
{
   99854:	b580      	push	{r7, lr}
   99856:	b082      	sub	sp, #8
   99858:	af00      	add	r7, sp, #0
	uint32_t p_io,peri;
	
	PWM->PWM_DIS =0x00000002;
   9985a:	4b11      	ldr	r3, [pc, #68]	; (998a0 <DD_RESET_HEATER+0x4c>)
   9985c:	2202      	movs	r2, #2
   9985e:	609a      	str	r2, [r3, #8]
	//gpio_configure_pin(PIN_PWM_LED4_GPIO,PIN_PWM_LED4_FLAGS);
	
	
	p_io = 12;
   99860:	230c      	movs	r3, #12
   99862:	607b      	str	r3, [r7, #4]
	peri = PA;                                        // TURN OFF pwm ( TRIAC) AFTER 100ms DELAY
   99864:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   99868:	603b      	str	r3, [r7, #0]
	//PIOA->PIO_ABSR = 0x00390000;
	PIOA->PIO_PDR = 1<<p_io;
   9986a:	4a0e      	ldr	r2, [pc, #56]	; (998a4 <DD_RESET_HEATER+0x50>)
   9986c:	687b      	ldr	r3, [r7, #4]
   9986e:	2101      	movs	r1, #1
   99870:	fa01 f303 	lsl.w	r3, r1, r3
   99874:	6053      	str	r3, [r2, #4]
	DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   99876:	6838      	ldr	r0, [r7, #0]
   99878:	6879      	ldr	r1, [r7, #4]
   9987a:	4b0b      	ldr	r3, [pc, #44]	; (998a8 <DD_RESET_HEATER+0x54>)
   9987c:	4798      	blx	r3
	
	cl_wait(100);
   9987e:	2064      	movs	r0, #100	; 0x64
   99880:	4b0a      	ldr	r3, [pc, #40]	; (998ac <DD_RESET_HEATER+0x58>)
   99882:	4798      	blx	r3
	p_io = 28;
   99884:	231c      	movs	r3, #28
   99886:	607b      	str	r3, [r7, #4]
	peri = PC;                                    // tURN OFF SAFETY RELAY  WAIT FOR 100ms BEFORE TRIAC (pwm) ON 
   99888:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9988c:	603b      	str	r3, [r7, #0]
	DD_RESET_PIO(peri,p_io);
   9988e:	6838      	ldr	r0, [r7, #0]
   99890:	6879      	ldr	r1, [r7, #4]
   99892:	4b07      	ldr	r3, [pc, #28]	; (998b0 <DD_RESET_HEATER+0x5c>)
   99894:	4798      	blx	r3
	return 0;
   99896:	2300      	movs	r3, #0
}
   99898:	4618      	mov	r0, r3
   9989a:	3708      	adds	r7, #8
   9989c:	46bd      	mov	sp, r7
   9989e:	bd80      	pop	{r7, pc}
   998a0:	40094000 	.word	0x40094000
   998a4:	400e0e00 	.word	0x400e0e00
   998a8:	0009860d 	.word	0x0009860d
   998ac:	0009421d 	.word	0x0009421d
   998b0:	000987c9 	.word	0x000987c9

000998b4 <DD_RESET_PUMP>:
}



uint8_t DD_RESET_PUMP(sv_pumptype id_pump)
{
   998b4:	b580      	push	{r7, lr}
   998b6:	b084      	sub	sp, #16
   998b8:	af00      	add	r7, sp, #0
   998ba:	4603      	mov	r3, r0
   998bc:	71fb      	strb	r3, [r7, #7]
	
	uint32_t p_io,peri;
	switch (id_pump)
   998be:	79fb      	ldrb	r3, [r7, #7]
   998c0:	3b01      	subs	r3, #1
   998c2:	2b04      	cmp	r3, #4
   998c4:	d85b      	bhi.n	9997e <DD_RESET_PUMP+0xca>
   998c6:	a201      	add	r2, pc, #4	; (adr r2, 998cc <DD_RESET_PUMP+0x18>)
   998c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   998cc:	000998e1 	.word	0x000998e1
   998d0:	0009990d 	.word	0x0009990d
   998d4:	0009997f 	.word	0x0009997f
   998d8:	00099939 	.word	0x00099939
   998dc:	00099965 	.word	0x00099965
	{
		case DCMOTOR1:  // DC MOTOR 1
		p_io = 20;
   998e0:	2314      	movs	r3, #20
   998e2:	60fb      	str	r3, [r7, #12]
		peri = PA;
   998e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   998e8:	60bb      	str	r3, [r7, #8]
		//DD_SET_DUTY(2,0);
		
		
		PWM->PWM_DIS =0x00000004;
   998ea:	4b27      	ldr	r3, [pc, #156]	; (99988 <DD_RESET_PUMP+0xd4>)
   998ec:	2204      	movs	r2, #4
   998ee:	609a      	str	r2, [r3, #8]
		PIOA->PIO_ABSR = 0x00391000;
   998f0:	4b26      	ldr	r3, [pc, #152]	; (9998c <DD_RESET_PUMP+0xd8>)
   998f2:	4a27      	ldr	r2, [pc, #156]	; (99990 <DD_RESET_PUMP+0xdc>)
   998f4:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_PDR = 1<<p_io;
   998f6:	4a25      	ldr	r2, [pc, #148]	; (9998c <DD_RESET_PUMP+0xd8>)
   998f8:	68fb      	ldr	r3, [r7, #12]
   998fa:	2101      	movs	r1, #1
   998fc:	fa01 f303 	lsl.w	r3, r1, r3
   99900:	6053      	str	r3, [r2, #4]
		DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   99902:	68b8      	ldr	r0, [r7, #8]
   99904:	68f9      	ldr	r1, [r7, #12]
   99906:	4b23      	ldr	r3, [pc, #140]	; (99994 <DD_RESET_PUMP+0xe0>)
   99908:	4798      	blx	r3
		
		//DD_RESET_PIO(peri,p_io);
		
		break;
   9990a:	e038      	b.n	9997e <DD_RESET_PUMP+0xca>
		
		case DCMOTOR2: // DC MOTOR 2
		p_io = 21;
   9990c:	2315      	movs	r3, #21
   9990e:	60fb      	str	r3, [r7, #12]
		peri = PA;
   99910:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   99914:	60bb      	str	r3, [r7, #8]
	//	DD_SET_DUTY(0,0);
		
		PWM->PWM_DIS =0x00000001;
   99916:	4b1c      	ldr	r3, [pc, #112]	; (99988 <DD_RESET_PUMP+0xd4>)
   99918:	2201      	movs	r2, #1
   9991a:	609a      	str	r2, [r3, #8]
		PIOA->PIO_ABSR = 0x00391000;
   9991c:	4b1b      	ldr	r3, [pc, #108]	; (9998c <DD_RESET_PUMP+0xd8>)
   9991e:	4a1c      	ldr	r2, [pc, #112]	; (99990 <DD_RESET_PUMP+0xdc>)
   99920:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_PDR = 1<<p_io;
   99922:	4a1a      	ldr	r2, [pc, #104]	; (9998c <DD_RESET_PUMP+0xd8>)
   99924:	68fb      	ldr	r3, [r7, #12]
   99926:	2101      	movs	r1, #1
   99928:	fa01 f303 	lsl.w	r3, r1, r3
   9992c:	6053      	str	r3, [r2, #4]
		DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   9992e:	68b8      	ldr	r0, [r7, #8]
   99930:	68f9      	ldr	r1, [r7, #12]
   99932:	4b18      	ldr	r3, [pc, #96]	; (99994 <DD_RESET_PUMP+0xe0>)
   99934:	4798      	blx	r3
		
	//	DD_RESET_PIO(peri,p_io);
		
		break;
   99936:	e022      	b.n	9997e <DD_RESET_PUMP+0xca>
		case BLOODPUMP: //BLOOD PUMP

		break;
		
		case UFPUMP: // UF PUMP
		p_io = 22;
   99938:	2316      	movs	r3, #22
   9993a:	60fb      	str	r3, [r7, #12]
		peri = PC;
   9993c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99940:	60bb      	str	r3, [r7, #8]
		DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   99942:	68b8      	ldr	r0, [r7, #8]
   99944:	68f9      	ldr	r1, [r7, #12]
   99946:	4b13      	ldr	r3, [pc, #76]	; (99994 <DD_RESET_PUMP+0xe0>)
   99948:	4798      	blx	r3
	//	DD_SET_PIO(peri,p_io);
		PWM->PWM_DIS =0x00000020;
   9994a:	4b0f      	ldr	r3, [pc, #60]	; (99988 <DD_RESET_PUMP+0xd4>)
   9994c:	2220      	movs	r2, #32
   9994e:	609a      	str	r2, [r3, #8]
		
		p_io = 15;
   99950:	230f      	movs	r3, #15
   99952:	60fb      	str	r3, [r7, #12]
		peri = PA;
   99954:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   99958:	60bb      	str	r3, [r7, #8]
		DD_SET_PIO(peri,p_io);
   9995a:	68b8      	ldr	r0, [r7, #8]
   9995c:	68f9      	ldr	r1, [r7, #12]
   9995e:	4b0e      	ldr	r3, [pc, #56]	; (99998 <DD_RESET_PUMP+0xe4>)
   99960:	4798      	blx	r3
		break;
   99962:	e00c      	b.n	9997e <DD_RESET_PUMP+0xca>
		
		case HEPARINPUMP: // HEPARIN PUMP
	
		p_io = 2;
   99964:	2302      	movs	r3, #2
   99966:	60fb      	str	r3, [r7, #12]
		peri = PD;
   99968:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   9996c:	60bb      	str	r3, [r7, #8]
		DD_SET_PIO(peri,p_io);
   9996e:	68b8      	ldr	r0, [r7, #8]
   99970:	68f9      	ldr	r1, [r7, #12]
   99972:	4b09      	ldr	r3, [pc, #36]	; (99998 <DD_RESET_PUMP+0xe4>)
   99974:	4798      	blx	r3
		//DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
		//DD_SET_DUTY(4,0);
		PWM->PWM_DIS =0x00000010;
   99976:	4b04      	ldr	r3, [pc, #16]	; (99988 <DD_RESET_PUMP+0xd4>)
   99978:	2210      	movs	r2, #16
   9997a:	609a      	str	r2, [r3, #8]
		break;
   9997c:	bf00      	nop
	
	}
	
	
	
	return 0;
   9997e:	2300      	movs	r3, #0
	
}
   99980:	4618      	mov	r0, r3
   99982:	3710      	adds	r7, #16
   99984:	46bd      	mov	sp, r7
   99986:	bd80      	pop	{r7, pc}
   99988:	40094000 	.word	0x40094000
   9998c:	400e0e00 	.word	0x400e0e00
   99990:	00391000 	.word	0x00391000
   99994:	0009860d 	.word	0x0009860d
   99998:	00098745 	.word	0x00098745

0009999c <DD_SET_SPEED>:
	
	return 0;
}

uint8_t DD_SET_SPEED(sv_pumptype id_pump,uint32_t speed)
{
   9999c:	b580      	push	{r7, lr}
   9999e:	b086      	sub	sp, #24
   999a0:	af00      	add	r7, sp, #0
   999a2:	4603      	mov	r3, r0
   999a4:	6039      	str	r1, [r7, #0]
   999a6:	71fb      	strb	r3, [r7, #7]
	uint32_t prd_val, dty_val;
	uint8_t pwm_ch_no;
	

	switch (id_pump)
   999a8:	79fb      	ldrb	r3, [r7, #7]
   999aa:	3b01      	subs	r3, #1
   999ac:	2b04      	cmp	r3, #4
   999ae:	f200 8082 	bhi.w	99ab6 <DD_SET_SPEED+0x11a>
   999b2:	a201      	add	r2, pc, #4	; (adr r2, 999b8 <DD_SET_SPEED+0x1c>)
   999b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   999b8:	000999cd 	.word	0x000999cd
   999bc:	000999e1 	.word	0x000999e1
   999c0:	000999f5 	.word	0x000999f5
   999c4:	00099a77 	.word	0x00099a77
   999c8:	00099a97 	.word	0x00099a97
	{
		case DCMOTOR1:  // DC MOTOR 1
		pwm_ch_no = 2;
   999cc:	2302      	movs	r3, #2
   999ce:	73fb      	strb	r3, [r7, #15]
		dty_val = speed;
   999d0:	683b      	ldr	r3, [r7, #0]
   999d2:	613b      	str	r3, [r7, #16]
		// convert into duty count
		DD_SET_DUTY(pwm_ch_no,dty_val);
   999d4:	7bfb      	ldrb	r3, [r7, #15]
   999d6:	4618      	mov	r0, r3
   999d8:	6939      	ldr	r1, [r7, #16]
   999da:	4b39      	ldr	r3, [pc, #228]	; (99ac0 <DD_SET_SPEED+0x124>)
   999dc:	4798      	blx	r3
		break;
   999de:	e06a      	b.n	99ab6 <DD_SET_SPEED+0x11a>
		
		case DCMOTOR2: // DC MOTOR 2
		pwm_ch_no = 0;
   999e0:	2300      	movs	r3, #0
   999e2:	73fb      	strb	r3, [r7, #15]
		dty_val = speed;
   999e4:	683b      	ldr	r3, [r7, #0]
   999e6:	613b      	str	r3, [r7, #16]
		// convert into duty count
		DD_SET_DUTY(pwm_ch_no,dty_val);
   999e8:	7bfb      	ldrb	r3, [r7, #15]
   999ea:	4618      	mov	r0, r3
   999ec:	6939      	ldr	r1, [r7, #16]
   999ee:	4b34      	ldr	r3, [pc, #208]	; (99ac0 <DD_SET_SPEED+0x124>)
   999f0:	4798      	blx	r3
		break;
   999f2:	e060      	b.n	99ab6 <DD_SET_SPEED+0x11a>
		
		case BLOODPUMP: //BLOOD PUMP
	//	pwm_ch_no = 6;
		switch(speed)
   999f4:	683b      	ldr	r3, [r7, #0]
   999f6:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
   999fa:	d01c      	beq.n	99a36 <DD_SET_SPEED+0x9a>
   999fc:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
   99a00:	d804      	bhi.n	99a0c <DD_SET_SPEED+0x70>
   99a02:	2bc8      	cmp	r3, #200	; 0xc8
   99a04:	d009      	beq.n	99a1a <DD_SET_SPEED+0x7e>
   99a06:	2bf0      	cmp	r3, #240	; 0xf0
   99a08:	d00e      	beq.n	99a28 <DD_SET_SPEED+0x8c>
			dty_val = 0x00000110;
			prd_val =  0x00000210;
			break;
			default:
			//dty_val = speed/2;
			break;
   99a0a:	e029      	b.n	99a60 <DD_SET_SPEED+0xc4>
		DD_SET_DUTY(pwm_ch_no,dty_val);
		break;
		
		case BLOODPUMP: //BLOOD PUMP
	//	pwm_ch_no = 6;
		switch(speed)
   99a0c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
   99a10:	d018      	beq.n	99a44 <DD_SET_SPEED+0xa8>
   99a12:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
   99a16:	d01c      	beq.n	99a52 <DD_SET_SPEED+0xb6>
			dty_val = 0x00000110;
			prd_val =  0x00000210;
			break;
			default:
			//dty_val = speed/2;
			break;
   99a18:	e022      	b.n	99a60 <DD_SET_SPEED+0xc4>
		case BLOODPUMP: //BLOOD PUMP
	//	pwm_ch_no = 6;
		switch(speed)
		{
			case 200:
			dty_val = 0x00000170;
   99a1a:	f44f 73b8 	mov.w	r3, #368	; 0x170
   99a1e:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000375;
   99a20:	f240 3375 	movw	r3, #885	; 0x375
   99a24:	617b      	str	r3, [r7, #20]
			break;
   99a26:	e01b      	b.n	99a60 <DD_SET_SPEED+0xc4>
			case 240:
			dty_val = 0x00000150;
   99a28:	f44f 73a8 	mov.w	r3, #336	; 0x150
   99a2c:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000300;
   99a2e:	f44f 7340 	mov.w	r3, #768	; 0x300
   99a32:	617b      	str	r3, [r7, #20]
			break;
   99a34:	e014      	b.n	99a60 <DD_SET_SPEED+0xc4>
			case 280:
			dty_val = 0x00000130;
   99a36:	f44f 7398 	mov.w	r3, #304	; 0x130
   99a3a:	613b      	str	r3, [r7, #16]
			prd_val =  0x0000280;
   99a3c:	f44f 7320 	mov.w	r3, #640	; 0x280
   99a40:	617b      	str	r3, [r7, #20]
			break;
   99a42:	e00d      	b.n	99a60 <DD_SET_SPEED+0xc4>
			case 320:
			dty_val = 0x00000120;
   99a44:	f44f 7390 	mov.w	r3, #288	; 0x120
   99a48:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000250;
   99a4a:	f44f 7314 	mov.w	r3, #592	; 0x250
   99a4e:	617b      	str	r3, [r7, #20]
			break;
   99a50:	e006      	b.n	99a60 <DD_SET_SPEED+0xc4>
			case 360:
			dty_val = 0x00000110;
   99a52:	f44f 7388 	mov.w	r3, #272	; 0x110
   99a56:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000210;
   99a58:	f44f 7304 	mov.w	r3, #528	; 0x210
   99a5c:	617b      	str	r3, [r7, #20]
			break;
   99a5e:	bf00      	nop
			//dty_val = speed/2;
			break;
		}
		
		// convert into duty count
		DD_SET_DUTY(pwm_ch_no,dty_val);
   99a60:	7bfb      	ldrb	r3, [r7, #15]
   99a62:	4618      	mov	r0, r3
   99a64:	6939      	ldr	r1, [r7, #16]
   99a66:	4b16      	ldr	r3, [pc, #88]	; (99ac0 <DD_SET_SPEED+0x124>)
   99a68:	4798      	blx	r3
		DD_SET_PRDY(pwm_ch_no,prd_val);
   99a6a:	7bfb      	ldrb	r3, [r7, #15]
   99a6c:	4618      	mov	r0, r3
   99a6e:	6979      	ldr	r1, [r7, #20]
   99a70:	4b14      	ldr	r3, [pc, #80]	; (99ac4 <DD_SET_SPEED+0x128>)
   99a72:	4798      	blx	r3
		break;
   99a74:	e01f      	b.n	99ab6 <DD_SET_SPEED+0x11a>
		
		case UFPUMP: // UF PUMP
		pwm_ch_no = 5;
   99a76:	2305      	movs	r3, #5
   99a78:	73fb      	strb	r3, [r7, #15]
		dty_val = speed/2;
   99a7a:	683b      	ldr	r3, [r7, #0]
   99a7c:	085b      	lsrs	r3, r3, #1
   99a7e:	613b      	str	r3, [r7, #16]
		// convert into duty count
	//	DD_SET_PRDY(pwm_ch_no,prd_val);
		DD_SET_DUTY(pwm_ch_no,dty_val);
   99a80:	7bfb      	ldrb	r3, [r7, #15]
   99a82:	4618      	mov	r0, r3
   99a84:	6939      	ldr	r1, [r7, #16]
   99a86:	4b0e      	ldr	r3, [pc, #56]	; (99ac0 <DD_SET_SPEED+0x124>)
   99a88:	4798      	blx	r3
		DD_SET_PRDY(pwm_ch_no,speed);
   99a8a:	7bfb      	ldrb	r3, [r7, #15]
   99a8c:	4618      	mov	r0, r3
   99a8e:	6839      	ldr	r1, [r7, #0]
   99a90:	4b0c      	ldr	r3, [pc, #48]	; (99ac4 <DD_SET_SPEED+0x128>)
   99a92:	4798      	blx	r3
		break;
   99a94:	e00f      	b.n	99ab6 <DD_SET_SPEED+0x11a>
		
		case HEPARINPUMP: // HEPARIN PUMP
		pwm_ch_no = 4;
   99a96:	2304      	movs	r3, #4
   99a98:	73fb      	strb	r3, [r7, #15]
		// convert into duty count
		dty_val = speed/2;
   99a9a:	683b      	ldr	r3, [r7, #0]
   99a9c:	085b      	lsrs	r3, r3, #1
   99a9e:	613b      	str	r3, [r7, #16]
		
		DD_SET_DUTY(pwm_ch_no,dty_val);
   99aa0:	7bfb      	ldrb	r3, [r7, #15]
   99aa2:	4618      	mov	r0, r3
   99aa4:	6939      	ldr	r1, [r7, #16]
   99aa6:	4b06      	ldr	r3, [pc, #24]	; (99ac0 <DD_SET_SPEED+0x124>)
   99aa8:	4798      	blx	r3
		DD_SET_PRDY(pwm_ch_no,speed);
   99aaa:	7bfb      	ldrb	r3, [r7, #15]
   99aac:	4618      	mov	r0, r3
   99aae:	6839      	ldr	r1, [r7, #0]
   99ab0:	4b04      	ldr	r3, [pc, #16]	; (99ac4 <DD_SET_SPEED+0x128>)
   99ab2:	4798      	blx	r3
		//DD_SET_PRDY(pwm_ch_no,prd_val);
		break;
   99ab4:	bf00      	nop
	}
	
	return 0;
   99ab6:	2300      	movs	r3, #0
}
   99ab8:	4618      	mov	r0, r3
   99aba:	3718      	adds	r7, #24
   99abc:	46bd      	mov	sp, r7
   99abe:	bd80      	pop	{r7, pc}
   99ac0:	000991f1 	.word	0x000991f1
   99ac4:	0009921d 	.word	0x0009921d

00099ac8 <DD_SET_PUMPFREQ>:

uint8_t DD_SET_PUMPFREQ(sv_pumptype id_pump,uint32_t freq)
{
   99ac8:	b580      	push	{r7, lr}
   99aca:	b084      	sub	sp, #16
   99acc:	af00      	add	r7, sp, #0
   99ace:	4603      	mov	r3, r0
   99ad0:	6039      	str	r1, [r7, #0]
   99ad2:	71fb      	strb	r3, [r7, #7]
		uint32_t prd_val =0x00001000;
   99ad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   99ad8:	60fb      	str	r3, [r7, #12]
		uint8_t pwm_ch_no;
		
			
			prd_val = freq;
   99ada:	683b      	ldr	r3, [r7, #0]
   99adc:	60fb      	str	r3, [r7, #12]
			
			switch (id_pump)
   99ade:	79fb      	ldrb	r3, [r7, #7]
   99ae0:	2b01      	cmp	r3, #1
   99ae2:	d002      	beq.n	99aea <DD_SET_PUMPFREQ+0x22>
   99ae4:	2b02      	cmp	r3, #2
   99ae6:	d008      	beq.n	99afa <DD_SET_PUMPFREQ+0x32>
				DD_SET_PRDY(pwm_ch_no,prd_val);
							
				
				break;
				default:
				break;
   99ae8:	e00f      	b.n	99b0a <DD_SET_PUMPFREQ+0x42>
			prd_val = freq;
			
			switch (id_pump)
			{
				case DCMOTOR1:  // DC MOTOR 1
				pwm_ch_no = 2;
   99aea:	2302      	movs	r3, #2
   99aec:	72fb      	strb	r3, [r7, #11]
								
				DD_SET_PRDY(pwm_ch_no,prd_val);
   99aee:	7afb      	ldrb	r3, [r7, #11]
   99af0:	4618      	mov	r0, r3
   99af2:	68f9      	ldr	r1, [r7, #12]
   99af4:	4b07      	ldr	r3, [pc, #28]	; (99b14 <DD_SET_PUMPFREQ+0x4c>)
   99af6:	4798      	blx	r3
								
				break;
   99af8:	e007      	b.n	99b0a <DD_SET_PUMPFREQ+0x42>
				
				case DCMOTOR2: // DC MOTOR 2
				pwm_ch_no = 0;
   99afa:	2300      	movs	r3, #0
   99afc:	72fb      	strb	r3, [r7, #11]
								
				DD_SET_PRDY(pwm_ch_no,prd_val);
   99afe:	7afb      	ldrb	r3, [r7, #11]
   99b00:	4618      	mov	r0, r3
   99b02:	68f9      	ldr	r1, [r7, #12]
   99b04:	4b03      	ldr	r3, [pc, #12]	; (99b14 <DD_SET_PUMPFREQ+0x4c>)
   99b06:	4798      	blx	r3
							
				
				break;
   99b08:	bf00      	nop
				default:
				break;
			}
	
		
	return 0;
   99b0a:	2300      	movs	r3, #0
}
   99b0c:	4618      	mov	r0, r3
   99b0e:	3710      	adds	r7, #16
   99b10:	46bd      	mov	sp, r7
   99b12:	bd80      	pop	{r7, pc}
   99b14:	0009921d 	.word	0x0009921d

00099b18 <DD_CHNG_HTR>:


uint8_t DD_CHNG_HTR(uint32_t dty_val)
{
   99b18:	b580      	push	{r7, lr}
   99b1a:	b084      	sub	sp, #16
   99b1c:	af00      	add	r7, sp, #0
   99b1e:	6078      	str	r0, [r7, #4]
	;
	uint8_t pwm_ch_no = 1;
   99b20:	2301      	movs	r3, #1
   99b22:	73fb      	strb	r3, [r7, #15]
	
	DD_SET_DUTY(pwm_ch_no,dty_val);
   99b24:	7bfb      	ldrb	r3, [r7, #15]
   99b26:	4618      	mov	r0, r3
   99b28:	6879      	ldr	r1, [r7, #4]
   99b2a:	4b03      	ldr	r3, [pc, #12]	; (99b38 <DD_CHNG_HTR+0x20>)
   99b2c:	4798      	blx	r3
	
	return 0;
   99b2e:	2300      	movs	r3, #0
}
   99b30:	4618      	mov	r0, r3
   99b32:	3710      	adds	r7, #16
   99b34:	46bd      	mov	sp, r7
   99b36:	bd80      	pop	{r7, pc}
   99b38:	000991f1 	.word	0x000991f1

00099b3c <DD_SET_DIR>:


uint8_t DD_SET_DIR()               // Heparin Direction
{
   99b3c:	b580      	push	{r7, lr}
   99b3e:	b082      	sub	sp, #8
   99b40:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=1;
   99b42:	2301      	movs	r3, #1
   99b44:	607b      	str	r3, [r7, #4]
	peri = PD;
   99b46:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   99b4a:	603b      	str	r3, [r7, #0]
	
	DD_SET_PIO(peri,p_io);
   99b4c:	6838      	ldr	r0, [r7, #0]
   99b4e:	6879      	ldr	r1, [r7, #4]
   99b50:	4b03      	ldr	r3, [pc, #12]	; (99b60 <DD_SET_DIR+0x24>)
   99b52:	4798      	blx	r3
	
	return 0;
   99b54:	2300      	movs	r3, #0
}
   99b56:	4618      	mov	r0, r3
   99b58:	3708      	adds	r7, #8
   99b5a:	46bd      	mov	sp, r7
   99b5c:	bd80      	pop	{r7, pc}
   99b5e:	bf00      	nop
   99b60:	00098745 	.word	0x00098745

00099b64 <DD_RESET_DIR>:

uint8_t DD_RESET_DIR()   // Heparin Direction
{
   99b64:	b580      	push	{r7, lr}
   99b66:	b082      	sub	sp, #8
   99b68:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=1;
   99b6a:	2301      	movs	r3, #1
   99b6c:	607b      	str	r3, [r7, #4]
	peri = PD;
   99b6e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   99b72:	603b      	str	r3, [r7, #0]
	
	DD_RESET_PIO(peri,p_io);
   99b74:	6838      	ldr	r0, [r7, #0]
   99b76:	6879      	ldr	r1, [r7, #4]
   99b78:	4b03      	ldr	r3, [pc, #12]	; (99b88 <DD_RESET_DIR+0x24>)
   99b7a:	4798      	blx	r3
	
	return 0;
   99b7c:	2300      	movs	r3, #0
}
   99b7e:	4618      	mov	r0, r3
   99b80:	3708      	adds	r7, #8
   99b82:	46bd      	mov	sp, r7
   99b84:	bd80      	pop	{r7, pc}
   99b86:	bf00      	nop
   99b88:	000987c9 	.word	0x000987c9

00099b8c <DD_SET_RED>:
uint8_t DD_SET_RED()               // RED
{
   99b8c:	b580      	push	{r7, lr}
   99b8e:	af00      	add	r7, sp, #0
	DD_SET_VALVE(ALARM_RED);
   99b90:	201e      	movs	r0, #30
   99b92:	4b02      	ldr	r3, [pc, #8]	; (99b9c <DD_SET_RED+0x10>)
   99b94:	4798      	blx	r3
	return 0;
   99b96:	2300      	movs	r3, #0
}
   99b98:	4618      	mov	r0, r3
   99b9a:	bd80      	pop	{r7, pc}
   99b9c:	00099c2d 	.word	0x00099c2d

00099ba0 <DD_SET_GREEN>:
uint8_t DD_SET_GREEN()               // GREEN
{
   99ba0:	b580      	push	{r7, lr}
   99ba2:	af00      	add	r7, sp, #0
	DD_SET_VALVE(ALARM_GREEN);
   99ba4:	2020      	movs	r0, #32
   99ba6:	4b02      	ldr	r3, [pc, #8]	; (99bb0 <DD_SET_GREEN+0x10>)
   99ba8:	4798      	blx	r3
	return 0;
   99baa:	2300      	movs	r3, #0
}
   99bac:	4618      	mov	r0, r3
   99bae:	bd80      	pop	{r7, pc}
   99bb0:	00099c2d 	.word	0x00099c2d

00099bb4 <DD_SET_YELLOW>:
uint8_t DD_SET_YELLOW()               // YELLOW
{
   99bb4:	b580      	push	{r7, lr}
   99bb6:	af00      	add	r7, sp, #0
	DD_SET_VALVE(ALARM_AMBER);
   99bb8:	201f      	movs	r0, #31
   99bba:	4b02      	ldr	r3, [pc, #8]	; (99bc4 <DD_SET_YELLOW+0x10>)
   99bbc:	4798      	blx	r3
	return 0;
   99bbe:	2300      	movs	r3, #0
}
   99bc0:	4618      	mov	r0, r3
   99bc2:	bd80      	pop	{r7, pc}
   99bc4:	00099c2d 	.word	0x00099c2d

00099bc8 <DD_SET_BUZZER>:
uint8_t DD_SET_BUZZER()               // BUZZZER
{
   99bc8:	b580      	push	{r7, lr}
   99bca:	af00      	add	r7, sp, #0
	DD_SET_VALVE(ALARM_BUZZER);
   99bcc:	201d      	movs	r0, #29
   99bce:	4b02      	ldr	r3, [pc, #8]	; (99bd8 <DD_SET_BUZZER+0x10>)
   99bd0:	4798      	blx	r3
	return 0;
   99bd2:	2300      	movs	r3, #0
}
   99bd4:	4618      	mov	r0, r3
   99bd6:	bd80      	pop	{r7, pc}
   99bd8:	00099c2d 	.word	0x00099c2d

00099bdc <DD_RESET_RED>:
uint8_t DD_RESET_RED()               // RED
{
   99bdc:	b580      	push	{r7, lr}
   99bde:	af00      	add	r7, sp, #0
	DD_RESET_VALVE(ALARM_RED);
   99be0:	201e      	movs	r0, #30
   99be2:	4b02      	ldr	r3, [pc, #8]	; (99bec <DD_RESET_RED+0x10>)
   99be4:	4798      	blx	r3
	return 0;
   99be6:	2300      	movs	r3, #0
}
   99be8:	4618      	mov	r0, r3
   99bea:	bd80      	pop	{r7, pc}
   99bec:	00099ced 	.word	0x00099ced

00099bf0 <DD_RESET_GREEN>:
uint8_t DD_RESET_GREEN()               // GREEN
{
   99bf0:	b580      	push	{r7, lr}
   99bf2:	af00      	add	r7, sp, #0
	DD_RESET_VALVE(ALARM_GREEN);
   99bf4:	2020      	movs	r0, #32
   99bf6:	4b02      	ldr	r3, [pc, #8]	; (99c00 <DD_RESET_GREEN+0x10>)
   99bf8:	4798      	blx	r3
	return 0;
   99bfa:	2300      	movs	r3, #0
}
   99bfc:	4618      	mov	r0, r3
   99bfe:	bd80      	pop	{r7, pc}
   99c00:	00099ced 	.word	0x00099ced

00099c04 <DD_RESET_YELLOW>:
uint8_t DD_RESET_YELLOW()               // YELLOW
{
   99c04:	b580      	push	{r7, lr}
   99c06:	af00      	add	r7, sp, #0
	DD_RESET_VALVE(ALARM_AMBER);
   99c08:	201f      	movs	r0, #31
   99c0a:	4b02      	ldr	r3, [pc, #8]	; (99c14 <DD_RESET_YELLOW+0x10>)
   99c0c:	4798      	blx	r3
	return 0;
   99c0e:	2300      	movs	r3, #0
}
   99c10:	4618      	mov	r0, r3
   99c12:	bd80      	pop	{r7, pc}
   99c14:	00099ced 	.word	0x00099ced

00099c18 <DD_RESET_BUZZER>:
uint8_t DD_RESET_BUZZER()               // BUZZZER
{
   99c18:	b580      	push	{r7, lr}
   99c1a:	af00      	add	r7, sp, #0
	DD_RESET_VALVE(ALARM_BUZZER);
   99c1c:	201d      	movs	r0, #29
   99c1e:	4b02      	ldr	r3, [pc, #8]	; (99c28 <DD_RESET_BUZZER+0x10>)
   99c20:	4798      	blx	r3
	return 0;
   99c22:	2300      	movs	r3, #0
}
   99c24:	4618      	mov	r0, r3
   99c26:	bd80      	pop	{r7, pc}
   99c28:	00099ced 	.word	0x00099ced

00099c2c <DD_SET_VALVE>:
uint8_t DD_SET_VALVE(sv_valvetype id_valve)
{
   99c2c:	b580      	push	{r7, lr}
   99c2e:	b082      	sub	sp, #8
   99c30:	af00      	add	r7, sp, #0
   99c32:	4603      	mov	r3, r0
   99c34:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io, peri;

     if((id_valve >=1) && (id_valve <= 16))
   99c36:	79fb      	ldrb	r3, [r7, #7]
   99c38:	2b00      	cmp	r3, #0
   99c3a:	d015      	beq.n	99c68 <DD_SET_VALVE+0x3c>
   99c3c:	79fb      	ldrb	r3, [r7, #7]
   99c3e:	2b10      	cmp	r3, #16
   99c40:	d812      	bhi.n	99c68 <DD_SET_VALVE+0x3c>
	
		{
	
		dd_valve_port_1_16 |= 1 << id_valve - 1;
   99c42:	79fb      	ldrb	r3, [r7, #7]
   99c44:	3b01      	subs	r3, #1
   99c46:	2201      	movs	r2, #1
   99c48:	fa02 f303 	lsl.w	r3, r2, r3
   99c4c:	b29a      	uxth	r2, r3
   99c4e:	4b21      	ldr	r3, [pc, #132]	; (99cd4 <DD_SET_VALVE+0xa8>)
   99c50:	881b      	ldrh	r3, [r3, #0]
   99c52:	b29b      	uxth	r3, r3
   99c54:	4313      	orrs	r3, r2
   99c56:	b29b      	uxth	r3, r3
   99c58:	b29a      	uxth	r2, r3
   99c5a:	4b1e      	ldr	r3, [pc, #120]	; (99cd4 <DD_SET_VALVE+0xa8>)
   99c5c:	801a      	strh	r2, [r3, #0]

		DD_SET_VALVE_1_16_IO();
   99c5e:	4b1e      	ldr	r3, [pc, #120]	; (99cd8 <DD_SET_VALVE+0xac>)
   99c60:	4798      	blx	r3

		DD_LATCH_STROBE_X1_X16();
   99c62:	4b1e      	ldr	r3, [pc, #120]	; (99cdc <DD_SET_VALVE+0xb0>)
   99c64:	4798      	blx	r3
   99c66:	e030      	b.n	99cca <DD_SET_VALVE+0x9e>
		
		}

	   else	if((id_valve >=17) && (id_valve <= VALVE_MAX))
   99c68:	79fb      	ldrb	r3, [r7, #7]
   99c6a:	2b10      	cmp	r3, #16
   99c6c:	d915      	bls.n	99c9a <DD_SET_VALVE+0x6e>
   99c6e:	79fb      	ldrb	r3, [r7, #7]
   99c70:	2b16      	cmp	r3, #22
   99c72:	d812      	bhi.n	99c9a <DD_SET_VALVE+0x6e>
		{

					dd_valve_port_17_20 |= 1 << id_valve - 17;         // Earlier 6
   99c74:	79fb      	ldrb	r3, [r7, #7]
   99c76:	3b11      	subs	r3, #17
   99c78:	2201      	movs	r2, #1
   99c7a:	fa02 f303 	lsl.w	r3, r2, r3
   99c7e:	b29a      	uxth	r2, r3
   99c80:	4b17      	ldr	r3, [pc, #92]	; (99ce0 <DD_SET_VALVE+0xb4>)
   99c82:	881b      	ldrh	r3, [r3, #0]
   99c84:	b29b      	uxth	r3, r3
   99c86:	4313      	orrs	r3, r2
   99c88:	b29b      	uxth	r3, r3
   99c8a:	b29a      	uxth	r2, r3
   99c8c:	4b14      	ldr	r3, [pc, #80]	; (99ce0 <DD_SET_VALVE+0xb4>)
   99c8e:	801a      	strh	r2, [r3, #0]

					DD_SET_VALVE_17_20_IO();
   99c90:	4b14      	ldr	r3, [pc, #80]	; (99ce4 <DD_SET_VALVE+0xb8>)
   99c92:	4798      	blx	r3

			        DD_LATCH_STROBE_X17_X20();
   99c94:	4b14      	ldr	r3, [pc, #80]	; (99ce8 <DD_SET_VALVE+0xbc>)
   99c96:	4798      	blx	r3
   99c98:	e017      	b.n	99cca <DD_SET_VALVE+0x9e>
		}
		
		else if ((id_valve >=29) && (id_valve <= 32))                                  // for alarm indicators
   99c9a:	79fb      	ldrb	r3, [r7, #7]
   99c9c:	2b1c      	cmp	r3, #28
   99c9e:	d914      	bls.n	99cca <DD_SET_VALVE+0x9e>
   99ca0:	79fb      	ldrb	r3, [r7, #7]
   99ca2:	2b20      	cmp	r3, #32
   99ca4:	d811      	bhi.n	99cca <DD_SET_VALVE+0x9e>
		{
			dd_valve_port_17_20 |= 1 << id_valve - 17;
   99ca6:	79fb      	ldrb	r3, [r7, #7]
   99ca8:	3b11      	subs	r3, #17
   99caa:	2201      	movs	r2, #1
   99cac:	fa02 f303 	lsl.w	r3, r2, r3
   99cb0:	b29a      	uxth	r2, r3
   99cb2:	4b0b      	ldr	r3, [pc, #44]	; (99ce0 <DD_SET_VALVE+0xb4>)
   99cb4:	881b      	ldrh	r3, [r3, #0]
   99cb6:	b29b      	uxth	r3, r3
   99cb8:	4313      	orrs	r3, r2
   99cba:	b29b      	uxth	r3, r3
   99cbc:	b29a      	uxth	r2, r3
   99cbe:	4b08      	ldr	r3, [pc, #32]	; (99ce0 <DD_SET_VALVE+0xb4>)
   99cc0:	801a      	strh	r2, [r3, #0]
//			DD_SET_VALVE_21_32_IO();
DD_SET_VALVE_17_20_IO();
   99cc2:	4b08      	ldr	r3, [pc, #32]	; (99ce4 <DD_SET_VALVE+0xb8>)
   99cc4:	4798      	blx	r3
			DD_LATCH_STROBE_X17_X20();
   99cc6:	4b08      	ldr	r3, [pc, #32]	; (99ce8 <DD_SET_VALVE+0xbc>)
   99cc8:	4798      	blx	r3
		}
				
	

	return 0;
   99cca:	2300      	movs	r3, #0
}
   99ccc:	4618      	mov	r0, r3
   99cce:	3708      	adds	r7, #8
   99cd0:	46bd      	mov	sp, r7
   99cd2:	bd80      	pop	{r7, pc}
   99cd4:	20071c9c 	.word	0x20071c9c
   99cd8:	00099de9 	.word	0x00099de9
   99cdc:	0009aac9 	.word	0x0009aac9
   99ce0:	20071c9e 	.word	0x20071c9e
   99ce4:	00099f75 	.word	0x00099f75
   99ce8:	0009ab11 	.word	0x0009ab11

00099cec <DD_RESET_VALVE>:

uint8_t DD_RESET_VALVE(sv_valvetype id_valve)
{
   99cec:	b580      	push	{r7, lr}
   99cee:	b082      	sub	sp, #8
   99cf0:	af00      	add	r7, sp, #0
   99cf2:	4603      	mov	r3, r0
   99cf4:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io, peri;

	if(id_valve == VALVE_ID1)
   99cf6:	79fb      	ldrb	r3, [r7, #7]
   99cf8:	2b01      	cmp	r3, #1
   99cfa:	d104      	bne.n	99d06 <DD_RESET_VALVE+0x1a>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"V17_0",6);
   99cfc:	2018      	movs	r0, #24
   99cfe:	4932      	ldr	r1, [pc, #200]	; (99dc8 <DD_RESET_VALVE+0xdc>)
   99d00:	2206      	movs	r2, #6
   99d02:	4b32      	ldr	r3, [pc, #200]	; (99dcc <DD_RESET_VALVE+0xe0>)
   99d04:	4798      	blx	r3
	}
	
	if((id_valve >=1) && (id_valve <= 16))
   99d06:	79fb      	ldrb	r3, [r7, #7]
   99d08:	2b00      	cmp	r3, #0
   99d0a:	d01b      	beq.n	99d44 <DD_RESET_VALVE+0x58>
   99d0c:	79fb      	ldrb	r3, [r7, #7]
   99d0e:	2b10      	cmp	r3, #16
   99d10:	d818      	bhi.n	99d44 <DD_RESET_VALVE+0x58>
	{
	
		dd_valve_port_1_16 = dd_valve_port_1_16 &= ~(1 << id_valve - 1);
   99d12:	79fb      	ldrb	r3, [r7, #7]
   99d14:	3b01      	subs	r3, #1
   99d16:	2201      	movs	r2, #1
   99d18:	fa02 f303 	lsl.w	r3, r2, r3
   99d1c:	b29b      	uxth	r3, r3
   99d1e:	43db      	mvns	r3, r3
   99d20:	b29a      	uxth	r2, r3
   99d22:	4b2b      	ldr	r3, [pc, #172]	; (99dd0 <DD_RESET_VALVE+0xe4>)
   99d24:	881b      	ldrh	r3, [r3, #0]
   99d26:	b29b      	uxth	r3, r3
   99d28:	4013      	ands	r3, r2
   99d2a:	b29b      	uxth	r3, r3
   99d2c:	b29a      	uxth	r2, r3
   99d2e:	4b28      	ldr	r3, [pc, #160]	; (99dd0 <DD_RESET_VALVE+0xe4>)
   99d30:	801a      	strh	r2, [r3, #0]
   99d32:	4b27      	ldr	r3, [pc, #156]	; (99dd0 <DD_RESET_VALVE+0xe4>)
   99d34:	881a      	ldrh	r2, [r3, #0]
   99d36:	4b26      	ldr	r3, [pc, #152]	; (99dd0 <DD_RESET_VALVE+0xe4>)
   99d38:	801a      	strh	r2, [r3, #0]
		DD_SET_VALVE_1_16_IO();
   99d3a:	4b26      	ldr	r3, [pc, #152]	; (99dd4 <DD_RESET_VALVE+0xe8>)
   99d3c:	4798      	blx	r3
		DD_LATCH_STROBE_X1_X16();
   99d3e:	4b26      	ldr	r3, [pc, #152]	; (99dd8 <DD_RESET_VALVE+0xec>)
   99d40:	4798      	blx	r3
   99d42:	e03c      	b.n	99dbe <DD_RESET_VALVE+0xd2>
		
	}

	else if((id_valve >=17) && (id_valve <= VALVE_MAX))
   99d44:	79fb      	ldrb	r3, [r7, #7]
   99d46:	2b10      	cmp	r3, #16
   99d48:	d91b      	bls.n	99d82 <DD_RESET_VALVE+0x96>
   99d4a:	79fb      	ldrb	r3, [r7, #7]
   99d4c:	2b16      	cmp	r3, #22
   99d4e:	d818      	bhi.n	99d82 <DD_RESET_VALVE+0x96>
	{
		dd_valve_port_17_20 = dd_valve_port_17_20 &= ~(1 << id_valve - 17);
   99d50:	79fb      	ldrb	r3, [r7, #7]
   99d52:	3b11      	subs	r3, #17
   99d54:	2201      	movs	r2, #1
   99d56:	fa02 f303 	lsl.w	r3, r2, r3
   99d5a:	b29b      	uxth	r3, r3
   99d5c:	43db      	mvns	r3, r3
   99d5e:	b29a      	uxth	r2, r3
   99d60:	4b1e      	ldr	r3, [pc, #120]	; (99ddc <DD_RESET_VALVE+0xf0>)
   99d62:	881b      	ldrh	r3, [r3, #0]
   99d64:	b29b      	uxth	r3, r3
   99d66:	4013      	ands	r3, r2
   99d68:	b29b      	uxth	r3, r3
   99d6a:	b29a      	uxth	r2, r3
   99d6c:	4b1b      	ldr	r3, [pc, #108]	; (99ddc <DD_RESET_VALVE+0xf0>)
   99d6e:	801a      	strh	r2, [r3, #0]
   99d70:	4b1a      	ldr	r3, [pc, #104]	; (99ddc <DD_RESET_VALVE+0xf0>)
   99d72:	881a      	ldrh	r2, [r3, #0]
   99d74:	4b19      	ldr	r3, [pc, #100]	; (99ddc <DD_RESET_VALVE+0xf0>)
   99d76:	801a      	strh	r2, [r3, #0]
		DD_SET_VALVE_17_20_IO();
   99d78:	4b19      	ldr	r3, [pc, #100]	; (99de0 <DD_RESET_VALVE+0xf4>)
   99d7a:	4798      	blx	r3
		DD_LATCH_STROBE_X17_X20();
   99d7c:	4b19      	ldr	r3, [pc, #100]	; (99de4 <DD_RESET_VALVE+0xf8>)
   99d7e:	4798      	blx	r3
   99d80:	e01d      	b.n	99dbe <DD_RESET_VALVE+0xd2>
		
	}
	
	else if ((id_valve >=29) && (id_valve <= 32))                                  // for alarm indicators
   99d82:	79fb      	ldrb	r3, [r7, #7]
   99d84:	2b1c      	cmp	r3, #28
   99d86:	d91a      	bls.n	99dbe <DD_RESET_VALVE+0xd2>
   99d88:	79fb      	ldrb	r3, [r7, #7]
   99d8a:	2b20      	cmp	r3, #32
   99d8c:	d817      	bhi.n	99dbe <DD_RESET_VALVE+0xd2>
	{
		dd_valve_port_17_20 = dd_valve_port_17_20 &= ~(1 << id_valve - 17);
   99d8e:	79fb      	ldrb	r3, [r7, #7]
   99d90:	3b11      	subs	r3, #17
   99d92:	2201      	movs	r2, #1
   99d94:	fa02 f303 	lsl.w	r3, r2, r3
   99d98:	b29b      	uxth	r3, r3
   99d9a:	43db      	mvns	r3, r3
   99d9c:	b29a      	uxth	r2, r3
   99d9e:	4b0f      	ldr	r3, [pc, #60]	; (99ddc <DD_RESET_VALVE+0xf0>)
   99da0:	881b      	ldrh	r3, [r3, #0]
   99da2:	b29b      	uxth	r3, r3
   99da4:	4013      	ands	r3, r2
   99da6:	b29b      	uxth	r3, r3
   99da8:	b29a      	uxth	r2, r3
   99daa:	4b0c      	ldr	r3, [pc, #48]	; (99ddc <DD_RESET_VALVE+0xf0>)
   99dac:	801a      	strh	r2, [r3, #0]
   99dae:	4b0b      	ldr	r3, [pc, #44]	; (99ddc <DD_RESET_VALVE+0xf0>)
   99db0:	881a      	ldrh	r2, [r3, #0]
   99db2:	4b0a      	ldr	r3, [pc, #40]	; (99ddc <DD_RESET_VALVE+0xf0>)
   99db4:	801a      	strh	r2, [r3, #0]
//		DD_SET_VALVE_21_32_IO();
DD_SET_VALVE_17_20_IO();
   99db6:	4b0a      	ldr	r3, [pc, #40]	; (99de0 <DD_RESET_VALVE+0xf4>)
   99db8:	4798      	blx	r3
		DD_LATCH_STROBE_X17_X20();
   99dba:	4b0a      	ldr	r3, [pc, #40]	; (99de4 <DD_RESET_VALVE+0xf8>)
   99dbc:	4798      	blx	r3
	}

	
	return 0;
   99dbe:	2300      	movs	r3, #0
}
   99dc0:	4618      	mov	r0, r3
   99dc2:	3708      	adds	r7, #8
   99dc4:	46bd      	mov	sp, r7
   99dc6:	bd80      	pop	{r7, pc}
   99dc8:	000aa61c 	.word	0x000aa61c
   99dcc:	0009d1e9 	.word	0x0009d1e9
   99dd0:	20071c9c 	.word	0x20071c9c
   99dd4:	00099de9 	.word	0x00099de9
   99dd8:	0009aac9 	.word	0x0009aac9
   99ddc:	20071c9e 	.word	0x20071c9e
   99de0:	00099f75 	.word	0x00099f75
   99de4:	0009ab11 	.word	0x0009ab11

00099de8 <DD_SET_VALVE_1_16_IO>:

uint8_t DD_SET_VALVE_1_16_IO()

{
   99de8:	b580      	push	{r7, lr}
   99dea:	b084      	sub	sp, #16
   99dec:	af00      	add	r7, sp, #0
	uint8_t count = 1;
   99dee:	2301      	movs	r3, #1
   99df0:	73fb      	strb	r3, [r7, #15]
	uint32_t p_io, peri;
	 while (count <= 16)
   99df2:	e0af      	b.n	99f54 <DD_SET_VALVE_1_16_IO+0x16c>
	 {
			switch (count)
   99df4:	7bfb      	ldrb	r3, [r7, #15]
   99df6:	3b01      	subs	r3, #1
   99df8:	2b0f      	cmp	r3, #15
   99dfa:	f200 8083 	bhi.w	99f04 <DD_SET_VALVE_1_16_IO+0x11c>
   99dfe:	a201      	add	r2, pc, #4	; (adr r2, 99e04 <DD_SET_VALVE_1_16_IO+0x1c>)
   99e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   99e04:	00099e45 	.word	0x00099e45
   99e08:	00099e51 	.word	0x00099e51
   99e0c:	00099e5d 	.word	0x00099e5d
   99e10:	00099e69 	.word	0x00099e69
   99e14:	00099e75 	.word	0x00099e75
   99e18:	00099e81 	.word	0x00099e81
   99e1c:	00099e8d 	.word	0x00099e8d
   99e20:	00099e99 	.word	0x00099e99
   99e24:	00099ea5 	.word	0x00099ea5
   99e28:	00099eb1 	.word	0x00099eb1
   99e2c:	00099ebd 	.word	0x00099ebd
   99e30:	00099ec9 	.word	0x00099ec9
   99e34:	00099ed5 	.word	0x00099ed5
   99e38:	00099ee1 	.word	0x00099ee1
   99e3c:	00099eed 	.word	0x00099eed
   99e40:	00099ef9 	.word	0x00099ef9
			{	
			
			case VALVE_ID1:
			p_io = 10;
   99e44:	230a      	movs	r3, #10
   99e46:	60bb      	str	r3, [r7, #8]
			peri = PB;
   99e48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   99e4c:	607b      	str	r3, [r7, #4]
			break;
   99e4e:	e05a      	b.n	99f06 <DD_SET_VALVE_1_16_IO+0x11e>
			
			case VALVE_ID2:
			p_io = 2;
   99e50:	2302      	movs	r3, #2
   99e52:	60bb      	str	r3, [r7, #8]
			peri = PC;
   99e54:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99e58:	607b      	str	r3, [r7, #4]
			break;
   99e5a:	e054      	b.n	99f06 <DD_SET_VALVE_1_16_IO+0x11e>
			
			case VALVE_ID3:
			p_io = 3;
   99e5c:	2303      	movs	r3, #3
   99e5e:	60bb      	str	r3, [r7, #8]
			peri = PC;
   99e60:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99e64:	607b      	str	r3, [r7, #4]
			break;
   99e66:	e04e      	b.n	99f06 <DD_SET_VALVE_1_16_IO+0x11e>
			
			case VALVE_ID4:
			p_io = 4;
   99e68:	2304      	movs	r3, #4
   99e6a:	60bb      	str	r3, [r7, #8]
			peri = PC;
   99e6c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99e70:	607b      	str	r3, [r7, #4]
			break;
   99e72:	e048      	b.n	99f06 <DD_SET_VALVE_1_16_IO+0x11e>
			
			case VALVE_ID5:
			p_io = 5;
   99e74:	2305      	movs	r3, #5
   99e76:	60bb      	str	r3, [r7, #8]
			peri = PC;
   99e78:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99e7c:	607b      	str	r3, [r7, #4]
			break;
   99e7e:	e042      	b.n	99f06 <DD_SET_VALVE_1_16_IO+0x11e>
	        case VALVE_ID6:
			p_io = 6;
   99e80:	2306      	movs	r3, #6
   99e82:	60bb      	str	r3, [r7, #8]
			peri = PC;
   99e84:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99e88:	607b      	str	r3, [r7, #4]
			break;
   99e8a:	e03c      	b.n	99f06 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID7:
			p_io = 7;
   99e8c:	2307      	movs	r3, #7
   99e8e:	60bb      	str	r3, [r7, #8]
			peri = PC;
   99e90:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99e94:	607b      	str	r3, [r7, #4]
			break;
   99e96:	e036      	b.n	99f06 <DD_SET_VALVE_1_16_IO+0x11e>
			case VALVE_ID8:
			p_io = 8;
   99e98:	2308      	movs	r3, #8
   99e9a:	60bb      	str	r3, [r7, #8]
			peri = PC;
   99e9c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99ea0:	607b      	str	r3, [r7, #4]
			break;
   99ea2:	e030      	b.n	99f06 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID9:
			p_io = 9;
   99ea4:	2309      	movs	r3, #9
   99ea6:	60bb      	str	r3, [r7, #8]
			peri = PC;
   99ea8:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99eac:	607b      	str	r3, [r7, #4]
			break;
   99eae:	e02a      	b.n	99f06 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID10:
			p_io = 10;
   99eb0:	230a      	movs	r3, #10
   99eb2:	60bb      	str	r3, [r7, #8]
			peri = PC;
   99eb4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99eb8:	607b      	str	r3, [r7, #4]
			break;
   99eba:	e024      	b.n	99f06 <DD_SET_VALVE_1_16_IO+0x11e>
							
			case VALVE_ID11:
			p_io = 11;
   99ebc:	230b      	movs	r3, #11
   99ebe:	60bb      	str	r3, [r7, #8]
			peri = PC;
   99ec0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99ec4:	607b      	str	r3, [r7, #4]
			break;
   99ec6:	e01e      	b.n	99f06 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID12:
			p_io = 12;
   99ec8:	230c      	movs	r3, #12
   99eca:	60bb      	str	r3, [r7, #8]
			peri = PC;
   99ecc:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99ed0:	607b      	str	r3, [r7, #4]
			break;
   99ed2:	e018      	b.n	99f06 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID13:
			p_io = 13;
   99ed4:	230d      	movs	r3, #13
   99ed6:	60bb      	str	r3, [r7, #8]
			peri = PC;
   99ed8:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99edc:	607b      	str	r3, [r7, #4]
			break;
   99ede:	e012      	b.n	99f06 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID14:
			p_io = 14;
   99ee0:	230e      	movs	r3, #14
   99ee2:	60bb      	str	r3, [r7, #8]
			peri = PC;
   99ee4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99ee8:	607b      	str	r3, [r7, #4]
			break;
   99eea:	e00c      	b.n	99f06 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID15:
			p_io = 15;
   99eec:	230f      	movs	r3, #15
   99eee:	60bb      	str	r3, [r7, #8]
			peri = PC;
   99ef0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99ef4:	607b      	str	r3, [r7, #4]
			break;
   99ef6:	e006      	b.n	99f06 <DD_SET_VALVE_1_16_IO+0x11e>
		
			case VALVE_ID16:
			p_io = 16;
   99ef8:	2310      	movs	r3, #16
   99efa:	60bb      	str	r3, [r7, #8]
			peri = PC;
   99efc:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99f00:	607b      	str	r3, [r7, #4]
			break;
   99f02:	e000      	b.n	99f06 <DD_SET_VALVE_1_16_IO+0x11e>
					
			default:
			break;
   99f04:	bf00      	nop
				}
		if (dd_valve_port_1_16 & 1<< count-1 )
   99f06:	4b18      	ldr	r3, [pc, #96]	; (99f68 <DD_SET_VALVE_1_16_IO+0x180>)
   99f08:	881b      	ldrh	r3, [r3, #0]
   99f0a:	461a      	mov	r2, r3
   99f0c:	7bfb      	ldrb	r3, [r7, #15]
   99f0e:	3b01      	subs	r3, #1
   99f10:	fa42 f303 	asr.w	r3, r2, r3
   99f14:	f003 0301 	and.w	r3, r3, #1
   99f18:	2b00      	cmp	r3, #0
   99f1a:	d00c      	beq.n	99f36 <DD_SET_VALVE_1_16_IO+0x14e>
						{
							if (count == VALVE_ID1 )
   99f1c:	7bfb      	ldrb	r3, [r7, #15]
   99f1e:	2b01      	cmp	r3, #1
   99f20:	d104      	bne.n	99f2c <DD_SET_VALVE_1_16_IO+0x144>
							{
								DD_SET_PIO(peri,p_io);
   99f22:	6878      	ldr	r0, [r7, #4]
   99f24:	68b9      	ldr	r1, [r7, #8]
   99f26:	4b11      	ldr	r3, [pc, #68]	; (99f6c <DD_SET_VALVE_1_16_IO+0x184>)
   99f28:	4798      	blx	r3
   99f2a:	e010      	b.n	99f4e <DD_SET_VALVE_1_16_IO+0x166>
							}
							else
							DD_RESET_PIO(peri,p_io);
   99f2c:	6878      	ldr	r0, [r7, #4]
   99f2e:	68b9      	ldr	r1, [r7, #8]
   99f30:	4b0f      	ldr	r3, [pc, #60]	; (99f70 <DD_SET_VALVE_1_16_IO+0x188>)
   99f32:	4798      	blx	r3
   99f34:	e00b      	b.n	99f4e <DD_SET_VALVE_1_16_IO+0x166>
						}
						else
						{
							if (count == VALVE_ID1 )
   99f36:	7bfb      	ldrb	r3, [r7, #15]
   99f38:	2b01      	cmp	r3, #1
   99f3a:	d104      	bne.n	99f46 <DD_SET_VALVE_1_16_IO+0x15e>
							{
								DD_RESET_PIO(peri,p_io);
   99f3c:	6878      	ldr	r0, [r7, #4]
   99f3e:	68b9      	ldr	r1, [r7, #8]
   99f40:	4b0b      	ldr	r3, [pc, #44]	; (99f70 <DD_SET_VALVE_1_16_IO+0x188>)
   99f42:	4798      	blx	r3
   99f44:	e003      	b.n	99f4e <DD_SET_VALVE_1_16_IO+0x166>
							}
							else
							DD_SET_PIO(peri,p_io);
   99f46:	6878      	ldr	r0, [r7, #4]
   99f48:	68b9      	ldr	r1, [r7, #8]
   99f4a:	4b08      	ldr	r3, [pc, #32]	; (99f6c <DD_SET_VALVE_1_16_IO+0x184>)
   99f4c:	4798      	blx	r3
						}
			count++;
   99f4e:	7bfb      	ldrb	r3, [r7, #15]
   99f50:	3301      	adds	r3, #1
   99f52:	73fb      	strb	r3, [r7, #15]
uint8_t DD_SET_VALVE_1_16_IO()

{
	uint8_t count = 1;
	uint32_t p_io, peri;
	 while (count <= 16)
   99f54:	7bfb      	ldrb	r3, [r7, #15]
   99f56:	2b10      	cmp	r3, #16
   99f58:	f67f af4c 	bls.w	99df4 <DD_SET_VALVE_1_16_IO+0xc>
							else
							DD_SET_PIO(peri,p_io);
						}
			count++;
		}
	return 0;
   99f5c:	2300      	movs	r3, #0
}
   99f5e:	4618      	mov	r0, r3
   99f60:	3710      	adds	r7, #16
   99f62:	46bd      	mov	sp, r7
   99f64:	bd80      	pop	{r7, pc}
   99f66:	bf00      	nop
   99f68:	20071c9c 	.word	0x20071c9c
   99f6c:	00098745 	.word	0x00098745
   99f70:	000987c9 	.word	0x000987c9

00099f74 <DD_SET_VALVE_17_20_IO>:

uint8_t DD_SET_VALVE_17_20_IO()
{
   99f74:	b580      	push	{r7, lr}
   99f76:	b084      	sub	sp, #16
   99f78:	af00      	add	r7, sp, #0
		uint8_t count = 17;
   99f7a:	2311      	movs	r3, #17
   99f7c:	73fb      	strb	r3, [r7, #15]
		uint32_t p_io, peri;
		while (count <= 32)  // 32
   99f7e:	e074      	b.n	9a06a <DD_SET_VALVE_17_20_IO+0xf6>
		{
			switch (count)
   99f80:	7bfb      	ldrb	r3, [r7, #15]
   99f82:	3b11      	subs	r3, #17
   99f84:	2b0f      	cmp	r3, #15
   99f86:	d853      	bhi.n	9a030 <DD_SET_VALVE_17_20_IO+0xbc>
   99f88:	a201      	add	r2, pc, #4	; (adr r2, 99f90 <DD_SET_VALVE_17_20_IO+0x1c>)
   99f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   99f8e:	bf00      	nop
   99f90:	00099fd1 	.word	0x00099fd1
   99f94:	00099fdd 	.word	0x00099fdd
   99f98:	00099fe9 	.word	0x00099fe9
   99f9c:	00099ff5 	.word	0x00099ff5
   99fa0:	0009a031 	.word	0x0009a031
   99fa4:	0009a031 	.word	0x0009a031
   99fa8:	0009a031 	.word	0x0009a031
   99fac:	0009a031 	.word	0x0009a031
   99fb0:	0009a031 	.word	0x0009a031
   99fb4:	0009a031 	.word	0x0009a031
   99fb8:	0009a031 	.word	0x0009a031
   99fbc:	0009a031 	.word	0x0009a031
   99fc0:	0009a001 	.word	0x0009a001
   99fc4:	0009a00d 	.word	0x0009a00d
   99fc8:	0009a019 	.word	0x0009a019
   99fcc:	0009a025 	.word	0x0009a025
			{
				
					case VALVE_ID17:
					p_io = 1;
   99fd0:	2301      	movs	r3, #1
   99fd2:	60bb      	str	r3, [r7, #8]
					peri = PC;
   99fd4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99fd8:	607b      	str	r3, [r7, #4]
					break;
   99fda:	e02a      	b.n	9a032 <DD_SET_VALVE_17_20_IO+0xbe>
				
					case VALVE_ID18:
					p_io = 2;
   99fdc:	2302      	movs	r3, #2
   99fde:	60bb      	str	r3, [r7, #8]
					peri = PC;
   99fe0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99fe4:	607b      	str	r3, [r7, #4]
					break;
   99fe6:	e024      	b.n	9a032 <DD_SET_VALVE_17_20_IO+0xbe>
				
					case VALVE_ID19:
					p_io = 3;
   99fe8:	2303      	movs	r3, #3
   99fea:	60bb      	str	r3, [r7, #8]
					peri = PC;
   99fec:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99ff0:	607b      	str	r3, [r7, #4]
					break;
   99ff2:	e01e      	b.n	9a032 <DD_SET_VALVE_17_20_IO+0xbe>
				
					case VALVE_ID20:
					p_io = 4;
   99ff4:	2304      	movs	r3, #4
   99ff6:	60bb      	str	r3, [r7, #8]
					peri = PC;
   99ff8:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99ffc:	607b      	str	r3, [r7, #4]
					break;
   99ffe:	e018      	b.n	9a032 <DD_SET_VALVE_17_20_IO+0xbe>
				
					case ALARM_BUZZER:
					p_io = 13;
   9a000:	230d      	movs	r3, #13
   9a002:	60bb      	str	r3, [r7, #8]
					peri = PC;
   9a004:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9a008:	607b      	str	r3, [r7, #4]
					break;
   9a00a:	e012      	b.n	9a032 <DD_SET_VALVE_17_20_IO+0xbe>
					case ALARM_RED:
					p_io = 14;
   9a00c:	230e      	movs	r3, #14
   9a00e:	60bb      	str	r3, [r7, #8]
					peri = PC;
   9a010:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9a014:	607b      	str	r3, [r7, #4]
					break;
   9a016:	e00c      	b.n	9a032 <DD_SET_VALVE_17_20_IO+0xbe>
					case ALARM_AMBER:
					p_io = 15;
   9a018:	230f      	movs	r3, #15
   9a01a:	60bb      	str	r3, [r7, #8]
					peri = PC;
   9a01c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9a020:	607b      	str	r3, [r7, #4]
					break;
   9a022:	e006      	b.n	9a032 <DD_SET_VALVE_17_20_IO+0xbe>
				
					case ALARM_GREEN:
					p_io = 16;
   9a024:	2310      	movs	r3, #16
   9a026:	60bb      	str	r3, [r7, #8]
					peri = PC;
   9a028:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9a02c:	607b      	str	r3, [r7, #4]
					break;
   9a02e:	e000      	b.n	9a032 <DD_SET_VALVE_17_20_IO+0xbe>
				
					default:
					break;
   9a030:	bf00      	nop
			}
					if (dd_valve_port_17_20 & 1<< count-17 )
   9a032:	4b12      	ldr	r3, [pc, #72]	; (9a07c <DD_SET_VALVE_17_20_IO+0x108>)
   9a034:	881b      	ldrh	r3, [r3, #0]
   9a036:	461a      	mov	r2, r3
   9a038:	7bfb      	ldrb	r3, [r7, #15]
   9a03a:	3b11      	subs	r3, #17
   9a03c:	fa42 f303 	asr.w	r3, r2, r3
   9a040:	f003 0301 	and.w	r3, r3, #1
   9a044:	2b00      	cmp	r3, #0
   9a046:	d004      	beq.n	9a052 <DD_SET_VALVE_17_20_IO+0xde>
	
					{

						DD_RESET_PIO(peri,p_io);
   9a048:	6878      	ldr	r0, [r7, #4]
   9a04a:	68b9      	ldr	r1, [r7, #8]
   9a04c:	4b0c      	ldr	r3, [pc, #48]	; (9a080 <DD_SET_VALVE_17_20_IO+0x10c>)
   9a04e:	4798      	blx	r3
   9a050:	e003      	b.n	9a05a <DD_SET_VALVE_17_20_IO+0xe6>
					}
			else
			{
			DD_SET_PIO(peri,p_io);
   9a052:	6878      	ldr	r0, [r7, #4]
   9a054:	68b9      	ldr	r1, [r7, #8]
   9a056:	4b0b      	ldr	r3, [pc, #44]	; (9a084 <DD_SET_VALVE_17_20_IO+0x110>)
   9a058:	4798      	blx	r3
			}
				
		count++;
   9a05a:	7bfb      	ldrb	r3, [r7, #15]
   9a05c:	3301      	adds	r3, #1
   9a05e:	73fb      	strb	r3, [r7, #15]
		if (count == 21)
   9a060:	7bfb      	ldrb	r3, [r7, #15]
   9a062:	2b15      	cmp	r3, #21
   9a064:	d101      	bne.n	9a06a <DD_SET_VALVE_17_20_IO+0xf6>
		{
			count = 29;
   9a066:	231d      	movs	r3, #29
   9a068:	73fb      	strb	r3, [r7, #15]

uint8_t DD_SET_VALVE_17_20_IO()
{
		uint8_t count = 17;
		uint32_t p_io, peri;
		while (count <= 32)  // 32
   9a06a:	7bfb      	ldrb	r3, [r7, #15]
   9a06c:	2b20      	cmp	r3, #32
   9a06e:	d987      	bls.n	99f80 <DD_SET_VALVE_17_20_IO+0xc>
		{
			count = 29;
		}
	}
	
	return 0;
   9a070:	2300      	movs	r3, #0
}
   9a072:	4618      	mov	r0, r3
   9a074:	3710      	adds	r7, #16
   9a076:	46bd      	mov	sp, r7
   9a078:	bd80      	pop	{r7, pc}
   9a07a:	bf00      	nop
   9a07c:	20071c9e 	.word	0x20071c9e
   9a080:	000987c9 	.word	0x000987c9
   9a084:	00098745 	.word	0x00098745

0009a088 <DD_SET_CLAMP>:




uint8_t DD_SET_CLAMP()		// Venous Clamp
{
   9a088:	b580      	push	{r7, lr}
   9a08a:	b082      	sub	sp, #8
   9a08c:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=27;
   9a08e:	231b      	movs	r3, #27
   9a090:	607b      	str	r3, [r7, #4]
	peri = PC;
   9a092:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9a096:	603b      	str	r3, [r7, #0]
	
	DD_SET_PIO(peri,p_io);
   9a098:	6838      	ldr	r0, [r7, #0]
   9a09a:	6879      	ldr	r1, [r7, #4]
   9a09c:	4b03      	ldr	r3, [pc, #12]	; (9a0ac <DD_SET_CLAMP+0x24>)
   9a09e:	4798      	blx	r3
	
	return 0;
   9a0a0:	2300      	movs	r3, #0
}
   9a0a2:	4618      	mov	r0, r3
   9a0a4:	3708      	adds	r7, #8
   9a0a6:	46bd      	mov	sp, r7
   9a0a8:	bd80      	pop	{r7, pc}
   9a0aa:	bf00      	nop
   9a0ac:	00098745 	.word	0x00098745

0009a0b0 <DD_RESET_CLAMP>:

uint8_t DD_RESET_CLAMP()   // Venous Clamp
{
   9a0b0:	b580      	push	{r7, lr}
   9a0b2:	b082      	sub	sp, #8
   9a0b4:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=27;
   9a0b6:	231b      	movs	r3, #27
   9a0b8:	607b      	str	r3, [r7, #4]
	peri = PC;
   9a0ba:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9a0be:	603b      	str	r3, [r7, #0]
	
	DD_RESET_PIO(peri,p_io);
   9a0c0:	6838      	ldr	r0, [r7, #0]
   9a0c2:	6879      	ldr	r1, [r7, #4]
   9a0c4:	4b03      	ldr	r3, [pc, #12]	; (9a0d4 <DD_RESET_CLAMP+0x24>)
   9a0c6:	4798      	blx	r3
	
	return 0;
   9a0c8:	2300      	movs	r3, #0
}
   9a0ca:	4618      	mov	r0, r3
   9a0cc:	3708      	adds	r7, #8
   9a0ce:	46bd      	mov	sp, r7
   9a0d0:	bd80      	pop	{r7, pc}
   9a0d2:	bf00      	nop
   9a0d4:	000987c9 	.word	0x000987c9

0009a0d8 <DD_RD_SENSIN>:

uint8_t DD_RD_SENSIN(sv_sensintype id_sensein)
{
   9a0d8:	b580      	push	{r7, lr}
   9a0da:	b086      	sub	sp, #24
   9a0dc:	af00      	add	r7, sp, #0
   9a0de:	4603      	mov	r3, r0
   9a0e0:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io, peri;
	uint8_t pio_val= 0;
   9a0e2:	2300      	movs	r3, #0
   9a0e4:	73fb      	strb	r3, [r7, #15]
	switch(id_sensein)
   9a0e6:	79fb      	ldrb	r3, [r7, #7]
   9a0e8:	3b01      	subs	r3, #1
   9a0ea:	2b24      	cmp	r3, #36	; 0x24
   9a0ec:	f200 812c 	bhi.w	9a348 <DD_RD_SENSIN+0x270>
   9a0f0:	a201      	add	r2, pc, #4	; (adr r2, 9a0f8 <DD_RD_SENSIN+0x20>)
   9a0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9a0f6:	bf00      	nop
   9a0f8:	0009a18d 	.word	0x0009a18d
   9a0fc:	0009a199 	.word	0x0009a199
   9a100:	0009a1a5 	.word	0x0009a1a5
   9a104:	0009a1b1 	.word	0x0009a1b1
   9a108:	0009a1bd 	.word	0x0009a1bd
   9a10c:	0009a1c9 	.word	0x0009a1c9
   9a110:	0009a1d5 	.word	0x0009a1d5
   9a114:	0009a1e1 	.word	0x0009a1e1
   9a118:	0009a1ed 	.word	0x0009a1ed
   9a11c:	0009a1f9 	.word	0x0009a1f9
   9a120:	0009a205 	.word	0x0009a205
   9a124:	0009a211 	.word	0x0009a211
   9a128:	0009a21d 	.word	0x0009a21d
   9a12c:	0009a229 	.word	0x0009a229
   9a130:	0009a235 	.word	0x0009a235
   9a134:	0009a241 	.word	0x0009a241
   9a138:	0009a24d 	.word	0x0009a24d
   9a13c:	0009a259 	.word	0x0009a259
   9a140:	0009a265 	.word	0x0009a265
   9a144:	0009a271 	.word	0x0009a271
   9a148:	0009a27d 	.word	0x0009a27d
   9a14c:	0009a289 	.word	0x0009a289
   9a150:	0009a295 	.word	0x0009a295
   9a154:	0009a2a1 	.word	0x0009a2a1
   9a158:	0009a2ad 	.word	0x0009a2ad
   9a15c:	0009a2b9 	.word	0x0009a2b9
   9a160:	0009a2c5 	.word	0x0009a2c5
   9a164:	0009a2d1 	.word	0x0009a2d1
   9a168:	0009a2dd 	.word	0x0009a2dd
   9a16c:	0009a2e9 	.word	0x0009a2e9
   9a170:	0009a2f5 	.word	0x0009a2f5
   9a174:	0009a301 	.word	0x0009a301
   9a178:	0009a30d 	.word	0x0009a30d
   9a17c:	0009a319 	.word	0x0009a319
   9a180:	0009a325 	.word	0x0009a325
   9a184:	0009a331 	.word	0x0009a331
   9a188:	0009a33d 	.word	0x0009a33d
	{
		case SV_SENSIN_ID1:
	
		p_io = 7;               // lvl
   9a18c:	2307      	movs	r3, #7
   9a18e:	617b      	str	r3, [r7, #20]
		peri = PA;
   9a190:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   9a194:	613b      	str	r3, [r7, #16]
		break;
   9a196:	e0d8      	b.n	9a34a <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID2:					// dgpfeedback
		p_io = 25;
   9a198:	2319      	movs	r3, #25
   9a19a:	617b      	str	r3, [r7, #20]
		peri = PC;
   9a19c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9a1a0:	613b      	str	r3, [r7, #16]
		break;
   9a1a2:	e0d2      	b.n	9a34a <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID3:					// fpcurrentsens
		p_io = 12;
   9a1a4:	230c      	movs	r3, #12
   9a1a6:	617b      	str	r3, [r7, #20]
		peri = PB;
   9a1a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   9a1ac:	613b      	str	r3, [r7, #16]
		break;
   9a1ae:	e0cc      	b.n	9a34a <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID4:					// uf_feeddback
		
		p_io = 0;
   9a1b0:	2300      	movs	r3, #0
   9a1b2:	617b      	str	r3, [r7, #20]
		peri = PD;
   9a1b4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   9a1b8:	613b      	str	r3, [r7, #16]
		break;
   9a1ba:	e0c6      	b.n	9a34a <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID5:					// BP_feedback
		
		p_io = 30;
   9a1bc:	231e      	movs	r3, #30
   9a1be:	617b      	str	r3, [r7, #20]
		peri = PC;
   9a1c0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9a1c4:	613b      	str	r3, [r7, #16]
		break;
   9a1c6:	e0c0      	b.n	9a34a <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID6:					// HP_START
		
		p_io = 6;
   9a1c8:	2306      	movs	r3, #6
   9a1ca:	617b      	str	r3, [r7, #20]
		peri = PD;
   9a1cc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   9a1d0:	613b      	str	r3, [r7, #16]
		break;
   9a1d2:	e0ba      	b.n	9a34a <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID7:					//HP_STOP
		p_io = 9;
   9a1d4:	2309      	movs	r3, #9
   9a1d6:	617b      	str	r3, [r7, #20]
		peri = PD;
   9a1d8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   9a1dc:	613b      	str	r3, [r7, #16]
		break;
   9a1de:	e0b4      	b.n	9a34a <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID8:					//ABD
		p_io = 5;
   9a1e0:	2305      	movs	r3, #5
   9a1e2:	617b      	str	r3, [r7, #20]
		peri = PD;
   9a1e4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   9a1e8:	613b      	str	r3, [r7, #16]
		break;
   9a1ea:	e0ae      	b.n	9a34a <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID9:					// holder sense1
		p_io = 8;
   9a1ec:	2308      	movs	r3, #8
   9a1ee:	617b      	str	r3, [r7, #20]
		peri = PB;
   9a1f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   9a1f4:	613b      	str	r3, [r7, #16]
		break;
   9a1f6:	e0a8      	b.n	9a34a <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID10:				// holder sense 2
		
		p_io = 18;
   9a1f8:	2312      	movs	r3, #18
   9a1fa:	617b      	str	r3, [r7, #20]
		peri = PB;
   9a1fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   9a200:	613b      	str	r3, [r7, #16]
		break;
   9a202:	e0a2      	b.n	9a34a <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID11:					//fpfeedback
		p_io = 26;
   9a204:	231a      	movs	r3, #26
   9a206:	617b      	str	r3, [r7, #20]
		peri = PC;
   9a208:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9a20c:	613b      	str	r3, [r7, #16]
		break;
   9a20e:	e09c      	b.n	9a34a <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID12:		//flow_switch
		p_io =19;
   9a210:	2313      	movs	r3, #19
   9a212:	617b      	str	r3, [r7, #20]
		peri =PA;
   9a214:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   9a218:	613b      	str	r3, [r7, #16]
		break;
   9a21a:	e096      	b.n	9a34a <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID13: //heparin_feedback
		p_io =3;
   9a21c:	2303      	movs	r3, #3
   9a21e:	617b      	str	r3, [r7, #20]
		peri =PD;
   9a220:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   9a224:	613b      	str	r3, [r7, #16]
		break;
   9a226:	e090      	b.n	9a34a <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID14: //bloodpump_door
		p_io =16;
   9a228:	2310      	movs	r3, #16
   9a22a:	617b      	str	r3, [r7, #20]
		peri =PB;
   9a22c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   9a230:	613b      	str	r3, [r7, #16]
		break;
   9a232:	e08a      	b.n	9a34a <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID15: // bp_inc
		p_io =18;
   9a234:	2312      	movs	r3, #18
   9a236:	617b      	str	r3, [r7, #20]
		peri =PC;
   9a238:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9a23c:	613b      	str	r3, [r7, #16]
		break;
   9a23e:	e084      	b.n	9a34a <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID16: // bp_dec
		p_io =4;
   9a240:	2304      	movs	r3, #4
   9a242:	617b      	str	r3, [r7, #20]
		peri =PD;
   9a244:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   9a248:	613b      	str	r3, [r7, #16]
		break;
   9a24a:	e07e      	b.n	9a34a <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID17: //venous_clamp_feedback
		p_io =22;
   9a24c:	2316      	movs	r3, #22
   9a24e:	617b      	str	r3, [r7, #20]
		peri =PB;
   9a250:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   9a254:	613b      	str	r3, [r7, #16]
		break;
   9a256:	e078      	b.n	9a34a <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID18: //venous_clamp_door
		p_io =10;
   9a258:	230a      	movs	r3, #10
   9a25a:	617b      	str	r3, [r7, #20]
		peri =PD;
   9a25c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   9a260:	613b      	str	r3, [r7, #16]
		break;
   9a262:	e072      	b.n	9a34a <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID19:
 		p_io =23;					//B_PROPO_I/F3
   9a264:	2317      	movs	r3, #23
   9a266:	617b      	str	r3, [r7, #20]
 		peri =PB;
   9a268:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   9a26c:	613b      	str	r3, [r7, #16]
		break;
   9a26e:	e06c      	b.n	9a34a <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID20:  // acid in
		p_io =9;
   9a270:	2309      	movs	r3, #9
   9a272:	617b      	str	r3, [r7, #20]
		peri =PB;
   9a274:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   9a278:	613b      	str	r3, [r7, #16]
		
		break;
   9a27a:	e066      	b.n	9a34a <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID21:				// bicarb in
		p_io =25;
   9a27c:	2319      	movs	r3, #25
   9a27e:	617b      	str	r3, [r7, #20]
		peri =PB;
   9a280:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   9a284:	613b      	str	r3, [r7, #16]
		break;
   9a286:	e060      	b.n	9a34a <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID22:		//cpu2_interrupt
		p_io =24;
   9a288:	2318      	movs	r3, #24
   9a28a:	617b      	str	r3, [r7, #20]
		peri =PB;
   9a28c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   9a290:	613b      	str	r3, [r7, #16]
		break;
   9a292:	e05a      	b.n	9a34a <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID23:		//cpu3_interrupt
			p_io =27;
   9a294:	231b      	movs	r3, #27
   9a296:	617b      	str	r3, [r7, #20]
			peri =PB;
   9a298:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   9a29c:	613b      	str	r3, [r7, #16]
		break;
   9a29e:	e054      	b.n	9a34a <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID24:		//redundancy_irq
			p_io =24;
   9a2a0:	2318      	movs	r3, #24
   9a2a2:	617b      	str	r3, [r7, #20]
			peri =PC;
   9a2a4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9a2a8:	613b      	str	r3, [r7, #16]
		break;
   9a2aa:	e04e      	b.n	9a34a <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID25:			//Blood pump manual on off
		p_io =14;
   9a2ac:	230e      	movs	r3, #14
   9a2ae:	617b      	str	r3, [r7, #20]
		peri =PA;
   9a2b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   9a2b4:	613b      	str	r3, [r7, #16]
		break;
   9a2b6:	e048      	b.n	9a34a <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID26:				//blood detector
			p_io =15;
   9a2b8:	230f      	movs	r3, #15
   9a2ba:	617b      	str	r3, [r7, #20]
			peri =PB;
   9a2bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   9a2c0:	613b      	str	r3, [r7, #16]
		break;
   9a2c2:	e042      	b.n	9a34a <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID27:			//blood_leak_detector
		p_io =29;
   9a2c4:	231d      	movs	r3, #29
   9a2c6:	617b      	str	r3, [r7, #20]
		peri =PC;
   9a2c8:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9a2cc:	613b      	str	r3, [r7, #16]
		break;
   9a2ce:	e03c      	b.n	9a34a <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID28:			//ufpump_ic_fault
		p_io =20;
   9a2d0:	2314      	movs	r3, #20
   9a2d2:	617b      	str	r3, [r7, #20]
		peri =PC;
   9a2d4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9a2d8:	613b      	str	r3, [r7, #16]
		break;
   9a2da:	e036      	b.n	9a34a <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID29:			//ufpump_home
		p_io =17;
   9a2dc:	2311      	movs	r3, #17
   9a2de:	617b      	str	r3, [r7, #20]
		peri =PC;
   9a2e0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9a2e4:	613b      	str	r3, [r7, #16]
		break;
   9a2e6:	e030      	b.n	9a34a <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID30:			//disinfectant_fdbck
		p_io =19;
   9a2e8:	2313      	movs	r3, #19
   9a2ea:	617b      	str	r3, [r7, #20]
		peri =PC;
   9a2ec:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9a2f0:	613b      	str	r3, [r7, #16]
		break;
   9a2f2:	e02a      	b.n	9a34a <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID31:			//b_hemo_f4
		p_io =16;
   9a2f4:	2310      	movs	r3, #16
   9a2f6:	617b      	str	r3, [r7, #20]
		peri =PA;
   9a2f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   9a2fc:	613b      	str	r3, [r7, #16]
		break;
   9a2fe:	e024      	b.n	9a34a <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID32:			//b_hemo_f3
		p_io =24;
   9a300:	2318      	movs	r3, #24
   9a302:	617b      	str	r3, [r7, #20]
		peri =PA;
   9a304:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   9a308:	613b      	str	r3, [r7, #16]
		break;
   9a30a:	e01e      	b.n	9a34a <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID33:			//B_PROPO_I/F4
		p_io =21;
   9a30c:	2315      	movs	r3, #21
   9a30e:	617b      	str	r3, [r7, #20]
		peri =PB;
   9a310:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   9a314:	613b      	str	r3, [r7, #16]
		break;
   9a316:	e018      	b.n	9a34a <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID34:			//Calibration
		p_io =10;
   9a318:	230a      	movs	r3, #10
   9a31a:	617b      	str	r3, [r7, #20]
		peri =PA;
   9a31c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   9a320:	613b      	str	r3, [r7, #16]
		break;
   9a322:	e012      	b.n	9a34a <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID35:			//BATTERY_LOAD_CURRENT
		p_io =2;
   9a324:	2302      	movs	r3, #2
   9a326:	617b      	str	r3, [r7, #20]
		peri =PA;
   9a328:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   9a32c:	613b      	str	r3, [r7, #16]
		break;
   9a32e:	e00c      	b.n	9a34a <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID36:			//POWER_FAILURE_INDICATION
		p_io =26;
   9a330:	231a      	movs	r3, #26
   9a332:	617b      	str	r3, [r7, #20]
		peri =PB;
   9a334:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   9a338:	613b      	str	r3, [r7, #16]
		break;
   9a33a:	e006      	b.n	9a34a <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID37:			//SYSTEM_SHUT_DOWN
		p_io =4;
   9a33c:	2304      	movs	r3, #4
   9a33e:	617b      	str	r3, [r7, #20]
			peri =PA;
   9a340:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   9a344:	613b      	str	r3, [r7, #16]
		break;
   9a346:	e000      	b.n	9a34a <DD_RD_SENSIN+0x272>
		default:
		break;
   9a348:	bf00      	nop
	}
	
	pio_val = DD_READ_PIO(peri, p_io);
   9a34a:	6938      	ldr	r0, [r7, #16]
   9a34c:	6979      	ldr	r1, [r7, #20]
   9a34e:	4b04      	ldr	r3, [pc, #16]	; (9a360 <DD_RD_SENSIN+0x288>)
   9a350:	4798      	blx	r3
   9a352:	4603      	mov	r3, r0
   9a354:	73fb      	strb	r3, [r7, #15]
	
	return pio_val;
   9a356:	7bfb      	ldrb	r3, [r7, #15]
	
}
   9a358:	4618      	mov	r0, r3
   9a35a:	3718      	adds	r7, #24
   9a35c:	46bd      	mov	sp, r7
   9a35e:	bd80      	pop	{r7, pc}
   9a360:	0009884d 	.word	0x0009884d

0009a364 <DD_CONSOLE_TX>:



uint8_t DD_CONSOLE_TX(uint8_t sv_consoleTxdatabyte)
{
   9a364:	b580      	push	{r7, lr}
   9a366:	b084      	sub	sp, #16
   9a368:	af00      	add	r7, sp, #0
   9a36a:	4603      	mov	r3, r0
   9a36c:	71fb      	strb	r3, [r7, #7]
	uint8_t sv_retval = 1;
   9a36e:	2301      	movs	r3, #1
   9a370:	73fb      	strb	r3, [r7, #15]
	sv_retval = (uint8_t) DD_TX_UART(sv_consoleTxdatabyte);
   9a372:	79fb      	ldrb	r3, [r7, #7]
   9a374:	4618      	mov	r0, r3
   9a376:	4b04      	ldr	r3, [pc, #16]	; (9a388 <DD_CONSOLE_TX+0x24>)
   9a378:	4798      	blx	r3
   9a37a:	4603      	mov	r3, r0
   9a37c:	73fb      	strb	r3, [r7, #15]
	
	return sv_retval;
   9a37e:	7bfb      	ldrb	r3, [r7, #15]
}
   9a380:	4618      	mov	r0, r3
   9a382:	3710      	adds	r7, #16
   9a384:	46bd      	mov	sp, r7
   9a386:	bd80      	pop	{r7, pc}
   9a388:	0009b1fd 	.word	0x0009b1fd

0009a38c <DD_CONSOLE_RX>:

uint8_t DD_CONSOLE_RX(uint8_t dd_consoleRxdatabyte )
{
   9a38c:	b580      	push	{r7, lr}
   9a38e:	b084      	sub	sp, #16
   9a390:	af00      	add	r7, sp, #0
   9a392:	4603      	mov	r3, r0
   9a394:	71fb      	strb	r3, [r7, #7]
	uint8_t sv_consoleRxdatabyte = dd_consoleRxdatabyte;
   9a396:	79fb      	ldrb	r3, [r7, #7]
   9a398:	73fb      	strb	r3, [r7, #15]
	
	sv_console_receivedbyte(sv_consoleRxdatabyte);
   9a39a:	7bfb      	ldrb	r3, [r7, #15]
   9a39c:	4618      	mov	r0, r3
   9a39e:	4b03      	ldr	r3, [pc, #12]	; (9a3ac <DD_CONSOLE_RX+0x20>)
   9a3a0:	4798      	blx	r3
	
	
	return 1;
   9a3a2:	2301      	movs	r3, #1
}
   9a3a4:	4618      	mov	r0, r3
   9a3a6:	3710      	adds	r7, #16
   9a3a8:	46bd      	mov	sp, r7
   9a3aa:	bd80      	pop	{r7, pc}
   9a3ac:	0009b739 	.word	0x0009b739

0009a3b0 <DD_CONFIG_TIMER>:

uint8_t DD_CONFIG_TIMER(uint8_t timer_no, uint8_t timer_res)
{
   9a3b0:	b590      	push	{r4, r7, lr}
   9a3b2:	b089      	sub	sp, #36	; 0x24
   9a3b4:	af00      	add	r7, sp, #0
   9a3b6:	4603      	mov	r3, r0
   9a3b8:	460a      	mov	r2, r1
   9a3ba:	71fb      	strb	r3, [r7, #7]
   9a3bc:	4613      	mov	r3, r2
   9a3be:	71bb      	strb	r3, [r7, #6]
	uint32_t ch_no=0,rc;
   9a3c0:	2300      	movs	r3, #0
   9a3c2:	61fb      	str	r3, [r7, #28]
	double rc_cal;
	rc_cal = ((84000000/(128 * (1/timer_res))) -1);
   9a3c4:	79bb      	ldrb	r3, [r7, #6]
   9a3c6:	2201      	movs	r2, #1
   9a3c8:	fb92 f3f3 	sdiv	r3, r2, r3
   9a3cc:	01db      	lsls	r3, r3, #7
   9a3ce:	4a1a      	ldr	r2, [pc, #104]	; (9a438 <DD_CONFIG_TIMER+0x88>)
   9a3d0:	fb92 f3f3 	sdiv	r3, r2, r3
   9a3d4:	1e5a      	subs	r2, r3, #1
   9a3d6:	4b19      	ldr	r3, [pc, #100]	; (9a43c <DD_CONFIG_TIMER+0x8c>)
   9a3d8:	4610      	mov	r0, r2
   9a3da:	4798      	blx	r3
   9a3dc:	4602      	mov	r2, r0
   9a3de:	460b      	mov	r3, r1
   9a3e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	rc = rc_cal;
   9a3e4:	4b16      	ldr	r3, [pc, #88]	; (9a440 <DD_CONFIG_TIMER+0x90>)
   9a3e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   9a3ea:	4798      	blx	r3
   9a3ec:	4603      	mov	r3, r0
   9a3ee:	60fb      	str	r3, [r7, #12]

	switch (timer_no)
   9a3f0:	79fb      	ldrb	r3, [r7, #7]
   9a3f2:	2b01      	cmp	r3, #1
   9a3f4:	d00a      	beq.n	9a40c <DD_CONFIG_TIMER+0x5c>
   9a3f6:	2b02      	cmp	r3, #2
   9a3f8:	d011      	beq.n	9a41e <DD_CONFIG_TIMER+0x6e>
   9a3fa:	2b00      	cmp	r3, #0
   9a3fc:	d118      	bne.n	9a430 <DD_CONFIG_TIMER+0x80>
	{
		case 0:
		
		DD_SET_TIMER( TC0, ch_no, TC0_IRQn, rc);
   9a3fe:	4811      	ldr	r0, [pc, #68]	; (9a444 <DD_CONFIG_TIMER+0x94>)
   9a400:	69f9      	ldr	r1, [r7, #28]
   9a402:	221b      	movs	r2, #27
   9a404:	68fb      	ldr	r3, [r7, #12]
   9a406:	4c10      	ldr	r4, [pc, #64]	; (9a448 <DD_CONFIG_TIMER+0x98>)
   9a408:	47a0      	blx	r4
		break;
   9a40a:	e011      	b.n	9a430 <DD_CONFIG_TIMER+0x80>
		
		case 1:
		rc=3281249; //value to get 5sec delay (mlk/128*interrupt frequency)-1 number counts to get 1sec
   9a40c:	4b0f      	ldr	r3, [pc, #60]	; (9a44c <DD_CONFIG_TIMER+0x9c>)
   9a40e:	60fb      	str	r3, [r7, #12]
		DD_SET_TIMER( TC1, ch_no, TC3_IRQn, rc);
   9a410:	480f      	ldr	r0, [pc, #60]	; (9a450 <DD_CONFIG_TIMER+0xa0>)
   9a412:	69f9      	ldr	r1, [r7, #28]
   9a414:	221e      	movs	r2, #30
   9a416:	68fb      	ldr	r3, [r7, #12]
   9a418:	4c0b      	ldr	r4, [pc, #44]	; (9a448 <DD_CONFIG_TIMER+0x98>)
   9a41a:	47a0      	blx	r4
		break;
   9a41c:	e008      	b.n	9a430 <DD_CONFIG_TIMER+0x80>
		
		case 2:
		
		rc=1968749; //value to get 1sec delay (mlk/128*interrupt frequency)-1 number counts to get 1sec
   9a41e:	4b0d      	ldr	r3, [pc, #52]	; (9a454 <DD_CONFIG_TIMER+0xa4>)
   9a420:	60fb      	str	r3, [r7, #12]
		DD_SET_TIMER(TC2, ch_no, TC6_IRQn, rc);
   9a422:	480d      	ldr	r0, [pc, #52]	; (9a458 <DD_CONFIG_TIMER+0xa8>)
   9a424:	69f9      	ldr	r1, [r7, #28]
   9a426:	2221      	movs	r2, #33	; 0x21
   9a428:	68fb      	ldr	r3, [r7, #12]
   9a42a:	4c07      	ldr	r4, [pc, #28]	; (9a448 <DD_CONFIG_TIMER+0x98>)
   9a42c:	47a0      	blx	r4
		
		break;
   9a42e:	bf00      	nop
		
	}
}
   9a430:	4618      	mov	r0, r3
   9a432:	3724      	adds	r7, #36	; 0x24
   9a434:	46bd      	mov	sp, r7
   9a436:	bd90      	pop	{r4, r7, pc}
   9a438:	0501bd00 	.word	0x0501bd00
   9a43c:	000a79b9 	.word	0x000a79b9
   9a440:	000a8009 	.word	0x000a8009
   9a444:	40080000 	.word	0x40080000
   9a448:	0009ad09 	.word	0x0009ad09
   9a44c:	00321161 	.word	0x00321161
   9a450:	40084000 	.word	0x40084000
   9a454:	001e0a6d 	.word	0x001e0a6d
   9a458:	40088000 	.word	0x40088000

0009a45c <DD_SET_FLOW_PATH>:
	}
	
}

uint8_t DD_SET_FLOW_PATH(sv_flowpathtype sv_flowpath)
{
   9a45c:	b580      	push	{r7, lr}
   9a45e:	b082      	sub	sp, #8
   9a460:	af00      	add	r7, sp, #0
   9a462:	4603      	mov	r3, r0
   9a464:	71fb      	strb	r3, [r7, #7]
	static  bool valve_status = 0;
	static bool alarm_on = false;
	
	
	switch(sv_flowpath)
   9a466:	79fb      	ldrb	r3, [r7, #7]
   9a468:	3b01      	subs	r3, #1
   9a46a:	2b14      	cmp	r3, #20
   9a46c:	f200 831d 	bhi.w	9aaaa <DD_SET_FLOW_PATH+0x64e>
   9a470:	a201      	add	r2, pc, #4	; (adr r2, 9a478 <DD_SET_FLOW_PATH+0x1c>)
   9a472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9a476:	bf00      	nop
   9a478:	0009a57f 	.word	0x0009a57f
   9a47c:	0009a5f9 	.word	0x0009a5f9
   9a480:	0009a673 	.word	0x0009a673
   9a484:	0009a6cf 	.word	0x0009a6cf
   9a488:	0009a741 	.word	0x0009a741
   9a48c:	0009a7f9 	.word	0x0009a7f9
   9a490:	0009a8b1 	.word	0x0009a8b1
   9a494:	0009aaab 	.word	0x0009aaab
   9a498:	0009aaab 	.word	0x0009aaab
   9a49c:	0009a995 	.word	0x0009a995
   9a4a0:	0009a9df 	.word	0x0009a9df
   9a4a4:	0009aaab 	.word	0x0009aaab
   9a4a8:	0009aaab 	.word	0x0009aaab
   9a4ac:	0009aaab 	.word	0x0009aaab
   9a4b0:	0009aaab 	.word	0x0009aaab
   9a4b4:	0009aaab 	.word	0x0009aaab
   9a4b8:	0009a4ff 	.word	0x0009a4ff
   9a4bc:	0009aa29 	.word	0x0009aa29
   9a4c0:	0009a4cd 	.word	0x0009a4cd
   9a4c4:	0009aaab 	.word	0x0009aaab
   9a4c8:	0009a919 	.word	0x0009a919
	{
			
		case FLOW_PATH_BC_ALARM:
			DD_RESET_VALVE (VALVE_ID5);
   9a4cc:	2005      	movs	r0, #5
   9a4ce:	4b97      	ldr	r3, [pc, #604]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a4d0:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID6);
   9a4d2:	2006      	movs	r0, #6
   9a4d4:	4b95      	ldr	r3, [pc, #596]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a4d6:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID7);
   9a4d8:	2007      	movs	r0, #7
   9a4da:	4b94      	ldr	r3, [pc, #592]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a4dc:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID8);
   9a4de:	2008      	movs	r0, #8
   9a4e0:	4b92      	ldr	r3, [pc, #584]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a4e2:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID9);
   9a4e4:	2009      	movs	r0, #9
   9a4e6:	4b91      	ldr	r3, [pc, #580]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a4e8:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID10);
   9a4ea:	200a      	movs	r0, #10
   9a4ec:	4b8f      	ldr	r3, [pc, #572]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a4ee:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID11);
   9a4f0:	200b      	movs	r0, #11
   9a4f2:	4b8e      	ldr	r3, [pc, #568]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a4f4:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID12);
   9a4f6:	200c      	movs	r0, #12
   9a4f8:	4b8c      	ldr	r3, [pc, #560]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a4fa:	4798      	blx	r3
		break;
   9a4fc:	e2d5      	b.n	9aaaa <DD_SET_FLOW_PATH+0x64e>
				
		case FLOW_PATH_IDLE_RINSE:
	
		DD_RESET_VALVE(VALVE_ID1);
   9a4fe:	2001      	movs	r0, #1
   9a500:	4b8a      	ldr	r3, [pc, #552]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a502:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID2);
   9a504:	2002      	movs	r0, #2
   9a506:	4b89      	ldr	r3, [pc, #548]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a508:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID3);
   9a50a:	2003      	movs	r0, #3
   9a50c:	4b87      	ldr	r3, [pc, #540]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a50e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID4);
   9a510:	2004      	movs	r0, #4
   9a512:	4b86      	ldr	r3, [pc, #536]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a514:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID5);
   9a516:	2005      	movs	r0, #5
   9a518:	4b84      	ldr	r3, [pc, #528]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a51a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   9a51c:	2006      	movs	r0, #6
   9a51e:	4b83      	ldr	r3, [pc, #524]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a520:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   9a522:	2007      	movs	r0, #7
   9a524:	4b81      	ldr	r3, [pc, #516]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a526:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   9a528:	2008      	movs	r0, #8
   9a52a:	4b80      	ldr	r3, [pc, #512]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a52c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   9a52e:	2009      	movs	r0, #9
   9a530:	4b7e      	ldr	r3, [pc, #504]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a532:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   9a534:	200a      	movs	r0, #10
   9a536:	4b7d      	ldr	r3, [pc, #500]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a538:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   9a53a:	200b      	movs	r0, #11
   9a53c:	4b7b      	ldr	r3, [pc, #492]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a53e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   9a540:	200c      	movs	r0, #12
   9a542:	4b7a      	ldr	r3, [pc, #488]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a544:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID13);
   9a546:	200d      	movs	r0, #13
   9a548:	4b78      	ldr	r3, [pc, #480]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a54a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   9a54c:	200e      	movs	r0, #14
   9a54e:	4b77      	ldr	r3, [pc, #476]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a550:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID15);
   9a552:	200f      	movs	r0, #15
   9a554:	4b75      	ldr	r3, [pc, #468]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a556:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   9a558:	2010      	movs	r0, #16
   9a55a:	4b74      	ldr	r3, [pc, #464]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a55c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID17);
   9a55e:	2011      	movs	r0, #17
   9a560:	4b72      	ldr	r3, [pc, #456]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a562:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID18);
   9a564:	2012      	movs	r0, #18
   9a566:	4b71      	ldr	r3, [pc, #452]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a568:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID19);
   9a56a:	2013      	movs	r0, #19
   9a56c:	4b6f      	ldr	r3, [pc, #444]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a56e:	4798      	blx	r3
	
		DD_RESET_PUMP(DCMOTOR2);
   9a570:	2002      	movs	r0, #2
   9a572:	4b6f      	ldr	r3, [pc, #444]	; (9a730 <DD_SET_FLOW_PATH+0x2d4>)
   9a574:	4798      	blx	r3
		DD_RESET_PUMP(DCMOTOR1);
   9a576:	2001      	movs	r0, #1
   9a578:	4b6d      	ldr	r3, [pc, #436]	; (9a730 <DD_SET_FLOW_PATH+0x2d4>)
   9a57a:	4798      	blx	r3
				
				
		break;
   9a57c:	e295      	b.n	9aaaa <DD_SET_FLOW_PATH+0x64e>
		case V15_FLUSH:
		
		DD_SET_VALVE(VALVE_ID1);
   9a57e:	2001      	movs	r0, #1
   9a580:	4b6c      	ldr	r3, [pc, #432]	; (9a734 <DD_SET_FLOW_PATH+0x2d8>)
   9a582:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID2);
		DD_RESET_VALVE (VALVE_ID3);
   9a584:	2003      	movs	r0, #3
   9a586:	4b69      	ldr	r3, [pc, #420]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a588:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID4);
   9a58a:	2004      	movs	r0, #4
   9a58c:	4b67      	ldr	r3, [pc, #412]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a58e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID5);
   9a590:	2005      	movs	r0, #5
   9a592:	4b66      	ldr	r3, [pc, #408]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a594:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   9a596:	2006      	movs	r0, #6
   9a598:	4b64      	ldr	r3, [pc, #400]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a59a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   9a59c:	2007      	movs	r0, #7
   9a59e:	4b63      	ldr	r3, [pc, #396]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a5a0:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   9a5a2:	2008      	movs	r0, #8
   9a5a4:	4b61      	ldr	r3, [pc, #388]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a5a6:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   9a5a8:	2009      	movs	r0, #9
   9a5aa:	4b60      	ldr	r3, [pc, #384]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a5ac:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   9a5ae:	200a      	movs	r0, #10
   9a5b0:	4b5e      	ldr	r3, [pc, #376]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a5b2:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   9a5b4:	200b      	movs	r0, #11
   9a5b6:	4b5d      	ldr	r3, [pc, #372]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a5b8:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   9a5ba:	200c      	movs	r0, #12
   9a5bc:	4b5b      	ldr	r3, [pc, #364]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a5be:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID13);
   9a5c0:	200d      	movs	r0, #13
   9a5c2:	4b5a      	ldr	r3, [pc, #360]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a5c4:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   9a5c6:	200e      	movs	r0, #14
   9a5c8:	4b58      	ldr	r3, [pc, #352]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a5ca:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID15);
   9a5cc:	200f      	movs	r0, #15
   9a5ce:	4b59      	ldr	r3, [pc, #356]	; (9a734 <DD_SET_FLOW_PATH+0x2d8>)
   9a5d0:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16); 
   9a5d2:	2010      	movs	r0, #16
   9a5d4:	4b55      	ldr	r3, [pc, #340]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a5d6:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID17);
   9a5d8:	2011      	movs	r0, #17
   9a5da:	4b54      	ldr	r3, [pc, #336]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a5dc:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   9a5de:	2012      	movs	r0, #18
   9a5e0:	4b54      	ldr	r3, [pc, #336]	; (9a734 <DD_SET_FLOW_PATH+0x2d8>)
   9a5e2:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID19);
   9a5e4:	2013      	movs	r0, #19
   9a5e6:	4b51      	ldr	r3, [pc, #324]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a5e8:	4798      	blx	r3
		
		DD_RESET_PUMP(DCMOTOR2);
   9a5ea:	2002      	movs	r0, #2
   9a5ec:	4b50      	ldr	r3, [pc, #320]	; (9a730 <DD_SET_FLOW_PATH+0x2d4>)
   9a5ee:	4798      	blx	r3
		DD_RESET_PUMP(DCMOTOR1);
   9a5f0:	2001      	movs	r0, #1
   9a5f2:	4b4f      	ldr	r3, [pc, #316]	; (9a730 <DD_SET_FLOW_PATH+0x2d4>)
   9a5f4:	4798      	blx	r3
		
		
		break;
   9a5f6:	e258      	b.n	9aaaa <DD_SET_FLOW_PATH+0x64e>
		
		case V2_FLUSH:
		
		DD_SET_VALVE(VALVE_ID1);
   9a5f8:	2001      	movs	r0, #1
   9a5fa:	4b4e      	ldr	r3, [pc, #312]	; (9a734 <DD_SET_FLOW_PATH+0x2d8>)
   9a5fc:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID2);
		DD_RESET_VALVE (VALVE_ID3);
   9a5fe:	2003      	movs	r0, #3
   9a600:	4b4a      	ldr	r3, [pc, #296]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a602:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID4);
   9a604:	2004      	movs	r0, #4
   9a606:	4b49      	ldr	r3, [pc, #292]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a608:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID5);
   9a60a:	2005      	movs	r0, #5
   9a60c:	4b47      	ldr	r3, [pc, #284]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a60e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   9a610:	2006      	movs	r0, #6
   9a612:	4b46      	ldr	r3, [pc, #280]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a614:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   9a616:	2007      	movs	r0, #7
   9a618:	4b44      	ldr	r3, [pc, #272]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a61a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   9a61c:	2008      	movs	r0, #8
   9a61e:	4b43      	ldr	r3, [pc, #268]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a620:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   9a622:	2009      	movs	r0, #9
   9a624:	4b41      	ldr	r3, [pc, #260]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a626:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   9a628:	200a      	movs	r0, #10
   9a62a:	4b40      	ldr	r3, [pc, #256]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a62c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   9a62e:	200b      	movs	r0, #11
   9a630:	4b3e      	ldr	r3, [pc, #248]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a632:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   9a634:	200c      	movs	r0, #12
   9a636:	4b3d      	ldr	r3, [pc, #244]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a638:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID13);
   9a63a:	200d      	movs	r0, #13
   9a63c:	4b3b      	ldr	r3, [pc, #236]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a63e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   9a640:	200e      	movs	r0, #14
   9a642:	4b3a      	ldr	r3, [pc, #232]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a644:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID15);
   9a646:	200f      	movs	r0, #15
   9a648:	4b38      	ldr	r3, [pc, #224]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a64a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   9a64c:	2010      	movs	r0, #16
   9a64e:	4b37      	ldr	r3, [pc, #220]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a650:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID17);
   9a652:	2011      	movs	r0, #17
   9a654:	4b35      	ldr	r3, [pc, #212]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a656:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   9a658:	2012      	movs	r0, #18
   9a65a:	4b36      	ldr	r3, [pc, #216]	; (9a734 <DD_SET_FLOW_PATH+0x2d8>)
   9a65c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID19);
   9a65e:	2013      	movs	r0, #19
   9a660:	4b32      	ldr	r3, [pc, #200]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a662:	4798      	blx	r3
		
		DD_SET_PUMP(DCMOTOR1);
   9a664:	2001      	movs	r0, #1
   9a666:	4b34      	ldr	r3, [pc, #208]	; (9a738 <DD_SET_FLOW_PATH+0x2dc>)
   9a668:	4798      	blx	r3
		DD_RESET_PUMP(DCMOTOR2);
   9a66a:	2002      	movs	r0, #2
   9a66c:	4b30      	ldr	r3, [pc, #192]	; (9a730 <DD_SET_FLOW_PATH+0x2d4>)
   9a66e:	4798      	blx	r3
		
		break;
   9a670:	e21b      	b.n	9aaaa <DD_SET_FLOW_PATH+0x64e>

				//	DD_SET_VALVE(VALVE_ID1);
				//	DD_RESET_VALVE (VALVE_ID2);
			//	DD_RESET_VALVE (VALVE_ID3);
			//	DD_SET_VALVE (VALVE_ID4);
				DD_RESET_VALVE (VALVE_ID5);
   9a672:	2005      	movs	r0, #5
   9a674:	4b2d      	ldr	r3, [pc, #180]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a676:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID8);
   9a678:	2008      	movs	r0, #8
   9a67a:	4b2c      	ldr	r3, [pc, #176]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a67c:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID10);
   9a67e:	200a      	movs	r0, #10
   9a680:	4b2a      	ldr	r3, [pc, #168]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a682:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID11);
   9a684:	200b      	movs	r0, #11
   9a686:	4b29      	ldr	r3, [pc, #164]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a688:	4798      	blx	r3
				cl_wait(50);
   9a68a:	2032      	movs	r0, #50	; 0x32
   9a68c:	4b2b      	ldr	r3, [pc, #172]	; (9a73c <DD_SET_FLOW_PATH+0x2e0>)
   9a68e:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID6);
   9a690:	2006      	movs	r0, #6
   9a692:	4b28      	ldr	r3, [pc, #160]	; (9a734 <DD_SET_FLOW_PATH+0x2d8>)
   9a694:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID7);			
   9a696:	2007      	movs	r0, #7
   9a698:	4b26      	ldr	r3, [pc, #152]	; (9a734 <DD_SET_FLOW_PATH+0x2d8>)
   9a69a:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID9);
   9a69c:	2009      	movs	r0, #9
   9a69e:	4b25      	ldr	r3, [pc, #148]	; (9a734 <DD_SET_FLOW_PATH+0x2d8>)
   9a6a0:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID12);
   9a6a2:	200c      	movs	r0, #12
   9a6a4:	4b23      	ldr	r3, [pc, #140]	; (9a734 <DD_SET_FLOW_PATH+0x2d8>)
   9a6a6:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID13);
   9a6a8:	200d      	movs	r0, #13
   9a6aa:	4b20      	ldr	r3, [pc, #128]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a6ac:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID14);
   9a6ae:	200e      	movs	r0, #14
   9a6b0:	4b1e      	ldr	r3, [pc, #120]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a6b2:	4798      	blx	r3

				DD_SET_VALVE (VALVE_ID15);
   9a6b4:	200f      	movs	r0, #15
   9a6b6:	4b1f      	ldr	r3, [pc, #124]	; (9a734 <DD_SET_FLOW_PATH+0x2d8>)
   9a6b8:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID16);
   9a6ba:	2010      	movs	r0, #16
   9a6bc:	4b1b      	ldr	r3, [pc, #108]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a6be:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID17);
   9a6c0:	2011      	movs	r0, #17
   9a6c2:	4b1c      	ldr	r3, [pc, #112]	; (9a734 <DD_SET_FLOW_PATH+0x2d8>)
   9a6c4:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID18);
   9a6c6:	2012      	movs	r0, #18
   9a6c8:	4b1a      	ldr	r3, [pc, #104]	; (9a734 <DD_SET_FLOW_PATH+0x2d8>)
   9a6ca:	4798      	blx	r3
			//	DD_SET_PUMP(DCMOTOR1);
			//	DD_SET_PUMP(DCMOTOR2);
				
				
				
				break;
   9a6cc:	e1ed      	b.n	9aaaa <DD_SET_FLOW_PATH+0x64e>
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_SET_VALVE (VALVE_ID4);
		DD_RESET_VALVE (VALVE_ID6);
   9a6ce:	2006      	movs	r0, #6
   9a6d0:	4b16      	ldr	r3, [pc, #88]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a6d2:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   9a6d4:	2007      	movs	r0, #7
   9a6d6:	4b15      	ldr	r3, [pc, #84]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a6d8:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   9a6da:	2009      	movs	r0, #9
   9a6dc:	4b13      	ldr	r3, [pc, #76]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a6de:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   9a6e0:	200c      	movs	r0, #12
   9a6e2:	4b12      	ldr	r3, [pc, #72]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a6e4:	4798      	blx	r3
		cl_wait(50);
   9a6e6:	2032      	movs	r0, #50	; 0x32
   9a6e8:	4b14      	ldr	r3, [pc, #80]	; (9a73c <DD_SET_FLOW_PATH+0x2e0>)
   9a6ea:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   9a6ec:	2005      	movs	r0, #5
   9a6ee:	4b11      	ldr	r3, [pc, #68]	; (9a734 <DD_SET_FLOW_PATH+0x2d8>)
   9a6f0:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);
   9a6f2:	2008      	movs	r0, #8
   9a6f4:	4b0f      	ldr	r3, [pc, #60]	; (9a734 <DD_SET_FLOW_PATH+0x2d8>)
   9a6f6:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   9a6f8:	200a      	movs	r0, #10
   9a6fa:	4b0e      	ldr	r3, [pc, #56]	; (9a734 <DD_SET_FLOW_PATH+0x2d8>)
   9a6fc:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   9a6fe:	200b      	movs	r0, #11
   9a700:	4b0c      	ldr	r3, [pc, #48]	; (9a734 <DD_SET_FLOW_PATH+0x2d8>)
   9a702:	4798      	blx	r3
		
		DD_RESET_VALVE (VALVE_ID13);
   9a704:	200d      	movs	r0, #13
   9a706:	4b09      	ldr	r3, [pc, #36]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a708:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   9a70a:	200e      	movs	r0, #14
   9a70c:	4b07      	ldr	r3, [pc, #28]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a70e:	4798      	blx	r3

		DD_SET_VALVE (VALVE_ID15);
   9a710:	200f      	movs	r0, #15
   9a712:	4b08      	ldr	r3, [pc, #32]	; (9a734 <DD_SET_FLOW_PATH+0x2d8>)
   9a714:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   9a716:	2010      	movs	r0, #16
   9a718:	4b04      	ldr	r3, [pc, #16]	; (9a72c <DD_SET_FLOW_PATH+0x2d0>)
   9a71a:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID17);
   9a71c:	2011      	movs	r0, #17
   9a71e:	4b05      	ldr	r3, [pc, #20]	; (9a734 <DD_SET_FLOW_PATH+0x2d8>)
   9a720:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   9a722:	2012      	movs	r0, #18
   9a724:	4b03      	ldr	r3, [pc, #12]	; (9a734 <DD_SET_FLOW_PATH+0x2d8>)
   9a726:	4798      	blx	r3
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		
		break;
   9a728:	e1bf      	b.n	9aaaa <DD_SET_FLOW_PATH+0x64e>
   9a72a:	bf00      	nop
   9a72c:	00099ced 	.word	0x00099ced
   9a730:	000998b5 	.word	0x000998b5
   9a734:	00099c2d 	.word	0x00099c2d
   9a738:	00099715 	.word	0x00099715
   9a73c:	0009421d 	.word	0x0009421d
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
	DD_RESET_VALVE (VALVE_ID20);
   9a740:	2014      	movs	r0, #20
   9a742:	4b8e      	ldr	r3, [pc, #568]	; (9a97c <DD_SET_FLOW_PATH+0x520>)
   9a744:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID5);
   9a746:	2005      	movs	r0, #5
   9a748:	4b8c      	ldr	r3, [pc, #560]	; (9a97c <DD_SET_FLOW_PATH+0x520>)
   9a74a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   9a74c:	2008      	movs	r0, #8
   9a74e:	4b8b      	ldr	r3, [pc, #556]	; (9a97c <DD_SET_FLOW_PATH+0x520>)
   9a750:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   9a752:	200a      	movs	r0, #10
   9a754:	4b89      	ldr	r3, [pc, #548]	; (9a97c <DD_SET_FLOW_PATH+0x520>)
   9a756:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   9a758:	200b      	movs	r0, #11
   9a75a:	4b88      	ldr	r3, [pc, #544]	; (9a97c <DD_SET_FLOW_PATH+0x520>)
   9a75c:	4798      	blx	r3
		cl_wait(100);		
   9a75e:	2064      	movs	r0, #100	; 0x64
   9a760:	4b87      	ldr	r3, [pc, #540]	; (9a980 <DD_SET_FLOW_PATH+0x524>)
   9a762:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID6);
   9a764:	2006      	movs	r0, #6
   9a766:	4b87      	ldr	r3, [pc, #540]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a768:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID7);
   9a76a:	2007      	movs	r0, #7
   9a76c:	4b85      	ldr	r3, [pc, #532]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a76e:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID9);
   9a770:	2009      	movs	r0, #9
   9a772:	4b84      	ldr	r3, [pc, #528]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a774:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID12);
   9a776:	200c      	movs	r0, #12
   9a778:	4b82      	ldr	r3, [pc, #520]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a77a:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
		
	//	DD_RESET_VALVE (VALVE_ID16);
		if( ByPass && !isouf)
   9a77c:	4b82      	ldr	r3, [pc, #520]	; (9a988 <DD_SET_FLOW_PATH+0x52c>)
   9a77e:	781b      	ldrb	r3, [r3, #0]
   9a780:	2b00      	cmp	r3, #0
   9a782:	d010      	beq.n	9a7a6 <DD_SET_FLOW_PATH+0x34a>
   9a784:	4b81      	ldr	r3, [pc, #516]	; (9a98c <DD_SET_FLOW_PATH+0x530>)
   9a786:	781b      	ldrb	r3, [r3, #0]
   9a788:	f083 0301 	eor.w	r3, r3, #1
   9a78c:	b2db      	uxtb	r3, r3
   9a78e:	2b00      	cmp	r3, #0
   9a790:	d009      	beq.n	9a7a6 <DD_SET_FLOW_PATH+0x34a>
		{
			DD_SET_VALVE (VALVE_ID15);
   9a792:	200f      	movs	r0, #15
   9a794:	4b7b      	ldr	r3, [pc, #492]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a796:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   9a798:	200d      	movs	r0, #13
   9a79a:	4b78      	ldr	r3, [pc, #480]	; (9a97c <DD_SET_FLOW_PATH+0x520>)
   9a79c:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID14);
   9a79e:	200e      	movs	r0, #14
   9a7a0:	4b76      	ldr	r3, [pc, #472]	; (9a97c <DD_SET_FLOW_PATH+0x520>)
   9a7a2:	4798      	blx	r3
   9a7a4:	e016      	b.n	9a7d4 <DD_SET_FLOW_PATH+0x378>
		}
		else if (isouf)
   9a7a6:	4b79      	ldr	r3, [pc, #484]	; (9a98c <DD_SET_FLOW_PATH+0x530>)
   9a7a8:	781b      	ldrb	r3, [r3, #0]
   9a7aa:	2b00      	cmp	r3, #0
   9a7ac:	d009      	beq.n	9a7c2 <DD_SET_FLOW_PATH+0x366>
		{
			DD_SET_VALVE (VALVE_ID15);
   9a7ae:	200f      	movs	r0, #15
   9a7b0:	4b74      	ldr	r3, [pc, #464]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a7b2:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   9a7b4:	200d      	movs	r0, #13
   9a7b6:	4b71      	ldr	r3, [pc, #452]	; (9a97c <DD_SET_FLOW_PATH+0x520>)
   9a7b8:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   9a7ba:	200e      	movs	r0, #14
   9a7bc:	4b71      	ldr	r3, [pc, #452]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a7be:	4798      	blx	r3
   9a7c0:	e008      	b.n	9a7d4 <DD_SET_FLOW_PATH+0x378>
		}
		else{
			DD_RESET_VALVE (VALVE_ID15);
   9a7c2:	200f      	movs	r0, #15
   9a7c4:	4b6d      	ldr	r3, [pc, #436]	; (9a97c <DD_SET_FLOW_PATH+0x520>)
   9a7c6:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID13);
   9a7c8:	200d      	movs	r0, #13
   9a7ca:	4b6e      	ldr	r3, [pc, #440]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a7cc:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   9a7ce:	200e      	movs	r0, #14
   9a7d0:	4b6c      	ldr	r3, [pc, #432]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a7d2:	4798      	blx	r3
		}
		
		
		if( LoopBack)
   9a7d4:	4b6e      	ldr	r3, [pc, #440]	; (9a990 <DD_SET_FLOW_PATH+0x534>)
   9a7d6:	781b      	ldrb	r3, [r3, #0]
   9a7d8:	2b00      	cmp	r3, #0
   9a7da:	d006      	beq.n	9a7ea <DD_SET_FLOW_PATH+0x38e>
		{
			DD_SET_VALVE (VALVE_ID16);	
   9a7dc:	2010      	movs	r0, #16
   9a7de:	4b69      	ldr	r3, [pc, #420]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a7e0:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID18);
   9a7e2:	2012      	movs	r0, #18
   9a7e4:	4b65      	ldr	r3, [pc, #404]	; (9a97c <DD_SET_FLOW_PATH+0x520>)
   9a7e6:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); // commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   9a7e8:	e15f      	b.n	9aaaa <DD_SET_FLOW_PATH+0x64e>
			DD_SET_VALVE (VALVE_ID16);	
			DD_RESET_VALVE (VALVE_ID18);
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID16);	
   9a7ea:	2010      	movs	r0, #16
   9a7ec:	4b63      	ldr	r3, [pc, #396]	; (9a97c <DD_SET_FLOW_PATH+0x520>)
   9a7ee:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID18);
   9a7f0:	2012      	movs	r0, #18
   9a7f2:	4b64      	ldr	r3, [pc, #400]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a7f4:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); // commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   9a7f6:	e158      	b.n	9aaaa <DD_SET_FLOW_PATH+0x64e>
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
	DD_RESET_VALVE (VALVE_ID20);
   9a7f8:	2014      	movs	r0, #20
   9a7fa:	4b60      	ldr	r3, [pc, #384]	; (9a97c <DD_SET_FLOW_PATH+0x520>)
   9a7fc:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   9a7fe:	2006      	movs	r0, #6
   9a800:	4b5e      	ldr	r3, [pc, #376]	; (9a97c <DD_SET_FLOW_PATH+0x520>)
   9a802:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   9a804:	2007      	movs	r0, #7
   9a806:	4b5d      	ldr	r3, [pc, #372]	; (9a97c <DD_SET_FLOW_PATH+0x520>)
   9a808:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   9a80a:	2009      	movs	r0, #9
   9a80c:	4b5b      	ldr	r3, [pc, #364]	; (9a97c <DD_SET_FLOW_PATH+0x520>)
   9a80e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   9a810:	200c      	movs	r0, #12
   9a812:	4b5a      	ldr	r3, [pc, #360]	; (9a97c <DD_SET_FLOW_PATH+0x520>)
   9a814:	4798      	blx	r3
		cl_wait(100);				
   9a816:	2064      	movs	r0, #100	; 0x64
   9a818:	4b59      	ldr	r3, [pc, #356]	; (9a980 <DD_SET_FLOW_PATH+0x524>)
   9a81a:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   9a81c:	2005      	movs	r0, #5
   9a81e:	4b59      	ldr	r3, [pc, #356]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a820:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);	
   9a822:	2008      	movs	r0, #8
   9a824:	4b57      	ldr	r3, [pc, #348]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a826:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   9a828:	200a      	movs	r0, #10
   9a82a:	4b56      	ldr	r3, [pc, #344]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a82c:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   9a82e:	200b      	movs	r0, #11
   9a830:	4b54      	ldr	r3, [pc, #336]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a832:	4798      	blx	r3
		
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
	//	DD_SET_VALVE (VALVE_ID15);
	//	DD_RESET_VALVE (VALVE_ID16);
		if( ByPass && !isouf)
   9a834:	4b54      	ldr	r3, [pc, #336]	; (9a988 <DD_SET_FLOW_PATH+0x52c>)
   9a836:	781b      	ldrb	r3, [r3, #0]
   9a838:	2b00      	cmp	r3, #0
   9a83a:	d010      	beq.n	9a85e <DD_SET_FLOW_PATH+0x402>
   9a83c:	4b53      	ldr	r3, [pc, #332]	; (9a98c <DD_SET_FLOW_PATH+0x530>)
   9a83e:	781b      	ldrb	r3, [r3, #0]
   9a840:	f083 0301 	eor.w	r3, r3, #1
   9a844:	b2db      	uxtb	r3, r3
   9a846:	2b00      	cmp	r3, #0
   9a848:	d009      	beq.n	9a85e <DD_SET_FLOW_PATH+0x402>
		{
			DD_SET_VALVE (VALVE_ID15);
   9a84a:	200f      	movs	r0, #15
   9a84c:	4b4d      	ldr	r3, [pc, #308]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a84e:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   9a850:	200d      	movs	r0, #13
   9a852:	4b4a      	ldr	r3, [pc, #296]	; (9a97c <DD_SET_FLOW_PATH+0x520>)
   9a854:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID14);
   9a856:	200e      	movs	r0, #14
   9a858:	4b48      	ldr	r3, [pc, #288]	; (9a97c <DD_SET_FLOW_PATH+0x520>)
   9a85a:	4798      	blx	r3
   9a85c:	e016      	b.n	9a88c <DD_SET_FLOW_PATH+0x430>
		}
		else if (isouf)
   9a85e:	4b4b      	ldr	r3, [pc, #300]	; (9a98c <DD_SET_FLOW_PATH+0x530>)
   9a860:	781b      	ldrb	r3, [r3, #0]
   9a862:	2b00      	cmp	r3, #0
   9a864:	d009      	beq.n	9a87a <DD_SET_FLOW_PATH+0x41e>
		{
			DD_SET_VALVE (VALVE_ID15);	
   9a866:	200f      	movs	r0, #15
   9a868:	4b46      	ldr	r3, [pc, #280]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a86a:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   9a86c:	200d      	movs	r0, #13
   9a86e:	4b43      	ldr	r3, [pc, #268]	; (9a97c <DD_SET_FLOW_PATH+0x520>)
   9a870:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   9a872:	200e      	movs	r0, #14
   9a874:	4b43      	ldr	r3, [pc, #268]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a876:	4798      	blx	r3
   9a878:	e008      	b.n	9a88c <DD_SET_FLOW_PATH+0x430>
		}
		else{
			DD_RESET_VALVE (VALVE_ID15);
   9a87a:	200f      	movs	r0, #15
   9a87c:	4b3f      	ldr	r3, [pc, #252]	; (9a97c <DD_SET_FLOW_PATH+0x520>)
   9a87e:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID13);
   9a880:	200d      	movs	r0, #13
   9a882:	4b40      	ldr	r3, [pc, #256]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a884:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   9a886:	200e      	movs	r0, #14
   9a888:	4b3e      	ldr	r3, [pc, #248]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a88a:	4798      	blx	r3
		}
		
		if( LoopBack)
   9a88c:	4b40      	ldr	r3, [pc, #256]	; (9a990 <DD_SET_FLOW_PATH+0x534>)
   9a88e:	781b      	ldrb	r3, [r3, #0]
   9a890:	2b00      	cmp	r3, #0
   9a892:	d006      	beq.n	9a8a2 <DD_SET_FLOW_PATH+0x446>
		{
			DD_SET_VALVE (VALVE_ID16);
   9a894:	2010      	movs	r0, #16
   9a896:	4b3b      	ldr	r3, [pc, #236]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a898:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID18);	
   9a89a:	2012      	movs	r0, #18
   9a89c:	4b37      	ldr	r3, [pc, #220]	; (9a97c <DD_SET_FLOW_PATH+0x520>)
   9a89e:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); //// commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   9a8a0:	e103      	b.n	9aaaa <DD_SET_FLOW_PATH+0x64e>
			DD_RESET_VALVE (VALVE_ID18);	
		}
		else
		{
			
			DD_SET_VALVE (VALVE_ID18);
   9a8a2:	2012      	movs	r0, #18
   9a8a4:	4b37      	ldr	r3, [pc, #220]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a8a6:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID16);		
   9a8a8:	2010      	movs	r0, #16
   9a8aa:	4b34      	ldr	r3, [pc, #208]	; (9a97c <DD_SET_FLOW_PATH+0x520>)
   9a8ac:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); //// commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   9a8ae:	e0fc      	b.n	9aaaa <DD_SET_FLOW_PATH+0x64e>
		case  BC_FLUSH_OPEN:
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
		DD_RESET_VALVE (VALVE_ID4);
   9a8b0:	2004      	movs	r0, #4
   9a8b2:	4b32      	ldr	r3, [pc, #200]	; (9a97c <DD_SET_FLOW_PATH+0x520>)
   9a8b4:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   9a8b6:	2005      	movs	r0, #5
   9a8b8:	4b32      	ldr	r3, [pc, #200]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a8ba:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID6);
   9a8bc:	2006      	movs	r0, #6
   9a8be:	4b31      	ldr	r3, [pc, #196]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a8c0:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID7);
   9a8c2:	2007      	movs	r0, #7
   9a8c4:	4b2f      	ldr	r3, [pc, #188]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a8c6:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);
   9a8c8:	2008      	movs	r0, #8
   9a8ca:	4b2e      	ldr	r3, [pc, #184]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a8cc:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID9);
   9a8ce:	2009      	movs	r0, #9
   9a8d0:	4b2c      	ldr	r3, [pc, #176]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a8d2:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   9a8d4:	200a      	movs	r0, #10
   9a8d6:	4b2b      	ldr	r3, [pc, #172]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a8d8:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   9a8da:	200b      	movs	r0, #11
   9a8dc:	4b29      	ldr	r3, [pc, #164]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a8de:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID12);
   9a8e0:	200c      	movs	r0, #12
   9a8e2:	4b28      	ldr	r3, [pc, #160]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a8e4:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID13);
   9a8e6:	200d      	movs	r0, #13
   9a8e8:	4b26      	ldr	r3, [pc, #152]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a8ea:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID14);
   9a8ec:	200e      	movs	r0, #14
   9a8ee:	4b25      	ldr	r3, [pc, #148]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a8f0:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID15);
   9a8f2:	200f      	movs	r0, #15
   9a8f4:	4b23      	ldr	r3, [pc, #140]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a8f6:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   9a8f8:	2010      	movs	r0, #16
   9a8fa:	4b20      	ldr	r3, [pc, #128]	; (9a97c <DD_SET_FLOW_PATH+0x520>)
   9a8fc:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID17);
   9a8fe:	2011      	movs	r0, #17
   9a900:	4b20      	ldr	r3, [pc, #128]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a902:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   9a904:	2012      	movs	r0, #18
   9a906:	4b1f      	ldr	r3, [pc, #124]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a908:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID19);
   9a90a:	2013      	movs	r0, #19
   9a90c:	4b1d      	ldr	r3, [pc, #116]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a90e:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID20);		
   9a910:	2014      	movs	r0, #20
   9a912:	4b1c      	ldr	r3, [pc, #112]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a914:	4798      	blx	r3
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		
		break;
   9a916:	e0c8      	b.n	9aaaa <DD_SET_FLOW_PATH+0x64e>
		case  BC_FLUSH_OPEN_DIS:
		
		//	DD_SET_VALVE(VALVE_ID1);
		//	DD_RESET_VALVE (VALVE_ID2);
		//	DD_RESET_VALVE (VALVE_ID3);
		DD_SET_VALVE (VALVE_ID4);
   9a918:	2004      	movs	r0, #4
   9a91a:	4b1a      	ldr	r3, [pc, #104]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a91c:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   9a91e:	2005      	movs	r0, #5
   9a920:	4b18      	ldr	r3, [pc, #96]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a922:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID6);
   9a924:	2006      	movs	r0, #6
   9a926:	4b17      	ldr	r3, [pc, #92]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a928:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID7);
   9a92a:	2007      	movs	r0, #7
   9a92c:	4b15      	ldr	r3, [pc, #84]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a92e:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);
   9a930:	2008      	movs	r0, #8
   9a932:	4b14      	ldr	r3, [pc, #80]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a934:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID9);
   9a936:	2009      	movs	r0, #9
   9a938:	4b12      	ldr	r3, [pc, #72]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a93a:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   9a93c:	200a      	movs	r0, #10
   9a93e:	4b11      	ldr	r3, [pc, #68]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a940:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   9a942:	200b      	movs	r0, #11
   9a944:	4b0f      	ldr	r3, [pc, #60]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a946:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID12);
   9a948:	200c      	movs	r0, #12
   9a94a:	4b0e      	ldr	r3, [pc, #56]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a94c:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID13);
   9a94e:	200d      	movs	r0, #13
   9a950:	4b0c      	ldr	r3, [pc, #48]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a952:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID14);
   9a954:	200e      	movs	r0, #14
   9a956:	4b0b      	ldr	r3, [pc, #44]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a958:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID15);
   9a95a:	200f      	movs	r0, #15
   9a95c:	4b09      	ldr	r3, [pc, #36]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a95e:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID16);
   9a960:	2010      	movs	r0, #16
   9a962:	4b08      	ldr	r3, [pc, #32]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a964:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID17);
   9a966:	2011      	movs	r0, #17
   9a968:	4b06      	ldr	r3, [pc, #24]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a96a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID18);
   9a96c:	2012      	movs	r0, #18
   9a96e:	4b03      	ldr	r3, [pc, #12]	; (9a97c <DD_SET_FLOW_PATH+0x520>)
   9a970:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID19);
   9a972:	2013      	movs	r0, #19
   9a974:	4b03      	ldr	r3, [pc, #12]	; (9a984 <DD_SET_FLOW_PATH+0x528>)
   9a976:	4798      	blx	r3
		//	DD_SET_PUMP(DCMOTOR1);
		//	DD_SET_PUMP(DCMOTOR2);
		
		
		break;
   9a978:	e097      	b.n	9aaaa <DD_SET_FLOW_PATH+0x64e>
   9a97a:	bf00      	nop
   9a97c:	00099ced 	.word	0x00099ced
   9a980:	0009421d 	.word	0x0009421d
   9a984:	00099c2d 	.word	0x00099c2d
   9a988:	20071ca0 	.word	0x20071ca0
   9a98c:	20071c44 	.word	0x20071c44
   9a990:	20071ca1 	.word	0x20071ca1
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
		DD_RESET_VALVE (VALVE_ID5);
   9a994:	2005      	movs	r0, #5
   9a996:	4b47      	ldr	r3, [pc, #284]	; (9aab4 <DD_SET_FLOW_PATH+0x658>)
   9a998:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   9a99a:	2008      	movs	r0, #8
   9a99c:	4b45      	ldr	r3, [pc, #276]	; (9aab4 <DD_SET_FLOW_PATH+0x658>)
   9a99e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   9a9a0:	200a      	movs	r0, #10
   9a9a2:	4b44      	ldr	r3, [pc, #272]	; (9aab4 <DD_SET_FLOW_PATH+0x658>)
   9a9a4:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   9a9a6:	200b      	movs	r0, #11
   9a9a8:	4b42      	ldr	r3, [pc, #264]	; (9aab4 <DD_SET_FLOW_PATH+0x658>)
   9a9aa:	4798      	blx	r3
		cl_wait(100);		
   9a9ac:	2064      	movs	r0, #100	; 0x64
   9a9ae:	4b42      	ldr	r3, [pc, #264]	; (9aab8 <DD_SET_FLOW_PATH+0x65c>)
   9a9b0:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID6);
   9a9b2:	2006      	movs	r0, #6
   9a9b4:	4b41      	ldr	r3, [pc, #260]	; (9aabc <DD_SET_FLOW_PATH+0x660>)
   9a9b6:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID7);
   9a9b8:	2007      	movs	r0, #7
   9a9ba:	4b40      	ldr	r3, [pc, #256]	; (9aabc <DD_SET_FLOW_PATH+0x660>)
   9a9bc:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID9);
   9a9be:	2009      	movs	r0, #9
   9a9c0:	4b3e      	ldr	r3, [pc, #248]	; (9aabc <DD_SET_FLOW_PATH+0x660>)
   9a9c2:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID12);
   9a9c4:	200c      	movs	r0, #12
   9a9c6:	4b3d      	ldr	r3, [pc, #244]	; (9aabc <DD_SET_FLOW_PATH+0x660>)
   9a9c8:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
		
		DD_SET_VALVE (VALVE_ID16);
   9a9ca:	2010      	movs	r0, #16
   9a9cc:	4b3b      	ldr	r3, [pc, #236]	; (9aabc <DD_SET_FLOW_PATH+0x660>)
   9a9ce:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID15);
   9a9d0:	200f      	movs	r0, #15
   9a9d2:	4b38      	ldr	r3, [pc, #224]	; (9aab4 <DD_SET_FLOW_PATH+0x658>)
   9a9d4:	4798      	blx	r3
	
	//	DD_SET_VALVE (VALVE_ID17);
		DD_RESET_VALVE (VALVE_ID18);
   9a9d6:	2012      	movs	r0, #18
   9a9d8:	4b36      	ldr	r3, [pc, #216]	; (9aab4 <DD_SET_FLOW_PATH+0x658>)
   9a9da:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); // commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   9a9dc:	e065      	b.n	9aaaa <DD_SET_FLOW_PATH+0x64e>
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
	
		DD_RESET_VALVE (VALVE_ID6);
   9a9de:	2006      	movs	r0, #6
   9a9e0:	4b34      	ldr	r3, [pc, #208]	; (9aab4 <DD_SET_FLOW_PATH+0x658>)
   9a9e2:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   9a9e4:	2007      	movs	r0, #7
   9a9e6:	4b33      	ldr	r3, [pc, #204]	; (9aab4 <DD_SET_FLOW_PATH+0x658>)
   9a9e8:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   9a9ea:	2009      	movs	r0, #9
   9a9ec:	4b31      	ldr	r3, [pc, #196]	; (9aab4 <DD_SET_FLOW_PATH+0x658>)
   9a9ee:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   9a9f0:	200c      	movs	r0, #12
   9a9f2:	4b30      	ldr	r3, [pc, #192]	; (9aab4 <DD_SET_FLOW_PATH+0x658>)
   9a9f4:	4798      	blx	r3
		cl_wait(100);				
   9a9f6:	2064      	movs	r0, #100	; 0x64
   9a9f8:	4b2f      	ldr	r3, [pc, #188]	; (9aab8 <DD_SET_FLOW_PATH+0x65c>)
   9a9fa:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   9a9fc:	2005      	movs	r0, #5
   9a9fe:	4b2f      	ldr	r3, [pc, #188]	; (9aabc <DD_SET_FLOW_PATH+0x660>)
   9aa00:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);	
   9aa02:	2008      	movs	r0, #8
   9aa04:	4b2d      	ldr	r3, [pc, #180]	; (9aabc <DD_SET_FLOW_PATH+0x660>)
   9aa06:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   9aa08:	200a      	movs	r0, #10
   9aa0a:	4b2c      	ldr	r3, [pc, #176]	; (9aabc <DD_SET_FLOW_PATH+0x660>)
   9aa0c:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   9aa0e:	200b      	movs	r0, #11
   9aa10:	4b2a      	ldr	r3, [pc, #168]	; (9aabc <DD_SET_FLOW_PATH+0x660>)
   9aa12:	4798      	blx	r3
		
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
	//	DD_SET_VALVE (VALVE_ID15);
	//	DD_RESET_VALVE (VALVE_ID16);
		DD_RESET_VALVE (VALVE_ID15);
   9aa14:	200f      	movs	r0, #15
   9aa16:	4b27      	ldr	r3, [pc, #156]	; (9aab4 <DD_SET_FLOW_PATH+0x658>)
   9aa18:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID16);
   9aa1a:	2010      	movs	r0, #16
   9aa1c:	4b27      	ldr	r3, [pc, #156]	; (9aabc <DD_SET_FLOW_PATH+0x660>)
   9aa1e:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID17);
		DD_RESET_VALVE (VALVE_ID18);
   9aa20:	2012      	movs	r0, #18
   9aa22:	4b24      	ldr	r3, [pc, #144]	; (9aab4 <DD_SET_FLOW_PATH+0x658>)
   9aa24:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); //// commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   9aa26:	e040      	b.n	9aaaa <DD_SET_FLOW_PATH+0x64e>
		
		
		case FLOW_PATH_ISO_UF:
		

		DD_RESET_VALVE (VALVE_ID5);
   9aa28:	2005      	movs	r0, #5
   9aa2a:	4b22      	ldr	r3, [pc, #136]	; (9aab4 <DD_SET_FLOW_PATH+0x658>)
   9aa2c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   9aa2e:	2006      	movs	r0, #6
   9aa30:	4b20      	ldr	r3, [pc, #128]	; (9aab4 <DD_SET_FLOW_PATH+0x658>)
   9aa32:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   9aa34:	2007      	movs	r0, #7
   9aa36:	4b1f      	ldr	r3, [pc, #124]	; (9aab4 <DD_SET_FLOW_PATH+0x658>)
   9aa38:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   9aa3a:	2008      	movs	r0, #8
   9aa3c:	4b1d      	ldr	r3, [pc, #116]	; (9aab4 <DD_SET_FLOW_PATH+0x658>)
   9aa3e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   9aa40:	2009      	movs	r0, #9
   9aa42:	4b1c      	ldr	r3, [pc, #112]	; (9aab4 <DD_SET_FLOW_PATH+0x658>)
   9aa44:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   9aa46:	200a      	movs	r0, #10
   9aa48:	4b1a      	ldr	r3, [pc, #104]	; (9aab4 <DD_SET_FLOW_PATH+0x658>)
   9aa4a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   9aa4c:	200b      	movs	r0, #11
   9aa4e:	4b19      	ldr	r3, [pc, #100]	; (9aab4 <DD_SET_FLOW_PATH+0x658>)
   9aa50:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   9aa52:	200c      	movs	r0, #12
   9aa54:	4b17      	ldr	r3, [pc, #92]	; (9aab4 <DD_SET_FLOW_PATH+0x658>)
   9aa56:	4798      	blx	r3

		if( ByPass)
   9aa58:	4b19      	ldr	r3, [pc, #100]	; (9aac0 <DD_SET_FLOW_PATH+0x664>)
   9aa5a:	781b      	ldrb	r3, [r3, #0]
   9aa5c:	2b00      	cmp	r3, #0
   9aa5e:	d009      	beq.n	9aa74 <DD_SET_FLOW_PATH+0x618>
		{
			DD_SET_VALVE (VALVE_ID15);
   9aa60:	200f      	movs	r0, #15
   9aa62:	4b16      	ldr	r3, [pc, #88]	; (9aabc <DD_SET_FLOW_PATH+0x660>)
   9aa64:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   9aa66:	200d      	movs	r0, #13
   9aa68:	4b12      	ldr	r3, [pc, #72]	; (9aab4 <DD_SET_FLOW_PATH+0x658>)
   9aa6a:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID14);
   9aa6c:	200e      	movs	r0, #14
   9aa6e:	4b11      	ldr	r3, [pc, #68]	; (9aab4 <DD_SET_FLOW_PATH+0x658>)
   9aa70:	4798      	blx	r3
   9aa72:	e008      	b.n	9aa86 <DD_SET_FLOW_PATH+0x62a>
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID15);	
   9aa74:	200f      	movs	r0, #15
   9aa76:	4b0f      	ldr	r3, [pc, #60]	; (9aab4 <DD_SET_FLOW_PATH+0x658>)
   9aa78:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID13);
   9aa7a:	200d      	movs	r0, #13
   9aa7c:	4b0f      	ldr	r3, [pc, #60]	; (9aabc <DD_SET_FLOW_PATH+0x660>)
   9aa7e:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   9aa80:	200e      	movs	r0, #14
   9aa82:	4b0e      	ldr	r3, [pc, #56]	; (9aabc <DD_SET_FLOW_PATH+0x660>)
   9aa84:	4798      	blx	r3
		}
		if( LoopBack)
   9aa86:	4b0f      	ldr	r3, [pc, #60]	; (9aac4 <DD_SET_FLOW_PATH+0x668>)
   9aa88:	781b      	ldrb	r3, [r3, #0]
   9aa8a:	2b00      	cmp	r3, #0
   9aa8c:	d006      	beq.n	9aa9c <DD_SET_FLOW_PATH+0x640>
		{
			DD_SET_VALVE (VALVE_ID16);
   9aa8e:	2010      	movs	r0, #16
   9aa90:	4b0a      	ldr	r3, [pc, #40]	; (9aabc <DD_SET_FLOW_PATH+0x660>)
   9aa92:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID18);
   9aa94:	2012      	movs	r0, #18
   9aa96:	4b07      	ldr	r3, [pc, #28]	; (9aab4 <DD_SET_FLOW_PATH+0x658>)
   9aa98:	4798      	blx	r3
		else
		{
			DD_RESET_VALVE (VALVE_ID16);	
			DD_SET_VALVE (VALVE_ID18);
		}
		break;
   9aa9a:	e005      	b.n	9aaa8 <DD_SET_FLOW_PATH+0x64c>
			DD_SET_VALVE (VALVE_ID16);
			DD_RESET_VALVE (VALVE_ID18);
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID16);	
   9aa9c:	2010      	movs	r0, #16
   9aa9e:	4b05      	ldr	r3, [pc, #20]	; (9aab4 <DD_SET_FLOW_PATH+0x658>)
   9aaa0:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID18);
   9aaa2:	2012      	movs	r0, #18
   9aaa4:	4b05      	ldr	r3, [pc, #20]	; (9aabc <DD_SET_FLOW_PATH+0x660>)
   9aaa6:	4798      	blx	r3
		}
		break;
   9aaa8:	bf00      	nop
	}
	
	return 0;
   9aaaa:	2300      	movs	r3, #0
	
}
   9aaac:	4618      	mov	r0, r3
   9aaae:	3708      	adds	r7, #8
   9aab0:	46bd      	mov	sp, r7
   9aab2:	bd80      	pop	{r7, pc}
   9aab4:	00099ced 	.word	0x00099ced
   9aab8:	0009421d 	.word	0x0009421d
   9aabc:	00099c2d 	.word	0x00099c2d
   9aac0:	20071ca0 	.word	0x20071ca0
   9aac4:	20071ca1 	.word	0x20071ca1

0009aac8 <DD_LATCH_STROBE_X1_X16>:

//uint8_t DD_LATCH_STROBE_X1_X5(void)
uint8_t DD_LATCH_STROBE_X1_X16(void)
{
   9aac8:	b580      	push	{r7, lr}
   9aaca:	af00      	add	r7, sp, #0
	
	DD_RESET_PIO (PA, 13);
   9aacc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   9aad0:	210d      	movs	r1, #13
   9aad2:	4b0c      	ldr	r3, [pc, #48]	; (9ab04 <DD_LATCH_STROBE_X1_X16+0x3c>)
   9aad4:	4798      	blx	r3
	cl_wait(2);
   9aad6:	2002      	movs	r0, #2
   9aad8:	4b0b      	ldr	r3, [pc, #44]	; (9ab08 <DD_LATCH_STROBE_X1_X16+0x40>)
   9aada:	4798      	blx	r3
	DD_SET_PIO (PA, 13);
   9aadc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   9aae0:	210d      	movs	r1, #13
   9aae2:	4b0a      	ldr	r3, [pc, #40]	; (9ab0c <DD_LATCH_STROBE_X1_X16+0x44>)
   9aae4:	4798      	blx	r3
	cl_wait(2);
   9aae6:	2002      	movs	r0, #2
   9aae8:	4b07      	ldr	r3, [pc, #28]	; (9ab08 <DD_LATCH_STROBE_X1_X16+0x40>)
   9aaea:	4798      	blx	r3
	DD_RESET_PIO (PA, 13);
   9aaec:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   9aaf0:	210d      	movs	r1, #13
   9aaf2:	4b04      	ldr	r3, [pc, #16]	; (9ab04 <DD_LATCH_STROBE_X1_X16+0x3c>)
   9aaf4:	4798      	blx	r3
	cl_wait(2);
   9aaf6:	2002      	movs	r0, #2
   9aaf8:	4b03      	ldr	r3, [pc, #12]	; (9ab08 <DD_LATCH_STROBE_X1_X16+0x40>)
   9aafa:	4798      	blx	r3
	
	return 0;
   9aafc:	2300      	movs	r3, #0
}
   9aafe:	4618      	mov	r0, r3
   9ab00:	bd80      	pop	{r7, pc}
   9ab02:	bf00      	nop
   9ab04:	000987c9 	.word	0x000987c9
   9ab08:	0009421d 	.word	0x0009421d
   9ab0c:	00098745 	.word	0x00098745

0009ab10 <DD_LATCH_STROBE_X17_X20>:

uint8_t DD_LATCH_STROBE_X17_X20(void)
{
   9ab10:	b580      	push	{r7, lr}
   9ab12:	af00      	add	r7, sp, #0
	
	DD_RESET_PIO (PA, 11);
   9ab14:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   9ab18:	210b      	movs	r1, #11
   9ab1a:	4b0c      	ldr	r3, [pc, #48]	; (9ab4c <DD_LATCH_STROBE_X17_X20+0x3c>)
   9ab1c:	4798      	blx	r3
	cl_wait(2);
   9ab1e:	2002      	movs	r0, #2
   9ab20:	4b0b      	ldr	r3, [pc, #44]	; (9ab50 <DD_LATCH_STROBE_X17_X20+0x40>)
   9ab22:	4798      	blx	r3
	DD_SET_PIO (PA, 11);
   9ab24:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   9ab28:	210b      	movs	r1, #11
   9ab2a:	4b0a      	ldr	r3, [pc, #40]	; (9ab54 <DD_LATCH_STROBE_X17_X20+0x44>)
   9ab2c:	4798      	blx	r3
	cl_wait(2);
   9ab2e:	2002      	movs	r0, #2
   9ab30:	4b07      	ldr	r3, [pc, #28]	; (9ab50 <DD_LATCH_STROBE_X17_X20+0x40>)
   9ab32:	4798      	blx	r3
	DD_RESET_PIO (PA, 11);
   9ab34:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   9ab38:	210b      	movs	r1, #11
   9ab3a:	4b04      	ldr	r3, [pc, #16]	; (9ab4c <DD_LATCH_STROBE_X17_X20+0x3c>)
   9ab3c:	4798      	blx	r3
	cl_wait(2);
   9ab3e:	2002      	movs	r0, #2
   9ab40:	4b03      	ldr	r3, [pc, #12]	; (9ab50 <DD_LATCH_STROBE_X17_X20+0x40>)
   9ab42:	4798      	blx	r3
	
	return 0;
   9ab44:	2300      	movs	r3, #0
}
   9ab46:	4618      	mov	r0, r3
   9ab48:	bd80      	pop	{r7, pc}
   9ab4a:	bf00      	nop
   9ab4c:	000987c9 	.word	0x000987c9
   9ab50:	0009421d 	.word	0x0009421d
   9ab54:	00098745 	.word	0x00098745

0009ab58 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   9ab58:	b480      	push	{r7}
   9ab5a:	b083      	sub	sp, #12
   9ab5c:	af00      	add	r7, sp, #0
   9ab5e:	4603      	mov	r3, r0
   9ab60:	6039      	str	r1, [r7, #0]
   9ab62:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   9ab64:	f997 3007 	ldrsb.w	r3, [r7, #7]
   9ab68:	2b00      	cmp	r3, #0
   9ab6a:	da0b      	bge.n	9ab84 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   9ab6c:	490d      	ldr	r1, [pc, #52]	; (9aba4 <NVIC_SetPriority+0x4c>)
   9ab6e:	79fb      	ldrb	r3, [r7, #7]
   9ab70:	f003 030f 	and.w	r3, r3, #15
   9ab74:	3b04      	subs	r3, #4
   9ab76:	683a      	ldr	r2, [r7, #0]
   9ab78:	b2d2      	uxtb	r2, r2
   9ab7a:	0112      	lsls	r2, r2, #4
   9ab7c:	b2d2      	uxtb	r2, r2
   9ab7e:	440b      	add	r3, r1
   9ab80:	761a      	strb	r2, [r3, #24]
   9ab82:	e009      	b.n	9ab98 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   9ab84:	4908      	ldr	r1, [pc, #32]	; (9aba8 <NVIC_SetPriority+0x50>)
   9ab86:	f997 3007 	ldrsb.w	r3, [r7, #7]
   9ab8a:	683a      	ldr	r2, [r7, #0]
   9ab8c:	b2d2      	uxtb	r2, r2
   9ab8e:	0112      	lsls	r2, r2, #4
   9ab90:	b2d2      	uxtb	r2, r2
   9ab92:	440b      	add	r3, r1
   9ab94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   9ab98:	370c      	adds	r7, #12
   9ab9a:	46bd      	mov	sp, r7
   9ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
   9aba0:	4770      	bx	lr
   9aba2:	bf00      	nop
   9aba4:	e000ed00 	.word	0xe000ed00
   9aba8:	e000e100 	.word	0xe000e100

0009abac <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b> 
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
   9abac:	b580      	push	{r7, lr}
   9abae:	b082      	sub	sp, #8
   9abb0:	af00      	add	r7, sp, #0
   9abb2:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
   9abb4:	687b      	ldr	r3, [r7, #4]
   9abb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   9abba:	d301      	bcc.n	9abc0 <SysTick_Config+0x14>
   9abbc:	2301      	movs	r3, #1
   9abbe:	e011      	b.n	9abe4 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
   9abc0:	4a0a      	ldr	r2, [pc, #40]	; (9abec <SysTick_Config+0x40>)
   9abc2:	687b      	ldr	r3, [r7, #4]
   9abc4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   9abc8:	3b01      	subs	r3, #1
   9abca:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
   9abcc:	f04f 30ff 	mov.w	r0, #4294967295
   9abd0:	210f      	movs	r1, #15
   9abd2:	4b07      	ldr	r3, [pc, #28]	; (9abf0 <SysTick_Config+0x44>)
   9abd4:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   9abd6:	4b05      	ldr	r3, [pc, #20]	; (9abec <SysTick_Config+0x40>)
   9abd8:	2200      	movs	r2, #0
   9abda:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   9abdc:	4b03      	ldr	r3, [pc, #12]	; (9abec <SysTick_Config+0x40>)
   9abde:	2207      	movs	r2, #7
   9abe0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
   9abe2:	2300      	movs	r3, #0
}
   9abe4:	4618      	mov	r0, r3
   9abe6:	3708      	adds	r7, #8
   9abe8:	46bd      	mov	sp, r7
   9abea:	bd80      	pop	{r7, pc}
   9abec:	e000e010 	.word	0xe000e010
   9abf0:	0009ab59 	.word	0x0009ab59

0009abf4 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   9abf4:	b480      	push	{r7}
   9abf6:	b083      	sub	sp, #12
   9abf8:	af00      	add	r7, sp, #0
   9abfa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   9abfc:	687b      	ldr	r3, [r7, #4]
   9abfe:	2b07      	cmp	r3, #7
   9ac00:	d825      	bhi.n	9ac4e <osc_get_rate+0x5a>
   9ac02:	a201      	add	r2, pc, #4	; (adr r2, 9ac08 <osc_get_rate+0x14>)
   9ac04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9ac08:	0009ac29 	.word	0x0009ac29
   9ac0c:	0009ac2f 	.word	0x0009ac2f
   9ac10:	0009ac35 	.word	0x0009ac35
   9ac14:	0009ac3b 	.word	0x0009ac3b
   9ac18:	0009ac3f 	.word	0x0009ac3f
   9ac1c:	0009ac43 	.word	0x0009ac43
   9ac20:	0009ac47 	.word	0x0009ac47
   9ac24:	0009ac4b 	.word	0x0009ac4b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   9ac28:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   9ac2c:	e010      	b.n	9ac50 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   9ac2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   9ac32:	e00d      	b.n	9ac50 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   9ac34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   9ac38:	e00a      	b.n	9ac50 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   9ac3a:	4b08      	ldr	r3, [pc, #32]	; (9ac5c <osc_get_rate+0x68>)
   9ac3c:	e008      	b.n	9ac50 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   9ac3e:	4b08      	ldr	r3, [pc, #32]	; (9ac60 <osc_get_rate+0x6c>)
   9ac40:	e006      	b.n	9ac50 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   9ac42:	4b08      	ldr	r3, [pc, #32]	; (9ac64 <osc_get_rate+0x70>)
   9ac44:	e004      	b.n	9ac50 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   9ac46:	4b07      	ldr	r3, [pc, #28]	; (9ac64 <osc_get_rate+0x70>)
   9ac48:	e002      	b.n	9ac50 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   9ac4a:	4b06      	ldr	r3, [pc, #24]	; (9ac64 <osc_get_rate+0x70>)
   9ac4c:	e000      	b.n	9ac50 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   9ac4e:	2300      	movs	r3, #0
}
   9ac50:	4618      	mov	r0, r3
   9ac52:	370c      	adds	r7, #12
   9ac54:	46bd      	mov	sp, r7
   9ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
   9ac5a:	4770      	bx	lr
   9ac5c:	003d0900 	.word	0x003d0900
   9ac60:	007a1200 	.word	0x007a1200
   9ac64:	00b71b00 	.word	0x00b71b00

0009ac68 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   9ac68:	b580      	push	{r7, lr}
   9ac6a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   9ac6c:	2006      	movs	r0, #6
   9ac6e:	4b04      	ldr	r3, [pc, #16]	; (9ac80 <sysclk_get_main_hz+0x18>)
   9ac70:	4798      	blx	r3
   9ac72:	4602      	mov	r2, r0
   9ac74:	4613      	mov	r3, r2
   9ac76:	00db      	lsls	r3, r3, #3
   9ac78:	1a9b      	subs	r3, r3, r2
   9ac7a:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   9ac7c:	4618      	mov	r0, r3
   9ac7e:	bd80      	pop	{r7, pc}
   9ac80:	0009abf5 	.word	0x0009abf5

0009ac84 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   9ac84:	b580      	push	{r7, lr}
   9ac86:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   9ac88:	4b02      	ldr	r3, [pc, #8]	; (9ac94 <sysclk_get_cpu_hz+0x10>)
   9ac8a:	4798      	blx	r3
   9ac8c:	4603      	mov	r3, r0
   9ac8e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   9ac90:	4618      	mov	r0, r3
   9ac92:	bd80      	pop	{r7, pc}
   9ac94:	0009ac69 	.word	0x0009ac69

0009ac98 <DD_INIT_TIMER>:
 */ 
#include "DD_TIMER.h"


void DD_INIT_TIMER()
{
   9ac98:	b580      	push	{r7, lr}
   9ac9a:	af00      	add	r7, sp, #0
	TC0->TC_WPMR = 0x54494D00;
   9ac9c:	4b15      	ldr	r3, [pc, #84]	; (9acf4 <DD_INIT_TIMER+0x5c>)
   9ac9e:	4a16      	ldr	r2, [pc, #88]	; (9acf8 <DD_INIT_TIMER+0x60>)
   9aca0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC1->TC_WPMR = 0x54494D00;
   9aca4:	4b15      	ldr	r3, [pc, #84]	; (9acfc <DD_INIT_TIMER+0x64>)
   9aca6:	4a14      	ldr	r2, [pc, #80]	; (9acf8 <DD_INIT_TIMER+0x60>)
   9aca8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC2->TC_WPMR = 0x54494D00;
   9acac:	4b14      	ldr	r3, [pc, #80]	; (9ad00 <DD_INIT_TIMER+0x68>)
   9acae:	4a12      	ldr	r2, [pc, #72]	; (9acf8 <DD_INIT_TIMER+0x60>)
   9acb0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	pmc_enable_periph_clk(ID_TC0);
   9acb4:	201b      	movs	r0, #27
   9acb6:	4b13      	ldr	r3, [pc, #76]	; (9ad04 <DD_INIT_TIMER+0x6c>)
   9acb8:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC1);
   9acba:	201c      	movs	r0, #28
   9acbc:	4b11      	ldr	r3, [pc, #68]	; (9ad04 <DD_INIT_TIMER+0x6c>)
   9acbe:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC2);
   9acc0:	201d      	movs	r0, #29
   9acc2:	4b10      	ldr	r3, [pc, #64]	; (9ad04 <DD_INIT_TIMER+0x6c>)
   9acc4:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   9acc6:	4b0b      	ldr	r3, [pc, #44]	; (9acf4 <DD_INIT_TIMER+0x5c>)
   9acc8:	f24c 0203 	movw	r2, #49155	; 0xc003
   9accc:	605a      	str	r2, [r3, #4]
	//TC0->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	//TC0->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	TC1->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   9acce:	4b0b      	ldr	r3, [pc, #44]	; (9acfc <DD_INIT_TIMER+0x64>)
   9acd0:	f24c 0203 	movw	r2, #49155	; 0xc003
   9acd4:	605a      	str	r2, [r3, #4]
	//TC1->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	//TC1->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   9acd6:	4b0a      	ldr	r3, [pc, #40]	; (9ad00 <DD_INIT_TIMER+0x68>)
   9acd8:	f24c 0203 	movw	r2, #49155	; 0xc003
   9acdc:	605a      	str	r2, [r3, #4]
	//TC2->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	//TC2->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	
	TC0->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   9acde:	4b05      	ldr	r3, [pc, #20]	; (9acf4 <DD_INIT_TIMER+0x5c>)
   9ace0:	2210      	movs	r2, #16
   9ace2:	625a      	str	r2, [r3, #36]	; 0x24
	
	TC1->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   9ace4:	4b05      	ldr	r3, [pc, #20]	; (9acfc <DD_INIT_TIMER+0x64>)
   9ace6:	2210      	movs	r2, #16
   9ace8:	625a      	str	r2, [r3, #36]	; 0x24
//	TC1->TC_CHANNEL[0].TC_IDR = 0xef;		//TC_IDR_COVFS|TC_IDR_CPAS|TC_IDR_ETRGS|TC_IDR_LDRAS|TC_IDR_CPBS|TC_IDR_LDRBS|TC_IDR_LOVRS;
//	TC1->TC_CHANNEL[0].TC_IMR = 0x10;//0x00 | TC_IMR_CPCS;
	
	TC2->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   9acea:	4b05      	ldr	r3, [pc, #20]	; (9ad00 <DD_INIT_TIMER+0x68>)
   9acec:	2210      	movs	r2, #16
   9acee:	625a      	str	r2, [r3, #36]	; 0x24
//	TC2->TC_CHANNEL[0].TC_IDR = TC_IDR_COVFS|TC_IDR_CPAS|TC_IDR_ETRGS|TC_IDR_LDRAS|TC_IDR_CPBS|TC_IDR_LDRBS|TC_IDR_LOVRS;
//	TC2->TC_CHANNEL[0].TC_IMR = 0x00 | TC_IMR_CPCS;
	
}
   9acf0:	bd80      	pop	{r7, pc}
   9acf2:	bf00      	nop
   9acf4:	40080000 	.word	0x40080000
   9acf8:	54494d00 	.word	0x54494d00
   9acfc:	40084000 	.word	0x40084000
   9ad00:	40088000 	.word	0x40088000
   9ad04:	0009c58d 	.word	0x0009c58d

0009ad08 <DD_SET_TIMER>:




uint8_t DD_SET_TIMER(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t rc)
{
   9ad08:	b580      	push	{r7, lr}
   9ad0a:	b084      	sub	sp, #16
   9ad0c:	af00      	add	r7, sp, #0
   9ad0e:	60f8      	str	r0, [r7, #12]
   9ad10:	60b9      	str	r1, [r7, #8]
   9ad12:	603b      	str	r3, [r7, #0]
   9ad14:	4613      	mov	r3, r2
   9ad16:	71fb      	strb	r3, [r7, #7]
	//printf("inside timer");
	//uint32_t rc = 0; 
	pmc_set_writeprotect(0);
   9ad18:	2000      	movs	r0, #0
   9ad1a:	4b15      	ldr	r3, [pc, #84]	; (9ad70 <DD_SET_TIMER+0x68>)
   9ad1c:	4798      	blx	r3
	channel=0;
   9ad1e:	2300      	movs	r3, #0
   9ad20:	60bb      	str	r3, [r7, #8]
//	pmc_enable_periph_clk(ID_TC6);
	//tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4);
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   9ad22:	4b14      	ldr	r3, [pc, #80]	; (9ad74 <DD_SET_TIMER+0x6c>)
   9ad24:	f24c 0203 	movw	r2, #49155	; 0xc003
   9ad28:	605a      	str	r2, [r3, #4]
//	rc=656249; //value to get 1sec delay (mlk/128*interrupt frequency)-1 number counts to get 1sec
	tc_write_rc(tc, channel, rc);
   9ad2a:	68f8      	ldr	r0, [r7, #12]
   9ad2c:	68b9      	ldr	r1, [r7, #8]
   9ad2e:	683a      	ldr	r2, [r7, #0]
   9ad30:	4b11      	ldr	r3, [pc, #68]	; (9ad78 <DD_SET_TIMER+0x70>)
   9ad32:	4798      	blx	r3
	tc_start(tc, channel);
   9ad34:	68f8      	ldr	r0, [r7, #12]
   9ad36:	68b9      	ldr	r1, [r7, #8]
   9ad38:	4b10      	ldr	r3, [pc, #64]	; (9ad7c <DD_SET_TIMER+0x74>)
   9ad3a:	4798      	blx	r3
	tc_enable_interrupt(tc, channel, TC_IER_CPCS);
   9ad3c:	68f8      	ldr	r0, [r7, #12]
   9ad3e:	68b9      	ldr	r1, [r7, #8]
   9ad40:	2210      	movs	r2, #16
   9ad42:	4b0f      	ldr	r3, [pc, #60]	; (9ad80 <DD_SET_TIMER+0x78>)
   9ad44:	4798      	blx	r3
//	tc_write_rc(TC2, channel, rc);
//	tc_start(TC2, channel);
	if (SysTick_Config(sysclk_get_cpu_hz() / 1000)) {
   9ad46:	4b0f      	ldr	r3, [pc, #60]	; (9ad84 <DD_SET_TIMER+0x7c>)
   9ad48:	4798      	blx	r3
   9ad4a:	4602      	mov	r2, r0
   9ad4c:	4b0e      	ldr	r3, [pc, #56]	; (9ad88 <DD_SET_TIMER+0x80>)
   9ad4e:	fba3 2302 	umull	r2, r3, r3, r2
   9ad52:	099b      	lsrs	r3, r3, #6
   9ad54:	4618      	mov	r0, r3
   9ad56:	4b0d      	ldr	r3, [pc, #52]	; (9ad8c <DD_SET_TIMER+0x84>)
   9ad58:	4798      	blx	r3
   9ad5a:	4603      	mov	r3, r0
   9ad5c:	2b00      	cmp	r3, #0
   9ad5e:	d003      	beq.n	9ad68 <DD_SET_TIMER+0x60>
		puts("-F- Systick configuration error\r");
   9ad60:	480b      	ldr	r0, [pc, #44]	; (9ad90 <DD_SET_TIMER+0x88>)
   9ad62:	4b0c      	ldr	r3, [pc, #48]	; (9ad94 <DD_SET_TIMER+0x8c>)
   9ad64:	4798      	blx	r3
		while (1);
   9ad66:	e7fe      	b.n	9ad66 <DD_SET_TIMER+0x5e>
	}
	
}
   9ad68:	4618      	mov	r0, r3
   9ad6a:	3710      	adds	r7, #16
   9ad6c:	46bd      	mov	sp, r7
   9ad6e:	bd80      	pop	{r7, pc}
   9ad70:	0009c611 	.word	0x0009c611
   9ad74:	40088000 	.word	0x40088000
   9ad78:	0009c669 	.word	0x0009c669
   9ad7c:	0009c649 	.word	0x0009c649
   9ad80:	0009c68d 	.word	0x0009c68d
   9ad84:	0009ac85 	.word	0x0009ac85
   9ad88:	10624dd3 	.word	0x10624dd3
   9ad8c:	0009abad 	.word	0x0009abad
   9ad90:	000aa624 	.word	0x000aa624
   9ad94:	000a8955 	.word	0x000a8955

0009ad98 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   9ad98:	b480      	push	{r7}
   9ad9a:	b083      	sub	sp, #12
   9ad9c:	af00      	add	r7, sp, #0
   9ad9e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   9ada0:	687b      	ldr	r3, [r7, #4]
   9ada2:	2b07      	cmp	r3, #7
   9ada4:	d825      	bhi.n	9adf2 <osc_get_rate+0x5a>
   9ada6:	a201      	add	r2, pc, #4	; (adr r2, 9adac <osc_get_rate+0x14>)
   9ada8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9adac:	0009adcd 	.word	0x0009adcd
   9adb0:	0009add3 	.word	0x0009add3
   9adb4:	0009add9 	.word	0x0009add9
   9adb8:	0009addf 	.word	0x0009addf
   9adbc:	0009ade3 	.word	0x0009ade3
   9adc0:	0009ade7 	.word	0x0009ade7
   9adc4:	0009adeb 	.word	0x0009adeb
   9adc8:	0009adef 	.word	0x0009adef
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   9adcc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   9add0:	e010      	b.n	9adf4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   9add2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   9add6:	e00d      	b.n	9adf4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   9add8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   9addc:	e00a      	b.n	9adf4 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   9adde:	4b08      	ldr	r3, [pc, #32]	; (9ae00 <osc_get_rate+0x68>)
   9ade0:	e008      	b.n	9adf4 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   9ade2:	4b08      	ldr	r3, [pc, #32]	; (9ae04 <osc_get_rate+0x6c>)
   9ade4:	e006      	b.n	9adf4 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   9ade6:	4b08      	ldr	r3, [pc, #32]	; (9ae08 <osc_get_rate+0x70>)
   9ade8:	e004      	b.n	9adf4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   9adea:	4b07      	ldr	r3, [pc, #28]	; (9ae08 <osc_get_rate+0x70>)
   9adec:	e002      	b.n	9adf4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   9adee:	4b06      	ldr	r3, [pc, #24]	; (9ae08 <osc_get_rate+0x70>)
   9adf0:	e000      	b.n	9adf4 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   9adf2:	2300      	movs	r3, #0
}
   9adf4:	4618      	mov	r0, r3
   9adf6:	370c      	adds	r7, #12
   9adf8:	46bd      	mov	sp, r7
   9adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
   9adfe:	4770      	bx	lr
   9ae00:	003d0900 	.word	0x003d0900
   9ae04:	007a1200 	.word	0x007a1200
   9ae08:	00b71b00 	.word	0x00b71b00

0009ae0c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   9ae0c:	b580      	push	{r7, lr}
   9ae0e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   9ae10:	2006      	movs	r0, #6
   9ae12:	4b04      	ldr	r3, [pc, #16]	; (9ae24 <sysclk_get_main_hz+0x18>)
   9ae14:	4798      	blx	r3
   9ae16:	4602      	mov	r2, r0
   9ae18:	4613      	mov	r3, r2
   9ae1a:	00db      	lsls	r3, r3, #3
   9ae1c:	1a9b      	subs	r3, r3, r2
   9ae1e:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   9ae20:	4618      	mov	r0, r3
   9ae22:	bd80      	pop	{r7, pc}
   9ae24:	0009ad99 	.word	0x0009ad99

0009ae28 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   9ae28:	b580      	push	{r7, lr}
   9ae2a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   9ae2c:	4b02      	ldr	r3, [pc, #8]	; (9ae38 <sysclk_get_peripheral_hz+0x10>)
   9ae2e:	4798      	blx	r3
   9ae30:	4603      	mov	r3, r0
   9ae32:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   9ae34:	4618      	mov	r0, r3
   9ae36:	bd80      	pop	{r7, pc}
   9ae38:	0009ae0d 	.word	0x0009ae0d

0009ae3c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   9ae3c:	b580      	push	{r7, lr}
   9ae3e:	b082      	sub	sp, #8
   9ae40:	af00      	add	r7, sp, #0
   9ae42:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   9ae44:	6878      	ldr	r0, [r7, #4]
   9ae46:	4b02      	ldr	r3, [pc, #8]	; (9ae50 <sysclk_enable_peripheral_clock+0x14>)
   9ae48:	4798      	blx	r3
}
   9ae4a:	3708      	adds	r7, #8
   9ae4c:	46bd      	mov	sp, r7
   9ae4e:	bd80      	pop	{r7, pc}
   9ae50:	0009c58d 	.word	0x0009c58d

0009ae54 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
   9ae54:	b580      	push	{r7, lr}
   9ae56:	b08c      	sub	sp, #48	; 0x30
   9ae58:	af00      	add	r7, sp, #0
   9ae5a:	6078      	str	r0, [r7, #4]
   9ae5c:	6039      	str	r1, [r7, #0]
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   9ae5e:	4b40      	ldr	r3, [pc, #256]	; (9af60 <usart_serial_init+0x10c>)
   9ae60:	4798      	blx	r3
   9ae62:	4603      	mov	r3, r0
   9ae64:	623b      	str	r3, [r7, #32]
	uart_settings.ul_baudrate = opt->baudrate;
   9ae66:	683b      	ldr	r3, [r7, #0]
   9ae68:	681b      	ldr	r3, [r3, #0]
   9ae6a:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_mode = opt->paritytype;
   9ae6c:	683b      	ldr	r3, [r7, #0]
   9ae6e:	689b      	ldr	r3, [r3, #8]
   9ae70:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
   9ae72:	683b      	ldr	r3, [r7, #0]
   9ae74:	681b      	ldr	r3, [r3, #0]
   9ae76:	60bb      	str	r3, [r7, #8]
	usart_settings.char_length = opt->charlength;
   9ae78:	683b      	ldr	r3, [r7, #0]
   9ae7a:	685b      	ldr	r3, [r3, #4]
   9ae7c:	60fb      	str	r3, [r7, #12]
	usart_settings.parity_type = opt->paritytype;
   9ae7e:	683b      	ldr	r3, [r7, #0]
   9ae80:	689b      	ldr	r3, [r3, #8]
   9ae82:	613b      	str	r3, [r7, #16]
	usart_settings.stop_bits= opt->stopbits;
   9ae84:	683b      	ldr	r3, [r7, #0]
   9ae86:	7b1b      	ldrb	r3, [r3, #12]
   9ae88:	617b      	str	r3, [r7, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
   9ae8a:	2300      	movs	r3, #0
   9ae8c:	61bb      	str	r3, [r7, #24]
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
   9ae8e:	687b      	ldr	r3, [r7, #4]
   9ae90:	4a34      	ldr	r2, [pc, #208]	; (9af64 <usart_serial_init+0x110>)
   9ae92:	4293      	cmp	r3, r2
   9ae94:	d108      	bne.n	9aea8 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART);
   9ae96:	2008      	movs	r0, #8
   9ae98:	4b33      	ldr	r3, [pc, #204]	; (9af68 <usart_serial_init+0x114>)
   9ae9a:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   9ae9c:	f107 0320 	add.w	r3, r7, #32
   9aea0:	6878      	ldr	r0, [r7, #4]
   9aea2:	4619      	mov	r1, r3
   9aea4:	4b31      	ldr	r3, [pc, #196]	; (9af6c <usart_serial_init+0x118>)
   9aea6:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   9aea8:	687b      	ldr	r3, [r7, #4]
   9aeaa:	4a31      	ldr	r2, [pc, #196]	; (9af70 <usart_serial_init+0x11c>)
   9aeac:	4293      	cmp	r3, r2
   9aeae:	d111      	bne.n	9aed4 <usart_serial_init+0x80>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART0);
   9aeb0:	2011      	movs	r0, #17
   9aeb2:	4b2d      	ldr	r3, [pc, #180]	; (9af68 <usart_serial_init+0x114>)
   9aeb4:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   9aeb6:	4b2a      	ldr	r3, [pc, #168]	; (9af60 <usart_serial_init+0x10c>)
   9aeb8:	4798      	blx	r3
   9aeba:	4602      	mov	r2, r0
   9aebc:	f107 0308 	add.w	r3, r7, #8
   9aec0:	6878      	ldr	r0, [r7, #4]
   9aec2:	4619      	mov	r1, r3
   9aec4:	4b2b      	ldr	r3, [pc, #172]	; (9af74 <usart_serial_init+0x120>)
   9aec6:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   9aec8:	6878      	ldr	r0, [r7, #4]
   9aeca:	4b2b      	ldr	r3, [pc, #172]	; (9af78 <usart_serial_init+0x124>)
   9aecc:	4798      	blx	r3
		usart_enable_rx(p_usart);
   9aece:	6878      	ldr	r0, [r7, #4]
   9aed0:	4b2a      	ldr	r3, [pc, #168]	; (9af7c <usart_serial_init+0x128>)
   9aed2:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   9aed4:	687b      	ldr	r3, [r7, #4]
   9aed6:	4a2a      	ldr	r2, [pc, #168]	; (9af80 <usart_serial_init+0x12c>)
   9aed8:	4293      	cmp	r3, r2
   9aeda:	d111      	bne.n	9af00 <usart_serial_init+0xac>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART1);
   9aedc:	2012      	movs	r0, #18
   9aede:	4b22      	ldr	r3, [pc, #136]	; (9af68 <usart_serial_init+0x114>)
   9aee0:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   9aee2:	4b1f      	ldr	r3, [pc, #124]	; (9af60 <usart_serial_init+0x10c>)
   9aee4:	4798      	blx	r3
   9aee6:	4602      	mov	r2, r0
   9aee8:	f107 0308 	add.w	r3, r7, #8
   9aeec:	6878      	ldr	r0, [r7, #4]
   9aeee:	4619      	mov	r1, r3
   9aef0:	4b20      	ldr	r3, [pc, #128]	; (9af74 <usart_serial_init+0x120>)
   9aef2:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   9aef4:	6878      	ldr	r0, [r7, #4]
   9aef6:	4b20      	ldr	r3, [pc, #128]	; (9af78 <usart_serial_init+0x124>)
   9aef8:	4798      	blx	r3
		usart_enable_rx(p_usart);
   9aefa:	6878      	ldr	r0, [r7, #4]
   9aefc:	4b1f      	ldr	r3, [pc, #124]	; (9af7c <usart_serial_init+0x128>)
   9aefe:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   9af00:	687b      	ldr	r3, [r7, #4]
   9af02:	4a20      	ldr	r2, [pc, #128]	; (9af84 <usart_serial_init+0x130>)
   9af04:	4293      	cmp	r3, r2
   9af06:	d111      	bne.n	9af2c <usart_serial_init+0xd8>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART2);
   9af08:	2013      	movs	r0, #19
   9af0a:	4b17      	ldr	r3, [pc, #92]	; (9af68 <usart_serial_init+0x114>)
   9af0c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   9af0e:	4b14      	ldr	r3, [pc, #80]	; (9af60 <usart_serial_init+0x10c>)
   9af10:	4798      	blx	r3
   9af12:	4602      	mov	r2, r0
   9af14:	f107 0308 	add.w	r3, r7, #8
   9af18:	6878      	ldr	r0, [r7, #4]
   9af1a:	4619      	mov	r1, r3
   9af1c:	4b15      	ldr	r3, [pc, #84]	; (9af74 <usart_serial_init+0x120>)
   9af1e:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   9af20:	6878      	ldr	r0, [r7, #4]
   9af22:	4b15      	ldr	r3, [pc, #84]	; (9af78 <usart_serial_init+0x124>)
   9af24:	4798      	blx	r3
		usart_enable_rx(p_usart);
   9af26:	6878      	ldr	r0, [r7, #4]
   9af28:	4b14      	ldr	r3, [pc, #80]	; (9af7c <usart_serial_init+0x128>)
   9af2a:	4798      	blx	r3
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   9af2c:	687b      	ldr	r3, [r7, #4]
   9af2e:	4a16      	ldr	r2, [pc, #88]	; (9af88 <usart_serial_init+0x134>)
   9af30:	4293      	cmp	r3, r2
   9af32:	d111      	bne.n	9af58 <usart_serial_init+0x104>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART3);
   9af34:	2014      	movs	r0, #20
   9af36:	4b0c      	ldr	r3, [pc, #48]	; (9af68 <usart_serial_init+0x114>)
   9af38:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   9af3a:	4b09      	ldr	r3, [pc, #36]	; (9af60 <usart_serial_init+0x10c>)
   9af3c:	4798      	blx	r3
   9af3e:	4602      	mov	r2, r0
   9af40:	f107 0308 	add.w	r3, r7, #8
   9af44:	6878      	ldr	r0, [r7, #4]
   9af46:	4619      	mov	r1, r3
   9af48:	4b0a      	ldr	r3, [pc, #40]	; (9af74 <usart_serial_init+0x120>)
   9af4a:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   9af4c:	6878      	ldr	r0, [r7, #4]
   9af4e:	4b0a      	ldr	r3, [pc, #40]	; (9af78 <usart_serial_init+0x124>)
   9af50:	4798      	blx	r3
		usart_enable_rx(p_usart);
   9af52:	6878      	ldr	r0, [r7, #4]
   9af54:	4b09      	ldr	r3, [pc, #36]	; (9af7c <usart_serial_init+0x128>)
   9af56:	4798      	blx	r3
		usart_enable_rx(p_usart);
	}
# endif
#endif /* ifdef USART */

}
   9af58:	3730      	adds	r7, #48	; 0x30
   9af5a:	46bd      	mov	sp, r7
   9af5c:	bd80      	pop	{r7, pc}
   9af5e:	bf00      	nop
   9af60:	0009ae29 	.word	0x0009ae29
   9af64:	400e0800 	.word	0x400e0800
   9af68:	0009ae3d 	.word	0x0009ae3d
   9af6c:	0009c6d9 	.word	0x0009c6d9
   9af70:	40098000 	.word	0x40098000
   9af74:	0009c8fd 	.word	0x0009c8fd
   9af78:	0009c981 	.word	0x0009c981
   9af7c:	0009c9b1 	.word	0x0009c9b1
   9af80:	4009c000 	.word	0x4009c000
   9af84:	400a0000 	.word	0x400a0000
   9af88:	400a4000 	.word	0x400a4000

0009af8c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   9af8c:	b580      	push	{r7, lr}
   9af8e:	b082      	sub	sp, #8
   9af90:	af00      	add	r7, sp, #0
   9af92:	6078      	str	r0, [r7, #4]
   9af94:	460b      	mov	r3, r1
   9af96:	70fb      	strb	r3, [r7, #3]
#ifdef UART
	if (UART == (Uart*)p_usart) {
   9af98:	687b      	ldr	r3, [r7, #4]
   9af9a:	4a27      	ldr	r2, [pc, #156]	; (9b038 <usart_serial_putchar+0xac>)
   9af9c:	4293      	cmp	r3, r2
   9af9e:	d10a      	bne.n	9afb6 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
   9afa0:	bf00      	nop
   9afa2:	78fb      	ldrb	r3, [r7, #3]
   9afa4:	6878      	ldr	r0, [r7, #4]
   9afa6:	4619      	mov	r1, r3
   9afa8:	4b24      	ldr	r3, [pc, #144]	; (9b03c <usart_serial_putchar+0xb0>)
   9afaa:	4798      	blx	r3
   9afac:	4603      	mov	r3, r0
   9afae:	2b00      	cmp	r3, #0
   9afb0:	d1f7      	bne.n	9afa2 <usart_serial_putchar+0x16>
		return 1;
   9afb2:	2301      	movs	r3, #1
   9afb4:	e03c      	b.n	9b030 <usart_serial_putchar+0xa4>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   9afb6:	687b      	ldr	r3, [r7, #4]
   9afb8:	4a21      	ldr	r2, [pc, #132]	; (9b040 <usart_serial_putchar+0xb4>)
   9afba:	4293      	cmp	r3, r2
   9afbc:	d10a      	bne.n	9afd4 <usart_serial_putchar+0x48>
		while (usart_write(p_usart, c)!=0);
   9afbe:	bf00      	nop
   9afc0:	78fb      	ldrb	r3, [r7, #3]
   9afc2:	6878      	ldr	r0, [r7, #4]
   9afc4:	4619      	mov	r1, r3
   9afc6:	4b1f      	ldr	r3, [pc, #124]	; (9b044 <usart_serial_putchar+0xb8>)
   9afc8:	4798      	blx	r3
   9afca:	4603      	mov	r3, r0
   9afcc:	2b00      	cmp	r3, #0
   9afce:	d1f7      	bne.n	9afc0 <usart_serial_putchar+0x34>
		return 1;
   9afd0:	2301      	movs	r3, #1
   9afd2:	e02d      	b.n	9b030 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   9afd4:	687b      	ldr	r3, [r7, #4]
   9afd6:	4a1c      	ldr	r2, [pc, #112]	; (9b048 <usart_serial_putchar+0xbc>)
   9afd8:	4293      	cmp	r3, r2
   9afda:	d10a      	bne.n	9aff2 <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
   9afdc:	bf00      	nop
   9afde:	78fb      	ldrb	r3, [r7, #3]
   9afe0:	6878      	ldr	r0, [r7, #4]
   9afe2:	4619      	mov	r1, r3
   9afe4:	4b17      	ldr	r3, [pc, #92]	; (9b044 <usart_serial_putchar+0xb8>)
   9afe6:	4798      	blx	r3
   9afe8:	4603      	mov	r3, r0
   9afea:	2b00      	cmp	r3, #0
   9afec:	d1f7      	bne.n	9afde <usart_serial_putchar+0x52>
		return 1;
   9afee:	2301      	movs	r3, #1
   9aff0:	e01e      	b.n	9b030 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   9aff2:	687b      	ldr	r3, [r7, #4]
   9aff4:	4a15      	ldr	r2, [pc, #84]	; (9b04c <usart_serial_putchar+0xc0>)
   9aff6:	4293      	cmp	r3, r2
   9aff8:	d10a      	bne.n	9b010 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
   9affa:	bf00      	nop
   9affc:	78fb      	ldrb	r3, [r7, #3]
   9affe:	6878      	ldr	r0, [r7, #4]
   9b000:	4619      	mov	r1, r3
   9b002:	4b10      	ldr	r3, [pc, #64]	; (9b044 <usart_serial_putchar+0xb8>)
   9b004:	4798      	blx	r3
   9b006:	4603      	mov	r3, r0
   9b008:	2b00      	cmp	r3, #0
   9b00a:	d1f7      	bne.n	9affc <usart_serial_putchar+0x70>
		return 1;
   9b00c:	2301      	movs	r3, #1
   9b00e:	e00f      	b.n	9b030 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   9b010:	687b      	ldr	r3, [r7, #4]
   9b012:	4a0f      	ldr	r2, [pc, #60]	; (9b050 <usart_serial_putchar+0xc4>)
   9b014:	4293      	cmp	r3, r2
   9b016:	d10a      	bne.n	9b02e <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
   9b018:	bf00      	nop
   9b01a:	78fb      	ldrb	r3, [r7, #3]
   9b01c:	6878      	ldr	r0, [r7, #4]
   9b01e:	4619      	mov	r1, r3
   9b020:	4b08      	ldr	r3, [pc, #32]	; (9b044 <usart_serial_putchar+0xb8>)
   9b022:	4798      	blx	r3
   9b024:	4603      	mov	r3, r0
   9b026:	2b00      	cmp	r3, #0
   9b028:	d1f7      	bne.n	9b01a <usart_serial_putchar+0x8e>
		return 1;
   9b02a:	2301      	movs	r3, #1
   9b02c:	e000      	b.n	9b030 <usart_serial_putchar+0xa4>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   9b02e:	2300      	movs	r3, #0
}
   9b030:	4618      	mov	r0, r3
   9b032:	3708      	adds	r7, #8
   9b034:	46bd      	mov	sp, r7
   9b036:	bd80      	pop	{r7, pc}
   9b038:	400e0800 	.word	0x400e0800
   9b03c:	0009c7a1 	.word	0x0009c7a1
   9b040:	40098000 	.word	0x40098000
   9b044:	0009ca19 	.word	0x0009ca19
   9b048:	4009c000 	.word	0x4009c000
   9b04c:	400a0000 	.word	0x400a0000
   9b050:	400a4000 	.word	0x400a4000

0009b054 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   9b054:	b580      	push	{r7, lr}
   9b056:	b084      	sub	sp, #16
   9b058:	af00      	add	r7, sp, #0
   9b05a:	6078      	str	r0, [r7, #4]
   9b05c:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
   9b05e:	2300      	movs	r3, #0
   9b060:	60fb      	str	r3, [r7, #12]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   9b062:	687b      	ldr	r3, [r7, #4]
   9b064:	4a2a      	ldr	r2, [pc, #168]	; (9b110 <usart_serial_getchar+0xbc>)
   9b066:	4293      	cmp	r3, r2
   9b068:	d107      	bne.n	9b07a <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
   9b06a:	bf00      	nop
   9b06c:	6878      	ldr	r0, [r7, #4]
   9b06e:	6839      	ldr	r1, [r7, #0]
   9b070:	4b28      	ldr	r3, [pc, #160]	; (9b114 <usart_serial_getchar+0xc0>)
   9b072:	4798      	blx	r3
   9b074:	4603      	mov	r3, r0
   9b076:	2b00      	cmp	r3, #0
   9b078:	d1f8      	bne.n	9b06c <usart_serial_getchar+0x18>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   9b07a:	687b      	ldr	r3, [r7, #4]
   9b07c:	4a26      	ldr	r2, [pc, #152]	; (9b118 <usart_serial_getchar+0xc4>)
   9b07e:	4293      	cmp	r3, r2
   9b080:	d10d      	bne.n	9b09e <usart_serial_getchar+0x4a>
		while (usart_read(p_usart, &val));
   9b082:	bf00      	nop
   9b084:	f107 030c 	add.w	r3, r7, #12
   9b088:	6878      	ldr	r0, [r7, #4]
   9b08a:	4619      	mov	r1, r3
   9b08c:	4b23      	ldr	r3, [pc, #140]	; (9b11c <usart_serial_getchar+0xc8>)
   9b08e:	4798      	blx	r3
   9b090:	4603      	mov	r3, r0
   9b092:	2b00      	cmp	r3, #0
   9b094:	d1f6      	bne.n	9b084 <usart_serial_getchar+0x30>
		*data = (uint8_t)(val & 0xFF);
   9b096:	68fb      	ldr	r3, [r7, #12]
   9b098:	b2da      	uxtb	r2, r3
   9b09a:	683b      	ldr	r3, [r7, #0]
   9b09c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   9b09e:	687b      	ldr	r3, [r7, #4]
   9b0a0:	4a1f      	ldr	r2, [pc, #124]	; (9b120 <usart_serial_getchar+0xcc>)
   9b0a2:	4293      	cmp	r3, r2
   9b0a4:	d10d      	bne.n	9b0c2 <usart_serial_getchar+0x6e>
		while (usart_read(p_usart, &val));
   9b0a6:	bf00      	nop
   9b0a8:	f107 030c 	add.w	r3, r7, #12
   9b0ac:	6878      	ldr	r0, [r7, #4]
   9b0ae:	4619      	mov	r1, r3
   9b0b0:	4b1a      	ldr	r3, [pc, #104]	; (9b11c <usart_serial_getchar+0xc8>)
   9b0b2:	4798      	blx	r3
   9b0b4:	4603      	mov	r3, r0
   9b0b6:	2b00      	cmp	r3, #0
   9b0b8:	d1f6      	bne.n	9b0a8 <usart_serial_getchar+0x54>
		*data = (uint8_t)(val & 0xFF);
   9b0ba:	68fb      	ldr	r3, [r7, #12]
   9b0bc:	b2da      	uxtb	r2, r3
   9b0be:	683b      	ldr	r3, [r7, #0]
   9b0c0:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   9b0c2:	687b      	ldr	r3, [r7, #4]
   9b0c4:	4a17      	ldr	r2, [pc, #92]	; (9b124 <usart_serial_getchar+0xd0>)
   9b0c6:	4293      	cmp	r3, r2
   9b0c8:	d10d      	bne.n	9b0e6 <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
   9b0ca:	bf00      	nop
   9b0cc:	f107 030c 	add.w	r3, r7, #12
   9b0d0:	6878      	ldr	r0, [r7, #4]
   9b0d2:	4619      	mov	r1, r3
   9b0d4:	4b11      	ldr	r3, [pc, #68]	; (9b11c <usart_serial_getchar+0xc8>)
   9b0d6:	4798      	blx	r3
   9b0d8:	4603      	mov	r3, r0
   9b0da:	2b00      	cmp	r3, #0
   9b0dc:	d1f6      	bne.n	9b0cc <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
   9b0de:	68fb      	ldr	r3, [r7, #12]
   9b0e0:	b2da      	uxtb	r2, r3
   9b0e2:	683b      	ldr	r3, [r7, #0]
   9b0e4:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   9b0e6:	687b      	ldr	r3, [r7, #4]
   9b0e8:	4a0f      	ldr	r2, [pc, #60]	; (9b128 <usart_serial_getchar+0xd4>)
   9b0ea:	4293      	cmp	r3, r2
   9b0ec:	d10d      	bne.n	9b10a <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
   9b0ee:	bf00      	nop
   9b0f0:	f107 030c 	add.w	r3, r7, #12
   9b0f4:	6878      	ldr	r0, [r7, #4]
   9b0f6:	4619      	mov	r1, r3
   9b0f8:	4b08      	ldr	r3, [pc, #32]	; (9b11c <usart_serial_getchar+0xc8>)
   9b0fa:	4798      	blx	r3
   9b0fc:	4603      	mov	r3, r0
   9b0fe:	2b00      	cmp	r3, #0
   9b100:	d1f6      	bne.n	9b0f0 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
   9b102:	68fb      	ldr	r3, [r7, #12]
   9b104:	b2da      	uxtb	r2, r3
   9b106:	683b      	ldr	r3, [r7, #0]
   9b108:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   9b10a:	3710      	adds	r7, #16
   9b10c:	46bd      	mov	sp, r7
   9b10e:	bd80      	pop	{r7, pc}
   9b110:	400e0800 	.word	0x400e0800
   9b114:	0009c7e9 	.word	0x0009c7e9
   9b118:	40098000 	.word	0x40098000
   9b11c:	0009ca4d 	.word	0x0009ca4d
   9b120:	4009c000 	.word	0x4009c000
   9b124:	400a0000 	.word	0x400a0000
   9b128:	400a4000 	.word	0x400a4000

0009b12c <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
   9b12c:	b580      	push	{r7, lr}
   9b12e:	b082      	sub	sp, #8
   9b130:	af00      	add	r7, sp, #0
   9b132:	6078      	str	r0, [r7, #4]
   9b134:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
   9b136:	4a0f      	ldr	r2, [pc, #60]	; (9b174 <stdio_serial_init+0x48>)
   9b138:	687b      	ldr	r3, [r7, #4]
   9b13a:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   9b13c:	4b0e      	ldr	r3, [pc, #56]	; (9b178 <stdio_serial_init+0x4c>)
   9b13e:	4a0f      	ldr	r2, [pc, #60]	; (9b17c <stdio_serial_init+0x50>)
   9b140:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   9b142:	4b0f      	ldr	r3, [pc, #60]	; (9b180 <stdio_serial_init+0x54>)
   9b144:	4a0f      	ldr	r2, [pc, #60]	; (9b184 <stdio_serial_init+0x58>)
   9b146:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
   9b148:	6878      	ldr	r0, [r7, #4]
   9b14a:	6839      	ldr	r1, [r7, #0]
   9b14c:	4b0e      	ldr	r3, [pc, #56]	; (9b188 <stdio_serial_init+0x5c>)
   9b14e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   9b150:	4b0e      	ldr	r3, [pc, #56]	; (9b18c <stdio_serial_init+0x60>)
   9b152:	681b      	ldr	r3, [r3, #0]
   9b154:	689b      	ldr	r3, [r3, #8]
   9b156:	4618      	mov	r0, r3
   9b158:	2100      	movs	r1, #0
   9b15a:	4b0d      	ldr	r3, [pc, #52]	; (9b190 <stdio_serial_init+0x64>)
   9b15c:	4798      	blx	r3
	setbuf(stdin, NULL);
   9b15e:	4b0b      	ldr	r3, [pc, #44]	; (9b18c <stdio_serial_init+0x60>)
   9b160:	681b      	ldr	r3, [r3, #0]
   9b162:	685b      	ldr	r3, [r3, #4]
   9b164:	4618      	mov	r0, r3
   9b166:	2100      	movs	r1, #0
   9b168:	4b09      	ldr	r3, [pc, #36]	; (9b190 <stdio_serial_init+0x64>)
   9b16a:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
   9b16c:	3708      	adds	r7, #8
   9b16e:	46bd      	mov	sp, r7
   9b170:	bd80      	pop	{r7, pc}
   9b172:	bf00      	nop
   9b174:	20072a3c 	.word	0x20072a3c
   9b178:	20072a38 	.word	0x20072a38
   9b17c:	0009af8d 	.word	0x0009af8d
   9b180:	20072a34 	.word	0x20072a34
   9b184:	0009b055 	.word	0x0009b055
   9b188:	0009ae55 	.word	0x0009ae55
   9b18c:	200713c0 	.word	0x200713c0
   9b190:	000a8965 	.word	0x000a8965

0009b194 <DD_INIT_UART>:
	.paritytype = CONF_UART_PARITY,
	.stopbits = true
};

void DD_INIT_UART()
{
   9b194:	b580      	push	{r7, lr}
   9b196:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_UART);
   9b198:	2008      	movs	r0, #8
   9b19a:	4b10      	ldr	r3, [pc, #64]	; (9b1dc <DD_INIT_UART+0x48>)
   9b19c:	4798      	blx	r3
	UART->UART_CR	= 0x00000050;
   9b19e:	4b10      	ldr	r3, [pc, #64]	; (9b1e0 <DD_INIT_UART+0x4c>)
   9b1a0:	2250      	movs	r2, #80	; 0x50
   9b1a2:	601a      	str	r2, [r3, #0]
	UART->UART_MR	= 0x00000800;
   9b1a4:	4b0e      	ldr	r3, [pc, #56]	; (9b1e0 <DD_INIT_UART+0x4c>)
   9b1a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   9b1aa:	605a      	str	r2, [r3, #4]
	UART->UART_BRGR = 0x00000046;
   9b1ac:	4b0c      	ldr	r3, [pc, #48]	; (9b1e0 <DD_INIT_UART+0x4c>)
   9b1ae:	2246      	movs	r2, #70	; 0x46
   9b1b0:	621a      	str	r2, [r3, #32]
		
	//uart_init(UART,&uart_options);
	stdio_serial_init(UART, &uart_serial_options);
   9b1b2:	480b      	ldr	r0, [pc, #44]	; (9b1e0 <DD_INIT_UART+0x4c>)
   9b1b4:	490b      	ldr	r1, [pc, #44]	; (9b1e4 <DD_INIT_UART+0x50>)
   9b1b6:	4b0c      	ldr	r3, [pc, #48]	; (9b1e8 <DD_INIT_UART+0x54>)
   9b1b8:	4798      	blx	r3
	uart_enable(UART);
   9b1ba:	4809      	ldr	r0, [pc, #36]	; (9b1e0 <DD_INIT_UART+0x4c>)
   9b1bc:	4b0b      	ldr	r3, [pc, #44]	; (9b1ec <DD_INIT_UART+0x58>)
   9b1be:	4798      	blx	r3
	uart_enable_interrupt(UART, UART_SR_RXRDY);
   9b1c0:	4807      	ldr	r0, [pc, #28]	; (9b1e0 <DD_INIT_UART+0x4c>)
   9b1c2:	2101      	movs	r1, #1
   9b1c4:	4b0a      	ldr	r3, [pc, #40]	; (9b1f0 <DD_INIT_UART+0x5c>)
   9b1c6:	4798      	blx	r3
	uart_enable(UART);
   9b1c8:	4805      	ldr	r0, [pc, #20]	; (9b1e0 <DD_INIT_UART+0x4c>)
   9b1ca:	4b08      	ldr	r3, [pc, #32]	; (9b1ec <DD_INIT_UART+0x58>)
   9b1cc:	4798      	blx	r3
	uart_enable_rx(UART);
   9b1ce:	4804      	ldr	r0, [pc, #16]	; (9b1e0 <DD_INIT_UART+0x4c>)
   9b1d0:	4b08      	ldr	r3, [pc, #32]	; (9b1f4 <DD_INIT_UART+0x60>)
   9b1d2:	4798      	blx	r3
	uart_enable_tx(UART);
   9b1d4:	4802      	ldr	r0, [pc, #8]	; (9b1e0 <DD_INIT_UART+0x4c>)
   9b1d6:	4b08      	ldr	r3, [pc, #32]	; (9b1f8 <DD_INIT_UART+0x64>)
   9b1d8:	4798      	blx	r3
	
	
}
   9b1da:	bd80      	pop	{r7, pc}
   9b1dc:	0009ae3d 	.word	0x0009ae3d
   9b1e0:	400e0800 	.word	0x400e0800
   9b1e4:	000aa648 	.word	0x000aa648
   9b1e8:	0009b12d 	.word	0x0009b12d
   9b1ec:	0009c76d 	.word	0x0009c76d
   9b1f0:	0009c785 	.word	0x0009c785
   9b1f4:	0009c755 	.word	0x0009c755
   9b1f8:	0009c73d 	.word	0x0009c73d

0009b1fc <DD_TX_UART>:

uint32_t DD_TX_UART(uint8_t sv_consoleTxdatabyte)
{
   9b1fc:	b580      	push	{r7, lr}
   9b1fe:	b084      	sub	sp, #16
   9b200:	af00      	add	r7, sp, #0
   9b202:	4603      	mov	r3, r0
   9b204:	71fb      	strb	r3, [r7, #7]
	uint32_t uart_stat;
	uart_stat= uart_write(UART,sv_consoleTxdatabyte);
   9b206:	79fb      	ldrb	r3, [r7, #7]
   9b208:	4804      	ldr	r0, [pc, #16]	; (9b21c <DD_TX_UART+0x20>)
   9b20a:	4619      	mov	r1, r3
   9b20c:	4b04      	ldr	r3, [pc, #16]	; (9b220 <DD_TX_UART+0x24>)
   9b20e:	4798      	blx	r3
   9b210:	60f8      	str	r0, [r7, #12]
	
	return uart_stat;
   9b212:	68fb      	ldr	r3, [r7, #12]
}
   9b214:	4618      	mov	r0, r3
   9b216:	3710      	adds	r7, #16
   9b218:	46bd      	mov	sp, r7
   9b21a:	bd80      	pop	{r7, pc}
   9b21c:	400e0800 	.word	0x400e0800
   9b220:	0009c7a1 	.word	0x0009c7a1

0009b224 <SV_CAN_WRITE_PROPO>:
}


void SV_CAN_WRITE_PROPO(uint16_t propo_cmd, uint16_t data)

{
   9b224:	b580      	push	{r7, lr}
   9b226:	b082      	sub	sp, #8
   9b228:	af00      	add	r7, sp, #0
   9b22a:	4603      	mov	r3, r0
   9b22c:	460a      	mov	r2, r1
   9b22e:	80fb      	strh	r3, [r7, #6]
   9b230:	4613      	mov	r3, r2
   9b232:	80bb      	strh	r3, [r7, #4]
	 DD_CAN_WRITE_PROPO(propo_cmd, data);							// Gopal: command to send Acid Rc, Bicarb Rc and the user set Conductivity value
   9b234:	88fa      	ldrh	r2, [r7, #6]
   9b236:	88bb      	ldrh	r3, [r7, #4]
   9b238:	4610      	mov	r0, r2
   9b23a:	4619      	mov	r1, r3
   9b23c:	4b02      	ldr	r3, [pc, #8]	; (9b248 <SV_CAN_WRITE_PROPO+0x24>)
   9b23e:	4798      	blx	r3
	
}
   9b240:	3708      	adds	r7, #8
   9b242:	46bd      	mov	sp, r7
   9b244:	bd80      	pop	{r7, pc}
   9b246:	bf00      	nop
   9b248:	0009810d 	.word	0x0009810d

0009b24c <SV_CAN_READ_HEMO>:

uint32_t SV_CAN_READ_HEMO()

{
   9b24c:	b580      	push	{r7, lr}
   9b24e:	af00      	add	r7, sp, #0
	DD_CAN_READ_APTVPT();
   9b250:	4b02      	ldr	r3, [pc, #8]	; (9b25c <SV_CAN_READ_HEMO+0x10>)
   9b252:	4798      	blx	r3
	return 0;
   9b254:	2300      	movs	r3, #0
}
   9b256:	4618      	mov	r0, r3
   9b258:	bd80      	pop	{r7, pc}
   9b25a:	bf00      	nop
   9b25c:	000981cd 	.word	0x000981cd

0009b260 <SV_CAN_WRITE_SENSOR>:
}


void SV_CAN_WRITE_SENSOR(uint8_t SENSOR_CPU_id, uint16_t* data)

{
   9b260:	b580      	push	{r7, lr}
   9b262:	b082      	sub	sp, #8
   9b264:	af00      	add	r7, sp, #0
   9b266:	4603      	mov	r3, r0
   9b268:	6039      	str	r1, [r7, #0]
   9b26a:	71fb      	strb	r3, [r7, #7]
	DD_CAN_WRITE_SENSOR(data);
   9b26c:	683b      	ldr	r3, [r7, #0]
   9b26e:	b29b      	uxth	r3, r3
   9b270:	4618      	mov	r0, r3
   9b272:	4b02      	ldr	r3, [pc, #8]	; (9b27c <SV_CAN_WRITE_SENSOR+0x1c>)
   9b274:	4798      	blx	r3
	
}
   9b276:	3708      	adds	r7, #8
   9b278:	46bd      	mov	sp, r7
   9b27a:	bd80      	pop	{r7, pc}
   9b27c:	0009818d 	.word	0x0009818d

0009b280 <SV_CAN_REQUEST_SENSORDATA>:

void SV_CAN_REQUEST_SENSORDATA(void)
{
   9b280:	b580      	push	{r7, lr}
   9b282:	af00      	add	r7, sp, #0
	
		
	delay_cnt = g_ul_ms_ticks ;
   9b284:	4b23      	ldr	r3, [pc, #140]	; (9b314 <SV_CAN_REQUEST_SENSORDATA+0x94>)
   9b286:	681b      	ldr	r3, [r3, #0]
   9b288:	4a23      	ldr	r2, [pc, #140]	; (9b318 <SV_CAN_REQUEST_SENSORDATA+0x98>)
   9b28a:	6013      	str	r3, [r2, #0]
	delay = 0;	
   9b28c:	4b23      	ldr	r3, [pc, #140]	; (9b31c <SV_CAN_REQUEST_SENSORDATA+0x9c>)
   9b28e:	2200      	movs	r2, #0
   9b290:	601a      	str	r2, [r3, #0]
	cl_wait(10);
   9b292:	200a      	movs	r0, #10
   9b294:	4b22      	ldr	r3, [pc, #136]	; (9b320 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   9b296:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group1);
   9b298:	2003      	movs	r0, #3
   9b29a:	2141      	movs	r1, #65	; 0x41
   9b29c:	4b21      	ldr	r3, [pc, #132]	; (9b324 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   9b29e:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}
	array1[1]	= 0;
   9b2a0:	4b21      	ldr	r3, [pc, #132]	; (9b328 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   9b2a2:	2200      	movs	r2, #0
   9b2a4:	705a      	strb	r2, [r3, #1]
	
//	while(	!array1[1]);
	cl_wait(10);
   9b2a6:	200a      	movs	r0, #10
   9b2a8:	4b1d      	ldr	r3, [pc, #116]	; (9b320 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   9b2aa:	4798      	blx	r3

	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group2);
   9b2ac:	2003      	movs	r0, #3
   9b2ae:	2142      	movs	r1, #66	; 0x42
   9b2b0:	4b1c      	ldr	r3, [pc, #112]	; (9b324 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   9b2b2:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}

	array1[2]	= 0;
   9b2b4:	4b1c      	ldr	r3, [pc, #112]	; (9b328 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   9b2b6:	2200      	movs	r2, #0
   9b2b8:	709a      	strb	r2, [r3, #2]
//	while(	!array1[2]);
cl_wait(10);
   9b2ba:	200a      	movs	r0, #10
   9b2bc:	4b18      	ldr	r3, [pc, #96]	; (9b320 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   9b2be:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group3);
   9b2c0:	2003      	movs	r0, #3
   9b2c2:	2143      	movs	r1, #67	; 0x43
   9b2c4:	4b17      	ldr	r3, [pc, #92]	; (9b324 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   9b2c6:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}
	array1[3]	= 0;
   9b2c8:	4b17      	ldr	r3, [pc, #92]	; (9b328 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   9b2ca:	2200      	movs	r2, #0
   9b2cc:	70da      	strb	r2, [r3, #3]
//	while(	!array1[3]);
cl_wait(10);
   9b2ce:	200a      	movs	r0, #10
   9b2d0:	4b13      	ldr	r3, [pc, #76]	; (9b320 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   9b2d2:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group4);
   9b2d4:	2003      	movs	r0, #3
   9b2d6:	2144      	movs	r1, #68	; 0x44
   9b2d8:	4b12      	ldr	r3, [pc, #72]	; (9b324 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   9b2da:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}
	array1[4]	= 0;
   9b2dc:	4b12      	ldr	r3, [pc, #72]	; (9b328 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   9b2de:	2200      	movs	r2, #0
   9b2e0:	711a      	strb	r2, [r3, #4]
//	while(	!array1[4]);
cl_wait(10);
   9b2e2:	200a      	movs	r0, #10
   9b2e4:	4b0e      	ldr	r3, [pc, #56]	; (9b320 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   9b2e6:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group5);
   9b2e8:	2003      	movs	r0, #3
   9b2ea:	2145      	movs	r1, #69	; 0x45
   9b2ec:	4b0d      	ldr	r3, [pc, #52]	; (9b324 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   9b2ee:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}
	array1[5]	= 0;
   9b2f0:	4b0d      	ldr	r3, [pc, #52]	; (9b328 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   9b2f2:	2200      	movs	r2, #0
   9b2f4:	715a      	strb	r2, [r3, #5]
//	while(	!array1[5]);
cl_wait(10);
   9b2f6:	200a      	movs	r0, #10
   9b2f8:	4b09      	ldr	r3, [pc, #36]	; (9b320 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   9b2fa:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group6);
   9b2fc:	2003      	movs	r0, #3
   9b2fe:	2146      	movs	r1, #70	; 0x46
   9b300:	4b08      	ldr	r3, [pc, #32]	; (9b324 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   9b302:	4798      	blx	r3
// 	for(int i=0; i<100; i++)
// 	{
// 		
// 	}
// 	
cl_wait(10);
   9b304:	200a      	movs	r0, #10
   9b306:	4b06      	ldr	r3, [pc, #24]	; (9b320 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   9b308:	4798      	blx	r3
	array1[6]	= 0;
   9b30a:	4b07      	ldr	r3, [pc, #28]	; (9b328 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   9b30c:	2200      	movs	r2, #0
   9b30e:	719a      	strb	r2, [r3, #6]
//	while(	!array1[6]);
	
	
}
   9b310:	bd80      	pop	{r7, pc}
   9b312:	bf00      	nop
   9b314:	20071bdc 	.word	0x20071bdc
   9b318:	20071cb0 	.word	0x20071cb0
   9b31c:	20071cb4 	.word	0x20071cb4
   9b320:	0009421d 	.word	0x0009421d
   9b324:	0009b261 	.word	0x0009b261
   9b328:	20071ca4 	.word	0x20071ca4

0009b32c <sv_cntrl_activatepump>:
{
	uint8_t byte[4] ;
	uint32_t data;
	}bloodpumpcmdType;
uint8_t sv_cntrl_activatepump(sv_pumptype sv_pump_id)
{
   9b32c:	b580      	push	{r7, lr}
   9b32e:	b084      	sub	sp, #16
   9b330:	af00      	add	r7, sp, #0
   9b332:	4603      	mov	r3, r0
   9b334:	71fb      	strb	r3, [r7, #7]
	//uint8_t bloodpumpspeed[3];
	bloodpumpcmdType bloodpumpcmd;
	
	bloodpumpcmd.data =0;
   9b336:	2300      	movs	r3, #0
   9b338:	60fb      	str	r3, [r7, #12]

	
	
	if(sv_pump_id != BLOODPUMP)
   9b33a:	79fb      	ldrb	r3, [r7, #7]
   9b33c:	2b03      	cmp	r3, #3
   9b33e:	d004      	beq.n	9b34a <sv_cntrl_activatepump+0x1e>
	{
		DD_SET_PUMP(sv_pump_id);
   9b340:	79fb      	ldrb	r3, [r7, #7]
   9b342:	4618      	mov	r0, r3
   9b344:	4b06      	ldr	r3, [pc, #24]	; (9b360 <sv_cntrl_activatepump+0x34>)
   9b346:	4798      	blx	r3
   9b348:	e005      	b.n	9b356 <sv_cntrl_activatepump+0x2a>
	
	
	} 
	else	
	{
		bloodpumpcmd.byte[0] = 1;
   9b34a:	2301      	movs	r3, #1
   9b34c:	733b      	strb	r3, [r7, #12]
//		DD_IIC_SET_BLOODPUP(BLOODPUMP_IIC_ADR,bloodpumpcmd.data,1);
		DD_CAN_WRITE_HEMO(BP_START_BLOOD_PUMP,0);
   9b34e:	2020      	movs	r0, #32
   9b350:	2100      	movs	r1, #0
   9b352:	4b04      	ldr	r3, [pc, #16]	; (9b364 <sv_cntrl_activatepump+0x38>)
   9b354:	4798      	blx	r3
	}
	
	return 0;
   9b356:	2300      	movs	r3, #0
}
   9b358:	4618      	mov	r0, r3
   9b35a:	3710      	adds	r7, #16
   9b35c:	46bd      	mov	sp, r7
   9b35e:	bd80      	pop	{r7, pc}
   9b360:	00099715 	.word	0x00099715
   9b364:	00098145 	.word	0x00098145

0009b368 <sv_cntrl_deactivatepump>:

uint8_t sv_cntrl_deactivatepump(sv_pumptype sv_pump_id)
{
   9b368:	b580      	push	{r7, lr}
   9b36a:	b084      	sub	sp, #16
   9b36c:	af00      	add	r7, sp, #0
   9b36e:	4603      	mov	r3, r0
   9b370:	71fb      	strb	r3, [r7, #7]
	bloodpumpcmdType bloodpumpcmd;
	bloodpumpcmd.data =0;
   9b372:	2300      	movs	r3, #0
   9b374:	60fb      	str	r3, [r7, #12]
	//uint8_t bloodpumpspeed[3];
	
	if(sv_pump_id == HEPARINPUMP){
   9b376:	79fb      	ldrb	r3, [r7, #7]
   9b378:	2b05      	cmp	r3, #5
   9b37a:	d107      	bne.n	9b38c <sv_cntrl_deactivatepump+0x24>
		
		Cl_AlarmActivateAlarms(HP_OVERRUN,false);
   9b37c:	2034      	movs	r0, #52	; 0x34
   9b37e:	2100      	movs	r1, #0
   9b380:	4b0c      	ldr	r3, [pc, #48]	; (9b3b4 <sv_cntrl_deactivatepump+0x4c>)
   9b382:	4798      	blx	r3
		Cl_AlarmActivateAlarms(HP_UNDERRUN,false);
   9b384:	2035      	movs	r0, #53	; 0x35
   9b386:	2100      	movs	r1, #0
   9b388:	4b0a      	ldr	r3, [pc, #40]	; (9b3b4 <sv_cntrl_deactivatepump+0x4c>)
   9b38a:	4798      	blx	r3
		
	}
	
	if(sv_pump_id != BLOODPUMP)
   9b38c:	79fb      	ldrb	r3, [r7, #7]
   9b38e:	2b03      	cmp	r3, #3
   9b390:	d004      	beq.n	9b39c <sv_cntrl_deactivatepump+0x34>
	{
		DD_RESET_PUMP(sv_pump_id);
   9b392:	79fb      	ldrb	r3, [r7, #7]
   9b394:	4618      	mov	r0, r3
   9b396:	4b08      	ldr	r3, [pc, #32]	; (9b3b8 <sv_cntrl_deactivatepump+0x50>)
   9b398:	4798      	blx	r3
   9b39a:	e005      	b.n	9b3a8 <sv_cntrl_deactivatepump+0x40>

	} else
	
	
	{
		bloodpumpcmd.byte[0] = 2;
   9b39c:	2302      	movs	r3, #2
   9b39e:	733b      	strb	r3, [r7, #12]
	//	DD_IIC_SET_BLOODPUP(BLOODPUMP_IIC_ADR,bloodpumpcmd.data,1);
	DD_CAN_WRITE_HEMO(BP_STOP_PUMP,0);
   9b3a0:	2021      	movs	r0, #33	; 0x21
   9b3a2:	2100      	movs	r1, #0
   9b3a4:	4b05      	ldr	r3, [pc, #20]	; (9b3bc <sv_cntrl_deactivatepump+0x54>)
   9b3a6:	4798      	blx	r3
	}
	
	
	return 0;
   9b3a8:	2300      	movs	r3, #0
}
   9b3aa:	4618      	mov	r0, r3
   9b3ac:	3710      	adds	r7, #16
   9b3ae:	46bd      	mov	sp, r7
   9b3b0:	bd80      	pop	{r7, pc}
   9b3b2:	bf00      	nop
   9b3b4:	00082a35 	.word	0x00082a35
   9b3b8:	000998b5 	.word	0x000998b5
   9b3bc:	00098145 	.word	0x00098145

0009b3c0 <sv_cntrl_poweronheater>:
uint8_t sv_cntrl_poweronheater(void)
{
   9b3c0:	b580      	push	{r7, lr}
   9b3c2:	af00      	add	r7, sp, #0
	 DD_SET_HEATER();
   9b3c4:	4b02      	ldr	r3, [pc, #8]	; (9b3d0 <sv_cntrl_poweronheater+0x10>)
   9b3c6:	4798      	blx	r3
	 return 0;
   9b3c8:	2300      	movs	r3, #0
}
   9b3ca:	4618      	mov	r0, r3
   9b3cc:	bd80      	pop	{r7, pc}
   9b3ce:	bf00      	nop
   9b3d0:	000997f5 	.word	0x000997f5

0009b3d4 <sv_cntrl_poweroffheater>:
uint8_t sv_cntrl_poweroffheater(void)
{
   9b3d4:	b580      	push	{r7, lr}
   9b3d6:	af00      	add	r7, sp, #0
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,( uint8_t*)"HEAT_OFF",8);
	DD_RESET_HEATER();
   9b3d8:	4b02      	ldr	r3, [pc, #8]	; (9b3e4 <sv_cntrl_poweroffheater+0x10>)
   9b3da:	4798      	blx	r3
	return 0;
   9b3dc:	2300      	movs	r3, #0
}
   9b3de:	4618      	mov	r0, r3
   9b3e0:	bd80      	pop	{r7, pc}
   9b3e2:	bf00      	nop
   9b3e4:	00099855 	.word	0x00099855

0009b3e8 <sv_cntrl_activate_valve>:



uint8_t sv_cntrl_activate_valve(sv_valvetype sv_valve_id)
{
   9b3e8:	b580      	push	{r7, lr}
   9b3ea:	b082      	sub	sp, #8
   9b3ec:	af00      	add	r7, sp, #0
   9b3ee:	4603      	mov	r3, r0
   9b3f0:	71fb      	strb	r3, [r7, #7]
	//{
	//	DD_RESET_VALVE(sv_valve_id);
	//}
	//else
	{
		DD_SET_VALVE(sv_valve_id);
   9b3f2:	79fb      	ldrb	r3, [r7, #7]
   9b3f4:	4618      	mov	r0, r3
   9b3f6:	4b03      	ldr	r3, [pc, #12]	; (9b404 <sv_cntrl_activate_valve+0x1c>)
   9b3f8:	4798      	blx	r3
	}
	
	
	return 0;
   9b3fa:	2300      	movs	r3, #0
}
   9b3fc:	4618      	mov	r0, r3
   9b3fe:	3708      	adds	r7, #8
   9b400:	46bd      	mov	sp, r7
   9b402:	bd80      	pop	{r7, pc}
   9b404:	00099c2d 	.word	0x00099c2d

0009b408 <sv_cntrl_deactivate_valve>:

uint8_t sv_cntrl_deactivate_valve(sv_valvetype sv_valve_id)
{
   9b408:	b580      	push	{r7, lr}
   9b40a:	b082      	sub	sp, #8
   9b40c:	af00      	add	r7, sp, #0
   9b40e:	4603      	mov	r3, r0
   9b410:	71fb      	strb	r3, [r7, #7]
	
	if(sv_valve_id == VALVE_ID16)
   9b412:	79fb      	ldrb	r3, [r7, #7]
   9b414:	2b10      	cmp	r3, #16
   9b416:	d101      	bne.n	9b41c <sv_cntrl_deactivate_valve+0x14>
	{
		DD_RESET_HEATER();
   9b418:	4b05      	ldr	r3, [pc, #20]	; (9b430 <sv_cntrl_deactivate_valve+0x28>)
   9b41a:	4798      	blx	r3
	}
	DD_RESET_VALVE(sv_valve_id);
   9b41c:	79fb      	ldrb	r3, [r7, #7]
   9b41e:	4618      	mov	r0, r3
   9b420:	4b04      	ldr	r3, [pc, #16]	; (9b434 <sv_cntrl_deactivate_valve+0x2c>)
   9b422:	4798      	blx	r3
	
	return 0;
   9b424:	2300      	movs	r3, #0
}
   9b426:	4618      	mov	r0, r3
   9b428:	3708      	adds	r7, #8
   9b42a:	46bd      	mov	sp, r7
   9b42c:	bd80      	pop	{r7, pc}
   9b42e:	bf00      	nop
   9b430:	00099855 	.word	0x00099855
   9b434:	00099ced 	.word	0x00099ced

0009b438 <sv_cntrl_setHepa_dir>:


uint8_t sv_cntrl_setHepa_dir(void)
{
   9b438:	b580      	push	{r7, lr}
   9b43a:	af00      	add	r7, sp, #0
	DD_SET_DIR();
   9b43c:	4b02      	ldr	r3, [pc, #8]	; (9b448 <sv_cntrl_setHepa_dir+0x10>)
   9b43e:	4798      	blx	r3
	
	return 0;
   9b440:	2300      	movs	r3, #0
}
   9b442:	4618      	mov	r0, r3
   9b444:	bd80      	pop	{r7, pc}
   9b446:	bf00      	nop
   9b448:	00099b3d 	.word	0x00099b3d

0009b44c <sv_cntrl_resetHepa_dir>:



uint8_t sv_cntrl_resetHepa_dir()
{
   9b44c:	b580      	push	{r7, lr}
   9b44e:	af00      	add	r7, sp, #0
	DD_RESET_DIR();
   9b450:	4b02      	ldr	r3, [pc, #8]	; (9b45c <sv_cntrl_resetHepa_dir+0x10>)
   9b452:	4798      	blx	r3
	
	return 0;	
   9b454:	2300      	movs	r3, #0
}
   9b456:	4618      	mov	r0, r3
   9b458:	bd80      	pop	{r7, pc}
   9b45a:	bf00      	nop
   9b45c:	00099b65 	.word	0x00099b65

0009b460 <sv_cntrl_setpumpspeed>:
	}
	return 0;
}

uint8_t sv_cntrl_setpumpspeed(sv_pumptype sv_pump_id,uint32_t speed)
{
   9b460:	b580      	push	{r7, lr}
   9b462:	b084      	sub	sp, #16
   9b464:	af00      	add	r7, sp, #0
   9b466:	4603      	mov	r3, r0
   9b468:	6039      	str	r1, [r7, #0]
   9b46a:	71fb      	strb	r3, [r7, #7]
	bloodpumpcmdType bloodpumpspeed;
	bloodpumpspeed.data =0;
   9b46c:	2300      	movs	r3, #0
   9b46e:	60fb      	str	r3, [r7, #12]
		//bloodpumpspeed.data = speed;
		bloodpumpspeed.byte[0] = 0x04 ;
   9b470:	2304      	movs	r3, #4
   9b472:	733b      	strb	r3, [r7, #12]
		bloodpumpspeed.byte[1] = 0xff & speed ;
   9b474:	683b      	ldr	r3, [r7, #0]
   9b476:	b2db      	uxtb	r3, r3
   9b478:	737b      	strb	r3, [r7, #13]
		bloodpumpspeed.byte[2] = 0xff & speed >> 8 ;
   9b47a:	683b      	ldr	r3, [r7, #0]
   9b47c:	0a1b      	lsrs	r3, r3, #8
   9b47e:	b2db      	uxtb	r3, r3
   9b480:	73bb      	strb	r3, [r7, #14]
		
		if(sv_pump_id != BLOODPUMP)
   9b482:	79fb      	ldrb	r3, [r7, #7]
   9b484:	2b03      	cmp	r3, #3
   9b486:	d005      	beq.n	9b494 <sv_cntrl_setpumpspeed+0x34>
		{
				DD_SET_SPEED(sv_pump_id,speed);
   9b488:	79fb      	ldrb	r3, [r7, #7]
   9b48a:	4618      	mov	r0, r3
   9b48c:	6839      	ldr	r1, [r7, #0]
   9b48e:	4b07      	ldr	r3, [pc, #28]	; (9b4ac <sv_cntrl_setpumpspeed+0x4c>)
   9b490:	4798      	blx	r3
   9b492:	e005      	b.n	9b4a0 <sv_cntrl_setpumpspeed+0x40>
		
		{
			

		//	   DD_IIC_SET_BLOODPUP( BLOODPUMP_IIC_ADR,  bloodpumpspeed.data , 0x03);
		DD_CAN_WRITE_HEMO(BP_SPEED_CHANGE, speed);
   9b494:	683b      	ldr	r3, [r7, #0]
   9b496:	b29b      	uxth	r3, r3
   9b498:	2023      	movs	r0, #35	; 0x23
   9b49a:	4619      	mov	r1, r3
   9b49c:	4b04      	ldr	r3, [pc, #16]	; (9b4b0 <sv_cntrl_setpumpspeed+0x50>)
   9b49e:	4798      	blx	r3
		}
		
	
	return 0;
   9b4a0:	2300      	movs	r3, #0
}
   9b4a2:	4618      	mov	r0, r3
   9b4a4:	3710      	adds	r7, #16
   9b4a6:	46bd      	mov	sp, r7
   9b4a8:	bd80      	pop	{r7, pc}
   9b4aa:	bf00      	nop
   9b4ac:	0009999d 	.word	0x0009999d
   9b4b0:	00098145 	.word	0x00098145

0009b4b4 <sv_spi_blood_read_temp>:
void sv_spi_blood_read_temp(uint16_t* pdata)
{
   9b4b4:	b480      	push	{r7}
   9b4b6:	b083      	sub	sp, #12
   9b4b8:	af00      	add	r7, sp, #0
   9b4ba:	6078      	str	r0, [r7, #4]
//	DD_IIC_READ_BLDPMP( BLOODPUMP_IIC_ADR,8,pdata);
	
}
   9b4bc:	370c      	adds	r7, #12
   9b4be:	46bd      	mov	sp, r7
   9b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
   9b4c4:	4770      	bx	lr
   9b4c6:	bf00      	nop

0009b4c8 <sv_cntrl_incheater>:

uint8_t sv_cntrl_incheater(int32_t dty_val)


{
   9b4c8:	b580      	push	{r7, lr}
   9b4ca:	b082      	sub	sp, #8
   9b4cc:	af00      	add	r7, sp, #0
   9b4ce:	6078      	str	r0, [r7, #4]
//	dty_val = 2900;
	
	dummy1 = dty_val; 
   9b4d0:	4b0c      	ldr	r3, [pc, #48]	; (9b504 <sv_cntrl_incheater+0x3c>)
   9b4d2:	6878      	ldr	r0, [r7, #4]
   9b4d4:	4798      	blx	r3
   9b4d6:	4602      	mov	r2, r0
   9b4d8:	4b0b      	ldr	r3, [pc, #44]	; (9b508 <sv_cntrl_incheater+0x40>)
   9b4da:	601a      	str	r2, [r3, #0]
	
	if(dty_val > 7500)
   9b4dc:	687b      	ldr	r3, [r7, #4]
   9b4de:	f641 524c 	movw	r2, #7500	; 0x1d4c
   9b4e2:	4293      	cmp	r3, r2
   9b4e4:	dd02      	ble.n	9b4ec <sv_cntrl_incheater+0x24>
	{
		dty_val = 7500;
   9b4e6:	f641 534c 	movw	r3, #7500	; 0x1d4c
   9b4ea:	607b      	str	r3, [r7, #4]
	}
	// dty_val = dty_val * 0.66;
	 
	 if ( dty_val > 0)
   9b4ec:	687b      	ldr	r3, [r7, #4]
   9b4ee:	2b00      	cmp	r3, #0
   9b4f0:	dd03      	ble.n	9b4fa <sv_cntrl_incheater+0x32>
	 {
		 DD_CHNG_HTR(dty_val);
   9b4f2:	687b      	ldr	r3, [r7, #4]
   9b4f4:	4618      	mov	r0, r3
   9b4f6:	4b05      	ldr	r3, [pc, #20]	; (9b50c <sv_cntrl_incheater+0x44>)
   9b4f8:	4798      	blx	r3
	 }
	
	
	return 0;
   9b4fa:	2300      	movs	r3, #0
}
   9b4fc:	4618      	mov	r0, r3
   9b4fe:	3708      	adds	r7, #8
   9b500:	46bd      	mov	sp, r7
   9b502:	bd80      	pop	{r7, pc}
   9b504:	000a825d 	.word	0x000a825d
   9b508:	20072340 	.word	0x20072340
   9b50c:	00099b19 	.word	0x00099b19

0009b510 <sv_cntrl_decheater>:


uint8_t sv_cntrl_decheater(int32_t dty_val)
{
   9b510:	b580      	push	{r7, lr}
   9b512:	b082      	sub	sp, #8
   9b514:	af00      	add	r7, sp, #0
   9b516:	6078      	str	r0, [r7, #4]
		 if ( dty_val > 0)
   9b518:	687b      	ldr	r3, [r7, #4]
   9b51a:	2b00      	cmp	r3, #0
   9b51c:	dd03      	ble.n	9b526 <sv_cntrl_decheater+0x16>
	 {
		 DD_CHNG_HTR(dty_val);
   9b51e:	687b      	ldr	r3, [r7, #4]
   9b520:	4618      	mov	r0, r3
   9b522:	4b03      	ldr	r3, [pc, #12]	; (9b530 <sv_cntrl_decheater+0x20>)
   9b524:	4798      	blx	r3
	 }
	
	
	return 0;
   9b526:	2300      	movs	r3, #0
}
   9b528:	4618      	mov	r0, r3
   9b52a:	3708      	adds	r7, #8
   9b52c:	46bd      	mov	sp, r7
   9b52e:	bd80      	pop	{r7, pc}
   9b530:	00099b19 	.word	0x00099b19

0009b534 <sv_cntrl_activatevenousclamp>:

uint8_t sv_cntrl_activatevenousclamp(void)
{
   9b534:	b580      	push	{r7, lr}
   9b536:	af00      	add	r7, sp, #0
	DD_SET_CLAMP();
   9b538:	4b02      	ldr	r3, [pc, #8]	; (9b544 <sv_cntrl_activatevenousclamp+0x10>)
   9b53a:	4798      	blx	r3
	
	return 0;
   9b53c:	2300      	movs	r3, #0
}
   9b53e:	4618      	mov	r0, r3
   9b540:	bd80      	pop	{r7, pc}
   9b542:	bf00      	nop
   9b544:	0009a089 	.word	0x0009a089

0009b548 <sv_cntrl_deactivatevenousclamp>:

uint8_t sv_cntrl_deactivatevenousclamp(void)
{
   9b548:	b580      	push	{r7, lr}
   9b54a:	af00      	add	r7, sp, #0
	DD_RESET_CLAMP();
   9b54c:	4b02      	ldr	r3, [pc, #8]	; (9b558 <sv_cntrl_deactivatevenousclamp+0x10>)
   9b54e:	4798      	blx	r3
	
	return 0;
   9b550:	2300      	movs	r3, #0
}
   9b552:	4618      	mov	r0, r3
   9b554:	bd80      	pop	{r7, pc}
   9b556:	bf00      	nop
   9b558:	0009a0b1 	.word	0x0009a0b1

0009b55c <sv_cntrl_enable_loopback>:

uint8_t sv_cntrl_enable_loopback()
{
   9b55c:	b580      	push	{r7, lr}
   9b55e:	af00      	add	r7, sp, #0

	DD_ENABLE_LOOPBACK();	
   9b560:	4b03      	ldr	r3, [pc, #12]	; (9b570 <sv_cntrl_enable_loopback+0x14>)
   9b562:	4798      	blx	r3
	Loopbackstatus = true;
   9b564:	4b03      	ldr	r3, [pc, #12]	; (9b574 <sv_cntrl_enable_loopback+0x18>)
   9b566:	2201      	movs	r2, #1
   9b568:	701a      	strb	r2, [r3, #0]
	return 0;
   9b56a:	2300      	movs	r3, #0

}
   9b56c:	4618      	mov	r0, r3
   9b56e:	bd80      	pop	{r7, pc}
   9b570:	000996c5 	.word	0x000996c5
   9b574:	200727d5 	.word	0x200727d5

0009b578 <sv_cntrl_disable_loopback>:


uint8_t sv_cntrl_disable_loopback()
{
   9b578:	b580      	push	{r7, lr}
   9b57a:	af00      	add	r7, sp, #0

	DD_DISABLE_LOOPBACK();
   9b57c:	4b03      	ldr	r3, [pc, #12]	; (9b58c <sv_cntrl_disable_loopback+0x14>)
   9b57e:	4798      	blx	r3
	Loopbackstatus = false;
   9b580:	4b03      	ldr	r3, [pc, #12]	; (9b590 <sv_cntrl_disable_loopback+0x18>)
   9b582:	2200      	movs	r2, #0
   9b584:	701a      	strb	r2, [r3, #0]
	return 0;
   9b586:	2300      	movs	r3, #0

}
   9b588:	4618      	mov	r0, r3
   9b58a:	bd80      	pop	{r7, pc}
   9b58c:	000996ed 	.word	0x000996ed
   9b590:	200727d5 	.word	0x200727d5

0009b594 <sv_cntrl_enable_bypass>:


uint8_t sv_cntrl_enable_bypass()
{
   9b594:	b580      	push	{r7, lr}
   9b596:	af00      	add	r7, sp, #0

	DD_ENABLE_BYPASS();
   9b598:	4b03      	ldr	r3, [pc, #12]	; (9b5a8 <sv_cntrl_enable_bypass+0x14>)
   9b59a:	4798      	blx	r3
	//sv_cntrl_deactivatepump(UFPUMP);
	Bypassstatus = true;
   9b59c:	4b03      	ldr	r3, [pc, #12]	; (9b5ac <sv_cntrl_enable_bypass+0x18>)
   9b59e:	2201      	movs	r2, #1
   9b5a0:	701a      	strb	r2, [r3, #0]
	return 0;
   9b5a2:	2300      	movs	r3, #0

}
   9b5a4:	4618      	mov	r0, r3
   9b5a6:	bd80      	pop	{r7, pc}
   9b5a8:	00099665 	.word	0x00099665
   9b5ac:	20072879 	.word	0x20072879

0009b5b0 <sv_cntrl_disable_bypass>:


uint8_t sv_cntrl_disable_bypass()
{
   9b5b0:	b580      	push	{r7, lr}
   9b5b2:	af00      	add	r7, sp, #0

	DD_DISABLE_BYPASS();
   9b5b4:	4b03      	ldr	r3, [pc, #12]	; (9b5c4 <sv_cntrl_disable_bypass+0x14>)
   9b5b6:	4798      	blx	r3
	Bypassstatus = false;
   9b5b8:	4b03      	ldr	r3, [pc, #12]	; (9b5c8 <sv_cntrl_disable_bypass+0x18>)
   9b5ba:	2200      	movs	r2, #0
   9b5bc:	701a      	strb	r2, [r3, #0]
	return 0;
   9b5be:	2300      	movs	r3, #0

}
   9b5c0:	4618      	mov	r0, r3
   9b5c2:	bd80      	pop	{r7, pc}
   9b5c4:	00099695 	.word	0x00099695
   9b5c8:	20072879 	.word	0x20072879

0009b5cc <sv_cntrl_setflowpath>:




uint8_t sv_cntrl_setflowpath(sv_flowpathtype sv_flowpath)
{
   9b5cc:	b580      	push	{r7, lr}
   9b5ce:	b082      	sub	sp, #8
   9b5d0:	af00      	add	r7, sp, #0
   9b5d2:	4603      	mov	r3, r0
   9b5d4:	71fb      	strb	r3, [r7, #7]
		delayticks = g_ul_ms_ticks - ul_cur_ticks;
   9b5d6:	4b0a      	ldr	r3, [pc, #40]	; (9b600 <sv_cntrl_setflowpath+0x34>)
   9b5d8:	681a      	ldr	r2, [r3, #0]
   9b5da:	4b0a      	ldr	r3, [pc, #40]	; (9b604 <sv_cntrl_setflowpath+0x38>)
   9b5dc:	681b      	ldr	r3, [r3, #0]
   9b5de:	1ad3      	subs	r3, r2, r3
   9b5e0:	4a09      	ldr	r2, [pc, #36]	; (9b608 <sv_cntrl_setflowpath+0x3c>)
   9b5e2:	6013      	str	r3, [r2, #0]
		ul_cur_ticks = g_ul_ms_ticks;
   9b5e4:	4b06      	ldr	r3, [pc, #24]	; (9b600 <sv_cntrl_setflowpath+0x34>)
   9b5e6:	681b      	ldr	r3, [r3, #0]
   9b5e8:	4a06      	ldr	r2, [pc, #24]	; (9b604 <sv_cntrl_setflowpath+0x38>)
   9b5ea:	6013      	str	r3, [r2, #0]
	DD_SET_FLOW_PATH(sv_flowpath);
   9b5ec:	79fb      	ldrb	r3, [r7, #7]
   9b5ee:	4618      	mov	r0, r3
   9b5f0:	4b06      	ldr	r3, [pc, #24]	; (9b60c <sv_cntrl_setflowpath+0x40>)
   9b5f2:	4798      	blx	r3
	
	return 0;
   9b5f4:	2300      	movs	r3, #0

}
   9b5f6:	4618      	mov	r0, r3
   9b5f8:	3708      	adds	r7, #8
   9b5fa:	46bd      	mov	sp, r7
   9b5fc:	bd80      	pop	{r7, pc}
   9b5fe:	bf00      	nop
   9b600:	20071bdc 	.word	0x20071bdc
   9b604:	20072538 	.word	0x20072538
   9b608:	200726b8 	.word	0x200726b8
   9b60c:	0009a45d 	.word	0x0009a45d

0009b610 <sv_cntrl_setpumpfreq>:


uint8_t sv_cntrl_setpumpfreq(sv_pumptype sv_pump_id,uint32_t freq)
{
   9b610:	b580      	push	{r7, lr}
   9b612:	b082      	sub	sp, #8
   9b614:	af00      	add	r7, sp, #0
   9b616:	4603      	mov	r3, r0
   9b618:	6039      	str	r1, [r7, #0]
   9b61a:	71fb      	strb	r3, [r7, #7]
	DD_SET_PUMPFREQ(sv_pump_id,freq);
   9b61c:	79fb      	ldrb	r3, [r7, #7]
   9b61e:	4618      	mov	r0, r3
   9b620:	6839      	ldr	r1, [r7, #0]
   9b622:	4b03      	ldr	r3, [pc, #12]	; (9b630 <sv_cntrl_setpumpfreq+0x20>)
   9b624:	4798      	blx	r3
	return 0;
   9b626:	2300      	movs	r3, #0
}
   9b628:	4618      	mov	r0, r3
   9b62a:	3708      	adds	r7, #8
   9b62c:	46bd      	mov	sp, r7
   9b62e:	bd80      	pop	{r7, pc}
   9b630:	00099ac9 	.word	0x00099ac9

0009b634 <sv_cntrl_setredalarm>:
uint8_t sv_cntrl_setredalarm()
{
   9b634:	b580      	push	{r7, lr}
   9b636:	af00      	add	r7, sp, #0
	DD_SET_RED();
   9b638:	4b02      	ldr	r3, [pc, #8]	; (9b644 <sv_cntrl_setredalarm+0x10>)
   9b63a:	4798      	blx	r3
	return 0;
   9b63c:	2300      	movs	r3, #0
}
   9b63e:	4618      	mov	r0, r3
   9b640:	bd80      	pop	{r7, pc}
   9b642:	bf00      	nop
   9b644:	00099b8d 	.word	0x00099b8d

0009b648 <sv_cntrl_setyellowalarm>:
uint8_t sv_cntrl_setyellowalarm()
{
   9b648:	b580      	push	{r7, lr}
   9b64a:	af00      	add	r7, sp, #0
	DD_SET_YELLOW();
   9b64c:	4b02      	ldr	r3, [pc, #8]	; (9b658 <sv_cntrl_setyellowalarm+0x10>)
   9b64e:	4798      	blx	r3
	return 0;
   9b650:	2300      	movs	r3, #0
}
   9b652:	4618      	mov	r0, r3
   9b654:	bd80      	pop	{r7, pc}
   9b656:	bf00      	nop
   9b658:	00099bb5 	.word	0x00099bb5

0009b65c <sv_cntrl_setgreenalarm>:
uint8_t sv_cntrl_setgreenalarm()
{
   9b65c:	b580      	push	{r7, lr}
   9b65e:	af00      	add	r7, sp, #0
	DD_SET_GREEN();
   9b660:	4b02      	ldr	r3, [pc, #8]	; (9b66c <sv_cntrl_setgreenalarm+0x10>)
   9b662:	4798      	blx	r3
	return 0;
   9b664:	2300      	movs	r3, #0
}
   9b666:	4618      	mov	r0, r3
   9b668:	bd80      	pop	{r7, pc}
   9b66a:	bf00      	nop
   9b66c:	00099ba1 	.word	0x00099ba1

0009b670 <sv_cntrl_buzzer>:
uint8_t sv_cntrl_buzzer()
{
   9b670:	b580      	push	{r7, lr}
   9b672:	af00      	add	r7, sp, #0
	DD_SET_BUZZER();
   9b674:	4b02      	ldr	r3, [pc, #8]	; (9b680 <sv_cntrl_buzzer+0x10>)
   9b676:	4798      	blx	r3
	return 0;
   9b678:	2300      	movs	r3, #0
}
   9b67a:	4618      	mov	r0, r3
   9b67c:	bd80      	pop	{r7, pc}
   9b67e:	bf00      	nop
   9b680:	00099bc9 	.word	0x00099bc9

0009b684 <sv_cntrl_resetredalarm>:
uint8_t sv_cntrl_resetredalarm()
{
   9b684:	b580      	push	{r7, lr}
   9b686:	af00      	add	r7, sp, #0
	DD_RESET_RED();
   9b688:	4b02      	ldr	r3, [pc, #8]	; (9b694 <sv_cntrl_resetredalarm+0x10>)
   9b68a:	4798      	blx	r3
	return 0;
   9b68c:	2300      	movs	r3, #0
}
   9b68e:	4618      	mov	r0, r3
   9b690:	bd80      	pop	{r7, pc}
   9b692:	bf00      	nop
   9b694:	00099bdd 	.word	0x00099bdd

0009b698 <sv_cntrl_resetyellowalarm>:
uint8_t sv_cntrl_resetyellowalarm()
{
   9b698:	b580      	push	{r7, lr}
   9b69a:	af00      	add	r7, sp, #0
	DD_RESET_YELLOW();
   9b69c:	4b02      	ldr	r3, [pc, #8]	; (9b6a8 <sv_cntrl_resetyellowalarm+0x10>)
   9b69e:	4798      	blx	r3
	return 0;
   9b6a0:	2300      	movs	r3, #0
}
   9b6a2:	4618      	mov	r0, r3
   9b6a4:	bd80      	pop	{r7, pc}
   9b6a6:	bf00      	nop
   9b6a8:	00099c05 	.word	0x00099c05

0009b6ac <sv_cntrl_resetgreenalarm>:
uint8_t sv_cntrl_resetgreenalarm()
{
   9b6ac:	b580      	push	{r7, lr}
   9b6ae:	af00      	add	r7, sp, #0
	DD_RESET_GREEN();
   9b6b0:	4b02      	ldr	r3, [pc, #8]	; (9b6bc <sv_cntrl_resetgreenalarm+0x10>)
   9b6b2:	4798      	blx	r3
	return 0;
   9b6b4:	2300      	movs	r3, #0
}
   9b6b6:	4618      	mov	r0, r3
   9b6b8:	bd80      	pop	{r7, pc}
   9b6ba:	bf00      	nop
   9b6bc:	00099bf1 	.word	0x00099bf1

0009b6c0 <sv_cntrl_nobuzzer>:
uint8_t sv_cntrl_nobuzzer()
{
   9b6c0:	b580      	push	{r7, lr}
   9b6c2:	af00      	add	r7, sp, #0
	DD_RESET_BUZZER();
   9b6c4:	4b02      	ldr	r3, [pc, #8]	; (9b6d0 <sv_cntrl_nobuzzer+0x10>)
   9b6c6:	4798      	blx	r3
	return 0;
   9b6c8:	2300      	movs	r3, #0
}
   9b6ca:	4618      	mov	r0, r3
   9b6cc:	bd80      	pop	{r7, pc}
   9b6ce:	bf00      	nop
   9b6d0:	00099c19 	.word	0x00099c19

0009b6d4 <sv_cntrl_setoutput>:
uint8_t sv_cntrl_setoutput(uint32_t p_io, uint32_t peri)
{
   9b6d4:	b580      	push	{r7, lr}
   9b6d6:	b082      	sub	sp, #8
   9b6d8:	af00      	add	r7, sp, #0
   9b6da:	6078      	str	r0, [r7, #4]
   9b6dc:	6039      	str	r1, [r7, #0]
	//uint32_t p_io, peri;
	DD_SET_PIO(peri,p_io);
   9b6de:	6838      	ldr	r0, [r7, #0]
   9b6e0:	6879      	ldr	r1, [r7, #4]
   9b6e2:	4b03      	ldr	r3, [pc, #12]	; (9b6f0 <sv_cntrl_setoutput+0x1c>)
   9b6e4:	4798      	blx	r3
	return 0;
   9b6e6:	2300      	movs	r3, #0
}
   9b6e8:	4618      	mov	r0, r3
   9b6ea:	3708      	adds	r7, #8
   9b6ec:	46bd      	mov	sp, r7
   9b6ee:	bd80      	pop	{r7, pc}
   9b6f0:	00098745 	.word	0x00098745

0009b6f4 <sv_cntrl_resetoutput>:

uint8_t sv_cntrl_resetoutput(uint32_t p_io, uint32_t peri)
{
   9b6f4:	b580      	push	{r7, lr}
   9b6f6:	b082      	sub	sp, #8
   9b6f8:	af00      	add	r7, sp, #0
   9b6fa:	6078      	str	r0, [r7, #4]
   9b6fc:	6039      	str	r1, [r7, #0]
	//uint32_t p_io, peri;
	DD_RESET_PIO(peri,p_io);
   9b6fe:	6838      	ldr	r0, [r7, #0]
   9b700:	6879      	ldr	r1, [r7, #4]
   9b702:	4b03      	ldr	r3, [pc, #12]	; (9b710 <sv_cntrl_resetoutput+0x1c>)
   9b704:	4798      	blx	r3
	
	return 0;
   9b706:	2300      	movs	r3, #0
   9b708:	4618      	mov	r0, r3
   9b70a:	3708      	adds	r7, #8
   9b70c:	46bd      	mov	sp, r7
   9b70e:	bd80      	pop	{r7, pc}
   9b710:	000987c9 	.word	0x000987c9

0009b714 <sv_console_bytedatawrite>:
	
}

*/
uint32_t sv_console_bytedatawrite(uint8_t sv_consoleTxdatabyte)
{
   9b714:	b580      	push	{r7, lr}
   9b716:	b084      	sub	sp, #16
   9b718:	af00      	add	r7, sp, #0
   9b71a:	4603      	mov	r3, r0
   9b71c:	71fb      	strb	r3, [r7, #7]
	uint32_t console_stat;
	console_stat = DD_CONSOLE_TX(sv_consoleTxdatabyte);
   9b71e:	79fb      	ldrb	r3, [r7, #7]
   9b720:	4618      	mov	r0, r3
   9b722:	4b04      	ldr	r3, [pc, #16]	; (9b734 <sv_console_bytedatawrite+0x20>)
   9b724:	4798      	blx	r3
   9b726:	4603      	mov	r3, r0
   9b728:	60fb      	str	r3, [r7, #12]
	
	return console_stat;
   9b72a:	68fb      	ldr	r3, [r7, #12]
	
}
   9b72c:	4618      	mov	r0, r3
   9b72e:	3710      	adds	r7, #16
   9b730:	46bd      	mov	sp, r7
   9b732:	bd80      	pop	{r7, pc}
   9b734:	0009a365 	.word	0x0009a365

0009b738 <sv_console_receivedbyte>:


uint8_t sv_console_receivedbyte(uint8_t sv_consoleRxdatabyte)
{
   9b738:	b580      	push	{r7, lr}
   9b73a:	b082      	sub	sp, #8
   9b73c:	af00      	add	r7, sp, #0
   9b73e:	4603      	mov	r3, r0
   9b740:	71fb      	strb	r3, [r7, #7]
	//uint8_t sv_consoleRxdatabyte;
	
	
	cl_console_receivedbyte(sv_consoleRxdatabyte);
   9b742:	79fb      	ldrb	r3, [r7, #7]
   9b744:	4618      	mov	r0, r3
   9b746:	4b03      	ldr	r3, [pc, #12]	; (9b754 <sv_console_receivedbyte+0x1c>)
   9b748:	4798      	blx	r3
	//sv_consoleRxdatabyte = DD_CONSOLE_RX();
	
	return 0;
   9b74a:	2300      	movs	r3, #0
	
}
   9b74c:	4618      	mov	r0, r3
   9b74e:	3708      	adds	r7, #8
   9b750:	46bd      	mov	sp, r7
   9b752:	bd80      	pop	{r7, pc}
   9b754:	0009d7b9 	.word	0x0009d7b9

0009b758 <sv_prop_startpropeo_aligning>:
uint16_t count = 0;

extern Cl_Uint32Type Treatdata[ID_MAX_TREAT_PARAM] ;

void sv_prop_startpropeo_aligning(void)
{
   9b758:	b590      	push	{r4, r7, lr}
   9b75a:	b085      	sub	sp, #20
   9b75c:	af00      	add	r7, sp, #0
uint8_t dataarray[16] = { 0xaa,0xcc,0xdd,1,2,3,4,5,6,7,8,9,0xA,0xB,0xee,0xbb};
   9b75e:	4b07      	ldr	r3, [pc, #28]	; (9b77c <sv_prop_startpropeo_aligning+0x24>)
   9b760:	463c      	mov	r4, r7
   9b762:	6818      	ldr	r0, [r3, #0]
   9b764:	6859      	ldr	r1, [r3, #4]
   9b766:	689a      	ldr	r2, [r3, #8]
   9b768:	68db      	ldr	r3, [r3, #12]
   9b76a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	//	cl_wait(20);
		//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 0);
		//DD_IIC_CONSOLE_SEND(0x77, &dataarray ,16);
		 SV_CAN_WRITE_PROPO( PROP_START_ALIGMENT,0);
   9b76c:	2001      	movs	r0, #1
   9b76e:	2100      	movs	r1, #0
   9b770:	4b03      	ldr	r3, [pc, #12]	; (9b780 <sv_prop_startpropeo_aligning+0x28>)
   9b772:	4798      	blx	r3

}
   9b774:	3714      	adds	r7, #20
   9b776:	46bd      	mov	sp, r7
   9b778:	bd90      	pop	{r4, r7, pc}
   9b77a:	bf00      	nop
   9b77c:	000aa658 	.word	0x000aa658
   9b780:	0009b225 	.word	0x0009b225

0009b784 <sv_prop_startmixing>:
void sv_prop_startmixing()
{
   9b784:	b580      	push	{r7, lr}
   9b786:	af00      	add	r7, sp, #0
	{
	//	cl_wait(20);
	//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 1);
	//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 0);
	
		SV_CAN_WRITE_PROPO( PROP_START_MIXING,Treatdata[ID_setcond]);
   9b788:	4b03      	ldr	r3, [pc, #12]	; (9b798 <sv_prop_startmixing+0x14>)
   9b78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   9b78c:	b29b      	uxth	r3, r3
   9b78e:	2002      	movs	r0, #2
   9b790:	4619      	mov	r1, r3
   9b792:	4b02      	ldr	r3, [pc, #8]	; (9b79c <sv_prop_startmixing+0x18>)
   9b794:	4798      	blx	r3
	
	}
	
}
   9b796:	bd80      	pop	{r7, pc}
   9b798:	20072880 	.word	0x20072880
   9b79c:	0009b225 	.word	0x0009b225

0009b7a0 <sv_prop_bicarb_selftest_f_b>:
{
	SV_CAN_WRITE_PROPO( prop_BICAR_FEED_BACK,0);
}

void sv_prop_bicarb_selftest_f_b()
{
   9b7a0:	b580      	push	{r7, lr}
   9b7a2:	af00      	add	r7, sp, #0
	SV_CAN_WRITE_PROPO( prop_BICAR_FEED_BACK_STATUS,0);
   9b7a4:	2013      	movs	r0, #19
   9b7a6:	2100      	movs	r1, #0
   9b7a8:	4b01      	ldr	r3, [pc, #4]	; (9b7b0 <sv_prop_bicarb_selftest_f_b+0x10>)
   9b7aa:	4798      	blx	r3
}
   9b7ac:	bd80      	pop	{r7, pc}
   9b7ae:	bf00      	nop
   9b7b0:	0009b225 	.word	0x0009b225

0009b7b4 <sv_prop_startacidpump>:




void sv_prop_startacidpump()
{
   9b7b4:	b580      	push	{r7, lr}
   9b7b6:	af00      	add	r7, sp, #0
	SV_CAN_WRITE_PROPO( PROP_START_ACID_PUMP,0);
   9b7b8:	200c      	movs	r0, #12
   9b7ba:	2100      	movs	r1, #0
   9b7bc:	4b01      	ldr	r3, [pc, #4]	; (9b7c4 <sv_prop_startacidpump+0x10>)
   9b7be:	4798      	blx	r3
			
}
   9b7c0:	bd80      	pop	{r7, pc}
   9b7c2:	bf00      	nop
   9b7c4:	0009b225 	.word	0x0009b225

0009b7c8 <sv_prop_set_propo_ACIDrc>:
	
}


void sv_prop_set_propo_ACIDrc(uint16_t data)
{
   9b7c8:	b580      	push	{r7, lr}
   9b7ca:	b084      	sub	sp, #16
   9b7cc:	af00      	add	r7, sp, #0
   9b7ce:	4603      	mov	r3, r0
   9b7d0:	80fb      	strh	r3, [r7, #6]
	
	uint16_t rc_count = data;
   9b7d2:	88fb      	ldrh	r3, [r7, #6]
   9b7d4:	81fb      	strh	r3, [r7, #14]
	SV_CAN_WRITE_PROPO( PROP_UPDATE_ACID_RC,data);                 // Gopal: Send Acid RC (speed) to Propo CPU via Can
   9b7d6:	88fb      	ldrh	r3, [r7, #6]
   9b7d8:	200e      	movs	r0, #14
   9b7da:	4619      	mov	r1, r3
   9b7dc:	4b02      	ldr	r3, [pc, #8]	; (9b7e8 <sv_prop_set_propo_ACIDrc+0x20>)
   9b7de:	4798      	blx	r3
}
   9b7e0:	3710      	adds	r7, #16
   9b7e2:	46bd      	mov	sp, r7
   9b7e4:	bd80      	pop	{r7, pc}
   9b7e6:	bf00      	nop
   9b7e8:	0009b225 	.word	0x0009b225

0009b7ec <sv_prop_stopmixing>:
{
	uint16_t conductivity = data;
	SV_CAN_WRITE_PROPO( PROP_CONDUCTIVITY,conductivity);      // Gopal: Send  conducivity value to Propo CPU via Can
}
void sv_prop_stopmixing()
{
   9b7ec:	b580      	push	{r7, lr}
   9b7ee:	af00      	add	r7, sp, #0
	//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 2);
	SV_CAN_WRITE_PROPO( PROP_STOP_MIXING,0);
   9b7f0:	2003      	movs	r0, #3
   9b7f2:	2100      	movs	r1, #0
   9b7f4:	4b01      	ldr	r3, [pc, #4]	; (9b7fc <sv_prop_stopmixing+0x10>)
   9b7f6:	4798      	blx	r3
}
   9b7f8:	bd80      	pop	{r7, pc}
   9b7fa:	bf00      	nop
   9b7fc:	0009b225 	.word	0x0009b225

0009b800 <sv_prop_start_disinfect_intake>:


void sv_prop_start_disinfect_intake(void)
{
   9b800:	b580      	push	{r7, lr}
   9b802:	af00      	add	r7, sp, #0


	{
	//	cl_wait(20);
	//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 3);
		SV_CAN_WRITE_PROPO( PROP_START_DISINFECTION,0);
   9b804:	2004      	movs	r0, #4
   9b806:	2100      	movs	r1, #0
   9b808:	4b01      	ldr	r3, [pc, #4]	; (9b810 <sv_prop_start_disinfect_intake+0x10>)
   9b80a:	4798      	blx	r3

	}
	
}
   9b80c:	bd80      	pop	{r7, pc}
   9b80e:	bf00      	nop
   9b810:	0009b225 	.word	0x0009b225

0009b814 <sv_prop_stop_disinfect_intake>:
void sv_prop_stop_disinfect_intake(void)
{
   9b814:	b580      	push	{r7, lr}
   9b816:	af00      	add	r7, sp, #0


	{
	//	cl_wait(20);
	//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 4);
		SV_CAN_WRITE_PROPO( PROP_STOP_DISINFECTION,0);
   9b818:	2005      	movs	r0, #5
   9b81a:	2100      	movs	r1, #0
   9b81c:	4b01      	ldr	r3, [pc, #4]	; (9b824 <sv_prop_stop_disinfect_intake+0x10>)
   9b81e:	4798      	blx	r3

	}
	
}
   9b820:	bd80      	pop	{r7, pc}
   9b822:	bf00      	nop
   9b824:	0009b225 	.word	0x0009b225

0009b828 <sv_prop_start_citricdisinfect_intake>:
void sv_prop_start_citricdisinfect_intake(void)
{
   9b828:	b580      	push	{r7, lr}
   9b82a:	af00      	add	r7, sp, #0


	{
	//	cl_wait(20);
		//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 8);
		SV_CAN_WRITE_PROPO( PROP_START_CITRIC_DISINFECTION,0);
   9b82c:	2006      	movs	r0, #6
   9b82e:	2100      	movs	r1, #0
   9b830:	4b01      	ldr	r3, [pc, #4]	; (9b838 <sv_prop_start_citricdisinfect_intake+0x10>)
   9b832:	4798      	blx	r3


	}
	
}
   9b834:	bd80      	pop	{r7, pc}
   9b836:	bf00      	nop
   9b838:	0009b225 	.word	0x0009b225

0009b83c <sv_prop_stop_citricdisinfect_intake>:
void sv_prop_stop_citricdisinfect_intake(void)
{
   9b83c:	b580      	push	{r7, lr}
   9b83e:	af00      	add	r7, sp, #0


	{
	//	cl_wait(20);
		//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 9);
		SV_CAN_WRITE_PROPO( PROP_STOP_CITRIC_DISINFECTION,0);
   9b840:	2007      	movs	r0, #7
   9b842:	2100      	movs	r1, #0
   9b844:	4b01      	ldr	r3, [pc, #4]	; (9b84c <sv_prop_stop_citricdisinfect_intake+0x10>)
   9b846:	4798      	blx	r3


	}
	
}
   9b848:	bd80      	pop	{r7, pc}
   9b84a:	bf00      	nop
   9b84c:	0009b225 	.word	0x0009b225

0009b850 <sv_prop_startopenfill>:
void sv_prop_startopenfill()
{
   9b850:	b580      	push	{r7, lr}
   9b852:	af00      	add	r7, sp, #0
	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"OPENFIL",6);
   9b854:	2018      	movs	r0, #24
   9b856:	4904      	ldr	r1, [pc, #16]	; (9b868 <sv_prop_startopenfill+0x18>)
   9b858:	2206      	movs	r2, #6
   9b85a:	4b04      	ldr	r3, [pc, #16]	; (9b86c <sv_prop_startopenfill+0x1c>)
   9b85c:	4798      	blx	r3
//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 5);
	SV_CAN_WRITE_PROPO( PROP_START_OPENFILL,0);
   9b85e:	2008      	movs	r0, #8
   9b860:	2100      	movs	r1, #0
   9b862:	4b03      	ldr	r3, [pc, #12]	; (9b870 <sv_prop_startopenfill+0x20>)
   9b864:	4798      	blx	r3
}
   9b866:	bd80      	pop	{r7, pc}
   9b868:	000aa668 	.word	0x000aa668
   9b86c:	0009d1e9 	.word	0x0009d1e9
   9b870:	0009b225 	.word	0x0009b225

0009b874 <sv_prop_stopopenfill>:
void sv_prop_stopopenfill()
{
   9b874:	b580      	push	{r7, lr}
   9b876:	af00      	add	r7, sp, #0
	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"STOPFIL",6);
   9b878:	2018      	movs	r0, #24
   9b87a:	4904      	ldr	r1, [pc, #16]	; (9b88c <sv_prop_stopopenfill+0x18>)
   9b87c:	2206      	movs	r2, #6
   9b87e:	4b04      	ldr	r3, [pc, #16]	; (9b890 <sv_prop_stopopenfill+0x1c>)
   9b880:	4798      	blx	r3
	//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 6);
	SV_CAN_WRITE_PROPO( PROP_STOP_OPENFILL,0);
   9b882:	2009      	movs	r0, #9
   9b884:	2100      	movs	r1, #0
   9b886:	4b03      	ldr	r3, [pc, #12]	; (9b894 <sv_prop_stopopenfill+0x20>)
   9b888:	4798      	blx	r3
}
   9b88a:	bd80      	pop	{r7, pc}
   9b88c:	000aa670 	.word	0x000aa670
   9b890:	0009d1e9 	.word	0x0009d1e9
   9b894:	0009b225 	.word	0x0009b225

0009b898 <sv_cs_setpotvalue>:
uint8_t sv_cs_readpotvalue(uint16_t* resistance);
uint8_t sv_cs_setpotvalue(uint16_t resistance) ;
uint8_t sv_cs_setcondpotvalue(uint16_t resistance);

uint8_t sv_cs_setpotvalue(uint16_t resistance) 
{
   9b898:	b580      	push	{r7, lr}
   9b89a:	b082      	sub	sp, #8
   9b89c:	af00      	add	r7, sp, #0
   9b89e:	4603      	mov	r3, r0
   9b8a0:	80fb      	strh	r3, [r7, #6]
	 uint8_t iic_address;
	 uint16_t data;
	//	DD_IIC_SET_POT( CS_POT_IIC_ADDR, resistance);
		
		SV_CS_SET_POT(resistance);
   9b8a2:	88fb      	ldrh	r3, [r7, #6]
   9b8a4:	4618      	mov	r0, r3
   9b8a6:	4b03      	ldr	r3, [pc, #12]	; (9b8b4 <sv_cs_setpotvalue+0x1c>)
   9b8a8:	4798      	blx	r3
		
		}
   9b8aa:	4618      	mov	r0, r3
   9b8ac:	3708      	adds	r7, #8
   9b8ae:	46bd      	mov	sp, r7
   9b8b0:	bd80      	pop	{r7, pc}
   9b8b2:	bf00      	nop
   9b8b4:	0009b8d9 	.word	0x0009b8d9

0009b8b8 <sv_cs_setcondpotvalue>:
uint8_t sv_cs_setcondpotvalue(uint16_t resistance)
{
   9b8b8:	b580      	push	{r7, lr}
   9b8ba:	b082      	sub	sp, #8
   9b8bc:	af00      	add	r7, sp, #0
   9b8be:	4603      	mov	r3, r0
   9b8c0:	80fb      	strh	r3, [r7, #6]
	uint8_t iic_address;
	uint16_t data;

	
	DD_IIC_SET_POT( COND_POT_IIC_ADDR, resistance);
   9b8c2:	88fb      	ldrh	r3, [r7, #6]
   9b8c4:	202f      	movs	r0, #47	; 0x2f
   9b8c6:	4619      	mov	r1, r3
   9b8c8:	4b02      	ldr	r3, [pc, #8]	; (9b8d4 <sv_cs_setcondpotvalue+0x1c>)
   9b8ca:	4798      	blx	r3
	
}
   9b8cc:	4618      	mov	r0, r3
   9b8ce:	3708      	adds	r7, #8
   9b8d0:	46bd      	mov	sp, r7
   9b8d2:	bd80      	pop	{r7, pc}
   9b8d4:	00098d75 	.word	0x00098d75

0009b8d8 <SV_CS_SET_POT>:
		*resistance = data;
	
}

void SV_CS_SET_POT(uint16_t* resistance)
{
   9b8d8:	b580      	push	{r7, lr}
   9b8da:	b084      	sub	sp, #16
   9b8dc:	af00      	add	r7, sp, #0
   9b8de:	6078      	str	r0, [r7, #4]
	uint16_t data = resistance;
   9b8e0:	687b      	ldr	r3, [r7, #4]
   9b8e2:	81fb      	strh	r3, [r7, #14]
	data = data & 0x3ff;
   9b8e4:	89fb      	ldrh	r3, [r7, #14]
   9b8e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
   9b8ea:	81fb      	strh	r3, [r7, #14]
	command_data_array[0] = AD5174_COMMAND(AD5174_WRITE_SERIAL_REG_TO_CONTRL_REG) | 0x02; //tempreg.temp_8bit[1] ;
   9b8ec:	4b08      	ldr	r3, [pc, #32]	; (9b910 <SV_CS_SET_POT+0x38>)
   9b8ee:	f641 4202 	movw	r2, #7170	; 0x1c02
   9b8f2:	801a      	strh	r2, [r3, #0]
	command_data_array[1]  = AD5174_COMMAND(AD5174_WRITE_SERIALREG_TO_RDAC) | data;
   9b8f4:	89fb      	ldrh	r3, [r7, #14]
   9b8f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   9b8fa:	b29a      	uxth	r2, r3
   9b8fc:	4b04      	ldr	r3, [pc, #16]	; (9b910 <SV_CS_SET_POT+0x38>)
   9b8fe:	805a      	strh	r2, [r3, #2]
//	command_data_array[1]  = AD5174_COMMAND(AD5174_WRITE_SERIALREG_TO_RDAC)|(0x3ff & *resistance);
	//command_data_array[1]  = 0x04c2;
	
	DD_SPI_SET_POT(&command_data_array, 2);
   9b900:	4803      	ldr	r0, [pc, #12]	; (9b910 <SV_CS_SET_POT+0x38>)
   9b902:	2102      	movs	r1, #2
   9b904:	4b03      	ldr	r3, [pc, #12]	; (9b914 <SV_CS_SET_POT+0x3c>)
   9b906:	4798      	blx	r3
   9b908:	3710      	adds	r7, #16
   9b90a:	46bd      	mov	sp, r7
   9b90c:	bd80      	pop	{r7, pc}
   9b90e:	bf00      	nop
   9b910:	20072a2c 	.word	0x20072a2c
   9b914:	000993fd 	.word	0x000993fd

0009b918 <sv_status_getsystemstatus>:
	return V_C;
}


uint16_t sv_status_getsystemstatus(Sys_statusType* sensor_struct)
{
   9b918:	b580      	push	{r7, lr}
   9b91a:	b09c      	sub	sp, #112	; 0x70
   9b91c:	af00      	add	r7, sp, #0
   9b91e:	6078      	str	r0, [r7, #4]
	//sv_sensortype sv_sensor = SV_SENSOR_NULL;
	
	Sys_statusType sensor_struct1;
	sensor_struct1.levelswitch1	= 0;
   9b920:	2300      	movs	r3, #0
   9b922:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	sensor_struct1.FPcurrentstatus	= 1;
   9b926:	2301      	movs	r3, #1
   9b928:	853b      	strh	r3, [r7, #40]	; 0x28
	sensor_struct1.DGPstatus = 1;
   9b92a:	2301      	movs	r3, #1
   9b92c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	//sv_sensor = SV_SENSOR_ID1;
	
	sensor_struct1.ps1status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID1);
   9b930:	2001      	movs	r0, #1
   9b932:	4ba6      	ldr	r3, [pc, #664]	; (9bbcc <sv_status_getsystemstatus+0x2b4>)
   9b934:	4798      	blx	r3
   9b936:	4603      	mov	r3, r0
   9b938:	85bb      	strh	r3, [r7, #44]	; 0x2c
	sensor_struct1.ps2status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID2);
   9b93a:	2002      	movs	r0, #2
   9b93c:	4ba3      	ldr	r3, [pc, #652]	; (9bbcc <sv_status_getsystemstatus+0x2b4>)
   9b93e:	4798      	blx	r3
   9b940:	4603      	mov	r3, r0
   9b942:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sensor_struct1.ps3status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID3);
   9b944:	2003      	movs	r0, #3
   9b946:	4ba1      	ldr	r3, [pc, #644]	; (9bbcc <sv_status_getsystemstatus+0x2b4>)
   9b948:	4798      	blx	r3
   9b94a:	4603      	mov	r3, r0
   9b94c:	863b      	strh	r3, [r7, #48]	; 0x30

	
	sensor_struct1.Temp1status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID5);
   9b94e:	2005      	movs	r0, #5
   9b950:	4b9e      	ldr	r3, [pc, #632]	; (9bbcc <sv_status_getsystemstatus+0x2b4>)
   9b952:	4798      	blx	r3
   9b954:	4603      	mov	r3, r0
   9b956:	867b      	strh	r3, [r7, #50]	; 0x32
	sensor_struct1.Temp2status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID6);
   9b958:	2006      	movs	r0, #6
   9b95a:	4b9c      	ldr	r3, [pc, #624]	; (9bbcc <sv_status_getsystemstatus+0x2b4>)
   9b95c:	4798      	blx	r3
   9b95e:	4603      	mov	r3, r0
   9b960:	86bb      	strh	r3, [r7, #52]	; 0x34
	sensor_struct1.Temp3status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID7);
   9b962:	2007      	movs	r0, #7
   9b964:	4b99      	ldr	r3, [pc, #612]	; (9bbcc <sv_status_getsystemstatus+0x2b4>)
   9b966:	4798      	blx	r3
   9b968:	4603      	mov	r3, r0
   9b96a:	86fb      	strh	r3, [r7, #54]	; 0x36
	sensor_struct1.CS1_Tempstatus		= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID8);
   9b96c:	2008      	movs	r0, #8
   9b96e:	4b97      	ldr	r3, [pc, #604]	; (9bbcc <sv_status_getsystemstatus+0x2b4>)
   9b970:	4798      	blx	r3
   9b972:	4603      	mov	r3, r0
   9b974:	877b      	strh	r3, [r7, #58]	; 0x3a
	sensor_struct1.CS2_Tempstatus		= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID9);
   9b976:	2009      	movs	r0, #9
   9b978:	4b94      	ldr	r3, [pc, #592]	; (9bbcc <sv_status_getsystemstatus+0x2b4>)
   9b97a:	4798      	blx	r3
   9b97c:	4603      	mov	r3, r0
   9b97e:	87bb      	strh	r3, [r7, #60]	; 0x3c
	sensor_struct1.CS3_Tempstatus		= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID10);
   9b980:	200a      	movs	r0, #10
   9b982:	4b92      	ldr	r3, [pc, #584]	; (9bbcc <sv_status_getsystemstatus+0x2b4>)
   9b984:	4798      	blx	r3
   9b986:	4603      	mov	r3, r0
   9b988:	87fb      	strh	r3, [r7, #62]	; 0x3e
	
	
//	sensor_struct1.Temp4status			= DD_READ_SENSORS(SV_SENSOR_ID13);
	
	sensor_struct1.cond_status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID13);
   9b98a:	200d      	movs	r0, #13
   9b98c:	4b8f      	ldr	r3, [pc, #572]	; (9bbcc <sv_status_getsystemstatus+0x2b4>)
   9b98e:	4798      	blx	r3
   9b990:	4603      	mov	r3, r0
   9b992:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	sensor_struct1.cond_status_dac		= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID14);
   9b996:	200e      	movs	r0, #14
   9b998:	4b8c      	ldr	r3, [pc, #560]	; (9bbcc <sv_status_getsystemstatus+0x2b4>)
   9b99a:	4798      	blx	r3
   9b99c:	4603      	mov	r3, r0
   9b99e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	sensor_struct1.cond_acid			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID11);
   9b9a2:	200b      	movs	r0, #11
   9b9a4:	4b89      	ldr	r3, [pc, #548]	; (9bbcc <sv_status_getsystemstatus+0x2b4>)
   9b9a6:	4798      	blx	r3
   9b9a8:	4603      	mov	r3, r0
   9b9aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	sensor_struct1.cond_bicarb			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID12);  // Gopal: getting CS2 in place of DAB  //DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID12);
   9b9ae:	200c      	movs	r0, #12
   9b9b0:	4b86      	ldr	r3, [pc, #536]	; (9bbcc <sv_status_getsystemstatus+0x2b4>)
   9b9b2:	4798      	blx	r3
   9b9b4:	4603      	mov	r3, r0
   9b9b6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
//	sensor_struct1.cond_wien_status		= DD_READ_SENSORS(SV_SENSOR_ID12);
	
	sensor_struct1.aptstatus			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID19);
   9b9ba:	2013      	movs	r0, #19
   9b9bc:	4b83      	ldr	r3, [pc, #524]	; (9bbcc <sv_status_getsystemstatus+0x2b4>)
   9b9be:	4798      	blx	r3
   9b9c0:	4603      	mov	r3, r0
   9b9c2:	83bb      	strh	r3, [r7, #28]
	sensor_struct1.vptstatus			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID20);
   9b9c4:	2014      	movs	r0, #20
   9b9c6:	4b81      	ldr	r3, [pc, #516]	; (9bbcc <sv_status_getsystemstatus+0x2b4>)
   9b9c8:	4798      	blx	r3
   9b9ca:	4603      	mov	r3, r0
   9b9cc:	83fb      	strh	r3, [r7, #30]
	
	sensor_struct1.acid_fd_back         = DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID21);
   9b9ce:	2015      	movs	r0, #21
   9b9d0:	4b7e      	ldr	r3, [pc, #504]	; (9bbcc <sv_status_getsystemstatus+0x2b4>)
   9b9d2:	4798      	blx	r3
   9b9d4:	4603      	mov	r3, r0
   9b9d6:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	sensor_struct1.bicarb_fd_back       = DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID22);
   9b9da:	2016      	movs	r0, #22
   9b9dc:	4b7b      	ldr	r3, [pc, #492]	; (9bbcc <sv_status_getsystemstatus+0x2b4>)
   9b9de:	4798      	blx	r3
   9b9e0:	4603      	mov	r3, r0
   9b9e2:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	sensor_struct1.bloodpumpdoor		= DD_RD_SENSIN(SV_SENSIN_ID14);
   9b9e6:	200e      	movs	r0, #14
   9b9e8:	4b79      	ldr	r3, [pc, #484]	; (9bbd0 <sv_status_getsystemstatus+0x2b8>)
   9b9ea:	4798      	blx	r3
   9b9ec:	4603      	mov	r3, r0
   9b9ee:	733b      	strb	r3, [r7, #12]
	sensor_struct1.BPstatus				= DD_RD_SENSIN(SV_SENSIN_ID5);
   9b9f0:	2005      	movs	r0, #5
   9b9f2:	4b77      	ldr	r3, [pc, #476]	; (9bbd0 <sv_status_getsystemstatus+0x2b8>)
   9b9f4:	4798      	blx	r3
   9b9f6:	4603      	mov	r3, r0
   9b9f8:	b29b      	uxth	r3, r3
   9b9fa:	81fb      	strh	r3, [r7, #14]
	sensor_struct1.BP_INC				= DD_RD_SENSIN(SV_SENSIN_ID15);
   9b9fc:	200f      	movs	r0, #15
   9b9fe:	4b74      	ldr	r3, [pc, #464]	; (9bbd0 <sv_status_getsystemstatus+0x2b8>)
   9ba00:	4798      	blx	r3
   9ba02:	4603      	mov	r3, r0
   9ba04:	b29b      	uxth	r3, r3
   9ba06:	823b      	strh	r3, [r7, #16]
	sensor_struct1.BP_DEC				= DD_RD_SENSIN(SV_SENSIN_ID16);
   9ba08:	2010      	movs	r0, #16
   9ba0a:	4b71      	ldr	r3, [pc, #452]	; (9bbd0 <sv_status_getsystemstatus+0x2b8>)
   9ba0c:	4798      	blx	r3
   9ba0e:	4603      	mov	r3, r0
   9ba10:	b29b      	uxth	r3, r3
   9ba12:	827b      	strh	r3, [r7, #18]
	sensor_struct1.Heparin_rotation_marker = DD_RD_SENSIN(SV_SENSIN_ID13);
   9ba14:	200d      	movs	r0, #13
   9ba16:	4b6e      	ldr	r3, [pc, #440]	; (9bbd0 <sv_status_getsystemstatus+0x2b8>)
   9ba18:	4798      	blx	r3
   9ba1a:	4603      	mov	r3, r0
   9ba1c:	b29b      	uxth	r3, r3
   9ba1e:	82fb      	strh	r3, [r7, #22]
	sensor_struct1.Heparin_full_marker	= DD_RD_SENSIN(SV_SENSIN_ID6);
   9ba20:	2006      	movs	r0, #6
   9ba22:	4b6b      	ldr	r3, [pc, #428]	; (9bbd0 <sv_status_getsystemstatus+0x2b8>)
   9ba24:	4798      	blx	r3
   9ba26:	4603      	mov	r3, r0
   9ba28:	b29b      	uxth	r3, r3
   9ba2a:	833b      	strh	r3, [r7, #24]
	sensor_struct1.Heparin_empty_marker = DD_RD_SENSIN(SV_SENSIN_ID7);
   9ba2c:	2007      	movs	r0, #7
   9ba2e:	4b68      	ldr	r3, [pc, #416]	; (9bbd0 <sv_status_getsystemstatus+0x2b8>)
   9ba30:	4798      	blx	r3
   9ba32:	4603      	mov	r3, r0
   9ba34:	b29b      	uxth	r3, r3
   9ba36:	837b      	strh	r3, [r7, #26]

	
	sensor_struct1.VC_status			= DD_RD_SENSIN(SV_SENSIN_ID17);
   9ba38:	2011      	movs	r0, #17
   9ba3a:	4b65      	ldr	r3, [pc, #404]	; (9bbd0 <sv_status_getsystemstatus+0x2b8>)
   9ba3c:	4798      	blx	r3
   9ba3e:	4603      	mov	r3, r0
   9ba40:	b29b      	uxth	r3, r3
   9ba42:	843b      	strh	r3, [r7, #32]
	//sensor_struct1.VC_door_status		= DD_READ_SENSORS(SV_SENSIN_ID18);

	sensor_struct1.bdstatus				= DD_RD_SENSIN(SV_SENSIN_ID26);
   9ba44:	201a      	movs	r0, #26
   9ba46:	4b62      	ldr	r3, [pc, #392]	; (9bbd0 <sv_status_getsystemstatus+0x2b8>)
   9ba48:	4798      	blx	r3
   9ba4a:	4603      	mov	r3, r0
   9ba4c:	b29b      	uxth	r3, r3
   9ba4e:	84bb      	strh	r3, [r7, #36]	; 0x24
	sensor_struct1.abdstatus			= DD_RD_SENSIN(SV_SENSIN_ID8);
   9ba50:	2008      	movs	r0, #8
   9ba52:	4b5f      	ldr	r3, [pc, #380]	; (9bbd0 <sv_status_getsystemstatus+0x2b8>)
   9ba54:	4798      	blx	r3
   9ba56:	4603      	mov	r3, r0
   9ba58:	b29b      	uxth	r3, r3
   9ba5a:	84fb      	strh	r3, [r7, #38]	; 0x26
	sensor_struct1.FPcurrentstatus		= DD_RD_SENSIN(SV_SENSIN_ID3);
   9ba5c:	2003      	movs	r0, #3
   9ba5e:	4b5c      	ldr	r3, [pc, #368]	; (9bbd0 <sv_status_getsystemstatus+0x2b8>)
   9ba60:	4798      	blx	r3
   9ba62:	4603      	mov	r3, r0
   9ba64:	b29b      	uxth	r3, r3
   9ba66:	853b      	strh	r3, [r7, #40]	; 0x28
	sensor_struct1.UFPstatus			= DD_RD_SENSIN(SV_SENSIN_ID4);
   9ba68:	2004      	movs	r0, #4
   9ba6a:	4b59      	ldr	r3, [pc, #356]	; (9bbd0 <sv_status_getsystemstatus+0x2b8>)
   9ba6c:	4798      	blx	r3
   9ba6e:	4603      	mov	r3, r0
   9ba70:	b29b      	uxth	r3, r3
   9ba72:	857b      	strh	r3, [r7, #42]	; 0x2a
	
	sensor_struct1.levelswitch1			= DD_RD_SENSIN(SV_SENSIN_ID1);
   9ba74:	2001      	movs	r0, #1
   9ba76:	4b56      	ldr	r3, [pc, #344]	; (9bbd0 <sv_status_getsystemstatus+0x2b8>)
   9ba78:	4798      	blx	r3
   9ba7a:	4603      	mov	r3, r0
   9ba7c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	sensor_struct1.Flowstatus			= DD_RD_SENSIN(SV_SENSIN_ID12);
   9ba80:	200c      	movs	r0, #12
   9ba82:	4b53      	ldr	r3, [pc, #332]	; (9bbd0 <sv_status_getsystemstatus+0x2b8>)
   9ba84:	4798      	blx	r3
   9ba86:	4603      	mov	r3, r0
   9ba88:	b29b      	uxth	r3, r3
   9ba8a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	sensor_struct1.bldstatus			= DD_RD_SENSIN(SV_SENSIN_ID27);
   9ba8e:	201b      	movs	r0, #27
   9ba90:	4b4f      	ldr	r3, [pc, #316]	; (9bbd0 <sv_status_getsystemstatus+0x2b8>)
   9ba92:	4798      	blx	r3
   9ba94:	4603      	mov	r3, r0
   9ba96:	b29b      	uxth	r3, r3
   9ba98:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	
	sensor_struct1.holderstatus1		= DD_RD_SENSIN(SV_SENSIN_ID9);
   9ba9c:	2009      	movs	r0, #9
   9ba9e:	4b4c      	ldr	r3, [pc, #304]	; (9bbd0 <sv_status_getsystemstatus+0x2b8>)
   9baa0:	4798      	blx	r3
   9baa2:	4603      	mov	r3, r0
   9baa4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	sensor_struct1.holderstatus2		= DD_RD_SENSIN(SV_SENSIN_ID10);
   9baa8:	200a      	movs	r0, #10
   9baaa:	4b49      	ldr	r3, [pc, #292]	; (9bbd0 <sv_status_getsystemstatus+0x2b8>)
   9baac:	4798      	blx	r3
   9baae:	4603      	mov	r3, r0
   9bab0:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	sensor_struct1.calibration			= DD_RD_SENSIN(SV_SENSIN_ID19);
   9bab4:	2013      	movs	r0, #19
   9bab6:	4b46      	ldr	r3, [pc, #280]	; (9bbd0 <sv_status_getsystemstatus+0x2b8>)
   9bab8:	4798      	blx	r3
   9baba:	4603      	mov	r3, r0
   9babc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	
	sensor_struct1.bicarb_inlet_status	=  DD_RD_SENSIN(SV_SENSIN_ID21);   // manav03 20
   9bac0:	2015      	movs	r0, #21
   9bac2:	4b43      	ldr	r3, [pc, #268]	; (9bbd0 <sv_status_getsystemstatus+0x2b8>)
   9bac4:	4798      	blx	r3
   9bac6:	4603      	mov	r3, r0
   9bac8:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	sensor_struct1.acid_inlet_status	=  DD_RD_SENSIN(SV_SENSIN_ID20);   // manav03 21
   9bacc:	2014      	movs	r0, #20
   9bace:	4b40      	ldr	r3, [pc, #256]	; (9bbd0 <sv_status_getsystemstatus+0x2b8>)
   9bad0:	4798      	blx	r3
   9bad2:	4603      	mov	r3, r0
   9bad4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	sensor_struct1.CPU2_interupt		=  DD_RD_SENSIN(SV_SENSIN_ID22);
   9bad8:	2016      	movs	r0, #22
   9bada:	4b3d      	ldr	r3, [pc, #244]	; (9bbd0 <sv_status_getsystemstatus+0x2b8>)
   9badc:	4798      	blx	r3
   9bade:	4603      	mov	r3, r0
   9bae0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	sensor_struct1.CPU3_interrupt		=  DD_RD_SENSIN(SV_SENSIN_ID23);
   9bae4:	2017      	movs	r0, #23
   9bae6:	4b3a      	ldr	r3, [pc, #232]	; (9bbd0 <sv_status_getsystemstatus+0x2b8>)
   9bae8:	4798      	blx	r3
   9baea:	4603      	mov	r3, r0
   9baec:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	sensor_struct1.Redundancy_IRQ		=  DD_RD_SENSIN(SV_SENSIN_ID24);
   9baf0:	2018      	movs	r0, #24
   9baf2:	4b37      	ldr	r3, [pc, #220]	; (9bbd0 <sv_status_getsystemstatus+0x2b8>)
   9baf4:	4798      	blx	r3
   9baf6:	4603      	mov	r3, r0
   9baf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		
	sensor_struct1.DGPstatus		= DD_RD_SENSIN(SV_SENSIN_ID2);
   9bafc:	2002      	movs	r0, #2
   9bafe:	4b34      	ldr	r3, [pc, #208]	; (9bbd0 <sv_status_getsystemstatus+0x2b8>)
   9bb00:	4798      	blx	r3
   9bb02:	4603      	mov	r3, r0
   9bb04:	b29b      	uxth	r3, r3
   9bb06:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	sensor_struct1.PowerFailure		= DD_RD_SENSIN(SV_SENSIN_ID36);
   9bb0a:	2024      	movs	r0, #36	; 0x24
   9bb0c:	4b30      	ldr	r3, [pc, #192]	; (9bbd0 <sv_status_getsystemstatus+0x2b8>)
   9bb0e:	4798      	blx	r3
   9bb10:	4603      	mov	r3, r0
   9bb12:	b29b      	uxth	r3, r3
   9bb14:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	
	
	sensor_struct1.BP_ON_OFF = DD_RD_SENSIN(SV_SENSIN_ID25);
   9bb18:	2019      	movs	r0, #25
   9bb1a:	4b2d      	ldr	r3, [pc, #180]	; (9bbd0 <sv_status_getsystemstatus+0x2b8>)
   9bb1c:	4798      	blx	r3
   9bb1e:	4603      	mov	r3, r0
   9bb20:	b29b      	uxth	r3, r3
   9bb22:	82bb      	strh	r3, [r7, #20]
	
	sensor_struct->ps1status			= sensor_struct1.ps1status;
   9bb24:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
   9bb26:	687b      	ldr	r3, [r7, #4]
   9bb28:	841a      	strh	r2, [r3, #32]
	sensor_struct->ps2status			= sensor_struct1.ps2status;
   9bb2a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
   9bb2c:	687b      	ldr	r3, [r7, #4]
   9bb2e:	845a      	strh	r2, [r3, #34]	; 0x22
	sensor_struct->ps3status			= sensor_struct1.ps3status;
   9bb30:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
   9bb32:	687b      	ldr	r3, [r7, #4]
   9bb34:	849a      	strh	r2, [r3, #36]	; 0x24
	sensor_struct->cond_status			= sensor_struct1.cond_status;
   9bb36:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
   9bb3a:	687b      	ldr	r3, [r7, #4]
   9bb3c:	869a      	strh	r2, [r3, #52]	; 0x34
	sensor_struct->cond_status_dac		= sensor_struct1.cond_status_dac;
   9bb3e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
   9bb42:	687b      	ldr	r3, [r7, #4]
   9bb44:	86da      	strh	r2, [r3, #54]	; 0x36
	sensor_struct->cond_wien_status		= sensor_struct1.cond_wien_status;
   9bb46:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
   9bb4a:	687b      	ldr	r3, [r7, #4]
   9bb4c:	871a      	strh	r2, [r3, #56]	; 0x38
	sensor_struct->cond_acid			= sensor_struct1.cond_acid;
   9bb4e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
   9bb52:	687b      	ldr	r3, [r7, #4]
   9bb54:	875a      	strh	r2, [r3, #58]	; 0x3a
	sensor_struct->cond_bicarb			= sensor_struct1.cond_bicarb;
   9bb56:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
   9bb5a:	687b      	ldr	r3, [r7, #4]
   9bb5c:	879a      	strh	r2, [r3, #60]	; 0x3c
	sensor_struct->Temp1status			= sensor_struct1.Temp1status;
   9bb5e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   9bb60:	687b      	ldr	r3, [r7, #4]
   9bb62:	84da      	strh	r2, [r3, #38]	; 0x26
	sensor_struct->Temp2status			= sensor_struct1.Temp2status;
   9bb64:	8eba      	ldrh	r2, [r7, #52]	; 0x34
   9bb66:	687b      	ldr	r3, [r7, #4]
   9bb68:	851a      	strh	r2, [r3, #40]	; 0x28
	sensor_struct->Temp3status			= sensor_struct1.Temp3status;
   9bb6a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
   9bb6c:	687b      	ldr	r3, [r7, #4]
   9bb6e:	855a      	strh	r2, [r3, #42]	; 0x2a
	sensor_struct->aptstatus			= sensor_struct1.aptstatus;
   9bb70:	8bba      	ldrh	r2, [r7, #28]
   9bb72:	687b      	ldr	r3, [r7, #4]
   9bb74:	821a      	strh	r2, [r3, #16]
	sensor_struct->vptstatus			= sensor_struct1.vptstatus;
   9bb76:	8bfa      	ldrh	r2, [r7, #30]
   9bb78:	687b      	ldr	r3, [r7, #4]
   9bb7a:	825a      	strh	r2, [r3, #18]
	sensor_struct->acid_fd_back			= sensor_struct1.acid_fd_back;
   9bb7c:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
   9bb80:	687b      	ldr	r3, [r7, #4]
   9bb82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	sensor_struct->bicarb_fd_back       = sensor_struct1.bicarb_fd_back; 
   9bb86:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
   9bb8a:	687b      	ldr	r3, [r7, #4]
   9bb8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		
	sensor_struct->levelswitch1			= sensor_struct1.levelswitch1;
   9bb90:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
   9bb94:	687b      	ldr	r3, [r7, #4]
   9bb96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	sensor_struct->FPcurrentstatus		= sensor_struct1.FPcurrentstatus;
   9bb9a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   9bb9c:	687b      	ldr	r3, [r7, #4]
   9bb9e:	839a      	strh	r2, [r3, #28]
	sensor_struct->DGPstatus		= sensor_struct1.DGPstatus;
   9bba0:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
   9bba4:	687b      	ldr	r3, [r7, #4]
   9bba6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	sensor_struct->UFPstatus			= sensor_struct1.UFPstatus;
   9bbaa:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
   9bbac:	687b      	ldr	r3, [r7, #4]
   9bbae:	83da      	strh	r2, [r3, #30]
	sensor_struct->BPstatus				= sensor_struct1.BPstatus;
   9bbb0:	89fa      	ldrh	r2, [r7, #14]
   9bbb2:	687b      	ldr	r3, [r7, #4]
   9bbb4:	805a      	strh	r2, [r3, #2]
	sensor_struct->bldstatus			= sensor_struct1.bldstatus;
   9bbb6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
   9bbba:	687b      	ldr	r3, [r7, #4]
   9bbbc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	sensor_struct->bdstatus				= sensor_struct1.bdstatus;
   9bbc0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   9bbc2:	687b      	ldr	r3, [r7, #4]
   9bbc4:	831a      	strh	r2, [r3, #24]
	sensor_struct->abdstatus			= sensor_struct1.abdstatus;
   9bbc6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
   9bbc8:	e004      	b.n	9bbd4 <sv_status_getsystemstatus+0x2bc>
   9bbca:	bf00      	nop
   9bbcc:	00098351 	.word	0x00098351
   9bbd0:	0009a0d9 	.word	0x0009a0d9
   9bbd4:	687b      	ldr	r3, [r7, #4]
   9bbd6:	835a      	strh	r2, [r3, #26]
	sensor_struct->holderstatus1		= sensor_struct1.holderstatus1;
   9bbd8:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
   9bbdc:	687b      	ldr	r3, [r7, #4]
   9bbde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	sensor_struct->holderstatus2		= sensor_struct1.holderstatus2;
   9bbe2:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
   9bbe6:	687b      	ldr	r3, [r7, #4]
   9bbe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	sensor_struct->bloodpumpdoor		= sensor_struct1.bloodpumpdoor;
   9bbec:	7b3a      	ldrb	r2, [r7, #12]
   9bbee:	687b      	ldr	r3, [r7, #4]
   9bbf0:	701a      	strb	r2, [r3, #0]
	sensor_struct->Flowstatus			= sensor_struct1.Flowstatus;
   9bbf2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
   9bbf6:	687b      	ldr	r3, [r7, #4]
   9bbf8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	sensor_struct->Heparin_full_marker  = sensor_struct1.Heparin_full_marker;
   9bbfc:	8b3a      	ldrh	r2, [r7, #24]
   9bbfe:	687b      	ldr	r3, [r7, #4]
   9bc00:	819a      	strh	r2, [r3, #12]
	sensor_struct->Heparin_empty_marker = sensor_struct1.Heparin_empty_marker;
   9bc02:	8b7a      	ldrh	r2, [r7, #26]
   9bc04:	687b      	ldr	r3, [r7, #4]
   9bc06:	81da      	strh	r2, [r3, #14]
	sensor_struct->Heparin_rotation_marker = sensor_struct1.Heparin_rotation_marker;
   9bc08:	8afa      	ldrh	r2, [r7, #22]
   9bc0a:	687b      	ldr	r3, [r7, #4]
   9bc0c:	815a      	strh	r2, [r3, #10]
	sensor_struct->acid_inlet_status = sensor_struct1.acid_inlet_status;
   9bc0e:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
   9bc12:	687b      	ldr	r3, [r7, #4]
   9bc14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	sensor_struct->bicarb_inlet_status = sensor_struct1.bicarb_inlet_status;
   9bc18:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
   9bc1c:	687b      	ldr	r3, [r7, #4]
   9bc1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	sensor_struct->VC_status = sensor_struct1.VC_status;
   9bc22:	8c3a      	ldrh	r2, [r7, #32]
   9bc24:	687b      	ldr	r3, [r7, #4]
   9bc26:	829a      	strh	r2, [r3, #20]
	sensor_struct->BP_DEC =sensor_struct1.BP_DEC;
   9bc28:	8a7a      	ldrh	r2, [r7, #18]
   9bc2a:	687b      	ldr	r3, [r7, #4]
   9bc2c:	80da      	strh	r2, [r3, #6]
	sensor_struct->BP_INC = sensor_struct1. BP_INC; 
   9bc2e:	8a3a      	ldrh	r2, [r7, #16]
   9bc30:	687b      	ldr	r3, [r7, #4]
   9bc32:	809a      	strh	r2, [r3, #4]
	sensor_struct->BP_ON_OFF = sensor_struct1. BP_ON_OFF; 
   9bc34:	8aba      	ldrh	r2, [r7, #20]
   9bc36:	687b      	ldr	r3, [r7, #4]
   9bc38:	811a      	strh	r2, [r3, #8]
	sensor_struct->PowerFailure = sensor_struct1.PowerFailure; 
   9bc3a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
   9bc3e:	687b      	ldr	r3, [r7, #4]
   9bc40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	
	return 0;
   9bc44:	2300      	movs	r3, #0

}
   9bc46:	4618      	mov	r0, r3
   9bc48:	3770      	adds	r7, #112	; 0x70
   9bc4a:	46bd      	mov	sp, r7
   9bc4c:	bd80      	pop	{r7, pc}
   9bc4e:	bf00      	nop

0009bc50 <SV_SYSTEM_INIT>:
extern void DD_INIT_IIC(void);
extern Cl_Uint8Type sum[11];
extern Cl_Uint8Type checksum_all[11];

void SV_SYSTEM_INIT()
{
   9bc50:	b580      	push	{r7, lr}
   9bc52:	af00      	add	r7, sp, #0
	//uint32_t prd_val=1000,dty_val = 100;
	DD_INIT_CLOCK();
   9bc54:	4b0c      	ldr	r3, [pc, #48]	; (9bc88 <SV_SYSTEM_INIT+0x38>)
   9bc56:	4798      	blx	r3
	DD_INIT_PIO();
   9bc58:	4b0c      	ldr	r3, [pc, #48]	; (9bc8c <SV_SYSTEM_INIT+0x3c>)
   9bc5a:	4798      	blx	r3
	DD_INIT_UART();
   9bc5c:	4b0c      	ldr	r3, [pc, #48]	; (9bc90 <SV_SYSTEM_INIT+0x40>)
   9bc5e:	4798      	blx	r3
	DD_INIT_TIMER();
   9bc60:	4b0c      	ldr	r3, [pc, #48]	; (9bc94 <SV_SYSTEM_INIT+0x44>)
   9bc62:	4798      	blx	r3
//	DD_INIT_ADC();
	DD_INIT_PWM();
   9bc64:	4b0c      	ldr	r3, [pc, #48]	; (9bc98 <SV_SYSTEM_INIT+0x48>)
   9bc66:	4798      	blx	r3
	DD_INIT_NVM();
   9bc68:	4b0c      	ldr	r3, [pc, #48]	; (9bc9c <SV_SYSTEM_INIT+0x4c>)
   9bc6a:	4798      	blx	r3
	DD_INIT_INT();
   9bc6c:	4b0c      	ldr	r3, [pc, #48]	; (9bca0 <SV_SYSTEM_INIT+0x50>)
   9bc6e:	4798      	blx	r3
	DD_INIT_IIC();
   9bc70:	4b0c      	ldr	r3, [pc, #48]	; (9bca4 <SV_SYSTEM_INIT+0x54>)
   9bc72:	4798      	blx	r3
	DD_INIT_SPI();
   9bc74:	4b0c      	ldr	r3, [pc, #48]	; (9bca8 <SV_SYSTEM_INIT+0x58>)
   9bc76:	4798      	blx	r3

    DD_INIT_CAN();
   9bc78:	4b0c      	ldr	r3, [pc, #48]	; (9bcac <SV_SYSTEM_INIT+0x5c>)
   9bc7a:	4798      	blx	r3
// 		{
// 			//printf("error\n");
// 		}
// 	}
	
	SV_START_TIMER(0,1);
   9bc7c:	2000      	movs	r0, #0
   9bc7e:	2101      	movs	r1, #1
   9bc80:	4b0b      	ldr	r3, [pc, #44]	; (9bcb0 <SV_SYSTEM_INIT+0x60>)
   9bc82:	4798      	blx	r3
	//printf("1");
	//DD_SET_PRDY(CH_0,prd_val);
	//DD_SET_DUTY(CH_1,dty_val);
   9bc84:	bd80      	pop	{r7, pc}
   9bc86:	bf00      	nop
   9bc88:	0009848d 	.word	0x0009848d
   9bc8c:	000984c1 	.word	0x000984c1
   9bc90:	0009b195 	.word	0x0009b195
   9bc94:	0009ac99 	.word	0x0009ac99
   9bc98:	0009912d 	.word	0x0009912d
   9bc9c:	00098fe1 	.word	0x00098fe1
   9bca0:	00098f05 	.word	0x00098f05
   9bca4:	00098d41 	.word	0x00098d41
   9bca8:	00099545 	.word	0x00099545
   9bcac:	000981e1 	.word	0x000981e1
   9bcb0:	0009bcb5 	.word	0x0009bcb5

0009bcb4 <SV_START_TIMER>:
 */ 

#include "SV_TIMER.h"

uint8_t SV_START_TIMER(uint8_t timer_no, uint32_t timer_res)
{
   9bcb4:	b580      	push	{r7, lr}
   9bcb6:	b082      	sub	sp, #8
   9bcb8:	af00      	add	r7, sp, #0
   9bcba:	4603      	mov	r3, r0
   9bcbc:	6039      	str	r1, [r7, #0]
   9bcbe:	71fb      	strb	r3, [r7, #7]
// 	timer_no = 2;
// 	timer_res = 100;
// 	printf("inside sv start");
	DD_CONFIG_TIMER(timer_no, timer_res);
   9bcc0:	683b      	ldr	r3, [r7, #0]
   9bcc2:	b2db      	uxtb	r3, r3
   9bcc4:	79fa      	ldrb	r2, [r7, #7]
   9bcc6:	4610      	mov	r0, r2
   9bcc8:	4619      	mov	r1, r3
   9bcca:	4b03      	ldr	r3, [pc, #12]	; (9bcd8 <SV_START_TIMER+0x24>)
   9bccc:	4798      	blx	r3
	
	return 0;
   9bcce:	2300      	movs	r3, #0
}
   9bcd0:	4618      	mov	r0, r3
   9bcd2:	3708      	adds	r7, #8
   9bcd4:	46bd      	mov	sp, r7
   9bcd6:	bd80      	pop	{r7, pc}
   9bcd8:	0009a3b1 	.word	0x0009a3b1

0009bcdc <sv_nvmgetdata>:
	uint8_t byte[2];
	uint16_t twobyte;
	}nvdatatype;
	
Sv_ReturnCodesType sv_nvmgetdata(uint8_t dataItemId, uint8_t* pdata)
{
   9bcdc:	b480      	push	{r7}
   9bcde:	b085      	sub	sp, #20
   9bce0:	af00      	add	r7, sp, #0
   9bce2:	4603      	mov	r3, r0
   9bce4:	6039      	str	r1, [r7, #0]
   9bce6:	71fb      	strb	r3, [r7, #7]
	{
		pdata[size] = nvmarray[(dataItemId-1) * 4 + size] ;
	}
#endif
	
			temp.twobyte = nvmarray[dataItemId-1]  ;
   9bce8:	79fb      	ldrb	r3, [r7, #7]
   9bcea:	3b01      	subs	r3, #1
   9bcec:	4a08      	ldr	r2, [pc, #32]	; (9bd10 <sv_nvmgetdata+0x34>)
   9bcee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   9bcf2:	81bb      	strh	r3, [r7, #12]
			pdata[0] = temp.byte[0]  ;
   9bcf4:	7b3a      	ldrb	r2, [r7, #12]
   9bcf6:	683b      	ldr	r3, [r7, #0]
   9bcf8:	701a      	strb	r2, [r3, #0]
			pdata[1] = temp.byte[1]  ;
   9bcfa:	683b      	ldr	r3, [r7, #0]
   9bcfc:	3301      	adds	r3, #1
   9bcfe:	7b7a      	ldrb	r2, [r7, #13]
   9bd00:	701a      	strb	r2, [r3, #0]
		break;
		default:
		break;
	}
	#endif
		return SV_OK;
   9bd02:	2300      	movs	r3, #0
}
   9bd04:	4618      	mov	r0, r3
   9bd06:	3714      	adds	r7, #20
   9bd08:	46bd      	mov	sp, r7
   9bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
   9bd0e:	4770      	bx	lr
   9bd10:	20070ce4 	.word	0x20070ce4

0009bd14 <sv_nvmsetdata>:


Sv_ReturnCodesType sv_nvmsetdata(uint8_t dataItemId,uint8_t* pdata,uint8_t datasize)
{
   9bd14:	b480      	push	{r7}
   9bd16:	b083      	sub	sp, #12
   9bd18:	af00      	add	r7, sp, #0
   9bd1a:	4603      	mov	r3, r0
   9bd1c:	6039      	str	r1, [r7, #0]
   9bd1e:	71fb      	strb	r3, [r7, #7]
   9bd20:	4613      	mov	r3, r2
   9bd22:	71bb      	strb	r3, [r7, #6]
// 	
// 			temp.byte[0] = pdata[0];
// 			temp.byte[1] = pdata[1];
// 			nvmarray[dataItemId-1] = temp.twobyte;
			
		return SV_OK;
   9bd24:	2300      	movs	r3, #0
   9bd26:	4618      	mov	r0, r3
   9bd28:	370c      	adds	r7, #12
   9bd2a:	46bd      	mov	sp, r7
   9bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
   9bd30:	4770      	bx	lr
   9bd32:	bf00      	nop

0009bd34 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   9bd34:	b580      	push	{r7, lr}
   9bd36:	b086      	sub	sp, #24
   9bd38:	af00      	add	r7, sp, #0
   9bd3a:	60f8      	str	r0, [r7, #12]
   9bd3c:	60b9      	str	r1, [r7, #8]
   9bd3e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   9bd40:	2300      	movs	r3, #0
   9bd42:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   9bd44:	68fb      	ldr	r3, [r7, #12]
   9bd46:	2b00      	cmp	r3, #0
   9bd48:	d002      	beq.n	9bd50 <_read+0x1c>
		return -1;
   9bd4a:	f04f 33ff 	mov.w	r3, #4294967295
   9bd4e:	e014      	b.n	9bd7a <_read+0x46>
	}

	for (; len > 0; --len) {
   9bd50:	e00f      	b.n	9bd72 <_read+0x3e>
		ptr_get(stdio_base, ptr);
   9bd52:	4b0c      	ldr	r3, [pc, #48]	; (9bd84 <_read+0x50>)
   9bd54:	681b      	ldr	r3, [r3, #0]
   9bd56:	4a0c      	ldr	r2, [pc, #48]	; (9bd88 <_read+0x54>)
   9bd58:	6812      	ldr	r2, [r2, #0]
   9bd5a:	4610      	mov	r0, r2
   9bd5c:	68b9      	ldr	r1, [r7, #8]
   9bd5e:	4798      	blx	r3
		ptr++;
   9bd60:	68bb      	ldr	r3, [r7, #8]
   9bd62:	3301      	adds	r3, #1
   9bd64:	60bb      	str	r3, [r7, #8]
		nChars++;
   9bd66:	697b      	ldr	r3, [r7, #20]
   9bd68:	3301      	adds	r3, #1
   9bd6a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   9bd6c:	687b      	ldr	r3, [r7, #4]
   9bd6e:	3b01      	subs	r3, #1
   9bd70:	607b      	str	r3, [r7, #4]
   9bd72:	687b      	ldr	r3, [r7, #4]
   9bd74:	2b00      	cmp	r3, #0
   9bd76:	dcec      	bgt.n	9bd52 <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   9bd78:	697b      	ldr	r3, [r7, #20]
}
   9bd7a:	4618      	mov	r0, r3
   9bd7c:	3718      	adds	r7, #24
   9bd7e:	46bd      	mov	sp, r7
   9bd80:	bd80      	pop	{r7, pc}
   9bd82:	bf00      	nop
   9bd84:	20072a34 	.word	0x20072a34
   9bd88:	20072a3c 	.word	0x20072a3c

0009bd8c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   9bd8c:	b580      	push	{r7, lr}
   9bd8e:	b086      	sub	sp, #24
   9bd90:	af00      	add	r7, sp, #0
   9bd92:	60f8      	str	r0, [r7, #12]
   9bd94:	60b9      	str	r1, [r7, #8]
   9bd96:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   9bd98:	2300      	movs	r3, #0
   9bd9a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   9bd9c:	68fb      	ldr	r3, [r7, #12]
   9bd9e:	2b01      	cmp	r3, #1
   9bda0:	d008      	beq.n	9bdb4 <_write+0x28>
   9bda2:	68fb      	ldr	r3, [r7, #12]
   9bda4:	2b02      	cmp	r3, #2
   9bda6:	d005      	beq.n	9bdb4 <_write+0x28>
   9bda8:	68fb      	ldr	r3, [r7, #12]
   9bdaa:	2b03      	cmp	r3, #3
   9bdac:	d002      	beq.n	9bdb4 <_write+0x28>
		return -1;
   9bdae:	f04f 33ff 	mov.w	r3, #4294967295
   9bdb2:	e01a      	b.n	9bdea <_write+0x5e>
	}

	for (; len != 0; --len) {
   9bdb4:	e015      	b.n	9bde2 <_write+0x56>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   9bdb6:	4b0f      	ldr	r3, [pc, #60]	; (9bdf4 <_write+0x68>)
   9bdb8:	681a      	ldr	r2, [r3, #0]
   9bdba:	4b0f      	ldr	r3, [pc, #60]	; (9bdf8 <_write+0x6c>)
   9bdbc:	6818      	ldr	r0, [r3, #0]
   9bdbe:	68bb      	ldr	r3, [r7, #8]
   9bdc0:	1c59      	adds	r1, r3, #1
   9bdc2:	60b9      	str	r1, [r7, #8]
   9bdc4:	781b      	ldrb	r3, [r3, #0]
   9bdc6:	4619      	mov	r1, r3
   9bdc8:	4790      	blx	r2
   9bdca:	4603      	mov	r3, r0
   9bdcc:	2b00      	cmp	r3, #0
   9bdce:	da02      	bge.n	9bdd6 <_write+0x4a>
			return -1;
   9bdd0:	f04f 33ff 	mov.w	r3, #4294967295
   9bdd4:	e009      	b.n	9bdea <_write+0x5e>
		}
		++nChars;
   9bdd6:	697b      	ldr	r3, [r7, #20]
   9bdd8:	3301      	adds	r3, #1
   9bdda:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   9bddc:	687b      	ldr	r3, [r7, #4]
   9bdde:	3b01      	subs	r3, #1
   9bde0:	607b      	str	r3, [r7, #4]
   9bde2:	687b      	ldr	r3, [r7, #4]
   9bde4:	2b00      	cmp	r3, #0
   9bde6:	d1e6      	bne.n	9bdb6 <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   9bde8:	697b      	ldr	r3, [r7, #20]
}
   9bdea:	4618      	mov	r0, r3
   9bdec:	3718      	adds	r7, #24
   9bdee:	46bd      	mov	sp, r7
   9bdf0:	bd80      	pop	{r7, pc}
   9bdf2:	bf00      	nop
   9bdf4:	20072a38 	.word	0x20072a38
   9bdf8:	20072a3c 	.word	0x20072a3c

0009bdfc <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   9bdfc:	b580      	push	{r7, lr}
   9bdfe:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   9be00:	4b05      	ldr	r3, [pc, #20]	; (9be18 <board_init+0x1c>)
   9be02:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   9be06:	605a      	str	r2, [r3, #4]
//hh	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
//hh	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   9be08:	4804      	ldr	r0, [pc, #16]	; (9be1c <board_init+0x20>)
   9be0a:	f44f 7140 	mov.w	r1, #768	; 0x300
   9be0e:	4a04      	ldr	r2, [pc, #16]	; (9be20 <board_init+0x24>)
   9be10:	4b04      	ldr	r3, [pc, #16]	; (9be24 <board_init+0x28>)
   9be12:	4798      	blx	r3
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
	gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
#endif
}
   9be14:	bd80      	pop	{r7, pc}
   9be16:	bf00      	nop
   9be18:	400e1a50 	.word	0x400e1a50
   9be1c:	400e0e00 	.word	0x400e0e00
   9be20:	08000001 	.word	0x08000001
   9be24:	0009c141 	.word	0x0009c141

0009be28 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   9be28:	b480      	push	{r7}
   9be2a:	b085      	sub	sp, #20
   9be2c:	af00      	add	r7, sp, #0
   9be2e:	60f8      	str	r0, [r7, #12]
   9be30:	60b9      	str	r1, [r7, #8]
   9be32:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   9be34:	687b      	ldr	r3, [r7, #4]
   9be36:	2b00      	cmp	r3, #0
   9be38:	d003      	beq.n	9be42 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   9be3a:	68fb      	ldr	r3, [r7, #12]
   9be3c:	68ba      	ldr	r2, [r7, #8]
   9be3e:	665a      	str	r2, [r3, #100]	; 0x64
   9be40:	e002      	b.n	9be48 <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   9be42:	68fb      	ldr	r3, [r7, #12]
   9be44:	68ba      	ldr	r2, [r7, #8]
   9be46:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   9be48:	3714      	adds	r7, #20
   9be4a:	46bd      	mov	sp, r7
   9be4c:	f85d 7b04 	ldr.w	r7, [sp], #4
   9be50:	4770      	bx	lr
   9be52:	bf00      	nop

0009be54 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   9be54:	b480      	push	{r7}
   9be56:	b087      	sub	sp, #28
   9be58:	af00      	add	r7, sp, #0
   9be5a:	60f8      	str	r0, [r7, #12]
   9be5c:	60b9      	str	r1, [r7, #8]
   9be5e:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   9be60:	68fb      	ldr	r3, [r7, #12]
   9be62:	687a      	ldr	r2, [r7, #4]
   9be64:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   9be66:	68bb      	ldr	r3, [r7, #8]
   9be68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   9be6c:	d01f      	beq.n	9beae <pio_set_peripheral+0x5a>
   9be6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   9be72:	d805      	bhi.n	9be80 <pio_set_peripheral+0x2c>
   9be74:	2b00      	cmp	r3, #0
   9be76:	d027      	beq.n	9bec8 <pio_set_peripheral+0x74>
   9be78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   9be7c:	d00a      	beq.n	9be94 <pio_set_peripheral+0x40>
   9be7e:	e01f      	b.n	9bec0 <pio_set_peripheral+0x6c>
   9be80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   9be84:	d020      	beq.n	9bec8 <pio_set_peripheral+0x74>
   9be86:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   9be8a:	d01d      	beq.n	9bec8 <pio_set_peripheral+0x74>
   9be8c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   9be90:	d01a      	beq.n	9bec8 <pio_set_peripheral+0x74>
   9be92:	e015      	b.n	9bec0 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   9be94:	68fb      	ldr	r3, [r7, #12]
   9be96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   9be98:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   9be9a:	68fb      	ldr	r3, [r7, #12]
   9be9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   9be9e:	687b      	ldr	r3, [r7, #4]
   9bea0:	43d9      	mvns	r1, r3
   9bea2:	697b      	ldr	r3, [r7, #20]
   9bea4:	400b      	ands	r3, r1
   9bea6:	401a      	ands	r2, r3
   9bea8:	68fb      	ldr	r3, [r7, #12]
   9beaa:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   9beac:	e008      	b.n	9bec0 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   9beae:	68fb      	ldr	r3, [r7, #12]
   9beb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   9beb2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   9beb4:	687a      	ldr	r2, [r7, #4]
   9beb6:	697b      	ldr	r3, [r7, #20]
   9beb8:	431a      	orrs	r2, r3
   9beba:	68fb      	ldr	r3, [r7, #12]
   9bebc:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   9bebe:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   9bec0:	68fb      	ldr	r3, [r7, #12]
   9bec2:	687a      	ldr	r2, [r7, #4]
   9bec4:	605a      	str	r2, [r3, #4]
   9bec6:	e000      	b.n	9beca <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   9bec8:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
   9beca:	371c      	adds	r7, #28
   9becc:	46bd      	mov	sp, r7
   9bece:	f85d 7b04 	ldr.w	r7, [sp], #4
   9bed2:	4770      	bx	lr

0009bed4 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   9bed4:	b580      	push	{r7, lr}
   9bed6:	b084      	sub	sp, #16
   9bed8:	af00      	add	r7, sp, #0
   9beda:	60f8      	str	r0, [r7, #12]
   9bedc:	60b9      	str	r1, [r7, #8]
   9bede:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   9bee0:	68f8      	ldr	r0, [r7, #12]
   9bee2:	68b9      	ldr	r1, [r7, #8]
   9bee4:	4b18      	ldr	r3, [pc, #96]	; (9bf48 <pio_set_input+0x74>)
   9bee6:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   9bee8:	687b      	ldr	r3, [r7, #4]
   9beea:	f003 0301 	and.w	r3, r3, #1
   9beee:	68f8      	ldr	r0, [r7, #12]
   9bef0:	68b9      	ldr	r1, [r7, #8]
   9bef2:	461a      	mov	r2, r3
   9bef4:	4b15      	ldr	r3, [pc, #84]	; (9bf4c <pio_set_input+0x78>)
   9bef6:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   9bef8:	687b      	ldr	r3, [r7, #4]
   9befa:	f003 030a 	and.w	r3, r3, #10
   9befe:	2b00      	cmp	r3, #0
   9bf00:	d003      	beq.n	9bf0a <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   9bf02:	68fb      	ldr	r3, [r7, #12]
   9bf04:	68ba      	ldr	r2, [r7, #8]
   9bf06:	621a      	str	r2, [r3, #32]
   9bf08:	e002      	b.n	9bf10 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   9bf0a:	68fb      	ldr	r3, [r7, #12]
   9bf0c:	68ba      	ldr	r2, [r7, #8]
   9bf0e:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   9bf10:	687b      	ldr	r3, [r7, #4]
   9bf12:	f003 0302 	and.w	r3, r3, #2
   9bf16:	2b00      	cmp	r3, #0
   9bf18:	d004      	beq.n	9bf24 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   9bf1a:	68fb      	ldr	r3, [r7, #12]
   9bf1c:	68ba      	ldr	r2, [r7, #8]
   9bf1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   9bf22:	e008      	b.n	9bf36 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   9bf24:	687b      	ldr	r3, [r7, #4]
   9bf26:	f003 0308 	and.w	r3, r3, #8
   9bf2a:	2b00      	cmp	r3, #0
   9bf2c:	d003      	beq.n	9bf36 <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   9bf2e:	68fb      	ldr	r3, [r7, #12]
   9bf30:	68ba      	ldr	r2, [r7, #8]
   9bf32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   9bf36:	68fb      	ldr	r3, [r7, #12]
   9bf38:	68ba      	ldr	r2, [r7, #8]
   9bf3a:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   9bf3c:	68fb      	ldr	r3, [r7, #12]
   9bf3e:	68ba      	ldr	r2, [r7, #8]
   9bf40:	601a      	str	r2, [r3, #0]
}
   9bf42:	3710      	adds	r7, #16
   9bf44:	46bd      	mov	sp, r7
   9bf46:	bd80      	pop	{r7, pc}
   9bf48:	0009bfb5 	.word	0x0009bfb5
   9bf4c:	0009be29 	.word	0x0009be29

0009bf50 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   9bf50:	b580      	push	{r7, lr}
   9bf52:	b084      	sub	sp, #16
   9bf54:	af00      	add	r7, sp, #0
   9bf56:	60f8      	str	r0, [r7, #12]
   9bf58:	60b9      	str	r1, [r7, #8]
   9bf5a:	607a      	str	r2, [r7, #4]
   9bf5c:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   9bf5e:	68f8      	ldr	r0, [r7, #12]
   9bf60:	68b9      	ldr	r1, [r7, #8]
   9bf62:	4b12      	ldr	r3, [pc, #72]	; (9bfac <pio_set_output+0x5c>)
   9bf64:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   9bf66:	68f8      	ldr	r0, [r7, #12]
   9bf68:	68b9      	ldr	r1, [r7, #8]
   9bf6a:	69ba      	ldr	r2, [r7, #24]
   9bf6c:	4b10      	ldr	r3, [pc, #64]	; (9bfb0 <pio_set_output+0x60>)
   9bf6e:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   9bf70:	683b      	ldr	r3, [r7, #0]
   9bf72:	2b00      	cmp	r3, #0
   9bf74:	d003      	beq.n	9bf7e <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   9bf76:	68fb      	ldr	r3, [r7, #12]
   9bf78:	68ba      	ldr	r2, [r7, #8]
   9bf7a:	651a      	str	r2, [r3, #80]	; 0x50
   9bf7c:	e002      	b.n	9bf84 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   9bf7e:	68fb      	ldr	r3, [r7, #12]
   9bf80:	68ba      	ldr	r2, [r7, #8]
   9bf82:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   9bf84:	687b      	ldr	r3, [r7, #4]
   9bf86:	2b00      	cmp	r3, #0
   9bf88:	d003      	beq.n	9bf92 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   9bf8a:	68fb      	ldr	r3, [r7, #12]
   9bf8c:	68ba      	ldr	r2, [r7, #8]
   9bf8e:	631a      	str	r2, [r3, #48]	; 0x30
   9bf90:	e002      	b.n	9bf98 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   9bf92:	68fb      	ldr	r3, [r7, #12]
   9bf94:	68ba      	ldr	r2, [r7, #8]
   9bf96:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   9bf98:	68fb      	ldr	r3, [r7, #12]
   9bf9a:	68ba      	ldr	r2, [r7, #8]
   9bf9c:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   9bf9e:	68fb      	ldr	r3, [r7, #12]
   9bfa0:	68ba      	ldr	r2, [r7, #8]
   9bfa2:	601a      	str	r2, [r3, #0]
}
   9bfa4:	3710      	adds	r7, #16
   9bfa6:	46bd      	mov	sp, r7
   9bfa8:	bd80      	pop	{r7, pc}
   9bfaa:	bf00      	nop
   9bfac:	0009bfb5 	.word	0x0009bfb5
   9bfb0:	0009be29 	.word	0x0009be29

0009bfb4 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   9bfb4:	b480      	push	{r7}
   9bfb6:	b083      	sub	sp, #12
   9bfb8:	af00      	add	r7, sp, #0
   9bfba:	6078      	str	r0, [r7, #4]
   9bfbc:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   9bfbe:	687b      	ldr	r3, [r7, #4]
   9bfc0:	683a      	ldr	r2, [r7, #0]
   9bfc2:	645a      	str	r2, [r3, #68]	; 0x44
}
   9bfc4:	370c      	adds	r7, #12
   9bfc6:	46bd      	mov	sp, r7
   9bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
   9bfcc:	4770      	bx	lr
   9bfce:	bf00      	nop

0009bfd0 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   9bfd0:	b480      	push	{r7}
   9bfd2:	b083      	sub	sp, #12
   9bfd4:	af00      	add	r7, sp, #0
   9bfd6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   9bfd8:	687b      	ldr	r3, [r7, #4]
   9bfda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   9bfdc:	4618      	mov	r0, r3
   9bfde:	370c      	adds	r7, #12
   9bfe0:	46bd      	mov	sp, r7
   9bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
   9bfe6:	4770      	bx	lr

0009bfe8 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   9bfe8:	b480      	push	{r7}
   9bfea:	b083      	sub	sp, #12
   9bfec:	af00      	add	r7, sp, #0
   9bfee:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   9bff0:	687b      	ldr	r3, [r7, #4]
   9bff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   9bff4:	4618      	mov	r0, r3
   9bff6:	370c      	adds	r7, #12
   9bff8:	46bd      	mov	sp, r7
   9bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
   9bffe:	4770      	bx	lr

0009c000 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   9c000:	b590      	push	{r4, r7, lr}
   9c002:	b087      	sub	sp, #28
   9c004:	af02      	add	r7, sp, #8
   9c006:	6078      	str	r0, [r7, #4]
   9c008:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   9c00a:	687b      	ldr	r3, [r7, #4]
   9c00c:	095b      	lsrs	r3, r3, #5
   9c00e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   9c012:	f203 7307 	addw	r3, r3, #1799	; 0x707
   9c016:	025b      	lsls	r3, r3, #9
   9c018:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   9c01a:	683b      	ldr	r3, [r7, #0]
   9c01c:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   9c020:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   9c024:	d048      	beq.n	9c0b8 <pio_configure_pin+0xb8>
   9c026:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   9c02a:	d806      	bhi.n	9c03a <pio_configure_pin+0x3a>
   9c02c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   9c030:	d00a      	beq.n	9c048 <pio_configure_pin+0x48>
   9c032:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   9c036:	d023      	beq.n	9c080 <pio_configure_pin+0x80>
   9c038:	e072      	b.n	9c120 <pio_configure_pin+0x120>
   9c03a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   9c03e:	d047      	beq.n	9c0d0 <pio_configure_pin+0xd0>
   9c040:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   9c044:	d044      	beq.n	9c0d0 <pio_configure_pin+0xd0>
   9c046:	e06b      	b.n	9c120 <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   9c048:	687b      	ldr	r3, [r7, #4]
   9c04a:	f003 031f 	and.w	r3, r3, #31
   9c04e:	2201      	movs	r2, #1
   9c050:	fa02 f303 	lsl.w	r3, r2, r3
   9c054:	68f8      	ldr	r0, [r7, #12]
   9c056:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   9c05a:	461a      	mov	r2, r3
   9c05c:	4b34      	ldr	r3, [pc, #208]	; (9c130 <pio_configure_pin+0x130>)
   9c05e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   9c060:	687b      	ldr	r3, [r7, #4]
   9c062:	f003 031f 	and.w	r3, r3, #31
   9c066:	2201      	movs	r2, #1
   9c068:	fa02 f303 	lsl.w	r3, r2, r3
   9c06c:	461a      	mov	r2, r3
   9c06e:	683b      	ldr	r3, [r7, #0]
   9c070:	f003 0301 	and.w	r3, r3, #1
   9c074:	68f8      	ldr	r0, [r7, #12]
   9c076:	4611      	mov	r1, r2
   9c078:	461a      	mov	r2, r3
   9c07a:	4b2e      	ldr	r3, [pc, #184]	; (9c134 <pio_configure_pin+0x134>)
   9c07c:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   9c07e:	e051      	b.n	9c124 <pio_configure_pin+0x124>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   9c080:	687b      	ldr	r3, [r7, #4]
   9c082:	f003 031f 	and.w	r3, r3, #31
   9c086:	2201      	movs	r2, #1
   9c088:	fa02 f303 	lsl.w	r3, r2, r3
   9c08c:	68f8      	ldr	r0, [r7, #12]
   9c08e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   9c092:	461a      	mov	r2, r3
   9c094:	4b26      	ldr	r3, [pc, #152]	; (9c130 <pio_configure_pin+0x130>)
   9c096:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   9c098:	687b      	ldr	r3, [r7, #4]
   9c09a:	f003 031f 	and.w	r3, r3, #31
   9c09e:	2201      	movs	r2, #1
   9c0a0:	fa02 f303 	lsl.w	r3, r2, r3
   9c0a4:	461a      	mov	r2, r3
   9c0a6:	683b      	ldr	r3, [r7, #0]
   9c0a8:	f003 0301 	and.w	r3, r3, #1
   9c0ac:	68f8      	ldr	r0, [r7, #12]
   9c0ae:	4611      	mov	r1, r2
   9c0b0:	461a      	mov	r2, r3
   9c0b2:	4b20      	ldr	r3, [pc, #128]	; (9c134 <pio_configure_pin+0x134>)
   9c0b4:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   9c0b6:	e035      	b.n	9c124 <pio_configure_pin+0x124>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   9c0b8:	687b      	ldr	r3, [r7, #4]
   9c0ba:	f003 031f 	and.w	r3, r3, #31
   9c0be:	2201      	movs	r2, #1
   9c0c0:	fa02 f303 	lsl.w	r3, r2, r3
   9c0c4:	68f8      	ldr	r0, [r7, #12]
   9c0c6:	4619      	mov	r1, r3
   9c0c8:	683a      	ldr	r2, [r7, #0]
   9c0ca:	4b1b      	ldr	r3, [pc, #108]	; (9c138 <pio_configure_pin+0x138>)
   9c0cc:	4798      	blx	r3
		break;
   9c0ce:	e029      	b.n	9c124 <pio_configure_pin+0x124>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   9c0d0:	687b      	ldr	r3, [r7, #4]
   9c0d2:	f003 031f 	and.w	r3, r3, #31
   9c0d6:	2201      	movs	r2, #1
   9c0d8:	fa02 f303 	lsl.w	r3, r2, r3
   9c0dc:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   9c0de:	683b      	ldr	r3, [r7, #0]
   9c0e0:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   9c0e4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   9c0e8:	bf0c      	ite	eq
   9c0ea:	2301      	moveq	r3, #1
   9c0ec:	2300      	movne	r3, #0
   9c0ee:	b2db      	uxtb	r3, r3
   9c0f0:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   9c0f2:	683b      	ldr	r3, [r7, #0]
   9c0f4:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   9c0f8:	2b00      	cmp	r3, #0
   9c0fa:	bf14      	ite	ne
   9c0fc:	2301      	movne	r3, #1
   9c0fe:	2300      	moveq	r3, #0
   9c100:	b2db      	uxtb	r3, r3
   9c102:	461c      	mov	r4, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   9c104:	683b      	ldr	r3, [r7, #0]
   9c106:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   9c10a:	2b00      	cmp	r3, #0
   9c10c:	bf14      	ite	ne
   9c10e:	2301      	movne	r3, #1
   9c110:	2300      	moveq	r3, #0
   9c112:	b2db      	uxtb	r3, r3
   9c114:	9300      	str	r3, [sp, #0]
   9c116:	68f8      	ldr	r0, [r7, #12]
   9c118:	4623      	mov	r3, r4
   9c11a:	4c08      	ldr	r4, [pc, #32]	; (9c13c <pio_configure_pin+0x13c>)
   9c11c:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   9c11e:	e001      	b.n	9c124 <pio_configure_pin+0x124>

	default:
		return 0;
   9c120:	2300      	movs	r3, #0
   9c122:	e000      	b.n	9c126 <pio_configure_pin+0x126>
	}

	return 1;
   9c124:	2301      	movs	r3, #1
}
   9c126:	4618      	mov	r0, r3
   9c128:	3714      	adds	r7, #20
   9c12a:	46bd      	mov	sp, r7
   9c12c:	bd90      	pop	{r4, r7, pc}
   9c12e:	bf00      	nop
   9c130:	0009be55 	.word	0x0009be55
   9c134:	0009be29 	.word	0x0009be29
   9c138:	0009bed5 	.word	0x0009bed5
   9c13c:	0009bf51 	.word	0x0009bf51

0009c140 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   9c140:	b590      	push	{r4, r7, lr}
   9c142:	b087      	sub	sp, #28
   9c144:	af02      	add	r7, sp, #8
   9c146:	60f8      	str	r0, [r7, #12]
   9c148:	60b9      	str	r1, [r7, #8]
   9c14a:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   9c14c:	687b      	ldr	r3, [r7, #4]
   9c14e:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   9c152:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   9c156:	d026      	beq.n	9c1a6 <pio_configure_pin_group+0x66>
   9c158:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   9c15c:	d806      	bhi.n	9c16c <pio_configure_pin_group+0x2c>
   9c15e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   9c162:	d00a      	beq.n	9c17a <pio_configure_pin_group+0x3a>
   9c164:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   9c168:	d00e      	beq.n	9c188 <pio_configure_pin_group+0x48>
   9c16a:	e044      	b.n	9c1f6 <pio_configure_pin_group+0xb6>
   9c16c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   9c170:	d01f      	beq.n	9c1b2 <pio_configure_pin_group+0x72>
   9c172:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   9c176:	d01c      	beq.n	9c1b2 <pio_configure_pin_group+0x72>
   9c178:	e03d      	b.n	9c1f6 <pio_configure_pin_group+0xb6>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   9c17a:	68f8      	ldr	r0, [r7, #12]
   9c17c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   9c180:	68ba      	ldr	r2, [r7, #8]
   9c182:	4b20      	ldr	r3, [pc, #128]	; (9c204 <pio_configure_pin_group+0xc4>)
   9c184:	4798      	blx	r3
		//pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   9c186:	e038      	b.n	9c1fa <pio_configure_pin_group+0xba>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   9c188:	68f8      	ldr	r0, [r7, #12]
   9c18a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   9c18e:	68ba      	ldr	r2, [r7, #8]
   9c190:	4b1c      	ldr	r3, [pc, #112]	; (9c204 <pio_configure_pin_group+0xc4>)
   9c192:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   9c194:	687b      	ldr	r3, [r7, #4]
   9c196:	f003 0301 	and.w	r3, r3, #1
   9c19a:	68f8      	ldr	r0, [r7, #12]
   9c19c:	68b9      	ldr	r1, [r7, #8]
   9c19e:	461a      	mov	r2, r3
   9c1a0:	4b19      	ldr	r3, [pc, #100]	; (9c208 <pio_configure_pin_group+0xc8>)
   9c1a2:	4798      	blx	r3
		break;
   9c1a4:	e029      	b.n	9c1fa <pio_configure_pin_group+0xba>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   9c1a6:	68f8      	ldr	r0, [r7, #12]
   9c1a8:	68b9      	ldr	r1, [r7, #8]
   9c1aa:	687a      	ldr	r2, [r7, #4]
   9c1ac:	4b17      	ldr	r3, [pc, #92]	; (9c20c <pio_configure_pin_group+0xcc>)
   9c1ae:	4798      	blx	r3
		break;
   9c1b0:	e023      	b.n	9c1fa <pio_configure_pin_group+0xba>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   9c1b2:	687b      	ldr	r3, [r7, #4]
   9c1b4:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   9c1b8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   9c1bc:	bf0c      	ite	eq
   9c1be:	2301      	moveq	r3, #1
   9c1c0:	2300      	movne	r3, #0
   9c1c2:	b2db      	uxtb	r3, r3
   9c1c4:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   9c1c6:	687b      	ldr	r3, [r7, #4]
   9c1c8:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   9c1cc:	2b00      	cmp	r3, #0
   9c1ce:	bf14      	ite	ne
   9c1d0:	2301      	movne	r3, #1
   9c1d2:	2300      	moveq	r3, #0
   9c1d4:	b2db      	uxtb	r3, r3
   9c1d6:	461c      	mov	r4, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   9c1d8:	687b      	ldr	r3, [r7, #4]
   9c1da:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   9c1de:	2b00      	cmp	r3, #0
   9c1e0:	bf14      	ite	ne
   9c1e2:	2301      	movne	r3, #1
   9c1e4:	2300      	moveq	r3, #0
   9c1e6:	b2db      	uxtb	r3, r3
   9c1e8:	9300      	str	r3, [sp, #0]
   9c1ea:	68f8      	ldr	r0, [r7, #12]
   9c1ec:	68b9      	ldr	r1, [r7, #8]
   9c1ee:	4623      	mov	r3, r4
   9c1f0:	4c07      	ldr	r4, [pc, #28]	; (9c210 <pio_configure_pin_group+0xd0>)
   9c1f2:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   9c1f4:	e001      	b.n	9c1fa <pio_configure_pin_group+0xba>

	default:
		return 0;
   9c1f6:	2300      	movs	r3, #0
   9c1f8:	e000      	b.n	9c1fc <pio_configure_pin_group+0xbc>
	}

	return 1;
   9c1fa:	2301      	movs	r3, #1
}
   9c1fc:	4618      	mov	r0, r3
   9c1fe:	3714      	adds	r7, #20
   9c200:	46bd      	mov	sp, r7
   9c202:	bd90      	pop	{r4, r7, pc}
   9c204:	0009be55 	.word	0x0009be55
   9c208:	0009be29 	.word	0x0009be29
   9c20c:	0009bed5 	.word	0x0009bed5
   9c210:	0009bf51 	.word	0x0009bf51

0009c214 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   9c214:	b580      	push	{r7, lr}
   9c216:	b084      	sub	sp, #16
   9c218:	af00      	add	r7, sp, #0
   9c21a:	6078      	str	r0, [r7, #4]
   9c21c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   9c21e:	6878      	ldr	r0, [r7, #4]
   9c220:	4b22      	ldr	r3, [pc, #136]	; (9c2ac <pio_handler_process+0x98>)
   9c222:	4798      	blx	r3
   9c224:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   9c226:	6878      	ldr	r0, [r7, #4]
   9c228:	4b21      	ldr	r3, [pc, #132]	; (9c2b0 <pio_handler_process+0x9c>)
   9c22a:	4798      	blx	r3
   9c22c:	4602      	mov	r2, r0
   9c22e:	68fb      	ldr	r3, [r7, #12]
   9c230:	4013      	ands	r3, r2
   9c232:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   9c234:	68fb      	ldr	r3, [r7, #12]
   9c236:	2b00      	cmp	r3, #0
   9c238:	d034      	beq.n	9c2a4 <pio_handler_process+0x90>
		/* Find triggering source */
		i = 0;
   9c23a:	2300      	movs	r3, #0
   9c23c:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   9c23e:	e02e      	b.n	9c29e <pio_handler_process+0x8a>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   9c240:	4a1c      	ldr	r2, [pc, #112]	; (9c2b4 <pio_handler_process+0xa0>)
   9c242:	68bb      	ldr	r3, [r7, #8]
   9c244:	011b      	lsls	r3, r3, #4
   9c246:	4413      	add	r3, r2
   9c248:	681a      	ldr	r2, [r3, #0]
   9c24a:	683b      	ldr	r3, [r7, #0]
   9c24c:	429a      	cmp	r2, r3
   9c24e:	d123      	bne.n	9c298 <pio_handler_process+0x84>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9c250:	4a18      	ldr	r2, [pc, #96]	; (9c2b4 <pio_handler_process+0xa0>)
   9c252:	68bb      	ldr	r3, [r7, #8]
   9c254:	011b      	lsls	r3, r3, #4
   9c256:	4413      	add	r3, r2
   9c258:	685a      	ldr	r2, [r3, #4]
   9c25a:	68fb      	ldr	r3, [r7, #12]
   9c25c:	4013      	ands	r3, r2
   9c25e:	2b00      	cmp	r3, #0
   9c260:	d01a      	beq.n	9c298 <pio_handler_process+0x84>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9c262:	4a14      	ldr	r2, [pc, #80]	; (9c2b4 <pio_handler_process+0xa0>)
   9c264:	68bb      	ldr	r3, [r7, #8]
   9c266:	011b      	lsls	r3, r3, #4
   9c268:	4413      	add	r3, r2
   9c26a:	3308      	adds	r3, #8
   9c26c:	685b      	ldr	r3, [r3, #4]
   9c26e:	4911      	ldr	r1, [pc, #68]	; (9c2b4 <pio_handler_process+0xa0>)
   9c270:	68ba      	ldr	r2, [r7, #8]
   9c272:	0112      	lsls	r2, r2, #4
   9c274:	440a      	add	r2, r1
   9c276:	6810      	ldr	r0, [r2, #0]
   9c278:	490e      	ldr	r1, [pc, #56]	; (9c2b4 <pio_handler_process+0xa0>)
   9c27a:	68ba      	ldr	r2, [r7, #8]
   9c27c:	0112      	lsls	r2, r2, #4
   9c27e:	440a      	add	r2, r1
   9c280:	6852      	ldr	r2, [r2, #4]
   9c282:	4611      	mov	r1, r2
   9c284:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   9c286:	4a0b      	ldr	r2, [pc, #44]	; (9c2b4 <pio_handler_process+0xa0>)
   9c288:	68bb      	ldr	r3, [r7, #8]
   9c28a:	011b      	lsls	r3, r3, #4
   9c28c:	4413      	add	r3, r2
   9c28e:	685b      	ldr	r3, [r3, #4]
   9c290:	43db      	mvns	r3, r3
   9c292:	68fa      	ldr	r2, [r7, #12]
   9c294:	4013      	ands	r3, r2
   9c296:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   9c298:	68bb      	ldr	r3, [r7, #8]
   9c29a:	3301      	adds	r3, #1
   9c29c:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   9c29e:	68fb      	ldr	r3, [r7, #12]
   9c2a0:	2b00      	cmp	r3, #0
   9c2a2:	d1cd      	bne.n	9c240 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   9c2a4:	3710      	adds	r7, #16
   9c2a6:	46bd      	mov	sp, r7
   9c2a8:	bd80      	pop	{r7, pc}
   9c2aa:	bf00      	nop
   9c2ac:	0009bfd1 	.word	0x0009bfd1
   9c2b0:	0009bfe9 	.word	0x0009bfe9
   9c2b4:	20071cb8 	.word	0x20071cb8

0009c2b8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   9c2b8:	b580      	push	{r7, lr}
   9c2ba:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   9c2bc:	4802      	ldr	r0, [pc, #8]	; (9c2c8 <PIOA_Handler+0x10>)
   9c2be:	210b      	movs	r1, #11
   9c2c0:	4b02      	ldr	r3, [pc, #8]	; (9c2cc <PIOA_Handler+0x14>)
   9c2c2:	4798      	blx	r3
}
   9c2c4:	bd80      	pop	{r7, pc}
   9c2c6:	bf00      	nop
   9c2c8:	400e0e00 	.word	0x400e0e00
   9c2cc:	0009c215 	.word	0x0009c215

0009c2d0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   9c2d0:	b580      	push	{r7, lr}
   9c2d2:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   9c2d4:	4802      	ldr	r0, [pc, #8]	; (9c2e0 <PIOB_Handler+0x10>)
   9c2d6:	210c      	movs	r1, #12
   9c2d8:	4b02      	ldr	r3, [pc, #8]	; (9c2e4 <PIOB_Handler+0x14>)
   9c2da:	4798      	blx	r3
}
   9c2dc:	bd80      	pop	{r7, pc}
   9c2de:	bf00      	nop
   9c2e0:	400e1000 	.word	0x400e1000
   9c2e4:	0009c215 	.word	0x0009c215

0009c2e8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   9c2e8:	b580      	push	{r7, lr}
   9c2ea:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   9c2ec:	4802      	ldr	r0, [pc, #8]	; (9c2f8 <PIOC_Handler+0x10>)
   9c2ee:	210d      	movs	r1, #13
   9c2f0:	4b02      	ldr	r3, [pc, #8]	; (9c2fc <PIOC_Handler+0x14>)
   9c2f2:	4798      	blx	r3
}
   9c2f4:	bd80      	pop	{r7, pc}
   9c2f6:	bf00      	nop
   9c2f8:	400e1200 	.word	0x400e1200
   9c2fc:	0009c215 	.word	0x0009c215

0009c300 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   9c300:	b580      	push	{r7, lr}
   9c302:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   9c304:	4802      	ldr	r0, [pc, #8]	; (9c310 <PIOD_Handler+0x10>)
   9c306:	210e      	movs	r1, #14
   9c308:	4b02      	ldr	r3, [pc, #8]	; (9c314 <PIOD_Handler+0x14>)
   9c30a:	4798      	blx	r3
}
   9c30c:	bd80      	pop	{r7, pc}
   9c30e:	bf00      	nop
   9c310:	400e1400 	.word	0x400e1400
   9c314:	0009c215 	.word	0x0009c215

0009c318 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   9c318:	b480      	push	{r7}
   9c31a:	b085      	sub	sp, #20
   9c31c:	af00      	add	r7, sp, #0
   9c31e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   9c320:	491d      	ldr	r1, [pc, #116]	; (9c398 <pmc_switch_mck_to_pllack+0x80>)
   9c322:	4b1d      	ldr	r3, [pc, #116]	; (9c398 <pmc_switch_mck_to_pllack+0x80>)
   9c324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9c326:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   9c32a:	687b      	ldr	r3, [r7, #4]
   9c32c:	4313      	orrs	r3, r2
   9c32e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   9c330:	f44f 6300 	mov.w	r3, #2048	; 0x800
   9c334:	60fb      	str	r3, [r7, #12]
   9c336:	e007      	b.n	9c348 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   9c338:	68fb      	ldr	r3, [r7, #12]
   9c33a:	2b00      	cmp	r3, #0
   9c33c:	d101      	bne.n	9c342 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   9c33e:	2301      	movs	r3, #1
   9c340:	e023      	b.n	9c38a <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   9c342:	68fb      	ldr	r3, [r7, #12]
   9c344:	3b01      	subs	r3, #1
   9c346:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   9c348:	4b13      	ldr	r3, [pc, #76]	; (9c398 <pmc_switch_mck_to_pllack+0x80>)
   9c34a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9c34c:	f003 0308 	and.w	r3, r3, #8
   9c350:	2b00      	cmp	r3, #0
   9c352:	d0f1      	beq.n	9c338 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   9c354:	4a10      	ldr	r2, [pc, #64]	; (9c398 <pmc_switch_mck_to_pllack+0x80>)
   9c356:	4b10      	ldr	r3, [pc, #64]	; (9c398 <pmc_switch_mck_to_pllack+0x80>)
   9c358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9c35a:	f023 0303 	bic.w	r3, r3, #3
   9c35e:	f043 0302 	orr.w	r3, r3, #2
   9c362:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   9c364:	f44f 6300 	mov.w	r3, #2048	; 0x800
   9c368:	60fb      	str	r3, [r7, #12]
   9c36a:	e007      	b.n	9c37c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   9c36c:	68fb      	ldr	r3, [r7, #12]
   9c36e:	2b00      	cmp	r3, #0
   9c370:	d101      	bne.n	9c376 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   9c372:	2301      	movs	r3, #1
   9c374:	e009      	b.n	9c38a <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   9c376:	68fb      	ldr	r3, [r7, #12]
   9c378:	3b01      	subs	r3, #1
   9c37a:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   9c37c:	4b06      	ldr	r3, [pc, #24]	; (9c398 <pmc_switch_mck_to_pllack+0x80>)
   9c37e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9c380:	f003 0308 	and.w	r3, r3, #8
   9c384:	2b00      	cmp	r3, #0
   9c386:	d0f1      	beq.n	9c36c <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   9c388:	2300      	movs	r3, #0
}
   9c38a:	4618      	mov	r0, r3
   9c38c:	3714      	adds	r7, #20
   9c38e:	46bd      	mov	sp, r7
   9c390:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c394:	4770      	bx	lr
   9c396:	bf00      	nop
   9c398:	400e0600 	.word	0x400e0600

0009c39c <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   9c39c:	b480      	push	{r7}
   9c39e:	b083      	sub	sp, #12
   9c3a0:	af00      	add	r7, sp, #0
   9c3a2:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   9c3a4:	687b      	ldr	r3, [r7, #4]
   9c3a6:	2b01      	cmp	r3, #1
   9c3a8:	d107      	bne.n	9c3ba <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   9c3aa:	4a08      	ldr	r2, [pc, #32]	; (9c3cc <pmc_switch_sclk_to_32kxtal+0x30>)
   9c3ac:	4b07      	ldr	r3, [pc, #28]	; (9c3cc <pmc_switch_sclk_to_32kxtal+0x30>)
   9c3ae:	689b      	ldr	r3, [r3, #8]
   9c3b0:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   9c3b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   9c3b8:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   9c3ba:	4b04      	ldr	r3, [pc, #16]	; (9c3cc <pmc_switch_sclk_to_32kxtal+0x30>)
   9c3bc:	4a04      	ldr	r2, [pc, #16]	; (9c3d0 <pmc_switch_sclk_to_32kxtal+0x34>)
   9c3be:	601a      	str	r2, [r3, #0]
}
   9c3c0:	370c      	adds	r7, #12
   9c3c2:	46bd      	mov	sp, r7
   9c3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c3c8:	4770      	bx	lr
   9c3ca:	bf00      	nop
   9c3cc:	400e1a10 	.word	0x400e1a10
   9c3d0:	a5000008 	.word	0xa5000008

0009c3d4 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   9c3d4:	b480      	push	{r7}
   9c3d6:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   9c3d8:	4b09      	ldr	r3, [pc, #36]	; (9c400 <pmc_osc_is_ready_32kxtal+0x2c>)
   9c3da:	695b      	ldr	r3, [r3, #20]
   9c3dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   9c3e0:	2b00      	cmp	r3, #0
   9c3e2:	d007      	beq.n	9c3f4 <pmc_osc_is_ready_32kxtal+0x20>
   9c3e4:	4b07      	ldr	r3, [pc, #28]	; (9c404 <pmc_osc_is_ready_32kxtal+0x30>)
   9c3e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9c3e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
   9c3ec:	2b00      	cmp	r3, #0
   9c3ee:	d001      	beq.n	9c3f4 <pmc_osc_is_ready_32kxtal+0x20>
   9c3f0:	2301      	movs	r3, #1
   9c3f2:	e000      	b.n	9c3f6 <pmc_osc_is_ready_32kxtal+0x22>
   9c3f4:	2300      	movs	r3, #0
}
   9c3f6:	4618      	mov	r0, r3
   9c3f8:	46bd      	mov	sp, r7
   9c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c3fe:	4770      	bx	lr
   9c400:	400e1a10 	.word	0x400e1a10
   9c404:	400e0600 	.word	0x400e0600

0009c408 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   9c408:	b480      	push	{r7}
   9c40a:	b085      	sub	sp, #20
   9c40c:	af00      	add	r7, sp, #0
   9c40e:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   9c410:	2300      	movs	r3, #0
   9c412:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   9c414:	4b21      	ldr	r3, [pc, #132]	; (9c49c <pmc_switch_mainck_to_fastrc+0x94>)
   9c416:	6a1b      	ldr	r3, [r3, #32]
   9c418:	f003 0301 	and.w	r3, r3, #1
   9c41c:	2b00      	cmp	r3, #0
   9c41e:	d00e      	beq.n	9c43e <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   9c420:	491e      	ldr	r1, [pc, #120]	; (9c49c <pmc_switch_mainck_to_fastrc+0x94>)
   9c422:	4b1e      	ldr	r3, [pc, #120]	; (9c49c <pmc_switch_mainck_to_fastrc+0x94>)
   9c424:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   9c426:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   9c42a:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   9c42e:	687a      	ldr	r2, [r7, #4]
   9c430:	4313      	orrs	r3, r2
   9c432:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   9c436:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   9c43a:	620b      	str	r3, [r1, #32]
   9c43c:	e00b      	b.n	9c456 <pmc_switch_mainck_to_fastrc+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   9c43e:	2301      	movs	r3, #1
   9c440:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   9c442:	4916      	ldr	r1, [pc, #88]	; (9c49c <pmc_switch_mainck_to_fastrc+0x94>)
   9c444:	4b15      	ldr	r3, [pc, #84]	; (9c49c <pmc_switch_mainck_to_fastrc+0x94>)
   9c446:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
   9c448:	4b15      	ldr	r3, [pc, #84]	; (9c4a0 <pmc_switch_mainck_to_fastrc+0x98>)
   9c44a:	4013      	ands	r3, r2
   9c44c:	687a      	ldr	r2, [r7, #4]
   9c44e:	431a      	orrs	r2, r3
   9c450:	4b14      	ldr	r3, [pc, #80]	; (9c4a4 <pmc_switch_mainck_to_fastrc+0x9c>)
   9c452:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   9c454:	620b      	str	r3, [r1, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   9c456:	bf00      	nop
   9c458:	4b10      	ldr	r3, [pc, #64]	; (9c49c <pmc_switch_mainck_to_fastrc+0x94>)
   9c45a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9c45c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   9c460:	2b00      	cmp	r3, #0
   9c462:	d0f9      	beq.n	9c458 <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   9c464:	4a0d      	ldr	r2, [pc, #52]	; (9c49c <pmc_switch_mainck_to_fastrc+0x94>)
   9c466:	4b0d      	ldr	r3, [pc, #52]	; (9c49c <pmc_switch_mainck_to_fastrc+0x94>)
   9c468:	6a1b      	ldr	r3, [r3, #32]
   9c46a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   9c46e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   9c472:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   9c476:	6213      	str	r3, [r2, #32]
			PMC_CKGR_MOR_KEY_VALUE;

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   9c478:	68fb      	ldr	r3, [r7, #12]
   9c47a:	2b00      	cmp	r3, #0
   9c47c:	d009      	beq.n	9c492 <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   9c47e:	4a07      	ldr	r2, [pc, #28]	; (9c49c <pmc_switch_mainck_to_fastrc+0x94>)
   9c480:	4b06      	ldr	r3, [pc, #24]	; (9c49c <pmc_switch_mainck_to_fastrc+0x94>)
   9c482:	6a1b      	ldr	r3, [r3, #32]
   9c484:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   9c488:	f023 0301 	bic.w	r3, r3, #1
   9c48c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   9c490:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   9c492:	3714      	adds	r7, #20
   9c494:	46bd      	mov	sp, r7
   9c496:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c49a:	4770      	bx	lr
   9c49c:	400e0600 	.word	0x400e0600
   9c4a0:	ffc80086 	.word	0xffc80086
   9c4a4:	0037ff09 	.word	0x0037ff09

0009c4a8 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   9c4a8:	b480      	push	{r7}
   9c4aa:	b083      	sub	sp, #12
   9c4ac:	af00      	add	r7, sp, #0
   9c4ae:	6078      	str	r0, [r7, #4]
   9c4b0:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   9c4b2:	687b      	ldr	r3, [r7, #4]
   9c4b4:	2b00      	cmp	r3, #0
   9c4b6:	d008      	beq.n	9c4ca <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   9c4b8:	4916      	ldr	r1, [pc, #88]	; (9c514 <pmc_switch_mainck_to_xtal+0x6c>)
   9c4ba:	4b16      	ldr	r3, [pc, #88]	; (9c514 <pmc_switch_mainck_to_xtal+0x6c>)
   9c4bc:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   9c4be:	4a16      	ldr	r2, [pc, #88]	; (9c518 <pmc_switch_mainck_to_xtal+0x70>)
   9c4c0:	401a      	ands	r2, r3
   9c4c2:	4b16      	ldr	r3, [pc, #88]	; (9c51c <pmc_switch_mainck_to_xtal+0x74>)
   9c4c4:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   9c4c6:	620b      	str	r3, [r1, #32]
   9c4c8:	e01e      	b.n	9c508 <pmc_switch_mainck_to_xtal+0x60>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   9c4ca:	4912      	ldr	r1, [pc, #72]	; (9c514 <pmc_switch_mainck_to_xtal+0x6c>)
   9c4cc:	4b11      	ldr	r3, [pc, #68]	; (9c514 <pmc_switch_mainck_to_xtal+0x6c>)
   9c4ce:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   9c4d0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   9c4d4:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   9c4d8:	683a      	ldr	r2, [r7, #0]
   9c4da:	0212      	lsls	r2, r2, #8
   9c4dc:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   9c4de:	4313      	orrs	r3, r2
   9c4e0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   9c4e4:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   9c4e8:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   9c4ea:	bf00      	nop
   9c4ec:	4b09      	ldr	r3, [pc, #36]	; (9c514 <pmc_switch_mainck_to_xtal+0x6c>)
   9c4ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9c4f0:	f003 0301 	and.w	r3, r3, #1
   9c4f4:	2b00      	cmp	r3, #0
   9c4f6:	d0f9      	beq.n	9c4ec <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   9c4f8:	4a06      	ldr	r2, [pc, #24]	; (9c514 <pmc_switch_mainck_to_xtal+0x6c>)
   9c4fa:	4b06      	ldr	r3, [pc, #24]	; (9c514 <pmc_switch_mainck_to_xtal+0x6c>)
   9c4fc:	6a1b      	ldr	r3, [r3, #32]
   9c4fe:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   9c502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   9c506:	6213      	str	r3, [r2, #32]
	}
}
   9c508:	370c      	adds	r7, #12
   9c50a:	46bd      	mov	sp, r7
   9c50c:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c510:	4770      	bx	lr
   9c512:	bf00      	nop
   9c514:	400e0600 	.word	0x400e0600
   9c518:	fec8fffc 	.word	0xfec8fffc
   9c51c:	01370002 	.word	0x01370002

0009c520 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   9c520:	b480      	push	{r7}
   9c522:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   9c524:	4b04      	ldr	r3, [pc, #16]	; (9c538 <pmc_osc_is_ready_mainck+0x18>)
   9c526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9c528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   9c52c:	4618      	mov	r0, r3
   9c52e:	46bd      	mov	sp, r7
   9c530:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c534:	4770      	bx	lr
   9c536:	bf00      	nop
   9c538:	400e0600 	.word	0x400e0600

0009c53c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   9c53c:	b480      	push	{r7}
   9c53e:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   9c540:	4b03      	ldr	r3, [pc, #12]	; (9c550 <pmc_disable_pllack+0x14>)
   9c542:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   9c546:	629a      	str	r2, [r3, #40]	; 0x28
}
   9c548:	46bd      	mov	sp, r7
   9c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c54e:	4770      	bx	lr
   9c550:	400e0600 	.word	0x400e0600

0009c554 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   9c554:	b480      	push	{r7}
   9c556:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   9c558:	4b04      	ldr	r3, [pc, #16]	; (9c56c <pmc_is_locked_pllack+0x18>)
   9c55a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9c55c:	f003 0302 	and.w	r3, r3, #2
}
   9c560:	4618      	mov	r0, r3
   9c562:	46bd      	mov	sp, r7
   9c564:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c568:	4770      	bx	lr
   9c56a:	bf00      	nop
   9c56c:	400e0600 	.word	0x400e0600

0009c570 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   9c570:	b480      	push	{r7}
   9c572:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   9c574:	4b04      	ldr	r3, [pc, #16]	; (9c588 <pmc_is_locked_upll+0x18>)
   9c576:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9c578:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   9c57c:	4618      	mov	r0, r3
   9c57e:	46bd      	mov	sp, r7
   9c580:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c584:	4770      	bx	lr
   9c586:	bf00      	nop
   9c588:	400e0600 	.word	0x400e0600

0009c58c <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   9c58c:	b480      	push	{r7}
   9c58e:	b083      	sub	sp, #12
   9c590:	af00      	add	r7, sp, #0
   9c592:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   9c594:	687b      	ldr	r3, [r7, #4]
   9c596:	2b2c      	cmp	r3, #44	; 0x2c
   9c598:	d901      	bls.n	9c59e <pmc_enable_periph_clk+0x12>
		return 1;
   9c59a:	2301      	movs	r3, #1
   9c59c:	e02f      	b.n	9c5fe <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   9c59e:	687b      	ldr	r3, [r7, #4]
   9c5a0:	2b1f      	cmp	r3, #31
   9c5a2:	d813      	bhi.n	9c5cc <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   9c5a4:	4b19      	ldr	r3, [pc, #100]	; (9c60c <pmc_enable_periph_clk+0x80>)
   9c5a6:	699a      	ldr	r2, [r3, #24]
   9c5a8:	687b      	ldr	r3, [r7, #4]
   9c5aa:	2101      	movs	r1, #1
   9c5ac:	fa01 f303 	lsl.w	r3, r1, r3
   9c5b0:	401a      	ands	r2, r3
   9c5b2:	687b      	ldr	r3, [r7, #4]
   9c5b4:	2101      	movs	r1, #1
   9c5b6:	fa01 f303 	lsl.w	r3, r1, r3
   9c5ba:	429a      	cmp	r2, r3
   9c5bc:	d01e      	beq.n	9c5fc <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   9c5be:	4a13      	ldr	r2, [pc, #76]	; (9c60c <pmc_enable_periph_clk+0x80>)
   9c5c0:	687b      	ldr	r3, [r7, #4]
   9c5c2:	2101      	movs	r1, #1
   9c5c4:	fa01 f303 	lsl.w	r3, r1, r3
   9c5c8:	6113      	str	r3, [r2, #16]
   9c5ca:	e017      	b.n	9c5fc <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   9c5cc:	687b      	ldr	r3, [r7, #4]
   9c5ce:	3b20      	subs	r3, #32
   9c5d0:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   9c5d2:	4b0e      	ldr	r3, [pc, #56]	; (9c60c <pmc_enable_periph_clk+0x80>)
   9c5d4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   9c5d8:	687b      	ldr	r3, [r7, #4]
   9c5da:	2101      	movs	r1, #1
   9c5dc:	fa01 f303 	lsl.w	r3, r1, r3
   9c5e0:	401a      	ands	r2, r3
   9c5e2:	687b      	ldr	r3, [r7, #4]
   9c5e4:	2101      	movs	r1, #1
   9c5e6:	fa01 f303 	lsl.w	r3, r1, r3
   9c5ea:	429a      	cmp	r2, r3
   9c5ec:	d006      	beq.n	9c5fc <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   9c5ee:	4a07      	ldr	r2, [pc, #28]	; (9c60c <pmc_enable_periph_clk+0x80>)
   9c5f0:	687b      	ldr	r3, [r7, #4]
   9c5f2:	2101      	movs	r1, #1
   9c5f4:	fa01 f303 	lsl.w	r3, r1, r3
   9c5f8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   9c5fc:	2300      	movs	r3, #0
}
   9c5fe:	4618      	mov	r0, r3
   9c600:	370c      	adds	r7, #12
   9c602:	46bd      	mov	sp, r7
   9c604:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c608:	4770      	bx	lr
   9c60a:	bf00      	nop
   9c60c:	400e0600 	.word	0x400e0600

0009c610 <pmc_set_writeprotect>:
 * \brief Enable or disable write protect of PMC registers.
 *
 * \param ul_enable 1 to enable, 0 to disable.
 */
void pmc_set_writeprotect(uint32_t ul_enable)
{
   9c610:	b480      	push	{r7}
   9c612:	b083      	sub	sp, #12
   9c614:	af00      	add	r7, sp, #0
   9c616:	6078      	str	r0, [r7, #4]
	if (ul_enable) {
   9c618:	687b      	ldr	r3, [r7, #4]
   9c61a:	2b00      	cmp	r3, #0
   9c61c:	d004      	beq.n	9c628 <pmc_set_writeprotect+0x18>
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE | PMC_WPMR_WPEN;
   9c61e:	4b07      	ldr	r3, [pc, #28]	; (9c63c <pmc_set_writeprotect+0x2c>)
   9c620:	4a07      	ldr	r2, [pc, #28]	; (9c640 <pmc_set_writeprotect+0x30>)
   9c622:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   9c626:	e003      	b.n	9c630 <pmc_set_writeprotect+0x20>
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE;
   9c628:	4b04      	ldr	r3, [pc, #16]	; (9c63c <pmc_set_writeprotect+0x2c>)
   9c62a:	4a06      	ldr	r2, [pc, #24]	; (9c644 <pmc_set_writeprotect+0x34>)
   9c62c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	}
}
   9c630:	370c      	adds	r7, #12
   9c632:	46bd      	mov	sp, r7
   9c634:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c638:	4770      	bx	lr
   9c63a:	bf00      	nop
   9c63c:	400e0600 	.word	0x400e0600
   9c640:	504d4301 	.word	0x504d4301
   9c644:	504d4300 	.word	0x504d4300

0009c648 <tc_start>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 */
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
   9c648:	b480      	push	{r7}
   9c64a:	b083      	sub	sp, #12
   9c64c:	af00      	add	r7, sp, #0
   9c64e:	6078      	str	r0, [r7, #4]
   9c650:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   9c652:	687a      	ldr	r2, [r7, #4]
   9c654:	683b      	ldr	r3, [r7, #0]
   9c656:	019b      	lsls	r3, r3, #6
   9c658:	4413      	add	r3, r2
   9c65a:	2205      	movs	r2, #5
   9c65c:	601a      	str	r2, [r3, #0]
}
   9c65e:	370c      	adds	r7, #12
   9c660:	46bd      	mov	sp, r7
   9c662:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c666:	4770      	bx	lr

0009c668 <tc_write_rc>:
 * \param ul_channel Channel to configure.
 * \param ul_value Value to set in register.
 */
void tc_write_rc(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_value)
{
   9c668:	b480      	push	{r7}
   9c66a:	b085      	sub	sp, #20
   9c66c:	af00      	add	r7, sp, #0
   9c66e:	60f8      	str	r0, [r7, #12]
   9c670:	60b9      	str	r1, [r7, #8]
   9c672:	607a      	str	r2, [r7, #4]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   9c674:	68fa      	ldr	r2, [r7, #12]
   9c676:	68bb      	ldr	r3, [r7, #8]
   9c678:	019b      	lsls	r3, r3, #6
   9c67a:	4413      	add	r3, r2
   9c67c:	3318      	adds	r3, #24
   9c67e:	687a      	ldr	r2, [r7, #4]
   9c680:	605a      	str	r2, [r3, #4]
}
   9c682:	3714      	adds	r7, #20
   9c684:	46bd      	mov	sp, r7
   9c686:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c68a:	4770      	bx	lr

0009c68c <tc_enable_interrupt>:
 * \param ul_channel Channel to configure.
 * \param ul_sources Interrupt sources bit map.
 */
void tc_enable_interrupt(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_sources)
{
   9c68c:	b480      	push	{r7}
   9c68e:	b087      	sub	sp, #28
   9c690:	af00      	add	r7, sp, #0
   9c692:	60f8      	str	r0, [r7, #12]
   9c694:	60b9      	str	r1, [r7, #8]
   9c696:	607a      	str	r2, [r7, #4]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   9c698:	68bb      	ldr	r3, [r7, #8]
   9c69a:	019b      	lsls	r3, r3, #6
   9c69c:	68fa      	ldr	r2, [r7, #12]
   9c69e:	4413      	add	r3, r2
   9c6a0:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
   9c6a2:	697b      	ldr	r3, [r7, #20]
   9c6a4:	687a      	ldr	r2, [r7, #4]
   9c6a6:	625a      	str	r2, [r3, #36]	; 0x24
}
   9c6a8:	371c      	adds	r7, #28
   9c6aa:	46bd      	mov	sp, r7
   9c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c6b0:	4770      	bx	lr
   9c6b2:	bf00      	nop

0009c6b4 <tc_get_status>:
 * \param ul_channel Channel to configure.
 *
 * \return The current TC status.
 */
uint32_t tc_get_status(Tc *p_tc, uint32_t ul_channel)
{
   9c6b4:	b480      	push	{r7}
   9c6b6:	b085      	sub	sp, #20
   9c6b8:	af00      	add	r7, sp, #0
   9c6ba:	6078      	str	r0, [r7, #4]
   9c6bc:	6039      	str	r1, [r7, #0]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   9c6be:	683b      	ldr	r3, [r7, #0]
   9c6c0:	019b      	lsls	r3, r3, #6
   9c6c2:	687a      	ldr	r2, [r7, #4]
   9c6c4:	4413      	add	r3, r2
   9c6c6:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
   9c6c8:	68fb      	ldr	r3, [r7, #12]
   9c6ca:	6a1b      	ldr	r3, [r3, #32]
}
   9c6cc:	4618      	mov	r0, r3
   9c6ce:	3714      	adds	r7, #20
   9c6d0:	46bd      	mov	sp, r7
   9c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c6d6:	4770      	bx	lr

0009c6d8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   9c6d8:	b480      	push	{r7}
   9c6da:	b085      	sub	sp, #20
   9c6dc:	af00      	add	r7, sp, #0
   9c6de:	6078      	str	r0, [r7, #4]
   9c6e0:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
   9c6e2:	2300      	movs	r3, #0
   9c6e4:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   9c6e6:	687b      	ldr	r3, [r7, #4]
   9c6e8:	22ac      	movs	r2, #172	; 0xac
   9c6ea:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   9c6ec:	683b      	ldr	r3, [r7, #0]
   9c6ee:	681a      	ldr	r2, [r3, #0]
   9c6f0:	683b      	ldr	r3, [r7, #0]
   9c6f2:	685b      	ldr	r3, [r3, #4]
   9c6f4:	fbb2 f3f3 	udiv	r3, r2, r3
   9c6f8:	091b      	lsrs	r3, r3, #4
   9c6fa:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   9c6fc:	68fb      	ldr	r3, [r7, #12]
   9c6fe:	2b00      	cmp	r3, #0
   9c700:	d003      	beq.n	9c70a <uart_init+0x32>
   9c702:	68fb      	ldr	r3, [r7, #12]
   9c704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   9c708:	d301      	bcc.n	9c70e <uart_init+0x36>
		return 1;
   9c70a:	2301      	movs	r3, #1
   9c70c:	e00f      	b.n	9c72e <uart_init+0x56>

	p_uart->UART_BRGR = cd;
   9c70e:	687b      	ldr	r3, [r7, #4]
   9c710:	68fa      	ldr	r2, [r7, #12]
   9c712:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   9c714:	683b      	ldr	r3, [r7, #0]
   9c716:	689a      	ldr	r2, [r3, #8]
   9c718:	687b      	ldr	r3, [r7, #4]
   9c71a:	605a      	str	r2, [r3, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   9c71c:	687b      	ldr	r3, [r7, #4]
   9c71e:	f240 2202 	movw	r2, #514	; 0x202
   9c722:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   9c726:	687b      	ldr	r3, [r7, #4]
   9c728:	2250      	movs	r2, #80	; 0x50
   9c72a:	601a      	str	r2, [r3, #0]

	return 0;
   9c72c:	2300      	movs	r3, #0
}
   9c72e:	4618      	mov	r0, r3
   9c730:	3714      	adds	r7, #20
   9c732:	46bd      	mov	sp, r7
   9c734:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c738:	4770      	bx	lr
   9c73a:	bf00      	nop

0009c73c <uart_enable_tx>:
 * \brief Enable UART transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
   9c73c:	b480      	push	{r7}
   9c73e:	b083      	sub	sp, #12
   9c740:	af00      	add	r7, sp, #0
   9c742:	6078      	str	r0, [r7, #4]
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
   9c744:	687b      	ldr	r3, [r7, #4]
   9c746:	2240      	movs	r2, #64	; 0x40
   9c748:	601a      	str	r2, [r3, #0]
}
   9c74a:	370c      	adds	r7, #12
   9c74c:	46bd      	mov	sp, r7
   9c74e:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c752:	4770      	bx	lr

0009c754 <uart_enable_rx>:
 * \brief Enable UART receiver.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
   9c754:	b480      	push	{r7}
   9c756:	b083      	sub	sp, #12
   9c758:	af00      	add	r7, sp, #0
   9c75a:	6078      	str	r0, [r7, #4]
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
   9c75c:	687b      	ldr	r3, [r7, #4]
   9c75e:	2210      	movs	r2, #16
   9c760:	601a      	str	r2, [r3, #0]
}
   9c762:	370c      	adds	r7, #12
   9c764:	46bd      	mov	sp, r7
   9c766:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c76a:	4770      	bx	lr

0009c76c <uart_enable>:
 * \brief Enable UART receiver and transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
   9c76c:	b480      	push	{r7}
   9c76e:	b083      	sub	sp, #12
   9c770:	af00      	add	r7, sp, #0
   9c772:	6078      	str	r0, [r7, #4]
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   9c774:	687b      	ldr	r3, [r7, #4]
   9c776:	2250      	movs	r2, #80	; 0x50
   9c778:	601a      	str	r2, [r3, #0]
}
   9c77a:	370c      	adds	r7, #12
   9c77c:	46bd      	mov	sp, r7
   9c77e:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c782:	4770      	bx	lr

0009c784 <uart_enable_interrupt>:
 *
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
   9c784:	b480      	push	{r7}
   9c786:	b083      	sub	sp, #12
   9c788:	af00      	add	r7, sp, #0
   9c78a:	6078      	str	r0, [r7, #4]
   9c78c:	6039      	str	r1, [r7, #0]
	p_uart->UART_IER = ul_sources;
   9c78e:	687b      	ldr	r3, [r7, #4]
   9c790:	683a      	ldr	r2, [r7, #0]
   9c792:	609a      	str	r2, [r3, #8]
}
   9c794:	370c      	adds	r7, #12
   9c796:	46bd      	mov	sp, r7
   9c798:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c79c:	4770      	bx	lr
   9c79e:	bf00      	nop

0009c7a0 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
   9c7a0:	b480      	push	{r7}
   9c7a2:	b083      	sub	sp, #12
   9c7a4:	af00      	add	r7, sp, #0
   9c7a6:	6078      	str	r0, [r7, #4]
   9c7a8:	460b      	mov	r3, r1
   9c7aa:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   9c7ac:	687b      	ldr	r3, [r7, #4]
   9c7ae:	695b      	ldr	r3, [r3, #20]
   9c7b0:	f003 0302 	and.w	r3, r3, #2
   9c7b4:	2b00      	cmp	r3, #0
   9c7b6:	d101      	bne.n	9c7bc <uart_write+0x1c>
		return 1;
   9c7b8:	2301      	movs	r3, #1
   9c7ba:	e00c      	b.n	9c7d6 <uart_write+0x36>
if(cl_console_sync != true)
   9c7bc:	4b09      	ldr	r3, [pc, #36]	; (9c7e4 <uart_write+0x44>)
   9c7be:	781b      	ldrb	r3, [r3, #0]
   9c7c0:	f083 0301 	eor.w	r3, r3, #1
   9c7c4:	b2db      	uxtb	r3, r3
   9c7c6:	2b00      	cmp	r3, #0
   9c7c8:	d001      	beq.n	9c7ce <uart_write+0x2e>
	return 1;
   9c7ca:	2301      	movs	r3, #1
   9c7cc:	e003      	b.n	9c7d6 <uart_write+0x36>
	/* Send character */
	
	p_uart->UART_THR = uc_data;
   9c7ce:	78fa      	ldrb	r2, [r7, #3]
   9c7d0:	687b      	ldr	r3, [r7, #4]
   9c7d2:	61da      	str	r2, [r3, #28]
	return 0;
   9c7d4:	2300      	movs	r3, #0
}
   9c7d6:	4618      	mov	r0, r3
   9c7d8:	370c      	adds	r7, #12
   9c7da:	46bd      	mov	sp, r7
   9c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c7e0:	4770      	bx	lr
   9c7e2:	bf00      	nop
   9c7e4:	20071d35 	.word	0x20071d35

0009c7e8 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
   9c7e8:	b480      	push	{r7}
   9c7ea:	b083      	sub	sp, #12
   9c7ec:	af00      	add	r7, sp, #0
   9c7ee:	6078      	str	r0, [r7, #4]
   9c7f0:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   9c7f2:	687b      	ldr	r3, [r7, #4]
   9c7f4:	695b      	ldr	r3, [r3, #20]
   9c7f6:	f003 0301 	and.w	r3, r3, #1
   9c7fa:	2b00      	cmp	r3, #0
   9c7fc:	d101      	bne.n	9c802 <uart_read+0x1a>
		return 1;
   9c7fe:	2301      	movs	r3, #1
   9c800:	e005      	b.n	9c80e <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   9c802:	687b      	ldr	r3, [r7, #4]
   9c804:	699b      	ldr	r3, [r3, #24]
   9c806:	b2da      	uxtb	r2, r3
   9c808:	683b      	ldr	r3, [r7, #0]
   9c80a:	701a      	strb	r2, [r3, #0]
	return 0;
   9c80c:	2300      	movs	r3, #0
}
   9c80e:	4618      	mov	r0, r3
   9c810:	370c      	adds	r7, #12
   9c812:	46bd      	mov	sp, r7
   9c814:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c818:	4770      	bx	lr
   9c81a:	bf00      	nop

0009c81c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   9c81c:	b480      	push	{r7}
   9c81e:	b089      	sub	sp, #36	; 0x24
   9c820:	af00      	add	r7, sp, #0
   9c822:	60f8      	str	r0, [r7, #12]
   9c824:	60b9      	str	r1, [r7, #8]
   9c826:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   9c828:	68bb      	ldr	r3, [r7, #8]
   9c82a:	011a      	lsls	r2, r3, #4
   9c82c:	687b      	ldr	r3, [r7, #4]
   9c82e:	429a      	cmp	r2, r3
   9c830:	d802      	bhi.n	9c838 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   9c832:	2310      	movs	r3, #16
   9c834:	61fb      	str	r3, [r7, #28]
   9c836:	e001      	b.n	9c83c <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   9c838:	2308      	movs	r3, #8
   9c83a:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   9c83c:	687b      	ldr	r3, [r7, #4]
   9c83e:	00da      	lsls	r2, r3, #3
   9c840:	69fb      	ldr	r3, [r7, #28]
   9c842:	68b9      	ldr	r1, [r7, #8]
   9c844:	fb01 f303 	mul.w	r3, r1, r3
   9c848:	085b      	lsrs	r3, r3, #1
   9c84a:	441a      	add	r2, r3
   9c84c:	69fb      	ldr	r3, [r7, #28]
   9c84e:	68b9      	ldr	r1, [r7, #8]
   9c850:	fb01 f303 	mul.w	r3, r1, r3
   9c854:	fbb2 f3f3 	udiv	r3, r2, r3
   9c858:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   9c85a:	69bb      	ldr	r3, [r7, #24]
   9c85c:	08db      	lsrs	r3, r3, #3
   9c85e:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   9c860:	69bb      	ldr	r3, [r7, #24]
   9c862:	f003 0307 	and.w	r3, r3, #7
   9c866:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   9c868:	697b      	ldr	r3, [r7, #20]
   9c86a:	2b00      	cmp	r3, #0
   9c86c:	d003      	beq.n	9c876 <usart_set_async_baudrate+0x5a>
   9c86e:	697b      	ldr	r3, [r7, #20]
   9c870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   9c874:	d301      	bcc.n	9c87a <usart_set_async_baudrate+0x5e>
		return 1;
   9c876:	2301      	movs	r3, #1
   9c878:	e00f      	b.n	9c89a <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   9c87a:	69fb      	ldr	r3, [r7, #28]
   9c87c:	2b08      	cmp	r3, #8
   9c87e:	d105      	bne.n	9c88c <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   9c880:	68fb      	ldr	r3, [r7, #12]
   9c882:	685b      	ldr	r3, [r3, #4]
   9c884:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   9c888:	68fb      	ldr	r3, [r7, #12]
   9c88a:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   9c88c:	693b      	ldr	r3, [r7, #16]
   9c88e:	041a      	lsls	r2, r3, #16
   9c890:	697b      	ldr	r3, [r7, #20]
   9c892:	431a      	orrs	r2, r3
   9c894:	68fb      	ldr	r3, [r7, #12]
   9c896:	621a      	str	r2, [r3, #32]

	return 0;
   9c898:	2300      	movs	r3, #0
}
   9c89a:	4618      	mov	r0, r3
   9c89c:	3724      	adds	r7, #36	; 0x24
   9c89e:	46bd      	mov	sp, r7
   9c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c8a4:	4770      	bx	lr
   9c8a6:	bf00      	nop

0009c8a8 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   9c8a8:	b580      	push	{r7, lr}
   9c8aa:	b082      	sub	sp, #8
   9c8ac:	af00      	add	r7, sp, #0
   9c8ae:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   9c8b0:	6878      	ldr	r0, [r7, #4]
   9c8b2:	4b0d      	ldr	r3, [pc, #52]	; (9c8e8 <usart_reset+0x40>)
   9c8b4:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   9c8b6:	687b      	ldr	r3, [r7, #4]
   9c8b8:	2200      	movs	r2, #0
   9c8ba:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   9c8bc:	687b      	ldr	r3, [r7, #4]
   9c8be:	2200      	movs	r2, #0
   9c8c0:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   9c8c2:	687b      	ldr	r3, [r7, #4]
   9c8c4:	2200      	movs	r2, #0
   9c8c6:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   9c8c8:	6878      	ldr	r0, [r7, #4]
   9c8ca:	4b08      	ldr	r3, [pc, #32]	; (9c8ec <usart_reset+0x44>)
   9c8cc:	4798      	blx	r3
	usart_reset_rx(p_usart);
   9c8ce:	6878      	ldr	r0, [r7, #4]
   9c8d0:	4b07      	ldr	r3, [pc, #28]	; (9c8f0 <usart_reset+0x48>)
   9c8d2:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   9c8d4:	6878      	ldr	r0, [r7, #4]
   9c8d6:	4b07      	ldr	r3, [pc, #28]	; (9c8f4 <usart_reset+0x4c>)
   9c8d8:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   9c8da:	6878      	ldr	r0, [r7, #4]
   9c8dc:	4b06      	ldr	r3, [pc, #24]	; (9c8f8 <usart_reset+0x50>)
   9c8de:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   9c8e0:	3708      	adds	r7, #8
   9c8e2:	46bd      	mov	sp, r7
   9c8e4:	bd80      	pop	{r7, pc}
   9c8e6:	bf00      	nop
   9c8e8:	0009ca81 	.word	0x0009ca81
   9c8ec:	0009c999 	.word	0x0009c999
   9c8f0:	0009c9c9 	.word	0x0009c9c9
   9c8f4:	0009c9e1 	.word	0x0009c9e1
   9c8f8:	0009c9fd 	.word	0x0009c9fd

0009c8fc <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   9c8fc:	b580      	push	{r7, lr}
   9c8fe:	b084      	sub	sp, #16
   9c900:	af00      	add	r7, sp, #0
   9c902:	60f8      	str	r0, [r7, #12]
   9c904:	60b9      	str	r1, [r7, #8]
   9c906:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   9c908:	68f8      	ldr	r0, [r7, #12]
   9c90a:	4b1a      	ldr	r3, [pc, #104]	; (9c974 <usart_init_rs232+0x78>)
   9c90c:	4798      	blx	r3

	ul_reg_val = 0;
   9c90e:	4b1a      	ldr	r3, [pc, #104]	; (9c978 <usart_init_rs232+0x7c>)
   9c910:	2200      	movs	r2, #0
   9c912:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   9c914:	68bb      	ldr	r3, [r7, #8]
   9c916:	2b00      	cmp	r3, #0
   9c918:	d009      	beq.n	9c92e <usart_init_rs232+0x32>
   9c91a:	68bb      	ldr	r3, [r7, #8]
   9c91c:	681b      	ldr	r3, [r3, #0]
   9c91e:	68f8      	ldr	r0, [r7, #12]
   9c920:	4619      	mov	r1, r3
   9c922:	687a      	ldr	r2, [r7, #4]
   9c924:	4b15      	ldr	r3, [pc, #84]	; (9c97c <usart_init_rs232+0x80>)
   9c926:	4798      	blx	r3
   9c928:	4603      	mov	r3, r0
   9c92a:	2b00      	cmp	r3, #0
   9c92c:	d001      	beq.n	9c932 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   9c92e:	2301      	movs	r3, #1
   9c930:	e01b      	b.n	9c96a <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   9c932:	68bb      	ldr	r3, [r7, #8]
   9c934:	685a      	ldr	r2, [r3, #4]
   9c936:	68bb      	ldr	r3, [r7, #8]
   9c938:	689b      	ldr	r3, [r3, #8]
   9c93a:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   9c93c:	68bb      	ldr	r3, [r7, #8]
   9c93e:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   9c940:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   9c942:	68bb      	ldr	r3, [r7, #8]
   9c944:	68db      	ldr	r3, [r3, #12]
   9c946:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   9c948:	4b0b      	ldr	r3, [pc, #44]	; (9c978 <usart_init_rs232+0x7c>)
   9c94a:	681b      	ldr	r3, [r3, #0]
   9c94c:	4313      	orrs	r3, r2
   9c94e:	4a0a      	ldr	r2, [pc, #40]	; (9c978 <usart_init_rs232+0x7c>)
   9c950:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   9c952:	4b09      	ldr	r3, [pc, #36]	; (9c978 <usart_init_rs232+0x7c>)
   9c954:	681b      	ldr	r3, [r3, #0]
   9c956:	4a08      	ldr	r2, [pc, #32]	; (9c978 <usart_init_rs232+0x7c>)
   9c958:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
   9c95a:	68fb      	ldr	r3, [r7, #12]
   9c95c:	685a      	ldr	r2, [r3, #4]
   9c95e:	4b06      	ldr	r3, [pc, #24]	; (9c978 <usart_init_rs232+0x7c>)
   9c960:	681b      	ldr	r3, [r3, #0]
   9c962:	431a      	orrs	r2, r3
   9c964:	68fb      	ldr	r3, [r7, #12]
   9c966:	605a      	str	r2, [r3, #4]

	return 0;
   9c968:	2300      	movs	r3, #0
}
   9c96a:	4618      	mov	r0, r3
   9c96c:	3710      	adds	r7, #16
   9c96e:	46bd      	mov	sp, r7
   9c970:	bd80      	pop	{r7, pc}
   9c972:	bf00      	nop
   9c974:	0009c8a9 	.word	0x0009c8a9
   9c978:	20071d28 	.word	0x20071d28
   9c97c:	0009c81d 	.word	0x0009c81d

0009c980 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   9c980:	b480      	push	{r7}
   9c982:	b083      	sub	sp, #12
   9c984:	af00      	add	r7, sp, #0
   9c986:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   9c988:	687b      	ldr	r3, [r7, #4]
   9c98a:	2240      	movs	r2, #64	; 0x40
   9c98c:	601a      	str	r2, [r3, #0]
}
   9c98e:	370c      	adds	r7, #12
   9c990:	46bd      	mov	sp, r7
   9c992:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c996:	4770      	bx	lr

0009c998 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   9c998:	b480      	push	{r7}
   9c99a:	b083      	sub	sp, #12
   9c99c:	af00      	add	r7, sp, #0
   9c99e:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   9c9a0:	687b      	ldr	r3, [r7, #4]
   9c9a2:	2288      	movs	r2, #136	; 0x88
   9c9a4:	601a      	str	r2, [r3, #0]
}
   9c9a6:	370c      	adds	r7, #12
   9c9a8:	46bd      	mov	sp, r7
   9c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c9ae:	4770      	bx	lr

0009c9b0 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   9c9b0:	b480      	push	{r7}
   9c9b2:	b083      	sub	sp, #12
   9c9b4:	af00      	add	r7, sp, #0
   9c9b6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   9c9b8:	687b      	ldr	r3, [r7, #4]
   9c9ba:	2210      	movs	r2, #16
   9c9bc:	601a      	str	r2, [r3, #0]
}
   9c9be:	370c      	adds	r7, #12
   9c9c0:	46bd      	mov	sp, r7
   9c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c9c6:	4770      	bx	lr

0009c9c8 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   9c9c8:	b480      	push	{r7}
   9c9ca:	b083      	sub	sp, #12
   9c9cc:	af00      	add	r7, sp, #0
   9c9ce:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   9c9d0:	687b      	ldr	r3, [r7, #4]
   9c9d2:	2224      	movs	r2, #36	; 0x24
   9c9d4:	601a      	str	r2, [r3, #0]
}
   9c9d6:	370c      	adds	r7, #12
   9c9d8:	46bd      	mov	sp, r7
   9c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c9de:	4770      	bx	lr

0009c9e0 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   9c9e0:	b480      	push	{r7}
   9c9e2:	b083      	sub	sp, #12
   9c9e4:	af00      	add	r7, sp, #0
   9c9e6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   9c9e8:	687b      	ldr	r3, [r7, #4]
   9c9ea:	f44f 7280 	mov.w	r2, #256	; 0x100
   9c9ee:	601a      	str	r2, [r3, #0]
}
   9c9f0:	370c      	adds	r7, #12
   9c9f2:	46bd      	mov	sp, r7
   9c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c9f8:	4770      	bx	lr
   9c9fa:	bf00      	nop

0009c9fc <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   9c9fc:	b480      	push	{r7}
   9c9fe:	b083      	sub	sp, #12
   9ca00:	af00      	add	r7, sp, #0
   9ca02:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   9ca04:	687b      	ldr	r3, [r7, #4]
   9ca06:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   9ca0a:	601a      	str	r2, [r3, #0]
}
   9ca0c:	370c      	adds	r7, #12
   9ca0e:	46bd      	mov	sp, r7
   9ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
   9ca14:	4770      	bx	lr
   9ca16:	bf00      	nop

0009ca18 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   9ca18:	b480      	push	{r7}
   9ca1a:	b083      	sub	sp, #12
   9ca1c:	af00      	add	r7, sp, #0
   9ca1e:	6078      	str	r0, [r7, #4]
   9ca20:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   9ca22:	687b      	ldr	r3, [r7, #4]
   9ca24:	695b      	ldr	r3, [r3, #20]
   9ca26:	f003 0302 	and.w	r3, r3, #2
   9ca2a:	2b00      	cmp	r3, #0
   9ca2c:	d101      	bne.n	9ca32 <usart_write+0x1a>
		return 1;
   9ca2e:	2301      	movs	r3, #1
   9ca30:	e005      	b.n	9ca3e <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   9ca32:	683b      	ldr	r3, [r7, #0]
   9ca34:	f3c3 0208 	ubfx	r2, r3, #0, #9
   9ca38:	687b      	ldr	r3, [r7, #4]
   9ca3a:	61da      	str	r2, [r3, #28]
	return 0;
   9ca3c:	2300      	movs	r3, #0
}
   9ca3e:	4618      	mov	r0, r3
   9ca40:	370c      	adds	r7, #12
   9ca42:	46bd      	mov	sp, r7
   9ca44:	f85d 7b04 	ldr.w	r7, [sp], #4
   9ca48:	4770      	bx	lr
   9ca4a:	bf00      	nop

0009ca4c <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
   9ca4c:	b480      	push	{r7}
   9ca4e:	b083      	sub	sp, #12
   9ca50:	af00      	add	r7, sp, #0
   9ca52:	6078      	str	r0, [r7, #4]
   9ca54:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   9ca56:	687b      	ldr	r3, [r7, #4]
   9ca58:	695b      	ldr	r3, [r3, #20]
   9ca5a:	f003 0301 	and.w	r3, r3, #1
   9ca5e:	2b00      	cmp	r3, #0
   9ca60:	d101      	bne.n	9ca66 <usart_read+0x1a>
		return 1;
   9ca62:	2301      	movs	r3, #1
   9ca64:	e006      	b.n	9ca74 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   9ca66:	687b      	ldr	r3, [r7, #4]
   9ca68:	699b      	ldr	r3, [r3, #24]
   9ca6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
   9ca6e:	683b      	ldr	r3, [r7, #0]
   9ca70:	601a      	str	r2, [r3, #0]

	return 0;
   9ca72:	2300      	movs	r3, #0
}
   9ca74:	4618      	mov	r0, r3
   9ca76:	370c      	adds	r7, #12
   9ca78:	46bd      	mov	sp, r7
   9ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
   9ca7e:	4770      	bx	lr

0009ca80 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   9ca80:	b480      	push	{r7}
   9ca82:	b083      	sub	sp, #12
   9ca84:	af00      	add	r7, sp, #0
   9ca86:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
   9ca88:	687b      	ldr	r3, [r7, #4]
   9ca8a:	4a04      	ldr	r2, [pc, #16]	; (9ca9c <usart_disable_writeprotect+0x1c>)
   9ca8c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   9ca90:	370c      	adds	r7, #12
   9ca92:	46bd      	mov	sp, r7
   9ca94:	f85d 7b04 	ldr.w	r7, [sp], #4
   9ca98:	4770      	bx	lr
   9ca9a:	bf00      	nop
   9ca9c:	55534100 	.word	0x55534100

0009caa0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   9caa0:	b480      	push	{r7}
   9caa2:	af00      	add	r7, sp, #0
	while (1) {
	}
   9caa4:	e7fe      	b.n	9caa4 <Dummy_Handler+0x4>
   9caa6:	bf00      	nop

0009caa8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   9caa8:	b580      	push	{r7, lr}
   9caaa:	b082      	sub	sp, #8
   9caac:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   9caae:	4b1e      	ldr	r3, [pc, #120]	; (9cb28 <Reset_Handler+0x80>)
   9cab0:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   9cab2:	4b1e      	ldr	r3, [pc, #120]	; (9cb2c <Reset_Handler+0x84>)
   9cab4:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   9cab6:	687a      	ldr	r2, [r7, #4]
   9cab8:	683b      	ldr	r3, [r7, #0]
   9caba:	429a      	cmp	r2, r3
   9cabc:	d00c      	beq.n	9cad8 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   9cabe:	e007      	b.n	9cad0 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   9cac0:	683b      	ldr	r3, [r7, #0]
   9cac2:	1d1a      	adds	r2, r3, #4
   9cac4:	603a      	str	r2, [r7, #0]
   9cac6:	687a      	ldr	r2, [r7, #4]
   9cac8:	1d11      	adds	r1, r2, #4
   9caca:	6079      	str	r1, [r7, #4]
   9cacc:	6812      	ldr	r2, [r2, #0]
   9cace:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   9cad0:	683b      	ldr	r3, [r7, #0]
   9cad2:	4a17      	ldr	r2, [pc, #92]	; (9cb30 <Reset_Handler+0x88>)
   9cad4:	4293      	cmp	r3, r2
   9cad6:	d3f3      	bcc.n	9cac0 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   9cad8:	4b16      	ldr	r3, [pc, #88]	; (9cb34 <Reset_Handler+0x8c>)
   9cada:	603b      	str	r3, [r7, #0]
   9cadc:	e004      	b.n	9cae8 <Reset_Handler+0x40>
		*pDest++ = 0;
   9cade:	683b      	ldr	r3, [r7, #0]
   9cae0:	1d1a      	adds	r2, r3, #4
   9cae2:	603a      	str	r2, [r7, #0]
   9cae4:	2200      	movs	r2, #0
   9cae6:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   9cae8:	683b      	ldr	r3, [r7, #0]
   9caea:	4a13      	ldr	r2, [pc, #76]	; (9cb38 <Reset_Handler+0x90>)
   9caec:	4293      	cmp	r3, r2
   9caee:	d3f6      	bcc.n	9cade <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   9caf0:	4b12      	ldr	r3, [pc, #72]	; (9cb3c <Reset_Handler+0x94>)
   9caf2:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   9caf4:	4a12      	ldr	r2, [pc, #72]	; (9cb40 <Reset_Handler+0x98>)
   9caf6:	687b      	ldr	r3, [r7, #4]
   9caf8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   9cafc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   9cb00:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   9cb02:	687b      	ldr	r3, [r7, #4]
   9cb04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   9cb08:	d309      	bcc.n	9cb1e <Reset_Handler+0x76>
   9cb0a:	687b      	ldr	r3, [r7, #4]
   9cb0c:	4a0d      	ldr	r2, [pc, #52]	; (9cb44 <Reset_Handler+0x9c>)
   9cb0e:	4293      	cmp	r3, r2
   9cb10:	d805      	bhi.n	9cb1e <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   9cb12:	4a0b      	ldr	r2, [pc, #44]	; (9cb40 <Reset_Handler+0x98>)
   9cb14:	4b0a      	ldr	r3, [pc, #40]	; (9cb40 <Reset_Handler+0x98>)
   9cb16:	689b      	ldr	r3, [r3, #8]
   9cb18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   9cb1c:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   9cb1e:	4b0a      	ldr	r3, [pc, #40]	; (9cb48 <Reset_Handler+0xa0>)
   9cb20:	4798      	blx	r3

	/* Branch to main function */
	main();
   9cb22:	4b0a      	ldr	r3, [pc, #40]	; (9cb4c <Reset_Handler+0xa4>)
   9cb24:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   9cb26:	e7fe      	b.n	9cb26 <Reset_Handler+0x7e>
   9cb28:	000aa740 	.word	0x000aa740
   9cb2c:	20070000 	.word	0x20070000
   9cb30:	200717d4 	.word	0x200717d4
   9cb34:	200717d4 	.word	0x200717d4
   9cb38:	20072a60 	.word	0x20072a60
   9cb3c:	00080000 	.word	0x00080000
   9cb40:	e000ed00 	.word	0xe000ed00
   9cb44:	200fffff 	.word	0x200fffff
   9cb48:	000a871d 	.word	0x000a871d
   9cb4c:	0008bc01 	.word	0x0008bc01

0009cb50 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   9cb50:	b480      	push	{r7}
   9cb52:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   9cb54:	4b56      	ldr	r3, [pc, #344]	; (9ccb0 <SystemCoreClockUpdate+0x160>)
   9cb56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9cb58:	f003 0303 	and.w	r3, r3, #3
   9cb5c:	2b03      	cmp	r3, #3
   9cb5e:	f200 808a 	bhi.w	9cc76 <SystemCoreClockUpdate+0x126>
   9cb62:	a201      	add	r2, pc, #4	; (adr r2, 9cb68 <SystemCoreClockUpdate+0x18>)
   9cb64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9cb68:	0009cb79 	.word	0x0009cb79
   9cb6c:	0009cb99 	.word	0x0009cb99
   9cb70:	0009cbe9 	.word	0x0009cbe9
   9cb74:	0009cbe9 	.word	0x0009cbe9
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   9cb78:	4b4e      	ldr	r3, [pc, #312]	; (9ccb4 <SystemCoreClockUpdate+0x164>)
   9cb7a:	695b      	ldr	r3, [r3, #20]
   9cb7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   9cb80:	2b00      	cmp	r3, #0
   9cb82:	d004      	beq.n	9cb8e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   9cb84:	4b4c      	ldr	r3, [pc, #304]	; (9ccb8 <SystemCoreClockUpdate+0x168>)
   9cb86:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   9cb8a:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   9cb8c:	e073      	b.n	9cc76 <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   9cb8e:	4b4a      	ldr	r3, [pc, #296]	; (9ccb8 <SystemCoreClockUpdate+0x168>)
   9cb90:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   9cb94:	601a      	str	r2, [r3, #0]
		}
		break;
   9cb96:	e06e      	b.n	9cc76 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   9cb98:	4b45      	ldr	r3, [pc, #276]	; (9ccb0 <SystemCoreClockUpdate+0x160>)
   9cb9a:	6a1b      	ldr	r3, [r3, #32]
   9cb9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   9cba0:	2b00      	cmp	r3, #0
   9cba2:	d003      	beq.n	9cbac <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   9cba4:	4b44      	ldr	r3, [pc, #272]	; (9ccb8 <SystemCoreClockUpdate+0x168>)
   9cba6:	4a45      	ldr	r2, [pc, #276]	; (9ccbc <SystemCoreClockUpdate+0x16c>)
   9cba8:	601a      	str	r2, [r3, #0]
   9cbaa:	e01c      	b.n	9cbe6 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   9cbac:	4b42      	ldr	r3, [pc, #264]	; (9ccb8 <SystemCoreClockUpdate+0x168>)
   9cbae:	4a44      	ldr	r2, [pc, #272]	; (9ccc0 <SystemCoreClockUpdate+0x170>)
   9cbb0:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   9cbb2:	4b3f      	ldr	r3, [pc, #252]	; (9ccb0 <SystemCoreClockUpdate+0x160>)
   9cbb4:	6a1b      	ldr	r3, [r3, #32]
   9cbb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   9cbba:	2b10      	cmp	r3, #16
   9cbbc:	d004      	beq.n	9cbc8 <SystemCoreClockUpdate+0x78>
   9cbbe:	2b20      	cmp	r3, #32
   9cbc0:	d008      	beq.n	9cbd4 <SystemCoreClockUpdate+0x84>
   9cbc2:	2b00      	cmp	r3, #0
   9cbc4:	d00e      	beq.n	9cbe4 <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   9cbc6:	e00e      	b.n	9cbe6 <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   9cbc8:	4b3b      	ldr	r3, [pc, #236]	; (9ccb8 <SystemCoreClockUpdate+0x168>)
   9cbca:	681b      	ldr	r3, [r3, #0]
   9cbcc:	005b      	lsls	r3, r3, #1
   9cbce:	4a3a      	ldr	r2, [pc, #232]	; (9ccb8 <SystemCoreClockUpdate+0x168>)
   9cbd0:	6013      	str	r3, [r2, #0]
				break;
   9cbd2:	e008      	b.n	9cbe6 <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   9cbd4:	4b38      	ldr	r3, [pc, #224]	; (9ccb8 <SystemCoreClockUpdate+0x168>)
   9cbd6:	681a      	ldr	r2, [r3, #0]
   9cbd8:	4613      	mov	r3, r2
   9cbda:	005b      	lsls	r3, r3, #1
   9cbdc:	4413      	add	r3, r2
   9cbde:	4a36      	ldr	r2, [pc, #216]	; (9ccb8 <SystemCoreClockUpdate+0x168>)
   9cbe0:	6013      	str	r3, [r2, #0]
				break;
   9cbe2:	e000      	b.n	9cbe6 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   9cbe4:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   9cbe6:	e046      	b.n	9cc76 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   9cbe8:	4b31      	ldr	r3, [pc, #196]	; (9ccb0 <SystemCoreClockUpdate+0x160>)
   9cbea:	6a1b      	ldr	r3, [r3, #32]
   9cbec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   9cbf0:	2b00      	cmp	r3, #0
   9cbf2:	d003      	beq.n	9cbfc <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   9cbf4:	4b30      	ldr	r3, [pc, #192]	; (9ccb8 <SystemCoreClockUpdate+0x168>)
   9cbf6:	4a31      	ldr	r2, [pc, #196]	; (9ccbc <SystemCoreClockUpdate+0x16c>)
   9cbf8:	601a      	str	r2, [r3, #0]
   9cbfa:	e01c      	b.n	9cc36 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   9cbfc:	4b2e      	ldr	r3, [pc, #184]	; (9ccb8 <SystemCoreClockUpdate+0x168>)
   9cbfe:	4a30      	ldr	r2, [pc, #192]	; (9ccc0 <SystemCoreClockUpdate+0x170>)
   9cc00:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   9cc02:	4b2b      	ldr	r3, [pc, #172]	; (9ccb0 <SystemCoreClockUpdate+0x160>)
   9cc04:	6a1b      	ldr	r3, [r3, #32]
   9cc06:	f003 0370 	and.w	r3, r3, #112	; 0x70
   9cc0a:	2b10      	cmp	r3, #16
   9cc0c:	d004      	beq.n	9cc18 <SystemCoreClockUpdate+0xc8>
   9cc0e:	2b20      	cmp	r3, #32
   9cc10:	d008      	beq.n	9cc24 <SystemCoreClockUpdate+0xd4>
   9cc12:	2b00      	cmp	r3, #0
   9cc14:	d00e      	beq.n	9cc34 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   9cc16:	e00e      	b.n	9cc36 <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   9cc18:	4b27      	ldr	r3, [pc, #156]	; (9ccb8 <SystemCoreClockUpdate+0x168>)
   9cc1a:	681b      	ldr	r3, [r3, #0]
   9cc1c:	005b      	lsls	r3, r3, #1
   9cc1e:	4a26      	ldr	r2, [pc, #152]	; (9ccb8 <SystemCoreClockUpdate+0x168>)
   9cc20:	6013      	str	r3, [r2, #0]
				break;
   9cc22:	e008      	b.n	9cc36 <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   9cc24:	4b24      	ldr	r3, [pc, #144]	; (9ccb8 <SystemCoreClockUpdate+0x168>)
   9cc26:	681a      	ldr	r2, [r3, #0]
   9cc28:	4613      	mov	r3, r2
   9cc2a:	005b      	lsls	r3, r3, #1
   9cc2c:	4413      	add	r3, r2
   9cc2e:	4a22      	ldr	r2, [pc, #136]	; (9ccb8 <SystemCoreClockUpdate+0x168>)
   9cc30:	6013      	str	r3, [r2, #0]
				break;
   9cc32:	e000      	b.n	9cc36 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   9cc34:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   9cc36:	4b1e      	ldr	r3, [pc, #120]	; (9ccb0 <SystemCoreClockUpdate+0x160>)
   9cc38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9cc3a:	f003 0303 	and.w	r3, r3, #3
   9cc3e:	2b02      	cmp	r3, #2
   9cc40:	d115      	bne.n	9cc6e <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   9cc42:	4b1b      	ldr	r3, [pc, #108]	; (9ccb0 <SystemCoreClockUpdate+0x160>)
   9cc44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   9cc46:	4b1f      	ldr	r3, [pc, #124]	; (9ccc4 <SystemCoreClockUpdate+0x174>)
   9cc48:	4013      	ands	r3, r2
   9cc4a:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   9cc4c:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   9cc4e:	4a1a      	ldr	r2, [pc, #104]	; (9ccb8 <SystemCoreClockUpdate+0x168>)
   9cc50:	6812      	ldr	r2, [r2, #0]
   9cc52:	fb02 f303 	mul.w	r3, r2, r3
   9cc56:	4a18      	ldr	r2, [pc, #96]	; (9ccb8 <SystemCoreClockUpdate+0x168>)
   9cc58:	6013      	str	r3, [r2, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   9cc5a:	4b15      	ldr	r3, [pc, #84]	; (9ccb0 <SystemCoreClockUpdate+0x160>)
   9cc5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   9cc5e:	b2db      	uxtb	r3, r3
   9cc60:	4a15      	ldr	r2, [pc, #84]	; (9ccb8 <SystemCoreClockUpdate+0x168>)
   9cc62:	6812      	ldr	r2, [r2, #0]
   9cc64:	fbb2 f3f3 	udiv	r3, r2, r3
   9cc68:	4a13      	ldr	r2, [pc, #76]	; (9ccb8 <SystemCoreClockUpdate+0x168>)
   9cc6a:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   9cc6c:	e002      	b.n	9cc74 <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   9cc6e:	4b12      	ldr	r3, [pc, #72]	; (9ccb8 <SystemCoreClockUpdate+0x168>)
   9cc70:	4a15      	ldr	r2, [pc, #84]	; (9ccc8 <SystemCoreClockUpdate+0x178>)
   9cc72:	601a      	str	r2, [r3, #0]
		}
		break;
   9cc74:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   9cc76:	4b0e      	ldr	r3, [pc, #56]	; (9ccb0 <SystemCoreClockUpdate+0x160>)
   9cc78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9cc7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   9cc7e:	2b70      	cmp	r3, #112	; 0x70
   9cc80:	d108      	bne.n	9cc94 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   9cc82:	4b0d      	ldr	r3, [pc, #52]	; (9ccb8 <SystemCoreClockUpdate+0x168>)
   9cc84:	681b      	ldr	r3, [r3, #0]
   9cc86:	4a11      	ldr	r2, [pc, #68]	; (9cccc <SystemCoreClockUpdate+0x17c>)
   9cc88:	fba2 2303 	umull	r2, r3, r2, r3
   9cc8c:	085b      	lsrs	r3, r3, #1
   9cc8e:	4a0a      	ldr	r2, [pc, #40]	; (9ccb8 <SystemCoreClockUpdate+0x168>)
   9cc90:	6013      	str	r3, [r2, #0]
   9cc92:	e009      	b.n	9cca8 <SystemCoreClockUpdate+0x158>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   9cc94:	4b06      	ldr	r3, [pc, #24]	; (9ccb0 <SystemCoreClockUpdate+0x160>)
   9cc96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9cc98:	f003 0370 	and.w	r3, r3, #112	; 0x70
   9cc9c:	091a      	lsrs	r2, r3, #4
   9cc9e:	4b06      	ldr	r3, [pc, #24]	; (9ccb8 <SystemCoreClockUpdate+0x168>)
   9cca0:	681b      	ldr	r3, [r3, #0]
   9cca2:	40d3      	lsrs	r3, r2
   9cca4:	4a04      	ldr	r2, [pc, #16]	; (9ccb8 <SystemCoreClockUpdate+0x168>)
   9cca6:	6013      	str	r3, [r2, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   9cca8:	46bd      	mov	sp, r7
   9ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
   9ccae:	4770      	bx	lr
   9ccb0:	400e0600 	.word	0x400e0600
   9ccb4:	400e1a10 	.word	0x400e1a10
   9ccb8:	20070d38 	.word	0x20070d38
   9ccbc:	00b71b00 	.word	0x00b71b00
   9ccc0:	003d0900 	.word	0x003d0900
   9ccc4:	07ff0000 	.word	0x07ff0000
   9ccc8:	0e4e1c00 	.word	0x0e4e1c00
   9cccc:	aaaaaaab 	.word	0xaaaaaaab

0009ccd0 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   9ccd0:	b480      	push	{r7}
   9ccd2:	b083      	sub	sp, #12
   9ccd4:	af00      	add	r7, sp, #0
   9ccd6:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   9ccd8:	687b      	ldr	r3, [r7, #4]
   9ccda:	4a25      	ldr	r2, [pc, #148]	; (9cd70 <system_init_flash+0xa0>)
   9ccdc:	4293      	cmp	r3, r2
   9ccde:	d806      	bhi.n	9ccee <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   9cce0:	4b24      	ldr	r3, [pc, #144]	; (9cd74 <system_init_flash+0xa4>)
   9cce2:	2200      	movs	r2, #0
   9cce4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   9cce6:	4b24      	ldr	r3, [pc, #144]	; (9cd78 <system_init_flash+0xa8>)
   9cce8:	2200      	movs	r2, #0
   9ccea:	601a      	str	r2, [r3, #0]
   9ccec:	e03b      	b.n	9cd66 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   9ccee:	687b      	ldr	r3, [r7, #4]
   9ccf0:	4a22      	ldr	r2, [pc, #136]	; (9cd7c <system_init_flash+0xac>)
   9ccf2:	4293      	cmp	r3, r2
   9ccf4:	d808      	bhi.n	9cd08 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   9ccf6:	4b1f      	ldr	r3, [pc, #124]	; (9cd74 <system_init_flash+0xa4>)
   9ccf8:	f44f 7280 	mov.w	r2, #256	; 0x100
   9ccfc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   9ccfe:	4b1e      	ldr	r3, [pc, #120]	; (9cd78 <system_init_flash+0xa8>)
   9cd00:	f44f 7280 	mov.w	r2, #256	; 0x100
   9cd04:	601a      	str	r2, [r3, #0]
   9cd06:	e02e      	b.n	9cd66 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   9cd08:	687b      	ldr	r3, [r7, #4]
   9cd0a:	4a1d      	ldr	r2, [pc, #116]	; (9cd80 <system_init_flash+0xb0>)
   9cd0c:	4293      	cmp	r3, r2
   9cd0e:	d808      	bhi.n	9cd22 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   9cd10:	4b18      	ldr	r3, [pc, #96]	; (9cd74 <system_init_flash+0xa4>)
   9cd12:	f44f 7200 	mov.w	r2, #512	; 0x200
   9cd16:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   9cd18:	4b17      	ldr	r3, [pc, #92]	; (9cd78 <system_init_flash+0xa8>)
   9cd1a:	f44f 7200 	mov.w	r2, #512	; 0x200
   9cd1e:	601a      	str	r2, [r3, #0]
   9cd20:	e021      	b.n	9cd66 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   9cd22:	687b      	ldr	r3, [r7, #4]
   9cd24:	4a17      	ldr	r2, [pc, #92]	; (9cd84 <system_init_flash+0xb4>)
   9cd26:	4293      	cmp	r3, r2
   9cd28:	d808      	bhi.n	9cd3c <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   9cd2a:	4b12      	ldr	r3, [pc, #72]	; (9cd74 <system_init_flash+0xa4>)
   9cd2c:	f44f 7240 	mov.w	r2, #768	; 0x300
   9cd30:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   9cd32:	4b11      	ldr	r3, [pc, #68]	; (9cd78 <system_init_flash+0xa8>)
   9cd34:	f44f 7240 	mov.w	r2, #768	; 0x300
   9cd38:	601a      	str	r2, [r3, #0]
   9cd3a:	e014      	b.n	9cd66 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   9cd3c:	687b      	ldr	r3, [r7, #4]
   9cd3e:	4a12      	ldr	r2, [pc, #72]	; (9cd88 <system_init_flash+0xb8>)
   9cd40:	4293      	cmp	r3, r2
   9cd42:	d808      	bhi.n	9cd56 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   9cd44:	4b0b      	ldr	r3, [pc, #44]	; (9cd74 <system_init_flash+0xa4>)
   9cd46:	f44f 6280 	mov.w	r2, #1024	; 0x400
   9cd4a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
   9cd4c:	4b0a      	ldr	r3, [pc, #40]	; (9cd78 <system_init_flash+0xa8>)
   9cd4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   9cd52:	601a      	str	r2, [r3, #0]
   9cd54:	e007      	b.n	9cd66 <system_init_flash+0x96>
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   9cd56:	4b07      	ldr	r3, [pc, #28]	; (9cd74 <system_init_flash+0xa4>)
   9cd58:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   9cd5c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   9cd5e:	4b06      	ldr	r3, [pc, #24]	; (9cd78 <system_init_flash+0xa8>)
   9cd60:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   9cd64:	601a      	str	r2, [r3, #0]
	}
}
   9cd66:	370c      	adds	r7, #12
   9cd68:	46bd      	mov	sp, r7
   9cd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
   9cd6e:	4770      	bx	lr
   9cd70:	0121eabf 	.word	0x0121eabf
   9cd74:	400e0a00 	.word	0x400e0a00
   9cd78:	400e0c00 	.word	0x400e0c00
   9cd7c:	02faf07f 	.word	0x02faf07f
   9cd80:	03d08fff 	.word	0x03d08fff
   9cd84:	04c4b3ff 	.word	0x04c4b3ff
   9cd88:	055d4a7f 	.word	0x055d4a7f

0009cd8c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   9cd8c:	b480      	push	{r7}
   9cd8e:	b085      	sub	sp, #20
   9cd90:	af00      	add	r7, sp, #0
   9cd92:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   9cd94:	4b0b      	ldr	r3, [pc, #44]	; (9cdc4 <_sbrk+0x38>)
   9cd96:	681b      	ldr	r3, [r3, #0]
   9cd98:	2b00      	cmp	r3, #0
   9cd9a:	d102      	bne.n	9cda2 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   9cd9c:	4b09      	ldr	r3, [pc, #36]	; (9cdc4 <_sbrk+0x38>)
   9cd9e:	4a0a      	ldr	r2, [pc, #40]	; (9cdc8 <_sbrk+0x3c>)
   9cda0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   9cda2:	4b08      	ldr	r3, [pc, #32]	; (9cdc4 <_sbrk+0x38>)
   9cda4:	681b      	ldr	r3, [r3, #0]
   9cda6:	60fb      	str	r3, [r7, #12]

	heap += incr;
   9cda8:	4b06      	ldr	r3, [pc, #24]	; (9cdc4 <_sbrk+0x38>)
   9cdaa:	681a      	ldr	r2, [r3, #0]
   9cdac:	687b      	ldr	r3, [r7, #4]
   9cdae:	4413      	add	r3, r2
   9cdb0:	4a04      	ldr	r2, [pc, #16]	; (9cdc4 <_sbrk+0x38>)
   9cdb2:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   9cdb4:	68fb      	ldr	r3, [r7, #12]
}
   9cdb6:	4618      	mov	r0, r3
   9cdb8:	3714      	adds	r7, #20
   9cdba:	46bd      	mov	sp, r7
   9cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
   9cdc0:	4770      	bx	lr
   9cdc2:	bf00      	nop
   9cdc4:	20071d2c 	.word	0x20071d2c
   9cdc8:	20074a60 	.word	0x20074a60

0009cdcc <_close>:
{
	return -1;
}

extern int _close(int file)
{
   9cdcc:	b480      	push	{r7}
   9cdce:	b083      	sub	sp, #12
   9cdd0:	af00      	add	r7, sp, #0
   9cdd2:	6078      	str	r0, [r7, #4]
	return -1;
   9cdd4:	f04f 33ff 	mov.w	r3, #4294967295
}
   9cdd8:	4618      	mov	r0, r3
   9cdda:	370c      	adds	r7, #12
   9cddc:	46bd      	mov	sp, r7
   9cdde:	f85d 7b04 	ldr.w	r7, [sp], #4
   9cde2:	4770      	bx	lr

0009cde4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   9cde4:	b480      	push	{r7}
   9cde6:	b083      	sub	sp, #12
   9cde8:	af00      	add	r7, sp, #0
   9cdea:	6078      	str	r0, [r7, #4]
   9cdec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   9cdee:	683b      	ldr	r3, [r7, #0]
   9cdf0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   9cdf4:	605a      	str	r2, [r3, #4]

	return 0;
   9cdf6:	2300      	movs	r3, #0
}
   9cdf8:	4618      	mov	r0, r3
   9cdfa:	370c      	adds	r7, #12
   9cdfc:	46bd      	mov	sp, r7
   9cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
   9ce02:	4770      	bx	lr

0009ce04 <_isatty>:

extern int _isatty(int file)
{
   9ce04:	b480      	push	{r7}
   9ce06:	b083      	sub	sp, #12
   9ce08:	af00      	add	r7, sp, #0
   9ce0a:	6078      	str	r0, [r7, #4]
	return 1;
   9ce0c:	2301      	movs	r3, #1
}
   9ce0e:	4618      	mov	r0, r3
   9ce10:	370c      	adds	r7, #12
   9ce12:	46bd      	mov	sp, r7
   9ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
   9ce18:	4770      	bx	lr
   9ce1a:	bf00      	nop

0009ce1c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   9ce1c:	b480      	push	{r7}
   9ce1e:	b085      	sub	sp, #20
   9ce20:	af00      	add	r7, sp, #0
   9ce22:	60f8      	str	r0, [r7, #12]
   9ce24:	60b9      	str	r1, [r7, #8]
   9ce26:	607a      	str	r2, [r7, #4]
	return 0;
   9ce28:	2300      	movs	r3, #0
}
   9ce2a:	4618      	mov	r0, r3
   9ce2c:	3714      	adds	r7, #20
   9ce2e:	46bd      	mov	sp, r7
   9ce30:	f85d 7b04 	ldr.w	r7, [sp], #4
   9ce34:	4770      	bx	lr
   9ce36:	bf00      	nop

0009ce38 <Cl_Console_Read_ConsoleMessage_Status>:
 * \return CL_OK on success. CL_WAIT if no message yet
 * \Globals used : Cl_Console_buffer1,Cl_Console_buffer2
 */

Cl_ReturnCodeType Cl_Console_Read_ConsoleMessage_Status(void)
{
   9ce38:	b480      	push	{r7}
   9ce3a:	b083      	sub	sp, #12
   9ce3c:	af00      	add	r7, sp, #0
	
	//Cl_ReturnCodeType Cl_ConsoleRetval;
	Cl_ReturnCodeType Cl_ConsoleRetval;
	Cl_ConsoleRetval = CL_ERROR;
   9ce3e:	2304      	movs	r3, #4
   9ce40:	71fb      	strb	r3, [r7, #7]
	
	

	if(Cl_Console_buffer1.ConsoleDatabufferReady)
   9ce42:	4b0b      	ldr	r3, [pc, #44]	; (9ce70 <Cl_Console_Read_ConsoleMessage_Status+0x38>)
   9ce44:	7e1b      	ldrb	r3, [r3, #24]
   9ce46:	2b00      	cmp	r3, #0
   9ce48:	d002      	beq.n	9ce50 <Cl_Console_Read_ConsoleMessage_Status+0x18>
	{
			Cl_ConsoleRetval = CL_OK;
   9ce4a:	2300      	movs	r3, #0
   9ce4c:	71fb      	strb	r3, [r7, #7]
   9ce4e:	e008      	b.n	9ce62 <Cl_Console_Read_ConsoleMessage_Status+0x2a>
	}
	else if(Cl_Console_buffer2.ConsoleDatabufferReady)
   9ce50:	4b08      	ldr	r3, [pc, #32]	; (9ce74 <Cl_Console_Read_ConsoleMessage_Status+0x3c>)
   9ce52:	7e1b      	ldrb	r3, [r3, #24]
   9ce54:	2b00      	cmp	r3, #0
   9ce56:	d002      	beq.n	9ce5e <Cl_Console_Read_ConsoleMessage_Status+0x26>
	{
		Cl_ConsoleRetval = CL_OK;
   9ce58:	2300      	movs	r3, #0
   9ce5a:	71fb      	strb	r3, [r7, #7]
   9ce5c:	e001      	b.n	9ce62 <Cl_Console_Read_ConsoleMessage_Status+0x2a>
	}
	else
	{
			Cl_ConsoleRetval =  CL_WAIT;
   9ce5e:	2301      	movs	r3, #1
   9ce60:	71fb      	strb	r3, [r7, #7]
			//Cl_ConsoleRetval =  10;
			
	}
	return Cl_ConsoleRetval;
   9ce62:	79fb      	ldrb	r3, [r7, #7]
}
   9ce64:	4618      	mov	r0, r3
   9ce66:	370c      	adds	r7, #12
   9ce68:	46bd      	mov	sp, r7
   9ce6a:	f85d 7b04 	ldr.w	r7, [sp], #4
   9ce6e:	4770      	bx	lr
   9ce70:	200725d8 	.word	0x200725d8
   9ce74:	20072438 	.word	0x20072438

0009ce78 <Cl_Console_Read_Message_Ready_Status>:
 * \void function 
 * \return CL_OK on success. CL_WAIT if no message yet
 * \Globals used : Cl_Console_msgbuffer
 */
Cl_ReturnCodeType  Cl_Console_Read_Message_Ready_Status(void)
{
   9ce78:	b480      	push	{r7}
   9ce7a:	af00      	add	r7, sp, #0
	
	if(Cl_Console_msgbuffer.ConsoleNewMessageReady == true)
   9ce7c:	4b06      	ldr	r3, [pc, #24]	; (9ce98 <Cl_Console_Read_Message_Ready_Status+0x20>)
   9ce7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   9ce82:	2b00      	cmp	r3, #0
   9ce84:	d001      	beq.n	9ce8a <Cl_Console_Read_Message_Ready_Status+0x12>
	{

//printf("RDY\n");
	//for (tempcount=0;tempcount<Cl_Console_msgbuffer.Console_databuffer_write_idx;tempcount++)

		return CL_OK;
   9ce86:	2300      	movs	r3, #0
   9ce88:	e000      	b.n	9ce8c <Cl_Console_Read_Message_Ready_Status+0x14>
	}
	else
	{
//		printf("WT\n");
		return CL_WAIT;
   9ce8a:	2301      	movs	r3, #1
	}
	
}
   9ce8c:	4618      	mov	r0, r3
   9ce8e:	46bd      	mov	sp, r7
   9ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
   9ce94:	4770      	bx	lr
   9ce96:	bf00      	nop
   9ce98:	200723a8 	.word	0x200723a8

0009ce9c <Cl_Console_Read_Message_Console>:
 * \return CL_OK on success. 
 * \Globals used : Cl_Console_msgbuffer,Cl_Console_buffer1,Cl_Console_buffer2
 */

Cl_ReturnCodeType		Cl_Console_Read_Message_Console()
{
   9ce9c:	b480      	push	{r7}
   9ce9e:	b083      	sub	sp, #12
   9cea0:	af00      	add	r7, sp, #0

	static Cl_Uint8Type tempcount=0;
	Cl_Uint8Type temp;

if((Cl_Console_buffer1.ConsoleDatabufferReady == true) && (Cl_Console_buffer1.ConsoleDatabufferprocessed == false))
   9cea2:	4b54      	ldr	r3, [pc, #336]	; (9cff4 <Cl_Console_Read_Message_Console+0x158>)
   9cea4:	7e1b      	ldrb	r3, [r3, #24]
   9cea6:	2b00      	cmp	r3, #0
   9cea8:	d03c      	beq.n	9cf24 <Cl_Console_Read_Message_Console+0x88>
   9ceaa:	4b52      	ldr	r3, [pc, #328]	; (9cff4 <Cl_Console_Read_Message_Console+0x158>)
   9ceac:	7e5b      	ldrb	r3, [r3, #25]
   9ceae:	f083 0301 	eor.w	r3, r3, #1
   9ceb2:	b2db      	uxtb	r3, r3
   9ceb4:	2b00      	cmp	r3, #0
   9ceb6:	d035      	beq.n	9cf24 <Cl_Console_Read_Message_Console+0x88>
{
						
	for( tempcount=0,temp=0;temp < Cl_Console_buffer1.Console_databuffer_write_idx;tempcount ++,temp++ )
   9ceb8:	4b4f      	ldr	r3, [pc, #316]	; (9cff8 <Cl_Console_Read_Message_Console+0x15c>)
   9ceba:	2200      	movs	r2, #0
   9cebc:	701a      	strb	r2, [r3, #0]
   9cebe:	2300      	movs	r3, #0
   9cec0:	71fb      	strb	r3, [r7, #7]
   9cec2:	e010      	b.n	9cee6 <Cl_Console_Read_Message_Console+0x4a>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer1.Console_databuffer[temp];
   9cec4:	4b4c      	ldr	r3, [pc, #304]	; (9cff8 <Cl_Console_Read_Message_Console+0x15c>)
   9cec6:	781b      	ldrb	r3, [r3, #0]
   9cec8:	4619      	mov	r1, r3
   9ceca:	79fb      	ldrb	r3, [r7, #7]
   9cecc:	4a49      	ldr	r2, [pc, #292]	; (9cff4 <Cl_Console_Read_Message_Console+0x158>)
   9cece:	5cd2      	ldrb	r2, [r2, r3]
   9ced0:	4b4a      	ldr	r3, [pc, #296]	; (9cffc <Cl_Console_Read_Message_Console+0x160>)
   9ced2:	545a      	strb	r2, [r3, r1]
	Cl_Uint8Type temp;

if((Cl_Console_buffer1.ConsoleDatabufferReady == true) && (Cl_Console_buffer1.ConsoleDatabufferprocessed == false))
{
						
	for( tempcount=0,temp=0;temp < Cl_Console_buffer1.Console_databuffer_write_idx;tempcount ++,temp++ )
   9ced4:	4b48      	ldr	r3, [pc, #288]	; (9cff8 <Cl_Console_Read_Message_Console+0x15c>)
   9ced6:	781b      	ldrb	r3, [r3, #0]
   9ced8:	3301      	adds	r3, #1
   9ceda:	b2da      	uxtb	r2, r3
   9cedc:	4b46      	ldr	r3, [pc, #280]	; (9cff8 <Cl_Console_Read_Message_Console+0x15c>)
   9cede:	701a      	strb	r2, [r3, #0]
   9cee0:	79fb      	ldrb	r3, [r7, #7]
   9cee2:	3301      	adds	r3, #1
   9cee4:	71fb      	strb	r3, [r7, #7]
   9cee6:	4b43      	ldr	r3, [pc, #268]	; (9cff4 <Cl_Console_Read_Message_Console+0x158>)
   9cee8:	7d1b      	ldrb	r3, [r3, #20]
   9ceea:	79fa      	ldrb	r2, [r7, #7]
   9ceec:	429a      	cmp	r2, r3
   9ceee:	d3e9      	bcc.n	9cec4 <Cl_Console_Read_Message_Console+0x28>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer1.Console_databuffer[temp];
							

	}
	if(!Cl_Console_buffer1.Data_incomplete)
   9cef0:	4b40      	ldr	r3, [pc, #256]	; (9cff4 <Cl_Console_Read_Message_Console+0x158>)
   9cef2:	7f5b      	ldrb	r3, [r3, #29]
   9cef4:	f083 0301 	eor.w	r3, r3, #1
   9cef8:	b2db      	uxtb	r3, r3
   9cefa:	2b00      	cmp	r3, #0
   9cefc:	d003      	beq.n	9cf06 <Cl_Console_Read_Message_Console+0x6a>
	{
			Cl_Console_msgbuffer.ConsoleNewMessageReady = true;
   9cefe:	4b3f      	ldr	r3, [pc, #252]	; (9cffc <Cl_Console_Read_Message_Console+0x160>)
   9cf00:	2201      	movs	r2, #1
   9cf02:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
			
			Cl_Console_buffer1.ConsoleDatabufferprocessed = true;
   9cf06:	4b3b      	ldr	r3, [pc, #236]	; (9cff4 <Cl_Console_Read_Message_Console+0x158>)
   9cf08:	2201      	movs	r2, #1
   9cf0a:	765a      	strb	r2, [r3, #25]
			Cl_Console_buffer1.ConsoleDatabufferReady=false;
   9cf0c:	4b39      	ldr	r3, [pc, #228]	; (9cff4 <Cl_Console_Read_Message_Console+0x158>)
   9cf0e:	2200      	movs	r2, #0
   9cf10:	761a      	strb	r2, [r3, #24]
			Cl_Console_buffer1.StartSequenceDetected = false;
   9cf12:	4b38      	ldr	r3, [pc, #224]	; (9cff4 <Cl_Console_Read_Message_Console+0x158>)
   9cf14:	2200      	movs	r2, #0
   9cf16:	76da      	strb	r2, [r3, #27]
			Cl_Console_buffer1.Console_databuffer_write_idx =0;
   9cf18:	4b36      	ldr	r3, [pc, #216]	; (9cff4 <Cl_Console_Read_Message_Console+0x158>)
   9cf1a:	2200      	movs	r2, #0
   9cf1c:	751a      	strb	r2, [r3, #20]
			Cl_Console_buffer1.BufferEmpty = true;
   9cf1e:	4b35      	ldr	r3, [pc, #212]	; (9cff4 <Cl_Console_Read_Message_Console+0x158>)
   9cf20:	2201      	movs	r2, #1
   9cf22:	771a      	strb	r2, [r3, #28]
	
}
if((Cl_Console_buffer2.ConsoleDatabufferReady == true) && (Cl_Console_buffer2.ConsoleDatabufferprocessed == false))
   9cf24:	4b36      	ldr	r3, [pc, #216]	; (9d000 <Cl_Console_Read_Message_Console+0x164>)
   9cf26:	7e1b      	ldrb	r3, [r3, #24]
   9cf28:	2b00      	cmp	r3, #0
   9cf2a:	d05c      	beq.n	9cfe6 <Cl_Console_Read_Message_Console+0x14a>
   9cf2c:	4b34      	ldr	r3, [pc, #208]	; (9d000 <Cl_Console_Read_Message_Console+0x164>)
   9cf2e:	7e5b      	ldrb	r3, [r3, #25]
   9cf30:	f083 0301 	eor.w	r3, r3, #1
   9cf34:	b2db      	uxtb	r3, r3
   9cf36:	2b00      	cmp	r3, #0
   9cf38:	d055      	beq.n	9cfe6 <Cl_Console_Read_Message_Console+0x14a>
{
	if(!Cl_Console_buffer1.Data_incomplete)
   9cf3a:	4b2e      	ldr	r3, [pc, #184]	; (9cff4 <Cl_Console_Read_Message_Console+0x158>)
   9cf3c:	7f5b      	ldrb	r3, [r3, #29]
   9cf3e:	f083 0301 	eor.w	r3, r3, #1
   9cf42:	b2db      	uxtb	r3, r3
   9cf44:	2b00      	cmp	r3, #0
   9cf46:	d002      	beq.n	9cf4e <Cl_Console_Read_Message_Console+0xb2>
	{
		tempcount=0;
   9cf48:	4b2b      	ldr	r3, [pc, #172]	; (9cff8 <Cl_Console_Read_Message_Console+0x15c>)
   9cf4a:	2200      	movs	r2, #0
   9cf4c:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		// carry on appending to prevdata.
	}
	for( temp=0;temp < Cl_Console_buffer2.Console_databuffer_write_idx;tempcount ++,temp++ )
   9cf4e:	2300      	movs	r3, #0
   9cf50:	71fb      	strb	r3, [r7, #7]
   9cf52:	e010      	b.n	9cf76 <Cl_Console_Read_Message_Console+0xda>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer2.Console_databuffer[temp];
   9cf54:	4b28      	ldr	r3, [pc, #160]	; (9cff8 <Cl_Console_Read_Message_Console+0x15c>)
   9cf56:	781b      	ldrb	r3, [r3, #0]
   9cf58:	4619      	mov	r1, r3
   9cf5a:	79fb      	ldrb	r3, [r7, #7]
   9cf5c:	4a28      	ldr	r2, [pc, #160]	; (9d000 <Cl_Console_Read_Message_Console+0x164>)
   9cf5e:	5cd2      	ldrb	r2, [r2, r3]
   9cf60:	4b26      	ldr	r3, [pc, #152]	; (9cffc <Cl_Console_Read_Message_Console+0x160>)
   9cf62:	545a      	strb	r2, [r3, r1]
	}
	else
	{
		// carry on appending to prevdata.
	}
	for( temp=0;temp < Cl_Console_buffer2.Console_databuffer_write_idx;tempcount ++,temp++ )
   9cf64:	4b24      	ldr	r3, [pc, #144]	; (9cff8 <Cl_Console_Read_Message_Console+0x15c>)
   9cf66:	781b      	ldrb	r3, [r3, #0]
   9cf68:	3301      	adds	r3, #1
   9cf6a:	b2da      	uxtb	r2, r3
   9cf6c:	4b22      	ldr	r3, [pc, #136]	; (9cff8 <Cl_Console_Read_Message_Console+0x15c>)
   9cf6e:	701a      	strb	r2, [r3, #0]
   9cf70:	79fb      	ldrb	r3, [r7, #7]
   9cf72:	3301      	adds	r3, #1
   9cf74:	71fb      	strb	r3, [r7, #7]
   9cf76:	4b22      	ldr	r3, [pc, #136]	; (9d000 <Cl_Console_Read_Message_Console+0x164>)
   9cf78:	7d1b      	ldrb	r3, [r3, #20]
   9cf7a:	79fa      	ldrb	r2, [r7, #7]
   9cf7c:	429a      	cmp	r2, r3
   9cf7e:	d3e9      	bcc.n	9cf54 <Cl_Console_Read_Message_Console+0xb8>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer2.Console_databuffer[temp];

	}
		if(!Cl_Console_buffer2.Data_incomplete)
   9cf80:	4b1f      	ldr	r3, [pc, #124]	; (9d000 <Cl_Console_Read_Message_Console+0x164>)
   9cf82:	7f5b      	ldrb	r3, [r3, #29]
   9cf84:	f083 0301 	eor.w	r3, r3, #1
   9cf88:	b2db      	uxtb	r3, r3
   9cf8a:	2b00      	cmp	r3, #0
   9cf8c:	d003      	beq.n	9cf96 <Cl_Console_Read_Message_Console+0xfa>
		{
			Cl_Console_msgbuffer.ConsoleNewMessageReady = true;
   9cf8e:	4b1b      	ldr	r3, [pc, #108]	; (9cffc <Cl_Console_Read_Message_Console+0x160>)
   9cf90:	2201      	movs	r2, #1
   9cf92:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		}
	
		
			Cl_Console_buffer2.ConsoleDatabufferprocessed = true;
   9cf96:	4b1a      	ldr	r3, [pc, #104]	; (9d000 <Cl_Console_Read_Message_Console+0x164>)
   9cf98:	2201      	movs	r2, #1
   9cf9a:	765a      	strb	r2, [r3, #25]
			Cl_Console_buffer2.ConsoleDatabufferReady=false;
   9cf9c:	4b18      	ldr	r3, [pc, #96]	; (9d000 <Cl_Console_Read_Message_Console+0x164>)
   9cf9e:	2200      	movs	r2, #0
   9cfa0:	761a      	strb	r2, [r3, #24]
			Cl_Console_buffer2.Console_databuffer_write_idx =0;
   9cfa2:	4b17      	ldr	r3, [pc, #92]	; (9d000 <Cl_Console_Read_Message_Console+0x164>)
   9cfa4:	2200      	movs	r2, #0
   9cfa6:	751a      	strb	r2, [r3, #20]
			Cl_Console_buffer2.StartSequenceDetected = false;
   9cfa8:	4b15      	ldr	r3, [pc, #84]	; (9d000 <Cl_Console_Read_Message_Console+0x164>)
   9cfaa:	2200      	movs	r2, #0
   9cfac:	76da      	strb	r2, [r3, #27]
			Cl_Console_buffer2.BufferEmpty = true;
   9cfae:	4b14      	ldr	r3, [pc, #80]	; (9d000 <Cl_Console_Read_Message_Console+0x164>)
   9cfb0:	2201      	movs	r2, #1
   9cfb2:	771a      	strb	r2, [r3, #28]
			if(Cl_Console_buffer1.Data_incomplete)
   9cfb4:	4b0f      	ldr	r3, [pc, #60]	; (9cff4 <Cl_Console_Read_Message_Console+0x158>)
   9cfb6:	7f5b      	ldrb	r3, [r3, #29]
   9cfb8:	2b00      	cmp	r3, #0
   9cfba:	d014      	beq.n	9cfe6 <Cl_Console_Read_Message_Console+0x14a>
			{
				Cl_Console_buffer1.ConsoleDatabufferprocessed = true;
   9cfbc:	4b0d      	ldr	r3, [pc, #52]	; (9cff4 <Cl_Console_Read_Message_Console+0x158>)
   9cfbe:	2201      	movs	r2, #1
   9cfc0:	765a      	strb	r2, [r3, #25]
				Cl_Console_buffer1.ConsoleDatabufferReady=false;
   9cfc2:	4b0c      	ldr	r3, [pc, #48]	; (9cff4 <Cl_Console_Read_Message_Console+0x158>)
   9cfc4:	2200      	movs	r2, #0
   9cfc6:	761a      	strb	r2, [r3, #24]
				Cl_Console_buffer1.StartSequenceDetected = false;
   9cfc8:	4b0a      	ldr	r3, [pc, #40]	; (9cff4 <Cl_Console_Read_Message_Console+0x158>)
   9cfca:	2200      	movs	r2, #0
   9cfcc:	76da      	strb	r2, [r3, #27]
				Cl_Console_buffer1.Data_incomplete = false;
   9cfce:	4b09      	ldr	r3, [pc, #36]	; (9cff4 <Cl_Console_Read_Message_Console+0x158>)
   9cfd0:	2200      	movs	r2, #0
   9cfd2:	775a      	strb	r2, [r3, #29]
				Cl_Console_buffer2.Data_incomplete = false;
   9cfd4:	4b0a      	ldr	r3, [pc, #40]	; (9d000 <Cl_Console_Read_Message_Console+0x164>)
   9cfd6:	2200      	movs	r2, #0
   9cfd8:	775a      	strb	r2, [r3, #29]
				Cl_Console_buffer1.Console_databuffer_write_idx =0;
   9cfda:	4b06      	ldr	r3, [pc, #24]	; (9cff4 <Cl_Console_Read_Message_Console+0x158>)
   9cfdc:	2200      	movs	r2, #0
   9cfde:	751a      	strb	r2, [r3, #20]
				Cl_Console_buffer1.BufferEmpty = true;
   9cfe0:	4b04      	ldr	r3, [pc, #16]	; (9cff4 <Cl_Console_Read_Message_Console+0x158>)
   9cfe2:	2201      	movs	r2, #1
   9cfe4:	771a      	strb	r2, [r3, #28]
			}
}


	return CL_OK;
   9cfe6:	2300      	movs	r3, #0
}
   9cfe8:	4618      	mov	r0, r3
   9cfea:	370c      	adds	r7, #12
   9cfec:	46bd      	mov	sp, r7
   9cfee:	f85d 7b04 	ldr.w	r7, [sp], #4
   9cff2:	4770      	bx	lr
   9cff4:	200725d8 	.word	0x200725d8
   9cff8:	20071d36 	.word	0x20071d36
   9cffc:	200723a8 	.word	0x200723a8
   9d000:	20072438 	.word	0x20072438

0009d004 <Cl_Mac_Create_ConsoleEvent>:
 * \return CL_OK on success. 
 * \Globals used : Cl_Console_msgbuffer,Cl_Console_buffer1,Cl_Console_buffer2
 */

Cl_ReturnCodeType	 Cl_Mac_Create_ConsoleEvent(void)
{
   9d004:	b580      	push	{r7, lr}
   9d006:	b084      	sub	sp, #16
   9d008:	af00      	add	r7, sp, #0
//	Cl_Uint8Type start1,start2,command,datasize,data1,data2,end1,end2;
	//Cl_ConsoleMsgType Cl_ConsoleMsg;
	static Cl_Uint8Type* Cl_cmdptr;
	Cl_Uint8Type tempcount,packet_size =0, *dataptr= NULL, *msgdataptr = NULL;
   9d00a:	2300      	movs	r3, #0
   9d00c:	70fb      	strb	r3, [r7, #3]
   9d00e:	2300      	movs	r3, #0
   9d010:	60bb      	str	r3, [r7, #8]
   9d012:	2300      	movs	r3, #0
   9d014:	607b      	str	r3, [r7, #4]
	Cl_Mac_EventsType MacEvent;
	//printf("#/n");
	
	
			
			Cl_cmdptr = (Cl_Uint8Type*)&Cl_Console_msgbuffer.Console_databuffer;
   9d016:	4b46      	ldr	r3, [pc, #280]	; (9d130 <Cl_Mac_Create_ConsoleEvent+0x12c>)
   9d018:	4a46      	ldr	r2, [pc, #280]	; (9d134 <Cl_Mac_Create_ConsoleEvent+0x130>)
   9d01a:	601a      	str	r2, [r3, #0]
				
			Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
   9d01c:	4b45      	ldr	r3, [pc, #276]	; (9d134 <Cl_Mac_Create_ConsoleEvent+0x130>)
   9d01e:	781a      	ldrb	r2, [r3, #0]
   9d020:	4b45      	ldr	r3, [pc, #276]	; (9d138 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9d022:	709a      	strb	r2, [r3, #2]
			Cl_ConsoleRxMsg.datasize = Cl_Console_msgbuffer.Console_databuffer[1];
   9d024:	4b43      	ldr	r3, [pc, #268]	; (9d134 <Cl_Mac_Create_ConsoleEvent+0x130>)
   9d026:	785a      	ldrb	r2, [r3, #1]
   9d028:	4b43      	ldr	r3, [pc, #268]	; (9d138 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9d02a:	70da      	strb	r2, [r3, #3]
			msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
   9d02c:	4b43      	ldr	r3, [pc, #268]	; (9d13c <Cl_Mac_Create_ConsoleEvent+0x138>)
   9d02e:	607b      	str	r3, [r7, #4]
			dataptr = &Cl_ConsoleRxMsg.data.byte[0];
   9d030:	4b43      	ldr	r3, [pc, #268]	; (9d140 <Cl_Mac_Create_ConsoleEvent+0x13c>)
   9d032:	60bb      	str	r3, [r7, #8]
			for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   9d034:	2300      	movs	r3, #0
   9d036:	73fb      	strb	r3, [r7, #15]
   9d038:	e00c      	b.n	9d054 <Cl_Mac_Create_ConsoleEvent+0x50>
			{
				 *dataptr = *msgdataptr ;
   9d03a:	687b      	ldr	r3, [r7, #4]
   9d03c:	781a      	ldrb	r2, [r3, #0]
   9d03e:	68bb      	ldr	r3, [r7, #8]
   9d040:	701a      	strb	r2, [r3, #0]
				 dataptr++;
   9d042:	68bb      	ldr	r3, [r7, #8]
   9d044:	3301      	adds	r3, #1
   9d046:	60bb      	str	r3, [r7, #8]
				 msgdataptr++;
   9d048:	687b      	ldr	r3, [r7, #4]
   9d04a:	3301      	adds	r3, #1
   9d04c:	607b      	str	r3, [r7, #4]
				
			Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
			Cl_ConsoleRxMsg.datasize = Cl_Console_msgbuffer.Console_databuffer[1];
			msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
			dataptr = &Cl_ConsoleRxMsg.data.byte[0];
			for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   9d04e:	7bfb      	ldrb	r3, [r7, #15]
   9d050:	3301      	adds	r3, #1
   9d052:	73fb      	strb	r3, [r7, #15]
   9d054:	4b38      	ldr	r3, [pc, #224]	; (9d138 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9d056:	78db      	ldrb	r3, [r3, #3]
   9d058:	7bfa      	ldrb	r2, [r7, #15]
   9d05a:	429a      	cmp	r2, r3
   9d05c:	d3ed      	bcc.n	9d03a <Cl_Mac_Create_ConsoleEvent+0x36>
			}
			

						

			if(Cl_ConsoleRxMsg.command != CON_RX_COMMAND_ACK)
   9d05e:	4b36      	ldr	r3, [pc, #216]	; (9d138 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9d060:	789b      	ldrb	r3, [r3, #2]
   9d062:	2b04      	cmp	r3, #4
   9d064:	d00f      	beq.n	9d086 <Cl_Mac_Create_ConsoleEvent+0x82>
			//	test_count--;
			//	if(test_count  != 0)
			//	{
			//		PIOC->PIO_SODR = 1 << 28; //test
			//	}
				Cl_Cosnsole_MsgAcknlowledge();
   9d066:	4b37      	ldr	r3, [pc, #220]	; (9d144 <Cl_Mac_Create_ConsoleEvent+0x140>)
   9d068:	4798      	blx	r3
				test_counter++;
   9d06a:	4b37      	ldr	r3, [pc, #220]	; (9d148 <Cl_Mac_Create_ConsoleEvent+0x144>)
   9d06c:	881b      	ldrh	r3, [r3, #0]
   9d06e:	3301      	adds	r3, #1
   9d070:	b29a      	uxth	r2, r3
   9d072:	4b35      	ldr	r3, [pc, #212]	; (9d148 <Cl_Mac_Create_ConsoleEvent+0x144>)
   9d074:	801a      	strh	r2, [r3, #0]
				if (test_counter >= 1000)
   9d076:	4b34      	ldr	r3, [pc, #208]	; (9d148 <Cl_Mac_Create_ConsoleEvent+0x144>)
   9d078:	881b      	ldrh	r3, [r3, #0]
   9d07a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   9d07e:	d302      	bcc.n	9d086 <Cl_Mac_Create_ConsoleEvent+0x82>
				{

				//	DD_SET_PIO(PD,7); // test
				//	PIOB->PIO_SODR = 1 << 25; //test
				//	PIOC->PIO_CODR = 1 << 29; //test
					test_counter = 0;
   9d080:	4b31      	ldr	r3, [pc, #196]	; (9d148 <Cl_Mac_Create_ConsoleEvent+0x144>)
   9d082:	2200      	movs	r2, #0
   9d084:	801a      	strh	r2, [r3, #0]
			{
				// do nothing
				//	return CL_OK;
			}

			 if(Cl_ConsoleRxMsg.command == CON_RX_COMMAND_TEST_HARNESS)
   9d086:	4b2c      	ldr	r3, [pc, #176]	; (9d138 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9d088:	789b      	ldrb	r3, [r3, #2]
   9d08a:	2b17      	cmp	r3, #23
   9d08c:	d103      	bne.n	9d096 <Cl_Mac_Create_ConsoleEvent+0x92>
			 		{
					
					cl_testharnesscommandhandler(&Cl_ConsoleRxMsg);	 
   9d08e:	482a      	ldr	r0, [pc, #168]	; (9d138 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9d090:	4b2e      	ldr	r3, [pc, #184]	; (9d14c <Cl_Mac_Create_ConsoleEvent+0x148>)
   9d092:	4798      	blx	r3
   9d094:	e046      	b.n	9d124 <Cl_Mac_Create_ConsoleEvent+0x120>
					}
			else
			{
			
			Cl_ConsoleRxMsg.msgready = true;
   9d096:	4b28      	ldr	r3, [pc, #160]	; (9d138 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9d098:	2201      	movs	r2, #1
   9d09a:	761a      	strb	r2, [r3, #24]
			Cl_Console_msgbuffer.ConsoleNewMessageReady = false;
   9d09c:	4b25      	ldr	r3, [pc, #148]	; (9d134 <Cl_Mac_Create_ConsoleEvent+0x130>)
   9d09e:	2200      	movs	r2, #0
   9d0a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		
			Cl_Console_ConvertConsoleEvent_toMacEvent(Cl_ConsoleRxMsg.command,&MacEvent);
   9d0a4:	4b24      	ldr	r3, [pc, #144]	; (9d138 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9d0a6:	789a      	ldrb	r2, [r3, #2]
   9d0a8:	1cbb      	adds	r3, r7, #2
   9d0aa:	4610      	mov	r0, r2
   9d0ac:	4619      	mov	r1, r3
   9d0ae:	4b28      	ldr	r3, [pc, #160]	; (9d150 <Cl_Mac_Create_ConsoleEvent+0x14c>)
   9d0b0:	4798      	blx	r3
			Cl_MacEvent = MacEvent;
   9d0b2:	78ba      	ldrb	r2, [r7, #2]
   9d0b4:	4b27      	ldr	r3, [pc, #156]	; (9d154 <Cl_Mac_Create_ConsoleEvent+0x150>)
   9d0b6:	701a      	strb	r2, [r3, #0]
			Cl_MacNewEvent = true;
   9d0b8:	4b27      	ldr	r3, [pc, #156]	; (9d158 <Cl_Mac_Create_ConsoleEvent+0x154>)
   9d0ba:	2201      	movs	r2, #1
   9d0bc:	701a      	strb	r2, [r3, #0]
			if( Cl_MacEventQueue3.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )	
   9d0be:	4b27      	ldr	r3, [pc, #156]	; (9d15c <Cl_Mac_Create_ConsoleEvent+0x158>)
   9d0c0:	781b      	ldrb	r3, [r3, #0]
   9d0c2:	2b0a      	cmp	r3, #10
   9d0c4:	d82e      	bhi.n	9d124 <Cl_Mac_Create_ConsoleEvent+0x120>
			 {
				 Cl_MacEventQueue3.Cl_MacEvent[Cl_MacEventQueue3.Cl_MacNewEventcount] = MacEvent ;
   9d0c6:	4b25      	ldr	r3, [pc, #148]	; (9d15c <Cl_Mac_Create_ConsoleEvent+0x158>)
   9d0c8:	781b      	ldrb	r3, [r3, #0]
   9d0ca:	4619      	mov	r1, r3
   9d0cc:	78ba      	ldrb	r2, [r7, #2]
   9d0ce:	4b23      	ldr	r3, [pc, #140]	; (9d15c <Cl_Mac_Create_ConsoleEvent+0x158>)
   9d0d0:	440b      	add	r3, r1
   9d0d2:	709a      	strb	r2, [r3, #2]
				 Cl_MacEventQueue3.Cl_MacNewEvent = true;
   9d0d4:	4b21      	ldr	r3, [pc, #132]	; (9d15c <Cl_Mac_Create_ConsoleEvent+0x158>)
   9d0d6:	2201      	movs	r2, #1
   9d0d8:	705a      	strb	r2, [r3, #1]
				 Cl_MacEventQueue3.Cl_MacNewEventcount++;
   9d0da:	4b20      	ldr	r3, [pc, #128]	; (9d15c <Cl_Mac_Create_ConsoleEvent+0x158>)
   9d0dc:	781b      	ldrb	r3, [r3, #0]
   9d0de:	3301      	adds	r3, #1
   9d0e0:	b2da      	uxtb	r2, r3
   9d0e2:	4b1e      	ldr	r3, [pc, #120]	; (9d15c <Cl_Mac_Create_ConsoleEvent+0x158>)
   9d0e4:	701a      	strb	r2, [r3, #0]
				 
				msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
   9d0e6:	4b15      	ldr	r3, [pc, #84]	; (9d13c <Cl_Mac_Create_ConsoleEvent+0x138>)
   9d0e8:	607b      	str	r3, [r7, #4]
				dataptr = &Cl_MacEventQueue3.Cl_MacEventData[Cl_MacEventQueue3.Cl_MacNewEventcount][0];
   9d0ea:	4b1c      	ldr	r3, [pc, #112]	; (9d15c <Cl_Mac_Create_ConsoleEvent+0x158>)
   9d0ec:	781b      	ldrb	r3, [r3, #0]
   9d0ee:	3301      	adds	r3, #1
   9d0f0:	00db      	lsls	r3, r3, #3
   9d0f2:	4a1a      	ldr	r2, [pc, #104]	; (9d15c <Cl_Mac_Create_ConsoleEvent+0x158>)
   9d0f4:	4413      	add	r3, r2
   9d0f6:	3304      	adds	r3, #4
   9d0f8:	60bb      	str	r3, [r7, #8]
				for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   9d0fa:	2300      	movs	r3, #0
   9d0fc:	73fb      	strb	r3, [r7, #15]
   9d0fe:	e00c      	b.n	9d11a <Cl_Mac_Create_ConsoleEvent+0x116>
				{
					*dataptr = *msgdataptr ;
   9d100:	687b      	ldr	r3, [r7, #4]
   9d102:	781a      	ldrb	r2, [r3, #0]
   9d104:	68bb      	ldr	r3, [r7, #8]
   9d106:	701a      	strb	r2, [r3, #0]
					dataptr++;
   9d108:	68bb      	ldr	r3, [r7, #8]
   9d10a:	3301      	adds	r3, #1
   9d10c:	60bb      	str	r3, [r7, #8]
					msgdataptr++;
   9d10e:	687b      	ldr	r3, [r7, #4]
   9d110:	3301      	adds	r3, #1
   9d112:	607b      	str	r3, [r7, #4]
				 Cl_MacEventQueue3.Cl_MacNewEvent = true;
				 Cl_MacEventQueue3.Cl_MacNewEventcount++;
				 
				msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
				dataptr = &Cl_MacEventQueue3.Cl_MacEventData[Cl_MacEventQueue3.Cl_MacNewEventcount][0];
				for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   9d114:	7bfb      	ldrb	r3, [r7, #15]
   9d116:	3301      	adds	r3, #1
   9d118:	73fb      	strb	r3, [r7, #15]
   9d11a:	4b07      	ldr	r3, [pc, #28]	; (9d138 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9d11c:	78db      	ldrb	r3, [r3, #3]
   9d11e:	7bfa      	ldrb	r2, [r7, #15]
   9d120:	429a      	cmp	r2, r3
   9d122:	d3ed      	bcc.n	9d100 <Cl_Mac_Create_ConsoleEvent+0xfc>
			}
	#endif
			 		
	}
		
		return CL_OK;
   9d124:	2300      	movs	r3, #0
}
   9d126:	4618      	mov	r0, r3
   9d128:	3710      	adds	r7, #16
   9d12a:	46bd      	mov	sp, r7
   9d12c:	bd80      	pop	{r7, pc}
   9d12e:	bf00      	nop
   9d130:	20071d38 	.word	0x20071d38
   9d134:	200723a8 	.word	0x200723a8
   9d138:	200725bc 	.word	0x200725bc
   9d13c:	200723aa 	.word	0x200723aa
   9d140:	200725c0 	.word	0x200725c0
   9d144:	0009d161 	.word	0x0009d161
   9d148:	20071d32 	.word	0x20071d32
   9d14c:	00091329 	.word	0x00091329
   9d150:	0009d34d 	.word	0x0009d34d
   9d154:	20071b0b 	.word	0x20071b0b
   9d158:	20071b0d 	.word	0x20071b0d
   9d15c:	200725f8 	.word	0x200725f8

0009d160 <Cl_Cosnsole_MsgAcknlowledge>:



Cl_ReturnCodeType Cl_Cosnsole_MsgAcknlowledge()
   
	{
   9d160:	b580      	push	{r7, lr}
   9d162:	b082      	sub	sp, #8
   9d164:	af00      	add	r7, sp, #0
		Cl_Uint8Type temp;

		cl_wait(1);
   9d166:	2001      	movs	r0, #1
   9d168:	4b19      	ldr	r3, [pc, #100]	; (9d1d0 <Cl_Cosnsole_MsgAcknlowledge+0x70>)
   9d16a:	4798      	blx	r3
		Cl_ConsoleTxMsg[0] =	CL_CONSOLEMSG_STARTBYTE1;
   9d16c:	4b19      	ldr	r3, [pc, #100]	; (9d1d4 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9d16e:	22cc      	movs	r2, #204	; 0xcc
   9d170:	701a      	strb	r2, [r3, #0]
		Cl_ConsoleTxMsg[1] =	CL_CONSOLEMSG_STARTBYTE2;
   9d172:	4b18      	ldr	r3, [pc, #96]	; (9d1d4 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9d174:	22dd      	movs	r2, #221	; 0xdd
   9d176:	705a      	strb	r2, [r3, #1]
		Cl_ConsoleTxMsg[2]=		CON_TX_COMMAND_ACK;
   9d178:	4b16      	ldr	r3, [pc, #88]	; (9d1d4 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9d17a:	2204      	movs	r2, #4
   9d17c:	709a      	strb	r2, [r3, #2]
		Cl_ConsoleTxMsg[3] = 1; //size of data
   9d17e:	4b15      	ldr	r3, [pc, #84]	; (9d1d4 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9d180:	2201      	movs	r2, #1
   9d182:	70da      	strb	r2, [r3, #3]
		Cl_ConsoleTxMsg[4]= Cl_ConsoleRxMsg.command;
   9d184:	4b14      	ldr	r3, [pc, #80]	; (9d1d8 <Cl_Cosnsole_MsgAcknlowledge+0x78>)
   9d186:	789a      	ldrb	r2, [r3, #2]
   9d188:	4b12      	ldr	r3, [pc, #72]	; (9d1d4 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9d18a:	711a      	strb	r2, [r3, #4]
		Cl_ConsoleTxMsg[5] =	CL_CONSOLEMSG_STOPBYTE1;
   9d18c:	4b11      	ldr	r3, [pc, #68]	; (9d1d4 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9d18e:	22ee      	movs	r2, #238	; 0xee
   9d190:	715a      	strb	r2, [r3, #5]
		Cl_ConsoleTxMsg[6] =	CL_CONSOLEMSG_STOPBYTE2;
   9d192:	4b10      	ldr	r3, [pc, #64]	; (9d1d4 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9d194:	22bb      	movs	r2, #187	; 0xbb
   9d196:	719a      	strb	r2, [r3, #6]
		for (temp=0;temp<7;)
   9d198:	2300      	movs	r3, #0
   9d19a:	71fb      	strb	r3, [r7, #7]
   9d19c:	e00f      	b.n	9d1be <Cl_Cosnsole_MsgAcknlowledge+0x5e>
		{
				cl_console_sync = 1;
   9d19e:	4b0f      	ldr	r3, [pc, #60]	; (9d1dc <Cl_Cosnsole_MsgAcknlowledge+0x7c>)
   9d1a0:	2201      	movs	r2, #1
   9d1a2:	701a      	strb	r2, [r3, #0]
			if(! uart_write(CONF_UART,Cl_ConsoleTxMsg[temp]))
   9d1a4:	79fb      	ldrb	r3, [r7, #7]
   9d1a6:	4a0b      	ldr	r2, [pc, #44]	; (9d1d4 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9d1a8:	5cd3      	ldrb	r3, [r2, r3]
   9d1aa:	480d      	ldr	r0, [pc, #52]	; (9d1e0 <Cl_Cosnsole_MsgAcknlowledge+0x80>)
   9d1ac:	4619      	mov	r1, r3
   9d1ae:	4b0d      	ldr	r3, [pc, #52]	; (9d1e4 <Cl_Cosnsole_MsgAcknlowledge+0x84>)
   9d1b0:	4798      	blx	r3
   9d1b2:	4603      	mov	r3, r0
   9d1b4:	2b00      	cmp	r3, #0
   9d1b6:	d102      	bne.n	9d1be <Cl_Cosnsole_MsgAcknlowledge+0x5e>
			{
				temp++;				
   9d1b8:	79fb      	ldrb	r3, [r7, #7]
   9d1ba:	3301      	adds	r3, #1
   9d1bc:	71fb      	strb	r3, [r7, #7]
		Cl_ConsoleTxMsg[2]=		CON_TX_COMMAND_ACK;
		Cl_ConsoleTxMsg[3] = 1; //size of data
		Cl_ConsoleTxMsg[4]= Cl_ConsoleRxMsg.command;
		Cl_ConsoleTxMsg[5] =	CL_CONSOLEMSG_STOPBYTE1;
		Cl_ConsoleTxMsg[6] =	CL_CONSOLEMSG_STOPBYTE2;
		for (temp=0;temp<7;)
   9d1be:	79fb      	ldrb	r3, [r7, #7]
   9d1c0:	2b06      	cmp	r3, #6
   9d1c2:	d9ec      	bls.n	9d19e <Cl_Cosnsole_MsgAcknlowledge+0x3e>
			if(! uart_write(CONF_UART,Cl_ConsoleTxMsg[temp]))
			{
				temp++;				
			}
		}
	return CL_OK;
   9d1c4:	2300      	movs	r3, #0
}
   9d1c6:	4618      	mov	r0, r3
   9d1c8:	3708      	adds	r7, #8
   9d1ca:	46bd      	mov	sp, r7
   9d1cc:	bd80      	pop	{r7, pc}
   9d1ce:	bf00      	nop
   9d1d0:	0009421d 	.word	0x0009421d
   9d1d4:	20072458 	.word	0x20072458
   9d1d8:	200725bc 	.word	0x200725bc
   9d1dc:	20071d35 	.word	0x20071d35
   9d1e0:	400e0800 	.word	0x400e0800
   9d1e4:	0009c7a1 	.word	0x0009c7a1

0009d1e8 <Cl_SendDatatoconsole>:
 * \return CL_OK on success. 
 * \Globals used : 
 */

Cl_ReturnCodeType Cl_SendDatatoconsole(Cl_ConsoleTxCommandtype command, Cl_Uint8Type* data,Cl_Uint8Type datasize)
{
   9d1e8:	b580      	push	{r7, lr}
   9d1ea:	b086      	sub	sp, #24
   9d1ec:	af00      	add	r7, sp, #0
   9d1ee:	4603      	mov	r3, r0
   9d1f0:	6039      	str	r1, [r7, #0]
   9d1f2:	71fb      	strb	r3, [r7, #7]
   9d1f4:	4613      	mov	r3, r2
   9d1f6:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type tempcount=0 , temp =4 ;
   9d1f8:	2300      	movs	r3, #0
   9d1fa:	75fb      	strb	r3, [r7, #23]
   9d1fc:	2304      	movs	r3, #4
   9d1fe:	75bb      	strb	r3, [r7, #22]
	Cl_Uint8Type packet_size = 0;
   9d200:	2300      	movs	r3, #0
   9d202:	757b      	strb	r3, [r7, #21]
	Cl_Uint8Type *dataptr=NULL, *msgdataptr =NULL;
   9d204:	2300      	movs	r3, #0
   9d206:	613b      	str	r3, [r7, #16]
   9d208:	2300      	movs	r3, #0
   9d20a:	60fb      	str	r3, [r7, #12]
	static Cl_Uint8Type testcnt =0;
	


		
			if(( CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT == command)|| ( command == CON_TX_COMMAND_PRINTDATA) ||(command == CON_TX_COMMAND_PRINTTEXT) )// || (command == CON_TX_COMMAND_COMMAND_SCRIPT_BULK_PRINT))
   9d20c:	79fb      	ldrb	r3, [r7, #7]
   9d20e:	2b37      	cmp	r3, #55	; 0x37
   9d210:	d005      	beq.n	9d21e <Cl_SendDatatoconsole+0x36>
   9d212:	79fb      	ldrb	r3, [r7, #7]
   9d214:	2b19      	cmp	r3, #25
   9d216:	d002      	beq.n	9d21e <Cl_SendDatatoconsole+0x36>
   9d218:	79fb      	ldrb	r3, [r7, #7]
   9d21a:	2b18      	cmp	r3, #24
   9d21c:	d101      	bne.n	9d222 <Cl_SendDatatoconsole+0x3a>
		//	if(( CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT == command)|| ( command == CON_TX_COMMAND_PRINTDATA) ||(command == CON_TX_COMMAND_PRINTTEXT) ||(command == CON_TX_COMMAND_COMMAND_SYSTEM_STATE )  || (command == CON_TX_COMMAND_COMMAND_SCRIPT_BULK_PRINT) || (command == CON_TX_COMMAND_ALARM))
		
		//	if(( CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT == command)|| ( command == CON_TX_COMMAND_PRINTDATA) ||(command == CON_TX_COMMAND_PRINTTEXT) ) //|| (command == CON_TX_COMMAND_ALARM)
			{
				return;  /**************  To be returned for proper working with tablet ******/////  comment return to work with script
   9d21e:	bf00      	nop
   9d220:	e07c      	b.n	9d31c <Cl_SendDatatoconsole+0x134>
		}
		
		
	}
	
	cur_command = command;
   9d222:	4a40      	ldr	r2, [pc, #256]	; (9d324 <Cl_SendDatatoconsole+0x13c>)
   9d224:	79fb      	ldrb	r3, [r7, #7]
   9d226:	7013      	strb	r3, [r2, #0]
	cur_data = data;
   9d228:	683b      	ldr	r3, [r7, #0]
   9d22a:	b2da      	uxtb	r2, r3
   9d22c:	4b3e      	ldr	r3, [pc, #248]	; (9d328 <Cl_SendDatatoconsole+0x140>)
   9d22e:	701a      	strb	r2, [r3, #0]
	cur_datasize = datasize;
   9d230:	4a3e      	ldr	r2, [pc, #248]	; (9d32c <Cl_SendDatatoconsole+0x144>)
   9d232:	79bb      	ldrb	r3, [r7, #6]
   9d234:	7013      	strb	r3, [r2, #0]
	
	
	if (CONT_TX_COMMAND_BLOODPUMP_OFF == command)
   9d236:	79fb      	ldrb	r3, [r7, #7]
   9d238:	2b36      	cmp	r3, #54	; 0x36
   9d23a:	d102      	bne.n	9d242 <Cl_SendDatatoconsole+0x5a>
	{
		syncdone = true;
   9d23c:	4b3c      	ldr	r3, [pc, #240]	; (9d330 <Cl_SendDatatoconsole+0x148>)
   9d23e:	2201      	movs	r2, #1
   9d240:	701a      	strb	r2, [r3, #0]
	}

	if(datasize>0)
   9d242:	79bb      	ldrb	r3, [r7, #6]
   9d244:	2b00      	cmp	r3, #0
   9d246:	d004      	beq.n	9d252 <Cl_SendDatatoconsole+0x6a>
	{
		if(data != NULL)
   9d248:	683b      	ldr	r3, [r7, #0]
   9d24a:	2b00      	cmp	r3, #0
   9d24c:	d001      	beq.n	9d252 <Cl_SendDatatoconsole+0x6a>
		{
			dataptr = data;	
   9d24e:	683b      	ldr	r3, [r7, #0]
   9d250:	613b      	str	r3, [r7, #16]
		}
			
	}
	
	packet_size = datasize + 6;
   9d252:	79bb      	ldrb	r3, [r7, #6]
   9d254:	3306      	adds	r3, #6
   9d256:	757b      	strb	r3, [r7, #21]
	msgdataptr = &Cl_ConsoleTxMsg[4];
   9d258:	4b36      	ldr	r3, [pc, #216]	; (9d334 <Cl_SendDatatoconsole+0x14c>)
   9d25a:	60fb      	str	r3, [r7, #12]
	Cl_ConsoleTxMsg[0] = CL_CONSOLEMSG_STARTBYTE1 ;//(Cl_Uint8Type) 'X';
   9d25c:	4b36      	ldr	r3, [pc, #216]	; (9d338 <Cl_SendDatatoconsole+0x150>)
   9d25e:	22cc      	movs	r2, #204	; 0xcc
   9d260:	701a      	strb	r2, [r3, #0]
	Cl_ConsoleTxMsg[1] = CL_CONSOLEMSG_STARTBYTE2 ;// (Cl_Uint8Type)'Q';
   9d262:	4b35      	ldr	r3, [pc, #212]	; (9d338 <Cl_SendDatatoconsole+0x150>)
   9d264:	22dd      	movs	r2, #221	; 0xdd
   9d266:	705a      	strb	r2, [r3, #1]
	Cl_ConsoleTxMsg[2]= command;// command
   9d268:	4a33      	ldr	r2, [pc, #204]	; (9d338 <Cl_SendDatatoconsole+0x150>)
   9d26a:	79fb      	ldrb	r3, [r7, #7]
   9d26c:	7093      	strb	r3, [r2, #2]
	Cl_ConsoleTxMsg[3] = datasize; //size of data
   9d26e:	4a32      	ldr	r2, [pc, #200]	; (9d338 <Cl_SendDatatoconsole+0x150>)
   9d270:	79bb      	ldrb	r3, [r7, #6]
   9d272:	70d3      	strb	r3, [r2, #3]
	for(tempcount = 0 ; tempcount< datasize;tempcount++)
   9d274:	2300      	movs	r3, #0
   9d276:	75fb      	strb	r3, [r7, #23]
   9d278:	e00c      	b.n	9d294 <Cl_SendDatatoconsole+0xac>
	{
		Cl_ConsoleTxMsg[temp] = data[tempcount];
   9d27a:	7dbb      	ldrb	r3, [r7, #22]
   9d27c:	7dfa      	ldrb	r2, [r7, #23]
   9d27e:	6839      	ldr	r1, [r7, #0]
   9d280:	440a      	add	r2, r1
   9d282:	7811      	ldrb	r1, [r2, #0]
   9d284:	4a2c      	ldr	r2, [pc, #176]	; (9d338 <Cl_SendDatatoconsole+0x150>)
   9d286:	54d1      	strb	r1, [r2, r3]
		temp++;
   9d288:	7dbb      	ldrb	r3, [r7, #22]
   9d28a:	3301      	adds	r3, #1
   9d28c:	75bb      	strb	r3, [r7, #22]
	msgdataptr = &Cl_ConsoleTxMsg[4];
	Cl_ConsoleTxMsg[0] = CL_CONSOLEMSG_STARTBYTE1 ;//(Cl_Uint8Type) 'X';
	Cl_ConsoleTxMsg[1] = CL_CONSOLEMSG_STARTBYTE2 ;// (Cl_Uint8Type)'Q';
	Cl_ConsoleTxMsg[2]= command;// command
	Cl_ConsoleTxMsg[3] = datasize; //size of data
	for(tempcount = 0 ; tempcount< datasize;tempcount++)
   9d28e:	7dfb      	ldrb	r3, [r7, #23]
   9d290:	3301      	adds	r3, #1
   9d292:	75fb      	strb	r3, [r7, #23]
   9d294:	7dfa      	ldrb	r2, [r7, #23]
   9d296:	79bb      	ldrb	r3, [r7, #6]
   9d298:	429a      	cmp	r2, r3
   9d29a:	d3ee      	bcc.n	9d27a <Cl_SendDatatoconsole+0x92>
	{
		Cl_ConsoleTxMsg[temp] = data[tempcount];
		temp++;
	}
	
	Cl_ConsoleTxMsg[temp++] = CL_CONSOLEMSG_STOPBYTE1; // (Cl_Uint8Type)'D';
   9d29c:	7dbb      	ldrb	r3, [r7, #22]
   9d29e:	1c5a      	adds	r2, r3, #1
   9d2a0:	75ba      	strb	r2, [r7, #22]
   9d2a2:	461a      	mov	r2, r3
   9d2a4:	4b24      	ldr	r3, [pc, #144]	; (9d338 <Cl_SendDatatoconsole+0x150>)
   9d2a6:	21ee      	movs	r1, #238	; 0xee
   9d2a8:	5499      	strb	r1, [r3, r2]
	Cl_ConsoleTxMsg[temp++] = CL_CONSOLEMSG_STOPBYTE2 ;// (Cl_Uint8Type)'F';
   9d2aa:	7dbb      	ldrb	r3, [r7, #22]
   9d2ac:	1c5a      	adds	r2, r3, #1
   9d2ae:	75ba      	strb	r2, [r7, #22]
   9d2b0:	461a      	mov	r2, r3
   9d2b2:	4b21      	ldr	r3, [pc, #132]	; (9d338 <Cl_SendDatatoconsole+0x150>)
   9d2b4:	21bb      	movs	r1, #187	; 0xbb
   9d2b6:	5499      	strb	r1, [r3, r2]
	
		if(syncdone)
   9d2b8:	4b1d      	ldr	r3, [pc, #116]	; (9d330 <Cl_SendDatatoconsole+0x148>)
   9d2ba:	781b      	ldrb	r3, [r3, #0]
   9d2bc:	2b00      	cmp	r3, #0
   9d2be:	d013      	beq.n	9d2e8 <Cl_SendDatatoconsole+0x100>
		{
			
			
			Cl_IIC_ConsoleTxMsg[0] = 0xAA ;
   9d2c0:	4b1e      	ldr	r3, [pc, #120]	; (9d33c <Cl_SendDatatoconsole+0x154>)
   9d2c2:	22aa      	movs	r2, #170	; 0xaa
   9d2c4:	701a      	strb	r2, [r3, #0]
			for(tempcount = 0 ; tempcount< packet_size;tempcount++)
   9d2c6:	2300      	movs	r3, #0
   9d2c8:	75fb      	strb	r3, [r7, #23]
   9d2ca:	e009      	b.n	9d2e0 <Cl_SendDatatoconsole+0xf8>
			{
				Cl_IIC_ConsoleTxMsg[tempcount+1] = Cl_ConsoleTxMsg[tempcount];
   9d2cc:	7dfb      	ldrb	r3, [r7, #23]
   9d2ce:	3301      	adds	r3, #1
   9d2d0:	7dfa      	ldrb	r2, [r7, #23]
   9d2d2:	4919      	ldr	r1, [pc, #100]	; (9d338 <Cl_SendDatatoconsole+0x150>)
   9d2d4:	5c89      	ldrb	r1, [r1, r2]
   9d2d6:	4a19      	ldr	r2, [pc, #100]	; (9d33c <Cl_SendDatatoconsole+0x154>)
   9d2d8:	54d1      	strb	r1, [r2, r3]
		if(syncdone)
		{
			
			
			Cl_IIC_ConsoleTxMsg[0] = 0xAA ;
			for(tempcount = 0 ; tempcount< packet_size;tempcount++)
   9d2da:	7dfb      	ldrb	r3, [r7, #23]
   9d2dc:	3301      	adds	r3, #1
   9d2de:	75fb      	strb	r3, [r7, #23]
   9d2e0:	7dfa      	ldrb	r2, [r7, #23]
   9d2e2:	7d7b      	ldrb	r3, [r7, #21]
   9d2e4:	429a      	cmp	r2, r3
   9d2e6:	d3f1      	bcc.n	9d2cc <Cl_SendDatatoconsole+0xe4>
			
			
		}
		
		
	for (tempcount=0;tempcount<packet_size;)
   9d2e8:	2300      	movs	r3, #0
   9d2ea:	75fb      	strb	r3, [r7, #23]
   9d2ec:	e00e      	b.n	9d30c <Cl_SendDatatoconsole+0x124>
	//	else if (tempcount == ( packet_size - 1 ))
	//	{
	//			PIOC->PIO_CODR = 1 << 29; //test
	//	}
		
	cl_console_sync = 1;
   9d2ee:	4b14      	ldr	r3, [pc, #80]	; (9d340 <Cl_SendDatatoconsole+0x158>)
   9d2f0:	2201      	movs	r2, #1
   9d2f2:	701a      	strb	r2, [r3, #0]
	//	if(! uart_write(CONF_UART,Cl_ConsoleTxMsg[tempcount]))
	if(! sv_console_bytedatawrite(Cl_ConsoleTxMsg[tempcount]))
   9d2f4:	7dfb      	ldrb	r3, [r7, #23]
   9d2f6:	4a10      	ldr	r2, [pc, #64]	; (9d338 <Cl_SendDatatoconsole+0x150>)
   9d2f8:	5cd3      	ldrb	r3, [r2, r3]
   9d2fa:	4618      	mov	r0, r3
   9d2fc:	4b11      	ldr	r3, [pc, #68]	; (9d344 <Cl_SendDatatoconsole+0x15c>)
   9d2fe:	4798      	blx	r3
   9d300:	4603      	mov	r3, r0
   9d302:	2b00      	cmp	r3, #0
   9d304:	d102      	bne.n	9d30c <Cl_SendDatatoconsole+0x124>
	
		{
			tempcount++;
   9d306:	7dfb      	ldrb	r3, [r7, #23]
   9d308:	3301      	adds	r3, #1
   9d30a:	75fb      	strb	r3, [r7, #23]
			
			
		}
		
		
	for (tempcount=0;tempcount<packet_size;)
   9d30c:	7dfa      	ldrb	r2, [r7, #23]
   9d30e:	7d7b      	ldrb	r3, [r7, #21]
   9d310:	429a      	cmp	r2, r3
   9d312:	d3ec      	bcc.n	9d2ee <Cl_SendDatatoconsole+0x106>
		//	printf("%s",Cl_ConsoleTxMsg);
		//printf("\n");
		
	}
	
ackCommand = command;	
   9d314:	4a0c      	ldr	r2, [pc, #48]	; (9d348 <Cl_SendDatatoconsole+0x160>)
   9d316:	79fb      	ldrb	r3, [r7, #7]
   9d318:	7013      	strb	r3, [r2, #0]

//	printf("\n");
//cl_wait(5);                     // check if needed 21082017
	return CL_OK;
   9d31a:	2300      	movs	r3, #0
}
   9d31c:	4618      	mov	r0, r3
   9d31e:	3718      	adds	r7, #24
   9d320:	46bd      	mov	sp, r7
   9d322:	bd80      	pop	{r7, pc}
   9d324:	20072a41 	.word	0x20072a41
   9d328:	20072a42 	.word	0x20072a42
   9d32c:	20072a40 	.word	0x20072a40
   9d330:	20071d30 	.word	0x20071d30
   9d334:	2007245c 	.word	0x2007245c
   9d338:	20072458 	.word	0x20072458
   9d33c:	20072718 	.word	0x20072718
   9d340:	20071d35 	.word	0x20071d35
   9d344:	0009b715 	.word	0x0009b715
   9d348:	20072a43 	.word	0x20072a43

0009d34c <Cl_Console_ConvertConsoleEvent_toMacEvent>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : 
 */
Cl_ReturnCodeType Cl_Console_ConvertConsoleEvent_toMacEvent(Cl_ConsoleRxEventsType command ,Cl_Mac_EventsType* MacEvent)
{
   9d34c:	b480      	push	{r7}
   9d34e:	b083      	sub	sp, #12
   9d350:	af00      	add	r7, sp, #0
   9d352:	4603      	mov	r3, r0
   9d354:	6039      	str	r1, [r7, #0]
   9d356:	71fb      	strb	r3, [r7, #7]

	switch(command)
   9d358:	79fb      	ldrb	r3, [r7, #7]
   9d35a:	3b03      	subs	r3, #3
   9d35c:	2b39      	cmp	r3, #57	; 0x39
   9d35e:	f200 814b 	bhi.w	9d5f8 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ac>
   9d362:	a201      	add	r2, pc, #4	; (adr r2, 9d368 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1c>)
   9d364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9d368:	0009d451 	.word	0x0009d451
   9d36c:	0009d461 	.word	0x0009d461
   9d370:	0009d469 	.word	0x0009d469
   9d374:	0009d5f9 	.word	0x0009d5f9
   9d378:	0009d559 	.word	0x0009d559
   9d37c:	0009d4f1 	.word	0x0009d4f1
   9d380:	0009d4a1 	.word	0x0009d4a1
   9d384:	0009d4a9 	.word	0x0009d4a9
   9d388:	0009d481 	.word	0x0009d481
   9d38c:	0009d489 	.word	0x0009d489
   9d390:	0009d491 	.word	0x0009d491
   9d394:	0009d4b1 	.word	0x0009d4b1
   9d398:	0009d4c1 	.word	0x0009d4c1
   9d39c:	0009d4d1 	.word	0x0009d4d1
   9d3a0:	0009d501 	.word	0x0009d501
   9d3a4:	0009d509 	.word	0x0009d509
   9d3a8:	0009d539 	.word	0x0009d539
   9d3ac:	0009d541 	.word	0x0009d541
   9d3b0:	0009d459 	.word	0x0009d459
   9d3b4:	0009d5e1 	.word	0x0009d5e1
   9d3b8:	0009d5f9 	.word	0x0009d5f9
   9d3bc:	0009d499 	.word	0x0009d499
   9d3c0:	0009d4b9 	.word	0x0009d4b9
   9d3c4:	0009d561 	.word	0x0009d561
   9d3c8:	0009d569 	.word	0x0009d569
   9d3cc:	0009d571 	.word	0x0009d571
   9d3d0:	0009d579 	.word	0x0009d579
   9d3d4:	0009d4f9 	.word	0x0009d4f9
   9d3d8:	0009d581 	.word	0x0009d581
   9d3dc:	0009d4c9 	.word	0x0009d4c9
   9d3e0:	0009d589 	.word	0x0009d589
   9d3e4:	0009d591 	.word	0x0009d591
   9d3e8:	0009d599 	.word	0x0009d599
   9d3ec:	0009d5a1 	.word	0x0009d5a1
   9d3f0:	0009d5b1 	.word	0x0009d5b1
   9d3f4:	0009d5b9 	.word	0x0009d5b9
   9d3f8:	0009d549 	.word	0x0009d549
   9d3fc:	0009d551 	.word	0x0009d551
   9d400:	0009d5c1 	.word	0x0009d5c1
   9d404:	0009d5c9 	.word	0x0009d5c9
   9d408:	0009d5a9 	.word	0x0009d5a9
   9d40c:	0009d471 	.word	0x0009d471
   9d410:	0009d5f9 	.word	0x0009d5f9
   9d414:	0009d5f9 	.word	0x0009d5f9
   9d418:	0009d479 	.word	0x0009d479
   9d41c:	0009d5f9 	.word	0x0009d5f9
   9d420:	0009d4d9 	.word	0x0009d4d9
   9d424:	0009d4e1 	.word	0x0009d4e1
   9d428:	0009d4e9 	.word	0x0009d4e9
   9d42c:	0009d5d1 	.word	0x0009d5d1
   9d430:	0009d5d9 	.word	0x0009d5d9
   9d434:	0009d5e9 	.word	0x0009d5e9
   9d438:	0009d5f1 	.word	0x0009d5f1
   9d43c:	0009d511 	.word	0x0009d511
   9d440:	0009d519 	.word	0x0009d519
   9d444:	0009d521 	.word	0x0009d521
   9d448:	0009d529 	.word	0x0009d529
   9d44c:	0009d531 	.word	0x0009d531
	{
		case CON_RX_COMMAND_SYNC:
		//printf("J/n");
		    *MacEvent = EVT_CONSOLE_COMMAND_SYNC;
   9d450:	683b      	ldr	r3, [r7, #0]
   9d452:	2201      	movs	r2, #1
   9d454:	701a      	strb	r2, [r3, #0]
		break;
   9d456:	e0d0      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_CLR_ALARM:
		*MacEvent = EVT_CONSOLE_COMMAND_CLR_ALARM;
   9d458:	683b      	ldr	r3, [r7, #0]
   9d45a:	2229      	movs	r2, #41	; 0x29
   9d45c:	701a      	strb	r2, [r3, #0]
		break;
   9d45e:	e0cc      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_ACK:
		  *MacEvent = EVT_CONSOLE_COMMAND_ACK;
   9d460:	683b      	ldr	r3, [r7, #0]
   9d462:	2202      	movs	r2, #2
   9d464:	701a      	strb	r2, [r3, #0]
		break;
   9d466:	e0c8      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_RINSE_START:
//		printf("J/n");
			*MacEvent = EVT_CONSOLE_COMMAND_RINSE_START;
   9d468:	683b      	ldr	r3, [r7, #0]
   9d46a:	2207      	movs	r2, #7
   9d46c:	701a      	strb	r2, [r3, #0]
		break;
   9d46e:	e0c4      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_EVT_COMMAND_START_DISINF:
		
		*MacEvent = EVT_CONSOLE_COMMAND_DISINF_START;
   9d470:	683b      	ldr	r3, [r7, #0]
   9d472:	223f      	movs	r2, #63	; 0x3f
   9d474:	701a      	strb	r2, [r3, #0]
		break;
   9d476:	e0c0      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_EVT_COMMAND_RESUME_DISINF_STAGE:
		*MacEvent = EVT_CONSOLE_RESUME_DISINF_STAGE;
   9d478:	683b      	ldr	r3, [r7, #0]
   9d47a:	2240      	movs	r2, #64	; 0x40
   9d47c:	701a      	strb	r2, [r3, #0]
		break;
   9d47e:	e0bc      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_SET_BLDPMP_ON:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_BLDPMP_ON;
   9d480:	683b      	ldr	r3, [r7, #0]
   9d482:	220a      	movs	r2, #10
   9d484:	701a      	strb	r2, [r3, #0]
		break;
   9d486:	e0b8      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_SET_BLDPMP_OFF:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF;
   9d488:	683b      	ldr	r3, [r7, #0]
   9d48a:	220b      	movs	r2, #11
   9d48c:	701a      	strb	r2, [r3, #0]
		break;
   9d48e:	e0b4      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_SET_BLDPUMPRATE:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE;
   9d490:	683b      	ldr	r3, [r7, #0]
   9d492:	220c      	movs	r2, #12
   9d494:	701a      	strb	r2, [r3, #0]
		break;
   9d496:	e0b0      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_START_DIALYSATE_FILL:
		*MacEvent = EVT_CONSOLE_COMMAND_START_DIALYSATE_FILLING;
   9d498:	683b      	ldr	r3, [r7, #0]
   9d49a:	2211      	movs	r2, #17
   9d49c:	701a      	strb	r2, [r3, #0]
		break;
   9d49e:	e0ac      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_SET_DATA:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_DATA;
   9d4a0:	683b      	ldr	r3, [r7, #0]
   9d4a2:	220d      	movs	r2, #13
   9d4a4:	701a      	strb	r2, [r3, #0]
		break;
   9d4a6:	e0a8      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_GET_DATA:
		*MacEvent = EVT_CONSOLE_COMMAND_GET_DATA;
   9d4a8:	683b      	ldr	r3, [r7, #0]
   9d4aa:	220e      	movs	r2, #14
   9d4ac:	701a      	strb	r2, [r3, #0]
		break;
   9d4ae:	e0a4      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_START_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_START_PRIME;
   9d4b0:	683b      	ldr	r3, [r7, #0]
   9d4b2:	220f      	movs	r2, #15
   9d4b4:	701a      	strb	r2, [r3, #0]
		break;
   9d4b6:	e0a0      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		
		case CON_RX_COMMAND_STOP_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_STOP_PRIME;
   9d4b8:	683b      	ldr	r3, [r7, #0]
   9d4ba:	2210      	movs	r2, #16
   9d4bc:	701a      	strb	r2, [r3, #0]
		break;
   9d4be:	e09c      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		
		case CON_RX_COMMAND_START_DIALISER_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_START_DIALISER_PRIME;
   9d4c0:	683b      	ldr	r3, [r7, #0]
   9d4c2:	2213      	movs	r2, #19
   9d4c4:	701a      	strb	r2, [r3, #0]
		break;
   9d4c6:	e098      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		
		case CON_RX_EVT_COMMAND_STOP_DIALYSER_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_STOP_DIALISER_PRIME;
   9d4c8:	683b      	ldr	r3, [r7, #0]
   9d4ca:	2214      	movs	r2, #20
   9d4cc:	701a      	strb	r2, [r3, #0]
		break;
   9d4ce:	e094      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_HEP_PMP_RATE:
		*MacEvent = EVT_CONSOLE_COMMAND_HEP_PMP_RATE;
   9d4d0:	683b      	ldr	r3, [r7, #0]
   9d4d2:	2215      	movs	r2, #21
   9d4d4:	701a      	strb	r2, [r3, #0]
		break;
   9d4d6:	e090      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_HEPARIN_BOLUS:
		*MacEvent = EVT_CONSOLE_COMMAND_HEPARIN_BOLUS;
   9d4d8:	683b      	ldr	r3, [r7, #0]
   9d4da:	2226      	movs	r2, #38	; 0x26
   9d4dc:	701a      	strb	r2, [r3, #0]
		break;
   9d4de:	e08c      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_HEPARIN_ON:
		*MacEvent = EVT_CONSOLE_COMMAND_HEPARIN_START;
   9d4e0:	683b      	ldr	r3, [r7, #0]
   9d4e2:	2227      	movs	r2, #39	; 0x27
   9d4e4:	701a      	strb	r2, [r3, #0]
		break;
   9d4e6:	e088      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_HEPARIN_OFF:
		*MacEvent = EVT_CONSOLE_COMMAND_HEPARIN_STOP;
   9d4e8:	683b      	ldr	r3, [r7, #0]
   9d4ea:	2228      	movs	r2, #40	; 0x28
   9d4ec:	701a      	strb	r2, [r3, #0]
		break;
   9d4ee:	e084      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_DIALYSIS_PREP:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_PREP;
   9d4f0:	683b      	ldr	r3, [r7, #0]
   9d4f2:	2209      	movs	r2, #9
   9d4f4:	701a      	strb	r2, [r3, #0]
		break;
   9d4f6:	e080      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		
		case CON_RX_COMMAND_DIALYSER_CONNECTED:
		*MacEvent = EVT_CONSOLE_COMMAND_DILYSER_CONNECTED;
   9d4f8:	683b      	ldr	r3, [r7, #0]
   9d4fa:	2212      	movs	r2, #18
   9d4fc:	701a      	strb	r2, [r3, #0]
		break;
   9d4fe:	e07c      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_MAN_PREP_COMPLETED:
			*MacEvent = EVT_CONSOLE_COMMAND_MAN_PREP_COMPLETED;
   9d500:	683b      	ldr	r3, [r7, #0]
   9d502:	2216      	movs	r2, #22
   9d504:	701a      	strb	r2, [r3, #0]
		break;
   9d506:	e078      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_DIALYSIS_START:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_START;
   9d508:	683b      	ldr	r3, [r7, #0]
   9d50a:	2217      	movs	r2, #23
   9d50c:	701a      	strb	r2, [r3, #0]
		break;
   9d50e:	e074      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		
		case CON_RX_COMMAND_SELFTEST_START:        //for selftest
		     *MacEvent = EVT_CONSOLE_COMMAND_SELFTEST_START;
   9d510:	683b      	ldr	r3, [r7, #0]
   9d512:	2262      	movs	r2, #98	; 0x62
   9d514:	701a      	strb	r2, [r3, #0]
			 break;
   9d516:	e070      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
			 
			case CON_RX_COMMAND_SELFTEST_ALARM_OK:
			*MacEvent = EVT_COSOLE_COMMAND_SELFTEST_ALARM_PAAS;
   9d518:	683b      	ldr	r3, [r7, #0]
   9d51a:	2263      	movs	r2, #99	; 0x63
   9d51c:	701a      	strb	r2, [r3, #0]
			 break;
   9d51e:	e06c      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
			 	case CON_RX_COMMAND_SELFTEST_ALARM_FAIL:
			 	*MacEvent = EVT_COSOLE_COMMAND_SELFTEST_ALARM_FAIL;
   9d520:	683b      	ldr	r3, [r7, #0]
   9d522:	2264      	movs	r2, #100	; 0x64
   9d524:	701a      	strb	r2, [r3, #0]
			 	break;
   9d526:	e068      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_SELFTEST_STOP:        //for selftest
		*MacEvent = EVT_CONSOLE_COMMAND_SELFTEST_STOP;
   9d528:	683b      	ldr	r3, [r7, #0]
   9d52a:	2266      	movs	r2, #102	; 0x66
   9d52c:	701a      	strb	r2, [r3, #0]
		break;
   9d52e:	e064      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_SYNCCONFIMED:
		*MacEvent = EVT_CONSOLE_COMMAND_SYNCCONFIRMED;
   9d530:	683b      	ldr	r3, [r7, #0]
   9d532:	2267      	movs	r2, #103	; 0x67
   9d534:	701a      	strb	r2, [r3, #0]
		
		break;
   9d536:	e060      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_DIALYSIS_STOP:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_STOP;
   9d538:	683b      	ldr	r3, [r7, #0]
   9d53a:	2218      	movs	r2, #24
   9d53c:	701a      	strb	r2, [r3, #0]
		break;
   9d53e:	e05c      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_DIALYSIS_PAUSE:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_PAUSE;
   9d540:	683b      	ldr	r3, [r7, #0]
   9d542:	2219      	movs	r2, #25
   9d544:	701a      	strb	r2, [r3, #0]
		break;
   9d546:	e058      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		
		case CON_RX_EVT_COMMAND_BYPASS_ON:
			*MacEvent = EVT_CONSOLE_COMMAND_BYPASS_ON;
   9d548:	683b      	ldr	r3, [r7, #0]
   9d54a:	221a      	movs	r2, #26
   9d54c:	701a      	strb	r2, [r3, #0]
		break;
   9d54e:	e054      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_EVT_COMMAND_BYPASS_OFF:
		*MacEvent = EVT_CONSOLE_COMMAND_BYPASS_OFF;
   9d550:	683b      	ldr	r3, [r7, #0]
   9d552:	221b      	movs	r2, #27
   9d554:	701a      	strb	r2, [r3, #0]
		break;
   9d556:	e050      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_RINSE_STOP:
			*MacEvent = EVT_CONSOLE_COMMAND_STOP_RINSE;
   9d558:	683b      	ldr	r3, [r7, #0]
   9d55a:	2208      	movs	r2, #8
   9d55c:	701a      	strb	r2, [r3, #0]
		break;
   9d55e:	e04c      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		
		case		CON_RX_COMMAND_USER_MODE_ENTER://1A
					*MacEvent =  EVT_CONSOLE_COMMAND_USER_MODE_ENTER;
   9d560:	683b      	ldr	r3, [r7, #0]
   9d562:	2203      	movs	r2, #3
   9d564:	701a      	strb	r2, [r3, #0]
		break;
   9d566:	e048      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case		CON_RX_COMMAND_USER_MODE_EXIT://1B
					*MacEvent =  EVT_CONSOLE_COMMAND_USER_MODE_EXIT;
   9d568:	683b      	ldr	r3, [r7, #0]
   9d56a:	2204      	movs	r2, #4
   9d56c:	701a      	strb	r2, [r3, #0]
		break;
   9d56e:	e044      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case		CON_RX_COMMAND_SERVICEMODE_ENTER://1C
					*MacEvent =  EVT_CONSOLE_COMMAND_SERVICEMODE_ENTER ;
   9d570:	683b      	ldr	r3, [r7, #0]
   9d572:	2205      	movs	r2, #5
   9d574:	701a      	strb	r2, [r3, #0]
		break;
   9d576:	e040      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case		CON_RX_COMMAND_SERVICEMODE_EXIT://1D
					*MacEvent = EVT_CONSOLE_COMMAND_SERVICEMODE_EXIT;
   9d578:	683b      	ldr	r3, [r7, #0]
   9d57a:	2206      	movs	r2, #6
   9d57c:	701a      	strb	r2, [r3, #0]
		break;
   9d57e:	e03c      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
					
		case    CON_RX_EVT_COMMAND_PATIENT_CONNECTED: //1E
					*MacEvent = EVT_CONSOLE_COMMAND_PATIENT_CONNECTED;
   9d580:	683b      	ldr	r3, [r7, #0]
   9d582:	221c      	movs	r2, #28
   9d584:	701a      	strb	r2, [r3, #0]
		break;
   9d586:	e038      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case 	CON_RX_EVT_COMMAND_MIXING_PREP_START://0x21
					*MacEvent = EVT_SEND_MIXING_PREP_START;
   9d588:	683b      	ldr	r3, [r7, #0]
   9d58a:	221d      	movs	r2, #29
   9d58c:	701a      	strb	r2, [r3, #0]
		break;
   9d58e:	e034      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case	CON_RX_EVT_COMMAND_MIXING_PREP_STOP://0x22
			*MacEvent = EVT_SEND_MIXING_PREP_STOP;
   9d590:	683b      	ldr	r3, [r7, #0]
   9d592:	221e      	movs	r2, #30
   9d594:	701a      	strb	r2, [r3, #0]
		break;
   9d596:	e030      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>

		case CON_RX_EVT_COMMAND_RCIRC_START: 
					*MacEvent = EVT_CONSOLE_COMMAND_RCIRC_START;
   9d598:	683b      	ldr	r3, [r7, #0]
   9d59a:	221f      	movs	r2, #31
   9d59c:	701a      	strb	r2, [r3, #0]
		break;
   9d59e:	e02c      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_EVT_COMMAND_RCIRC_STOP: 
					*MacEvent = EVT_CONSOLE_COMMAND_RCIRC_STOP;
   9d5a0:	683b      	ldr	r3, [r7, #0]
   9d5a2:	2220      	movs	r2, #32
   9d5a4:	701a      	strb	r2, [r3, #0]
		break;
   9d5a6:	e028      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_EVT_COMMAND_PATIENT_READY:
		*MacEvent = EVT_CONSOLE_COMMAND_PATIENT_READY;
   9d5a8:	683b      	ldr	r3, [r7, #0]
   9d5aa:	2221      	movs	r2, #33	; 0x21
   9d5ac:	701a      	strb	r2, [r3, #0]
		break;
   9d5ae:	e024      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		
		case CON_RX_EVT_COMMAND_START_RETURN:
		*MacEvent = EVT_CONSOLE_COMMAND_START_RETURN;
   9d5b0:	683b      	ldr	r3, [r7, #0]
   9d5b2:	2222      	movs	r2, #34	; 0x22
   9d5b4:	701a      	strb	r2, [r3, #0]
		break;
   9d5b6:	e020      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		
		case CON_RX_EVT_COMMAND_STOP_RETURN:
		*MacEvent = EVT_CONSOLE_COMMAND_STOP_RETURN;
   9d5b8:	683b      	ldr	r3, [r7, #0]
   9d5ba:	2223      	movs	r2, #35	; 0x23
   9d5bc:	701a      	strb	r2, [r3, #0]
		break;			
   9d5be:	e01c      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_EVT_COMMAND_MINUF_ON:
		*MacEvent = EVT_CONSOLE_COMMAND_MINUF_ON;
   9d5c0:	683b      	ldr	r3, [r7, #0]
   9d5c2:	2224      	movs	r2, #36	; 0x24
   9d5c4:	701a      	strb	r2, [r3, #0]
		break;
   9d5c6:	e018      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_EVT_COMMAND_MINUF_OFF:
		*MacEvent = EVT_CONSOLE_COMMAND_MINUF_OFF;
   9d5c8:	683b      	ldr	r3, [r7, #0]
   9d5ca:	2225      	movs	r2, #37	; 0x25
   9d5cc:	701a      	strb	r2, [r3, #0]
		break;
   9d5ce:	e014      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_ISOUF_START:
		*MacEvent = EVT_CONSOLE_COMMAND_ISOUF_START;
   9d5d0:	683b      	ldr	r3, [r7, #0]
   9d5d2:	2258      	movs	r2, #88	; 0x58
   9d5d4:	701a      	strb	r2, [r3, #0]
		break;
   9d5d6:	e010      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_ISOUF_STOP:
		*MacEvent = EVT_CONSOLE_COMMAND_ISOUF_STOP;
   9d5d8:	683b      	ldr	r3, [r7, #0]
   9d5da:	2259      	movs	r2, #89	; 0x59
   9d5dc:	701a      	strb	r2, [r3, #0]
		break;
   9d5de:	e00c      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_MUTE:
		*MacEvent = EVT_CONSOLE_COMMAND_MUTE_ALARM;
   9d5e0:	683b      	ldr	r3, [r7, #0]
   9d5e2:	225f      	movs	r2, #95	; 0x5f
   9d5e4:	701a      	strb	r2, [r3, #0]
		break;
   9d5e6:	e008      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_EVT_COMMAND_DLSIS_ISOUF_ON :
		*MacEvent =EVT_CONSOLE_COMMAND_DIALYSIS_ISOUF_ON;
   9d5e8:	683b      	ldr	r3, [r7, #0]
   9d5ea:	2260      	movs	r2, #96	; 0x60
   9d5ec:	701a      	strb	r2, [r3, #0]
		break;
   9d5ee:	e004      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_EVT_COMMAND_DLSIS_ISOUF_OFF:
		*MacEvent =EVT_CONSOLE_COMMAND_DIALYSIS_ISOUF_OFF;
   9d5f0:	683b      	ldr	r3, [r7, #0]
   9d5f2:	2261      	movs	r2, #97	; 0x61
   9d5f4:	701a      	strb	r2, [r3, #0]
		break;
   9d5f6:	e000      	b.n	9d5fa <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		default:
		break;
   9d5f8:	bf00      	nop
	}
	return CL_OK;
   9d5fa:	2300      	movs	r3, #0
}
   9d5fc:	4618      	mov	r0, r3
   9d5fe:	370c      	adds	r7, #12
   9d600:	46bd      	mov	sp, r7
   9d602:	f85d 7b04 	ldr.w	r7, [sp], #4
   9d606:	4770      	bx	lr

0009d608 <Cl_Console_Console_Sync>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : 
 */
Cl_ReturnCodeType 	Cl_Console_Console_Sync(void)
{
   9d608:	b580      	push	{r7, lr}
   9d60a:	b082      	sub	sp, #8
   9d60c:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_MacRetval = CL_ERROR;
   9d60e:	2304      	movs	r3, #4
   9d610:	71fb      	strb	r3, [r7, #7]
	Cl_ConsoleSyncStatesType Cl_SyncState = CON_SYNC_STATE_WAIT_FOR_SYNC;
   9d612:	2300      	movs	r3, #0
   9d614:	71bb      	strb	r3, [r7, #6]
	
	Cl_Uint8Type CmdData =0;
   9d616:	2300      	movs	r3, #0
   9d618:	717b      	strb	r3, [r7, #5]
	

	while(	Cl_ConsoleState == CON_STATE_INIT )
   9d61a:	e07f      	b.n	9d71c <Cl_Console_Console_Sync+0x114>
	{
		switch(Cl_SyncState)
   9d61c:	79bb      	ldrb	r3, [r7, #6]
   9d61e:	2b03      	cmp	r3, #3
   9d620:	d87b      	bhi.n	9d71a <Cl_Console_Console_Sync+0x112>
   9d622:	a201      	add	r2, pc, #4	; (adr r2, 9d628 <Cl_Console_Console_Sync+0x20>)
   9d624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9d628:	0009d639 	.word	0x0009d639
   9d62c:	0009d673 	.word	0x0009d673
   9d630:	0009d68f 	.word	0x0009d68f
   9d634:	0009d70f 	.word	0x0009d70f
		{
			case CON_SYNC_STATE_WAIT_FOR_SYNC:
			
			Cl_MacRetval = Cl_Console_SyncGetMessage();
   9d638:	4b3d      	ldr	r3, [pc, #244]	; (9d730 <Cl_Console_Console_Sync+0x128>)
   9d63a:	4798      	blx	r3
   9d63c:	4603      	mov	r3, r0
   9d63e:	71fb      	strb	r3, [r7, #7]

						if(Cl_MacRetval== CL_OK)
   9d640:	79fb      	ldrb	r3, [r7, #7]
   9d642:	2b00      	cmp	r3, #0
   9d644:	d112      	bne.n	9d66c <Cl_Console_Console_Sync+0x64>
						{							
							Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
   9d646:	4b3b      	ldr	r3, [pc, #236]	; (9d734 <Cl_Console_Console_Sync+0x12c>)
   9d648:	781a      	ldrb	r2, [r3, #0]
   9d64a:	4b3b      	ldr	r3, [pc, #236]	; (9d738 <Cl_Console_Console_Sync+0x130>)
   9d64c:	709a      	strb	r2, [r3, #2]
							//Cl_ConsoleRxMsg.command = CON_HELLO;// for testing
							if(Cl_ConsoleRxMsg.command == CON_RX_COMMAND_SYNC )
   9d64e:	4b3a      	ldr	r3, [pc, #232]	; (9d738 <Cl_Console_Console_Sync+0x130>)
   9d650:	789b      	ldrb	r3, [r3, #2]
   9d652:	2b03      	cmp	r3, #3
   9d654:	d10a      	bne.n	9d66c <Cl_Console_Console_Sync+0x64>
							{
								
									Cl_Cosnsole_MsgAcknlowledge();
   9d656:	4b39      	ldr	r3, [pc, #228]	; (9d73c <Cl_Console_Console_Sync+0x134>)
   9d658:	4798      	blx	r3
							//		loopackflag = true;
								
								
							//	count = 0;

								Cl_ConsoleRxMsg.msgready = true;
   9d65a:	4b37      	ldr	r3, [pc, #220]	; (9d738 <Cl_Console_Console_Sync+0x130>)
   9d65c:	2201      	movs	r2, #1
   9d65e:	761a      	strb	r2, [r3, #24]
								Cl_Console_msgbuffer.ConsoleNewMessageReady = false;
   9d660:	4b34      	ldr	r3, [pc, #208]	; (9d734 <Cl_Console_Console_Sync+0x12c>)
   9d662:	2200      	movs	r2, #0
   9d664:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
								Cl_SyncState = CON_SYNC_STATE_SYNC_RECVD;
   9d668:	2301      	movs	r3, #1
   9d66a:	71bb      	strb	r3, [r7, #6]
								//delay and send sync
								
							
							}
						}		
			Cl_MacRetval = CL_WAIT;
   9d66c:	2301      	movs	r3, #1
   9d66e:	71fb      	strb	r3, [r7, #7]
								
			break;
   9d670:	e054      	b.n	9d71c <Cl_Console_Console_Sync+0x114>
			case CON_SYNC_STATE_SYNC_RECVD:
				cl_wait(10);
   9d672:	200a      	movs	r0, #10
   9d674:	4b32      	ldr	r3, [pc, #200]	; (9d740 <Cl_Console_Console_Sync+0x138>)
   9d676:	4798      	blx	r3
				Cl_SendDatatoconsole( CON_TX_COMMAND_SYNC,&CmdData ,0);
   9d678:	1d7b      	adds	r3, r7, #5
   9d67a:	2003      	movs	r0, #3
   9d67c:	4619      	mov	r1, r3
   9d67e:	2200      	movs	r2, #0
   9d680:	4b30      	ldr	r3, [pc, #192]	; (9d744 <Cl_Console_Console_Sync+0x13c>)
   9d682:	4798      	blx	r3
				Cl_SyncState = CON_SYNC_STATE_WAIT_FOR_SYNC_ACK;
   9d684:	2302      	movs	r3, #2
   9d686:	71bb      	strb	r3, [r7, #6]
			Cl_MacRetval = CL_WAIT;
   9d688:	2301      	movs	r3, #1
   9d68a:	71fb      	strb	r3, [r7, #7]
				break;
   9d68c:	e046      	b.n	9d71c <Cl_Console_Console_Sync+0x114>
				
			case CON_SYNC_STATE_WAIT_FOR_SYNC_ACK:
			Cl_MacRetval = Cl_Console_SyncGetMessage();
   9d68e:	4b28      	ldr	r3, [pc, #160]	; (9d730 <Cl_Console_Console_Sync+0x128>)
   9d690:	4798      	blx	r3
   9d692:	4603      	mov	r3, r0
   9d694:	71fb      	strb	r3, [r7, #7]
				if(Cl_MacRetval== CL_OK)
   9d696:	79fb      	ldrb	r3, [r7, #7]
   9d698:	2b00      	cmp	r3, #0
   9d69a:	d137      	bne.n	9d70c <Cl_Console_Console_Sync+0x104>
				{
					Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
   9d69c:	4b25      	ldr	r3, [pc, #148]	; (9d734 <Cl_Console_Console_Sync+0x12c>)
   9d69e:	781a      	ldrb	r2, [r3, #0]
   9d6a0:	4b25      	ldr	r3, [pc, #148]	; (9d738 <Cl_Console_Console_Sync+0x130>)
   9d6a2:	709a      	strb	r2, [r3, #2]
					Cl_ConsoleRxMsg.datasize = Cl_Console_msgbuffer.Console_databuffer[1];
   9d6a4:	4b23      	ldr	r3, [pc, #140]	; (9d734 <Cl_Console_Console_Sync+0x12c>)
   9d6a6:	785a      	ldrb	r2, [r3, #1]
   9d6a8:	4b23      	ldr	r3, [pc, #140]	; (9d738 <Cl_Console_Console_Sync+0x130>)
   9d6aa:	70da      	strb	r2, [r3, #3]
					Cl_ConsoleRxMsg.data.byte[0] = Cl_Console_msgbuffer.Console_databuffer[2];
   9d6ac:	4b21      	ldr	r3, [pc, #132]	; (9d734 <Cl_Console_Console_Sync+0x12c>)
   9d6ae:	789a      	ldrb	r2, [r3, #2]
   9d6b0:	4b21      	ldr	r3, [pc, #132]	; (9d738 <Cl_Console_Console_Sync+0x130>)
   9d6b2:	711a      	strb	r2, [r3, #4]
					if(Cl_ConsoleRxMsg.command == CON_RX_COMMAND_ACK )
   9d6b4:	4b20      	ldr	r3, [pc, #128]	; (9d738 <Cl_Console_Console_Sync+0x130>)
   9d6b6:	789b      	ldrb	r3, [r3, #2]
   9d6b8:	2b04      	cmp	r3, #4
   9d6ba:	d125      	bne.n	9d708 <Cl_Console_Console_Sync+0x100>
					{
						if(Cl_ConsoleRxMsg.data.byte[0] == CON_TX_COMMAND_SYNC )
   9d6bc:	4b1e      	ldr	r3, [pc, #120]	; (9d738 <Cl_Console_Console_Sync+0x130>)
   9d6be:	791b      	ldrb	r3, [r3, #4]
   9d6c0:	2b03      	cmp	r3, #3
   9d6c2:	d123      	bne.n	9d70c <Cl_Console_Console_Sync+0x104>
						{
							Cl_SyncState = CON_SYNC_STATE_SYNC_ACK_RECVD;
   9d6c4:	2303      	movs	r3, #3
   9d6c6:	71bb      	strb	r3, [r7, #6]

							if( Cl_MacEventQueue3.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )	
   9d6c8:	4b1f      	ldr	r3, [pc, #124]	; (9d748 <Cl_Console_Console_Sync+0x140>)
   9d6ca:	781b      	ldrb	r3, [r3, #0]
   9d6cc:	2b0a      	cmp	r3, #10
   9d6ce:	d80f      	bhi.n	9d6f0 <Cl_Console_Console_Sync+0xe8>
							 {
								// Cl_MacEventQueue3.Cl_MacEvent[Cl_MacEventQueue3.Cl_MacNewEventcount] = EVT_COMMAND_ENTER_STANDBY ;
								Cl_MacEventQueue3.Cl_MacEvent[Cl_MacEventQueue3.Cl_MacNewEventcount] = EVT_COMMAND_ENTER_INIT ;
   9d6d0:	4b1d      	ldr	r3, [pc, #116]	; (9d748 <Cl_Console_Console_Sync+0x140>)
   9d6d2:	781b      	ldrb	r3, [r3, #0]
   9d6d4:	461a      	mov	r2, r3
   9d6d6:	4b1c      	ldr	r3, [pc, #112]	; (9d748 <Cl_Console_Console_Sync+0x140>)
   9d6d8:	4413      	add	r3, r2
   9d6da:	222a      	movs	r2, #42	; 0x2a
   9d6dc:	709a      	strb	r2, [r3, #2]
								
								 Cl_MacEventQueue3.Cl_MacNewEvent = true;
   9d6de:	4b1a      	ldr	r3, [pc, #104]	; (9d748 <Cl_Console_Console_Sync+0x140>)
   9d6e0:	2201      	movs	r2, #1
   9d6e2:	705a      	strb	r2, [r3, #1]
								 Cl_MacEventQueue3.Cl_MacNewEventcount++;
   9d6e4:	4b18      	ldr	r3, [pc, #96]	; (9d748 <Cl_Console_Console_Sync+0x140>)
   9d6e6:	781b      	ldrb	r3, [r3, #0]
   9d6e8:	3301      	adds	r3, #1
   9d6ea:	b2da      	uxtb	r2, r3
   9d6ec:	4b16      	ldr	r3, [pc, #88]	; (9d748 <Cl_Console_Console_Sync+0x140>)
   9d6ee:	701a      	strb	r2, [r3, #0]
							 }
							 
							 syncdone = true; //testing
   9d6f0:	4b16      	ldr	r3, [pc, #88]	; (9d74c <Cl_Console_Console_Sync+0x144>)
   9d6f2:	2201      	movs	r2, #1
   9d6f4:	701a      	strb	r2, [r3, #0]
							Cl_ConsoleState = CON_STATE_ACTIVE;
   9d6f6:	4b16      	ldr	r3, [pc, #88]	; (9d750 <Cl_Console_Console_Sync+0x148>)
   9d6f8:	2202      	movs	r2, #2
   9d6fa:	701a      	strb	r2, [r3, #0]
							Cl_MacRetval = CL_OK;
   9d6fc:	2300      	movs	r3, #0
   9d6fe:	71fb      	strb	r3, [r7, #7]
							
							test_count = 0; //test
   9d700:	4b14      	ldr	r3, [pc, #80]	; (9d754 <Cl_Console_Console_Sync+0x14c>)
   9d702:	2200      	movs	r2, #0
   9d704:	701a      	strb	r2, [r3, #0]
   9d706:	e009      	b.n	9d71c <Cl_Console_Console_Sync+0x114>
														
						}
					}
					else
					{
							Cl_MacRetval = CL_WAIT;
   9d708:	2301      	movs	r3, #1
   9d70a:	71fb      	strb	r3, [r7, #7]
					}
				}
			break;
   9d70c:	e006      	b.n	9d71c <Cl_Console_Console_Sync+0x114>
			case CON_SYNC_STATE_SYNC_ACK_RECVD:
			
				Cl_ConsoleState = CON_STATE_ACTIVE;
   9d70e:	4b10      	ldr	r3, [pc, #64]	; (9d750 <Cl_Console_Console_Sync+0x148>)
   9d710:	2202      	movs	r2, #2
   9d712:	701a      	strb	r2, [r3, #0]
				Cl_MacRetval = CL_OK;
   9d714:	2300      	movs	r3, #0
   9d716:	71fb      	strb	r3, [r7, #7]
			break;
   9d718:	e000      	b.n	9d71c <Cl_Console_Console_Sync+0x114>
			
			default:
			break;
   9d71a:	bf00      	nop
	Cl_ConsoleSyncStatesType Cl_SyncState = CON_SYNC_STATE_WAIT_FOR_SYNC;
	
	Cl_Uint8Type CmdData =0;
	

	while(	Cl_ConsoleState == CON_STATE_INIT )
   9d71c:	4b0c      	ldr	r3, [pc, #48]	; (9d750 <Cl_Console_Console_Sync+0x148>)
   9d71e:	781b      	ldrb	r3, [r3, #0]
   9d720:	2b01      	cmp	r3, #1
   9d722:	f43f af7b 	beq.w	9d61c <Cl_Console_Console_Sync+0x14>
			break;
		}
	}
	/******************************************************************/

	return Cl_MacRetval;
   9d726:	79fb      	ldrb	r3, [r7, #7]
 }
   9d728:	4618      	mov	r0, r3
   9d72a:	3708      	adds	r7, #8
   9d72c:	46bd      	mov	sp, r7
   9d72e:	bd80      	pop	{r7, pc}
   9d730:	0009d775 	.word	0x0009d775
   9d734:	200723a8 	.word	0x200723a8
   9d738:	200725bc 	.word	0x200725bc
   9d73c:	0009d161 	.word	0x0009d161
   9d740:	0009421d 	.word	0x0009421d
   9d744:	0009d1e9 	.word	0x0009d1e9
   9d748:	200725f8 	.word	0x200725f8
   9d74c:	20071d30 	.word	0x20071d30
   9d750:	20070d3c 	.word	0x20070d3c
   9d754:	20071d34 	.word	0x20071d34

0009d758 <Cl_Console_init>:
 * \return CL_OK on success. 
 * \Globals used : 
 */
 
 Cl_ReturnCodeType Cl_Console_init(void)
 {
   9d758:	b480      	push	{r7}
   9d75a:	af00      	add	r7, sp, #0
	 Cl_ConsoleState = CON_STATE_INIT;
   9d75c:	4b04      	ldr	r3, [pc, #16]	; (9d770 <Cl_Console_init+0x18>)
   9d75e:	2201      	movs	r2, #1
   9d760:	701a      	strb	r2, [r3, #0]
	 
	 return CL_OK;
   9d762:	2300      	movs	r3, #0
 }
   9d764:	4618      	mov	r0, r3
   9d766:	46bd      	mov	sp, r7
   9d768:	f85d 7b04 	ldr.w	r7, [sp], #4
   9d76c:	4770      	bx	lr
   9d76e:	bf00      	nop
   9d770:	20070d3c 	.word	0x20070d3c

0009d774 <Cl_Console_SyncGetMessage>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : 
 */
  Cl_ReturnCodeType Cl_Console_SyncGetMessage()
  {
   9d774:	b580      	push	{r7, lr}
   9d776:	b082      	sub	sp, #8
   9d778:	af00      	add	r7, sp, #0
	 Cl_ReturnCodeType  Cl_ConsoleRetval1 = CL_WAIT;
   9d77a:	2301      	movs	r3, #1
   9d77c:	71fb      	strb	r3, [r7, #7]
	 
 				Cl_ConsoleRetval1 = Cl_Console_Read_ConsoleMessage_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   9d77e:	4b0b      	ldr	r3, [pc, #44]	; (9d7ac <Cl_Console_SyncGetMessage+0x38>)
   9d780:	4798      	blx	r3
   9d782:	4603      	mov	r3, r0
   9d784:	71fb      	strb	r3, [r7, #7]
 				if(Cl_ConsoleRetval1 == CL_OK)
   9d786:	79fb      	ldrb	r3, [r7, #7]
   9d788:	2b00      	cmp	r3, #0
   9d78a:	d10a      	bne.n	9d7a2 <Cl_Console_SyncGetMessage+0x2e>
 				{
	 				Cl_ConsoleRetval1 = Cl_Console_Read_Message_Console();
   9d78c:	4b08      	ldr	r3, [pc, #32]	; (9d7b0 <Cl_Console_SyncGetMessage+0x3c>)
   9d78e:	4798      	blx	r3
   9d790:	4603      	mov	r3, r0
   9d792:	71fb      	strb	r3, [r7, #7]
	 				if(Cl_ConsoleRetval1 == CL_OK)
   9d794:	79fb      	ldrb	r3, [r7, #7]
   9d796:	2b00      	cmp	r3, #0
   9d798:	d103      	bne.n	9d7a2 <Cl_Console_SyncGetMessage+0x2e>
	 				{
		 				Cl_ConsoleRetval1 = Cl_Console_Read_Message_Ready_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   9d79a:	4b06      	ldr	r3, [pc, #24]	; (9d7b4 <Cl_Console_SyncGetMessage+0x40>)
   9d79c:	4798      	blx	r3
   9d79e:	4603      	mov	r3, r0
   9d7a0:	71fb      	strb	r3, [r7, #7]
					}
				 }
		return Cl_ConsoleRetval1;
   9d7a2:	79fb      	ldrb	r3, [r7, #7]
				 
  }
   9d7a4:	4618      	mov	r0, r3
   9d7a6:	3708      	adds	r7, #8
   9d7a8:	46bd      	mov	sp, r7
   9d7aa:	bd80      	pop	{r7, pc}
   9d7ac:	0009ce39 	.word	0x0009ce39
   9d7b0:	0009ce9d 	.word	0x0009ce9d
   9d7b4:	0009ce79 	.word	0x0009ce79

0009d7b8 <cl_console_receivedbyte>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : Cl_Console_buffer1,Cl_Console_buffer2
 */
Cl_ReturnCodeType  cl_console_receivedbyte(Cl_Uint8Type console_databyte)
{
   9d7b8:	b480      	push	{r7}
   9d7ba:	b083      	sub	sp, #12
   9d7bc:	af00      	add	r7, sp, #0
   9d7be:	4603      	mov	r3, r0
   9d7c0:	71fb      	strb	r3, [r7, #7]
	static Cl_Uint8Type prev_databyte =0 ;
	static unsigned int temp = 0;

	if(Cl_Console_buffer1.BufferEmpty)
   9d7c2:	4b61      	ldr	r3, [pc, #388]	; (9d948 <cl_console_receivedbyte+0x190>)
   9d7c4:	7f1b      	ldrb	r3, [r3, #28]
   9d7c6:	2b00      	cmp	r3, #0
   9d7c8:	d009      	beq.n	9d7de <cl_console_receivedbyte+0x26>
	{
		if(Cl_Console_buffer2.BufferEmpty)
   9d7ca:	4b60      	ldr	r3, [pc, #384]	; (9d94c <cl_console_receivedbyte+0x194>)
   9d7cc:	7f1b      	ldrb	r3, [r3, #28]
   9d7ce:	2b00      	cmp	r3, #0
   9d7d0:	d005      	beq.n	9d7de <cl_console_receivedbyte+0x26>
			{
				Cl_Console_buffer1.CurreltyActive = true;
   9d7d2:	4b5d      	ldr	r3, [pc, #372]	; (9d948 <cl_console_receivedbyte+0x190>)
   9d7d4:	2201      	movs	r2, #1
   9d7d6:	769a      	strb	r2, [r3, #26]
				Cl_Console_buffer2.CurreltyActive = false;					
   9d7d8:	4b5c      	ldr	r3, [pc, #368]	; (9d94c <cl_console_receivedbyte+0x194>)
   9d7da:	2200      	movs	r2, #0
   9d7dc:	769a      	strb	r2, [r3, #26]
			}
		
	}
	if(Cl_Console_buffer1.CurreltyActive == true )
   9d7de:	4b5a      	ldr	r3, [pc, #360]	; (9d948 <cl_console_receivedbyte+0x190>)
   9d7e0:	7e9b      	ldrb	r3, [r3, #26]
   9d7e2:	2b00      	cmp	r3, #0
   9d7e4:	d04e      	beq.n	9d884 <cl_console_receivedbyte+0xcc>
	{				
				if(Cl_Console_buffer1.StartSequenceDetected == false)
   9d7e6:	4b58      	ldr	r3, [pc, #352]	; (9d948 <cl_console_receivedbyte+0x190>)
   9d7e8:	7edb      	ldrb	r3, [r3, #27]
   9d7ea:	f083 0301 	eor.w	r3, r3, #1
   9d7ee:	b2db      	uxtb	r3, r3
   9d7f0:	2b00      	cmp	r3, #0
   9d7f2:	d00a      	beq.n	9d80a <cl_console_receivedbyte+0x52>
				{
					if((prev_databyte == CL_CONSOLEMSG_STARTBYTE1) && (console_databyte == CL_CONSOLEMSG_STARTBYTE2))
   9d7f4:	4b56      	ldr	r3, [pc, #344]	; (9d950 <cl_console_receivedbyte+0x198>)
   9d7f6:	781b      	ldrb	r3, [r3, #0]
   9d7f8:	2bcc      	cmp	r3, #204	; 0xcc
   9d7fa:	d12e      	bne.n	9d85a <cl_console_receivedbyte+0xa2>
   9d7fc:	79fb      	ldrb	r3, [r7, #7]
   9d7fe:	2bdd      	cmp	r3, #221	; 0xdd
   9d800:	d12b      	bne.n	9d85a <cl_console_receivedbyte+0xa2>
						{
							Cl_Console_buffer1.StartSequenceDetected = true;
   9d802:	4b51      	ldr	r3, [pc, #324]	; (9d948 <cl_console_receivedbyte+0x190>)
   9d804:	2201      	movs	r2, #1
   9d806:	76da      	strb	r2, [r3, #27]
   9d808:	e027      	b.n	9d85a <cl_console_receivedbyte+0xa2>
						}
				}
				else
				{
					Cl_Console_buffer1.Console_databuffer[Cl_Console_buffer1.Console_databuffer_write_idx] = console_databyte;
   9d80a:	4b4f      	ldr	r3, [pc, #316]	; (9d948 <cl_console_receivedbyte+0x190>)
   9d80c:	7d1b      	ldrb	r3, [r3, #20]
   9d80e:	4619      	mov	r1, r3
   9d810:	4a4d      	ldr	r2, [pc, #308]	; (9d948 <cl_console_receivedbyte+0x190>)
   9d812:	79fb      	ldrb	r3, [r7, #7]
   9d814:	5453      	strb	r3, [r2, r1]
					Cl_Console_buffer1.ConsoleNewData = true;
   9d816:	4b4c      	ldr	r3, [pc, #304]	; (9d948 <cl_console_receivedbyte+0x190>)
   9d818:	2201      	movs	r2, #1
   9d81a:	75da      	strb	r2, [r3, #23]
					Cl_Console_buffer1.BufferEmpty = false;
   9d81c:	4b4a      	ldr	r3, [pc, #296]	; (9d948 <cl_console_receivedbyte+0x190>)
   9d81e:	2200      	movs	r2, #0
   9d820:	771a      	strb	r2, [r3, #28]
					if((prev_databyte == CL_CONSOLEMSG_STOPBYTE1) && (console_databyte == CL_CONSOLEMSG_STOPBYTE2))
   9d822:	4b4b      	ldr	r3, [pc, #300]	; (9d950 <cl_console_receivedbyte+0x198>)
   9d824:	781b      	ldrb	r3, [r3, #0]
   9d826:	2bee      	cmp	r3, #238	; 0xee
   9d828:	d111      	bne.n	9d84e <cl_console_receivedbyte+0x96>
   9d82a:	79fb      	ldrb	r3, [r7, #7]
   9d82c:	2bbb      	cmp	r3, #187	; 0xbb
   9d82e:	d10e      	bne.n	9d84e <cl_console_receivedbyte+0x96>
						{
							Cl_Console_buffer1.ConsoleDatabufferReady = true;
   9d830:	4b45      	ldr	r3, [pc, #276]	; (9d948 <cl_console_receivedbyte+0x190>)
   9d832:	2201      	movs	r2, #1
   9d834:	761a      	strb	r2, [r3, #24]
							Cl_Console_buffer1.ConsoleDatabufferprocessed = false;
   9d836:	4b44      	ldr	r3, [pc, #272]	; (9d948 <cl_console_receivedbyte+0x190>)
   9d838:	2200      	movs	r2, #0
   9d83a:	765a      	strb	r2, [r3, #25]
							Cl_Console_buffer1.Data_incomplete = false;
   9d83c:	4b42      	ldr	r3, [pc, #264]	; (9d948 <cl_console_receivedbyte+0x190>)
   9d83e:	2200      	movs	r2, #0
   9d840:	775a      	strb	r2, [r3, #29]
							Cl_Console_buffer1.CurreltyActive = false;
   9d842:	4b41      	ldr	r3, [pc, #260]	; (9d948 <cl_console_receivedbyte+0x190>)
   9d844:	2200      	movs	r2, #0
   9d846:	769a      	strb	r2, [r3, #26]
							Cl_Console_buffer2.CurreltyActive =true;
   9d848:	4b40      	ldr	r3, [pc, #256]	; (9d94c <cl_console_receivedbyte+0x194>)
   9d84a:	2201      	movs	r2, #1
   9d84c:	769a      	strb	r2, [r3, #26]
						}
					
					Cl_Console_buffer1.Console_databuffer_write_idx++;
   9d84e:	4b3e      	ldr	r3, [pc, #248]	; (9d948 <cl_console_receivedbyte+0x190>)
   9d850:	7d1b      	ldrb	r3, [r3, #20]
   9d852:	3301      	adds	r3, #1
   9d854:	b2da      	uxtb	r2, r3
   9d856:	4b3c      	ldr	r3, [pc, #240]	; (9d948 <cl_console_receivedbyte+0x190>)
   9d858:	751a      	strb	r2, [r3, #20]
				}
				
				if(Cl_Console_buffer1.Console_databuffer_write_idx >= CONSOLE_BUFFER_SIZE)
   9d85a:	4b3b      	ldr	r3, [pc, #236]	; (9d948 <cl_console_receivedbyte+0x190>)
   9d85c:	7d1b      	ldrb	r3, [r3, #20]
   9d85e:	2b13      	cmp	r3, #19
   9d860:	d90b      	bls.n	9d87a <cl_console_receivedbyte+0xc2>
					{
						Cl_Console_buffer1.ConsoleDatabufferReady = true ;
   9d862:	4b39      	ldr	r3, [pc, #228]	; (9d948 <cl_console_receivedbyte+0x190>)
   9d864:	2201      	movs	r2, #1
   9d866:	761a      	strb	r2, [r3, #24]
						Cl_Console_buffer1.ConsoleDatabufferprocessed = false;
   9d868:	4b37      	ldr	r3, [pc, #220]	; (9d948 <cl_console_receivedbyte+0x190>)
   9d86a:	2200      	movs	r2, #0
   9d86c:	765a      	strb	r2, [r3, #25]
						Cl_Console_buffer1.CurreltyActive = false;
   9d86e:	4b36      	ldr	r3, [pc, #216]	; (9d948 <cl_console_receivedbyte+0x190>)
   9d870:	2200      	movs	r2, #0
   9d872:	769a      	strb	r2, [r3, #26]
						Cl_Console_buffer1.Data_incomplete = true;
   9d874:	4b34      	ldr	r3, [pc, #208]	; (9d948 <cl_console_receivedbyte+0x190>)
   9d876:	2201      	movs	r2, #1
   9d878:	775a      	strb	r2, [r3, #29]
						
					}

			prev_databyte = console_databyte; // we may have to compare start and stop sequences
   9d87a:	4a35      	ldr	r2, [pc, #212]	; (9d950 <cl_console_receivedbyte+0x198>)
   9d87c:	79fb      	ldrb	r3, [r7, #7]
   9d87e:	7013      	strb	r3, [r2, #0]
			
				return CL_ACCEPTED; // if we have just filled 
   9d880:	2302      	movs	r3, #2
   9d882:	e05b      	b.n	9d93c <cl_console_receivedbyte+0x184>
	}
	
	if(Cl_Console_buffer2.CurreltyActive == true )
   9d884:	4b31      	ldr	r3, [pc, #196]	; (9d94c <cl_console_receivedbyte+0x194>)
   9d886:	7e9b      	ldrb	r3, [r3, #26]
   9d888:	2b00      	cmp	r3, #0
   9d88a:	d056      	beq.n	9d93a <cl_console_receivedbyte+0x182>
	{
		if(Cl_Console_buffer1.Data_incomplete == true)
   9d88c:	4b2e      	ldr	r3, [pc, #184]	; (9d948 <cl_console_receivedbyte+0x190>)
   9d88e:	7f5b      	ldrb	r3, [r3, #29]
   9d890:	2b00      	cmp	r3, #0
   9d892:	d002      	beq.n	9d89a <cl_console_receivedbyte+0xe2>
		{
			Cl_Console_buffer2.StartSequenceDetected = true;
   9d894:	4b2d      	ldr	r3, [pc, #180]	; (9d94c <cl_console_receivedbyte+0x194>)
   9d896:	2201      	movs	r2, #1
   9d898:	76da      	strb	r2, [r3, #27]
		}
				
		// Write to the buffer only when buffer is currently active and not full or packet ready
		
		if(Cl_Console_buffer2.StartSequenceDetected == false)
   9d89a:	4b2c      	ldr	r3, [pc, #176]	; (9d94c <cl_console_receivedbyte+0x194>)
   9d89c:	7edb      	ldrb	r3, [r3, #27]
   9d89e:	f083 0301 	eor.w	r3, r3, #1
   9d8a2:	b2db      	uxtb	r3, r3
   9d8a4:	2b00      	cmp	r3, #0
   9d8a6:	d00d      	beq.n	9d8c4 <cl_console_receivedbyte+0x10c>
		{
			
			if((prev_databyte == CL_CONSOLEMSG_STARTBYTE1) && (console_databyte == CL_CONSOLEMSG_STARTBYTE2))
   9d8a8:	4b29      	ldr	r3, [pc, #164]	; (9d950 <cl_console_receivedbyte+0x198>)
   9d8aa:	781b      	ldrb	r3, [r3, #0]
   9d8ac:	2bcc      	cmp	r3, #204	; 0xcc
   9d8ae:	d12e      	bne.n	9d90e <cl_console_receivedbyte+0x156>
   9d8b0:	79fb      	ldrb	r3, [r7, #7]
   9d8b2:	2bdd      	cmp	r3, #221	; 0xdd
   9d8b4:	d12b      	bne.n	9d90e <cl_console_receivedbyte+0x156>
			{
				Cl_Console_buffer2.StartSequenceDetected = true;
   9d8b6:	4b25      	ldr	r3, [pc, #148]	; (9d94c <cl_console_receivedbyte+0x194>)
   9d8b8:	2201      	movs	r2, #1
   9d8ba:	76da      	strb	r2, [r3, #27]
				Cl_Console_buffer2.Console_databuffer_write_idx = 0;
   9d8bc:	4b23      	ldr	r3, [pc, #140]	; (9d94c <cl_console_receivedbyte+0x194>)
   9d8be:	2200      	movs	r2, #0
   9d8c0:	751a      	strb	r2, [r3, #20]
   9d8c2:	e024      	b.n	9d90e <cl_console_receivedbyte+0x156>
			}
		}
		else
		{
			Cl_Console_buffer2.Console_databuffer[Cl_Console_buffer2.Console_databuffer_write_idx] = console_databyte;
   9d8c4:	4b21      	ldr	r3, [pc, #132]	; (9d94c <cl_console_receivedbyte+0x194>)
   9d8c6:	7d1b      	ldrb	r3, [r3, #20]
   9d8c8:	4619      	mov	r1, r3
   9d8ca:	4a20      	ldr	r2, [pc, #128]	; (9d94c <cl_console_receivedbyte+0x194>)
   9d8cc:	79fb      	ldrb	r3, [r7, #7]
   9d8ce:	5453      	strb	r3, [r2, r1]
			Cl_Console_buffer2.ConsoleNewData = true;
   9d8d0:	4b1e      	ldr	r3, [pc, #120]	; (9d94c <cl_console_receivedbyte+0x194>)
   9d8d2:	2201      	movs	r2, #1
   9d8d4:	75da      	strb	r2, [r3, #23]
			Cl_Console_buffer2.BufferEmpty = false;
   9d8d6:	4b1d      	ldr	r3, [pc, #116]	; (9d94c <cl_console_receivedbyte+0x194>)
   9d8d8:	2200      	movs	r2, #0
   9d8da:	771a      	strb	r2, [r3, #28]
		if((prev_databyte == CL_CONSOLEMSG_STOPBYTE1) && (console_databyte == CL_CONSOLEMSG_STOPBYTE2))
   9d8dc:	4b1c      	ldr	r3, [pc, #112]	; (9d950 <cl_console_receivedbyte+0x198>)
   9d8de:	781b      	ldrb	r3, [r3, #0]
   9d8e0:	2bee      	cmp	r3, #238	; 0xee
   9d8e2:	d10e      	bne.n	9d902 <cl_console_receivedbyte+0x14a>
   9d8e4:	79fb      	ldrb	r3, [r7, #7]
   9d8e6:	2bbb      	cmp	r3, #187	; 0xbb
   9d8e8:	d10b      	bne.n	9d902 <cl_console_receivedbyte+0x14a>
			{
				Cl_Console_buffer2.ConsoleDatabufferReady = true;
   9d8ea:	4b18      	ldr	r3, [pc, #96]	; (9d94c <cl_console_receivedbyte+0x194>)
   9d8ec:	2201      	movs	r2, #1
   9d8ee:	761a      	strb	r2, [r3, #24]
				Cl_Console_buffer2.ConsoleDatabufferprocessed = false;
   9d8f0:	4b16      	ldr	r3, [pc, #88]	; (9d94c <cl_console_receivedbyte+0x194>)
   9d8f2:	2200      	movs	r2, #0
   9d8f4:	765a      	strb	r2, [r3, #25]
				Cl_Console_buffer1.CurreltyActive = true;
   9d8f6:	4b14      	ldr	r3, [pc, #80]	; (9d948 <cl_console_receivedbyte+0x190>)
   9d8f8:	2201      	movs	r2, #1
   9d8fa:	769a      	strb	r2, [r3, #26]
				Cl_Console_buffer2.CurreltyActive = false;
   9d8fc:	4b13      	ldr	r3, [pc, #76]	; (9d94c <cl_console_receivedbyte+0x194>)
   9d8fe:	2200      	movs	r2, #0
   9d900:	769a      	strb	r2, [r3, #26]
			}
			Cl_Console_buffer2.Console_databuffer_write_idx++;
   9d902:	4b12      	ldr	r3, [pc, #72]	; (9d94c <cl_console_receivedbyte+0x194>)
   9d904:	7d1b      	ldrb	r3, [r3, #20]
   9d906:	3301      	adds	r3, #1
   9d908:	b2da      	uxtb	r2, r3
   9d90a:	4b10      	ldr	r3, [pc, #64]	; (9d94c <cl_console_receivedbyte+0x194>)
   9d90c:	751a      	strb	r2, [r3, #20]
				
		}
					
		if(Cl_Console_buffer2.Console_databuffer_write_idx > CONSOLE_BUFFER_SIZE)
   9d90e:	4b0f      	ldr	r3, [pc, #60]	; (9d94c <cl_console_receivedbyte+0x194>)
   9d910:	7d1b      	ldrb	r3, [r3, #20]
   9d912:	2b14      	cmp	r3, #20
   9d914:	d90b      	bls.n	9d92e <cl_console_receivedbyte+0x176>
		{
			Cl_Console_buffer2.ConsoleDatabufferReady = true ;
   9d916:	4b0d      	ldr	r3, [pc, #52]	; (9d94c <cl_console_receivedbyte+0x194>)
   9d918:	2201      	movs	r2, #1
   9d91a:	761a      	strb	r2, [r3, #24]
			Cl_Console_buffer2.CurreltyActive = false;
   9d91c:	4b0b      	ldr	r3, [pc, #44]	; (9d94c <cl_console_receivedbyte+0x194>)
   9d91e:	2200      	movs	r2, #0
   9d920:	769a      	strb	r2, [r3, #26]
			Cl_Console_buffer2.Data_incomplete = true;
   9d922:	4b0a      	ldr	r3, [pc, #40]	; (9d94c <cl_console_receivedbyte+0x194>)
   9d924:	2201      	movs	r2, #1
   9d926:	775a      	strb	r2, [r3, #29]
			Cl_Console_buffer1.Data_incomplete = false;
   9d928:	4b07      	ldr	r3, [pc, #28]	; (9d948 <cl_console_receivedbyte+0x190>)
   9d92a:	2200      	movs	r2, #0
   9d92c:	775a      	strb	r2, [r3, #29]
		}

	if (Cl_Console_buffer2.Data_incomplete && Cl_Console_buffer1.Data_incomplete )
   9d92e:	4b07      	ldr	r3, [pc, #28]	; (9d94c <cl_console_receivedbyte+0x194>)
   9d930:	7f5b      	ldrb	r3, [r3, #29]
   9d932:	2b00      	cmp	r3, #0
	{
		//printf("buffer overflow\n");
	}

			prev_databyte = console_databyte; // we may have to compare start and stop sequences
   9d934:	4a06      	ldr	r2, [pc, #24]	; (9d950 <cl_console_receivedbyte+0x198>)
   9d936:	79fb      	ldrb	r3, [r7, #7]
   9d938:	7013      	strb	r3, [r2, #0]
	}
	
	return CL_ACCEPTED;
   9d93a:	2302      	movs	r3, #2
}
   9d93c:	4618      	mov	r0, r3
   9d93e:	370c      	adds	r7, #12
   9d940:	46bd      	mov	sp, r7
   9d942:	f85d 7b04 	ldr.w	r7, [sp], #4
   9d946:	4770      	bx	lr
   9d948:	200725d8 	.word	0x200725d8
   9d94c:	20072438 	.word	0x20072438
   9d950:	20071d3c 	.word	0x20071d3c

0009d954 <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
   9d954:	b480      	push	{r7}
   9d956:	b08b      	sub	sp, #44	; 0x2c
   9d958:	af00      	add	r7, sp, #0
   9d95a:	6078      	str	r0, [r7, #4]
   9d95c:	687b      	ldr	r3, [r7, #4]
   9d95e:	627b      	str	r3, [r7, #36]	; 0x24
   9d960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   9d962:	623b      	str	r3, [r7, #32]
   9d964:	6a3b      	ldr	r3, [r7, #32]
   9d966:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   9d968:	69fb      	ldr	r3, [r7, #28]
   9d96a:	095b      	lsrs	r3, r3, #5
   9d96c:	61bb      	str	r3, [r7, #24]
}

__always_inline static Pio *arch_ioport_port_to_base(ioport_port_t port)
{
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   9d96e:	69bb      	ldr	r3, [r7, #24]
   9d970:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   9d974:	f203 7307 	addw	r3, r3, #1799	; 0x707
   9d978:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
   9d97a:	617b      	str	r3, [r7, #20]
   9d97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   9d97e:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   9d980:	693b      	ldr	r3, [r7, #16]
   9d982:	f003 031f 	and.w	r3, r3, #31
   9d986:	2201      	movs	r2, #1
   9d988:	fa02 f303 	lsl.w	r3, r2, r3
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
   9d98c:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   9d98e:	697b      	ldr	r3, [r7, #20]
   9d990:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   9d992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   9d994:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   9d996:	68bb      	ldr	r3, [r7, #8]
   9d998:	f003 031f 	and.w	r3, r3, #31
   9d99c:	2101      	movs	r1, #1
   9d99e:	fa01 f303 	lsl.w	r3, r1, r3
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   9d9a2:	4013      	ands	r3, r2
   9d9a4:	2b00      	cmp	r3, #0
   9d9a6:	d003      	beq.n	9d9b0 <ioport_toggle_pin_level+0x5c>
		port->PIO_CODR = mask;
   9d9a8:	697b      	ldr	r3, [r7, #20]
   9d9aa:	68fa      	ldr	r2, [r7, #12]
   9d9ac:	635a      	str	r2, [r3, #52]	; 0x34
   9d9ae:	e002      	b.n	9d9b6 <ioport_toggle_pin_level+0x62>
	} else {
		port->PIO_SODR = mask;
   9d9b0:	697b      	ldr	r3, [r7, #20]
   9d9b2:	68fa      	ldr	r2, [r7, #12]
   9d9b4:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_toggle_pin_level(pin);
}
   9d9b6:	372c      	adds	r7, #44	; 0x2c
   9d9b8:	46bd      	mov	sp, r7
   9d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   9d9be:	4770      	bx	lr

0009d9c0 <TC1_Handler>:
			(IRQn_Type) PIN_PUSHBUTTON_2_ID, IRQ_PRIOR_PIO);
	pio_enable_interrupt(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK);
#endif
}
void TC1_Handler(void)
{
   9d9c0:	b580      	push	{r7, lr}
   9d9c2:	af00      	add	r7, sp, #0
			
//printf("TC1_Handler\n");
		
		#ifdef LED0_GPIO
		/** Toggle LED state. */
		if (g_b_led0_active) {
   9d9c4:	4b04      	ldr	r3, [pc, #16]	; (9d9d8 <TC1_Handler+0x18>)
   9d9c6:	781b      	ldrb	r3, [r3, #0]
   9d9c8:	b2db      	uxtb	r3, r3
   9d9ca:	2b00      	cmp	r3, #0
   9d9cc:	d002      	beq.n	9d9d4 <TC1_Handler+0x14>
		ioport_toggle_pin_level(LED0_GPIO);
   9d9ce:	203b      	movs	r0, #59	; 0x3b
   9d9d0:	4b02      	ldr	r3, [pc, #8]	; (9d9dc <TC1_Handler+0x1c>)
   9d9d2:	4798      	blx	r3
		}
		#endif
}
   9d9d4:	bd80      	pop	{r7, pc}
   9d9d6:	bf00      	nop
   9d9d8:	20070d3d 	.word	0x20070d3d
   9d9dc:	0009d955 	.word	0x0009d955

0009d9e0 <Cl_disinf_init>:
 * \return CL_OK on success. 
 * \Globals used : 
 */

 Cl_ReturnCodeType Cl_disinf_init(void)
 {
   9d9e0:	b480      	push	{r7}
   9d9e2:	af00      	add	r7, sp, #0
	 Cl_ReturnCodeType cl_disinf_retval;
	
	 return CL_OK;
   9d9e4:	2300      	movs	r3, #0
 }
   9d9e6:	4618      	mov	r0, r3
   9d9e8:	46bd      	mov	sp, r7
   9d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   9d9ee:	4770      	bx	lr

0009d9f0 <Cl_disinf_controller>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : cl_disinfstate,Cl_ConsoleRxMsg
 */
Cl_ReturnCodeType Cl_disinf_controller(Cl_Mac_EventsType Cl_MacDisinfEvent)
{
   9d9f0:	b590      	push	{r4, r7, lr}
   9d9f2:	b08d      	sub	sp, #52	; 0x34
   9d9f4:	af02      	add	r7, sp, #8
   9d9f6:	4603      	mov	r3, r0
   9d9f8:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType  Cl_disinfretcode = CL_OK;
   9d9fa:	2300      	movs	r3, #0
   9d9fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		Cl_disinf_Eevents cl_disinfevent = EVENT_NULL_EVENT;
   9da00:	2300      	movs	r3, #0
   9da02:	76fb      	strb	r3, [r7, #27]
		Cl_NewAlarmIdType cl_disinfalarmid;
		CldisinfAlarmIdType CldisinfAlarmId;

		
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9da04:	2359      	movs	r3, #89	; 0x59
   9da06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		Cl_Uint8Type dataarray[4] = {0,0,0,0};
   9da0a:	2300      	movs	r3, #0
   9da0c:	753b      	strb	r3, [r7, #20]
   9da0e:	2300      	movs	r3, #0
   9da10:	757b      	strb	r3, [r7, #21]
   9da12:	2300      	movs	r3, #0
   9da14:	75bb      	strb	r3, [r7, #22]
   9da16:	2300      	movs	r3, #0
   9da18:	75fb      	strb	r3, [r7, #23]
		Cl_Uint8Type data = 0;
   9da1a:	2300      	movs	r3, #0
   9da1c:	74fb      	strb	r3, [r7, #19]
		Cl_BoolType alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false, flowstatus = false;
   9da1e:	2300      	movs	r3, #0
   9da20:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   9da24:	2300      	movs	r3, #0
   9da26:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   9da2a:	2300      	movs	r3, #0
   9da2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   9da30:	2300      	movs	r3, #0
   9da32:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22


		Cl_disinfretcode = cl_disinf_translatemacevent(Cl_MacDisinfEvent,&cl_disinfevent);
   9da36:	79fa      	ldrb	r2, [r7, #7]
   9da38:	f107 031b 	add.w	r3, r7, #27
   9da3c:	4610      	mov	r0, r2
   9da3e:	4619      	mov	r1, r3
   9da40:	4bbe      	ldr	r3, [pc, #760]	; (9dd3c <Cl_disinf_controller+0x34c>)
   9da42:	4798      	blx	r3
   9da44:	4603      	mov	r3, r0
   9da46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		
		
		
		switch(cl_disinfstate)
   9da4a:	4bbd      	ldr	r3, [pc, #756]	; (9dd40 <Cl_disinf_controller+0x350>)
   9da4c:	781b      	ldrb	r3, [r3, #0]
   9da4e:	2b11      	cmp	r3, #17
   9da50:	f201 819f 	bhi.w	9ed92 <Cl_disinf_controller+0x13a2>
   9da54:	a201      	add	r2, pc, #4	; (adr r2, 9da5c <Cl_disinf_controller+0x6c>)
   9da56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9da5a:	bf00      	nop
   9da5c:	0009daa5 	.word	0x0009daa5
   9da60:	0009ed93 	.word	0x0009ed93
   9da64:	0009ed93 	.word	0x0009ed93
   9da68:	0009db81 	.word	0x0009db81
   9da6c:	0009dc73 	.word	0x0009dc73
   9da70:	0009e009 	.word	0x0009e009
   9da74:	0009e173 	.word	0x0009e173
   9da78:	0009e3ff 	.word	0x0009e3ff
   9da7c:	0009e633 	.word	0x0009e633
   9da80:	0009e8d1 	.word	0x0009e8d1
   9da84:	0009e921 	.word	0x0009e921
   9da88:	0009ed93 	.word	0x0009ed93
   9da8c:	0009eb43 	.word	0x0009eb43
   9da90:	0009ed93 	.word	0x0009ed93
   9da94:	0009ed93 	.word	0x0009ed93
   9da98:	0009eabb 	.word	0x0009eabb
   9da9c:	0009de3d 	.word	0x0009de3d
   9daa0:	0009e52f 	.word	0x0009e52f
		{

			case CL_DISINF_STATE_INIT:
			break;
			case CL_DISINF_STATE_IDLE:
			switch (cl_disinfevent)
   9daa4:	7efb      	ldrb	r3, [r7, #27]
   9daa6:	2b03      	cmp	r3, #3
   9daa8:	d048      	beq.n	9db3c <Cl_disinf_controller+0x14c>
   9daaa:	2b14      	cmp	r3, #20
   9daac:	d002      	beq.n	9dab4 <Cl_disinf_controller+0xc4>
   9daae:	2b01      	cmp	r3, #1
   9dab0:	d047      	beq.n	9db42 <Cl_disinf_controller+0x152>
				Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_PRE_DISINF_RINSE);
				cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
				break;
				
				default:
				break;
   9dab2:	e063      	b.n	9db7c <Cl_disinf_controller+0x18c>
			break;
			case CL_DISINF_STATE_IDLE:
			switch (cl_disinfevent)
			{
				case EVT_DISINF_GET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   9dab4:	4ba3      	ldr	r3, [pc, #652]	; (9dd44 <Cl_disinf_controller+0x354>)
   9dab6:	7e1b      	ldrb	r3, [r3, #24]
   9dab8:	2b00      	cmp	r3, #0
   9daba:	d03e      	beq.n	9db3a <Cl_disinf_controller+0x14a>
				{
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
   9dabc:	4ba1      	ldr	r3, [pc, #644]	; (9dd44 <Cl_disinf_controller+0x354>)
   9dabe:	791b      	ldrb	r3, [r3, #4]
   9dac0:	2b02      	cmp	r3, #2
   9dac2:	d01e      	beq.n	9db02 <Cl_disinf_controller+0x112>
   9dac4:	2b21      	cmp	r3, #33	; 0x21
   9dac6:	d000      	beq.n	9daca <Cl_disinf_controller+0xda>
						command = CON_TX_COMMAND_SYSDATA;
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
						Cl_disinfretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						default:
						break;
   9dac8:	e036      	b.n	9db38 <Cl_disinf_controller+0x148>
				{
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case CON_RX_PARAM_DATA_DISINF_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9daca:	2316      	movs	r3, #22
   9dacc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   9dad0:	2323      	movs	r3, #35	; 0x23
   9dad2:	753b      	strb	r3, [r7, #20]
						Cl_disinfretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   9dad4:	f107 0314 	add.w	r3, r7, #20
   9dad8:	3301      	adds	r3, #1
   9dada:	2028      	movs	r0, #40	; 0x28
   9dadc:	4619      	mov	r1, r3
   9dade:	4b9a      	ldr	r3, [pc, #616]	; (9dd48 <Cl_disinf_controller+0x358>)
   9dae0:	4798      	blx	r3
   9dae2:	4603      	mov	r3, r0
   9dae4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9dae8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9daec:	f107 0314 	add.w	r3, r7, #20
   9daf0:	4610      	mov	r0, r2
   9daf2:	4619      	mov	r1, r3
   9daf4:	2202      	movs	r2, #2
   9daf6:	4b95      	ldr	r3, [pc, #596]	; (9dd4c <Cl_disinf_controller+0x35c>)
   9daf8:	4798      	blx	r3
   9dafa:	4603      	mov	r3, r0
   9dafc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						
						break;
   9db00:	e01b      	b.n	9db3a <Cl_disinf_controller+0x14a>
						case CON_RX_PARAM_DATA_PRIME_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9db02:	2316      	movs	r3, #22
   9db04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9db08:	2302      	movs	r3, #2
   9db0a:	753b      	strb	r3, [r7, #20]
						Cl_disinfretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9db0c:	f107 0314 	add.w	r3, r7, #20
   9db10:	3301      	adds	r3, #1
   9db12:	2002      	movs	r0, #2
   9db14:	4619      	mov	r1, r3
   9db16:	4b8c      	ldr	r3, [pc, #560]	; (9dd48 <Cl_disinf_controller+0x358>)
   9db18:	4798      	blx	r3
   9db1a:	4603      	mov	r3, r0
   9db1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9db20:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9db24:	f107 0314 	add.w	r3, r7, #20
   9db28:	4610      	mov	r0, r2
   9db2a:	4619      	mov	r1, r3
   9db2c:	2202      	movs	r2, #2
   9db2e:	4b87      	ldr	r3, [pc, #540]	; (9dd4c <Cl_disinf_controller+0x35c>)
   9db30:	4798      	blx	r3
   9db32:	4603      	mov	r3, r0
   9db34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						default:
						break;
   9db38:	bf00      	nop
					}
				}
				break;
   9db3a:	e01f      	b.n	9db7c <Cl_disinf_controller+0x18c>
				
				case EVENT_STOP_DISINF:
				Cl_Disinf_StopDisinf();
   9db3c:	4b84      	ldr	r3, [pc, #528]	; (9dd50 <Cl_disinf_controller+0x360>)
   9db3e:	4798      	blx	r3
				break;
   9db40:	e01c      	b.n	9db7c <Cl_disinf_controller+0x18c>
//  					}
//  					
// 				}
// 				
				
				command = CON_TX_COMMAND_DISINF_STARTED;
   9db42:	233c      	movs	r3, #60	; 0x3c
   9db44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   9db48:	2301      	movs	r3, #1
   9db4a:	74fb      	strb	r3, [r7, #19]
				Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9db4c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9db50:	f107 0313 	add.w	r3, r7, #19
   9db54:	4610      	mov	r0, r2
   9db56:	4619      	mov	r1, r3
   9db58:	2201      	movs	r2, #1
   9db5a:	4b7c      	ldr	r3, [pc, #496]	; (9dd4c <Cl_disinf_controller+0x35c>)
   9db5c:	4798      	blx	r3
   9db5e:	4603      	mov	r3, r0
   9db60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Cl_Disinf_UpdateTimeInfo();
   9db64:	4b7b      	ldr	r3, [pc, #492]	; (9dd54 <Cl_disinf_controller+0x364>)
   9db66:	4798      	blx	r3
				Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_PRE_DISINF_RINSE);
   9db68:	2044      	movs	r0, #68	; 0x44
   9db6a:	4b7b      	ldr	r3, [pc, #492]	; (9dd58 <Cl_disinf_controller+0x368>)
   9db6c:	4798      	blx	r3
   9db6e:	4603      	mov	r3, r0
   9db70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
   9db74:	4b72      	ldr	r3, [pc, #456]	; (9dd40 <Cl_disinf_controller+0x350>)
   9db76:	2203      	movs	r2, #3
   9db78:	701a      	strb	r2, [r3, #0]
				break;
   9db7a:	bf00      	nop
				default:
				break;
				
				
			}
			break;
   9db7c:	f001 b910 	b.w	9eda0 <Cl_disinf_controller+0x13b0>
			case CL_DISINF_STATE_FIRST_RO_RINSE:
				switch ( cl_disinfevent)
   9db80:	7efb      	ldrb	r3, [r7, #27]
   9db82:	3b03      	subs	r3, #3
   9db84:	2b1f      	cmp	r3, #31
   9db86:	d871      	bhi.n	9dc6c <Cl_disinf_controller+0x27c>
   9db88:	a201      	add	r2, pc, #4	; (adr r2, 9db90 <Cl_disinf_controller+0x1a0>)
   9db8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9db8e:	bf00      	nop
   9db90:	0009dc11 	.word	0x0009dc11
   9db94:	0009dc6d 	.word	0x0009dc6d
   9db98:	0009dc6d 	.word	0x0009dc6d
   9db9c:	0009dc6d 	.word	0x0009dc6d
   9dba0:	0009dc6d 	.word	0x0009dc6d
   9dba4:	0009dc6d 	.word	0x0009dc6d
   9dba8:	0009dc6d 	.word	0x0009dc6d
   9dbac:	0009dc6d 	.word	0x0009dc6d
   9dbb0:	0009dc6d 	.word	0x0009dc6d
   9dbb4:	0009dc6d 	.word	0x0009dc6d
   9dbb8:	0009dc6d 	.word	0x0009dc6d
   9dbbc:	0009dc6d 	.word	0x0009dc6d
   9dbc0:	0009dc5d 	.word	0x0009dc5d
   9dbc4:	0009dc6d 	.word	0x0009dc6d
   9dbc8:	0009dc6d 	.word	0x0009dc6d
   9dbcc:	0009dc6d 	.word	0x0009dc6d
   9dbd0:	0009dc6d 	.word	0x0009dc6d
   9dbd4:	0009dc6d 	.word	0x0009dc6d
   9dbd8:	0009dc6d 	.word	0x0009dc6d
   9dbdc:	0009dc6d 	.word	0x0009dc6d
   9dbe0:	0009dc6d 	.word	0x0009dc6d
   9dbe4:	0009dc6d 	.word	0x0009dc6d
   9dbe8:	0009dc6d 	.word	0x0009dc6d
   9dbec:	0009dc6d 	.word	0x0009dc6d
   9dbf0:	0009dc6d 	.word	0x0009dc6d
   9dbf4:	0009dc6d 	.word	0x0009dc6d
   9dbf8:	0009dc6d 	.word	0x0009dc6d
   9dbfc:	0009dc6d 	.word	0x0009dc6d
   9dc00:	0009dc6d 	.word	0x0009dc6d
   9dc04:	0009dc6d 	.word	0x0009dc6d
   9dc08:	0009dc6d 	.word	0x0009dc6d
   9dc0c:	0009dc1d 	.word	0x0009dc1d
				{
					
					case EVENT_STOP_DISINF:
					Cl_Disinf_StopDisinf();
   9dc10:	4b4f      	ldr	r3, [pc, #316]	; (9dd50 <Cl_disinf_controller+0x360>)
   9dc12:	4798      	blx	r3
					cl_disinfstate = CL_DISINF_STATE_IDLE;
   9dc14:	4b4a      	ldr	r3, [pc, #296]	; (9dd40 <Cl_disinf_controller+0x350>)
   9dc16:	2200      	movs	r2, #0
   9dc18:	701a      	strb	r2, [r3, #0]
					break;
   9dc1a:	e028      	b.n	9dc6e <Cl_disinf_controller+0x27e>
					
					
					
					
					//Send Pause
					CSeventcount = 0;
   9dc1c:	4b4f      	ldr	r3, [pc, #316]	; (9dd5c <Cl_disinf_controller+0x36c>)
   9dc1e:	2200      	movs	r2, #0
   9dc20:	601a      	str	r2, [r3, #0]
					 IntakeReadyFlag = true;
   9dc22:	4b4f      	ldr	r3, [pc, #316]	; (9dd60 <Cl_disinf_controller+0x370>)
   9dc24:	2201      	movs	r2, #1
   9dc26:	701a      	strb	r2, [r3, #0]
					 sv_cntrl_deactivate_valve(VALVE_ID1);
   9dc28:	2001      	movs	r0, #1
   9dc2a:	4b4e      	ldr	r3, [pc, #312]	; (9dd64 <Cl_disinf_controller+0x374>)
   9dc2c:	4798      	blx	r3
					 sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9dc2e:	2002      	movs	r0, #2
   9dc30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9dc34:	4b4c      	ldr	r3, [pc, #304]	; (9dd68 <Cl_disinf_controller+0x378>)
   9dc36:	4798      	blx	r3
					 sv_cntrl_setpumpspeed(DCMOTOR1,1000);
   9dc38:	2001      	movs	r0, #1
   9dc3a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9dc3e:	4b4a      	ldr	r3, [pc, #296]	; (9dd68 <Cl_disinf_controller+0x378>)
   9dc40:	4798      	blx	r3
					 sv_cntrl_activatepump(DCMOTOR1);
   9dc42:	2001      	movs	r0, #1
   9dc44:	4b49      	ldr	r3, [pc, #292]	; (9dd6c <Cl_disinf_controller+0x37c>)
   9dc46:	4798      	blx	r3
					 sv_cntrl_activatepump(DCMOTOR2);
   9dc48:	2002      	movs	r0, #2
   9dc4a:	4b48      	ldr	r3, [pc, #288]	; (9dd6c <Cl_disinf_controller+0x37c>)
   9dc4c:	4798      	blx	r3
					 
					 Cl_bc_controller(BC_EVENT_DISINF_INTAKE);
   9dc4e:	200f      	movs	r0, #15
   9dc50:	4b47      	ldr	r3, [pc, #284]	; (9dd70 <Cl_disinf_controller+0x380>)
   9dc52:	4798      	blx	r3
					 
					cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSCOMPLETED;
   9dc54:	4b3a      	ldr	r3, [pc, #232]	; (9dd40 <Cl_disinf_controller+0x350>)
   9dc56:	2204      	movs	r2, #4
   9dc58:	701a      	strb	r2, [r3, #0]
					
					break;
   9dc5a:	e008      	b.n	9dc6e <Cl_disinf_controller+0x27e>
					case EVENT_DISINF_TICK_SECOND:
									
					Cl_disinfsecondscounter++;
   9dc5c:	4b45      	ldr	r3, [pc, #276]	; (9dd74 <Cl_disinf_controller+0x384>)
   9dc5e:	681b      	ldr	r3, [r3, #0]
   9dc60:	3301      	adds	r3, #1
   9dc62:	4a44      	ldr	r2, [pc, #272]	; (9dd74 <Cl_disinf_controller+0x384>)
   9dc64:	6013      	str	r3, [r2, #0]
					Cl_Disinf_SendDisinfStateData();
   9dc66:	4b44      	ldr	r3, [pc, #272]	; (9dd78 <Cl_disinf_controller+0x388>)
   9dc68:	4798      	blx	r3
					//	UpdateDisinfMinuteTick();
						
							
					}

					break;
   9dc6a:	e000      	b.n	9dc6e <Cl_disinf_controller+0x27e>
					
					default:break;
   9dc6c:	bf00      	nop
				}
				
			break;
   9dc6e:	f001 b897 	b.w	9eda0 <Cl_disinf_controller+0x13b0>
			
			case CL_DISINF_STATE_FIRST_RO_RINSCOMPLETED:
				switch ( cl_disinfevent)
   9dc72:	7efb      	ldrb	r3, [r7, #27]
   9dc74:	3b02      	subs	r3, #2
   9dc76:	2b11      	cmp	r3, #17
   9dc78:	f200 80dd 	bhi.w	9de36 <Cl_disinf_controller+0x446>
   9dc7c:	a201      	add	r2, pc, #4	; (adr r2, 9dc84 <Cl_disinf_controller+0x294>)
   9dc7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9dc82:	bf00      	nop
   9dc84:	0009dd81 	.word	0x0009dd81
   9dc88:	0009dd2f 	.word	0x0009dd2f
   9dc8c:	0009de37 	.word	0x0009de37
   9dc90:	0009de37 	.word	0x0009de37
   9dc94:	0009de37 	.word	0x0009de37
   9dc98:	0009de37 	.word	0x0009de37
   9dc9c:	0009de37 	.word	0x0009de37
   9dca0:	0009de37 	.word	0x0009de37
   9dca4:	0009de37 	.word	0x0009de37
   9dca8:	0009de37 	.word	0x0009de37
   9dcac:	0009de37 	.word	0x0009de37
   9dcb0:	0009de37 	.word	0x0009de37
   9dcb4:	0009dccd 	.word	0x0009dccd
   9dcb8:	0009de37 	.word	0x0009de37
   9dcbc:	0009de37 	.word	0x0009de37
   9dcc0:	0009de37 	.word	0x0009de37
   9dcc4:	0009de37 	.word	0x0009de37
   9dcc8:	0009de2b 	.word	0x0009de2b
				{ 
					case EVENT_DISINF_TICK_500MS :
					if(CSeventcount > 2){
   9dccc:	4b23      	ldr	r3, [pc, #140]	; (9dd5c <Cl_disinf_controller+0x36c>)
   9dcce:	681b      	ldr	r3, [r3, #0]
   9dcd0:	2b02      	cmp	r3, #2
   9dcd2:	dd2b      	ble.n	9dd2c <Cl_disinf_controller+0x33c>
						
						Cl_bc_controller(BC_EVENT_STOP);
   9dcd4:	2005      	movs	r0, #5
   9dcd6:	4b26      	ldr	r3, [pc, #152]	; (9dd70 <Cl_disinf_controller+0x380>)
   9dcd8:	4798      	blx	r3
						command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9dcda:	2339      	movs	r3, #57	; 0x39
   9dcdc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						data = (Cl_Uint8Type)1;
   9dce0:	2301      	movs	r3, #1
   9dce2:	74fb      	strb	r3, [r7, #19]
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9dce4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9dce8:	f107 0313 	add.w	r3, r7, #19
   9dcec:	4610      	mov	r0, r2
   9dcee:	4619      	mov	r1, r3
   9dcf0:	2201      	movs	r2, #1
   9dcf2:	4b16      	ldr	r3, [pc, #88]	; (9dd4c <Cl_disinf_controller+0x35c>)
   9dcf4:	4798      	blx	r3
   9dcf6:	4603      	mov	r3, r0
   9dcf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						
						cl_wait(10);
   9dcfc:	200a      	movs	r0, #10
   9dcfe:	4b1f      	ldr	r3, [pc, #124]	; (9dd7c <Cl_disinf_controller+0x38c>)
   9dd00:	4798      	blx	r3

						command = CON_TX_COMMAND_DISINF_PAUSED;
   9dd02:	2338      	movs	r3, #56	; 0x38
   9dd04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						data = (Cl_Uint8Type)0;
   9dd08:	2300      	movs	r3, #0
   9dd0a:	74fb      	strb	r3, [r7, #19]
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9dd0c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9dd10:	f107 0313 	add.w	r3, r7, #19
   9dd14:	4610      	mov	r0, r2
   9dd16:	4619      	mov	r1, r3
   9dd18:	2200      	movs	r2, #0
   9dd1a:	4b0c      	ldr	r3, [pc, #48]	; (9dd4c <Cl_disinf_controller+0x35c>)
   9dd1c:	4798      	blx	r3
   9dd1e:	4603      	mov	r3, r0
   9dd20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						
						//cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSCOMPLETED;
						CSeventcount = 0;
   9dd24:	4b0d      	ldr	r3, [pc, #52]	; (9dd5c <Cl_disinf_controller+0x36c>)
   9dd26:	2200      	movs	r2, #0
   9dd28:	601a      	str	r2, [r3, #0]
						
					}
					
					break;
   9dd2a:	e085      	b.n	9de38 <Cl_disinf_controller+0x448>
   9dd2c:	e084      	b.n	9de38 <Cl_disinf_controller+0x448>
					
					case EVENT_STOP_DISINF:
					Cl_Disinf_StopDisinf();
   9dd2e:	4b08      	ldr	r3, [pc, #32]	; (9dd50 <Cl_disinf_controller+0x360>)
   9dd30:	4798      	blx	r3
					cl_disinfstate = CL_DISINF_STATE_IDLE;
   9dd32:	4b03      	ldr	r3, [pc, #12]	; (9dd40 <Cl_disinf_controller+0x350>)
   9dd34:	2200      	movs	r2, #0
   9dd36:	701a      	strb	r2, [r3, #0]
					break;
   9dd38:	e07e      	b.n	9de38 <Cl_disinf_controller+0x448>
   9dd3a:	bf00      	nop
   9dd3c:	0009edc5 	.word	0x0009edc5
   9dd40:	20071d3f 	.word	0x20071d3f
   9dd44:	200725bc 	.word	0x200725bc
   9dd48:	0009bcdd 	.word	0x0009bcdd
   9dd4c:	0009d1e9 	.word	0x0009d1e9
   9dd50:	0009f155 	.word	0x0009f155
   9dd54:	0009f301 	.word	0x0009f301
   9dd58:	0008bbb9 	.word	0x0008bbb9
   9dd5c:	2007194c 	.word	0x2007194c
   9dd60:	20071d70 	.word	0x20071d70
   9dd64:	0009b409 	.word	0x0009b409
   9dd68:	0009b461 	.word	0x0009b461
   9dd6c:	0009b32d 	.word	0x0009b32d
   9dd70:	00082ee1 	.word	0x00082ee1
   9dd74:	20071d40 	.word	0x20071d40
   9dd78:	0009f789 	.word	0x0009f789
   9dd7c:	0009421d 	.word	0x0009421d
					
									
					case EVT_RESUME_DISINF_STAGE:
					 Cl_Disinf_StartDisinf();
   9dd80:	4bb9      	ldr	r3, [pc, #740]	; (9e068 <Cl_disinf_controller+0x678>)
   9dd82:	4798      	blx	r3
					 if (flag_hotcitric == 1 || flag_citric == 1)
   9dd84:	4bb9      	ldr	r3, [pc, #740]	; (9e06c <Cl_disinf_controller+0x67c>)
   9dd86:	781b      	ldrb	r3, [r3, #0]
   9dd88:	2b01      	cmp	r3, #1
   9dd8a:	d003      	beq.n	9dd94 <Cl_disinf_controller+0x3a4>
   9dd8c:	4bb8      	ldr	r3, [pc, #736]	; (9e070 <Cl_disinf_controller+0x680>)
   9dd8e:	781b      	ldrb	r3, [r3, #0]
   9dd90:	2b01      	cmp	r3, #1
   9dd92:	d114      	bne.n	9ddbe <Cl_disinf_controller+0x3ce>
					 {
						 Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_HIGH,0,0,0);
   9dd94:	2300      	movs	r3, #0
   9dd96:	9300      	str	r3, [sp, #0]
   9dd98:	202b      	movs	r0, #43	; 0x2b
   9dd9a:	2101      	movs	r1, #1
   9dd9c:	f04f 0200 	mov.w	r2, #0
   9dda0:	f04f 0300 	mov.w	r3, #0
   9dda4:	4cb3      	ldr	r4, [pc, #716]	; (9e074 <Cl_disinf_controller+0x684>)
   9dda6:	47a0      	blx	r4
   9dda8:	4603      	mov	r3, r0
   9ddaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						 Cl_disinfretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,true );
   9ddae:	202b      	movs	r0, #43	; 0x2b
   9ddb0:	2101      	movs	r1, #1
   9ddb2:	4bb1      	ldr	r3, [pc, #708]	; (9e078 <Cl_disinf_controller+0x688>)
   9ddb4:	4798      	blx	r3
   9ddb6:	4603      	mov	r3, r0
   9ddb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9ddbc:	e017      	b.n	9ddee <Cl_disinf_controller+0x3fe>
					 }
					 else if (flag_na == 1)
   9ddbe:	4baf      	ldr	r3, [pc, #700]	; (9e07c <Cl_disinf_controller+0x68c>)
   9ddc0:	781b      	ldrb	r3, [r3, #0]
   9ddc2:	2b01      	cmp	r3, #1
   9ddc4:	d113      	bne.n	9ddee <Cl_disinf_controller+0x3fe>
					 {
						 Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_HIGH,0,0,0);
   9ddc6:	2300      	movs	r3, #0
   9ddc8:	9300      	str	r3, [sp, #0]
   9ddca:	2029      	movs	r0, #41	; 0x29
   9ddcc:	2101      	movs	r1, #1
   9ddce:	f04f 0200 	mov.w	r2, #0
   9ddd2:	f04f 0300 	mov.w	r3, #0
   9ddd6:	4ca7      	ldr	r4, [pc, #668]	; (9e074 <Cl_disinf_controller+0x684>)
   9ddd8:	47a0      	blx	r4
   9ddda:	4603      	mov	r3, r0
   9dddc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						  Cl_disinfretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,true );
   9dde0:	2029      	movs	r0, #41	; 0x29
   9dde2:	2101      	movs	r1, #1
   9dde4:	4ba4      	ldr	r3, [pc, #656]	; (9e078 <Cl_disinf_controller+0x688>)
   9dde6:	4798      	blx	r3
   9dde8:	4603      	mov	r3, r0
   9ddea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					// cl_disinfstate = CL_DISINF_STATE_INTER;
			//		 command = CON_TX_COMMAND_DISINF_PAUSED;
			//		  data = (Cl_Uint8Type)0;
			//		  Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
					
 					 command = CON_TX_COMMAND_DISINF_RESUMED;
   9ddee:	233b      	movs	r3, #59	; 0x3b
   9ddf0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 					 data = (Cl_Uint8Type)0;
   9ddf4:	2300      	movs	r3, #0
   9ddf6:	74fb      	strb	r3, [r7, #19]
					 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9ddf8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9ddfc:	f107 0313 	add.w	r3, r7, #19
   9de00:	4610      	mov	r0, r2
   9de02:	4619      	mov	r1, r3
   9de04:	2200      	movs	r2, #0
   9de06:	4b9e      	ldr	r3, [pc, #632]	; (9e080 <Cl_disinf_controller+0x690>)
   9de08:	4798      	blx	r3
   9de0a:	4603      	mov	r3, r0
   9de0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 					cl_disinfstate = CL_DISINF_STATE_DISINF_OPENFILL;
   9de10:	4b9c      	ldr	r3, [pc, #624]	; (9e084 <Cl_disinf_controller+0x694>)
   9de12:	2205      	movs	r2, #5
   9de14:	701a      	strb	r2, [r3, #0]
 					sv_cntrl_activate_valve(VALVE_ID16);
   9de16:	2010      	movs	r0, #16
   9de18:	4b9b      	ldr	r3, [pc, #620]	; (9e088 <Cl_disinf_controller+0x698>)
   9de1a:	4798      	blx	r3
 					sv_cntrl_deactivate_valve(VALVE_ID18);
   9de1c:	2012      	movs	r0, #18
   9de1e:	4b9b      	ldr	r3, [pc, #620]	; (9e08c <Cl_disinf_controller+0x69c>)
   9de20:	4798      	blx	r3

					 cl_disinfstate = CL_DISINF_STATE_DISINF_OPENFILL;
   9de22:	4b98      	ldr	r3, [pc, #608]	; (9e084 <Cl_disinf_controller+0x694>)
   9de24:	2205      	movs	r2, #5
   9de26:	701a      	strb	r2, [r3, #0]
// 					 command = CON_TX_COMMAND_DISINF_RESUMED;
// 					 data = (Cl_Uint8Type)0;
// 					 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
					break;
   9de28:	e006      	b.n	9de38 <Cl_disinf_controller+0x448>
					
					case EVENT_DISINF_ALARM:
					Cl_disinfretcode = Cl_disinf_ProcessAlarms();
   9de2a:	4b99      	ldr	r3, [pc, #612]	; (9e090 <Cl_disinf_controller+0x6a0>)
   9de2c:	4798      	blx	r3
   9de2e:	4603      	mov	r3, r0
   9de30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
   9de34:	e000      	b.n	9de38 <Cl_disinf_controller+0x448>
					
					
					default:break;
   9de36:	bf00      	nop
					
							
				}
			
			break;
   9de38:	f000 bfb2 	b.w	9eda0 <Cl_disinf_controller+0x13b0>
			case CL_DISINF_STATE_INTER:
				switch (cl_disinfevent)
   9de3c:	7efb      	ldrb	r3, [r7, #27]
   9de3e:	3b03      	subs	r3, #3
   9de40:	2b22      	cmp	r3, #34	; 0x22
   9de42:	f200 87a8 	bhi.w	9ed96 <Cl_disinf_controller+0x13a6>
   9de46:	a201      	add	r2, pc, #4	; (adr r2, 9de4c <Cl_disinf_controller+0x45c>)
   9de48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9de4c:	0009ded9 	.word	0x0009ded9
   9de50:	0009ed97 	.word	0x0009ed97
   9de54:	0009ed97 	.word	0x0009ed97
   9de58:	0009ed97 	.word	0x0009ed97
   9de5c:	0009ed97 	.word	0x0009ed97
   9de60:	0009ed97 	.word	0x0009ed97
   9de64:	0009ed97 	.word	0x0009ed97
   9de68:	0009ed97 	.word	0x0009ed97
   9de6c:	0009ed97 	.word	0x0009ed97
   9de70:	0009ed97 	.word	0x0009ed97
   9de74:	0009ed97 	.word	0x0009ed97
   9de78:	0009ed97 	.word	0x0009ed97
   9de7c:	0009df17 	.word	0x0009df17
   9de80:	0009ed97 	.word	0x0009ed97
   9de84:	0009ed97 	.word	0x0009ed97
   9de88:	0009ed97 	.word	0x0009ed97
   9de8c:	0009dee5 	.word	0x0009dee5
   9de90:	0009ed97 	.word	0x0009ed97
   9de94:	0009ed97 	.word	0x0009ed97
   9de98:	0009ed97 	.word	0x0009ed97
   9de9c:	0009ed97 	.word	0x0009ed97
   9dea0:	0009ed97 	.word	0x0009ed97
   9dea4:	0009ed97 	.word	0x0009ed97
   9dea8:	0009ed97 	.word	0x0009ed97
   9deac:	0009ed97 	.word	0x0009ed97
   9deb0:	0009ed97 	.word	0x0009ed97
   9deb4:	0009ed97 	.word	0x0009ed97
   9deb8:	0009ed97 	.word	0x0009ed97
   9debc:	0009ed97 	.word	0x0009ed97
   9dec0:	0009ed97 	.word	0x0009ed97
   9dec4:	0009ed97 	.word	0x0009ed97
   9dec8:	0009ed97 	.word	0x0009ed97
   9decc:	0009ed97 	.word	0x0009ed97
   9ded0:	0009ed97 	.word	0x0009ed97
   9ded4:	0009def1 	.word	0x0009def1
				{
					case EVENT_STOP_DISINF:
					Cl_Disinf_StopDisinf();
   9ded8:	4b6e      	ldr	r3, [pc, #440]	; (9e094 <Cl_disinf_controller+0x6a4>)
   9deda:	4798      	blx	r3
					cl_disinfstate = CL_DISINF_STATE_IDLE;
   9dedc:	4b69      	ldr	r3, [pc, #420]	; (9e084 <Cl_disinf_controller+0x694>)
   9dede:	2200      	movs	r2, #0
   9dee0:	701a      	strb	r2, [r3, #0]
					break;
   9dee2:	e08f      	b.n	9e004 <Cl_disinf_controller+0x614>
					
					case EVENT_DISINF_ALARM:
					Cl_disinfretcode =  Cl_disinf_ProcessAlarms();
   9dee4:	4b6a      	ldr	r3, [pc, #424]	; (9e090 <Cl_disinf_controller+0x6a0>)
   9dee6:	4798      	blx	r3
   9dee8:	4603      	mov	r3, r0
   9deea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
   9deee:	e089      	b.n	9e004 <Cl_disinf_controller+0x614>
					
					case EVENT_DISINF_CLR_ALARM:
					sv_cntrl_resetredalarm();
   9def0:	4b69      	ldr	r3, [pc, #420]	; (9e098 <Cl_disinf_controller+0x6a8>)
   9def2:	4798      	blx	r3
					sv_cntrl_nobuzzer();
   9def4:	4b69      	ldr	r3, [pc, #420]	; (9e09c <Cl_disinf_controller+0x6ac>)
   9def6:	4798      	blx	r3
					Cl_Disinf_resumeDisinf();
   9def8:	4b69      	ldr	r3, [pc, #420]	; (9e0a0 <Cl_disinf_controller+0x6b0>)
   9defa:	4798      	blx	r3
					if (alarm_flag == 1)
   9defc:	4b69      	ldr	r3, [pc, #420]	; (9e0a4 <Cl_disinf_controller+0x6b4>)
   9defe:	781b      	ldrb	r3, [r3, #0]
   9df00:	b2db      	uxtb	r3, r3
   9df02:	2b01      	cmp	r3, #1
   9df04:	d106      	bne.n	9df14 <Cl_disinf_controller+0x524>
					{
					 cl_disinfstate = CL_DISINF_STATE_DISINF_OPENFILL;
   9df06:	4b5f      	ldr	r3, [pc, #380]	; (9e084 <Cl_disinf_controller+0x694>)
   9df08:	2205      	movs	r2, #5
   9df0a:	701a      	strb	r2, [r3, #0]
						alarm_flag = 0;
   9df0c:	4b65      	ldr	r3, [pc, #404]	; (9e0a4 <Cl_disinf_controller+0x6b4>)
   9df0e:	2200      	movs	r2, #0
   9df10:	701a      	strb	r2, [r3, #0]
					}
					break;
   9df12:	e077      	b.n	9e004 <Cl_disinf_controller+0x614>
   9df14:	e076      	b.n	9e004 <Cl_disinf_controller+0x614>
					
					case EVENT_DISINF_TICK_SECOND:
						for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9df16:	4b64      	ldr	r3, [pc, #400]	; (9e0a8 <Cl_disinf_controller+0x6b8>)
   9df18:	2200      	movs	r2, #0
   9df1a:	801a      	strh	r2, [r3, #0]
   9df1c:	e06d      	b.n	9dffa <Cl_disinf_controller+0x60a>
						{
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER",8);
							Cl_Alarm_GetAlarmStatus(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId,&Cl_DisinfAlarmTable[tempcount].IsActive);
   9df1e:	4b62      	ldr	r3, [pc, #392]	; (9e0a8 <Cl_disinf_controller+0x6b8>)
   9df20:	881b      	ldrh	r3, [r3, #0]
   9df22:	4619      	mov	r1, r3
   9df24:	4a61      	ldr	r2, [pc, #388]	; (9e0ac <Cl_disinf_controller+0x6bc>)
   9df26:	460b      	mov	r3, r1
   9df28:	00db      	lsls	r3, r3, #3
   9df2a:	1a5b      	subs	r3, r3, r1
   9df2c:	4413      	add	r3, r2
   9df2e:	7819      	ldrb	r1, [r3, #0]
   9df30:	4b5d      	ldr	r3, [pc, #372]	; (9e0a8 <Cl_disinf_controller+0x6b8>)
   9df32:	881b      	ldrh	r3, [r3, #0]
   9df34:	461a      	mov	r2, r3
   9df36:	4613      	mov	r3, r2
   9df38:	00db      	lsls	r3, r3, #3
   9df3a:	1a9b      	subs	r3, r3, r2
   9df3c:	4a5b      	ldr	r2, [pc, #364]	; (9e0ac <Cl_disinf_controller+0x6bc>)
   9df3e:	4413      	add	r3, r2
   9df40:	3302      	adds	r3, #2
   9df42:	4608      	mov	r0, r1
   9df44:	4619      	mov	r1, r3
   9df46:	4b5a      	ldr	r3, [pc, #360]	; (9e0b0 <Cl_disinf_controller+0x6c0>)
   9df48:	4798      	blx	r3
					 
							if (Cl_DisinfAlarmTable[tempcount].IsActive)
   9df4a:	4b57      	ldr	r3, [pc, #348]	; (9e0a8 <Cl_disinf_controller+0x6b8>)
   9df4c:	881b      	ldrh	r3, [r3, #0]
   9df4e:	4619      	mov	r1, r3
   9df50:	4a56      	ldr	r2, [pc, #344]	; (9e0ac <Cl_disinf_controller+0x6bc>)
   9df52:	460b      	mov	r3, r1
   9df54:	00db      	lsls	r3, r3, #3
   9df56:	1a5b      	subs	r3, r3, r1
   9df58:	4413      	add	r3, r2
   9df5a:	789b      	ldrb	r3, [r3, #2]
   9df5c:	2b00      	cmp	r3, #0
   9df5e:	d014      	beq.n	9df8a <Cl_disinf_controller+0x59a>
							{
								sv_cntrl_setredalarm();
   9df60:	4b54      	ldr	r3, [pc, #336]	; (9e0b4 <Cl_disinf_controller+0x6c4>)
   9df62:	4798      	blx	r3
								sv_cntrl_buzzer();
   9df64:	4b54      	ldr	r3, [pc, #336]	; (9e0b8 <Cl_disinf_controller+0x6c8>)
   9df66:	4798      	blx	r3
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
   9df68:	2018      	movs	r0, #24
   9df6a:	4954      	ldr	r1, [pc, #336]	; (9e0bc <Cl_disinf_controller+0x6cc>)
   9df6c:	2208      	movs	r2, #8
   9df6e:	4b44      	ldr	r3, [pc, #272]	; (9e080 <Cl_disinf_controller+0x690>)
   9df70:	4798      	blx	r3
								Cl_Disinf_StopDisinf();
   9df72:	4b48      	ldr	r3, [pc, #288]	; (9e094 <Cl_disinf_controller+0x6a4>)
   9df74:	4798      	blx	r3
								cl_disinfstate = CL_DISINF_STATE_INTER;
   9df76:	4b43      	ldr	r3, [pc, #268]	; (9e084 <Cl_disinf_controller+0x694>)
   9df78:	2210      	movs	r2, #16
   9df7a:	701a      	strb	r2, [r3, #0]
								alarm_flag1 = 1;
   9df7c:	4b50      	ldr	r3, [pc, #320]	; (9e0c0 <Cl_disinf_controller+0x6d0>)
   9df7e:	2201      	movs	r2, #1
   9df80:	701a      	strb	r2, [r3, #0]
								tempcount=0;
   9df82:	4b49      	ldr	r3, [pc, #292]	; (9e0a8 <Cl_disinf_controller+0x6b8>)
   9df84:	2200      	movs	r2, #0
   9df86:	801a      	strh	r2, [r3, #0]
								break;
   9df88:	e03b      	b.n	9e002 <Cl_disinf_controller+0x612>
							}
					 
							else if (tempcount == CL_DISINF_ALRM_MAX - 1)
   9df8a:	4b47      	ldr	r3, [pc, #284]	; (9e0a8 <Cl_disinf_controller+0x6b8>)
   9df8c:	881b      	ldrh	r3, [r3, #0]
   9df8e:	2b0b      	cmp	r3, #11
   9df90:	d12d      	bne.n	9dfee <Cl_disinf_controller+0x5fe>
							{
								if(!Cl_DisinfAlarmTable[tempcount].IsActive)
   9df92:	4b45      	ldr	r3, [pc, #276]	; (9e0a8 <Cl_disinf_controller+0x6b8>)
   9df94:	881b      	ldrh	r3, [r3, #0]
   9df96:	4619      	mov	r1, r3
   9df98:	4a44      	ldr	r2, [pc, #272]	; (9e0ac <Cl_disinf_controller+0x6bc>)
   9df9a:	460b      	mov	r3, r1
   9df9c:	00db      	lsls	r3, r3, #3
   9df9e:	1a5b      	subs	r3, r3, r1
   9dfa0:	4413      	add	r3, r2
   9dfa2:	789b      	ldrb	r3, [r3, #2]
   9dfa4:	f083 0301 	eor.w	r3, r3, #1
   9dfa8:	b2db      	uxtb	r3, r3
   9dfaa:	2b00      	cmp	r3, #0
   9dfac:	d01f      	beq.n	9dfee <Cl_disinf_controller+0x5fe>
								{
									sv_cntrl_resetredalarm();
   9dfae:	4b3a      	ldr	r3, [pc, #232]	; (9e098 <Cl_disinf_controller+0x6a8>)
   9dfb0:	4798      	blx	r3
									sv_cntrl_nobuzzer();
   9dfb2:	4b3a      	ldr	r3, [pc, #232]	; (9e09c <Cl_disinf_controller+0x6ac>)
   9dfb4:	4798      	blx	r3
									alarm_flag = 1;
   9dfb6:	4b3b      	ldr	r3, [pc, #236]	; (9e0a4 <Cl_disinf_controller+0x6b4>)
   9dfb8:	2201      	movs	r2, #1
   9dfba:	701a      	strb	r2, [r3, #0]
									if (alarm_flag1 == 0)
   9dfbc:	4b40      	ldr	r3, [pc, #256]	; (9e0c0 <Cl_disinf_controller+0x6d0>)
   9dfbe:	781b      	ldrb	r3, [r3, #0]
   9dfc0:	b2db      	uxtb	r3, r3
   9dfc2:	2b00      	cmp	r3, #0
   9dfc4:	d113      	bne.n	9dfee <Cl_disinf_controller+0x5fe>
									{
					 command = CON_TX_COMMAND_DISINF_RESUMED;
   9dfc6:	233b      	movs	r3, #59	; 0x3b
   9dfc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					 data = (Cl_Uint8Type)0;
   9dfcc:	2300      	movs	r3, #0
   9dfce:	74fb      	strb	r3, [r7, #19]
					 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9dfd0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9dfd4:	f107 0313 	add.w	r3, r7, #19
   9dfd8:	4610      	mov	r0, r2
   9dfda:	4619      	mov	r1, r3
   9dfdc:	2200      	movs	r2, #0
   9dfde:	4b28      	ldr	r3, [pc, #160]	; (9e080 <Cl_disinf_controller+0x690>)
   9dfe0:	4798      	blx	r3
   9dfe2:	4603      	mov	r3, r0
   9dfe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										cl_disinfstate = CL_DISINF_STATE_DISINF_OPENFILL;
   9dfe8:	4b26      	ldr	r3, [pc, #152]	; (9e084 <Cl_disinf_controller+0x694>)
   9dfea:	2205      	movs	r2, #5
   9dfec:	701a      	strb	r2, [r3, #0]
						alarm_flag = 0;
					}
					break;
					
					case EVENT_DISINF_TICK_SECOND:
						for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9dfee:	4b2e      	ldr	r3, [pc, #184]	; (9e0a8 <Cl_disinf_controller+0x6b8>)
   9dff0:	881b      	ldrh	r3, [r3, #0]
   9dff2:	3301      	adds	r3, #1
   9dff4:	b29a      	uxth	r2, r3
   9dff6:	4b2c      	ldr	r3, [pc, #176]	; (9e0a8 <Cl_disinf_controller+0x6b8>)
   9dff8:	801a      	strh	r2, [r3, #0]
   9dffa:	4b2b      	ldr	r3, [pc, #172]	; (9e0a8 <Cl_disinf_controller+0x6b8>)
   9dffc:	881b      	ldrh	r3, [r3, #0]
   9dffe:	2b0b      	cmp	r3, #11
   9e000:	d98d      	bls.n	9df1e <Cl_disinf_controller+0x52e>
									//Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
									//Cl_Disinf_UpdateTimeInfo();
								}
							}
						}
					break;
   9e002:	bf00      	nop
							
				}
			break;
   9e004:	f000 bec7 	b.w	9ed96 <Cl_disinf_controller+0x13a6>
			case CL_DISINF_STATE_DISINF_OPENFILL:
					
						switch ( cl_disinfevent)
   9e008:	7efb      	ldrb	r3, [r7, #27]
   9e00a:	3b03      	subs	r3, #3
   9e00c:	2b10      	cmp	r3, #16
   9e00e:	f200 80ad 	bhi.w	9e16c <Cl_disinf_controller+0x77c>
   9e012:	a201      	add	r2, pc, #4	; (adr r2, 9e018 <Cl_disinf_controller+0x628>)
   9e014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9e018:	0009e05d 	.word	0x0009e05d
   9e01c:	0009e16d 	.word	0x0009e16d
   9e020:	0009e16d 	.word	0x0009e16d
   9e024:	0009e16d 	.word	0x0009e16d
   9e028:	0009e16d 	.word	0x0009e16d
   9e02c:	0009e16d 	.word	0x0009e16d
   9e030:	0009e16d 	.word	0x0009e16d
   9e034:	0009e16d 	.word	0x0009e16d
   9e038:	0009e16d 	.word	0x0009e16d
   9e03c:	0009e16d 	.word	0x0009e16d
   9e040:	0009e16d 	.word	0x0009e16d
   9e044:	0009e16d 	.word	0x0009e16d
   9e048:	0009e0c5 	.word	0x0009e0c5
   9e04c:	0009e16d 	.word	0x0009e16d
   9e050:	0009e16d 	.word	0x0009e16d
   9e054:	0009e16d 	.word	0x0009e16d
   9e058:	0009e161 	.word	0x0009e161
						{

							case EVENT_STOP_DISINF:
							Cl_Disinf_StopDisinf();
   9e05c:	4b0d      	ldr	r3, [pc, #52]	; (9e094 <Cl_disinf_controller+0x6a4>)
   9e05e:	4798      	blx	r3
							cl_disinfstate = CL_DISINF_STATE_IDLE;
   9e060:	4b08      	ldr	r3, [pc, #32]	; (9e084 <Cl_disinf_controller+0x694>)
   9e062:	2200      	movs	r2, #0
   9e064:	701a      	strb	r2, [r3, #0]
							break;
   9e066:	e082      	b.n	9e16e <Cl_disinf_controller+0x77e>
   9e068:	0009eff9 	.word	0x0009eff9
   9e06c:	20071b93 	.word	0x20071b93
   9e070:	20071b96 	.word	0x20071b96
   9e074:	000829dd 	.word	0x000829dd
   9e078:	00082a35 	.word	0x00082a35
   9e07c:	20071b95 	.word	0x20071b95
   9e080:	0009d1e9 	.word	0x0009d1e9
   9e084:	20071d3f 	.word	0x20071d3f
   9e088:	0009b3e9 	.word	0x0009b3e9
   9e08c:	0009b409 	.word	0x0009b409
   9e090:	0009f45d 	.word	0x0009f45d
   9e094:	0009f155 	.word	0x0009f155
   9e098:	0009b685 	.word	0x0009b685
   9e09c:	0009b6c1 	.word	0x0009b6c1
   9e0a0:	0009f24d 	.word	0x0009f24d
   9e0a4:	20071d3d 	.word	0x20071d3d
   9e0a8:	20072a48 	.word	0x20072a48
   9e0ac:	20070d40 	.word	0x20070d40
   9e0b0:	00082c09 	.word	0x00082c09
   9e0b4:	0009b635 	.word	0x0009b635
   9e0b8:	0009b671 	.word	0x0009b671
   9e0bc:	000aa678 	.word	0x000aa678
   9e0c0:	20071d3e 	.word	0x20071d3e
							case EVENT_DISINF_TICK_100MS:
							break;
							case EVENT_DISINF_TICK_500MS:
							break;
							case EVENT_DISINF_TICK_SECOND:
							sec_count++;
   9e0c4:	4bb6      	ldr	r3, [pc, #728]	; (9e3a0 <Cl_disinf_controller+0x9b0>)
   9e0c6:	881b      	ldrh	r3, [r3, #0]
   9e0c8:	3301      	adds	r3, #1
   9e0ca:	b29a      	uxth	r2, r3
   9e0cc:	4bb4      	ldr	r3, [pc, #720]	; (9e3a0 <Cl_disinf_controller+0x9b0>)
   9e0ce:	801a      	strh	r2, [r3, #0]
							if(sec_count > 3)
   9e0d0:	4bb3      	ldr	r3, [pc, #716]	; (9e3a0 <Cl_disinf_controller+0x9b0>)
   9e0d2:	881b      	ldrh	r3, [r3, #0]
   9e0d4:	2b03      	cmp	r3, #3
   9e0d6:	d902      	bls.n	9e0de <Cl_disinf_controller+0x6ee>
							{
								Cl_disinfOpenFillTimeOut = true;
   9e0d8:	4bb2      	ldr	r3, [pc, #712]	; (9e3a4 <Cl_disinf_controller+0x9b4>)
   9e0da:	2201      	movs	r2, #1
   9e0dc:	701a      	strb	r2, [r3, #0]
							}
							//wait for 1 min openfill before intake;
							if(Cl_disinfOpenFillTimeOut)
   9e0de:	4bb1      	ldr	r3, [pc, #708]	; (9e3a4 <Cl_disinf_controller+0x9b4>)
   9e0e0:	781b      	ldrb	r3, [r3, #0]
   9e0e2:	2b00      	cmp	r3, #0
   9e0e4:	d03b      	beq.n	9e15e <Cl_disinf_controller+0x76e>
							{
								if (flag_hotcitric == 1 || flag_citric == 1 )
   9e0e6:	4bb0      	ldr	r3, [pc, #704]	; (9e3a8 <Cl_disinf_controller+0x9b8>)
   9e0e8:	781b      	ldrb	r3, [r3, #0]
   9e0ea:	2b01      	cmp	r3, #1
   9e0ec:	d003      	beq.n	9e0f6 <Cl_disinf_controller+0x706>
   9e0ee:	4baf      	ldr	r3, [pc, #700]	; (9e3ac <Cl_disinf_controller+0x9bc>)
   9e0f0:	781b      	ldrb	r3, [r3, #0]
   9e0f2:	2b01      	cmp	r3, #1
   9e0f4:	d119      	bne.n	9e12a <Cl_disinf_controller+0x73a>
								{
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   9e0f6:	2001      	movs	r0, #1
   9e0f8:	4bad      	ldr	r3, [pc, #692]	; (9e3b0 <Cl_disinf_controller+0x9c0>)
   9e0fa:	4798      	blx	r3
   9e0fc:	4603      	mov	r3, r0
   9e0fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   9e102:	2002      	movs	r0, #2
   9e104:	4baa      	ldr	r3, [pc, #680]	; (9e3b0 <Cl_disinf_controller+0x9c0>)
   9e106:	4798      	blx	r3
   9e108:	4603      	mov	r3, r0
   9e10a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								//Cl_bc_controller(BC_EVENT_STOP);
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"INT",3);
   9e10e:	2018      	movs	r0, #24
   9e110:	49a8      	ldr	r1, [pc, #672]	; (9e3b4 <Cl_disinf_controller+0x9c4>)
   9e112:	2203      	movs	r2, #3
   9e114:	4ba8      	ldr	r3, [pc, #672]	; (9e3b8 <Cl_disinf_controller+0x9c8>)
   9e116:	4798      	blx	r3
								sv_prop_start_citricdisinfect_intake();
   9e118:	4ba8      	ldr	r3, [pc, #672]	; (9e3bc <Cl_disinf_controller+0x9cc>)
   9e11a:	4798      	blx	r3
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE;
   9e11c:	4ba8      	ldr	r3, [pc, #672]	; (9e3c0 <Cl_disinf_controller+0x9d0>)
   9e11e:	2206      	movs	r2, #6
   9e120:	701a      	strb	r2, [r3, #0]
								sec_count =0;
   9e122:	4b9f      	ldr	r3, [pc, #636]	; (9e3a0 <Cl_disinf_controller+0x9b0>)
   9e124:	2200      	movs	r2, #0
   9e126:	801a      	strh	r2, [r3, #0]
   9e128:	e019      	b.n	9e15e <Cl_disinf_controller+0x76e>
								}
								else
								{
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   9e12a:	2001      	movs	r0, #1
   9e12c:	4ba0      	ldr	r3, [pc, #640]	; (9e3b0 <Cl_disinf_controller+0x9c0>)
   9e12e:	4798      	blx	r3
   9e130:	4603      	mov	r3, r0
   9e132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   9e136:	2002      	movs	r0, #2
   9e138:	4b9d      	ldr	r3, [pc, #628]	; (9e3b0 <Cl_disinf_controller+0x9c0>)
   9e13a:	4798      	blx	r3
   9e13c:	4603      	mov	r3, r0
   9e13e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								//Cl_bc_controller(BC_EVENT_STOP);
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"INT",3);
   9e142:	2018      	movs	r0, #24
   9e144:	499b      	ldr	r1, [pc, #620]	; (9e3b4 <Cl_disinf_controller+0x9c4>)
   9e146:	2203      	movs	r2, #3
   9e148:	4b9b      	ldr	r3, [pc, #620]	; (9e3b8 <Cl_disinf_controller+0x9c8>)
   9e14a:	4798      	blx	r3
								sv_prop_start_disinfect_intake();
   9e14c:	4b9d      	ldr	r3, [pc, #628]	; (9e3c4 <Cl_disinf_controller+0x9d4>)
   9e14e:	4798      	blx	r3
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE;
   9e150:	4b9b      	ldr	r3, [pc, #620]	; (9e3c0 <Cl_disinf_controller+0x9d0>)
   9e152:	2206      	movs	r2, #6
   9e154:	701a      	strb	r2, [r3, #0]
								sec_count =0;
   9e156:	4b92      	ldr	r3, [pc, #584]	; (9e3a0 <Cl_disinf_controller+0x9b0>)
   9e158:	2200      	movs	r2, #0
   9e15a:	801a      	strh	r2, [r3, #0]
								
							}

					
							
							break;
   9e15c:	e007      	b.n	9e16e <Cl_disinf_controller+0x77e>
   9e15e:	e006      	b.n	9e16e <Cl_disinf_controller+0x77e>
							case EVENT_DISINF_ALARM:
							Cl_disinfretcode = Cl_disinf_ProcessAlarms();
   9e160:	4b99      	ldr	r3, [pc, #612]	; (9e3c8 <Cl_disinf_controller+0x9d8>)
   9e162:	4798      	blx	r3
   9e164:	4603      	mov	r3, r0
   9e166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
   9e16a:	e000      	b.n	9e16e <Cl_disinf_controller+0x77e>
							default:break;
   9e16c:	bf00      	nop
						}
			break;
   9e16e:	f000 be17 	b.w	9eda0 <Cl_disinf_controller+0x13b0>
			
			case CL_DISINF_STATE_DISINF_INTAKE:
						switch ( cl_disinfevent)
   9e172:	7efb      	ldrb	r3, [r7, #27]
   9e174:	3b03      	subs	r3, #3
   9e176:	2b10      	cmp	r3, #16
   9e178:	f200 813e 	bhi.w	9e3f8 <Cl_disinf_controller+0xa08>
   9e17c:	a201      	add	r2, pc, #4	; (adr r2, 9e184 <Cl_disinf_controller+0x794>)
   9e17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9e182:	bf00      	nop
   9e184:	0009e1c9 	.word	0x0009e1c9
   9e188:	0009e3f9 	.word	0x0009e3f9
   9e18c:	0009e3f9 	.word	0x0009e3f9
   9e190:	0009e3f9 	.word	0x0009e3f9
   9e194:	0009e3f9 	.word	0x0009e3f9
   9e198:	0009e3f9 	.word	0x0009e3f9
   9e19c:	0009e3f9 	.word	0x0009e3f9
   9e1a0:	0009e3f9 	.word	0x0009e3f9
   9e1a4:	0009e3f9 	.word	0x0009e3f9
   9e1a8:	0009e3f9 	.word	0x0009e3f9
   9e1ac:	0009e3f9 	.word	0x0009e3f9
   9e1b0:	0009e3f9 	.word	0x0009e3f9
   9e1b4:	0009e1d5 	.word	0x0009e1d5
   9e1b8:	0009e3f9 	.word	0x0009e3f9
   9e1bc:	0009e3f9 	.word	0x0009e3f9
   9e1c0:	0009e3f9 	.word	0x0009e3f9
   9e1c4:	0009e3ed 	.word	0x0009e3ed
						{
							
							case EVENT_STOP_DISINF:
							Cl_Disinf_StopDisinf();
   9e1c8:	4b80      	ldr	r3, [pc, #512]	; (9e3cc <Cl_disinf_controller+0x9dc>)
   9e1ca:	4798      	blx	r3
							cl_disinfstate = CL_DISINF_STATE_IDLE;
   9e1cc:	4b7c      	ldr	r3, [pc, #496]	; (9e3c0 <Cl_disinf_controller+0x9d0>)
   9e1ce:	2200      	movs	r2, #0
   9e1d0:	701a      	strb	r2, [r3, #0]
							break;
   9e1d2:	e112      	b.n	9e3fa <Cl_disinf_controller+0xa0a>
							break;
							case EVENT_DISINF_TICK_500MS:
							break;
							case EVENT_DISINF_TICK_SECOND:
						//	Cl_disinfsecondscounter++;
							Cl_Disinf_SendDisinfStateData();
   9e1d4:	4b7e      	ldr	r3, [pc, #504]	; (9e3d0 <Cl_disinf_controller+0x9e0>)
   9e1d6:	4798      	blx	r3
						
					//			UpdateDisinfMinuteTick();
						
						
							}
							sec_count ++;
   9e1d8:	4b71      	ldr	r3, [pc, #452]	; (9e3a0 <Cl_disinf_controller+0x9b0>)
   9e1da:	881b      	ldrh	r3, [r3, #0]
   9e1dc:	3301      	adds	r3, #1
   9e1de:	b29a      	uxth	r2, r3
   9e1e0:	4b6f      	ldr	r3, [pc, #444]	; (9e3a0 <Cl_disinf_controller+0x9b0>)
   9e1e2:	801a      	strh	r2, [r3, #0]
							if (flag_hotcitric == 1 )
   9e1e4:	4b70      	ldr	r3, [pc, #448]	; (9e3a8 <Cl_disinf_controller+0x9b8>)
   9e1e6:	781b      	ldrb	r3, [r3, #0]
   9e1e8:	2b01      	cmp	r3, #1
   9e1ea:	d144      	bne.n	9e276 <Cl_disinf_controller+0x886>
							{
								if(sec_count > 90)
   9e1ec:	4b6c      	ldr	r3, [pc, #432]	; (9e3a0 <Cl_disinf_controller+0x9b0>)
   9e1ee:	881b      	ldrh	r3, [r3, #0]
   9e1f0:	2b5a      	cmp	r3, #90	; 0x5a
   9e1f2:	d940      	bls.n	9e276 <Cl_disinf_controller+0x886>
								{
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ove",3);
   9e1f4:	2018      	movs	r0, #24
   9e1f6:	4977      	ldr	r1, [pc, #476]	; (9e3d4 <Cl_disinf_controller+0x9e4>)
   9e1f8:	2203      	movs	r2, #3
   9e1fa:	4b6f      	ldr	r3, [pc, #444]	; (9e3b8 <Cl_disinf_controller+0x9c8>)
   9e1fc:	4798      	blx	r3
									sv_prop_stop_citricdisinfect_intake();
   9e1fe:	4b76      	ldr	r3, [pc, #472]	; (9e3d8 <Cl_disinf_controller+0x9e8>)
   9e200:	4798      	blx	r3
									Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   9e202:	2002      	movs	r0, #2
   9e204:	4b6a      	ldr	r3, [pc, #424]	; (9e3b0 <Cl_disinf_controller+0x9c0>)
   9e206:	4798      	blx	r3
   9e208:	4603      	mov	r3, r0
   9e20a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   9e20e:	2001      	movs	r0, #1
   9e210:	4b67      	ldr	r3, [pc, #412]	; (9e3b0 <Cl_disinf_controller+0x9c0>)
   9e212:	4798      	blx	r3
   9e214:	4603      	mov	r3, r0
   9e216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									Cl_bc_controller(BC_EVENT_STOP);
   9e21a:	2005      	movs	r0, #5
   9e21c:	4b6f      	ldr	r3, [pc, #444]	; (9e3dc <Cl_disinf_controller+0x9ec>)
   9e21e:	4798      	blx	r3
									
									command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9e220:	2339      	movs	r3, #57	; 0x39
   9e222:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)2;
   9e226:	2302      	movs	r3, #2
   9e228:	74fb      	strb	r3, [r7, #19]
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9e22a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9e22e:	f107 0313 	add.w	r3, r7, #19
   9e232:	4610      	mov	r0, r2
   9e234:	4619      	mov	r1, r3
   9e236:	2201      	movs	r2, #1
   9e238:	4b5f      	ldr	r3, [pc, #380]	; (9e3b8 <Cl_disinf_controller+0x9c8>)
   9e23a:	4798      	blx	r3
   9e23c:	4603      	mov	r3, r0
   9e23e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									
									IntakeReadyFlag = false;
   9e242:	4b67      	ldr	r3, [pc, #412]	; (9e3e0 <Cl_disinf_controller+0x9f0>)
   9e244:	2200      	movs	r2, #0
   9e246:	701a      	strb	r2, [r3, #0]
									
									cl_wait(20);
   9e248:	2014      	movs	r0, #20
   9e24a:	4b66      	ldr	r3, [pc, #408]	; (9e3e4 <Cl_disinf_controller+0x9f4>)
   9e24c:	4798      	blx	r3

									command = CON_TX_COMMAND_DISINF_PAUSED;
   9e24e:	2338      	movs	r3, #56	; 0x38
   9e250:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)0;
   9e254:	2300      	movs	r3, #0
   9e256:	74fb      	strb	r3, [r7, #19]
						//			cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
							
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9e258:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9e25c:	f107 0313 	add.w	r3, r7, #19
   9e260:	4610      	mov	r0, r2
   9e262:	4619      	mov	r1, r3
   9e264:	2200      	movs	r2, #0
   9e266:	4b54      	ldr	r3, [pc, #336]	; (9e3b8 <Cl_disinf_controller+0x9c8>)
   9e268:	4798      	blx	r3
   9e26a:	4603      	mov	r3, r0
   9e26c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
   9e270:	4b53      	ldr	r3, [pc, #332]	; (9e3c0 <Cl_disinf_controller+0x9d0>)
   9e272:	2207      	movs	r2, #7
   9e274:	701a      	strb	r2, [r3, #0]

								}
							}
							
							if (flag_citric == 1 )
   9e276:	4b4d      	ldr	r3, [pc, #308]	; (9e3ac <Cl_disinf_controller+0x9bc>)
   9e278:	781b      	ldrb	r3, [r3, #0]
   9e27a:	2b01      	cmp	r3, #1
   9e27c:	d146      	bne.n	9e30c <Cl_disinf_controller+0x91c>
							{
								if(sec_count > 90)
   9e27e:	4b48      	ldr	r3, [pc, #288]	; (9e3a0 <Cl_disinf_controller+0x9b0>)
   9e280:	881b      	ldrh	r3, [r3, #0]
   9e282:	2b5a      	cmp	r3, #90	; 0x5a
   9e284:	f240 808a 	bls.w	9e39c <Cl_disinf_controller+0x9ac>
								{
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ove",3);
   9e288:	2018      	movs	r0, #24
   9e28a:	4952      	ldr	r1, [pc, #328]	; (9e3d4 <Cl_disinf_controller+0x9e4>)
   9e28c:	2203      	movs	r2, #3
   9e28e:	4b4a      	ldr	r3, [pc, #296]	; (9e3b8 <Cl_disinf_controller+0x9c8>)
   9e290:	4798      	blx	r3
									sv_prop_stop_citricdisinfect_intake();
   9e292:	4b51      	ldr	r3, [pc, #324]	; (9e3d8 <Cl_disinf_controller+0x9e8>)
   9e294:	4798      	blx	r3
									Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   9e296:	2002      	movs	r0, #2
   9e298:	4b45      	ldr	r3, [pc, #276]	; (9e3b0 <Cl_disinf_controller+0x9c0>)
   9e29a:	4798      	blx	r3
   9e29c:	4603      	mov	r3, r0
   9e29e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   9e2a2:	2001      	movs	r0, #1
   9e2a4:	4b42      	ldr	r3, [pc, #264]	; (9e3b0 <Cl_disinf_controller+0x9c0>)
   9e2a6:	4798      	blx	r3
   9e2a8:	4603      	mov	r3, r0
   9e2aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									Cl_bc_controller(BC_EVENT_STOP);
   9e2ae:	2005      	movs	r0, #5
   9e2b0:	4b4a      	ldr	r3, [pc, #296]	; (9e3dc <Cl_disinf_controller+0x9ec>)
   9e2b2:	4798      	blx	r3
								
								IntakeReadyFlag = false;
   9e2b4:	4b4a      	ldr	r3, [pc, #296]	; (9e3e0 <Cl_disinf_controller+0x9f0>)
   9e2b6:	2200      	movs	r2, #0
   9e2b8:	701a      	strb	r2, [r3, #0]
									
									command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9e2ba:	2339      	movs	r3, #57	; 0x39
   9e2bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)2;
   9e2c0:	2302      	movs	r3, #2
   9e2c2:	74fb      	strb	r3, [r7, #19]
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9e2c4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9e2c8:	f107 0313 	add.w	r3, r7, #19
   9e2cc:	4610      	mov	r0, r2
   9e2ce:	4619      	mov	r1, r3
   9e2d0:	2201      	movs	r2, #1
   9e2d2:	4b39      	ldr	r3, [pc, #228]	; (9e3b8 <Cl_disinf_controller+0x9c8>)
   9e2d4:	4798      	blx	r3
   9e2d6:	4603      	mov	r3, r0
   9e2d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									
									cl_wait(20);
   9e2dc:	2014      	movs	r0, #20
   9e2de:	4b41      	ldr	r3, [pc, #260]	; (9e3e4 <Cl_disinf_controller+0x9f4>)
   9e2e0:	4798      	blx	r3

									command = CON_TX_COMMAND_DISINF_PAUSED;
   9e2e2:	2338      	movs	r3, #56	; 0x38
   9e2e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)0;
   9e2e8:	2300      	movs	r3, #0
   9e2ea:	74fb      	strb	r3, [r7, #19]
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9e2ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9e2f0:	f107 0313 	add.w	r3, r7, #19
   9e2f4:	4610      	mov	r0, r2
   9e2f6:	4619      	mov	r1, r3
   9e2f8:	2200      	movs	r2, #0
   9e2fa:	4b2f      	ldr	r3, [pc, #188]	; (9e3b8 <Cl_disinf_controller+0x9c8>)
   9e2fc:	4798      	blx	r3
   9e2fe:	4603      	mov	r3, r0
   9e300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
   9e304:	4b2e      	ldr	r3, [pc, #184]	; (9e3c0 <Cl_disinf_controller+0x9d0>)
   9e306:	2207      	movs	r2, #7
   9e308:	701a      	strb	r2, [r3, #0]
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;

							}
				
							break;
   9e30a:	e076      	b.n	9e3fa <Cl_disinf_controller+0xa0a>
								

								}
							}
							
							else if(sec_count > 80)
   9e30c:	4b24      	ldr	r3, [pc, #144]	; (9e3a0 <Cl_disinf_controller+0x9b0>)
   9e30e:	881b      	ldrh	r3, [r3, #0]
   9e310:	2b50      	cmp	r3, #80	; 0x50
   9e312:	d943      	bls.n	9e39c <Cl_disinf_controller+0x9ac>
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ove",3);
   9e314:	2018      	movs	r0, #24
   9e316:	492f      	ldr	r1, [pc, #188]	; (9e3d4 <Cl_disinf_controller+0x9e4>)
   9e318:	2203      	movs	r2, #3
   9e31a:	4b27      	ldr	r3, [pc, #156]	; (9e3b8 <Cl_disinf_controller+0x9c8>)
   9e31c:	4798      	blx	r3
								sv_prop_stop_disinfect_intake();
   9e31e:	4b32      	ldr	r3, [pc, #200]	; (9e3e8 <Cl_disinf_controller+0x9f8>)
   9e320:	4798      	blx	r3
								sv_prop_stop_citricdisinfect_intake();
   9e322:	4b2d      	ldr	r3, [pc, #180]	; (9e3d8 <Cl_disinf_controller+0x9e8>)
   9e324:	4798      	blx	r3
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   9e326:	2002      	movs	r0, #2
   9e328:	4b21      	ldr	r3, [pc, #132]	; (9e3b0 <Cl_disinf_controller+0x9c0>)
   9e32a:	4798      	blx	r3
   9e32c:	4603      	mov	r3, r0
   9e32e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   9e332:	2001      	movs	r0, #1
   9e334:	4b1e      	ldr	r3, [pc, #120]	; (9e3b0 <Cl_disinf_controller+0x9c0>)
   9e336:	4798      	blx	r3
   9e338:	4603      	mov	r3, r0
   9e33a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_bc_controller(BC_EVENT_STOP);
   9e33e:	2005      	movs	r0, #5
   9e340:	4b26      	ldr	r3, [pc, #152]	; (9e3dc <Cl_disinf_controller+0x9ec>)
   9e342:	4798      	blx	r3
								//flag_hotrinse = 0;
								//Cl_AlarmActivateAlarms(ACID_IN,false);
								//Cl_AlarmActivateAlarms(BICARB_IN,false);
								command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9e344:	2339      	movs	r3, #57	; 0x39
   9e346:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
								data = (Cl_Uint8Type)2;
   9e34a:	2302      	movs	r3, #2
   9e34c:	74fb      	strb	r3, [r7, #19]
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9e34e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9e352:	f107 0313 	add.w	r3, r7, #19
   9e356:	4610      	mov	r0, r2
   9e358:	4619      	mov	r1, r3
   9e35a:	2201      	movs	r2, #1
   9e35c:	4b16      	ldr	r3, [pc, #88]	; (9e3b8 <Cl_disinf_controller+0x9c8>)
   9e35e:	4798      	blx	r3
   9e360:	4603      	mov	r3, r0
   9e362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								
								IntakeReadyFlag = false;
   9e366:	4b1e      	ldr	r3, [pc, #120]	; (9e3e0 <Cl_disinf_controller+0x9f0>)
   9e368:	2200      	movs	r2, #0
   9e36a:	701a      	strb	r2, [r3, #0]
								
								cl_wait(20);
   9e36c:	2014      	movs	r0, #20
   9e36e:	4b1d      	ldr	r3, [pc, #116]	; (9e3e4 <Cl_disinf_controller+0x9f4>)
   9e370:	4798      	blx	r3

								command = CON_TX_COMMAND_DISINF_PAUSED;
   9e372:	2338      	movs	r3, #56	; 0x38
   9e374:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
								data = (Cl_Uint8Type)0;
   9e378:	2300      	movs	r3, #0
   9e37a:	74fb      	strb	r3, [r7, #19]
							//	cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
								
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9e37c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9e380:	f107 0313 	add.w	r3, r7, #19
   9e384:	4610      	mov	r0, r2
   9e386:	4619      	mov	r1, r3
   9e388:	2200      	movs	r2, #0
   9e38a:	4b0b      	ldr	r3, [pc, #44]	; (9e3b8 <Cl_disinf_controller+0x9c8>)
   9e38c:	4798      	blx	r3
   9e38e:	4603      	mov	r3, r0
   9e390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
   9e394:	4b0a      	ldr	r3, [pc, #40]	; (9e3c0 <Cl_disinf_controller+0x9d0>)
   9e396:	2207      	movs	r2, #7
   9e398:	701a      	strb	r2, [r3, #0]

							}
				
							break;
   9e39a:	e02e      	b.n	9e3fa <Cl_disinf_controller+0xa0a>
   9e39c:	e02d      	b.n	9e3fa <Cl_disinf_controller+0xa0a>
   9e39e:	bf00      	nop
   9e3a0:	20071d68 	.word	0x20071d68
   9e3a4:	20070d3e 	.word	0x20070d3e
   9e3a8:	20071b93 	.word	0x20071b93
   9e3ac:	20071b96 	.word	0x20071b96
   9e3b0:	0009b369 	.word	0x0009b369
   9e3b4:	000aa680 	.word	0x000aa680
   9e3b8:	0009d1e9 	.word	0x0009d1e9
   9e3bc:	0009b829 	.word	0x0009b829
   9e3c0:	20071d3f 	.word	0x20071d3f
   9e3c4:	0009b801 	.word	0x0009b801
   9e3c8:	0009f45d 	.word	0x0009f45d
   9e3cc:	0009f155 	.word	0x0009f155
   9e3d0:	0009f789 	.word	0x0009f789
   9e3d4:	000aa684 	.word	0x000aa684
   9e3d8:	0009b83d 	.word	0x0009b83d
   9e3dc:	00082ee1 	.word	0x00082ee1
   9e3e0:	20071d70 	.word	0x20071d70
   9e3e4:	0009421d 	.word	0x0009421d
   9e3e8:	0009b815 	.word	0x0009b815
							case EVENT_DISINF_ALARM:
							Cl_disinfretcode = Cl_disinf_ProcessAlarms();
   9e3ec:	4ba9      	ldr	r3, [pc, #676]	; (9e694 <Cl_disinf_controller+0xca4>)
   9e3ee:	4798      	blx	r3
   9e3f0:	4603      	mov	r3, r0
   9e3f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
   9e3f6:	e000      	b.n	9e3fa <Cl_disinf_controller+0xa0a>
							default:break;
   9e3f8:	bf00      	nop
						}
			
			break;
   9e3fa:	f000 bcd1 	b.w	9eda0 <Cl_disinf_controller+0x13b0>
			case CL_DISINF_STATE_DISINF_INTAKE_COMPLETED:
			
						switch (cl_disinfevent)
   9e3fe:	7efb      	ldrb	r3, [r7, #27]
   9e400:	2b03      	cmp	r3, #3
   9e402:	d005      	beq.n	9e410 <Cl_disinf_controller+0xa20>
   9e404:	2b13      	cmp	r3, #19
   9e406:	f000 808a 	beq.w	9e51e <Cl_disinf_controller+0xb2e>
   9e40a:	2b02      	cmp	r3, #2
   9e40c:	d006      	beq.n	9e41c <Cl_disinf_controller+0xa2c>

								break;
								case EVENT_DISINF_ALARM:
								Cl_disinfretcode = Cl_disinf_ProcessAlarms();
								break;
								default:break;
   9e40e:	e08c      	b.n	9e52a <Cl_disinf_controller+0xb3a>
			
						switch (cl_disinfevent)
						{
							
							case EVENT_STOP_DISINF:
							Cl_Disinf_StopDisinf();
   9e410:	4ba1      	ldr	r3, [pc, #644]	; (9e698 <Cl_disinf_controller+0xca8>)
   9e412:	4798      	blx	r3
							cl_disinfstate = CL_DISINF_STATE_IDLE;
   9e414:	4ba1      	ldr	r3, [pc, #644]	; (9e69c <Cl_disinf_controller+0xcac>)
   9e416:	2200      	movs	r2, #0
   9e418:	701a      	strb	r2, [r3, #0]
							break;
   9e41a:	e086      	b.n	9e52a <Cl_disinf_controller+0xb3a>
							
								case EVT_RESUME_DISINF_STAGE:
								
								 Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR2);
   9e41c:	2002      	movs	r0, #2
   9e41e:	4ba0      	ldr	r3, [pc, #640]	; (9e6a0 <Cl_disinf_controller+0xcb0>)
   9e420:	4798      	blx	r3
   9e422:	4603      	mov	r3, r0
   9e424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR1);
   9e428:	2001      	movs	r0, #1
   9e42a:	4b9d      	ldr	r3, [pc, #628]	; (9e6a0 <Cl_disinf_controller+0xcb0>)
   9e42c:	4798      	blx	r3
   9e42e:	4603      	mov	r3, r0
   9e430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								//Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR2);
								Cl_disinfretcode = sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9e434:	2002      	movs	r0, #2
   9e436:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9e43a:	4b9a      	ldr	r3, [pc, #616]	; (9e6a4 <Cl_disinf_controller+0xcb4>)
   9e43c:	4798      	blx	r3
   9e43e:	4603      	mov	r3, r0
   9e440:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode = sv_cntrl_setpumpspeed(DCMOTOR1,1000);
   9e444:	2001      	movs	r0, #1
   9e446:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9e44a:	4b96      	ldr	r3, [pc, #600]	; (9e6a4 <Cl_disinf_controller+0xcb4>)
   9e44c:	4798      	blx	r3
   9e44e:	4603      	mov	r3, r0
   9e450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								openfill_flag = 1;
   9e454:	4b94      	ldr	r3, [pc, #592]	; (9e6a8 <Cl_disinf_controller+0xcb8>)
   9e456:	2201      	movs	r2, #1
   9e458:	701a      	strb	r2, [r3, #0]
								Cl_Uint16Type potvalue = 0;
   9e45a:	2300      	movs	r3, #0
   9e45c:	843b      	strh	r3, [r7, #32]
								potvalue = (850 * 1024)/10000;                                 // 600
   9e45e:	2357      	movs	r3, #87	; 0x57
   9e460:	843b      	strh	r3, [r7, #32]
								sv_cs_setpotvalue(potvalue);
   9e462:	8c3b      	ldrh	r3, [r7, #32]
   9e464:	4618      	mov	r0, r3
   9e466:	4b91      	ldr	r3, [pc, #580]	; (9e6ac <Cl_disinf_controller+0xcbc>)
   9e468:	4798      	blx	r3
								if (flag_hotcitric == 1)
   9e46a:	4b91      	ldr	r3, [pc, #580]	; (9e6b0 <Cl_disinf_controller+0xcc0>)
   9e46c:	781b      	ldrb	r3, [r3, #0]
   9e46e:	2b01      	cmp	r3, #1
   9e470:	d102      	bne.n	9e478 <Cl_disinf_controller+0xa88>
 								{
 								hotrinse_flag = 1;
   9e472:	4b90      	ldr	r3, [pc, #576]	; (9e6b4 <Cl_disinf_controller+0xcc4>)
   9e474:	2201      	movs	r2, #1
   9e476:	701a      	strb	r2, [r3, #0]
 								}
								
								Cl_bc_controller(BC_EVENT_START);
   9e478:	2004      	movs	r0, #4
   9e47a:	4b8f      	ldr	r3, [pc, #572]	; (9e6b8 <Cl_disinf_controller+0xcc8>)
   9e47c:	4798      	blx	r3
								Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,false );     // manav02 added no ts1 alarm during loopback
   9e47e:	2010      	movs	r0, #16
   9e480:	2100      	movs	r1, #0
   9e482:	4b8e      	ldr	r3, [pc, #568]	; (9e6bc <Cl_disinf_controller+0xccc>)
   9e484:	4798      	blx	r3
								Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,false );
   9e486:	200f      	movs	r0, #15
   9e488:	2100      	movs	r1, #0
   9e48a:	4b8c      	ldr	r3, [pc, #560]	; (9e6bc <Cl_disinf_controller+0xccc>)
   9e48c:	4798      	blx	r3

								sv_cntrl_enable_loopback();
   9e48e:	4b8c      	ldr	r3, [pc, #560]	; (9e6c0 <Cl_disinf_controller+0xcd0>)
   9e490:	4798      	blx	r3
// 								if (flag_hotcitric == 1)
// 								{
// 									sv_cntrl_poweronheater();
// 									sv_cntrl_incheater(3500);
// 								}
								sv_cntrl_activate_valve(VALVE_ID2);
   9e492:	2002      	movs	r0, #2
   9e494:	4b8b      	ldr	r3, [pc, #556]	; (9e6c4 <Cl_disinf_controller+0xcd4>)
   9e496:	4798      	blx	r3
								sv_cntrl_activate_valve(VALVE_ID3);
   9e498:	2003      	movs	r0, #3
   9e49a:	4b8a      	ldr	r3, [pc, #552]	; (9e6c4 <Cl_disinf_controller+0xcd4>)
   9e49c:	4798      	blx	r3
							//	sv_prop_startmixing();     // manav03 commented
								sv_prop_startopenfill();   // manav02 added to run piston pumps during disinfect open fill
   9e49e:	4b8a      	ldr	r3, [pc, #552]	; (9e6c8 <Cl_disinf_controller+0xcd8>)
   9e4a0:	4798      	blx	r3
								sv_cntrl_activatepump(UFPUMP);
   9e4a2:	2004      	movs	r0, #4
   9e4a4:	4b7e      	ldr	r3, [pc, #504]	; (9e6a0 <Cl_disinf_controller+0xcb0>)
   9e4a6:	4798      	blx	r3
								sec_count =0;
   9e4a8:	4b88      	ldr	r3, [pc, #544]	; (9e6cc <Cl_disinf_controller+0xcdc>)
   9e4aa:	2200      	movs	r2, #0
   9e4ac:	801a      	strh	r2, [r3, #0]
								command = CON_TX_COMMAND_DISINF_RESUMED;
   9e4ae:	233b      	movs	r3, #59	; 0x3b
   9e4b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9e4b4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9e4b8:	f107 0313 	add.w	r3, r7, #19
   9e4bc:	4610      	mov	r0, r2
   9e4be:	4619      	mov	r1, r3
   9e4c0:	2200      	movs	r2, #0
   9e4c2:	4b83      	ldr	r3, [pc, #524]	; (9e6d0 <Cl_disinf_controller+0xce0>)
   9e4c4:	4798      	blx	r3
   9e4c6:	4603      	mov	r3, r0
   9e4c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									 Cl_disinfsecondscounter = 0;
   9e4cc:	4b81      	ldr	r3, [pc, #516]	; (9e6d4 <Cl_disinf_controller+0xce4>)
   9e4ce:	2200      	movs	r2, #0
   9e4d0:	601a      	str	r2, [r3, #0]
 									cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   9e4d2:	4b72      	ldr	r3, [pc, #456]	; (9e69c <Cl_disinf_controller+0xcac>)
   9e4d4:	2208      	movs	r2, #8
   9e4d6:	701a      	strb	r2, [r3, #0]
							//	cl_disinfstate = CL_DISINF_STATE_INTER_1;
								 Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);
   9e4d8:	2300      	movs	r3, #0
   9e4da:	9300      	str	r3, [sp, #0]
   9e4dc:	2029      	movs	r0, #41	; 0x29
   9e4de:	2100      	movs	r1, #0
   9e4e0:	f04f 0200 	mov.w	r2, #0
   9e4e4:	f04f 0300 	mov.w	r3, #0
   9e4e8:	4c7b      	ldr	r4, [pc, #492]	; (9e6d8 <Cl_disinf_controller+0xce8>)
   9e4ea:	47a0      	blx	r4
   9e4ec:	4603      	mov	r3, r0
   9e4ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								 Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);
   9e4f2:	2300      	movs	r3, #0
   9e4f4:	9300      	str	r3, [sp, #0]
   9e4f6:	202b      	movs	r0, #43	; 0x2b
   9e4f8:	2100      	movs	r1, #0
   9e4fa:	f04f 0200 	mov.w	r2, #0
   9e4fe:	f04f 0300 	mov.w	r3, #0
   9e502:	4c75      	ldr	r4, [pc, #468]	; (9e6d8 <Cl_disinf_controller+0xce8>)
   9e504:	47a0      	blx	r4
   9e506:	4603      	mov	r3, r0
   9e508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_AlarmActivateAlarms(ACID_IN_OPEN,true);
   9e50c:	2029      	movs	r0, #41	; 0x29
   9e50e:	2101      	movs	r1, #1
   9e510:	4b6a      	ldr	r3, [pc, #424]	; (9e6bc <Cl_disinf_controller+0xccc>)
   9e512:	4798      	blx	r3
								Cl_AlarmActivateAlarms(BICARB_IN_OPEN,true);
   9e514:	202b      	movs	r0, #43	; 0x2b
   9e516:	2101      	movs	r1, #1
   9e518:	4b68      	ldr	r3, [pc, #416]	; (9e6bc <Cl_disinf_controller+0xccc>)
   9e51a:	4798      	blx	r3
									data = (Cl_Uint8Type)3;
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								}*/
								

								break;
   9e51c:	e005      	b.n	9e52a <Cl_disinf_controller+0xb3a>
								case EVENT_DISINF_ALARM:
								Cl_disinfretcode = Cl_disinf_ProcessAlarms();
   9e51e:	4b5d      	ldr	r3, [pc, #372]	; (9e694 <Cl_disinf_controller+0xca4>)
   9e520:	4798      	blx	r3
   9e522:	4603      	mov	r3, r0
   9e524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								break;
   9e528:	bf00      	nop
								default:break;
						}
			
			break;
   9e52a:	f000 bc39 	b.w	9eda0 <Cl_disinf_controller+0x13b0>
			case CL_DISINF_STATE_INTER_1:
				switch (cl_disinfevent)
   9e52e:	7efb      	ldrb	r3, [r7, #27]
   9e530:	3b03      	subs	r3, #3
   9e532:	2b22      	cmp	r3, #34	; 0x22
   9e534:	f200 8431 	bhi.w	9ed9a <Cl_disinf_controller+0x13aa>
   9e538:	a201      	add	r2, pc, #4	; (adr r2, 9e540 <Cl_disinf_controller+0xb50>)
   9e53a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9e53e:	bf00      	nop
   9e540:	0009e5cd 	.word	0x0009e5cd
   9e544:	0009ed9b 	.word	0x0009ed9b
   9e548:	0009ed9b 	.word	0x0009ed9b
   9e54c:	0009ed9b 	.word	0x0009ed9b
   9e550:	0009ed9b 	.word	0x0009ed9b
   9e554:	0009ed9b 	.word	0x0009ed9b
   9e558:	0009ed9b 	.word	0x0009ed9b
   9e55c:	0009ed9b 	.word	0x0009ed9b
   9e560:	0009ed9b 	.word	0x0009ed9b
   9e564:	0009ed9b 	.word	0x0009ed9b
   9e568:	0009ed9b 	.word	0x0009ed9b
   9e56c:	0009ed9b 	.word	0x0009ed9b
   9e570:	0009e60b 	.word	0x0009e60b
   9e574:	0009ed9b 	.word	0x0009ed9b
   9e578:	0009ed9b 	.word	0x0009ed9b
   9e57c:	0009ed9b 	.word	0x0009ed9b
   9e580:	0009e5d9 	.word	0x0009e5d9
   9e584:	0009ed9b 	.word	0x0009ed9b
   9e588:	0009ed9b 	.word	0x0009ed9b
   9e58c:	0009ed9b 	.word	0x0009ed9b
   9e590:	0009ed9b 	.word	0x0009ed9b
   9e594:	0009ed9b 	.word	0x0009ed9b
   9e598:	0009ed9b 	.word	0x0009ed9b
   9e59c:	0009ed9b 	.word	0x0009ed9b
   9e5a0:	0009ed9b 	.word	0x0009ed9b
   9e5a4:	0009ed9b 	.word	0x0009ed9b
   9e5a8:	0009ed9b 	.word	0x0009ed9b
   9e5ac:	0009ed9b 	.word	0x0009ed9b
   9e5b0:	0009ed9b 	.word	0x0009ed9b
   9e5b4:	0009ed9b 	.word	0x0009ed9b
   9e5b8:	0009ed9b 	.word	0x0009ed9b
   9e5bc:	0009ed9b 	.word	0x0009ed9b
   9e5c0:	0009ed9b 	.word	0x0009ed9b
   9e5c4:	0009ed9b 	.word	0x0009ed9b
   9e5c8:	0009e5e5 	.word	0x0009e5e5
				{
					
					case EVENT_STOP_DISINF:
					Cl_Disinf_StopDisinf();
   9e5cc:	4b32      	ldr	r3, [pc, #200]	; (9e698 <Cl_disinf_controller+0xca8>)
   9e5ce:	4798      	blx	r3
					cl_disinfstate = CL_DISINF_STATE_IDLE;
   9e5d0:	4b32      	ldr	r3, [pc, #200]	; (9e69c <Cl_disinf_controller+0xcac>)
   9e5d2:	2200      	movs	r2, #0
   9e5d4:	701a      	strb	r2, [r3, #0]
					break;
   9e5d6:	e02b      	b.n	9e630 <Cl_disinf_controller+0xc40>
					
					
					case EVENT_DISINF_ALARM:
					Cl_disinfretcode =  Cl_disinf_ProcessAlarms();
   9e5d8:	4b2e      	ldr	r3, [pc, #184]	; (9e694 <Cl_disinf_controller+0xca4>)
   9e5da:	4798      	blx	r3
   9e5dc:	4603      	mov	r3, r0
   9e5de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
   9e5e2:	e025      	b.n	9e630 <Cl_disinf_controller+0xc40>
					
					case EVENT_DISINF_CLR_ALARM:
					sv_cntrl_resetredalarm();
   9e5e4:	4b3d      	ldr	r3, [pc, #244]	; (9e6dc <Cl_disinf_controller+0xcec>)
   9e5e6:	4798      	blx	r3
					sv_cntrl_nobuzzer();
   9e5e8:	4b3d      	ldr	r3, [pc, #244]	; (9e6e0 <Cl_disinf_controller+0xcf0>)
   9e5ea:	4798      	blx	r3
					Cl_Disinf_resumeDisinf();
   9e5ec:	4b3d      	ldr	r3, [pc, #244]	; (9e6e4 <Cl_disinf_controller+0xcf4>)
   9e5ee:	4798      	blx	r3
					if (alarm_flag == 1)
   9e5f0:	4b3d      	ldr	r3, [pc, #244]	; (9e6e8 <Cl_disinf_controller+0xcf8>)
   9e5f2:	781b      	ldrb	r3, [r3, #0]
   9e5f4:	b2db      	uxtb	r3, r3
   9e5f6:	2b01      	cmp	r3, #1
   9e5f8:	d106      	bne.n	9e608 <Cl_disinf_controller+0xc18>
					{
								cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   9e5fa:	4b28      	ldr	r3, [pc, #160]	; (9e69c <Cl_disinf_controller+0xcac>)
   9e5fc:	2208      	movs	r2, #8
   9e5fe:	701a      	strb	r2, [r3, #0]
						alarm_flag = 0;
   9e600:	4b39      	ldr	r3, [pc, #228]	; (9e6e8 <Cl_disinf_controller+0xcf8>)
   9e602:	2200      	movs	r2, #0
   9e604:	701a      	strb	r2, [r3, #0]
					}
					break;
   9e606:	e013      	b.n	9e630 <Cl_disinf_controller+0xc40>
   9e608:	e012      	b.n	9e630 <Cl_disinf_controller+0xc40>
								 
					case EVENT_DISINF_TICK_SECOND:
					
					 command = CON_TX_COMMAND_DISINF_RESUMED;
   9e60a:	233b      	movs	r3, #59	; 0x3b
   9e60c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9e610:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9e614:	f107 0313 	add.w	r3, r7, #19
   9e618:	4610      	mov	r0, r2
   9e61a:	4619      	mov	r1, r3
   9e61c:	2200      	movs	r2, #0
   9e61e:	4b2c      	ldr	r3, [pc, #176]	; (9e6d0 <Cl_disinf_controller+0xce0>)
   9e620:	4798      	blx	r3
   9e622:	4603      	mov	r3, r0
   9e624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 									cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   9e628:	4b1c      	ldr	r3, [pc, #112]	; (9e69c <Cl_disinf_controller+0xcac>)
   9e62a:	2208      	movs	r2, #8
   9e62c:	701a      	strb	r2, [r3, #0]
// 								//Cl_Disinf_UpdateTimeInfo();
// 								
// 							}
// 						}
//					}
								break;
   9e62e:	bf00      	nop
					
						}
			break;
   9e630:	e3b3      	b.n	9ed9a <Cl_disinf_controller+0x13aa>
			case CL_DISINF_STATE_DISINF_RINSING:
						switch ( cl_disinfevent)
   9e632:	7efb      	ldrb	r3, [r7, #27]
   9e634:	3b03      	subs	r3, #3
   9e636:	2b10      	cmp	r3, #16
   9e638:	f200 8148 	bhi.w	9e8cc <Cl_disinf_controller+0xedc>
   9e63c:	a201      	add	r2, pc, #4	; (adr r2, 9e644 <Cl_disinf_controller+0xc54>)
   9e63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9e642:	bf00      	nop
   9e644:	0009e689 	.word	0x0009e689
   9e648:	0009e8cd 	.word	0x0009e8cd
   9e64c:	0009e8cd 	.word	0x0009e8cd
   9e650:	0009e8cd 	.word	0x0009e8cd
   9e654:	0009e8cd 	.word	0x0009e8cd
   9e658:	0009e8cd 	.word	0x0009e8cd
   9e65c:	0009e8cd 	.word	0x0009e8cd
   9e660:	0009e8cd 	.word	0x0009e8cd
   9e664:	0009e8cd 	.word	0x0009e8cd
   9e668:	0009e8cd 	.word	0x0009e8cd
   9e66c:	0009e8cd 	.word	0x0009e8cd
   9e670:	0009e8cd 	.word	0x0009e8cd
   9e674:	0009e6ed 	.word	0x0009e6ed
   9e678:	0009e8cd 	.word	0x0009e8cd
   9e67c:	0009e8cd 	.word	0x0009e8cd
   9e680:	0009e8cd 	.word	0x0009e8cd
   9e684:	0009e8c1 	.word	0x0009e8c1
						{
							
							case EVENT_STOP_DISINF:
							Cl_Disinf_StopDisinf();
   9e688:	4b03      	ldr	r3, [pc, #12]	; (9e698 <Cl_disinf_controller+0xca8>)
   9e68a:	4798      	blx	r3
							cl_disinfstate = CL_DISINF_STATE_IDLE;
   9e68c:	4b03      	ldr	r3, [pc, #12]	; (9e69c <Cl_disinf_controller+0xcac>)
   9e68e:	2200      	movs	r2, #0
   9e690:	701a      	strb	r2, [r3, #0]
							break;
   9e692:	e11c      	b.n	9e8ce <Cl_disinf_controller+0xede>
   9e694:	0009f45d 	.word	0x0009f45d
   9e698:	0009f155 	.word	0x0009f155
   9e69c:	20071d3f 	.word	0x20071d3f
   9e6a0:	0009b32d 	.word	0x0009b32d
   9e6a4:	0009b461 	.word	0x0009b461
   9e6a8:	20071d6a 	.word	0x20071d6a
   9e6ac:	0009b899 	.word	0x0009b899
   9e6b0:	20071b93 	.word	0x20071b93
   9e6b4:	20071e15 	.word	0x20071e15
   9e6b8:	00082ee1 	.word	0x00082ee1
   9e6bc:	00082a35 	.word	0x00082a35
   9e6c0:	0009b55d 	.word	0x0009b55d
   9e6c4:	0009b3e9 	.word	0x0009b3e9
   9e6c8:	0009b851 	.word	0x0009b851
   9e6cc:	20071d68 	.word	0x20071d68
   9e6d0:	0009d1e9 	.word	0x0009d1e9
   9e6d4:	20071d40 	.word	0x20071d40
   9e6d8:	000829dd 	.word	0x000829dd
   9e6dc:	0009b685 	.word	0x0009b685
   9e6e0:	0009b6c1 	.word	0x0009b6c1
   9e6e4:	0009f24d 	.word	0x0009f24d
   9e6e8:	20071d3d 	.word	0x20071d3d
								{
				//					
								}
							break;
							case EVENT_DISINF_TICK_SECOND:
							Cl_disinf_ResetAlertsforReassertion();
   9e6ec:	4bb6      	ldr	r3, [pc, #728]	; (9e9c8 <Cl_disinf_controller+0xfd8>)
   9e6ee:	4798      	blx	r3
							Cl_Uint16Type temp;
							Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&temp);
   9e6f0:	f107 0310 	add.w	r3, r7, #16
   9e6f4:	2013      	movs	r0, #19
   9e6f6:	4619      	mov	r1, r3
   9e6f8:	4bb4      	ldr	r3, [pc, #720]	; (9e9cc <Cl_disinf_controller+0xfdc>)
   9e6fa:	4798      	blx	r3
	
									{
		
											float ftemp,temp1;
										
											res_temp_lookuptable((402 *100* temp)/(2*32768));									// temperature from look up table in 4 digits
   9e6fc:	8a3b      	ldrh	r3, [r7, #16]
   9e6fe:	461a      	mov	r2, r3
   9e700:	f649 5308 	movw	r3, #40200	; 0x9d08
   9e704:	fb03 f302 	mul.w	r3, r3, r2
   9e708:	2b00      	cmp	r3, #0
   9e70a:	da02      	bge.n	9e712 <Cl_disinf_controller+0xd22>
   9e70c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   9e710:	33ff      	adds	r3, #255	; 0xff
   9e712:	141b      	asrs	r3, r3, #16
   9e714:	4618      	mov	r0, r3
   9e716:	4bae      	ldr	r3, [pc, #696]	; (9e9d0 <Cl_disinf_controller+0xfe0>)
   9e718:	4798      	blx	r3
											temp1 = res_temp_value/100;									// Temp3 value in XX.yy format
   9e71a:	4bae      	ldr	r3, [pc, #696]	; (9e9d4 <Cl_disinf_controller+0xfe4>)
   9e71c:	681a      	ldr	r2, [r3, #0]
   9e71e:	4bae      	ldr	r3, [pc, #696]	; (9e9d8 <Cl_disinf_controller+0xfe8>)
   9e720:	4610      	mov	r0, r2
   9e722:	49ae      	ldr	r1, [pc, #696]	; (9e9dc <Cl_disinf_controller+0xfec>)
   9e724:	4798      	blx	r3
   9e726:	4603      	mov	r3, r0
   9e728:	61fb      	str	r3, [r7, #28]
											temp1 = temp1 - 3.1 + 1.4 + 1.2;										// sensor offset
   9e72a:	4bad      	ldr	r3, [pc, #692]	; (9e9e0 <Cl_disinf_controller+0xff0>)
   9e72c:	69f8      	ldr	r0, [r7, #28]
   9e72e:	4798      	blx	r3
   9e730:	4602      	mov	r2, r0
   9e732:	460b      	mov	r3, r1
   9e734:	4cab      	ldr	r4, [pc, #684]	; (9e9e4 <Cl_disinf_controller+0xff4>)
   9e736:	4610      	mov	r0, r2
   9e738:	4619      	mov	r1, r3
   9e73a:	a39f      	add	r3, pc, #636	; (adr r3, 9e9b8 <Cl_disinf_controller+0xfc8>)
   9e73c:	e9d3 2300 	ldrd	r2, r3, [r3]
   9e740:	47a0      	blx	r4
   9e742:	4602      	mov	r2, r0
   9e744:	460b      	mov	r3, r1
   9e746:	4ca8      	ldr	r4, [pc, #672]	; (9e9e8 <Cl_disinf_controller+0xff8>)
   9e748:	4610      	mov	r0, r2
   9e74a:	4619      	mov	r1, r3
   9e74c:	a39c      	add	r3, pc, #624	; (adr r3, 9e9c0 <Cl_disinf_controller+0xfd0>)
   9e74e:	e9d3 2300 	ldrd	r2, r3, [r3]
   9e752:	47a0      	blx	r4
   9e754:	4602      	mov	r2, r0
   9e756:	460b      	mov	r3, r1
   9e758:	4ca3      	ldr	r4, [pc, #652]	; (9e9e8 <Cl_disinf_controller+0xff8>)
   9e75a:	4610      	mov	r0, r2
   9e75c:	4619      	mov	r1, r3
   9e75e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   9e762:	4ba2      	ldr	r3, [pc, #648]	; (9e9ec <Cl_disinf_controller+0xffc>)
   9e764:	47a0      	blx	r4
   9e766:	4602      	mov	r2, r0
   9e768:	460b      	mov	r3, r1
   9e76a:	4610      	mov	r0, r2
   9e76c:	4619      	mov	r1, r3
   9e76e:	4ba0      	ldr	r3, [pc, #640]	; (9e9f0 <Cl_disinf_controller+0x1000>)
   9e770:	4798      	blx	r3
   9e772:	4603      	mov	r3, r0
   9e774:	61fb      	str	r3, [r7, #28]
											heatcutavgtmp2 =(heatcutavgtmp2*5 + temp1)/6;
   9e776:	4b9f      	ldr	r3, [pc, #636]	; (9e9f4 <Cl_disinf_controller+0x1004>)
   9e778:	681a      	ldr	r2, [r3, #0]
   9e77a:	4b9f      	ldr	r3, [pc, #636]	; (9e9f8 <Cl_disinf_controller+0x1008>)
   9e77c:	4610      	mov	r0, r2
   9e77e:	499f      	ldr	r1, [pc, #636]	; (9e9fc <Cl_disinf_controller+0x100c>)
   9e780:	4798      	blx	r3
   9e782:	4603      	mov	r3, r0
   9e784:	461a      	mov	r2, r3
   9e786:	4b9e      	ldr	r3, [pc, #632]	; (9ea00 <Cl_disinf_controller+0x1010>)
   9e788:	4610      	mov	r0, r2
   9e78a:	69f9      	ldr	r1, [r7, #28]
   9e78c:	4798      	blx	r3
   9e78e:	4603      	mov	r3, r0
   9e790:	461a      	mov	r2, r3
   9e792:	4b91      	ldr	r3, [pc, #580]	; (9e9d8 <Cl_disinf_controller+0xfe8>)
   9e794:	4610      	mov	r0, r2
   9e796:	499b      	ldr	r1, [pc, #620]	; (9ea04 <Cl_disinf_controller+0x1014>)
   9e798:	4798      	blx	r3
   9e79a:	4603      	mov	r3, r0
   9e79c:	461a      	mov	r2, r3
   9e79e:	4b95      	ldr	r3, [pc, #596]	; (9e9f4 <Cl_disinf_controller+0x1004>)
   9e7a0:	601a      	str	r2, [r3, #0]
// 								sv_cntrl_poweroffheater();
// 								
// 								SetHeaterState(CL_HEATER_STATE_OFF);
// 							}
							
							Cl_disinfsecondscounter++;
   9e7a2:	4b99      	ldr	r3, [pc, #612]	; (9ea08 <Cl_disinf_controller+0x1018>)
   9e7a4:	681b      	ldr	r3, [r3, #0]
   9e7a6:	3301      	adds	r3, #1
   9e7a8:	4a97      	ldr	r2, [pc, #604]	; (9ea08 <Cl_disinf_controller+0x1018>)
   9e7aa:	6013      	str	r3, [r2, #0]
							Cl_Disinf_SendDisinfStateData();
   9e7ac:	4b97      	ldr	r3, [pc, #604]	; (9ea0c <Cl_disinf_controller+0x101c>)
   9e7ae:	4798      	blx	r3
							if(Cl_disinfsecondscounter == 60)
   9e7b0:	4b95      	ldr	r3, [pc, #596]	; (9ea08 <Cl_disinf_controller+0x1018>)
   9e7b2:	681b      	ldr	r3, [r3, #0]
   9e7b4:	2b3c      	cmp	r3, #60	; 0x3c
   9e7b6:	d101      	bne.n	9e7bc <Cl_disinf_controller+0xdcc>
							{
								UpdateDisinfMinuteTick();	
   9e7b8:	4b95      	ldr	r3, [pc, #596]	; (9ea10 <Cl_disinf_controller+0x1020>)
   9e7ba:	4798      	blx	r3
								//Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true);
								//Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true);
								//Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true);
								//Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true);
							}
							if(Cl_disinfMinutescounter > CL_DISINF_TIMEOUT )
   9e7bc:	4b95      	ldr	r3, [pc, #596]	; (9ea14 <Cl_disinf_controller+0x1024>)
   9e7be:	681b      	ldr	r3, [r3, #0]
   9e7c0:	2b19      	cmp	r3, #25
   9e7c2:	dd7c      	ble.n	9e8be <Cl_disinf_controller+0xece>
							{
								sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9e7c4:	2002      	movs	r0, #2
   9e7c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9e7ca:	4b93      	ldr	r3, [pc, #588]	; (9ea18 <Cl_disinf_controller+0x1028>)
   9e7cc:	4798      	blx	r3
								Cl_Disinf_StopDisinf();
   9e7ce:	4b93      	ldr	r3, [pc, #588]	; (9ea1c <Cl_disinf_controller+0x102c>)
   9e7d0:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID2);
   9e7d2:	2002      	movs	r0, #2
   9e7d4:	4b92      	ldr	r3, [pc, #584]	; (9ea20 <Cl_disinf_controller+0x1030>)
   9e7d6:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID3);
   9e7d8:	2003      	movs	r0, #3
   9e7da:	4b91      	ldr	r3, [pc, #580]	; (9ea20 <Cl_disinf_controller+0x1030>)
   9e7dc:	4798      	blx	r3
								sv_cntrl_poweroffheater();
   9e7de:	4b91      	ldr	r3, [pc, #580]	; (9ea24 <Cl_disinf_controller+0x1034>)
   9e7e0:	4798      	blx	r3
								sv_prop_stopmixing();
   9e7e2:	4b91      	ldr	r3, [pc, #580]	; (9ea28 <Cl_disinf_controller+0x1038>)
   9e7e4:	4798      	blx	r3
								sv_cntrl_deactivatepump(UFPUMP);
   9e7e6:	2004      	movs	r0, #4
   9e7e8:	4b90      	ldr	r3, [pc, #576]	; (9ea2c <Cl_disinf_controller+0x103c>)
   9e7ea:	4798      	blx	r3
								flag_hotrinse = 0;
   9e7ec:	4b90      	ldr	r3, [pc, #576]	; (9ea30 <Cl_disinf_controller+0x1040>)
   9e7ee:	2200      	movs	r2, #0
   9e7f0:	701a      	strb	r2, [r3, #0]
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   9e7f2:	2002      	movs	r0, #2
   9e7f4:	4b8d      	ldr	r3, [pc, #564]	; (9ea2c <Cl_disinf_controller+0x103c>)
   9e7f6:	4798      	blx	r3
   9e7f8:	4603      	mov	r3, r0
   9e7fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   9e7fe:	2001      	movs	r0, #1
   9e800:	4b8a      	ldr	r3, [pc, #552]	; (9ea2c <Cl_disinf_controller+0x103c>)
   9e802:	4798      	blx	r3
   9e804:	4603      	mov	r3, r0
   9e806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_bc_controller(BC_EVENT_STOP);
   9e80a:	2005      	movs	r0, #5
   9e80c:	4b89      	ldr	r3, [pc, #548]	; (9ea34 <Cl_disinf_controller+0x1044>)
   9e80e:	4798      	blx	r3
								if (flag_hotcitric == 1)
   9e810:	4b89      	ldr	r3, [pc, #548]	; (9ea38 <Cl_disinf_controller+0x1048>)
   9e812:	781b      	ldrb	r3, [r3, #0]
   9e814:	2b01      	cmp	r3, #1
   9e816:	d111      	bne.n	9e83c <Cl_disinf_controller+0xe4c>
								{
								command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9e818:	2339      	movs	r3, #57	; 0x39
   9e81a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
								data = (Cl_Uint8Type)4;
   9e81e:	2304      	movs	r3, #4
   9e820:	74fb      	strb	r3, [r7, #19]
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9e822:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9e826:	f107 0313 	add.w	r3, r7, #19
   9e82a:	4610      	mov	r0, r2
   9e82c:	4619      	mov	r1, r3
   9e82e:	2201      	movs	r2, #1
   9e830:	4b82      	ldr	r3, [pc, #520]	; (9ea3c <Cl_disinf_controller+0x104c>)
   9e832:	4798      	blx	r3
   9e834:	4603      	mov	r3, r0
   9e836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9e83a:	e02a      	b.n	9e892 <Cl_disinf_controller+0xea2>
								}
								else if (flag_citric == 1)
   9e83c:	4b80      	ldr	r3, [pc, #512]	; (9ea40 <Cl_disinf_controller+0x1050>)
   9e83e:	781b      	ldrb	r3, [r3, #0]
   9e840:	2b01      	cmp	r3, #1
   9e842:	d111      	bne.n	9e868 <Cl_disinf_controller+0xe78>
								{
									command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9e844:	2339      	movs	r3, #57	; 0x39
   9e846:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)5;
   9e84a:	2305      	movs	r3, #5
   9e84c:	74fb      	strb	r3, [r7, #19]
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9e84e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9e852:	f107 0313 	add.w	r3, r7, #19
   9e856:	4610      	mov	r0, r2
   9e858:	4619      	mov	r1, r3
   9e85a:	2201      	movs	r2, #1
   9e85c:	4b77      	ldr	r3, [pc, #476]	; (9ea3c <Cl_disinf_controller+0x104c>)
   9e85e:	4798      	blx	r3
   9e860:	4603      	mov	r3, r0
   9e862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9e866:	e014      	b.n	9e892 <Cl_disinf_controller+0xea2>
								}
								else if (flag_na == 1)
   9e868:	4b76      	ldr	r3, [pc, #472]	; (9ea44 <Cl_disinf_controller+0x1054>)
   9e86a:	781b      	ldrb	r3, [r3, #0]
   9e86c:	2b01      	cmp	r3, #1
   9e86e:	d110      	bne.n	9e892 <Cl_disinf_controller+0xea2>
								{
									command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9e870:	2339      	movs	r3, #57	; 0x39
   9e872:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)3;
   9e876:	2303      	movs	r3, #3
   9e878:	74fb      	strb	r3, [r7, #19]
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9e87a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9e87e:	f107 0313 	add.w	r3, r7, #19
   9e882:	4610      	mov	r0, r2
   9e884:	4619      	mov	r1, r3
   9e886:	2201      	movs	r2, #1
   9e888:	4b6c      	ldr	r3, [pc, #432]	; (9ea3c <Cl_disinf_controller+0x104c>)
   9e88a:	4798      	blx	r3
   9e88c:	4603      	mov	r3, r0
   9e88e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								}
								flag_hotcitric = 0;
   9e892:	4b69      	ldr	r3, [pc, #420]	; (9ea38 <Cl_disinf_controller+0x1048>)
   9e894:	2200      	movs	r2, #0
   9e896:	701a      	strb	r2, [r3, #0]
								flag_citric = 0;
   9e898:	4b69      	ldr	r3, [pc, #420]	; (9ea40 <Cl_disinf_controller+0x1050>)
   9e89a:	2200      	movs	r2, #0
   9e89c:	701a      	strb	r2, [r3, #0]
								flag_na = 0;
   9e89e:	4b69      	ldr	r3, [pc, #420]	; (9ea44 <Cl_disinf_controller+0x1054>)
   9e8a0:	2200      	movs	r2, #0
   9e8a2:	701a      	strb	r2, [r3, #0]
								openfill_flag = 0;
   9e8a4:	4b68      	ldr	r3, [pc, #416]	; (9ea48 <Cl_disinf_controller+0x1058>)
   9e8a6:	2200      	movs	r2, #0
   9e8a8:	701a      	strb	r2, [r3, #0]
	
							
							//	command = CON_TX_COMMAND_DISINF_RESUMED;
							//	data = (Cl_Uint8Type)0;
							//	Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								 Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_POST_DISINF_RINSE);
   9e8aa:	2045      	movs	r0, #69	; 0x45
   9e8ac:	4b67      	ldr	r3, [pc, #412]	; (9ea4c <Cl_disinf_controller+0x105c>)
   9e8ae:	4798      	blx	r3
   9e8b0:	4603      	mov	r3, r0
   9e8b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								 cl_disinfstate = CL_DISINF_STATE_SECOND_RO_RINSE;
   9e8b6:	4b66      	ldr	r3, [pc, #408]	; (9ea50 <Cl_disinf_controller+0x1060>)
   9e8b8:	220a      	movs	r2, #10
   9e8ba:	701a      	strb	r2, [r3, #0]
					 
							}
							break;
   9e8bc:	e007      	b.n	9e8ce <Cl_disinf_controller+0xede>
   9e8be:	e006      	b.n	9e8ce <Cl_disinf_controller+0xede>
							case EVENT_DISINF_TICK_MINUTE:
								//Cl_disinf_ResetAlertsforReassertion();
							break;
							case EVENT_DISINF_ALARM:
							
							Cl_disinfretcode =  Cl_disinf_ProcessAlarms();
   9e8c0:	4b64      	ldr	r3, [pc, #400]	; (9ea54 <Cl_disinf_controller+0x1064>)
   9e8c2:	4798      	blx	r3
   9e8c4:	4603      	mov	r3, r0
   9e8c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
   9e8ca:	e000      	b.n	9e8ce <Cl_disinf_controller+0xede>
							command = CON_TX_COMMAND_DISINF_PAUSED;
							data = (Cl_Uint8Type)0;
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
							break;
							default:break;
   9e8cc:	bf00      	nop
						}
						
				break;
   9e8ce:	e267      	b.n	9eda0 <Cl_disinf_controller+0x13b0>
				case CL_DISINF_STATE_DISINF_RINSING_COMPLETED:
						switch ( cl_disinfevent)
   9e8d0:	7efb      	ldrb	r3, [r7, #27]
   9e8d2:	2b02      	cmp	r3, #2
   9e8d4:	d008      	beq.n	9e8e8 <Cl_disinf_controller+0xef8>
   9e8d6:	2b03      	cmp	r3, #3
   9e8d8:	d000      	beq.n	9e8dc <Cl_disinf_controller+0xeec>
					 
							 //Send resumed
					 

							break;
							default:break;
   9e8da:	e020      	b.n	9e91e <Cl_disinf_controller+0xf2e>
				case CL_DISINF_STATE_DISINF_RINSING_COMPLETED:
						switch ( cl_disinfevent)
						{ 
							
							case EVENT_STOP_DISINF:
							Cl_Disinf_StopDisinf();
   9e8dc:	4b4f      	ldr	r3, [pc, #316]	; (9ea1c <Cl_disinf_controller+0x102c>)
   9e8de:	4798      	blx	r3
							cl_disinfstate = CL_DISINF_STATE_IDLE;
   9e8e0:	4b5b      	ldr	r3, [pc, #364]	; (9ea50 <Cl_disinf_controller+0x1060>)
   9e8e2:	2200      	movs	r2, #0
   9e8e4:	701a      	strb	r2, [r3, #0]
							break;
   9e8e6:	e01a      	b.n	9e91e <Cl_disinf_controller+0xf2e>
							
							
							case EVT_RESUME_DISINF_STAGE:
							// Cl_Disinf_StartDisinf();
							 Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_POST_DISINF_RINSE);
   9e8e8:	2045      	movs	r0, #69	; 0x45
   9e8ea:	4b58      	ldr	r3, [pc, #352]	; (9ea4c <Cl_disinf_controller+0x105c>)
   9e8ec:	4798      	blx	r3
   9e8ee:	4603      	mov	r3, r0
   9e8f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							 
							command = CON_TX_COMMAND_DISINF_RESUMED;
   9e8f4:	233b      	movs	r3, #59	; 0x3b
   9e8f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							data = (Cl_Uint8Type)0;
   9e8fa:	2300      	movs	r3, #0
   9e8fc:	74fb      	strb	r3, [r7, #19]
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9e8fe:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9e902:	f107 0313 	add.w	r3, r7, #19
   9e906:	4610      	mov	r0, r2
   9e908:	4619      	mov	r1, r3
   9e90a:	2200      	movs	r2, #0
   9e90c:	4b4b      	ldr	r3, [pc, #300]	; (9ea3c <Cl_disinf_controller+0x104c>)
   9e90e:	4798      	blx	r3
   9e910:	4603      	mov	r3, r0
   9e912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							
							 cl_disinfstate = CL_DISINF_STATE_SECOND_RO_RINSE;
   9e916:	4b4e      	ldr	r3, [pc, #312]	; (9ea50 <Cl_disinf_controller+0x1060>)
   9e918:	220a      	movs	r2, #10
   9e91a:	701a      	strb	r2, [r3, #0]
					 
							 //Send resumed
					 

							break;
   9e91c:	bf00      	nop
							default:break;
			
							
						}
			
				break;		
   9e91e:	e23f      	b.n	9eda0 <Cl_disinf_controller+0x13b0>
				case CL_DISINF_STATE_SECOND_RO_RINSE:
								switch ( cl_disinfevent)
   9e920:	7efb      	ldrb	r3, [r7, #27]
   9e922:	3b03      	subs	r3, #3
   9e924:	2b20      	cmp	r3, #32
   9e926:	f200 80c6 	bhi.w	9eab6 <Cl_disinf_controller+0x10c6>
   9e92a:	a201      	add	r2, pc, #4	; (adr r2, 9e930 <Cl_disinf_controller+0xf40>)
   9e92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9e930:	0009ea59 	.word	0x0009ea59
   9e934:	0009eab7 	.word	0x0009eab7
   9e938:	0009eab7 	.word	0x0009eab7
   9e93c:	0009eab7 	.word	0x0009eab7
   9e940:	0009eab7 	.word	0x0009eab7
   9e944:	0009eab7 	.word	0x0009eab7
   9e948:	0009eab7 	.word	0x0009eab7
   9e94c:	0009eab7 	.word	0x0009eab7
   9e950:	0009eab7 	.word	0x0009eab7
   9e954:	0009eab7 	.word	0x0009eab7
   9e958:	0009eab7 	.word	0x0009eab7
   9e95c:	0009eab7 	.word	0x0009eab7
   9e960:	0009ea9b 	.word	0x0009ea9b
   9e964:	0009eab7 	.word	0x0009eab7
   9e968:	0009eab7 	.word	0x0009eab7
   9e96c:	0009eab7 	.word	0x0009eab7
   9e970:	0009eaab 	.word	0x0009eaab
   9e974:	0009eab7 	.word	0x0009eab7
   9e978:	0009eab7 	.word	0x0009eab7
   9e97c:	0009eab7 	.word	0x0009eab7
   9e980:	0009eab7 	.word	0x0009eab7
   9e984:	0009eab7 	.word	0x0009eab7
   9e988:	0009eab7 	.word	0x0009eab7
   9e98c:	0009eab7 	.word	0x0009eab7
   9e990:	0009eab7 	.word	0x0009eab7
   9e994:	0009eab7 	.word	0x0009eab7
   9e998:	0009eab7 	.word	0x0009eab7
   9e99c:	0009eab7 	.word	0x0009eab7
   9e9a0:	0009eab7 	.word	0x0009eab7
   9e9a4:	0009eab7 	.word	0x0009eab7
   9e9a8:	0009eab7 	.word	0x0009eab7
   9e9ac:	0009eab7 	.word	0x0009eab7
   9e9b0:	0009ea65 	.word	0x0009ea65
   9e9b4:	f3af 8000 	nop.w
   9e9b8:	cccccccd 	.word	0xcccccccd
   9e9bc:	4008cccc 	.word	0x4008cccc
   9e9c0:	66666666 	.word	0x66666666
   9e9c4:	3ff66666 	.word	0x3ff66666
   9e9c8:	0009f6b9 	.word	0x0009f6b9
   9e9cc:	0008fd69 	.word	0x0008fd69
   9e9d0:	00090e5d 	.word	0x00090e5d
   9e9d4:	20071b8c 	.word	0x20071b8c
   9e9d8:	000a846d 	.word	0x000a846d
   9e9dc:	42c80000 	.word	0x42c80000
   9e9e0:	000a79dd 	.word	0x000a79dd
   9e9e4:	000a771d 	.word	0x000a771d
   9e9e8:	000a7721 	.word	0x000a7721
   9e9ec:	3ff33333 	.word	0x3ff33333
   9e9f0:	000a8049 	.word	0x000a8049
   9e9f4:	20071d6c 	.word	0x20071d6c
   9e9f8:	000a8305 	.word	0x000a8305
   9e9fc:	40a00000 	.word	0x40a00000
   9ea00:	000a80f5 	.word	0x000a80f5
   9ea04:	40c00000 	.word	0x40c00000
   9ea08:	20071d40 	.word	0x20071d40
   9ea0c:	0009f789 	.word	0x0009f789
   9ea10:	0009fb81 	.word	0x0009fb81
   9ea14:	20071d44 	.word	0x20071d44
   9ea18:	0009b461 	.word	0x0009b461
   9ea1c:	0009f155 	.word	0x0009f155
   9ea20:	0009b409 	.word	0x0009b409
   9ea24:	0009b3d5 	.word	0x0009b3d5
   9ea28:	0009b7ed 	.word	0x0009b7ed
   9ea2c:	0009b369 	.word	0x0009b369
   9ea30:	20071b94 	.word	0x20071b94
   9ea34:	00082ee1 	.word	0x00082ee1
   9ea38:	20071b93 	.word	0x20071b93
   9ea3c:	0009d1e9 	.word	0x0009d1e9
   9ea40:	20071b96 	.word	0x20071b96
   9ea44:	20071b95 	.word	0x20071b95
   9ea48:	20071d6a 	.word	0x20071d6a
   9ea4c:	0008bbb9 	.word	0x0008bbb9
   9ea50:	20071d3f 	.word	0x20071d3f
   9ea54:	0009f45d 	.word	0x0009f45d
								{
									
									case EVENT_STOP_DISINF:
									Cl_Disinf_StopDisinf();
   9ea58:	4bb0      	ldr	r3, [pc, #704]	; (9ed1c <Cl_disinf_controller+0x132c>)
   9ea5a:	4798      	blx	r3
									cl_disinfstate = CL_DISINF_STATE_IDLE;
   9ea5c:	4bb0      	ldr	r3, [pc, #704]	; (9ed20 <Cl_disinf_controller+0x1330>)
   9ea5e:	2200      	movs	r2, #0
   9ea60:	701a      	strb	r2, [r3, #0]
									break;
   9ea62:	e029      	b.n	9eab8 <Cl_disinf_controller+0x10c8>
									
									
									case EVENT_POST_DISINFECT_RINSE_COMPLETED:
									
									//Send Complete
									 command = CON_TX_COMMAND_DISINF_COMPLETED;
   9ea64:	233a      	movs	r3, #58	; 0x3a
   9ea66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									 data = (Cl_Uint8Type)0;
   9ea6a:	2300      	movs	r3, #0
   9ea6c:	74fb      	strb	r3, [r7, #19]
									 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9ea6e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9ea72:	f107 0313 	add.w	r3, r7, #19
   9ea76:	4610      	mov	r0, r2
   9ea78:	4619      	mov	r1, r3
   9ea7a:	2200      	movs	r2, #0
   9ea7c:	4ba9      	ldr	r3, [pc, #676]	; (9ed24 <Cl_disinf_controller+0x1334>)
   9ea7e:	4798      	blx	r3
   9ea80:	4603      	mov	r3, r0
   9ea82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									  Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_DISINF_COMPLETED);
   9ea86:	2054      	movs	r0, #84	; 0x54
   9ea88:	4ba7      	ldr	r3, [pc, #668]	; (9ed28 <Cl_disinf_controller+0x1338>)
   9ea8a:	4798      	blx	r3
   9ea8c:	4603      	mov	r3, r0
   9ea8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									 cl_disinfstate = CL_DISINF_STATE_POST_DISINF_STANDBY;
   9ea92:	4ba3      	ldr	r3, [pc, #652]	; (9ed20 <Cl_disinf_controller+0x1330>)
   9ea94:	220f      	movs	r2, #15
   9ea96:	701a      	strb	r2, [r3, #0]
									 
									break;
   9ea98:	e00e      	b.n	9eab8 <Cl_disinf_controller+0x10c8>
									case EVENT_DISINF_TICK_SECOND:
									Cl_disinfsecondscounter++;
   9ea9a:	4ba4      	ldr	r3, [pc, #656]	; (9ed2c <Cl_disinf_controller+0x133c>)
   9ea9c:	681b      	ldr	r3, [r3, #0]
   9ea9e:	3301      	adds	r3, #1
   9eaa0:	4aa2      	ldr	r2, [pc, #648]	; (9ed2c <Cl_disinf_controller+0x133c>)
   9eaa2:	6013      	str	r3, [r2, #0]
									Cl_Disinf_SendDisinfStateData();
   9eaa4:	4ba2      	ldr	r3, [pc, #648]	; (9ed30 <Cl_disinf_controller+0x1340>)
   9eaa6:	4798      	blx	r3
									if(Cl_disinfsecondscounter == 60)
									{
									//	UpdateDisinfMinuteTick();
									}
									break;
   9eaa8:	e006      	b.n	9eab8 <Cl_disinf_controller+0x10c8>
									case EVENT_DISINF_ALARM:
									Cl_disinfretcode = Cl_disinf_ProcessAlarms();
   9eaaa:	4ba2      	ldr	r3, [pc, #648]	; (9ed34 <Cl_disinf_controller+0x1344>)
   9eaac:	4798      	blx	r3
   9eaae:	4603      	mov	r3, r0
   9eab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									break;
   9eab4:	e000      	b.n	9eab8 <Cl_disinf_controller+0x10c8>
									default:break;
   9eab6:	bf00      	nop
								}
				
				
				break;
   9eab8:	e172      	b.n	9eda0 <Cl_disinf_controller+0x13b0>
				case CL_DISINF_STATE_POST_DISINF_STANDBY:
					switch ( cl_disinfevent)
   9eaba:	7efb      	ldrb	r3, [r7, #27]
   9eabc:	2b01      	cmp	r3, #1
   9eabe:	d009      	beq.n	9ead4 <Cl_disinf_controller+0x10e4>
   9eac0:	2b24      	cmp	r3, #36	; 0x24
   9eac2:	d000      	beq.n	9eac6 <Cl_disinf_controller+0x10d6>
							data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);			
							cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
						break;
					}
				break;
   9eac4:	e16c      	b.n	9eda0 <Cl_disinf_controller+0x13b0>
				break;
				case CL_DISINF_STATE_POST_DISINF_STANDBY:
					switch ( cl_disinfevent)
					{
						case EVENT_DISINF_START_RINSE:
							Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_POST_DISINF_RINSE);
   9eac6:	2045      	movs	r0, #69	; 0x45
   9eac8:	4b97      	ldr	r3, [pc, #604]	; (9ed28 <Cl_disinf_controller+0x1338>)
   9eaca:	4798      	blx	r3
   9eacc:	4603      	mov	r3, r0
   9eace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
   9ead2:	e035      	b.n	9eb40 <Cl_disinf_controller+0x1150>
						case EVENT_START_DISINF:
							Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_PRE_DISINF_RINSE);
   9ead4:	2044      	movs	r0, #68	; 0x44
   9ead6:	4b94      	ldr	r3, [pc, #592]	; (9ed28 <Cl_disinf_controller+0x1338>)
   9ead8:	4798      	blx	r3
   9eada:	4603      	mov	r3, r0
   9eadc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							if(Cl_ConsoleRxMsg.msgready == true)
   9eae0:	4b95      	ldr	r3, [pc, #596]	; (9ed38 <Cl_disinf_controller+0x1348>)
   9eae2:	7e1b      	ldrb	r3, [r3, #24]
   9eae4:	2b00      	cmp	r3, #0
   9eae6:	d016      	beq.n	9eb16 <Cl_disinf_controller+0x1126>
							{
								cl_Datastreamtype cl_temp  ;
								cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9eae8:	4b93      	ldr	r3, [pc, #588]	; (9ed38 <Cl_disinf_controller+0x1348>)
   9eaea:	791b      	ldrb	r3, [r3, #4]
   9eaec:	733b      	strb	r3, [r7, #12]
								if (cl_temp.bytearray[0] == 4)
   9eaee:	7b3b      	ldrb	r3, [r7, #12]
   9eaf0:	2b04      	cmp	r3, #4
   9eaf2:	d103      	bne.n	9eafc <Cl_disinf_controller+0x110c>
								{
										flag_hotcitric = 1;
   9eaf4:	4b91      	ldr	r3, [pc, #580]	; (9ed3c <Cl_disinf_controller+0x134c>)
   9eaf6:	2201      	movs	r2, #1
   9eaf8:	701a      	strb	r2, [r3, #0]
   9eafa:	e00c      	b.n	9eb16 <Cl_disinf_controller+0x1126>
								}
								else if (cl_temp.bytearray[0] == 3)
   9eafc:	7b3b      	ldrb	r3, [r7, #12]
   9eafe:	2b03      	cmp	r3, #3
   9eb00:	d103      	bne.n	9eb0a <Cl_disinf_controller+0x111a>
								{
										flag_na = 1;
   9eb02:	4b8f      	ldr	r3, [pc, #572]	; (9ed40 <Cl_disinf_controller+0x1350>)
   9eb04:	2201      	movs	r2, #1
   9eb06:	701a      	strb	r2, [r3, #0]
   9eb08:	e005      	b.n	9eb16 <Cl_disinf_controller+0x1126>
								}
								else if (cl_temp.bytearray[0] == 5)
   9eb0a:	7b3b      	ldrb	r3, [r7, #12]
   9eb0c:	2b05      	cmp	r3, #5
   9eb0e:	d102      	bne.n	9eb16 <Cl_disinf_controller+0x1126>
								{
									flag_citric = 1;
   9eb10:	4b8c      	ldr	r3, [pc, #560]	; (9ed44 <Cl_disinf_controller+0x1354>)
   9eb12:	2201      	movs	r2, #1
   9eb14:	701a      	strb	r2, [r3, #0]
								}
				
							}
							command = CON_TX_COMMAND_DISINF_STARTED;
   9eb16:	233c      	movs	r3, #60	; 0x3c
   9eb18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   9eb1c:	2301      	movs	r3, #1
   9eb1e:	74fb      	strb	r3, [r7, #19]
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);			
   9eb20:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9eb24:	f107 0313 	add.w	r3, r7, #19
   9eb28:	4610      	mov	r0, r2
   9eb2a:	4619      	mov	r1, r3
   9eb2c:	2201      	movs	r2, #1
   9eb2e:	4b7d      	ldr	r3, [pc, #500]	; (9ed24 <Cl_disinf_controller+0x1334>)
   9eb30:	4798      	blx	r3
   9eb32:	4603      	mov	r3, r0
   9eb34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
   9eb38:	4b79      	ldr	r3, [pc, #484]	; (9ed20 <Cl_disinf_controller+0x1330>)
   9eb3a:	2203      	movs	r2, #3
   9eb3c:	701a      	strb	r2, [r3, #0]
						break;
   9eb3e:	bf00      	nop
					}
				break;
   9eb40:	e12e      	b.n	9eda0 <Cl_disinf_controller+0x13b0>
			break;
			case CL_DISINF_STATE_CRITICAL_ALARM:
			switch (cl_disinfevent)
   9eb42:	7efb      	ldrb	r3, [r7, #27]
   9eb44:	3b01      	subs	r3, #1
   9eb46:	2b24      	cmp	r3, #36	; 0x24
   9eb48:	f200 8129 	bhi.w	9ed9e <Cl_disinf_controller+0x13ae>
   9eb4c:	a201      	add	r2, pc, #4	; (adr r2, 9eb54 <Cl_disinf_controller+0x1164>)
   9eb4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9eb52:	bf00      	nop
   9eb54:	0009ebe9 	.word	0x0009ebe9
   9eb58:	0009ed9f 	.word	0x0009ed9f
   9eb5c:	0009ed9f 	.word	0x0009ed9f
   9eb60:	0009ed9f 	.word	0x0009ed9f
   9eb64:	0009ed9f 	.word	0x0009ed9f
   9eb68:	0009ed9f 	.word	0x0009ed9f
   9eb6c:	0009ed9f 	.word	0x0009ed9f
   9eb70:	0009ed9f 	.word	0x0009ed9f
   9eb74:	0009ed9f 	.word	0x0009ed9f
   9eb78:	0009ed9f 	.word	0x0009ed9f
   9eb7c:	0009ed9f 	.word	0x0009ed9f
   9eb80:	0009ed9f 	.word	0x0009ed9f
   9eb84:	0009ed9f 	.word	0x0009ed9f
   9eb88:	0009ed9f 	.word	0x0009ed9f
   9eb8c:	0009ec61 	.word	0x0009ec61
   9eb90:	0009ed85 	.word	0x0009ed85
   9eb94:	0009ed9f 	.word	0x0009ed9f
   9eb98:	0009ed9f 	.word	0x0009ed9f
   9eb9c:	0009ec55 	.word	0x0009ec55
   9eba0:	0009ed9f 	.word	0x0009ed9f
   9eba4:	0009ed9f 	.word	0x0009ed9f
   9eba8:	0009ed9f 	.word	0x0009ed9f
   9ebac:	0009ed9f 	.word	0x0009ed9f
   9ebb0:	0009ed9f 	.word	0x0009ed9f
   9ebb4:	0009ed9f 	.word	0x0009ed9f
   9ebb8:	0009ed9f 	.word	0x0009ed9f
   9ebbc:	0009ed9f 	.word	0x0009ed9f
   9ebc0:	0009ed9f 	.word	0x0009ed9f
   9ebc4:	0009ed9f 	.word	0x0009ed9f
   9ebc8:	0009ed9f 	.word	0x0009ed9f
   9ebcc:	0009ed9f 	.word	0x0009ed9f
   9ebd0:	0009ed9f 	.word	0x0009ed9f
   9ebd4:	0009ed9f 	.word	0x0009ed9f
   9ebd8:	0009ed9f 	.word	0x0009ed9f
   9ebdc:	0009ed9f 	.word	0x0009ed9f
   9ebe0:	0009ed9f 	.word	0x0009ed9f
   9ebe4:	0009ed6d 	.word	0x0009ed6d
			{
				case EVENT_START_DISINF:
				Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_PRE_DISINF_RINSE);
   9ebe8:	2044      	movs	r0, #68	; 0x44
   9ebea:	4b4f      	ldr	r3, [pc, #316]	; (9ed28 <Cl_disinf_controller+0x1338>)
   9ebec:	4798      	blx	r3
   9ebee:	4603      	mov	r3, r0
   9ebf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if(Cl_ConsoleRxMsg.msgready == true)
   9ebf4:	4b50      	ldr	r3, [pc, #320]	; (9ed38 <Cl_disinf_controller+0x1348>)
   9ebf6:	7e1b      	ldrb	r3, [r3, #24]
   9ebf8:	2b00      	cmp	r3, #0
   9ebfa:	d016      	beq.n	9ec2a <Cl_disinf_controller+0x123a>
				{
					cl_Datastreamtype cl_temp  ;
					cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9ebfc:	4b4e      	ldr	r3, [pc, #312]	; (9ed38 <Cl_disinf_controller+0x1348>)
   9ebfe:	791b      	ldrb	r3, [r3, #4]
   9ec00:	723b      	strb	r3, [r7, #8]
					if (cl_temp.bytearray[0] == 4)
   9ec02:	7a3b      	ldrb	r3, [r7, #8]
   9ec04:	2b04      	cmp	r3, #4
   9ec06:	d103      	bne.n	9ec10 <Cl_disinf_controller+0x1220>
					{
						flag_hotcitric = 1;
   9ec08:	4b4c      	ldr	r3, [pc, #304]	; (9ed3c <Cl_disinf_controller+0x134c>)
   9ec0a:	2201      	movs	r2, #1
   9ec0c:	701a      	strb	r2, [r3, #0]
   9ec0e:	e00c      	b.n	9ec2a <Cl_disinf_controller+0x123a>
					}
					else if (cl_temp.bytearray[0] == 3)
   9ec10:	7a3b      	ldrb	r3, [r7, #8]
   9ec12:	2b03      	cmp	r3, #3
   9ec14:	d103      	bne.n	9ec1e <Cl_disinf_controller+0x122e>
					{
						flag_na = 1;
   9ec16:	4b4a      	ldr	r3, [pc, #296]	; (9ed40 <Cl_disinf_controller+0x1350>)
   9ec18:	2201      	movs	r2, #1
   9ec1a:	701a      	strb	r2, [r3, #0]
   9ec1c:	e005      	b.n	9ec2a <Cl_disinf_controller+0x123a>
					}
					else if (cl_temp.bytearray[0] == 5)
   9ec1e:	7a3b      	ldrb	r3, [r7, #8]
   9ec20:	2b05      	cmp	r3, #5
   9ec22:	d102      	bne.n	9ec2a <Cl_disinf_controller+0x123a>
					{
						flag_citric = 1;
   9ec24:	4b47      	ldr	r3, [pc, #284]	; (9ed44 <Cl_disinf_controller+0x1354>)
   9ec26:	2201      	movs	r2, #1
   9ec28:	701a      	strb	r2, [r3, #0]
					}
				}
				command = CON_TX_COMMAND_DISINF_STARTED;
   9ec2a:	233c      	movs	r3, #60	; 0x3c
   9ec2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   9ec30:	2301      	movs	r3, #1
   9ec32:	74fb      	strb	r3, [r7, #19]
				Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9ec34:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9ec38:	f107 0313 	add.w	r3, r7, #19
   9ec3c:	4610      	mov	r0, r2
   9ec3e:	4619      	mov	r1, r3
   9ec40:	2201      	movs	r2, #1
   9ec42:	4b38      	ldr	r3, [pc, #224]	; (9ed24 <Cl_disinf_controller+0x1334>)
   9ec44:	4798      	blx	r3
   9ec46:	4603      	mov	r3, r0
   9ec48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
   9ec4c:	4b34      	ldr	r3, [pc, #208]	; (9ed20 <Cl_disinf_controller+0x1330>)
   9ec4e:	2203      	movs	r2, #3
   9ec50:	701a      	strb	r2, [r3, #0]
				break;
   9ec52:	e09d      	b.n	9ed90 <Cl_disinf_controller+0x13a0>
				case EVENT_DISINF_ALARM:
				Cl_disinfretcode = Cl_disinf_ProcessAlarms();
   9ec54:	4b37      	ldr	r3, [pc, #220]	; (9ed34 <Cl_disinf_controller+0x1344>)
   9ec56:	4798      	blx	r3
   9ec58:	4603      	mov	r3, r0
   9ec5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break; 
   9ec5e:	e097      	b.n	9ed90 <Cl_disinf_controller+0x13a0>
				case EVENT_DISINF_TICK_SECOND:
				
				for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9ec60:	4b39      	ldr	r3, [pc, #228]	; (9ed48 <Cl_disinf_controller+0x1358>)
   9ec62:	2200      	movs	r2, #0
   9ec64:	801a      	strh	r2, [r3, #0]
   9ec66:	e053      	b.n	9ed10 <Cl_disinf_controller+0x1320>
				{
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER",8);
					Cl_Alarm_GetAlarmStatus(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId,&Cl_DisinfAlarmTable[tempcount].IsActive);
   9ec68:	4b37      	ldr	r3, [pc, #220]	; (9ed48 <Cl_disinf_controller+0x1358>)
   9ec6a:	881b      	ldrh	r3, [r3, #0]
   9ec6c:	4619      	mov	r1, r3
   9ec6e:	4a37      	ldr	r2, [pc, #220]	; (9ed4c <Cl_disinf_controller+0x135c>)
   9ec70:	460b      	mov	r3, r1
   9ec72:	00db      	lsls	r3, r3, #3
   9ec74:	1a5b      	subs	r3, r3, r1
   9ec76:	4413      	add	r3, r2
   9ec78:	7819      	ldrb	r1, [r3, #0]
   9ec7a:	4b33      	ldr	r3, [pc, #204]	; (9ed48 <Cl_disinf_controller+0x1358>)
   9ec7c:	881b      	ldrh	r3, [r3, #0]
   9ec7e:	461a      	mov	r2, r3
   9ec80:	4613      	mov	r3, r2
   9ec82:	00db      	lsls	r3, r3, #3
   9ec84:	1a9b      	subs	r3, r3, r2
   9ec86:	4a31      	ldr	r2, [pc, #196]	; (9ed4c <Cl_disinf_controller+0x135c>)
   9ec88:	4413      	add	r3, r2
   9ec8a:	3302      	adds	r3, #2
   9ec8c:	4608      	mov	r0, r1
   9ec8e:	4619      	mov	r1, r3
   9ec90:	4b2f      	ldr	r3, [pc, #188]	; (9ed50 <Cl_disinf_controller+0x1360>)
   9ec92:	4798      	blx	r3
					
					if (Cl_DisinfAlarmTable[tempcount].IsActive)
   9ec94:	4b2c      	ldr	r3, [pc, #176]	; (9ed48 <Cl_disinf_controller+0x1358>)
   9ec96:	881b      	ldrh	r3, [r3, #0]
   9ec98:	4619      	mov	r1, r3
   9ec9a:	4a2c      	ldr	r2, [pc, #176]	; (9ed4c <Cl_disinf_controller+0x135c>)
   9ec9c:	460b      	mov	r3, r1
   9ec9e:	00db      	lsls	r3, r3, #3
   9eca0:	1a5b      	subs	r3, r3, r1
   9eca2:	4413      	add	r3, r2
   9eca4:	789b      	ldrb	r3, [r3, #2]
   9eca6:	2b00      	cmp	r3, #0
   9eca8:	d00d      	beq.n	9ecc6 <Cl_disinf_controller+0x12d6>
					{
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
   9ecaa:	2018      	movs	r0, #24
   9ecac:	4929      	ldr	r1, [pc, #164]	; (9ed54 <Cl_disinf_controller+0x1364>)
   9ecae:	2208      	movs	r2, #8
   9ecb0:	4b1c      	ldr	r3, [pc, #112]	; (9ed24 <Cl_disinf_controller+0x1334>)
   9ecb2:	4798      	blx	r3
						Cl_Disinf_StopDisinf();
   9ecb4:	4b19      	ldr	r3, [pc, #100]	; (9ed1c <Cl_disinf_controller+0x132c>)
   9ecb6:	4798      	blx	r3
						
							
						
						cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9ecb8:	4b19      	ldr	r3, [pc, #100]	; (9ed20 <Cl_disinf_controller+0x1330>)
   9ecba:	220c      	movs	r2, #12
   9ecbc:	701a      	strb	r2, [r3, #0]
						//alarm_flag = 1;
						tempcount=0;
   9ecbe:	4b22      	ldr	r3, [pc, #136]	; (9ed48 <Cl_disinf_controller+0x1358>)
   9ecc0:	2200      	movs	r2, #0
   9ecc2:	801a      	strh	r2, [r3, #0]
						break;
   9ecc4:	e028      	b.n	9ed18 <Cl_disinf_controller+0x1328>
					}
					
					else if (tempcount == CL_DISINF_ALRM_MAX - 1)
   9ecc6:	4b20      	ldr	r3, [pc, #128]	; (9ed48 <Cl_disinf_controller+0x1358>)
   9ecc8:	881b      	ldrh	r3, [r3, #0]
   9ecca:	2b0b      	cmp	r3, #11
   9eccc:	d11a      	bne.n	9ed04 <Cl_disinf_controller+0x1314>
					{
						if(!Cl_DisinfAlarmTable[tempcount].IsActive)
   9ecce:	4b1e      	ldr	r3, [pc, #120]	; (9ed48 <Cl_disinf_controller+0x1358>)
   9ecd0:	881b      	ldrh	r3, [r3, #0]
   9ecd2:	4619      	mov	r1, r3
   9ecd4:	4a1d      	ldr	r2, [pc, #116]	; (9ed4c <Cl_disinf_controller+0x135c>)
   9ecd6:	460b      	mov	r3, r1
   9ecd8:	00db      	lsls	r3, r3, #3
   9ecda:	1a5b      	subs	r3, r3, r1
   9ecdc:	4413      	add	r3, r2
   9ecde:	789b      	ldrb	r3, [r3, #2]
   9ece0:	f083 0301 	eor.w	r3, r3, #1
   9ece4:	b2db      	uxtb	r3, r3
   9ece6:	2b00      	cmp	r3, #0
   9ece8:	d00c      	beq.n	9ed04 <Cl_disinf_controller+0x1314>
						{
							sv_cntrl_resetredalarm();
   9ecea:	4b1b      	ldr	r3, [pc, #108]	; (9ed58 <Cl_disinf_controller+0x1368>)
   9ecec:	4798      	blx	r3
							sv_cntrl_resetyellowalarm();
   9ecee:	4b1b      	ldr	r3, [pc, #108]	; (9ed5c <Cl_disinf_controller+0x136c>)
   9ecf0:	4798      	blx	r3
							sv_cntrl_nobuzzer();
   9ecf2:	4b1b      	ldr	r3, [pc, #108]	; (9ed60 <Cl_disinf_controller+0x1370>)
   9ecf4:	4798      	blx	r3
							//Cl_Disinf_resumeDisinf();
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SAFE",8);
   9ecf6:	2018      	movs	r0, #24
   9ecf8:	491a      	ldr	r1, [pc, #104]	; (9ed64 <Cl_disinf_controller+0x1374>)
   9ecfa:	2208      	movs	r2, #8
   9ecfc:	4b09      	ldr	r3, [pc, #36]	; (9ed24 <Cl_disinf_controller+0x1334>)
   9ecfe:	4798      	blx	r3
							Cl_disinf_ResetAlertsforReassertion();
   9ed00:	4b19      	ldr	r3, [pc, #100]	; (9ed68 <Cl_disinf_controller+0x1378>)
   9ed02:	4798      	blx	r3
				case EVENT_DISINF_ALARM:
				Cl_disinfretcode = Cl_disinf_ProcessAlarms();
				break; 
				case EVENT_DISINF_TICK_SECOND:
				
				for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9ed04:	4b10      	ldr	r3, [pc, #64]	; (9ed48 <Cl_disinf_controller+0x1358>)
   9ed06:	881b      	ldrh	r3, [r3, #0]
   9ed08:	3301      	adds	r3, #1
   9ed0a:	b29a      	uxth	r2, r3
   9ed0c:	4b0e      	ldr	r3, [pc, #56]	; (9ed48 <Cl_disinf_controller+0x1358>)
   9ed0e:	801a      	strh	r2, [r3, #0]
   9ed10:	4b0d      	ldr	r3, [pc, #52]	; (9ed48 <Cl_disinf_controller+0x1358>)
   9ed12:	881b      	ldrh	r3, [r3, #0]
   9ed14:	2b0b      	cmp	r3, #11
   9ed16:	d9a7      	bls.n	9ec68 <Cl_disinf_controller+0x1278>
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SAFE",8);
							Cl_disinf_ResetAlertsforReassertion();
						}
					}
				}
				break;
   9ed18:	e03a      	b.n	9ed90 <Cl_disinf_controller+0x13a0>
   9ed1a:	bf00      	nop
   9ed1c:	0009f155 	.word	0x0009f155
   9ed20:	20071d3f 	.word	0x20071d3f
   9ed24:	0009d1e9 	.word	0x0009d1e9
   9ed28:	0008bbb9 	.word	0x0008bbb9
   9ed2c:	20071d40 	.word	0x20071d40
   9ed30:	0009f789 	.word	0x0009f789
   9ed34:	0009f45d 	.word	0x0009f45d
   9ed38:	200725bc 	.word	0x200725bc
   9ed3c:	20071b93 	.word	0x20071b93
   9ed40:	20071b95 	.word	0x20071b95
   9ed44:	20071b96 	.word	0x20071b96
   9ed48:	20072a48 	.word	0x20072a48
   9ed4c:	20070d40 	.word	0x20070d40
   9ed50:	00082c09 	.word	0x00082c09
   9ed54:	000aa678 	.word	0x000aa678
   9ed58:	0009b685 	.word	0x0009b685
   9ed5c:	0009b699 	.word	0x0009b699
   9ed60:	0009b6c1 	.word	0x0009b6c1
   9ed64:	000aa688 	.word	0x000aa688
   9ed68:	0009f6b9 	.word	0x0009f6b9
				
				
				case EVENT_DISINF_CLR_ALARM:
					sv_cntrl_resetredalarm();
   9ed6c:	4b0f      	ldr	r3, [pc, #60]	; (9edac <Cl_disinf_controller+0x13bc>)
   9ed6e:	4798      	blx	r3
					sv_cntrl_resetyellowalarm();
   9ed70:	4b0f      	ldr	r3, [pc, #60]	; (9edb0 <Cl_disinf_controller+0x13c0>)
   9ed72:	4798      	blx	r3
					sv_cntrl_nobuzzer();
   9ed74:	4b0f      	ldr	r3, [pc, #60]	; (9edb4 <Cl_disinf_controller+0x13c4>)
   9ed76:	4798      	blx	r3
					Cl_Disinf_resumeDisinf();
   9ed78:	4b0f      	ldr	r3, [pc, #60]	; (9edb8 <Cl_disinf_controller+0x13c8>)
   9ed7a:	4798      	blx	r3
					cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   9ed7c:	4b0f      	ldr	r3, [pc, #60]	; (9edbc <Cl_disinf_controller+0x13cc>)
   9ed7e:	2208      	movs	r2, #8
   9ed80:	701a      	strb	r2, [r3, #0]
				break;
   9ed82:	e005      	b.n	9ed90 <Cl_disinf_controller+0x13a0>
				case EVENT_DISINF_TICK_MINUTE:
				Cl_disinfretcode = Cl_disinf_ResetAlertsforReassertion();
   9ed84:	4b0e      	ldr	r3, [pc, #56]	; (9edc0 <Cl_disinf_controller+0x13d0>)
   9ed86:	4798      	blx	r3
   9ed88:	4603      	mov	r3, r0
   9ed8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
   9ed8e:	bf00      	nop
				
			}
			break;
   9ed90:	e005      	b.n	9ed9e <Cl_disinf_controller+0x13ae>
			default:break;
   9ed92:	bf00      	nop
   9ed94:	e004      	b.n	9eda0 <Cl_disinf_controller+0x13b0>
							}
						}
					break;
							
				}
			break;
   9ed96:	bf00      	nop
   9ed98:	e002      	b.n	9eda0 <Cl_disinf_controller+0x13b0>
// 						}
//					}
								break;
					
						}
			break;
   9ed9a:	bf00      	nop
   9ed9c:	e000      	b.n	9eda0 <Cl_disinf_controller+0x13b0>
				case EVENT_DISINF_TICK_MINUTE:
				Cl_disinfretcode = Cl_disinf_ResetAlertsforReassertion();
				break;
				
			}
			break;
   9ed9e:	bf00      	nop
			default:break;
			
		}
		

	return CL_OK;
   9eda0:	2300      	movs	r3, #0
}
   9eda2:	4618      	mov	r0, r3
   9eda4:	372c      	adds	r7, #44	; 0x2c
   9eda6:	46bd      	mov	sp, r7
   9eda8:	bd90      	pop	{r4, r7, pc}
   9edaa:	bf00      	nop
   9edac:	0009b685 	.word	0x0009b685
   9edb0:	0009b699 	.word	0x0009b699
   9edb4:	0009b6c1 	.word	0x0009b6c1
   9edb8:	0009f24d 	.word	0x0009f24d
   9edbc:	20071d3f 	.word	0x20071d3f
   9edc0:	0009f6b9 	.word	0x0009f6b9

0009edc4 <cl_disinf_translatemacevent>:
 * \return CL_OK on success. 
 * \Globals used :
 */   

Cl_ReturnCodeType  cl_disinf_translatemacevent(Cl_Mac_EventsType Cl_MacdisinfEvt,Cl_disinf_Eevents* cl_disinf_event)
{
   9edc4:	b480      	push	{r7}
   9edc6:	b083      	sub	sp, #12
   9edc8:	af00      	add	r7, sp, #0
   9edca:	4603      	mov	r3, r0
   9edcc:	6039      	str	r1, [r7, #0]
   9edce:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacdisinfEvt)
   9edd0:	79fb      	ldrb	r3, [r7, #7]
   9edd2:	3b07      	subs	r3, #7
   9edd4:	2b4d      	cmp	r3, #77	; 0x4d
   9edd6:	f200 8107 	bhi.w	9efe8 <cl_disinf_translatemacevent+0x224>
   9edda:	a201      	add	r2, pc, #4	; (adr r2, 9ede0 <cl_disinf_translatemacevent+0x1c>)
   9eddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9ede0:	0009efa1 	.word	0x0009efa1
   9ede4:	0009efe9 	.word	0x0009efe9
   9ede8:	0009efe9 	.word	0x0009efe9
   9edec:	0009efd1 	.word	0x0009efd1
   9edf0:	0009efd9 	.word	0x0009efd9
   9edf4:	0009efe1 	.word	0x0009efe1
   9edf8:	0009ef99 	.word	0x0009ef99
   9edfc:	0009efa9 	.word	0x0009efa9
   9ee00:	0009efb1 	.word	0x0009efb1
   9ee04:	0009efb9 	.word	0x0009efb9
   9ee08:	0009efe9 	.word	0x0009efe9
   9ee0c:	0009efe9 	.word	0x0009efe9
   9ee10:	0009efe9 	.word	0x0009efe9
   9ee14:	0009efe9 	.word	0x0009efe9
   9ee18:	0009efe9 	.word	0x0009efe9
   9ee1c:	0009efe9 	.word	0x0009efe9
   9ee20:	0009efe9 	.word	0x0009efe9
   9ee24:	0009efe9 	.word	0x0009efe9
   9ee28:	0009efe9 	.word	0x0009efe9
   9ee2c:	0009efe9 	.word	0x0009efe9
   9ee30:	0009efe9 	.word	0x0009efe9
   9ee34:	0009efe9 	.word	0x0009efe9
   9ee38:	0009efe9 	.word	0x0009efe9
   9ee3c:	0009efe9 	.word	0x0009efe9
   9ee40:	0009efc1 	.word	0x0009efc1
   9ee44:	0009efc9 	.word	0x0009efc9
   9ee48:	0009efe9 	.word	0x0009efe9
   9ee4c:	0009efe9 	.word	0x0009efe9
   9ee50:	0009efe9 	.word	0x0009efe9
   9ee54:	0009efe9 	.word	0x0009efe9
   9ee58:	0009efe9 	.word	0x0009efe9
   9ee5c:	0009efe9 	.word	0x0009efe9
   9ee60:	0009efe9 	.word	0x0009efe9
   9ee64:	0009efe9 	.word	0x0009efe9
   9ee68:	0009ef21 	.word	0x0009ef21
   9ee6c:	0009efe9 	.word	0x0009efe9
   9ee70:	0009efe9 	.word	0x0009efe9
   9ee74:	0009efe9 	.word	0x0009efe9
   9ee78:	0009ef91 	.word	0x0009ef91
   9ee7c:	0009ef89 	.word	0x0009ef89
   9ee80:	0009efe9 	.word	0x0009efe9
   9ee84:	0009efe9 	.word	0x0009efe9
   9ee88:	0009efe9 	.word	0x0009efe9
   9ee8c:	0009efe9 	.word	0x0009efe9
   9ee90:	0009efe9 	.word	0x0009efe9
   9ee94:	0009efe9 	.word	0x0009efe9
   9ee98:	0009efe9 	.word	0x0009efe9
   9ee9c:	0009efe9 	.word	0x0009efe9
   9eea0:	0009efe9 	.word	0x0009efe9
   9eea4:	0009ef59 	.word	0x0009ef59
   9eea8:	0009ef61 	.word	0x0009ef61
   9eeac:	0009ef69 	.word	0x0009ef69
   9eeb0:	0009ef71 	.word	0x0009ef71
   9eeb4:	0009ef79 	.word	0x0009ef79
   9eeb8:	0009ef81 	.word	0x0009ef81
   9eebc:	0009efe9 	.word	0x0009efe9
   9eec0:	0009ef19 	.word	0x0009ef19
   9eec4:	0009ef29 	.word	0x0009ef29
   9eec8:	0009ef31 	.word	0x0009ef31
   9eecc:	0009efe9 	.word	0x0009efe9
   9eed0:	0009efe9 	.word	0x0009efe9
   9eed4:	0009efe9 	.word	0x0009efe9
   9eed8:	0009efe9 	.word	0x0009efe9
   9eedc:	0009efe9 	.word	0x0009efe9
   9eee0:	0009efe9 	.word	0x0009efe9
   9eee4:	0009efe9 	.word	0x0009efe9
   9eee8:	0009efe9 	.word	0x0009efe9
   9eeec:	0009efe9 	.word	0x0009efe9
   9eef0:	0009efe9 	.word	0x0009efe9
   9eef4:	0009efe9 	.word	0x0009efe9
   9eef8:	0009efe9 	.word	0x0009efe9
   9eefc:	0009efe9 	.word	0x0009efe9
   9ef00:	0009efe9 	.word	0x0009efe9
   9ef04:	0009efe9 	.word	0x0009efe9
   9ef08:	0009ef51 	.word	0x0009ef51
   9ef0c:	0009ef39 	.word	0x0009ef39
   9ef10:	0009ef41 	.word	0x0009ef41
   9ef14:	0009ef49 	.word	0x0009ef49
	{

		
		case  EVT_CONSOLE_COMMAND_DISINF_START:
		*cl_disinf_event= EVENT_START_DISINF;
   9ef18:	683b      	ldr	r3, [r7, #0]
   9ef1a:	2201      	movs	r2, #1
   9ef1c:	701a      	strb	r2, [r3, #0]
		break;
   9ef1e:	e064      	b.n	9efea <cl_disinf_translatemacevent+0x226>
		
		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_disinf_event= EVENT_DISINF_CLR_ALARM;
   9ef20:	683b      	ldr	r3, [r7, #0]
   9ef22:	2225      	movs	r2, #37	; 0x25
   9ef24:	701a      	strb	r2, [r3, #0]
		break;
   9ef26:	e060      	b.n	9efea <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_RESUME_DISINF_STAGE:
		*cl_disinf_event= EVT_RESUME_DISINF_STAGE;
   9ef28:	683b      	ldr	r3, [r7, #0]
   9ef2a:	2202      	movs	r2, #2
   9ef2c:	701a      	strb	r2, [r3, #0]
		break;
   9ef2e:	e05c      	b.n	9efea <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_STOP_DISINF:
		*cl_disinf_event= EVENT_STOP_DISINF;
   9ef30:	683b      	ldr	r3, [r7, #0]
   9ef32:	2203      	movs	r2, #3
   9ef34:	701a      	strb	r2, [r3, #0]
		break;
   9ef36:	e058      	b.n	9efea <cl_disinf_translatemacevent+0x226>

		case MACREQ_PRE_DISINFECT_RINSE_COMPLETED:
		*cl_disinf_event= EVENT_PRE_DISINFECT_RINSE_COMPLETED;
   9ef38:	683b      	ldr	r3, [r7, #0]
   9ef3a:	2222      	movs	r2, #34	; 0x22
   9ef3c:	701a      	strb	r2, [r3, #0]
		break;
   9ef3e:	e054      	b.n	9efea <cl_disinf_translatemacevent+0x226>


		case MACREQ_POST_DISINFECT_RINSE_COMPLETED:
		*cl_disinf_event = EVENT_POST_DISINFECT_RINSE_COMPLETED ;
   9ef40:	683b      	ldr	r3, [r7, #0]
   9ef42:	2223      	movs	r2, #35	; 0x23
   9ef44:	701a      	strb	r2, [r3, #0]
		break;
   9ef46:	e050      	b.n	9efea <cl_disinf_translatemacevent+0x226>
		case MACREQ_DISINF_COMPLETED:
		*cl_disinf_event = EVENT_MAC_DISINF_COMPLETED;
   9ef48:	683b      	ldr	r3, [r7, #0]
   9ef4a:	2216      	movs	r2, #22
   9ef4c:	701a      	strb	r2, [r3, #0]
		break;
   9ef4e:	e04c      	b.n	9efea <cl_disinf_translatemacevent+0x226>
		case MACREQ_BC_OPENFILL_COMPLETED:
		*cl_disinf_event = EVENT_DISINF_BC_OPENFILL_COMPLETED;
   9ef50:	683b      	ldr	r3, [r7, #0]
   9ef52:	2221      	movs	r2, #33	; 0x21
   9ef54:	701a      	strb	r2, [r3, #0]
		break;
   9ef56:	e048      	b.n	9efea <cl_disinf_translatemacevent+0x226>

		
		case EVT_TICK_50M:
		*cl_disinf_event =   EVENT_DISINF_TICK_50MS;
   9ef58:	683b      	ldr	r3, [r7, #0]
   9ef5a:	220c      	movs	r2, #12
   9ef5c:	701a      	strb	r2, [r3, #0]
		break;
   9ef5e:	e044      	b.n	9efea <cl_disinf_translatemacevent+0x226>
		break;
		case EVT_TICK_100M:
		*cl_disinf_event =   EVENT_DISINF_TICK_100MS;
   9ef60:	683b      	ldr	r3, [r7, #0]
   9ef62:	220d      	movs	r2, #13
   9ef64:	701a      	strb	r2, [r3, #0]
		break;
   9ef66:	e040      	b.n	9efea <cl_disinf_translatemacevent+0x226>
		case EVT_TICK_500M:
		*cl_disinf_event =   EVENT_DISINF_TICK_500MS;
   9ef68:	683b      	ldr	r3, [r7, #0]
   9ef6a:	220e      	movs	r2, #14
   9ef6c:	701a      	strb	r2, [r3, #0]
		break;
   9ef6e:	e03c      	b.n	9efea <cl_disinf_translatemacevent+0x226>
		case EVT_TICK_SEC:
		*cl_disinf_event =   EVENT_DISINF_TICK_SECOND;
   9ef70:	683b      	ldr	r3, [r7, #0]
   9ef72:	220f      	movs	r2, #15
   9ef74:	701a      	strb	r2, [r3, #0]
		break;
   9ef76:	e038      	b.n	9efea <cl_disinf_translatemacevent+0x226>
		case EVT_TICK_MIN:
		*cl_disinf_event =   EVENT_DISINF_TICK_MINUTE;
   9ef78:	683b      	ldr	r3, [r7, #0]
   9ef7a:	2210      	movs	r2, #16
   9ef7c:	701a      	strb	r2, [r3, #0]
		break;
   9ef7e:	e034      	b.n	9efea <cl_disinf_translatemacevent+0x226>
		case EVT_TICK_HOUR:
		*cl_disinf_event =   EVENT_DISINF_TICK_HOUR;
   9ef80:	683b      	ldr	r3, [r7, #0]
   9ef82:	2211      	movs	r2, #17
   9ef84:	701a      	strb	r2, [r3, #0]
		break;
   9ef86:	e030      	b.n	9efea <cl_disinf_translatemacevent+0x226>
		case EVT_ALARM_TRIGGERED:
		*cl_disinf_event =  EVENT_DISINF_ALARM;
   9ef88:	683b      	ldr	r3, [r7, #0]
   9ef8a:	2213      	movs	r2, #19
   9ef8c:	701a      	strb	r2, [r3, #0]
		break;
   9ef8e:	e02c      	b.n	9efea <cl_disinf_translatemacevent+0x226>
		case  EVT_ALERT_TRIGGERED:
		*cl_disinf_event =  EVENT_DISINF_ALERT;
   9ef90:	683b      	ldr	r3, [r7, #0]
   9ef92:	2212      	movs	r2, #18
   9ef94:	701a      	strb	r2, [r3, #0]
		break;
   9ef96:	e028      	b.n	9efea <cl_disinf_translatemacevent+0x226>
		
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_disinf_event = EVT_DISINF_SET_DATA;
   9ef98:	683b      	ldr	r3, [r7, #0]
   9ef9a:	2215      	movs	r2, #21
   9ef9c:	701a      	strb	r2, [r3, #0]
		break;
   9ef9e:	e024      	b.n	9efea <cl_disinf_translatemacevent+0x226>
		
		case  EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_disinf_event= EVENT_DISINF_START_RINSE;
   9efa0:	683b      	ldr	r3, [r7, #0]
   9efa2:	2224      	movs	r2, #36	; 0x24
   9efa4:	701a      	strb	r2, [r3, #0]
		break;
   9efa6:	e020      	b.n	9efea <cl_disinf_translatemacevent+0x226>
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_disinf_event =  EVT_DISINF_GET_DATA;
   9efa8:	683b      	ldr	r3, [r7, #0]
   9efaa:	2214      	movs	r2, #20
   9efac:	701a      	strb	r2, [r3, #0]
		break;
   9efae:	e01c      	b.n	9efea <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_START_PRIME:
		*cl_disinf_event =  EVT_DISINF_START_PRIME;
   9efb0:	683b      	ldr	r3, [r7, #0]
   9efb2:	2217      	movs	r2, #23
   9efb4:	701a      	strb	r2, [r3, #0]
		break;
   9efb6:	e018      	b.n	9efea <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_STOP_PRIME:
		*cl_disinf_event =  EVT_DISINF_STOP_PRIME;
   9efb8:	683b      	ldr	r3, [r7, #0]
   9efba:	2218      	movs	r2, #24
   9efbc:	701a      	strb	r2, [r3, #0]
		break;
   9efbe:	e014      	b.n	9efea <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_RCIRC_START:
		*cl_disinf_event = EVT_DISINF_RCIRC_START;
   9efc0:	683b      	ldr	r3, [r7, #0]
   9efc2:	221c      	movs	r2, #28
   9efc4:	701a      	strb	r2, [r3, #0]
		break;
   9efc6:	e010      	b.n	9efea <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_RCIRC_STOP:
		*cl_disinf_event = EVT_DISINF_RCIRC_STOP;
   9efc8:	683b      	ldr	r3, [r7, #0]
   9efca:	221d      	movs	r2, #29
   9efcc:	701a      	strb	r2, [r3, #0]
		break;
   9efce:	e00c      	b.n	9efea <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_disinf_event = EVT_DISINF_COMMAND_SET_BLDPMP_ON;
   9efd0:	683b      	ldr	r3, [r7, #0]
   9efd2:	221e      	movs	r2, #30
   9efd4:	701a      	strb	r2, [r3, #0]
		break;
   9efd6:	e008      	b.n	9efea <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_disinf_event = EVT_DISINF_COMMAND_SET_BLDPMP_OFF;
   9efd8:	683b      	ldr	r3, [r7, #0]
   9efda:	221f      	movs	r2, #31
   9efdc:	701a      	strb	r2, [r3, #0]
		break;
   9efde:	e004      	b.n	9efea <cl_disinf_translatemacevent+0x226>
		break;
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_disinf_event = EVT_DISINF_COMMAND_SET_BLDPUMPRATE;
   9efe0:	683b      	ldr	r3, [r7, #0]
   9efe2:	2220      	movs	r2, #32
   9efe4:	701a      	strb	r2, [r3, #0]
		break;
   9efe6:	e000      	b.n	9efea <cl_disinf_translatemacevent+0x226>
		
		default:
		break;
   9efe8:	bf00      	nop
	}
	return CL_OK;
   9efea:	2300      	movs	r3, #0
}
   9efec:	4618      	mov	r0, r3
   9efee:	370c      	adds	r7, #12
   9eff0:	46bd      	mov	sp, r7
   9eff2:	f85d 7b04 	ldr.w	r7, [sp], #4
   9eff6:	4770      	bx	lr

0009eff8 <Cl_Disinf_StartDisinf>:
 * \return CL_OK on success. 
 * \Globals used :
 */   

Cl_ReturnCodeType Cl_Disinf_StartDisinf(void)
{
   9eff8:	b590      	push	{r4, r7, lr}
   9effa:	b085      	sub	sp, #20
   9effc:	af02      	add	r7, sp, #8
	Cl_ReturnCodeType Cl_disinfretcode = CL_OK;
   9effe:	2300      	movs	r3, #0
   9f000:	71fb      	strb	r3, [r7, #7]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9f002:	2359      	movs	r3, #89	; 0x59
   9f004:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type dataarray[4] = {0,0,0,0};
   9f006:	2300      	movs	r3, #0
   9f008:	703b      	strb	r3, [r7, #0]
   9f00a:	2300      	movs	r3, #0
   9f00c:	707b      	strb	r3, [r7, #1]
   9f00e:	2300      	movs	r3, #0
   9f010:	70bb      	strb	r3, [r7, #2]
   9f012:	2300      	movs	r3, #0
   9f014:	70fb      	strb	r3, [r7, #3]
	Cl_Uint8Type data = 0;
   9f016:	2300      	movs	r3, #0
   9f018:	717b      	strb	r3, [r7, #5]
	
	//Check for  rinse readiness and alarm status
	
	sv_cntrl_deactivate_valve(VALVE_ID1);
   9f01a:	2001      	movs	r0, #1
   9f01c:	4b42      	ldr	r3, [pc, #264]	; (9f128 <Cl_Disinf_StartDisinf+0x130>)
   9f01e:	4798      	blx	r3
	sv_cs_setpotvalue(600);
   9f020:	f44f 7016 	mov.w	r0, #600	; 0x258
   9f024:	4b41      	ldr	r3, [pc, #260]	; (9f12c <Cl_Disinf_StartDisinf+0x134>)
   9f026:	4798      	blx	r3
	
	Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR1);
   9f028:	2001      	movs	r0, #1
   9f02a:	4b41      	ldr	r3, [pc, #260]	; (9f130 <Cl_Disinf_StartDisinf+0x138>)
   9f02c:	4798      	blx	r3
   9f02e:	4603      	mov	r3, r0
   9f030:	71fb      	strb	r3, [r7, #7]
	Cl_disinfretcode = sv_cntrl_setpumpspeed(DCMOTOR1,600);
   9f032:	2001      	movs	r0, #1
   9f034:	f44f 7116 	mov.w	r1, #600	; 0x258
   9f038:	4b3e      	ldr	r3, [pc, #248]	; (9f134 <Cl_Disinf_StartDisinf+0x13c>)
   9f03a:	4798      	blx	r3
   9f03c:	4603      	mov	r3, r0
   9f03e:	71fb      	strb	r3, [r7, #7]
	
	Cl_disinfretcode = Cl_bc_controller(BC_EVENT_START);
   9f040:	2004      	movs	r0, #4
   9f042:	4b3d      	ldr	r3, [pc, #244]	; (9f138 <Cl_Disinf_StartDisinf+0x140>)
   9f044:	4798      	blx	r3
   9f046:	4603      	mov	r3, r0
   9f048:	71fb      	strb	r3, [r7, #7]
	
	if(Cl_disinfretcode == CL_OK)
   9f04a:	79fb      	ldrb	r3, [r7, #7]
   9f04c:	2b00      	cmp	r3, #0
   9f04e:	d165      	bne.n	9f11c <Cl_Disinf_StartDisinf+0x124>
	{
		Cl_disinfOpenFillTimeOut = false;
   9f050:	4b3a      	ldr	r3, [pc, #232]	; (9f13c <Cl_Disinf_StartDisinf+0x144>)
   9f052:	2200      	movs	r2, #0
   9f054:	701a      	strb	r2, [r3, #0]
		Cl_disinfretcode = Cl_Disinf_UpdateTimeInfo();
   9f056:	4b3a      	ldr	r3, [pc, #232]	; (9f140 <Cl_Disinf_StartDisinf+0x148>)
   9f058:	4798      	blx	r3
   9f05a:	4603      	mov	r3, r0
   9f05c:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   9f05e:	2001      	movs	r0, #1
   9f060:	4b38      	ldr	r3, [pc, #224]	; (9f144 <Cl_Disinf_StartDisinf+0x14c>)
   9f062:	4798      	blx	r3
   9f064:	4603      	mov	r3, r0
   9f066:	71fb      	strb	r3, [r7, #7]
		Cl_disinf_ResetAlertsforReassertion();
   9f068:	4b37      	ldr	r3, [pc, #220]	; (9f148 <Cl_Disinf_StartDisinf+0x150>)
   9f06a:	4798      	blx	r3
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);
   9f06c:	2300      	movs	r3, #0
   9f06e:	9300      	str	r3, [sp, #0]
   9f070:	2029      	movs	r0, #41	; 0x29
   9f072:	2100      	movs	r1, #0
   9f074:	f04f 0200 	mov.w	r2, #0
   9f078:	f04f 0300 	mov.w	r3, #0
   9f07c:	4c33      	ldr	r4, [pc, #204]	; (9f14c <Cl_Disinf_StartDisinf+0x154>)
   9f07e:	47a0      	blx	r4
   9f080:	4603      	mov	r3, r0
   9f082:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);
   9f084:	2300      	movs	r3, #0
   9f086:	9300      	str	r3, [sp, #0]
   9f088:	202b      	movs	r0, #43	; 0x2b
   9f08a:	2100      	movs	r1, #0
   9f08c:	f04f 0200 	mov.w	r2, #0
   9f090:	f04f 0300 	mov.w	r3, #0
   9f094:	4c2d      	ldr	r4, [pc, #180]	; (9f14c <Cl_Disinf_StartDisinf+0x154>)
   9f096:	47a0      	blx	r4
   9f098:	4603      	mov	r3, r0
   9f09a:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_OPEN,LOGIC_HIGH,0,0,0);
   9f09c:	2300      	movs	r3, #0
   9f09e:	9300      	str	r3, [sp, #0]
   9f0a0:	2003      	movs	r0, #3
   9f0a2:	2101      	movs	r1, #1
   9f0a4:	f04f 0200 	mov.w	r2, #0
   9f0a8:	f04f 0300 	mov.w	r3, #0
   9f0ac:	4c27      	ldr	r4, [pc, #156]	; (9f14c <Cl_Disinf_StartDisinf+0x154>)
   9f0ae:	47a0      	blx	r4
   9f0b0:	4603      	mov	r3, r0
   9f0b2:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_OPEN,LOGIC_HIGH,0,0,0);
   9f0b4:	2300      	movs	r3, #0
   9f0b6:	9300      	str	r3, [sp, #0]
   9f0b8:	2004      	movs	r0, #4
   9f0ba:	2101      	movs	r1, #1
   9f0bc:	f04f 0200 	mov.w	r2, #0
   9f0c0:	f04f 0300 	mov.w	r3, #0
   9f0c4:	4c21      	ldr	r4, [pc, #132]	; (9f14c <Cl_Disinf_StartDisinf+0x154>)
   9f0c6:	47a0      	blx	r4
   9f0c8:	4603      	mov	r3, r0
   9f0ca:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_OFF_TO_ON,LOGIC_LOW,0,0,0);
   9f0cc:	2300      	movs	r3, #0
   9f0ce:	9300      	str	r3, [sp, #0]
   9f0d0:	203d      	movs	r0, #61	; 0x3d
   9f0d2:	2100      	movs	r1, #0
   9f0d4:	f04f 0200 	mov.w	r2, #0
   9f0d8:	f04f 0300 	mov.w	r3, #0
   9f0dc:	4c1b      	ldr	r4, [pc, #108]	; (9f14c <Cl_Disinf_StartDisinf+0x154>)
   9f0de:	47a0      	blx	r4
   9f0e0:	4603      	mov	r3, r0
   9f0e2:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_ON_TO_OFF,LOGIC_HIGH,0,0,0);
   9f0e4:	2300      	movs	r3, #0
   9f0e6:	9300      	str	r3, [sp, #0]
   9f0e8:	203e      	movs	r0, #62	; 0x3e
   9f0ea:	2101      	movs	r1, #1
   9f0ec:	f04f 0200 	mov.w	r2, #0
   9f0f0:	f04f 0300 	mov.w	r3, #0
   9f0f4:	4c15      	ldr	r4, [pc, #84]	; (9f14c <Cl_Disinf_StartDisinf+0x154>)
   9f0f6:	47a0      	blx	r4
   9f0f8:	4603      	mov	r3, r0
   9f0fa:	71fb      	strb	r3, [r7, #7]
		
		/*Cl_disinfretcode =  Cl_AlarmActivateAlarms(ACID_IN,true );
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(BICARB_IN,true );
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true);
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true);*/
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true);
   9f0fc:	203d      	movs	r0, #61	; 0x3d
   9f0fe:	2101      	movs	r1, #1
   9f100:	4b13      	ldr	r3, [pc, #76]	; (9f150 <Cl_Disinf_StartDisinf+0x158>)
   9f102:	4798      	blx	r3
   9f104:	4603      	mov	r3, r0
   9f106:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,true);
   9f108:	203e      	movs	r0, #62	; 0x3e
   9f10a:	2101      	movs	r1, #1
   9f10c:	4b10      	ldr	r3, [pc, #64]	; (9f150 <Cl_Disinf_StartDisinf+0x158>)
   9f10e:	4798      	blx	r3
   9f110:	4603      	mov	r3, r0
   9f112:	71fb      	strb	r3, [r7, #7]
		/*Cl_disinfretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true);
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true);*/
		
		Cl_disinfretcode = Cl_disinf_ResetAlertsforReassertion();	
   9f114:	4b0c      	ldr	r3, [pc, #48]	; (9f148 <Cl_Disinf_StartDisinf+0x150>)
   9f116:	4798      	blx	r3
   9f118:	4603      	mov	r3, r0
   9f11a:	71fb      	strb	r3, [r7, #7]
	}
return CL_OK;
   9f11c:	2300      	movs	r3, #0
}
   9f11e:	4618      	mov	r0, r3
   9f120:	370c      	adds	r7, #12
   9f122:	46bd      	mov	sp, r7
   9f124:	bd90      	pop	{r4, r7, pc}
   9f126:	bf00      	nop
   9f128:	0009b409 	.word	0x0009b409
   9f12c:	0009b899 	.word	0x0009b899
   9f130:	0009b32d 	.word	0x0009b32d
   9f134:	0009b461 	.word	0x0009b461
   9f138:	00082ee1 	.word	0x00082ee1
   9f13c:	20070d3e 	.word	0x20070d3e
   9f140:	0009f301 	.word	0x0009f301
   9f144:	000948d9 	.word	0x000948d9
   9f148:	0009f6b9 	.word	0x0009f6b9
   9f14c:	000829dd 	.word	0x000829dd
   9f150:	00082a35 	.word	0x00082a35

0009f154 <Cl_Disinf_StopDisinf>:

Cl_ReturnCodeType Cl_Disinf_StopDisinf(void)
{
   9f154:	b580      	push	{r7, lr}
   9f156:	b082      	sub	sp, #8
   9f158:	af00      	add	r7, sp, #0
	Cl_Uint8Type data;
	//Cl_ReturnCodeType Cl_disinf_retval = CL_OK;
	sv_prop_stopmixing();
   9f15a:	4b28      	ldr	r3, [pc, #160]	; (9f1fc <Cl_Disinf_StopDisinf+0xa8>)
   9f15c:	4798      	blx	r3
 	sv_cntrl_deactivatepump(UFPUMP);              // manav02 added
   9f15e:	2004      	movs	r0, #4
   9f160:	4b27      	ldr	r3, [pc, #156]	; (9f200 <Cl_Disinf_StopDisinf+0xac>)
   9f162:	4798      	blx	r3
	flag_hotrinse = 0;							// manav02 added	
   9f164:	4b27      	ldr	r3, [pc, #156]	; (9f204 <Cl_Disinf_StopDisinf+0xb0>)
   9f166:	2200      	movs	r2, #0
   9f168:	701a      	strb	r2, [r3, #0]
	sv_cntrl_deactivatepump(DCMOTOR2);			// manav02 added	
   9f16a:	2002      	movs	r0, #2
   9f16c:	4b24      	ldr	r3, [pc, #144]	; (9f200 <Cl_Disinf_StopDisinf+0xac>)
   9f16e:	4798      	blx	r3
	sv_cntrl_deactivatepump(DCMOTOR1);			// manav02 added
   9f170:	2001      	movs	r0, #1
   9f172:	4b23      	ldr	r3, [pc, #140]	; (9f200 <Cl_Disinf_StopDisinf+0xac>)
   9f174:	4798      	blx	r3
	Cl_bc_controller(BC_EVENT_STOP);			// manav02 added
   9f176:	2005      	movs	r0, #5
   9f178:	4b23      	ldr	r3, [pc, #140]	; (9f208 <Cl_Disinf_StopDisinf+0xb4>)
   9f17a:	4798      	blx	r3
	Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,true );     // manav02 added ts1 alarm during loopback off
   9f17c:	2010      	movs	r0, #16
   9f17e:	2101      	movs	r1, #1
   9f180:	4b22      	ldr	r3, [pc, #136]	; (9f20c <Cl_Disinf_StopDisinf+0xb8>)
   9f182:	4798      	blx	r3
	Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,true );
   9f184:	200f      	movs	r0, #15
   9f186:	2101      	movs	r1, #1
   9f188:	4b20      	ldr	r3, [pc, #128]	; (9f20c <Cl_Disinf_StopDisinf+0xb8>)
   9f18a:	4798      	blx	r3

	sv_cntrl_disable_loopback();
   9f18c:	4b20      	ldr	r3, [pc, #128]	; (9f210 <Cl_Disinf_StopDisinf+0xbc>)
   9f18e:	4798      	blx	r3
	sv_cntrl_poweroffheater();
   9f190:	4b20      	ldr	r3, [pc, #128]	; (9f214 <Cl_Disinf_StopDisinf+0xc0>)
   9f192:	4798      	blx	r3
	cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9f194:	4b20      	ldr	r3, [pc, #128]	; (9f218 <Cl_Disinf_StopDisinf+0xc4>)
   9f196:	220c      	movs	r2, #12
   9f198:	701a      	strb	r2, [r3, #0]
	Cl_disinfsecondscounter_1 = Cl_disinfsecondscounter;
   9f19a:	4b20      	ldr	r3, [pc, #128]	; (9f21c <Cl_Disinf_StopDisinf+0xc8>)
   9f19c:	681b      	ldr	r3, [r3, #0]
   9f19e:	4a20      	ldr	r2, [pc, #128]	; (9f220 <Cl_Disinf_StopDisinf+0xcc>)
   9f1a0:	6013      	str	r3, [r2, #0]
	Cl_disinfshourscounter_1 = Cl_disinfshourscounter;
   9f1a2:	4b20      	ldr	r3, [pc, #128]	; (9f224 <Cl_Disinf_StopDisinf+0xd0>)
   9f1a4:	681b      	ldr	r3, [r3, #0]
   9f1a6:	4a20      	ldr	r2, [pc, #128]	; (9f228 <Cl_Disinf_StopDisinf+0xd4>)
   9f1a8:	6013      	str	r3, [r2, #0]
	Cl_disinfMinutescounter_1 = Cl_disinfMinutescounter;
   9f1aa:	4b20      	ldr	r3, [pc, #128]	; (9f22c <Cl_Disinf_StopDisinf+0xd8>)
   9f1ac:	681b      	ldr	r3, [r3, #0]
   9f1ae:	4a20      	ldr	r2, [pc, #128]	; (9f230 <Cl_Disinf_StopDisinf+0xdc>)
   9f1b0:	6013      	str	r3, [r2, #0]
	Cl_disinfTotalMinutescounter_1 = Cl_disinfTotalMinutescounter;
   9f1b2:	4b20      	ldr	r3, [pc, #128]	; (9f234 <Cl_Disinf_StopDisinf+0xe0>)
   9f1b4:	681b      	ldr	r3, [r3, #0]
   9f1b6:	4a20      	ldr	r2, [pc, #128]	; (9f238 <Cl_Disinf_StopDisinf+0xe4>)
   9f1b8:	6013      	str	r3, [r2, #0]
	Cl_disinfsTotalhourscounter_1 =Cl_disinfsTotalhourscounter;
   9f1ba:	4b20      	ldr	r3, [pc, #128]	; (9f23c <Cl_Disinf_StopDisinf+0xe8>)
   9f1bc:	681b      	ldr	r3, [r3, #0]
   9f1be:	4a20      	ldr	r2, [pc, #128]	; (9f240 <Cl_Disinf_StopDisinf+0xec>)
   9f1c0:	6013      	str	r3, [r2, #0]
	Cl_disinfsecondscounter=0;
   9f1c2:	4b16      	ldr	r3, [pc, #88]	; (9f21c <Cl_Disinf_StopDisinf+0xc8>)
   9f1c4:	2200      	movs	r2, #0
   9f1c6:	601a      	str	r2, [r3, #0]
	Cl_disinfshourscounter = 0;
   9f1c8:	4b16      	ldr	r3, [pc, #88]	; (9f224 <Cl_Disinf_StopDisinf+0xd0>)
   9f1ca:	2200      	movs	r2, #0
   9f1cc:	601a      	str	r2, [r3, #0]
	Cl_disinfMinutescounter = 0;
   9f1ce:	4b17      	ldr	r3, [pc, #92]	; (9f22c <Cl_Disinf_StopDisinf+0xd8>)
   9f1d0:	2200      	movs	r2, #0
   9f1d2:	601a      	str	r2, [r3, #0]
	Cl_disinfTotalMinutescounter = 0;
   9f1d4:	4b17      	ldr	r3, [pc, #92]	; (9f234 <Cl_Disinf_StopDisinf+0xe0>)
   9f1d6:	2200      	movs	r2, #0
   9f1d8:	601a      	str	r2, [r3, #0]
	Cl_disinfsTotalhourscounter = 0;
   9f1da:	4b18      	ldr	r3, [pc, #96]	; (9f23c <Cl_Disinf_StopDisinf+0xe8>)
   9f1dc:	2200      	movs	r2, #0
   9f1de:	601a      	str	r2, [r3, #0]
	hotrinse_flag = 0;
   9f1e0:	4b18      	ldr	r3, [pc, #96]	; (9f244 <Cl_Disinf_StopDisinf+0xf0>)
   9f1e2:	2200      	movs	r2, #0
   9f1e4:	701a      	strb	r2, [r3, #0]
	Cl_SendDatatoconsole(CON_TX_COMMAND_DISINF_STOPPED,&data,0);
   9f1e6:	1dfb      	adds	r3, r7, #7
   9f1e8:	2050      	movs	r0, #80	; 0x50
   9f1ea:	4619      	mov	r1, r3
   9f1ec:	2200      	movs	r2, #0
   9f1ee:	4b16      	ldr	r3, [pc, #88]	; (9f248 <Cl_Disinf_StopDisinf+0xf4>)
   9f1f0:	4798      	blx	r3
	//Cl_disinf_retval = Cl_SendDatatoconsole(CON_TX_COMMAND_DISINF_PAUSED,&data,0);
	return CL_OK;
   9f1f2:	2300      	movs	r3, #0
}
   9f1f4:	4618      	mov	r0, r3
   9f1f6:	3708      	adds	r7, #8
   9f1f8:	46bd      	mov	sp, r7
   9f1fa:	bd80      	pop	{r7, pc}
   9f1fc:	0009b7ed 	.word	0x0009b7ed
   9f200:	0009b369 	.word	0x0009b369
   9f204:	20071b94 	.word	0x20071b94
   9f208:	00082ee1 	.word	0x00082ee1
   9f20c:	00082a35 	.word	0x00082a35
   9f210:	0009b579 	.word	0x0009b579
   9f214:	0009b3d5 	.word	0x0009b3d5
   9f218:	20071d3f 	.word	0x20071d3f
   9f21c:	20071d40 	.word	0x20071d40
   9f220:	20071d4c 	.word	0x20071d4c
   9f224:	20071d48 	.word	0x20071d48
   9f228:	20071d54 	.word	0x20071d54
   9f22c:	20071d44 	.word	0x20071d44
   9f230:	20071d50 	.word	0x20071d50
   9f234:	20071d58 	.word	0x20071d58
   9f238:	20071d60 	.word	0x20071d60
   9f23c:	20071d5c 	.word	0x20071d5c
   9f240:	20071d64 	.word	0x20071d64
   9f244:	20071e15 	.word	0x20071e15
   9f248:	0009d1e9 	.word	0x0009d1e9

0009f24c <Cl_Disinf_resumeDisinf>:

Cl_ReturnCodeType Cl_Disinf_resumeDisinf(void)
{
   9f24c:	b580      	push	{r7, lr}
   9f24e:	b082      	sub	sp, #8
   9f250:	af00      	add	r7, sp, #0
	Cl_Uint8Type data;
	Cl_ReturnCodeType Cl_disinf_retval = CL_OK;
   9f252:	2300      	movs	r3, #0
   9f254:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_enable_loopback();
   9f256:	4b1a      	ldr	r3, [pc, #104]	; (9f2c0 <Cl_Disinf_resumeDisinf+0x74>)
   9f258:	4798      	blx	r3
	Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,false );     // manav02 added no ts1 alarm during loopback
   9f25a:	2010      	movs	r0, #16
   9f25c:	2100      	movs	r1, #0
   9f25e:	4b19      	ldr	r3, [pc, #100]	; (9f2c4 <Cl_Disinf_resumeDisinf+0x78>)
   9f260:	4798      	blx	r3
	Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,false );
   9f262:	200f      	movs	r0, #15
   9f264:	2100      	movs	r1, #0
   9f266:	4b17      	ldr	r3, [pc, #92]	; (9f2c4 <Cl_Disinf_resumeDisinf+0x78>)
   9f268:	4798      	blx	r3

	cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   9f26a:	4b17      	ldr	r3, [pc, #92]	; (9f2c8 <Cl_Disinf_resumeDisinf+0x7c>)
   9f26c:	2208      	movs	r2, #8
   9f26e:	701a      	strb	r2, [r3, #0]
	if (flag_hotcitric == 1)
   9f270:	4b16      	ldr	r3, [pc, #88]	; (9f2cc <Cl_Disinf_resumeDisinf+0x80>)
   9f272:	781b      	ldrb	r3, [r3, #0]
   9f274:	2b01      	cmp	r3, #1
   9f276:	d101      	bne.n	9f27c <Cl_Disinf_resumeDisinf+0x30>
	{
		sv_cntrl_poweronheater();
   9f278:	4b15      	ldr	r3, [pc, #84]	; (9f2d0 <Cl_Disinf_resumeDisinf+0x84>)
   9f27a:	4798      	blx	r3
	}
	Cl_disinf_retval = Cl_SendDatatoconsole(CON_TX_COMMAND_DISINF_RESUMED,&data,0);
   9f27c:	1dbb      	adds	r3, r7, #6
   9f27e:	203b      	movs	r0, #59	; 0x3b
   9f280:	4619      	mov	r1, r3
   9f282:	2200      	movs	r2, #0
   9f284:	4b13      	ldr	r3, [pc, #76]	; (9f2d4 <Cl_Disinf_resumeDisinf+0x88>)
   9f286:	4798      	blx	r3
   9f288:	4603      	mov	r3, r0
   9f28a:	71fb      	strb	r3, [r7, #7]
	Cl_disinfsecondscounter = Cl_disinfsecondscounter_1;
   9f28c:	4b12      	ldr	r3, [pc, #72]	; (9f2d8 <Cl_Disinf_resumeDisinf+0x8c>)
   9f28e:	681b      	ldr	r3, [r3, #0]
   9f290:	4a12      	ldr	r2, [pc, #72]	; (9f2dc <Cl_Disinf_resumeDisinf+0x90>)
   9f292:	6013      	str	r3, [r2, #0]
	Cl_disinfshourscounter = Cl_disinfshourscounter_1;
   9f294:	4b12      	ldr	r3, [pc, #72]	; (9f2e0 <Cl_Disinf_resumeDisinf+0x94>)
   9f296:	681b      	ldr	r3, [r3, #0]
   9f298:	4a12      	ldr	r2, [pc, #72]	; (9f2e4 <Cl_Disinf_resumeDisinf+0x98>)
   9f29a:	6013      	str	r3, [r2, #0]
	Cl_disinfMinutescounter = Cl_disinfMinutescounter_1;
   9f29c:	4b12      	ldr	r3, [pc, #72]	; (9f2e8 <Cl_Disinf_resumeDisinf+0x9c>)
   9f29e:	681b      	ldr	r3, [r3, #0]
   9f2a0:	4a12      	ldr	r2, [pc, #72]	; (9f2ec <Cl_Disinf_resumeDisinf+0xa0>)
   9f2a2:	6013      	str	r3, [r2, #0]
	Cl_disinfTotalMinutescounter = Cl_disinfTotalMinutescounter_1;
   9f2a4:	4b12      	ldr	r3, [pc, #72]	; (9f2f0 <Cl_Disinf_resumeDisinf+0xa4>)
   9f2a6:	681b      	ldr	r3, [r3, #0]
   9f2a8:	4a12      	ldr	r2, [pc, #72]	; (9f2f4 <Cl_Disinf_resumeDisinf+0xa8>)
   9f2aa:	6013      	str	r3, [r2, #0]
	Cl_disinfsTotalhourscounter = Cl_disinfsTotalhourscounter_1;
   9f2ac:	4b12      	ldr	r3, [pc, #72]	; (9f2f8 <Cl_Disinf_resumeDisinf+0xac>)
   9f2ae:	681b      	ldr	r3, [r3, #0]
   9f2b0:	4a12      	ldr	r2, [pc, #72]	; (9f2fc <Cl_Disinf_resumeDisinf+0xb0>)
   9f2b2:	6013      	str	r3, [r2, #0]
	//Cl_Disinf_UpdateTimeInfo();
	
	return CL_OK;
   9f2b4:	2300      	movs	r3, #0
}
   9f2b6:	4618      	mov	r0, r3
   9f2b8:	3708      	adds	r7, #8
   9f2ba:	46bd      	mov	sp, r7
   9f2bc:	bd80      	pop	{r7, pc}
   9f2be:	bf00      	nop
   9f2c0:	0009b55d 	.word	0x0009b55d
   9f2c4:	00082a35 	.word	0x00082a35
   9f2c8:	20071d3f 	.word	0x20071d3f
   9f2cc:	20071b93 	.word	0x20071b93
   9f2d0:	0009b3c1 	.word	0x0009b3c1
   9f2d4:	0009d1e9 	.word	0x0009d1e9
   9f2d8:	20071d4c 	.word	0x20071d4c
   9f2dc:	20071d40 	.word	0x20071d40
   9f2e0:	20071d54 	.word	0x20071d54
   9f2e4:	20071d48 	.word	0x20071d48
   9f2e8:	20071d50 	.word	0x20071d50
   9f2ec:	20071d44 	.word	0x20071d44
   9f2f0:	20071d60 	.word	0x20071d60
   9f2f4:	20071d58 	.word	0x20071d58
   9f2f8:	20071d64 	.word	0x20071d64
   9f2fc:	20071d5c 	.word	0x20071d5c

0009f300 <Cl_Disinf_UpdateTimeInfo>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used :
 */ 
Cl_ReturnCodeType Cl_Disinf_UpdateTimeInfo(void)
{
   9f300:	b580      	push	{r7, lr}
   9f302:	b084      	sub	sp, #16
   9f304:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType Cl_disinfretcode = CL_ERROR;
   9f306:	2304      	movs	r3, #4
   9f308:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9f30a:	2359      	movs	r3, #89	; 0x59
   9f30c:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0,0 ,0,0};
   9f30e:	2300      	movs	r3, #0
   9f310:	713b      	strb	r3, [r7, #4]
   9f312:	2300      	movs	r3, #0
   9f314:	717b      	strb	r3, [r7, #5]
   9f316:	2300      	movs	r3, #0
   9f318:	71bb      	strb	r3, [r7, #6]
   9f31a:	2300      	movs	r3, #0
   9f31c:	71fb      	strb	r3, [r7, #7]
   9f31e:	2300      	movs	r3, #0
   9f320:	723b      	strb	r3, [r7, #8]
   9f322:	2300      	movs	r3, #0
   9f324:	727b      	strb	r3, [r7, #9]
   9f326:	2300      	movs	r3, #0
   9f328:	72bb      	strb	r3, [r7, #10]
	
	command = CON_TX_COMMAND_REM_TIME;
   9f32a:	230a      	movs	r3, #10
   9f32c:	73bb      	strb	r3, [r7, #14]

	
	data[0]= (Cl_Uint8Type)DISINF_STATE;
   9f32e:	230b      	movs	r3, #11
   9f330:	713b      	strb	r3, [r7, #4]
	data[1]= (Cl_Uint8Type)Cl_disinfTotalMinutescounter;
   9f332:	4b09      	ldr	r3, [pc, #36]	; (9f358 <Cl_Disinf_UpdateTimeInfo+0x58>)
   9f334:	681b      	ldr	r3, [r3, #0]
   9f336:	b2db      	uxtb	r3, r3
   9f338:	717b      	strb	r3, [r7, #5]
	
	Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,2);
   9f33a:	7bba      	ldrb	r2, [r7, #14]
   9f33c:	1d3b      	adds	r3, r7, #4
   9f33e:	4610      	mov	r0, r2
   9f340:	4619      	mov	r1, r3
   9f342:	2202      	movs	r2, #2
   9f344:	4b05      	ldr	r3, [pc, #20]	; (9f35c <Cl_Disinf_UpdateTimeInfo+0x5c>)
   9f346:	4798      	blx	r3
   9f348:	4603      	mov	r3, r0
   9f34a:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   9f34c:	2300      	movs	r3, #0
	
}
   9f34e:	4618      	mov	r0, r3
   9f350:	3710      	adds	r7, #16
   9f352:	46bd      	mov	sp, r7
   9f354:	bd80      	pop	{r7, pc}
   9f356:	bf00      	nop
   9f358:	20071d58 	.word	0x20071d58
   9f35c:	0009d1e9 	.word	0x0009d1e9

0009f360 <Cl_Disinf_UpdateAlarmTable>:
Cl_ReturnCodeType Cl_Disinf_UpdateAlarmTable(CldisinfAlarmIdType* CldisinfAlarmId )
{
   9f360:	b580      	push	{r7, lr}
   9f362:	b086      	sub	sp, #24
   9f364:	af00      	add	r7, sp, #0
   9f366:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	Cl_disinfretcode = CL_OK;
   9f368:	2300      	movs	r3, #0
   9f36a:	75fb      	strb	r3, [r7, #23]
	Cl_Uint8Type tempcount = 0;
   9f36c:	2300      	movs	r3, #0
   9f36e:	75bb      	strb	r3, [r7, #22]
	Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   9f370:	2300      	movs	r3, #0
   9f372:	81bb      	strh	r3, [r7, #12]
   9f374:	2300      	movs	r3, #0
   9f376:	73bb      	strb	r3, [r7, #14]
   9f378:	2300      	movs	r3, #0
   9f37a:	613b      	str	r3, [r7, #16]
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9f37c:	2359      	movs	r3, #89	; 0x59
   9f37e:	73fb      	strb	r3, [r7, #15]
	
	
	for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9f380:	2300      	movs	r3, #0
   9f382:	75bb      	strb	r3, [r7, #22]
   9f384:	e05b      	b.n	9f43e <Cl_Disinf_UpdateAlarmTable+0xde>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId,&Cl_DisinfAlarmTable[tempcount].IsActive);
   9f386:	7dba      	ldrb	r2, [r7, #22]
   9f388:	4931      	ldr	r1, [pc, #196]	; (9f450 <Cl_Disinf_UpdateAlarmTable+0xf0>)
   9f38a:	4613      	mov	r3, r2
   9f38c:	00db      	lsls	r3, r3, #3
   9f38e:	1a9b      	subs	r3, r3, r2
   9f390:	440b      	add	r3, r1
   9f392:	7819      	ldrb	r1, [r3, #0]
   9f394:	7dba      	ldrb	r2, [r7, #22]
   9f396:	4613      	mov	r3, r2
   9f398:	00db      	lsls	r3, r3, #3
   9f39a:	1a9b      	subs	r3, r3, r2
   9f39c:	4a2c      	ldr	r2, [pc, #176]	; (9f450 <Cl_Disinf_UpdateAlarmTable+0xf0>)
   9f39e:	4413      	add	r3, r2
   9f3a0:	3302      	adds	r3, #2
   9f3a2:	4608      	mov	r0, r1
   9f3a4:	4619      	mov	r1, r3
   9f3a6:	4b2b      	ldr	r3, [pc, #172]	; (9f454 <Cl_Disinf_UpdateAlarmTable+0xf4>)
   9f3a8:	4798      	blx	r3

	
			if (Cl_DisinfAlarmTable[tempcount].IsActive)
   9f3aa:	7dba      	ldrb	r2, [r7, #22]
   9f3ac:	4928      	ldr	r1, [pc, #160]	; (9f450 <Cl_Disinf_UpdateAlarmTable+0xf0>)
   9f3ae:	4613      	mov	r3, r2
   9f3b0:	00db      	lsls	r3, r3, #3
   9f3b2:	1a9b      	subs	r3, r3, r2
   9f3b4:	440b      	add	r3, r1
   9f3b6:	789b      	ldrb	r3, [r3, #2]
   9f3b8:	2b00      	cmp	r3, #0
   9f3ba:	d020      	beq.n	9f3fe <Cl_Disinf_UpdateAlarmTable+0x9e>
			{
				if(!Cl_DisinfAlarmTable[tempcount].IsRaised)
   9f3bc:	7dba      	ldrb	r2, [r7, #22]
   9f3be:	4924      	ldr	r1, [pc, #144]	; (9f450 <Cl_Disinf_UpdateAlarmTable+0xf0>)
   9f3c0:	4613      	mov	r3, r2
   9f3c2:	00db      	lsls	r3, r3, #3
   9f3c4:	1a9b      	subs	r3, r3, r2
   9f3c6:	440b      	add	r3, r1
   9f3c8:	78db      	ldrb	r3, [r3, #3]
   9f3ca:	f083 0301 	eor.w	r3, r3, #1
   9f3ce:	b2db      	uxtb	r3, r3
   9f3d0:	2b00      	cmp	r3, #0
   9f3d2:	d031      	beq.n	9f438 <Cl_Disinf_UpdateAlarmTable+0xd8>
					{
	
						Cl_DisinfAlarmTable[tempcount].IsRaised = true;
   9f3d4:	7dba      	ldrb	r2, [r7, #22]
   9f3d6:	491e      	ldr	r1, [pc, #120]	; (9f450 <Cl_Disinf_UpdateAlarmTable+0xf0>)
   9f3d8:	4613      	mov	r3, r2
   9f3da:	00db      	lsls	r3, r3, #3
   9f3dc:	1a9b      	subs	r3, r3, r2
   9f3de:	440b      	add	r3, r1
   9f3e0:	2201      	movs	r2, #1
   9f3e2:	70da      	strb	r2, [r3, #3]
	
						Cl_disinfretcode = CL_DisinfAlarmActon(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId);
   9f3e4:	7dba      	ldrb	r2, [r7, #22]
   9f3e6:	491a      	ldr	r1, [pc, #104]	; (9f450 <Cl_Disinf_UpdateAlarmTable+0xf0>)
   9f3e8:	4613      	mov	r3, r2
   9f3ea:	00db      	lsls	r3, r3, #3
   9f3ec:	1a9b      	subs	r3, r3, r2
   9f3ee:	440b      	add	r3, r1
   9f3f0:	781b      	ldrb	r3, [r3, #0]
   9f3f2:	4618      	mov	r0, r3
   9f3f4:	4b18      	ldr	r3, [pc, #96]	; (9f458 <Cl_Disinf_UpdateAlarmTable+0xf8>)
   9f3f6:	4798      	blx	r3
   9f3f8:	4603      	mov	r3, r0
   9f3fa:	75fb      	strb	r3, [r7, #23]
   9f3fc:	e01c      	b.n	9f438 <Cl_Disinf_UpdateAlarmTable+0xd8>
	
			}
			else
			{
				// alarm was present before , but not active now.
				if(Cl_DisinfAlarmTable[tempcount].IsRaised == true)
   9f3fe:	7dba      	ldrb	r2, [r7, #22]
   9f400:	4913      	ldr	r1, [pc, #76]	; (9f450 <Cl_Disinf_UpdateAlarmTable+0xf0>)
   9f402:	4613      	mov	r3, r2
   9f404:	00db      	lsls	r3, r3, #3
   9f406:	1a9b      	subs	r3, r3, r2
   9f408:	440b      	add	r3, r1
   9f40a:	78db      	ldrb	r3, [r3, #3]
   9f40c:	2b00      	cmp	r3, #0
   9f40e:	d013      	beq.n	9f438 <Cl_Disinf_UpdateAlarmTable+0xd8>
				{
					Cl_DisinfAlarmTable[tempcount].IsRaised = false;
   9f410:	7dba      	ldrb	r2, [r7, #22]
   9f412:	490f      	ldr	r1, [pc, #60]	; (9f450 <Cl_Disinf_UpdateAlarmTable+0xf0>)
   9f414:	4613      	mov	r3, r2
   9f416:	00db      	lsls	r3, r3, #3
   9f418:	1a9b      	subs	r3, r3, r2
   9f41a:	440b      	add	r3, r1
   9f41c:	2200      	movs	r2, #0
   9f41e:	70da      	strb	r2, [r3, #3]
					command = CON_TX_COMMAND_ALARM;
   9f420:	2307      	movs	r3, #7
   9f422:	73fb      	strb	r3, [r7, #15]
					data[0] = (Cl_Uint8Type)(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId);
   9f424:	7dba      	ldrb	r2, [r7, #22]
   9f426:	490a      	ldr	r1, [pc, #40]	; (9f450 <Cl_Disinf_UpdateAlarmTable+0xf0>)
   9f428:	4613      	mov	r3, r2
   9f42a:	00db      	lsls	r3, r3, #3
   9f42c:	1a9b      	subs	r3, r3, r2
   9f42e:	440b      	add	r3, r1
   9f430:	781b      	ldrb	r3, [r3, #0]
   9f432:	733b      	strb	r3, [r7, #12]
					data[1] = (Cl_Uint8Type) CL_ALARM_CLEARED;
   9f434:	2300      	movs	r3, #0
   9f436:	737b      	strb	r3, [r7, #13]
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	
	for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9f438:	7dbb      	ldrb	r3, [r7, #22]
   9f43a:	3301      	adds	r3, #1
   9f43c:	75bb      	strb	r3, [r7, #22]
   9f43e:	7dbb      	ldrb	r3, [r7, #22]
   9f440:	2b0b      	cmp	r3, #11
   9f442:	d9a0      	bls.n	9f386 <Cl_Disinf_UpdateAlarmTable+0x26>
			}
		//}

	}

return (Cl_disinfretcode );
   9f444:	7dfb      	ldrb	r3, [r7, #23]
}
   9f446:	4618      	mov	r0, r3
   9f448:	3718      	adds	r7, #24
   9f44a:	46bd      	mov	sp, r7
   9f44c:	bd80      	pop	{r7, pc}
   9f44e:	bf00      	nop
   9f450:	20070d40 	.word	0x20070d40
   9f454:	00082c09 	.word	0x00082c09
   9f458:	0009f485 	.word	0x0009f485

0009f45c <Cl_disinf_ProcessAlarms>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used :
 */ 
Cl_ReturnCodeType  Cl_disinf_ProcessAlarms(void)
{
   9f45c:	b580      	push	{r7, lr}
   9f45e:	b082      	sub	sp, #8
   9f460:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_disinfretcode = CL_OK;
   9f462:	2300      	movs	r3, #0
   9f464:	71fb      	strb	r3, [r7, #7]
	CldisinfAlarmIdType CldisinfAlarmId;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9f466:	2359      	movs	r3, #89	; 0x59
   9f468:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_disinfalarmid;
	
	Cl_disinfretcode = Cl_Disinf_UpdateAlarmTable(&CldisinfAlarmId);
   9f46a:	1d7b      	adds	r3, r7, #5
   9f46c:	4618      	mov	r0, r3
   9f46e:	4b04      	ldr	r3, [pc, #16]	; (9f480 <Cl_disinf_ProcessAlarms+0x24>)
   9f470:	4798      	blx	r3
   9f472:	4603      	mov	r3, r0
   9f474:	71fb      	strb	r3, [r7, #7]
	return (Cl_disinfretcode);
   9f476:	79fb      	ldrb	r3, [r7, #7]
}
   9f478:	4618      	mov	r0, r3
   9f47a:	3708      	adds	r7, #8
   9f47c:	46bd      	mov	sp, r7
   9f47e:	bd80      	pop	{r7, pc}
   9f480:	0009f361 	.word	0x0009f361

0009f484 <CL_DisinfAlarmActon>:

Cl_ReturnCodeType  CL_DisinfAlarmActon(Cl_NewAlarmIdType cl_disinfalarmid)
{
   9f484:	b580      	push	{r7, lr}
   9f486:	b086      	sub	sp, #24
   9f488:	af00      	add	r7, sp, #0
   9f48a:	4603      	mov	r3, r0
   9f48c:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType 	Cl_disinfretcode = CL_OK;
   9f48e:	2300      	movs	r3, #0
   9f490:	75fb      	strb	r3, [r7, #23]
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   9f492:	2300      	movs	r3, #0
   9f494:	813b      	strh	r3, [r7, #8]
   9f496:	2300      	movs	r3, #0
   9f498:	72bb      	strb	r3, [r7, #10]
   9f49a:	2300      	movs	r3, #0
   9f49c:	613b      	str	r3, [r7, #16]
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9f49e:	2359      	movs	r3, #89	; 0x59
   9f4a0:	73fb      	strb	r3, [r7, #15]
			Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   9f4a2:	2300      	movs	r3, #0
   9f4a4:	73bb      	strb	r3, [r7, #14]
		float temp;
		//Cl_Uint16Type var=0
							
		switch(cl_disinfalarmid)
   9f4a6:	79fb      	ldrb	r3, [r7, #7]
   9f4a8:	3b03      	subs	r3, #3
   9f4aa:	2b28      	cmp	r3, #40	; 0x28
   9f4ac:	f200 80d7 	bhi.w	9f65e <CL_DisinfAlarmActon+0x1da>
   9f4b0:	a201      	add	r2, pc, #4	; (adr r2, 9f4b8 <CL_DisinfAlarmActon+0x34>)
   9f4b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9f4b6:	bf00      	nop
   9f4b8:	0009f5bf 	.word	0x0009f5bf
   9f4bc:	0009f5d3 	.word	0x0009f5d3
   9f4c0:	0009f65f 	.word	0x0009f65f
   9f4c4:	0009f65f 	.word	0x0009f65f
   9f4c8:	0009f65f 	.word	0x0009f65f
   9f4cc:	0009f64b 	.word	0x0009f64b
   9f4d0:	0009f65f 	.word	0x0009f65f
   9f4d4:	0009f65f 	.word	0x0009f65f
   9f4d8:	0009f65f 	.word	0x0009f65f
   9f4dc:	0009f65f 	.word	0x0009f65f
   9f4e0:	0009f65f 	.word	0x0009f65f
   9f4e4:	0009f65f 	.word	0x0009f65f
   9f4e8:	0009f65f 	.word	0x0009f65f
   9f4ec:	0009f65f 	.word	0x0009f65f
   9f4f0:	0009f65f 	.word	0x0009f65f
   9f4f4:	0009f65f 	.word	0x0009f65f
   9f4f8:	0009f5e7 	.word	0x0009f5e7
   9f4fc:	0009f5fb 	.word	0x0009f5fb
   9f500:	0009f60f 	.word	0x0009f60f
   9f504:	0009f60f 	.word	0x0009f60f
   9f508:	0009f623 	.word	0x0009f623
   9f50c:	0009f623 	.word	0x0009f623
   9f510:	0009f65f 	.word	0x0009f65f
   9f514:	0009f65f 	.word	0x0009f65f
   9f518:	0009f65f 	.word	0x0009f65f
   9f51c:	0009f65f 	.word	0x0009f65f
   9f520:	0009f623 	.word	0x0009f623
   9f524:	0009f65f 	.word	0x0009f65f
   9f528:	0009f65f 	.word	0x0009f65f
   9f52c:	0009f65f 	.word	0x0009f65f
   9f530:	0009f65f 	.word	0x0009f65f
   9f534:	0009f65f 	.word	0x0009f65f
   9f538:	0009f65f 	.word	0x0009f65f
   9f53c:	0009f65f 	.word	0x0009f65f
   9f540:	0009f65f 	.word	0x0009f65f
   9f544:	0009f65f 	.word	0x0009f65f
   9f548:	0009f637 	.word	0x0009f637
   9f54c:	0009f637 	.word	0x0009f637
   9f550:	0009f55d 	.word	0x0009f55d
   9f554:	0009f65f 	.word	0x0009f65f
   9f558:	0009f5ab 	.word	0x0009f5ab
		{
			case ACID_IN_OPEN:
			if ((cl_disinfstate == CL_DISINF_STATE_INTER))
   9f55c:	4b4f      	ldr	r3, [pc, #316]	; (9f69c <CL_DisinfAlarmActon+0x218>)
   9f55e:	781b      	ldrb	r3, [r3, #0]
   9f560:	2b10      	cmp	r3, #16
   9f562:	d10b      	bne.n	9f57c <CL_DisinfAlarmActon+0xf8>
			{
				sv_cntrl_setredalarm();
   9f564:	4b4e      	ldr	r3, [pc, #312]	; (9f6a0 <CL_DisinfAlarmActon+0x21c>)
   9f566:	4798      	blx	r3
				sv_cntrl_buzzer();
   9f568:	4b4e      	ldr	r3, [pc, #312]	; (9f6a4 <CL_DisinfAlarmActon+0x220>)
   9f56a:	4798      	blx	r3
				if (cl_disinfstate == CL_DISINF_STATE_INTER)
   9f56c:	4b4b      	ldr	r3, [pc, #300]	; (9f69c <CL_DisinfAlarmActon+0x218>)
   9f56e:	781b      	ldrb	r3, [r3, #0]
   9f570:	2b10      	cmp	r3, #16
   9f572:	d119      	bne.n	9f5a8 <CL_DisinfAlarmActon+0x124>
				{
					cl_disinfstate = CL_DISINF_STATE_INTER;
   9f574:	4b49      	ldr	r3, [pc, #292]	; (9f69c <CL_DisinfAlarmActon+0x218>)
   9f576:	2210      	movs	r2, #16
   9f578:	701a      	strb	r2, [r3, #0]
				sv_cntrl_buzzer();
				Cl_Disinf_StopDisinf();
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
			}
			
			break;
   9f57a:	e071      	b.n	9f660 <CL_DisinfAlarmActon+0x1dc>
				if (cl_disinfstate == CL_DISINF_STATE_INTER)
				{
					cl_disinfstate = CL_DISINF_STATE_INTER;
				}
			}
			else if ((cl_disinfstate == CL_DISINF_STATE_INTER_1))
   9f57c:	4b47      	ldr	r3, [pc, #284]	; (9f69c <CL_DisinfAlarmActon+0x218>)
   9f57e:	781b      	ldrb	r3, [r3, #0]
   9f580:	2b11      	cmp	r3, #17
   9f582:	d107      	bne.n	9f594 <CL_DisinfAlarmActon+0x110>
			{
				sv_cntrl_setredalarm();
   9f584:	4b46      	ldr	r3, [pc, #280]	; (9f6a0 <CL_DisinfAlarmActon+0x21c>)
   9f586:	4798      	blx	r3
				sv_cntrl_buzzer();
   9f588:	4b46      	ldr	r3, [pc, #280]	; (9f6a4 <CL_DisinfAlarmActon+0x220>)
   9f58a:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_INTER_1;
   9f58c:	4b43      	ldr	r3, [pc, #268]	; (9f69c <CL_DisinfAlarmActon+0x218>)
   9f58e:	2211      	movs	r2, #17
   9f590:	701a      	strb	r2, [r3, #0]
   9f592:	e009      	b.n	9f5a8 <CL_DisinfAlarmActon+0x124>
			}
			else
			{
				sv_cntrl_setredalarm();
   9f594:	4b42      	ldr	r3, [pc, #264]	; (9f6a0 <CL_DisinfAlarmActon+0x21c>)
   9f596:	4798      	blx	r3
				sv_cntrl_buzzer();
   9f598:	4b42      	ldr	r3, [pc, #264]	; (9f6a4 <CL_DisinfAlarmActon+0x220>)
   9f59a:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9f59c:	4b42      	ldr	r3, [pc, #264]	; (9f6a8 <CL_DisinfAlarmActon+0x224>)
   9f59e:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9f5a0:	4b3e      	ldr	r3, [pc, #248]	; (9f69c <CL_DisinfAlarmActon+0x218>)
   9f5a2:	220c      	movs	r2, #12
   9f5a4:	701a      	strb	r2, [r3, #0]
			}
			
			break;
   9f5a6:	e05b      	b.n	9f660 <CL_DisinfAlarmActon+0x1dc>
   9f5a8:	e05a      	b.n	9f660 <CL_DisinfAlarmActon+0x1dc>
			
			case BICARB_IN_OPEN:
			sv_cntrl_setredalarm();
   9f5aa:	4b3d      	ldr	r3, [pc, #244]	; (9f6a0 <CL_DisinfAlarmActon+0x21c>)
   9f5ac:	4798      	blx	r3
			sv_cntrl_buzzer();
   9f5ae:	4b3d      	ldr	r3, [pc, #244]	; (9f6a4 <CL_DisinfAlarmActon+0x220>)
   9f5b0:	4798      	blx	r3
			Cl_Disinf_StopDisinf();
   9f5b2:	4b3d      	ldr	r3, [pc, #244]	; (9f6a8 <CL_DisinfAlarmActon+0x224>)
   9f5b4:	4798      	blx	r3
			cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9f5b6:	4b39      	ldr	r3, [pc, #228]	; (9f69c <CL_DisinfAlarmActon+0x218>)
   9f5b8:	220c      	movs	r2, #12
   9f5ba:	701a      	strb	r2, [r3, #0]
			break;
   9f5bc:	e050      	b.n	9f660 <CL_DisinfAlarmActon+0x1dc>
			
			case HOLDER1STATUS_OPEN:
				sv_cntrl_setredalarm();
   9f5be:	4b38      	ldr	r3, [pc, #224]	; (9f6a0 <CL_DisinfAlarmActon+0x21c>)
   9f5c0:	4798      	blx	r3
				sv_cntrl_buzzer();
   9f5c2:	4b38      	ldr	r3, [pc, #224]	; (9f6a4 <CL_DisinfAlarmActon+0x220>)
   9f5c4:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9f5c6:	4b38      	ldr	r3, [pc, #224]	; (9f6a8 <CL_DisinfAlarmActon+0x224>)
   9f5c8:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9f5ca:	4b34      	ldr	r3, [pc, #208]	; (9f69c <CL_DisinfAlarmActon+0x218>)
   9f5cc:	220c      	movs	r2, #12
   9f5ce:	701a      	strb	r2, [r3, #0]
			break;
   9f5d0:	e046      	b.n	9f660 <CL_DisinfAlarmActon+0x1dc>
			
			case HOLDER2STATUS_OPEN:
				sv_cntrl_setredalarm();
   9f5d2:	4b33      	ldr	r3, [pc, #204]	; (9f6a0 <CL_DisinfAlarmActon+0x21c>)
   9f5d4:	4798      	blx	r3
				sv_cntrl_buzzer();
   9f5d6:	4b33      	ldr	r3, [pc, #204]	; (9f6a4 <CL_DisinfAlarmActon+0x220>)
   9f5d8:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9f5da:	4b33      	ldr	r3, [pc, #204]	; (9f6a8 <CL_DisinfAlarmActon+0x224>)
   9f5dc:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9f5de:	4b2f      	ldr	r3, [pc, #188]	; (9f69c <CL_DisinfAlarmActon+0x218>)
   9f5e0:	220c      	movs	r2, #12
   9f5e2:	701a      	strb	r2, [r3, #0]
			break;
   9f5e4:	e03c      	b.n	9f660 <CL_DisinfAlarmActon+0x1dc>
			
			case TEMP3_HIGH_THRESHOLD:
					sv_cntrl_setyellowalarm();
   9f5e6:	4b31      	ldr	r3, [pc, #196]	; (9f6ac <CL_DisinfAlarmActon+0x228>)
   9f5e8:	4798      	blx	r3
					sv_cntrl_buzzer();
   9f5ea:	4b2e      	ldr	r3, [pc, #184]	; (9f6a4 <CL_DisinfAlarmActon+0x220>)
   9f5ec:	4798      	blx	r3
					Cl_Disinf_StopDisinf();
   9f5ee:	4b2e      	ldr	r3, [pc, #184]	; (9f6a8 <CL_DisinfAlarmActon+0x224>)
   9f5f0:	4798      	blx	r3
					cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9f5f2:	4b2a      	ldr	r3, [pc, #168]	; (9f69c <CL_DisinfAlarmActon+0x218>)
   9f5f4:	220c      	movs	r2, #12
   9f5f6:	701a      	strb	r2, [r3, #0]
			break;
   9f5f8:	e032      	b.n	9f660 <CL_DisinfAlarmActon+0x1dc>
			
			case TEMP3_LOW_THRESHOLD:
			sv_cntrl_setyellowalarm();
   9f5fa:	4b2c      	ldr	r3, [pc, #176]	; (9f6ac <CL_DisinfAlarmActon+0x228>)
   9f5fc:	4798      	blx	r3
			sv_cntrl_buzzer();
   9f5fe:	4b29      	ldr	r3, [pc, #164]	; (9f6a4 <CL_DisinfAlarmActon+0x220>)
   9f600:	4798      	blx	r3
			Cl_Disinf_StopDisinf();
   9f602:	4b29      	ldr	r3, [pc, #164]	; (9f6a8 <CL_DisinfAlarmActon+0x224>)
   9f604:	4798      	blx	r3
			cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9f606:	4b25      	ldr	r3, [pc, #148]	; (9f69c <CL_DisinfAlarmActon+0x218>)
   9f608:	220c      	movs	r2, #12
   9f60a:	701a      	strb	r2, [r3, #0]
			break;
   9f60c:	e028      	b.n	9f660 <CL_DisinfAlarmActon+0x1dc>
			
			case PS1_HIGH_THRESHOLD:
			case PS1_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   9f60e:	4b27      	ldr	r3, [pc, #156]	; (9f6ac <CL_DisinfAlarmActon+0x228>)
   9f610:	4798      	blx	r3
				sv_cntrl_buzzer();
   9f612:	4b24      	ldr	r3, [pc, #144]	; (9f6a4 <CL_DisinfAlarmActon+0x220>)
   9f614:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9f616:	4b24      	ldr	r3, [pc, #144]	; (9f6a8 <CL_DisinfAlarmActon+0x224>)
   9f618:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9f61a:	4b20      	ldr	r3, [pc, #128]	; (9f69c <CL_DisinfAlarmActon+0x218>)
   9f61c:	220c      	movs	r2, #12
   9f61e:	701a      	strb	r2, [r3, #0]
			break;
   9f620:	e01e      	b.n	9f660 <CL_DisinfAlarmActon+0x1dc>
			case	POWER_FAILURE:            // manav02 added
			case	PS2_HIGH_THRESHOLD:
			case    PS2_LOW_THRESHOLD:
				sv_cntrl_setredalarm();
   9f622:	4b1f      	ldr	r3, [pc, #124]	; (9f6a0 <CL_DisinfAlarmActon+0x21c>)
   9f624:	4798      	blx	r3
				sv_cntrl_buzzer();
   9f626:	4b1f      	ldr	r3, [pc, #124]	; (9f6a4 <CL_DisinfAlarmActon+0x220>)
   9f628:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9f62a:	4b1f      	ldr	r3, [pc, #124]	; (9f6a8 <CL_DisinfAlarmActon+0x224>)
   9f62c:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9f62e:	4b1b      	ldr	r3, [pc, #108]	; (9f69c <CL_DisinfAlarmActon+0x218>)
   9f630:	220c      	movs	r2, #12
   9f632:	701a      	strb	r2, [r3, #0]
			break;
   9f634:	e014      	b.n	9f660 <CL_DisinfAlarmActon+0x1dc>
			
			case	PS3_HIGH_THRESHOLD:
			case    PS3_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   9f636:	4b1d      	ldr	r3, [pc, #116]	; (9f6ac <CL_DisinfAlarmActon+0x228>)
   9f638:	4798      	blx	r3
				sv_cntrl_buzzer();
   9f63a:	4b1a      	ldr	r3, [pc, #104]	; (9f6a4 <CL_DisinfAlarmActon+0x220>)
   9f63c:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9f63e:	4b1a      	ldr	r3, [pc, #104]	; (9f6a8 <CL_DisinfAlarmActon+0x224>)
   9f640:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9f642:	4b16      	ldr	r3, [pc, #88]	; (9f69c <CL_DisinfAlarmActon+0x218>)
   9f644:	220c      	movs	r2, #12
   9f646:	701a      	strb	r2, [r3, #0]
			break;
   9f648:	e00a      	b.n	9f660 <CL_DisinfAlarmActon+0x1dc>
			
			case COND_STATUS_HIGH:
				sv_cntrl_setyellowalarm();
   9f64a:	4b18      	ldr	r3, [pc, #96]	; (9f6ac <CL_DisinfAlarmActon+0x228>)
   9f64c:	4798      	blx	r3
				sv_cntrl_buzzer();
   9f64e:	4b15      	ldr	r3, [pc, #84]	; (9f6a4 <CL_DisinfAlarmActon+0x220>)
   9f650:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9f652:	4b15      	ldr	r3, [pc, #84]	; (9f6a8 <CL_DisinfAlarmActon+0x224>)
   9f654:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9f656:	4b11      	ldr	r3, [pc, #68]	; (9f69c <CL_DisinfAlarmActon+0x218>)
   9f658:	220c      	movs	r2, #12
   9f65a:	701a      	strb	r2, [r3, #0]
			break;
   9f65c:	e000      	b.n	9f660 <CL_DisinfAlarmActon+0x1dc>
			
			default:
			break;
   9f65e:	bf00      	nop

		}
		 if(cl_disinfalarmid != _NO_ALARM)
   9f660:	79fb      	ldrb	r3, [r7, #7]
   9f662:	2b00      	cmp	r3, #0
   9f664:	d014      	beq.n	9f690 <CL_DisinfAlarmActon+0x20c>
		 {
 
				  data[0] = (Cl_Uint8Type)cl_disinfalarmid;
   9f666:	79fb      	ldrb	r3, [r7, #7]
   9f668:	723b      	strb	r3, [r7, #8]
				 data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   9f66a:	2301      	movs	r3, #1
   9f66c:	727b      	strb	r3, [r7, #9]
				 data[2] = (Cl_Uint8Type)CRITICAL;
   9f66e:	2302      	movs	r3, #2
   9f670:	72bb      	strb	r3, [r7, #10]
				 command = CON_TX_COMMAND_ALARM;
   9f672:	2307      	movs	r3, #7
   9f674:	73fb      	strb	r3, [r7, #15]
			 			
			Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,3);
   9f676:	7bfa      	ldrb	r2, [r7, #15]
   9f678:	f107 0308 	add.w	r3, r7, #8
   9f67c:	4610      	mov	r0, r2
   9f67e:	4619      	mov	r1, r3
   9f680:	2203      	movs	r2, #3
   9f682:	4b0b      	ldr	r3, [pc, #44]	; (9f6b0 <CL_DisinfAlarmActon+0x22c>)
   9f684:	4798      	blx	r3
   9f686:	4603      	mov	r3, r0
   9f688:	75fb      	strb	r3, [r7, #23]
			cl_wait(10);
   9f68a:	200a      	movs	r0, #10
   9f68c:	4b09      	ldr	r3, [pc, #36]	; (9f6b4 <CL_DisinfAlarmActon+0x230>)
   9f68e:	4798      	blx	r3
		 }
	return CL_OK;		
   9f690:	2300      	movs	r3, #0
}
   9f692:	4618      	mov	r0, r3
   9f694:	3718      	adds	r7, #24
   9f696:	46bd      	mov	sp, r7
   9f698:	bd80      	pop	{r7, pc}
   9f69a:	bf00      	nop
   9f69c:	20071d3f 	.word	0x20071d3f
   9f6a0:	0009b635 	.word	0x0009b635
   9f6a4:	0009b671 	.word	0x0009b671
   9f6a8:	0009f155 	.word	0x0009f155
   9f6ac:	0009b649 	.word	0x0009b649
   9f6b0:	0009d1e9 	.word	0x0009d1e9
   9f6b4:	0009421d 	.word	0x0009421d

0009f6b8 <Cl_disinf_ResetAlertsforReassertion>:
Cl_ReturnCodeType Cl_disinf_ResetAlertsforReassertion(void )
{
   9f6b8:	b580      	push	{r7, lr}
   9f6ba:	b082      	sub	sp, #8
   9f6bc:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_disinfretcode = CL_OK;
   9f6be:	2300      	movs	r3, #0
   9f6c0:	71fb      	strb	r3, [r7, #7]
	CldisinfAlarmIdType CldisinfAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9f6c2:	2359      	movs	r3, #89	; 0x59
   9f6c4:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_disinfalarmid;
	
	
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_ACIDIN].IsRaised = false;
   9f6c6:	4b2d      	ldr	r3, [pc, #180]	; (9f77c <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9f6c8:	2200      	movs	r2, #0
   9f6ca:	70da      	strb	r2, [r3, #3]
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_BICARBIN].IsRaised = false;
   9f6cc:	4b2b      	ldr	r3, [pc, #172]	; (9f77c <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9f6ce:	2200      	movs	r2, #0
   9f6d0:	729a      	strb	r2, [r3, #10]
	Cl_AlarmResetAlarm(ACID_IN_OPEN);
   9f6d2:	2029      	movs	r0, #41	; 0x29
   9f6d4:	4b2a      	ldr	r3, [pc, #168]	; (9f780 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9f6d6:	4798      	blx	r3
	Cl_AlarmResetAlarm(BICARB_IN_OPEN);
   9f6d8:	202b      	movs	r0, #43	; 0x2b
   9f6da:	4b29      	ldr	r3, [pc, #164]	; (9f780 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9f6dc:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_COND_STATUS_HIGH].IsRaised = false;
   9f6de:	4b27      	ldr	r3, [pc, #156]	; (9f77c <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9f6e0:	2200      	movs	r2, #0
   9f6e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   9f6e6:	2008      	movs	r0, #8
   9f6e8:	4b25      	ldr	r3, [pc, #148]	; (9f780 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9f6ea:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   9f6ec:	4b23      	ldr	r3, [pc, #140]	; (9f77c <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9f6ee:	2200      	movs	r2, #0
   9f6f0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   9f6f4:	4b21      	ldr	r3, [pc, #132]	; (9f77c <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9f6f6:	2200      	movs	r2, #0
   9f6f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   9f6fc:	2015      	movs	r0, #21
   9f6fe:	4b20      	ldr	r3, [pc, #128]	; (9f780 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9f700:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   9f702:	2016      	movs	r0, #22
   9f704:	4b1e      	ldr	r3, [pc, #120]	; (9f780 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9f706:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   9f708:	4b1c      	ldr	r3, [pc, #112]	; (9f77c <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9f70a:	2200      	movs	r2, #0
   9f70c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   9f710:	4b1a      	ldr	r3, [pc, #104]	; (9f77c <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9f712:	2200      	movs	r2, #0
   9f714:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   9f718:	2017      	movs	r0, #23
   9f71a:	4b19      	ldr	r3, [pc, #100]	; (9f780 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9f71c:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   9f71e:	2018      	movs	r0, #24
   9f720:	4b17      	ldr	r3, [pc, #92]	; (9f780 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9f722:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   9f724:	4b15      	ldr	r3, [pc, #84]	; (9f77c <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9f726:	2200      	movs	r2, #0
   9f728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   9f72c:	4b13      	ldr	r3, [pc, #76]	; (9f77c <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9f72e:	2200      	movs	r2, #0
   9f730:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   9f734:	2028      	movs	r0, #40	; 0x28
   9f736:	4b12      	ldr	r3, [pc, #72]	; (9f780 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9f738:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   9f73a:	2027      	movs	r0, #39	; 0x27
   9f73c:	4b10      	ldr	r3, [pc, #64]	; (9f780 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9f73e:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   9f740:	4b0e      	ldr	r3, [pc, #56]	; (9f77c <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9f742:	2200      	movs	r2, #0
   9f744:	77da      	strb	r2, [r3, #31]
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   9f746:	2011      	movs	r0, #17
   9f748:	4b0d      	ldr	r3, [pc, #52]	; (9f780 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9f74a:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_HOLDER1STATUS_OPEN].IsRaised = false;
   9f74c:	4b0b      	ldr	r3, [pc, #44]	; (9f77c <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9f74e:	2200      	movs	r2, #0
   9f750:	745a      	strb	r2, [r3, #17]
	Cl_AlarmResetAlarm(HOLDER1STATUS_OPEN);
   9f752:	2003      	movs	r0, #3
   9f754:	4b0a      	ldr	r3, [pc, #40]	; (9f780 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9f756:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
   9f758:	2005      	movs	r0, #5
   9f75a:	4b09      	ldr	r3, [pc, #36]	; (9f780 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9f75c:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_HOLDER2STATUS_OPEN].IsRaised = false;
   9f75e:	4b07      	ldr	r3, [pc, #28]	; (9f77c <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9f760:	2200      	movs	r2, #0
   9f762:	761a      	strb	r2, [r3, #24]
	Cl_AlarmResetAlarm(HOLDER2STATUS_OPEN);
   9f764:	2004      	movs	r0, #4
   9f766:	4b06      	ldr	r3, [pc, #24]	; (9f780 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9f768:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
   9f76a:	2006      	movs	r0, #6
   9f76c:	4b04      	ldr	r3, [pc, #16]	; (9f780 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9f76e:	4798      	blx	r3
	
	
	return (Cl_disinfretcode);
   9f770:	79fb      	ldrb	r3, [r7, #7]
}
   9f772:	4618      	mov	r0, r3
   9f774:	3708      	adds	r7, #8
   9f776:	46bd      	mov	sp, r7
   9f778:	bd80      	pop	{r7, pc}
   9f77a:	bf00      	nop
   9f77c:	20070d40 	.word	0x20070d40
   9f780:	00082b25 	.word	0x00082b25
   9f784:	00000000 	.word	0x00000000

0009f788 <Cl_Disinf_SendDisinfStateData>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used :
 */ 
Cl_ReturnCodeType Cl_Disinf_SendDisinfStateData(void)
{
   9f788:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   9f78c:	b08b      	sub	sp, #44	; 0x2c
   9f78e:	af00      	add	r7, sp, #0
	static float cond = 0;
	Cl_ReturnCodeType  Cl_disinfretcode = CL_OK;
   9f790:	2300      	movs	r3, #0
   9f792:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	cl_DlsInfDatatype data;
	Cl_Uint8Type count=0;
   9f796:	2300      	movs	r3, #0
   9f798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	Cl_Uint16Type ts2,temp,temp1 ,temp2;
	Cl_Uint8Type dataarray[12] =  {0,0,0,0,0,0,0,0,0,0,0,0};
   9f79c:	2300      	movs	r3, #0
   9f79e:	703b      	strb	r3, [r7, #0]
   9f7a0:	2300      	movs	r3, #0
   9f7a2:	707b      	strb	r3, [r7, #1]
   9f7a4:	2300      	movs	r3, #0
   9f7a6:	70bb      	strb	r3, [r7, #2]
   9f7a8:	2300      	movs	r3, #0
   9f7aa:	70fb      	strb	r3, [r7, #3]
   9f7ac:	2300      	movs	r3, #0
   9f7ae:	713b      	strb	r3, [r7, #4]
   9f7b0:	2300      	movs	r3, #0
   9f7b2:	717b      	strb	r3, [r7, #5]
   9f7b4:	2300      	movs	r3, #0
   9f7b6:	71bb      	strb	r3, [r7, #6]
   9f7b8:	2300      	movs	r3, #0
   9f7ba:	71fb      	strb	r3, [r7, #7]
   9f7bc:	2300      	movs	r3, #0
   9f7be:	723b      	strb	r3, [r7, #8]
   9f7c0:	2300      	movs	r3, #0
   9f7c2:	727b      	strb	r3, [r7, #9]
   9f7c4:	2300      	movs	r3, #0
   9f7c6:	72bb      	strb	r3, [r7, #10]
   9f7c8:	2300      	movs	r3, #0
   9f7ca:	72fb      	strb	r3, [r7, #11]
	static Cl_Uint32Type timecount = 0;
	static float avgtmp3 = 0;
	
	//Cl_Console_bulkdatatype
	
	timecount++;
   9f7cc:	4b72      	ldr	r3, [pc, #456]	; (9f998 <Cl_Disinf_SendDisinfStateData+0x210>)
   9f7ce:	681b      	ldr	r3, [r3, #0]
   9f7d0:	3301      	adds	r3, #1
   9f7d2:	4a71      	ldr	r2, [pc, #452]	; (9f998 <Cl_Disinf_SendDisinfStateData+0x210>)
   9f7d4:	6013      	str	r3, [r2, #0]

	if (timecount < 5)
   9f7d6:	4b70      	ldr	r3, [pc, #448]	; (9f998 <Cl_Disinf_SendDisinfStateData+0x210>)
   9f7d8:	681b      	ldr	r3, [r3, #0]
   9f7da:	2b04      	cmp	r3, #4
   9f7dc:	f240 81bc 	bls.w	9fb58 <Cl_Disinf_SendDisinfStateData+0x3d0>
	{
		return;
	}
	else
	{
		timecount = 0;
   9f7e0:	4b6d      	ldr	r3, [pc, #436]	; (9f998 <Cl_Disinf_SendDisinfStateData+0x210>)
   9f7e2:	2200      	movs	r2, #0
   9f7e4:	601a      	str	r2, [r3, #0]
	}
	
	dataarray[0] = DISINF_STATE;
   9f7e6:	230b      	movs	r3, #11
   9f7e8:	703b      	strb	r3, [r7, #0]
	count++;
   9f7ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9f7ee:	3301      	adds	r3, #1
   9f7f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   9f7f4:	f107 030e 	add.w	r3, r7, #14
   9f7f8:	2014      	movs	r0, #20
   9f7fa:	4619      	mov	r1, r3
   9f7fc:	4b67      	ldr	r3, [pc, #412]	; (9f99c <Cl_Disinf_SendDisinfStateData+0x214>)
   9f7fe:	4798      	blx	r3
	
	{
		
		float ftemp,temp1;
		data.word = 0;
   9f800:	2300      	movs	r3, #0
   9f802:	613b      	str	r3, [r7, #16]
// 			temp1 = res_temp_value/100;									// Temp3 value in XX.yy format
// //			temp1 = temp1 - 3.1 + 1.4;										// sensor offset
// //			temp1 = temp1 - 3.1 -2 ;										// sensor offset
// //			avgtmp3 =(avgtmp3*5 + temp1)/6;
// 			avgtmp3 = (res_temp_value- 0.4)/10;
			temp1 = (float)temp/100;
   9f804:	89fa      	ldrh	r2, [r7, #14]
   9f806:	4b66      	ldr	r3, [pc, #408]	; (9f9a0 <Cl_Disinf_SendDisinfStateData+0x218>)
   9f808:	4610      	mov	r0, r2
   9f80a:	4798      	blx	r3
   9f80c:	4602      	mov	r2, r0
   9f80e:	4b65      	ldr	r3, [pc, #404]	; (9f9a4 <Cl_Disinf_SendDisinfStateData+0x21c>)
   9f810:	4610      	mov	r0, r2
   9f812:	4965      	ldr	r1, [pc, #404]	; (9f9a8 <Cl_Disinf_SendDisinfStateData+0x220>)
   9f814:	4798      	blx	r3
   9f816:	4603      	mov	r3, r0
   9f818:	623b      	str	r3, [r7, #32]
			avgtmp3 = temp1;
   9f81a:	4a64      	ldr	r2, [pc, #400]	; (9f9ac <Cl_Disinf_SendDisinfStateData+0x224>)
   9f81c:	6a3b      	ldr	r3, [r7, #32]
   9f81e:	6013      	str	r3, [r2, #0]
	}
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&temp);
   9f820:	f107 030e 	add.w	r3, r7, #14
   9f824:	2007      	movs	r0, #7
   9f826:	4619      	mov	r1, r3
   9f828:	4b5c      	ldr	r3, [pc, #368]	; (9f99c <Cl_Disinf_SendDisinfStateData+0x214>)
   9f82a:	4798      	blx	r3
	{
		
		float cond_comp=0;
   9f82c:	f04f 0300 	mov.w	r3, #0
   9f830:	61fb      	str	r3, [r7, #28]
		float temp2=0;
   9f832:	f04f 0300 	mov.w	r3, #0
   9f836:	61bb      	str	r3, [r7, #24]
		temp2 = temp * 0.8036;
   9f838:	89fb      	ldrh	r3, [r7, #14]
   9f83a:	461a      	mov	r2, r3
   9f83c:	4b5c      	ldr	r3, [pc, #368]	; (9f9b0 <Cl_Disinf_SendDisinfStateData+0x228>)
   9f83e:	4610      	mov	r0, r2
   9f840:	4798      	blx	r3
   9f842:	4602      	mov	r2, r0
   9f844:	460b      	mov	r3, r1
   9f846:	4c5b      	ldr	r4, [pc, #364]	; (9f9b4 <Cl_Disinf_SendDisinfStateData+0x22c>)
   9f848:	4610      	mov	r0, r2
   9f84a:	4619      	mov	r1, r3
   9f84c:	a34e      	add	r3, pc, #312	; (adr r3, 9f988 <Cl_Disinf_SendDisinfStateData+0x200>)
   9f84e:	e9d3 2300 	ldrd	r2, r3, [r3]
   9f852:	47a0      	blx	r4
   9f854:	4602      	mov	r2, r0
   9f856:	460b      	mov	r3, r1
   9f858:	4610      	mov	r0, r2
   9f85a:	4619      	mov	r1, r3
   9f85c:	4b56      	ldr	r3, [pc, #344]	; (9f9b8 <Cl_Disinf_SendDisinfStateData+0x230>)
   9f85e:	4798      	blx	r3
   9f860:	4603      	mov	r3, r0
   9f862:	61bb      	str	r3, [r7, #24]
		if (temp2 > 600)
   9f864:	4b55      	ldr	r3, [pc, #340]	; (9f9bc <Cl_Disinf_SendDisinfStateData+0x234>)
   9f866:	69b8      	ldr	r0, [r7, #24]
   9f868:	4955      	ldr	r1, [pc, #340]	; (9f9c0 <Cl_Disinf_SendDisinfStateData+0x238>)
   9f86a:	4798      	blx	r3
   9f86c:	4603      	mov	r3, r0
   9f86e:	2b00      	cmp	r3, #0
   9f870:	f000 80c6 	beq.w	9fa00 <Cl_Disinf_SendDisinfStateData+0x278>
					{
			calibration_cond(temp2);
   9f874:	69b8      	ldr	r0, [r7, #24]
   9f876:	4b53      	ldr	r3, [pc, #332]	; (9f9c4 <Cl_Disinf_SendDisinfStateData+0x23c>)
   9f878:	4798      	blx	r3
			cond =(cond*5 + cond_final_cs3)/6;
   9f87a:	4b53      	ldr	r3, [pc, #332]	; (9f9c8 <Cl_Disinf_SendDisinfStateData+0x240>)
   9f87c:	681a      	ldr	r2, [r3, #0]
   9f87e:	4b53      	ldr	r3, [pc, #332]	; (9f9cc <Cl_Disinf_SendDisinfStateData+0x244>)
   9f880:	4610      	mov	r0, r2
   9f882:	4953      	ldr	r1, [pc, #332]	; (9f9d0 <Cl_Disinf_SendDisinfStateData+0x248>)
   9f884:	4798      	blx	r3
   9f886:	4603      	mov	r3, r0
   9f888:	4619      	mov	r1, r3
   9f88a:	4b52      	ldr	r3, [pc, #328]	; (9f9d4 <Cl_Disinf_SendDisinfStateData+0x24c>)
   9f88c:	681a      	ldr	r2, [r3, #0]
   9f88e:	4b52      	ldr	r3, [pc, #328]	; (9f9d8 <Cl_Disinf_SendDisinfStateData+0x250>)
   9f890:	4608      	mov	r0, r1
   9f892:	4611      	mov	r1, r2
   9f894:	4798      	blx	r3
   9f896:	4603      	mov	r3, r0
   9f898:	461a      	mov	r2, r3
   9f89a:	4b42      	ldr	r3, [pc, #264]	; (9f9a4 <Cl_Disinf_SendDisinfStateData+0x21c>)
   9f89c:	4610      	mov	r0, r2
   9f89e:	494f      	ldr	r1, [pc, #316]	; (9f9dc <Cl_Disinf_SendDisinfStateData+0x254>)
   9f8a0:	4798      	blx	r3
   9f8a2:	4603      	mov	r3, r0
   9f8a4:	461a      	mov	r2, r3
   9f8a6:	4b48      	ldr	r3, [pc, #288]	; (9f9c8 <Cl_Disinf_SendDisinfStateData+0x240>)
   9f8a8:	601a      	str	r2, [r3, #0]
			cond_comp= cond/(1+(avgtmp3-25.0)*0.020);
   9f8aa:	4b47      	ldr	r3, [pc, #284]	; (9f9c8 <Cl_Disinf_SendDisinfStateData+0x240>)
   9f8ac:	681a      	ldr	r2, [r3, #0]
   9f8ae:	4b4c      	ldr	r3, [pc, #304]	; (9f9e0 <Cl_Disinf_SendDisinfStateData+0x258>)
   9f8b0:	4610      	mov	r0, r2
   9f8b2:	4798      	blx	r3
   9f8b4:	4680      	mov	r8, r0
   9f8b6:	4689      	mov	r9, r1
   9f8b8:	4b3c      	ldr	r3, [pc, #240]	; (9f9ac <Cl_Disinf_SendDisinfStateData+0x224>)
   9f8ba:	681a      	ldr	r2, [r3, #0]
   9f8bc:	4b48      	ldr	r3, [pc, #288]	; (9f9e0 <Cl_Disinf_SendDisinfStateData+0x258>)
   9f8be:	4610      	mov	r0, r2
   9f8c0:	4798      	blx	r3
   9f8c2:	4602      	mov	r2, r0
   9f8c4:	460b      	mov	r3, r1
   9f8c6:	4c47      	ldr	r4, [pc, #284]	; (9f9e4 <Cl_Disinf_SendDisinfStateData+0x25c>)
   9f8c8:	4610      	mov	r0, r2
   9f8ca:	4619      	mov	r1, r3
   9f8cc:	f04f 0200 	mov.w	r2, #0
   9f8d0:	4b45      	ldr	r3, [pc, #276]	; (9f9e8 <Cl_Disinf_SendDisinfStateData+0x260>)
   9f8d2:	47a0      	blx	r4
   9f8d4:	4602      	mov	r2, r0
   9f8d6:	460b      	mov	r3, r1
   9f8d8:	4c36      	ldr	r4, [pc, #216]	; (9f9b4 <Cl_Disinf_SendDisinfStateData+0x22c>)
   9f8da:	4610      	mov	r0, r2
   9f8dc:	4619      	mov	r1, r3
   9f8de:	a32c      	add	r3, pc, #176	; (adr r3, 9f990 <Cl_Disinf_SendDisinfStateData+0x208>)
   9f8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   9f8e4:	47a0      	blx	r4
   9f8e6:	4602      	mov	r2, r0
   9f8e8:	460b      	mov	r3, r1
   9f8ea:	4c40      	ldr	r4, [pc, #256]	; (9f9ec <Cl_Disinf_SendDisinfStateData+0x264>)
   9f8ec:	4610      	mov	r0, r2
   9f8ee:	4619      	mov	r1, r3
   9f8f0:	f04f 0200 	mov.w	r2, #0
   9f8f4:	4b3e      	ldr	r3, [pc, #248]	; (9f9f0 <Cl_Disinf_SendDisinfStateData+0x268>)
   9f8f6:	47a0      	blx	r4
   9f8f8:	4602      	mov	r2, r0
   9f8fa:	460b      	mov	r3, r1
   9f8fc:	4c3d      	ldr	r4, [pc, #244]	; (9f9f4 <Cl_Disinf_SendDisinfStateData+0x26c>)
   9f8fe:	4640      	mov	r0, r8
   9f900:	4649      	mov	r1, r9
   9f902:	47a0      	blx	r4
   9f904:	4602      	mov	r2, r0
   9f906:	460b      	mov	r3, r1
   9f908:	4610      	mov	r0, r2
   9f90a:	4619      	mov	r1, r3
   9f90c:	4b2a      	ldr	r3, [pc, #168]	; (9f9b8 <Cl_Disinf_SendDisinfStateData+0x230>)
   9f90e:	4798      	blx	r3
   9f910:	4603      	mov	r3, r0
   9f912:	61fb      	str	r3, [r7, #28]
			data.Twobyte = (cond_comp/10);
   9f914:	4b23      	ldr	r3, [pc, #140]	; (9f9a4 <Cl_Disinf_SendDisinfStateData+0x21c>)
   9f916:	69f8      	ldr	r0, [r7, #28]
   9f918:	4937      	ldr	r1, [pc, #220]	; (9f9f8 <Cl_Disinf_SendDisinfStateData+0x270>)
   9f91a:	4798      	blx	r3
   9f91c:	4603      	mov	r3, r0
   9f91e:	461a      	mov	r2, r3
   9f920:	4b36      	ldr	r3, [pc, #216]	; (9f9fc <Cl_Disinf_SendDisinfStateData+0x274>)
   9f922:	4610      	mov	r0, r2
   9f924:	4798      	blx	r3
   9f926:	4603      	mov	r3, r0
   9f928:	b29b      	uxth	r3, r3
   9f92a:	823b      	strh	r3, [r7, #16]
			dataarray[count++] = data.bytearray[0];
   9f92c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9f930:	1c5a      	adds	r2, r3, #1
   9f932:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9f936:	7c3a      	ldrb	r2, [r7, #16]
   9f938:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9f93c:	440b      	add	r3, r1
   9f93e:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[1];
   9f942:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9f946:	1c5a      	adds	r2, r3, #1
   9f948:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9f94c:	7c7a      	ldrb	r2, [r7, #17]
   9f94e:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9f952:	440b      	add	r3, r1
   9f954:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[2];
   9f958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9f95c:	1c5a      	adds	r2, r3, #1
   9f95e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9f962:	7cba      	ldrb	r2, [r7, #18]
   9f964:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9f968:	440b      	add	r3, r1
   9f96a:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[3];
   9f96e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9f972:	1c5a      	adds	r2, r3, #1
   9f974:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9f978:	7cfa      	ldrb	r2, [r7, #19]
   9f97a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9f97e:	440b      	add	r3, r1
   9f980:	f803 2c28 	strb.w	r2, [r3, #-40]
   9f984:	e06a      	b.n	9fa5c <Cl_Disinf_SendDisinfStateData+0x2d4>
   9f986:	bf00      	nop
   9f988:	58e21965 	.word	0x58e21965
   9f98c:	3fe9b717 	.word	0x3fe9b717
   9f990:	47ae147b 	.word	0x47ae147b
   9f994:	3f947ae1 	.word	0x3f947ae1
   9f998:	20071d74 	.word	0x20071d74
   9f99c:	0008fd69 	.word	0x0008fd69
   9f9a0:	000a8255 	.word	0x000a8255
   9f9a4:	000a846d 	.word	0x000a846d
   9f9a8:	42c80000 	.word	0x42c80000
   9f9ac:	20071d78 	.word	0x20071d78
   9f9b0:	000a79b9 	.word	0x000a79b9
   9f9b4:	000a7a85 	.word	0x000a7a85
   9f9b8:	000a8049 	.word	0x000a8049
   9f9bc:	000a867d 	.word	0x000a867d
   9f9c0:	44160000 	.word	0x44160000
   9f9c4:	00084565 	.word	0x00084565
   9f9c8:	20071d7c 	.word	0x20071d7c
   9f9cc:	000a8305 	.word	0x000a8305
   9f9d0:	40a00000 	.word	0x40a00000
   9f9d4:	20071974 	.word	0x20071974
   9f9d8:	000a80f5 	.word	0x000a80f5
   9f9dc:	40c00000 	.word	0x40c00000
   9f9e0:	000a79dd 	.word	0x000a79dd
   9f9e4:	000a771d 	.word	0x000a771d
   9f9e8:	40390000 	.word	0x40390000
   9f9ec:	000a7721 	.word	0x000a7721
   9f9f0:	3ff00000 	.word	0x3ff00000
   9f9f4:	000a7cd9 	.word	0x000a7cd9
   9f9f8:	41200000 	.word	0x41200000
   9f9fc:	000a86dd 	.word	0x000a86dd
					}
		else
					{
			data.Twobyte = 0;
   9fa00:	2300      	movs	r3, #0
   9fa02:	823b      	strh	r3, [r7, #16]
			dataarray[count++] = data.bytearray[0];
   9fa04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9fa08:	1c5a      	adds	r2, r3, #1
   9fa0a:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9fa0e:	7c3a      	ldrb	r2, [r7, #16]
   9fa10:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9fa14:	440b      	add	r3, r1
   9fa16:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[1];
   9fa1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9fa1e:	1c5a      	adds	r2, r3, #1
   9fa20:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9fa24:	7c7a      	ldrb	r2, [r7, #17]
   9fa26:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9fa2a:	440b      	add	r3, r1
   9fa2c:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[2];
   9fa30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9fa34:	1c5a      	adds	r2, r3, #1
   9fa36:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9fa3a:	7cba      	ldrb	r2, [r7, #18]
   9fa3c:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9fa40:	440b      	add	r3, r1
   9fa42:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[3];
   9fa46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9fa4a:	1c5a      	adds	r2, r3, #1
   9fa4c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9fa50:	7cfa      	ldrb	r2, [r7, #19]
   9fa52:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9fa56:	440b      	add	r3, r1
   9fa58:	f803 2c28 	strb.w	r2, [r3, #-40]
						}
						
		
					}
					{
		data.Twobyte = (uint16_t)(avgtmp3 * 10);
   9fa5c:	4b41      	ldr	r3, [pc, #260]	; (9fb64 <Cl_Disinf_SendDisinfStateData+0x3dc>)
   9fa5e:	681a      	ldr	r2, [r3, #0]
   9fa60:	4b41      	ldr	r3, [pc, #260]	; (9fb68 <Cl_Disinf_SendDisinfStateData+0x3e0>)
   9fa62:	4610      	mov	r0, r2
   9fa64:	4941      	ldr	r1, [pc, #260]	; (9fb6c <Cl_Disinf_SendDisinfStateData+0x3e4>)
   9fa66:	4798      	blx	r3
   9fa68:	4603      	mov	r3, r0
   9fa6a:	461a      	mov	r2, r3
   9fa6c:	4b40      	ldr	r3, [pc, #256]	; (9fb70 <Cl_Disinf_SendDisinfStateData+0x3e8>)
   9fa6e:	4610      	mov	r0, r2
   9fa70:	4798      	blx	r3
   9fa72:	4603      	mov	r3, r0
   9fa74:	b29b      	uxth	r3, r3
   9fa76:	823b      	strh	r3, [r7, #16]
		dataarray[count++] = data.bytearray[0];
   9fa78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9fa7c:	1c5a      	adds	r2, r3, #1
   9fa7e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9fa82:	7c3a      	ldrb	r2, [r7, #16]
   9fa84:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9fa88:	440b      	add	r3, r1
   9fa8a:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[1];
   9fa8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9fa92:	1c5a      	adds	r2, r3, #1
   9fa94:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9fa98:	7c7a      	ldrb	r2, [r7, #17]
   9fa9a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9fa9e:	440b      	add	r3, r1
   9faa0:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[2];
   9faa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9faa8:	1c5a      	adds	r2, r3, #1
   9faaa:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9faae:	7cba      	ldrb	r2, [r7, #18]
   9fab0:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9fab4:	440b      	add	r3, r1
   9fab6:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[3];
   9faba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9fabe:	1c5a      	adds	r2, r3, #1
   9fac0:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9fac4:	7cfa      	ldrb	r2, [r7, #19]
   9fac6:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9faca:	440b      	add	r3, r1
   9facc:	f803 2c28 	strb.w	r2, [r3, #-40]
	}
	// manav02 added
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&temp2);
   9fad0:	f107 030c 	add.w	r3, r7, #12
   9fad4:	2013      	movs	r0, #19
   9fad6:	4619      	mov	r1, r3
   9fad8:	4b26      	ldr	r3, [pc, #152]	; (9fb74 <Cl_Disinf_SendDisinfStateData+0x3ec>)
   9fada:	4798      	blx	r3
	{
		
		data.Twobyte = (uint16_t)temp2/10 ;
   9fadc:	89bb      	ldrh	r3, [r7, #12]
   9fade:	4a26      	ldr	r2, [pc, #152]	; (9fb78 <Cl_Disinf_SendDisinfStateData+0x3f0>)
   9fae0:	fba2 2303 	umull	r2, r3, r2, r3
   9fae4:	08db      	lsrs	r3, r3, #3
   9fae6:	b29b      	uxth	r3, r3
   9fae8:	823b      	strh	r3, [r7, #16]
		dataarray[count++] = data.bytearray[0];
   9faea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9faee:	1c5a      	adds	r2, r3, #1
   9faf0:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9faf4:	7c3a      	ldrb	r2, [r7, #16]
   9faf6:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9fafa:	440b      	add	r3, r1
   9fafc:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[1];
   9fb00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9fb04:	1c5a      	adds	r2, r3, #1
   9fb06:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9fb0a:	7c7a      	ldrb	r2, [r7, #17]
   9fb0c:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9fb10:	440b      	add	r3, r1
   9fb12:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[2];
   9fb16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9fb1a:	1c5a      	adds	r2, r3, #1
   9fb1c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9fb20:	7cba      	ldrb	r2, [r7, #18]
   9fb22:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9fb26:	440b      	add	r3, r1
   9fb28:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[3];
   9fb2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9fb30:	1c5a      	adds	r2, r3, #1
   9fb32:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9fb36:	7cfa      	ldrb	r2, [r7, #19]
   9fb38:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9fb3c:	440b      	add	r3, r1
   9fb3e:	f803 2c28 	strb.w	r2, [r3, #-40]
	}
	

	
	Cl_disinfretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&dataarray,count);
   9fb42:	463a      	mov	r2, r7
   9fb44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9fb48:	202a      	movs	r0, #42	; 0x2a
   9fb4a:	4611      	mov	r1, r2
   9fb4c:	461a      	mov	r2, r3
   9fb4e:	4b0b      	ldr	r3, [pc, #44]	; (9fb7c <Cl_Disinf_SendDisinfStateData+0x3f4>)
   9fb50:	4798      	blx	r3
   9fb52:	4603      	mov	r3, r0
   9fb54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	
	
	}
   9fb58:	4618      	mov	r0, r3
   9fb5a:	372c      	adds	r7, #44	; 0x2c
   9fb5c:	46bd      	mov	sp, r7
   9fb5e:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   9fb62:	bf00      	nop
   9fb64:	20071d78 	.word	0x20071d78
   9fb68:	000a8305 	.word	0x000a8305
   9fb6c:	41200000 	.word	0x41200000
   9fb70:	000a86dd 	.word	0x000a86dd
   9fb74:	0008fd69 	.word	0x0008fd69
   9fb78:	cccccccd 	.word	0xcccccccd
   9fb7c:	0009d1e9 	.word	0x0009d1e9

0009fb80 <UpdateDisinfMinuteTick>:
 * \return CL_OK on success. 
 * \Globals used :
 */ 
	  
	Cl_ReturnCodeType UpdateDisinfMinuteTick(void)
	{
   9fb80:	b580      	push	{r7, lr}
   9fb82:	b082      	sub	sp, #8
   9fb84:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType Cl_disinfretcode = CL_OK;
   9fb86:	2300      	movs	r3, #0
   9fb88:	71fb      	strb	r3, [r7, #7]
		Cl_disinfsecondscounter = 0;
   9fb8a:	4b0b      	ldr	r3, [pc, #44]	; (9fbb8 <UpdateDisinfMinuteTick+0x38>)
   9fb8c:	2200      	movs	r2, #0
   9fb8e:	601a      	str	r2, [r3, #0]
		Cl_disinfMinutescounter++;
   9fb90:	4b0a      	ldr	r3, [pc, #40]	; (9fbbc <UpdateDisinfMinuteTick+0x3c>)
   9fb92:	681b      	ldr	r3, [r3, #0]
   9fb94:	3301      	adds	r3, #1
   9fb96:	4a09      	ldr	r2, [pc, #36]	; (9fbbc <UpdateDisinfMinuteTick+0x3c>)
   9fb98:	6013      	str	r3, [r2, #0]
		Cl_disinfTotalMinutescounter++;
   9fb9a:	4b09      	ldr	r3, [pc, #36]	; (9fbc0 <UpdateDisinfMinuteTick+0x40>)
   9fb9c:	681b      	ldr	r3, [r3, #0]
   9fb9e:	3301      	adds	r3, #1
   9fba0:	4a07      	ldr	r2, [pc, #28]	; (9fbc0 <UpdateDisinfMinuteTick+0x40>)
   9fba2:	6013      	str	r3, [r2, #0]
		Cl_disinfretcode = Cl_Disinf_UpdateTimeInfo();
   9fba4:	4b07      	ldr	r3, [pc, #28]	; (9fbc4 <UpdateDisinfMinuteTick+0x44>)
   9fba6:	4798      	blx	r3
   9fba8:	4603      	mov	r3, r0
   9fbaa:	71fb      	strb	r3, [r7, #7]
		return Cl_disinfretcode;
   9fbac:	79fb      	ldrb	r3, [r7, #7]
	}
   9fbae:	4618      	mov	r0, r3
   9fbb0:	3708      	adds	r7, #8
   9fbb2:	46bd      	mov	sp, r7
   9fbb4:	bd80      	pop	{r7, pc}
   9fbb6:	bf00      	nop
   9fbb8:	20071d40 	.word	0x20071d40
   9fbbc:	20071d44 	.word	0x20071d44
   9fbc0:	20071d58 	.word	0x20071d58
   9fbc4:	0009f301 	.word	0x0009f301

0009fbc8 <Cl_dprep_init>:

 int Cl_dprepsecondscounter =0 ,Cl_dprepMinutescounter=0, Cl_dprephourscounter=0;
 int Cl_dprepTotalMinutescounter=0, Cl_dprepTotalhourscounter=0;

 Cl_ReturnCodeType Cl_dprep_init(void)
 {
   9fbc8:	b580      	push	{r7, lr}
   9fbca:	af00      	add	r7, sp, #0
	 

 	Cl_Dprepsecondscounter = 0;
   9fbcc:	4b31      	ldr	r3, [pc, #196]	; (9fc94 <Cl_dprep_init+0xcc>)
   9fbce:	2200      	movs	r2, #0
   9fbd0:	601a      	str	r2, [r3, #0]
 	Cl_DprepMinutescounter= 0;
   9fbd2:	4b31      	ldr	r3, [pc, #196]	; (9fc98 <Cl_dprep_init+0xd0>)
   9fbd4:	2200      	movs	r2, #0
   9fbd6:	601a      	str	r2, [r3, #0]
 	Cl_Dprephourscounter= 0;
   9fbd8:	4b30      	ldr	r3, [pc, #192]	; (9fc9c <Cl_dprep_init+0xd4>)
   9fbda:	2200      	movs	r2, #0
   9fbdc:	601a      	str	r2, [r3, #0]
 	Cl_DprepTotalMinutescounter= 0;
   9fbde:	4b30      	ldr	r3, [pc, #192]	; (9fca0 <Cl_dprep_init+0xd8>)
   9fbe0:	2200      	movs	r2, #0
   9fbe2:	601a      	str	r2, [r3, #0]
 	Cl_DprepTotalhourscounter=0;
   9fbe4:	4b2f      	ldr	r3, [pc, #188]	; (9fca4 <Cl_dprep_init+0xdc>)
   9fbe6:	2200      	movs	r2, #0
   9fbe8:	601a      	str	r2, [r3, #0]
	Cl_Dprep_hepbolus_secondscounter=0;
   9fbea:	4b2f      	ldr	r3, [pc, #188]	; (9fca8 <Cl_dprep_init+0xe0>)
   9fbec:	2200      	movs	r2, #0
   9fbee:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_filling_secondscounter = 0;
   9fbf0:	4b2e      	ldr	r3, [pc, #184]	; (9fcac <Cl_dprep_init+0xe4>)
   9fbf2:	2200      	movs	r2, #0
   9fbf4:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_filling_Minutescounter = 0;
   9fbf6:	4b2e      	ldr	r3, [pc, #184]	; (9fcb0 <Cl_dprep_init+0xe8>)
   9fbf8:	2200      	movs	r2, #0
   9fbfa:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_filling_TotalMinutescounter = 0;
   9fbfc:	4b2d      	ldr	r3, [pc, #180]	; (9fcb4 <Cl_dprep_init+0xec>)
   9fbfe:	2200      	movs	r2, #0
   9fc00:	801a      	strh	r2, [r3, #0]
powerFailureFlag = 0;
   9fc02:	4b2d      	ldr	r3, [pc, #180]	; (9fcb8 <Cl_dprep_init+0xf0>)
   9fc04:	2200      	movs	r2, #0
   9fc06:	601a      	str	r2, [r3, #0]
	Cl_Dprep_Prime_secondscounter = 0;
   9fc08:	4b2c      	ldr	r3, [pc, #176]	; (9fcbc <Cl_dprep_init+0xf4>)
   9fc0a:	2200      	movs	r2, #0
   9fc0c:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_Prime_Minutescounter = 0;
   9fc0e:	4b2c      	ldr	r3, [pc, #176]	; (9fcc0 <Cl_dprep_init+0xf8>)
   9fc10:	2200      	movs	r2, #0
   9fc12:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_Prime_TotalMinutescounter = 0;
   9fc14:	4b2b      	ldr	r3, [pc, #172]	; (9fcc4 <Cl_dprep_init+0xfc>)
   9fc16:	2200      	movs	r2, #0
   9fc18:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_secondscounter = 0;
   9fc1a:	4b2b      	ldr	r3, [pc, #172]	; (9fcc8 <Cl_dprep_init+0x100>)
   9fc1c:	2200      	movs	r2, #0
   9fc1e:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_Minutescounter = 0;
   9fc20:	4b2a      	ldr	r3, [pc, #168]	; (9fccc <Cl_dprep_init+0x104>)
   9fc22:	2200      	movs	r2, #0
   9fc24:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_TotalMinutescounter = 0;
   9fc26:	4b2a      	ldr	r3, [pc, #168]	; (9fcd0 <Cl_dprep_init+0x108>)
   9fc28:	2200      	movs	r2, #0
   9fc2a:	801a      	strh	r2, [r3, #0]
	hep_bolus_flag = 0;
   9fc2c:	4b29      	ldr	r3, [pc, #164]	; (9fcd4 <Cl_dprep_init+0x10c>)
   9fc2e:	2200      	movs	r2, #0
   9fc30:	801a      	strh	r2, [r3, #0]
	dprep_count=0;
   9fc32:	4b29      	ldr	r3, [pc, #164]	; (9fcd8 <Cl_dprep_init+0x110>)
   9fc34:	2200      	movs	r2, #0
   9fc36:	801a      	strh	r2, [r3, #0]
	temp3_cel_backup=0;
   9fc38:	4b28      	ldr	r3, [pc, #160]	; (9fcdc <Cl_dprep_init+0x114>)
   9fc3a:	f04f 0200 	mov.w	r2, #0
   9fc3e:	601a      	str	r2, [r3, #0]
	cl_temp3_stable_confirm = false;
   9fc40:	4b27      	ldr	r3, [pc, #156]	; (9fce0 <Cl_dprep_init+0x118>)
   9fc42:	2200      	movs	r2, #0
   9fc44:	701a      	strb	r2, [r3, #0]
	cl_temp3_stable= false;
   9fc46:	4b27      	ldr	r3, [pc, #156]	; (9fce4 <Cl_dprep_init+0x11c>)
   9fc48:	2200      	movs	r2, #0
   9fc4a:	701a      	strb	r2, [r3, #0]
	cl_temp3_range_stable= false;
   9fc4c:	4b26      	ldr	r3, [pc, #152]	; (9fce8 <Cl_dprep_init+0x120>)
   9fc4e:	2200      	movs	r2, #0
   9fc50:	701a      	strb	r2, [r3, #0]
	 cl_temp3_37stable = false;
   9fc52:	4b26      	ldr	r3, [pc, #152]	; (9fcec <Cl_dprep_init+0x124>)
   9fc54:	2200      	movs	r2, #0
   9fc56:	701a      	strb	r2, [r3, #0]
	Cl_Prime_state ;
	 cl_50ms_timer = 0;
   9fc58:	4b25      	ldr	r3, [pc, #148]	; (9fcf0 <Cl_dprep_init+0x128>)
   9fc5a:	2200      	movs	r2, #0
   9fc5c:	801a      	strh	r2, [r3, #0]
	 Cl_PatientState = CL_DPREP_PATIENT_STATE_NOT_CONNECTED;
   9fc5e:	4b25      	ldr	r3, [pc, #148]	; (9fcf4 <Cl_dprep_init+0x12c>)
   9fc60:	2200      	movs	r2, #0
   9fc62:	701a      	strb	r2, [r3, #0]
	 cl_dprepstate = CL_DPREP_STATE_IDLE;
   9fc64:	4b24      	ldr	r3, [pc, #144]	; (9fcf8 <Cl_dprep_init+0x130>)
   9fc66:	2200      	movs	r2, #0
   9fc68:	701a      	strb	r2, [r3, #0]
	 cl_dprepfillingState = CL_DPREP_FILLING_IDLE;
   9fc6a:	4b24      	ldr	r3, [pc, #144]	; (9fcfc <Cl_dprep_init+0x134>)
   9fc6c:	2200      	movs	r2, #0
   9fc6e:	701a      	strb	r2, [r3, #0]
	dprep_heater_stable_status = false;
   9fc70:	4b23      	ldr	r3, [pc, #140]	; (9fd00 <Cl_dprep_init+0x138>)
   9fc72:	2200      	movs	r2, #0
   9fc74:	701a      	strb	r2, [r3, #0]
	 stability_counter = 0;
   9fc76:	4b23      	ldr	r3, [pc, #140]	; (9fd04 <Cl_dprep_init+0x13c>)
   9fc78:	2200      	movs	r2, #0
   9fc7a:	601a      	str	r2, [r3, #0]
	  wait_timeout_counter = 0;
   9fc7c:	4b22      	ldr	r3, [pc, #136]	; (9fd08 <Cl_dprep_init+0x140>)
   9fc7e:	2200      	movs	r2, #0
   9fc80:	601a      	str	r2, [r3, #0]
	  state_counter = 0;
   9fc82:	4b22      	ldr	r3, [pc, #136]	; (9fd0c <Cl_dprep_init+0x144>)
   9fc84:	2200      	movs	r2, #0
   9fc86:	601a      	str	r2, [r3, #0]
	cl_dprep_primeInit();
   9fc88:	4b21      	ldr	r3, [pc, #132]	; (9fd10 <Cl_dprep_init+0x148>)
   9fc8a:	4798      	blx	r3

	 return CL_OK;
   9fc8c:	2300      	movs	r3, #0
 }
   9fc8e:	4618      	mov	r0, r3
   9fc90:	bd80      	pop	{r7, pc}
   9fc92:	bf00      	nop
   9fc94:	20071d98 	.word	0x20071d98
   9fc98:	20071d9c 	.word	0x20071d9c
   9fc9c:	20071da0 	.word	0x20071da0
   9fca0:	20071da4 	.word	0x20071da4
   9fca4:	20071da8 	.word	0x20071da8
   9fca8:	20071dac 	.word	0x20071dac
   9fcac:	20071dae 	.word	0x20071dae
   9fcb0:	20071db0 	.word	0x20071db0
   9fcb4:	20071db2 	.word	0x20071db2
   9fcb8:	20071d84 	.word	0x20071d84
   9fcbc:	20071db4 	.word	0x20071db4
   9fcc0:	20071db6 	.word	0x20071db6
   9fcc4:	20071db8 	.word	0x20071db8
   9fcc8:	20071dba 	.word	0x20071dba
   9fccc:	20071dbc 	.word	0x20071dbc
   9fcd0:	20071dbe 	.word	0x20071dbe
   9fcd4:	20071dc0 	.word	0x20071dc0
   9fcd8:	20071dc2 	.word	0x20071dc2
   9fcdc:	20071dc4 	.word	0x20071dc4
   9fce0:	20071dc8 	.word	0x20071dc8
   9fce4:	20071dc9 	.word	0x20071dc9
   9fce8:	20071dca 	.word	0x20071dca
   9fcec:	20071dcb 	.word	0x20071dcb
   9fcf0:	20071dcc 	.word	0x20071dcc
   9fcf4:	20071dce 	.word	0x20071dce
   9fcf8:	20071dcf 	.word	0x20071dcf
   9fcfc:	20071dd1 	.word	0x20071dd1
   9fd00:	20071d81 	.word	0x20071d81
   9fd04:	20071d8c 	.word	0x20071d8c
   9fd08:	20071d90 	.word	0x20071d90
   9fd0c:	20071d94 	.word	0x20071d94
   9fd10:	00088075 	.word	0x00088075
   9fd14:	00000000 	.word	0x00000000

0009fd18 <Cl_dprep_controller>:
 

 
Cl_ReturnCodeType Cl_dprep_controller(Cl_Mac_EventsType Cl_MacDprepEvent)
{
   9fd18:	b590      	push	{r4, r7, lr}
   9fd1a:	b0a7      	sub	sp, #156	; 0x9c
   9fd1c:	af00      	add	r7, sp, #0
   9fd1e:	4603      	mov	r3, r0
   9fd20:	71fb      	strb	r3, [r7, #7]
	
	Cl_ReturnCodeType  Cl_dprepretcode = CL_OK;
   9fd22:	2300      	movs	r3, #0
   9fd24:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	Cl_Dprep_Events cl_dprepevent = EVENT_DPREP_EVENT_NULL;
   9fd28:	2300      	movs	r3, #0
   9fd2a:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9fd2e:	2359      	movs	r3, #89	; 0x59
   9fd30:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	Cl_Uint8Type data = 0;
   9fd34:	2300      	movs	r3, #0
   9fd36:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	Cl_Uint8Type datasize = 0;
   9fd3a:	2300      	movs	r3, #0
   9fd3c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	Cl_Uint8Type dataarray[4] =  {0,0,0,0};
   9fd40:	2300      	movs	r3, #0
   9fd42:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
   9fd46:	2300      	movs	r3, #0
   9fd48:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
   9fd4c:	2300      	movs	r3, #0
   9fd4e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
   9fd52:	2300      	movs	r3, #0
   9fd54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	Cl_Uint8Type systemdataarray[40] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   9fd58:	f107 0344 	add.w	r3, r7, #68	; 0x44
   9fd5c:	2200      	movs	r2, #0
   9fd5e:	601a      	str	r2, [r3, #0]
   9fd60:	3304      	adds	r3, #4
   9fd62:	2200      	movs	r2, #0
   9fd64:	601a      	str	r2, [r3, #0]
   9fd66:	3304      	adds	r3, #4
   9fd68:	2200      	movs	r2, #0
   9fd6a:	601a      	str	r2, [r3, #0]
   9fd6c:	3304      	adds	r3, #4
   9fd6e:	2200      	movs	r2, #0
   9fd70:	601a      	str	r2, [r3, #0]
   9fd72:	3304      	adds	r3, #4
   9fd74:	2200      	movs	r2, #0
   9fd76:	601a      	str	r2, [r3, #0]
   9fd78:	3304      	adds	r3, #4
   9fd7a:	2200      	movs	r2, #0
   9fd7c:	601a      	str	r2, [r3, #0]
   9fd7e:	3304      	adds	r3, #4
   9fd80:	2200      	movs	r2, #0
   9fd82:	601a      	str	r2, [r3, #0]
   9fd84:	3304      	adds	r3, #4
   9fd86:	2200      	movs	r2, #0
   9fd88:	601a      	str	r2, [r3, #0]
   9fd8a:	3304      	adds	r3, #4
   9fd8c:	2200      	movs	r2, #0
   9fd8e:	601a      	str	r2, [r3, #0]
   9fd90:	3304      	adds	r3, #4
   9fd92:	2200      	movs	r2, #0
   9fd94:	601a      	str	r2, [r3, #0]
   9fd96:	3304      	adds	r3, #4
	cl_PrepDatatype tempdata;
	Cl_BoolType cl_status;
	cl_PrepDatatype cl_PrepData;															
	Cl_BoolType alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false,flowstatus = false;
   9fd98:	2300      	movs	r3, #0
   9fd9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
   9fd9e:	2300      	movs	r3, #0
   9fda0:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
   9fda4:	2300      	movs	r3, #0
   9fda6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
   9fdaa:	2300      	movs	r3, #0
   9fdac:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	Cl_Uint16Type static cl_temp3;
	Cl_Uint16Type temp_temp3;
	float temp3_cel=0;
   9fdb0:	f04f 0300 	mov.w	r3, #0
   9fdb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	Cl_Uint16Type temp = 0;
   9fdb8:	2300      	movs	r3, #0
   9fdba:	85bb      	strh	r3, [r7, #44]	; 0x2c
	Cl_Uint16Type tempcount;
	StateDatatype abfdata;
	Cl_Uint8Type abfdataarray[5] =  {0,0,0,0,0};
   9fdbc:	2300      	movs	r3, #0
   9fdbe:	f887 3020 	strb.w	r3, [r7, #32]
   9fdc2:	2300      	movs	r3, #0
   9fdc4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
   9fdc8:	2300      	movs	r3, #0
   9fdca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   9fdce:	2300      	movs	r3, #0
   9fdd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   9fdd4:	2300      	movs	r3, #0
   9fdd6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	cl_dprep_translatemacevent( Cl_MacDprepEvent, &cl_dprepevent);
   9fdda:	79fa      	ldrb	r2, [r7, #7]
   9fddc:	f107 0371 	add.w	r3, r7, #113	; 0x71
   9fde0:	4610      	mov	r0, r2
   9fde2:	4619      	mov	r1, r3
   9fde4:	4bab      	ldr	r3, [pc, #684]	; (a0094 <Cl_dprep_controller+0x37c>)
   9fde6:	4798      	blx	r3
	
	
	switch(cl_dprepevent)
   9fde8:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
   9fdec:	3b05      	subs	r3, #5
   9fdee:	2b57      	cmp	r3, #87	; 0x57
   9fdf0:	f200 81c1 	bhi.w	a0176 <Cl_dprep_controller+0x45e>
   9fdf4:	a201      	add	r2, pc, #4	; (adr r2, 9fdfc <Cl_dprep_controller+0xe4>)
   9fdf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9fdfa:	bf00      	nop
   9fdfc:	0009ff67 	.word	0x0009ff67
   9fe00:	0009ff7f 	.word	0x0009ff7f
   9fe04:	0009ffb7 	.word	0x0009ffb7
   9fe08:	000a0177 	.word	0x000a0177
   9fe0c:	000a0177 	.word	0x000a0177
   9fe10:	000a0177 	.word	0x000a0177
   9fe14:	000a0177 	.word	0x000a0177
   9fe18:	000a0177 	.word	0x000a0177
   9fe1c:	000a0177 	.word	0x000a0177
   9fe20:	000a0177 	.word	0x000a0177
   9fe24:	000a005d 	.word	0x000a005d
   9fe28:	000a0177 	.word	0x000a0177
   9fe2c:	000a0177 	.word	0x000a0177
   9fe30:	000a0177 	.word	0x000a0177
   9fe34:	000a0177 	.word	0x000a0177
   9fe38:	000a0177 	.word	0x000a0177
   9fe3c:	000a0177 	.word	0x000a0177
   9fe40:	0009ff5d 	.word	0x0009ff5d
   9fe44:	000a0177 	.word	0x000a0177
   9fe48:	000a0177 	.word	0x000a0177
   9fe4c:	000a0177 	.word	0x000a0177
   9fe50:	000a0177 	.word	0x000a0177
   9fe54:	000a0177 	.word	0x000a0177
   9fe58:	000a0177 	.word	0x000a0177
   9fe5c:	000a0177 	.word	0x000a0177
   9fe60:	000a0177 	.word	0x000a0177
   9fe64:	000a0177 	.word	0x000a0177
   9fe68:	000a0177 	.word	0x000a0177
   9fe6c:	000a0053 	.word	0x000a0053
   9fe70:	0009ffed 	.word	0x0009ffed
   9fe74:	000a0049 	.word	0x000a0049
   9fe78:	0009ffb1 	.word	0x0009ffb1
   9fe7c:	000a0177 	.word	0x000a0177
   9fe80:	000a0177 	.word	0x000a0177
   9fe84:	000a0177 	.word	0x000a0177
   9fe88:	000a0177 	.word	0x000a0177
   9fe8c:	000a0177 	.word	0x000a0177
   9fe90:	000a0177 	.word	0x000a0177
   9fe94:	000a0177 	.word	0x000a0177
   9fe98:	000a0177 	.word	0x000a0177
   9fe9c:	000a0177 	.word	0x000a0177
   9fea0:	000a0177 	.word	0x000a0177
   9fea4:	000a0177 	.word	0x000a0177
   9fea8:	000a0177 	.word	0x000a0177
   9feac:	000a0177 	.word	0x000a0177
   9feb0:	000a0177 	.word	0x000a0177
   9feb4:	000a0177 	.word	0x000a0177
   9feb8:	000a0177 	.word	0x000a0177
   9febc:	000a0177 	.word	0x000a0177
   9fec0:	000a0177 	.word	0x000a0177
   9fec4:	000a0177 	.word	0x000a0177
   9fec8:	000a0177 	.word	0x000a0177
   9fecc:	000a0177 	.word	0x000a0177
   9fed0:	000a0177 	.word	0x000a0177
   9fed4:	000a0177 	.word	0x000a0177
   9fed8:	000a0177 	.word	0x000a0177
   9fedc:	000a0177 	.word	0x000a0177
   9fee0:	000a0177 	.word	0x000a0177
   9fee4:	000a0177 	.word	0x000a0177
   9fee8:	000a0177 	.word	0x000a0177
   9feec:	000a0177 	.word	0x000a0177
   9fef0:	000a0177 	.word	0x000a0177
   9fef4:	000a0177 	.word	0x000a0177
   9fef8:	000a0177 	.word	0x000a0177
   9fefc:	000a0177 	.word	0x000a0177
   9ff00:	000a0177 	.word	0x000a0177
   9ff04:	000a0177 	.word	0x000a0177
   9ff08:	000a0177 	.word	0x000a0177
   9ff0c:	000a0177 	.word	0x000a0177
   9ff10:	000a0177 	.word	0x000a0177
   9ff14:	000a0177 	.word	0x000a0177
   9ff18:	000a0177 	.word	0x000a0177
   9ff1c:	000a0177 	.word	0x000a0177
   9ff20:	000a0177 	.word	0x000a0177
   9ff24:	000a0177 	.word	0x000a0177
   9ff28:	000a0177 	.word	0x000a0177
   9ff2c:	000a0177 	.word	0x000a0177
   9ff30:	000a0177 	.word	0x000a0177
   9ff34:	000a0177 	.word	0x000a0177
   9ff38:	000a0177 	.word	0x000a0177
   9ff3c:	000a0177 	.word	0x000a0177
   9ff40:	000a0177 	.word	0x000a0177
   9ff44:	000a0177 	.word	0x000a0177
   9ff48:	000a0177 	.word	0x000a0177
   9ff4c:	000a0177 	.word	0x000a0177
   9ff50:	000a0177 	.word	0x000a0177
   9ff54:	000a00bd 	.word	0x000a00bd
   9ff58:	000a011b 	.word	0x000a011b
	{
		case EVENT_DPREP_TICK_SECOND:
		//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_SECOND);
		//Cl_dprepretcode = cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_TICK_SEC,0);
		cl_dprepstatedummy = cl_dprepstate;
   9ff5c:	4b4e      	ldr	r3, [pc, #312]	; (a0098 <Cl_dprep_controller+0x380>)
   9ff5e:	781a      	ldrb	r2, [r3, #0]
   9ff60:	4b4e      	ldr	r3, [pc, #312]	; (a009c <Cl_dprep_controller+0x384>)
   9ff62:	701a      	strb	r2, [r3, #0]
		break;
   9ff64:	e108      	b.n	a0178 <Cl_dprep_controller+0x460>
		case EVENT_DPREP_TICK_50MS:
		//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_50MS);
		break;
		case EVENT_DPREP_COMMAND_SET_BLDPMP_ON:
		Cl_dprepretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
   9ff66:	2001      	movs	r0, #1
   9ff68:	2101      	movs	r1, #1
   9ff6a:	4b4d      	ldr	r3, [pc, #308]	; (a00a0 <Cl_dprep_controller+0x388>)
   9ff6c:	4798      	blx	r3
   9ff6e:	4603      	mov	r3, r0
   9ff70:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		cl_bp_controller(CL_BP_EVENT_START,1);
   9ff74:	2002      	movs	r0, #2
   9ff76:	2101      	movs	r1, #1
   9ff78:	4b4a      	ldr	r3, [pc, #296]	; (a00a4 <Cl_dprep_controller+0x38c>)
   9ff7a:	4798      	blx	r3
		break;
   9ff7c:	e0fc      	b.n	a0178 <Cl_dprep_controller+0x460>
		case EVENT_DPREP_COMMAND_SET_BLDPMP_OFF:
		Cl_dprepretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false);
   9ff7e:	2001      	movs	r0, #1
   9ff80:	2100      	movs	r1, #0
   9ff82:	4b47      	ldr	r3, [pc, #284]	; (a00a0 <Cl_dprep_controller+0x388>)
   9ff84:	4798      	blx	r3
   9ff86:	4603      	mov	r3, r0
   9ff88:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		cl_bp_controller(CL_BP_EVENT_STOP,1);
   9ff8c:	2004      	movs	r0, #4
   9ff8e:	2101      	movs	r1, #1
   9ff90:	4b44      	ldr	r3, [pc, #272]	; (a00a4 <Cl_dprep_controller+0x38c>)
   9ff92:	4798      	blx	r3
		if(cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME || cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME_STOPPED){
   9ff94:	4b40      	ldr	r3, [pc, #256]	; (a0098 <Cl_dprep_controller+0x380>)
   9ff96:	781b      	ldrb	r3, [r3, #0]
   9ff98:	2b06      	cmp	r3, #6
   9ff9a:	d003      	beq.n	9ffa4 <Cl_dprep_controller+0x28c>
   9ff9c:	4b3e      	ldr	r3, [pc, #248]	; (a0098 <Cl_dprep_controller+0x380>)
   9ff9e:	781b      	ldrb	r3, [r3, #0]
   9ffa0:	2b07      	cmp	r3, #7
   9ffa2:	d104      	bne.n	9ffae <Cl_dprep_controller+0x296>
		Cl_Alarm_TriggerAlarm(BP_STOPPED,1);	
   9ffa4:	203f      	movs	r0, #63	; 0x3f
   9ffa6:	2101      	movs	r1, #1
   9ffa8:	4b3f      	ldr	r3, [pc, #252]	; (a00a8 <Cl_dprep_controller+0x390>)
   9ffaa:	4798      	blx	r3
		}
		
		
		
		break;
   9ffac:	e0e4      	b.n	a0178 <Cl_dprep_controller+0x460>
   9ffae:	e0e3      	b.n	a0178 <Cl_dprep_controller+0x460>
		
		case EVENT_DPREP_MUTE :
		sv_cntrl_nobuzzer();
   9ffb0:	4b3e      	ldr	r3, [pc, #248]	; (a00ac <Cl_dprep_controller+0x394>)
   9ffb2:	4798      	blx	r3
		break;
   9ffb4:	e0e0      	b.n	a0178 <Cl_dprep_controller+0x460>
		
		case  EVENT_DPREP_COMMAND_SET_BLDPUMPRATE:
			if(Cl_ConsoleRxMsg.msgready == true)
   9ffb6:	4b3e      	ldr	r3, [pc, #248]	; (a00b0 <Cl_dprep_controller+0x398>)
   9ffb8:	7e1b      	ldrb	r3, [r3, #24]
   9ffba:	2b00      	cmp	r3, #0
   9ffbc:	d015      	beq.n	9ffea <Cl_dprep_controller+0x2d2>
		{
			
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9ffbe:	4b3c      	ldr	r3, [pc, #240]	; (a00b0 <Cl_dprep_controller+0x398>)
   9ffc0:	791b      	ldrb	r3, [r3, #4]
   9ffc2:	773b      	strb	r3, [r7, #28]
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   9ffc4:	4b3a      	ldr	r3, [pc, #232]	; (a00b0 <Cl_dprep_controller+0x398>)
   9ffc6:	795b      	ldrb	r3, [r3, #5]
   9ffc8:	777b      	strb	r3, [r7, #29]
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   9ffca:	4b39      	ldr	r3, [pc, #228]	; (a00b0 <Cl_dprep_controller+0x398>)
   9ffcc:	799b      	ldrb	r3, [r3, #6]
   9ffce:	77bb      	strb	r3, [r7, #30]
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   9ffd0:	4b37      	ldr	r3, [pc, #220]	; (a00b0 <Cl_dprep_controller+0x398>)
   9ffd2:	79db      	ldrb	r3, [r3, #7]
   9ffd4:	77fb      	strb	r3, [r7, #31]
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   9ffd6:	8bbb      	ldrh	r3, [r7, #28]
   9ffd8:	2001      	movs	r0, #1
   9ffda:	4619      	mov	r1, r3
   9ffdc:	4b31      	ldr	r3, [pc, #196]	; (a00a4 <Cl_dprep_controller+0x38c>)
   9ffde:	4798      	blx	r3
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
   9ffe0:	8bbb      	ldrh	r3, [r7, #28]
   9ffe2:	461a      	mov	r2, r3
   9ffe4:	4b33      	ldr	r3, [pc, #204]	; (a00b4 <Cl_dprep_controller+0x39c>)
   9ffe6:	65da      	str	r2, [r3, #92]	; 0x5c
		}
		
		break;
   9ffe8:	e0c6      	b.n	a0178 <Cl_dprep_controller+0x460>
   9ffea:	e0c5      	b.n	a0178 <Cl_dprep_controller+0x460>
			case EVENT_DPREP_HEP_PMP_START:
			if(Cl_ConsoleRxMsg.msgready == true)
   9ffec:	4b30      	ldr	r3, [pc, #192]	; (a00b0 <Cl_dprep_controller+0x398>)
   9ffee:	7e1b      	ldrb	r3, [r3, #24]
   9fff0:	2b00      	cmp	r3, #0
   9fff2:	d028      	beq.n	a0046 <Cl_dprep_controller+0x32e>
			
			{
				cl_Datastreamtype cl_temp  ;
				cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   9fff4:	4b2e      	ldr	r3, [pc, #184]	; (a00b0 <Cl_dprep_controller+0x398>)
   9fff6:	795b      	ldrb	r3, [r3, #5]
   9fff8:	763b      	strb	r3, [r7, #24]
				cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   9fffa:	4b2d      	ldr	r3, [pc, #180]	; (a00b0 <Cl_dprep_controller+0x398>)
   9fffc:	799b      	ldrb	r3, [r3, #6]
   9fffe:	767b      	strb	r3, [r7, #25]
				cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   a0000:	4b2b      	ldr	r3, [pc, #172]	; (a00b0 <Cl_dprep_controller+0x398>)
   a0002:	79db      	ldrb	r3, [r3, #7]
   a0004:	76bb      	strb	r3, [r7, #26]
				cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   a0006:	4b2a      	ldr	r3, [pc, #168]	; (a00b0 <Cl_dprep_controller+0x398>)
   a0008:	7a1b      	ldrb	r3, [r3, #8]
   a000a:	76fb      	strb	r3, [r7, #27]
				
				if(Cl_ConsoleRxMsg.data.byte[0] == 1)
   a000c:	4b28      	ldr	r3, [pc, #160]	; (a00b0 <Cl_dprep_controller+0x398>)
   a000e:	791b      	ldrb	r3, [r3, #4]
   a0010:	2b01      	cmp	r3, #1
   a0012:	d104      	bne.n	a001e <Cl_dprep_controller+0x306>
				{
					cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
   a0014:	2001      	movs	r0, #1
   a0016:	2100      	movs	r1, #0
   a0018:	4b27      	ldr	r3, [pc, #156]	; (a00b8 <Cl_dprep_controller+0x3a0>)
   a001a:	4798      	blx	r3
   a001c:	e013      	b.n	a0046 <Cl_dprep_controller+0x32e>
					
				}
				else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
   a001e:	4b24      	ldr	r3, [pc, #144]	; (a00b0 <Cl_dprep_controller+0x398>)
   a0020:	791b      	ldrb	r3, [r3, #4]
   a0022:	2b02      	cmp	r3, #2
   a0024:	d104      	bne.n	a0030 <Cl_dprep_controller+0x318>
				{
					cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
   a0026:	2004      	movs	r0, #4
   a0028:	2100      	movs	r1, #0
   a002a:	4b23      	ldr	r3, [pc, #140]	; (a00b8 <Cl_dprep_controller+0x3a0>)
   a002c:	4798      	blx	r3
   a002e:	e00a      	b.n	a0046 <Cl_dprep_controller+0x32e>
				}
				else if(Cl_ConsoleRxMsg.data.byte[0] == 0)
   a0030:	4b1f      	ldr	r3, [pc, #124]	; (a00b0 <Cl_dprep_controller+0x398>)
   a0032:	791b      	ldrb	r3, [r3, #4]
   a0034:	2b00      	cmp	r3, #0
   a0036:	d106      	bne.n	a0046 <Cl_dprep_controller+0x32e>
				{
					cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,Treatdata[ID_heprate]);
   a0038:	4b1e      	ldr	r3, [pc, #120]	; (a00b4 <Cl_dprep_controller+0x39c>)
   a003a:	69db      	ldr	r3, [r3, #28]
   a003c:	200b      	movs	r0, #11
   a003e:	4619      	mov	r1, r3
   a0040:	4b1d      	ldr	r3, [pc, #116]	; (a00b8 <Cl_dprep_controller+0x3a0>)
   a0042:	4798      	blx	r3
				}
				
			}
			
			
			break;
   a0044:	e098      	b.n	a0178 <Cl_dprep_controller+0x460>
   a0046:	e097      	b.n	a0178 <Cl_dprep_controller+0x460>
			case EVENT_DPREP_HEP_PMP_STOP:
			cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
   a0048:	2009      	movs	r0, #9
   a004a:	2100      	movs	r1, #0
   a004c:	4b1a      	ldr	r3, [pc, #104]	; (a00b8 <Cl_dprep_controller+0x3a0>)
   a004e:	4798      	blx	r3
			break;
   a0050:	e092      	b.n	a0178 <Cl_dprep_controller+0x460>
			case EVENT_HEAPARIN_BOLUS:
			cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
   a0052:	2007      	movs	r0, #7
   a0054:	2100      	movs	r1, #0
   a0056:	4b18      	ldr	r3, [pc, #96]	; (a00b8 <Cl_dprep_controller+0x3a0>)
   a0058:	4798      	blx	r3
			break;
   a005a:	e08d      	b.n	a0178 <Cl_dprep_controller+0x460>
// 		break;
// 		case EVENT_HEAPARIN_BOLUS:
// 		break;
		case EVENT_DPREP_HEP_PMP_RATE:
		
		if(Cl_ConsoleRxMsg.msgready == true)
   a005c:	4b14      	ldr	r3, [pc, #80]	; (a00b0 <Cl_dprep_controller+0x398>)
   a005e:	7e1b      	ldrb	r3, [r3, #24]
   a0060:	2b00      	cmp	r3, #0
   a0062:	d016      	beq.n	a0092 <Cl_dprep_controller+0x37a>
		{
			
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a0064:	4b12      	ldr	r3, [pc, #72]	; (a00b0 <Cl_dprep_controller+0x398>)
   a0066:	791b      	ldrb	r3, [r3, #4]
   a0068:	753b      	strb	r3, [r7, #20]
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   a006a:	4b11      	ldr	r3, [pc, #68]	; (a00b0 <Cl_dprep_controller+0x398>)
   a006c:	795b      	ldrb	r3, [r3, #5]
   a006e:	757b      	strb	r3, [r7, #21]
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   a0070:	4b0f      	ldr	r3, [pc, #60]	; (a00b0 <Cl_dprep_controller+0x398>)
   a0072:	799b      	ldrb	r3, [r3, #6]
   a0074:	75bb      	strb	r3, [r7, #22]
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   a0076:	4b0e      	ldr	r3, [pc, #56]	; (a00b0 <Cl_dprep_controller+0x398>)
   a0078:	79db      	ldrb	r3, [r3, #7]
   a007a:	75fb      	strb	r3, [r7, #23]
			Treatdata[ID_heprate] = cl_temp.Twobyte;
   a007c:	8abb      	ldrh	r3, [r7, #20]
   a007e:	461a      	mov	r2, r3
   a0080:	4b0c      	ldr	r3, [pc, #48]	; (a00b4 <Cl_dprep_controller+0x39c>)
   a0082:	61da      	str	r2, [r3, #28]
			//	hep_calibration(Treatdata[ID_heprate]);
			cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,Treatdata[ID_heprate]);
   a0084:	4b0b      	ldr	r3, [pc, #44]	; (a00b4 <Cl_dprep_controller+0x39c>)
   a0086:	69db      	ldr	r3, [r3, #28]
   a0088:	2006      	movs	r0, #6
   a008a:	4619      	mov	r1, r3
   a008c:	4b0a      	ldr	r3, [pc, #40]	; (a00b8 <Cl_dprep_controller+0x3a0>)
   a008e:	4798      	blx	r3
		}
		
		break;
   a0090:	e072      	b.n	a0178 <Cl_dprep_controller+0x460>
   a0092:	e071      	b.n	a0178 <Cl_dprep_controller+0x460>
   a0094:	000a180d 	.word	0x000a180d
   a0098:	20071dcf 	.word	0x20071dcf
   a009c:	2007287b 	.word	0x2007287b
   a00a0:	00082a35 	.word	0x00082a35
   a00a4:	00094325 	.word	0x00094325
   a00a8:	00082c75 	.word	0x00082c75
   a00ac:	0009b6c1 	.word	0x0009b6c1
   a00b0:	200725bc 	.word	0x200725bc
   a00b4:	20072880 	.word	0x20072880
   a00b8:	00094b61 	.word	0x00094b61
		
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		
		if(Treatdata[ID_bloodrate] <= 450){
   a00bc:	4bbe      	ldr	r3, [pc, #760]	; (a03b8 <Cl_dprep_controller+0x6a0>)
   a00be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a00c0:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
   a00c4:	d828      	bhi.n	a0118 <Cl_dprep_controller+0x400>
			
			Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] + 10;
   a00c6:	4bbc      	ldr	r3, [pc, #752]	; (a03b8 <Cl_dprep_controller+0x6a0>)
   a00c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a00ca:	330a      	adds	r3, #10
   a00cc:	4aba      	ldr	r2, [pc, #744]	; (a03b8 <Cl_dprep_controller+0x6a0>)
   a00ce:	63d3      	str	r3, [r2, #60]	; 0x3c
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   a00d0:	4bb9      	ldr	r3, [pc, #740]	; (a03b8 <Cl_dprep_controller+0x6a0>)
   a00d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a00d4:	2001      	movs	r0, #1
   a00d6:	4619      	mov	r1, r3
   a00d8:	4bb8      	ldr	r3, [pc, #736]	; (a03bc <Cl_dprep_controller+0x6a4>)
   a00da:	4798      	blx	r3
			
			// send blood rate data to console
			
			
			abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   a00dc:	230f      	movs	r3, #15
   a00de:	f887 3020 	strb.w	r3, [r7, #32]
			abfdata.fourbytedata = Treatdata[ID_bloodrate];
   a00e2:	4bb5      	ldr	r3, [pc, #724]	; (a03b8 <Cl_dprep_controller+0x6a0>)
   a00e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a00e6:	62bb      	str	r3, [r7, #40]	; 0x28
			abfdataarray[1] = abfdata.bytedata[0];
   a00e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   a00ec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			abfdataarray[2] = abfdata.bytedata[1];
   a00f0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
   a00f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			abfdataarray[3] = abfdata.bytedata[2];
   a00f8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   a00fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			abfdataarray[4] = abfdata.bytedata[3];
   a0100:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   a0104:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   a0108:	f107 0320 	add.w	r3, r7, #32
   a010c:	202a      	movs	r0, #42	; 0x2a
   a010e:	4619      	mov	r1, r3
   a0110:	2205      	movs	r2, #5
   a0112:	4bab      	ldr	r3, [pc, #684]	; (a03c0 <Cl_dprep_controller+0x6a8>)
   a0114:	4798      	blx	r3
			
		}
		
		cl_dprepevent == EVENT_DPREP_EVENT_NULL;
		break;
   a0116:	e02f      	b.n	a0178 <Cl_dprep_controller+0x460>
   a0118:	e02e      	b.n	a0178 <Cl_dprep_controller+0x460>
		
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		
		if(Treatdata[ID_bloodrate] >= 100){
   a011a:	4ba7      	ldr	r3, [pc, #668]	; (a03b8 <Cl_dprep_controller+0x6a0>)
   a011c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a011e:	2b63      	cmp	r3, #99	; 0x63
   a0120:	d928      	bls.n	a0174 <Cl_dprep_controller+0x45c>
			
			Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] - 10;
   a0122:	4ba5      	ldr	r3, [pc, #660]	; (a03b8 <Cl_dprep_controller+0x6a0>)
   a0124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a0126:	3b0a      	subs	r3, #10
   a0128:	4aa3      	ldr	r2, [pc, #652]	; (a03b8 <Cl_dprep_controller+0x6a0>)
   a012a:	63d3      	str	r3, [r2, #60]	; 0x3c
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   a012c:	4ba2      	ldr	r3, [pc, #648]	; (a03b8 <Cl_dprep_controller+0x6a0>)
   a012e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a0130:	2001      	movs	r0, #1
   a0132:	4619      	mov	r1, r3
   a0134:	4ba1      	ldr	r3, [pc, #644]	; (a03bc <Cl_dprep_controller+0x6a4>)
   a0136:	4798      	blx	r3
			
			
			abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   a0138:	230f      	movs	r3, #15
   a013a:	f887 3020 	strb.w	r3, [r7, #32]
			abfdata.fourbytedata = Treatdata[ID_bloodrate];
   a013e:	4b9e      	ldr	r3, [pc, #632]	; (a03b8 <Cl_dprep_controller+0x6a0>)
   a0140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a0142:	62bb      	str	r3, [r7, #40]	; 0x28
			abfdataarray[1] = abfdata.bytedata[0];
   a0144:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   a0148:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			abfdataarray[2] = abfdata.bytedata[1];
   a014c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
   a0150:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			abfdataarray[3] = abfdata.bytedata[2];
   a0154:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   a0158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			abfdataarray[4] = abfdata.bytedata[3];
   a015c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   a0160:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   a0164:	f107 0320 	add.w	r3, r7, #32
   a0168:	202a      	movs	r0, #42	; 0x2a
   a016a:	4619      	mov	r1, r3
   a016c:	2205      	movs	r2, #5
   a016e:	4b94      	ldr	r3, [pc, #592]	; (a03c0 <Cl_dprep_controller+0x6a8>)
   a0170:	4798      	blx	r3
		}
		
		cl_dprepevent == EVENT_DPREP_EVENT_NULL;
		break;
   a0172:	e001      	b.n	a0178 <Cl_dprep_controller+0x460>
   a0174:	e000      	b.n	a0178 <Cl_dprep_controller+0x460>
		

		default:break;
   a0176:	bf00      	nop
		
	}
	if(cl_dprepevent == EVENT_DPREP_TICK_SECOND)
   a0178:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
   a017c:	2b16      	cmp	r3, #22
   a017e:	d105      	bne.n	a018c <Cl_dprep_controller+0x474>
	{

		//Cl_dprepretcode =  Cl_AlarmResetAlarm( SENSOR_TEMP3STATUS );
		//Cl_dprepretcode =  Cl_AlarmResetAlarm( SENSOR_TEMP2STATUS );
		Cl_dprepretcode =  Cl_AlarmResetAlarm( FLOW_NO_FLOW );
   a0180:	200c      	movs	r0, #12
   a0182:	4b90      	ldr	r3, [pc, #576]	; (a03c4 <Cl_dprep_controller+0x6ac>)
   a0184:	4798      	blx	r3
   a0186:	4603      	mov	r3, r0
   a0188:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		//	Cl_rinseretcode =  Cl_AlarmResetAlarm( FLOWSTATUS_FLOWOFF );
	}


 	switch(cl_dprepstate)
   a018c:	4b8e      	ldr	r3, [pc, #568]	; (a03c8 <Cl_dprep_controller+0x6b0>)
   a018e:	781b      	ldrb	r3, [r3, #0]
   a0190:	2b0e      	cmp	r3, #14
   a0192:	f201 8315 	bhi.w	a17c0 <Cl_dprep_controller+0x1aa8>
   a0196:	a201      	add	r2, pc, #4	; (adr r2, a019c <Cl_dprep_controller+0x484>)
   a0198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a019c:	000a01d9 	.word	0x000a01d9
   a01a0:	000a17c1 	.word	0x000a17c1
   a01a4:	000a0459 	.word	0x000a0459
   a01a8:	000a0b95 	.word	0x000a0b95
   a01ac:	000a17c1 	.word	0x000a17c1
   a01b0:	000a0fa5 	.word	0x000a0fa5
   a01b4:	000a1287 	.word	0x000a1287
   a01b8:	000a14c7 	.word	0x000a14c7
   a01bc:	000a1575 	.word	0x000a1575
   a01c0:	000a1743 	.word	0x000a1743
   a01c4:	000a17c1 	.word	0x000a17c1
   a01c8:	000a01d9 	.word	0x000a01d9
   a01cc:	000a0a2d 	.word	0x000a0a2d
   a01d0:	000a093f 	.word	0x000a093f
   a01d4:	000a0dab 	.word	0x000a0dab

		case CL_DPREP_STATE_INIT:
		break;
		case CL_DPREP_STATE_IDLE:
		case CL_DPREP_STATE_STOPPED:
		switch (cl_dprepevent)
   a01d8:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
   a01dc:	3b01      	subs	r3, #1
   a01de:	2b1e      	cmp	r3, #30
   a01e0:	f200 8137 	bhi.w	a0452 <Cl_dprep_controller+0x73a>
   a01e4:	a201      	add	r2, pc, #4	; (adr r2, a01ec <Cl_dprep_controller+0x4d4>)
   a01e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a01ea:	bf00      	nop
   a01ec:	000a0269 	.word	0x000a0269
   a01f0:	000a039d 	.word	0x000a039d
   a01f4:	000a0453 	.word	0x000a0453
   a01f8:	000a0311 	.word	0x000a0311
   a01fc:	000a0453 	.word	0x000a0453
   a0200:	000a0453 	.word	0x000a0453
   a0204:	000a0453 	.word	0x000a0453
   a0208:	000a0453 	.word	0x000a0453
   a020c:	000a0453 	.word	0x000a0453
   a0210:	000a042b 	.word	0x000a042b
   a0214:	000a0453 	.word	0x000a0453
   a0218:	000a0453 	.word	0x000a0453
   a021c:	000a0453 	.word	0x000a0453
   a0220:	000a0453 	.word	0x000a0453
   a0224:	000a0453 	.word	0x000a0453
   a0228:	000a0453 	.word	0x000a0453
   a022c:	000a0453 	.word	0x000a0453
   a0230:	000a0453 	.word	0x000a0453
   a0234:	000a0453 	.word	0x000a0453
   a0238:	000a0453 	.word	0x000a0453
   a023c:	000a0453 	.word	0x000a0453
   a0240:	000a0453 	.word	0x000a0453
   a0244:	000a0453 	.word	0x000a0453
   a0248:	000a0453 	.word	0x000a0453
   a024c:	000a041f 	.word	0x000a041f
   a0250:	000a0453 	.word	0x000a0453
   a0254:	000a0453 	.word	0x000a0453
   a0258:	000a0453 	.word	0x000a0453
   a025c:	000a0405 	.word	0x000a0405
   a0260:	000a0453 	.word	0x000a0453
   a0264:	000a02dd 	.word	0x000a02dd
		{
			
				case EVENT_DPREP_CLR_ALARM:             // manav03 added
								
								if(powerFailureFlag == 1){
   a0268:	4b58      	ldr	r3, [pc, #352]	; (a03cc <Cl_dprep_controller+0x6b4>)
   a026a:	681b      	ldr	r3, [r3, #0]
   a026c:	2b01      	cmp	r3, #1
   a026e:	d11f      	bne.n	a02b0 <Cl_dprep_controller+0x598>
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_POWER_FAILURE,&dprep_powerFailSensorData);
   a0270:	2024      	movs	r0, #36	; 0x24
   a0272:	4957      	ldr	r1, [pc, #348]	; (a03d0 <Cl_dprep_controller+0x6b8>)
   a0274:	4b57      	ldr	r3, [pc, #348]	; (a03d4 <Cl_dprep_controller+0x6bc>)
   a0276:	4798      	blx	r3
					
								if(dprep_powerFailSensorData == 0){
   a0278:	4b55      	ldr	r3, [pc, #340]	; (a03d0 <Cl_dprep_controller+0x6b8>)
   a027a:	881b      	ldrh	r3, [r3, #0]
   a027c:	2b00      	cmp	r3, #0
   a027e:	d12c      	bne.n	a02da <Cl_dprep_controller+0x5c2>
						
						powerFailureFlag = 0;
   a0280:	4b52      	ldr	r3, [pc, #328]	; (a03cc <Cl_dprep_controller+0x6b4>)
   a0282:	2200      	movs	r2, #0
   a0284:	601a      	str	r2, [r3, #0]
						command = CON_TX_COMMAND_ALARM_CLEARED;
   a0286:	2351      	movs	r3, #81	; 0x51
   a0288:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
							Cl_SendDatatoconsole(command,&data,0);
   a028c:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
   a0290:	f107 0370 	add.w	r3, r7, #112	; 0x70
   a0294:	4610      	mov	r0, r2
   a0296:	4619      	mov	r1, r3
   a0298:	2200      	movs	r2, #0
   a029a:	4b49      	ldr	r3, [pc, #292]	; (a03c0 <Cl_dprep_controller+0x6a8>)
   a029c:	4798      	blx	r3
							sv_cntrl_resetyellowalarm();
   a029e:	4b4e      	ldr	r3, [pc, #312]	; (a03d8 <Cl_dprep_controller+0x6c0>)
   a02a0:	4798      	blx	r3
							sv_cntrl_resetredalarm();
   a02a2:	4b4e      	ldr	r3, [pc, #312]	; (a03dc <Cl_dprep_controller+0x6c4>)
   a02a4:	4798      	blx	r3
							sv_cntrl_nobuzzer();
   a02a6:	4b4e      	ldr	r3, [pc, #312]	; (a03e0 <Cl_dprep_controller+0x6c8>)
   a02a8:	4798      	blx	r3
							Cl_Dprep_ResetAlertsforReassertion();
   a02aa:	4b4e      	ldr	r3, [pc, #312]	; (a03e4 <Cl_dprep_controller+0x6cc>)
   a02ac:	4798      	blx	r3
										sv_cntrl_resetyellowalarm();
										sv_cntrl_resetredalarm();
										sv_cntrl_nobuzzer();
										Cl_Dprep_ResetAlertsforReassertion();
					}
								break;
   a02ae:	e0d1      	b.n	a0454 <Cl_dprep_controller+0x73c>
							Cl_Dprep_ResetAlertsforReassertion();
					}
					}
					else{			
								
								command = CON_TX_COMMAND_ALARM_CLEARED;
   a02b0:	2351      	movs	r3, #81	; 0x51
   a02b2:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
							    Cl_SendDatatoconsole(command,&data,0);
   a02b6:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
   a02ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
   a02be:	4610      	mov	r0, r2
   a02c0:	4619      	mov	r1, r3
   a02c2:	2200      	movs	r2, #0
   a02c4:	4b3e      	ldr	r3, [pc, #248]	; (a03c0 <Cl_dprep_controller+0x6a8>)
   a02c6:	4798      	blx	r3
							
					
										sv_cntrl_resetyellowalarm();
   a02c8:	4b43      	ldr	r3, [pc, #268]	; (a03d8 <Cl_dprep_controller+0x6c0>)
   a02ca:	4798      	blx	r3
										sv_cntrl_resetredalarm();
   a02cc:	4b43      	ldr	r3, [pc, #268]	; (a03dc <Cl_dprep_controller+0x6c4>)
   a02ce:	4798      	blx	r3
										sv_cntrl_nobuzzer();
   a02d0:	4b43      	ldr	r3, [pc, #268]	; (a03e0 <Cl_dprep_controller+0x6c8>)
   a02d2:	4798      	blx	r3
										Cl_Dprep_ResetAlertsforReassertion();
   a02d4:	4b43      	ldr	r3, [pc, #268]	; (a03e4 <Cl_dprep_controller+0x6cc>)
   a02d6:	4798      	blx	r3
					}
								break;
   a02d8:	e0bc      	b.n	a0454 <Cl_dprep_controller+0x73c>
   a02da:	e0bb      	b.n	a0454 <Cl_dprep_controller+0x73c>
			
			case EVENT_DPREP_START_RECIRC:
						if((cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING) || (cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED) || (cl_dprep_prime_state !=  CL_DPREP_PRIME_STATE_DIALYSER_PRIMING))
   a02dc:	4b42      	ldr	r3, [pc, #264]	; (a03e8 <Cl_dprep_controller+0x6d0>)
   a02de:	781b      	ldrb	r3, [r3, #0]
   a02e0:	2b01      	cmp	r3, #1
   a02e2:	d107      	bne.n	a02f4 <Cl_dprep_controller+0x5dc>
   a02e4:	4b40      	ldr	r3, [pc, #256]	; (a03e8 <Cl_dprep_controller+0x6d0>)
   a02e6:	781b      	ldrb	r3, [r3, #0]
   a02e8:	2b05      	cmp	r3, #5
   a02ea:	d103      	bne.n	a02f4 <Cl_dprep_controller+0x5dc>
   a02ec:	4b3e      	ldr	r3, [pc, #248]	; (a03e8 <Cl_dprep_controller+0x6d0>)
   a02ee:	781b      	ldrb	r3, [r3, #0]
   a02f0:	2b09      	cmp	r3, #9
   a02f2:	d00c      	beq.n	a030e <Cl_dprep_controller+0x5f6>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   a02f4:	2018      	movs	r0, #24
   a02f6:	493d      	ldr	r1, [pc, #244]	; (a03ec <Cl_dprep_controller+0x6d4>)
   a02f8:	2206      	movs	r2, #6
   a02fa:	4b31      	ldr	r3, [pc, #196]	; (a03c0 <Cl_dprep_controller+0x6a8>)
   a02fc:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   a02fe:	2005      	movs	r0, #5
   a0300:	2100      	movs	r1, #0
   a0302:	4b3b      	ldr	r3, [pc, #236]	; (a03f0 <Cl_dprep_controller+0x6d8>)
   a0304:	4798      	blx	r3
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a0306:	4b3b      	ldr	r3, [pc, #236]	; (a03f4 <Cl_dprep_controller+0x6dc>)
   a0308:	2200      	movs	r2, #0
   a030a:	70da      	strb	r2, [r3, #3]
						}
				break;
   a030c:	e0a2      	b.n	a0454 <Cl_dprep_controller+0x73c>
   a030e:	e0a1      	b.n	a0454 <Cl_dprep_controller+0x73c>
			case EVENT_DPREP_COMMAND_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   a0310:	4b39      	ldr	r3, [pc, #228]	; (a03f8 <Cl_dprep_controller+0x6e0>)
   a0312:	7e1b      	ldrb	r3, [r3, #24]
   a0314:	2b00      	cmp	r3, #0
   a0316:	d040      	beq.n	a039a <Cl_dprep_controller+0x682>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   a0318:	4b37      	ldr	r3, [pc, #220]	; (a03f8 <Cl_dprep_controller+0x6e0>)
   a031a:	791b      	ldrb	r3, [r3, #4]
   a031c:	2b02      	cmp	r3, #2
   a031e:	d002      	beq.n	a0326 <Cl_dprep_controller+0x60e>
   a0320:	2b04      	cmp	r3, #4
   a0322:	d01d      	beq.n	a0360 <Cl_dprep_controller+0x648>
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;
						default:
						break;
   a0324:	e039      	b.n	a039a <Cl_dprep_controller+0x682>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_PRIME_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   a0326:	2316      	movs	r3, #22
   a0328:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   a032c:	2302      	movs	r3, #2
   a032e:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   a0332:	f107 036c 	add.w	r3, r7, #108	; 0x6c
   a0336:	3301      	adds	r3, #1
   a0338:	2002      	movs	r0, #2
   a033a:	4619      	mov	r1, r3
   a033c:	4b2f      	ldr	r3, [pc, #188]	; (a03fc <Cl_dprep_controller+0x6e4>)
   a033e:	4798      	blx	r3
   a0340:	4603      	mov	r3, r0
   a0342:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a0346:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
   a034a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
   a034e:	4610      	mov	r0, r2
   a0350:	4619      	mov	r1, r3
   a0352:	2202      	movs	r2, #2
   a0354:	4b1a      	ldr	r3, [pc, #104]	; (a03c0 <Cl_dprep_controller+0x6a8>)
   a0356:	4798      	blx	r3
   a0358:	4603      	mov	r3, r0
   a035a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						break;
   a035e:	e01c      	b.n	a039a <Cl_dprep_controller+0x682>
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   a0360:	2316      	movs	r3, #22
   a0362:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   a0366:	2304      	movs	r3, #4
   a0368:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   a036c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
   a0370:	3301      	adds	r3, #1
   a0372:	2004      	movs	r0, #4
   a0374:	4619      	mov	r1, r3
   a0376:	4b21      	ldr	r3, [pc, #132]	; (a03fc <Cl_dprep_controller+0x6e4>)
   a0378:	4798      	blx	r3
   a037a:	4603      	mov	r3, r0
   a037c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a0380:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
   a0384:	f107 036c 	add.w	r3, r7, #108	; 0x6c
   a0388:	4610      	mov	r0, r2
   a038a:	4619      	mov	r1, r3
   a038c:	2202      	movs	r2, #2
   a038e:	4b0c      	ldr	r3, [pc, #48]	; (a03c0 <Cl_dprep_controller+0x6a8>)
   a0390:	4798      	blx	r3
   a0392:	4603      	mov	r3, r0
   a0394:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						break;
   a0398:	bf00      	nop
						default:
						break;
					}
				}
			break;
   a039a:	e05b      	b.n	a0454 <Cl_dprep_controller+0x73c>
						
	
			break;   */
			case EVENT_DPREP_DIALYSIS_PREP:
			
			Cl_dprepretcode = Cl_Dprep_StartPreparation();
   a039c:	4b18      	ldr	r3, [pc, #96]	; (a0400 <Cl_dprep_controller+0x6e8>)
   a039e:	4798      	blx	r3
   a03a0:	4603      	mov	r3, r0
   a03a2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			if(Cl_dprepretcode == CL_REJECTED)
   a03a6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   a03aa:	2b03      	cmp	r3, #3
   a03ac:	d102      	bne.n	a03b4 <Cl_dprep_controller+0x69c>
			{
				return CL_OK;//Cl_dprepretcode;   // manav03 added
   a03ae:	2300      	movs	r3, #0
   a03b0:	f001 ba08 	b.w	a17c4 <Cl_dprep_controller+0x1aac>
			}
			break;
   a03b4:	e04e      	b.n	a0454 <Cl_dprep_controller+0x73c>
   a03b6:	bf00      	nop
   a03b8:	20072880 	.word	0x20072880
   a03bc:	00094325 	.word	0x00094325
   a03c0:	0009d1e9 	.word	0x0009d1e9
   a03c4:	00082b25 	.word	0x00082b25
   a03c8:	20071dcf 	.word	0x20071dcf
   a03cc:	20071d84 	.word	0x20071d84
   a03d0:	20071d88 	.word	0x20071d88
   a03d4:	0008fd69 	.word	0x0008fd69
   a03d8:	0009b699 	.word	0x0009b699
   a03dc:	0009b685 	.word	0x0009b685
   a03e0:	0009b6c1 	.word	0x0009b6c1
   a03e4:	000a2835 	.word	0x000a2835
   a03e8:	20071aa4 	.word	0x20071aa4
   a03ec:	000aa690 	.word	0x000aa690
   a03f0:	000880c1 	.word	0x000880c1
   a03f4:	20070d94 	.word	0x20070d94
   a03f8:	200725bc 	.word	0x200725bc
   a03fc:	0009bcdd 	.word	0x0009bcdd
   a0400:	000a341d 	.word	0x000a341d
			case EVENT_DPREP_MIXING_PREP_START:
			Cl_dprepretcode = Cl_Dprep_StartPreparation();
   a0404:	4ba8      	ldr	r3, [pc, #672]	; (a06a8 <Cl_dprep_controller+0x990>)
   a0406:	4798      	blx	r3
   a0408:	4603      	mov	r3, r0
   a040a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			if(Cl_dprepretcode == CL_REJECTED)
   a040e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   a0412:	2b03      	cmp	r3, #3
   a0414:	d102      	bne.n	a041c <Cl_dprep_controller+0x704>
			{
				return CL_OK;//Cl_dprepretcode;   // // manav03 added
   a0416:	2300      	movs	r3, #0
   a0418:	f001 b9d4 	b.w	a17c4 <Cl_dprep_controller+0x1aac>
			}
			break;
   a041c:	e01a      	b.n	a0454 <Cl_dprep_controller+0x73c>
			case EVENT_DPREP_ALARM:
			Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   a041e:	4ba3      	ldr	r3, [pc, #652]	; (a06ac <Cl_dprep_controller+0x994>)
   a0420:	4798      	blx	r3
   a0422:	4603      	mov	r3, r0
   a0424:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			break;
   a0428:	e014      	b.n	a0454 <Cl_dprep_controller+0x73c>
			case EVENT_DPREP_START_PRIME:
			if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   a042a:	4ba1      	ldr	r3, [pc, #644]	; (a06b0 <Cl_dprep_controller+0x998>)
   a042c:	781b      	ldrb	r3, [r3, #0]
   a042e:	2b01      	cmp	r3, #1
   a0430:	d00e      	beq.n	a0450 <Cl_dprep_controller+0x738>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   a0432:	2018      	movs	r0, #24
   a0434:	499f      	ldr	r1, [pc, #636]	; (a06b4 <Cl_dprep_controller+0x99c>)
   a0436:	2206      	movs	r2, #6
   a0438:	4b9f      	ldr	r3, [pc, #636]	; (a06b8 <Cl_dprep_controller+0x9a0>)
   a043a:	4798      	blx	r3
				cl_dprep_activate_prime_related_alarms();
   a043c:	4b9f      	ldr	r3, [pc, #636]	; (a06bc <Cl_dprep_controller+0x9a4>)
   a043e:	4798      	blx	r3
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   a0440:	2001      	movs	r0, #1
   a0442:	2100      	movs	r1, #0
   a0444:	4b9e      	ldr	r3, [pc, #632]	; (a06c0 <Cl_dprep_controller+0x9a8>)
   a0446:	4798      	blx	r3
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a0448:	4b9e      	ldr	r3, [pc, #632]	; (a06c4 <Cl_dprep_controller+0x9ac>)
   a044a:	2200      	movs	r2, #0
   a044c:	70da      	strb	r2, [r3, #3]
			}
			
			break;
   a044e:	e001      	b.n	a0454 <Cl_dprep_controller+0x73c>
   a0450:	e000      	b.n	a0454 <Cl_dprep_controller+0x73c>
			default:
			break;
   a0452:	bf00      	nop
		}
		break;
   a0454:	f001 b9b4 	b.w	a17c0 <Cl_dprep_controller+0x1aa8>
		case CL_DPREP_STATE_DPREP_FILLING:
		switch (cl_dprepevent)
   a0458:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
   a045c:	3b01      	subs	r3, #1
   a045e:	2b22      	cmp	r3, #34	; 0x22
   a0460:	f201 81a7 	bhi.w	a17b2 <Cl_dprep_controller+0x1a9a>
   a0464:	a201      	add	r2, pc, #4	; (adr r2, a046c <Cl_dprep_controller+0x754>)
   a0466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a046a:	bf00      	nop
   a046c:	000a08c5 	.word	0x000a08c5
   a0470:	000a17b3 	.word	0x000a17b3
   a0474:	000a0625 	.word	0x000a0625
   a0478:	000a0599 	.word	0x000a0599
   a047c:	000a17b3 	.word	0x000a17b3
   a0480:	000a17b3 	.word	0x000a17b3
   a0484:	000a17b3 	.word	0x000a17b3
   a0488:	000a17b3 	.word	0x000a17b3
   a048c:	000a0855 	.word	0x000a0855
   a0490:	000a08a1 	.word	0x000a08a1
   a0494:	000a17b3 	.word	0x000a17b3
   a0498:	000a17b3 	.word	0x000a17b3
   a049c:	000a17b3 	.word	0x000a17b3
   a04a0:	000a17b3 	.word	0x000a17b3
   a04a4:	000a17b3 	.word	0x000a17b3
   a04a8:	000a17b3 	.word	0x000a17b3
   a04ac:	000a17b3 	.word	0x000a17b3
   a04b0:	000a17b3 	.word	0x000a17b3
   a04b4:	000a0689 	.word	0x000a0689
   a04b8:	000a17b3 	.word	0x000a17b3
   a04bc:	000a0939 	.word	0x000a0939
   a04c0:	000a0777 	.word	0x000a0777
   a04c4:	000a06e1 	.word	0x000a06e1
   a04c8:	000a17b3 	.word	0x000a17b3
   a04cc:	000a0861 	.word	0x000a0861
   a04d0:	000a086d 	.word	0x000a086d
   a04d4:	000a17b3 	.word	0x000a17b3
   a04d8:	000a17b3 	.word	0x000a17b3
   a04dc:	000a17b3 	.word	0x000a17b3
   a04e0:	000a0855 	.word	0x000a0855
   a04e4:	000a0565 	.word	0x000a0565
   a04e8:	000a17b3 	.word	0x000a17b3
   a04ec:	000a055b 	.word	0x000a055b
   a04f0:	000a04f9 	.word	0x000a04f9
   a04f4:	000a0551 	.word	0x000a0551
		{
			
			case EVENT_DPREP_HEP_PMP_START:
				if(Cl_ConsoleRxMsg.msgready == true)
   a04f8:	4b73      	ldr	r3, [pc, #460]	; (a06c8 <Cl_dprep_controller+0x9b0>)
   a04fa:	7e1b      	ldrb	r3, [r3, #24]
   a04fc:	2b00      	cmp	r3, #0
   a04fe:	d026      	beq.n	a054e <Cl_dprep_controller+0x836>
							
						{
							cl_Datastreamtype cl_temp  ;	
							cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   a0500:	4b71      	ldr	r3, [pc, #452]	; (a06c8 <Cl_dprep_controller+0x9b0>)
   a0502:	795b      	ldrb	r3, [r3, #5]
   a0504:	743b      	strb	r3, [r7, #16]
							cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   a0506:	4b70      	ldr	r3, [pc, #448]	; (a06c8 <Cl_dprep_controller+0x9b0>)
   a0508:	799b      	ldrb	r3, [r3, #6]
   a050a:	747b      	strb	r3, [r7, #17]
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   a050c:	4b6e      	ldr	r3, [pc, #440]	; (a06c8 <Cl_dprep_controller+0x9b0>)
   a050e:	79db      	ldrb	r3, [r3, #7]
   a0510:	74bb      	strb	r3, [r7, #18]
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   a0512:	4b6d      	ldr	r3, [pc, #436]	; (a06c8 <Cl_dprep_controller+0x9b0>)
   a0514:	7a1b      	ldrb	r3, [r3, #8]
   a0516:	74fb      	strb	r3, [r7, #19]
											
							if(Cl_ConsoleRxMsg.data.byte[0] == 1)
   a0518:	4b6b      	ldr	r3, [pc, #428]	; (a06c8 <Cl_dprep_controller+0x9b0>)
   a051a:	791b      	ldrb	r3, [r3, #4]
   a051c:	2b01      	cmp	r3, #1
   a051e:	d104      	bne.n	a052a <Cl_dprep_controller+0x812>
							{
								cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
   a0520:	2001      	movs	r0, #1
   a0522:	2100      	movs	r1, #0
   a0524:	4b69      	ldr	r3, [pc, #420]	; (a06cc <Cl_dprep_controller+0x9b4>)
   a0526:	4798      	blx	r3
   a0528:	e011      	b.n	a054e <Cl_dprep_controller+0x836>
											
							}
							else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
   a052a:	4b67      	ldr	r3, [pc, #412]	; (a06c8 <Cl_dprep_controller+0x9b0>)
   a052c:	791b      	ldrb	r3, [r3, #4]
   a052e:	2b02      	cmp	r3, #2
   a0530:	d104      	bne.n	a053c <Cl_dprep_controller+0x824>
							{
								cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);			
   a0532:	2004      	movs	r0, #4
   a0534:	2100      	movs	r1, #0
   a0536:	4b65      	ldr	r3, [pc, #404]	; (a06cc <Cl_dprep_controller+0x9b4>)
   a0538:	4798      	blx	r3
   a053a:	e008      	b.n	a054e <Cl_dprep_controller+0x836>
							}
							else if(Cl_ConsoleRxMsg.data.byte[0] == 0)
   a053c:	4b62      	ldr	r3, [pc, #392]	; (a06c8 <Cl_dprep_controller+0x9b0>)
   a053e:	791b      	ldrb	r3, [r3, #4]
   a0540:	2b00      	cmp	r3, #0
   a0542:	d104      	bne.n	a054e <Cl_dprep_controller+0x836>
							{
								cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);					
   a0544:	200b      	movs	r0, #11
   a0546:	2100      	movs	r1, #0
   a0548:	4b60      	ldr	r3, [pc, #384]	; (a06cc <Cl_dprep_controller+0x9b4>)
   a054a:	4798      	blx	r3
							}
								
						}
				
			
			break;
   a054c:	e1f5      	b.n	a093a <Cl_dprep_controller+0xc22>
   a054e:	e1f4      	b.n	a093a <Cl_dprep_controller+0xc22>
			case EVENT_DPREP_HEP_PMP_STOP:
			cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
   a0550:	200d      	movs	r0, #13
   a0552:	2100      	movs	r1, #0
   a0554:	4b5d      	ldr	r3, [pc, #372]	; (a06cc <Cl_dprep_controller+0x9b4>)
   a0556:	4798      	blx	r3
			break;
   a0558:	e1ef      	b.n	a093a <Cl_dprep_controller+0xc22>
			case EVENT_HEAPARIN_BOLUS:		
			cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
   a055a:	2007      	movs	r0, #7
   a055c:	2100      	movs	r1, #0
   a055e:	4b5b      	ldr	r3, [pc, #364]	; (a06cc <Cl_dprep_controller+0x9b4>)
   a0560:	4798      	blx	r3
			break;
   a0562:	e1ea      	b.n	a093a <Cl_dprep_controller+0xc22>

			case EVENT_DPREP_START_RECIRC:
						if((cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING) || (cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED) || (cl_dprep_prime_state !=  CL_DPREP_PRIME_STATE_DIALYSER_PRIMING))
   a0564:	4b52      	ldr	r3, [pc, #328]	; (a06b0 <Cl_dprep_controller+0x998>)
   a0566:	781b      	ldrb	r3, [r3, #0]
   a0568:	2b01      	cmp	r3, #1
   a056a:	d107      	bne.n	a057c <Cl_dprep_controller+0x864>
   a056c:	4b50      	ldr	r3, [pc, #320]	; (a06b0 <Cl_dprep_controller+0x998>)
   a056e:	781b      	ldrb	r3, [r3, #0]
   a0570:	2b05      	cmp	r3, #5
   a0572:	d103      	bne.n	a057c <Cl_dprep_controller+0x864>
   a0574:	4b4e      	ldr	r3, [pc, #312]	; (a06b0 <Cl_dprep_controller+0x998>)
   a0576:	781b      	ldrb	r3, [r3, #0]
   a0578:	2b09      	cmp	r3, #9
   a057a:	d00c      	beq.n	a0596 <Cl_dprep_controller+0x87e>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   a057c:	2018      	movs	r0, #24
   a057e:	4954      	ldr	r1, [pc, #336]	; (a06d0 <Cl_dprep_controller+0x9b8>)
   a0580:	2206      	movs	r2, #6
   a0582:	4b4d      	ldr	r3, [pc, #308]	; (a06b8 <Cl_dprep_controller+0x9a0>)
   a0584:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   a0586:	2005      	movs	r0, #5
   a0588:	2100      	movs	r1, #0
   a058a:	4b4d      	ldr	r3, [pc, #308]	; (a06c0 <Cl_dprep_controller+0x9a8>)
   a058c:	4798      	blx	r3
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a058e:	4b4d      	ldr	r3, [pc, #308]	; (a06c4 <Cl_dprep_controller+0x9ac>)
   a0590:	2200      	movs	r2, #0
   a0592:	70da      	strb	r2, [r3, #3]
						}
			break;
   a0594:	e1d1      	b.n	a093a <Cl_dprep_controller+0xc22>
   a0596:	e1d0      	b.n	a093a <Cl_dprep_controller+0xc22>
			case EVENT_DPREP_COMMAND_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   a0598:	4b4b      	ldr	r3, [pc, #300]	; (a06c8 <Cl_dprep_controller+0x9b0>)
   a059a:	7e1b      	ldrb	r3, [r3, #24]
   a059c:	2b00      	cmp	r3, #0
   a059e:	d040      	beq.n	a0622 <Cl_dprep_controller+0x90a>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   a05a0:	4b49      	ldr	r3, [pc, #292]	; (a06c8 <Cl_dprep_controller+0x9b0>)
   a05a2:	791b      	ldrb	r3, [r3, #4]
   a05a4:	2b02      	cmp	r3, #2
   a05a6:	d002      	beq.n	a05ae <Cl_dprep_controller+0x896>
   a05a8:	2b04      	cmp	r3, #4
   a05aa:	d01d      	beq.n	a05e8 <Cl_dprep_controller+0x8d0>
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;
						default:
						break;
   a05ac:	e039      	b.n	a0622 <Cl_dprep_controller+0x90a>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_PRIME_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   a05ae:	2316      	movs	r3, #22
   a05b0:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   a05b4:	2302      	movs	r3, #2
   a05b6:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   a05ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
   a05be:	3301      	adds	r3, #1
   a05c0:	2002      	movs	r0, #2
   a05c2:	4619      	mov	r1, r3
   a05c4:	4b43      	ldr	r3, [pc, #268]	; (a06d4 <Cl_dprep_controller+0x9bc>)
   a05c6:	4798      	blx	r3
   a05c8:	4603      	mov	r3, r0
   a05ca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a05ce:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
   a05d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
   a05d6:	4610      	mov	r0, r2
   a05d8:	4619      	mov	r1, r3
   a05da:	2202      	movs	r2, #2
   a05dc:	4b36      	ldr	r3, [pc, #216]	; (a06b8 <Cl_dprep_controller+0x9a0>)
   a05de:	4798      	blx	r3
   a05e0:	4603      	mov	r3, r0
   a05e2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						break;
   a05e6:	e01c      	b.n	a0622 <Cl_dprep_controller+0x90a>
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   a05e8:	2316      	movs	r3, #22
   a05ea:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   a05ee:	2304      	movs	r3, #4
   a05f0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   a05f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
   a05f8:	3301      	adds	r3, #1
   a05fa:	2004      	movs	r0, #4
   a05fc:	4619      	mov	r1, r3
   a05fe:	4b35      	ldr	r3, [pc, #212]	; (a06d4 <Cl_dprep_controller+0x9bc>)
   a0600:	4798      	blx	r3
   a0602:	4603      	mov	r3, r0
   a0604:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a0608:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
   a060c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
   a0610:	4610      	mov	r0, r2
   a0612:	4619      	mov	r1, r3
   a0614:	2202      	movs	r2, #2
   a0616:	4b28      	ldr	r3, [pc, #160]	; (a06b8 <Cl_dprep_controller+0x9a0>)
   a0618:	4798      	blx	r3
   a061a:	4603      	mov	r3, r0
   a061c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						break;
   a0620:	bf00      	nop
						default:
						break;
					}
				}
			break;
   a0622:	e18a      	b.n	a093a <Cl_dprep_controller+0xc22>
			case EVENT_DPREP_COMMAND_SET_DATA:
					 if(Cl_ConsoleRxMsg.msgready == true)
   a0624:	4b28      	ldr	r3, [pc, #160]	; (a06c8 <Cl_dprep_controller+0x9b0>)
   a0626:	7e1b      	ldrb	r3, [r3, #24]
   a0628:	2b00      	cmp	r3, #0
   a062a:	d02c      	beq.n	a0686 <Cl_dprep_controller+0x96e>
					 {
						 
						 
						 Cl_ConsoleRxDataType dataId;
						 Cl_Uint8Type count;
						 dataId = Cl_ConsoleRxMsg.data.byte[0];
   a062c:	4b26      	ldr	r3, [pc, #152]	; (a06c8 <Cl_dprep_controller+0x9b0>)
   a062e:	791b      	ldrb	r3, [r3, #4]
   a0630:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
						 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   a0634:	2300      	movs	r3, #0
   a0636:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
   a063a:	e011      	b.n	a0660 <Cl_dprep_controller+0x948>
						 {
							 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
   a063c:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
   a0640:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
   a0644:	3201      	adds	r2, #1
   a0646:	4920      	ldr	r1, [pc, #128]	; (a06c8 <Cl_dprep_controller+0x9b0>)
   a0648:	440a      	add	r2, r1
   a064a:	7912      	ldrb	r2, [r2, #4]
   a064c:	f107 0198 	add.w	r1, r7, #152	; 0x98
   a0650:	440b      	add	r3, r1
   a0652:	f803 2c64 	strb.w	r2, [r3, #-100]
						 
						 
						 Cl_ConsoleRxDataType dataId;
						 Cl_Uint8Type count;
						 dataId = Cl_ConsoleRxMsg.data.byte[0];
						 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   a0656:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
   a065a:	3301      	adds	r3, #1
   a065c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
   a0660:	4b19      	ldr	r3, [pc, #100]	; (a06c8 <Cl_dprep_controller+0x9b0>)
   a0662:	78db      	ldrb	r3, [r3, #3]
   a0664:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
   a0668:	429a      	cmp	r2, r3
   a066a:	d3e7      	bcc.n	a063c <Cl_dprep_controller+0x924>
						 {
							 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
							 
						 }
						 Cl_Dprep_setdata(dataId, cl_PrepData,count);
   a066c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
   a0670:	f897 4096 	ldrb.w	r4, [r7, #150]	; 0x96
   a0674:	4618      	mov	r0, r3
   a0676:	f107 0334 	add.w	r3, r7, #52	; 0x34
   a067a:	e893 0006 	ldmia.w	r3, {r1, r2}
   a067e:	4623      	mov	r3, r4
   a0680:	4c15      	ldr	r4, [pc, #84]	; (a06d8 <Cl_dprep_controller+0x9c0>)
   a0682:	47a0      	blx	r4
						 
						 
						 
					 }
	
			break;
   a0684:	e159      	b.n	a093a <Cl_dprep_controller+0xc22>
   a0686:	e158      	b.n	a093a <Cl_dprep_controller+0xc22>
			case EVENT_DPREP_TICK_50MS:
			
			cl_50ms_timer++;
   a0688:	4b14      	ldr	r3, [pc, #80]	; (a06dc <Cl_dprep_controller+0x9c4>)
   a068a:	881b      	ldrh	r3, [r3, #0]
   a068c:	3301      	adds	r3, #1
   a068e:	b29a      	uxth	r2, r3
   a0690:	4b12      	ldr	r3, [pc, #72]	; (a06dc <Cl_dprep_controller+0x9c4>)
   a0692:	801a      	strh	r2, [r3, #0]
			if(cl_50ms_timer == 2)
   a0694:	4b11      	ldr	r3, [pc, #68]	; (a06dc <Cl_dprep_controller+0x9c4>)
   a0696:	881b      	ldrh	r3, [r3, #0]
   a0698:	2b02      	cmp	r3, #2
   a069a:	d103      	bne.n	a06a4 <Cl_dprep_controller+0x98c>
			{
				cl_50ms_timer =0;
   a069c:	4b0f      	ldr	r3, [pc, #60]	; (a06dc <Cl_dprep_controller+0x9c4>)
   a069e:	2200      	movs	r2, #0
   a06a0:	801a      	strh	r2, [r3, #0]
			//	sv_cntrl_deactivate_valve(VALVE_ID19);
			}
			
			break;
   a06a2:	e14a      	b.n	a093a <Cl_dprep_controller+0xc22>
   a06a4:	e149      	b.n	a093a <Cl_dprep_controller+0xc22>
   a06a6:	bf00      	nop
   a06a8:	000a341d 	.word	0x000a341d
   a06ac:	000a1b39 	.word	0x000a1b39
   a06b0:	20071aa4 	.word	0x20071aa4
   a06b4:	000aa698 	.word	0x000aa698
   a06b8:	0009d1e9 	.word	0x0009d1e9
   a06bc:	00088b69 	.word	0x00088b69
   a06c0:	000880c1 	.word	0x000880c1
   a06c4:	20070d94 	.word	0x20070d94
   a06c8:	200725bc 	.word	0x200725bc
   a06cc:	00094b61 	.word	0x00094b61
   a06d0:	000aa690 	.word	0x000aa690
   a06d4:	0009bcdd 	.word	0x0009bcdd
   a06d8:	000a29f9 	.word	0x000a29f9
   a06dc:	20071dcc 	.word	0x20071dcc
			case EVENT_DPREP_TICK_500MS:
				//UpdateHeaterControls();
	
			break;
			case EVENT_DPREP_TICK_MINUTE:
				Cl_Dprep_ResetAlertsforReassertion();
   a06e0:	4ba7      	ldr	r3, [pc, #668]	; (a0980 <Cl_dprep_controller+0xc68>)
   a06e2:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp_temp3);
   a06e4:	f107 032e 	add.w	r3, r7, #46	; 0x2e
   a06e8:	2014      	movs	r0, #20
   a06ea:	4619      	mov	r1, r3
   a06ec:	4ba5      	ldr	r3, [pc, #660]	; (a0984 <Cl_dprep_controller+0xc6c>)
   a06ee:	4798      	blx	r3
// 				uint16_t cal_data  = (402 *100* sensordata)/(2*32768);			// resistance of PT100
// 				res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
// 				temp_temp3 = res_temp_value/100;									// Temp3 value in XX.yy format
// //				temp_temp3 = temp_temp3 - 3.1 + 1.4;										// sensor offset
// 				temp_temp3 = temp_temp3- 0.4;										// sensor offset
				temp3_cel = (float)temp_temp3/100;
   a06f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
   a06f2:	4ba5      	ldr	r3, [pc, #660]	; (a0988 <Cl_dprep_controller+0xc70>)
   a06f4:	4610      	mov	r0, r2
   a06f6:	4798      	blx	r3
   a06f8:	4602      	mov	r2, r0
   a06fa:	4ba4      	ldr	r3, [pc, #656]	; (a098c <Cl_dprep_controller+0xc74>)
   a06fc:	4610      	mov	r0, r2
   a06fe:	49a4      	ldr	r1, [pc, #656]	; (a0990 <Cl_dprep_controller+0xc78>)
   a0700:	4798      	blx	r3
   a0702:	4603      	mov	r3, r0
   a0704:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
// 						temp3_cel = temp_temp3;
// 					}
// 					//calibration_tmp(temp_temp3,TS3);
// 					//temp3_cel = temprature_final_value_3;
// 					//temp3_cel = 0.0000116 * temp_temp3 *temp_temp3 + 0.0035 *temp_temp3 + 11.157;
				if((temp3_cel) > 36.8 && (temp3_cel < 37.2))
   a0708:	4ba2      	ldr	r3, [pc, #648]	; (a0994 <Cl_dprep_controller+0xc7c>)
   a070a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
   a070e:	4798      	blx	r3
   a0710:	4602      	mov	r2, r0
   a0712:	460b      	mov	r3, r1
   a0714:	4ca0      	ldr	r4, [pc, #640]	; (a0998 <Cl_dprep_controller+0xc80>)
   a0716:	4610      	mov	r0, r2
   a0718:	4619      	mov	r1, r3
   a071a:	a395      	add	r3, pc, #596	; (adr r3, a0970 <Cl_dprep_controller+0xc58>)
   a071c:	e9d3 2300 	ldrd	r2, r3, [r3]
   a0720:	47a0      	blx	r4
   a0722:	4603      	mov	r3, r0
   a0724:	2b00      	cmp	r3, #0
   a0726:	d01e      	beq.n	a0766 <Cl_dprep_controller+0xa4e>
   a0728:	4b9a      	ldr	r3, [pc, #616]	; (a0994 <Cl_dprep_controller+0xc7c>)
   a072a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
   a072e:	4798      	blx	r3
   a0730:	4602      	mov	r2, r0
   a0732:	460b      	mov	r3, r1
   a0734:	4c99      	ldr	r4, [pc, #612]	; (a099c <Cl_dprep_controller+0xc84>)
   a0736:	4610      	mov	r0, r2
   a0738:	4619      	mov	r1, r3
   a073a:	a38f      	add	r3, pc, #572	; (adr r3, a0978 <Cl_dprep_controller+0xc60>)
   a073c:	e9d3 2300 	ldrd	r2, r3, [r3]
   a0740:	47a0      	blx	r4
   a0742:	4603      	mov	r3, r0
   a0744:	2b00      	cmp	r3, #0
   a0746:	d00e      	beq.n	a0766 <Cl_dprep_controller+0xa4e>
				{
					if( cl_temp3_37stable == true) 
   a0748:	4b95      	ldr	r3, [pc, #596]	; (a09a0 <Cl_dprep_controller+0xc88>)
   a074a:	781b      	ldrb	r3, [r3, #0]
   a074c:	2b00      	cmp	r3, #0
   a074e:	d003      	beq.n	a0758 <Cl_dprep_controller+0xa40>
					{
					 cl_temp3_stable_confirm = true;	
   a0750:	4b94      	ldr	r3, [pc, #592]	; (a09a4 <Cl_dprep_controller+0xc8c>)
   a0752:	2201      	movs	r2, #1
   a0754:	701a      	strb	r2, [r3, #0]
// 					//calibration_tmp(temp_temp3,TS3);
// 					//temp3_cel = temprature_final_value_3;
// 					//temp3_cel = 0.0000116 * temp_temp3 *temp_temp3 + 0.0035 *temp_temp3 + 11.157;
				if((temp3_cel) > 36.8 && (temp3_cel < 37.2))
				{
					if( cl_temp3_37stable == true) 
   a0756:	e00d      	b.n	a0774 <Cl_dprep_controller+0xa5c>
					{
					 cl_temp3_stable_confirm = true;	
					}
					else
					{
					 cl_temp3_37stable = true;
   a0758:	4b91      	ldr	r3, [pc, #580]	; (a09a0 <Cl_dprep_controller+0xc88>)
   a075a:	2201      	movs	r2, #1
   a075c:	701a      	strb	r2, [r3, #0]
					 cl_temp3_stable_confirm = false;
   a075e:	4b91      	ldr	r3, [pc, #580]	; (a09a4 <Cl_dprep_controller+0xc8c>)
   a0760:	2200      	movs	r2, #0
   a0762:	701a      	strb	r2, [r3, #0]
// 					//calibration_tmp(temp_temp3,TS3);
// 					//temp3_cel = temprature_final_value_3;
// 					//temp3_cel = 0.0000116 * temp_temp3 *temp_temp3 + 0.0035 *temp_temp3 + 11.157;
				if((temp3_cel) > 36.8 && (temp3_cel < 37.2))
				{
					if( cl_temp3_37stable == true) 
   a0764:	e006      	b.n	a0774 <Cl_dprep_controller+0xa5c>
					 cl_temp3_stable_confirm = false;
					}
				}
				else
				{
					cl_temp3_37stable = false;
   a0766:	4b8e      	ldr	r3, [pc, #568]	; (a09a0 <Cl_dprep_controller+0xc88>)
   a0768:	2200      	movs	r2, #0
   a076a:	701a      	strb	r2, [r3, #0]
					cl_temp3_stable_confirm = false;
   a076c:	4b8d      	ldr	r3, [pc, #564]	; (a09a4 <Cl_dprep_controller+0xc8c>)
   a076e:	2200      	movs	r2, #0
   a0770:	701a      	strb	r2, [r3, #0]
					
				}
			


			break;
   a0772:	e0e2      	b.n	a093a <Cl_dprep_controller+0xc22>
   a0774:	e0e1      	b.n	a093a <Cl_dprep_controller+0xc22>
										}
										
										temp3_cel_backup = temp3_cel;
					}
					#endif
					Cl_Dprep_filling_secondscounter++;
   a0776:	4b8c      	ldr	r3, [pc, #560]	; (a09a8 <Cl_dprep_controller+0xc90>)
   a0778:	881b      	ldrh	r3, [r3, #0]
   a077a:	b29b      	uxth	r3, r3
   a077c:	b29b      	uxth	r3, r3
   a077e:	3301      	adds	r3, #1
   a0780:	b29b      	uxth	r3, r3
   a0782:	b29a      	uxth	r2, r3
   a0784:	4b88      	ldr	r3, [pc, #544]	; (a09a8 <Cl_dprep_controller+0xc90>)
   a0786:	801a      	strh	r2, [r3, #0]
					if(Cl_Dprep_filling_secondscounter == 60)
   a0788:	4b87      	ldr	r3, [pc, #540]	; (a09a8 <Cl_dprep_controller+0xc90>)
   a078a:	881b      	ldrh	r3, [r3, #0]
   a078c:	b21b      	sxth	r3, r3
   a078e:	2b3c      	cmp	r3, #60	; 0x3c
   a0790:	d101      	bne.n	a0796 <Cl_dprep_controller+0xa7e>
					{
						UpdateDprepFillingMinuteTick();
   a0792:	4b86      	ldr	r3, [pc, #536]	; (a09ac <Cl_dprep_controller+0xc94>)
   a0794:	4798      	blx	r3
					}
					
					if(Cl_Dprep_filling_secondscounter == 30){ // activate flow alarms only after 30 seconds into rinse
   a0796:	4b84      	ldr	r3, [pc, #528]	; (a09a8 <Cl_dprep_controller+0xc90>)
   a0798:	881b      	ldrh	r3, [r3, #0]
   a079a:	b21b      	sxth	r3, r3
   a079c:	2b1e      	cmp	r3, #30
   a079e:	d114      	bne.n	a07ca <Cl_dprep_controller+0xab2>
						
						
						Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );
   a07a0:	200c      	movs	r0, #12
   a07a2:	2101      	movs	r1, #1
   a07a4:	4b82      	ldr	r3, [pc, #520]	; (a09b0 <Cl_dprep_controller+0xc98>)
   a07a6:	4798      	blx	r3
   a07a8:	4603      	mov	r3, r0
   a07aa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   a07ae:	200d      	movs	r0, #13
   a07b0:	2101      	movs	r1, #1
   a07b2:	4b7f      	ldr	r3, [pc, #508]	; (a09b0 <Cl_dprep_controller+0xc98>)
   a07b4:	4798      	blx	r3
   a07b6:	4603      	mov	r3, r0
   a07b8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
   a07bc:	200e      	movs	r0, #14
   a07be:	2101      	movs	r1, #1
   a07c0:	4b7b      	ldr	r3, [pc, #492]	; (a09b0 <Cl_dprep_controller+0xc98>)
   a07c2:	4798      	blx	r3
   a07c4:	4603      	mov	r3, r0
   a07c6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						
						
					}
					
					
					Cl_Dprep_SendPrepStateData(DIALYSIS_PREP_DATA);
   a07ca:	2004      	movs	r0, #4
   a07cc:	4b79      	ldr	r3, [pc, #484]	; (a09b4 <Cl_dprep_controller+0xc9c>)
   a07ce:	4798      	blx	r3
				//	Cl_Dprep_ResetAlertsforReassertion();
				//	Cl_dprepretcode = Cl_Dprep_ProcessAlarms();

					if(Cl_Dprep_CheckforfillingCompletion() == CL_OK )
   a07d0:	4b79      	ldr	r3, [pc, #484]	; (a09b8 <Cl_dprep_controller+0xca0>)
   a07d2:	4798      	blx	r3
   a07d4:	4603      	mov	r3, r0
   a07d6:	2b00      	cmp	r3, #0
   a07d8:	d13b      	bne.n	a0852 <Cl_dprep_controller+0xb3a>
					{
						sv_cntrl_setgreenalarm();
   a07da:	4b78      	ldr	r3, [pc, #480]	; (a09bc <Cl_dprep_controller+0xca4>)
   a07dc:	4798      	blx	r3
						Cl_Uint32Type temp = Treatdata[ID_dflow];
   a07de:	4b78      	ldr	r3, [pc, #480]	; (a09c0 <Cl_dprep_controller+0xca8>)
   a07e0:	695b      	ldr	r3, [r3, #20]
   a07e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
						Cl_Uint16Type potvalue = 0;
   a07e6:	2300      	movs	r3, #0
   a07e8:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
						//if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_COMPLETED)
						if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED)
   a07ec:	4b75      	ldr	r3, [pc, #468]	; (a09c4 <Cl_dprep_controller+0xcac>)
   a07ee:	781b      	ldrb	r3, [r3, #0]
   a07f0:	2b08      	cmp	r3, #8
   a07f2:	d108      	bne.n	a0806 <Cl_dprep_controller+0xaee>
// 								break;
// 								
// 								default:
// 								break;
// 							}
							 sv_cntrl_enable_bypass();
   a07f4:	4b74      	ldr	r3, [pc, #464]	; (a09c8 <Cl_dprep_controller+0xcb0>)
   a07f6:	4798      	blx	r3
							 cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   a07f8:	4b74      	ldr	r3, [pc, #464]	; (a09cc <Cl_dprep_controller+0xcb4>)
   a07fa:	2201      	movs	r2, #1
   a07fc:	701a      	strb	r2, [r3, #0]
							 
							cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
   a07fe:	4b74      	ldr	r3, [pc, #464]	; (a09d0 <Cl_dprep_controller+0xcb8>)
   a0800:	2205      	movs	r2, #5
   a0802:	701a      	strb	r2, [r3, #0]
   a0804:	e007      	b.n	a0816 <Cl_dprep_controller+0xafe>
// 								break;
// 								
// 								default:
// 								break;
// 							}
							sv_cntrl_enable_bypass();
   a0806:	4b70      	ldr	r3, [pc, #448]	; (a09c8 <Cl_dprep_controller+0xcb0>)
   a0808:	4798      	blx	r3
							cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   a080a:	4b70      	ldr	r3, [pc, #448]	; (a09cc <Cl_dprep_controller+0xcb4>)
   a080c:	2201      	movs	r2, #1
   a080e:	701a      	strb	r2, [r3, #0]

							cl_dprepstate = CL_DPREP_STATE_DPREP_FILLING_DONE;
   a0810:	4b6f      	ldr	r3, [pc, #444]	; (a09d0 <Cl_dprep_controller+0xcb8>)
   a0812:	2203      	movs	r2, #3
   a0814:	701a      	strb	r2, [r3, #0]
						
						//	Cl_rinseretcode = (Cl_ReturnCodeType)sv_setflowpath(Default path ?);//set appropirate flow path configuration
					//	Cl_dprepretcode = sv_cntrl_poweroffheater();							
					//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
					//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
						command = CON_TX_COMMAND_DIALYSATE_FILLING_COMPLETED;
   a0816:	231f      	movs	r3, #31
   a0818:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
						data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a081c:	2301      	movs	r3, #1
   a081e:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
						Cl_Dprep_filling_secondscounter = 0;
   a0822:	4b61      	ldr	r3, [pc, #388]	; (a09a8 <Cl_dprep_controller+0xc90>)
   a0824:	2200      	movs	r2, #0
   a0826:	801a      	strh	r2, [r3, #0]
						Cl_Dprep_filling_Minutescounter = 0;
   a0828:	4b6a      	ldr	r3, [pc, #424]	; (a09d4 <Cl_dprep_controller+0xcbc>)
   a082a:	2200      	movs	r2, #0
   a082c:	801a      	strh	r2, [r3, #0]
						Cl_Dprep_filling_TotalMinutescounter = 0;
   a082e:	4b6a      	ldr	r3, [pc, #424]	; (a09d8 <Cl_dprep_controller+0xcc0>)
   a0830:	2200      	movs	r2, #0
   a0832:	801a      	strh	r2, [r3, #0]

						Cl_deactivate_prep_alarms();
   a0834:	4b69      	ldr	r3, [pc, #420]	; (a09dc <Cl_dprep_controller+0xcc4>)
   a0836:	4798      	blx	r3

					//	Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_LOW,BELOW,13.0,0,0);
						// Appy treatment cond alarm and temerature alarm  limits here
						// Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
							
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,1);
   a0838:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
   a083c:	f107 0370 	add.w	r3, r7, #112	; 0x70
   a0840:	4610      	mov	r0, r2
   a0842:	4619      	mov	r1, r3
   a0844:	2201      	movs	r2, #1
   a0846:	4b66      	ldr	r3, [pc, #408]	; (a09e0 <Cl_dprep_controller+0xcc8>)
   a0848:	4798      	blx	r3
   a084a:	4603      	mov	r3, r0
   a084c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					}
					
			break;
   a0850:	e073      	b.n	a093a <Cl_dprep_controller+0xc22>
   a0852:	e072      	b.n	a093a <Cl_dprep_controller+0xc22>
			case EVENT_DPREP_MIXING_PREP_STOP:
			case EVENT_DPREP_STOP_DIALYSATE_FILL:
					Cl_dprep_StopMixing();
   a0854:	4b63      	ldr	r3, [pc, #396]	; (a09e4 <Cl_dprep_controller+0xccc>)
   a0856:	4798      	blx	r3
					cl_dprepstate = CL_DPREP_STATE_STOPPED;
   a0858:	4b5d      	ldr	r3, [pc, #372]	; (a09d0 <Cl_dprep_controller+0xcb8>)
   a085a:	220b      	movs	r2, #11
   a085c:	701a      	strb	r2, [r3, #0]
			break;
   a085e:	e06c      	b.n	a093a <Cl_dprep_controller+0xc22>
			break;
			case EVENT_DPREP_ALARM:
					Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   a0860:	4b61      	ldr	r3, [pc, #388]	; (a09e8 <Cl_dprep_controller+0xcd0>)
   a0862:	4798      	blx	r3
   a0864:	4603      	mov	r3, r0
   a0866:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			break;
   a086a:	e066      	b.n	a093a <Cl_dprep_controller+0xc22>
			case EVENT_DPREP_ALERT:
					Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   a086c:	f107 0333 	add.w	r3, r7, #51	; 0x33
   a0870:	203c      	movs	r0, #60	; 0x3c
   a0872:	4619      	mov	r1, r3
   a0874:	4b5d      	ldr	r3, [pc, #372]	; (a09ec <Cl_dprep_controller+0xcd4>)
   a0876:	4798      	blx	r3
					if(alarmstatus1)
   a0878:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   a087c:	2b00      	cmp	r3, #0
   a087e:	d002      	beq.n	a0886 <Cl_dprep_controller+0xb6e>
					{
						//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
					//	sv_cntrl_activate_valve(VALVE_ID19);
						cl_50ms_timer  = 1;
   a0880:	4b5b      	ldr	r3, [pc, #364]	; (a09f0 <Cl_dprep_controller+0xcd8>)
   a0882:	2201      	movs	r2, #1
   a0884:	801a      	strh	r2, [r3, #0]
					
					}
					Cl_Alarm_GetAlarmStatus(TEMP2_HIGH_THRESHOLD,&alarmstatus3);
   a0886:	f107 0332 	add.w	r3, r7, #50	; 0x32
   a088a:	2011      	movs	r0, #17
   a088c:	4619      	mov	r1, r3
   a088e:	4b57      	ldr	r3, [pc, #348]	; (a09ec <Cl_dprep_controller+0xcd4>)
   a0890:	4798      	blx	r3
					if(alarmstatus3)
					{
						//	UpdateHeaterControls();
					}
			
					Cl_Alarm_GetAlarmStatus(FLOW_NO_FLOW,&flowstatus);
   a0892:	f107 0331 	add.w	r3, r7, #49	; 0x31
   a0896:	200c      	movs	r0, #12
   a0898:	4619      	mov	r1, r3
   a089a:	4b54      	ldr	r3, [pc, #336]	; (a09ec <Cl_dprep_controller+0xcd4>)
   a089c:	4798      	blx	r3
					//	if(flowstatus)
					//	{
					//		Cl_rinseretcode = sv_cntrl_poweroffheater();
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
					//	}
			break;
   a089e:	e04c      	b.n	a093a <Cl_dprep_controller+0xc22>
			case EVENT_DPREP_START_PRIME:
			if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   a08a0:	4b48      	ldr	r3, [pc, #288]	; (a09c4 <Cl_dprep_controller+0xcac>)
   a08a2:	781b      	ldrb	r3, [r3, #0]
   a08a4:	2b01      	cmp	r3, #1
   a08a6:	d00c      	beq.n	a08c2 <Cl_dprep_controller+0xbaa>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   a08a8:	2018      	movs	r0, #24
   a08aa:	4952      	ldr	r1, [pc, #328]	; (a09f4 <Cl_dprep_controller+0xcdc>)
   a08ac:	2206      	movs	r2, #6
   a08ae:	4b4c      	ldr	r3, [pc, #304]	; (a09e0 <Cl_dprep_controller+0xcc8>)
   a08b0:	4798      	blx	r3
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   a08b2:	2001      	movs	r0, #1
   a08b4:	2100      	movs	r1, #0
   a08b6:	4b50      	ldr	r3, [pc, #320]	; (a09f8 <Cl_dprep_controller+0xce0>)
   a08b8:	4798      	blx	r3
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a08ba:	4b50      	ldr	r3, [pc, #320]	; (a09fc <Cl_dprep_controller+0xce4>)
   a08bc:	2200      	movs	r2, #0
   a08be:	70da      	strb	r2, [r3, #3]
			}
			
			break;
   a08c0:	e03b      	b.n	a093a <Cl_dprep_controller+0xc22>
   a08c2:	e03a      	b.n	a093a <Cl_dprep_controller+0xc22>
			
				case EVENT_DPREP_CLR_ALARM:             // manav03 added
								
											if(powerFailureFlag == 1){
   a08c4:	4b4e      	ldr	r3, [pc, #312]	; (a0a00 <Cl_dprep_controller+0xce8>)
   a08c6:	681b      	ldr	r3, [r3, #0]
   a08c8:	2b01      	cmp	r3, #1
   a08ca:	d11f      	bne.n	a090c <Cl_dprep_controller+0xbf4>
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_POWER_FAILURE,&dprep_powerFailSensorData);
   a08cc:	2024      	movs	r0, #36	; 0x24
   a08ce:	494d      	ldr	r1, [pc, #308]	; (a0a04 <Cl_dprep_controller+0xcec>)
   a08d0:	4b2c      	ldr	r3, [pc, #176]	; (a0984 <Cl_dprep_controller+0xc6c>)
   a08d2:	4798      	blx	r3
					
								if(dprep_powerFailSensorData == 0){
   a08d4:	4b4b      	ldr	r3, [pc, #300]	; (a0a04 <Cl_dprep_controller+0xcec>)
   a08d6:	881b      	ldrh	r3, [r3, #0]
   a08d8:	2b00      	cmp	r3, #0
   a08da:	d12c      	bne.n	a0936 <Cl_dprep_controller+0xc1e>
						
						powerFailureFlag = 0;
   a08dc:	4b48      	ldr	r3, [pc, #288]	; (a0a00 <Cl_dprep_controller+0xce8>)
   a08de:	2200      	movs	r2, #0
   a08e0:	601a      	str	r2, [r3, #0]
						command = CON_TX_COMMAND_ALARM_CLEARED;
   a08e2:	2351      	movs	r3, #81	; 0x51
   a08e4:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
							Cl_SendDatatoconsole(command,&data,0);
   a08e8:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
   a08ec:	f107 0370 	add.w	r3, r7, #112	; 0x70
   a08f0:	4610      	mov	r0, r2
   a08f2:	4619      	mov	r1, r3
   a08f4:	2200      	movs	r2, #0
   a08f6:	4b3a      	ldr	r3, [pc, #232]	; (a09e0 <Cl_dprep_controller+0xcc8>)
   a08f8:	4798      	blx	r3
							sv_cntrl_resetyellowalarm();
   a08fa:	4b43      	ldr	r3, [pc, #268]	; (a0a08 <Cl_dprep_controller+0xcf0>)
   a08fc:	4798      	blx	r3
							sv_cntrl_resetredalarm();
   a08fe:	4b43      	ldr	r3, [pc, #268]	; (a0a0c <Cl_dprep_controller+0xcf4>)
   a0900:	4798      	blx	r3
							sv_cntrl_nobuzzer();
   a0902:	4b43      	ldr	r3, [pc, #268]	; (a0a10 <Cl_dprep_controller+0xcf8>)
   a0904:	4798      	blx	r3
							Cl_Dprep_ResetAlertsforReassertion();
   a0906:	4b1e      	ldr	r3, [pc, #120]	; (a0980 <Cl_dprep_controller+0xc68>)
   a0908:	4798      	blx	r3
										sv_cntrl_resetyellowalarm();
										sv_cntrl_resetredalarm();
										sv_cntrl_nobuzzer();
										Cl_Dprep_ResetAlertsforReassertion();
					}
								break;
   a090a:	e016      	b.n	a093a <Cl_dprep_controller+0xc22>
					}
					}
					else{			
					
								
								command = CON_TX_COMMAND_ALARM_CLEARED;
   a090c:	2351      	movs	r3, #81	; 0x51
   a090e:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
							    Cl_SendDatatoconsole(command,&data,0);
   a0912:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
   a0916:	f107 0370 	add.w	r3, r7, #112	; 0x70
   a091a:	4610      	mov	r0, r2
   a091c:	4619      	mov	r1, r3
   a091e:	2200      	movs	r2, #0
   a0920:	4b2f      	ldr	r3, [pc, #188]	; (a09e0 <Cl_dprep_controller+0xcc8>)
   a0922:	4798      	blx	r3
							
					
										sv_cntrl_resetyellowalarm();
   a0924:	4b38      	ldr	r3, [pc, #224]	; (a0a08 <Cl_dprep_controller+0xcf0>)
   a0926:	4798      	blx	r3
										sv_cntrl_resetredalarm();
   a0928:	4b38      	ldr	r3, [pc, #224]	; (a0a0c <Cl_dprep_controller+0xcf4>)
   a092a:	4798      	blx	r3
										sv_cntrl_nobuzzer();
   a092c:	4b38      	ldr	r3, [pc, #224]	; (a0a10 <Cl_dprep_controller+0xcf8>)
   a092e:	4798      	blx	r3
										Cl_Dprep_ResetAlertsforReassertion();
   a0930:	4b13      	ldr	r3, [pc, #76]	; (a0980 <Cl_dprep_controller+0xc68>)
   a0932:	4798      	blx	r3
					}
								break;
   a0934:	e001      	b.n	a093a <Cl_dprep_controller+0xc22>
   a0936:	e000      	b.n	a093a <Cl_dprep_controller+0xc22>
			
			break;
			case EVENT_DPREP_TICK_500MS:
				//UpdateHeaterControls();
	
			break;
   a0938:	bf00      	nop
										Cl_Dprep_ResetAlertsforReassertion();
					}
								break;

		}
		break;
   a093a:	f000 bf3a 	b.w	a17b2 <Cl_dprep_controller+0x1a9a>
		case CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS:
					switch (cl_dprepevent)
   a093e:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
   a0942:	2b17      	cmp	r3, #23
   a0944:	d00c      	beq.n	a0960 <Cl_dprep_controller+0xc48>
   a0946:	2b19      	cmp	r3, #25
   a0948:	d068      	beq.n	a0a1c <Cl_dprep_controller+0xd04>
   a094a:	2b0d      	cmp	r3, #13
   a094c:	d000      	beq.n	a0950 <Cl_dprep_controller+0xc38>
						Cl_dprepretcode = Cl_Dprep_ResetAlertsforReassertion();
						break;
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
						break;
						default:break;
   a094e:	e06b      	b.n	a0a28 <Cl_dprep_controller+0xd10>
					{
						case EVENT_DPREP_START_DIALISER_PRIME:
					
							//	if(cl_dprepbypassstate == CL_DPREP_BYPASS_ON)
								
								sv_cntrl_disable_loopback();
   a0950:	4b30      	ldr	r3, [pc, #192]	; (a0a14 <Cl_dprep_controller+0xcfc>)
   a0952:	4798      	blx	r3
								sv_cntrl_disable_bypass();
   a0954:	4b30      	ldr	r3, [pc, #192]	; (a0a18 <Cl_dprep_controller+0xd00>)
   a0956:	4798      	blx	r3
								cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
   a0958:	4b1d      	ldr	r3, [pc, #116]	; (a09d0 <Cl_dprep_controller+0xcb8>)
   a095a:	2206      	movs	r2, #6
   a095c:	701a      	strb	r2, [r3, #0]
								 
						break;
   a095e:	e063      	b.n	a0a28 <Cl_dprep_controller+0xd10>
						case EVENT_DPREP_TICK_MINUTE:
						Cl_dprepretcode = Cl_Dprep_ResetAlertsforReassertion();
   a0960:	4b07      	ldr	r3, [pc, #28]	; (a0980 <Cl_dprep_controller+0xc68>)
   a0962:	4798      	blx	r3
   a0964:	4603      	mov	r3, r0
   a0966:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						break;
   a096a:	e05d      	b.n	a0a28 <Cl_dprep_controller+0xd10>
   a096c:	f3af 8000 	nop.w
   a0970:	66666666 	.word	0x66666666
   a0974:	40426666 	.word	0x40426666
   a0978:	9999999a 	.word	0x9999999a
   a097c:	40429999 	.word	0x40429999
   a0980:	000a2835 	.word	0x000a2835
   a0984:	0008fd69 	.word	0x0008fd69
   a0988:	000a8255 	.word	0x000a8255
   a098c:	000a846d 	.word	0x000a846d
   a0990:	42c80000 	.word	0x42c80000
   a0994:	000a79dd 	.word	0x000a79dd
   a0998:	000a7fa5 	.word	0x000a7fa5
   a099c:	000a7f69 	.word	0x000a7f69
   a09a0:	20071dcb 	.word	0x20071dcb
   a09a4:	20071dc8 	.word	0x20071dc8
   a09a8:	20071dae 	.word	0x20071dae
   a09ac:	000a22a1 	.word	0x000a22a1
   a09b0:	00082a35 	.word	0x00082a35
   a09b4:	000a2349 	.word	0x000a2349
   a09b8:	000a2031 	.word	0x000a2031
   a09bc:	0009b65d 	.word	0x0009b65d
   a09c0:	20072880 	.word	0x20072880
   a09c4:	20071aa4 	.word	0x20071aa4
   a09c8:	0009b595 	.word	0x0009b595
   a09cc:	20071dd0 	.word	0x20071dd0
   a09d0:	20071dcf 	.word	0x20071dcf
   a09d4:	20071db0 	.word	0x20071db0
   a09d8:	20071db2 	.word	0x20071db2
   a09dc:	000a3db9 	.word	0x000a3db9
   a09e0:	0009d1e9 	.word	0x0009d1e9
   a09e4:	000a3d09 	.word	0x000a3d09
   a09e8:	000a1b39 	.word	0x000a1b39
   a09ec:	00082c09 	.word	0x00082c09
   a09f0:	20071dcc 	.word	0x20071dcc
   a09f4:	000aa698 	.word	0x000aa698
   a09f8:	000880c1 	.word	0x000880c1
   a09fc:	20070d94 	.word	0x20070d94
   a0a00:	20071d84 	.word	0x20071d84
   a0a04:	20071d88 	.word	0x20071d88
   a0a08:	0009b699 	.word	0x0009b699
   a0a0c:	0009b685 	.word	0x0009b685
   a0a10:	0009b6c1 	.word	0x0009b6c1
   a0a14:	0009b579 	.word	0x0009b579
   a0a18:	0009b5b1 	.word	0x0009b5b1
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   a0a1c:	4bbb      	ldr	r3, [pc, #748]	; (a0d0c <Cl_dprep_controller+0xff4>)
   a0a1e:	4798      	blx	r3
   a0a20:	4603      	mov	r3, r0
   a0a22:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						break;
   a0a26:	bf00      	nop
						default:break;
					}
		break;
   a0a28:	f000 beca 	b.w	a17c0 <Cl_dprep_controller+0x1aa8>
		
		case CL_DPREP_STATE_CRITICAL_ALARM:
					switch (cl_dprepevent)
   a0a2c:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
   a0a30:	3b01      	subs	r3, #1
   a0a32:	2b1c      	cmp	r3, #28
   a0a34:	f200 80ab 	bhi.w	a0b8e <Cl_dprep_controller+0xe76>
   a0a38:	a201      	add	r2, pc, #4	; (adr r2, a0a40 <Cl_dprep_controller+0xd28>)
   a0a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a0a3e:	bf00      	nop
   a0a40:	000a0b13 	.word	0x000a0b13
   a0a44:	000a0ab5 	.word	0x000a0ab5
   a0a48:	000a0b8f 	.word	0x000a0b8f
   a0a4c:	000a0b8f 	.word	0x000a0b8f
   a0a50:	000a0b8f 	.word	0x000a0b8f
   a0a54:	000a0b8f 	.word	0x000a0b8f
   a0a58:	000a0b8f 	.word	0x000a0b8f
   a0a5c:	000a0b8f 	.word	0x000a0b8f
   a0a60:	000a0b8f 	.word	0x000a0b8f
   a0a64:	000a0b8f 	.word	0x000a0b8f
   a0a68:	000a0b8f 	.word	0x000a0b8f
   a0a6c:	000a0b8f 	.word	0x000a0b8f
   a0a70:	000a0ac7 	.word	0x000a0ac7
   a0a74:	000a0b8f 	.word	0x000a0b8f
   a0a78:	000a0b8f 	.word	0x000a0b8f
   a0a7c:	000a0b8f 	.word	0x000a0b8f
   a0a80:	000a0b8f 	.word	0x000a0b8f
   a0a84:	000a0b8f 	.word	0x000a0b8f
   a0a88:	000a0b8f 	.word	0x000a0b8f
   a0a8c:	000a0b8f 	.word	0x000a0b8f
   a0a90:	000a0b8f 	.word	0x000a0b8f
   a0a94:	000a0b8f 	.word	0x000a0b8f
   a0a98:	000a0afb 	.word	0x000a0afb
   a0a9c:	000a0b8f 	.word	0x000a0b8f
   a0aa0:	000a0b07 	.word	0x000a0b07
   a0aa4:	000a0b8f 	.word	0x000a0b8f
   a0aa8:	000a0b8f 	.word	0x000a0b8f
   a0aac:	000a0b8f 	.word	0x000a0b8f
   a0ab0:	000a0adf 	.word	0x000a0adf
					{
						case EVENT_DPREP_DIALYSIS_PREP:
						//Cl_dprepretcode = Cl_Dprep_StartPreparation();
						if(Cl_dprepretcode == CL_REJECTED)
   a0ab4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   a0ab8:	2b03      	cmp	r3, #3
   a0aba:	d103      	bne.n	a0ac4 <Cl_dprep_controller+0xdac>
							{
								return Cl_dprepretcode;
   a0abc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   a0ac0:	f000 be80 	b.w	a17c4 <Cl_dprep_controller+0x1aac>
							}
						break;
   a0ac4:	e064      	b.n	a0b90 <Cl_dprep_controller+0xe78>
						case EVENT_DPREP_START_DIALISER_PRIME:
							//	if(cl_dprepbypassstate == CL_DPREP_BYPASS_ON)
							sv_prop_startmixing();
   a0ac6:	4b92      	ldr	r3, [pc, #584]	; (a0d10 <Cl_dprep_controller+0xff8>)
   a0ac8:	4798      	blx	r3
							Cl_bc_controller(BC_EVENT_RESUME);
   a0aca:	200b      	movs	r0, #11
   a0acc:	4b91      	ldr	r3, [pc, #580]	; (a0d14 <Cl_dprep_controller+0xffc>)
   a0ace:	4798      	blx	r3
								Cl_Dprep_StartDialyserPrime();
   a0ad0:	4b91      	ldr	r3, [pc, #580]	; (a0d18 <Cl_dprep_controller+0x1000>)
   a0ad2:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   a0ad4:	4b91      	ldr	r3, [pc, #580]	; (a0d1c <Cl_dprep_controller+0x1004>)
   a0ad6:	4798      	blx	r3
								 sv_prop_startmixing();
   a0ad8:	4b8d      	ldr	r3, [pc, #564]	; (a0d10 <Cl_dprep_controller+0xff8>)
   a0ada:	4798      	blx	r3
						break;
   a0adc:	e058      	b.n	a0b90 <Cl_dprep_controller+0xe78>
						case EVENT_DPREP_MIXING_PREP_START:
						Cl_dprepretcode = Cl_Dprep_StartPreparation();
   a0ade:	4b90      	ldr	r3, [pc, #576]	; (a0d20 <Cl_dprep_controller+0x1008>)
   a0ae0:	4798      	blx	r3
   a0ae2:	4603      	mov	r3, r0
   a0ae4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						if(Cl_dprepretcode == CL_REJECTED)
   a0ae8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   a0aec:	2b03      	cmp	r3, #3
   a0aee:	d103      	bne.n	a0af8 <Cl_dprep_controller+0xde0>
							{
								return Cl_dprepretcode;
   a0af0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   a0af4:	f000 be66 	b.w	a17c4 <Cl_dprep_controller+0x1aac>
							}
						break;
   a0af8:	e04a      	b.n	a0b90 <Cl_dprep_controller+0xe78>
						case EVENT_DPREP_TICK_MINUTE:
						Cl_dprepretcode = Cl_Dprep_ResetAlertsforReassertion();
   a0afa:	4b8a      	ldr	r3, [pc, #552]	; (a0d24 <Cl_dprep_controller+0x100c>)
   a0afc:	4798      	blx	r3
   a0afe:	4603      	mov	r3, r0
   a0b00:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						break;
   a0b04:	e044      	b.n	a0b90 <Cl_dprep_controller+0xe78>
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   a0b06:	4b81      	ldr	r3, [pc, #516]	; (a0d0c <Cl_dprep_controller+0xff4>)
   a0b08:	4798      	blx	r3
   a0b0a:	4603      	mov	r3, r0
   a0b0c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						break;
   a0b10:	e03e      	b.n	a0b90 <Cl_dprep_controller+0xe78>
						case EVENT_DPREP_CLR_ALARM:
					
					if(powerFailureFlag == 1){
   a0b12:	4b85      	ldr	r3, [pc, #532]	; (a0d28 <Cl_dprep_controller+0x1010>)
   a0b14:	681b      	ldr	r3, [r3, #0]
   a0b16:	2b01      	cmp	r3, #1
   a0b18:	d121      	bne.n	a0b5e <Cl_dprep_controller+0xe46>
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_POWER_FAILURE,&dprep_powerFailSensorData);
   a0b1a:	2024      	movs	r0, #36	; 0x24
   a0b1c:	4983      	ldr	r1, [pc, #524]	; (a0d2c <Cl_dprep_controller+0x1014>)
   a0b1e:	4b84      	ldr	r3, [pc, #528]	; (a0d30 <Cl_dprep_controller+0x1018>)
   a0b20:	4798      	blx	r3
					
								if(dprep_powerFailSensorData == 0){
   a0b22:	4b82      	ldr	r3, [pc, #520]	; (a0d2c <Cl_dprep_controller+0x1014>)
   a0b24:	881b      	ldrh	r3, [r3, #0]
   a0b26:	2b00      	cmp	r3, #0
   a0b28:	d130      	bne.n	a0b8c <Cl_dprep_controller+0xe74>
						
						powerFailureFlag = 0;
   a0b2a:	4b7f      	ldr	r3, [pc, #508]	; (a0d28 <Cl_dprep_controller+0x1010>)
   a0b2c:	2200      	movs	r2, #0
   a0b2e:	601a      	str	r2, [r3, #0]
						command = CON_TX_COMMAND_ALARM_CLEARED;
   a0b30:	2351      	movs	r3, #81	; 0x51
   a0b32:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
							Cl_SendDatatoconsole(command,&data,0);
   a0b36:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
   a0b3a:	f107 0370 	add.w	r3, r7, #112	; 0x70
   a0b3e:	4610      	mov	r0, r2
   a0b40:	4619      	mov	r1, r3
   a0b42:	2200      	movs	r2, #0
   a0b44:	4b7b      	ldr	r3, [pc, #492]	; (a0d34 <Cl_dprep_controller+0x101c>)
   a0b46:	4798      	blx	r3
						sv_cntrl_resetyellowalarm();
   a0b48:	4b7b      	ldr	r3, [pc, #492]	; (a0d38 <Cl_dprep_controller+0x1020>)
   a0b4a:	4798      	blx	r3
						sv_cntrl_resetredalarm();
   a0b4c:	4b7b      	ldr	r3, [pc, #492]	; (a0d3c <Cl_dprep_controller+0x1024>)
   a0b4e:	4798      	blx	r3
						sv_cntrl_nobuzzer();
   a0b50:	4b7b      	ldr	r3, [pc, #492]	; (a0d40 <Cl_dprep_controller+0x1028>)
   a0b52:	4798      	blx	r3
						Cl_Dprep_ResetAlertsforReassertion();
   a0b54:	4b73      	ldr	r3, [pc, #460]	; (a0d24 <Cl_dprep_controller+0x100c>)
   a0b56:	4798      	blx	r3
						sv_cntrl_disable_bypass();
   a0b58:	4b7a      	ldr	r3, [pc, #488]	; (a0d44 <Cl_dprep_controller+0x102c>)
   a0b5a:	4798      	blx	r3
						sv_cntrl_nobuzzer();
						Cl_Dprep_ResetAlertsforReassertion();
						sv_cntrl_disable_bypass();
					}
						
						break;						
   a0b5c:	e018      	b.n	a0b90 <Cl_dprep_controller+0xe78>
						sv_cntrl_disable_bypass();
					}
					}
					else{
						
							command = CON_TX_COMMAND_ALARM_CLEARED;
   a0b5e:	2351      	movs	r3, #81	; 0x51
   a0b60:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
							Cl_SendDatatoconsole(command,&data,0);
   a0b64:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
   a0b68:	f107 0370 	add.w	r3, r7, #112	; 0x70
   a0b6c:	4610      	mov	r0, r2
   a0b6e:	4619      	mov	r1, r3
   a0b70:	2200      	movs	r2, #0
   a0b72:	4b70      	ldr	r3, [pc, #448]	; (a0d34 <Cl_dprep_controller+0x101c>)
   a0b74:	4798      	blx	r3
						sv_cntrl_resetyellowalarm();
   a0b76:	4b70      	ldr	r3, [pc, #448]	; (a0d38 <Cl_dprep_controller+0x1020>)
   a0b78:	4798      	blx	r3
						sv_cntrl_resetredalarm();
   a0b7a:	4b70      	ldr	r3, [pc, #448]	; (a0d3c <Cl_dprep_controller+0x1024>)
   a0b7c:	4798      	blx	r3
						sv_cntrl_nobuzzer();
   a0b7e:	4b70      	ldr	r3, [pc, #448]	; (a0d40 <Cl_dprep_controller+0x1028>)
   a0b80:	4798      	blx	r3
						Cl_Dprep_ResetAlertsforReassertion();
   a0b82:	4b68      	ldr	r3, [pc, #416]	; (a0d24 <Cl_dprep_controller+0x100c>)
   a0b84:	4798      	blx	r3
						sv_cntrl_disable_bypass();
   a0b86:	4b6f      	ldr	r3, [pc, #444]	; (a0d44 <Cl_dprep_controller+0x102c>)
   a0b88:	4798      	blx	r3
					}
						
						break;						
   a0b8a:	e001      	b.n	a0b90 <Cl_dprep_controller+0xe78>
   a0b8c:	e000      	b.n	a0b90 <Cl_dprep_controller+0xe78>
// 
// 								}
// 							}
// 						}
						break;
						default:break;
   a0b8e:	bf00      	nop
					}
		break;
   a0b90:	f000 be16 	b.w	a17c0 <Cl_dprep_controller+0x1aa8>
		case CL_DPREP_STATE_DPREP_FILLING_DONE:
					switch (cl_dprepevent)
   a0b94:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
   a0b98:	3b04      	subs	r3, #4
   a0b9a:	2b1b      	cmp	r3, #27
   a0b9c:	f200 8102 	bhi.w	a0da4 <Cl_dprep_controller+0x108c>
   a0ba0:	a201      	add	r2, pc, #4	; (adr r2, a0ba8 <Cl_dprep_controller+0xe90>)
   a0ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a0ba6:	bf00      	nop
   a0ba8:	000a0cbb 	.word	0x000a0cbb
   a0bac:	000a0da5 	.word	0x000a0da5
   a0bb0:	000a0da5 	.word	0x000a0da5
   a0bb4:	000a0da5 	.word	0x000a0da5
   a0bb8:	000a0da5 	.word	0x000a0da5
   a0bbc:	000a0da5 	.word	0x000a0da5
   a0bc0:	000a0c5d 	.word	0x000a0c5d
   a0bc4:	000a0da5 	.word	0x000a0da5
   a0bc8:	000a0ca5 	.word	0x000a0ca5
   a0bcc:	000a0c19 	.word	0x000a0c19
   a0bd0:	000a0da5 	.word	0x000a0da5
   a0bd4:	000a0da5 	.word	0x000a0da5
   a0bd8:	000a0da5 	.word	0x000a0da5
   a0bdc:	000a0da5 	.word	0x000a0da5
   a0be0:	000a0da5 	.word	0x000a0da5
   a0be4:	000a0da5 	.word	0x000a0da5
   a0be8:	000a0da5 	.word	0x000a0da5
   a0bec:	000a0da5 	.word	0x000a0da5
   a0bf0:	000a0c87 	.word	0x000a0c87
   a0bf4:	000a0c81 	.word	0x000a0c81
   a0bf8:	000a0da5 	.word	0x000a0da5
   a0bfc:	000a0c99 	.word	0x000a0c99
   a0c00:	000a0da5 	.word	0x000a0da5
   a0c04:	000a0da5 	.word	0x000a0da5
   a0c08:	000a0da5 	.word	0x000a0da5
   a0c0c:	000a0da5 	.word	0x000a0da5
   a0c10:	000a0da5 	.word	0x000a0da5
   a0c14:	000a0c29 	.word	0x000a0c29
					{
						case EVENT_DPREP_START_DIALISER_PRIME:
						//sv_prop_startmixing();
								Cl_Dprep_StartDialyserPrime();
   a0c18:	4b3f      	ldr	r3, [pc, #252]	; (a0d18 <Cl_dprep_controller+0x1000>)
   a0c1a:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   a0c1c:	4b3f      	ldr	r3, [pc, #252]	; (a0d1c <Cl_dprep_controller+0x1004>)
   a0c1e:	4798      	blx	r3
								cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
   a0c20:	4b49      	ldr	r3, [pc, #292]	; (a0d48 <Cl_dprep_controller+0x1030>)
   a0c22:	2206      	movs	r2, #6
   a0c24:	701a      	strb	r2, [r3, #0]
						break;
   a0c26:	e0be      	b.n	a0da6 <Cl_dprep_controller+0x108e>
						case EVENT_DPREP_START_RECIRC:
									if((cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING) || (cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED) || (cl_dprep_prime_state !=  CL_DPREP_PRIME_STATE_DIALYSER_PRIMING))
   a0c28:	4b48      	ldr	r3, [pc, #288]	; (a0d4c <Cl_dprep_controller+0x1034>)
   a0c2a:	781b      	ldrb	r3, [r3, #0]
   a0c2c:	2b01      	cmp	r3, #1
   a0c2e:	d107      	bne.n	a0c40 <Cl_dprep_controller+0xf28>
   a0c30:	4b46      	ldr	r3, [pc, #280]	; (a0d4c <Cl_dprep_controller+0x1034>)
   a0c32:	781b      	ldrb	r3, [r3, #0]
   a0c34:	2b05      	cmp	r3, #5
   a0c36:	d103      	bne.n	a0c40 <Cl_dprep_controller+0xf28>
   a0c38:	4b44      	ldr	r3, [pc, #272]	; (a0d4c <Cl_dprep_controller+0x1034>)
   a0c3a:	781b      	ldrb	r3, [r3, #0]
   a0c3c:	2b09      	cmp	r3, #9
   a0c3e:	d00c      	beq.n	a0c5a <Cl_dprep_controller+0xf42>
									{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   a0c40:	2018      	movs	r0, #24
   a0c42:	4943      	ldr	r1, [pc, #268]	; (a0d50 <Cl_dprep_controller+0x1038>)
   a0c44:	2206      	movs	r2, #6
   a0c46:	4b3b      	ldr	r3, [pc, #236]	; (a0d34 <Cl_dprep_controller+0x101c>)
   a0c48:	4798      	blx	r3
										cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   a0c4a:	2005      	movs	r0, #5
   a0c4c:	2100      	movs	r1, #0
   a0c4e:	4b41      	ldr	r3, [pc, #260]	; (a0d54 <Cl_dprep_controller+0x103c>)
   a0c50:	4798      	blx	r3
										Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a0c52:	4b41      	ldr	r3, [pc, #260]	; (a0d58 <Cl_dprep_controller+0x1040>)
   a0c54:	2200      	movs	r2, #0
   a0c56:	70da      	strb	r2, [r3, #3]
									}
						break;
   a0c58:	e0a5      	b.n	a0da6 <Cl_dprep_controller+0x108e>
   a0c5a:	e0a4      	b.n	a0da6 <Cl_dprep_controller+0x108e>
						case EVENT_DPREP_START_PRIME:
						if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   a0c5c:	4b3b      	ldr	r3, [pc, #236]	; (a0d4c <Cl_dprep_controller+0x1034>)
   a0c5e:	781b      	ldrb	r3, [r3, #0]
   a0c60:	2b01      	cmp	r3, #1
   a0c62:	d00c      	beq.n	a0c7e <Cl_dprep_controller+0xf66>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   a0c64:	2018      	movs	r0, #24
   a0c66:	493d      	ldr	r1, [pc, #244]	; (a0d5c <Cl_dprep_controller+0x1044>)
   a0c68:	2206      	movs	r2, #6
   a0c6a:	4b32      	ldr	r3, [pc, #200]	; (a0d34 <Cl_dprep_controller+0x101c>)
   a0c6c:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   a0c6e:	2001      	movs	r0, #1
   a0c70:	2100      	movs	r1, #0
   a0c72:	4b38      	ldr	r3, [pc, #224]	; (a0d54 <Cl_dprep_controller+0x103c>)
   a0c74:	4798      	blx	r3
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a0c76:	4b38      	ldr	r3, [pc, #224]	; (a0d58 <Cl_dprep_controller+0x1040>)
   a0c78:	2200      	movs	r2, #0
   a0c7a:	70da      	strb	r2, [r3, #3]
						}
						
						break;
   a0c7c:	e093      	b.n	a0da6 <Cl_dprep_controller+0x108e>
   a0c7e:	e092      	b.n	a0da6 <Cl_dprep_controller+0x108e>
						case EVENT_DPREP_MAC_PRIME_COMPLETED:
					//	cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
						break;

						case EVENT_DPREP_TICK_MINUTE:
							Cl_Dprep_ResetAlertsforReassertion();
   a0c80:	4b28      	ldr	r3, [pc, #160]	; (a0d24 <Cl_dprep_controller+0x100c>)
   a0c82:	4798      	blx	r3
											
											temp3_cel_backup = temp3_cel
											
											#endif
										
						break;
   a0c84:	e08f      	b.n	a0da6 <Cl_dprep_controller+0x108e>
						
						case EVENT_DPREP_TICK_SECOND:
					//	if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_COMPLETED)
						if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED)
   a0c86:	4b31      	ldr	r3, [pc, #196]	; (a0d4c <Cl_dprep_controller+0x1034>)
   a0c88:	781b      	ldrb	r3, [r3, #0]
   a0c8a:	2b08      	cmp	r3, #8
   a0c8c:	d103      	bne.n	a0c96 <Cl_dprep_controller+0xf7e>
					
						{
							cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
   a0c8e:	4b2e      	ldr	r3, [pc, #184]	; (a0d48 <Cl_dprep_controller+0x1030>)
   a0c90:	2205      	movs	r2, #5
   a0c92:	701a      	strb	r2, [r3, #0]
									 
						}
						break;
   a0c94:	e087      	b.n	a0da6 <Cl_dprep_controller+0x108e>
   a0c96:	e086      	b.n	a0da6 <Cl_dprep_controller+0x108e>


						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   a0c98:	4b1c      	ldr	r3, [pc, #112]	; (a0d0c <Cl_dprep_controller+0xff4>)
   a0c9a:	4798      	blx	r3
   a0c9c:	4603      	mov	r3, r0
   a0c9e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						break;
   a0ca2:	e080      	b.n	a0da6 <Cl_dprep_controller+0x108e>
						case EVENT_DPREP_DILYSER_CONNECTED:
		
						// check for micro switches
						Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_CONNECTED_CONFIRMED,&data,0);
   a0ca4:	f107 0370 	add.w	r3, r7, #112	; 0x70
   a0ca8:	2025      	movs	r0, #37	; 0x25
   a0caa:	4619      	mov	r1, r3
   a0cac:	2200      	movs	r2, #0
   a0cae:	4b21      	ldr	r3, [pc, #132]	; (a0d34 <Cl_dprep_controller+0x101c>)
   a0cb0:	4798      	blx	r3
   a0cb2:	4603      	mov	r3, r0
   a0cb4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		
						break;
   a0cb8:	e075      	b.n	a0da6 <Cl_dprep_controller+0x108e>
						case EVENT_DPREP_COMMAND_GET_DATA:

							if(Cl_ConsoleRxMsg.msgready == true)
   a0cba:	4b29      	ldr	r3, [pc, #164]	; (a0d60 <Cl_dprep_controller+0x1048>)
   a0cbc:	7e1b      	ldrb	r3, [r3, #24]
   a0cbe:	2b00      	cmp	r3, #0
   a0cc0:	d06f      	beq.n	a0da2 <Cl_dprep_controller+0x108a>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   a0cc2:	4b27      	ldr	r3, [pc, #156]	; (a0d60 <Cl_dprep_controller+0x1048>)
   a0cc4:	791b      	ldrb	r3, [r3, #4]
   a0cc6:	2b02      	cmp	r3, #2
   a0cc8:	d002      	beq.n	a0cd0 <Cl_dprep_controller+0xfb8>
   a0cca:	2b04      	cmp	r3, #4
   a0ccc:	d04c      	beq.n	a0d68 <Cl_dprep_controller+0x1050>
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:
									break;
   a0cce:	e068      	b.n	a0da2 <Cl_dprep_controller+0x108a>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case	CON_RX_PARAM_DATA_PRIME_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   a0cd0:	2316      	movs	r3, #22
   a0cd2:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
									dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   a0cd6:	2302      	movs	r3, #2
   a0cd8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   a0cdc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
   a0ce0:	3301      	adds	r3, #1
   a0ce2:	2002      	movs	r0, #2
   a0ce4:	4619      	mov	r1, r3
   a0ce6:	4b1f      	ldr	r3, [pc, #124]	; (a0d64 <Cl_dprep_controller+0x104c>)
   a0ce8:	4798      	blx	r3
   a0cea:	4603      	mov	r3, r0
   a0cec:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a0cf0:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
   a0cf4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
   a0cf8:	4610      	mov	r0, r2
   a0cfa:	4619      	mov	r1, r3
   a0cfc:	2202      	movs	r2, #2
   a0cfe:	4b0d      	ldr	r3, [pc, #52]	; (a0d34 <Cl_dprep_controller+0x101c>)
   a0d00:	4798      	blx	r3
   a0d02:	4603      	mov	r3, r0
   a0d04:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
									break;
   a0d08:	e04b      	b.n	a0da2 <Cl_dprep_controller+0x108a>
   a0d0a:	bf00      	nop
   a0d0c:	000a1b39 	.word	0x000a1b39
   a0d10:	0009b785 	.word	0x0009b785
   a0d14:	00082ee1 	.word	0x00082ee1
   a0d18:	000a38a1 	.word	0x000a38a1
   a0d1c:	0009b579 	.word	0x0009b579
   a0d20:	000a341d 	.word	0x000a341d
   a0d24:	000a2835 	.word	0x000a2835
   a0d28:	20071d84 	.word	0x20071d84
   a0d2c:	20071d88 	.word	0x20071d88
   a0d30:	0008fd69 	.word	0x0008fd69
   a0d34:	0009d1e9 	.word	0x0009d1e9
   a0d38:	0009b699 	.word	0x0009b699
   a0d3c:	0009b685 	.word	0x0009b685
   a0d40:	0009b6c1 	.word	0x0009b6c1
   a0d44:	0009b5b1 	.word	0x0009b5b1
   a0d48:	20071dcf 	.word	0x20071dcf
   a0d4c:	20071aa4 	.word	0x20071aa4
   a0d50:	000aa690 	.word	0x000aa690
   a0d54:	000880c1 	.word	0x000880c1
   a0d58:	20070d94 	.word	0x20070d94
   a0d5c:	000aa698 	.word	0x000aa698
   a0d60:	200725bc 	.word	0x200725bc
   a0d64:	0009bcdd 	.word	0x0009bcdd
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   a0d68:	2316      	movs	r3, #22
   a0d6a:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   a0d6e:	2304      	movs	r3, #4
   a0d70:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   a0d74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
   a0d78:	3301      	adds	r3, #1
   a0d7a:	2004      	movs	r0, #4
   a0d7c:	4619      	mov	r1, r3
   a0d7e:	4bb9      	ldr	r3, [pc, #740]	; (a1064 <Cl_dprep_controller+0x134c>)
   a0d80:	4798      	blx	r3
   a0d82:	4603      	mov	r3, r0
   a0d84:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a0d88:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
   a0d8c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
   a0d90:	4610      	mov	r0, r2
   a0d92:	4619      	mov	r1, r3
   a0d94:	2202      	movs	r2, #2
   a0d96:	4bb4      	ldr	r3, [pc, #720]	; (a1068 <Cl_dprep_controller+0x1350>)
   a0d98:	4798      	blx	r3
   a0d9a:	4603      	mov	r3, r0
   a0d9c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
									break;
   a0da0:	bf00      	nop
									default:
									break;
								}
							}
						break;
   a0da2:	e000      	b.n	a0da6 <Cl_dprep_controller+0x108e>
						default:break;
   a0da4:	bf00      	nop
					}

		break;
   a0da6:	f000 bd0b 	b.w	a17c0 <Cl_dprep_controller+0x1aa8>
		
		case CL_DPREP_STATE_DPRIME_WAIT_STABILITY:
		
		 
		 Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false ); // manav02 added
   a0daa:	2008      	movs	r0, #8
   a0dac:	2100      	movs	r1, #0
   a0dae:	4baf      	ldr	r3, [pc, #700]	; (a106c <Cl_dprep_controller+0x1354>)
   a0db0:	4798      	blx	r3
		 Cl_AlarmActivateAlarms(COND_STATUS_LOW,false ); // manav02 added
   a0db2:	2007      	movs	r0, #7
   a0db4:	2100      	movs	r1, #0
   a0db6:	4bad      	ldr	r3, [pc, #692]	; (a106c <Cl_dprep_controller+0x1354>)
   a0db8:	4798      	blx	r3
		 Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false ); // manav02 added
   a0dba:	2013      	movs	r0, #19
   a0dbc:	2100      	movs	r1, #0
   a0dbe:	4bab      	ldr	r3, [pc, #684]	; (a106c <Cl_dprep_controller+0x1354>)
   a0dc0:	4798      	blx	r3
		 Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false ); // manav02 added
   a0dc2:	2014      	movs	r0, #20
   a0dc4:	2100      	movs	r1, #0
   a0dc6:	4ba9      	ldr	r3, [pc, #676]	; (a106c <Cl_dprep_controller+0x1354>)
   a0dc8:	4798      	blx	r3
		 
		 wait_timeout_counter = 0;
   a0dca:	4ba9      	ldr	r3, [pc, #676]	; (a1070 <Cl_dprep_controller+0x1358>)
   a0dcc:	2200      	movs	r2, #0
   a0dce:	601a      	str	r2, [r3, #0]
		 
		 if(state_counter > 3){
   a0dd0:	4ba8      	ldr	r3, [pc, #672]	; (a1074 <Cl_dprep_controller+0x135c>)
   a0dd2:	681b      	ldr	r3, [r3, #0]
   a0dd4:	2b03      	cmp	r3, #3
   a0dd6:	dd14      	ble.n	a0e02 <Cl_dprep_controller+0x10ea>
// 			 sv_cntrl_enable_bypass();
// 			 cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
// 			 cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
// 			 Cl_dprep_StopMixing();
// 			 cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
			Cl_Dprep_Priming_Stop();
   a0dd8:	4ba7      	ldr	r3, [pc, #668]	; (a1078 <Cl_dprep_controller+0x1360>)
   a0dda:	4798      	blx	r3
			
		//	Cl_dprep_StopMixing();
			cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
   a0ddc:	2009      	movs	r0, #9
   a0dde:	2100      	movs	r1, #0
   a0de0:	4ba6      	ldr	r3, [pc, #664]	; (a107c <Cl_dprep_controller+0x1364>)
   a0de2:	4798      	blx	r3
			cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME_STOPPED;
   a0de4:	4ba6      	ldr	r3, [pc, #664]	; (a1080 <Cl_dprep_controller+0x1368>)
   a0de6:	2207      	movs	r2, #7
   a0de8:	701a      	strb	r2, [r3, #0]
			Cl_deactivate_prep_alarms();
   a0dea:	4ba6      	ldr	r3, [pc, #664]	; (a1084 <Cl_dprep_controller+0x136c>)
   a0dec:	4798      	blx	r3
			
			 state_counter = 0;
   a0dee:	4ba1      	ldr	r3, [pc, #644]	; (a1074 <Cl_dprep_controller+0x135c>)
   a0df0:	2200      	movs	r2, #0
   a0df2:	601a      	str	r2, [r3, #0]
			 stability_counter = 0;
   a0df4:	4ba4      	ldr	r3, [pc, #656]	; (a1088 <Cl_dprep_controller+0x1370>)
   a0df6:	2200      	movs	r2, #0
   a0df8:	601a      	str	r2, [r3, #0]
			 wait_timeout_counter = 0;
   a0dfa:	4b9d      	ldr	r3, [pc, #628]	; (a1070 <Cl_dprep_controller+0x1358>)
   a0dfc:	2200      	movs	r2, #0
   a0dfe:	601a      	str	r2, [r3, #0]
   a0e00:	e0ce      	b.n	a0fa0 <Cl_dprep_controller+0x1288>
		 }
		 else{
			 
		 
		switch(cl_dprepevent){
   a0e02:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
   a0e06:	3b01      	subs	r3, #1
   a0e08:	2b18      	cmp	r3, #24
   a0e0a:	f200 84d4 	bhi.w	a17b6 <Cl_dprep_controller+0x1a9e>
   a0e0e:	a201      	add	r2, pc, #4	; (adr r2, a0e14 <Cl_dprep_controller+0x10fc>)
   a0e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a0e14:	000a0f2d 	.word	0x000a0f2d
   a0e18:	000a17b7 	.word	0x000a17b7
   a0e1c:	000a17b7 	.word	0x000a17b7
   a0e20:	000a17b7 	.word	0x000a17b7
   a0e24:	000a17b7 	.word	0x000a17b7
   a0e28:	000a17b7 	.word	0x000a17b7
   a0e2c:	000a17b7 	.word	0x000a17b7
   a0e30:	000a17b7 	.word	0x000a17b7
   a0e34:	000a17b7 	.word	0x000a17b7
   a0e38:	000a17b7 	.word	0x000a17b7
   a0e3c:	000a17b7 	.word	0x000a17b7
   a0e40:	000a17b7 	.word	0x000a17b7
   a0e44:	000a17b7 	.word	0x000a17b7
   a0e48:	000a0f15 	.word	0x000a0f15
   a0e4c:	000a17b7 	.word	0x000a17b7
   a0e50:	000a17b7 	.word	0x000a17b7
   a0e54:	000a17b7 	.word	0x000a17b7
   a0e58:	000a17b7 	.word	0x000a17b7
   a0e5c:	000a17b7 	.word	0x000a17b7
   a0e60:	000a17b7 	.word	0x000a17b7
   a0e64:	000a17b7 	.word	0x000a17b7
   a0e68:	000a0e79 	.word	0x000a0e79
   a0e6c:	000a17b7 	.word	0x000a17b7
   a0e70:	000a17b7 	.word	0x000a17b7
   a0e74:	000a0f09 	.word	0x000a0f09
		
		case EVENT_DPREP_TICK_SECOND:
		
		wait_timeout_counter++;
   a0e78:	4b7d      	ldr	r3, [pc, #500]	; (a1070 <Cl_dprep_controller+0x1358>)
   a0e7a:	681b      	ldr	r3, [r3, #0]
   a0e7c:	3301      	adds	r3, #1
   a0e7e:	4a7c      	ldr	r2, [pc, #496]	; (a1070 <Cl_dprep_controller+0x1358>)
   a0e80:	6013      	str	r3, [r2, #0]
		// disable cond and temp alarm
		// if 3 times it comes then stop the dialyzer priming
		// send data to console to wait for stability
		
		
		Cl_Dprep_SendPrepStateData(DIALYSER_PRIME_DATA);
   a0e82:	2003      	movs	r0, #3
   a0e84:	4b81      	ldr	r3, [pc, #516]	; (a108c <Cl_dprep_controller+0x1374>)
   a0e86:	4798      	blx	r3
		if(Cl_Check_Temp_Cond_Stability() == CL_OK){
   a0e88:	4b81      	ldr	r3, [pc, #516]	; (a1090 <Cl_dprep_controller+0x1378>)
   a0e8a:	4798      	blx	r3
   a0e8c:	4603      	mov	r3, r0
   a0e8e:	2b00      	cmp	r3, #0
   a0e90:	d104      	bne.n	a0e9c <Cl_dprep_controller+0x1184>
			
			stability_counter++ ;
   a0e92:	4b7d      	ldr	r3, [pc, #500]	; (a1088 <Cl_dprep_controller+0x1370>)
   a0e94:	681b      	ldr	r3, [r3, #0]
   a0e96:	3301      	adds	r3, #1
   a0e98:	4a7b      	ldr	r2, [pc, #492]	; (a1088 <Cl_dprep_controller+0x1370>)
   a0e9a:	6013      	str	r3, [r2, #0]
		}
		
		if(stability_counter == 10){
   a0e9c:	4b7a      	ldr	r3, [pc, #488]	; (a1088 <Cl_dprep_controller+0x1370>)
   a0e9e:	681b      	ldr	r3, [r3, #0]
   a0ea0:	2b0a      	cmp	r3, #10
   a0ea2:	d120      	bne.n	a0ee6 <Cl_dprep_controller+0x11ce>
		
		Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true ); // true manav02 changed 
   a0ea4:	2008      	movs	r0, #8
   a0ea6:	2101      	movs	r1, #1
   a0ea8:	4b70      	ldr	r3, [pc, #448]	; (a106c <Cl_dprep_controller+0x1354>)
   a0eaa:	4798      	blx	r3
		Cl_AlarmActivateAlarms(COND_STATUS_LOW,true ); // true manav02 changed 
   a0eac:	2007      	movs	r0, #7
   a0eae:	2101      	movs	r1, #1
   a0eb0:	4b6e      	ldr	r3, [pc, #440]	; (a106c <Cl_dprep_controller+0x1354>)
   a0eb2:	4798      	blx	r3
		Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true ); // true manav02 changed 
   a0eb4:	2013      	movs	r0, #19
   a0eb6:	2101      	movs	r1, #1
   a0eb8:	4b6c      	ldr	r3, [pc, #432]	; (a106c <Cl_dprep_controller+0x1354>)
   a0eba:	4798      	blx	r3
		Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true ); //true manav02 changed 
   a0ebc:	2014      	movs	r0, #20
   a0ebe:	2101      	movs	r1, #1
   a0ec0:	4b6a      	ldr	r3, [pc, #424]	; (a106c <Cl_dprep_controller+0x1354>)
   a0ec2:	4798      	blx	r3
		
		stability_counter = 0;	
   a0ec4:	4b70      	ldr	r3, [pc, #448]	; (a1088 <Cl_dprep_controller+0x1370>)
   a0ec6:	2200      	movs	r2, #0
   a0ec8:	601a      	str	r2, [r3, #0]
		wait_timeout_counter = 0;
   a0eca:	4b69      	ldr	r3, [pc, #420]	; (a1070 <Cl_dprep_controller+0x1358>)
   a0ecc:	2200      	movs	r2, #0
   a0ece:	601a      	str	r2, [r3, #0]
				Cl_dprepretcode =  sv_cntrl_disable_bypass();
   a0ed0:	4b70      	ldr	r3, [pc, #448]	; (a1094 <Cl_dprep_controller+0x137c>)
   a0ed2:	4798      	blx	r3
   a0ed4:	4603      	mov	r3, r0
   a0ed6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				cl_dprepbypassstate = CL_DPREP_BYPASS_OFF;
   a0eda:	4b6f      	ldr	r3, [pc, #444]	; (a1098 <Cl_dprep_controller+0x1380>)
   a0edc:	2202      	movs	r2, #2
   a0ede:	701a      	strb	r2, [r3, #0]
				cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
   a0ee0:	4b67      	ldr	r3, [pc, #412]	; (a1080 <Cl_dprep_controller+0x1368>)
   a0ee2:	2206      	movs	r2, #6
   a0ee4:	701a      	strb	r2, [r3, #0]
						
			}
		
		if(wait_timeout_counter > 15){
   a0ee6:	4b62      	ldr	r3, [pc, #392]	; (a1070 <Cl_dprep_controller+0x1358>)
   a0ee8:	681b      	ldr	r3, [r3, #0]
   a0eea:	2b0f      	cmp	r3, #15
   a0eec:	dd0b      	ble.n	a0f06 <Cl_dprep_controller+0x11ee>
			
			// stop preparation
			Cl_Dprep_Priming_Stop();
   a0eee:	4b62      	ldr	r3, [pc, #392]	; (a1078 <Cl_dprep_controller+0x1360>)
   a0ef0:	4798      	blx	r3
			//Cl_dprep_StopMixing();
			cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
   a0ef2:	2009      	movs	r0, #9
   a0ef4:	2100      	movs	r1, #0
   a0ef6:	4b61      	ldr	r3, [pc, #388]	; (a107c <Cl_dprep_controller+0x1364>)
   a0ef8:	4798      	blx	r3
			cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME_STOPPED;
   a0efa:	4b61      	ldr	r3, [pc, #388]	; (a1080 <Cl_dprep_controller+0x1368>)
   a0efc:	2207      	movs	r2, #7
   a0efe:	701a      	strb	r2, [r3, #0]
			Cl_deactivate_prep_alarms();
   a0f00:	4b60      	ldr	r3, [pc, #384]	; (a1084 <Cl_dprep_controller+0x136c>)
   a0f02:	4798      	blx	r3
// 				//cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
		}
		
		 
		
		break;
   a0f04:	e04c      	b.n	a0fa0 <Cl_dprep_controller+0x1288>
   a0f06:	e04b      	b.n	a0fa0 <Cl_dprep_controller+0x1288>
		
		case EVENT_DPREP_ALARM:
		Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   a0f08:	4b64      	ldr	r3, [pc, #400]	; (a109c <Cl_dprep_controller+0x1384>)
   a0f0a:	4798      	blx	r3
   a0f0c:	4603      	mov	r3, r0
   a0f0e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		break;
   a0f12:	e045      	b.n	a0fa0 <Cl_dprep_controller+0x1288>
		
		case EVENT_DPREP_STOP_DIALYSER_PRIME:
		
		Cl_dprep_StopMixing();
   a0f14:	4b62      	ldr	r3, [pc, #392]	; (a10a0 <Cl_dprep_controller+0x1388>)
   a0f16:	4798      	blx	r3
		
		cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
   a0f18:	2009      	movs	r0, #9
   a0f1a:	2100      	movs	r1, #0
   a0f1c:	4b57      	ldr	r3, [pc, #348]	; (a107c <Cl_dprep_controller+0x1364>)
   a0f1e:	4798      	blx	r3
		cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME_STOPPED;
   a0f20:	4b57      	ldr	r3, [pc, #348]	; (a1080 <Cl_dprep_controller+0x1368>)
   a0f22:	2207      	movs	r2, #7
   a0f24:	701a      	strb	r2, [r3, #0]
		Cl_deactivate_prep_alarms();
   a0f26:	4b57      	ldr	r3, [pc, #348]	; (a1084 <Cl_dprep_controller+0x136c>)
   a0f28:	4798      	blx	r3
	//	Cl_Dprep_Priming_Stop();
// 		Cl_dprep_StopMixing();
// 		cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
// 		cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME_STOPPED;
		break;
   a0f2a:	e039      	b.n	a0fa0 <Cl_dprep_controller+0x1288>
		
		case EVENT_DPREP_CLR_ALARM:
		
					if(powerFailureFlag == 1){
   a0f2c:	4b5d      	ldr	r3, [pc, #372]	; (a10a4 <Cl_dprep_controller+0x138c>)
   a0f2e:	681b      	ldr	r3, [r3, #0]
   a0f30:	2b01      	cmp	r3, #1
   a0f32:	d11f      	bne.n	a0f74 <Cl_dprep_controller+0x125c>
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_POWER_FAILURE,&dprep_powerFailSensorData);
   a0f34:	2024      	movs	r0, #36	; 0x24
   a0f36:	495c      	ldr	r1, [pc, #368]	; (a10a8 <Cl_dprep_controller+0x1390>)
   a0f38:	4b5c      	ldr	r3, [pc, #368]	; (a10ac <Cl_dprep_controller+0x1394>)
   a0f3a:	4798      	blx	r3
					
								if(dprep_powerFailSensorData == 0){
   a0f3c:	4b5a      	ldr	r3, [pc, #360]	; (a10a8 <Cl_dprep_controller+0x1390>)
   a0f3e:	881b      	ldrh	r3, [r3, #0]
   a0f40:	2b00      	cmp	r3, #0
   a0f42:	d12c      	bne.n	a0f9e <Cl_dprep_controller+0x1286>
						
						powerFailureFlag = 0;
   a0f44:	4b57      	ldr	r3, [pc, #348]	; (a10a4 <Cl_dprep_controller+0x138c>)
   a0f46:	2200      	movs	r2, #0
   a0f48:	601a      	str	r2, [r3, #0]
						command = CON_TX_COMMAND_ALARM_CLEARED;
   a0f4a:	2351      	movs	r3, #81	; 0x51
   a0f4c:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
							Cl_SendDatatoconsole(command,&data,0);
   a0f50:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
   a0f54:	f107 0370 	add.w	r3, r7, #112	; 0x70
   a0f58:	4610      	mov	r0, r2
   a0f5a:	4619      	mov	r1, r3
   a0f5c:	2200      	movs	r2, #0
   a0f5e:	4b42      	ldr	r3, [pc, #264]	; (a1068 <Cl_dprep_controller+0x1350>)
   a0f60:	4798      	blx	r3
							sv_cntrl_resetyellowalarm();
   a0f62:	4b53      	ldr	r3, [pc, #332]	; (a10b0 <Cl_dprep_controller+0x1398>)
   a0f64:	4798      	blx	r3
							sv_cntrl_resetredalarm();
   a0f66:	4b53      	ldr	r3, [pc, #332]	; (a10b4 <Cl_dprep_controller+0x139c>)
   a0f68:	4798      	blx	r3
							sv_cntrl_nobuzzer();
   a0f6a:	4b53      	ldr	r3, [pc, #332]	; (a10b8 <Cl_dprep_controller+0x13a0>)
   a0f6c:	4798      	blx	r3
							Cl_Dprep_ResetAlertsforReassertion();
   a0f6e:	4b53      	ldr	r3, [pc, #332]	; (a10bc <Cl_dprep_controller+0x13a4>)
   a0f70:	4798      	blx	r3
		sv_cntrl_resetredalarm();
		sv_cntrl_nobuzzer();
		Cl_Dprep_ResetAlertsforReassertion();
		//sv_cntrl_disable_bypass();
					}
		break;
   a0f72:	e014      	b.n	a0f9e <Cl_dprep_controller+0x1286>
					}
					}
					else{			
					
		
			command = CON_TX_COMMAND_ALARM_CLEARED;
   a0f74:	2351      	movs	r3, #81	; 0x51
   a0f76:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			Cl_SendDatatoconsole(command,&data,0);
   a0f7a:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
   a0f7e:	f107 0370 	add.w	r3, r7, #112	; 0x70
   a0f82:	4610      	mov	r0, r2
   a0f84:	4619      	mov	r1, r3
   a0f86:	2200      	movs	r2, #0
   a0f88:	4b37      	ldr	r3, [pc, #220]	; (a1068 <Cl_dprep_controller+0x1350>)
   a0f8a:	4798      	blx	r3
						
		sv_cntrl_resetyellowalarm();
   a0f8c:	4b48      	ldr	r3, [pc, #288]	; (a10b0 <Cl_dprep_controller+0x1398>)
   a0f8e:	4798      	blx	r3
		sv_cntrl_resetredalarm();
   a0f90:	4b48      	ldr	r3, [pc, #288]	; (a10b4 <Cl_dprep_controller+0x139c>)
   a0f92:	4798      	blx	r3
		sv_cntrl_nobuzzer();
   a0f94:	4b48      	ldr	r3, [pc, #288]	; (a10b8 <Cl_dprep_controller+0x13a0>)
   a0f96:	4798      	blx	r3
		Cl_Dprep_ResetAlertsforReassertion();
   a0f98:	4b48      	ldr	r3, [pc, #288]	; (a10bc <Cl_dprep_controller+0x13a4>)
   a0f9a:	4798      	blx	r3
		//sv_cntrl_disable_bypass();
					}
		break;
   a0f9c:	e7ff      	b.n	a0f9e <Cl_dprep_controller+0x1286>
   a0f9e:	bf00      	nop
			
		
		}
		}
		
		break;
   a0fa0:	f000 bc09 	b.w	a17b6 <Cl_dprep_controller+0x1a9e>
		case CL_DPREP_STATE_POST_PRIME_STANDBY:
		switch(cl_dprepevent)
   a0fa4:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
   a0fa8:	3b01      	subs	r3, #1
   a0faa:	2b19      	cmp	r3, #25
   a0fac:	f200 8169 	bhi.w	a1282 <Cl_dprep_controller+0x156a>
   a0fb0:	a201      	add	r2, pc, #4	; (adr r2, a0fb8 <Cl_dprep_controller+0x12a0>)
   a0fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a0fb6:	bf00      	nop
   a0fb8:	000a11d1 	.word	0x000a11d1
   a0fbc:	000a1283 	.word	0x000a1283
   a0fc0:	000a1101 	.word	0x000a1101
   a0fc4:	000a1021 	.word	0x000a1021
   a0fc8:	000a1283 	.word	0x000a1283
   a0fcc:	000a1283 	.word	0x000a1283
   a0fd0:	000a119f 	.word	0x000a119f
   a0fd4:	000a1283 	.word	0x000a1283
   a0fd8:	000a1283 	.word	0x000a1283
   a0fdc:	000a1283 	.word	0x000a1283
   a0fe0:	000a1283 	.word	0x000a1283
   a0fe4:	000a1165 	.word	0x000a1165
   a0fe8:	000a117b 	.word	0x000a117b
   a0fec:	000a1283 	.word	0x000a1283
   a0ff0:	000a1283 	.word	0x000a1283
   a0ff4:	000a1283 	.word	0x000a1283
   a0ff8:	000a1283 	.word	0x000a1283
   a0ffc:	000a1283 	.word	0x000a1283
   a1000:	000a1283 	.word	0x000a1283
   a1004:	000a1283 	.word	0x000a1283
   a1008:	000a1283 	.word	0x000a1283
   a100c:	000a1283 	.word	0x000a1283
   a1010:	000a1245 	.word	0x000a1245
   a1014:	000a1283 	.word	0x000a1283
   a1018:	000a1193 	.word	0x000a1193
   a101c:	000a1185 	.word	0x000a1185
					{
						case EVENT_DPREP_COMMAND_GET_DATA:
							if(Cl_ConsoleRxMsg.msgready == true)
   a1020:	4b27      	ldr	r3, [pc, #156]	; (a10c0 <Cl_dprep_controller+0x13a8>)
   a1022:	7e1b      	ldrb	r3, [r3, #24]
   a1024:	2b00      	cmp	r3, #0
   a1026:	d06a      	beq.n	a10fe <Cl_dprep_controller+0x13e6>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   a1028:	4b25      	ldr	r3, [pc, #148]	; (a10c0 <Cl_dprep_controller+0x13a8>)
   a102a:	791b      	ldrb	r3, [r3, #4]
   a102c:	2b03      	cmp	r3, #3
   a102e:	d002      	beq.n	a1036 <Cl_dprep_controller+0x131e>
   a1030:	2b04      	cmp	r3, #4
   a1032:	d047      	beq.n	a10c4 <Cl_dprep_controller+0x13ac>
									command = CON_TX_COMMAND_SYSDATA;
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:break;
   a1034:	e063      	b.n	a10fe <Cl_dprep_controller+0x13e6>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case CON_RX_PARAM_DATA_DIALYSER_PRIME_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   a1036:	2316      	movs	r3, #22
   a1038:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSER_PRIME_STATUS;
   a103c:	2303      	movs	r3, #3
   a103e:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
									dataarray[1] = 0;									
   a1042:	2300      	movs	r3, #0
   a1044:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a1048:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
   a104c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
   a1050:	4610      	mov	r0, r2
   a1052:	4619      	mov	r1, r3
   a1054:	2202      	movs	r2, #2
   a1056:	4b04      	ldr	r3, [pc, #16]	; (a1068 <Cl_dprep_controller+0x1350>)
   a1058:	4798      	blx	r3
   a105a:	4603      	mov	r3, r0
   a105c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
									break;
   a1060:	e04d      	b.n	a10fe <Cl_dprep_controller+0x13e6>
   a1062:	bf00      	nop
   a1064:	0009bcdd 	.word	0x0009bcdd
   a1068:	0009d1e9 	.word	0x0009d1e9
   a106c:	00082a35 	.word	0x00082a35
   a1070:	20071d90 	.word	0x20071d90
   a1074:	20071d94 	.word	0x20071d94
   a1078:	000a3c3d 	.word	0x000a3c3d
   a107c:	000880c1 	.word	0x000880c1
   a1080:	20071dcf 	.word	0x20071dcf
   a1084:	000a3db9 	.word	0x000a3db9
   a1088:	20071d8c 	.word	0x20071d8c
   a108c:	000a2349 	.word	0x000a2349
   a1090:	000a3c75 	.word	0x000a3c75
   a1094:	0009b5b1 	.word	0x0009b5b1
   a1098:	20071dd0 	.word	0x20071dd0
   a109c:	000a1b39 	.word	0x000a1b39
   a10a0:	000a3d09 	.word	0x000a3d09
   a10a4:	20071d84 	.word	0x20071d84
   a10a8:	20071d88 	.word	0x20071d88
   a10ac:	0008fd69 	.word	0x0008fd69
   a10b0:	0009b699 	.word	0x0009b699
   a10b4:	0009b685 	.word	0x0009b685
   a10b8:	0009b6c1 	.word	0x0009b6c1
   a10bc:	000a2835 	.word	0x000a2835
   a10c0:	200725bc 	.word	0x200725bc
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   a10c4:	2316      	movs	r3, #22
   a10c6:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   a10ca:	2304      	movs	r3, #4
   a10cc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   a10d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
   a10d4:	3301      	adds	r3, #1
   a10d6:	2004      	movs	r0, #4
   a10d8:	4619      	mov	r1, r3
   a10da:	4b8b      	ldr	r3, [pc, #556]	; (a1308 <Cl_dprep_controller+0x15f0>)
   a10dc:	4798      	blx	r3
   a10de:	4603      	mov	r3, r0
   a10e0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a10e4:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
   a10e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
   a10ec:	4610      	mov	r0, r2
   a10ee:	4619      	mov	r1, r3
   a10f0:	2202      	movs	r2, #2
   a10f2:	4b86      	ldr	r3, [pc, #536]	; (a130c <Cl_dprep_controller+0x15f4>)
   a10f4:	4798      	blx	r3
   a10f6:	4603      	mov	r3, r0
   a10f8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
									break;
   a10fc:	bf00      	nop
									default:break;
								}
							}
						break;
   a10fe:	e0c1      	b.n	a1284 <Cl_dprep_controller+0x156c>
						case EVENT_DPREP_COMMAND_SET_DATA:
								 if(Cl_ConsoleRxMsg.msgready == true)
   a1100:	4b83      	ldr	r3, [pc, #524]	; (a1310 <Cl_dprep_controller+0x15f8>)
   a1102:	7e1b      	ldrb	r3, [r3, #24]
   a1104:	2b00      	cmp	r3, #0
   a1106:	d02c      	beq.n	a1162 <Cl_dprep_controller+0x144a>
								 {
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 Cl_Uint8Type count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
   a1108:	4b81      	ldr	r3, [pc, #516]	; (a1310 <Cl_dprep_controller+0x15f8>)
   a110a:	791b      	ldrb	r3, [r3, #4]
   a110c:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   a1110:	2300      	movs	r3, #0
   a1112:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
   a1116:	e011      	b.n	a113c <Cl_dprep_controller+0x1424>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
   a1118:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
   a111c:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
   a1120:	3201      	adds	r2, #1
   a1122:	497b      	ldr	r1, [pc, #492]	; (a1310 <Cl_dprep_controller+0x15f8>)
   a1124:	440a      	add	r2, r1
   a1126:	7912      	ldrb	r2, [r2, #4]
   a1128:	f107 0198 	add.w	r1, r7, #152	; 0x98
   a112c:	440b      	add	r3, r1
   a112e:	f803 2c64 	strb.w	r2, [r3, #-100]
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 Cl_Uint8Type count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   a1132:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
   a1136:	3301      	adds	r3, #1
   a1138:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
   a113c:	4b74      	ldr	r3, [pc, #464]	; (a1310 <Cl_dprep_controller+0x15f8>)
   a113e:	78db      	ldrb	r3, [r3, #3]
   a1140:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
   a1144:	429a      	cmp	r2, r3
   a1146:	d3e7      	bcc.n	a1118 <Cl_dprep_controller+0x1400>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
							 
									 }
									 Cl_Dprep_setdata(dataId, cl_PrepData,count);
   a1148:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
   a114c:	f897 4095 	ldrb.w	r4, [r7, #149]	; 0x95
   a1150:	4618      	mov	r0, r3
   a1152:	f107 0334 	add.w	r3, r7, #52	; 0x34
   a1156:	e893 0006 	ldmia.w	r3, {r1, r2}
   a115a:	4623      	mov	r3, r4
   a115c:	4c6d      	ldr	r4, [pc, #436]	; (a1314 <Cl_dprep_controller+0x15fc>)
   a115e:	47a0      	blx	r4
						 
						 
						 
								 }
	
						break;
   a1160:	e090      	b.n	a1284 <Cl_dprep_controller+0x156c>
   a1162:	e08f      	b.n	a1284 <Cl_dprep_controller+0x156c>
						case EVENT_DPREP_DILYSER_CONNECTED:
		
						// check for micro switches
						Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_CONNECTED_CONFIRMED,&data,0);
   a1164:	f107 0370 	add.w	r3, r7, #112	; 0x70
   a1168:	2025      	movs	r0, #37	; 0x25
   a116a:	4619      	mov	r1, r3
   a116c:	2200      	movs	r2, #0
   a116e:	4b67      	ldr	r3, [pc, #412]	; (a130c <Cl_dprep_controller+0x15f4>)
   a1170:	4798      	blx	r3
   a1172:	4603      	mov	r3, r0
   a1174:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		
						break;
   a1178:	e084      	b.n	a1284 <Cl_dprep_controller+0x156c>
						case EVENT_DPREP_START_DIALISER_PRIME:
				//		sv_prop_startmixing();
				//		Cl_bc_controller(BC_EVENT_RESUME);
								Cl_Dprep_StartDialyserPrime();
   a117a:	4b67      	ldr	r3, [pc, #412]	; (a1318 <Cl_dprep_controller+0x1600>)
   a117c:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   a117e:	4b67      	ldr	r3, [pc, #412]	; (a131c <Cl_dprep_controller+0x1604>)
   a1180:	4798      	blx	r3
								 //sv_prop_startmixing();
						break;
   a1182:	e07f      	b.n	a1284 <Cl_dprep_controller+0x156c>
						case EVENT_DPREP_ALERT:
						Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   a1184:	f107 0333 	add.w	r3, r7, #51	; 0x33
   a1188:	203c      	movs	r0, #60	; 0x3c
   a118a:	4619      	mov	r1, r3
   a118c:	4b64      	ldr	r3, [pc, #400]	; (a1320 <Cl_dprep_controller+0x1608>)
   a118e:	4798      	blx	r3
						{
							//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);		
				
						}

						break;
   a1190:	e078      	b.n	a1284 <Cl_dprep_controller+0x156c>
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   a1192:	4b64      	ldr	r3, [pc, #400]	; (a1324 <Cl_dprep_controller+0x160c>)
   a1194:	4798      	blx	r3
   a1196:	4603      	mov	r3, r0
   a1198:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						break;
   a119c:	e072      	b.n	a1284 <Cl_dprep_controller+0x156c>
						case EVENT_DPREP_COMMAND_SET_BLDPUMPRATE:
											if(Cl_ConsoleRxMsg.msgready == true)
   a119e:	4b5c      	ldr	r3, [pc, #368]	; (a1310 <Cl_dprep_controller+0x15f8>)
   a11a0:	7e1b      	ldrb	r3, [r3, #24]
   a11a2:	2b00      	cmp	r3, #0
   a11a4:	d013      	beq.n	a11ce <Cl_dprep_controller+0x14b6>
											{
												
												cl_Datastreamtype cl_temp  ;
												cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a11a6:	4b5a      	ldr	r3, [pc, #360]	; (a1310 <Cl_dprep_controller+0x15f8>)
   a11a8:	791b      	ldrb	r3, [r3, #4]
   a11aa:	733b      	strb	r3, [r7, #12]
												cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   a11ac:	4b58      	ldr	r3, [pc, #352]	; (a1310 <Cl_dprep_controller+0x15f8>)
   a11ae:	791b      	ldrb	r3, [r3, #4]
   a11b0:	737b      	strb	r3, [r7, #13]
												cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   a11b2:	4b57      	ldr	r3, [pc, #348]	; (a1310 <Cl_dprep_controller+0x15f8>)
   a11b4:	791b      	ldrb	r3, [r3, #4]
   a11b6:	73bb      	strb	r3, [r7, #14]
												cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   a11b8:	4b55      	ldr	r3, [pc, #340]	; (a1310 <Cl_dprep_controller+0x15f8>)
   a11ba:	791b      	ldrb	r3, [r3, #4]
   a11bc:	73fb      	strb	r3, [r7, #15]
												cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   a11be:	89bb      	ldrh	r3, [r7, #12]
   a11c0:	b29b      	uxth	r3, r3
   a11c2:	b21b      	sxth	r3, r3
   a11c4:	200e      	movs	r0, #14
   a11c6:	4619      	mov	r1, r3
   a11c8:	4b57      	ldr	r3, [pc, #348]	; (a1328 <Cl_dprep_controller+0x1610>)
   a11ca:	4798      	blx	r3
											}
						break;
   a11cc:	e05a      	b.n	a1284 <Cl_dprep_controller+0x156c>
   a11ce:	e059      	b.n	a1284 <Cl_dprep_controller+0x156c>
						
						case EVENT_DPREP_CLR_ALARM:
						
									if(powerFailureFlag == 1){
   a11d0:	4b56      	ldr	r3, [pc, #344]	; (a132c <Cl_dprep_controller+0x1614>)
   a11d2:	681b      	ldr	r3, [r3, #0]
   a11d4:	2b01      	cmp	r3, #1
   a11d6:	d11f      	bne.n	a1218 <Cl_dprep_controller+0x1500>
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_POWER_FAILURE,&dprep_powerFailSensorData);
   a11d8:	2024      	movs	r0, #36	; 0x24
   a11da:	4955      	ldr	r1, [pc, #340]	; (a1330 <Cl_dprep_controller+0x1618>)
   a11dc:	4b55      	ldr	r3, [pc, #340]	; (a1334 <Cl_dprep_controller+0x161c>)
   a11de:	4798      	blx	r3
					
								if(dprep_powerFailSensorData == 0){
   a11e0:	4b53      	ldr	r3, [pc, #332]	; (a1330 <Cl_dprep_controller+0x1618>)
   a11e2:	881b      	ldrh	r3, [r3, #0]
   a11e4:	2b00      	cmp	r3, #0
   a11e6:	d12c      	bne.n	a1242 <Cl_dprep_controller+0x152a>
						
						powerFailureFlag = 0;
   a11e8:	4b50      	ldr	r3, [pc, #320]	; (a132c <Cl_dprep_controller+0x1614>)
   a11ea:	2200      	movs	r2, #0
   a11ec:	601a      	str	r2, [r3, #0]
						command = CON_TX_COMMAND_ALARM_CLEARED;
   a11ee:	2351      	movs	r3, #81	; 0x51
   a11f0:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
							Cl_SendDatatoconsole(command,&data,0);
   a11f4:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
   a11f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
   a11fc:	4610      	mov	r0, r2
   a11fe:	4619      	mov	r1, r3
   a1200:	2200      	movs	r2, #0
   a1202:	4b42      	ldr	r3, [pc, #264]	; (a130c <Cl_dprep_controller+0x15f4>)
   a1204:	4798      	blx	r3
							sv_cntrl_resetyellowalarm();
   a1206:	4b4c      	ldr	r3, [pc, #304]	; (a1338 <Cl_dprep_controller+0x1620>)
   a1208:	4798      	blx	r3
							sv_cntrl_resetredalarm();
   a120a:	4b4c      	ldr	r3, [pc, #304]	; (a133c <Cl_dprep_controller+0x1624>)
   a120c:	4798      	blx	r3
							sv_cntrl_nobuzzer();
   a120e:	4b4c      	ldr	r3, [pc, #304]	; (a1340 <Cl_dprep_controller+0x1628>)
   a1210:	4798      	blx	r3
							Cl_Dprep_ResetAlertsforReassertion();
   a1212:	4b4c      	ldr	r3, [pc, #304]	; (a1344 <Cl_dprep_controller+0x162c>)
   a1214:	4798      	blx	r3
						sv_cntrl_resetredalarm();
						sv_cntrl_nobuzzer();
						Cl_Dprep_ResetAlertsforReassertion();
						//sv_cntrl_disable_bypass();
					}
						break;
   a1216:	e035      	b.n	a1284 <Cl_dprep_controller+0x156c>
					}
					else{			
					
						
						
							command = CON_TX_COMMAND_ALARM_CLEARED;
   a1218:	2351      	movs	r3, #81	; 0x51
   a121a:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
							Cl_SendDatatoconsole(command,&data,0);
   a121e:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
   a1222:	f107 0370 	add.w	r3, r7, #112	; 0x70
   a1226:	4610      	mov	r0, r2
   a1228:	4619      	mov	r1, r3
   a122a:	2200      	movs	r2, #0
   a122c:	4b37      	ldr	r3, [pc, #220]	; (a130c <Cl_dprep_controller+0x15f4>)
   a122e:	4798      	blx	r3
						
						sv_cntrl_resetyellowalarm();
   a1230:	4b41      	ldr	r3, [pc, #260]	; (a1338 <Cl_dprep_controller+0x1620>)
   a1232:	4798      	blx	r3
						sv_cntrl_resetredalarm();
   a1234:	4b41      	ldr	r3, [pc, #260]	; (a133c <Cl_dprep_controller+0x1624>)
   a1236:	4798      	blx	r3
						sv_cntrl_nobuzzer();
   a1238:	4b41      	ldr	r3, [pc, #260]	; (a1340 <Cl_dprep_controller+0x1628>)
   a123a:	4798      	blx	r3
						Cl_Dprep_ResetAlertsforReassertion();
   a123c:	4b41      	ldr	r3, [pc, #260]	; (a1344 <Cl_dprep_controller+0x162c>)
   a123e:	4798      	blx	r3
						//sv_cntrl_disable_bypass();
					}
						break;
   a1240:	e020      	b.n	a1284 <Cl_dprep_controller+0x156c>
   a1242:	e01f      	b.n	a1284 <Cl_dprep_controller+0x156c>
						case EVENT_DPREP_TICK_500MS:
						//UpdateHeaterControls();
						break;
						case  EVENT_DPREP_TICK_MINUTE:
						{
							float temp1=0;
   a1244:	f04f 0300 	mov.w	r3, #0
   a1248:	67fb      	str	r3, [r7, #124]	; 0x7c
							Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp_temp3);
   a124a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
   a124e:	2014      	movs	r0, #20
   a1250:	4619      	mov	r1, r3
   a1252:	4b38      	ldr	r3, [pc, #224]	; (a1334 <Cl_dprep_controller+0x161c>)
   a1254:	4798      	blx	r3
// 							uint16_t cal_data  = (402 *100* temp_temp3)/(2*32768);			// resistance of PT100
// 							res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
// 							temp_temp3 = res_temp_value/100;									// Temp3 value in XX.yy format
// 	//						temp_temp3 = temp_temp3 - 3.1 + 1.4;										// sensor offset
// 							temp_temp3 = temp_temp3 - 0.4;										// sensor offset
							temp3_cel = (float)temp_temp3 /100;
   a1256:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
   a1258:	4b3b      	ldr	r3, [pc, #236]	; (a1348 <Cl_dprep_controller+0x1630>)
   a125a:	4610      	mov	r0, r2
   a125c:	4798      	blx	r3
   a125e:	4602      	mov	r2, r0
   a1260:	4b3a      	ldr	r3, [pc, #232]	; (a134c <Cl_dprep_controller+0x1634>)
   a1262:	4610      	mov	r0, r2
   a1264:	493a      	ldr	r1, [pc, #232]	; (a1350 <Cl_dprep_controller+0x1638>)
   a1266:	4798      	blx	r3
   a1268:	4603      	mov	r3, r0
   a126a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
							Cl_Dprep_filling_secondscounter++;
   a126e:	4b39      	ldr	r3, [pc, #228]	; (a1354 <Cl_dprep_controller+0x163c>)
   a1270:	881b      	ldrh	r3, [r3, #0]
   a1272:	b29b      	uxth	r3, r3
   a1274:	b29b      	uxth	r3, r3
   a1276:	3301      	adds	r3, #1
   a1278:	b29b      	uxth	r3, r3
   a127a:	b29a      	uxth	r2, r3
   a127c:	4b35      	ldr	r3, [pc, #212]	; (a1354 <Cl_dprep_controller+0x163c>)
   a127e:	801a      	strh	r2, [r3, #0]
													}
										
													temp3_cel_backup = temp3_cel;
								}
					#endif
						break;
   a1280:	e000      	b.n	a1284 <Cl_dprep_controller+0x156c>
						default:
						break;
   a1282:	bf00      	nop
					}
		break;
   a1284:	e29c      	b.n	a17c0 <Cl_dprep_controller+0x1aa8>

		case CL_DPREP_STATE_DIALISER_PRIME:
					switch(cl_dprepevent)
   a1286:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
   a128a:	3b01      	subs	r3, #1
   a128c:	2b19      	cmp	r3, #25
   a128e:	f200 8294 	bhi.w	a17ba <Cl_dprep_controller+0x1aa2>
   a1292:	a201      	add	r2, pc, #4	; (adr r2, a1298 <Cl_dprep_controller+0x1580>)
   a1294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a1298:	000a1447 	.word	0x000a1447
   a129c:	000a17bb 	.word	0x000a17bb
   a12a0:	000a17bb 	.word	0x000a17bb
   a12a4:	000a17bb 	.word	0x000a17bb
   a12a8:	000a17bb 	.word	0x000a17bb
   a12ac:	000a17bb 	.word	0x000a17bb
   a12b0:	000a17bb 	.word	0x000a17bb
   a12b4:	000a17bb 	.word	0x000a17bb
   a12b8:	000a17bb 	.word	0x000a17bb
   a12bc:	000a17bb 	.word	0x000a17bb
   a12c0:	000a17bb 	.word	0x000a17bb
   a12c4:	000a17bb 	.word	0x000a17bb
   a12c8:	000a17bb 	.word	0x000a17bb
   a12cc:	000a1427 	.word	0x000a1427
   a12d0:	000a17bb 	.word	0x000a17bb
   a12d4:	000a17bb 	.word	0x000a17bb
   a12d8:	000a17bb 	.word	0x000a17bb
   a12dc:	000a17bb 	.word	0x000a17bb
   a12e0:	000a14c3 	.word	0x000a14c3
   a12e4:	000a17bb 	.word	0x000a17bb
   a12e8:	000a14c3 	.word	0x000a14c3
   a12ec:	000a1359 	.word	0x000a1359
   a12f0:	000a1301 	.word	0x000a1301
   a12f4:	000a17bb 	.word	0x000a17bb
   a12f8:	000a142d 	.word	0x000a142d
   a12fc:	000a1439 	.word	0x000a1439
						break;
						case EVENT_DPREP_TICK_500MS:
					//	UpdateHeaterControls();
						break;
						case EVENT_DPREP_TICK_MINUTE:
							Cl_Dprep_ResetAlertsforReassertion();
   a1300:	4b10      	ldr	r3, [pc, #64]	; (a1344 <Cl_dprep_controller+0x162c>)
   a1302:	4798      	blx	r3
						break;
   a1304:	e0de      	b.n	a14c4 <Cl_dprep_controller+0x17ac>
   a1306:	bf00      	nop
   a1308:	0009bcdd 	.word	0x0009bcdd
   a130c:	0009d1e9 	.word	0x0009d1e9
   a1310:	200725bc 	.word	0x200725bc
   a1314:	000a29f9 	.word	0x000a29f9
   a1318:	000a38a1 	.word	0x000a38a1
   a131c:	0009b579 	.word	0x0009b579
   a1320:	00082c09 	.word	0x00082c09
   a1324:	000a1b39 	.word	0x000a1b39
   a1328:	000880c1 	.word	0x000880c1
   a132c:	20071d84 	.word	0x20071d84
   a1330:	20071d88 	.word	0x20071d88
   a1334:	0008fd69 	.word	0x0008fd69
   a1338:	0009b699 	.word	0x0009b699
   a133c:	0009b685 	.word	0x0009b685
   a1340:	0009b6c1 	.word	0x0009b6c1
   a1344:	000a2835 	.word	0x000a2835
   a1348:	000a8255 	.word	0x000a8255
   a134c:	000a846d 	.word	0x000a846d
   a1350:	42c80000 	.word	0x42c80000
   a1354:	20071dae 	.word	0x20071dae
						case EVENT_DPREP_TICK_SECOND:
						//	UpdateHeaterControls();
						{
							float temp1=0;
   a1358:	f04f 0300 	mov.w	r3, #0
   a135c:	67bb      	str	r3, [r7, #120]	; 0x78
							Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp_temp3);
   a135e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
   a1362:	2014      	movs	r0, #20
   a1364:	4619      	mov	r1, r3
   a1366:	4ba3      	ldr	r3, [pc, #652]	; (a15f4 <Cl_dprep_controller+0x18dc>)
   a1368:	4798      	blx	r3
// 						uint16_t cal_data  = (402 *100* temp_temp3)/(2*32768);			// resistance of PT100
// 						res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
// 						temp_temp3 = res_temp_value/100;									// Temp3 value in XX.yy format
// //						temp_temp3 = temp_temp3 - 3.1 + 1.4;										// sensor offset
// //						temp_temp3 = temp_temp3 - 3.1 - 2;										// sensor offset
						temp3_cel = (float)temp_temp3;
   a136a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
   a136c:	4ba2      	ldr	r3, [pc, #648]	; (a15f8 <Cl_dprep_controller+0x18e0>)
   a136e:	4610      	mov	r0, r2
   a1370:	4798      	blx	r3
   a1372:	4603      	mov	r3, r0
   a1374:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
						
							Cl_Dprep_filling_secondscounter++;
   a1378:	4ba0      	ldr	r3, [pc, #640]	; (a15fc <Cl_dprep_controller+0x18e4>)
   a137a:	881b      	ldrh	r3, [r3, #0]
   a137c:	b29b      	uxth	r3, r3
   a137e:	b29b      	uxth	r3, r3
   a1380:	3301      	adds	r3, #1
   a1382:	b29b      	uxth	r3, r3
   a1384:	b29a      	uxth	r2, r3
   a1386:	4b9d      	ldr	r3, [pc, #628]	; (a15fc <Cl_dprep_controller+0x18e4>)
   a1388:	801a      	strh	r2, [r3, #0]
										temp3_cel_backup = temp3_cel;
					}
					
					#endif

							Cl_Dprep_DialyserPrime_secondscounter++;
   a138a:	4b9d      	ldr	r3, [pc, #628]	; (a1600 <Cl_dprep_controller+0x18e8>)
   a138c:	881b      	ldrh	r3, [r3, #0]
   a138e:	b29b      	uxth	r3, r3
   a1390:	b29b      	uxth	r3, r3
   a1392:	3301      	adds	r3, #1
   a1394:	b29b      	uxth	r3, r3
   a1396:	b29a      	uxth	r2, r3
   a1398:	4b99      	ldr	r3, [pc, #612]	; (a1600 <Cl_dprep_controller+0x18e8>)
   a139a:	801a      	strh	r2, [r3, #0]
							
							
							if(Cl_Dprep_DialyserPrime_secondscounter == 30){ // activate flow alarms only after 30 seconds into rinse
   a139c:	4b98      	ldr	r3, [pc, #608]	; (a1600 <Cl_dprep_controller+0x18e8>)
   a139e:	881b      	ldrh	r3, [r3, #0]
   a13a0:	b21b      	sxth	r3, r3
   a13a2:	2b1e      	cmp	r3, #30
   a13a4:	d114      	bne.n	a13d0 <Cl_dprep_controller+0x16b8>
								
								
								Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );
   a13a6:	200c      	movs	r0, #12
   a13a8:	2101      	movs	r1, #1
   a13aa:	4b96      	ldr	r3, [pc, #600]	; (a1604 <Cl_dprep_controller+0x18ec>)
   a13ac:	4798      	blx	r3
   a13ae:	4603      	mov	r3, r0
   a13b0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
								Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   a13b4:	200d      	movs	r0, #13
   a13b6:	2101      	movs	r1, #1
   a13b8:	4b92      	ldr	r3, [pc, #584]	; (a1604 <Cl_dprep_controller+0x18ec>)
   a13ba:	4798      	blx	r3
   a13bc:	4603      	mov	r3, r0
   a13be:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
								Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
   a13c2:	200e      	movs	r0, #14
   a13c4:	2101      	movs	r1, #1
   a13c6:	4b8f      	ldr	r3, [pc, #572]	; (a1604 <Cl_dprep_controller+0x18ec>)
   a13c8:	4798      	blx	r3
   a13ca:	4603      	mov	r3, r0
   a13cc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
								
								
							}
							
							if(Cl_Dprep_DialyserPrime_secondscounter == 60)
   a13d0:	4b8b      	ldr	r3, [pc, #556]	; (a1600 <Cl_dprep_controller+0x18e8>)
   a13d2:	881b      	ldrh	r3, [r3, #0]
   a13d4:	b21b      	sxth	r3, r3
   a13d6:	2b3c      	cmp	r3, #60	; 0x3c
   a13d8:	d101      	bne.n	a13de <Cl_dprep_controller+0x16c6>
							{
								UpdateDprepDialyserPrimeMinuteTick();
   a13da:	4b8b      	ldr	r3, [pc, #556]	; (a1608 <Cl_dprep_controller+0x18f0>)
   a13dc:	4798      	blx	r3
							
							}
							Cl_Dprep_SendPrepStateData(DIALYSER_PRIME_DATA);
   a13de:	2003      	movs	r0, #3
   a13e0:	4b8a      	ldr	r3, [pc, #552]	; (a160c <Cl_dprep_controller+0x18f4>)
   a13e2:	4798      	blx	r3
						//	Cl_dprepretcode = Cl_Dprep_ProcessAlarms();

					// check for sub state time out and transition
					

							if( Cl_Dprep_DialyserPrime_Minutescounter >= CL_DPREP_DIALISER_PRIME_TIMEOUT_MIN)
   a13e4:	4b8a      	ldr	r3, [pc, #552]	; (a1610 <Cl_dprep_controller+0x18f8>)
   a13e6:	881b      	ldrh	r3, [r3, #0]
   a13e8:	b21b      	sxth	r3, r3
   a13ea:	2b04      	cmp	r3, #4
   a13ec:	dd1a      	ble.n	a1424 <Cl_dprep_controller+0x170c>
							{
								Cl_Dprep_DialyserPrime_Minutescounter = 0;
   a13ee:	4b88      	ldr	r3, [pc, #544]	; (a1610 <Cl_dprep_controller+0x18f8>)
   a13f0:	2200      	movs	r2, #0
   a13f2:	801a      	strh	r2, [r3, #0]
							//	sv_cntrl_deactivatepump(BLOODPUMP);
							//	cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_STOP,0);
								cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING, 1); //1 == STOPPED BECAUSE COMPLTED
   a13f4:	2009      	movs	r0, #9
   a13f6:	2101      	movs	r1, #1
   a13f8:	4b86      	ldr	r3, [pc, #536]	; (a1614 <Cl_dprep_controller+0x18fc>)
   a13fa:	4798      	blx	r3
							//	Cl_dprepretcode = sv_cntrl_poweroffheater();
							//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
							//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
								//sv_cntrl_enable_loopback();
								 //sv_prop_stopmixing();
								 Cl_Uint32Type temp = Treatdata[ID_dflow];
   a13fc:	4b86      	ldr	r3, [pc, #536]	; (a1618 <Cl_dprep_controller+0x1900>)
   a13fe:	695b      	ldr	r3, [r3, #20]
   a1400:	677b      	str	r3, [r7, #116]	; 0x74
								 Cl_Uint16Type potvalue=0;
   a1402:	2300      	movs	r3, #0
   a1404:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
// 									 break;
// 									 
// 									 default:
// 									 break;
// 								 }
								sv_cntrl_enable_bypass();
   a1408:	4b84      	ldr	r3, [pc, #528]	; (a161c <Cl_dprep_controller+0x1904>)
   a140a:	4798      	blx	r3
								Cl_dprepretcode =  	cl_dprep_notifydacandgotodpreptandby();	
   a140c:	4b84      	ldr	r3, [pc, #528]	; (a1620 <Cl_dprep_controller+0x1908>)
   a140e:	4798      	blx	r3
   a1410:	4603      	mov	r3, r0
   a1412:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
								cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   a1416:	4b83      	ldr	r3, [pc, #524]	; (a1624 <Cl_dprep_controller+0x190c>)
   a1418:	2201      	movs	r2, #1
   a141a:	701a      	strb	r2, [r3, #0]
								cl_dprepstate = CL_DPREP_STATE_POST_DPREP_STANDBY;	
   a141c:	4b82      	ldr	r3, [pc, #520]	; (a1628 <Cl_dprep_controller+0x1910>)
   a141e:	2208      	movs	r2, #8
   a1420:	701a      	strb	r2, [r3, #0]
							}
						break;
   a1422:	e04f      	b.n	a14c4 <Cl_dprep_controller+0x17ac>
   a1424:	e04e      	b.n	a14c4 <Cl_dprep_controller+0x17ac>
						case EVENT_DPREP_STOP_DIALYSER_PRIME:
						//Cl_Stop_Dialyzer_Prime();
						Cl_Dprep_Priming_Stop();
   a1426:	4b81      	ldr	r3, [pc, #516]	; (a162c <Cl_dprep_controller+0x1914>)
   a1428:	4798      	blx	r3
					//	Cl_dprep_StopMixing();
					//	cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
					//	cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME_STOPPED;
						break;
   a142a:	e04b      	b.n	a14c4 <Cl_dprep_controller+0x17ac>
						break;
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   a142c:	4b80      	ldr	r3, [pc, #512]	; (a1630 <Cl_dprep_controller+0x1918>)
   a142e:	4798      	blx	r3
   a1430:	4603      	mov	r3, r0
   a1432:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						break;
   a1436:	e045      	b.n	a14c4 <Cl_dprep_controller+0x17ac>
						case EVENT_DPREP_ALERT:
						Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   a1438:	f107 0333 	add.w	r3, r7, #51	; 0x33
   a143c:	203c      	movs	r0, #60	; 0x3c
   a143e:	4619      	mov	r1, r3
   a1440:	4b7c      	ldr	r3, [pc, #496]	; (a1634 <Cl_dprep_controller+0x191c>)
   a1442:	4798      	blx	r3
						if(alarmstatus1)
						{
							//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
						}

						break;
   a1444:	e03e      	b.n	a14c4 <Cl_dprep_controller+0x17ac>
						
						case EVENT_DPREP_CLR_ALARM:
						
									if(powerFailureFlag == 1){
   a1446:	4b7c      	ldr	r3, [pc, #496]	; (a1638 <Cl_dprep_controller+0x1920>)
   a1448:	681b      	ldr	r3, [r3, #0]
   a144a:	2b01      	cmp	r3, #1
   a144c:	d121      	bne.n	a1492 <Cl_dprep_controller+0x177a>
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_POWER_FAILURE,&dprep_powerFailSensorData);
   a144e:	2024      	movs	r0, #36	; 0x24
   a1450:	497a      	ldr	r1, [pc, #488]	; (a163c <Cl_dprep_controller+0x1924>)
   a1452:	4b68      	ldr	r3, [pc, #416]	; (a15f4 <Cl_dprep_controller+0x18dc>)
   a1454:	4798      	blx	r3
					
								if(dprep_powerFailSensorData == 0){
   a1456:	4b79      	ldr	r3, [pc, #484]	; (a163c <Cl_dprep_controller+0x1924>)
   a1458:	881b      	ldrh	r3, [r3, #0]
   a145a:	2b00      	cmp	r3, #0
   a145c:	d130      	bne.n	a14c0 <Cl_dprep_controller+0x17a8>
						
						powerFailureFlag = 0;
   a145e:	4b76      	ldr	r3, [pc, #472]	; (a1638 <Cl_dprep_controller+0x1920>)
   a1460:	2200      	movs	r2, #0
   a1462:	601a      	str	r2, [r3, #0]
						command = CON_TX_COMMAND_ALARM_CLEARED;
   a1464:	2351      	movs	r3, #81	; 0x51
   a1466:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
							Cl_SendDatatoconsole(command,&data,0);
   a146a:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
   a146e:	f107 0370 	add.w	r3, r7, #112	; 0x70
   a1472:	4610      	mov	r0, r2
   a1474:	4619      	mov	r1, r3
   a1476:	2200      	movs	r2, #0
   a1478:	4b71      	ldr	r3, [pc, #452]	; (a1640 <Cl_dprep_controller+0x1928>)
   a147a:	4798      	blx	r3
							sv_cntrl_resetyellowalarm();
   a147c:	4b71      	ldr	r3, [pc, #452]	; (a1644 <Cl_dprep_controller+0x192c>)
   a147e:	4798      	blx	r3
							sv_cntrl_resetredalarm();
   a1480:	4b71      	ldr	r3, [pc, #452]	; (a1648 <Cl_dprep_controller+0x1930>)
   a1482:	4798      	blx	r3
							sv_cntrl_nobuzzer();
   a1484:	4b71      	ldr	r3, [pc, #452]	; (a164c <Cl_dprep_controller+0x1934>)
   a1486:	4798      	blx	r3
							Cl_Dprep_ResetAlertsforReassertion();
   a1488:	4b71      	ldr	r3, [pc, #452]	; (a1650 <Cl_dprep_controller+0x1938>)
   a148a:	4798      	blx	r3
							sv_cntrl_disable_bypass();
   a148c:	4b71      	ldr	r3, [pc, #452]	; (a1654 <Cl_dprep_controller+0x193c>)
   a148e:	4798      	blx	r3
						sv_cntrl_resetredalarm();
						sv_cntrl_nobuzzer();
						Cl_Dprep_ResetAlertsforReassertion();
						sv_cntrl_disable_bypass();
					}
						break;
   a1490:	e018      	b.n	a14c4 <Cl_dprep_controller+0x17ac>
									}
					else{			
					
						
						
							command = CON_TX_COMMAND_ALARM_CLEARED;
   a1492:	2351      	movs	r3, #81	; 0x51
   a1494:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
							Cl_SendDatatoconsole(command,&data,0);
   a1498:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
   a149c:	f107 0370 	add.w	r3, r7, #112	; 0x70
   a14a0:	4610      	mov	r0, r2
   a14a2:	4619      	mov	r1, r3
   a14a4:	2200      	movs	r2, #0
   a14a6:	4b66      	ldr	r3, [pc, #408]	; (a1640 <Cl_dprep_controller+0x1928>)
   a14a8:	4798      	blx	r3
						
						sv_cntrl_resetyellowalarm();
   a14aa:	4b66      	ldr	r3, [pc, #408]	; (a1644 <Cl_dprep_controller+0x192c>)
   a14ac:	4798      	blx	r3
						sv_cntrl_resetredalarm();
   a14ae:	4b66      	ldr	r3, [pc, #408]	; (a1648 <Cl_dprep_controller+0x1930>)
   a14b0:	4798      	blx	r3
						sv_cntrl_nobuzzer();
   a14b2:	4b66      	ldr	r3, [pc, #408]	; (a164c <Cl_dprep_controller+0x1934>)
   a14b4:	4798      	blx	r3
						Cl_Dprep_ResetAlertsforReassertion();
   a14b6:	4b66      	ldr	r3, [pc, #408]	; (a1650 <Cl_dprep_controller+0x1938>)
   a14b8:	4798      	blx	r3
						sv_cntrl_disable_bypass();
   a14ba:	4b66      	ldr	r3, [pc, #408]	; (a1654 <Cl_dprep_controller+0x193c>)
   a14bc:	4798      	blx	r3
					}
						break;
   a14be:	e001      	b.n	a14c4 <Cl_dprep_controller+0x17ac>
   a14c0:	e000      	b.n	a14c4 <Cl_dprep_controller+0x17ac>
					switch(cl_dprepevent)
					{
						
						case EVENT_DPREP_TICK_50MS:
									
						break;
   a14c2:	bf00      	nop
						break;
						
					}
					
					
		break;
   a14c4:	e179      	b.n	a17ba <Cl_dprep_controller+0x1aa2>
		case CL_DPREP_STATE_DIALISER_PRIME_STOPPED:
						switch(cl_dprepevent)
   a14c6:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
   a14ca:	2b01      	cmp	r3, #1
   a14cc:	d002      	beq.n	a14d4 <Cl_dprep_controller+0x17bc>
   a14ce:	2b0d      	cmp	r3, #13
   a14d0:	d03a      	beq.n	a1548 <Cl_dprep_controller+0x1830>
								sv_cntrl_disable_loopback();
								sv_prop_startmixing();
								Cl_dprepretcode = sv_cntrl_poweronheater();               
					 			Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_ON);
								 break;
								 default:break;
   a14d2:	e04e      	b.n	a1572 <Cl_dprep_controller+0x185a>
						switch(cl_dprepevent)
							{
								
								case EVENT_DPREP_CLR_ALARM:
								
												if(powerFailureFlag == 1){
   a14d4:	4b58      	ldr	r3, [pc, #352]	; (a1638 <Cl_dprep_controller+0x1920>)
   a14d6:	681b      	ldr	r3, [r3, #0]
   a14d8:	2b01      	cmp	r3, #1
   a14da:	d11f      	bne.n	a151c <Cl_dprep_controller+0x1804>
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_POWER_FAILURE,&dprep_powerFailSensorData);
   a14dc:	2024      	movs	r0, #36	; 0x24
   a14de:	4957      	ldr	r1, [pc, #348]	; (a163c <Cl_dprep_controller+0x1924>)
   a14e0:	4b44      	ldr	r3, [pc, #272]	; (a15f4 <Cl_dprep_controller+0x18dc>)
   a14e2:	4798      	blx	r3
					
								if(dprep_powerFailSensorData == 0){
   a14e4:	4b55      	ldr	r3, [pc, #340]	; (a163c <Cl_dprep_controller+0x1924>)
   a14e6:	881b      	ldrh	r3, [r3, #0]
   a14e8:	2b00      	cmp	r3, #0
   a14ea:	d12c      	bne.n	a1546 <Cl_dprep_controller+0x182e>
						
						powerFailureFlag = 0;
   a14ec:	4b52      	ldr	r3, [pc, #328]	; (a1638 <Cl_dprep_controller+0x1920>)
   a14ee:	2200      	movs	r2, #0
   a14f0:	601a      	str	r2, [r3, #0]
						command = CON_TX_COMMAND_ALARM_CLEARED;
   a14f2:	2351      	movs	r3, #81	; 0x51
   a14f4:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
							Cl_SendDatatoconsole(command,&data,0);
   a14f8:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
   a14fc:	f107 0370 	add.w	r3, r7, #112	; 0x70
   a1500:	4610      	mov	r0, r2
   a1502:	4619      	mov	r1, r3
   a1504:	2200      	movs	r2, #0
   a1506:	4b4e      	ldr	r3, [pc, #312]	; (a1640 <Cl_dprep_controller+0x1928>)
   a1508:	4798      	blx	r3
							sv_cntrl_resetyellowalarm();
   a150a:	4b4e      	ldr	r3, [pc, #312]	; (a1644 <Cl_dprep_controller+0x192c>)
   a150c:	4798      	blx	r3
							sv_cntrl_resetredalarm();
   a150e:	4b4e      	ldr	r3, [pc, #312]	; (a1648 <Cl_dprep_controller+0x1930>)
   a1510:	4798      	blx	r3
							sv_cntrl_nobuzzer();
   a1512:	4b4e      	ldr	r3, [pc, #312]	; (a164c <Cl_dprep_controller+0x1934>)
   a1514:	4798      	blx	r3
							Cl_Dprep_ResetAlertsforReassertion();
   a1516:	4b4e      	ldr	r3, [pc, #312]	; (a1650 <Cl_dprep_controller+0x1938>)
   a1518:	4798      	blx	r3
										sv_cntrl_resetredalarm();
										sv_cntrl_nobuzzer();
										Cl_Dprep_ResetAlertsforReassertion();
					}
												
								break;
   a151a:	e02a      	b.n	a1572 <Cl_dprep_controller+0x185a>
					}
												}
					else{			
					
								
								command = CON_TX_COMMAND_ALARM_CLEARED;
   a151c:	2351      	movs	r3, #81	; 0x51
   a151e:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
							    Cl_SendDatatoconsole(command,&data,0);
   a1522:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
   a1526:	f107 0370 	add.w	r3, r7, #112	; 0x70
   a152a:	4610      	mov	r0, r2
   a152c:	4619      	mov	r1, r3
   a152e:	2200      	movs	r2, #0
   a1530:	4b43      	ldr	r3, [pc, #268]	; (a1640 <Cl_dprep_controller+0x1928>)
   a1532:	4798      	blx	r3
							
					
										sv_cntrl_resetyellowalarm();
   a1534:	4b43      	ldr	r3, [pc, #268]	; (a1644 <Cl_dprep_controller+0x192c>)
   a1536:	4798      	blx	r3
										sv_cntrl_resetredalarm();
   a1538:	4b43      	ldr	r3, [pc, #268]	; (a1648 <Cl_dprep_controller+0x1930>)
   a153a:	4798      	blx	r3
										sv_cntrl_nobuzzer();
   a153c:	4b43      	ldr	r3, [pc, #268]	; (a164c <Cl_dprep_controller+0x1934>)
   a153e:	4798      	blx	r3
										Cl_Dprep_ResetAlertsforReassertion();
   a1540:	4b43      	ldr	r3, [pc, #268]	; (a1650 <Cl_dprep_controller+0x1938>)
   a1542:	4798      	blx	r3
					}
												
								break;
   a1544:	e015      	b.n	a1572 <Cl_dprep_controller+0x185a>
   a1546:	e014      	b.n	a1572 <Cl_dprep_controller+0x185a>
								
								
								case EVENT_DPREP_START_DIALISER_PRIME:
								//sv_prop_startmixing();
								Cl_bc_controller(BC_EVENT_RESUME);
   a1548:	200b      	movs	r0, #11
   a154a:	4b43      	ldr	r3, [pc, #268]	; (a1658 <Cl_dprep_controller+0x1940>)
   a154c:	4798      	blx	r3
								Cl_Dprep_StartDialyserPrime();
   a154e:	4b43      	ldr	r3, [pc, #268]	; (a165c <Cl_dprep_controller+0x1944>)
   a1550:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   a1552:	4b43      	ldr	r3, [pc, #268]	; (a1660 <Cl_dprep_controller+0x1948>)
   a1554:	4798      	blx	r3
								sv_prop_startmixing();
   a1556:	4b43      	ldr	r3, [pc, #268]	; (a1664 <Cl_dprep_controller+0x194c>)
   a1558:	4798      	blx	r3
								Cl_dprepretcode = sv_cntrl_poweronheater();               
   a155a:	4b43      	ldr	r3, [pc, #268]	; (a1668 <Cl_dprep_controller+0x1950>)
   a155c:	4798      	blx	r3
   a155e:	4603      	mov	r3, r0
   a1560:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					 			Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_ON);
   a1564:	2001      	movs	r0, #1
   a1566:	4b41      	ldr	r3, [pc, #260]	; (a166c <Cl_dprep_controller+0x1954>)
   a1568:	4798      	blx	r3
   a156a:	4603      	mov	r3, r0
   a156c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
								 break;
   a1570:	bf00      	nop
								 default:break;
							}
		break;
   a1572:	e125      	b.n	a17c0 <Cl_dprep_controller+0x1aa8>
		case CL_DPREP_STATE_POST_DPREP_STANDBY:
		
			switch(cl_dprepevent)
   a1574:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
   a1578:	3b16      	subs	r3, #22
   a157a:	2b06      	cmp	r3, #6
   a157c:	f200 811f 	bhi.w	a17be <Cl_dprep_controller+0x1aa6>
   a1580:	a201      	add	r2, pc, #4	; (adr r2, a1588 <Cl_dprep_controller+0x1870>)
   a1582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a1586:	bf00      	nop
   a1588:	000a167d 	.word	0x000a167d
   a158c:	000a15ed 	.word	0x000a15ed
   a1590:	000a17bf 	.word	0x000a17bf
   a1594:	000a15b3 	.word	0x000a15b3
   a1598:	000a15a5 	.word	0x000a15a5
   a159c:	000a15cf 	.word	0x000a15cf
   a15a0:	000a15bf 	.word	0x000a15bf
			{
				case EVENT_DPREP_ALERT:
				Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   a15a4:	f107 0333 	add.w	r3, r7, #51	; 0x33
   a15a8:	203c      	movs	r0, #60	; 0x3c
   a15aa:	4619      	mov	r1, r3
   a15ac:	4b21      	ldr	r3, [pc, #132]	; (a1634 <Cl_dprep_controller+0x191c>)
   a15ae:	4798      	blx	r3
				if(alarmstatus1)
				{
				//	Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
				}

				break;
   a15b0:	e0c6      	b.n	a1740 <Cl_dprep_controller+0x1a28>
				case EVENT_DPREP_ALARM:
				Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   a15b2:	4b1f      	ldr	r3, [pc, #124]	; (a1630 <Cl_dprep_controller+0x1918>)
   a15b4:	4798      	blx	r3
   a15b6:	4603      	mov	r3, r0
   a15b8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				break;
   a15bc:	e0c0      	b.n	a1740 <Cl_dprep_controller+0x1a28>
				case EVENT_DPREP_PATIENT_READY:
				cl_bp_controller(CL_BP_EVENT_STOP,0);
   a15be:	2004      	movs	r0, #4
   a15c0:	2100      	movs	r1, #0
   a15c2:	4b2b      	ldr	r3, [pc, #172]	; (a1670 <Cl_dprep_controller+0x1958>)
   a15c4:	4798      	blx	r3
				Cl_PatientState = CL_DPREP_PATIENT_STATE_WAITING_FOR_BD;
   a15c6:	4b2b      	ldr	r3, [pc, #172]	; (a1674 <Cl_dprep_controller+0x195c>)
   a15c8:	2201      	movs	r2, #1
   a15ca:	701a      	strb	r2, [r3, #0]
				break;
   a15cc:	e0b8      	b.n	a1740 <Cl_dprep_controller+0x1a28>
				case EVENT_DPREP_PATIENT_CONNECTED:
				if(Cl_PatientState == CL_DPREP_PATIENT_STATE_BLOOD_DETECTED )
   a15ce:	4b29      	ldr	r3, [pc, #164]	; (a1674 <Cl_dprep_controller+0x195c>)
   a15d0:	781b      	ldrb	r3, [r3, #0]
   a15d2:	2b02      	cmp	r3, #2
   a15d4:	d109      	bne.n	a15ea <Cl_dprep_controller+0x18d2>
				{
					Cl_dprepretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSER_PRIME_COMPLETED);
   a15d6:	204c      	movs	r0, #76	; 0x4c
   a15d8:	4b27      	ldr	r3, [pc, #156]	; (a1678 <Cl_dprep_controller+0x1960>)
   a15da:	4798      	blx	r3
   a15dc:	4603      	mov	r3, r0
   a15de:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					cl_dprepstate = CL_DPREP_STATE_READY_FOR_DALYSIS;
   a15e2:	4b11      	ldr	r3, [pc, #68]	; (a1628 <Cl_dprep_controller+0x1910>)
   a15e4:	2209      	movs	r2, #9
   a15e6:	701a      	strb	r2, [r3, #0]
				}
				
				break;
   a15e8:	e0aa      	b.n	a1740 <Cl_dprep_controller+0x1a28>
   a15ea:	e0a9      	b.n	a1740 <Cl_dprep_controller+0x1a28>

				case EVENT_DPREP_TICK_MINUTE:
					Cl_Dprep_ResetAlertsforReassertion();
   a15ec:	4b18      	ldr	r3, [pc, #96]	; (a1650 <Cl_dprep_controller+0x1938>)
   a15ee:	4798      	blx	r3
				break;
   a15f0:	e0a6      	b.n	a1740 <Cl_dprep_controller+0x1a28>
   a15f2:	bf00      	nop
   a15f4:	0008fd69 	.word	0x0008fd69
   a15f8:	000a8255 	.word	0x000a8255
   a15fc:	20071dae 	.word	0x20071dae
   a1600:	20071dba 	.word	0x20071dba
   a1604:	00082a35 	.word	0x00082a35
   a1608:	000a22f1 	.word	0x000a22f1
   a160c:	000a2349 	.word	0x000a2349
   a1610:	20071dbc 	.word	0x20071dbc
   a1614:	000880c1 	.word	0x000880c1
   a1618:	20072880 	.word	0x20072880
   a161c:	0009b595 	.word	0x0009b595
   a1620:	000a1ab5 	.word	0x000a1ab5
   a1624:	20071dd0 	.word	0x20071dd0
   a1628:	20071dcf 	.word	0x20071dcf
   a162c:	000a3c3d 	.word	0x000a3c3d
   a1630:	000a1b39 	.word	0x000a1b39
   a1634:	00082c09 	.word	0x00082c09
   a1638:	20071d84 	.word	0x20071d84
   a163c:	20071d88 	.word	0x20071d88
   a1640:	0009d1e9 	.word	0x0009d1e9
   a1644:	0009b699 	.word	0x0009b699
   a1648:	0009b685 	.word	0x0009b685
   a164c:	0009b6c1 	.word	0x0009b6c1
   a1650:	000a2835 	.word	0x000a2835
   a1654:	0009b5b1 	.word	0x0009b5b1
   a1658:	00082ee1 	.word	0x00082ee1
   a165c:	000a38a1 	.word	0x000a38a1
   a1660:	0009b579 	.word	0x0009b579
   a1664:	0009b785 	.word	0x0009b785
   a1668:	0009b3c1 	.word	0x0009b3c1
   a166c:	00089381 	.word	0x00089381
   a1670:	00094325 	.word	0x00094325
   a1674:	20071dce 	.word	0x20071dce
   a1678:	0008bbb9 	.word	0x0008bbb9
				case EVENT_DPREP_TICK_SECOND:
				
				
					if(Cl_PatientState == CL_DPREP_PATIENT_STATE_WAITING_FOR_BD )
   a167c:	4b53      	ldr	r3, [pc, #332]	; (a17cc <Cl_dprep_controller+0x1ab4>)
   a167e:	781b      	ldrb	r3, [r3, #0]
   a1680:	2b01      	cmp	r3, #1
   a1682:	d13d      	bne.n	a1700 <Cl_dprep_controller+0x19e8>
					{
						Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &temp);
   a1684:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   a1688:	200a      	movs	r0, #10
   a168a:	4619      	mov	r1, r3
   a168c:	4b50      	ldr	r3, [pc, #320]	; (a17d0 <Cl_dprep_controller+0x1ab8>)
   a168e:	4798      	blx	r3
				
					if(temp == 1)        // manav02 changed to 1
   a1690:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   a1692:	2b01      	cmp	r3, #1
   a1694:	d134      	bne.n	a1700 <Cl_dprep_controller+0x19e8>
					{
					Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD",5);
   a1696:	2018      	movs	r0, #24
   a1698:	494e      	ldr	r1, [pc, #312]	; (a17d4 <Cl_dprep_controller+0x1abc>)
   a169a:	2205      	movs	r2, #5
   a169c:	4b4e      	ldr	r3, [pc, #312]	; (a17d8 <Cl_dprep_controller+0x1ac0>)
   a169e:	4798      	blx	r3
					//	Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_READY_FOR_DIALYSIS,NULL,0);
					//	cl_dprepstate = CL_DPREP_STATE_READY_FOR_DALYSIS;
									Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_BLOOD_DETECTED,NULL,0);
   a16a0:	2027      	movs	r0, #39	; 0x27
   a16a2:	2100      	movs	r1, #0
   a16a4:	2200      	movs	r2, #0
   a16a6:	4b4c      	ldr	r3, [pc, #304]	; (a17d8 <Cl_dprep_controller+0x1ac0>)
   a16a8:	4798      	blx	r3
   a16aa:	4603      	mov	r3, r0
   a16ac:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
									Cl_PatientState = CL_DPREP_PATIENT_STATE_BLOOD_DETECTED;
   a16b0:	4b46      	ldr	r3, [pc, #280]	; (a17cc <Cl_dprep_controller+0x1ab4>)
   a16b2:	2202      	movs	r2, #2
   a16b4:	701a      	strb	r2, [r3, #0]
									
							
										Cl_Uint32Type temp = Treatdata[ID_bolusvol];
   a16b6:	4b49      	ldr	r3, [pc, #292]	; (a17dc <Cl_dprep_controller+0x1ac4>)
   a16b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   a16ba:	60bb      	str	r3, [r7, #8]
										hep_calibration(temp);
   a16bc:	68bb      	ldr	r3, [r7, #8]
   a16be:	4618      	mov	r0, r3
   a16c0:	4b47      	ldr	r3, [pc, #284]	; (a17e0 <Cl_dprep_controller+0x1ac8>)
   a16c2:	4798      	blx	r3
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   a16c4:	f107 0308 	add.w	r3, r7, #8
   a16c8:	2019      	movs	r0, #25
   a16ca:	4619      	mov	r1, r3
   a16cc:	2202      	movs	r2, #2
   a16ce:	4b42      	ldr	r3, [pc, #264]	; (a17d8 <Cl_dprep_controller+0x1ac0>)
   a16d0:	4798      	blx	r3
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_speed,2);
   a16d2:	2019      	movs	r0, #25
   a16d4:	4943      	ldr	r1, [pc, #268]	; (a17e4 <Cl_dprep_controller+0x1acc>)
   a16d6:	2202      	movs	r2, #2
   a16d8:	4b3f      	ldr	r3, [pc, #252]	; (a17d8 <Cl_dprep_controller+0x1ac0>)
   a16da:	4798      	blx	r3
										cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,hep_speed);
   a16dc:	4b41      	ldr	r3, [pc, #260]	; (a17e4 <Cl_dprep_controller+0x1acc>)
   a16de:	681b      	ldr	r3, [r3, #0]
   a16e0:	2006      	movs	r0, #6
   a16e2:	4619      	mov	r1, r3
   a16e4:	4b40      	ldr	r3, [pc, #256]	; (a17e8 <Cl_dprep_controller+0x1ad0>)
   a16e6:	4798      	blx	r3
										cl_wait(100);
   a16e8:	2064      	movs	r0, #100	; 0x64
   a16ea:	4b40      	ldr	r3, [pc, #256]	; (a17ec <Cl_dprep_controller+0x1ad4>)
   a16ec:	4798      	blx	r3
										cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
   a16ee:	200b      	movs	r0, #11
   a16f0:	2100      	movs	r1, #0
   a16f2:	4b3d      	ldr	r3, [pc, #244]	; (a17e8 <Cl_dprep_controller+0x1ad0>)
   a16f4:	4798      	blx	r3
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HEPARIN",7);
   a16f6:	2018      	movs	r0, #24
   a16f8:	493d      	ldr	r1, [pc, #244]	; (a17f0 <Cl_dprep_controller+0x1ad8>)
   a16fa:	2207      	movs	r2, #7
   a16fc:	4b36      	ldr	r3, [pc, #216]	; (a17d8 <Cl_dprep_controller+0x1ac0>)
   a16fe:	4798      	blx	r3
										
									
					}
				
					}
					if(Cl_PatientState == CL_DPREP_PATIENT_STATE_BLOOD_DETECTED )
   a1700:	4b32      	ldr	r3, [pc, #200]	; (a17cc <Cl_dprep_controller+0x1ab4>)
   a1702:	781b      	ldrb	r3, [r3, #0]
   a1704:	2b02      	cmp	r3, #2
   a1706:	d11a      	bne.n	a173e <Cl_dprep_controller+0x1a26>
					{
					Cl_Dprep_hepbolus_secondscounter++;
   a1708:	4b3a      	ldr	r3, [pc, #232]	; (a17f4 <Cl_dprep_controller+0x1adc>)
   a170a:	881b      	ldrh	r3, [r3, #0]
   a170c:	b29b      	uxth	r3, r3
   a170e:	b29b      	uxth	r3, r3
   a1710:	3301      	adds	r3, #1
   a1712:	b29b      	uxth	r3, r3
   a1714:	b29a      	uxth	r2, r3
   a1716:	4b37      	ldr	r3, [pc, #220]	; (a17f4 <Cl_dprep_controller+0x1adc>)
   a1718:	801a      	strh	r2, [r3, #0]
					if (Cl_Dprep_hepbolus_secondscounter == 60)
   a171a:	4b36      	ldr	r3, [pc, #216]	; (a17f4 <Cl_dprep_controller+0x1adc>)
   a171c:	881b      	ldrh	r3, [r3, #0]
   a171e:	b21b      	sxth	r3, r3
   a1720:	2b3c      	cmp	r3, #60	; 0x3c
   a1722:	d10c      	bne.n	a173e <Cl_dprep_controller+0x1a26>
					{
						Cl_Dprep_hepbolus_secondscounter = 0;
   a1724:	4b33      	ldr	r3, [pc, #204]	; (a17f4 <Cl_dprep_controller+0x1adc>)
   a1726:	2200      	movs	r2, #0
   a1728:	801a      	strh	r2, [r3, #0]
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DONE_HP",7);
   a172a:	2018      	movs	r0, #24
   a172c:	4932      	ldr	r1, [pc, #200]	; (a17f8 <Cl_dprep_controller+0x1ae0>)
   a172e:	2207      	movs	r2, #7
   a1730:	4b29      	ldr	r3, [pc, #164]	; (a17d8 <Cl_dprep_controller+0x1ac0>)
   a1732:	4798      	blx	r3
						cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
   a1734:	2009      	movs	r0, #9
   a1736:	2100      	movs	r1, #0
   a1738:	4b2b      	ldr	r3, [pc, #172]	; (a17e8 <Cl_dprep_controller+0x1ad0>)
   a173a:	4798      	blx	r3
					}
					}
				break;
   a173c:	e7ff      	b.n	a173e <Cl_dprep_controller+0x1a26>
   a173e:	bf00      	nop
			}
		
		break;
   a1740:	e03d      	b.n	a17be <Cl_dprep_controller+0x1aa6>
		case CL_DPREP_STATE_READY_FOR_DALYSIS:
				switch(cl_dprepevent)
   a1742:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
   a1746:	3b16      	subs	r3, #22
   a1748:	2b04      	cmp	r3, #4
   a174a:	d830      	bhi.n	a17ae <Cl_dprep_controller+0x1a96>
   a174c:	a201      	add	r2, pc, #4	; (adr r2, a1754 <Cl_dprep_controller+0x1a3c>)
   a174e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a1752:	bf00      	nop
   a1754:	000a177d 	.word	0x000a177d
   a1758:	000a1777 	.word	0x000a1777
   a175c:	000a17af 	.word	0x000a17af
   a1760:	000a17a3 	.word	0x000a17a3
   a1764:	000a1769 	.word	0x000a1769
				{
					
					case EVENT_DPREP_ALERT:
					Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   a1768:	f107 0333 	add.w	r3, r7, #51	; 0x33
   a176c:	203c      	movs	r0, #60	; 0x3c
   a176e:	4619      	mov	r1, r3
   a1770:	4b22      	ldr	r3, [pc, #136]	; (a17fc <Cl_dprep_controller+0x1ae4>)
   a1772:	4798      	blx	r3
					if(alarmstatus1)
					{
					//	Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
					}

					break;
   a1774:	e01c      	b.n	a17b0 <Cl_dprep_controller+0x1a98>
					case EVENT_DPREP_TICK_MINUTE:
						Cl_Dprep_ResetAlertsforReassertion();
   a1776:	4b22      	ldr	r3, [pc, #136]	; (a1800 <Cl_dprep_controller+0x1ae8>)
   a1778:	4798      	blx	r3
					break;
   a177a:	e019      	b.n	a17b0 <Cl_dprep_controller+0x1a98>
					case EVENT_DPREP_TICK_SECOND:
									
					Cl_Dprep_SendPrepStateData(DIALYSIS_PREP_DATA);
   a177c:	2004      	movs	r0, #4
   a177e:	4b21      	ldr	r3, [pc, #132]	; (a1804 <Cl_dprep_controller+0x1aec>)
   a1780:	4798      	blx	r3
					Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &temp);
   a1782:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   a1786:	200a      	movs	r0, #10
   a1788:	4619      	mov	r1, r3
   a178a:	4b11      	ldr	r3, [pc, #68]	; (a17d0 <Cl_dprep_controller+0x1ab8>)
   a178c:	4798      	blx	r3
					if( temp == 0)
   a178e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   a1790:	2b00      	cmp	r3, #0
   a1792:	d105      	bne.n	a17a0 <Cl_dprep_controller+0x1a88>
					{
						
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD",5);
   a1794:	2018      	movs	r0, #24
   a1796:	490f      	ldr	r1, [pc, #60]	; (a17d4 <Cl_dprep_controller+0x1abc>)
   a1798:	2205      	movs	r2, #5
   a179a:	4b0f      	ldr	r3, [pc, #60]	; (a17d8 <Cl_dprep_controller+0x1ac0>)
   a179c:	4798      	blx	r3
					}
					break;
   a179e:	e007      	b.n	a17b0 <Cl_dprep_controller+0x1a98>
   a17a0:	e006      	b.n	a17b0 <Cl_dprep_controller+0x1a98>
								 }
	
						break;
			*/
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   a17a2:	4b19      	ldr	r3, [pc, #100]	; (a1808 <Cl_dprep_controller+0x1af0>)
   a17a4:	4798      	blx	r3
   a17a6:	4603      	mov	r3, r0
   a17a8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						break;
   a17ac:	e000      	b.n	a17b0 <Cl_dprep_controller+0x1a98>
					default:
					break;
   a17ae:	bf00      	nop
				}
		break;
   a17b0:	e006      	b.n	a17c0 <Cl_dprep_controller+0x1aa8>
										Cl_Dprep_ResetAlertsforReassertion();
					}
								break;

		}
		break;
   a17b2:	bf00      	nop
   a17b4:	e004      	b.n	a17c0 <Cl_dprep_controller+0x1aa8>
			
		
		}
		}
		
		break;
   a17b6:	bf00      	nop
   a17b8:	e002      	b.n	a17c0 <Cl_dprep_controller+0x1aa8>
						break;
						
					}
					
					
		break;
   a17ba:	bf00      	nop
   a17bc:	e000      	b.n	a17c0 <Cl_dprep_controller+0x1aa8>
					}
					}
				break;
			}
		
		break;
   a17be:	bf00      	nop
				}
		break;

		}

	return Cl_dprepretcode;
   a17c0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
   a17c4:	4618      	mov	r0, r3
   a17c6:	379c      	adds	r7, #156	; 0x9c
   a17c8:	46bd      	mov	sp, r7
   a17ca:	bd90      	pop	{r4, r7, pc}
   a17cc:	20071dce 	.word	0x20071dce
   a17d0:	0008fd69 	.word	0x0008fd69
   a17d4:	000aa6a0 	.word	0x000aa6a0
   a17d8:	0009d1e9 	.word	0x0009d1e9
   a17dc:	20072880 	.word	0x20072880
   a17e0:	00083cc1 	.word	0x00083cc1
   a17e4:	20072318 	.word	0x20072318
   a17e8:	00094b61 	.word	0x00094b61
   a17ec:	0009421d 	.word	0x0009421d
   a17f0:	000aa6a8 	.word	0x000aa6a8
   a17f4:	20071dac 	.word	0x20071dac
   a17f8:	000aa6b0 	.word	0x000aa6b0
   a17fc:	00082c09 	.word	0x00082c09
   a1800:	000a2835 	.word	0x000a2835
   a1804:	000a2349 	.word	0x000a2349
   a1808:	000a1b39 	.word	0x000a1b39

000a180c <cl_dprep_translatemacevent>:
 
 
Cl_ReturnCodeType  cl_dprep_translatemacevent(Cl_Mac_EventsType Cl_MacDprepEvt,Cl_Dprep_Events* cl_dprepevent)
{
   a180c:	b480      	push	{r7}
   a180e:	b083      	sub	sp, #12
   a1810:	af00      	add	r7, sp, #0
   a1812:	4603      	mov	r3, r0
   a1814:	6039      	str	r1, [r7, #0]
   a1816:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacDprepEvt)
   a1818:	79fb      	ldrb	r3, [r7, #7]
   a181a:	3b09      	subs	r3, #9
   a181c:	2b56      	cmp	r3, #86	; 0x56
   a181e:	f200 8141 	bhi.w	a1aa4 <cl_dprep_translatemacevent+0x298>
   a1822:	a201      	add	r2, pc, #4	; (adr r2, a1828 <cl_dprep_translatemacevent+0x1c>)
   a1824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a1828:	000a198d 	.word	0x000a198d
   a182c:	000a1995 	.word	0x000a1995
   a1830:	000a199d 	.word	0x000a199d
   a1834:	000a19a5 	.word	0x000a19a5
   a1838:	000a19ad 	.word	0x000a19ad
   a183c:	000a19b5 	.word	0x000a19b5
   a1840:	000a19c5 	.word	0x000a19c5
   a1844:	000a19cd 	.word	0x000a19cd
   a1848:	000a19bd 	.word	0x000a19bd
   a184c:	000a19d5 	.word	0x000a19d5
   a1850:	000a19dd 	.word	0x000a19dd
   a1854:	000a19e5 	.word	0x000a19e5
   a1858:	000a1a85 	.word	0x000a1a85
   a185c:	000a19ed 	.word	0x000a19ed
   a1860:	000a1aa5 	.word	0x000a1aa5
   a1864:	000a1aa5 	.word	0x000a1aa5
   a1868:	000a1aa5 	.word	0x000a1aa5
   a186c:	000a1aa5 	.word	0x000a1aa5
   a1870:	000a1aa5 	.word	0x000a1aa5
   a1874:	000a1a45 	.word	0x000a1a45
   a1878:	000a1a55 	.word	0x000a1a55
   a187c:	000a1a5d 	.word	0x000a1a5d
   a1880:	000a1a65 	.word	0x000a1a65
   a1884:	000a1aa5 	.word	0x000a1aa5
   a1888:	000a1a4d 	.word	0x000a1a4d
   a188c:	000a1aa5 	.word	0x000a1aa5
   a1890:	000a1aa5 	.word	0x000a1aa5
   a1894:	000a1aa5 	.word	0x000a1aa5
   a1898:	000a1aa5 	.word	0x000a1aa5
   a189c:	000a1a6d 	.word	0x000a1a6d
   a18a0:	000a1a75 	.word	0x000a1a75
   a18a4:	000a1a7d 	.word	0x000a1a7d
   a18a8:	000a1985 	.word	0x000a1985
   a18ac:	000a1aa5 	.word	0x000a1aa5
   a18b0:	000a1aa5 	.word	0x000a1aa5
   a18b4:	000a1aa5 	.word	0x000a1aa5
   a18b8:	000a1a3d 	.word	0x000a1a3d
   a18bc:	000a1a35 	.word	0x000a1a35
   a18c0:	000a1aa5 	.word	0x000a1aa5
   a18c4:	000a1aa5 	.word	0x000a1aa5
   a18c8:	000a1aa5 	.word	0x000a1aa5
   a18cc:	000a1aa5 	.word	0x000a1aa5
   a18d0:	000a1aa5 	.word	0x000a1aa5
   a18d4:	000a1aa5 	.word	0x000a1aa5
   a18d8:	000a1aa5 	.word	0x000a1aa5
   a18dc:	000a1aa5 	.word	0x000a1aa5
   a18e0:	000a1aa5 	.word	0x000a1aa5
   a18e4:	000a19f5 	.word	0x000a19f5
   a18e8:	000a19fd 	.word	0x000a19fd
   a18ec:	000a1a05 	.word	0x000a1a05
   a18f0:	000a1a0d 	.word	0x000a1a0d
   a18f4:	000a1a15 	.word	0x000a1a15
   a18f8:	000a1a1d 	.word	0x000a1a1d
   a18fc:	000a1aa5 	.word	0x000a1aa5
   a1900:	000a1aa5 	.word	0x000a1aa5
   a1904:	000a1aa5 	.word	0x000a1aa5
   a1908:	000a1aa5 	.word	0x000a1aa5
   a190c:	000a1aa5 	.word	0x000a1aa5
   a1910:	000a1aa5 	.word	0x000a1aa5
   a1914:	000a1aa5 	.word	0x000a1aa5
   a1918:	000a1aa5 	.word	0x000a1aa5
   a191c:	000a1aa5 	.word	0x000a1aa5
   a1920:	000a1aa5 	.word	0x000a1aa5
   a1924:	000a1aa5 	.word	0x000a1aa5
   a1928:	000a1a25 	.word	0x000a1a25
   a192c:	000a1aa5 	.word	0x000a1aa5
   a1930:	000a1aa5 	.word	0x000a1aa5
   a1934:	000a1a2d 	.word	0x000a1a2d
   a1938:	000a1aa5 	.word	0x000a1aa5
   a193c:	000a1aa5 	.word	0x000a1aa5
   a1940:	000a1aa5 	.word	0x000a1aa5
   a1944:	000a1aa5 	.word	0x000a1aa5
   a1948:	000a1aa5 	.word	0x000a1aa5
   a194c:	000a1aa5 	.word	0x000a1aa5
   a1950:	000a1aa5 	.word	0x000a1aa5
   a1954:	000a1aa5 	.word	0x000a1aa5
   a1958:	000a1aa5 	.word	0x000a1aa5
   a195c:	000a1aa5 	.word	0x000a1aa5
   a1960:	000a1aa5 	.word	0x000a1aa5
   a1964:	000a1aa5 	.word	0x000a1aa5
   a1968:	000a1aa5 	.word	0x000a1aa5
   a196c:	000a1aa5 	.word	0x000a1aa5
   a1970:	000a1a8d 	.word	0x000a1a8d
   a1974:	000a1a95 	.word	0x000a1a95
   a1978:	000a1aa5 	.word	0x000a1aa5
   a197c:	000a1aa5 	.word	0x000a1aa5
   a1980:	000a1a9d 	.word	0x000a1a9d
	{
	
		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_dprepevent =EVENT_DPREP_CLR_ALARM;
   a1984:	683b      	ldr	r3, [r7, #0]
   a1986:	2201      	movs	r2, #1
   a1988:	701a      	strb	r2, [r3, #0]
		break;
   a198a:	e08c      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		
		case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
		*cl_dprepevent = EVENT_DPREP_DIALYSIS_PREP;
   a198c:	683b      	ldr	r3, [r7, #0]
   a198e:	2202      	movs	r2, #2
   a1990:	701a      	strb	r2, [r3, #0]
		break;
   a1992:	e088      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>

		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_dprepevent = EVENT_DPREP_COMMAND_SET_BLDPMP_ON;
   a1994:	683b      	ldr	r3, [r7, #0]
   a1996:	2205      	movs	r2, #5
   a1998:	701a      	strb	r2, [r3, #0]
		break;
   a199a:	e084      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_dprepevent = EVENT_DPREP_COMMAND_SET_BLDPMP_OFF;
   a199c:	683b      	ldr	r3, [r7, #0]
   a199e:	2206      	movs	r2, #6
   a19a0:	701a      	strb	r2, [r3, #0]
		break;
   a19a2:	e080      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		case 	EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_dprepevent = EVENT_DPREP_COMMAND_SET_BLDPUMPRATE;
   a19a4:	683b      	ldr	r3, [r7, #0]
   a19a6:	2207      	movs	r2, #7
   a19a8:	701a      	strb	r2, [r3, #0]
		break;
   a19aa:	e07c      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_dprepevent =  EVENT_DPREP_COMMAND_SET_DATA;
   a19ac:	683b      	ldr	r3, [r7, #0]
   a19ae:	2203      	movs	r2, #3
   a19b0:	701a      	strb	r2, [r3, #0]
		break;
   a19b2:	e078      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_dprepevent = EVENT_DPREP_COMMAND_GET_DATA;
   a19b4:	683b      	ldr	r3, [r7, #0]
   a19b6:	2204      	movs	r2, #4
   a19b8:	701a      	strb	r2, [r3, #0]
		break;
   a19ba:	e074      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		
		case EVT_CONSOLE_COMMAND_START_DIALYSATE_FILLING:
				*cl_dprepevent = EVENT_DPREP_START_DIALYSATE_FILL;
   a19bc:	683b      	ldr	r3, [r7, #0]
   a19be:	2208      	movs	r2, #8
   a19c0:	701a      	strb	r2, [r3, #0]
				break;
   a19c2:	e070      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_START_PRIME:
		*cl_dprepevent = EVENT_DPREP_START_PRIME;
   a19c4:	683b      	ldr	r3, [r7, #0]
   a19c6:	220a      	movs	r2, #10
   a19c8:	701a      	strb	r2, [r3, #0]
		break;
   a19ca:	e06c      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		
		case EVT_CONSOLE_COMMAND_STOP_PRIME:
		*cl_dprepevent = EVENT_DPREP_STOP_PRIME;
   a19cc:	683b      	ldr	r3, [r7, #0]
   a19ce:	220b      	movs	r2, #11
   a19d0:	701a      	strb	r2, [r3, #0]
		break;
   a19d2:	e068      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_DILYSER_CONNECTED:
		*cl_dprepevent = EVENT_DPREP_DILYSER_CONNECTED;
   a19d4:	683b      	ldr	r3, [r7, #0]
   a19d6:	220c      	movs	r2, #12
   a19d8:	701a      	strb	r2, [r3, #0]
		break;
   a19da:	e064      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_START_DIALISER_PRIME:
		*cl_dprepevent = EVENT_DPREP_START_DIALISER_PRIME;
   a19dc:	683b      	ldr	r3, [r7, #0]
   a19de:	220d      	movs	r2, #13
   a19e0:	701a      	strb	r2, [r3, #0]
		break;
   a19e2:	e060      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_STOP_DIALISER_PRIME:
		*cl_dprepevent = EVENT_DPREP_STOP_DIALYSER_PRIME;
   a19e4:	683b      	ldr	r3, [r7, #0]
   a19e6:	220e      	movs	r2, #14
   a19e8:	701a      	strb	r2, [r3, #0]
		break;	
   a19ea:	e05c      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		

		case EVT_CONSOLE_COMMAND_MAN_PREP_COMPLETED:
		*cl_dprepevent =   EVENT_DPREP_MAN_PREP_COMPLETED;
   a19ec:	683b      	ldr	r3, [r7, #0]
   a19ee:	2212      	movs	r2, #18
   a19f0:	701a      	strb	r2, [r3, #0]
		break;
   a19f2:	e058      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		
		case EVT_TICK_50M:
		*cl_dprepevent =   EVENT_DPREP_TICK_50MS;
   a19f4:	683b      	ldr	r3, [r7, #0]
   a19f6:	2213      	movs	r2, #19
   a19f8:	701a      	strb	r2, [r3, #0]
		break;
   a19fa:	e054      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		case  EVT_TICK_100M:
		*cl_dprepevent =   EVENT_DPREP_TICK_100MS;
   a19fc:	683b      	ldr	r3, [r7, #0]
   a19fe:	2214      	movs	r2, #20
   a1a00:	701a      	strb	r2, [r3, #0]
		break;
   a1a02:	e050      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		
		case EVT_TICK_500M:
		*cl_dprepevent =   EVENT_DPREP_TICK_500MS;
   a1a04:	683b      	ldr	r3, [r7, #0]
   a1a06:	2215      	movs	r2, #21
   a1a08:	701a      	strb	r2, [r3, #0]
		break;
   a1a0a:	e04c      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		case EVT_TICK_SEC:
		*cl_dprepevent =   EVENT_DPREP_TICK_SECOND;
   a1a0c:	683b      	ldr	r3, [r7, #0]
   a1a0e:	2216      	movs	r2, #22
   a1a10:	701a      	strb	r2, [r3, #0]
		break;
   a1a12:	e048      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		case EVT_TICK_MIN:
		*cl_dprepevent =   EVENT_DPREP_TICK_MINUTE;
   a1a14:	683b      	ldr	r3, [r7, #0]
   a1a16:	2217      	movs	r2, #23
   a1a18:	701a      	strb	r2, [r3, #0]
		break;			 
   a1a1a:	e044      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		case EVT_TICK_HOUR:
		*cl_dprepevent =   EVENT_DPREP_TICK_HOUR;
   a1a1c:	683b      	ldr	r3, [r7, #0]
   a1a1e:	2218      	movs	r2, #24
   a1a20:	701a      	strb	r2, [r3, #0]
		break;
   a1a22:	e040      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		
		case MACREQ_PRIME_COMPLETED:
		*cl_dprepevent = EVENT_DPREP_MAC_PRIME_COMPLETED;
   a1a24:	683b      	ldr	r3, [r7, #0]
   a1a26:	2210      	movs	r2, #16
   a1a28:	701a      	strb	r2, [r3, #0]
		break;
   a1a2a:	e03c      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		case MACREQ_DIALYSER_PRIME_COMPLETED:
			*cl_dprepevent = EVENT_DPREP_MAC_DIALYSER_PRIME_COMPLETED;
   a1a2c:	683b      	ldr	r3, [r7, #0]
   a1a2e:	2211      	movs	r2, #17
   a1a30:	701a      	strb	r2, [r3, #0]
		break;
   a1a32:	e038      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		case EVT_ALARM_TRIGGERED:
		*cl_dprepevent =  EVENT_DPREP_ALARM;
   a1a34:	683b      	ldr	r3, [r7, #0]
   a1a36:	2219      	movs	r2, #25
   a1a38:	701a      	strb	r2, [r3, #0]
		break;
   a1a3a:	e034      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		case EVT_ALERT_TRIGGERED:
		*cl_dprepevent =  EVENT_DPREP_ALERT;
   a1a3c:	683b      	ldr	r3, [r7, #0]
   a1a3e:	221a      	movs	r2, #26
   a1a40:	701a      	strb	r2, [r3, #0]
		break;
   a1a42:	e030      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_PATIENT_CONNECTED:
		*cl_dprepevent =  EVENT_DPREP_PATIENT_CONNECTED;
   a1a44:	683b      	ldr	r3, [r7, #0]
   a1a46:	221b      	movs	r2, #27
   a1a48:	701a      	strb	r2, [r3, #0]
		break;
   a1a4a:	e02c      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_PATIENT_READY:
		*cl_dprepevent = EVENT_DPREP_PATIENT_READY;
   a1a4c:	683b      	ldr	r3, [r7, #0]
   a1a4e:	221c      	movs	r2, #28
   a1a50:	701a      	strb	r2, [r3, #0]
		break;
   a1a52:	e028      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		case EVT_SEND_MIXING_PREP_START:
		*cl_dprepevent =  EVENT_DPREP_MIXING_PREP_START;
   a1a54:	683b      	ldr	r3, [r7, #0]
   a1a56:	221d      	movs	r2, #29
   a1a58:	701a      	strb	r2, [r3, #0]
		break;
   a1a5a:	e024      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		case EVT_SEND_MIXING_PREP_STOP:
		*cl_dprepevent = EVENT_DPREP_MIXING_PREP_STOP;
   a1a5c:	683b      	ldr	r3, [r7, #0]
   a1a5e:	221e      	movs	r2, #30
   a1a60:	701a      	strb	r2, [r3, #0]
		break;
   a1a62:	e020      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_RCIRC_START:
		*cl_dprepevent = EVENT_DPREP_START_RECIRC;
   a1a64:	683b      	ldr	r3, [r7, #0]
   a1a66:	221f      	movs	r2, #31
   a1a68:	701a      	strb	r2, [r3, #0]
		break;
   a1a6a:	e01c      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		case 	EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
		*cl_dprepevent = EVENT_HEAPARIN_BOLUS;
   a1a6c:	683b      	ldr	r3, [r7, #0]
   a1a6e:	2221      	movs	r2, #33	; 0x21
   a1a70:	701a      	strb	r2, [r3, #0]
		break;
   a1a72:	e018      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_HEPARIN_START:
		*cl_dprepevent = EVENT_DPREP_HEP_PMP_START;
   a1a74:	683b      	ldr	r3, [r7, #0]
   a1a76:	2222      	movs	r2, #34	; 0x22
   a1a78:	701a      	strb	r2, [r3, #0]
		break;
   a1a7a:	e014      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
		*cl_dprepevent = EVENT_DPREP_HEP_PMP_STOP;
   a1a7c:	683b      	ldr	r3, [r7, #0]
   a1a7e:	2223      	movs	r2, #35	; 0x23
   a1a80:	701a      	strb	r2, [r3, #0]
		break;
   a1a82:	e010      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_HEP_PMP_RATE:
		*cl_dprepevent = EVENT_DPREP_HEP_PMP_RATE;
   a1a84:	683b      	ldr	r3, [r7, #0]
   a1a86:	220f      	movs	r2, #15
   a1a88:	701a      	strb	r2, [r3, #0]
		break;
   a1a8a:	e00c      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		*cl_dprepevent = EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL;
   a1a8c:	683b      	ldr	r3, [r7, #0]
   a1a8e:	225b      	movs	r2, #91	; 0x5b
   a1a90:	701a      	strb	r2, [r3, #0]
		break;
   a1a92:	e008      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		*cl_dprepevent = EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL;
   a1a94:	683b      	ldr	r3, [r7, #0]
   a1a96:	225c      	movs	r2, #92	; 0x5c
   a1a98:	701a      	strb	r2, [r3, #0]
		break;
   a1a9a:	e004      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_MUTE_ALARM:
		*cl_dprepevent = EVENT_DPREP_MUTE;
   a1a9c:	683b      	ldr	r3, [r7, #0]
   a1a9e:	2224      	movs	r2, #36	; 0x24
   a1aa0:	701a      	strb	r2, [r3, #0]
		break;
   a1aa2:	e000      	b.n	a1aa6 <cl_dprep_translatemacevent+0x29a>
		default:
		break;
   a1aa4:	bf00      	nop
	}
		 return CL_OK;
   a1aa6:	2300      	movs	r3, #0
}
   a1aa8:	4618      	mov	r0, r3
   a1aaa:	370c      	adds	r7, #12
   a1aac:	46bd      	mov	sp, r7
   a1aae:	f85d 7b04 	ldr.w	r7, [sp], #4
   a1ab2:	4770      	bx	lr

000a1ab4 <cl_dprep_notifydacandgotodpreptandby>:
		
		return Cl_dprepretcode;
		
	}
	Cl_ReturnCodeType cl_dprep_notifydacandgotodpreptandby(void)
	{
   a1ab4:	b580      	push	{r7, lr}
   a1ab6:	b082      	sub	sp, #8
   a1ab8:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   a1aba:	2300      	movs	r3, #0
   a1abc:	71fb      	strb	r3, [r7, #7]
		
		Cl_Uint8Type data =0;
   a1abe:	2300      	movs	r3, #0
   a1ac0:	71bb      	strb	r3, [r7, #6]
		//inform DAC about rinse completed state.
		Cl_dprepsecondscounter = 0;
   a1ac2:	4b15      	ldr	r3, [pc, #84]	; (a1b18 <cl_dprep_notifydacandgotodpreptandby+0x64>)
   a1ac4:	2200      	movs	r2, #0
   a1ac6:	601a      	str	r2, [r3, #0]
		Cl_dprepMinutescounter= 0;
   a1ac8:	4b14      	ldr	r3, [pc, #80]	; (a1b1c <cl_dprep_notifydacandgotodpreptandby+0x68>)
   a1aca:	2200      	movs	r2, #0
   a1acc:	601a      	str	r2, [r3, #0]
		Cl_dprephourscounter= 0;
   a1ace:	4b14      	ldr	r3, [pc, #80]	; (a1b20 <cl_dprep_notifydacandgotodpreptandby+0x6c>)
   a1ad0:	2200      	movs	r2, #0
   a1ad2:	601a      	str	r2, [r3, #0]
		Cl_dprepTotalMinutescounter= 0;
   a1ad4:	4b13      	ldr	r3, [pc, #76]	; (a1b24 <cl_dprep_notifydacandgotodpreptandby+0x70>)
   a1ad6:	2200      	movs	r2, #0
   a1ad8:	601a      	str	r2, [r3, #0]
		Cl_dprepTotalhourscounter=0;
   a1ada:	4b13      	ldr	r3, [pc, #76]	; (a1b28 <cl_dprep_notifydacandgotodpreptandby+0x74>)
   a1adc:	2200      	movs	r2, #0
   a1ade:	601a      	str	r2, [r3, #0]
		data = 1;
   a1ae0:	2301      	movs	r3, #1
   a1ae2:	71bb      	strb	r3, [r7, #6]
		Cl_dprepretcode = sv_nvmsetdata(NV_NVM_PRIME_STATUS,&data,1);
   a1ae4:	1dbb      	adds	r3, r7, #6
   a1ae6:	2002      	movs	r0, #2
   a1ae8:	4619      	mov	r1, r3
   a1aea:	2201      	movs	r2, #1
   a1aec:	4b0f      	ldr	r3, [pc, #60]	; (a1b2c <cl_dprep_notifydacandgotodpreptandby+0x78>)
   a1aee:	4798      	blx	r3
   a1af0:	4603      	mov	r3, r0
   a1af2:	71fb      	strb	r3, [r7, #7]
		
		Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
   a1af4:	1dbb      	adds	r3, r7, #6
   a1af6:	2010      	movs	r0, #16
   a1af8:	4619      	mov	r1, r3
   a1afa:	2200      	movs	r2, #0
   a1afc:	4b0c      	ldr	r3, [pc, #48]	; (a1b30 <cl_dprep_notifydacandgotodpreptandby+0x7c>)
   a1afe:	4798      	blx	r3
   a1b00:	4603      	mov	r3, r0
   a1b02:	71fb      	strb	r3, [r7, #7]
		Cl_dprepretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSER_PRIME_COMPLETED);
   a1b04:	204c      	movs	r0, #76	; 0x4c
   a1b06:	4b0b      	ldr	r3, [pc, #44]	; (a1b34 <cl_dprep_notifydacandgotodpreptandby+0x80>)
   a1b08:	4798      	blx	r3
   a1b0a:	4603      	mov	r3, r0
   a1b0c:	71fb      	strb	r3, [r7, #7]
		
		
		return Cl_dprepretcode;
   a1b0e:	79fb      	ldrb	r3, [r7, #7]
	}
   a1b10:	4618      	mov	r0, r3
   a1b12:	3708      	adds	r7, #8
   a1b14:	46bd      	mov	sp, r7
   a1b16:	bd80      	pop	{r7, pc}
   a1b18:	20071dd4 	.word	0x20071dd4
   a1b1c:	20071dd8 	.word	0x20071dd8
   a1b20:	20071ddc 	.word	0x20071ddc
   a1b24:	20071de0 	.word	0x20071de0
   a1b28:	20071de4 	.word	0x20071de4
   a1b2c:	0009bd15 	.word	0x0009bd15
   a1b30:	0009d1e9 	.word	0x0009d1e9
   a1b34:	0008bbb9 	.word	0x0008bbb9

000a1b38 <Cl_Dprep_ProcessAlarms>:
		return CL_OK;								
	}
	
	
	Cl_ReturnCodeType Cl_Dprep_ProcessAlarms(void )
	{
   a1b38:	b580      	push	{r7, lr}
   a1b3a:	b082      	sub	sp, #8
   a1b3c:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   a1b3e:	2300      	movs	r3, #0
   a1b40:	71fb      	strb	r3, [r7, #7]
		ClDprepAlarmIdType CldprepAlarmId;
		Cl_Uint8Type data;
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a1b42:	2359      	movs	r3, #89	; 0x59
   a1b44:	71bb      	strb	r3, [r7, #6]
		Cl_NewAlarmIdType cl_dprepalarmid;
		//	cl_wait(200);
		Cl_dprepretcode = Cl_Dprep_UpdateAlarmTable();
   a1b46:	4b04      	ldr	r3, [pc, #16]	; (a1b58 <Cl_Dprep_ProcessAlarms+0x20>)
   a1b48:	4798      	blx	r3
   a1b4a:	4603      	mov	r3, r0
   a1b4c:	71fb      	strb	r3, [r7, #7]
		//   	data = (Cl_Uint8Type)cl_rinsealarmid;
		//   	command = CON_TX_COMMAND_ALARM;
		//   	Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
		
		
		return (Cl_dprepretcode);
   a1b4e:	79fb      	ldrb	r3, [r7, #7]
	}
   a1b50:	4618      	mov	r0, r3
   a1b52:	3708      	adds	r7, #8
   a1b54:	46bd      	mov	sp, r7
   a1b56:	bd80      	pop	{r7, pc}
   a1b58:	000a1b5d 	.word	0x000a1b5d

000a1b5c <Cl_Dprep_UpdateAlarmTable>:
	
	
	Cl_ReturnCodeType Cl_Dprep_UpdateAlarmTable( void)
	{
   a1b5c:	b580      	push	{r7, lr}
   a1b5e:	b084      	sub	sp, #16
   a1b60:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   a1b62:	2300      	movs	r3, #0
   a1b64:	73fb      	strb	r3, [r7, #15]
		Cl_Uint8Type tempcount = 0;
   a1b66:	2300      	movs	r3, #0
   a1b68:	73bb      	strb	r3, [r7, #14]
		Cl_Uint8Type data[2] ={0, 0} ,*data1 = NULL;
   a1b6a:	2300      	movs	r3, #0
   a1b6c:	713b      	strb	r3, [r7, #4]
   a1b6e:	2300      	movs	r3, #0
   a1b70:	717b      	strb	r3, [r7, #5]
   a1b72:	2300      	movs	r3, #0
   a1b74:	60bb      	str	r3, [r7, #8]
		Cl_Uint8Type data3;
		Cl_NewAlarmIdType cl_alarmId;
		
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a1b76:	2359      	movs	r3, #89	; 0x59
   a1b78:	71fb      	strb	r3, [r7, #7]
		
		
		for (tempcount = 0 ; tempcount < CL_DPREP_ALRM_MAX ; tempcount++)
   a1b7a:	2300      	movs	r3, #0
   a1b7c:	73bb      	strb	r3, [r7, #14]
   a1b7e:	e063      	b.n	a1c48 <Cl_Dprep_UpdateAlarmTable+0xec>
		{
			
			Cl_Alarm_GetAlarmStatus(Cl_DprepAlarmTable[tempcount].Cl_DprepAlarmId,&Cl_DprepAlarmTable[tempcount].IsActive);
   a1b80:	7bba      	ldrb	r2, [r7, #14]
   a1b82:	4935      	ldr	r1, [pc, #212]	; (a1c58 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   a1b84:	4613      	mov	r3, r2
   a1b86:	00db      	lsls	r3, r3, #3
   a1b88:	1a9b      	subs	r3, r3, r2
   a1b8a:	440b      	add	r3, r1
   a1b8c:	7819      	ldrb	r1, [r3, #0]
   a1b8e:	7bba      	ldrb	r2, [r7, #14]
   a1b90:	4613      	mov	r3, r2
   a1b92:	00db      	lsls	r3, r3, #3
   a1b94:	1a9b      	subs	r3, r3, r2
   a1b96:	4a30      	ldr	r2, [pc, #192]	; (a1c58 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   a1b98:	4413      	add	r3, r2
   a1b9a:	3302      	adds	r3, #2
   a1b9c:	4608      	mov	r0, r1
   a1b9e:	4619      	mov	r1, r3
   a1ba0:	4b2e      	ldr	r3, [pc, #184]	; (a1c5c <Cl_Dprep_UpdateAlarmTable+0x100>)
   a1ba2:	4798      	blx	r3
			//	if(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmType == CL_ALARM_ALARM)
			//	{
			
			
			if (Cl_DprepAlarmTable[tempcount].IsActive)
   a1ba4:	7bba      	ldrb	r2, [r7, #14]
   a1ba6:	492c      	ldr	r1, [pc, #176]	; (a1c58 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   a1ba8:	4613      	mov	r3, r2
   a1baa:	00db      	lsls	r3, r3, #3
   a1bac:	1a9b      	subs	r3, r3, r2
   a1bae:	440b      	add	r3, r1
   a1bb0:	789b      	ldrb	r3, [r3, #2]
   a1bb2:	2b00      	cmp	r3, #0
   a1bb4:	d020      	beq.n	a1bf8 <Cl_Dprep_UpdateAlarmTable+0x9c>
			{
				if(!Cl_DprepAlarmTable[tempcount].IsRaised)
   a1bb6:	7bba      	ldrb	r2, [r7, #14]
   a1bb8:	4927      	ldr	r1, [pc, #156]	; (a1c58 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   a1bba:	4613      	mov	r3, r2
   a1bbc:	00db      	lsls	r3, r3, #3
   a1bbe:	1a9b      	subs	r3, r3, r2
   a1bc0:	440b      	add	r3, r1
   a1bc2:	78db      	ldrb	r3, [r3, #3]
   a1bc4:	f083 0301 	eor.w	r3, r3, #1
   a1bc8:	b2db      	uxtb	r3, r3
   a1bca:	2b00      	cmp	r3, #0
   a1bcc:	d039      	beq.n	a1c42 <Cl_Dprep_UpdateAlarmTable+0xe6>
					//	data1 = (Cl_Uint8Type) cl_alarmId;

				//	command = CON_TX_COMMAND_ALARM;

				//	Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,3);
					Cl_DprepAlarmTable[tempcount].IsRaised = true;
   a1bce:	7bba      	ldrb	r2, [r7, #14]
   a1bd0:	4921      	ldr	r1, [pc, #132]	; (a1c58 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   a1bd2:	4613      	mov	r3, r2
   a1bd4:	00db      	lsls	r3, r3, #3
   a1bd6:	1a9b      	subs	r3, r3, r2
   a1bd8:	440b      	add	r3, r1
   a1bda:	2201      	movs	r2, #1
   a1bdc:	70da      	strb	r2, [r3, #3]
					
					Cl_dprepretcode = CL_DrepAlarmActon(Cl_DprepAlarmTable[tempcount].Cl_DprepAlarmId);
   a1bde:	7bba      	ldrb	r2, [r7, #14]
   a1be0:	491d      	ldr	r1, [pc, #116]	; (a1c58 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   a1be2:	4613      	mov	r3, r2
   a1be4:	00db      	lsls	r3, r3, #3
   a1be6:	1a9b      	subs	r3, r3, r2
   a1be8:	440b      	add	r3, r1
   a1bea:	781b      	ldrb	r3, [r3, #0]
   a1bec:	4618      	mov	r0, r3
   a1bee:	4b1c      	ldr	r3, [pc, #112]	; (a1c60 <Cl_Dprep_UpdateAlarmTable+0x104>)
   a1bf0:	4798      	blx	r3
   a1bf2:	4603      	mov	r3, r0
   a1bf4:	73fb      	strb	r3, [r7, #15]
   a1bf6:	e024      	b.n	a1c42 <Cl_Dprep_UpdateAlarmTable+0xe6>
				
			}
			else
			{
				// alarm was present before , but not active now.
				if(Cl_DprepAlarmTable[tempcount].IsRaised == true)
   a1bf8:	7bba      	ldrb	r2, [r7, #14]
   a1bfa:	4917      	ldr	r1, [pc, #92]	; (a1c58 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   a1bfc:	4613      	mov	r3, r2
   a1bfe:	00db      	lsls	r3, r3, #3
   a1c00:	1a9b      	subs	r3, r3, r2
   a1c02:	440b      	add	r3, r1
   a1c04:	78db      	ldrb	r3, [r3, #3]
   a1c06:	2b00      	cmp	r3, #0
   a1c08:	d013      	beq.n	a1c32 <Cl_Dprep_UpdateAlarmTable+0xd6>
				{
					Cl_DprepAlarmTable[tempcount].IsRaised = false;
   a1c0a:	7bba      	ldrb	r2, [r7, #14]
   a1c0c:	4912      	ldr	r1, [pc, #72]	; (a1c58 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   a1c0e:	4613      	mov	r3, r2
   a1c10:	00db      	lsls	r3, r3, #3
   a1c12:	1a9b      	subs	r3, r3, r2
   a1c14:	440b      	add	r3, r1
   a1c16:	2200      	movs	r2, #0
   a1c18:	70da      	strb	r2, [r3, #3]
					command = CON_TX_COMMAND_ALARM;
   a1c1a:	2307      	movs	r3, #7
   a1c1c:	71fb      	strb	r3, [r7, #7]
					data[0] = (Cl_Uint8Type)(Cl_DprepAlarmTable[tempcount].Cl_DprepAlarmId);
   a1c1e:	7bba      	ldrb	r2, [r7, #14]
   a1c20:	490d      	ldr	r1, [pc, #52]	; (a1c58 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   a1c22:	4613      	mov	r3, r2
   a1c24:	00db      	lsls	r3, r3, #3
   a1c26:	1a9b      	subs	r3, r3, r2
   a1c28:	440b      	add	r3, r1
   a1c2a:	781b      	ldrb	r3, [r3, #0]
   a1c2c:	713b      	strb	r3, [r7, #4]
					data[1] = (Cl_Uint8Type) 0;
   a1c2e:	2300      	movs	r3, #0
   a1c30:	717b      	strb	r3, [r7, #5]
				//	Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,2);
				}
				Cl_DprepAlarmTable[tempcount].IsActive = true;
   a1c32:	7bba      	ldrb	r2, [r7, #14]
   a1c34:	4908      	ldr	r1, [pc, #32]	; (a1c58 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   a1c36:	4613      	mov	r3, r2
   a1c38:	00db      	lsls	r3, r3, #3
   a1c3a:	1a9b      	subs	r3, r3, r2
   a1c3c:	440b      	add	r3, r1
   a1c3e:	2201      	movs	r2, #1
   a1c40:	709a      	strb	r2, [r3, #2]
		Cl_NewAlarmIdType cl_alarmId;
		
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
		
		
		for (tempcount = 0 ; tempcount < CL_DPREP_ALRM_MAX ; tempcount++)
   a1c42:	7bbb      	ldrb	r3, [r7, #14]
   a1c44:	3301      	adds	r3, #1
   a1c46:	73bb      	strb	r3, [r7, #14]
   a1c48:	7bbb      	ldrb	r3, [r7, #14]
   a1c4a:	2b24      	cmp	r3, #36	; 0x24
   a1c4c:	d998      	bls.n	a1b80 <Cl_Dprep_UpdateAlarmTable+0x24>
			}
			//}

		}

		return (Cl_dprepretcode );
   a1c4e:	7bfb      	ldrb	r3, [r7, #15]
	}
   a1c50:	4618      	mov	r0, r3
   a1c52:	3710      	adds	r7, #16
   a1c54:	46bd      	mov	sp, r7
   a1c56:	bd80      	pop	{r7, pc}
   a1c58:	20070d94 	.word	0x20070d94
   a1c5c:	00082c09 	.word	0x00082c09
   a1c60:	000a1c65 	.word	0x000a1c65

000a1c64 <CL_DrepAlarmActon>:

Cl_ReturnCodeType  CL_DrepAlarmActon(Cl_NewAlarmIdType cl_dprepalarmid)
{
   a1c64:	b580      	push	{r7, lr}
   a1c66:	b086      	sub	sp, #24
   a1c68:	af00      	add	r7, sp, #0
   a1c6a:	4603      	mov	r3, r0
   a1c6c:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   a1c6e:	2300      	movs	r3, #0
   a1c70:	75fb      	strb	r3, [r7, #23]
	Cl_Uint16Type levelswitchstatus = 0;
   a1c72:	2300      	movs	r3, #0
   a1c74:	82bb      	strh	r3, [r7, #20]
	Cl_Uint16Type wait_cnt = 0,TmpVal=0;
   a1c76:	2300      	movs	r3, #0
   a1c78:	827b      	strh	r3, [r7, #18]
   a1c7a:	2300      	movs	r3, #0
   a1c7c:	823b      	strh	r3, [r7, #16]
	static Cl_Uint8Type fillseccounter=0;
	Cl_Uint8Type data[3] ={0, 0};
   a1c7e:	2300      	movs	r3, #0
   a1c80:	813b      	strh	r3, [r7, #8]
   a1c82:	2300      	movs	r3, #0
   a1c84:	72bb      	strb	r3, [r7, #10]
	Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   a1c86:	2300      	movs	r3, #0
   a1c88:	73fb      	strb	r3, [r7, #15]
				Cl_Uint8Type data3;
				Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a1c8a:	2359      	movs	r3, #89	; 0x59
   a1c8c:	73bb      	strb	r3, [r7, #14]
	
	switch(cl_dprepalarmid)
   a1c8e:	79fb      	ldrb	r3, [r7, #7]
   a1c90:	3b01      	subs	r3, #1
   a1c92:	2b3e      	cmp	r3, #62	; 0x3e
   a1c94:	f200 8147 	bhi.w	a1f26 <CL_DrepAlarmActon+0x2c2>
   a1c98:	a201      	add	r2, pc, #4	; (adr r2, a1ca0 <CL_DrepAlarmActon+0x3c>)
   a1c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a1c9e:	bf00      	nop
   a1ca0:	000a1e07 	.word	0x000a1e07
   a1ca4:	000a1f27 	.word	0x000a1f27
   a1ca8:	000a1e3f 	.word	0x000a1e3f
   a1cac:	000a1e3f 	.word	0x000a1e3f
   a1cb0:	000a1e87 	.word	0x000a1e87
   a1cb4:	000a1e87 	.word	0x000a1e87
   a1cb8:	000a1ebf 	.word	0x000a1ebf
   a1cbc:	000a1ebf 	.word	0x000a1ebf
   a1cc0:	000a1f27 	.word	0x000a1f27
   a1cc4:	000a1f27 	.word	0x000a1f27
   a1cc8:	000a1f27 	.word	0x000a1f27
   a1ccc:	000a1dd5 	.word	0x000a1dd5
   a1cd0:	000a1dd5 	.word	0x000a1dd5
   a1cd4:	000a1dd5 	.word	0x000a1dd5
   a1cd8:	000a1dd5 	.word	0x000a1dd5
   a1cdc:	000a1dd5 	.word	0x000a1dd5
   a1ce0:	000a1dd5 	.word	0x000a1dd5
   a1ce4:	000a1dd5 	.word	0x000a1dd5
   a1ce8:	000a1ebf 	.word	0x000a1ebf
   a1cec:	000a1ebf 	.word	0x000a1ebf
   a1cf0:	000a1dd5 	.word	0x000a1dd5
   a1cf4:	000a1dd5 	.word	0x000a1dd5
   a1cf8:	000a1dd5 	.word	0x000a1dd5
   a1cfc:	000a1dd5 	.word	0x000a1dd5
   a1d00:	000a1f27 	.word	0x000a1f27
   a1d04:	000a1dd5 	.word	0x000a1dd5
   a1d08:	000a1f27 	.word	0x000a1f27
   a1d0c:	000a1f27 	.word	0x000a1f27
   a1d10:	000a1d9d 	.word	0x000a1d9d
   a1d14:	000a1f27 	.word	0x000a1f27
   a1d18:	000a1f27 	.word	0x000a1f27
   a1d1c:	000a1f27 	.word	0x000a1f27
   a1d20:	000a1f27 	.word	0x000a1f27
   a1d24:	000a1f27 	.word	0x000a1f27
   a1d28:	000a1f27 	.word	0x000a1f27
   a1d2c:	000a1f27 	.word	0x000a1f27
   a1d30:	000a1f27 	.word	0x000a1f27
   a1d34:	000a1f27 	.word	0x000a1f27
   a1d38:	000a1dd5 	.word	0x000a1dd5
   a1d3c:	000a1dd5 	.word	0x000a1dd5
   a1d40:	000a1e3f 	.word	0x000a1e3f
   a1d44:	000a1e87 	.word	0x000a1e87
   a1d48:	000a1e3f 	.word	0x000a1e3f
   a1d4c:	000a1e87 	.word	0x000a1e87
   a1d50:	000a1f27 	.word	0x000a1f27
   a1d54:	000a1f27 	.word	0x000a1f27
   a1d58:	000a1f27 	.word	0x000a1f27
   a1d5c:	000a1f27 	.word	0x000a1f27
   a1d60:	000a1f27 	.word	0x000a1f27
   a1d64:	000a1f27 	.word	0x000a1f27
   a1d68:	000a1f27 	.word	0x000a1f27
   a1d6c:	000a1f27 	.word	0x000a1f27
   a1d70:	000a1f27 	.word	0x000a1f27
   a1d74:	000a1f27 	.word	0x000a1f27
   a1d78:	000a1f27 	.word	0x000a1f27
   a1d7c:	000a1f27 	.word	0x000a1f27
   a1d80:	000a1f27 	.word	0x000a1f27
   a1d84:	000a1f27 	.word	0x000a1f27
   a1d88:	000a1f27 	.word	0x000a1f27
   a1d8c:	000a1f27 	.word	0x000a1f27
   a1d90:	000a1f2d 	.word	0x000a1f2d
   a1d94:	000a1f2d 	.word	0x000a1f2d
   a1d98:	000a1dd5 	.word	0x000a1dd5
	{
		
		case POWER_FAILURE:
		
		powerFailureFlag = 1 ;
   a1d9c:	4b79      	ldr	r3, [pc, #484]	; (a1f84 <CL_DrepAlarmActon+0x320>)
   a1d9e:	2201      	movs	r2, #1
   a1da0:	601a      	str	r2, [r3, #0]
			sv_cntrl_buzzer();	
   a1da2:	4b79      	ldr	r3, [pc, #484]	; (a1f88 <CL_DrepAlarmActon+0x324>)
   a1da4:	4798      	blx	r3
				sv_cntrl_setredalarm();
   a1da6:	4b79      	ldr	r3, [pc, #484]	; (a1f8c <CL_DrepAlarmActon+0x328>)
   a1da8:	4798      	blx	r3
				if((cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME) ||(cl_dprepstate == CL_DPREP_STATE_DPRIME_WAIT_STABILITY) || (cl_dprepstate == CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS))
   a1daa:	4b79      	ldr	r3, [pc, #484]	; (a1f90 <CL_DrepAlarmActon+0x32c>)
   a1dac:	781b      	ldrb	r3, [r3, #0]
   a1dae:	2b06      	cmp	r3, #6
   a1db0:	d007      	beq.n	a1dc2 <CL_DrepAlarmActon+0x15e>
   a1db2:	4b77      	ldr	r3, [pc, #476]	; (a1f90 <CL_DrepAlarmActon+0x32c>)
   a1db4:	781b      	ldrb	r3, [r3, #0]
   a1db6:	2b0e      	cmp	r3, #14
   a1db8:	d003      	beq.n	a1dc2 <CL_DrepAlarmActon+0x15e>
   a1dba:	4b75      	ldr	r3, [pc, #468]	; (a1f90 <CL_DrepAlarmActon+0x32c>)
   a1dbc:	781b      	ldrb	r3, [r3, #0]
   a1dbe:	2b0d      	cmp	r3, #13
   a1dc0:	d102      	bne.n	a1dc8 <CL_DrepAlarmActon+0x164>
				{
					//Cl_Dprep_Stoppreparation();
					Cl_Dprep_Priming_Stop();
   a1dc2:	4b74      	ldr	r3, [pc, #464]	; (a1f94 <CL_DrepAlarmActon+0x330>)
   a1dc4:	4798      	blx	r3
					Cl_Dprep_Stoppreparation();
					cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
				}
			
		
		break;
   a1dc6:	e0b2      	b.n	a1f2e <CL_DrepAlarmActon+0x2ca>
			//		cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME_STOPPED;
			//		Cl_deactivate_prep_alarms();
				}
				else{
					
					Cl_Dprep_Stoppreparation();
   a1dc8:	4b73      	ldr	r3, [pc, #460]	; (a1f98 <CL_DrepAlarmActon+0x334>)
   a1dca:	4798      	blx	r3
					cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   a1dcc:	4b70      	ldr	r3, [pc, #448]	; (a1f90 <CL_DrepAlarmActon+0x32c>)
   a1dce:	220c      	movs	r2, #12
   a1dd0:	701a      	strb	r2, [r3, #0]
				}
			
		
		break;
   a1dd2:	e0ac      	b.n	a1f2e <CL_DrepAlarmActon+0x2ca>
			case	PS2_LOW_THRESHOLD:
			case 	PS3_HIGH_THRESHOLD:
			case	PS3_LOW_THRESHOLD:
				
				//sv_cntrl_setredalarm();
	        	sv_cntrl_buzzer();	
   a1dd4:	4b6c      	ldr	r3, [pc, #432]	; (a1f88 <CL_DrepAlarmActon+0x324>)
   a1dd6:	4798      	blx	r3
				sv_cntrl_setredalarm();
   a1dd8:	4b6c      	ldr	r3, [pc, #432]	; (a1f8c <CL_DrepAlarmActon+0x328>)
   a1dda:	4798      	blx	r3
				if((cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME) ||(cl_dprepstate == CL_DPREP_STATE_DPRIME_WAIT_STABILITY) || (cl_dprepstate == CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS))
   a1ddc:	4b6c      	ldr	r3, [pc, #432]	; (a1f90 <CL_DrepAlarmActon+0x32c>)
   a1dde:	781b      	ldrb	r3, [r3, #0]
   a1de0:	2b06      	cmp	r3, #6
   a1de2:	d007      	beq.n	a1df4 <CL_DrepAlarmActon+0x190>
   a1de4:	4b6a      	ldr	r3, [pc, #424]	; (a1f90 <CL_DrepAlarmActon+0x32c>)
   a1de6:	781b      	ldrb	r3, [r3, #0]
   a1de8:	2b0e      	cmp	r3, #14
   a1dea:	d003      	beq.n	a1df4 <CL_DrepAlarmActon+0x190>
   a1dec:	4b68      	ldr	r3, [pc, #416]	; (a1f90 <CL_DrepAlarmActon+0x32c>)
   a1dee:	781b      	ldrb	r3, [r3, #0]
   a1df0:	2b0d      	cmp	r3, #13
   a1df2:	d102      	bne.n	a1dfa <CL_DrepAlarmActon+0x196>
				{
					//Cl_Dprep_Stoppreparation();
					Cl_Dprep_Priming_Stop();
   a1df4:	4b67      	ldr	r3, [pc, #412]	; (a1f94 <CL_DrepAlarmActon+0x330>)
   a1df6:	4798      	blx	r3
					Cl_Dprep_Stoppreparation();
					cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
				}
				
			
			break;
   a1df8:	e099      	b.n	a1f2e <CL_DrepAlarmActon+0x2ca>
			//		cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME_STOPPED;
			//		Cl_deactivate_prep_alarms();
				}
				else{
					
					Cl_Dprep_Stoppreparation();
   a1dfa:	4b67      	ldr	r3, [pc, #412]	; (a1f98 <CL_DrepAlarmActon+0x334>)
   a1dfc:	4798      	blx	r3
					cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   a1dfe:	4b64      	ldr	r3, [pc, #400]	; (a1f90 <CL_DrepAlarmActon+0x32c>)
   a1e00:	220c      	movs	r2, #12
   a1e02:	701a      	strb	r2, [r3, #0]
				}
				
			
			break;
   a1e04:	e093      	b.n	a1f2e <CL_DrepAlarmActon+0x2ca>
			
			case BLOODDOOR_STATUS_OPEN:
				sv_cntrl_setyellowalarm();
   a1e06:	4b65      	ldr	r3, [pc, #404]	; (a1f9c <CL_DrepAlarmActon+0x338>)
   a1e08:	4798      	blx	r3
				sv_cntrl_buzzer();
   a1e0a:	4b5f      	ldr	r3, [pc, #380]	; (a1f88 <CL_DrepAlarmActon+0x324>)
   a1e0c:	4798      	blx	r3
				//Cl_Dprep_Stoppreparation();
				cl_bp_controller(CL_BP_EVENT_STOP,0);
   a1e0e:	2004      	movs	r0, #4
   a1e10:	2100      	movs	r1, #0
   a1e12:	4b63      	ldr	r3, [pc, #396]	; (a1fa0 <CL_DrepAlarmActon+0x33c>)
   a1e14:	4798      	blx	r3
				
				sv_cntrl_buzzer();	
   a1e16:	4b5c      	ldr	r3, [pc, #368]	; (a1f88 <CL_DrepAlarmActon+0x324>)
   a1e18:	4798      	blx	r3
				sv_cntrl_setredalarm();
   a1e1a:	4b5c      	ldr	r3, [pc, #368]	; (a1f8c <CL_DrepAlarmActon+0x328>)
   a1e1c:	4798      	blx	r3
				if((cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME) ||(cl_dprepstate == CL_DPREP_STATE_DPRIME_WAIT_STABILITY) || (cl_dprepstate == CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS))
   a1e1e:	4b5c      	ldr	r3, [pc, #368]	; (a1f90 <CL_DrepAlarmActon+0x32c>)
   a1e20:	781b      	ldrb	r3, [r3, #0]
   a1e22:	2b06      	cmp	r3, #6
   a1e24:	d007      	beq.n	a1e36 <CL_DrepAlarmActon+0x1d2>
   a1e26:	4b5a      	ldr	r3, [pc, #360]	; (a1f90 <CL_DrepAlarmActon+0x32c>)
   a1e28:	781b      	ldrb	r3, [r3, #0]
   a1e2a:	2b0e      	cmp	r3, #14
   a1e2c:	d003      	beq.n	a1e36 <CL_DrepAlarmActon+0x1d2>
   a1e2e:	4b58      	ldr	r3, [pc, #352]	; (a1f90 <CL_DrepAlarmActon+0x32c>)
   a1e30:	781b      	ldrb	r3, [r3, #0]
   a1e32:	2b0d      	cmp	r3, #13
   a1e34:	d102      	bne.n	a1e3c <CL_DrepAlarmActon+0x1d8>
				{
					//Cl_Dprep_Stoppreparation();
					Cl_Dprep_Priming_Stop();
   a1e36:	4b57      	ldr	r3, [pc, #348]	; (a1f94 <CL_DrepAlarmActon+0x330>)
   a1e38:	4798      	blx	r3
// 				{	
// 				
// 					cl_dprepstate = CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS;
// 				}
				// 
			break;
   a1e3a:	e078      	b.n	a1f2e <CL_DrepAlarmActon+0x2ca>
   a1e3c:	e077      	b.n	a1f2e <CL_DrepAlarmActon+0x2ca>
			case ACID_IN_OPEN:
			case BICARB_IN_OPEN:
			case HOLDER1STATUS_OPEN:
			case HOLDER2STATUS_OPEN:
				
				sv_cntrl_buzzer();
   a1e3e:	4b52      	ldr	r3, [pc, #328]	; (a1f88 <CL_DrepAlarmActon+0x324>)
   a1e40:	4798      	blx	r3
				sv_cntrl_setgreenalarm();
   a1e42:	4b58      	ldr	r3, [pc, #352]	; (a1fa4 <CL_DrepAlarmActon+0x340>)
   a1e44:	4798      	blx	r3
				sv_cntrl_setredalarm();
   a1e46:	4b51      	ldr	r3, [pc, #324]	; (a1f8c <CL_DrepAlarmActon+0x328>)
   a1e48:	4798      	blx	r3
				if((cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME) ||(cl_dprepstate == CL_DPREP_STATE_DPRIME_WAIT_STABILITY) || (cl_dprepstate == CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS))
   a1e4a:	4b51      	ldr	r3, [pc, #324]	; (a1f90 <CL_DrepAlarmActon+0x32c>)
   a1e4c:	781b      	ldrb	r3, [r3, #0]
   a1e4e:	2b06      	cmp	r3, #6
   a1e50:	d007      	beq.n	a1e62 <CL_DrepAlarmActon+0x1fe>
   a1e52:	4b4f      	ldr	r3, [pc, #316]	; (a1f90 <CL_DrepAlarmActon+0x32c>)
   a1e54:	781b      	ldrb	r3, [r3, #0]
   a1e56:	2b0e      	cmp	r3, #14
   a1e58:	d003      	beq.n	a1e62 <CL_DrepAlarmActon+0x1fe>
   a1e5a:	4b4d      	ldr	r3, [pc, #308]	; (a1f90 <CL_DrepAlarmActon+0x32c>)
   a1e5c:	781b      	ldrb	r3, [r3, #0]
   a1e5e:	2b0d      	cmp	r3, #13
   a1e60:	d10b      	bne.n	a1e7a <CL_DrepAlarmActon+0x216>
				{
				sv_cntrl_setyellowalarm();
   a1e62:	4b4e      	ldr	r3, [pc, #312]	; (a1f9c <CL_DrepAlarmActon+0x338>)
   a1e64:	4798      	blx	r3
				sv_cntrl_enable_bypass();
   a1e66:	4b50      	ldr	r3, [pc, #320]	; (a1fa8 <CL_DrepAlarmActon+0x344>)
   a1e68:	4798      	blx	r3
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   a1e6a:	2002      	movs	r0, #2
   a1e6c:	2100      	movs	r1, #0
   a1e6e:	4b4f      	ldr	r3, [pc, #316]	; (a1fac <CL_DrepAlarmActon+0x348>)
   a1e70:	4798      	blx	r3
				cl_dprepbypassstate = CL_DPREP_BYPASS_ON;	
   a1e72:	4b4f      	ldr	r3, [pc, #316]	; (a1fb0 <CL_DrepAlarmActon+0x34c>)
   a1e74:	2201      	movs	r2, #1
   a1e76:	701a      	strb	r2, [r3, #0]
				
				Cl_Dprep_Stoppreparation();
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;	
				}
				
			break;
   a1e78:	e059      	b.n	a1f2e <CL_DrepAlarmActon+0x2ca>
				}
				else{
					
				//sv_cntrl_setredalarm();
				
				Cl_Dprep_Stoppreparation();
   a1e7a:	4b47      	ldr	r3, [pc, #284]	; (a1f98 <CL_DrepAlarmActon+0x334>)
   a1e7c:	4798      	blx	r3
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;	
   a1e7e:	4b44      	ldr	r3, [pc, #272]	; (a1f90 <CL_DrepAlarmActon+0x32c>)
   a1e80:	220c      	movs	r2, #12
   a1e82:	701a      	strb	r2, [r3, #0]
				}
				
			break;
   a1e84:	e053      	b.n	a1f2e <CL_DrepAlarmActon+0x2ca>
			case HOLDER2STATUS_CLOSED:
			case ACID_IN_CLOSED:
			case BICARB_IN_CLOSED:
				
		//	sv_cntrl_setyellowalarm();
			sv_cntrl_buzzer();
   a1e86:	4b40      	ldr	r3, [pc, #256]	; (a1f88 <CL_DrepAlarmActon+0x324>)
   a1e88:	4798      	blx	r3
			if((cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME)||(cl_dprepstate == CL_DPREP_STATE_DPRIME_WAIT_STABILITY) || (cl_dprepstate == CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS))
   a1e8a:	4b41      	ldr	r3, [pc, #260]	; (a1f90 <CL_DrepAlarmActon+0x32c>)
   a1e8c:	781b      	ldrb	r3, [r3, #0]
   a1e8e:	2b06      	cmp	r3, #6
   a1e90:	d007      	beq.n	a1ea2 <CL_DrepAlarmActon+0x23e>
   a1e92:	4b3f      	ldr	r3, [pc, #252]	; (a1f90 <CL_DrepAlarmActon+0x32c>)
   a1e94:	781b      	ldrb	r3, [r3, #0]
   a1e96:	2b0e      	cmp	r3, #14
   a1e98:	d003      	beq.n	a1ea2 <CL_DrepAlarmActon+0x23e>
   a1e9a:	4b3d      	ldr	r3, [pc, #244]	; (a1f90 <CL_DrepAlarmActon+0x32c>)
   a1e9c:	781b      	ldrb	r3, [r3, #0]
   a1e9e:	2b0d      	cmp	r3, #13
   a1ea0:	d107      	bne.n	a1eb2 <CL_DrepAlarmActon+0x24e>
			{
				sv_cntrl_setyellowalarm();
   a1ea2:	4b3e      	ldr	r3, [pc, #248]	; (a1f9c <CL_DrepAlarmActon+0x338>)
   a1ea4:	4798      	blx	r3
				sv_cntrl_enable_bypass();
   a1ea6:	4b40      	ldr	r3, [pc, #256]	; (a1fa8 <CL_DrepAlarmActon+0x344>)
   a1ea8:	4798      	blx	r3
				cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   a1eaa:	4b41      	ldr	r3, [pc, #260]	; (a1fb0 <CL_DrepAlarmActon+0x34c>)
   a1eac:	2201      	movs	r2, #1
   a1eae:	701a      	strb	r2, [r3, #0]
				
				Cl_Dprep_Stoppreparation();
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
			}
			
			break;
   a1eb0:	e03d      	b.n	a1f2e <CL_DrepAlarmActon+0x2ca>
			//	cl_dprepstate = CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS;
				
			}
			else{
				
				Cl_Dprep_Stoppreparation();
   a1eb2:	4b39      	ldr	r3, [pc, #228]	; (a1f98 <CL_DrepAlarmActon+0x334>)
   a1eb4:	4798      	blx	r3
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   a1eb6:	4b36      	ldr	r3, [pc, #216]	; (a1f90 <CL_DrepAlarmActon+0x32c>)
   a1eb8:	220c      	movs	r2, #12
   a1eba:	701a      	strb	r2, [r3, #0]
			}
			
			break;
   a1ebc:	e037      	b.n	a1f2e <CL_DrepAlarmActon+0x2ca>
			case TEMP3_LOW_THRESHOLD:
			case 	COND_STATUS_HIGH:
			case	COND_STATUS_LOW:
			
				
				sv_cntrl_buzzer();
   a1ebe:	4b32      	ldr	r3, [pc, #200]	; (a1f88 <CL_DrepAlarmActon+0x324>)
   a1ec0:	4798      	blx	r3
			
			if((cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME) ||(cl_dprepstate == CL_DPREP_STATE_DPRIME_WAIT_STABILITY) || (cl_dprepstate == CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS))
   a1ec2:	4b33      	ldr	r3, [pc, #204]	; (a1f90 <CL_DrepAlarmActon+0x32c>)
   a1ec4:	781b      	ldrb	r3, [r3, #0]
   a1ec6:	2b06      	cmp	r3, #6
   a1ec8:	d007      	beq.n	a1eda <CL_DrepAlarmActon+0x276>
   a1eca:	4b31      	ldr	r3, [pc, #196]	; (a1f90 <CL_DrepAlarmActon+0x32c>)
   a1ecc:	781b      	ldrb	r3, [r3, #0]
   a1ece:	2b0e      	cmp	r3, #14
   a1ed0:	d003      	beq.n	a1eda <CL_DrepAlarmActon+0x276>
   a1ed2:	4b2f      	ldr	r3, [pc, #188]	; (a1f90 <CL_DrepAlarmActon+0x32c>)
   a1ed4:	781b      	ldrb	r3, [r3, #0]
   a1ed6:	2b0d      	cmp	r3, #13
   a1ed8:	d11f      	bne.n	a1f1a <CL_DrepAlarmActon+0x2b6>
			{
				//Cl_Dprep_Stoppreparation();
				sv_cntrl_setyellowalarm();
   a1eda:	4b30      	ldr	r3, [pc, #192]	; (a1f9c <CL_DrepAlarmActon+0x338>)
   a1edc:	4798      	blx	r3
				sv_cntrl_enable_bypass();
   a1ede:	4b32      	ldr	r3, [pc, #200]	; (a1fa8 <CL_DrepAlarmActon+0x344>)
   a1ee0:	4798      	blx	r3
				cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   a1ee2:	4b33      	ldr	r3, [pc, #204]	; (a1fb0 <CL_DrepAlarmActon+0x34c>)
   a1ee4:	2201      	movs	r2, #1
   a1ee6:	701a      	strb	r2, [r3, #0]
				//cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
				state_counter++;
   a1ee8:	4b32      	ldr	r3, [pc, #200]	; (a1fb4 <CL_DrepAlarmActon+0x350>)
   a1eea:	681b      	ldr	r3, [r3, #0]
   a1eec:	3301      	adds	r3, #1
   a1eee:	4a31      	ldr	r2, [pc, #196]	; (a1fb4 <CL_DrepAlarmActon+0x350>)
   a1ef0:	6013      	str	r3, [r2, #0]
				Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   a1ef2:	2008      	movs	r0, #8
   a1ef4:	2100      	movs	r1, #0
   a1ef6:	4b30      	ldr	r3, [pc, #192]	; (a1fb8 <CL_DrepAlarmActon+0x354>)
   a1ef8:	4798      	blx	r3
				Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   a1efa:	2007      	movs	r0, #7
   a1efc:	2100      	movs	r1, #0
   a1efe:	4b2e      	ldr	r3, [pc, #184]	; (a1fb8 <CL_DrepAlarmActon+0x354>)
   a1f00:	4798      	blx	r3
				Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   a1f02:	2013      	movs	r0, #19
   a1f04:	2100      	movs	r1, #0
   a1f06:	4b2c      	ldr	r3, [pc, #176]	; (a1fb8 <CL_DrepAlarmActon+0x354>)
   a1f08:	4798      	blx	r3
				Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   a1f0a:	2014      	movs	r0, #20
   a1f0c:	2100      	movs	r1, #0
   a1f0e:	4b2a      	ldr	r3, [pc, #168]	; (a1fb8 <CL_DrepAlarmActon+0x354>)
   a1f10:	4798      	blx	r3
				
				cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
   a1f12:	4b1f      	ldr	r3, [pc, #124]	; (a1f90 <CL_DrepAlarmActon+0x32c>)
   a1f14:	220e      	movs	r2, #14
   a1f16:	701a      	strb	r2, [r3, #0]
			else{
				//sv_cntrl_setredalarm();
				Cl_Dprep_Stoppreparation();
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
			}
			break;
   a1f18:	e009      	b.n	a1f2e <CL_DrepAlarmActon+0x2ca>
				
				cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
			}
			else{
				//sv_cntrl_setredalarm();
				Cl_Dprep_Stoppreparation();
   a1f1a:	4b1f      	ldr	r3, [pc, #124]	; (a1f98 <CL_DrepAlarmActon+0x334>)
   a1f1c:	4798      	blx	r3
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   a1f1e:	4b1c      	ldr	r3, [pc, #112]	; (a1f90 <CL_DrepAlarmActon+0x32c>)
   a1f20:	220c      	movs	r2, #12
   a1f22:	701a      	strb	r2, [r3, #0]
			}
			break;
   a1f24:	e003      	b.n	a1f2e <CL_DrepAlarmActon+0x2ca>
			
		
			default:
			cl_dprepalarmid = _NO_ALARM;
   a1f26:	2300      	movs	r3, #0
   a1f28:	71fb      	strb	r3, [r7, #7]
			break;
   a1f2a:	e000      	b.n	a1f2e <CL_DrepAlarmActon+0x2ca>
			//		Cl_DprepFlowOff();
					//cl_gfillinprogress = false;		
					
				}
			}
			break;
   a1f2c:	bf00      	nop
		
			default:
			cl_dprepalarmid = _NO_ALARM;
			break;
	}
		 if(cl_dprepalarmid != _NO_ALARM)
   a1f2e:	79fb      	ldrb	r3, [r7, #7]
   a1f30:	2b00      	cmp	r3, #0
   a1f32:	d021      	beq.n	a1f78 <CL_DrepAlarmActon+0x314>
		 {
			data[0] = (Cl_Uint8Type)cl_dprepalarmid;
   a1f34:	79fb      	ldrb	r3, [r7, #7]
   a1f36:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   a1f38:	2301      	movs	r3, #1
   a1f3a:	727b      	strb	r3, [r7, #9]
			data[2] = (Cl_Uint8Type)CRITICAL;
   a1f3c:	2302      	movs	r3, #2
   a1f3e:	72bb      	strb	r3, [r7, #10]
			command = CON_TX_COMMAND_ALARM;
   a1f40:	2307      	movs	r3, #7
   a1f42:	73bb      	strb	r3, [r7, #14]

			Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,3);
   a1f44:	7bba      	ldrb	r2, [r7, #14]
   a1f46:	f107 0308 	add.w	r3, r7, #8
   a1f4a:	4610      	mov	r0, r2
   a1f4c:	4619      	mov	r1, r3
   a1f4e:	2203      	movs	r2, #3
   a1f50:	4b1a      	ldr	r3, [pc, #104]	; (a1fbc <CL_DrepAlarmActon+0x358>)
   a1f52:	4798      	blx	r3
   a1f54:	4603      	mov	r3, r0
   a1f56:	75fb      	strb	r3, [r7, #23]
			
					
			command = CON_TX_COMMAND_CL_SYS_STATE;
   a1f58:	232b      	movs	r3, #43	; 0x2b
   a1f5a:	73bb      	strb	r3, [r7, #14]
			data[0] = (Cl_Uint8Type)POST_CLEAN_STANDBY;
   a1f5c:	2302      	movs	r3, #2
   a1f5e:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type)PRIME_IDLE;
   a1f60:	2300      	movs	r3, #0
   a1f62:	727b      	strb	r3, [r7, #9]
			Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,2);
   a1f64:	7bba      	ldrb	r2, [r7, #14]
   a1f66:	f107 0308 	add.w	r3, r7, #8
   a1f6a:	4610      	mov	r0, r2
   a1f6c:	4619      	mov	r1, r3
   a1f6e:	2202      	movs	r2, #2
   a1f70:	4b12      	ldr	r3, [pc, #72]	; (a1fbc <CL_DrepAlarmActon+0x358>)
   a1f72:	4798      	blx	r3
   a1f74:	4603      	mov	r3, r0
   a1f76:	75fb      	strb	r3, [r7, #23]
		 }
			
	return CL_OK;	
   a1f78:	2300      	movs	r3, #0
}
   a1f7a:	4618      	mov	r0, r3
   a1f7c:	3718      	adds	r7, #24
   a1f7e:	46bd      	mov	sp, r7
   a1f80:	bd80      	pop	{r7, pc}
   a1f82:	bf00      	nop
   a1f84:	20071d84 	.word	0x20071d84
   a1f88:	0009b671 	.word	0x0009b671
   a1f8c:	0009b635 	.word	0x0009b635
   a1f90:	20071dcf 	.word	0x20071dcf
   a1f94:	000a3c3d 	.word	0x000a3c3d
   a1f98:	000a26d5 	.word	0x000a26d5
   a1f9c:	0009b649 	.word	0x0009b649
   a1fa0:	00094325 	.word	0x00094325
   a1fa4:	0009b65d 	.word	0x0009b65d
   a1fa8:	0009b595 	.word	0x0009b595
   a1fac:	000880c1 	.word	0x000880c1
   a1fb0:	20071dd0 	.word	0x20071dd0
   a1fb4:	20071d94 	.word	0x20071d94
   a1fb8:	00082a35 	.word	0x00082a35
   a1fbc:	0009d1e9 	.word	0x0009d1e9

000a1fc0 <Cl_dprepSendAlarm>:
	
	

Cl_ReturnCodeType  Cl_dprepSendAlarm(Cl_NewAlarmIdType cl_dprepalarmId )
{
   a1fc0:	b580      	push	{r7, lr}
   a1fc2:	b086      	sub	sp, #24
   a1fc4:	af00      	add	r7, sp, #0
   a1fc6:	4603      	mov	r3, r0
   a1fc8:	71fb      	strb	r3, [r7, #7]
	
			Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a1fca:	2300      	movs	r3, #0
   a1fcc:	75fb      	strb	r3, [r7, #23]
			 
			 
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   a1fce:	2300      	movs	r3, #0
   a1fd0:	81bb      	strh	r3, [r7, #12]
   a1fd2:	2300      	movs	r3, #0
   a1fd4:	73bb      	strb	r3, [r7, #14]
   a1fd6:	2300      	movs	r3, #0
   a1fd8:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a1fda:	2359      	movs	r3, #89	; 0x59
   a1fdc:	73fb      	strb	r3, [r7, #15]
			sv_cntrl_setredalarm();
   a1fde:	4b10      	ldr	r3, [pc, #64]	; (a2020 <Cl_dprepSendAlarm+0x60>)
   a1fe0:	4798      	blx	r3
			sv_cntrl_buzzer();
   a1fe2:	4b10      	ldr	r3, [pc, #64]	; (a2024 <Cl_dprepSendAlarm+0x64>)
   a1fe4:	4798      	blx	r3
			if(cl_dprepalarmId != _NO_ALARM)
   a1fe6:	79fb      	ldrb	r3, [r7, #7]
   a1fe8:	2b00      	cmp	r3, #0
   a1fea:	d014      	beq.n	a2016 <Cl_dprepSendAlarm+0x56>
			 {
				data[0] = (Cl_Uint8Type)cl_dprepalarmId;
   a1fec:	79fb      	ldrb	r3, [r7, #7]
   a1fee:	733b      	strb	r3, [r7, #12]
				data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   a1ff0:	2301      	movs	r3, #1
   a1ff2:	737b      	strb	r3, [r7, #13]
				data[2] = (Cl_Uint8Type)CRITICAL;
   a1ff4:	2302      	movs	r3, #2
   a1ff6:	73bb      	strb	r3, [r7, #14]
				command = CON_TX_COMMAND_ALARM;
   a1ff8:	2307      	movs	r3, #7
   a1ffa:	73fb      	strb	r3, [r7, #15]
			
				Cl_RetVal = Cl_SendDatatoconsole(command,&data,3);
   a1ffc:	7bfa      	ldrb	r2, [r7, #15]
   a1ffe:	f107 030c 	add.w	r3, r7, #12
   a2002:	4610      	mov	r0, r2
   a2004:	4619      	mov	r1, r3
   a2006:	2203      	movs	r2, #3
   a2008:	4b07      	ldr	r3, [pc, #28]	; (a2028 <Cl_dprepSendAlarm+0x68>)
   a200a:	4798      	blx	r3
   a200c:	4603      	mov	r3, r0
   a200e:	75fb      	strb	r3, [r7, #23]
				cl_wait(10);
   a2010:	200a      	movs	r0, #10
   a2012:	4b06      	ldr	r3, [pc, #24]	; (a202c <Cl_dprepSendAlarm+0x6c>)
   a2014:	4798      	blx	r3

			 }
}	
   a2016:	4618      	mov	r0, r3
   a2018:	3718      	adds	r7, #24
   a201a:	46bd      	mov	sp, r7
   a201c:	bd80      	pop	{r7, pc}
   a201e:	bf00      	nop
   a2020:	0009b635 	.word	0x0009b635
   a2024:	0009b671 	.word	0x0009b671
   a2028:	0009d1e9 	.word	0x0009d1e9
   a202c:	0009421d 	.word	0x0009421d

000a2030 <Cl_Dprep_CheckforfillingCompletion>:
	Cl_ReturnCodeType Cl_Dprep_CheckforfillingCompletion(void)
	{
   a2030:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   a2034:	b087      	sub	sp, #28
   a2036:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType Cl_dprepretcode = CL_ERROR;
   a2038:	2304      	movs	r3, #4
   a203a:	75fb      	strb	r3, [r7, #23]
		Cl_Int16Type cl_cond,cl_temp3;
		float cond,cond_comp,temp;
		float cl_cond_ms,cl_temp3_cel;
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Cl_Dprep_filling_TotalMinutescounter,2);
   a203c:	2019      	movs	r0, #25
   a203e:	497a      	ldr	r1, [pc, #488]	; (a2228 <Cl_Dprep_CheckforfillingCompletion+0x1f8>)
   a2040:	2202      	movs	r2, #2
   a2042:	4b7a      	ldr	r3, [pc, #488]	; (a222c <Cl_Dprep_CheckforfillingCompletion+0x1fc>)
   a2044:	4798      	blx	r3
		if(Cl_Dprep_filling_TotalMinutescounter > CL_DPREP_FILLING_TIMEOUT_MIN )
   a2046:	4b78      	ldr	r3, [pc, #480]	; (a2228 <Cl_Dprep_CheckforfillingCompletion+0x1f8>)
   a2048:	881b      	ldrh	r3, [r3, #0]
   a204a:	b21b      	sxth	r3, r3
   a204c:	2b0a      	cmp	r3, #10
   a204e:	f340 80cd 	ble.w	a21ec <Cl_Dprep_CheckforfillingCompletion+0x1bc>
		{
			
			//Cl_dprepretcode = CL_REJECTED;
			// Rise alarm
			Cl_dprepretcode = CL_OK;
   a2052:	2300      	movs	r3, #0
   a2054:	75fb      	strb	r3, [r7, #23]
	//	}                                           // manav02 commented else statement , timeout has to be finished
	//	else
//		{
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&cl_temp3);
   a2056:	1d3b      	adds	r3, r7, #4
   a2058:	2014      	movs	r0, #20
   a205a:	4619      	mov	r1, r3
   a205c:	4b74      	ldr	r3, [pc, #464]	; (a2230 <Cl_Dprep_CheckforfillingCompletion+0x200>)
   a205e:	4798      	blx	r3
			Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&cl_cond);
   a2060:	1dbb      	adds	r3, r7, #6
   a2062:	2007      	movs	r0, #7
   a2064:	4619      	mov	r1, r3
   a2066:	4b72      	ldr	r3, [pc, #456]	; (a2230 <Cl_Dprep_CheckforfillingCompletion+0x200>)
   a2068:	4798      	blx	r3
// 			//temp3 = ((temp3* 4) +temp)/5;
// 			
// 							
// 			//cl_temp3_cel = 0.0000116 * temp *temp + 0.0035 *temp + 11.157;

		cl_temp3_cel = cl_temp3 /100;
   a206a:	88bb      	ldrh	r3, [r7, #4]
   a206c:	b21b      	sxth	r3, r3
   a206e:	4a71      	ldr	r2, [pc, #452]	; (a2234 <Cl_Dprep_CheckforfillingCompletion+0x204>)
   a2070:	fb82 1203 	smull	r1, r2, r2, r3
   a2074:	1152      	asrs	r2, r2, #5
   a2076:	17db      	asrs	r3, r3, #31
   a2078:	1ad3      	subs	r3, r2, r3
   a207a:	b29b      	uxth	r3, r3
   a207c:	b21a      	sxth	r2, r3
   a207e:	4b6e      	ldr	r3, [pc, #440]	; (a2238 <Cl_Dprep_CheckforfillingCompletion+0x208>)
   a2080:	4610      	mov	r0, r2
   a2082:	4798      	blx	r3
   a2084:	4603      	mov	r3, r0
   a2086:	613b      	str	r3, [r7, #16]
			
									//	cond =(cond*5 + cond_final_cs3)/6;
			cond =  -0.0001 * cl_cond* cl_cond  + 0.36 * cl_cond  - 38.39 ;
   a2088:	88fb      	ldrh	r3, [r7, #6]
   a208a:	b21a      	sxth	r2, r3
   a208c:	4b6b      	ldr	r3, [pc, #428]	; (a223c <Cl_Dprep_CheckforfillingCompletion+0x20c>)
   a208e:	4610      	mov	r0, r2
   a2090:	4798      	blx	r3
   a2092:	4602      	mov	r2, r0
   a2094:	460b      	mov	r3, r1
   a2096:	4c6a      	ldr	r4, [pc, #424]	; (a2240 <Cl_Dprep_CheckforfillingCompletion+0x210>)
   a2098:	4610      	mov	r0, r2
   a209a:	4619      	mov	r1, r3
   a209c:	a356      	add	r3, pc, #344	; (adr r3, a21f8 <Cl_Dprep_CheckforfillingCompletion+0x1c8>)
   a209e:	e9d3 2300 	ldrd	r2, r3, [r3]
   a20a2:	47a0      	blx	r4
   a20a4:	4602      	mov	r2, r0
   a20a6:	460b      	mov	r3, r1
   a20a8:	4690      	mov	r8, r2
   a20aa:	4699      	mov	r9, r3
   a20ac:	88fb      	ldrh	r3, [r7, #6]
   a20ae:	b21a      	sxth	r2, r3
   a20b0:	4b62      	ldr	r3, [pc, #392]	; (a223c <Cl_Dprep_CheckforfillingCompletion+0x20c>)
   a20b2:	4610      	mov	r0, r2
   a20b4:	4798      	blx	r3
   a20b6:	4602      	mov	r2, r0
   a20b8:	460b      	mov	r3, r1
   a20ba:	4c61      	ldr	r4, [pc, #388]	; (a2240 <Cl_Dprep_CheckforfillingCompletion+0x210>)
   a20bc:	4640      	mov	r0, r8
   a20be:	4649      	mov	r1, r9
   a20c0:	47a0      	blx	r4
   a20c2:	4602      	mov	r2, r0
   a20c4:	460b      	mov	r3, r1
   a20c6:	4690      	mov	r8, r2
   a20c8:	4699      	mov	r9, r3
   a20ca:	88fb      	ldrh	r3, [r7, #6]
   a20cc:	b21a      	sxth	r2, r3
   a20ce:	4b5b      	ldr	r3, [pc, #364]	; (a223c <Cl_Dprep_CheckforfillingCompletion+0x20c>)
   a20d0:	4610      	mov	r0, r2
   a20d2:	4798      	blx	r3
   a20d4:	4602      	mov	r2, r0
   a20d6:	460b      	mov	r3, r1
   a20d8:	4c59      	ldr	r4, [pc, #356]	; (a2240 <Cl_Dprep_CheckforfillingCompletion+0x210>)
   a20da:	4610      	mov	r0, r2
   a20dc:	4619      	mov	r1, r3
   a20de:	a348      	add	r3, pc, #288	; (adr r3, a2200 <Cl_Dprep_CheckforfillingCompletion+0x1d0>)
   a20e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   a20e4:	47a0      	blx	r4
   a20e6:	4602      	mov	r2, r0
   a20e8:	460b      	mov	r3, r1
   a20ea:	4c56      	ldr	r4, [pc, #344]	; (a2244 <Cl_Dprep_CheckforfillingCompletion+0x214>)
   a20ec:	4640      	mov	r0, r8
   a20ee:	4649      	mov	r1, r9
   a20f0:	47a0      	blx	r4
   a20f2:	4602      	mov	r2, r0
   a20f4:	460b      	mov	r3, r1
   a20f6:	4c54      	ldr	r4, [pc, #336]	; (a2248 <Cl_Dprep_CheckforfillingCompletion+0x218>)
   a20f8:	4610      	mov	r0, r2
   a20fa:	4619      	mov	r1, r3
   a20fc:	a342      	add	r3, pc, #264	; (adr r3, a2208 <Cl_Dprep_CheckforfillingCompletion+0x1d8>)
   a20fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   a2102:	47a0      	blx	r4
   a2104:	4602      	mov	r2, r0
   a2106:	460b      	mov	r3, r1
   a2108:	4610      	mov	r0, r2
   a210a:	4619      	mov	r1, r3
   a210c:	4b4f      	ldr	r3, [pc, #316]	; (a224c <Cl_Dprep_CheckforfillingCompletion+0x21c>)
   a210e:	4798      	blx	r3
   a2110:	4603      	mov	r3, r0
   a2112:	60fb      	str	r3, [r7, #12]
			cond_comp= (cond/(1+(cl_temp3_cel-25.0)*0.020))/10;
   a2114:	4b4e      	ldr	r3, [pc, #312]	; (a2250 <Cl_Dprep_CheckforfillingCompletion+0x220>)
   a2116:	68f8      	ldr	r0, [r7, #12]
   a2118:	4798      	blx	r3
   a211a:	4680      	mov	r8, r0
   a211c:	4689      	mov	r9, r1
   a211e:	4b4c      	ldr	r3, [pc, #304]	; (a2250 <Cl_Dprep_CheckforfillingCompletion+0x220>)
   a2120:	6938      	ldr	r0, [r7, #16]
   a2122:	4798      	blx	r3
   a2124:	4602      	mov	r2, r0
   a2126:	460b      	mov	r3, r1
   a2128:	4c47      	ldr	r4, [pc, #284]	; (a2248 <Cl_Dprep_CheckforfillingCompletion+0x218>)
   a212a:	4610      	mov	r0, r2
   a212c:	4619      	mov	r1, r3
   a212e:	f04f 0200 	mov.w	r2, #0
   a2132:	4b48      	ldr	r3, [pc, #288]	; (a2254 <Cl_Dprep_CheckforfillingCompletion+0x224>)
   a2134:	47a0      	blx	r4
   a2136:	4602      	mov	r2, r0
   a2138:	460b      	mov	r3, r1
   a213a:	4c41      	ldr	r4, [pc, #260]	; (a2240 <Cl_Dprep_CheckforfillingCompletion+0x210>)
   a213c:	4610      	mov	r0, r2
   a213e:	4619      	mov	r1, r3
   a2140:	a333      	add	r3, pc, #204	; (adr r3, a2210 <Cl_Dprep_CheckforfillingCompletion+0x1e0>)
   a2142:	e9d3 2300 	ldrd	r2, r3, [r3]
   a2146:	47a0      	blx	r4
   a2148:	4602      	mov	r2, r0
   a214a:	460b      	mov	r3, r1
   a214c:	4c3d      	ldr	r4, [pc, #244]	; (a2244 <Cl_Dprep_CheckforfillingCompletion+0x214>)
   a214e:	4610      	mov	r0, r2
   a2150:	4619      	mov	r1, r3
   a2152:	f04f 0200 	mov.w	r2, #0
   a2156:	4b40      	ldr	r3, [pc, #256]	; (a2258 <Cl_Dprep_CheckforfillingCompletion+0x228>)
   a2158:	47a0      	blx	r4
   a215a:	4602      	mov	r2, r0
   a215c:	460b      	mov	r3, r1
   a215e:	4c3f      	ldr	r4, [pc, #252]	; (a225c <Cl_Dprep_CheckforfillingCompletion+0x22c>)
   a2160:	4640      	mov	r0, r8
   a2162:	4649      	mov	r1, r9
   a2164:	47a0      	blx	r4
   a2166:	4602      	mov	r2, r0
   a2168:	460b      	mov	r3, r1
   a216a:	4c3c      	ldr	r4, [pc, #240]	; (a225c <Cl_Dprep_CheckforfillingCompletion+0x22c>)
   a216c:	4610      	mov	r0, r2
   a216e:	4619      	mov	r1, r3
   a2170:	f04f 0200 	mov.w	r2, #0
   a2174:	4b3a      	ldr	r3, [pc, #232]	; (a2260 <Cl_Dprep_CheckforfillingCompletion+0x230>)
   a2176:	47a0      	blx	r4
   a2178:	4602      	mov	r2, r0
   a217a:	460b      	mov	r3, r1
   a217c:	4610      	mov	r0, r2
   a217e:	4619      	mov	r1, r3
   a2180:	4b32      	ldr	r3, [pc, #200]	; (a224c <Cl_Dprep_CheckforfillingCompletion+0x21c>)
   a2182:	4798      	blx	r3
   a2184:	4603      	mov	r3, r0
   a2186:	60bb      	str	r3, [r7, #8]
			//tempdata.word = (cond_comp);
			  
			if((cond_comp > 13.3) && (cond_comp < 13.8))
   a2188:	4b31      	ldr	r3, [pc, #196]	; (a2250 <Cl_Dprep_CheckforfillingCompletion+0x220>)
   a218a:	68b8      	ldr	r0, [r7, #8]
   a218c:	4798      	blx	r3
   a218e:	4602      	mov	r2, r0
   a2190:	460b      	mov	r3, r1
   a2192:	4c34      	ldr	r4, [pc, #208]	; (a2264 <Cl_Dprep_CheckforfillingCompletion+0x234>)
   a2194:	4610      	mov	r0, r2
   a2196:	4619      	mov	r1, r3
   a2198:	a31f      	add	r3, pc, #124	; (adr r3, a2218 <Cl_Dprep_CheckforfillingCompletion+0x1e8>)
   a219a:	e9d3 2300 	ldrd	r2, r3, [r3]
   a219e:	47a0      	blx	r4
   a21a0:	4603      	mov	r3, r0
   a21a2:	2b00      	cmp	r3, #0
   a21a4:	d022      	beq.n	a21ec <Cl_Dprep_CheckforfillingCompletion+0x1bc>
   a21a6:	4b2a      	ldr	r3, [pc, #168]	; (a2250 <Cl_Dprep_CheckforfillingCompletion+0x220>)
   a21a8:	68b8      	ldr	r0, [r7, #8]
   a21aa:	4798      	blx	r3
   a21ac:	4602      	mov	r2, r0
   a21ae:	460b      	mov	r3, r1
   a21b0:	4c2d      	ldr	r4, [pc, #180]	; (a2268 <Cl_Dprep_CheckforfillingCompletion+0x238>)
   a21b2:	4610      	mov	r0, r2
   a21b4:	4619      	mov	r1, r3
   a21b6:	a31a      	add	r3, pc, #104	; (adr r3, a2220 <Cl_Dprep_CheckforfillingCompletion+0x1f0>)
   a21b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   a21bc:	47a0      	blx	r4
   a21be:	4603      	mov	r3, r0
   a21c0:	2b00      	cmp	r3, #0
   a21c2:	d013      	beq.n	a21ec <Cl_Dprep_CheckforfillingCompletion+0x1bc>
			{
				if ( cl_temp3_cel > 36.5 && cl_temp3_cel < 37.5)
   a21c4:	4b29      	ldr	r3, [pc, #164]	; (a226c <Cl_Dprep_CheckforfillingCompletion+0x23c>)
   a21c6:	6938      	ldr	r0, [r7, #16]
   a21c8:	4929      	ldr	r1, [pc, #164]	; (a2270 <Cl_Dprep_CheckforfillingCompletion+0x240>)
   a21ca:	4798      	blx	r3
   a21cc:	4603      	mov	r3, r0
   a21ce:	2b00      	cmp	r3, #0
   a21d0:	d00c      	beq.n	a21ec <Cl_Dprep_CheckforfillingCompletion+0x1bc>
   a21d2:	4b28      	ldr	r3, [pc, #160]	; (a2274 <Cl_Dprep_CheckforfillingCompletion+0x244>)
   a21d4:	6938      	ldr	r0, [r7, #16]
   a21d6:	4928      	ldr	r1, [pc, #160]	; (a2278 <Cl_Dprep_CheckforfillingCompletion+0x248>)
   a21d8:	4798      	blx	r3
   a21da:	4603      	mov	r3, r0
   a21dc:	2b00      	cmp	r3, #0
   a21de:	d005      	beq.n	a21ec <Cl_Dprep_CheckforfillingCompletion+0x1bc>
				{
					if(cl_temp3_stable_confirm == true)
   a21e0:	4b26      	ldr	r3, [pc, #152]	; (a227c <Cl_Dprep_CheckforfillingCompletion+0x24c>)
   a21e2:	781b      	ldrb	r3, [r3, #0]
   a21e4:	2b00      	cmp	r3, #0
   a21e6:	d001      	beq.n	a21ec <Cl_Dprep_CheckforfillingCompletion+0x1bc>
							Cl_dprepretcode = CL_OK;
   a21e8:	2300      	movs	r3, #0
   a21ea:	75fb      	strb	r3, [r7, #23]
			}

			
		}
		
		return Cl_dprepretcode;
   a21ec:	7dfb      	ldrb	r3, [r7, #23]
		
	}
   a21ee:	4618      	mov	r0, r3
   a21f0:	371c      	adds	r7, #28
   a21f2:	46bd      	mov	sp, r7
   a21f4:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   a21f8:	eb1c432d 	.word	0xeb1c432d
   a21fc:	bf1a36e2 	.word	0xbf1a36e2
   a2200:	70a3d70a 	.word	0x70a3d70a
   a2204:	3fd70a3d 	.word	0x3fd70a3d
   a2208:	851eb852 	.word	0x851eb852
   a220c:	404331eb 	.word	0x404331eb
   a2210:	47ae147b 	.word	0x47ae147b
   a2214:	3f947ae1 	.word	0x3f947ae1
   a2218:	9999999a 	.word	0x9999999a
   a221c:	402a9999 	.word	0x402a9999
   a2220:	9999999a 	.word	0x9999999a
   a2224:	402b9999 	.word	0x402b9999
   a2228:	20071db2 	.word	0x20071db2
   a222c:	0009d1e9 	.word	0x0009d1e9
   a2230:	0008fd69 	.word	0x0008fd69
   a2234:	51eb851f 	.word	0x51eb851f
   a2238:	000a825d 	.word	0x000a825d
   a223c:	000a79b9 	.word	0x000a79b9
   a2240:	000a7a85 	.word	0x000a7a85
   a2244:	000a7721 	.word	0x000a7721
   a2248:	000a771d 	.word	0x000a771d
   a224c:	000a8049 	.word	0x000a8049
   a2250:	000a79dd 	.word	0x000a79dd
   a2254:	40390000 	.word	0x40390000
   a2258:	3ff00000 	.word	0x3ff00000
   a225c:	000a7cd9 	.word	0x000a7cd9
   a2260:	40240000 	.word	0x40240000
   a2264:	000a7fa5 	.word	0x000a7fa5
   a2268:	000a7f69 	.word	0x000a7f69
   a226c:	000a867d 	.word	0x000a867d
   a2270:	42120000 	.word	0x42120000
   a2274:	000a8641 	.word	0x000a8641
   a2278:	42160000 	.word	0x42160000
   a227c:	20071dc8 	.word	0x20071dc8

000a2280 <Cl_DprepSelectDialysateInlet>:
		
	}
	
	
	Cl_ReturnCodeType  Cl_DprepSelectDialysateInlet(void)
	{
   a2280:	b580      	push	{r7, lr}
   a2282:	b082      	sub	sp, #8
   a2284:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a2286:	2300      	movs	r3, #0
   a2288:	71fb      	strb	r3, [r7, #7]
		//sv_cntrl_deactivate_valve(VALVE_ID18);
		//sv_cntrl_activate_valve(VALVE_ID19);
		sv_cntrl_activate_valve(VALVE_ID18);
   a228a:	2012      	movs	r0, #18
   a228c:	4b03      	ldr	r3, [pc, #12]	; (a229c <Cl_DprepSelectDialysateInlet+0x1c>)
   a228e:	4798      	blx	r3
		return Cl_RetVal;
   a2290:	79fb      	ldrb	r3, [r7, #7]
	}
   a2292:	4618      	mov	r0, r3
   a2294:	3708      	adds	r7, #8
   a2296:	46bd      	mov	sp, r7
   a2298:	bd80      	pop	{r7, pc}
   a229a:	bf00      	nop
   a229c:	0009b3e9 	.word	0x0009b3e9

000a22a0 <UpdateDprepFillingMinuteTick>:
					Cl_dpreptcode = Cl_Dprep_UpdateTimeInfo();
					return Cl_dpreptcode;
}

Cl_ReturnCodeType UpdateDprepFillingMinuteTick(void)
{
   a22a0:	b480      	push	{r7}
   a22a2:	b083      	sub	sp, #12
   a22a4:	af00      	add	r7, sp, #0
					Cl_ReturnCodeType Cl_dpreptcode = CL_OK;
   a22a6:	2300      	movs	r3, #0
   a22a8:	71fb      	strb	r3, [r7, #7]

					Cl_Dprep_filling_secondscounter = 0;
   a22aa:	4b0e      	ldr	r3, [pc, #56]	; (a22e4 <UpdateDprepFillingMinuteTick+0x44>)
   a22ac:	2200      	movs	r2, #0
   a22ae:	801a      	strh	r2, [r3, #0]
					Cl_Dprep_filling_Minutescounter++;
   a22b0:	4b0d      	ldr	r3, [pc, #52]	; (a22e8 <UpdateDprepFillingMinuteTick+0x48>)
   a22b2:	881b      	ldrh	r3, [r3, #0]
   a22b4:	b29b      	uxth	r3, r3
   a22b6:	b29b      	uxth	r3, r3
   a22b8:	3301      	adds	r3, #1
   a22ba:	b29b      	uxth	r3, r3
   a22bc:	b29a      	uxth	r2, r3
   a22be:	4b0a      	ldr	r3, [pc, #40]	; (a22e8 <UpdateDprepFillingMinuteTick+0x48>)
   a22c0:	801a      	strh	r2, [r3, #0]
					Cl_Dprep_filling_TotalMinutescounter++;
   a22c2:	4b0a      	ldr	r3, [pc, #40]	; (a22ec <UpdateDprepFillingMinuteTick+0x4c>)
   a22c4:	881b      	ldrh	r3, [r3, #0]
   a22c6:	b29b      	uxth	r3, r3
   a22c8:	b29b      	uxth	r3, r3
   a22ca:	3301      	adds	r3, #1
   a22cc:	b29b      	uxth	r3, r3
   a22ce:	b29a      	uxth	r2, r3
   a22d0:	4b06      	ldr	r3, [pc, #24]	; (a22ec <UpdateDprepFillingMinuteTick+0x4c>)
   a22d2:	801a      	strh	r2, [r3, #0]

			//		Cl_dpreptcode = Cl_Dprep_UpdateFillingTimeInfo();
					return Cl_dpreptcode;
   a22d4:	79fb      	ldrb	r3, [r7, #7]
					

}
   a22d6:	4618      	mov	r0, r3
   a22d8:	370c      	adds	r7, #12
   a22da:	46bd      	mov	sp, r7
   a22dc:	f85d 7b04 	ldr.w	r7, [sp], #4
   a22e0:	4770      	bx	lr
   a22e2:	bf00      	nop
   a22e4:	20071dae 	.word	0x20071dae
   a22e8:	20071db0 	.word	0x20071db0
   a22ec:	20071db2 	.word	0x20071db2

000a22f0 <UpdateDprepDialyserPrimeMinuteTick>:
	

}

Cl_ReturnCodeType UpdateDprepDialyserPrimeMinuteTick(void)
{
   a22f0:	b580      	push	{r7, lr}
   a22f2:	b082      	sub	sp, #8
   a22f4:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_dpreptcode = CL_OK;
   a22f6:	2300      	movs	r3, #0
   a22f8:	71fb      	strb	r3, [r7, #7]

	Cl_Dprep_DialyserPrime_secondscounter = 0;
   a22fa:	4b0f      	ldr	r3, [pc, #60]	; (a2338 <UpdateDprepDialyserPrimeMinuteTick+0x48>)
   a22fc:	2200      	movs	r2, #0
   a22fe:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_Minutescounter++;
   a2300:	4b0e      	ldr	r3, [pc, #56]	; (a233c <UpdateDprepDialyserPrimeMinuteTick+0x4c>)
   a2302:	881b      	ldrh	r3, [r3, #0]
   a2304:	b29b      	uxth	r3, r3
   a2306:	b29b      	uxth	r3, r3
   a2308:	3301      	adds	r3, #1
   a230a:	b29b      	uxth	r3, r3
   a230c:	b29a      	uxth	r2, r3
   a230e:	4b0b      	ldr	r3, [pc, #44]	; (a233c <UpdateDprepDialyserPrimeMinuteTick+0x4c>)
   a2310:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_TotalMinutescounter++;
   a2312:	4b0b      	ldr	r3, [pc, #44]	; (a2340 <UpdateDprepDialyserPrimeMinuteTick+0x50>)
   a2314:	881b      	ldrh	r3, [r3, #0]
   a2316:	b29b      	uxth	r3, r3
   a2318:	b29b      	uxth	r3, r3
   a231a:	3301      	adds	r3, #1
   a231c:	b29b      	uxth	r3, r3
   a231e:	b29a      	uxth	r2, r3
   a2320:	4b07      	ldr	r3, [pc, #28]	; (a2340 <UpdateDprepDialyserPrimeMinuteTick+0x50>)
   a2322:	801a      	strh	r2, [r3, #0]

	Cl_dpreptcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   a2324:	4b07      	ldr	r3, [pc, #28]	; (a2344 <UpdateDprepDialyserPrimeMinuteTick+0x54>)
   a2326:	4798      	blx	r3
   a2328:	4603      	mov	r3, r0
   a232a:	71fb      	strb	r3, [r7, #7]
	return Cl_dpreptcode;
   a232c:	79fb      	ldrb	r3, [r7, #7]
	

}
   a232e:	4618      	mov	r0, r3
   a2330:	3708      	adds	r7, #8
   a2332:	46bd      	mov	sp, r7
   a2334:	bd80      	pop	{r7, pc}
   a2336:	bf00      	nop
   a2338:	20071dba 	.word	0x20071dba
   a233c:	20071dbc 	.word	0x20071dbc
   a2340:	20071dbe 	.word	0x20071dbe
   a2344:	00088ae1 	.word	0x00088ae1

000a2348 <Cl_Dprep_SendPrepStateData>:
//	Cl_dprepretcode = Cl_SendDatatoconsole(command,&systemdataarray,count);
return CL_OK;	
	
}
Cl_ReturnCodeType Cl_Dprep_SendPrepStateData(Cl_Console_bulkdatatype datatype)
{
   a2348:	b580      	push	{r7, lr}
   a234a:	b094      	sub	sp, #80	; 0x50
   a234c:	af00      	add	r7, sp, #0
   a234e:	4603      	mov	r3, r0
   a2350:	71fb      	strb	r3, [r7, #7]
	static float cond = 0;
	Cl_Uint8Type systemdataarray[40] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   a2352:	f107 031c 	add.w	r3, r7, #28
   a2356:	2200      	movs	r2, #0
   a2358:	601a      	str	r2, [r3, #0]
   a235a:	3304      	adds	r3, #4
   a235c:	2200      	movs	r2, #0
   a235e:	601a      	str	r2, [r3, #0]
   a2360:	3304      	adds	r3, #4
   a2362:	2200      	movs	r2, #0
   a2364:	601a      	str	r2, [r3, #0]
   a2366:	3304      	adds	r3, #4
   a2368:	2200      	movs	r2, #0
   a236a:	601a      	str	r2, [r3, #0]
   a236c:	3304      	adds	r3, #4
   a236e:	2200      	movs	r2, #0
   a2370:	601a      	str	r2, [r3, #0]
   a2372:	3304      	adds	r3, #4
   a2374:	2200      	movs	r2, #0
   a2376:	601a      	str	r2, [r3, #0]
   a2378:	3304      	adds	r3, #4
   a237a:	2200      	movs	r2, #0
   a237c:	601a      	str	r2, [r3, #0]
   a237e:	3304      	adds	r3, #4
   a2380:	2200      	movs	r2, #0
   a2382:	601a      	str	r2, [r3, #0]
   a2384:	3304      	adds	r3, #4
   a2386:	2200      	movs	r2, #0
   a2388:	601a      	str	r2, [r3, #0]
   a238a:	3304      	adds	r3, #4
   a238c:	2200      	movs	r2, #0
   a238e:	601a      	str	r2, [r3, #0]
   a2390:	3304      	adds	r3, #4
	cl_PrepDatatype tempdata;
	Cl_Uint16Type temp=0, temp1=0, sensordata = 0 , temp2 = 0 , temp2ui = 0 , apt=0,vpt=0,TMP =0;
   a2392:	2300      	movs	r3, #0
   a2394:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
   a2398:	2300      	movs	r3, #0
   a239a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
   a239e:	2300      	movs	r3, #0
   a23a0:	827b      	strh	r3, [r7, #18]
   a23a2:	2300      	movs	r3, #0
   a23a4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
   a23a8:	2300      	movs	r3, #0
   a23aa:	823b      	strh	r3, [r7, #16]
   a23ac:	2300      	movs	r3, #0
   a23ae:	81fb      	strh	r3, [r7, #14]
   a23b0:	2300      	movs	r3, #0
   a23b2:	81bb      	strh	r3, [r7, #12]
   a23b4:	2300      	movs	r3, #0
   a23b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static Cl_Uint32Type timecount = 0;
	static float tmp3=0;
	Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   a23ba:	2300      	movs	r3, #0
   a23bc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	Cl_Uint8Type count = 0;
   a23c0:	2300      	movs	r3, #0
   a23c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a23c6:	2359      	movs	r3, #89	; 0x59
   a23c8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	TMP,
	*/
	
	

					command = CON_TX_COMMAND_CL_SYS_STATE_DATA ;
   a23cc:	232a      	movs	r3, #42	; 0x2a
   a23ce:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					systemdataarray[0] = datatype;
   a23d2:	79fb      	ldrb	r3, [r7, #7]
   a23d4:	773b      	strb	r3, [r7, #28]
					count++;
   a23d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a23da:	3301      	adds	r3, #1
   a23dc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					
						Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   a23e0:	f107 0312 	add.w	r3, r7, #18
   a23e4:	2014      	movs	r0, #20
   a23e6:	4619      	mov	r1, r3
   a23e8:	4bb1      	ldr	r3, [pc, #708]	; (a26b0 <Cl_Dprep_SendPrepStateData+0x368>)
   a23ea:	4798      	blx	r3
// 							uint16_t temp = res_temp_value/10;
// //							temp = temp - 3.1 + 1.4;										// sensor offset 
// //							temp = temp - 3.1 -2;										// sensor offset 
// //							tmp3 =(tmp3*5 + temp)/6;
// 							tmp3 = temp - 0.4;
							tmp3 = (float)sensordata/10;
   a23ec:	8a7a      	ldrh	r2, [r7, #18]
   a23ee:	4bb1      	ldr	r3, [pc, #708]	; (a26b4 <Cl_Dprep_SendPrepStateData+0x36c>)
   a23f0:	4610      	mov	r0, r2
   a23f2:	4798      	blx	r3
   a23f4:	4602      	mov	r2, r0
   a23f6:	4bb0      	ldr	r3, [pc, #704]	; (a26b8 <Cl_Dprep_SendPrepStateData+0x370>)
   a23f8:	4610      	mov	r0, r2
   a23fa:	49b0      	ldr	r1, [pc, #704]	; (a26bc <Cl_Dprep_SendPrepStateData+0x374>)
   a23fc:	4798      	blx	r3
   a23fe:	4603      	mov	r3, r0
   a2400:	461a      	mov	r2, r3
   a2402:	4baf      	ldr	r3, [pc, #700]	; (a26c0 <Cl_Dprep_SendPrepStateData+0x378>)
   a2404:	601a      	str	r2, [r3, #0]

							
						}
						// manav02 added
						Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&sensordata);
   a2406:	f107 0312 	add.w	r3, r7, #18
   a240a:	2007      	movs	r0, #7
   a240c:	4619      	mov	r1, r3
   a240e:	4ba8      	ldr	r3, [pc, #672]	; (a26b0 <Cl_Dprep_SendPrepStateData+0x368>)
   a2410:	4798      	blx	r3
					
								tempdata.word = (sensordata)/100;
   a2412:	8a7b      	ldrh	r3, [r7, #18]
   a2414:	4aab      	ldr	r2, [pc, #684]	; (a26c4 <Cl_Dprep_SendPrepStateData+0x37c>)
   a2416:	fba2 2303 	umull	r2, r3, r2, r3
   a241a:	095b      	lsrs	r3, r3, #5
   a241c:	b29b      	uxth	r3, r3
   a241e:	617b      	str	r3, [r7, #20]
								
								systemdataarray[count++] = tempdata.bytearray[0];
   a2420:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a2424:	1c5a      	adds	r2, r3, #1
   a2426:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a242a:	7d3a      	ldrb	r2, [r7, #20]
   a242c:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a2430:	440b      	add	r3, r1
   a2432:	f803 2c34 	strb.w	r2, [r3, #-52]
								systemdataarray[count++] = tempdata.bytearray[1];
   a2436:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a243a:	1c5a      	adds	r2, r3, #1
   a243c:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a2440:	7d7a      	ldrb	r2, [r7, #21]
   a2442:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a2446:	440b      	add	r3, r1
   a2448:	f803 2c34 	strb.w	r2, [r3, #-52]
								systemdataarray[count++] = tempdata.bytearray[2];
   a244c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a2450:	1c5a      	adds	r2, r3, #1
   a2452:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a2456:	7dba      	ldrb	r2, [r7, #22]
   a2458:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a245c:	440b      	add	r3, r1
   a245e:	f803 2c34 	strb.w	r2, [r3, #-52]
								systemdataarray[count++] = tempdata.bytearray[3];
   a2462:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a2466:	1c5a      	adds	r2, r3, #1
   a2468:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a246c:	7dfa      	ldrb	r2, [r7, #23]
   a246e:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a2472:	440b      	add	r3, r1
   a2474:	f803 2c34 	strb.w	r2, [r3, #-52]
		
					} */
					// temperature is already calculated and now store into system data
					{

						tempdata.word = tmp3;
   a2478:	4b91      	ldr	r3, [pc, #580]	; (a26c0 <Cl_Dprep_SendPrepStateData+0x378>)
   a247a:	681a      	ldr	r2, [r3, #0]
   a247c:	4b92      	ldr	r3, [pc, #584]	; (a26c8 <Cl_Dprep_SendPrepStateData+0x380>)
   a247e:	4610      	mov	r0, r2
   a2480:	4798      	blx	r3
   a2482:	4603      	mov	r3, r0
   a2484:	617b      	str	r3, [r7, #20]
				//		tempdata.word = (tmp3 * 10);
				//		tempdata.word = (tmp3/10 - 25 ); // sanjeer : 25 is offset work around for intergation testing
						systemdataarray[count++] = tempdata.bytearray[0];
   a2486:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a248a:	1c5a      	adds	r2, r3, #1
   a248c:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a2490:	7d3a      	ldrb	r2, [r7, #20]
   a2492:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a2496:	440b      	add	r3, r1
   a2498:	f803 2c34 	strb.w	r2, [r3, #-52]
						systemdataarray[count++] = tempdata.bytearray[1];
   a249c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a24a0:	1c5a      	adds	r2, r3, #1
   a24a2:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a24a6:	7d7a      	ldrb	r2, [r7, #21]
   a24a8:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a24ac:	440b      	add	r3, r1
   a24ae:	f803 2c34 	strb.w	r2, [r3, #-52]
						systemdataarray[count++] = tempdata.bytearray[2];
   a24b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a24b6:	1c5a      	adds	r2, r3, #1
   a24b8:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a24bc:	7dba      	ldrb	r2, [r7, #22]
   a24be:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a24c2:	440b      	add	r3, r1
   a24c4:	f803 2c34 	strb.w	r2, [r3, #-52]
						systemdataarray[count++] = tempdata.bytearray[3];
   a24c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a24cc:	1c5a      	adds	r2, r3, #1
   a24ce:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a24d2:	7dfa      	ldrb	r2, [r7, #23]
   a24d4:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a24d8:	440b      	add	r3, r1
   a24da:	f803 2c34 	strb.w	r2, [r3, #-52]
					}
					Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS,&apt);     // manav03 changed from tempdata.Twobyte to apt
   a24de:	f107 030e 	add.w	r3, r7, #14
   a24e2:	200b      	movs	r0, #11
   a24e4:	4619      	mov	r1, r3
   a24e6:	4b72      	ldr	r3, [pc, #456]	; (a26b0 <Cl_Dprep_SendPrepStateData+0x368>)
   a24e8:	4798      	blx	r3
					{
						
						tempdata.word	 = apt;
   a24ea:	89fb      	ldrh	r3, [r7, #14]
   a24ec:	617b      	str	r3, [r7, #20]
						systemdataarray[count++] = tempdata.bytearray[0] ;
   a24ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a24f2:	1c5a      	adds	r2, r3, #1
   a24f4:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a24f8:	7d3a      	ldrb	r2, [r7, #20]
   a24fa:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a24fe:	440b      	add	r3, r1
   a2500:	f803 2c34 	strb.w	r2, [r3, #-52]
						systemdataarray[count++] = tempdata.bytearray[1] ;
   a2504:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a2508:	1c5a      	adds	r2, r3, #1
   a250a:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a250e:	7d7a      	ldrb	r2, [r7, #21]
   a2510:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a2514:	440b      	add	r3, r1
   a2516:	f803 2c34 	strb.w	r2, [r3, #-52]
						systemdataarray[count++] = tempdata.bytearray[2] ;
   a251a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a251e:	1c5a      	adds	r2, r3, #1
   a2520:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a2524:	7dba      	ldrb	r2, [r7, #22]
   a2526:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a252a:	440b      	add	r3, r1
   a252c:	f803 2c34 	strb.w	r2, [r3, #-52]
						systemdataarray[count++] = tempdata.bytearray[3] ;
   a2530:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a2534:	1c5a      	adds	r2, r3, #1
   a2536:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a253a:	7dfa      	ldrb	r2, [r7, #23]
   a253c:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a2540:	440b      	add	r3, r1
   a2542:	f803 2c34 	strb.w	r2, [r3, #-52]
					}
					Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS,&vpt);    // manav03 changed from tempdata.Twobyte to vpt
   a2546:	f107 030c 	add.w	r3, r7, #12
   a254a:	200c      	movs	r0, #12
   a254c:	4619      	mov	r1, r3
   a254e:	4b58      	ldr	r3, [pc, #352]	; (a26b0 <Cl_Dprep_SendPrepStateData+0x368>)
   a2550:	4798      	blx	r3
					{
						
						tempdata.word	 = vpt;
   a2552:	89bb      	ldrh	r3, [r7, #12]
   a2554:	617b      	str	r3, [r7, #20]
						systemdataarray[count++] = tempdata.bytearray[0] ;
   a2556:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a255a:	1c5a      	adds	r2, r3, #1
   a255c:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a2560:	7d3a      	ldrb	r2, [r7, #20]
   a2562:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a2566:	440b      	add	r3, r1
   a2568:	f803 2c34 	strb.w	r2, [r3, #-52]
						systemdataarray[count++] = tempdata.bytearray[1] ;
   a256c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a2570:	1c5a      	adds	r2, r3, #1
   a2572:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a2576:	7d7a      	ldrb	r2, [r7, #21]
   a2578:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a257c:	440b      	add	r3, r1
   a257e:	f803 2c34 	strb.w	r2, [r3, #-52]
						systemdataarray[count++] = tempdata.bytearray[2] ;
   a2582:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a2586:	1c5a      	adds	r2, r3, #1
   a2588:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a258c:	7dba      	ldrb	r2, [r7, #22]
   a258e:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a2592:	440b      	add	r3, r1
   a2594:	f803 2c34 	strb.w	r2, [r3, #-52]
						systemdataarray[count++] = tempdata.bytearray[3] ;
   a2598:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a259c:	1c5a      	adds	r2, r3, #1
   a259e:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a25a2:	7dfa      	ldrb	r2, [r7, #23]
   a25a4:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a25a8:	440b      	add	r3, r1
   a25aa:	f803 2c34 	strb.w	r2, [r3, #-52]
					}


					if( datatype == DIALYSIS_PREP_DATA)
   a25ae:	79fb      	ldrb	r3, [r7, #7]
   a25b0:	2b04      	cmp	r3, #4
   a25b2:	d132      	bne.n	a261a <Cl_Dprep_SendPrepStateData+0x2d2>
					{
						TMP = 5000;
   a25b4:	f241 3388 	movw	r3, #5000	; 0x1388
   a25b8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
						tempdata.word	 = (TMP);
   a25bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
   a25c0:	617b      	str	r3, [r7, #20]
						systemdataarray[count++] = tempdata.bytearray[0] ;
   a25c2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a25c6:	1c5a      	adds	r2, r3, #1
   a25c8:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a25cc:	7d3a      	ldrb	r2, [r7, #20]
   a25ce:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a25d2:	440b      	add	r3, r1
   a25d4:	f803 2c34 	strb.w	r2, [r3, #-52]
						systemdataarray[count++] = tempdata.bytearray[1] ;
   a25d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a25dc:	1c5a      	adds	r2, r3, #1
   a25de:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a25e2:	7d7a      	ldrb	r2, [r7, #21]
   a25e4:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a25e8:	440b      	add	r3, r1
   a25ea:	f803 2c34 	strb.w	r2, [r3, #-52]
						systemdataarray[count++] = tempdata.bytearray[2] ;
   a25ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a25f2:	1c5a      	adds	r2, r3, #1
   a25f4:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a25f8:	7dba      	ldrb	r2, [r7, #22]
   a25fa:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a25fe:	440b      	add	r3, r1
   a2600:	f803 2c34 	strb.w	r2, [r3, #-52]
						systemdataarray[count++] = tempdata.bytearray[3] ;
   a2604:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a2608:	1c5a      	adds	r2, r3, #1
   a260a:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a260e:	7dfa      	ldrb	r2, [r7, #23]
   a2610:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a2614:	440b      	add	r3, r1
   a2616:	f803 2c34 	strb.w	r2, [r3, #-52]
					}
		
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&temp2ui);    // manav03 changed variable name
   a261a:	f107 0310 	add.w	r3, r7, #16
   a261e:	2013      	movs	r0, #19
   a2620:	4619      	mov	r1, r3
   a2622:	4b23      	ldr	r3, [pc, #140]	; (a26b0 <Cl_Dprep_SendPrepStateData+0x368>)
   a2624:	4798      	blx	r3
		{
			
			tempdata.word = temp2ui/10 ;
   a2626:	8a3b      	ldrh	r3, [r7, #16]
   a2628:	4a28      	ldr	r2, [pc, #160]	; (a26cc <Cl_Dprep_SendPrepStateData+0x384>)
   a262a:	fba2 2303 	umull	r2, r3, r2, r3
   a262e:	08db      	lsrs	r3, r3, #3
   a2630:	b29b      	uxth	r3, r3
   a2632:	617b      	str	r3, [r7, #20]
			systemdataarray[count++] = tempdata.bytearray[0] ;
   a2634:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a2638:	1c5a      	adds	r2, r3, #1
   a263a:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a263e:	7d3a      	ldrb	r2, [r7, #20]
   a2640:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a2644:	440b      	add	r3, r1
   a2646:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   a264a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a264e:	1c5a      	adds	r2, r3, #1
   a2650:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a2654:	7d7a      	ldrb	r2, [r7, #21]
   a2656:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a265a:	440b      	add	r3, r1
   a265c:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   a2660:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a2664:	1c5a      	adds	r2, r3, #1
   a2666:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a266a:	7dba      	ldrb	r2, [r7, #22]
   a266c:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a2670:	440b      	add	r3, r1
   a2672:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   a2676:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a267a:	1c5a      	adds	r2, r3, #1
   a267c:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a2680:	7dfa      	ldrb	r2, [r7, #23]
   a2682:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a2686:	440b      	add	r3, r1
   a2688:	f803 2c34 	strb.w	r2, [r3, #-52]
		}
		
					Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&systemdataarray,count);
   a268c:	f107 021c 	add.w	r2, r7, #28
   a2690:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a2694:	202a      	movs	r0, #42	; 0x2a
   a2696:	4611      	mov	r1, r2
   a2698:	461a      	mov	r2, r3
   a269a:	4b0d      	ldr	r3, [pc, #52]	; (a26d0 <Cl_Dprep_SendPrepStateData+0x388>)
   a269c:	4798      	blx	r3
   a269e:	4603      	mov	r3, r0
   a26a0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
					//Cl_Dlsis_SenddlsisData();
	return CL_OK;
   a26a4:	2300      	movs	r3, #0
}
   a26a6:	4618      	mov	r0, r3
   a26a8:	3750      	adds	r7, #80	; 0x50
   a26aa:	46bd      	mov	sp, r7
   a26ac:	bd80      	pop	{r7, pc}
   a26ae:	bf00      	nop
   a26b0:	0008fd69 	.word	0x0008fd69
   a26b4:	000a8255 	.word	0x000a8255
   a26b8:	000a846d 	.word	0x000a846d
   a26bc:	41200000 	.word	0x41200000
   a26c0:	20071de8 	.word	0x20071de8
   a26c4:	51eb851f 	.word	0x51eb851f
   a26c8:	000a86dd 	.word	0x000a86dd
   a26cc:	cccccccd 	.word	0xcccccccd
   a26d0:	0009d1e9 	.word	0x0009d1e9

000a26d4 <Cl_Dprep_Stoppreparation>:
// 	return CL_OK;
// }


Cl_ReturnCodeType Cl_Dprep_Stoppreparation(void)
{
   a26d4:	b580      	push	{r7, lr}
   a26d6:	b082      	sub	sp, #8
   a26d8:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   a26da:	2300      	movs	r3, #0
   a26dc:	71fb      	strb	r3, [r7, #7]
	Cl_Uint8Type data;
	
	sv_cntrl_setredalarm();
   a26de:	4b3a      	ldr	r3, [pc, #232]	; (a27c8 <Cl_Dprep_Stoppreparation+0xf4>)
   a26e0:	4798      	blx	r3
//	sv_cntrl_nobuzzer(); // manav01 added
	// deactivate all alarms
				if(!((cl_dprepstate == CL_DPREP_STATE_IDLE ) || (cl_dprepstate == CL_DPREP_STATE_STOPPED ) ||(cl_dprepstate == CL_DPREP_STATE_CRITICAL_ALARM )  ))
   a26e2:	4b3a      	ldr	r3, [pc, #232]	; (a27cc <Cl_Dprep_Stoppreparation+0xf8>)
   a26e4:	781b      	ldrb	r3, [r3, #0]
   a26e6:	2b00      	cmp	r3, #0
   a26e8:	d068      	beq.n	a27bc <Cl_Dprep_Stoppreparation+0xe8>
   a26ea:	4b38      	ldr	r3, [pc, #224]	; (a27cc <Cl_Dprep_Stoppreparation+0xf8>)
   a26ec:	781b      	ldrb	r3, [r3, #0]
   a26ee:	2b0b      	cmp	r3, #11
   a26f0:	d064      	beq.n	a27bc <Cl_Dprep_Stoppreparation+0xe8>
   a26f2:	4b36      	ldr	r3, [pc, #216]	; (a27cc <Cl_Dprep_Stoppreparation+0xf8>)
   a26f4:	781b      	ldrb	r3, [r3, #0]
   a26f6:	2b0c      	cmp	r3, #12
   a26f8:	d060      	beq.n	a27bc <Cl_Dprep_Stoppreparation+0xe8>
				{
					
					stability_counter = 0;
   a26fa:	4b35      	ldr	r3, [pc, #212]	; (a27d0 <Cl_Dprep_Stoppreparation+0xfc>)
   a26fc:	2200      	movs	r2, #0
   a26fe:	601a      	str	r2, [r3, #0]
					wait_timeout_counter = 0;
   a2700:	4b34      	ldr	r3, [pc, #208]	; (a27d4 <Cl_Dprep_Stoppreparation+0x100>)
   a2702:	2200      	movs	r2, #0
   a2704:	601a      	str	r2, [r3, #0]
					state_counter = 0;
   a2706:	4b34      	ldr	r3, [pc, #208]	; (a27d8 <Cl_Dprep_Stoppreparation+0x104>)
   a2708:	2200      	movs	r2, #0
   a270a:	601a      	str	r2, [r3, #0]
					 	Cl_Dprepsecondscounter = 0;
   a270c:	4b33      	ldr	r3, [pc, #204]	; (a27dc <Cl_Dprep_Stoppreparation+0x108>)
   a270e:	2200      	movs	r2, #0
   a2710:	601a      	str	r2, [r3, #0]
					 	Cl_DprepMinutescounter= 0;
   a2712:	4b33      	ldr	r3, [pc, #204]	; (a27e0 <Cl_Dprep_Stoppreparation+0x10c>)
   a2714:	2200      	movs	r2, #0
   a2716:	601a      	str	r2, [r3, #0]
					 	Cl_Dprephourscounter= 0;
   a2718:	4b32      	ldr	r3, [pc, #200]	; (a27e4 <Cl_Dprep_Stoppreparation+0x110>)
   a271a:	2200      	movs	r2, #0
   a271c:	601a      	str	r2, [r3, #0]
					 	Cl_DprepTotalMinutescounter= 0;
   a271e:	4b32      	ldr	r3, [pc, #200]	; (a27e8 <Cl_Dprep_Stoppreparation+0x114>)
   a2720:	2200      	movs	r2, #0
   a2722:	601a      	str	r2, [r3, #0]
					 	Cl_DprepTotalhourscounter=0;
   a2724:	4b31      	ldr	r3, [pc, #196]	; (a27ec <Cl_Dprep_Stoppreparation+0x118>)
   a2726:	2200      	movs	r2, #0
   a2728:	601a      	str	r2, [r3, #0]
							Cl_Dprep_filling_secondscounter = 0;
   a272a:	4b31      	ldr	r3, [pc, #196]	; (a27f0 <Cl_Dprep_Stoppreparation+0x11c>)
   a272c:	2200      	movs	r2, #0
   a272e:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_filling_Minutescounter = 0;
   a2730:	4b30      	ldr	r3, [pc, #192]	; (a27f4 <Cl_Dprep_Stoppreparation+0x120>)
   a2732:	2200      	movs	r2, #0
   a2734:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_filling_TotalMinutescounter = 0;
   a2736:	4b30      	ldr	r3, [pc, #192]	; (a27f8 <Cl_Dprep_Stoppreparation+0x124>)
   a2738:	2200      	movs	r2, #0
   a273a:	801a      	strh	r2, [r3, #0]
					
							Cl_Dprep_Prime_secondscounter = 0;
   a273c:	4b2f      	ldr	r3, [pc, #188]	; (a27fc <Cl_Dprep_Stoppreparation+0x128>)
   a273e:	2200      	movs	r2, #0
   a2740:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_Prime_Minutescounter = 0;
   a2742:	4b2f      	ldr	r3, [pc, #188]	; (a2800 <Cl_Dprep_Stoppreparation+0x12c>)
   a2744:	2200      	movs	r2, #0
   a2746:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_Prime_TotalMinutescounter = 0;
   a2748:	4b2e      	ldr	r3, [pc, #184]	; (a2804 <Cl_Dprep_Stoppreparation+0x130>)
   a274a:	2200      	movs	r2, #0
   a274c:	801a      	strh	r2, [r3, #0]
					
							Cl_Dprep_DialyserPrime_secondscounter = 0;
   a274e:	4b2e      	ldr	r3, [pc, #184]	; (a2808 <Cl_Dprep_Stoppreparation+0x134>)
   a2750:	2200      	movs	r2, #0
   a2752:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_DialyserPrime_Minutescounter = 0;
   a2754:	4b2d      	ldr	r3, [pc, #180]	; (a280c <Cl_Dprep_Stoppreparation+0x138>)
   a2756:	2200      	movs	r2, #0
   a2758:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_DialyserPrime_TotalMinutescounter = 0;
   a275a:	4b2d      	ldr	r3, [pc, #180]	; (a2810 <Cl_Dprep_Stoppreparation+0x13c>)
   a275c:	2200      	movs	r2, #0
   a275e:	801a      	strh	r2, [r3, #0]
						
					Cl_deactivate_prep_alarms();							
   a2760:	4b2c      	ldr	r3, [pc, #176]	; (a2814 <Cl_Dprep_Stoppreparation+0x140>)
   a2762:	4798      	blx	r3
							
							
							
				Cl_dprepretcode =  sv_cntrl_deactivatevenousclamp();
   a2764:	4b2c      	ldr	r3, [pc, #176]	; (a2818 <Cl_Dprep_Stoppreparation+0x144>)
   a2766:	4798      	blx	r3
   a2768:	4603      	mov	r3, r0
   a276a:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   a276c:	2011      	movs	r0, #17
   a276e:	4b2b      	ldr	r3, [pc, #172]	; (a281c <Cl_Dprep_Stoppreparation+0x148>)
   a2770:	4798      	blx	r3
   a2772:	4603      	mov	r3, r0
   a2774:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = sv_cntrl_poweroffheater();
   a2776:	4b2a      	ldr	r3, [pc, #168]	; (a2820 <Cl_Dprep_Stoppreparation+0x14c>)
   a2778:	4798      	blx	r3
   a277a:	4603      	mov	r3, r0
   a277c:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   a277e:	2004      	movs	r0, #4
   a2780:	4b28      	ldr	r3, [pc, #160]	; (a2824 <Cl_Dprep_Stoppreparation+0x150>)
   a2782:	4798      	blx	r3
   a2784:	4603      	mov	r3, r0
   a2786:	71fb      	strb	r3, [r7, #7]
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   a2788:	2002      	movs	r0, #2
   a278a:	2100      	movs	r1, #0
   a278c:	4b26      	ldr	r3, [pc, #152]	; (a2828 <Cl_Dprep_Stoppreparation+0x154>)
   a278e:	4798      	blx	r3
//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_PAUSE);
	Cl_dprep_StopMixing();			
   a2790:	4b26      	ldr	r3, [pc, #152]	; (a282c <Cl_Dprep_Stoppreparation+0x158>)
   a2792:	4798      	blx	r3
				if(cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME){
   a2794:	4b0d      	ldr	r3, [pc, #52]	; (a27cc <Cl_Dprep_Stoppreparation+0xf8>)
   a2796:	781b      	ldrb	r3, [r3, #0]
   a2798:	2b06      	cmp	r3, #6
   a279a:	d104      	bne.n	a27a6 <Cl_Dprep_Stoppreparation+0xd2>
					cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
   a279c:	2009      	movs	r0, #9
   a279e:	2100      	movs	r1, #0
   a27a0:	4b21      	ldr	r3, [pc, #132]	; (a2828 <Cl_Dprep_Stoppreparation+0x154>)
   a27a2:	4798      	blx	r3
   a27a4:	e007      	b.n	a27b6 <Cl_Dprep_Stoppreparation+0xe2>
				}
				else{
					Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STOPPED,&data,0);
   a27a6:	1dbb      	adds	r3, r7, #6
   a27a8:	202d      	movs	r0, #45	; 0x2d
   a27aa:	4619      	mov	r1, r3
   a27ac:	2200      	movs	r2, #0
   a27ae:	4b20      	ldr	r3, [pc, #128]	; (a2830 <Cl_Dprep_Stoppreparation+0x15c>)
   a27b0:	4798      	blx	r3
   a27b2:	4603      	mov	r3, r0
   a27b4:	71fb      	strb	r3, [r7, #7]
				}
			//	cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
				
			
				cl_dprepstate = CL_DPREP_STATE_IDLE;
   a27b6:	4b05      	ldr	r3, [pc, #20]	; (a27cc <Cl_Dprep_Stoppreparation+0xf8>)
   a27b8:	2200      	movs	r2, #0
   a27ba:	701a      	strb	r2, [r3, #0]
				//Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STOPPED,&data,0);
				
					
				}
		return CL_OK;
   a27bc:	2300      	movs	r3, #0
}
   a27be:	4618      	mov	r0, r3
   a27c0:	3708      	adds	r7, #8
   a27c2:	46bd      	mov	sp, r7
   a27c4:	bd80      	pop	{r7, pc}
   a27c6:	bf00      	nop
   a27c8:	0009b635 	.word	0x0009b635
   a27cc:	20071dcf 	.word	0x20071dcf
   a27d0:	20071d8c 	.word	0x20071d8c
   a27d4:	20071d90 	.word	0x20071d90
   a27d8:	20071d94 	.word	0x20071d94
   a27dc:	20071d98 	.word	0x20071d98
   a27e0:	20071d9c 	.word	0x20071d9c
   a27e4:	20071da0 	.word	0x20071da0
   a27e8:	20071da4 	.word	0x20071da4
   a27ec:	20071da8 	.word	0x20071da8
   a27f0:	20071dae 	.word	0x20071dae
   a27f4:	20071db0 	.word	0x20071db0
   a27f8:	20071db2 	.word	0x20071db2
   a27fc:	20071db4 	.word	0x20071db4
   a2800:	20071db6 	.word	0x20071db6
   a2804:	20071db8 	.word	0x20071db8
   a2808:	20071dba 	.word	0x20071dba
   a280c:	20071dbc 	.word	0x20071dbc
   a2810:	20071dbe 	.word	0x20071dbe
   a2814:	000a3db9 	.word	0x000a3db9
   a2818:	0009b549 	.word	0x0009b549
   a281c:	0009b5cd 	.word	0x0009b5cd
   a2820:	0009b3d5 	.word	0x0009b3d5
   a2824:	00089381 	.word	0x00089381
   a2828:	000880c1 	.word	0x000880c1
   a282c:	000a3d09 	.word	0x000a3d09
   a2830:	0009d1e9 	.word	0x0009d1e9

000a2834 <Cl_Dprep_ResetAlertsforReassertion>:


Cl_ReturnCodeType Cl_Dprep_ResetAlertsforReassertion(void )
{
   a2834:	b580      	push	{r7, lr}
   a2836:	b082      	sub	sp, #8
   a2838:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   a283a:	2300      	movs	r3, #0
   a283c:	71fb      	strb	r3, [r7, #7]
	ClDprepAlarmIdType CldprepAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a283e:	2359      	movs	r3, #89	; 0x59
   a2840:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_dprepalarmid;
	
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a2842:	4b6b      	ldr	r3, [pc, #428]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a2844:	2200      	movs	r2, #0
   a2846:	70da      	strb	r2, [r3, #3]
	Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
   a2848:	2001      	movs	r0, #1
   a284a:	4b6a      	ldr	r3, [pc, #424]	; (a29f4 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a284c:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER1STATUS_CLOSED].IsRaised = false;
   a284e:	4b68      	ldr	r3, [pc, #416]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a2850:	2200      	movs	r2, #0
   a2852:	729a      	strb	r2, [r3, #10]
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER2STATUS_CLOSED].IsRaised = false;
   a2854:	4b66      	ldr	r3, [pc, #408]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a2856:	2200      	movs	r2, #0
   a2858:	745a      	strb	r2, [r3, #17]
	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
   a285a:	2005      	movs	r0, #5
   a285c:	4b65      	ldr	r3, [pc, #404]	; (a29f4 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a285e:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
   a2860:	2006      	movs	r0, #6
   a2862:	4b64      	ldr	r3, [pc, #400]	; (a29f4 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a2864:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER1STATUS_OPEN].IsRaised = false;
   a2866:	4b62      	ldr	r3, [pc, #392]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a2868:	2200      	movs	r2, #0
   a286a:	761a      	strb	r2, [r3, #24]
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER2STATUS_OPEN].IsRaised = false;
   a286c:	4b60      	ldr	r3, [pc, #384]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a286e:	2200      	movs	r2, #0
   a2870:	77da      	strb	r2, [r3, #31]
	Cl_AlarmResetAlarm(HOLDER1STATUS_OPEN);
   a2872:	2003      	movs	r0, #3
   a2874:	4b5f      	ldr	r3, [pc, #380]	; (a29f4 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a2876:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_OPEN);
   a2878:	2004      	movs	r0, #4
   a287a:	4b5e      	ldr	r3, [pc, #376]	; (a29f4 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a287c:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_ACID_IN].IsRaised = false;
   a287e:	4b5c      	ldr	r3, [pc, #368]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a2880:	2200      	movs	r2, #0
   a2882:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Cl_AlarmResetAlarm(ACID_IN_CLOSED);
   a2886:	202a      	movs	r0, #42	; 0x2a
   a2888:	4b5a      	ldr	r3, [pc, #360]	; (a29f4 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a288a:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BICAR_IN].IsRaised = false;
   a288c:	4b58      	ldr	r3, [pc, #352]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a288e:	2200      	movs	r2, #0
   a2890:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	Cl_AlarmResetAlarm(BICARB_IN_CLOSED);
   a2894:	202c      	movs	r0, #44	; 0x2c
   a2896:	4b57      	ldr	r3, [pc, #348]	; (a29f4 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a2898:	4798      	blx	r3
	
	
	
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_STATUS_LOW].IsRaised = false;
   a289a:	4b55      	ldr	r3, [pc, #340]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a289c:	2200      	movs	r2, #0
   a289e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_STATUS_HIGH].IsRaised = false;
   a28a2:	4b53      	ldr	r3, [pc, #332]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a28a4:	2200      	movs	r2, #0
   a28a6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   a28aa:	2008      	movs	r0, #8
   a28ac:	4b51      	ldr	r3, [pc, #324]	; (a29f4 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a28ae:	4798      	blx	r3
	Cl_AlarmResetAlarm(COND_STATUS_LOW);
   a28b0:	2007      	movs	r0, #7
   a28b2:	4b50      	ldr	r3, [pc, #320]	; (a29f4 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a28b4:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_DAC_OPEN].IsRaised = false;
   a28b6:	4b4e      	ldr	r3, [pc, #312]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a28b8:	2200      	movs	r2, #0
   a28ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_DAC_RO].IsRaised = false;
   a28be:	4b4c      	ldr	r3, [pc, #304]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a28c0:	2200      	movs	r2, #0
   a28c2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_DAC_HIGH].IsRaised = false;
   a28c6:	4b4a      	ldr	r3, [pc, #296]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a28c8:	2200      	movs	r2, #0
   a28ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_DprepAlarmTable[CL_DPREP_ALARM_ABD_EVENT].IsRaised = false;
   a28ce:	4b48      	ldr	r3, [pc, #288]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a28d0:	2200      	movs	r2, #0
   a28d2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BD_EVENT].IsRaised = false;
   a28d6:	4b46      	ldr	r3, [pc, #280]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a28d8:	2200      	movs	r2, #0
   a28da:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BLD_EVENT].IsRaised = false;
   a28de:	4b44      	ldr	r3, [pc, #272]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a28e0:	2200      	movs	r2, #0
   a28e2:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_DprepAlarmTable[CL_DPREP_ALARM_APTSTATUS_HIGH].IsRaised = false;
   a28e6:	4b42      	ldr	r3, [pc, #264]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a28e8:	2200      	movs	r2, #0
   a28ea:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	Cl_DprepAlarmTable[CL_DPREP_ALARM_VPTSTATUS_HIGH].IsRaised = false;
   a28ee:	4b40      	ldr	r3, [pc, #256]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a28f0:	2200      	movs	r2, #0
   a28f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   a28f6:	4b3e      	ldr	r3, [pc, #248]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a28f8:	2200      	movs	r2, #0
   a28fa:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   a28fe:	4b3c      	ldr	r3, [pc, #240]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a2900:	2200      	movs	r2, #0
   a2902:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   a2906:	2015      	movs	r0, #21
   a2908:	4b3a      	ldr	r3, [pc, #232]	; (a29f4 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a290a:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   a290c:	2016      	movs	r0, #22
   a290e:	4b39      	ldr	r3, [pc, #228]	; (a29f4 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a2910:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   a2912:	4b37      	ldr	r3, [pc, #220]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a2914:	2200      	movs	r2, #0
   a2916:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   a291a:	4b35      	ldr	r3, [pc, #212]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a291c:	2200      	movs	r2, #0
   a291e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   a2922:	2017      	movs	r0, #23
   a2924:	4b33      	ldr	r3, [pc, #204]	; (a29f4 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a2926:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   a2928:	2018      	movs	r0, #24
   a292a:	4b32      	ldr	r3, [pc, #200]	; (a29f4 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a292c:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   a292e:	4b30      	ldr	r3, [pc, #192]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a2930:	2200      	movs	r2, #0
   a2932:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   a2936:	4b2e      	ldr	r3, [pc, #184]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a2938:	2200      	movs	r2, #0
   a293a:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   a293e:	2027      	movs	r0, #39	; 0x27
   a2940:	4b2c      	ldr	r3, [pc, #176]	; (a29f4 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a2942:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   a2944:	2028      	movs	r0, #40	; 0x28
   a2946:	4b2b      	ldr	r3, [pc, #172]	; (a29f4 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a2948:	4798      	blx	r3
	
	Cl_DprepAlarmTable[CL_DPREP_ALARM_FLOW_NO_FLOW].IsRaised = false;
   a294a:	4b29      	ldr	r3, [pc, #164]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a294c:	2200      	movs	r2, #0
   a294e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Cl_DprepAlarmTable[CL_DPREP_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
   a2952:	4b27      	ldr	r3, [pc, #156]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a2954:	2200      	movs	r2, #0
   a2956:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_DprepAlarmTable[CL_DPREP_ALARM_FLOW_HIGH_FLOWRATE].IsRaised = false;
   a295a:	4b25      	ldr	r3, [pc, #148]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a295c:	2200      	movs	r2, #0
   a295e:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
	Cl_AlarmResetAlarm(FLOW_NO_FLOW);
   a2962:	200c      	movs	r0, #12
   a2964:	4b23      	ldr	r3, [pc, #140]	; (a29f4 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a2966:	4798      	blx	r3
	Cl_AlarmResetAlarm(FLOW_HIGH_FLOWRATE);
   a2968:	200e      	movs	r0, #14
   a296a:	4b22      	ldr	r3, [pc, #136]	; (a29f4 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a296c:	4798      	blx	r3
	Cl_AlarmResetAlarm(FLOW_LOW_FLOWRATE);
   a296e:	200d      	movs	r0, #13
   a2970:	4b20      	ldr	r3, [pc, #128]	; (a29f4 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a2972:	4798      	blx	r3
	
	
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP1_HIGH_THRESHOLD].IsRaised = false;
   a2974:	4b1e      	ldr	r3, [pc, #120]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a2976:	2200      	movs	r2, #0
   a2978:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP1_LOW_THRESHOLD].IsRaised = false;
   a297c:	4b1c      	ldr	r3, [pc, #112]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a297e:	2200      	movs	r2, #0
   a2980:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	
	Cl_AlarmResetAlarm(TEMP1_HIGH_THRESHOLD);
   a2984:	200f      	movs	r0, #15
   a2986:	4b1b      	ldr	r3, [pc, #108]	; (a29f4 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a2988:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP1_LOW_THRESHOLD);
   a298a:	2010      	movs	r0, #16
   a298c:	4b19      	ldr	r3, [pc, #100]	; (a29f4 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a298e:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   a2990:	4b17      	ldr	r3, [pc, #92]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a2992:	2200      	movs	r2, #0
   a2994:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP2_LOW_THRESHOLD].IsRaised = false;
   a2998:	4b15      	ldr	r3, [pc, #84]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a299a:	2200      	movs	r2, #0
   a299c:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   a29a0:	2011      	movs	r0, #17
   a29a2:	4b14      	ldr	r3, [pc, #80]	; (a29f4 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a29a4:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   a29a6:	2012      	movs	r0, #18
   a29a8:	4b12      	ldr	r3, [pc, #72]	; (a29f4 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a29aa:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   a29ac:	4b10      	ldr	r3, [pc, #64]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a29ae:	2200      	movs	r2, #0
   a29b0:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   a29b4:	4b0e      	ldr	r3, [pc, #56]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a29b6:	2200      	movs	r2, #0
   a29b8:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	Cl_AlarmResetAlarm(TEMP3_HIGH_THRESHOLD);
   a29bc:	2013      	movs	r0, #19
   a29be:	4b0d      	ldr	r3, [pc, #52]	; (a29f4 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a29c0:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP3_LOW_THRESHOLD);
   a29c2:	2014      	movs	r0, #20
   a29c4:	4b0b      	ldr	r3, [pc, #44]	; (a29f4 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a29c6:	4798      	blx	r3

Cl_DprepAlarmTable[CL_DPREP_ALARM_BP_STOPPED].IsRaised = false;
   a29c8:	4b09      	ldr	r3, [pc, #36]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a29ca:	2200      	movs	r2, #0
   a29cc:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	Cl_AlarmResetAlarm(BP_STOPPED);
   a29d0:	203f      	movs	r0, #63	; 0x3f
   a29d2:	4b08      	ldr	r3, [pc, #32]	; (a29f4 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a29d4:	4798      	blx	r3

Cl_DprepAlarmTable[CL_DPREP_ALARM_BCALARM].IsRaised = false;
   a29d6:	4b06      	ldr	r3, [pc, #24]	; (a29f0 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a29d8:	2200      	movs	r2, #0
   a29da:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
Cl_AlarmResetAlarm(BC_ALARM);
   a29de:	201a      	movs	r0, #26
   a29e0:	4b04      	ldr	r3, [pc, #16]	; (a29f4 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a29e2:	4798      	blx	r3

	return (Cl_dprepretcode);
   a29e4:	79fb      	ldrb	r3, [r7, #7]
	
}
   a29e6:	4618      	mov	r0, r3
   a29e8:	3708      	adds	r7, #8
   a29ea:	46bd      	mov	sp, r7
   a29ec:	bd80      	pop	{r7, pc}
   a29ee:	bf00      	nop
   a29f0:	20070d94 	.word	0x20070d94
   a29f4:	00082b25 	.word	0x00082b25

000a29f8 <Cl_Dprep_setdata>:
		
	}
return CL_OK;
}
Cl_ReturnCodeType Cl_Dprep_setdata(Cl_ConsoleRxDataType DataId,cl_PrepDatatype cl_PrepData , Cl_Uint8Type size)
{
   a29f8:	b590      	push	{r4, r7, lr}
   a29fa:	b089      	sub	sp, #36	; 0x24
   a29fc:	af00      	add	r7, sp, #0
   a29fe:	4604      	mov	r4, r0
   a2a00:	1d38      	adds	r0, r7, #4
   a2a02:	e880 0006 	stmia.w	r0, {r1, r2}
   a2a06:	461a      	mov	r2, r3
   a2a08:	4623      	mov	r3, r4
   a2a0a:	73fb      	strb	r3, [r7, #15]
   a2a0c:	4613      	mov	r3, r2
   a2a0e:	73bb      	strb	r3, [r7, #14]
	Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   a2a10:	2300      	movs	r3, #0
   a2a12:	77fb      	strb	r3, [r7, #31]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a2a14:	2359      	movs	r3, #89	; 0x59
   a2a16:	77bb      	strb	r3, [r7, #30]
	Cl_Uint8Type dataarray[8] =  {0,0,0,0};
   a2a18:	2300      	movs	r3, #0
   a2a1a:	617b      	str	r3, [r7, #20]
   a2a1c:	2300      	movs	r3, #0
   a2a1e:	61bb      	str	r3, [r7, #24]
	Cl_Uint8Type  databytecnt = 0;
   a2a20:	2300      	movs	r3, #0
   a2a22:	777b      	strb	r3, [r7, #29]

				switch(DataId)
   a2a24:	7bfb      	ldrb	r3, [r7, #15]
   a2a26:	3b05      	subs	r3, #5
   a2a28:	2b18      	cmp	r3, #24
   a2a2a:	f200 8385 	bhi.w	a3138 <Cl_Dprep_setdata+0x740>
   a2a2e:	a201      	add	r2, pc, #4	; (adr r2, a2a34 <Cl_Dprep_setdata+0x3c>)
   a2a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a2a34:	000a2a99 	.word	0x000a2a99
   a2a38:	000a2ac5 	.word	0x000a2ac5
   a2a3c:	000a2af1 	.word	0x000a2af1
   a2a40:	000a2b49 	.word	0x000a2b49
   a2a44:	000a2b75 	.word	0x000a2b75
   a2a48:	000a3139 	.word	0x000a3139
   a2a4c:	000a2ba1 	.word	0x000a2ba1
   a2a50:	000a2bcd 	.word	0x000a2bcd
   a2a54:	000a2bf9 	.word	0x000a2bf9
   a2a58:	000a2b1d 	.word	0x000a2b1d
   a2a5c:	000a2c25 	.word	0x000a2c25
   a2a60:	000a3139 	.word	0x000a3139
   a2a64:	000a3139 	.word	0x000a3139
   a2a68:	000a3139 	.word	0x000a3139
   a2a6c:	000a2c55 	.word	0x000a2c55
   a2a70:	000a2cc5 	.word	0x000a2cc5
   a2a74:	000a2d35 	.word	0x000a2d35
   a2a78:	000a2db1 	.word	0x000a2db1
   a2a7c:	000a2e21 	.word	0x000a2e21
   a2a80:	000a2e91 	.word	0x000a2e91
   a2a84:	000a2eff 	.word	0x000a2eff
   a2a88:	000a2f6f 	.word	0x000a2f6f
   a2a8c:	000a2fdf 	.word	0x000a2fdf
   a2a90:	000a304f 	.word	0x000a304f
   a2a94:	000a30c9 	.word	0x000a30c9
				{
	 
					 case	CON_RX_PARAM_DATA_DIALYSIS_FLOW:
					 Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_FLOW,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);					 
   a2a98:	4bc2      	ldr	r3, [pc, #776]	; (a2da4 <Cl_Dprep_setdata+0x3ac>)
   a2a9a:	78db      	ldrb	r3, [r3, #3]
   a2a9c:	1d3a      	adds	r2, r7, #4
   a2a9e:	2005      	movs	r0, #5
   a2aa0:	4611      	mov	r1, r2
   a2aa2:	461a      	mov	r2, r3
   a2aa4:	4bc0      	ldr	r3, [pc, #768]	; (a2da8 <Cl_Dprep_setdata+0x3b0>)
   a2aa6:	4798      	blx	r3
   a2aa8:	4603      	mov	r3, r0
   a2aaa:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_FLOW;
   a2aac:	2305      	movs	r3, #5
   a2aae:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSATE_FLOW, &dataarray[1]);
   a2ab0:	f107 0314 	add.w	r3, r7, #20
   a2ab4:	3301      	adds	r3, #1
   a2ab6:	2005      	movs	r0, #5
   a2ab8:	4619      	mov	r1, r3
   a2aba:	4bbc      	ldr	r3, [pc, #752]	; (a2dac <Cl_Dprep_setdata+0x3b4>)
   a2abc:	4798      	blx	r3
   a2abe:	4603      	mov	r3, r0
   a2ac0:	77fb      	strb	r3, [r7, #31]
					
					 break;
   a2ac2:	e33a      	b.n	a313a <Cl_Dprep_setdata+0x742>
					 case	CON_RX_PARAM_DATA_DIALYSIS_TEMP:
					 Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_TEMP,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a2ac4:	4bb7      	ldr	r3, [pc, #732]	; (a2da4 <Cl_Dprep_setdata+0x3ac>)
   a2ac6:	78db      	ldrb	r3, [r3, #3]
   a2ac8:	1d3a      	adds	r2, r7, #4
   a2aca:	2006      	movs	r0, #6
   a2acc:	4611      	mov	r1, r2
   a2ace:	461a      	mov	r2, r3
   a2ad0:	4bb5      	ldr	r3, [pc, #724]	; (a2da8 <Cl_Dprep_setdata+0x3b0>)
   a2ad2:	4798      	blx	r3
   a2ad4:	4603      	mov	r3, r0
   a2ad6:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_TEMP; 
   a2ad8:	2306      	movs	r3, #6
   a2ada:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSATE_TEMP, &dataarray[1]);
   a2adc:	f107 0314 	add.w	r3, r7, #20
   a2ae0:	3301      	adds	r3, #1
   a2ae2:	2006      	movs	r0, #6
   a2ae4:	4619      	mov	r1, r3
   a2ae6:	4bb1      	ldr	r3, [pc, #708]	; (a2dac <Cl_Dprep_setdata+0x3b4>)
   a2ae8:	4798      	blx	r3
   a2aea:	4603      	mov	r3, r0
   a2aec:	77fb      	strb	r3, [r7, #31]

					 break;
   a2aee:	e324      	b.n	a313a <Cl_Dprep_setdata+0x742>
	 
					 case	CON_RX_PARAM_DATA_HEPARIN_RATE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_FLOW_RATE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a2af0:	4bac      	ldr	r3, [pc, #688]	; (a2da4 <Cl_Dprep_setdata+0x3ac>)
   a2af2:	78db      	ldrb	r3, [r3, #3]
   a2af4:	1d3a      	adds	r2, r7, #4
   a2af6:	200e      	movs	r0, #14
   a2af8:	4611      	mov	r1, r2
   a2afa:	461a      	mov	r2, r3
   a2afc:	4baa      	ldr	r3, [pc, #680]	; (a2da8 <Cl_Dprep_setdata+0x3b0>)
   a2afe:	4798      	blx	r3
   a2b00:	4603      	mov	r3, r0
   a2b02:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_HEPARIN_RATE;
   a2b04:	2307      	movs	r3, #7
   a2b06:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_FLOW_RATE, &dataarray[1]);
   a2b08:	f107 0314 	add.w	r3, r7, #20
   a2b0c:	3301      	adds	r3, #1
   a2b0e:	200e      	movs	r0, #14
   a2b10:	4619      	mov	r1, r3
   a2b12:	4ba6      	ldr	r3, [pc, #664]	; (a2dac <Cl_Dprep_setdata+0x3b4>)
   a2b14:	4798      	blx	r3
   a2b16:	4603      	mov	r3, r0
   a2b18:	77fb      	strb	r3, [r7, #31]
					 break;
   a2b1a:	e30e      	b.n	a313a <Cl_Dprep_setdata+0x742>
					 
					case CON_RX_PARAM_DATA_BOLUS_VOLUME:

					 Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_BOLUS,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a2b1c:	4ba1      	ldr	r3, [pc, #644]	; (a2da4 <Cl_Dprep_setdata+0x3ac>)
   a2b1e:	78db      	ldrb	r3, [r3, #3]
   a2b20:	1d3a      	adds	r2, r7, #4
   a2b22:	200f      	movs	r0, #15
   a2b24:	4611      	mov	r1, r2
   a2b26:	461a      	mov	r2, r3
   a2b28:	4b9f      	ldr	r3, [pc, #636]	; (a2da8 <Cl_Dprep_setdata+0x3b0>)
   a2b2a:	4798      	blx	r3
   a2b2c:	4603      	mov	r3, r0
   a2b2e:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_BOLUS_VOLUME;
   a2b30:	230e      	movs	r3, #14
   a2b32:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_BOLUS, &dataarray[1]);
   a2b34:	f107 0314 	add.w	r3, r7, #20
   a2b38:	3301      	adds	r3, #1
   a2b3a:	200f      	movs	r0, #15
   a2b3c:	4619      	mov	r1, r3
   a2b3e:	4b9b      	ldr	r3, [pc, #620]	; (a2dac <Cl_Dprep_setdata+0x3b4>)
   a2b40:	4798      	blx	r3
   a2b42:	4603      	mov	r3, r0
   a2b44:	77fb      	strb	r3, [r7, #31]

					break;
   a2b46:	e2f8      	b.n	a313a <Cl_Dprep_setdata+0x742>
					 case	CON_RX_PARAM_DATA_APT_VALUE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a2b48:	4b96      	ldr	r3, [pc, #600]	; (a2da4 <Cl_Dprep_setdata+0x3ac>)
   a2b4a:	78db      	ldrb	r3, [r3, #3]
   a2b4c:	1d3a      	adds	r2, r7, #4
   a2b4e:	2007      	movs	r0, #7
   a2b50:	4611      	mov	r1, r2
   a2b52:	461a      	mov	r2, r3
   a2b54:	4b94      	ldr	r3, [pc, #592]	; (a2da8 <Cl_Dprep_setdata+0x3b0>)
   a2b56:	4798      	blx	r3
   a2b58:	4603      	mov	r3, r0
   a2b5a:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_APT_VALUE;	 
   a2b5c:	2308      	movs	r3, #8
   a2b5e:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_APT_VALUE, &dataarray[1]);
   a2b60:	f107 0314 	add.w	r3, r7, #20
   a2b64:	3301      	adds	r3, #1
   a2b66:	2007      	movs	r0, #7
   a2b68:	4619      	mov	r1, r3
   a2b6a:	4b90      	ldr	r3, [pc, #576]	; (a2dac <Cl_Dprep_setdata+0x3b4>)
   a2b6c:	4798      	blx	r3
   a2b6e:	4603      	mov	r3, r0
   a2b70:	77fb      	strb	r3, [r7, #31]

					 break;
   a2b72:	e2e2      	b.n	a313a <Cl_Dprep_setdata+0x742>
					 case	CON_RX_PARAM_DATA_VPT_VALUE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a2b74:	4b8b      	ldr	r3, [pc, #556]	; (a2da4 <Cl_Dprep_setdata+0x3ac>)
   a2b76:	78db      	ldrb	r3, [r3, #3]
   a2b78:	1d3a      	adds	r2, r7, #4
   a2b7a:	2008      	movs	r0, #8
   a2b7c:	4611      	mov	r1, r2
   a2b7e:	461a      	mov	r2, r3
   a2b80:	4b89      	ldr	r3, [pc, #548]	; (a2da8 <Cl_Dprep_setdata+0x3b0>)
   a2b82:	4798      	blx	r3
   a2b84:	4603      	mov	r3, r0
   a2b86:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_VPT_VALUE;	 
   a2b88:	2309      	movs	r3, #9
   a2b8a:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_VPT_VALUE, &dataarray[1]);
   a2b8c:	f107 0314 	add.w	r3, r7, #20
   a2b90:	3301      	adds	r3, #1
   a2b92:	2008      	movs	r0, #8
   a2b94:	4619      	mov	r1, r3
   a2b96:	4b85      	ldr	r3, [pc, #532]	; (a2dac <Cl_Dprep_setdata+0x3b4>)
   a2b98:	4798      	blx	r3
   a2b9a:	4603      	mov	r3, r0
   a2b9c:	77fb      	strb	r3, [r7, #31]

					 break;
   a2b9e:	e2cc      	b.n	a313a <Cl_Dprep_setdata+0x742>
					 case	CON_RX_PARAM_DATA_TMP_VALUE:

					 break;
					 case	CON_RX_PARAM_DATA_COND_VALUE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_CONDUCTIVITY,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a2ba0:	4b80      	ldr	r3, [pc, #512]	; (a2da4 <Cl_Dprep_setdata+0x3ac>)
   a2ba2:	78db      	ldrb	r3, [r3, #3]
   a2ba4:	1d3a      	adds	r2, r7, #4
   a2ba6:	200a      	movs	r0, #10
   a2ba8:	4611      	mov	r1, r2
   a2baa:	461a      	mov	r2, r3
   a2bac:	4b7e      	ldr	r3, [pc, #504]	; (a2da8 <Cl_Dprep_setdata+0x3b0>)
   a2bae:	4798      	blx	r3
   a2bb0:	4603      	mov	r3, r0
   a2bb2:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_COND_VALUE;
   a2bb4:	230b      	movs	r3, #11
   a2bb6:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_CONDUCTIVITY, &dataarray[1]);
   a2bb8:	f107 0314 	add.w	r3, r7, #20
   a2bbc:	3301      	adds	r3, #1
   a2bbe:	200a      	movs	r0, #10
   a2bc0:	4619      	mov	r1, r3
   a2bc2:	4b7a      	ldr	r3, [pc, #488]	; (a2dac <Cl_Dprep_setdata+0x3b4>)
   a2bc4:	4798      	blx	r3
   a2bc6:	4603      	mov	r3, r0
   a2bc8:	77fb      	strb	r3, [r7, #31]

					 break;
   a2bca:	e2b6      	b.n	a313a <Cl_Dprep_setdata+0x742>

					 case	CON_RX_PARAM_DATA_UF_RATE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_UF_REMOVAL_RATE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a2bcc:	4b75      	ldr	r3, [pc, #468]	; (a2da4 <Cl_Dprep_setdata+0x3ac>)
   a2bce:	78db      	ldrb	r3, [r3, #3]
   a2bd0:	1d3a      	adds	r2, r7, #4
   a2bd2:	200b      	movs	r0, #11
   a2bd4:	4611      	mov	r1, r2
   a2bd6:	461a      	mov	r2, r3
   a2bd8:	4b73      	ldr	r3, [pc, #460]	; (a2da8 <Cl_Dprep_setdata+0x3b0>)
   a2bda:	4798      	blx	r3
   a2bdc:	4603      	mov	r3, r0
   a2bde:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_UF_RATE;
   a2be0:	230c      	movs	r3, #12
   a2be2:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_REMOVAL_RATE, &dataarray[1]);
   a2be4:	f107 0314 	add.w	r3, r7, #20
   a2be8:	3301      	adds	r3, #1
   a2bea:	200b      	movs	r0, #11
   a2bec:	4619      	mov	r1, r3
   a2bee:	4b6f      	ldr	r3, [pc, #444]	; (a2dac <Cl_Dprep_setdata+0x3b4>)
   a2bf0:	4798      	blx	r3
   a2bf2:	4603      	mov	r3, r0
   a2bf4:	77fb      	strb	r3, [r7, #31]

					 break;
   a2bf6:	e2a0      	b.n	a313a <Cl_Dprep_setdata+0x742>
					 case CON_RX_PARAM_DATA_UF_GOAL:
					 Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a2bf8:	4b6a      	ldr	r3, [pc, #424]	; (a2da4 <Cl_Dprep_setdata+0x3ac>)
   a2bfa:	78db      	ldrb	r3, [r3, #3]
   a2bfc:	1d3a      	adds	r2, r7, #4
   a2bfe:	200c      	movs	r0, #12
   a2c00:	4611      	mov	r1, r2
   a2c02:	461a      	mov	r2, r3
   a2c04:	4b68      	ldr	r3, [pc, #416]	; (a2da8 <Cl_Dprep_setdata+0x3b0>)
   a2c06:	4798      	blx	r3
   a2c08:	4603      	mov	r3, r0
   a2c0a:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_UF_GOAL;
   a2c0c:	230d      	movs	r3, #13
   a2c0e:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_GOAL, &dataarray[1]);
   a2c10:	f107 0314 	add.w	r3, r7, #20
   a2c14:	3301      	adds	r3, #1
   a2c16:	200c      	movs	r0, #12
   a2c18:	4619      	mov	r1, r3
   a2c1a:	4b64      	ldr	r3, [pc, #400]	; (a2dac <Cl_Dprep_setdata+0x3b4>)
   a2c1c:	4798      	blx	r3
   a2c1e:	4603      	mov	r3, r0
   a2c20:	77fb      	strb	r3, [r7, #31]

					 break;
   a2c22:	e28a      	b.n	a313a <Cl_Dprep_setdata+0x742>
					 case	CON_RX_PARAM_DATA_ABF_RATE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_FLOW_RATE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);					 
   a2c24:	4b5f      	ldr	r3, [pc, #380]	; (a2da4 <Cl_Dprep_setdata+0x3ac>)
   a2c26:	78db      	ldrb	r3, [r3, #3]
   a2c28:	1d3a      	adds	r2, r7, #4
   a2c2a:	200e      	movs	r0, #14
   a2c2c:	4611      	mov	r1, r2
   a2c2e:	461a      	mov	r2, r3
   a2c30:	4b5d      	ldr	r3, [pc, #372]	; (a2da8 <Cl_Dprep_setdata+0x3b0>)
   a2c32:	4798      	blx	r3
   a2c34:	4603      	mov	r3, r0
   a2c36:	77fb      	strb	r3, [r7, #31]
					 command = CON_TX_COMMAND_SYSDATA;					 
   a2c38:	2316      	movs	r3, #22
   a2c3a:	77bb      	strb	r3, [r7, #30]
					 dataarray[0] = CON_TX_PARAM_DATA_ABF_RATE;
   a2c3c:	230f      	movs	r3, #15
   a2c3e:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_ARTERIAL_BLOODFLOW_RATE, &dataarray[1]);					 
   a2c40:	f107 0314 	add.w	r3, r7, #20
   a2c44:	3301      	adds	r3, #1
   a2c46:	200d      	movs	r0, #13
   a2c48:	4619      	mov	r1, r3
   a2c4a:	4b58      	ldr	r3, [pc, #352]	; (a2dac <Cl_Dprep_setdata+0x3b4>)
   a2c4c:	4798      	blx	r3
   a2c4e:	4603      	mov	r3, r0
   a2c50:	77fb      	strb	r3, [r7, #31]
					 break;
   a2c52:	e272      	b.n	a313a <Cl_Dprep_setdata+0x742>
					#endif
					case CON_RX_PARAM_DATA_DIALYSIS_FLOW_CONFIG: //0x13
						
						
						
						Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_FLOW,&cl_PrepData.bytearray[0],2);
   a2c54:	1d3b      	adds	r3, r7, #4
   a2c56:	2005      	movs	r0, #5
   a2c58:	4619      	mov	r1, r3
   a2c5a:	2202      	movs	r2, #2
   a2c5c:	4b52      	ldr	r3, [pc, #328]	; (a2da8 <Cl_Dprep_setdata+0x3b0>)
   a2c5e:	4798      	blx	r3
   a2c60:	4603      	mov	r3, r0
   a2c62:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_FLOW_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a2c64:	1d3b      	adds	r3, r7, #4
   a2c66:	3302      	adds	r3, #2
   a2c68:	2012      	movs	r0, #18
   a2c6a:	4619      	mov	r1, r3
   a2c6c:	2202      	movs	r2, #2
   a2c6e:	4b4e      	ldr	r3, [pc, #312]	; (a2da8 <Cl_Dprep_setdata+0x3b0>)
   a2c70:	4798      	blx	r3
   a2c72:	4603      	mov	r3, r0
   a2c74:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_FLOW_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a2c76:	1d3b      	adds	r3, r7, #4
   a2c78:	3304      	adds	r3, #4
   a2c7a:	2013      	movs	r0, #19
   a2c7c:	4619      	mov	r1, r3
   a2c7e:	2202      	movs	r2, #2
   a2c80:	4b49      	ldr	r3, [pc, #292]	; (a2da8 <Cl_Dprep_setdata+0x3b0>)
   a2c82:	4798      	blx	r3
   a2c84:	4603      	mov	r3, r0
   a2c86:	77fb      	strb	r3, [r7, #31]
						
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_FLOW_CONFIG;
   a2c88:	2313      	movs	r3, #19
   a2c8a:	753b      	strb	r3, [r7, #20]
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSATE_FLOW, &dataarray[1]);	
   a2c8c:	f107 0314 	add.w	r3, r7, #20
   a2c90:	3301      	adds	r3, #1
   a2c92:	2005      	movs	r0, #5
   a2c94:	4619      	mov	r1, r3
   a2c96:	4b45      	ldr	r3, [pc, #276]	; (a2dac <Cl_Dprep_setdata+0x3b4>)
   a2c98:	4798      	blx	r3
   a2c9a:	4603      	mov	r3, r0
   a2c9c:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSIS_FLOW_CONFIG_UPPER, &dataarray[3]);
   a2c9e:	f107 0314 	add.w	r3, r7, #20
   a2ca2:	3303      	adds	r3, #3
   a2ca4:	2012      	movs	r0, #18
   a2ca6:	4619      	mov	r1, r3
   a2ca8:	4b40      	ldr	r3, [pc, #256]	; (a2dac <Cl_Dprep_setdata+0x3b4>)
   a2caa:	4798      	blx	r3
   a2cac:	4603      	mov	r3, r0
   a2cae:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSIS_FLOW_CONFIG_LOWER, &dataarray[5]);		
   a2cb0:	f107 0314 	add.w	r3, r7, #20
   a2cb4:	3305      	adds	r3, #5
   a2cb6:	2013      	movs	r0, #19
   a2cb8:	4619      	mov	r1, r3
   a2cba:	4b3c      	ldr	r3, [pc, #240]	; (a2dac <Cl_Dprep_setdata+0x3b4>)
   a2cbc:	4798      	blx	r3
   a2cbe:	4603      	mov	r3, r0
   a2cc0:	77fb      	strb	r3, [r7, #31]
							
					break;
   a2cc2:	e23a      	b.n	a313a <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_DIALYSIS_TEMP_CONFIG://0x14
											
											Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_TEMP,&cl_PrepData.bytearray[0],2);
   a2cc4:	1d3b      	adds	r3, r7, #4
   a2cc6:	2006      	movs	r0, #6
   a2cc8:	4619      	mov	r1, r3
   a2cca:	2202      	movs	r2, #2
   a2ccc:	4b36      	ldr	r3, [pc, #216]	; (a2da8 <Cl_Dprep_setdata+0x3b0>)
   a2cce:	4798      	blx	r3
   a2cd0:	4603      	mov	r3, r0
   a2cd2:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_TEMP_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a2cd4:	1d3b      	adds	r3, r7, #4
   a2cd6:	3302      	adds	r3, #2
   a2cd8:	2014      	movs	r0, #20
   a2cda:	4619      	mov	r1, r3
   a2cdc:	2202      	movs	r2, #2
   a2cde:	4b32      	ldr	r3, [pc, #200]	; (a2da8 <Cl_Dprep_setdata+0x3b0>)
   a2ce0:	4798      	blx	r3
   a2ce2:	4603      	mov	r3, r0
   a2ce4:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_TEMP_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a2ce6:	1d3b      	adds	r3, r7, #4
   a2ce8:	3304      	adds	r3, #4
   a2cea:	2015      	movs	r0, #21
   a2cec:	4619      	mov	r1, r3
   a2cee:	2202      	movs	r2, #2
   a2cf0:	4b2d      	ldr	r3, [pc, #180]	; (a2da8 <Cl_Dprep_setdata+0x3b0>)
   a2cf2:	4798      	blx	r3
   a2cf4:	4603      	mov	r3, r0
   a2cf6:	77fb      	strb	r3, [r7, #31]
											
											dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_TEMP_CONFIG;
   a2cf8:	2314      	movs	r3, #20
   a2cfa:	753b      	strb	r3, [r7, #20]
											Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSATE_TEMP, &dataarray[1]);
   a2cfc:	f107 0314 	add.w	r3, r7, #20
   a2d00:	3301      	adds	r3, #1
   a2d02:	2006      	movs	r0, #6
   a2d04:	4619      	mov	r1, r3
   a2d06:	4b29      	ldr	r3, [pc, #164]	; (a2dac <Cl_Dprep_setdata+0x3b4>)
   a2d08:	4798      	blx	r3
   a2d0a:	4603      	mov	r3, r0
   a2d0c:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSIS_TEMP_CONFIG_UPPER, &dataarray[3]);
   a2d0e:	f107 0314 	add.w	r3, r7, #20
   a2d12:	3303      	adds	r3, #3
   a2d14:	2014      	movs	r0, #20
   a2d16:	4619      	mov	r1, r3
   a2d18:	4b24      	ldr	r3, [pc, #144]	; (a2dac <Cl_Dprep_setdata+0x3b4>)
   a2d1a:	4798      	blx	r3
   a2d1c:	4603      	mov	r3, r0
   a2d1e:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSIS_TEMP_CONFIG_LOWER, &dataarray[5]);
   a2d20:	f107 0314 	add.w	r3, r7, #20
   a2d24:	3305      	adds	r3, #5
   a2d26:	2015      	movs	r0, #21
   a2d28:	4619      	mov	r1, r3
   a2d2a:	4b20      	ldr	r3, [pc, #128]	; (a2dac <Cl_Dprep_setdata+0x3b4>)
   a2d2c:	4798      	blx	r3
   a2d2e:	4603      	mov	r3, r0
   a2d30:	77fb      	strb	r3, [r7, #31]
					break;
   a2d32:	e202      	b.n	a313a <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_HEPARIN_RATE_CONFIG://0x15
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_FLOW_RATE,&cl_PrepData.bytearray[0],2);
   a2d34:	1d3b      	adds	r3, r7, #4
   a2d36:	200e      	movs	r0, #14
   a2d38:	4619      	mov	r1, r3
   a2d3a:	2202      	movs	r2, #2
   a2d3c:	4b1a      	ldr	r3, [pc, #104]	; (a2da8 <Cl_Dprep_setdata+0x3b0>)
   a2d3e:	4798      	blx	r3
   a2d40:	4603      	mov	r3, r0
   a2d42:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_RATE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a2d44:	1d3b      	adds	r3, r7, #4
   a2d46:	3302      	adds	r3, #2
   a2d48:	2016      	movs	r0, #22
   a2d4a:	4619      	mov	r1, r3
   a2d4c:	2202      	movs	r2, #2
   a2d4e:	4b16      	ldr	r3, [pc, #88]	; (a2da8 <Cl_Dprep_setdata+0x3b0>)
   a2d50:	4798      	blx	r3
   a2d52:	4603      	mov	r3, r0
   a2d54:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_RATE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a2d56:	1d3b      	adds	r3, r7, #4
   a2d58:	3304      	adds	r3, #4
   a2d5a:	2017      	movs	r0, #23
   a2d5c:	4619      	mov	r1, r3
   a2d5e:	2202      	movs	r2, #2
   a2d60:	4b11      	ldr	r3, [pc, #68]	; (a2da8 <Cl_Dprep_setdata+0x3b0>)
   a2d62:	4798      	blx	r3
   a2d64:	4603      	mov	r3, r0
   a2d66:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_HEPARIN_RATE_CONFIG;
   a2d68:	2315      	movs	r3, #21
   a2d6a:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_FLOW_RATE, &dataarray[1]);
   a2d6c:	f107 0314 	add.w	r3, r7, #20
   a2d70:	3301      	adds	r3, #1
   a2d72:	200e      	movs	r0, #14
   a2d74:	4619      	mov	r1, r3
   a2d76:	4b0d      	ldr	r3, [pc, #52]	; (a2dac <Cl_Dprep_setdata+0x3b4>)
   a2d78:	4798      	blx	r3
   a2d7a:	4603      	mov	r3, r0
   a2d7c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_RATE_CONFIG_UPPER, &dataarray[3]);
   a2d7e:	f107 0314 	add.w	r3, r7, #20
   a2d82:	3303      	adds	r3, #3
   a2d84:	2016      	movs	r0, #22
   a2d86:	4619      	mov	r1, r3
   a2d88:	4b08      	ldr	r3, [pc, #32]	; (a2dac <Cl_Dprep_setdata+0x3b4>)
   a2d8a:	4798      	blx	r3
   a2d8c:	4603      	mov	r3, r0
   a2d8e:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_RATE_CONFIG_LOWER, &dataarray[5]);
   a2d90:	f107 0314 	add.w	r3, r7, #20
   a2d94:	3305      	adds	r3, #5
   a2d96:	2017      	movs	r0, #23
   a2d98:	4619      	mov	r1, r3
   a2d9a:	4b04      	ldr	r3, [pc, #16]	; (a2dac <Cl_Dprep_setdata+0x3b4>)
   a2d9c:	4798      	blx	r3
   a2d9e:	4603      	mov	r3, r0
   a2da0:	77fb      	strb	r3, [r7, #31]
					break;
   a2da2:	e1ca      	b.n	a313a <Cl_Dprep_setdata+0x742>
   a2da4:	200725bc 	.word	0x200725bc
   a2da8:	0009bd15 	.word	0x0009bd15
   a2dac:	0009bcdd 	.word	0x0009bcdd
					case CON_RX_PARAM_DATA_APT_VALUE_CONFIG://0x16
									Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE,&cl_PrepData.bytearray[0],2);
   a2db0:	1d3b      	adds	r3, r7, #4
   a2db2:	2007      	movs	r0, #7
   a2db4:	4619      	mov	r1, r3
   a2db6:	2202      	movs	r2, #2
   a2db8:	4bc1      	ldr	r3, [pc, #772]	; (a30c0 <Cl_Dprep_setdata+0x6c8>)
   a2dba:	4798      	blx	r3
   a2dbc:	4603      	mov	r3, r0
   a2dbe:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a2dc0:	1d3b      	adds	r3, r7, #4
   a2dc2:	3302      	adds	r3, #2
   a2dc4:	2018      	movs	r0, #24
   a2dc6:	4619      	mov	r1, r3
   a2dc8:	2202      	movs	r2, #2
   a2dca:	4bbd      	ldr	r3, [pc, #756]	; (a30c0 <Cl_Dprep_setdata+0x6c8>)
   a2dcc:	4798      	blx	r3
   a2dce:	4603      	mov	r3, r0
   a2dd0:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a2dd2:	1d3b      	adds	r3, r7, #4
   a2dd4:	3304      	adds	r3, #4
   a2dd6:	2019      	movs	r0, #25
   a2dd8:	4619      	mov	r1, r3
   a2dda:	2202      	movs	r2, #2
   a2ddc:	4bb8      	ldr	r3, [pc, #736]	; (a30c0 <Cl_Dprep_setdata+0x6c8>)
   a2dde:	4798      	blx	r3
   a2de0:	4603      	mov	r3, r0
   a2de2:	77fb      	strb	r3, [r7, #31]
																
									dataarray[0] = CON_TX_PARAM_DATA_APT_VALUE_CONFIG;
   a2de4:	2316      	movs	r3, #22
   a2de6:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_APT_VALUE, &dataarray[1]);
   a2de8:	f107 0314 	add.w	r3, r7, #20
   a2dec:	3301      	adds	r3, #1
   a2dee:	2007      	movs	r0, #7
   a2df0:	4619      	mov	r1, r3
   a2df2:	4bb4      	ldr	r3, [pc, #720]	; (a30c4 <Cl_Dprep_setdata+0x6cc>)
   a2df4:	4798      	blx	r3
   a2df6:	4603      	mov	r3, r0
   a2df8:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_APT_VALUE_CONFIG_UPPER, &dataarray[3]);
   a2dfa:	f107 0314 	add.w	r3, r7, #20
   a2dfe:	3303      	adds	r3, #3
   a2e00:	2018      	movs	r0, #24
   a2e02:	4619      	mov	r1, r3
   a2e04:	4baf      	ldr	r3, [pc, #700]	; (a30c4 <Cl_Dprep_setdata+0x6cc>)
   a2e06:	4798      	blx	r3
   a2e08:	4603      	mov	r3, r0
   a2e0a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_APT_VALUE_CONFIG_LOWER, &dataarray[5]);
   a2e0c:	f107 0314 	add.w	r3, r7, #20
   a2e10:	3305      	adds	r3, #5
   a2e12:	2019      	movs	r0, #25
   a2e14:	4619      	mov	r1, r3
   a2e16:	4bab      	ldr	r3, [pc, #684]	; (a30c4 <Cl_Dprep_setdata+0x6cc>)
   a2e18:	4798      	blx	r3
   a2e1a:	4603      	mov	r3, r0
   a2e1c:	77fb      	strb	r3, [r7, #31]
					break;
   a2e1e:	e18c      	b.n	a313a <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_VPT_VALUE_CONFIG://0x17
									Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE,&cl_PrepData.bytearray[0],2);
   a2e20:	1d3b      	adds	r3, r7, #4
   a2e22:	2008      	movs	r0, #8
   a2e24:	4619      	mov	r1, r3
   a2e26:	2202      	movs	r2, #2
   a2e28:	4ba5      	ldr	r3, [pc, #660]	; (a30c0 <Cl_Dprep_setdata+0x6c8>)
   a2e2a:	4798      	blx	r3
   a2e2c:	4603      	mov	r3, r0
   a2e2e:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a2e30:	1d3b      	adds	r3, r7, #4
   a2e32:	3302      	adds	r3, #2
   a2e34:	201a      	movs	r0, #26
   a2e36:	4619      	mov	r1, r3
   a2e38:	2202      	movs	r2, #2
   a2e3a:	4ba1      	ldr	r3, [pc, #644]	; (a30c0 <Cl_Dprep_setdata+0x6c8>)
   a2e3c:	4798      	blx	r3
   a2e3e:	4603      	mov	r3, r0
   a2e40:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a2e42:	1d3b      	adds	r3, r7, #4
   a2e44:	3304      	adds	r3, #4
   a2e46:	201b      	movs	r0, #27
   a2e48:	4619      	mov	r1, r3
   a2e4a:	2202      	movs	r2, #2
   a2e4c:	4b9c      	ldr	r3, [pc, #624]	; (a30c0 <Cl_Dprep_setdata+0x6c8>)
   a2e4e:	4798      	blx	r3
   a2e50:	4603      	mov	r3, r0
   a2e52:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_VPT_VALUE_CONFIG;
   a2e54:	2317      	movs	r3, #23
   a2e56:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_VPT_VALUE, &dataarray[1]);
   a2e58:	f107 0314 	add.w	r3, r7, #20
   a2e5c:	3301      	adds	r3, #1
   a2e5e:	2008      	movs	r0, #8
   a2e60:	4619      	mov	r1, r3
   a2e62:	4b98      	ldr	r3, [pc, #608]	; (a30c4 <Cl_Dprep_setdata+0x6cc>)
   a2e64:	4798      	blx	r3
   a2e66:	4603      	mov	r3, r0
   a2e68:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_VPT_VALUE_CONFIG_UPPER, &dataarray[3]);
   a2e6a:	f107 0314 	add.w	r3, r7, #20
   a2e6e:	3303      	adds	r3, #3
   a2e70:	201a      	movs	r0, #26
   a2e72:	4619      	mov	r1, r3
   a2e74:	4b93      	ldr	r3, [pc, #588]	; (a30c4 <Cl_Dprep_setdata+0x6cc>)
   a2e76:	4798      	blx	r3
   a2e78:	4603      	mov	r3, r0
   a2e7a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_VPT_VALUE_CONFIG_LOWER, &dataarray[5]);
   a2e7c:	f107 0314 	add.w	r3, r7, #20
   a2e80:	3305      	adds	r3, #5
   a2e82:	201b      	movs	r0, #27
   a2e84:	4619      	mov	r1, r3
   a2e86:	4b8f      	ldr	r3, [pc, #572]	; (a30c4 <Cl_Dprep_setdata+0x6cc>)
   a2e88:	4798      	blx	r3
   a2e8a:	4603      	mov	r3, r0
   a2e8c:	77fb      	strb	r3, [r7, #31]
					break;
   a2e8e:	e154      	b.n	a313a <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_TMP_VALUE_CONFIG://0x18
									Cl_dprepretcode =sv_nvmsetdata(NV_TMP,&cl_PrepData.bytearray[0],2);
   a2e90:	1d3b      	adds	r3, r7, #4
   a2e92:	2009      	movs	r0, #9
   a2e94:	4619      	mov	r1, r3
   a2e96:	2202      	movs	r2, #2
   a2e98:	4b89      	ldr	r3, [pc, #548]	; (a30c0 <Cl_Dprep_setdata+0x6c8>)
   a2e9a:	4798      	blx	r3
   a2e9c:	4603      	mov	r3, r0
   a2e9e:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_TMP_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[0],2);
   a2ea0:	1d3b      	adds	r3, r7, #4
   a2ea2:	201c      	movs	r0, #28
   a2ea4:	4619      	mov	r1, r3
   a2ea6:	2202      	movs	r2, #2
   a2ea8:	4b85      	ldr	r3, [pc, #532]	; (a30c0 <Cl_Dprep_setdata+0x6c8>)
   a2eaa:	4798      	blx	r3
   a2eac:	4603      	mov	r3, r0
   a2eae:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_TMP_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a2eb0:	1d3b      	adds	r3, r7, #4
   a2eb2:	3304      	adds	r3, #4
   a2eb4:	201d      	movs	r0, #29
   a2eb6:	4619      	mov	r1, r3
   a2eb8:	2202      	movs	r2, #2
   a2eba:	4b81      	ldr	r3, [pc, #516]	; (a30c0 <Cl_Dprep_setdata+0x6c8>)
   a2ebc:	4798      	blx	r3
   a2ebe:	4603      	mov	r3, r0
   a2ec0:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_TMP_VALUE_CONFIG;
   a2ec2:	2318      	movs	r3, #24
   a2ec4:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_TMP, &dataarray[1]);
   a2ec6:	f107 0314 	add.w	r3, r7, #20
   a2eca:	3301      	adds	r3, #1
   a2ecc:	2009      	movs	r0, #9
   a2ece:	4619      	mov	r1, r3
   a2ed0:	4b7c      	ldr	r3, [pc, #496]	; (a30c4 <Cl_Dprep_setdata+0x6cc>)
   a2ed2:	4798      	blx	r3
   a2ed4:	4603      	mov	r3, r0
   a2ed6:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_TMP_VALUE_CONFIG_UPPER, &dataarray[3]);
   a2ed8:	f107 0314 	add.w	r3, r7, #20
   a2edc:	3303      	adds	r3, #3
   a2ede:	201c      	movs	r0, #28
   a2ee0:	4619      	mov	r1, r3
   a2ee2:	4b78      	ldr	r3, [pc, #480]	; (a30c4 <Cl_Dprep_setdata+0x6cc>)
   a2ee4:	4798      	blx	r3
   a2ee6:	4603      	mov	r3, r0
   a2ee8:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_TMP_VALUE_CONFIG_LOWER, &dataarray[5]);
   a2eea:	f107 0314 	add.w	r3, r7, #20
   a2eee:	3305      	adds	r3, #5
   a2ef0:	201d      	movs	r0, #29
   a2ef2:	4619      	mov	r1, r3
   a2ef4:	4b73      	ldr	r3, [pc, #460]	; (a30c4 <Cl_Dprep_setdata+0x6cc>)
   a2ef6:	4798      	blx	r3
   a2ef8:	4603      	mov	r3, r0
   a2efa:	77fb      	strb	r3, [r7, #31]
					break;
   a2efc:	e11d      	b.n	a313a <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_COND_VALUE_CONFIG://0x19
									Cl_dprepretcode =sv_nvmsetdata(NV_CONDUCTIVITY,&cl_PrepData.bytearray[0],2);
   a2efe:	1d3b      	adds	r3, r7, #4
   a2f00:	200a      	movs	r0, #10
   a2f02:	4619      	mov	r1, r3
   a2f04:	2202      	movs	r2, #2
   a2f06:	4b6e      	ldr	r3, [pc, #440]	; (a30c0 <Cl_Dprep_setdata+0x6c8>)
   a2f08:	4798      	blx	r3
   a2f0a:	4603      	mov	r3, r0
   a2f0c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_COND_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a2f0e:	1d3b      	adds	r3, r7, #4
   a2f10:	3302      	adds	r3, #2
   a2f12:	201e      	movs	r0, #30
   a2f14:	4619      	mov	r1, r3
   a2f16:	2202      	movs	r2, #2
   a2f18:	4b69      	ldr	r3, [pc, #420]	; (a30c0 <Cl_Dprep_setdata+0x6c8>)
   a2f1a:	4798      	blx	r3
   a2f1c:	4603      	mov	r3, r0
   a2f1e:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_COND_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a2f20:	1d3b      	adds	r3, r7, #4
   a2f22:	3304      	adds	r3, #4
   a2f24:	201f      	movs	r0, #31
   a2f26:	4619      	mov	r1, r3
   a2f28:	2202      	movs	r2, #2
   a2f2a:	4b65      	ldr	r3, [pc, #404]	; (a30c0 <Cl_Dprep_setdata+0x6c8>)
   a2f2c:	4798      	blx	r3
   a2f2e:	4603      	mov	r3, r0
   a2f30:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_COND_VALUE_CONFIG;
   a2f32:	2319      	movs	r3, #25
   a2f34:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_CONDUCTIVITY, &dataarray[1]);
   a2f36:	f107 0314 	add.w	r3, r7, #20
   a2f3a:	3301      	adds	r3, #1
   a2f3c:	200a      	movs	r0, #10
   a2f3e:	4619      	mov	r1, r3
   a2f40:	4b60      	ldr	r3, [pc, #384]	; (a30c4 <Cl_Dprep_setdata+0x6cc>)
   a2f42:	4798      	blx	r3
   a2f44:	4603      	mov	r3, r0
   a2f46:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_COND_VALUE_CONFIG_UPPER, &dataarray[3]);
   a2f48:	f107 0314 	add.w	r3, r7, #20
   a2f4c:	3303      	adds	r3, #3
   a2f4e:	201e      	movs	r0, #30
   a2f50:	4619      	mov	r1, r3
   a2f52:	4b5c      	ldr	r3, [pc, #368]	; (a30c4 <Cl_Dprep_setdata+0x6cc>)
   a2f54:	4798      	blx	r3
   a2f56:	4603      	mov	r3, r0
   a2f58:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_COND_VALUE_CONFIG_LOWER, &dataarray[5]);
   a2f5a:	f107 0314 	add.w	r3, r7, #20
   a2f5e:	3305      	adds	r3, #5
   a2f60:	201f      	movs	r0, #31
   a2f62:	4619      	mov	r1, r3
   a2f64:	4b57      	ldr	r3, [pc, #348]	; (a30c4 <Cl_Dprep_setdata+0x6cc>)
   a2f66:	4798      	blx	r3
   a2f68:	4603      	mov	r3, r0
   a2f6a:	77fb      	strb	r3, [r7, #31]
					break;
   a2f6c:	e0e5      	b.n	a313a <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_UF_RATE_CONFIG://0x1A
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_REMOVAL_RATE,&cl_PrepData.bytearray[0],2);
   a2f6e:	1d3b      	adds	r3, r7, #4
   a2f70:	200b      	movs	r0, #11
   a2f72:	4619      	mov	r1, r3
   a2f74:	2202      	movs	r2, #2
   a2f76:	4b52      	ldr	r3, [pc, #328]	; (a30c0 <Cl_Dprep_setdata+0x6c8>)
   a2f78:	4798      	blx	r3
   a2f7a:	4603      	mov	r3, r0
   a2f7c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_RATE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a2f7e:	1d3b      	adds	r3, r7, #4
   a2f80:	3302      	adds	r3, #2
   a2f82:	2020      	movs	r0, #32
   a2f84:	4619      	mov	r1, r3
   a2f86:	2202      	movs	r2, #2
   a2f88:	4b4d      	ldr	r3, [pc, #308]	; (a30c0 <Cl_Dprep_setdata+0x6c8>)
   a2f8a:	4798      	blx	r3
   a2f8c:	4603      	mov	r3, r0
   a2f8e:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_RATE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a2f90:	1d3b      	adds	r3, r7, #4
   a2f92:	3304      	adds	r3, #4
   a2f94:	2021      	movs	r0, #33	; 0x21
   a2f96:	4619      	mov	r1, r3
   a2f98:	2202      	movs	r2, #2
   a2f9a:	4b49      	ldr	r3, [pc, #292]	; (a30c0 <Cl_Dprep_setdata+0x6c8>)
   a2f9c:	4798      	blx	r3
   a2f9e:	4603      	mov	r3, r0
   a2fa0:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_UF_RATE_CONFIG;
   a2fa2:	231a      	movs	r3, #26
   a2fa4:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_REMOVAL_RATE, &dataarray[1]);
   a2fa6:	f107 0314 	add.w	r3, r7, #20
   a2faa:	3301      	adds	r3, #1
   a2fac:	200b      	movs	r0, #11
   a2fae:	4619      	mov	r1, r3
   a2fb0:	4b44      	ldr	r3, [pc, #272]	; (a30c4 <Cl_Dprep_setdata+0x6cc>)
   a2fb2:	4798      	blx	r3
   a2fb4:	4603      	mov	r3, r0
   a2fb6:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_RATE_CONFIG_UPPER, &dataarray[3]);
   a2fb8:	f107 0314 	add.w	r3, r7, #20
   a2fbc:	3303      	adds	r3, #3
   a2fbe:	2020      	movs	r0, #32
   a2fc0:	4619      	mov	r1, r3
   a2fc2:	4b40      	ldr	r3, [pc, #256]	; (a30c4 <Cl_Dprep_setdata+0x6cc>)
   a2fc4:	4798      	blx	r3
   a2fc6:	4603      	mov	r3, r0
   a2fc8:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_RATE_CONFIG_LOWER, &dataarray[5]);
   a2fca:	f107 0314 	add.w	r3, r7, #20
   a2fce:	3305      	adds	r3, #5
   a2fd0:	2021      	movs	r0, #33	; 0x21
   a2fd2:	4619      	mov	r1, r3
   a2fd4:	4b3b      	ldr	r3, [pc, #236]	; (a30c4 <Cl_Dprep_setdata+0x6cc>)
   a2fd6:	4798      	blx	r3
   a2fd8:	4603      	mov	r3, r0
   a2fda:	77fb      	strb	r3, [r7, #31]
					break;
   a2fdc:	e0ad      	b.n	a313a <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_UF_GOAL_CONFIG://0x1B,
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL,&cl_PrepData.bytearray[0],2);
   a2fde:	1d3b      	adds	r3, r7, #4
   a2fe0:	200c      	movs	r0, #12
   a2fe2:	4619      	mov	r1, r3
   a2fe4:	2202      	movs	r2, #2
   a2fe6:	4b36      	ldr	r3, [pc, #216]	; (a30c0 <Cl_Dprep_setdata+0x6c8>)
   a2fe8:	4798      	blx	r3
   a2fea:	4603      	mov	r3, r0
   a2fec:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a2fee:	1d3b      	adds	r3, r7, #4
   a2ff0:	3302      	adds	r3, #2
   a2ff2:	2022      	movs	r0, #34	; 0x22
   a2ff4:	4619      	mov	r1, r3
   a2ff6:	2202      	movs	r2, #2
   a2ff8:	4b31      	ldr	r3, [pc, #196]	; (a30c0 <Cl_Dprep_setdata+0x6c8>)
   a2ffa:	4798      	blx	r3
   a2ffc:	4603      	mov	r3, r0
   a2ffe:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a3000:	1d3b      	adds	r3, r7, #4
   a3002:	3304      	adds	r3, #4
   a3004:	2023      	movs	r0, #35	; 0x23
   a3006:	4619      	mov	r1, r3
   a3008:	2202      	movs	r2, #2
   a300a:	4b2d      	ldr	r3, [pc, #180]	; (a30c0 <Cl_Dprep_setdata+0x6c8>)
   a300c:	4798      	blx	r3
   a300e:	4603      	mov	r3, r0
   a3010:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_UF_GOAL_CONFIG;
   a3012:	231b      	movs	r3, #27
   a3014:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_GOAL, &dataarray[1]);
   a3016:	f107 0314 	add.w	r3, r7, #20
   a301a:	3301      	adds	r3, #1
   a301c:	200c      	movs	r0, #12
   a301e:	4619      	mov	r1, r3
   a3020:	4b28      	ldr	r3, [pc, #160]	; (a30c4 <Cl_Dprep_setdata+0x6cc>)
   a3022:	4798      	blx	r3
   a3024:	4603      	mov	r3, r0
   a3026:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_GOAL_CONFIG_UPPER, &dataarray[3]);
   a3028:	f107 0314 	add.w	r3, r7, #20
   a302c:	3303      	adds	r3, #3
   a302e:	2022      	movs	r0, #34	; 0x22
   a3030:	4619      	mov	r1, r3
   a3032:	4b24      	ldr	r3, [pc, #144]	; (a30c4 <Cl_Dprep_setdata+0x6cc>)
   a3034:	4798      	blx	r3
   a3036:	4603      	mov	r3, r0
   a3038:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_GOAL_CONFIG_LOWER, &dataarray[5]);
   a303a:	f107 0314 	add.w	r3, r7, #20
   a303e:	3305      	adds	r3, #5
   a3040:	2023      	movs	r0, #35	; 0x23
   a3042:	4619      	mov	r1, r3
   a3044:	4b1f      	ldr	r3, [pc, #124]	; (a30c4 <Cl_Dprep_setdata+0x6cc>)
   a3046:	4798      	blx	r3
   a3048:	4603      	mov	r3, r0
   a304a:	77fb      	strb	r3, [r7, #31]
					break;
   a304c:	e075      	b.n	a313a <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_BOLUS_VOLUME_CONFIG://1C
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_BOLUS,&cl_PrepData.bytearray[0],2);
   a304e:	1d3b      	adds	r3, r7, #4
   a3050:	200f      	movs	r0, #15
   a3052:	4619      	mov	r1, r3
   a3054:	2202      	movs	r2, #2
   a3056:	4b1a      	ldr	r3, [pc, #104]	; (a30c0 <Cl_Dprep_setdata+0x6c8>)
   a3058:	4798      	blx	r3
   a305a:	4603      	mov	r3, r0
   a305c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_BOLUS_VOLUME_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a305e:	1d3b      	adds	r3, r7, #4
   a3060:	3302      	adds	r3, #2
   a3062:	2024      	movs	r0, #36	; 0x24
   a3064:	4619      	mov	r1, r3
   a3066:	2202      	movs	r2, #2
   a3068:	4b15      	ldr	r3, [pc, #84]	; (a30c0 <Cl_Dprep_setdata+0x6c8>)
   a306a:	4798      	blx	r3
   a306c:	4603      	mov	r3, r0
   a306e:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_BOLUS_VOLUME_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a3070:	1d3b      	adds	r3, r7, #4
   a3072:	3304      	adds	r3, #4
   a3074:	2025      	movs	r0, #37	; 0x25
   a3076:	4619      	mov	r1, r3
   a3078:	2202      	movs	r2, #2
   a307a:	4b11      	ldr	r3, [pc, #68]	; (a30c0 <Cl_Dprep_setdata+0x6c8>)
   a307c:	4798      	blx	r3
   a307e:	4603      	mov	r3, r0
   a3080:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_BOLUS_VOLUME_CONFIG;
   a3082:	231c      	movs	r3, #28
   a3084:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_BOLUS, &dataarray[1]);
   a3086:	f107 0314 	add.w	r3, r7, #20
   a308a:	3301      	adds	r3, #1
   a308c:	200f      	movs	r0, #15
   a308e:	4619      	mov	r1, r3
   a3090:	4b0c      	ldr	r3, [pc, #48]	; (a30c4 <Cl_Dprep_setdata+0x6cc>)
   a3092:	4798      	blx	r3
   a3094:	4603      	mov	r3, r0
   a3096:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_BOLUS_VOLUME_CONFIG_UPPER, &dataarray[3]);
   a3098:	f107 0314 	add.w	r3, r7, #20
   a309c:	3303      	adds	r3, #3
   a309e:	2024      	movs	r0, #36	; 0x24
   a30a0:	4619      	mov	r1, r3
   a30a2:	4b08      	ldr	r3, [pc, #32]	; (a30c4 <Cl_Dprep_setdata+0x6cc>)
   a30a4:	4798      	blx	r3
   a30a6:	4603      	mov	r3, r0
   a30a8:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_BOLUS_VOLUME_CONFIG_LOWER, &dataarray[5]);
   a30aa:	f107 0314 	add.w	r3, r7, #20
   a30ae:	3305      	adds	r3, #5
   a30b0:	2025      	movs	r0, #37	; 0x25
   a30b2:	4619      	mov	r1, r3
   a30b4:	4b03      	ldr	r3, [pc, #12]	; (a30c4 <Cl_Dprep_setdata+0x6cc>)
   a30b6:	4798      	blx	r3
   a30b8:	4603      	mov	r3, r0
   a30ba:	77fb      	strb	r3, [r7, #31]
					break;
   a30bc:	e03d      	b.n	a313a <Cl_Dprep_setdata+0x742>
   a30be:	bf00      	nop
   a30c0:	0009bd15 	.word	0x0009bd15
   a30c4:	0009bcdd 	.word	0x0009bcdd
					case CON_RX_PARAM_DATA_ABF_RATE_CONFIG://0X1D
									Cl_dprepretcode =sv_nvmsetdata(NV_ARTERIAL_BLOODFLOW_RATE,&cl_PrepData.bytearray[0],2);
   a30c8:	1d3b      	adds	r3, r7, #4
   a30ca:	200d      	movs	r0, #13
   a30cc:	4619      	mov	r1, r3
   a30ce:	2202      	movs	r2, #2
   a30d0:	4b23      	ldr	r3, [pc, #140]	; (a3160 <Cl_Dprep_setdata+0x768>)
   a30d2:	4798      	blx	r3
   a30d4:	4603      	mov	r3, r0
   a30d6:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_ABF_RATE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a30d8:	1d3b      	adds	r3, r7, #4
   a30da:	3302      	adds	r3, #2
   a30dc:	2026      	movs	r0, #38	; 0x26
   a30de:	4619      	mov	r1, r3
   a30e0:	2202      	movs	r2, #2
   a30e2:	4b1f      	ldr	r3, [pc, #124]	; (a3160 <Cl_Dprep_setdata+0x768>)
   a30e4:	4798      	blx	r3
   a30e6:	4603      	mov	r3, r0
   a30e8:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_ABF_RATE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a30ea:	1d3b      	adds	r3, r7, #4
   a30ec:	3304      	adds	r3, #4
   a30ee:	2027      	movs	r0, #39	; 0x27
   a30f0:	4619      	mov	r1, r3
   a30f2:	2202      	movs	r2, #2
   a30f4:	4b1a      	ldr	r3, [pc, #104]	; (a3160 <Cl_Dprep_setdata+0x768>)
   a30f6:	4798      	blx	r3
   a30f8:	4603      	mov	r3, r0
   a30fa:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_ABF_RATE_CONFIG;
   a30fc:	231d      	movs	r3, #29
   a30fe:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_ARTERIAL_BLOODFLOW_RATE, &dataarray[1]);
   a3100:	f107 0314 	add.w	r3, r7, #20
   a3104:	3301      	adds	r3, #1
   a3106:	200d      	movs	r0, #13
   a3108:	4619      	mov	r1, r3
   a310a:	4b16      	ldr	r3, [pc, #88]	; (a3164 <Cl_Dprep_setdata+0x76c>)
   a310c:	4798      	blx	r3
   a310e:	4603      	mov	r3, r0
   a3110:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_ABF_RATE_CONFIG_UPPER, &dataarray[3]);
   a3112:	f107 0314 	add.w	r3, r7, #20
   a3116:	3303      	adds	r3, #3
   a3118:	2026      	movs	r0, #38	; 0x26
   a311a:	4619      	mov	r1, r3
   a311c:	4b11      	ldr	r3, [pc, #68]	; (a3164 <Cl_Dprep_setdata+0x76c>)
   a311e:	4798      	blx	r3
   a3120:	4603      	mov	r3, r0
   a3122:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_ABF_RATE_CONFIG_LOWER, &dataarray[5]);
   a3124:	f107 0314 	add.w	r3, r7, #20
   a3128:	3305      	adds	r3, #5
   a312a:	2027      	movs	r0, #39	; 0x27
   a312c:	4619      	mov	r1, r3
   a312e:	4b0d      	ldr	r3, [pc, #52]	; (a3164 <Cl_Dprep_setdata+0x76c>)
   a3130:	4798      	blx	r3
   a3132:	4603      	mov	r3, r0
   a3134:	77fb      	strb	r3, [r7, #31]
					break;
   a3136:	e000      	b.n	a313a <Cl_Dprep_setdata+0x742>
					
					 default:
					 break;
   a3138:	bf00      	nop
				}
					command = CON_TX_COMMAND_SYSDATA;
   a313a:	2316      	movs	r3, #22
   a313c:	77bb      	strb	r3, [r7, #30]
					Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,size);
   a313e:	7fb9      	ldrb	r1, [r7, #30]
   a3140:	f107 0214 	add.w	r2, r7, #20
   a3144:	7bbb      	ldrb	r3, [r7, #14]
   a3146:	4608      	mov	r0, r1
   a3148:	4611      	mov	r1, r2
   a314a:	461a      	mov	r2, r3
   a314c:	4b06      	ldr	r3, [pc, #24]	; (a3168 <Cl_Dprep_setdata+0x770>)
   a314e:	4798      	blx	r3
   a3150:	4603      	mov	r3, r0
   a3152:	77fb      	strb	r3, [r7, #31]
	return CL_OK;
   a3154:	2300      	movs	r3, #0
}
   a3156:	4618      	mov	r0, r3
   a3158:	3724      	adds	r7, #36	; 0x24
   a315a:	46bd      	mov	sp, r7
   a315c:	bd90      	pop	{r4, r7, pc}
   a315e:	bf00      	nop
   a3160:	0009bd15 	.word	0x0009bd15
   a3164:	0009bcdd 	.word	0x0009bcdd
   a3168:	0009d1e9 	.word	0x0009d1e9

000a316c <conf_activate_pressure_alarms>:

conf_activate_pressure_alarms(int dflow){
   a316c:	b590      	push	{r4, r7, lr}
   a316e:	b085      	sub	sp, #20
   a3170:	af02      	add	r7, sp, #8
   a3172:	6078      	str	r0, [r7, #4]
	
	switch(dflow){
   a3174:	687b      	ldr	r3, [r7, #4]
   a3176:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   a317a:	f000 80a5 	beq.w	a32c8 <conf_activate_pressure_alarms+0x15c>
   a317e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   a3182:	dc04      	bgt.n	a318e <conf_activate_pressure_alarms+0x22>
   a3184:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   a3188:	f000 80e9 	beq.w	a335e <conf_activate_pressure_alarms+0x1f2>
   a318c:	e132      	b.n	a33f4 <conf_activate_pressure_alarms+0x288>
   a318e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
   a3192:	d04e      	beq.n	a3232 <conf_activate_pressure_alarms+0xc6>
   a3194:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   a3198:	f040 812c 	bne.w	a33f4 <conf_activate_pressure_alarms+0x288>
		
		case 800 :
				Cl_AlarmConfigureAlarmType(PS1_HIGH_THRESHOLD,ABOVE,1600,0,0);
   a319c:	2300      	movs	r3, #0
   a319e:	9300      	str	r3, [sp, #0]
   a31a0:	2015      	movs	r0, #21
   a31a2:	2102      	movs	r1, #2
   a31a4:	4a95      	ldr	r2, [pc, #596]	; (a33fc <conf_activate_pressure_alarms+0x290>)
   a31a6:	f04f 0300 	mov.w	r3, #0
   a31aa:	4c95      	ldr	r4, [pc, #596]	; (a3400 <conf_activate_pressure_alarms+0x294>)
   a31ac:	47a0      	blx	r4
				Cl_AlarmConfigureAlarmType(PS2_HIGH_THRESHOLD,ABOVE,1600,0,0);
   a31ae:	2300      	movs	r3, #0
   a31b0:	9300      	str	r3, [sp, #0]
   a31b2:	2017      	movs	r0, #23
   a31b4:	2102      	movs	r1, #2
   a31b6:	4a91      	ldr	r2, [pc, #580]	; (a33fc <conf_activate_pressure_alarms+0x290>)
   a31b8:	f04f 0300 	mov.w	r3, #0
   a31bc:	4c90      	ldr	r4, [pc, #576]	; (a3400 <conf_activate_pressure_alarms+0x294>)
   a31be:	47a0      	blx	r4
				Cl_AlarmConfigureAlarmType(PS3_HIGH_THRESHOLD,ABOVE,3000,0,0);
   a31c0:	2300      	movs	r3, #0
   a31c2:	9300      	str	r3, [sp, #0]
   a31c4:	2027      	movs	r0, #39	; 0x27
   a31c6:	2102      	movs	r1, #2
   a31c8:	4a8e      	ldr	r2, [pc, #568]	; (a3404 <conf_activate_pressure_alarms+0x298>)
   a31ca:	f04f 0300 	mov.w	r3, #0
   a31ce:	4c8c      	ldr	r4, [pc, #560]	; (a3400 <conf_activate_pressure_alarms+0x294>)
   a31d0:	47a0      	blx	r4
				Cl_AlarmConfigureAlarmType(PS1_LOW_THRESHOLD,BELOW,0,500,0);
   a31d2:	2300      	movs	r3, #0
   a31d4:	9300      	str	r3, [sp, #0]
   a31d6:	2016      	movs	r0, #22
   a31d8:	2103      	movs	r1, #3
   a31da:	f04f 0200 	mov.w	r2, #0
   a31de:	4b8a      	ldr	r3, [pc, #552]	; (a3408 <conf_activate_pressure_alarms+0x29c>)
   a31e0:	4c87      	ldr	r4, [pc, #540]	; (a3400 <conf_activate_pressure_alarms+0x294>)
   a31e2:	47a0      	blx	r4
				Cl_AlarmConfigureAlarmType(PS2_LOW_THRESHOLD,BELOW,0,500,0);
   a31e4:	2300      	movs	r3, #0
   a31e6:	9300      	str	r3, [sp, #0]
   a31e8:	2018      	movs	r0, #24
   a31ea:	2103      	movs	r1, #3
   a31ec:	f04f 0200 	mov.w	r2, #0
   a31f0:	4b85      	ldr	r3, [pc, #532]	; (a3408 <conf_activate_pressure_alarms+0x29c>)
   a31f2:	4c83      	ldr	r4, [pc, #524]	; (a3400 <conf_activate_pressure_alarms+0x294>)
   a31f4:	47a0      	blx	r4
				Cl_AlarmConfigureAlarmType(PS3_LOW_THRESHOLD,BELOW,0,500,0);
   a31f6:	2300      	movs	r3, #0
   a31f8:	9300      	str	r3, [sp, #0]
   a31fa:	2028      	movs	r0, #40	; 0x28
   a31fc:	2103      	movs	r1, #3
   a31fe:	f04f 0200 	mov.w	r2, #0
   a3202:	4b81      	ldr	r3, [pc, #516]	; (a3408 <conf_activate_pressure_alarms+0x29c>)
   a3204:	4c7e      	ldr	r4, [pc, #504]	; (a3400 <conf_activate_pressure_alarms+0x294>)
   a3206:	47a0      	blx	r4
				
					
					Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   a3208:	2015      	movs	r0, #21
   a320a:	2101      	movs	r1, #1
   a320c:	4b7f      	ldr	r3, [pc, #508]	; (a340c <conf_activate_pressure_alarms+0x2a0>)
   a320e:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   a3210:	2016      	movs	r0, #22
   a3212:	2101      	movs	r1, #1
   a3214:	4b7d      	ldr	r3, [pc, #500]	; (a340c <conf_activate_pressure_alarms+0x2a0>)
   a3216:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   a3218:	2017      	movs	r0, #23
   a321a:	2101      	movs	r1, #1
   a321c:	4b7b      	ldr	r3, [pc, #492]	; (a340c <conf_activate_pressure_alarms+0x2a0>)
   a321e:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   a3220:	2018      	movs	r0, #24
   a3222:	2101      	movs	r1, #1
   a3224:	4b79      	ldr	r3, [pc, #484]	; (a340c <conf_activate_pressure_alarms+0x2a0>)
   a3226:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,true );	
   a3228:	2027      	movs	r0, #39	; 0x27
   a322a:	2101      	movs	r1, #1
   a322c:	4b77      	ldr	r3, [pc, #476]	; (a340c <conf_activate_pressure_alarms+0x2a0>)
   a322e:	4798      	blx	r3
					
					break;
   a3230:	e0e0      	b.n	a33f4 <conf_activate_pressure_alarms+0x288>
		case 700 :
		Cl_AlarmConfigureAlarmType(PS1_HIGH_THRESHOLD,ABOVE,1600,0,0);
   a3232:	2300      	movs	r3, #0
   a3234:	9300      	str	r3, [sp, #0]
   a3236:	2015      	movs	r0, #21
   a3238:	2102      	movs	r1, #2
   a323a:	4a70      	ldr	r2, [pc, #448]	; (a33fc <conf_activate_pressure_alarms+0x290>)
   a323c:	f04f 0300 	mov.w	r3, #0
   a3240:	4c6f      	ldr	r4, [pc, #444]	; (a3400 <conf_activate_pressure_alarms+0x294>)
   a3242:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS2_HIGH_THRESHOLD,ABOVE,1600,0,0);
   a3244:	2300      	movs	r3, #0
   a3246:	9300      	str	r3, [sp, #0]
   a3248:	2017      	movs	r0, #23
   a324a:	2102      	movs	r1, #2
   a324c:	4a6b      	ldr	r2, [pc, #428]	; (a33fc <conf_activate_pressure_alarms+0x290>)
   a324e:	f04f 0300 	mov.w	r3, #0
   a3252:	4c6b      	ldr	r4, [pc, #428]	; (a3400 <conf_activate_pressure_alarms+0x294>)
   a3254:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS3_HIGH_THRESHOLD,ABOVE,3000,0,0);
   a3256:	2300      	movs	r3, #0
   a3258:	9300      	str	r3, [sp, #0]
   a325a:	2027      	movs	r0, #39	; 0x27
   a325c:	2102      	movs	r1, #2
   a325e:	4a69      	ldr	r2, [pc, #420]	; (a3404 <conf_activate_pressure_alarms+0x298>)
   a3260:	f04f 0300 	mov.w	r3, #0
   a3264:	4c66      	ldr	r4, [pc, #408]	; (a3400 <conf_activate_pressure_alarms+0x294>)
   a3266:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS1_LOW_THRESHOLD,BELOW,0,500,0);
   a3268:	2300      	movs	r3, #0
   a326a:	9300      	str	r3, [sp, #0]
   a326c:	2016      	movs	r0, #22
   a326e:	2103      	movs	r1, #3
   a3270:	f04f 0200 	mov.w	r2, #0
   a3274:	4b64      	ldr	r3, [pc, #400]	; (a3408 <conf_activate_pressure_alarms+0x29c>)
   a3276:	4c62      	ldr	r4, [pc, #392]	; (a3400 <conf_activate_pressure_alarms+0x294>)
   a3278:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS2_LOW_THRESHOLD,BELOW,0,500,0);
   a327a:	2300      	movs	r3, #0
   a327c:	9300      	str	r3, [sp, #0]
   a327e:	2018      	movs	r0, #24
   a3280:	2103      	movs	r1, #3
   a3282:	f04f 0200 	mov.w	r2, #0
   a3286:	4b60      	ldr	r3, [pc, #384]	; (a3408 <conf_activate_pressure_alarms+0x29c>)
   a3288:	4c5d      	ldr	r4, [pc, #372]	; (a3400 <conf_activate_pressure_alarms+0x294>)
   a328a:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS3_LOW_THRESHOLD,BELOW,0,500,0);
   a328c:	2300      	movs	r3, #0
   a328e:	9300      	str	r3, [sp, #0]
   a3290:	2028      	movs	r0, #40	; 0x28
   a3292:	2103      	movs	r1, #3
   a3294:	f04f 0200 	mov.w	r2, #0
   a3298:	4b5b      	ldr	r3, [pc, #364]	; (a3408 <conf_activate_pressure_alarms+0x29c>)
   a329a:	4c59      	ldr	r4, [pc, #356]	; (a3400 <conf_activate_pressure_alarms+0x294>)
   a329c:	47a0      	blx	r4
		
		
		Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   a329e:	2015      	movs	r0, #21
   a32a0:	2101      	movs	r1, #1
   a32a2:	4b5a      	ldr	r3, [pc, #360]	; (a340c <conf_activate_pressure_alarms+0x2a0>)
   a32a4:	4798      	blx	r3
		Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   a32a6:	2016      	movs	r0, #22
   a32a8:	2101      	movs	r1, #1
   a32aa:	4b58      	ldr	r3, [pc, #352]	; (a340c <conf_activate_pressure_alarms+0x2a0>)
   a32ac:	4798      	blx	r3
		Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   a32ae:	2017      	movs	r0, #23
   a32b0:	2101      	movs	r1, #1
   a32b2:	4b56      	ldr	r3, [pc, #344]	; (a340c <conf_activate_pressure_alarms+0x2a0>)
   a32b4:	4798      	blx	r3
		Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   a32b6:	2018      	movs	r0, #24
   a32b8:	2101      	movs	r1, #1
   a32ba:	4b54      	ldr	r3, [pc, #336]	; (a340c <conf_activate_pressure_alarms+0x2a0>)
   a32bc:	4798      	blx	r3
		Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,true );
   a32be:	2027      	movs	r0, #39	; 0x27
   a32c0:	2101      	movs	r1, #1
   a32c2:	4b52      	ldr	r3, [pc, #328]	; (a340c <conf_activate_pressure_alarms+0x2a0>)
   a32c4:	4798      	blx	r3
		
		break;
   a32c6:	e095      	b.n	a33f4 <conf_activate_pressure_alarms+0x288>
		
		case 500 :
					Cl_AlarmConfigureAlarmType(PS1_HIGH_THRESHOLD,ABOVE,1500,0,0); // 1600
   a32c8:	2300      	movs	r3, #0
   a32ca:	9300      	str	r3, [sp, #0]
   a32cc:	2015      	movs	r0, #21
   a32ce:	2102      	movs	r1, #2
   a32d0:	4a4f      	ldr	r2, [pc, #316]	; (a3410 <conf_activate_pressure_alarms+0x2a4>)
   a32d2:	f04f 0300 	mov.w	r3, #0
   a32d6:	4c4a      	ldr	r4, [pc, #296]	; (a3400 <conf_activate_pressure_alarms+0x294>)
   a32d8:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_HIGH_THRESHOLD,ABOVE,1450,0,0); //1600
   a32da:	2300      	movs	r3, #0
   a32dc:	9300      	str	r3, [sp, #0]
   a32de:	2017      	movs	r0, #23
   a32e0:	2102      	movs	r1, #2
   a32e2:	4a4c      	ldr	r2, [pc, #304]	; (a3414 <conf_activate_pressure_alarms+0x2a8>)
   a32e4:	f04f 0300 	mov.w	r3, #0
   a32e8:	4c45      	ldr	r4, [pc, #276]	; (a3400 <conf_activate_pressure_alarms+0x294>)
   a32ea:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_HIGH_THRESHOLD,ABOVE,3000,0,0); 
   a32ec:	2300      	movs	r3, #0
   a32ee:	9300      	str	r3, [sp, #0]
   a32f0:	2027      	movs	r0, #39	; 0x27
   a32f2:	2102      	movs	r1, #2
   a32f4:	4a43      	ldr	r2, [pc, #268]	; (a3404 <conf_activate_pressure_alarms+0x298>)
   a32f6:	f04f 0300 	mov.w	r3, #0
   a32fa:	4c41      	ldr	r4, [pc, #260]	; (a3400 <conf_activate_pressure_alarms+0x294>)
   a32fc:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS1_LOW_THRESHOLD,BELOW,0,600,0); // 500
   a32fe:	2300      	movs	r3, #0
   a3300:	9300      	str	r3, [sp, #0]
   a3302:	2016      	movs	r0, #22
   a3304:	2103      	movs	r1, #3
   a3306:	f04f 0200 	mov.w	r2, #0
   a330a:	4b43      	ldr	r3, [pc, #268]	; (a3418 <conf_activate_pressure_alarms+0x2ac>)
   a330c:	4c3c      	ldr	r4, [pc, #240]	; (a3400 <conf_activate_pressure_alarms+0x294>)
   a330e:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_LOW_THRESHOLD,BELOW,0,500,0); // 500
   a3310:	2300      	movs	r3, #0
   a3312:	9300      	str	r3, [sp, #0]
   a3314:	2018      	movs	r0, #24
   a3316:	2103      	movs	r1, #3
   a3318:	f04f 0200 	mov.w	r2, #0
   a331c:	4b3a      	ldr	r3, [pc, #232]	; (a3408 <conf_activate_pressure_alarms+0x29c>)
   a331e:	4c38      	ldr	r4, [pc, #224]	; (a3400 <conf_activate_pressure_alarms+0x294>)
   a3320:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_LOW_THRESHOLD,BELOW,0,500,0); // 500
   a3322:	2300      	movs	r3, #0
   a3324:	9300      	str	r3, [sp, #0]
   a3326:	2028      	movs	r0, #40	; 0x28
   a3328:	2103      	movs	r1, #3
   a332a:	f04f 0200 	mov.w	r2, #0
   a332e:	4b36      	ldr	r3, [pc, #216]	; (a3408 <conf_activate_pressure_alarms+0x29c>)
   a3330:	4c33      	ldr	r4, [pc, #204]	; (a3400 <conf_activate_pressure_alarms+0x294>)
   a3332:	47a0      	blx	r4
					
					
					Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   a3334:	2015      	movs	r0, #21
   a3336:	2101      	movs	r1, #1
   a3338:	4b34      	ldr	r3, [pc, #208]	; (a340c <conf_activate_pressure_alarms+0x2a0>)
   a333a:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   a333c:	2016      	movs	r0, #22
   a333e:	2101      	movs	r1, #1
   a3340:	4b32      	ldr	r3, [pc, #200]	; (a340c <conf_activate_pressure_alarms+0x2a0>)
   a3342:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   a3344:	2017      	movs	r0, #23
   a3346:	2101      	movs	r1, #1
   a3348:	4b30      	ldr	r3, [pc, #192]	; (a340c <conf_activate_pressure_alarms+0x2a0>)
   a334a:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   a334c:	2018      	movs	r0, #24
   a334e:	2101      	movs	r1, #1
   a3350:	4b2e      	ldr	r3, [pc, #184]	; (a340c <conf_activate_pressure_alarms+0x2a0>)
   a3352:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,true );
   a3354:	2027      	movs	r0, #39	; 0x27
   a3356:	2101      	movs	r1, #1
   a3358:	4b2c      	ldr	r3, [pc, #176]	; (a340c <conf_activate_pressure_alarms+0x2a0>)
   a335a:	4798      	blx	r3
					break;
   a335c:	e04a      	b.n	a33f4 <conf_activate_pressure_alarms+0x288>
		case 300 :
					Cl_AlarmConfigureAlarmType(PS1_HIGH_THRESHOLD,ABOVE,1500,0,0);
   a335e:	2300      	movs	r3, #0
   a3360:	9300      	str	r3, [sp, #0]
   a3362:	2015      	movs	r0, #21
   a3364:	2102      	movs	r1, #2
   a3366:	4a2a      	ldr	r2, [pc, #168]	; (a3410 <conf_activate_pressure_alarms+0x2a4>)
   a3368:	f04f 0300 	mov.w	r3, #0
   a336c:	4c24      	ldr	r4, [pc, #144]	; (a3400 <conf_activate_pressure_alarms+0x294>)
   a336e:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_HIGH_THRESHOLD,ABOVE,1450,0,0);
   a3370:	2300      	movs	r3, #0
   a3372:	9300      	str	r3, [sp, #0]
   a3374:	2017      	movs	r0, #23
   a3376:	2102      	movs	r1, #2
   a3378:	4a26      	ldr	r2, [pc, #152]	; (a3414 <conf_activate_pressure_alarms+0x2a8>)
   a337a:	f04f 0300 	mov.w	r3, #0
   a337e:	4c20      	ldr	r4, [pc, #128]	; (a3400 <conf_activate_pressure_alarms+0x294>)
   a3380:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_HIGH_THRESHOLD,ABOVE,3000,0,0);
   a3382:	2300      	movs	r3, #0
   a3384:	9300      	str	r3, [sp, #0]
   a3386:	2027      	movs	r0, #39	; 0x27
   a3388:	2102      	movs	r1, #2
   a338a:	4a1e      	ldr	r2, [pc, #120]	; (a3404 <conf_activate_pressure_alarms+0x298>)
   a338c:	f04f 0300 	mov.w	r3, #0
   a3390:	4c1b      	ldr	r4, [pc, #108]	; (a3400 <conf_activate_pressure_alarms+0x294>)
   a3392:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS1_LOW_THRESHOLD,BELOW,0,600,0);
   a3394:	2300      	movs	r3, #0
   a3396:	9300      	str	r3, [sp, #0]
   a3398:	2016      	movs	r0, #22
   a339a:	2103      	movs	r1, #3
   a339c:	f04f 0200 	mov.w	r2, #0
   a33a0:	4b1d      	ldr	r3, [pc, #116]	; (a3418 <conf_activate_pressure_alarms+0x2ac>)
   a33a2:	4c17      	ldr	r4, [pc, #92]	; (a3400 <conf_activate_pressure_alarms+0x294>)
   a33a4:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_LOW_THRESHOLD,BELOW,0,500,0);
   a33a6:	2300      	movs	r3, #0
   a33a8:	9300      	str	r3, [sp, #0]
   a33aa:	2018      	movs	r0, #24
   a33ac:	2103      	movs	r1, #3
   a33ae:	f04f 0200 	mov.w	r2, #0
   a33b2:	4b15      	ldr	r3, [pc, #84]	; (a3408 <conf_activate_pressure_alarms+0x29c>)
   a33b4:	4c12      	ldr	r4, [pc, #72]	; (a3400 <conf_activate_pressure_alarms+0x294>)
   a33b6:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_LOW_THRESHOLD,BELOW,0,500,0);
   a33b8:	2300      	movs	r3, #0
   a33ba:	9300      	str	r3, [sp, #0]
   a33bc:	2028      	movs	r0, #40	; 0x28
   a33be:	2103      	movs	r1, #3
   a33c0:	f04f 0200 	mov.w	r2, #0
   a33c4:	4b10      	ldr	r3, [pc, #64]	; (a3408 <conf_activate_pressure_alarms+0x29c>)
   a33c6:	4c0e      	ldr	r4, [pc, #56]	; (a3400 <conf_activate_pressure_alarms+0x294>)
   a33c8:	47a0      	blx	r4
					
					Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   a33ca:	2015      	movs	r0, #21
   a33cc:	2101      	movs	r1, #1
   a33ce:	4b0f      	ldr	r3, [pc, #60]	; (a340c <conf_activate_pressure_alarms+0x2a0>)
   a33d0:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   a33d2:	2016      	movs	r0, #22
   a33d4:	2101      	movs	r1, #1
   a33d6:	4b0d      	ldr	r3, [pc, #52]	; (a340c <conf_activate_pressure_alarms+0x2a0>)
   a33d8:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   a33da:	2017      	movs	r0, #23
   a33dc:	2101      	movs	r1, #1
   a33de:	4b0b      	ldr	r3, [pc, #44]	; (a340c <conf_activate_pressure_alarms+0x2a0>)
   a33e0:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   a33e2:	2018      	movs	r0, #24
   a33e4:	2101      	movs	r1, #1
   a33e6:	4b09      	ldr	r3, [pc, #36]	; (a340c <conf_activate_pressure_alarms+0x2a0>)
   a33e8:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,true );
   a33ea:	2027      	movs	r0, #39	; 0x27
   a33ec:	2101      	movs	r1, #1
   a33ee:	4b07      	ldr	r3, [pc, #28]	; (a340c <conf_activate_pressure_alarms+0x2a0>)
   a33f0:	4798      	blx	r3
					break;
   a33f2:	bf00      	nop
		
		
		
	}
	
}
   a33f4:	4618      	mov	r0, r3
   a33f6:	370c      	adds	r7, #12
   a33f8:	46bd      	mov	sp, r7
   a33fa:	bd90      	pop	{r4, r7, pc}
   a33fc:	44c80000 	.word	0x44c80000
   a3400:	000829dd 	.word	0x000829dd
   a3404:	453b8000 	.word	0x453b8000
   a3408:	43fa0000 	.word	0x43fa0000
   a340c:	00082a35 	.word	0x00082a35
   a3410:	44bb8000 	.word	0x44bb8000
   a3414:	44b54000 	.word	0x44b54000
   a3418:	44160000 	.word	0x44160000

000a341c <Cl_Dprep_StartPreparation>:



Cl_ReturnCodeType	Cl_Dprep_StartPreparation(void)
	{
   a341c:	b590      	push	{r4, r7, lr}
   a341e:	b089      	sub	sp, #36	; 0x24
   a3420:	af02      	add	r7, sp, #8
		
			Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   a3422:	2300      	movs	r3, #0
   a3424:	75bb      	strb	r3, [r7, #22]
			Cl_Uint8Type data =0;
   a3426:	2300      	movs	r3, #0
   a3428:	737b      	strb	r3, [r7, #13]
			Cl_Uint16Type cl_dprep_acidstatus = 0, cl_dprep_bicarbstatus =0 , cl_dprep_holder1status = 0 , cl_dprep_holder2status = 0;
   a342a:	2300      	movs	r3, #0
   a342c:	817b      	strh	r3, [r7, #10]
   a342e:	2300      	movs	r3, #0
   a3430:	813b      	strh	r3, [r7, #8]
   a3432:	2300      	movs	r3, #0
   a3434:	80fb      	strh	r3, [r7, #6]
   a3436:	2300      	movs	r3, #0
   a3438:	80bb      	strh	r3, [r7, #4]
			Cl_BoolType Cl_dprepreaduinessflag = true;
   a343a:	2301      	movs	r3, #1
   a343c:	75fb      	strb	r3, [r7, #23]
					
				//Check for  dprep readiness and alarm status
				
				//Cl_checkdprepReadyness();
 				Cl_SysStat_GetSensor_Status_Query(SENSOR_ACID_INLET,&cl_dprep_acidstatus);
   a343e:	f107 030a 	add.w	r3, r7, #10
   a3442:	2020      	movs	r0, #32
   a3444:	4619      	mov	r1, r3
   a3446:	4b1d      	ldr	r3, [pc, #116]	; (a34bc <Cl_Dprep_StartPreparation+0xa0>)
   a3448:	4798      	blx	r3
 				Cl_SysStat_GetSensor_Status_Query(SENSOR_BICARB_INLET,&cl_dprep_bicarbstatus);
   a344a:	f107 0308 	add.w	r3, r7, #8
   a344e:	2021      	movs	r0, #33	; 0x21
   a3450:	4619      	mov	r1, r3
   a3452:	4b1a      	ldr	r3, [pc, #104]	; (a34bc <Cl_Dprep_StartPreparation+0xa0>)
   a3454:	4798      	blx	r3
 				Cl_SysStat_GetSensor_Status_Query(SENSOR_HOLDER1STATUS,&cl_dprep_holder1status);
   a3456:	1dbb      	adds	r3, r7, #6
   a3458:	2003      	movs	r0, #3
   a345a:	4619      	mov	r1, r3
   a345c:	4b17      	ldr	r3, [pc, #92]	; (a34bc <Cl_Dprep_StartPreparation+0xa0>)
   a345e:	4798      	blx	r3
 				Cl_SysStat_GetSensor_Status_Query(SENSOR_HOLDER2STATUS,&cl_dprep_holder2status);
   a3460:	1d3b      	adds	r3, r7, #4
   a3462:	2004      	movs	r0, #4
   a3464:	4619      	mov	r1, r3
   a3466:	4b15      	ldr	r3, [pc, #84]	; (a34bc <Cl_Dprep_StartPreparation+0xa0>)
   a3468:	4798      	blx	r3
 				 if(cl_dprep_acidstatus == ACID_INLET_CLOSED )   // manav03 commented to test
   a346a:	897b      	ldrh	r3, [r7, #10]
   a346c:	2b01      	cmp	r3, #1
   a346e:	d104      	bne.n	a347a <Cl_Dprep_StartPreparation+0x5e>
 				 {
 					 Cl_dprepSendAlarm(ACID_IN_CLOSED);
   a3470:	202a      	movs	r0, #42	; 0x2a
   a3472:	4b13      	ldr	r3, [pc, #76]	; (a34c0 <Cl_Dprep_StartPreparation+0xa4>)
   a3474:	4798      	blx	r3
 					 Cl_dprepreaduinessflag = false;
   a3476:	2300      	movs	r3, #0
   a3478:	75fb      	strb	r3, [r7, #23]
 				 } 
 				 if(cl_dprep_bicarbstatus == BICARB_INLET_CLOSED )
   a347a:	893b      	ldrh	r3, [r7, #8]
   a347c:	2b01      	cmp	r3, #1
   a347e:	d104      	bne.n	a348a <Cl_Dprep_StartPreparation+0x6e>
 				 {
 					  Cl_dprepSendAlarm(BICARB_IN_CLOSED);
   a3480:	202c      	movs	r0, #44	; 0x2c
   a3482:	4b0f      	ldr	r3, [pc, #60]	; (a34c0 <Cl_Dprep_StartPreparation+0xa4>)
   a3484:	4798      	blx	r3
 					 Cl_dprepreaduinessflag = false;
   a3486:	2300      	movs	r3, #0
   a3488:	75fb      	strb	r3, [r7, #23]
 				 }	
			//	 #if 0
				 if(cl_dprep_holder1status == CL_HOLDER1OPEN )
   a348a:	88fb      	ldrh	r3, [r7, #6]
   a348c:	2b01      	cmp	r3, #1
   a348e:	d104      	bne.n	a349a <Cl_Dprep_StartPreparation+0x7e>
				 {
					 Cl_dprepSendAlarm(HOLDER1STATUS_OPEN);
   a3490:	2003      	movs	r0, #3
   a3492:	4b0b      	ldr	r3, [pc, #44]	; (a34c0 <Cl_Dprep_StartPreparation+0xa4>)
   a3494:	4798      	blx	r3
					 Cl_dprepreaduinessflag = false;
   a3496:	2300      	movs	r3, #0
   a3498:	75fb      	strb	r3, [r7, #23]
				 }
				 if(cl_dprep_holder2status == CL_HOLDER1OPEN )
   a349a:	88bb      	ldrh	r3, [r7, #4]
   a349c:	2b01      	cmp	r3, #1
   a349e:	d104      	bne.n	a34aa <Cl_Dprep_StartPreparation+0x8e>
				 {
					 Cl_dprepSendAlarm(HOLDER2STATUS_OPEN);
   a34a0:	2004      	movs	r0, #4
   a34a2:	4b07      	ldr	r3, [pc, #28]	; (a34c0 <Cl_Dprep_StartPreparation+0xa4>)
   a34a4:	4798      	blx	r3
					 Cl_dprepreaduinessflag = false;
   a34a6:	2300      	movs	r3, #0
   a34a8:	75fb      	strb	r3, [r7, #23]
				 }		
			//	 #endif		 
				 if(Cl_dprepreaduinessflag == false)
   a34aa:	7dfb      	ldrb	r3, [r7, #23]
   a34ac:	f083 0301 	eor.w	r3, r3, #1
   a34b0:	b2db      	uxtb	r3, r3
   a34b2:	2b00      	cmp	r3, #0
   a34b4:	d006      	beq.n	a34c4 <Cl_Dprep_StartPreparation+0xa8>
				 {
					 return CL_REJECTED;
   a34b6:	2303      	movs	r3, #3
   a34b8:	e1df      	b.n	a387a <Cl_Dprep_StartPreparation+0x45e>
   a34ba:	bf00      	nop
   a34bc:	0008fd69 	.word	0x0008fd69
   a34c0:	000a1fc1 	.word	0x000a1fc1
				 }
				 	
							sv_cntrl_resetgreenalarm();					
   a34c4:	4bb1      	ldr	r3, [pc, #708]	; (a378c <Cl_Dprep_StartPreparation+0x370>)
   a34c6:	4798      	blx	r3
							Cl_dprepretcode = Cl_DprepSelectDialysateInlet();
   a34c8:	4bb1      	ldr	r3, [pc, #708]	; (a3790 <Cl_Dprep_StartPreparation+0x374>)
   a34ca:	4798      	blx	r3
   a34cc:	4603      	mov	r3, r0
   a34ce:	75bb      	strb	r3, [r7, #22]
							//Cl_DprepFlowOn();
							Cl_Dprep_ResetAlertsforReassertion();
   a34d0:	4bb0      	ldr	r3, [pc, #704]	; (a3794 <Cl_Dprep_StartPreparation+0x378>)
   a34d2:	4798      	blx	r3
							data = 1;
   a34d4:	2301      	movs	r3, #1
   a34d6:	737b      	strb	r3, [r7, #13]
							Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_PREP_CNFRM,&data,0);	
   a34d8:	f107 030d 	add.w	r3, r7, #13
   a34dc:	200c      	movs	r0, #12
   a34de:	4619      	mov	r1, r3
   a34e0:	2200      	movs	r2, #0
   a34e2:	4bad      	ldr	r3, [pc, #692]	; (a3798 <Cl_Dprep_StartPreparation+0x37c>)
   a34e4:	4798      	blx	r3
   a34e6:	4603      	mov	r3, r0
   a34e8:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STARTED,&data,0);																			
   a34ea:	f107 030d 	add.w	r3, r7, #13
   a34ee:	201e      	movs	r0, #30
   a34f0:	4619      	mov	r1, r3
   a34f2:	2200      	movs	r2, #0
   a34f4:	4ba8      	ldr	r3, [pc, #672]	; (a3798 <Cl_Dprep_StartPreparation+0x37c>)
   a34f6:	4798      	blx	r3
   a34f8:	4603      	mov	r3, r0
   a34fa:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode = cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   a34fc:	2001      	movs	r0, #1
   a34fe:	4ba7      	ldr	r3, [pc, #668]	; (a379c <Cl_Dprep_StartPreparation+0x380>)
   a3500:	4798      	blx	r3
   a3502:	4603      	mov	r3, r0
   a3504:	75bb      	strb	r3, [r7, #22]
				
				
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_CLOSED,LOGIC_HIGH,0,0,0);
   a3506:	2300      	movs	r3, #0
   a3508:	9300      	str	r3, [sp, #0]
   a350a:	202a      	movs	r0, #42	; 0x2a
   a350c:	2101      	movs	r1, #1
   a350e:	f04f 0200 	mov.w	r2, #0
   a3512:	f04f 0300 	mov.w	r3, #0
   a3516:	4ca2      	ldr	r4, [pc, #648]	; (a37a0 <Cl_Dprep_StartPreparation+0x384>)
   a3518:	47a0      	blx	r4
   a351a:	4603      	mov	r3, r0
   a351c:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_CLOSED,LOGIC_HIGH,0,0,0);
   a351e:	2300      	movs	r3, #0
   a3520:	9300      	str	r3, [sp, #0]
   a3522:	202c      	movs	r0, #44	; 0x2c
   a3524:	2101      	movs	r1, #1
   a3526:	f04f 0200 	mov.w	r2, #0
   a352a:	f04f 0300 	mov.w	r3, #0
   a352e:	4c9c      	ldr	r4, [pc, #624]	; (a37a0 <Cl_Dprep_StartPreparation+0x384>)
   a3530:	47a0      	blx	r4
   a3532:	4603      	mov	r3, r0
   a3534:	75bb      	strb	r3, [r7, #22]
							//Cl_dprepretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_OPEN,LOGIC_HIGH,0,0,0);
   a3536:	2300      	movs	r3, #0
   a3538:	9300      	str	r3, [sp, #0]
   a353a:	2004      	movs	r0, #4
   a353c:	2101      	movs	r1, #1
   a353e:	f04f 0200 	mov.w	r2, #0
   a3542:	f04f 0300 	mov.w	r3, #0
   a3546:	4c96      	ldr	r4, [pc, #600]	; (a37a0 <Cl_Dprep_StartPreparation+0x384>)
   a3548:	47a0      	blx	r4
   a354a:	4603      	mov	r3, r0
   a354c:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_OPEN,LOGIC_HIGH,0,0,0);
   a354e:	2300      	movs	r3, #0
   a3550:	9300      	str	r3, [sp, #0]
   a3552:	2003      	movs	r0, #3
   a3554:	2101      	movs	r1, #1
   a3556:	f04f 0200 	mov.w	r2, #0
   a355a:	f04f 0300 	mov.w	r3, #0
   a355e:	4c90      	ldr	r4, [pc, #576]	; (a37a0 <Cl_Dprep_StartPreparation+0x384>)
   a3560:	47a0      	blx	r4
   a3562:	4603      	mov	r3, r0
   a3564:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_HIGH,ABOVE,140,0,0);
   a3566:	2300      	movs	r3, #0
   a3568:	9300      	str	r3, [sp, #0]
   a356a:	2008      	movs	r0, #8
   a356c:	2102      	movs	r1, #2
   a356e:	4a8d      	ldr	r2, [pc, #564]	; (a37a4 <Cl_Dprep_StartPreparation+0x388>)
   a3570:	f04f 0300 	mov.w	r3, #0
   a3574:	4c8a      	ldr	r4, [pc, #552]	; (a37a0 <Cl_Dprep_StartPreparation+0x384>)
   a3576:	47a0      	blx	r4
   a3578:	4603      	mov	r3, r0
   a357a:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_LOW,BELOW,0,0,0);
   a357c:	2300      	movs	r3, #0
   a357e:	9300      	str	r3, [sp, #0]
   a3580:	2007      	movs	r0, #7
   a3582:	2103      	movs	r1, #3
   a3584:	f04f 0200 	mov.w	r2, #0
   a3588:	f04f 0300 	mov.w	r3, #0
   a358c:	4c84      	ldr	r4, [pc, #528]	; (a37a0 <Cl_Dprep_StartPreparation+0x384>)
   a358e:	47a0      	blx	r4
   a3590:	4603      	mov	r3, r0
   a3592:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP1_HIGH_THRESHOLD,ABOVE,400,0,0);
   a3594:	2300      	movs	r3, #0
   a3596:	9300      	str	r3, [sp, #0]
   a3598:	200f      	movs	r0, #15
   a359a:	2102      	movs	r1, #2
   a359c:	4a82      	ldr	r2, [pc, #520]	; (a37a8 <Cl_Dprep_StartPreparation+0x38c>)
   a359e:	f04f 0300 	mov.w	r3, #0
   a35a2:	4c7f      	ldr	r4, [pc, #508]	; (a37a0 <Cl_Dprep_StartPreparation+0x384>)
   a35a4:	47a0      	blx	r4
   a35a6:	4603      	mov	r3, r0
   a35a8:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP2_HIGH_THRESHOLD,ABOVE,450,0,0);
   a35aa:	2300      	movs	r3, #0
   a35ac:	9300      	str	r3, [sp, #0]
   a35ae:	2011      	movs	r0, #17
   a35b0:	2102      	movs	r1, #2
   a35b2:	4a7e      	ldr	r2, [pc, #504]	; (a37ac <Cl_Dprep_StartPreparation+0x390>)
   a35b4:	f04f 0300 	mov.w	r3, #0
   a35b8:	4c79      	ldr	r4, [pc, #484]	; (a37a0 <Cl_Dprep_StartPreparation+0x384>)
   a35ba:	47a0      	blx	r4
   a35bc:	4603      	mov	r3, r0
   a35be:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP3_HIGH_THRESHOLD,ABOVE,400,0,0);
   a35c0:	2300      	movs	r3, #0
   a35c2:	9300      	str	r3, [sp, #0]
   a35c4:	2013      	movs	r0, #19
   a35c6:	2102      	movs	r1, #2
   a35c8:	4a77      	ldr	r2, [pc, #476]	; (a37a8 <Cl_Dprep_StartPreparation+0x38c>)
   a35ca:	f04f 0300 	mov.w	r3, #0
   a35ce:	4c74      	ldr	r4, [pc, #464]	; (a37a0 <Cl_Dprep_StartPreparation+0x384>)
   a35d0:	47a0      	blx	r4
   a35d2:	4603      	mov	r3, r0
   a35d4:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP1_LOW_THRESHOLD,BELOW,0,200,0);
   a35d6:	2300      	movs	r3, #0
   a35d8:	9300      	str	r3, [sp, #0]
   a35da:	2010      	movs	r0, #16
   a35dc:	2103      	movs	r1, #3
   a35de:	f04f 0200 	mov.w	r2, #0
   a35e2:	4b73      	ldr	r3, [pc, #460]	; (a37b0 <Cl_Dprep_StartPreparation+0x394>)
   a35e4:	4c6e      	ldr	r4, [pc, #440]	; (a37a0 <Cl_Dprep_StartPreparation+0x384>)
   a35e6:	47a0      	blx	r4
   a35e8:	4603      	mov	r3, r0
   a35ea:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP2_LOW_THRESHOLD,BELOW,0,200,0);
   a35ec:	2300      	movs	r3, #0
   a35ee:	9300      	str	r3, [sp, #0]
   a35f0:	2012      	movs	r0, #18
   a35f2:	2103      	movs	r1, #3
   a35f4:	f04f 0200 	mov.w	r2, #0
   a35f8:	4b6d      	ldr	r3, [pc, #436]	; (a37b0 <Cl_Dprep_StartPreparation+0x394>)
   a35fa:	4c69      	ldr	r4, [pc, #420]	; (a37a0 <Cl_Dprep_StartPreparation+0x384>)
   a35fc:	47a0      	blx	r4
   a35fe:	4603      	mov	r3, r0
   a3600:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP3_LOW_THRESHOLD,BELOW,0,0,0);
   a3602:	2300      	movs	r3, #0
   a3604:	9300      	str	r3, [sp, #0]
   a3606:	2014      	movs	r0, #20
   a3608:	2103      	movs	r1, #3
   a360a:	f04f 0200 	mov.w	r2, #0
   a360e:	f04f 0300 	mov.w	r3, #0
   a3612:	4c63      	ldr	r4, [pc, #396]	; (a37a0 <Cl_Dprep_StartPreparation+0x384>)
   a3614:	47a0      	blx	r4
   a3616:	4603      	mov	r3, r0
   a3618:	75bb      	strb	r3, [r7, #22]
						
							
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(FLOW_LOW_FLOWRATE,0,0,0,0);
   a361a:	2300      	movs	r3, #0
   a361c:	9300      	str	r3, [sp, #0]
   a361e:	200d      	movs	r0, #13
   a3620:	2100      	movs	r1, #0
   a3622:	f04f 0200 	mov.w	r2, #0
   a3626:	f04f 0300 	mov.w	r3, #0
   a362a:	4c5d      	ldr	r4, [pc, #372]	; (a37a0 <Cl_Dprep_StartPreparation+0x384>)
   a362c:	47a0      	blx	r4
   a362e:	4603      	mov	r3, r0
   a3630:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(FLOW_NO_FLOW,0,0,0,0);
   a3632:	2300      	movs	r3, #0
   a3634:	9300      	str	r3, [sp, #0]
   a3636:	200c      	movs	r0, #12
   a3638:	2100      	movs	r1, #0
   a363a:	f04f 0200 	mov.w	r2, #0
   a363e:	f04f 0300 	mov.w	r3, #0
   a3642:	4c57      	ldr	r4, [pc, #348]	; (a37a0 <Cl_Dprep_StartPreparation+0x384>)
   a3644:	47a0      	blx	r4
   a3646:	4603      	mov	r3, r0
   a3648:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(FLOW_HIGH_FLOWRATE,0,1500,0,0);
   a364a:	2300      	movs	r3, #0
   a364c:	9300      	str	r3, [sp, #0]
   a364e:	200e      	movs	r0, #14
   a3650:	2100      	movs	r1, #0
   a3652:	4a58      	ldr	r2, [pc, #352]	; (a37b4 <Cl_Dprep_StartPreparation+0x398>)
   a3654:	f04f 0300 	mov.w	r3, #0
   a3658:	4c51      	ldr	r4, [pc, #324]	; (a37a0 <Cl_Dprep_StartPreparation+0x384>)
   a365a:	47a0      	blx	r4
   a365c:	4603      	mov	r3, r0
   a365e:	75bb      	strb	r3, [r7, #22]
							
						//	Cl_dprepretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
						//	Cl_dprepretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,true );
							//Cl_dprepretcode =  sv_cntrl_activatevenousclamp(); // manav : ???
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_CLOSED,true );  // manav03 disabled for testing
   a3660:	202a      	movs	r0, #42	; 0x2a
   a3662:	2101      	movs	r1, #1
   a3664:	4b54      	ldr	r3, [pc, #336]	; (a37b8 <Cl_Dprep_StartPreparation+0x39c>)
   a3666:	4798      	blx	r3
   a3668:	4603      	mov	r3, r0
   a366a:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_CLOSED,true );
   a366c:	202c      	movs	r0, #44	; 0x2c
   a366e:	2101      	movs	r1, #1
   a3670:	4b51      	ldr	r3, [pc, #324]	; (a37b8 <Cl_Dprep_StartPreparation+0x39c>)
   a3672:	4798      	blx	r3
   a3674:	4603      	mov	r3, r0
   a3676:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );    // manav03 alarm disabled for testing
   a3678:	2003      	movs	r0, #3
   a367a:	2101      	movs	r1, #1
   a367c:	4b4e      	ldr	r3, [pc, #312]	; (a37b8 <Cl_Dprep_StartPreparation+0x39c>)
   a367e:	4798      	blx	r3
   a3680:	4603      	mov	r3, r0
   a3682:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );    // manav03 alarm disabled for testing
   a3684:	2004      	movs	r0, #4
   a3686:	2101      	movs	r1, #1
   a3688:	4b4b      	ldr	r3, [pc, #300]	; (a37b8 <Cl_Dprep_StartPreparation+0x39c>)
   a368a:	4798      	blx	r3
   a368c:	4603      	mov	r3, r0
   a368e:	75bb      	strb	r3, [r7, #22]
							
							//Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );					
   a3690:	200c      	movs	r0, #12
   a3692:	2101      	movs	r1, #1
   a3694:	4b48      	ldr	r3, [pc, #288]	; (a37b8 <Cl_Dprep_StartPreparation+0x39c>)
   a3696:	4798      	blx	r3
   a3698:	4603      	mov	r3, r0
   a369a:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   a369c:	200d      	movs	r0, #13
   a369e:	2101      	movs	r1, #1
   a36a0:	4b45      	ldr	r3, [pc, #276]	; (a37b8 <Cl_Dprep_StartPreparation+0x39c>)
   a36a2:	4798      	blx	r3
   a36a4:	4603      	mov	r3, r0
   a36a6:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
   a36a8:	200e      	movs	r0, #14
   a36aa:	2101      	movs	r1, #1
   a36ac:	4b42      	ldr	r3, [pc, #264]	; (a37b8 <Cl_Dprep_StartPreparation+0x39c>)
   a36ae:	4798      	blx	r3
   a36b0:	4603      	mov	r3, r0
   a36b2:	75bb      	strb	r3, [r7, #22]
							
						//	Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true );
						//	Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
							
 							Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,true );
   a36b4:	200f      	movs	r0, #15
   a36b6:	2101      	movs	r1, #1
   a36b8:	4b3f      	ldr	r3, [pc, #252]	; (a37b8 <Cl_Dprep_StartPreparation+0x39c>)
   a36ba:	4798      	blx	r3
   a36bc:	4603      	mov	r3, r0
   a36be:	75bb      	strb	r3, [r7, #22]
							 Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,true );
   a36c0:	2010      	movs	r0, #16
   a36c2:	2101      	movs	r1, #1
   a36c4:	4b3c      	ldr	r3, [pc, #240]	; (a37b8 <Cl_Dprep_StartPreparation+0x39c>)
   a36c6:	4798      	blx	r3
   a36c8:	4603      	mov	r3, r0
   a36ca:	75bb      	strb	r3, [r7, #22]
 							Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,true );
   a36cc:	2011      	movs	r0, #17
   a36ce:	2101      	movs	r1, #1
   a36d0:	4b39      	ldr	r3, [pc, #228]	; (a37b8 <Cl_Dprep_StartPreparation+0x39c>)
   a36d2:	4798      	blx	r3
   a36d4:	4603      	mov	r3, r0
   a36d6:	75bb      	strb	r3, [r7, #22]
							 Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,true );
   a36d8:	2012      	movs	r0, #18
   a36da:	2101      	movs	r1, #1
   a36dc:	4b36      	ldr	r3, [pc, #216]	; (a37b8 <Cl_Dprep_StartPreparation+0x39c>)
   a36de:	4798      	blx	r3
   a36e0:	4603      	mov	r3, r0
   a36e2:	75bb      	strb	r3, [r7, #22]
// 							Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
 							Cl_dprepretcode =  Cl_AlarmActivateAlarms(BP_STOPPED,false );
   a36e4:	203f      	movs	r0, #63	; 0x3f
   a36e6:	2100      	movs	r1, #0
   a36e8:	4b33      	ldr	r3, [pc, #204]	; (a37b8 <Cl_Dprep_StartPreparation+0x39c>)
   a36ea:	4798      	blx	r3
   a36ec:	4603      	mov	r3, r0
   a36ee:	75bb      	strb	r3, [r7, #22]
							 Cl_AlarmActivateAlarms(BC_ALARM,true);
   a36f0:	201a      	movs	r0, #26
   a36f2:	2101      	movs	r1, #1
   a36f4:	4b30      	ldr	r3, [pc, #192]	; (a37b8 <Cl_Dprep_StartPreparation+0x39c>)
   a36f6:	4798      	blx	r3

						
							if(Current_sense_trigger)
   a36f8:	4b30      	ldr	r3, [pc, #192]	; (a37bc <Cl_Dprep_StartPreparation+0x3a0>)
   a36fa:	781b      	ldrb	r3, [r3, #0]
   a36fc:	2b00      	cmp	r3, #0
   a36fe:	d005      	beq.n	a370c <Cl_Dprep_StartPreparation+0x2f0>
							{
									Cl_dprepretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   a3700:	203c      	movs	r0, #60	; 0x3c
   a3702:	2101      	movs	r1, #1
   a3704:	4b2c      	ldr	r3, [pc, #176]	; (a37b8 <Cl_Dprep_StartPreparation+0x39c>)
   a3706:	4798      	blx	r3
   a3708:	4603      	mov	r3, r0
   a370a:	75bb      	strb	r3, [r7, #22]
							else
							{
								//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
							}
							
							Set_RC =0;
   a370c:	4b2c      	ldr	r3, [pc, #176]	; (a37c0 <Cl_Dprep_StartPreparation+0x3a4>)
   a370e:	2200      	movs	r2, #0
   a3710:	801a      	strh	r2, [r3, #0]
													
							Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR1);
   a3712:	2001      	movs	r0, #1
   a3714:	4b2b      	ldr	r3, [pc, #172]	; (a37c4 <Cl_Dprep_StartPreparation+0x3a8>)
   a3716:	4798      	blx	r3
   a3718:	4603      	mov	r3, r0
   a371a:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR2);
   a371c:	2002      	movs	r0, #2
   a371e:	4b29      	ldr	r3, [pc, #164]	; (a37c4 <Cl_Dprep_StartPreparation+0x3a8>)
   a3720:	4798      	blx	r3
   a3722:	4603      	mov	r3, r0
   a3724:	75bb      	strb	r3, [r7, #22]
							sv_cntrl_enable_bypass();
   a3726:	4b28      	ldr	r3, [pc, #160]	; (a37c8 <Cl_Dprep_StartPreparation+0x3ac>)
   a3728:	4798      	blx	r3
							cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   a372a:	4b28      	ldr	r3, [pc, #160]	; (a37cc <Cl_Dprep_StartPreparation+0x3b0>)
   a372c:	2201      	movs	r2, #1
   a372e:	701a      	strb	r2, [r3, #0]
						//	sv_cntrl_disable_bypass();
						//	cl_dprepbypassstate = CL_DPREP_BYPASS_OFF;
							Cl_dprepretcode = Cl_bc_controller(BC_EVENT_RESUME);
   a3730:	200b      	movs	r0, #11
   a3732:	4b27      	ldr	r3, [pc, #156]	; (a37d0 <Cl_Dprep_StartPreparation+0x3b4>)
   a3734:	4798      	blx	r3
   a3736:	4603      	mov	r3, r0
   a3738:	75bb      	strb	r3, [r7, #22]
							//sv_cntrl_enable_bypass();
							sv_prop_startmixing();
   a373a:	4b26      	ldr	r3, [pc, #152]	; (a37d4 <Cl_Dprep_StartPreparation+0x3b8>)
   a373c:	4798      	blx	r3
							Cl_Uint32Type temp = Treatdata[ID_dflow];
   a373e:	4b26      	ldr	r3, [pc, #152]	; (a37d8 <Cl_Dprep_StartPreparation+0x3bc>)
   a3740:	695b      	ldr	r3, [r3, #20]
   a3742:	613b      	str	r3, [r7, #16]
							Cl_Uint16Type potvalue = 0;
   a3744:	2300      	movs	r3, #0
   a3746:	81fb      	strh	r3, [r7, #14]
							switch (temp)
   a3748:	693b      	ldr	r3, [r7, #16]
   a374a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   a374e:	d04b      	beq.n	a37e8 <Cl_Dprep_StartPreparation+0x3cc>
   a3750:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   a3754:	d003      	beq.n	a375e <Cl_Dprep_StartPreparation+0x342>
   a3756:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   a375a:	d05f      	beq.n	a381c <Cl_Dprep_StartPreparation+0x400>
   a375c:	e073      	b.n	a3846 <Cl_Dprep_StartPreparation+0x42a>
							{
								case 800:
								sv_cntrl_setpumpspeed(DCMOTOR2,900);
   a375e:	2002      	movs	r0, #2
   a3760:	f44f 7161 	mov.w	r1, #900	; 0x384
   a3764:	4b1d      	ldr	r3, [pc, #116]	; (a37dc <Cl_Dprep_StartPreparation+0x3c0>)
   a3766:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR1,800);   //960
   a3768:	2001      	movs	r0, #1
   a376a:	f44f 7148 	mov.w	r1, #800	; 0x320
   a376e:	4b1b      	ldr	r3, [pc, #108]	; (a37dc <Cl_Dprep_StartPreparation+0x3c0>)
   a3770:	4798      	blx	r3
								potvalue = (2600 * 1024)/10000;
   a3772:	f44f 7385 	mov.w	r3, #266	; 0x10a
   a3776:	81fb      	strh	r3, [r7, #14]
								sv_cs_setpotvalue(potvalue);
   a3778:	89fb      	ldrh	r3, [r7, #14]
   a377a:	4618      	mov	r0, r3
   a377c:	4b18      	ldr	r3, [pc, #96]	; (a37e0 <Cl_Dprep_StartPreparation+0x3c4>)
   a377e:	4798      	blx	r3
								
								conf_activate_pressure_alarms(800);
   a3780:	f44f 7048 	mov.w	r0, #800	; 0x320
   a3784:	4b17      	ldr	r3, [pc, #92]	; (a37e4 <Cl_Dprep_StartPreparation+0x3c8>)
   a3786:	4798      	blx	r3
								
							
								
								break;
   a3788:	e06e      	b.n	a3868 <Cl_Dprep_StartPreparation+0x44c>
   a378a:	bf00      	nop
   a378c:	0009b6ad 	.word	0x0009b6ad
   a3790:	000a2281 	.word	0x000a2281
   a3794:	000a2835 	.word	0x000a2835
   a3798:	0009d1e9 	.word	0x0009d1e9
   a379c:	000948d9 	.word	0x000948d9
   a37a0:	000829dd 	.word	0x000829dd
   a37a4:	430c0000 	.word	0x430c0000
   a37a8:	43c80000 	.word	0x43c80000
   a37ac:	43e10000 	.word	0x43e10000
   a37b0:	43480000 	.word	0x43480000
   a37b4:	44bb8000 	.word	0x44bb8000
   a37b8:	00082a35 	.word	0x00082a35
   a37bc:	20070bea 	.word	0x20070bea
   a37c0:	20071ac4 	.word	0x20071ac4
   a37c4:	0009b32d 	.word	0x0009b32d
   a37c8:	0009b595 	.word	0x0009b595
   a37cc:	20071dd0 	.word	0x20071dd0
   a37d0:	00082ee1 	.word	0x00082ee1
   a37d4:	0009b785 	.word	0x0009b785
   a37d8:	20072880 	.word	0x20072880
   a37dc:	0009b461 	.word	0x0009b461
   a37e0:	0009b899 	.word	0x0009b899
   a37e4:	000a316d 	.word	0x000a316d
								
								case 500:
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   a37e8:	2018      	movs	r0, #24
   a37ea:	4926      	ldr	r1, [pc, #152]	; (a3884 <Cl_Dprep_StartPreparation+0x468>)
   a37ec:	2203      	movs	r2, #3
   a37ee:	4b26      	ldr	r3, [pc, #152]	; (a3888 <Cl_Dprep_StartPreparation+0x46c>)
   a37f0:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   a37f2:	2002      	movs	r0, #2
   a37f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a37f8:	4b24      	ldr	r3, [pc, #144]	; (a388c <Cl_Dprep_StartPreparation+0x470>)
   a37fa:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR1,1000);   //960
   a37fc:	2001      	movs	r0, #1
   a37fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a3802:	4b22      	ldr	r3, [pc, #136]	; (a388c <Cl_Dprep_StartPreparation+0x470>)
   a3804:	4798      	blx	r3
								potvalue = (600 * 1024)/10000;
   a3806:	233d      	movs	r3, #61	; 0x3d
   a3808:	81fb      	strh	r3, [r7, #14]
								sv_cs_setpotvalue(potvalue);
   a380a:	89fb      	ldrh	r3, [r7, #14]
   a380c:	4618      	mov	r0, r3
   a380e:	4b20      	ldr	r3, [pc, #128]	; (a3890 <Cl_Dprep_StartPreparation+0x474>)
   a3810:	4798      	blx	r3
								conf_activate_pressure_alarms(500);
   a3812:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   a3816:	4b1f      	ldr	r3, [pc, #124]	; (a3894 <Cl_Dprep_StartPreparation+0x478>)
   a3818:	4798      	blx	r3
								
								break;
   a381a:	e025      	b.n	a3868 <Cl_Dprep_StartPreparation+0x44c>

								case 300:
								sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   a381c:	2002      	movs	r0, #2
   a381e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a3822:	4b1a      	ldr	r3, [pc, #104]	; (a388c <Cl_Dprep_StartPreparation+0x470>)
   a3824:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR1,600);
   a3826:	2001      	movs	r0, #1
   a3828:	f44f 7116 	mov.w	r1, #600	; 0x258
   a382c:	4b17      	ldr	r3, [pc, #92]	; (a388c <Cl_Dprep_StartPreparation+0x470>)
   a382e:	4798      	blx	r3
								potvalue = (650 * 1024)/10000;
   a3830:	2342      	movs	r3, #66	; 0x42
   a3832:	81fb      	strh	r3, [r7, #14]
								sv_cs_setpotvalue(potvalue);
   a3834:	89fb      	ldrh	r3, [r7, #14]
   a3836:	4618      	mov	r0, r3
   a3838:	4b15      	ldr	r3, [pc, #84]	; (a3890 <Cl_Dprep_StartPreparation+0x474>)
   a383a:	4798      	blx	r3
								conf_activate_pressure_alarms(300);
   a383c:	f44f 7096 	mov.w	r0, #300	; 0x12c
   a3840:	4b14      	ldr	r3, [pc, #80]	; (a3894 <Cl_Dprep_StartPreparation+0x478>)
   a3842:	4798      	blx	r3
										
								break;
   a3844:	e010      	b.n	a3868 <Cl_Dprep_StartPreparation+0x44c>
								
								
								default:
								sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   a3846:	2002      	movs	r0, #2
   a3848:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a384c:	4b0f      	ldr	r3, [pc, #60]	; (a388c <Cl_Dprep_StartPreparation+0x470>)
   a384e:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR1,1100);   //960
   a3850:	2001      	movs	r0, #1
   a3852:	f240 414c 	movw	r1, #1100	; 0x44c
   a3856:	4b0d      	ldr	r3, [pc, #52]	; (a388c <Cl_Dprep_StartPreparation+0x470>)
   a3858:	4798      	blx	r3
								potvalue = (600 * 1024)/10000;
   a385a:	233d      	movs	r3, #61	; 0x3d
   a385c:	81fb      	strh	r3, [r7, #14]
								sv_cs_setpotvalue(potvalue);
   a385e:	89fb      	ldrh	r3, [r7, #14]
   a3860:	4618      	mov	r0, r3
   a3862:	4b0b      	ldr	r3, [pc, #44]	; (a3890 <Cl_Dprep_StartPreparation+0x474>)
   a3864:	4798      	blx	r3
								
								break;
   a3866:	bf00      	nop
							}
						//	#if 0
						//    sv_cntrl_poweronheater();
							Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_ON);
   a3868:	2001      	movs	r0, #1
   a386a:	4b0b      	ldr	r3, [pc, #44]	; (a3898 <Cl_Dprep_StartPreparation+0x47c>)
   a386c:	4798      	blx	r3
   a386e:	4603      	mov	r3, r0
   a3870:	75bb      	strb	r3, [r7, #22]
						//	#endif
							cl_dprepstate = CL_DPREP_STATE_DPREP_FILLING;
   a3872:	4b0a      	ldr	r3, [pc, #40]	; (a389c <Cl_Dprep_StartPreparation+0x480>)
   a3874:	2202      	movs	r2, #2
   a3876:	701a      	strb	r2, [r3, #0]
							
							return 0;
   a3878:	2300      	movs	r3, #0
				
	}
   a387a:	4618      	mov	r0, r3
   a387c:	371c      	adds	r7, #28
   a387e:	46bd      	mov	sp, r7
   a3880:	bd90      	pop	{r4, r7, pc}
   a3882:	bf00      	nop
   a3884:	000aa6b8 	.word	0x000aa6b8
   a3888:	0009d1e9 	.word	0x0009d1e9
   a388c:	0009b461 	.word	0x0009b461
   a3890:	0009b899 	.word	0x0009b899
   a3894:	000a316d 	.word	0x000a316d
   a3898:	00089381 	.word	0x00089381
   a389c:	20071dcf 	.word	0x20071dcf

000a38a0 <Cl_Dprep_StartDialyserPrime>:
	
	
	Cl_ReturnCodeType	Cl_Dprep_StartDialyserPrime(void)
	{
   a38a0:	b590      	push	{r4, r7, lr}
   a38a2:	b087      	sub	sp, #28
   a38a4:	af02      	add	r7, sp, #8
			sv_cntrl_resetgreenalarm();
   a38a6:	4bae      	ldr	r3, [pc, #696]	; (a3b60 <Cl_Dprep_StartDialyserPrime+0x2c0>)
   a38a8:	4798      	blx	r3
			dialyzerprime_flag =1;
   a38aa:	4bae      	ldr	r3, [pc, #696]	; (a3b64 <Cl_Dprep_StartDialyserPrime+0x2c4>)
   a38ac:	2201      	movs	r2, #1
   a38ae:	701a      	strb	r2, [r3, #0]
			Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   a38b0:	2300      	movs	r3, #0
   a38b2:	73fb      	strb	r3, [r7, #15]
			Cl_Uint8Type data =0;
   a38b4:	2300      	movs	r3, #0
   a38b6:	717b      	strb	r3, [r7, #5]
				
			Cl_dprepMinutescounter = 0;
   a38b8:	4bab      	ldr	r3, [pc, #684]	; (a3b68 <Cl_Dprep_StartDialyserPrime+0x2c8>)
   a38ba:	2200      	movs	r2, #0
   a38bc:	601a      	str	r2, [r3, #0]
			Cl_dprepsecondscounter = 0;
   a38be:	4bab      	ldr	r3, [pc, #684]	; (a3b6c <Cl_Dprep_StartDialyserPrime+0x2cc>)
   a38c0:	2200      	movs	r2, #0
   a38c2:	601a      	str	r2, [r3, #0]
			Cl_Dprep_ResetAlertsforReassertion();
   a38c4:	4baa      	ldr	r3, [pc, #680]	; (a3b70 <Cl_Dprep_StartDialyserPrime+0x2d0>)
   a38c6:	4798      	blx	r3
			//cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
			//Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
			
			//check bypass switches
		//	cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_START,0);
			Cl_dprepretcode = Cl_DprepSelectDialysateInlet();
   a38c8:	4baa      	ldr	r3, [pc, #680]	; (a3b74 <Cl_Dprep_StartDialyserPrime+0x2d4>)
   a38ca:	4798      	blx	r3
   a38cc:	4603      	mov	r3, r0
   a38ce:	73fb      	strb	r3, [r7, #15]
			//Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_CLOSED,LOGIC_LOW,0,0,0);
   a38d0:	2300      	movs	r3, #0
   a38d2:	9300      	str	r3, [sp, #0]
   a38d4:	2005      	movs	r0, #5
   a38d6:	2100      	movs	r1, #0
   a38d8:	f04f 0200 	mov.w	r2, #0
   a38dc:	f04f 0300 	mov.w	r3, #0
   a38e0:	4ca5      	ldr	r4, [pc, #660]	; (a3b78 <Cl_Dprep_StartDialyserPrime+0x2d8>)
   a38e2:	47a0      	blx	r4
   a38e4:	4603      	mov	r3, r0
   a38e6:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_CLOSED,LOGIC_LOW,0,0,0);
   a38e8:	2300      	movs	r3, #0
   a38ea:	9300      	str	r3, [sp, #0]
   a38ec:	2006      	movs	r0, #6
   a38ee:	2100      	movs	r1, #0
   a38f0:	f04f 0200 	mov.w	r2, #0
   a38f4:	f04f 0300 	mov.w	r3, #0
   a38f8:	4c9f      	ldr	r4, [pc, #636]	; (a3b78 <Cl_Dprep_StartDialyserPrime+0x2d8>)
   a38fa:	47a0      	blx	r4
   a38fc:	4603      	mov	r3, r0
   a38fe:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_CLOSED,LOGIC_HIGH,0,0,0);
   a3900:	2300      	movs	r3, #0
   a3902:	9300      	str	r3, [sp, #0]
   a3904:	202a      	movs	r0, #42	; 0x2a
   a3906:	2101      	movs	r1, #1
   a3908:	f04f 0200 	mov.w	r2, #0
   a390c:	f04f 0300 	mov.w	r3, #0
   a3910:	4c99      	ldr	r4, [pc, #612]	; (a3b78 <Cl_Dprep_StartDialyserPrime+0x2d8>)
   a3912:	47a0      	blx	r4
   a3914:	4603      	mov	r3, r0
   a3916:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_CLOSED,LOGIC_HIGH,0,0,0);
   a3918:	2300      	movs	r3, #0
   a391a:	9300      	str	r3, [sp, #0]
   a391c:	202c      	movs	r0, #44	; 0x2c
   a391e:	2101      	movs	r1, #1
   a3920:	f04f 0200 	mov.w	r2, #0
   a3924:	f04f 0300 	mov.w	r3, #0
   a3928:	4c93      	ldr	r4, [pc, #588]	; (a3b78 <Cl_Dprep_StartDialyserPrime+0x2d8>)
   a392a:	47a0      	blx	r4
   a392c:	4603      	mov	r3, r0
   a392e:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_LOW,BELOW,(Treatdata[ID_setcond] - 0.2),0,0);
   a3930:	4b92      	ldr	r3, [pc, #584]	; (a3b7c <Cl_Dprep_StartDialyserPrime+0x2dc>)
   a3932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   a3934:	4b92      	ldr	r3, [pc, #584]	; (a3b80 <Cl_Dprep_StartDialyserPrime+0x2e0>)
   a3936:	4610      	mov	r0, r2
   a3938:	4798      	blx	r3
   a393a:	4602      	mov	r2, r0
   a393c:	460b      	mov	r3, r1
   a393e:	4c91      	ldr	r4, [pc, #580]	; (a3b84 <Cl_Dprep_StartDialyserPrime+0x2e4>)
   a3940:	4610      	mov	r0, r2
   a3942:	4619      	mov	r1, r3
   a3944:	a384      	add	r3, pc, #528	; (adr r3, a3b58 <Cl_Dprep_StartDialyserPrime+0x2b8>)
   a3946:	e9d3 2300 	ldrd	r2, r3, [r3]
   a394a:	47a0      	blx	r4
   a394c:	4602      	mov	r2, r0
   a394e:	460b      	mov	r3, r1
   a3950:	4610      	mov	r0, r2
   a3952:	4619      	mov	r1, r3
   a3954:	4b8c      	ldr	r3, [pc, #560]	; (a3b88 <Cl_Dprep_StartDialyserPrime+0x2e8>)
   a3956:	4798      	blx	r3
   a3958:	4602      	mov	r2, r0
   a395a:	2300      	movs	r3, #0
   a395c:	9300      	str	r3, [sp, #0]
   a395e:	2007      	movs	r0, #7
   a3960:	2103      	movs	r1, #3
   a3962:	f04f 0300 	mov.w	r3, #0
   a3966:	4c84      	ldr	r4, [pc, #528]	; (a3b78 <Cl_Dprep_StartDialyserPrime+0x2d8>)
   a3968:	47a0      	blx	r4
   a396a:	4603      	mov	r3, r0
   a396c:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_HIGH,BELOW,(Treatdata[ID_setcond] + 0.2),0,0);
   a396e:	4b83      	ldr	r3, [pc, #524]	; (a3b7c <Cl_Dprep_StartDialyserPrime+0x2dc>)
   a3970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   a3972:	4b83      	ldr	r3, [pc, #524]	; (a3b80 <Cl_Dprep_StartDialyserPrime+0x2e0>)
   a3974:	4610      	mov	r0, r2
   a3976:	4798      	blx	r3
   a3978:	4602      	mov	r2, r0
   a397a:	460b      	mov	r3, r1
   a397c:	4c83      	ldr	r4, [pc, #524]	; (a3b8c <Cl_Dprep_StartDialyserPrime+0x2ec>)
   a397e:	4610      	mov	r0, r2
   a3980:	4619      	mov	r1, r3
   a3982:	a375      	add	r3, pc, #468	; (adr r3, a3b58 <Cl_Dprep_StartDialyserPrime+0x2b8>)
   a3984:	e9d3 2300 	ldrd	r2, r3, [r3]
   a3988:	47a0      	blx	r4
   a398a:	4602      	mov	r2, r0
   a398c:	460b      	mov	r3, r1
   a398e:	4610      	mov	r0, r2
   a3990:	4619      	mov	r1, r3
   a3992:	4b7d      	ldr	r3, [pc, #500]	; (a3b88 <Cl_Dprep_StartDialyserPrime+0x2e8>)
   a3994:	4798      	blx	r3
   a3996:	4602      	mov	r2, r0
   a3998:	2300      	movs	r3, #0
   a399a:	9300      	str	r3, [sp, #0]
   a399c:	2008      	movs	r0, #8
   a399e:	2103      	movs	r1, #3
   a39a0:	f04f 0300 	mov.w	r3, #0
   a39a4:	4c74      	ldr	r4, [pc, #464]	; (a3b78 <Cl_Dprep_StartDialyserPrime+0x2d8>)
   a39a6:	47a0      	blx	r4
   a39a8:	4603      	mov	r3, r0
   a39aa:	73fb      	strb	r3, [r7, #15]
// 			Cl_dprepretcode = Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
// 			Cl_dprepretcode = Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
// 			Cl_dprepretcode = Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,false );
// 	        Cl_dprepretcode = Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD,false );
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a39ac:	2029      	movs	r0, #41	; 0x29
   a39ae:	2100      	movs	r1, #0
   a39b0:	4b77      	ldr	r3, [pc, #476]	; (a3b90 <Cl_Dprep_StartDialyserPrime+0x2f0>)
   a39b2:	4798      	blx	r3
   a39b4:	4603      	mov	r3, r0
   a39b6:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a39b8:	202b      	movs	r0, #43	; 0x2b
   a39ba:	2100      	movs	r1, #0
   a39bc:	4b74      	ldr	r3, [pc, #464]	; (a3b90 <Cl_Dprep_StartDialyserPrime+0x2f0>)
   a39be:	4798      	blx	r3
   a39c0:	4603      	mov	r3, r0
   a39c2:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a39c4:	2003      	movs	r0, #3
   a39c6:	2100      	movs	r1, #0
   a39c8:	4b71      	ldr	r3, [pc, #452]	; (a3b90 <Cl_Dprep_StartDialyserPrime+0x2f0>)
   a39ca:	4798      	blx	r3
   a39cc:	4603      	mov	r3, r0
   a39ce:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a39d0:	2004      	movs	r0, #4
   a39d2:	2100      	movs	r1, #0
   a39d4:	4b6e      	ldr	r3, [pc, #440]	; (a3b90 <Cl_Dprep_StartDialyserPrime+0x2f0>)
   a39d6:	4798      	blx	r3
   a39d8:	4603      	mov	r3, r0
   a39da:	73fb      	strb	r3, [r7, #15]
			
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_CLOSED,true );
   a39dc:	202a      	movs	r0, #42	; 0x2a
   a39de:	2101      	movs	r1, #1
   a39e0:	4b6b      	ldr	r3, [pc, #428]	; (a3b90 <Cl_Dprep_StartDialyserPrime+0x2f0>)
   a39e2:	4798      	blx	r3
   a39e4:	4603      	mov	r3, r0
   a39e6:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_CLOSED,true );
   a39e8:	202c      	movs	r0, #44	; 0x2c
   a39ea:	2101      	movs	r1, #1
   a39ec:	4b68      	ldr	r3, [pc, #416]	; (a3b90 <Cl_Dprep_StartDialyserPrime+0x2f0>)
   a39ee:	4798      	blx	r3
   a39f0:	4603      	mov	r3, r0
   a39f2:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_CLOSED,true );
   a39f4:	2005      	movs	r0, #5
   a39f6:	2101      	movs	r1, #1
   a39f8:	4b65      	ldr	r3, [pc, #404]	; (a3b90 <Cl_Dprep_StartDialyserPrime+0x2f0>)
   a39fa:	4798      	blx	r3
   a39fc:	4603      	mov	r3, r0
   a39fe:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_CLOSED,true );
   a3a00:	2006      	movs	r0, #6
   a3a02:	2101      	movs	r1, #1
   a3a04:	4b62      	ldr	r3, [pc, #392]	; (a3b90 <Cl_Dprep_StartDialyserPrime+0x2f0>)
   a3a06:	4798      	blx	r3
   a3a08:	4603      	mov	r3, r0
   a3a0a:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BP_STOPPED,true );
   a3a0c:	203f      	movs	r0, #63	; 0x3f
   a3a0e:	2101      	movs	r1, #1
   a3a10:	4b5f      	ldr	r3, [pc, #380]	; (a3b90 <Cl_Dprep_StartDialyserPrime+0x2f0>)
   a3a12:	4798      	blx	r3
   a3a14:	4603      	mov	r3, r0
   a3a16:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );
   a3a18:	200c      	movs	r0, #12
   a3a1a:	2101      	movs	r1, #1
   a3a1c:	4b5c      	ldr	r3, [pc, #368]	; (a3b90 <Cl_Dprep_StartDialyserPrime+0x2f0>)
   a3a1e:	4798      	blx	r3
   a3a20:	4603      	mov	r3, r0
   a3a22:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   a3a24:	200d      	movs	r0, #13
   a3a26:	2101      	movs	r1, #1
   a3a28:	4b59      	ldr	r3, [pc, #356]	; (a3b90 <Cl_Dprep_StartDialyserPrime+0x2f0>)
   a3a2a:	4798      	blx	r3
   a3a2c:	4603      	mov	r3, r0
   a3a2e:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
   a3a30:	200e      	movs	r0, #14
   a3a32:	2101      	movs	r1, #1
   a3a34:	4b56      	ldr	r3, [pc, #344]	; (a3b90 <Cl_Dprep_StartDialyserPrime+0x2f0>)
   a3a36:	4798      	blx	r3
   a3a38:	4603      	mov	r3, r0
   a3a3a:	73fb      	strb	r3, [r7, #15]
			Cl_AlarmActivateAlarms(BC_ALARM,true);
   a3a3c:	201a      	movs	r0, #26
   a3a3e:	2101      	movs	r1, #1
   a3a40:	4b53      	ldr	r3, [pc, #332]	; (a3b90 <Cl_Dprep_StartDialyserPrime+0x2f0>)
   a3a42:	4798      	blx	r3
// 			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
// 			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
// 			Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true );
// 			Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
// 		
			if(Current_sense_trigger)
   a3a44:	4b53      	ldr	r3, [pc, #332]	; (a3b94 <Cl_Dprep_StartDialyserPrime+0x2f4>)
   a3a46:	781b      	ldrb	r3, [r3, #0]
   a3a48:	2b00      	cmp	r3, #0
   a3a4a:	d005      	beq.n	a3a58 <Cl_Dprep_StartDialyserPrime+0x1b8>
			{
				Cl_dprepretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   a3a4c:	203c      	movs	r0, #60	; 0x3c
   a3a4e:	2101      	movs	r1, #1
   a3a50:	4b4f      	ldr	r3, [pc, #316]	; (a3b90 <Cl_Dprep_StartDialyserPrime+0x2f0>)
   a3a52:	4798      	blx	r3
   a3a54:	4603      	mov	r3, r0
   a3a56:	73fb      	strb	r3, [r7, #15]
			else
			{
				//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
			}
			
			Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR1);
   a3a58:	2001      	movs	r0, #1
   a3a5a:	4b4f      	ldr	r3, [pc, #316]	; (a3b98 <Cl_Dprep_StartDialyserPrime+0x2f8>)
   a3a5c:	4798      	blx	r3
   a3a5e:	4603      	mov	r3, r0
   a3a60:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR2);
   a3a62:	2002      	movs	r0, #2
   a3a64:	4b4c      	ldr	r3, [pc, #304]	; (a3b98 <Cl_Dprep_StartDialyserPrime+0x2f8>)
   a3a66:	4798      	blx	r3
   a3a68:	4603      	mov	r3, r0
   a3a6a:	73fb      	strb	r3, [r7, #15]
			
			// wait for the cond and temperature to be stable then disable bypass and run it for 2 mins
		//	Cl_dprepretcode =  sv_cntrl_disable_bypass();
		//	cl_dprepbypassstate = CL_DPREP_BYPASS_OFF;
			Cl_Uint32Type temp = Treatdata[ID_dflow];
   a3a6c:	4b43      	ldr	r3, [pc, #268]	; (a3b7c <Cl_Dprep_StartDialyserPrime+0x2dc>)
   a3a6e:	695b      	ldr	r3, [r3, #20]
   a3a70:	60bb      	str	r3, [r7, #8]
				flow_rate = temp;
   a3a72:	4a4a      	ldr	r2, [pc, #296]	; (a3b9c <Cl_Dprep_StartDialyserPrime+0x2fc>)
   a3a74:	68bb      	ldr	r3, [r7, #8]
   a3a76:	6013      	str	r3, [r2, #0]
			Cl_Uint16Type potvalue = 0;
   a3a78:	2300      	movs	r3, #0
   a3a7a:	80fb      	strh	r3, [r7, #6]
			switch (temp)
   a3a7c:	68bb      	ldr	r3, [r7, #8]
   a3a7e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   a3a82:	d038      	beq.n	a3af6 <Cl_Dprep_StartDialyserPrime+0x256>
   a3a84:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   a3a88:	d803      	bhi.n	a3a92 <Cl_Dprep_StartDialyserPrime+0x1f2>
   a3a8a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   a3a8e:	d04c      	beq.n	a3b2a <Cl_Dprep_StartDialyserPrime+0x28a>
   a3a90:	e090      	b.n	a3bb4 <Cl_Dprep_StartDialyserPrime+0x314>
   a3a92:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
   a3a96:	d018      	beq.n	a3aca <Cl_Dprep_StartDialyserPrime+0x22a>
   a3a98:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   a3a9c:	f040 808a 	bne.w	a3bb4 <Cl_Dprep_StartDialyserPrime+0x314>
			{
				case 800:
				sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   a3aa0:	2002      	movs	r0, #2
   a3aa2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a3aa6:	4b3e      	ldr	r3, [pc, #248]	; (a3ba0 <Cl_Dprep_StartDialyserPrime+0x300>)
   a3aa8:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,1395);
   a3aaa:	2001      	movs	r0, #1
   a3aac:	f240 5173 	movw	r1, #1395	; 0x573
   a3ab0:	4b3b      	ldr	r3, [pc, #236]	; (a3ba0 <Cl_Dprep_StartDialyserPrime+0x300>)
   a3ab2:	4798      	blx	r3
				potvalue = (612 * 1024)/10000;
   a3ab4:	233e      	movs	r3, #62	; 0x3e
   a3ab6:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   a3ab8:	88fb      	ldrh	r3, [r7, #6]
   a3aba:	4618      	mov	r0, r3
   a3abc:	4b39      	ldr	r3, [pc, #228]	; (a3ba4 <Cl_Dprep_StartDialyserPrime+0x304>)
   a3abe:	4798      	blx	r3
				
				conf_activate_pressure_alarms(800);
   a3ac0:	f44f 7048 	mov.w	r0, #800	; 0x320
   a3ac4:	4b38      	ldr	r3, [pc, #224]	; (a3ba8 <Cl_Dprep_StartDialyserPrime+0x308>)
   a3ac6:	4798      	blx	r3
				break;
   a3ac8:	e08a      	b.n	a3be0 <Cl_Dprep_StartDialyserPrime+0x340>
				
				case 700:
				sv_cntrl_setpumpspeed(DCMOTOR2,900);
   a3aca:	2002      	movs	r0, #2
   a3acc:	f44f 7161 	mov.w	r1, #900	; 0x384
   a3ad0:	4b33      	ldr	r3, [pc, #204]	; (a3ba0 <Cl_Dprep_StartDialyserPrime+0x300>)
   a3ad2:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,960);
   a3ad4:	2001      	movs	r0, #1
   a3ad6:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   a3ada:	4b31      	ldr	r3, [pc, #196]	; (a3ba0 <Cl_Dprep_StartDialyserPrime+0x300>)
   a3adc:	4798      	blx	r3
				potvalue = (2600 * 1024)/10000;
   a3ade:	f44f 7385 	mov.w	r3, #266	; 0x10a
   a3ae2:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   a3ae4:	88fb      	ldrh	r3, [r7, #6]
   a3ae6:	4618      	mov	r0, r3
   a3ae8:	4b2e      	ldr	r3, [pc, #184]	; (a3ba4 <Cl_Dprep_StartDialyserPrime+0x304>)
   a3aea:	4798      	blx	r3
				
				conf_activate_pressure_alarms(700);
   a3aec:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   a3af0:	4b2d      	ldr	r3, [pc, #180]	; (a3ba8 <Cl_Dprep_StartDialyserPrime+0x308>)
   a3af2:	4798      	blx	r3
				break;
   a3af4:	e074      	b.n	a3be0 <Cl_Dprep_StartDialyserPrime+0x340>
				
				
				case 500:
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   a3af6:	2018      	movs	r0, #24
   a3af8:	492c      	ldr	r1, [pc, #176]	; (a3bac <Cl_Dprep_StartDialyserPrime+0x30c>)
   a3afa:	2203      	movs	r2, #3
   a3afc:	4b2c      	ldr	r3, [pc, #176]	; (a3bb0 <Cl_Dprep_StartDialyserPrime+0x310>)
   a3afe:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   a3b00:	2002      	movs	r0, #2
   a3b02:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a3b06:	4b26      	ldr	r3, [pc, #152]	; (a3ba0 <Cl_Dprep_StartDialyserPrime+0x300>)
   a3b08:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,1000);   //960
   a3b0a:	2001      	movs	r0, #1
   a3b0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a3b10:	4b23      	ldr	r3, [pc, #140]	; (a3ba0 <Cl_Dprep_StartDialyserPrime+0x300>)
   a3b12:	4798      	blx	r3
				potvalue = (600 * 1024)/10000;
   a3b14:	233d      	movs	r3, #61	; 0x3d
   a3b16:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   a3b18:	88fb      	ldrh	r3, [r7, #6]
   a3b1a:	4618      	mov	r0, r3
   a3b1c:	4b21      	ldr	r3, [pc, #132]	; (a3ba4 <Cl_Dprep_StartDialyserPrime+0x304>)
   a3b1e:	4798      	blx	r3
				
				conf_activate_pressure_alarms(500);
   a3b20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   a3b24:	4b20      	ldr	r3, [pc, #128]	; (a3ba8 <Cl_Dprep_StartDialyserPrime+0x308>)
   a3b26:	4798      	blx	r3
				break;
   a3b28:	e05a      	b.n	a3be0 <Cl_Dprep_StartDialyserPrime+0x340>

				case 300:
				sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   a3b2a:	2002      	movs	r0, #2
   a3b2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a3b30:	4b1b      	ldr	r3, [pc, #108]	; (a3ba0 <Cl_Dprep_StartDialyserPrime+0x300>)
   a3b32:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,600);
   a3b34:	2001      	movs	r0, #1
   a3b36:	f44f 7116 	mov.w	r1, #600	; 0x258
   a3b3a:	4b19      	ldr	r3, [pc, #100]	; (a3ba0 <Cl_Dprep_StartDialyserPrime+0x300>)
   a3b3c:	4798      	blx	r3
				potvalue = (650 * 1024)/10000;
   a3b3e:	2342      	movs	r3, #66	; 0x42
   a3b40:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   a3b42:	88fb      	ldrh	r3, [r7, #6]
   a3b44:	4618      	mov	r0, r3
   a3b46:	4b17      	ldr	r3, [pc, #92]	; (a3ba4 <Cl_Dprep_StartDialyserPrime+0x304>)
   a3b48:	4798      	blx	r3
				
				conf_activate_pressure_alarms(300);
   a3b4a:	f44f 7096 	mov.w	r0, #300	; 0x12c
   a3b4e:	4b16      	ldr	r3, [pc, #88]	; (a3ba8 <Cl_Dprep_StartDialyserPrime+0x308>)
   a3b50:	4798      	blx	r3
				
				break;
   a3b52:	e045      	b.n	a3be0 <Cl_Dprep_StartDialyserPrime+0x340>
   a3b54:	f3af 8000 	nop.w
   a3b58:	9999999a 	.word	0x9999999a
   a3b5c:	3fc99999 	.word	0x3fc99999
   a3b60:	0009b6ad 	.word	0x0009b6ad
   a3b64:	20071d80 	.word	0x20071d80
   a3b68:	20071dd8 	.word	0x20071dd8
   a3b6c:	20071dd4 	.word	0x20071dd4
   a3b70:	000a2835 	.word	0x000a2835
   a3b74:	000a2281 	.word	0x000a2281
   a3b78:	000829dd 	.word	0x000829dd
   a3b7c:	20072880 	.word	0x20072880
   a3b80:	000a7999 	.word	0x000a7999
   a3b84:	000a771d 	.word	0x000a771d
   a3b88:	000a8049 	.word	0x000a8049
   a3b8c:	000a7721 	.word	0x000a7721
   a3b90:	00082a35 	.word	0x00082a35
   a3b94:	20070bea 	.word	0x20070bea
   a3b98:	0009b32d 	.word	0x0009b32d
   a3b9c:	20071a68 	.word	0x20071a68
   a3ba0:	0009b461 	.word	0x0009b461
   a3ba4:	0009b899 	.word	0x0009b899
   a3ba8:	000a316d 	.word	0x000a316d
   a3bac:	000aa6b8 	.word	0x000aa6b8
   a3bb0:	0009d1e9 	.word	0x0009d1e9
				
				
				default:
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   a3bb4:	2018      	movs	r0, #24
   a3bb6:	4918      	ldr	r1, [pc, #96]	; (a3c18 <Cl_Dprep_StartDialyserPrime+0x378>)
   a3bb8:	2203      	movs	r2, #3
   a3bba:	4b18      	ldr	r3, [pc, #96]	; (a3c1c <Cl_Dprep_StartDialyserPrime+0x37c>)
   a3bbc:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   a3bbe:	2002      	movs	r0, #2
   a3bc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a3bc4:	4b16      	ldr	r3, [pc, #88]	; (a3c20 <Cl_Dprep_StartDialyserPrime+0x380>)
   a3bc6:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,1100);                           // 420
   a3bc8:	2001      	movs	r0, #1
   a3bca:	f240 414c 	movw	r1, #1100	; 0x44c
   a3bce:	4b14      	ldr	r3, [pc, #80]	; (a3c20 <Cl_Dprep_StartDialyserPrime+0x380>)
   a3bd0:	4798      	blx	r3
				potvalue = (600 * 1024)/10000;
   a3bd2:	233d      	movs	r3, #61	; 0x3d
   a3bd4:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   a3bd6:	88fb      	ldrh	r3, [r7, #6]
   a3bd8:	4618      	mov	r0, r3
   a3bda:	4b12      	ldr	r3, [pc, #72]	; (a3c24 <Cl_Dprep_StartDialyserPrime+0x384>)
   a3bdc:	4798      	blx	r3
				break;
   a3bde:	bf00      	nop
			}
			
		//	if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_DIALYSER_PRIMING)
		//	{
				
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING,0);
   a3be0:	2008      	movs	r0, #8
   a3be2:	2100      	movs	r1, #0
   a3be4:	4b10      	ldr	r3, [pc, #64]	; (a3c28 <Cl_Dprep_StartDialyserPrime+0x388>)
   a3be6:	4798      	blx	r3
				 Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0); // manav01 added 29-8-17 removed from prime controller
   a3be8:	1d7b      	adds	r3, r7, #5
   a3bea:	2028      	movs	r0, #40	; 0x28
   a3bec:	4619      	mov	r1, r3
   a3bee:	2200      	movs	r2, #0
   a3bf0:	4b0a      	ldr	r3, [pc, #40]	; (a3c1c <Cl_Dprep_StartDialyserPrime+0x37c>)
   a3bf2:	4798      	blx	r3
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a3bf4:	4b0d      	ldr	r3, [pc, #52]	; (a3c2c <Cl_Dprep_StartDialyserPrime+0x38c>)
   a3bf6:	2200      	movs	r2, #0
   a3bf8:	70da      	strb	r2, [r3, #3]
		//	}
			
			
			Cl_dprepretcode = sv_cntrl_disable_loopback(); 
   a3bfa:	4b0d      	ldr	r3, [pc, #52]	; (a3c30 <Cl_Dprep_StartDialyserPrime+0x390>)
   a3bfc:	4798      	blx	r3
   a3bfe:	4603      	mov	r3, r0
   a3c00:	73fb      	strb	r3, [r7, #15]
			//sv_prop_startmixing();                                 // manav03 removed
		//	Cl_dprepretcode = Cl_bc_controller(BC_EVENT_RESUME);                      // manav01 commented 29-8-17
		//	Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_DIALYSER_PRIME_ON);      // manav01 commented 29-8-17
			
			UpdateDprepFillingMinuteTick();
   a3c02:	4b0c      	ldr	r3, [pc, #48]	; (a3c34 <Cl_Dprep_StartDialyserPrime+0x394>)
   a3c04:	4798      	blx	r3
	
			// change state to wait for stability to check for temp and cond stability if yes then change state to dializer prime and diable bypass
		//	Cl_Check_Temp_Cond_Stability();
			
			cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
   a3c06:	4b0c      	ldr	r3, [pc, #48]	; (a3c38 <Cl_Dprep_StartDialyserPrime+0x398>)
   a3c08:	220e      	movs	r2, #14
   a3c0a:	701a      	strb	r2, [r3, #0]
			
		//	cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
		//
	//	Cl_dprepretcode =  sv_cntrl_disable_bypass();
	//	cl_dprepbypassstate = CL_DPREP_BYPASS_OFF;					
			return 0;
   a3c0c:	2300      	movs	r3, #0
	}
   a3c0e:	4618      	mov	r0, r3
   a3c10:	3714      	adds	r7, #20
   a3c12:	46bd      	mov	sp, r7
   a3c14:	bd90      	pop	{r4, r7, pc}
   a3c16:	bf00      	nop
   a3c18:	000aa6b8 	.word	0x000aa6b8
   a3c1c:	0009d1e9 	.word	0x0009d1e9
   a3c20:	0009b461 	.word	0x0009b461
   a3c24:	0009b899 	.word	0x0009b899
   a3c28:	000880c1 	.word	0x000880c1
   a3c2c:	20070d94 	.word	0x20070d94
   a3c30:	0009b579 	.word	0x0009b579
   a3c34:	000a22a1 	.word	0x000a22a1
   a3c38:	20071dcf 	.word	0x20071dcf

000a3c3c <Cl_Dprep_Priming_Stop>:

Cl_ReturnCodeType Cl_Dprep_Priming_Stop(){
   a3c3c:	b580      	push	{r7, lr}
   a3c3e:	af00      	add	r7, sp, #0
	
	sv_cntrl_setredalarm();      //manav01 added
   a3c40:	4b07      	ldr	r3, [pc, #28]	; (a3c60 <Cl_Dprep_Priming_Stop+0x24>)
   a3c42:	4798      	blx	r3
	//sv_cntrl_nobuzzer();        //manav01 added
	// Cl_mac_apprequesthandler(EVT_CONSOLE_COMMAND_STOP_DIALISER_PRIME);          // manav03 commented
// manav03 added
						Cl_dprep_StopMixing();
   a3c44:	4b07      	ldr	r3, [pc, #28]	; (a3c64 <Cl_Dprep_Priming_Stop+0x28>)
   a3c46:	4798      	blx	r3
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
   a3c48:	2009      	movs	r0, #9
   a3c4a:	2100      	movs	r1, #0
   a3c4c:	4b06      	ldr	r3, [pc, #24]	; (a3c68 <Cl_Dprep_Priming_Stop+0x2c>)
   a3c4e:	4798      	blx	r3
						cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME_STOPPED;
   a3c50:	4b06      	ldr	r3, [pc, #24]	; (a3c6c <Cl_Dprep_Priming_Stop+0x30>)
   a3c52:	2207      	movs	r2, #7
   a3c54:	701a      	strb	r2, [r3, #0]

Cl_deactivate_prep_alarms();
   a3c56:	4b06      	ldr	r3, [pc, #24]	; (a3c70 <Cl_Dprep_Priming_Stop+0x34>)
   a3c58:	4798      	blx	r3
// 		
// 		
// 		Cl_dprep_StopMixing();
// 		cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
// 	
}
   a3c5a:	4618      	mov	r0, r3
   a3c5c:	bd80      	pop	{r7, pc}
   a3c5e:	bf00      	nop
   a3c60:	0009b635 	.word	0x0009b635
   a3c64:	000a3d09 	.word	0x000a3d09
   a3c68:	000880c1 	.word	0x000880c1
   a3c6c:	20071dcf 	.word	0x20071dcf
   a3c70:	000a3db9 	.word	0x000a3db9

000a3c74 <Cl_Check_Temp_Cond_Stability>:
	
	
	
Cl_ReturnCodeType Cl_Check_Temp_Cond_Stability(){
   a3c74:	b590      	push	{r4, r7, lr}
   a3c76:	b083      	sub	sp, #12
   a3c78:	af00      	add	r7, sp, #0
	
	
	// manav02 changed
	
//	Cl_Heater_GetHeaterStableStatus(&dprep_heater_stable_status);
	Cl_Uint16Type temp = 0;
   a3c7a:	2300      	movs	r3, #0
   a3c7c:	80fb      	strh	r3, [r7, #6]
	Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS , &temp);
   a3c7e:	1dbb      	adds	r3, r7, #6
   a3c80:	2007      	movs	r0, #7
   a3c82:	4619      	mov	r1, r3
   a3c84:	4b1c      	ldr	r3, [pc, #112]	; (a3cf8 <Cl_Check_Temp_Cond_Stability+0x84>)
   a3c86:	4798      	blx	r3
	
	if(Cl_alarmThresholdTable.cond_low_threshold < temp < Cl_alarmThresholdTable.cond_high_threshold){
   a3c88:	4b1c      	ldr	r3, [pc, #112]	; (a3cfc <Cl_Check_Temp_Cond_Stability+0x88>)
   a3c8a:	881b      	ldrh	r3, [r3, #0]
   a3c8c:	b21b      	sxth	r3, r3
   a3c8e:	88fa      	ldrh	r2, [r7, #6]
   a3c90:	4293      	cmp	r3, r2
   a3c92:	bfb4      	ite	lt
   a3c94:	2301      	movlt	r3, #1
   a3c96:	2300      	movge	r3, #0
   a3c98:	b2db      	uxtb	r3, r3
   a3c9a:	461a      	mov	r2, r3
   a3c9c:	4b17      	ldr	r3, [pc, #92]	; (a3cfc <Cl_Check_Temp_Cond_Stability+0x88>)
   a3c9e:	885b      	ldrh	r3, [r3, #2]
   a3ca0:	b21b      	sxth	r3, r3
   a3ca2:	429a      	cmp	r2, r3
   a3ca4:	da23      	bge.n	a3cee <Cl_Check_Temp_Cond_Stability+0x7a>
		
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS , &temp);
   a3ca6:	1dbb      	adds	r3, r7, #6
   a3ca8:	2014      	movs	r0, #20
   a3caa:	4619      	mov	r1, r3
   a3cac:	4b12      	ldr	r3, [pc, #72]	; (a3cf8 <Cl_Check_Temp_Cond_Stability+0x84>)
   a3cae:	4798      	blx	r3
		
		if(Cl_alarmThresholdTable.temp3_low_threshold < temp < Cl_alarmThresholdTable.temp3_high_threshold){
   a3cb0:	4b12      	ldr	r3, [pc, #72]	; (a3cfc <Cl_Check_Temp_Cond_Stability+0x88>)
   a3cb2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
   a3cb4:	88fb      	ldrh	r3, [r7, #6]
   a3cb6:	461a      	mov	r2, r3
   a3cb8:	4b11      	ldr	r3, [pc, #68]	; (a3d00 <Cl_Check_Temp_Cond_Stability+0x8c>)
   a3cba:	4610      	mov	r0, r2
   a3cbc:	4798      	blx	r3
   a3cbe:	4602      	mov	r2, r0
   a3cc0:	4b10      	ldr	r3, [pc, #64]	; (a3d04 <Cl_Check_Temp_Cond_Stability+0x90>)
   a3cc2:	4620      	mov	r0, r4
   a3cc4:	4611      	mov	r1, r2
   a3cc6:	4798      	blx	r3
   a3cc8:	4603      	mov	r3, r0
   a3cca:	2b00      	cmp	r3, #0
   a3ccc:	d002      	beq.n	a3cd4 <Cl_Check_Temp_Cond_Stability+0x60>
   a3cce:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   a3cd2:	e001      	b.n	a3cd8 <Cl_Check_Temp_Cond_Stability+0x64>
   a3cd4:	f04f 0100 	mov.w	r1, #0
   a3cd8:	4b08      	ldr	r3, [pc, #32]	; (a3cfc <Cl_Check_Temp_Cond_Stability+0x88>)
   a3cda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   a3cdc:	4b09      	ldr	r3, [pc, #36]	; (a3d04 <Cl_Check_Temp_Cond_Stability+0x90>)
   a3cde:	4608      	mov	r0, r1
   a3ce0:	4611      	mov	r1, r2
   a3ce2:	4798      	blx	r3
   a3ce4:	4603      	mov	r3, r0
   a3ce6:	2b00      	cmp	r3, #0
   a3ce8:	d001      	beq.n	a3cee <Cl_Check_Temp_Cond_Stability+0x7a>
		
		return CL_OK;	
   a3cea:	2300      	movs	r3, #0
   a3cec:	e000      	b.n	a3cf0 <Cl_Check_Temp_Cond_Stability+0x7c>
// 		}
// 		else{
// 			return CL_REJECTED;
// 		}

return CL_OK;	  // manav02 needs to be changed to cl_rejected
   a3cee:	2300      	movs	r3, #0
}
   a3cf0:	4618      	mov	r0, r3
   a3cf2:	370c      	adds	r7, #12
   a3cf4:	46bd      	mov	sp, r7
   a3cf6:	bd90      	pop	{r4, r7, pc}
   a3cf8:	0008fd69 	.word	0x0008fd69
   a3cfc:	200722a8 	.word	0x200722a8
   a3d00:	000a825d 	.word	0x000a825d
   a3d04:	000a8641 	.word	0x000a8641

000a3d08 <Cl_dprep_StopMixing>:
	
	
	
Cl_ReturnCodeType Cl_dprep_StopMixing(void)
{
   a3d08:	b580      	push	{r7, lr}
   a3d0a:	b082      	sub	sp, #8
   a3d0c:	af00      	add	r7, sp, #0
	
	sv_cntrl_setredalarm();
   a3d0e:	4b21      	ldr	r3, [pc, #132]	; (a3d94 <Cl_dprep_StopMixing+0x8c>)
   a3d10:	4798      	blx	r3
				Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   a3d12:	2300      	movs	r3, #0
   a3d14:	71fb      	strb	r3, [r7, #7]
				Cl_Uint8Type data;
				if(cl_dprepstate == CL_DPREP_STATE_DPREP_FILLING)
   a3d16:	4b20      	ldr	r3, [pc, #128]	; (a3d98 <Cl_dprep_StopMixing+0x90>)
   a3d18:	781b      	ldrb	r3, [r3, #0]
   a3d1a:	2b02      	cmp	r3, #2
   a3d1c:	d11c      	bne.n	a3d58 <Cl_dprep_StopMixing+0x50>
				{
					
				Cl_dprepMinutescounter = 0;
   a3d1e:	4b1f      	ldr	r3, [pc, #124]	; (a3d9c <Cl_dprep_StopMixing+0x94>)
   a3d20:	2200      	movs	r2, #0
   a3d22:	601a      	str	r2, [r3, #0]
				Cl_dprepsecondscounter = 0;
   a3d24:	4b1e      	ldr	r3, [pc, #120]	; (a3da0 <Cl_dprep_StopMixing+0x98>)
   a3d26:	2200      	movs	r2, #0
   a3d28:	601a      	str	r2, [r3, #0]

				Cl_dprepretcode = sv_cntrl_poweroffheater();
   a3d2a:	4b1e      	ldr	r3, [pc, #120]	; (a3da4 <Cl_dprep_StopMixing+0x9c>)
   a3d2c:	4798      	blx	r3
   a3d2e:	4603      	mov	r3, r0
   a3d30:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   a3d32:	2004      	movs	r0, #4
   a3d34:	4b1c      	ldr	r3, [pc, #112]	; (a3da8 <Cl_dprep_StopMixing+0xa0>)
   a3d36:	4798      	blx	r3
   a3d38:	4603      	mov	r3, r0
   a3d3a:	71fb      	strb	r3, [r7, #7]
				Cl_bc_controller(BC_EVENT_STOP);
   a3d3c:	2005      	movs	r0, #5
   a3d3e:	4b1b      	ldr	r3, [pc, #108]	; (a3dac <Cl_dprep_StopMixing+0xa4>)
   a3d40:	4798      	blx	r3
				//Cl_rinseretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
				cl_dprepstate = CL_DPREP_STATE_STOPPED;
   a3d42:	4b15      	ldr	r3, [pc, #84]	; (a3d98 <Cl_dprep_StopMixing+0x90>)
   a3d44:	220b      	movs	r2, #11
   a3d46:	701a      	strb	r2, [r3, #0]
				Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STOPPED,&data,0);
   a3d48:	1dbb      	adds	r3, r7, #6
   a3d4a:	202d      	movs	r0, #45	; 0x2d
   a3d4c:	4619      	mov	r1, r3
   a3d4e:	2200      	movs	r2, #0
   a3d50:	4b17      	ldr	r3, [pc, #92]	; (a3db0 <Cl_dprep_StopMixing+0xa8>)
   a3d52:	4798      	blx	r3
   a3d54:	4603      	mov	r3, r0
   a3d56:	71fb      	strb	r3, [r7, #7]
				
					
				}
				if(cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME){
   a3d58:	4b0f      	ldr	r3, [pc, #60]	; (a3d98 <Cl_dprep_StopMixing+0x90>)
   a3d5a:	781b      	ldrb	r3, [r3, #0]
   a3d5c:	2b06      	cmp	r3, #6
   a3d5e:	d111      	bne.n	a3d84 <Cl_dprep_StopMixing+0x7c>
					
					Cl_dprepMinutescounter = 0;
   a3d60:	4b0e      	ldr	r3, [pc, #56]	; (a3d9c <Cl_dprep_StopMixing+0x94>)
   a3d62:	2200      	movs	r2, #0
   a3d64:	601a      	str	r2, [r3, #0]
					Cl_dprepsecondscounter = 0;
   a3d66:	4b0e      	ldr	r3, [pc, #56]	; (a3da0 <Cl_dprep_StopMixing+0x98>)
   a3d68:	2200      	movs	r2, #0
   a3d6a:	601a      	str	r2, [r3, #0]
					
					Cl_dprepretcode = sv_cntrl_poweroffheater();
   a3d6c:	4b0d      	ldr	r3, [pc, #52]	; (a3da4 <Cl_dprep_StopMixing+0x9c>)
   a3d6e:	4798      	blx	r3
   a3d70:	4603      	mov	r3, r0
   a3d72:	71fb      	strb	r3, [r7, #7]
					Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   a3d74:	2004      	movs	r0, #4
   a3d76:	4b0c      	ldr	r3, [pc, #48]	; (a3da8 <Cl_dprep_StopMixing+0xa0>)
   a3d78:	4798      	blx	r3
   a3d7a:	4603      	mov	r3, r0
   a3d7c:	71fb      	strb	r3, [r7, #7]
					Cl_bc_controller(BC_EVENT_STOP);
   a3d7e:	2005      	movs	r0, #5
   a3d80:	4b0a      	ldr	r3, [pc, #40]	; (a3dac <Cl_dprep_StopMixing+0xa4>)
   a3d82:	4798      	blx	r3
					
					
				}

Cl_deactivate_prep_alarms();
   a3d84:	4b0b      	ldr	r3, [pc, #44]	; (a3db4 <Cl_dprep_StopMixing+0xac>)
   a3d86:	4798      	blx	r3
				return Cl_dprepretcode;
   a3d88:	79fb      	ldrb	r3, [r7, #7]
}
   a3d8a:	4618      	mov	r0, r3
   a3d8c:	3708      	adds	r7, #8
   a3d8e:	46bd      	mov	sp, r7
   a3d90:	bd80      	pop	{r7, pc}
   a3d92:	bf00      	nop
   a3d94:	0009b635 	.word	0x0009b635
   a3d98:	20071dcf 	.word	0x20071dcf
   a3d9c:	20071dd8 	.word	0x20071dd8
   a3da0:	20071dd4 	.word	0x20071dd4
   a3da4:	0009b3d5 	.word	0x0009b3d5
   a3da8:	00089381 	.word	0x00089381
   a3dac:	00082ee1 	.word	0x00082ee1
   a3db0:	0009d1e9 	.word	0x0009d1e9
   a3db4:	000a3db9 	.word	0x000a3db9

000a3db8 <Cl_deactivate_prep_alarms>:

Cl_ReturnCodeType Cl_deactivate_prep_alarms(){
   a3db8:	b580      	push	{r7, lr}
   a3dba:	b082      	sub	sp, #8
   a3dbc:	af00      	add	r7, sp, #0
	
	
	Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   a3dbe:	2300      	movs	r3, #0
   a3dc0:	71fb      	strb	r3, [r7, #7]
		
		
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_CLOSED,false );
   a3dc2:	202a      	movs	r0, #42	; 0x2a
   a3dc4:	2100      	movs	r1, #0
   a3dc6:	4b51      	ldr	r3, [pc, #324]	; (a3f0c <Cl_deactivate_prep_alarms+0x154>)
   a3dc8:	4798      	blx	r3
   a3dca:	4603      	mov	r3, r0
   a3dcc:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_CLOSED,false );
   a3dce:	202c      	movs	r0, #44	; 0x2c
   a3dd0:	2100      	movs	r1, #0
   a3dd2:	4b4e      	ldr	r3, [pc, #312]	; (a3f0c <Cl_deactivate_prep_alarms+0x154>)
   a3dd4:	4798      	blx	r3
   a3dd6:	4603      	mov	r3, r0
   a3dd8:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_CLOSED,false );
   a3dda:	2005      	movs	r0, #5
   a3ddc:	2100      	movs	r1, #0
   a3dde:	4b4b      	ldr	r3, [pc, #300]	; (a3f0c <Cl_deactivate_prep_alarms+0x154>)
   a3de0:	4798      	blx	r3
   a3de2:	4603      	mov	r3, r0
   a3de4:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_CLOSED,false );
   a3de6:	2006      	movs	r0, #6
   a3de8:	2100      	movs	r1, #0
   a3dea:	4b48      	ldr	r3, [pc, #288]	; (a3f0c <Cl_deactivate_prep_alarms+0x154>)
   a3dec:	4798      	blx	r3
   a3dee:	4603      	mov	r3, r0
   a3df0:	71fb      	strb	r3, [r7, #7]
		
		
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a3df2:	2029      	movs	r0, #41	; 0x29
   a3df4:	2100      	movs	r1, #0
   a3df6:	4b45      	ldr	r3, [pc, #276]	; (a3f0c <Cl_deactivate_prep_alarms+0x154>)
   a3df8:	4798      	blx	r3
   a3dfa:	4603      	mov	r3, r0
   a3dfc:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a3dfe:	202b      	movs	r0, #43	; 0x2b
   a3e00:	2100      	movs	r1, #0
   a3e02:	4b42      	ldr	r3, [pc, #264]	; (a3f0c <Cl_deactivate_prep_alarms+0x154>)
   a3e04:	4798      	blx	r3
   a3e06:	4603      	mov	r3, r0
   a3e08:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a3e0a:	2003      	movs	r0, #3
   a3e0c:	2100      	movs	r1, #0
   a3e0e:	4b3f      	ldr	r3, [pc, #252]	; (a3f0c <Cl_deactivate_prep_alarms+0x154>)
   a3e10:	4798      	blx	r3
   a3e12:	4603      	mov	r3, r0
   a3e14:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a3e16:	2004      	movs	r0, #4
   a3e18:	2100      	movs	r1, #0
   a3e1a:	4b3c      	ldr	r3, [pc, #240]	; (a3f0c <Cl_deactivate_prep_alarms+0x154>)
   a3e1c:	4798      	blx	r3
   a3e1e:	4603      	mov	r3, r0
   a3e20:	71fb      	strb	r3, [r7, #7]
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,false );
   a3e22:	2015      	movs	r0, #21
   a3e24:	2100      	movs	r1, #0
   a3e26:	4b39      	ldr	r3, [pc, #228]	; (a3f0c <Cl_deactivate_prep_alarms+0x154>)
   a3e28:	4798      	blx	r3
   a3e2a:	4603      	mov	r3, r0
   a3e2c:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,false );
   a3e2e:	2016      	movs	r0, #22
   a3e30:	2100      	movs	r1, #0
   a3e32:	4b36      	ldr	r3, [pc, #216]	; (a3f0c <Cl_deactivate_prep_alarms+0x154>)
   a3e34:	4798      	blx	r3
   a3e36:	4603      	mov	r3, r0
   a3e38:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
   a3e3a:	2017      	movs	r0, #23
   a3e3c:	2100      	movs	r1, #0
   a3e3e:	4b33      	ldr	r3, [pc, #204]	; (a3f0c <Cl_deactivate_prep_alarms+0x154>)
   a3e40:	4798      	blx	r3
   a3e42:	4603      	mov	r3, r0
   a3e44:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
   a3e46:	2018      	movs	r0, #24
   a3e48:	2100      	movs	r1, #0
   a3e4a:	4b30      	ldr	r3, [pc, #192]	; (a3f0c <Cl_deactivate_prep_alarms+0x154>)
   a3e4c:	4798      	blx	r3
   a3e4e:	4603      	mov	r3, r0
   a3e50:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,false );
   a3e52:	2027      	movs	r0, #39	; 0x27
   a3e54:	2100      	movs	r1, #0
   a3e56:	4b2d      	ldr	r3, [pc, #180]	; (a3f0c <Cl_deactivate_prep_alarms+0x154>)
   a3e58:	4798      	blx	r3
   a3e5a:	4603      	mov	r3, r0
   a3e5c:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD,false );
   a3e5e:	2028      	movs	r0, #40	; 0x28
   a3e60:	2100      	movs	r1, #0
   a3e62:	4b2a      	ldr	r3, [pc, #168]	; (a3f0c <Cl_deactivate_prep_alarms+0x154>)
   a3e64:	4798      	blx	r3
   a3e66:	4603      	mov	r3, r0
   a3e68:	71fb      	strb	r3, [r7, #7]
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,false );
   a3e6a:	200f      	movs	r0, #15
   a3e6c:	2100      	movs	r1, #0
   a3e6e:	4b27      	ldr	r3, [pc, #156]	; (a3f0c <Cl_deactivate_prep_alarms+0x154>)
   a3e70:	4798      	blx	r3
   a3e72:	4603      	mov	r3, r0
   a3e74:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,false );
   a3e76:	2010      	movs	r0, #16
   a3e78:	2100      	movs	r1, #0
   a3e7a:	4b24      	ldr	r3, [pc, #144]	; (a3f0c <Cl_deactivate_prep_alarms+0x154>)
   a3e7c:	4798      	blx	r3
   a3e7e:	4603      	mov	r3, r0
   a3e80:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,false );
   a3e82:	2011      	movs	r0, #17
   a3e84:	2100      	movs	r1, #0
   a3e86:	4b21      	ldr	r3, [pc, #132]	; (a3f0c <Cl_deactivate_prep_alarms+0x154>)
   a3e88:	4798      	blx	r3
   a3e8a:	4603      	mov	r3, r0
   a3e8c:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,false );
   a3e8e:	2012      	movs	r0, #18
   a3e90:	2100      	movs	r1, #0
   a3e92:	4b1e      	ldr	r3, [pc, #120]	; (a3f0c <Cl_deactivate_prep_alarms+0x154>)
   a3e94:	4798      	blx	r3
   a3e96:	4603      	mov	r3, r0
   a3e98:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   a3e9a:	2013      	movs	r0, #19
   a3e9c:	2100      	movs	r1, #0
   a3e9e:	4b1b      	ldr	r3, [pc, #108]	; (a3f0c <Cl_deactivate_prep_alarms+0x154>)
   a3ea0:	4798      	blx	r3
   a3ea2:	4603      	mov	r3, r0
   a3ea4:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   a3ea6:	2014      	movs	r0, #20
   a3ea8:	2100      	movs	r1, #0
   a3eaa:	4b18      	ldr	r3, [pc, #96]	; (a3f0c <Cl_deactivate_prep_alarms+0x154>)
   a3eac:	4798      	blx	r3
   a3eae:	4603      	mov	r3, r0
   a3eb0:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   a3eb2:	2008      	movs	r0, #8
   a3eb4:	2100      	movs	r1, #0
   a3eb6:	4b15      	ldr	r3, [pc, #84]	; (a3f0c <Cl_deactivate_prep_alarms+0x154>)
   a3eb8:	4798      	blx	r3
   a3eba:	4603      	mov	r3, r0
   a3ebc:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   a3ebe:	2007      	movs	r0, #7
   a3ec0:	2100      	movs	r1, #0
   a3ec2:	4b12      	ldr	r3, [pc, #72]	; (a3f0c <Cl_deactivate_prep_alarms+0x154>)
   a3ec4:	4798      	blx	r3
   a3ec6:	4603      	mov	r3, r0
   a3ec8:	71fb      	strb	r3, [r7, #7]
			Cl_AlarmActivateAlarms(BC_ALARM,false);
   a3eca:	201a      	movs	r0, #26
   a3ecc:	2100      	movs	r1, #0
   a3ece:	4b0f      	ldr	r3, [pc, #60]	; (a3f0c <Cl_deactivate_prep_alarms+0x154>)
   a3ed0:	4798      	blx	r3
			
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );
   a3ed2:	200c      	movs	r0, #12
   a3ed4:	2100      	movs	r1, #0
   a3ed6:	4b0d      	ldr	r3, [pc, #52]	; (a3f0c <Cl_deactivate_prep_alarms+0x154>)
   a3ed8:	4798      	blx	r3
   a3eda:	4603      	mov	r3, r0
   a3edc:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a3ede:	200d      	movs	r0, #13
   a3ee0:	2100      	movs	r1, #0
   a3ee2:	4b0a      	ldr	r3, [pc, #40]	; (a3f0c <Cl_deactivate_prep_alarms+0x154>)
   a3ee4:	4798      	blx	r3
   a3ee6:	4603      	mov	r3, r0
   a3ee8:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );
   a3eea:	200e      	movs	r0, #14
   a3eec:	2100      	movs	r1, #0
   a3eee:	4b07      	ldr	r3, [pc, #28]	; (a3f0c <Cl_deactivate_prep_alarms+0x154>)
   a3ef0:	4798      	blx	r3
   a3ef2:	4603      	mov	r3, r0
   a3ef4:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BP_STOPPED,false );
   a3ef6:	203f      	movs	r0, #63	; 0x3f
   a3ef8:	2100      	movs	r1, #0
   a3efa:	4b04      	ldr	r3, [pc, #16]	; (a3f0c <Cl_deactivate_prep_alarms+0x154>)
   a3efc:	4798      	blx	r3
   a3efe:	4603      	mov	r3, r0
   a3f00:	71fb      	strb	r3, [r7, #7]
	
	
	
}
   a3f02:	4618      	mov	r0, r3
   a3f04:	3708      	adds	r7, #8
   a3f06:	46bd      	mov	sp, r7
   a3f08:	bd80      	pop	{r7, pc}
   a3f0a:	bf00      	nop
   a3f0c:	00082a35 	.word	0x00082a35

000a3f10 <Cl_Rinse_Controller>:
	{CONSOLE_SYNC_LOST,CL_ALARM_ALERT,false,false,false}                        // added on 18.03.17
			
};

Cl_ReturnCodeType Cl_Rinse_Controller(Cl_Mac_EventsType Cl_MacRinseEvent   )
{
   a3f10:	b580      	push	{r7, lr}
   a3f12:	b092      	sub	sp, #72	; 0x48
   a3f14:	af00      	add	r7, sp, #0
   a3f16:	4603      	mov	r3, r0
   a3f18:	71fb      	strb	r3, [r7, #7]
	
	Cl_ReturnCodeType  Cl_rinseretcode = CL_OK;
   a3f1a:	2300      	movs	r3, #0
   a3f1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	Cl_Rinse_Eevents cl_rinseevent = EVENT_NULL;
   a3f20:	2300      	movs	r3, #0
   a3f22:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	Cl_NewAlarmIdType cl_rinsealarmid;
	ClRinseAlarmIdType ClRinseAlarmId;

	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a3f26:	2359      	movs	r3, #89	; 0x59
   a3f28:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	Cl_Uint8Type dataarray[4] = {0,0,0,0};
   a3f2c:	2300      	movs	r3, #0
   a3f2e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
   a3f32:	2300      	movs	r3, #0
   a3f34:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
   a3f38:	2300      	movs	r3, #0
   a3f3a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
   a3f3e:	2300      	movs	r3, #0
   a3f40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	Cl_Uint8Type data = 0;
   a3f44:	2300      	movs	r3, #0
   a3f46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	Cl_BoolType alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false, flowstatus = false;
   a3f4a:	2300      	movs	r3, #0
   a3f4c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
   a3f50:	2300      	movs	r3, #0
   a3f52:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
   a3f56:	2300      	movs	r3, #0
   a3f58:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
   a3f5c:	2300      	movs	r3, #0
   a3f5e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

StateDatatype abfdata;
Cl_Uint8Type abfdataarray[5] =  {0,0,0,0,0};
   a3f62:	2300      	movs	r3, #0
   a3f64:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
   a3f68:	2300      	movs	r3, #0
   a3f6a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
   a3f6e:	2300      	movs	r3, #0
   a3f70:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
   a3f74:	2300      	movs	r3, #0
   a3f76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   a3f7a:	2300      	movs	r3, #0
   a3f7c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30


cl_rinse_translatemacevent( Cl_MacRinseEvent, &cl_rinseevent);
   a3f80:	79fa      	ldrb	r2, [r7, #7]
   a3f82:	f107 0341 	add.w	r3, r7, #65	; 0x41
   a3f86:	4610      	mov	r0, r2
   a3f88:	4619      	mov	r1, r3
   a3f8a:	4bb2      	ldr	r3, [pc, #712]	; (a4254 <Cl_Rinse_Controller+0x344>)
   a3f8c:	4798      	blx	r3

switch(cl_rinseevent)
   a3f8e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   a3f92:	3b21      	subs	r3, #33	; 0x21
   a3f94:	2b3b      	cmp	r3, #59	; 0x3b
   a3f96:	f200 8173 	bhi.w	a4280 <Cl_Rinse_Controller+0x370>
   a3f9a:	a201      	add	r2, pc, #4	; (adr r2, a3fa0 <Cl_Rinse_Controller+0x90>)
   a3f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a3fa0:	000a4091 	.word	0x000a4091
   a3fa4:	000a40a9 	.word	0x000a40a9
   a3fa8:	000a40e3 	.word	0x000a40e3
   a3fac:	000a4121 	.word	0x000a4121
   a3fb0:	000a4185 	.word	0x000a4185
   a3fb4:	000a418f 	.word	0x000a418f
   a3fb8:	000a4281 	.word	0x000a4281
   a3fbc:	000a40dd 	.word	0x000a40dd
   a3fc0:	000a4281 	.word	0x000a4281
   a3fc4:	000a4281 	.word	0x000a4281
   a3fc8:	000a4281 	.word	0x000a4281
   a3fcc:	000a4281 	.word	0x000a4281
   a3fd0:	000a4281 	.word	0x000a4281
   a3fd4:	000a4281 	.word	0x000a4281
   a3fd8:	000a4281 	.word	0x000a4281
   a3fdc:	000a4281 	.word	0x000a4281
   a3fe0:	000a4281 	.word	0x000a4281
   a3fe4:	000a4281 	.word	0x000a4281
   a3fe8:	000a4281 	.word	0x000a4281
   a3fec:	000a4281 	.word	0x000a4281
   a3ff0:	000a4281 	.word	0x000a4281
   a3ff4:	000a4281 	.word	0x000a4281
   a3ff8:	000a4281 	.word	0x000a4281
   a3ffc:	000a4281 	.word	0x000a4281
   a4000:	000a4281 	.word	0x000a4281
   a4004:	000a4281 	.word	0x000a4281
   a4008:	000a4281 	.word	0x000a4281
   a400c:	000a4281 	.word	0x000a4281
   a4010:	000a4281 	.word	0x000a4281
   a4014:	000a4281 	.word	0x000a4281
   a4018:	000a4281 	.word	0x000a4281
   a401c:	000a4281 	.word	0x000a4281
   a4020:	000a4281 	.word	0x000a4281
   a4024:	000a4281 	.word	0x000a4281
   a4028:	000a4281 	.word	0x000a4281
   a402c:	000a4281 	.word	0x000a4281
   a4030:	000a4281 	.word	0x000a4281
   a4034:	000a4281 	.word	0x000a4281
   a4038:	000a4281 	.word	0x000a4281
   a403c:	000a4281 	.word	0x000a4281
   a4040:	000a4281 	.word	0x000a4281
   a4044:	000a4281 	.word	0x000a4281
   a4048:	000a4281 	.word	0x000a4281
   a404c:	000a4281 	.word	0x000a4281
   a4050:	000a4281 	.word	0x000a4281
   a4054:	000a4281 	.word	0x000a4281
   a4058:	000a4281 	.word	0x000a4281
   a405c:	000a4281 	.word	0x000a4281
   a4060:	000a4281 	.word	0x000a4281
   a4064:	000a4281 	.word	0x000a4281
   a4068:	000a4281 	.word	0x000a4281
   a406c:	000a4281 	.word	0x000a4281
   a4070:	000a4281 	.word	0x000a4281
   a4074:	000a4281 	.word	0x000a4281
   a4078:	000a4281 	.word	0x000a4281
   a407c:	000a4281 	.word	0x000a4281
   a4080:	000a4281 	.word	0x000a4281
   a4084:	000a4281 	.word	0x000a4281
   a4088:	000a4199 	.word	0x000a4199
   a408c:	000a41f7 	.word	0x000a41f7
{
	
	case EVT_RINSE_COMMAND_SET_BLDPMP_ON:
	Cl_rinseretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
   a4090:	2001      	movs	r0, #1
   a4092:	2101      	movs	r1, #1
   a4094:	4b70      	ldr	r3, [pc, #448]	; (a4258 <Cl_Rinse_Controller+0x348>)
   a4096:	4798      	blx	r3
   a4098:	4603      	mov	r3, r0
   a409a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
	cl_bp_controller(CL_BP_EVENT_START,0);
   a409e:	2002      	movs	r0, #2
   a40a0:	2100      	movs	r1, #0
   a40a2:	4b6e      	ldr	r3, [pc, #440]	; (a425c <Cl_Rinse_Controller+0x34c>)
   a40a4:	4798      	blx	r3
	break;
   a40a6:	e0ec      	b.n	a4282 <Cl_Rinse_Controller+0x372>
	case EVT_RINSE_COMMAND_SET_BLDPMP_OFF:
	Cl_rinseretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false);
   a40a8:	2001      	movs	r0, #1
   a40aa:	2100      	movs	r1, #0
   a40ac:	4b6a      	ldr	r3, [pc, #424]	; (a4258 <Cl_Rinse_Controller+0x348>)
   a40ae:	4798      	blx	r3
   a40b0:	4603      	mov	r3, r0
   a40b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	cl_bp_controller(CL_BP_EVENT_STOP,0);
   a40b6:	2004      	movs	r0, #4
   a40b8:	2100      	movs	r1, #0
   a40ba:	4b68      	ldr	r3, [pc, #416]	; (a425c <Cl_Rinse_Controller+0x34c>)
   a40bc:	4798      	blx	r3
	// manav02 added to stop saline priming if blood pump is stopped
	if(blood_flag == 1){
   a40be:	4b68      	ldr	r3, [pc, #416]	; (a4260 <Cl_Rinse_Controller+0x350>)
   a40c0:	781b      	ldrb	r3, [r3, #0]
   a40c2:	b2db      	uxtb	r3, r3
   a40c4:	2b01      	cmp	r3, #1
   a40c6:	d108      	bne.n	a40da <Cl_Rinse_Controller+0x1ca>
		cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0); 
   a40c8:	2002      	movs	r0, #2
   a40ca:	2100      	movs	r1, #0
   a40cc:	4b65      	ldr	r3, [pc, #404]	; (a4264 <Cl_Rinse_Controller+0x354>)
   a40ce:	4798      	blx	r3
		Cl_Alarm_TriggerAlarm(BP_STOPPED,1);
   a40d0:	203f      	movs	r0, #63	; 0x3f
   a40d2:	2101      	movs	r1, #1
   a40d4:	4b64      	ldr	r3, [pc, #400]	; (a4268 <Cl_Rinse_Controller+0x358>)
   a40d6:	4798      	blx	r3
	}
		
	
//	Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsActive = false;
	break;
   a40d8:	e0d3      	b.n	a4282 <Cl_Rinse_Controller+0x372>
   a40da:	e0d2      	b.n	a4282 <Cl_Rinse_Controller+0x372>
	
	case EVT_RINSE_MUTE :
	sv_cntrl_nobuzzer();
   a40dc:	4b63      	ldr	r3, [pc, #396]	; (a426c <Cl_Rinse_Controller+0x35c>)
   a40de:	4798      	blx	r3
	break;
   a40e0:	e0cf      	b.n	a4282 <Cl_Rinse_Controller+0x372>
	
	case EVT_RINSE_COMMAND_SET_BLDPUMPRATE:
	if(Cl_ConsoleRxMsg.msgready == true)
   a40e2:	4b63      	ldr	r3, [pc, #396]	; (a4270 <Cl_Rinse_Controller+0x360>)
   a40e4:	7e1b      	ldrb	r3, [r3, #24]
   a40e6:	2b00      	cmp	r3, #0
   a40e8:	d019      	beq.n	a411e <Cl_Rinse_Controller+0x20e>
	{
		
		cl_Datastreamtype cl_temp  ;
		cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a40ea:	4b61      	ldr	r3, [pc, #388]	; (a4270 <Cl_Rinse_Controller+0x360>)
   a40ec:	791b      	ldrb	r3, [r3, #4]
   a40ee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   a40f2:	4b5f      	ldr	r3, [pc, #380]	; (a4270 <Cl_Rinse_Controller+0x360>)
   a40f4:	795b      	ldrb	r3, [r3, #5]
   a40f6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   a40fa:	4b5d      	ldr	r3, [pc, #372]	; (a4270 <Cl_Rinse_Controller+0x360>)
   a40fc:	799b      	ldrb	r3, [r3, #6]
   a40fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   a4102:	4b5b      	ldr	r3, [pc, #364]	; (a4270 <Cl_Rinse_Controller+0x360>)
   a4104:	79db      	ldrb	r3, [r3, #7]
   a4106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   a410a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   a410c:	2001      	movs	r0, #1
   a410e:	4619      	mov	r1, r3
   a4110:	4b52      	ldr	r3, [pc, #328]	; (a425c <Cl_Rinse_Controller+0x34c>)
   a4112:	4798      	blx	r3
		Treatdata[ID_bloodrate] = cl_temp.Twobyte;
   a4114:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   a4116:	461a      	mov	r2, r3
   a4118:	4b56      	ldr	r3, [pc, #344]	; (a4274 <Cl_Rinse_Controller+0x364>)
   a411a:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	break;
   a411c:	e0b1      	b.n	a4282 <Cl_Rinse_Controller+0x372>
   a411e:	e0b0      	b.n	a4282 <Cl_Rinse_Controller+0x372>
	
	case EVENT_RINSE_HEP_PMP_START:
	if(Cl_ConsoleRxMsg.msgready == true)
   a4120:	4b53      	ldr	r3, [pc, #332]	; (a4270 <Cl_Rinse_Controller+0x360>)
   a4122:	7e1b      	ldrb	r3, [r3, #24]
   a4124:	2b00      	cmp	r3, #0
   a4126:	d02c      	beq.n	a4182 <Cl_Rinse_Controller+0x272>
			
	{
		cl_Datastreamtype cl_temp  ;
		cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   a4128:	4b51      	ldr	r3, [pc, #324]	; (a4270 <Cl_Rinse_Controller+0x360>)
   a412a:	795b      	ldrb	r3, [r3, #5]
   a412c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   a4130:	4b4f      	ldr	r3, [pc, #316]	; (a4270 <Cl_Rinse_Controller+0x360>)
   a4132:	799b      	ldrb	r3, [r3, #6]
   a4134:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   a4138:	4b4d      	ldr	r3, [pc, #308]	; (a4270 <Cl_Rinse_Controller+0x360>)
   a413a:	79db      	ldrb	r3, [r3, #7]
   a413c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   a4140:	4b4b      	ldr	r3, [pc, #300]	; (a4270 <Cl_Rinse_Controller+0x360>)
   a4142:	7a1b      	ldrb	r3, [r3, #8]
   a4144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				
		if(Cl_ConsoleRxMsg.data.byte[0] == 1)
   a4148:	4b49      	ldr	r3, [pc, #292]	; (a4270 <Cl_Rinse_Controller+0x360>)
   a414a:	791b      	ldrb	r3, [r3, #4]
   a414c:	2b01      	cmp	r3, #1
   a414e:	d104      	bne.n	a415a <Cl_Rinse_Controller+0x24a>
		{
			cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
   a4150:	2001      	movs	r0, #1
   a4152:	2100      	movs	r1, #0
   a4154:	4b48      	ldr	r3, [pc, #288]	; (a4278 <Cl_Rinse_Controller+0x368>)
   a4156:	4798      	blx	r3
   a4158:	e013      	b.n	a4182 <Cl_Rinse_Controller+0x272>
					
		}
		else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
   a415a:	4b45      	ldr	r3, [pc, #276]	; (a4270 <Cl_Rinse_Controller+0x360>)
   a415c:	791b      	ldrb	r3, [r3, #4]
   a415e:	2b02      	cmp	r3, #2
   a4160:	d104      	bne.n	a416c <Cl_Rinse_Controller+0x25c>
		{
			cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
   a4162:	2004      	movs	r0, #4
   a4164:	2100      	movs	r1, #0
   a4166:	4b44      	ldr	r3, [pc, #272]	; (a4278 <Cl_Rinse_Controller+0x368>)
   a4168:	4798      	blx	r3
   a416a:	e00a      	b.n	a4182 <Cl_Rinse_Controller+0x272>
		}
		else if(Cl_ConsoleRxMsg.data.byte[0] == 0)
   a416c:	4b40      	ldr	r3, [pc, #256]	; (a4270 <Cl_Rinse_Controller+0x360>)
   a416e:	791b      	ldrb	r3, [r3, #4]
   a4170:	2b00      	cmp	r3, #0
   a4172:	d106      	bne.n	a4182 <Cl_Rinse_Controller+0x272>
		{
			cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,Treatdata[ID_heprate]);
   a4174:	4b3f      	ldr	r3, [pc, #252]	; (a4274 <Cl_Rinse_Controller+0x364>)
   a4176:	69db      	ldr	r3, [r3, #28]
   a4178:	200b      	movs	r0, #11
   a417a:	4619      	mov	r1, r3
   a417c:	4b3e      	ldr	r3, [pc, #248]	; (a4278 <Cl_Rinse_Controller+0x368>)
   a417e:	4798      	blx	r3
		}
				
	}
			
			
	break;
   a4180:	e07f      	b.n	a4282 <Cl_Rinse_Controller+0x372>
   a4182:	e07e      	b.n	a4282 <Cl_Rinse_Controller+0x372>
	case EVENT_RINSE_HEP_PMP_STOP:
	cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
   a4184:	200d      	movs	r0, #13
   a4186:	2100      	movs	r1, #0
   a4188:	4b3b      	ldr	r3, [pc, #236]	; (a4278 <Cl_Rinse_Controller+0x368>)
   a418a:	4798      	blx	r3
	break;
   a418c:	e079      	b.n	a4282 <Cl_Rinse_Controller+0x372>
	case EVENT_RINSE_HEP_PMP_BLOUS:
	cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
   a418e:	2007      	movs	r0, #7
   a4190:	2100      	movs	r1, #0
   a4192:	4b39      	ldr	r3, [pc, #228]	; (a4278 <Cl_Rinse_Controller+0x368>)
   a4194:	4798      	blx	r3
	break;
   a4196:	e074      	b.n	a4282 <Cl_Rinse_Controller+0x372>
	
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		
		if(Treatdata[ID_bloodrate] <= 450){
   a4198:	4b36      	ldr	r3, [pc, #216]	; (a4274 <Cl_Rinse_Controller+0x364>)
   a419a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a419c:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
   a41a0:	d828      	bhi.n	a41f4 <Cl_Rinse_Controller+0x2e4>
			
			Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] + 10;
   a41a2:	4b34      	ldr	r3, [pc, #208]	; (a4274 <Cl_Rinse_Controller+0x364>)
   a41a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a41a6:	330a      	adds	r3, #10
   a41a8:	4a32      	ldr	r2, [pc, #200]	; (a4274 <Cl_Rinse_Controller+0x364>)
   a41aa:	63d3      	str	r3, [r2, #60]	; 0x3c
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   a41ac:	4b31      	ldr	r3, [pc, #196]	; (a4274 <Cl_Rinse_Controller+0x364>)
   a41ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a41b0:	2001      	movs	r0, #1
   a41b2:	4619      	mov	r1, r3
   a41b4:	4b29      	ldr	r3, [pc, #164]	; (a425c <Cl_Rinse_Controller+0x34c>)
   a41b6:	4798      	blx	r3
			
			// send blood rate data to console
			
			
			abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   a41b8:	230f      	movs	r3, #15
   a41ba:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			abfdata.fourbytedata = Treatdata[ID_bloodrate];
   a41be:	4b2d      	ldr	r3, [pc, #180]	; (a4274 <Cl_Rinse_Controller+0x364>)
   a41c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a41c2:	637b      	str	r3, [r7, #52]	; 0x34
			abfdataarray[1] = abfdata.bytedata[0];
   a41c4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
   a41c8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			abfdataarray[2] = abfdata.bytedata[1];
   a41cc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
   a41d0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			abfdataarray[3] = abfdata.bytedata[2];
   a41d4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
   a41d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			abfdataarray[4] = abfdata.bytedata[3];
   a41dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   a41e0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   a41e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   a41e8:	202a      	movs	r0, #42	; 0x2a
   a41ea:	4619      	mov	r1, r3
   a41ec:	2205      	movs	r2, #5
   a41ee:	4b23      	ldr	r3, [pc, #140]	; (a427c <Cl_Rinse_Controller+0x36c>)
   a41f0:	4798      	blx	r3
			
		}
		
		cl_rinseevent == EVENT_NULL;
		break;
   a41f2:	e046      	b.n	a4282 <Cl_Rinse_Controller+0x372>
   a41f4:	e045      	b.n	a4282 <Cl_Rinse_Controller+0x372>
		
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		
		if(Treatdata[ID_bloodrate] >= 100){
   a41f6:	4b1f      	ldr	r3, [pc, #124]	; (a4274 <Cl_Rinse_Controller+0x364>)
   a41f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a41fa:	2b63      	cmp	r3, #99	; 0x63
   a41fc:	d928      	bls.n	a4250 <Cl_Rinse_Controller+0x340>
			
			Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] - 10;
   a41fe:	4b1d      	ldr	r3, [pc, #116]	; (a4274 <Cl_Rinse_Controller+0x364>)
   a4200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a4202:	3b0a      	subs	r3, #10
   a4204:	4a1b      	ldr	r2, [pc, #108]	; (a4274 <Cl_Rinse_Controller+0x364>)
   a4206:	63d3      	str	r3, [r2, #60]	; 0x3c
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   a4208:	4b1a      	ldr	r3, [pc, #104]	; (a4274 <Cl_Rinse_Controller+0x364>)
   a420a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a420c:	2001      	movs	r0, #1
   a420e:	4619      	mov	r1, r3
   a4210:	4b12      	ldr	r3, [pc, #72]	; (a425c <Cl_Rinse_Controller+0x34c>)
   a4212:	4798      	blx	r3
			
			
			abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   a4214:	230f      	movs	r3, #15
   a4216:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			abfdata.fourbytedata = Treatdata[ID_bloodrate];
   a421a:	4b16      	ldr	r3, [pc, #88]	; (a4274 <Cl_Rinse_Controller+0x364>)
   a421c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a421e:	637b      	str	r3, [r7, #52]	; 0x34
			abfdataarray[1] = abfdata.bytedata[0];
   a4220:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
   a4224:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			abfdataarray[2] = abfdata.bytedata[1];
   a4228:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
   a422c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			abfdataarray[3] = abfdata.bytedata[2];
   a4230:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
   a4234:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			abfdataarray[4] = abfdata.bytedata[3];
   a4238:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   a423c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   a4240:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   a4244:	202a      	movs	r0, #42	; 0x2a
   a4246:	4619      	mov	r1, r3
   a4248:	2205      	movs	r2, #5
   a424a:	4b0c      	ldr	r3, [pc, #48]	; (a427c <Cl_Rinse_Controller+0x36c>)
   a424c:	4798      	blx	r3
		}
		
		cl_rinseevent == EVENT_NULL;
		break;
   a424e:	e018      	b.n	a4282 <Cl_Rinse_Controller+0x372>
   a4250:	e017      	b.n	a4282 <Cl_Rinse_Controller+0x372>
   a4252:	bf00      	nop
   a4254:	000a537d 	.word	0x000a537d
   a4258:	00082a35 	.word	0x00082a35
   a425c:	00094325 	.word	0x00094325
   a4260:	20071dec 	.word	0x20071dec
   a4264:	000880c1 	.word	0x000880c1
   a4268:	00082c75 	.word	0x00082c75
   a426c:	0009b6c1 	.word	0x0009b6c1
   a4270:	200725bc 	.word	0x200725bc
   a4274:	20072880 	.word	0x20072880
   a4278:	00094b61 	.word	0x00094b61
   a427c:	0009d1e9 	.word	0x0009d1e9
		
	
	
	default:break;	
   a4280:	bf00      	nop
}

if(cl_rinseevent == EVENT_RINSE_TICK_SECOND)
   a4282:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   a4286:	2b12      	cmp	r3, #18
   a4288:	d10f      	bne.n	a42aa <Cl_Rinse_Controller+0x39a>
{
	Rinsestatedummy = cl_rinsestate;
   a428a:	4ba7      	ldr	r3, [pc, #668]	; (a4528 <Cl_Rinse_Controller+0x618>)
   a428c:	781a      	ldrb	r2, [r3, #0]
   a428e:	4ba7      	ldr	r3, [pc, #668]	; (a452c <Cl_Rinse_Controller+0x61c>)
   a4290:	701a      	strb	r2, [r3, #0]
	//Cl_rinseretcode =  Cl_AlarmResetAlarm( SENSOR_TEMP3STATUS );
	Cl_rinseretcode =  Cl_AlarmResetAlarm( LEVELSWITCH_OFF_TO_ON );
   a4292:	203d      	movs	r0, #61	; 0x3d
   a4294:	4ba6      	ldr	r3, [pc, #664]	; (a4530 <Cl_Rinse_Controller+0x620>)
   a4296:	4798      	blx	r3
   a4298:	4603      	mov	r3, r0
   a429a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	Cl_rinseretcode =  Cl_AlarmResetAlarm( LEVELSWITCH_ON_TO_OFF );
   a429e:	203e      	movs	r0, #62	; 0x3e
   a42a0:	4ba3      	ldr	r3, [pc, #652]	; (a4530 <Cl_Rinse_Controller+0x620>)
   a42a2:	4798      	blx	r3
   a42a4:	4603      	mov	r3, r0
   a42a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47


}


switch(cl_rinsestate)
   a42aa:	4b9f      	ldr	r3, [pc, #636]	; (a4528 <Cl_Rinse_Controller+0x618>)
   a42ac:	781b      	ldrb	r3, [r3, #0]
   a42ae:	2b09      	cmp	r3, #9
   a42b0:	f200 87c8 	bhi.w	a5244 <Cl_Rinse_Controller+0x1334>
   a42b4:	a201      	add	r2, pc, #4	; (adr r2, a42bc <Cl_Rinse_Controller+0x3ac>)
   a42b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a42ba:	bf00      	nop
   a42bc:	000a42e5 	.word	0x000a42e5
   a42c0:	000a5351 	.word	0x000a5351
   a42c4:	000a5245 	.word	0x000a5245
   a42c8:	000a456d 	.word	0x000a456d
   a42cc:	000a456d 	.word	0x000a456d
   a42d0:	000a456d 	.word	0x000a456d
   a42d4:	000a4c45 	.word	0x000a4c45
   a42d8:	000a5245 	.word	0x000a5245
   a42dc:	000a5245 	.word	0x000a5245
   a42e0:	000a4fb3 	.word	0x000a4fb3
{

		case CL_RINSE_STATE_INIT:
		break;
		case CL_RINSE_STATE_IDLE:
		switch (cl_rinseevent)
   a42e4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   a42e8:	3b01      	subs	r3, #1
   a42ea:	2b16      	cmp	r3, #22
   a42ec:	f200 8118 	bhi.w	a4520 <Cl_Rinse_Controller+0x610>
   a42f0:	a201      	add	r2, pc, #4	; (adr r2, a42f8 <Cl_Rinse_Controller+0x3e8>)
   a42f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a42f6:	bf00      	nop
   a42f8:	000a44eb 	.word	0x000a44eb
   a42fc:	000a441f 	.word	0x000a441f
   a4300:	000a4521 	.word	0x000a4521
   a4304:	000a44af 	.word	0x000a44af
   a4308:	000a44c7 	.word	0x000a44c7
   a430c:	000a4521 	.word	0x000a4521
   a4310:	000a4521 	.word	0x000a4521
   a4314:	000a4521 	.word	0x000a4521
   a4318:	000a4521 	.word	0x000a4521
   a431c:	000a4521 	.word	0x000a4521
   a4320:	000a4521 	.word	0x000a4521
   a4324:	000a4521 	.word	0x000a4521
   a4328:	000a4521 	.word	0x000a4521
   a432c:	000a4521 	.word	0x000a4521
   a4330:	000a4521 	.word	0x000a4521
   a4334:	000a4521 	.word	0x000a4521
   a4338:	000a4521 	.word	0x000a4521
   a433c:	000a4521 	.word	0x000a4521
   a4340:	000a4521 	.word	0x000a4521
   a4344:	000a4521 	.word	0x000a4521
   a4348:	000a4521 	.word	0x000a4521
   a434c:	000a44df 	.word	0x000a44df
   a4350:	000a4355 	.word	0x000a4355
			{
				case EVT_RINSE_GET_DATA:
						if(Cl_ConsoleRxMsg.msgready == true)
   a4354:	4b77      	ldr	r3, [pc, #476]	; (a4534 <Cl_Rinse_Controller+0x624>)
   a4356:	7e1b      	ldrb	r3, [r3, #24]
   a4358:	2b00      	cmp	r3, #0
   a435a:	d05f      	beq.n	a441c <Cl_Rinse_Controller+0x50c>
						{
							
							switch(Cl_ConsoleRxMsg.data.byte[0])
   a435c:	4b75      	ldr	r3, [pc, #468]	; (a4534 <Cl_Rinse_Controller+0x624>)
   a435e:	791b      	ldrb	r3, [r3, #4]
   a4360:	2b02      	cmp	r3, #2
   a4362:	d021      	beq.n	a43a8 <Cl_Rinse_Controller+0x498>
   a4364:	2b21      	cmp	r3, #33	; 0x21
   a4366:	d03c      	beq.n	a43e2 <Cl_Rinse_Controller+0x4d2>
   a4368:	2b01      	cmp	r3, #1
   a436a:	d000      	beq.n	a436e <Cl_Rinse_Controller+0x45e>
								dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
								Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
								break;							
								default:
								break;
   a436c:	e056      	b.n	a441c <Cl_Rinse_Controller+0x50c>
						{
							
							switch(Cl_ConsoleRxMsg.data.byte[0])
							{
								case CON_RX_PARAM_DATA_RINSE_STATUS:
								command = CON_TX_COMMAND_SYSDATA;
   a436e:	2316      	movs	r3, #22
   a4370:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
								dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a4374:	2301      	movs	r3, #1
   a4376:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
								Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a437a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a437e:	3301      	adds	r3, #1
   a4380:	2001      	movs	r0, #1
   a4382:	4619      	mov	r1, r3
   a4384:	4b6c      	ldr	r3, [pc, #432]	; (a4538 <Cl_Rinse_Controller+0x628>)
   a4386:	4798      	blx	r3
   a4388:	4603      	mov	r3, r0
   a438a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a438e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a4392:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a4396:	4610      	mov	r0, r2
   a4398:	4619      	mov	r1, r3
   a439a:	2202      	movs	r2, #2
   a439c:	4b67      	ldr	r3, [pc, #412]	; (a453c <Cl_Rinse_Controller+0x62c>)
   a439e:	4798      	blx	r3
   a43a0:	4603      	mov	r3, r0
   a43a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								
								break;
   a43a6:	e039      	b.n	a441c <Cl_Rinse_Controller+0x50c>
								case CON_RX_PARAM_DATA_PRIME_STATUS:
								command = CON_TX_COMMAND_SYSDATA;
   a43a8:	2316      	movs	r3, #22
   a43aa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
								dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   a43ae:	2302      	movs	r3, #2
   a43b0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
								Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   a43b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a43b8:	3301      	adds	r3, #1
   a43ba:	2002      	movs	r0, #2
   a43bc:	4619      	mov	r1, r3
   a43be:	4b5e      	ldr	r3, [pc, #376]	; (a4538 <Cl_Rinse_Controller+0x628>)
   a43c0:	4798      	blx	r3
   a43c2:	4603      	mov	r3, r0
   a43c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   a43c8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a43cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a43d0:	4610      	mov	r0, r2
   a43d2:	4619      	mov	r1, r3
   a43d4:	2202      	movs	r2, #2
   a43d6:	4b59      	ldr	r3, [pc, #356]	; (a453c <Cl_Rinse_Controller+0x62c>)
   a43d8:	4798      	blx	r3
   a43da:	4603      	mov	r3, r0
   a43dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								break;
   a43e0:	e01c      	b.n	a441c <Cl_Rinse_Controller+0x50c>
								case CON_RX_PARAM_DATA_DISINF_STATUS:
								command = CON_TX_COMMAND_SYSDATA;
   a43e2:	2316      	movs	r3, #22
   a43e4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
								dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   a43e8:	2323      	movs	r3, #35	; 0x23
   a43ea:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
								Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   a43ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a43f2:	3301      	adds	r3, #1
   a43f4:	2028      	movs	r0, #40	; 0x28
   a43f6:	4619      	mov	r1, r3
   a43f8:	4b4f      	ldr	r3, [pc, #316]	; (a4538 <Cl_Rinse_Controller+0x628>)
   a43fa:	4798      	blx	r3
   a43fc:	4603      	mov	r3, r0
   a43fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   a4402:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a4406:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a440a:	4610      	mov	r0, r2
   a440c:	4619      	mov	r1, r3
   a440e:	2202      	movs	r2, #2
   a4410:	4b4a      	ldr	r3, [pc, #296]	; (a453c <Cl_Rinse_Controller+0x62c>)
   a4412:	4798      	blx	r3
   a4414:	4603      	mov	r3, r0
   a4416:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								break;							
   a441a:	bf00      	nop
								default:
								break;
							}
						}
				break;
   a441c:	e081      	b.n	a4522 <Cl_Rinse_Controller+0x612>
				case EVENT_START_RINSE:
					if(Cl_ConsoleRxMsg.msgready == true)
   a441e:	4b45      	ldr	r3, [pc, #276]	; (a4534 <Cl_Rinse_Controller+0x624>)
   a4420:	7e1b      	ldrb	r3, [r3, #24]
   a4422:	2b00      	cmp	r3, #0
   a4424:	d00e      	beq.n	a4444 <Cl_Rinse_Controller+0x534>
					{
//						cl_Datastreamtype cl_temp  ;

						cl_local.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a4426:	4b43      	ldr	r3, [pc, #268]	; (a4534 <Cl_Rinse_Controller+0x624>)
   a4428:	791a      	ldrb	r2, [r3, #4]
   a442a:	4b45      	ldr	r3, [pc, #276]	; (a4540 <Cl_Rinse_Controller+0x630>)
   a442c:	701a      	strb	r2, [r3, #0]
						if (cl_local.bytearray[0] == 1)
   a442e:	4b44      	ldr	r3, [pc, #272]	; (a4540 <Cl_Rinse_Controller+0x630>)
   a4430:	781b      	ldrb	r3, [r3, #0]
   a4432:	2b01      	cmp	r3, #1
   a4434:	d006      	beq.n	a4444 <Cl_Rinse_Controller+0x534>
						{
						
						}
						else if (cl_local.bytearray[0] == 2)
   a4436:	4b42      	ldr	r3, [pc, #264]	; (a4540 <Cl_Rinse_Controller+0x630>)
   a4438:	781b      	ldrb	r3, [r3, #0]
   a443a:	2b02      	cmp	r3, #2
   a443c:	d102      	bne.n	a4444 <Cl_Rinse_Controller+0x534>
						{
							hotrinse_flag = 1;
   a443e:	4b41      	ldr	r3, [pc, #260]	; (a4544 <Cl_Rinse_Controller+0x634>)
   a4440:	2201      	movs	r2, #1
   a4442:	701a      	strb	r2, [r3, #0]
						}
					
					}
					if( CL_OK == Cl_Rinse_StartRinse())
   a4444:	4b40      	ldr	r3, [pc, #256]	; (a4548 <Cl_Rinse_Controller+0x638>)
   a4446:	4798      	blx	r3
   a4448:	4603      	mov	r3, r0
   a444a:	2b00      	cmp	r3, #0
   a444c:	d12c      	bne.n	a44a8 <Cl_Rinse_Controller+0x598>
					{
											
						command = CON_TX_COMMAND_RINSE_CONFIRM;
   a444e:	2308      	movs	r3, #8
   a4450:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
						data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a4454:	2301      	movs	r3, #1
   a4456:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);					
   a445a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a445e:	f107 033b 	add.w	r3, r7, #59	; 0x3b
   a4462:	4610      	mov	r0, r2
   a4464:	4619      	mov	r1, r3
   a4466:	2201      	movs	r2, #1
   a4468:	4b34      	ldr	r3, [pc, #208]	; (a453c <Cl_Rinse_Controller+0x62c>)
   a446a:	4798      	blx	r3
   a446c:	4603      	mov	r3, r0
   a446e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						command = CON_TX_COMMAND_RINSE_STARTED;
   a4472:	2309      	movs	r3, #9
   a4474:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
						Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a4478:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a447c:	f107 033b 	add.w	r3, r7, #59	; 0x3b
   a4480:	4610      	mov	r0, r2
   a4482:	4619      	mov	r1, r3
   a4484:	2200      	movs	r2, #0
   a4486:	4b2d      	ldr	r3, [pc, #180]	; (a453c <Cl_Rinse_Controller+0x62c>)
   a4488:	4798      	blx	r3
   a448a:	4603      	mov	r3, r0
   a448c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a4490:	4b2e      	ldr	r3, [pc, #184]	; (a454c <Cl_Rinse_Controller+0x63c>)
   a4492:	4798      	blx	r3
   a4494:	4603      	mov	r3, r0
   a4496:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						cl_rinsestate = CL_RINSE_STATE_RINSING;
   a449a:	4b23      	ldr	r3, [pc, #140]	; (a4528 <Cl_Rinse_Controller+0x618>)
   a449c:	2203      	movs	r2, #3
   a449e:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a44a0:	4b2b      	ldr	r3, [pc, #172]	; (a4550 <Cl_Rinse_Controller+0x640>)
   a44a2:	2201      	movs	r2, #1
   a44a4:	701a      	strb	r2, [r3, #0]
					}
					else
					{
						return CL_REJECTED;
					}
				break;
   a44a6:	e03c      	b.n	a4522 <Cl_Rinse_Controller+0x612>
						cl_rinsestate = CL_RINSE_STATE_RINSING;
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
					}
					else
					{
						return CL_REJECTED;
   a44a8:	2303      	movs	r3, #3
   a44aa:	f000 bf56 	b.w	a535a <Cl_Rinse_Controller+0x144a>
					}
				break;
				case EVENT_START_PRE_DISINF_RINSE:
					disinfectionrinseFlag = 1;
   a44ae:	4b29      	ldr	r3, [pc, #164]	; (a4554 <Cl_Rinse_Controller+0x644>)
   a44b0:	2201      	movs	r2, #1
   a44b2:	601a      	str	r2, [r3, #0]
					Cl_Rinse_StartRinse();
   a44b4:	4b24      	ldr	r3, [pc, #144]	; (a4548 <Cl_Rinse_Controller+0x638>)
   a44b6:	4798      	blx	r3
					
					cl_rinsestate = CL_RINSE_STATE_PRE_DISINFECT_RINSING;
   a44b8:	4b1b      	ldr	r3, [pc, #108]	; (a4528 <Cl_Rinse_Controller+0x618>)
   a44ba:	2204      	movs	r2, #4
   a44bc:	701a      	strb	r2, [r3, #0]
					cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a44be:	4b24      	ldr	r3, [pc, #144]	; (a4550 <Cl_Rinse_Controller+0x640>)
   a44c0:	2201      	movs	r2, #1
   a44c2:	701a      	strb	r2, [r3, #0]
				break;
   a44c4:	e02d      	b.n	a4522 <Cl_Rinse_Controller+0x612>
				case EVENT_START_POST_DISINF_RINSE:
						disinfectionrinseFlag = 1;
   a44c6:	4b23      	ldr	r3, [pc, #140]	; (a4554 <Cl_Rinse_Controller+0x644>)
   a44c8:	2201      	movs	r2, #1
   a44ca:	601a      	str	r2, [r3, #0]
						Cl_Rinse_StartRinse();
   a44cc:	4b1e      	ldr	r3, [pc, #120]	; (a4548 <Cl_Rinse_Controller+0x638>)
   a44ce:	4798      	blx	r3
						cl_rinsestate = CL_RINSE_STATE_POST_DISINFECT_RINSING;
   a44d0:	4b15      	ldr	r3, [pc, #84]	; (a4528 <Cl_Rinse_Controller+0x618>)
   a44d2:	2205      	movs	r2, #5
   a44d4:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a44d6:	4b1e      	ldr	r3, [pc, #120]	; (a4550 <Cl_Rinse_Controller+0x640>)
   a44d8:	2201      	movs	r2, #1
   a44da:	701a      	strb	r2, [r3, #0]
				break;
   a44dc:	e021      	b.n	a4522 <Cl_Rinse_Controller+0x612>
				case EVENT_RINSE_ALARM:
				// check for rinse alarms and update rinse alarm table
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   a44de:	4b1e      	ldr	r3, [pc, #120]	; (a4558 <Cl_Rinse_Controller+0x648>)
   a44e0:	4798      	blx	r3
   a44e2:	4603      	mov	r3, r0
   a44e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   a44e8:	e01b      	b.n	a4522 <Cl_Rinse_Controller+0x612>
				
					case EVENT_RINSE_CLR_ALARM:
						
						command = CON_TX_COMMAND_ALARM_CLEARED;
   a44ea:	2351      	movs	r3, #81	; 0x51
   a44ec:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
						data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a44f0:	2301      	movs	r3, #1
   a44f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a44f6:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a44fa:	f107 033b 	add.w	r3, r7, #59	; 0x3b
   a44fe:	4610      	mov	r0, r2
   a4500:	4619      	mov	r1, r3
   a4502:	2200      	movs	r2, #0
   a4504:	4b0d      	ldr	r3, [pc, #52]	; (a453c <Cl_Rinse_Controller+0x62c>)
   a4506:	4798      	blx	r3
   a4508:	4603      	mov	r3, r0
   a450a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						
										sv_cntrl_resetyellowalarm();
   a450e:	4b13      	ldr	r3, [pc, #76]	; (a455c <Cl_Rinse_Controller+0x64c>)
   a4510:	4798      	blx	r3
										sv_cntrl_resetredalarm();
   a4512:	4b13      	ldr	r3, [pc, #76]	; (a4560 <Cl_Rinse_Controller+0x650>)
   a4514:	4798      	blx	r3
										sv_cntrl_nobuzzer();
   a4516:	4b13      	ldr	r3, [pc, #76]	; (a4564 <Cl_Rinse_Controller+0x654>)
   a4518:	4798      	blx	r3
										Cl_Rinse_ResetAlertsforReassertion();
   a451a:	4b13      	ldr	r3, [pc, #76]	; (a4568 <Cl_Rinse_Controller+0x658>)
   a451c:	4798      	blx	r3
										
						break;
   a451e:	e000      	b.n	a4522 <Cl_Rinse_Controller+0x612>
				
				default:
				break;
   a4520:	bf00      	nop
			}                                 	
		break;
   a4522:	f000 bf18 	b.w	a5356 <Cl_Rinse_Controller+0x1446>
   a4526:	bf00      	nop
   a4528:	20071df2 	.word	0x20071df2
   a452c:	200727d6 	.word	0x200727d6
   a4530:	00082b25 	.word	0x00082b25
   a4534:	200725bc 	.word	0x200725bc
   a4538:	0009bcdd 	.word	0x0009bcdd
   a453c:	0009d1e9 	.word	0x0009d1e9
   a4540:	20072a54 	.word	0x20072a54
   a4544:	20071e15 	.word	0x20071e15
   a4548:	000a60f1 	.word	0x000a60f1
   a454c:	000a5725 	.word	0x000a5725
   a4550:	20071df3 	.word	0x20071df3
   a4554:	20071e24 	.word	0x20071e24
   a4558:	000a59ed 	.word	0x000a59ed
   a455c:	0009b699 	.word	0x0009b699
   a4560:	0009b685 	.word	0x0009b685
   a4564:	0009b6c1 	.word	0x0009b6c1
   a4568:	000a5a15 	.word	0x000a5a15
		
		case CL_RINSE_STATE_RINSING:
		case CL_RINSE_STATE_PRE_DISINFECT_RINSING:
		case CL_RINSE_STATE_POST_DISINFECT_RINSING:
				switch (cl_rinseevent)
   a456c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   a4570:	3b01      	subs	r3, #1
   a4572:	2b26      	cmp	r3, #38	; 0x26
   a4574:	f200 86ee 	bhi.w	a5354 <Cl_Rinse_Controller+0x1444>
   a4578:	a201      	add	r2, pc, #4	; (adr r2, a4580 <Cl_Rinse_Controller+0x670>)
   a457a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a457e:	bf00      	nop
   a4580:	000a4c05 	.word	0x000a4c05
   a4584:	000a5355 	.word	0x000a5355
   a4588:	000a5355 	.word	0x000a5355
   a458c:	000a5355 	.word	0x000a5355
   a4590:	000a5355 	.word	0x000a5355
   a4594:	000a4a0f 	.word	0x000a4a0f
   a4598:	000a5355 	.word	0x000a5355
   a459c:	000a5355 	.word	0x000a5355
   a45a0:	000a5355 	.word	0x000a5355
   a45a4:	000a5355 	.word	0x000a5355
   a45a8:	000a5355 	.word	0x000a5355
   a45ac:	000a5355 	.word	0x000a5355
   a45b0:	000a5355 	.word	0x000a5355
   a45b4:	000a5355 	.word	0x000a5355
   a45b8:	000a461d 	.word	0x000a461d
   a45bc:	000a5355 	.word	0x000a5355
   a45c0:	000a4643 	.word	0x000a4643
   a45c4:	000a46bf 	.word	0x000a46bf
   a45c8:	000a490b 	.word	0x000a490b
   a45cc:	000a49f9 	.word	0x000a49f9
   a45d0:	000a4a21 	.word	0x000a4a21
   a45d4:	000a4a15 	.word	0x000a4a15
   a45d8:	000a5355 	.word	0x000a5355
   a45dc:	000a5355 	.word	0x000a5355
   a45e0:	000a4ad7 	.word	0x000a4ad7
   a45e4:	000a4a55 	.word	0x000a4a55
   a45e8:	000a4a6f 	.word	0x000a4a6f
   a45ec:	000a4b4b 	.word	0x000a4b4b
   a45f0:	000a4b55 	.word	0x000a4b55
   a45f4:	000a4b5f 	.word	0x000a4b5f
   a45f8:	000a4a7f 	.word	0x000a4a7f
   a45fc:	000a4aa3 	.word	0x000a4aa3
   a4600:	000a4ab7 	.word	0x000a4ab7
   a4604:	000a4ac7 	.word	0x000a4ac7
   a4608:	000a5355 	.word	0x000a5355
   a460c:	000a5355 	.word	0x000a5355
   a4610:	000a5355 	.word	0x000a5355
   a4614:	000a5355 	.word	0x000a5355
   a4618:	000a4c3b 	.word	0x000a4c3b
// 										break;
// 									}
// 								}
// 						break;
						case EVENT_RINSE_TICK_50MS:
						if(cl_rinsing_substate == CL_RINSE_RINSING_BC_SWITCHING)
   a461c:	4b9a      	ldr	r3, [pc, #616]	; (a4888 <Cl_Rinse_Controller+0x978>)
   a461e:	781b      	ldrb	r3, [r3, #0]
   a4620:	2b02      	cmp	r3, #2
   a4622:	d10d      	bne.n	a4640 <Cl_Rinse_Controller+0x730>
						{
									cl_50ms_timer++;
   a4624:	4b99      	ldr	r3, [pc, #612]	; (a488c <Cl_Rinse_Controller+0x97c>)
   a4626:	881b      	ldrh	r3, [r3, #0]
   a4628:	3301      	adds	r3, #1
   a462a:	b29a      	uxth	r2, r3
   a462c:	4b97      	ldr	r3, [pc, #604]	; (a488c <Cl_Rinse_Controller+0x97c>)
   a462e:	801a      	strh	r2, [r3, #0]
									if(cl_50ms_timer == 2)
   a4630:	4b96      	ldr	r3, [pc, #600]	; (a488c <Cl_Rinse_Controller+0x97c>)
   a4632:	881b      	ldrh	r3, [r3, #0]
   a4634:	2b02      	cmp	r3, #2
   a4636:	d103      	bne.n	a4640 <Cl_Rinse_Controller+0x730>
									{
										cl_50ms_timer =0;
   a4638:	4b94      	ldr	r3, [pc, #592]	; (a488c <Cl_Rinse_Controller+0x97c>)
   a463a:	2200      	movs	r2, #0
   a463c:	801a      	strh	r2, [r3, #0]
									//	sv_cntrl_deactivate_valve(VALVE_ID19);
									}
						} 
																	
						break;
   a463e:	e300      	b.n	a4c42 <Cl_Rinse_Controller+0xd32>
   a4640:	e2ff      	b.n	a4c42 <Cl_Rinse_Controller+0xd32>
						case EVENT_RINSE_TICK_500MS:
							if ((avgtemp2_dummy > 75) && (avgtemp2_dummy < 76))
   a4642:	4b93      	ldr	r3, [pc, #588]	; (a4890 <Cl_Rinse_Controller+0x980>)
   a4644:	681a      	ldr	r2, [r3, #0]
   a4646:	4b93      	ldr	r3, [pc, #588]	; (a4894 <Cl_Rinse_Controller+0x984>)
   a4648:	4610      	mov	r0, r2
   a464a:	4993      	ldr	r1, [pc, #588]	; (a4898 <Cl_Rinse_Controller+0x988>)
   a464c:	4798      	blx	r3
   a464e:	4603      	mov	r3, r0
   a4650:	2b00      	cmp	r3, #0
   a4652:	d00d      	beq.n	a4670 <Cl_Rinse_Controller+0x760>
   a4654:	4b8e      	ldr	r3, [pc, #568]	; (a4890 <Cl_Rinse_Controller+0x980>)
   a4656:	681a      	ldr	r2, [r3, #0]
   a4658:	4b90      	ldr	r3, [pc, #576]	; (a489c <Cl_Rinse_Controller+0x98c>)
   a465a:	4610      	mov	r0, r2
   a465c:	4990      	ldr	r1, [pc, #576]	; (a48a0 <Cl_Rinse_Controller+0x990>)
   a465e:	4798      	blx	r3
   a4660:	4603      	mov	r3, r0
   a4662:	2b00      	cmp	r3, #0
   a4664:	d004      	beq.n	a4670 <Cl_Rinse_Controller+0x760>
							{
								sv_cntrl_decheater(2200);
   a4666:	f640 0098 	movw	r0, #2200	; 0x898
   a466a:	4b8e      	ldr	r3, [pc, #568]	; (a48a4 <Cl_Rinse_Controller+0x994>)
   a466c:	4798      	blx	r3
   a466e:	e025      	b.n	a46bc <Cl_Rinse_Controller+0x7ac>
							}
							else if ((avgtemp2_dummy > 76) && (avgtemp2_dummy < 77))
   a4670:	4b87      	ldr	r3, [pc, #540]	; (a4890 <Cl_Rinse_Controller+0x980>)
   a4672:	681a      	ldr	r2, [r3, #0]
   a4674:	4b87      	ldr	r3, [pc, #540]	; (a4894 <Cl_Rinse_Controller+0x984>)
   a4676:	4610      	mov	r0, r2
   a4678:	4989      	ldr	r1, [pc, #548]	; (a48a0 <Cl_Rinse_Controller+0x990>)
   a467a:	4798      	blx	r3
   a467c:	4603      	mov	r3, r0
   a467e:	2b00      	cmp	r3, #0
   a4680:	d00d      	beq.n	a469e <Cl_Rinse_Controller+0x78e>
   a4682:	4b83      	ldr	r3, [pc, #524]	; (a4890 <Cl_Rinse_Controller+0x980>)
   a4684:	681a      	ldr	r2, [r3, #0]
   a4686:	4b85      	ldr	r3, [pc, #532]	; (a489c <Cl_Rinse_Controller+0x98c>)
   a4688:	4610      	mov	r0, r2
   a468a:	4987      	ldr	r1, [pc, #540]	; (a48a8 <Cl_Rinse_Controller+0x998>)
   a468c:	4798      	blx	r3
   a468e:	4603      	mov	r3, r0
   a4690:	2b00      	cmp	r3, #0
   a4692:	d004      	beq.n	a469e <Cl_Rinse_Controller+0x78e>
							{
								sv_cntrl_decheater(2000);
   a4694:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   a4698:	4b82      	ldr	r3, [pc, #520]	; (a48a4 <Cl_Rinse_Controller+0x994>)
   a469a:	4798      	blx	r3
   a469c:	e00e      	b.n	a46bc <Cl_Rinse_Controller+0x7ac>
							}
							else if (avgtemp2_dummy > 77)
   a469e:	4b7c      	ldr	r3, [pc, #496]	; (a4890 <Cl_Rinse_Controller+0x980>)
   a46a0:	681a      	ldr	r2, [r3, #0]
   a46a2:	4b7c      	ldr	r3, [pc, #496]	; (a4894 <Cl_Rinse_Controller+0x984>)
   a46a4:	4610      	mov	r0, r2
   a46a6:	4980      	ldr	r1, [pc, #512]	; (a48a8 <Cl_Rinse_Controller+0x998>)
   a46a8:	4798      	blx	r3
   a46aa:	4603      	mov	r3, r0
   a46ac:	2b00      	cmp	r3, #0
   a46ae:	d100      	bne.n	a46b2 <Cl_Rinse_Controller+0x7a2>
							{
								sv_cntrl_decheater(1800);
							}
						//UpdateHeaterControls();
						break;
   a46b0:	e2c7      	b.n	a4c42 <Cl_Rinse_Controller+0xd32>
							{
								sv_cntrl_decheater(2000);
							}
							else if (avgtemp2_dummy > 77)
							{
								sv_cntrl_decheater(1800);
   a46b2:	f44f 60e1 	mov.w	r0, #1800	; 0x708
   a46b6:	4b7b      	ldr	r3, [pc, #492]	; (a48a4 <Cl_Rinse_Controller+0x994>)
   a46b8:	4798      	blx	r3
							}
						//UpdateHeaterControls();
						break;
   a46ba:	e2c2      	b.n	a4c42 <Cl_Rinse_Controller+0xd32>
   a46bc:	e2c1      	b.n	a4c42 <Cl_Rinse_Controller+0xd32>
						case EVENT_RINSE_TICK_SECOND:
						
						if(cl_rinsestate == CL_RINSE_STATE_RINSING)
   a46be:	4b7b      	ldr	r3, [pc, #492]	; (a48ac <Cl_Rinse_Controller+0x99c>)
   a46c0:	781b      	ldrb	r3, [r3, #0]
   a46c2:	2b03      	cmp	r3, #3
   a46c4:	d101      	bne.n	a46ca <Cl_Rinse_Controller+0x7ba>
						{
							Cl_Rinse_SendRinseStateData();	
   a46c6:	4b7a      	ldr	r3, [pc, #488]	; (a48b0 <Cl_Rinse_Controller+0x9a0>)
   a46c8:	4798      	blx	r3
						}
						
						

					//	UpdateHeaterControls();
						Cl_Rinsesecondscounter++;
   a46ca:	4b7a      	ldr	r3, [pc, #488]	; (a48b4 <Cl_Rinse_Controller+0x9a4>)
   a46cc:	681b      	ldr	r3, [r3, #0]
   a46ce:	3301      	adds	r3, #1
   a46d0:	4a78      	ldr	r2, [pc, #480]	; (a48b4 <Cl_Rinse_Controller+0x9a4>)
   a46d2:	6013      	str	r3, [r2, #0]
						
						
						if(Cl_Rinsesecondscounter == 60){ // activate flow alarms only after 60 seconds into rinse
   a46d4:	4b77      	ldr	r3, [pc, #476]	; (a48b4 <Cl_Rinse_Controller+0x9a4>)
   a46d6:	681b      	ldr	r3, [r3, #0]
   a46d8:	2b3c      	cmp	r3, #60	; 0x3c
   a46da:	d114      	bne.n	a4706 <Cl_Rinse_Controller+0x7f6>
							
							
							Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );
   a46dc:	200c      	movs	r0, #12
   a46de:	2101      	movs	r1, #1
   a46e0:	4b75      	ldr	r3, [pc, #468]	; (a48b8 <Cl_Rinse_Controller+0x9a8>)
   a46e2:	4798      	blx	r3
   a46e4:	4603      	mov	r3, r0
   a46e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   a46ea:	200d      	movs	r0, #13
   a46ec:	2101      	movs	r1, #1
   a46ee:	4b72      	ldr	r3, [pc, #456]	; (a48b8 <Cl_Rinse_Controller+0x9a8>)
   a46f0:	4798      	blx	r3
   a46f2:	4603      	mov	r3, r0
   a46f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
   a46f8:	200e      	movs	r0, #14
   a46fa:	2101      	movs	r1, #1
   a46fc:	4b6e      	ldr	r3, [pc, #440]	; (a48b8 <Cl_Rinse_Controller+0x9a8>)
   a46fe:	4798      	blx	r3
   a4700:	4603      	mov	r3, r0
   a4702:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							
							
						}
						
						if ((Cl_Rinsesecondscounter == 10) && (rinse1 == 1))
   a4706:	4b6b      	ldr	r3, [pc, #428]	; (a48b4 <Cl_Rinse_Controller+0x9a4>)
   a4708:	681b      	ldr	r3, [r3, #0]
   a470a:	2b0a      	cmp	r3, #10
   a470c:	d118      	bne.n	a4740 <Cl_Rinse_Controller+0x830>
   a470e:	4b6b      	ldr	r3, [pc, #428]	; (a48bc <Cl_Rinse_Controller+0x9ac>)
   a4710:	781b      	ldrb	r3, [r3, #0]
   a4712:	b2db      	uxtb	r3, r3
   a4714:	2b01      	cmp	r3, #1
   a4716:	d113      	bne.n	a4740 <Cl_Rinse_Controller+0x830>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RINSE2",6);
   a4718:	2018      	movs	r0, #24
   a471a:	4969      	ldr	r1, [pc, #420]	; (a48c0 <Cl_Rinse_Controller+0x9b0>)
   a471c:	2206      	movs	r2, #6
   a471e:	4b69      	ldr	r3, [pc, #420]	; (a48c4 <Cl_Rinse_Controller+0x9b4>)
   a4720:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID4);
   a4722:	2004      	movs	r0, #4
   a4724:	4b68      	ldr	r3, [pc, #416]	; (a48c8 <Cl_Rinse_Controller+0x9b8>)
   a4726:	4798      	blx	r3
							sv_cntrl_deactivatepump(DCMOTOR1);
   a4728:	2001      	movs	r0, #1
   a472a:	4b68      	ldr	r3, [pc, #416]	; (a48cc <Cl_Rinse_Controller+0x9bc>)
   a472c:	4798      	blx	r3
						//	sv_cntrl_deactivate_valve(VALVE_ID6);
						//	sv_cntrl_deactivate_valve(VALVE_ID8);
							sv_cntrl_activate_valve(VALVE_ID19);
   a472e:	2013      	movs	r0, #19
   a4730:	4b67      	ldr	r3, [pc, #412]	; (a48d0 <Cl_Rinse_Controller+0x9c0>)
   a4732:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID20);
   a4734:	2014      	movs	r0, #20
   a4736:	4b66      	ldr	r3, [pc, #408]	; (a48d0 <Cl_Rinse_Controller+0x9c0>)
   a4738:	4798      	blx	r3
							rinse2=1;
   a473a:	4b66      	ldr	r3, [pc, #408]	; (a48d4 <Cl_Rinse_Controller+0x9c4>)
   a473c:	2201      	movs	r2, #1
   a473e:	701a      	strb	r2, [r3, #0]
						}
						if ((Cl_Rinsesecondscounter == 30) && (rinse1 == 1) && (rinse2== 1))
   a4740:	4b5c      	ldr	r3, [pc, #368]	; (a48b4 <Cl_Rinse_Controller+0x9a4>)
   a4742:	681b      	ldr	r3, [r3, #0]
   a4744:	2b1e      	cmp	r3, #30
   a4746:	d129      	bne.n	a479c <Cl_Rinse_Controller+0x88c>
   a4748:	4b5c      	ldr	r3, [pc, #368]	; (a48bc <Cl_Rinse_Controller+0x9ac>)
   a474a:	781b      	ldrb	r3, [r3, #0]
   a474c:	b2db      	uxtb	r3, r3
   a474e:	2b01      	cmp	r3, #1
   a4750:	d124      	bne.n	a479c <Cl_Rinse_Controller+0x88c>
   a4752:	4b60      	ldr	r3, [pc, #384]	; (a48d4 <Cl_Rinse_Controller+0x9c4>)
   a4754:	781b      	ldrb	r3, [r3, #0]
   a4756:	b2db      	uxtb	r3, r3
   a4758:	2b01      	cmp	r3, #1
   a475a:	d11f      	bne.n	a479c <Cl_Rinse_Controller+0x88c>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RINSE3",6);
   a475c:	2018      	movs	r0, #24
   a475e:	495e      	ldr	r1, [pc, #376]	; (a48d8 <Cl_Rinse_Controller+0x9c8>)
   a4760:	2206      	movs	r2, #6
   a4762:	4b58      	ldr	r3, [pc, #352]	; (a48c4 <Cl_Rinse_Controller+0x9b4>)
   a4764:	4798      	blx	r3
							sv_cntrl_deactivatepump(DCMOTOR2);
   a4766:	2002      	movs	r0, #2
   a4768:	4b58      	ldr	r3, [pc, #352]	; (a48cc <Cl_Rinse_Controller+0x9bc>)
   a476a:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID19);
   a476c:	2013      	movs	r0, #19
   a476e:	4b56      	ldr	r3, [pc, #344]	; (a48c8 <Cl_Rinse_Controller+0x9b8>)
   a4770:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID20);
   a4772:	2014      	movs	r0, #20
   a4774:	4b54      	ldr	r3, [pc, #336]	; (a48c8 <Cl_Rinse_Controller+0x9b8>)
   a4776:	4798      	blx	r3
							sv_cntrl_activatepump(DCMOTOR1);
   a4778:	2001      	movs	r0, #1
   a477a:	4b58      	ldr	r3, [pc, #352]	; (a48dc <Cl_Rinse_Controller+0x9cc>)
   a477c:	4798      	blx	r3
							sv_cntrl_activatepump(DCMOTOR2);
   a477e:	2002      	movs	r0, #2
   a4780:	4b56      	ldr	r3, [pc, #344]	; (a48dc <Cl_Rinse_Controller+0x9cc>)
   a4782:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID6);
   a4784:	2006      	movs	r0, #6
   a4786:	4b52      	ldr	r3, [pc, #328]	; (a48d0 <Cl_Rinse_Controller+0x9c0>)
   a4788:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID8);
   a478a:	2008      	movs	r0, #8
   a478c:	4b50      	ldr	r3, [pc, #320]	; (a48d0 <Cl_Rinse_Controller+0x9c0>)
   a478e:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID17);
   a4790:	2011      	movs	r0, #17
   a4792:	4b4f      	ldr	r3, [pc, #316]	; (a48d0 <Cl_Rinse_Controller+0x9c0>)
   a4794:	4798      	blx	r3
							rinse3=1;
   a4796:	4b52      	ldr	r3, [pc, #328]	; (a48e0 <Cl_Rinse_Controller+0x9d0>)
   a4798:	2201      	movs	r2, #1
   a479a:	701a      	strb	r2, [r3, #0]
						}
						if ((Cl_Rinsesecondscounter == 55) && (rinse1 == 1) && (rinse2 == 1)&& (rinse3 == 1))
   a479c:	4b45      	ldr	r3, [pc, #276]	; (a48b4 <Cl_Rinse_Controller+0x9a4>)
   a479e:	681b      	ldr	r3, [r3, #0]
   a47a0:	2b37      	cmp	r3, #55	; 0x37
   a47a2:	d11c      	bne.n	a47de <Cl_Rinse_Controller+0x8ce>
   a47a4:	4b45      	ldr	r3, [pc, #276]	; (a48bc <Cl_Rinse_Controller+0x9ac>)
   a47a6:	781b      	ldrb	r3, [r3, #0]
   a47a8:	b2db      	uxtb	r3, r3
   a47aa:	2b01      	cmp	r3, #1
   a47ac:	d117      	bne.n	a47de <Cl_Rinse_Controller+0x8ce>
   a47ae:	4b49      	ldr	r3, [pc, #292]	; (a48d4 <Cl_Rinse_Controller+0x9c4>)
   a47b0:	781b      	ldrb	r3, [r3, #0]
   a47b2:	b2db      	uxtb	r3, r3
   a47b4:	2b01      	cmp	r3, #1
   a47b6:	d112      	bne.n	a47de <Cl_Rinse_Controller+0x8ce>
   a47b8:	4b49      	ldr	r3, [pc, #292]	; (a48e0 <Cl_Rinse_Controller+0x9d0>)
   a47ba:	781b      	ldrb	r3, [r3, #0]
   a47bc:	b2db      	uxtb	r3, r3
   a47be:	2b01      	cmp	r3, #1
   a47c0:	d10d      	bne.n	a47de <Cl_Rinse_Controller+0x8ce>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RINSE4",6);
   a47c2:	2018      	movs	r0, #24
   a47c4:	4947      	ldr	r1, [pc, #284]	; (a48e4 <Cl_Rinse_Controller+0x9d4>)
   a47c6:	2206      	movs	r2, #6
   a47c8:	4b3e      	ldr	r3, [pc, #248]	; (a48c4 <Cl_Rinse_Controller+0x9b4>)
   a47ca:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID4);
   a47cc:	2004      	movs	r0, #4
   a47ce:	4b40      	ldr	r3, [pc, #256]	; (a48d0 <Cl_Rinse_Controller+0x9c0>)
   a47d0:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID17);
   a47d2:	2011      	movs	r0, #17
   a47d4:	4b3c      	ldr	r3, [pc, #240]	; (a48c8 <Cl_Rinse_Controller+0x9b8>)
   a47d6:	4798      	blx	r3
							rinse4=1;
   a47d8:	4b43      	ldr	r3, [pc, #268]	; (a48e8 <Cl_Rinse_Controller+0x9d8>)
   a47da:	2201      	movs	r2, #1
   a47dc:	701a      	strb	r2, [r3, #0]
						}
						if(Cl_Rinsesecondscounter == 60)
   a47de:	4b35      	ldr	r3, [pc, #212]	; (a48b4 <Cl_Rinse_Controller+0x9a4>)
   a47e0:	681b      	ldr	r3, [r3, #0]
   a47e2:	2b3c      	cmp	r3, #60	; 0x3c
   a47e4:	f040 8090 	bne.w	a4908 <Cl_Rinse_Controller+0x9f8>
						{
								cl_uf_controller(CL_UF_EVENT_STOP,0);
   a47e8:	2004      	movs	r0, #4
   a47ea:	2100      	movs	r1, #0
   a47ec:	4b3f      	ldr	r3, [pc, #252]	; (a48ec <Cl_Rinse_Controller+0x9dc>)
   a47ee:	4798      	blx	r3
											
							Cl_Rinsesecondscounter = 0;
   a47f0:	4b30      	ldr	r3, [pc, #192]	; (a48b4 <Cl_Rinse_Controller+0x9a4>)
   a47f2:	2200      	movs	r2, #0
   a47f4:	601a      	str	r2, [r3, #0]
							Cl_RinseMinutescounter++;
   a47f6:	4b3e      	ldr	r3, [pc, #248]	; (a48f0 <Cl_Rinse_Controller+0x9e0>)
   a47f8:	681b      	ldr	r3, [r3, #0]
   a47fa:	3301      	adds	r3, #1
   a47fc:	4a3c      	ldr	r2, [pc, #240]	; (a48f0 <Cl_Rinse_Controller+0x9e0>)
   a47fe:	6013      	str	r3, [r2, #0]
							if (Cl_RinseMinutescounter == 1)
   a4800:	4b3b      	ldr	r3, [pc, #236]	; (a48f0 <Cl_Rinse_Controller+0x9e0>)
   a4802:	681b      	ldr	r3, [r3, #0]
   a4804:	2b01      	cmp	r3, #1
   a4806:	d10d      	bne.n	a4824 <Cl_Rinse_Controller+0x914>
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RINSE1",6);
   a4808:	2018      	movs	r0, #24
   a480a:	493a      	ldr	r1, [pc, #232]	; (a48f4 <Cl_Rinse_Controller+0x9e4>)
   a480c:	2206      	movs	r2, #6
   a480e:	4b2d      	ldr	r3, [pc, #180]	; (a48c4 <Cl_Rinse_Controller+0x9b4>)
   a4810:	4798      	blx	r3
								sv_cntrl_activate_valve(VALVE_ID4);
   a4812:	2004      	movs	r0, #4
   a4814:	4b2e      	ldr	r3, [pc, #184]	; (a48d0 <Cl_Rinse_Controller+0x9c0>)
   a4816:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID17);
   a4818:	2011      	movs	r0, #17
   a481a:	4b2b      	ldr	r3, [pc, #172]	; (a48c8 <Cl_Rinse_Controller+0x9b8>)
   a481c:	4798      	blx	r3
								rinse1=1;
   a481e:	4b27      	ldr	r3, [pc, #156]	; (a48bc <Cl_Rinse_Controller+0x9ac>)
   a4820:	2201      	movs	r2, #1
   a4822:	701a      	strb	r2, [r3, #0]
							}
							if (Cl_RinseMinutescounter == CL_BC_OPENFILL_TIMEOUT )  // earlier 2 min
   a4824:	4b32      	ldr	r3, [pc, #200]	; (a48f0 <Cl_Rinse_Controller+0x9e0>)
   a4826:	681b      	ldr	r3, [r3, #0]
   a4828:	2b02      	cmp	r3, #2
   a482a:	d11e      	bne.n	a486a <Cl_Rinse_Controller+0x95a>
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DONE",6);
   a482c:	2018      	movs	r0, #24
   a482e:	4932      	ldr	r1, [pc, #200]	; (a48f8 <Cl_Rinse_Controller+0x9e8>)
   a4830:	2206      	movs	r2, #6
   a4832:	4b24      	ldr	r3, [pc, #144]	; (a48c4 <Cl_Rinse_Controller+0x9b4>)
   a4834:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID4);
   a4836:	2004      	movs	r0, #4
   a4838:	4b23      	ldr	r3, [pc, #140]	; (a48c8 <Cl_Rinse_Controller+0x9b8>)
   a483a:	4798      	blx	r3
								sv_cntrl_activate_valve(VALVE_ID17);
   a483c:	2011      	movs	r0, #17
   a483e:	4b24      	ldr	r3, [pc, #144]	; (a48d0 <Cl_Rinse_Controller+0x9c0>)
   a4840:	4798      	blx	r3
								sv_prop_stopopenfill();
   a4842:	4b2e      	ldr	r3, [pc, #184]	; (a48fc <Cl_Rinse_Controller+0x9ec>)
   a4844:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID2);
   a4846:	2002      	movs	r0, #2
   a4848:	4b1f      	ldr	r3, [pc, #124]	; (a48c8 <Cl_Rinse_Controller+0x9b8>)
   a484a:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID3);
   a484c:	2003      	movs	r0, #3
   a484e:	4b1e      	ldr	r3, [pc, #120]	; (a48c8 <Cl_Rinse_Controller+0x9b8>)
   a4850:	4798      	blx	r3
								
								rinse1=0;
   a4852:	4b1a      	ldr	r3, [pc, #104]	; (a48bc <Cl_Rinse_Controller+0x9ac>)
   a4854:	2200      	movs	r2, #0
   a4856:	701a      	strb	r2, [r3, #0]
								rinse2=0;
   a4858:	4b1e      	ldr	r3, [pc, #120]	; (a48d4 <Cl_Rinse_Controller+0x9c4>)
   a485a:	2200      	movs	r2, #0
   a485c:	701a      	strb	r2, [r3, #0]
								rinse3=0;
   a485e:	4b20      	ldr	r3, [pc, #128]	; (a48e0 <Cl_Rinse_Controller+0x9d0>)
   a4860:	2200      	movs	r2, #0
   a4862:	701a      	strb	r2, [r3, #0]
								rinse4=0;
   a4864:	4b20      	ldr	r3, [pc, #128]	; (a48e8 <Cl_Rinse_Controller+0x9d8>)
   a4866:	2200      	movs	r2, #0
   a4868:	701a      	strb	r2, [r3, #0]
							}
							
							Cl_RinseTotalMinutescounter++;
   a486a:	4b25      	ldr	r3, [pc, #148]	; (a4900 <Cl_Rinse_Controller+0x9f0>)
   a486c:	681b      	ldr	r3, [r3, #0]
   a486e:	3301      	adds	r3, #1
   a4870:	4a23      	ldr	r2, [pc, #140]	; (a4900 <Cl_Rinse_Controller+0x9f0>)
   a4872:	6013      	str	r3, [r2, #0]
							if(cl_rinsestate == CL_RINSE_STATE_RINSING)
   a4874:	4b0d      	ldr	r3, [pc, #52]	; (a48ac <Cl_Rinse_Controller+0x99c>)
   a4876:	781b      	ldrb	r3, [r3, #0]
   a4878:	2b03      	cmp	r3, #3
   a487a:	d145      	bne.n	a4908 <Cl_Rinse_Controller+0x9f8>
							{
								Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a487c:	4b21      	ldr	r3, [pc, #132]	; (a4904 <Cl_Rinse_Controller+0x9f4>)
   a487e:	4798      	blx	r3
   a4880:	4603      	mov	r3, r0
   a4882:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	
						}
						//	Cl_Rinse_ResetAlertsforReassertion();
							//Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
					
						break;
   a4886:	e1dc      	b.n	a4c42 <Cl_Rinse_Controller+0xd32>
   a4888:	20071df3 	.word	0x20071df3
   a488c:	20071e12 	.word	0x20071e12
   a4890:	20071b40 	.word	0x20071b40
   a4894:	000a867d 	.word	0x000a867d
   a4898:	42960000 	.word	0x42960000
   a489c:	000a8641 	.word	0x000a8641
   a48a0:	42980000 	.word	0x42980000
   a48a4:	0009b511 	.word	0x0009b511
   a48a8:	429a0000 	.word	0x429a0000
   a48ac:	20071df2 	.word	0x20071df2
   a48b0:	000a5ed1 	.word	0x000a5ed1
   a48b4:	20071df4 	.word	0x20071df4
   a48b8:	00082a35 	.word	0x00082a35
   a48bc:	20071dee 	.word	0x20071dee
   a48c0:	000aa6bc 	.word	0x000aa6bc
   a48c4:	0009d1e9 	.word	0x0009d1e9
   a48c8:	0009b409 	.word	0x0009b409
   a48cc:	0009b369 	.word	0x0009b369
   a48d0:	0009b3e9 	.word	0x0009b3e9
   a48d4:	20071def 	.word	0x20071def
   a48d8:	000aa6c4 	.word	0x000aa6c4
   a48dc:	0009b32d 	.word	0x0009b32d
   a48e0:	20071df0 	.word	0x20071df0
   a48e4:	000aa6cc 	.word	0x000aa6cc
   a48e8:	20071df1 	.word	0x20071df1
   a48ec:	00097499 	.word	0x00097499
   a48f0:	20071df8 	.word	0x20071df8
   a48f4:	000aa6d4 	.word	0x000aa6d4
   a48f8:	000aa6dc 	.word	0x000aa6dc
   a48fc:	0009b875 	.word	0x0009b875
   a4900:	20071e04 	.word	0x20071e04
   a4904:	000a5725 	.word	0x000a5725
   a4908:	e19b      	b.n	a4c42 <Cl_Rinse_Controller+0xd32>
						case EVENT_RINSE_TICK_MINUTE:
						//	Cl_Rinsesecondscounter = 0;
							minute++;
   a490a:	4ba1      	ldr	r3, [pc, #644]	; (a4b90 <Cl_Rinse_Controller+0xc80>)
   a490c:	781b      	ldrb	r3, [r3, #0]
   a490e:	b2db      	uxtb	r3, r3
   a4910:	3301      	adds	r3, #1
   a4912:	b2da      	uxtb	r2, r3
   a4914:	4b9e      	ldr	r3, [pc, #632]	; (a4b90 <Cl_Rinse_Controller+0xc80>)
   a4916:	701a      	strb	r2, [r3, #0]
							if (minute > 30)
   a4918:	4b9d      	ldr	r3, [pc, #628]	; (a4b90 <Cl_Rinse_Controller+0xc80>)
   a491a:	781b      	ldrb	r3, [r3, #0]
   a491c:	b2db      	uxtb	r3, r3
   a491e:	2b1e      	cmp	r3, #30
   a4920:	d905      	bls.n	a492e <Cl_Rinse_Controller+0xa1e>
							{
								sv_cntrl_poweroffheater();
   a4922:	4b9c      	ldr	r3, [pc, #624]	; (a4b94 <Cl_Rinse_Controller+0xc84>)
   a4924:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   a4926:	4b9c      	ldr	r3, [pc, #624]	; (a4b98 <Cl_Rinse_Controller+0xc88>)
   a4928:	4798      	blx	r3
								sv_cntrl_enable_bypass();
   a492a:	4b9c      	ldr	r3, [pc, #624]	; (a4b9c <Cl_Rinse_Controller+0xc8c>)
   a492c:	4798      	blx	r3
							}
						//	Cl_RinseTotalMinutescounter++;
							Cl_Rinse_ResetAlertsforReassertion();
   a492e:	4b9c      	ldr	r3, [pc, #624]	; (a4ba0 <Cl_Rinse_Controller+0xc90>)
   a4930:	4798      	blx	r3
														
							if(Cl_Rinse_CheckforRinseCompletion() == CL_OK)
   a4932:	4b9c      	ldr	r3, [pc, #624]	; (a4ba4 <Cl_Rinse_Controller+0xc94>)
   a4934:	4798      	blx	r3
   a4936:	4603      	mov	r3, r0
   a4938:	2b00      	cmp	r3, #0
   a493a:	d15c      	bne.n	a49f6 <Cl_Rinse_Controller+0xae6>
							{
								sv_cntrl_setgreenalarm();
   a493c:	4b9a      	ldr	r3, [pc, #616]	; (a4ba8 <Cl_Rinse_Controller+0xc98>)
   a493e:	4798      	blx	r3
								//Cl_rinseretcode = sv_cntrl_poweroffheater();
// 								sv_cntrl_activatepump(DCMOTOR1 );
// 								sv_cntrl_activatepump(DCMOTOR2 );
								sv_cntrl_deactivatepump(DCMOTOR1 );
   a4940:	2001      	movs	r0, #1
   a4942:	4b9a      	ldr	r3, [pc, #616]	; (a4bac <Cl_Rinse_Controller+0xc9c>)
   a4944:	4798      	blx	r3
								sv_cntrl_deactivatepump(DCMOTOR2 );
   a4946:	2002      	movs	r0, #2
   a4948:	4b98      	ldr	r3, [pc, #608]	; (a4bac <Cl_Rinse_Controller+0xc9c>)
   a494a:	4798      	blx	r3
							//	sv_prop_stopopenfill();
							//	sv_prop_startpropeo_aligning();
							//	sv_cntrl_deactivate_valve(VALVE_ID2);
							//	sv_cntrl_deactivate_valve(VALVE_ID3);
								Cl_rinseretcode = cl_rinse_notifydacandgotorinsestandby();
   a494c:	4b98      	ldr	r3, [pc, #608]	; (a4bb0 <Cl_Rinse_Controller+0xca0>)
   a494e:	4798      	blx	r3
   a4950:	4603      	mov	r3, r0
   a4952:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

								
								
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );					
   a4956:	200c      	movs	r0, #12
   a4958:	2100      	movs	r1, #0
   a495a:	4b96      	ldr	r3, [pc, #600]	; (a4bb4 <Cl_Rinse_Controller+0xca4>)
   a495c:	4798      	blx	r3
   a495e:	4603      	mov	r3, r0
   a4960:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a4964:	200d      	movs	r0, #13
   a4966:	2100      	movs	r1, #0
   a4968:	4b92      	ldr	r3, [pc, #584]	; (a4bb4 <Cl_Rinse_Controller+0xca4>)
   a496a:	4798      	blx	r3
   a496c:	4603      	mov	r3, r0
   a496e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );
   a4972:	200e      	movs	r0, #14
   a4974:	2100      	movs	r1, #0
   a4976:	4b8f      	ldr	r3, [pc, #572]	; (a4bb4 <Cl_Rinse_Controller+0xca4>)
   a4978:	4798      	blx	r3
   a497a:	4603      	mov	r3, r0
   a497c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a4980:	2029      	movs	r0, #41	; 0x29
   a4982:	2100      	movs	r1, #0
   a4984:	4b8b      	ldr	r3, [pc, #556]	; (a4bb4 <Cl_Rinse_Controller+0xca4>)
   a4986:	4798      	blx	r3
   a4988:	4603      	mov	r3, r0
   a498a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a498e:	202b      	movs	r0, #43	; 0x2b
   a4990:	2100      	movs	r1, #0
   a4992:	4b88      	ldr	r3, [pc, #544]	; (a4bb4 <Cl_Rinse_Controller+0xca4>)
   a4994:	4798      	blx	r3
   a4996:	4603      	mov	r3, r0
   a4998:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a499c:	2003      	movs	r0, #3
   a499e:	2100      	movs	r1, #0
   a49a0:	4b84      	ldr	r3, [pc, #528]	; (a4bb4 <Cl_Rinse_Controller+0xca4>)
   a49a2:	4798      	blx	r3
   a49a4:	4603      	mov	r3, r0
   a49a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a49aa:	2004      	movs	r0, #4
   a49ac:	2100      	movs	r1, #0
   a49ae:	4b81      	ldr	r3, [pc, #516]	; (a4bb4 <Cl_Rinse_Controller+0xca4>)
   a49b0:	4798      	blx	r3
   a49b2:	4603      	mov	r3, r0
   a49b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
   a49b8:	4b7f      	ldr	r3, [pc, #508]	; (a4bb8 <Cl_Rinse_Controller+0xca8>)
   a49ba:	2209      	movs	r2, #9
   a49bc:	701a      	strb	r2, [r3, #0]
								
								Cl_Uint16Type sensordata;
								Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &sensordata);
   a49be:	f107 0322 	add.w	r3, r7, #34	; 0x22
   a49c2:	2012      	movs	r0, #18
   a49c4:	4619      	mov	r1, r3
   a49c6:	4b7d      	ldr	r3, [pc, #500]	; (a4bbc <Cl_Rinse_Controller+0xcac>)
   a49c8:	4798      	blx	r3
// 												uint16_t cal_data  = (402 *100* sensordata)/(2*32768); 
// 												res_temp_lookuptable(cal_data);
// 												 uint16_t temp = res_temp_value /10;
// 												
// 					//							temp = temp - 25 +12 + 2.5;
										uint16_t temp = sensordata /10;
   a49ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   a49cc:	4a7c      	ldr	r2, [pc, #496]	; (a4bc0 <Cl_Rinse_Controller+0xcb0>)
   a49ce:	fba2 2303 	umull	r2, r3, r2, r3
   a49d2:	08db      	lsrs	r3, r3, #3
   a49d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
												
										cl_Datastreamtype  cl_tdata;
										cl_tdata.word = 0;
   a49d8:	2300      	movs	r3, #0
   a49da:	61fb      	str	r3, [r7, #28]
										cl_tdata.Twobyte = temp;
   a49dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
   a49e0:	83bb      	strh	r3, [r7, #28]
										cl_tdata.bytearray[2] = 11;
   a49e2:	230b      	movs	r3, #11
   a49e4:	77bb      	strb	r3, [r7, #30]
										Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   a49e6:	f107 031c 	add.w	r3, r7, #28
   a49ea:	2037      	movs	r0, #55	; 0x37
   a49ec:	4619      	mov	r1, r3
   a49ee:	2204      	movs	r2, #4
   a49f0:	4b74      	ldr	r3, [pc, #464]	; (a4bc4 <Cl_Rinse_Controller+0xcb4>)
   a49f2:	4798      	blx	r3
								//	Cl_rinseretcode = (Cl_ReturnCodeType)sv_setflowpath(Default path ?);//set appropirate flow path configuration
	
							}
						break;
   a49f4:	e125      	b.n	a4c42 <Cl_Rinse_Controller+0xd32>
   a49f6:	e124      	b.n	a4c42 <Cl_Rinse_Controller+0xd32>
						case EVENT_RINSE_TICK_HOUR:
							Cl_Rinseshourscounter++;
   a49f8:	4b73      	ldr	r3, [pc, #460]	; (a4bc8 <Cl_Rinse_Controller+0xcb8>)
   a49fa:	681b      	ldr	r3, [r3, #0]
   a49fc:	3301      	adds	r3, #1
   a49fe:	4a72      	ldr	r2, [pc, #456]	; (a4bc8 <Cl_Rinse_Controller+0xcb8>)
   a4a00:	6013      	str	r3, [r2, #0]
							Cl_RinsesTotalhourscounter++;
   a4a02:	4b72      	ldr	r3, [pc, #456]	; (a4bcc <Cl_Rinse_Controller+0xcbc>)
   a4a04:	681b      	ldr	r3, [r3, #0]
   a4a06:	3301      	adds	r3, #1
   a4a08:	4a70      	ldr	r2, [pc, #448]	; (a4bcc <Cl_Rinse_Controller+0xcbc>)
   a4a0a:	6013      	str	r3, [r2, #0]
						break;
   a4a0c:	e119      	b.n	a4c42 <Cl_Rinse_Controller+0xd32>
						case EVENT_STOP_RINSE:
							Cl_Rinse_StopRinse();
   a4a0e:	4b70      	ldr	r3, [pc, #448]	; (a4bd0 <Cl_Rinse_Controller+0xcc0>)
   a4a10:	4798      	blx	r3
						break;
   a4a12:	e116      	b.n	a4c42 <Cl_Rinse_Controller+0xd32>
						break;
						case EVENT_RINSE_ALARM:
							Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   a4a14:	4b6f      	ldr	r3, [pc, #444]	; (a4bd4 <Cl_Rinse_Controller+0xcc4>)
   a4a16:	4798      	blx	r3
   a4a18:	4603      	mov	r3, r0
   a4a1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   a4a1e:	e110      	b.n	a4c42 <Cl_Rinse_Controller+0xd32>
						case EVENT_RINSE_ALERT:
							Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   a4a20:	f107 033a 	add.w	r3, r7, #58	; 0x3a
   a4a24:	203c      	movs	r0, #60	; 0x3c
   a4a26:	4619      	mov	r1, r3
   a4a28:	4b6b      	ldr	r3, [pc, #428]	; (a4bd8 <Cl_Rinse_Controller+0xcc8>)
   a4a2a:	4798      	blx	r3
							if(alarmstatus1)
   a4a2c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   a4a30:	2b00      	cmp	r3, #0
   a4a32:	d002      	beq.n	a4a3a <Cl_Rinse_Controller+0xb2a>
							{
							//	Cl_rinseretcode = Cl_bc_controller(BC_EVENT_CS);
							//	sv_cntrl_activate_valve(VALVE_ID19);
								cl_50ms_timer  = 1;
   a4a34:	4b69      	ldr	r3, [pc, #420]	; (a4bdc <Cl_Rinse_Controller+0xccc>)
   a4a36:	2201      	movs	r2, #1
   a4a38:	801a      	strh	r2, [r3, #0]
							}
							Cl_Alarm_GetAlarmStatus(SENSOR_TEMP2STATUS,&alarmstatus3);
   a4a3a:	f107 0339 	add.w	r3, r7, #57	; 0x39
   a4a3e:	2013      	movs	r0, #19
   a4a40:	4619      	mov	r1, r3
   a4a42:	4b65      	ldr	r3, [pc, #404]	; (a4bd8 <Cl_Rinse_Controller+0xcc8>)
   a4a44:	4798      	blx	r3
							if(alarmstatus3)
							{
								//	UpdateHeaterControls();
							}
					
							Cl_Alarm_GetAlarmStatus(FLOW_NO_FLOW,&flowstatus);
   a4a46:	f107 0338 	add.w	r3, r7, #56	; 0x38
   a4a4a:	200c      	movs	r0, #12
   a4a4c:	4619      	mov	r1, r3
   a4a4e:	4b62      	ldr	r3, [pc, #392]	; (a4bd8 <Cl_Rinse_Controller+0xcc8>)
   a4a50:	4798      	blx	r3
							//	if(flowstatus)
							//	{
							//		Cl_rinseretcode = sv_cntrl_poweroffheater();
							//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
							//	}
						break;
   a4a52:	e0f6      	b.n	a4c42 <Cl_Rinse_Controller+0xd32>
						case EVT_RINSE_START_PRIME:
								blood_flag = 1;
   a4a54:	4b62      	ldr	r3, [pc, #392]	; (a4be0 <Cl_Rinse_Controller+0xcd0>)
   a4a56:	2201      	movs	r2, #1
   a4a58:	701a      	strb	r2, [r3, #0]
					//	if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
						{
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
							cl_dprep_activate_prime_related_alarms();
   a4a5a:	4b62      	ldr	r3, [pc, #392]	; (a4be4 <Cl_Rinse_Controller+0xcd4>)
   a4a5c:	4798      	blx	r3
							Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a4a5e:	4b62      	ldr	r3, [pc, #392]	; (a4be8 <Cl_Rinse_Controller+0xcd8>)
   a4a60:	2200      	movs	r2, #0
   a4a62:	70da      	strb	r2, [r3, #3]
							cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   a4a64:	2001      	movs	r0, #1
   a4a66:	2100      	movs	r1, #0
   a4a68:	4b60      	ldr	r3, [pc, #384]	; (a4bec <Cl_Rinse_Controller+0xcdc>)
   a4a6a:	4798      	blx	r3
						}
						
						break;
   a4a6c:	e0e9      	b.n	a4c42 <Cl_Rinse_Controller+0xd32>
						case EVT_RINSE_STOP_PRIME:
							blood_flag = 0;
   a4a6e:	4b5c      	ldr	r3, [pc, #368]	; (a4be0 <Cl_Rinse_Controller+0xcd0>)
   a4a70:	2200      	movs	r2, #0
   a4a72:	701a      	strb	r2, [r3, #0]
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   a4a74:	2002      	movs	r0, #2
   a4a76:	2100      	movs	r1, #0
   a4a78:	4b5c      	ldr	r3, [pc, #368]	; (a4bec <Cl_Rinse_Controller+0xcdc>)
   a4a7a:	4798      	blx	r3
						break;
   a4a7c:	e0e1      	b.n	a4c42 <Cl_Rinse_Controller+0xd32>
						case EVT_RINSE_RCIRC_START:
						if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   a4a7e:	4b5c      	ldr	r3, [pc, #368]	; (a4bf0 <Cl_Rinse_Controller+0xce0>)
   a4a80:	781b      	ldrb	r3, [r3, #0]
   a4a82:	2b01      	cmp	r3, #1
   a4a84:	d00c      	beq.n	a4aa0 <Cl_Rinse_Controller+0xb90>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   a4a86:	2018      	movs	r0, #24
   a4a88:	495a      	ldr	r1, [pc, #360]	; (a4bf4 <Cl_Rinse_Controller+0xce4>)
   a4a8a:	2206      	movs	r2, #6
   a4a8c:	4b4d      	ldr	r3, [pc, #308]	; (a4bc4 <Cl_Rinse_Controller+0xcb4>)
   a4a8e:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   a4a90:	2005      	movs	r0, #5
   a4a92:	2100      	movs	r1, #0
   a4a94:	4b55      	ldr	r3, [pc, #340]	; (a4bec <Cl_Rinse_Controller+0xcdc>)
   a4a96:	4798      	blx	r3
							Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a4a98:	4b53      	ldr	r3, [pc, #332]	; (a4be8 <Cl_Rinse_Controller+0xcd8>)
   a4a9a:	2200      	movs	r2, #0
   a4a9c:	70da      	strb	r2, [r3, #3]
						}
						
						break;
   a4a9e:	e0d0      	b.n	a4c42 <Cl_Rinse_Controller+0xd32>
   a4aa0:	e0cf      	b.n	a4c42 <Cl_Rinse_Controller+0xd32>
						case EVT_RINSE_RCIRC_STOP:

							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC_STOP",6);
   a4aa2:	2018      	movs	r0, #24
   a4aa4:	4954      	ldr	r1, [pc, #336]	; (a4bf8 <Cl_Rinse_Controller+0xce8>)
   a4aa6:	2206      	movs	r2, #6
   a4aa8:	4b46      	ldr	r3, [pc, #280]	; (a4bc4 <Cl_Rinse_Controller+0xcb4>)
   a4aaa:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_STOP,0);
   a4aac:	2006      	movs	r0, #6
   a4aae:	2100      	movs	r1, #0
   a4ab0:	4b4e      	ldr	r3, [pc, #312]	; (a4bec <Cl_Rinse_Controller+0xcdc>)
   a4ab2:	4798      	blx	r3

						
						break;
   a4ab4:	e0c5      	b.n	a4c42 <Cl_Rinse_Controller+0xd32>
						case EVT_RINSE_COMMAND_SET_BLDPMP_ON:
						cl_bp_controller(CL_BP_EVENT_START,0);
   a4ab6:	2002      	movs	r0, #2
   a4ab8:	2100      	movs	r1, #0
   a4aba:	4b50      	ldr	r3, [pc, #320]	; (a4bfc <Cl_Rinse_Controller+0xcec>)
   a4abc:	4798      	blx	r3
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsActive = true;
   a4abe:	4b4a      	ldr	r3, [pc, #296]	; (a4be8 <Cl_Rinse_Controller+0xcd8>)
   a4ac0:	2201      	movs	r2, #1
   a4ac2:	709a      	strb	r2, [r3, #2]
						break;
   a4ac4:	e0bd      	b.n	a4c42 <Cl_Rinse_Controller+0xd32>
						case EVT_RINSE_COMMAND_SET_BLDPMP_OFF:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   a4ac6:	2004      	movs	r0, #4
   a4ac8:	2100      	movs	r1, #0
   a4aca:	4b4c      	ldr	r3, [pc, #304]	; (a4bfc <Cl_Rinse_Controller+0xcec>)
   a4acc:	4798      	blx	r3
							Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsActive = false;
   a4ace:	4b46      	ldr	r3, [pc, #280]	; (a4be8 <Cl_Rinse_Controller+0xcd8>)
   a4ad0:	2200      	movs	r2, #0
   a4ad2:	709a      	strb	r2, [r3, #2]
						break;
   a4ad4:	e0b5      	b.n	a4c42 <Cl_Rinse_Controller+0xd32>
						case EVENT_MAC_RINSE_COMPLETED:
						if(cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY)
   a4ad6:	4b38      	ldr	r3, [pc, #224]	; (a4bb8 <Cl_Rinse_Controller+0xca8>)
   a4ad8:	781b      	ldrb	r3, [r3, #0]
   a4ada:	2b09      	cmp	r3, #9
   a4adc:	d034      	beq.n	a4b48 <Cl_Rinse_Controller+0xc38>
						{
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );					
   a4ade:	200c      	movs	r0, #12
   a4ae0:	2100      	movs	r1, #0
   a4ae2:	4b34      	ldr	r3, [pc, #208]	; (a4bb4 <Cl_Rinse_Controller+0xca4>)
   a4ae4:	4798      	blx	r3
   a4ae6:	4603      	mov	r3, r0
   a4ae8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a4aec:	200d      	movs	r0, #13
   a4aee:	2100      	movs	r1, #0
   a4af0:	4b30      	ldr	r3, [pc, #192]	; (a4bb4 <Cl_Rinse_Controller+0xca4>)
   a4af2:	4798      	blx	r3
   a4af4:	4603      	mov	r3, r0
   a4af6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );
   a4afa:	200e      	movs	r0, #14
   a4afc:	2100      	movs	r1, #0
   a4afe:	4b2d      	ldr	r3, [pc, #180]	; (a4bb4 <Cl_Rinse_Controller+0xca4>)
   a4b00:	4798      	blx	r3
   a4b02:	4603      	mov	r3, r0
   a4b04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a4b08:	2029      	movs	r0, #41	; 0x29
   a4b0a:	2100      	movs	r1, #0
   a4b0c:	4b29      	ldr	r3, [pc, #164]	; (a4bb4 <Cl_Rinse_Controller+0xca4>)
   a4b0e:	4798      	blx	r3
   a4b10:	4603      	mov	r3, r0
   a4b12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a4b16:	202b      	movs	r0, #43	; 0x2b
   a4b18:	2100      	movs	r1, #0
   a4b1a:	4b26      	ldr	r3, [pc, #152]	; (a4bb4 <Cl_Rinse_Controller+0xca4>)
   a4b1c:	4798      	blx	r3
   a4b1e:	4603      	mov	r3, r0
   a4b20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a4b24:	2003      	movs	r0, #3
   a4b26:	2100      	movs	r1, #0
   a4b28:	4b22      	ldr	r3, [pc, #136]	; (a4bb4 <Cl_Rinse_Controller+0xca4>)
   a4b2a:	4798      	blx	r3
   a4b2c:	4603      	mov	r3, r0
   a4b2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a4b32:	2004      	movs	r0, #4
   a4b34:	2100      	movs	r1, #0
   a4b36:	4b1f      	ldr	r3, [pc, #124]	; (a4bb4 <Cl_Rinse_Controller+0xca4>)
   a4b38:	4798      	blx	r3
   a4b3a:	4603      	mov	r3, r0
   a4b3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
   a4b40:	4b1d      	ldr	r3, [pc, #116]	; (a4bb8 <Cl_Rinse_Controller+0xca8>)
   a4b42:	2209      	movs	r2, #9
   a4b44:	701a      	strb	r2, [r3, #0]
						}
						break;
   a4b46:	e07c      	b.n	a4c42 <Cl_Rinse_Controller+0xd32>
   a4b48:	e07b      	b.n	a4c42 <Cl_Rinse_Controller+0xd32>
						case EVENT_RINSE_SET_BLDPMP_ON:
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_START,0);
   a4b4a:	200c      	movs	r0, #12
   a4b4c:	2100      	movs	r1, #0
   a4b4e:	4b27      	ldr	r3, [pc, #156]	; (a4bec <Cl_Rinse_Controller+0xcdc>)
   a4b50:	4798      	blx	r3
						break;
   a4b52:	e076      	b.n	a4c42 <Cl_Rinse_Controller+0xd32>
						case EVENT_RINSE_SET_BLDPMP_OFF:
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_STOP,0);
   a4b54:	200d      	movs	r0, #13
   a4b56:	2100      	movs	r1, #0
   a4b58:	4b24      	ldr	r3, [pc, #144]	; (a4bec <Cl_Rinse_Controller+0xcdc>)
   a4b5a:	4798      	blx	r3
						break;
   a4b5c:	e071      	b.n	a4c42 <Cl_Rinse_Controller+0xd32>
						case EVENT_RINSE_SET_BLDPUMPRATE:
						if(Cl_ConsoleRxMsg.msgready == true)
   a4b5e:	4b28      	ldr	r3, [pc, #160]	; (a4c00 <Cl_Rinse_Controller+0xcf0>)
   a4b60:	7e1b      	ldrb	r3, [r3, #24]
   a4b62:	2b00      	cmp	r3, #0
   a4b64:	d013      	beq.n	a4b8e <Cl_Rinse_Controller+0xc7e>
						{
							
						cl_Datastreamtype cl_temp  ;
						cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a4b66:	4b26      	ldr	r3, [pc, #152]	; (a4c00 <Cl_Rinse_Controller+0xcf0>)
   a4b68:	791b      	ldrb	r3, [r3, #4]
   a4b6a:	763b      	strb	r3, [r7, #24]
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   a4b6c:	4b24      	ldr	r3, [pc, #144]	; (a4c00 <Cl_Rinse_Controller+0xcf0>)
   a4b6e:	791b      	ldrb	r3, [r3, #4]
   a4b70:	767b      	strb	r3, [r7, #25]
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   a4b72:	4b23      	ldr	r3, [pc, #140]	; (a4c00 <Cl_Rinse_Controller+0xcf0>)
   a4b74:	791b      	ldrb	r3, [r3, #4]
   a4b76:	76bb      	strb	r3, [r7, #26]
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   a4b78:	4b21      	ldr	r3, [pc, #132]	; (a4c00 <Cl_Rinse_Controller+0xcf0>)
   a4b7a:	791b      	ldrb	r3, [r3, #4]
   a4b7c:	76fb      	strb	r3, [r7, #27]
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   a4b7e:	8b3b      	ldrh	r3, [r7, #24]
   a4b80:	b29b      	uxth	r3, r3
   a4b82:	b21b      	sxth	r3, r3
   a4b84:	200e      	movs	r0, #14
   a4b86:	4619      	mov	r1, r3
   a4b88:	4b18      	ldr	r3, [pc, #96]	; (a4bec <Cl_Rinse_Controller+0xcdc>)
   a4b8a:	4798      	blx	r3
						}
						break;
   a4b8c:	e059      	b.n	a4c42 <Cl_Rinse_Controller+0xd32>
   a4b8e:	e058      	b.n	a4c42 <Cl_Rinse_Controller+0xd32>
   a4b90:	20071e16 	.word	0x20071e16
   a4b94:	0009b3d5 	.word	0x0009b3d5
   a4b98:	0009b579 	.word	0x0009b579
   a4b9c:	0009b595 	.word	0x0009b595
   a4ba0:	000a5a15 	.word	0x000a5a15
   a4ba4:	000a5785 	.word	0x000a5785
   a4ba8:	0009b65d 	.word	0x0009b65d
   a4bac:	0009b369 	.word	0x0009b369
   a4bb0:	000a5841 	.word	0x000a5841
   a4bb4:	00082a35 	.word	0x00082a35
   a4bb8:	20071df2 	.word	0x20071df2
   a4bbc:	0008fd69 	.word	0x0008fd69
   a4bc0:	cccccccd 	.word	0xcccccccd
   a4bc4:	0009d1e9 	.word	0x0009d1e9
   a4bc8:	20071dfc 	.word	0x20071dfc
   a4bcc:	20071e08 	.word	0x20071e08
   a4bd0:	000a66d5 	.word	0x000a66d5
   a4bd4:	000a59ed 	.word	0x000a59ed
   a4bd8:	00082c09 	.word	0x00082c09
   a4bdc:	20071e12 	.word	0x20071e12
   a4be0:	20071dec 	.word	0x20071dec
   a4be4:	00088b69 	.word	0x00088b69
   a4be8:	20070e98 	.word	0x20070e98
   a4bec:	000880c1 	.word	0x000880c1
   a4bf0:	20071aa4 	.word	0x20071aa4
   a4bf4:	000aa6e4 	.word	0x000aa6e4
   a4bf8:	000aa6ec 	.word	0x000aa6ec
   a4bfc:	00094325 	.word	0x00094325
   a4c00:	200725bc 	.word	0x200725bc
						case EVENT_RINSE_CLR_ALARM:
						
						command = CON_TX_COMMAND_ALARM_CLEARED;
   a4c04:	2351      	movs	r3, #81	; 0x51
   a4c06:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
						data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a4c0a:	2301      	movs	r3, #1
   a4c0c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a4c10:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a4c14:	f107 033b 	add.w	r3, r7, #59	; 0x3b
   a4c18:	4610      	mov	r0, r2
   a4c1a:	4619      	mov	r1, r3
   a4c1c:	2200      	movs	r2, #0
   a4c1e:	4ba1      	ldr	r3, [pc, #644]	; (a4ea4 <Cl_Rinse_Controller+0xf94>)
   a4c20:	4798      	blx	r3
   a4c22:	4603      	mov	r3, r0
   a4c24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						
										sv_cntrl_resetyellowalarm();
   a4c28:	4b9f      	ldr	r3, [pc, #636]	; (a4ea8 <Cl_Rinse_Controller+0xf98>)
   a4c2a:	4798      	blx	r3
										sv_cntrl_resetredalarm();
   a4c2c:	4b9f      	ldr	r3, [pc, #636]	; (a4eac <Cl_Rinse_Controller+0xf9c>)
   a4c2e:	4798      	blx	r3
										sv_cntrl_nobuzzer();
   a4c30:	4b9f      	ldr	r3, [pc, #636]	; (a4eb0 <Cl_Rinse_Controller+0xfa0>)
   a4c32:	4798      	blx	r3
										Cl_Rinse_ResetAlertsforReassertion();
   a4c34:	4b9f      	ldr	r3, [pc, #636]	; (a4eb4 <Cl_Rinse_Controller+0xfa4>)
   a4c36:	4798      	blx	r3
							Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
										cl_rinsestate = CL_RINSE_STATE_RINSING;
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;  
								}		*/		
										
						break;
   a4c38:	e003      	b.n	a4c42 <Cl_Rinse_Controller+0xd32>
						case EVENT_RINSE_BC_OPENFILL_COMPLETED:
						//sv_prop_stopopenfill();
						cl_rinsing_substate = CL_RINSE_RINSING_BC_SWITCHING;
   a4c3a:	4b9f      	ldr	r3, [pc, #636]	; (a4eb8 <Cl_Rinse_Controller+0xfa8>)
   a4c3c:	2202      	movs	r2, #2
   a4c3e:	701a      	strb	r2, [r3, #0]
						break;
   a4c40:	bf00      	nop
				}
		break;
   a4c42:	e387      	b.n	a5354 <Cl_Rinse_Controller+0x1444>
		case CL_RINSE_STATE_CRITICAL_ALARM:
				switch (cl_rinseevent)
   a4c44:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   a4c48:	3b01      	subs	r3, #1
   a4c4a:	2b1d      	cmp	r3, #29
   a4c4c:	f200 81af 	bhi.w	a4fae <Cl_Rinse_Controller+0x109e>
   a4c50:	a201      	add	r2, pc, #4	; (adr r2, a4c58 <Cl_Rinse_Controller+0xd48>)
   a4c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a4c56:	bf00      	nop
   a4c58:	000a4e07 	.word	0x000a4e07
   a4c5c:	000a4cd1 	.word	0x000a4cd1
   a4c60:	000a4faf 	.word	0x000a4faf
   a4c64:	000a4d2f 	.word	0x000a4d2f
   a4c68:	000a4d47 	.word	0x000a4d47
   a4c6c:	000a4d5f 	.word	0x000a4d5f
   a4c70:	000a4faf 	.word	0x000a4faf
   a4c74:	000a4faf 	.word	0x000a4faf
   a4c78:	000a4faf 	.word	0x000a4faf
   a4c7c:	000a4faf 	.word	0x000a4faf
   a4c80:	000a4faf 	.word	0x000a4faf
   a4c84:	000a4faf 	.word	0x000a4faf
   a4c88:	000a4faf 	.word	0x000a4faf
   a4c8c:	000a4faf 	.word	0x000a4faf
   a4c90:	000a4faf 	.word	0x000a4faf
   a4c94:	000a4faf 	.word	0x000a4faf
   a4c98:	000a4faf 	.word	0x000a4faf
   a4c9c:	000a4d71 	.word	0x000a4d71
   a4ca0:	000a4faf 	.word	0x000a4faf
   a4ca4:	000a4faf 	.word	0x000a4faf
   a4ca8:	000a4faf 	.word	0x000a4faf
   a4cac:	000a4d65 	.word	0x000a4d65
   a4cb0:	000a4faf 	.word	0x000a4faf
   a4cb4:	000a4faf 	.word	0x000a4faf
   a4cb8:	000a4faf 	.word	0x000a4faf
   a4cbc:	000a4faf 	.word	0x000a4faf
   a4cc0:	000a4faf 	.word	0x000a4faf
   a4cc4:	000a4faf 	.word	0x000a4faf
   a4cc8:	000a4faf 	.word	0x000a4faf
   a4ccc:	000a4f7d 	.word	0x000a4f7d
				{
					case EVENT_START_RINSE:
					Cl_Rinse_StartRinse();
   a4cd0:	4b7a      	ldr	r3, [pc, #488]	; (a4ebc <Cl_Rinse_Controller+0xfac>)
   a4cd2:	4798      	blx	r3
					command = CON_TX_COMMAND_RINSE_CONFIRM;
   a4cd4:	2308      	movs	r3, #8
   a4cd6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a4cda:	2301      	movs	r3, #1
   a4cdc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);					
   a4ce0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a4ce4:	f107 033b 	add.w	r3, r7, #59	; 0x3b
   a4ce8:	4610      	mov	r0, r2
   a4cea:	4619      	mov	r1, r3
   a4cec:	2201      	movs	r2, #1
   a4cee:	4b6d      	ldr	r3, [pc, #436]	; (a4ea4 <Cl_Rinse_Controller+0xf94>)
   a4cf0:	4798      	blx	r3
   a4cf2:	4603      	mov	r3, r0
   a4cf4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					command = CON_TX_COMMAND_RINSE_STARTED;
   a4cf8:	2309      	movs	r3, #9
   a4cfa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a4cfe:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a4d02:	f107 033b 	add.w	r3, r7, #59	; 0x3b
   a4d06:	4610      	mov	r0, r2
   a4d08:	4619      	mov	r1, r3
   a4d0a:	2200      	movs	r2, #0
   a4d0c:	4b65      	ldr	r3, [pc, #404]	; (a4ea4 <Cl_Rinse_Controller+0xf94>)
   a4d0e:	4798      	blx	r3
   a4d10:	4603      	mov	r3, r0
   a4d12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a4d16:	4b6a      	ldr	r3, [pc, #424]	; (a4ec0 <Cl_Rinse_Controller+0xfb0>)
   a4d18:	4798      	blx	r3
   a4d1a:	4603      	mov	r3, r0
   a4d1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						cl_rinsestate = CL_RINSE_STATE_RINSING;
   a4d20:	4b68      	ldr	r3, [pc, #416]	; (a4ec4 <Cl_Rinse_Controller+0xfb4>)
   a4d22:	2203      	movs	r2, #3
   a4d24:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a4d26:	4b64      	ldr	r3, [pc, #400]	; (a4eb8 <Cl_Rinse_Controller+0xfa8>)
   a4d28:	2201      	movs	r2, #1
   a4d2a:	701a      	strb	r2, [r3, #0]
					break;
   a4d2c:	e140      	b.n	a4fb0 <Cl_Rinse_Controller+0x10a0>
				case EVENT_START_PRE_DISINF_RINSE:
				disinfectionrinseFlag = 1;
   a4d2e:	4b66      	ldr	r3, [pc, #408]	; (a4ec8 <Cl_Rinse_Controller+0xfb8>)
   a4d30:	2201      	movs	r2, #1
   a4d32:	601a      	str	r2, [r3, #0]
				Cl_Rinse_StartRinse();
   a4d34:	4b61      	ldr	r3, [pc, #388]	; (a4ebc <Cl_Rinse_Controller+0xfac>)
   a4d36:	4798      	blx	r3
				
				cl_rinsestate = CL_RINSE_STATE_PRE_DISINFECT_RINSING;
   a4d38:	4b62      	ldr	r3, [pc, #392]	; (a4ec4 <Cl_Rinse_Controller+0xfb4>)
   a4d3a:	2204      	movs	r2, #4
   a4d3c:	701a      	strb	r2, [r3, #0]
				cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a4d3e:	4b5e      	ldr	r3, [pc, #376]	; (a4eb8 <Cl_Rinse_Controller+0xfa8>)
   a4d40:	2201      	movs	r2, #1
   a4d42:	701a      	strb	r2, [r3, #0]
				break;
   a4d44:	e134      	b.n	a4fb0 <Cl_Rinse_Controller+0x10a0>
				case EVENT_START_POST_DISINF_RINSE:
				disinfectionrinseFlag = 1;
   a4d46:	4b60      	ldr	r3, [pc, #384]	; (a4ec8 <Cl_Rinse_Controller+0xfb8>)
   a4d48:	2201      	movs	r2, #1
   a4d4a:	601a      	str	r2, [r3, #0]
				Cl_Rinse_StartRinse();
   a4d4c:	4b5b      	ldr	r3, [pc, #364]	; (a4ebc <Cl_Rinse_Controller+0xfac>)
   a4d4e:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_POST_DISINFECT_RINSING;
   a4d50:	4b5c      	ldr	r3, [pc, #368]	; (a4ec4 <Cl_Rinse_Controller+0xfb4>)
   a4d52:	2205      	movs	r2, #5
   a4d54:	701a      	strb	r2, [r3, #0]
				cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a4d56:	4b58      	ldr	r3, [pc, #352]	; (a4eb8 <Cl_Rinse_Controller+0xfa8>)
   a4d58:	2201      	movs	r2, #1
   a4d5a:	701a      	strb	r2, [r3, #0]
				break;
   a4d5c:	e128      	b.n	a4fb0 <Cl_Rinse_Controller+0x10a0>
					case EVENT_STOP_RINSE:
					Cl_Rinse_StopRinse();
   a4d5e:	4b5b      	ldr	r3, [pc, #364]	; (a4ecc <Cl_Rinse_Controller+0xfbc>)
   a4d60:	4798      	blx	r3
					break;
   a4d62:	e125      	b.n	a4fb0 <Cl_Rinse_Controller+0x10a0>
// 							break;
// 						}
// 					}
// 					break;
					case EVENT_RINSE_ALARM:
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   a4d64:	4b5a      	ldr	r3, [pc, #360]	; (a4ed0 <Cl_Rinse_Controller+0xfc0>)
   a4d66:	4798      	blx	r3
   a4d68:	4603      	mov	r3, r0
   a4d6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					break;
   a4d6e:	e11f      	b.n	a4fb0 <Cl_Rinse_Controller+0x10a0>
					
					case EVENT_RINSE_TICK_SECOND:
						
							for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   a4d70:	4b58      	ldr	r3, [pc, #352]	; (a4ed4 <Cl_Rinse_Controller+0xfc4>)
   a4d72:	2200      	movs	r2, #0
   a4d74:	801a      	strh	r2, [r3, #0]
   a4d76:	e041      	b.n	a4dfc <Cl_Rinse_Controller+0xeec>
							{
								//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER",8);
								Cl_Alarm_GetAlarmStatus(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_RinseAlarmTable[tempcount].IsActive);
   a4d78:	4b56      	ldr	r3, [pc, #344]	; (a4ed4 <Cl_Rinse_Controller+0xfc4>)
   a4d7a:	881b      	ldrh	r3, [r3, #0]
   a4d7c:	461a      	mov	r2, r3
   a4d7e:	4b56      	ldr	r3, [pc, #344]	; (a4ed8 <Cl_Rinse_Controller+0xfc8>)
   a4d80:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
   a4d84:	4b53      	ldr	r3, [pc, #332]	; (a4ed4 <Cl_Rinse_Controller+0xfc4>)
   a4d86:	881b      	ldrh	r3, [r3, #0]
   a4d88:	00db      	lsls	r3, r3, #3
   a4d8a:	4a53      	ldr	r2, [pc, #332]	; (a4ed8 <Cl_Rinse_Controller+0xfc8>)
   a4d8c:	4413      	add	r3, r2
   a4d8e:	3302      	adds	r3, #2
   a4d90:	4608      	mov	r0, r1
   a4d92:	4619      	mov	r1, r3
   a4d94:	4b51      	ldr	r3, [pc, #324]	; (a4edc <Cl_Rinse_Controller+0xfcc>)
   a4d96:	4798      	blx	r3
								if (Cl_RinseAlarmTable[tempcount].IsActive)
   a4d98:	4b4e      	ldr	r3, [pc, #312]	; (a4ed4 <Cl_Rinse_Controller+0xfc4>)
   a4d9a:	881b      	ldrh	r3, [r3, #0]
   a4d9c:	4a4e      	ldr	r2, [pc, #312]	; (a4ed8 <Cl_Rinse_Controller+0xfc8>)
   a4d9e:	00db      	lsls	r3, r3, #3
   a4da0:	4413      	add	r3, r2
   a4da2:	789b      	ldrb	r3, [r3, #2]
   a4da4:	2b00      	cmp	r3, #0
   a4da6:	d00d      	beq.n	a4dc4 <Cl_Rinse_Controller+0xeb4>
								{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
   a4da8:	2018      	movs	r0, #24
   a4daa:	494d      	ldr	r1, [pc, #308]	; (a4ee0 <Cl_Rinse_Controller+0xfd0>)
   a4dac:	2208      	movs	r2, #8
   a4dae:	4b3d      	ldr	r3, [pc, #244]	; (a4ea4 <Cl_Rinse_Controller+0xf94>)
   a4db0:	4798      	blx	r3
										Cl_Rinse_StopRinse();
   a4db2:	4b46      	ldr	r3, [pc, #280]	; (a4ecc <Cl_Rinse_Controller+0xfbc>)
   a4db4:	4798      	blx	r3
										cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a4db6:	4b43      	ldr	r3, [pc, #268]	; (a4ec4 <Cl_Rinse_Controller+0xfb4>)
   a4db8:	2206      	movs	r2, #6
   a4dba:	701a      	strb	r2, [r3, #0]
										tempcount=0;
   a4dbc:	4b45      	ldr	r3, [pc, #276]	; (a4ed4 <Cl_Rinse_Controller+0xfc4>)
   a4dbe:	2200      	movs	r2, #0
   a4dc0:	801a      	strh	r2, [r3, #0]
										break;	
   a4dc2:	e01f      	b.n	a4e04 <Cl_Rinse_Controller+0xef4>
								}
								else if (tempcount == CL_RINSE_ALRM_MAX - 1)
   a4dc4:	4b43      	ldr	r3, [pc, #268]	; (a4ed4 <Cl_Rinse_Controller+0xfc4>)
   a4dc6:	881b      	ldrh	r3, [r3, #0]
   a4dc8:	2b1a      	cmp	r3, #26
   a4dca:	d111      	bne.n	a4df0 <Cl_Rinse_Controller+0xee0>
								{
									if(!Cl_RinseAlarmTable[tempcount].IsActive)
   a4dcc:	4b41      	ldr	r3, [pc, #260]	; (a4ed4 <Cl_Rinse_Controller+0xfc4>)
   a4dce:	881b      	ldrh	r3, [r3, #0]
   a4dd0:	4a41      	ldr	r2, [pc, #260]	; (a4ed8 <Cl_Rinse_Controller+0xfc8>)
   a4dd2:	00db      	lsls	r3, r3, #3
   a4dd4:	4413      	add	r3, r2
   a4dd6:	789b      	ldrb	r3, [r3, #2]
   a4dd8:	f083 0301 	eor.w	r3, r3, #1
   a4ddc:	b2db      	uxtb	r3, r3
   a4dde:	2b00      	cmp	r3, #0
   a4de0:	d006      	beq.n	a4df0 <Cl_Rinse_Controller+0xee0>
									{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SAFE",8);
   a4de2:	2018      	movs	r0, #24
   a4de4:	493f      	ldr	r1, [pc, #252]	; (a4ee4 <Cl_Rinse_Controller+0xfd4>)
   a4de6:	2208      	movs	r2, #8
   a4de8:	4b2e      	ldr	r3, [pc, #184]	; (a4ea4 <Cl_Rinse_Controller+0xf94>)
   a4dea:	4798      	blx	r3
										
										//alarm_flag = 0;
										Cl_Rinse_ResetAlertsforReassertion();
   a4dec:	4b31      	ldr	r3, [pc, #196]	; (a4eb4 <Cl_Rinse_Controller+0xfa4>)
   a4dee:	4798      	blx	r3
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
					break;
					
					case EVENT_RINSE_TICK_SECOND:
						
							for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   a4df0:	4b38      	ldr	r3, [pc, #224]	; (a4ed4 <Cl_Rinse_Controller+0xfc4>)
   a4df2:	881b      	ldrh	r3, [r3, #0]
   a4df4:	3301      	adds	r3, #1
   a4df6:	b29a      	uxth	r2, r3
   a4df8:	4b36      	ldr	r3, [pc, #216]	; (a4ed4 <Cl_Rinse_Controller+0xfc4>)
   a4dfa:	801a      	strh	r2, [r3, #0]
   a4dfc:	4b35      	ldr	r3, [pc, #212]	; (a4ed4 <Cl_Rinse_Controller+0xfc4>)
   a4dfe:	881b      	ldrh	r3, [r3, #0]
   a4e00:	2b1a      	cmp	r3, #26
   a4e02:	d9b9      	bls.n	a4d78 <Cl_Rinse_Controller+0xe68>
										//Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
									//	cl_rinsestate = CL_RINSE_STATE_RINSING;
									}
								}
							}
						break;
   a4e04:	e0d4      	b.n	a4fb0 <Cl_Rinse_Controller+0x10a0>
					case EVENT_RINSE_CLR_ALARM:
					
							if(cl_rinse_powerFailureFlag == 1){
   a4e06:	4b38      	ldr	r3, [pc, #224]	; (a4ee8 <Cl_Rinse_Controller+0xfd8>)
   a4e08:	681b      	ldr	r3, [r3, #0]
   a4e0a:	2b01      	cmp	r3, #1
   a4e0c:	d120      	bne.n	a4e50 <Cl_Rinse_Controller+0xf40>
								
								Cl_SysStat_GetSensor_Status_Query(SENSOR_POWER_FAILURE,&powerFailSensorData);
   a4e0e:	2024      	movs	r0, #36	; 0x24
   a4e10:	4936      	ldr	r1, [pc, #216]	; (a4eec <Cl_Rinse_Controller+0xfdc>)
   a4e12:	4b37      	ldr	r3, [pc, #220]	; (a4ef0 <Cl_Rinse_Controller+0xfe0>)
   a4e14:	4798      	blx	r3
					
								if(powerFailSensorData == 0){
   a4e16:	4b35      	ldr	r3, [pc, #212]	; (a4eec <Cl_Rinse_Controller+0xfdc>)
   a4e18:	881b      	ldrh	r3, [r3, #0]
   a4e1a:	2b00      	cmp	r3, #0
   a4e1c:	f040 80ad 	bne.w	a4f7a <Cl_Rinse_Controller+0x106a>
									
									cl_rinse_powerFailureFlag = 0;
   a4e20:	4b31      	ldr	r3, [pc, #196]	; (a4ee8 <Cl_Rinse_Controller+0xfd8>)
   a4e22:	2200      	movs	r2, #0
   a4e24:	601a      	str	r2, [r3, #0]
									command = CON_TX_COMMAND_ALARM_CLEARED;
   a4e26:	2351      	movs	r3, #81	; 0x51
   a4e28:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
									Cl_SendDatatoconsole(command,&data,0);
   a4e2c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a4e30:	f107 033b 	add.w	r3, r7, #59	; 0x3b
   a4e34:	4610      	mov	r0, r2
   a4e36:	4619      	mov	r1, r3
   a4e38:	2200      	movs	r2, #0
   a4e3a:	4b1a      	ldr	r3, [pc, #104]	; (a4ea4 <Cl_Rinse_Controller+0xf94>)
   a4e3c:	4798      	blx	r3
									sv_cntrl_resetyellowalarm();
   a4e3e:	4b1a      	ldr	r3, [pc, #104]	; (a4ea8 <Cl_Rinse_Controller+0xf98>)
   a4e40:	4798      	blx	r3
									sv_cntrl_resetredalarm();
   a4e42:	4b1a      	ldr	r3, [pc, #104]	; (a4eac <Cl_Rinse_Controller+0xf9c>)
   a4e44:	4798      	blx	r3
									sv_cntrl_nobuzzer();
   a4e46:	4b1a      	ldr	r3, [pc, #104]	; (a4eb0 <Cl_Rinse_Controller+0xfa0>)
   a4e48:	4798      	blx	r3
									Cl_Rinse_ResetAlertsforReassertion();
   a4e4a:	4b1a      	ldr	r3, [pc, #104]	; (a4eb4 <Cl_Rinse_Controller+0xfa4>)
   a4e4c:	4798      	blx	r3
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;  
								}
				}
							}
						//alarm_flag = 1;
						break;
   a4e4e:	e0af      	b.n	a4fb0 <Cl_Rinse_Controller+0x10a0>
									Cl_Rinse_ResetAlertsforReassertion();
								}
							}
							else{
					
							command = CON_TX_COMMAND_ALARM_CLEARED;
   a4e50:	2351      	movs	r3, #81	; 0x51
   a4e52:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a4e56:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a4e5a:	f107 033b 	add.w	r3, r7, #59	; 0x3b
   a4e5e:	4610      	mov	r0, r2
   a4e60:	4619      	mov	r1, r3
   a4e62:	2200      	movs	r2, #0
   a4e64:	4b0f      	ldr	r3, [pc, #60]	; (a4ea4 <Cl_Rinse_Controller+0xf94>)
   a4e66:	4798      	blx	r3
   a4e68:	4603      	mov	r3, r0
   a4e6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							
					
										sv_cntrl_resetyellowalarm();
   a4e6e:	4b0e      	ldr	r3, [pc, #56]	; (a4ea8 <Cl_Rinse_Controller+0xf98>)
   a4e70:	4798      	blx	r3
										sv_cntrl_resetredalarm();
   a4e72:	4b0e      	ldr	r3, [pc, #56]	; (a4eac <Cl_Rinse_Controller+0xf9c>)
   a4e74:	4798      	blx	r3
										sv_cntrl_nobuzzer();
   a4e76:	4b0e      	ldr	r3, [pc, #56]	; (a4eb0 <Cl_Rinse_Controller+0xfa0>)
   a4e78:	4798      	blx	r3
										Cl_Rinse_ResetAlertsforReassertion();
   a4e7a:	4b0e      	ldr	r3, [pc, #56]	; (a4eb4 <Cl_Rinse_Controller+0xfa4>)
   a4e7c:	4798      	blx	r3
										
								// manav02 added to clear saline prime alarm		
										if(prime_alarm_flag == 1){
   a4e7e:	4b1d      	ldr	r3, [pc, #116]	; (a4ef4 <Cl_Rinse_Controller+0xfe4>)
   a4e80:	681b      	ldr	r3, [r3, #0]
   a4e82:	2b01      	cmp	r3, #1
   a4e84:	d13c      	bne.n	a4f00 <Cl_Rinse_Controller+0xff0>
											
										cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0); 	
   a4e86:	2001      	movs	r0, #1
   a4e88:	2100      	movs	r1, #0
   a4e8a:	4b1b      	ldr	r3, [pc, #108]	; (a4ef8 <Cl_Rinse_Controller+0xfe8>)
   a4e8c:	4798      	blx	r3
											blood_flag = 1;
   a4e8e:	4b1b      	ldr	r3, [pc, #108]	; (a4efc <Cl_Rinse_Controller+0xfec>)
   a4e90:	2201      	movs	r2, #1
   a4e92:	701a      	strb	r2, [r3, #0]
											prime_alarm_flag = 0;
   a4e94:	4b17      	ldr	r3, [pc, #92]	; (a4ef4 <Cl_Rinse_Controller+0xfe4>)
   a4e96:	2200      	movs	r2, #0
   a4e98:	601a      	str	r2, [r3, #0]
											cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
   a4e9a:	4b0a      	ldr	r3, [pc, #40]	; (a4ec4 <Cl_Rinse_Controller+0xfb4>)
   a4e9c:	2209      	movs	r2, #9
   a4e9e:	701a      	strb	r2, [r3, #0]
   a4ea0:	e06b      	b.n	a4f7a <Cl_Rinse_Controller+0x106a>
   a4ea2:	bf00      	nop
   a4ea4:	0009d1e9 	.word	0x0009d1e9
   a4ea8:	0009b699 	.word	0x0009b699
   a4eac:	0009b685 	.word	0x0009b685
   a4eb0:	0009b6c1 	.word	0x0009b6c1
   a4eb4:	000a5a15 	.word	0x000a5a15
   a4eb8:	20071df3 	.word	0x20071df3
   a4ebc:	000a60f1 	.word	0x000a60f1
   a4ec0:	000a5725 	.word	0x000a5725
   a4ec4:	20071df2 	.word	0x20071df2
   a4ec8:	20071e24 	.word	0x20071e24
   a4ecc:	000a66d5 	.word	0x000a66d5
   a4ed0:	000a59ed 	.word	0x000a59ed
   a4ed4:	20072a48 	.word	0x20072a48
   a4ed8:	20070e98 	.word	0x20070e98
   a4edc:	00082c09 	.word	0x00082c09
   a4ee0:	000aa6f8 	.word	0x000aa6f8
   a4ee4:	000aa700 	.word	0x000aa700
   a4ee8:	20071e1c 	.word	0x20071e1c
   a4eec:	20071e20 	.word	0x20071e20
   a4ef0:	0008fd69 	.word	0x0008fd69
   a4ef4:	20071e18 	.word	0x20071e18
   a4ef8:	000880c1 	.word	0x000880c1
   a4efc:	20071dec 	.word	0x20071dec
										}
										else if(disinfectionrinseFlag == 1){
   a4f00:	4bab      	ldr	r3, [pc, #684]	; (a51b0 <Cl_Rinse_Controller+0x12a0>)
   a4f02:	681b      	ldr	r3, [r3, #0]
   a4f04:	2b01      	cmp	r3, #1
   a4f06:	d038      	beq.n	a4f7a <Cl_Rinse_Controller+0x106a>
											
											
										}
										else{
											
								Cl_rinseretcode = Cl_Rinse_StartRinse();
   a4f08:	4baa      	ldr	r3, [pc, #680]	; (a51b4 <Cl_Rinse_Controller+0x12a4>)
   a4f0a:	4798      	blx	r3
   a4f0c:	4603      	mov	r3, r0
   a4f0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								
								if(Cl_rinseretcode == CL_OK){
   a4f12:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   a4f16:	2b00      	cmp	r3, #0
   a4f18:	d12f      	bne.n	a4f7a <Cl_Rinse_Controller+0x106a>
									
							command = CON_TX_COMMAND_RINSE_CONFIRM;
   a4f1a:	2308      	movs	r3, #8
   a4f1c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a4f20:	2301      	movs	r3, #1
   a4f22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);
   a4f26:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a4f2a:	f107 033b 	add.w	r3, r7, #59	; 0x3b
   a4f2e:	4610      	mov	r0, r2
   a4f30:	4619      	mov	r1, r3
   a4f32:	2201      	movs	r2, #1
   a4f34:	4ba0      	ldr	r3, [pc, #640]	; (a51b8 <Cl_Rinse_Controller+0x12a8>)
   a4f36:	4798      	blx	r3
   a4f38:	4603      	mov	r3, r0
   a4f3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							command = CON_TX_COMMAND_RINSE_STARTED;
   a4f3e:	2309      	movs	r3, #9
   a4f40:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a4f44:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a4f48:	f107 033b 	add.w	r3, r7, #59	; 0x3b
   a4f4c:	4610      	mov	r0, r2
   a4f4e:	4619      	mov	r1, r3
   a4f50:	2200      	movs	r2, #0
   a4f52:	4b99      	ldr	r3, [pc, #612]	; (a51b8 <Cl_Rinse_Controller+0x12a8>)
   a4f54:	4798      	blx	r3
   a4f56:	4603      	mov	r3, r0
   a4f58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							cl_wait(20);
   a4f5c:	2014      	movs	r0, #20
   a4f5e:	4b97      	ldr	r3, [pc, #604]	; (a51bc <Cl_Rinse_Controller+0x12ac>)
   a4f60:	4798      	blx	r3
							Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a4f62:	4b97      	ldr	r3, [pc, #604]	; (a51c0 <Cl_Rinse_Controller+0x12b0>)
   a4f64:	4798      	blx	r3
   a4f66:	4603      	mov	r3, r0
   a4f68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
										cl_rinsestate = CL_RINSE_STATE_RINSING;
   a4f6c:	4b95      	ldr	r3, [pc, #596]	; (a51c4 <Cl_Rinse_Controller+0x12b4>)
   a4f6e:	2203      	movs	r2, #3
   a4f70:	701a      	strb	r2, [r3, #0]
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;  
   a4f72:	4b95      	ldr	r3, [pc, #596]	; (a51c8 <Cl_Rinse_Controller+0x12b8>)
   a4f74:	2201      	movs	r2, #1
   a4f76:	701a      	strb	r2, [r3, #0]
								}
				}
							}
						//alarm_flag = 1;
						break;
   a4f78:	e01a      	b.n	a4fb0 <Cl_Rinse_Controller+0x10a0>
   a4f7a:	e019      	b.n	a4fb0 <Cl_Rinse_Controller+0x10a0>
					case EVENT_RINSE_TICK_MINUTE:
					//Cl_rinseretcode = Cl_Rinse_ResetAlertsforReassertion();
					//Cl_rinseretcode = Cl_Rinse_repeatalrm();
					break;
					case EVENT_RINSE_SET_BLDPUMPRATE:
						if(Cl_ConsoleRxMsg.msgready == true)
   a4f7c:	4b93      	ldr	r3, [pc, #588]	; (a51cc <Cl_Rinse_Controller+0x12bc>)
   a4f7e:	7e1b      	ldrb	r3, [r3, #24]
   a4f80:	2b00      	cmp	r3, #0
   a4f82:	d013      	beq.n	a4fac <Cl_Rinse_Controller+0x109c>
						{
							
							cl_Datastreamtype cl_temp  ;
							cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a4f84:	4b91      	ldr	r3, [pc, #580]	; (a51cc <Cl_Rinse_Controller+0x12bc>)
   a4f86:	791b      	ldrb	r3, [r3, #4]
   a4f88:	753b      	strb	r3, [r7, #20]
							cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   a4f8a:	4b90      	ldr	r3, [pc, #576]	; (a51cc <Cl_Rinse_Controller+0x12bc>)
   a4f8c:	791b      	ldrb	r3, [r3, #4]
   a4f8e:	757b      	strb	r3, [r7, #21]
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   a4f90:	4b8e      	ldr	r3, [pc, #568]	; (a51cc <Cl_Rinse_Controller+0x12bc>)
   a4f92:	791b      	ldrb	r3, [r3, #4]
   a4f94:	75bb      	strb	r3, [r7, #22]
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   a4f96:	4b8d      	ldr	r3, [pc, #564]	; (a51cc <Cl_Rinse_Controller+0x12bc>)
   a4f98:	791b      	ldrb	r3, [r3, #4]
   a4f9a:	75fb      	strb	r3, [r7, #23]
							cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   a4f9c:	8abb      	ldrh	r3, [r7, #20]
   a4f9e:	b29b      	uxth	r3, r3
   a4fa0:	b21b      	sxth	r3, r3
   a4fa2:	200e      	movs	r0, #14
   a4fa4:	4619      	mov	r1, r3
   a4fa6:	4b8a      	ldr	r3, [pc, #552]	; (a51d0 <Cl_Rinse_Controller+0x12c0>)
   a4fa8:	4798      	blx	r3
						}
					break;
   a4faa:	e001      	b.n	a4fb0 <Cl_Rinse_Controller+0x10a0>
   a4fac:	e000      	b.n	a4fb0 <Cl_Rinse_Controller+0x10a0>
					default:break;
   a4fae:	bf00      	nop
				}
		break;
   a4fb0:	e1d1      	b.n	a5356 <Cl_Rinse_Controller+0x1446>
		case CL_RINSE_STATE_POST_RINSE_STANDBY:
				switch (cl_rinseevent)
   a4fb2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   a4fb6:	3b01      	subs	r3, #1
   a4fb8:	2b1f      	cmp	r3, #31
   a4fba:	f200 8140 	bhi.w	a523e <Cl_Rinse_Controller+0x132e>
   a4fbe:	a201      	add	r2, pc, #4	; (adr r2, a4fc4 <Cl_Rinse_Controller+0x10b4>)
   a4fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a4fc4:	000a517f 	.word	0x000a517f
   a4fc8:	000a5051 	.word	0x000a5051
   a4fcc:	000a523f 	.word	0x000a523f
   a4fd0:	000a50cf 	.word	0x000a50cf
   a4fd4:	000a50eb 	.word	0x000a50eb
   a4fd8:	000a523f 	.word	0x000a523f
   a4fdc:	000a523f 	.word	0x000a523f
   a4fe0:	000a523f 	.word	0x000a523f
   a4fe4:	000a523f 	.word	0x000a523f
   a4fe8:	000a523f 	.word	0x000a523f
   a4fec:	000a523f 	.word	0x000a523f
   a4ff0:	000a523f 	.word	0x000a523f
   a4ff4:	000a523f 	.word	0x000a523f
   a4ff8:	000a523f 	.word	0x000a523f
   a4ffc:	000a523f 	.word	0x000a523f
   a5000:	000a523f 	.word	0x000a523f
   a5004:	000a523f 	.word	0x000a523f
   a5008:	000a523f 	.word	0x000a523f
   a500c:	000a523f 	.word	0x000a523f
   a5010:	000a523f 	.word	0x000a523f
   a5014:	000a523f 	.word	0x000a523f
   a5018:	000a5045 	.word	0x000a5045
   a501c:	000a523f 	.word	0x000a523f
   a5020:	000a523f 	.word	0x000a523f
   a5024:	000a517b 	.word	0x000a517b
   a5028:	000a5107 	.word	0x000a5107
   a502c:	000a5139 	.word	0x000a5139
   a5030:	000a523f 	.word	0x000a523f
   a5034:	000a523f 	.word	0x000a523f
   a5038:	000a520d 	.word	0x000a520d
   a503c:	000a5143 	.word	0x000a5143
   a5040:	000a5167 	.word	0x000a5167
				{
					case EVENT_RINSE_ALARM:
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   a5044:	4b63      	ldr	r3, [pc, #396]	; (a51d4 <Cl_Rinse_Controller+0x12c4>)
   a5046:	4798      	blx	r3
   a5048:	4603      	mov	r3, r0
   a504a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					break;
   a504e:	e0f8      	b.n	a5242 <Cl_Rinse_Controller+0x1332>
					
					case EVENT_START_RINSE:
					
					if(Cl_ConsoleRxMsg.msgready == true)
   a5050:	4b5e      	ldr	r3, [pc, #376]	; (a51cc <Cl_Rinse_Controller+0x12bc>)
   a5052:	7e1b      	ldrb	r3, [r3, #24]
   a5054:	2b00      	cmp	r3, #0
   a5056:	d00b      	beq.n	a5070 <Cl_Rinse_Controller+0x1160>
					{
					cl_Datastreamtype cl_temp  ;
					cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a5058:	4b5c      	ldr	r3, [pc, #368]	; (a51cc <Cl_Rinse_Controller+0x12bc>)
   a505a:	791b      	ldrb	r3, [r3, #4]
   a505c:	743b      	strb	r3, [r7, #16]
					if (cl_temp.bytearray[0] == 1)
   a505e:	7c3b      	ldrb	r3, [r7, #16]
   a5060:	2b01      	cmp	r3, #1
   a5062:	d005      	beq.n	a5070 <Cl_Rinse_Controller+0x1160>
					{
						
					}
					else if (cl_temp.bytearray[0] == 2)
   a5064:	7c3b      	ldrb	r3, [r7, #16]
   a5066:	2b02      	cmp	r3, #2
   a5068:	d102      	bne.n	a5070 <Cl_Rinse_Controller+0x1160>
					{
						hotrinse_flag = 1;
   a506a:	4b5b      	ldr	r3, [pc, #364]	; (a51d8 <Cl_Rinse_Controller+0x12c8>)
   a506c:	2201      	movs	r2, #1
   a506e:	701a      	strb	r2, [r3, #0]
					}
					
					}
					Cl_Rinse_StartRinse();
   a5070:	4b50      	ldr	r3, [pc, #320]	; (a51b4 <Cl_Rinse_Controller+0x12a4>)
   a5072:	4798      	blx	r3
					command = CON_TX_COMMAND_RINSE_CONFIRM;
   a5074:	2308      	movs	r3, #8
   a5076:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a507a:	2301      	movs	r3, #1
   a507c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);					
   a5080:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a5084:	f107 033b 	add.w	r3, r7, #59	; 0x3b
   a5088:	4610      	mov	r0, r2
   a508a:	4619      	mov	r1, r3
   a508c:	2201      	movs	r2, #1
   a508e:	4b4a      	ldr	r3, [pc, #296]	; (a51b8 <Cl_Rinse_Controller+0x12a8>)
   a5090:	4798      	blx	r3
   a5092:	4603      	mov	r3, r0
   a5094:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					command = CON_TX_COMMAND_RINSE_STARTED;
   a5098:	2309      	movs	r3, #9
   a509a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a509e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a50a2:	f107 033b 	add.w	r3, r7, #59	; 0x3b
   a50a6:	4610      	mov	r0, r2
   a50a8:	4619      	mov	r1, r3
   a50aa:	2200      	movs	r2, #0
   a50ac:	4b42      	ldr	r3, [pc, #264]	; (a51b8 <Cl_Rinse_Controller+0x12a8>)
   a50ae:	4798      	blx	r3
   a50b0:	4603      	mov	r3, r0
   a50b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a50b6:	4b42      	ldr	r3, [pc, #264]	; (a51c0 <Cl_Rinse_Controller+0x12b0>)
   a50b8:	4798      	blx	r3
   a50ba:	4603      	mov	r3, r0
   a50bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						cl_rinsestate = CL_RINSE_STATE_RINSING;
   a50c0:	4b40      	ldr	r3, [pc, #256]	; (a51c4 <Cl_Rinse_Controller+0x12b4>)
   a50c2:	2203      	movs	r2, #3
   a50c4:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a50c6:	4b40      	ldr	r3, [pc, #256]	; (a51c8 <Cl_Rinse_Controller+0x12b8>)
   a50c8:	2201      	movs	r2, #1
   a50ca:	701a      	strb	r2, [r3, #0]
					break;
   a50cc:	e0b9      	b.n	a5242 <Cl_Rinse_Controller+0x1332>
					case EVENT_START_PRE_DISINF_RINSE:
						Cl_Rinse_StartRinse();
   a50ce:	4b39      	ldr	r3, [pc, #228]	; (a51b4 <Cl_Rinse_Controller+0x12a4>)
   a50d0:	4798      	blx	r3
						Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a50d2:	4b3b      	ldr	r3, [pc, #236]	; (a51c0 <Cl_Rinse_Controller+0x12b0>)
   a50d4:	4798      	blx	r3
   a50d6:	4603      	mov	r3, r0
   a50d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						cl_rinsestate = CL_RINSE_STATE_PRE_DISINFECT_RINSING;
   a50dc:	4b39      	ldr	r3, [pc, #228]	; (a51c4 <Cl_Rinse_Controller+0x12b4>)
   a50de:	2204      	movs	r2, #4
   a50e0:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a50e2:	4b39      	ldr	r3, [pc, #228]	; (a51c8 <Cl_Rinse_Controller+0x12b8>)
   a50e4:	2201      	movs	r2, #1
   a50e6:	701a      	strb	r2, [r3, #0]
					break;
   a50e8:	e0ab      	b.n	a5242 <Cl_Rinse_Controller+0x1332>
					case EVENT_START_POST_DISINF_RINSE:
							Cl_Rinse_StartRinse();
   a50ea:	4b32      	ldr	r3, [pc, #200]	; (a51b4 <Cl_Rinse_Controller+0x12a4>)
   a50ec:	4798      	blx	r3
							Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a50ee:	4b34      	ldr	r3, [pc, #208]	; (a51c0 <Cl_Rinse_Controller+0x12b0>)
   a50f0:	4798      	blx	r3
   a50f2:	4603      	mov	r3, r0
   a50f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							cl_rinsestate = CL_RINSE_STATE_POST_DISINFECT_RINSING;
   a50f8:	4b32      	ldr	r3, [pc, #200]	; (a51c4 <Cl_Rinse_Controller+0x12b4>)
   a50fa:	2205      	movs	r2, #5
   a50fc:	701a      	strb	r2, [r3, #0]
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a50fe:	4b32      	ldr	r3, [pc, #200]	; (a51c8 <Cl_Rinse_Controller+0x12b8>)
   a5100:	2201      	movs	r2, #1
   a5102:	701a      	strb	r2, [r3, #0]
					break;
   a5104:	e09d      	b.n	a5242 <Cl_Rinse_Controller+0x1332>
// 						}
// 					}
// 					break;
					case EVT_RINSE_START_PRIME:
					
					sv_cntrl_resetgreenalarm();
   a5106:	4b35      	ldr	r3, [pc, #212]	; (a51dc <Cl_Rinse_Controller+0x12cc>)
   a5108:	4798      	blx	r3
						blood_flag = 1;
   a510a:	4b35      	ldr	r3, [pc, #212]	; (a51e0 <Cl_Rinse_Controller+0x12d0>)
   a510c:	2201      	movs	r2, #1
   a510e:	701a      	strb	r2, [r3, #0]
					if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   a5110:	4b34      	ldr	r3, [pc, #208]	; (a51e4 <Cl_Rinse_Controller+0x12d4>)
   a5112:	781b      	ldrb	r3, [r3, #0]
   a5114:	2b01      	cmp	r3, #1
   a5116:	d00e      	beq.n	a5136 <Cl_Rinse_Controller+0x1226>
					{
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   a5118:	2018      	movs	r0, #24
   a511a:	4933      	ldr	r1, [pc, #204]	; (a51e8 <Cl_Rinse_Controller+0x12d8>)
   a511c:	2206      	movs	r2, #6
   a511e:	4b26      	ldr	r3, [pc, #152]	; (a51b8 <Cl_Rinse_Controller+0x12a8>)
   a5120:	4798      	blx	r3
						cl_dprep_activate_prime_related_alarms();
   a5122:	4b32      	ldr	r3, [pc, #200]	; (a51ec <Cl_Rinse_Controller+0x12dc>)
   a5124:	4798      	blx	r3
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a5126:	4b32      	ldr	r3, [pc, #200]	; (a51f0 <Cl_Rinse_Controller+0x12e0>)
   a5128:	2200      	movs	r2, #0
   a512a:	70da      	strb	r2, [r3, #3]
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   a512c:	2001      	movs	r0, #1
   a512e:	2100      	movs	r1, #0
   a5130:	4b27      	ldr	r3, [pc, #156]	; (a51d0 <Cl_Rinse_Controller+0x12c0>)
   a5132:	4798      	blx	r3
					}
						
					break;
   a5134:	e085      	b.n	a5242 <Cl_Rinse_Controller+0x1332>
   a5136:	e084      	b.n	a5242 <Cl_Rinse_Controller+0x1332>
					case EVT_RINSE_STOP_PRIME:
					//blood_flag = 0;
					cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   a5138:	2002      	movs	r0, #2
   a513a:	2100      	movs	r1, #0
   a513c:	4b24      	ldr	r3, [pc, #144]	; (a51d0 <Cl_Rinse_Controller+0x12c0>)
   a513e:	4798      	blx	r3
					break;
   a5140:	e07f      	b.n	a5242 <Cl_Rinse_Controller+0x1332>
					case EVT_RINSE_RCIRC_START:
					if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   a5142:	4b28      	ldr	r3, [pc, #160]	; (a51e4 <Cl_Rinse_Controller+0x12d4>)
   a5144:	781b      	ldrb	r3, [r3, #0]
   a5146:	2b01      	cmp	r3, #1
   a5148:	d00c      	beq.n	a5164 <Cl_Rinse_Controller+0x1254>
					{
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   a514a:	2018      	movs	r0, #24
   a514c:	4929      	ldr	r1, [pc, #164]	; (a51f4 <Cl_Rinse_Controller+0x12e4>)
   a514e:	2206      	movs	r2, #6
   a5150:	4b19      	ldr	r3, [pc, #100]	; (a51b8 <Cl_Rinse_Controller+0x12a8>)
   a5152:	4798      	blx	r3
						cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   a5154:	2005      	movs	r0, #5
   a5156:	2100      	movs	r1, #0
   a5158:	4b1d      	ldr	r3, [pc, #116]	; (a51d0 <Cl_Rinse_Controller+0x12c0>)
   a515a:	4798      	blx	r3
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a515c:	4b24      	ldr	r3, [pc, #144]	; (a51f0 <Cl_Rinse_Controller+0x12e0>)
   a515e:	2200      	movs	r2, #0
   a5160:	70da      	strb	r2, [r3, #3]
					}
						
					break;
   a5162:	e06e      	b.n	a5242 <Cl_Rinse_Controller+0x1332>
   a5164:	e06d      	b.n	a5242 <Cl_Rinse_Controller+0x1332>
					case EVT_RINSE_RCIRC_STOP:

						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC_STOP",6);
   a5166:	2018      	movs	r0, #24
   a5168:	4923      	ldr	r1, [pc, #140]	; (a51f8 <Cl_Rinse_Controller+0x12e8>)
   a516a:	2206      	movs	r2, #6
   a516c:	4b12      	ldr	r3, [pc, #72]	; (a51b8 <Cl_Rinse_Controller+0x12a8>)
   a516e:	4798      	blx	r3
						cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_STOP,0);
   a5170:	2006      	movs	r0, #6
   a5172:	2100      	movs	r1, #0
   a5174:	4b16      	ldr	r3, [pc, #88]	; (a51d0 <Cl_Rinse_Controller+0x12c0>)
   a5176:	4798      	blx	r3

						
					break;
   a5178:	e063      	b.n	a5242 <Cl_Rinse_Controller+0x1332>
					case EVENT_MAC_RINSE_COMPLETED:
					return(CL_OK);
   a517a:	2300      	movs	r3, #0
   a517c:	e0ed      	b.n	a535a <Cl_Rinse_Controller+0x144a>
					break;
					
					case EVENT_RINSE_CLR_ALARM:
					
					command = CON_TX_COMMAND_ALARM_CLEARED;
   a517e:	2351      	movs	r3, #81	; 0x51
   a5180:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a5184:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a5188:	f107 033b 	add.w	r3, r7, #59	; 0x3b
   a518c:	4610      	mov	r0, r2
   a518e:	4619      	mov	r1, r3
   a5190:	2200      	movs	r2, #0
   a5192:	4b09      	ldr	r3, [pc, #36]	; (a51b8 <Cl_Rinse_Controller+0x12a8>)
   a5194:	4798      	blx	r3
   a5196:	4603      	mov	r3, r0
   a5198:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					
					
					sv_cntrl_resetyellowalarm();
   a519c:	4b17      	ldr	r3, [pc, #92]	; (a51fc <Cl_Rinse_Controller+0x12ec>)
   a519e:	4798      	blx	r3
					sv_cntrl_resetredalarm();
   a51a0:	4b17      	ldr	r3, [pc, #92]	; (a5200 <Cl_Rinse_Controller+0x12f0>)
   a51a2:	4798      	blx	r3
					sv_cntrl_nobuzzer();
   a51a4:	4b17      	ldr	r3, [pc, #92]	; (a5204 <Cl_Rinse_Controller+0x12f4>)
   a51a6:	4798      	blx	r3
					Cl_Rinse_ResetAlertsforReassertion();
   a51a8:	4b17      	ldr	r3, [pc, #92]	; (a5208 <Cl_Rinse_Controller+0x12f8>)
   a51aa:	4798      	blx	r3
					
					break;
   a51ac:	e049      	b.n	a5242 <Cl_Rinse_Controller+0x1332>
   a51ae:	bf00      	nop
   a51b0:	20071e24 	.word	0x20071e24
   a51b4:	000a60f1 	.word	0x000a60f1
   a51b8:	0009d1e9 	.word	0x0009d1e9
   a51bc:	0009421d 	.word	0x0009421d
   a51c0:	000a5725 	.word	0x000a5725
   a51c4:	20071df2 	.word	0x20071df2
   a51c8:	20071df3 	.word	0x20071df3
   a51cc:	200725bc 	.word	0x200725bc
   a51d0:	000880c1 	.word	0x000880c1
   a51d4:	000a59ed 	.word	0x000a59ed
   a51d8:	20071e15 	.word	0x20071e15
   a51dc:	0009b6ad 	.word	0x0009b6ad
   a51e0:	20071dec 	.word	0x20071dec
   a51e4:	20071aa4 	.word	0x20071aa4
   a51e8:	000aa708 	.word	0x000aa708
   a51ec:	00088b69 	.word	0x00088b69
   a51f0:	20070e98 	.word	0x20070e98
   a51f4:	000aa6e4 	.word	0x000aa6e4
   a51f8:	000aa6ec 	.word	0x000aa6ec
   a51fc:	0009b699 	.word	0x0009b699
   a5200:	0009b685 	.word	0x0009b685
   a5204:	0009b6c1 	.word	0x0009b6c1
   a5208:	000a5a15 	.word	0x000a5a15
					
					case EVENT_RINSE_SET_BLDPUMPRATE:
					if(Cl_ConsoleRxMsg.msgready == true)
   a520c:	4b55      	ldr	r3, [pc, #340]	; (a5364 <Cl_Rinse_Controller+0x1454>)
   a520e:	7e1b      	ldrb	r3, [r3, #24]
   a5210:	2b00      	cmp	r3, #0
   a5212:	d013      	beq.n	a523c <Cl_Rinse_Controller+0x132c>
					{
						
						cl_Datastreamtype cl_temp  ;
						cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a5214:	4b53      	ldr	r3, [pc, #332]	; (a5364 <Cl_Rinse_Controller+0x1454>)
   a5216:	791b      	ldrb	r3, [r3, #4]
   a5218:	733b      	strb	r3, [r7, #12]
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   a521a:	4b52      	ldr	r3, [pc, #328]	; (a5364 <Cl_Rinse_Controller+0x1454>)
   a521c:	791b      	ldrb	r3, [r3, #4]
   a521e:	737b      	strb	r3, [r7, #13]
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   a5220:	4b50      	ldr	r3, [pc, #320]	; (a5364 <Cl_Rinse_Controller+0x1454>)
   a5222:	791b      	ldrb	r3, [r3, #4]
   a5224:	73bb      	strb	r3, [r7, #14]
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   a5226:	4b4f      	ldr	r3, [pc, #316]	; (a5364 <Cl_Rinse_Controller+0x1454>)
   a5228:	791b      	ldrb	r3, [r3, #4]
   a522a:	73fb      	strb	r3, [r7, #15]
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   a522c:	89bb      	ldrh	r3, [r7, #12]
   a522e:	b29b      	uxth	r3, r3
   a5230:	b21b      	sxth	r3, r3
   a5232:	200e      	movs	r0, #14
   a5234:	4619      	mov	r1, r3
   a5236:	4b4c      	ldr	r3, [pc, #304]	; (a5368 <Cl_Rinse_Controller+0x1458>)
   a5238:	4798      	blx	r3
					}
					break;
   a523a:	e002      	b.n	a5242 <Cl_Rinse_Controller+0x1332>
   a523c:	e001      	b.n	a5242 <Cl_Rinse_Controller+0x1332>
					default: 
					
					return(CL_REJECTED);
   a523e:	2303      	movs	r3, #3
   a5240:	e08b      	b.n	a535a <Cl_Rinse_Controller+0x144a>
					break;
				}
					
		break;
   a5242:	e088      	b.n	a5356 <Cl_Rinse_Controller+0x1446>

	
	default:
			switch(cl_rinseevent)
   a5244:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   a5248:	3b02      	subs	r3, #2
   a524a:	2b17      	cmp	r3, #23
   a524c:	d87e      	bhi.n	a534c <Cl_Rinse_Controller+0x143c>
   a524e:	a201      	add	r2, pc, #4	; (adr r2, a5254 <Cl_Rinse_Controller+0x1344>)
   a5250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a5254:	000a534d 	.word	0x000a534d
   a5258:	000a534d 	.word	0x000a534d
   a525c:	000a534d 	.word	0x000a534d
   a5260:	000a534d 	.word	0x000a534d
   a5264:	000a52b5 	.word	0x000a52b5
   a5268:	000a534d 	.word	0x000a534d
   a526c:	000a534d 	.word	0x000a534d
   a5270:	000a534d 	.word	0x000a534d
   a5274:	000a534d 	.word	0x000a534d
   a5278:	000a534d 	.word	0x000a534d
   a527c:	000a534d 	.word	0x000a534d
   a5280:	000a534d 	.word	0x000a534d
   a5284:	000a533b 	.word	0x000a533b
   a5288:	000a534d 	.word	0x000a534d
   a528c:	000a534d 	.word	0x000a534d
   a5290:	000a534d 	.word	0x000a534d
   a5294:	000a534d 	.word	0x000a534d
   a5298:	000a534d 	.word	0x000a534d
   a529c:	000a534d 	.word	0x000a534d
   a52a0:	000a534d 	.word	0x000a534d
   a52a4:	000a52bb 	.word	0x000a52bb
   a52a8:	000a534d 	.word	0x000a534d
   a52ac:	000a534d 	.word	0x000a534d
   a52b0:	000a52c7 	.word	0x000a52c7
			{
				case EVENT_START_RINSE:
				break;
				case EVENT_STOP_RINSE:
				Cl_Rinse_StopRinse();
   a52b4:	4b2d      	ldr	r3, [pc, #180]	; (a536c <Cl_Rinse_Controller+0x145c>)
   a52b6:	4798      	blx	r3
				break;
   a52b8:	e049      	b.n	a534e <Cl_Rinse_Controller+0x143e>
				//printf("RTO\n");
				break;
				case EVENT_RINSE_ALARM:
				// update console 
				
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   a52ba:	4b2d      	ldr	r3, [pc, #180]	; (a5370 <Cl_Rinse_Controller+0x1460>)
   a52bc:	4798      	blx	r3
   a52be:	4603      	mov	r3, r0
   a52c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				
				break;
   a52c4:	e043      	b.n	a534e <Cl_Rinse_Controller+0x143e>
				case EVENT_MAC_RINSE_COMPLETED:
				if(cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY)
   a52c6:	4b2b      	ldr	r3, [pc, #172]	; (a5374 <Cl_Rinse_Controller+0x1464>)
   a52c8:	781b      	ldrb	r3, [r3, #0]
   a52ca:	2b09      	cmp	r3, #9
   a52cc:	d034      	beq.n	a5338 <Cl_Rinse_Controller+0x1428>
				{
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );					
   a52ce:	200c      	movs	r0, #12
   a52d0:	2100      	movs	r1, #0
   a52d2:	4b29      	ldr	r3, [pc, #164]	; (a5378 <Cl_Rinse_Controller+0x1468>)
   a52d4:	4798      	blx	r3
   a52d6:	4603      	mov	r3, r0
   a52d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a52dc:	200d      	movs	r0, #13
   a52de:	2100      	movs	r1, #0
   a52e0:	4b25      	ldr	r3, [pc, #148]	; (a5378 <Cl_Rinse_Controller+0x1468>)
   a52e2:	4798      	blx	r3
   a52e4:	4603      	mov	r3, r0
   a52e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );
   a52ea:	200e      	movs	r0, #14
   a52ec:	2100      	movs	r1, #0
   a52ee:	4b22      	ldr	r3, [pc, #136]	; (a5378 <Cl_Rinse_Controller+0x1468>)
   a52f0:	4798      	blx	r3
   a52f2:	4603      	mov	r3, r0
   a52f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a52f8:	2029      	movs	r0, #41	; 0x29
   a52fa:	2100      	movs	r1, #0
   a52fc:	4b1e      	ldr	r3, [pc, #120]	; (a5378 <Cl_Rinse_Controller+0x1468>)
   a52fe:	4798      	blx	r3
   a5300:	4603      	mov	r3, r0
   a5302:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a5306:	202b      	movs	r0, #43	; 0x2b
   a5308:	2100      	movs	r1, #0
   a530a:	4b1b      	ldr	r3, [pc, #108]	; (a5378 <Cl_Rinse_Controller+0x1468>)
   a530c:	4798      	blx	r3
   a530e:	4603      	mov	r3, r0
   a5310:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a5314:	2003      	movs	r0, #3
   a5316:	2100      	movs	r1, #0
   a5318:	4b17      	ldr	r3, [pc, #92]	; (a5378 <Cl_Rinse_Controller+0x1468>)
   a531a:	4798      	blx	r3
   a531c:	4603      	mov	r3, r0
   a531e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a5322:	2004      	movs	r0, #4
   a5324:	2100      	movs	r1, #0
   a5326:	4b14      	ldr	r3, [pc, #80]	; (a5378 <Cl_Rinse_Controller+0x1468>)
   a5328:	4798      	blx	r3
   a532a:	4603      	mov	r3, r0
   a532c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
   a5330:	4b10      	ldr	r3, [pc, #64]	; (a5374 <Cl_Rinse_Controller+0x1464>)
   a5332:	2209      	movs	r2, #9
   a5334:	701a      	strb	r2, [r3, #0]
				}
				break;
   a5336:	e00a      	b.n	a534e <Cl_Rinse_Controller+0x143e>
   a5338:	e009      	b.n	a534e <Cl_Rinse_Controller+0x143e>
				case EVENT_RINSE_DIALYSIS_PREP:
				if (cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY )
   a533a:	4b0e      	ldr	r3, [pc, #56]	; (a5374 <Cl_Rinse_Controller+0x1464>)
   a533c:	781b      	ldrb	r3, [r3, #0]
   a533e:	2b09      	cmp	r3, #9
   a5340:	d003      	beq.n	a534a <Cl_Rinse_Controller+0x143a>
				{
					Cl_rinseretcode = CL_ERROR;
   a5342:	2304      	movs	r3, #4
   a5344:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
				break;
   a5348:	e001      	b.n	a534e <Cl_Rinse_Controller+0x143e>
   a534a:	e000      	b.n	a534e <Cl_Rinse_Controller+0x143e>
				default:
				break;
   a534c:	bf00      	nop
			}
	break;
   a534e:	e002      	b.n	a5356 <Cl_Rinse_Controller+0x1446>

switch(cl_rinsestate)
{

		case CL_RINSE_STATE_INIT:
		break;
   a5350:	bf00      	nop
   a5352:	e000      	b.n	a5356 <Cl_Rinse_Controller+0x1446>
						case EVENT_RINSE_BC_OPENFILL_COMPLETED:
						//sv_prop_stopopenfill();
						cl_rinsing_substate = CL_RINSE_RINSING_BC_SWITCHING;
						break;
				}
		break;
   a5354:	bf00      	nop
			}
	break;
}


return Cl_rinseretcode;
   a5356:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
   a535a:	4618      	mov	r0, r3
   a535c:	3748      	adds	r7, #72	; 0x48
   a535e:	46bd      	mov	sp, r7
   a5360:	bd80      	pop	{r7, pc}
   a5362:	bf00      	nop
   a5364:	200725bc 	.word	0x200725bc
   a5368:	000880c1 	.word	0x000880c1
   a536c:	000a66d5 	.word	0x000a66d5
   a5370:	000a59ed 	.word	0x000a59ed
   a5374:	20071df2 	.word	0x20071df2
   a5378:	00082a35 	.word	0x00082a35

000a537c <cl_rinse_translatemacevent>:

Cl_ReturnCodeType  cl_rinse_translatemacevent(Cl_Mac_EventsType Cl_MacRinseEvt,Cl_Rinse_Eevents* cl_rinse_event)
{
   a537c:	b480      	push	{r7}
   a537e:	b083      	sub	sp, #12
   a5380:	af00      	add	r7, sp, #0
   a5382:	4603      	mov	r3, r0
   a5384:	6039      	str	r1, [r7, #0]
   a5386:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacRinseEvt)
   a5388:	79fb      	ldrb	r3, [r7, #7]
   a538a:	3b07      	subs	r3, #7
   a538c:	2b58      	cmp	r3, #88	; 0x58
   a538e:	f200 8131 	bhi.w	a55f4 <cl_rinse_translatemacevent+0x278>
   a5392:	a201      	add	r2, pc, #4	; (adr r2, a5398 <cl_rinse_translatemacevent+0x1c>)
   a5394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a5398:	000a551d 	.word	0x000a551d
   a539c:	000a5535 	.word	0x000a5535
   a53a0:	000a554d 	.word	0x000a554d
   a53a4:	000a55c5 	.word	0x000a55c5
   a53a8:	000a55cd 	.word	0x000a55cd
   a53ac:	000a55d5 	.word	0x000a55d5
   a53b0:	000a5595 	.word	0x000a5595
   a53b4:	000a559d 	.word	0x000a559d
   a53b8:	000a55a5 	.word	0x000a55a5
   a53bc:	000a55ad 	.word	0x000a55ad
   a53c0:	000a55f5 	.word	0x000a55f5
   a53c4:	000a55f5 	.word	0x000a55f5
   a53c8:	000a55f5 	.word	0x000a55f5
   a53cc:	000a55f5 	.word	0x000a55f5
   a53d0:	000a55f5 	.word	0x000a55f5
   a53d4:	000a55f5 	.word	0x000a55f5
   a53d8:	000a55f5 	.word	0x000a55f5
   a53dc:	000a55f5 	.word	0x000a55f5
   a53e0:	000a55f5 	.word	0x000a55f5
   a53e4:	000a55f5 	.word	0x000a55f5
   a53e8:	000a55f5 	.word	0x000a55f5
   a53ec:	000a55f5 	.word	0x000a55f5
   a53f0:	000a55f5 	.word	0x000a55f5
   a53f4:	000a55f5 	.word	0x000a55f5
   a53f8:	000a55b5 	.word	0x000a55b5
   a53fc:	000a55bd 	.word	0x000a55bd
   a5400:	000a55f5 	.word	0x000a55f5
   a5404:	000a55f5 	.word	0x000a55f5
   a5408:	000a55f5 	.word	0x000a55f5
   a540c:	000a55f5 	.word	0x000a55f5
   a5410:	000a55f5 	.word	0x000a55f5
   a5414:	000a550d 	.word	0x000a550d
   a5418:	000a54fd 	.word	0x000a54fd
   a541c:	000a5505 	.word	0x000a5505
   a5420:	000a5515 	.word	0x000a5515
   a5424:	000a55f5 	.word	0x000a55f5
   a5428:	000a55f5 	.word	0x000a55f5
   a542c:	000a55f5 	.word	0x000a55f5
   a5430:	000a558d 	.word	0x000a558d
   a5434:	000a5585 	.word	0x000a5585
   a5438:	000a55f5 	.word	0x000a55f5
   a543c:	000a55f5 	.word	0x000a55f5
   a5440:	000a55f5 	.word	0x000a55f5
   a5444:	000a55f5 	.word	0x000a55f5
   a5448:	000a55f5 	.word	0x000a55f5
   a544c:	000a55f5 	.word	0x000a55f5
   a5450:	000a55f5 	.word	0x000a55f5
   a5454:	000a55f5 	.word	0x000a55f5
   a5458:	000a55f5 	.word	0x000a55f5
   a545c:	000a5555 	.word	0x000a5555
   a5460:	000a555d 	.word	0x000a555d
   a5464:	000a5565 	.word	0x000a5565
   a5468:	000a556d 	.word	0x000a556d
   a546c:	000a5575 	.word	0x000a5575
   a5470:	000a557d 	.word	0x000a557d
   a5474:	000a55f5 	.word	0x000a55f5
   a5478:	000a55f5 	.word	0x000a55f5
   a547c:	000a55f5 	.word	0x000a55f5
   a5480:	000a55f5 	.word	0x000a55f5
   a5484:	000a55f5 	.word	0x000a55f5
   a5488:	000a55f5 	.word	0x000a55f5
   a548c:	000a5525 	.word	0x000a5525
   a5490:	000a552d 	.word	0x000a552d
   a5494:	000a55f5 	.word	0x000a55f5
   a5498:	000a55f5 	.word	0x000a55f5
   a549c:	000a553d 	.word	0x000a553d
   a54a0:	000a55f5 	.word	0x000a55f5
   a54a4:	000a55f5 	.word	0x000a55f5
   a54a8:	000a55f5 	.word	0x000a55f5
   a54ac:	000a55f5 	.word	0x000a55f5
   a54b0:	000a55f5 	.word	0x000a55f5
   a54b4:	000a55f5 	.word	0x000a55f5
   a54b8:	000a55f5 	.word	0x000a55f5
   a54bc:	000a55f5 	.word	0x000a55f5
   a54c0:	000a5545 	.word	0x000a5545
   a54c4:	000a55f5 	.word	0x000a55f5
   a54c8:	000a55f5 	.word	0x000a55f5
   a54cc:	000a55f5 	.word	0x000a55f5
   a54d0:	000a55f5 	.word	0x000a55f5
   a54d4:	000a55f5 	.word	0x000a55f5
   a54d8:	000a55f5 	.word	0x000a55f5
   a54dc:	000a55f5 	.word	0x000a55f5
   a54e0:	000a55f5 	.word	0x000a55f5
   a54e4:	000a55f5 	.word	0x000a55f5
   a54e8:	000a55dd 	.word	0x000a55dd
   a54ec:	000a55e5 	.word	0x000a55e5
   a54f0:	000a55f5 	.word	0x000a55f5
   a54f4:	000a55f5 	.word	0x000a55f5
   a54f8:	000a55ed 	.word	0x000a55ed
	{
		case EVT_CONSOLE_COMMAND_HEPARIN_START:
		*cl_rinse_event= EVENT_RINSE_HEP_PMP_START;
   a54fc:	683b      	ldr	r3, [r7, #0]
   a54fe:	2224      	movs	r2, #36	; 0x24
   a5500:	701a      	strb	r2, [r3, #0]
		break;
   a5502:	e078      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
		case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
		*cl_rinse_event= EVENT_RINSE_HEP_PMP_STOP;
   a5504:	683b      	ldr	r3, [r7, #0]
   a5506:	2225      	movs	r2, #37	; 0x25
   a5508:	701a      	strb	r2, [r3, #0]
		break;
   a550a:	e074      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
		case EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
		*cl_rinse_event= EVENT_RINSE_HEP_PMP_BLOUS;
   a550c:	683b      	ldr	r3, [r7, #0]
   a550e:	2226      	movs	r2, #38	; 0x26
   a5510:	701a      	strb	r2, [r3, #0]
		break;
   a5512:	e070      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
		

		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_rinse_event= EVENT_RINSE_CLR_ALARM;
   a5514:	683b      	ldr	r3, [r7, #0]
   a5516:	2201      	movs	r2, #1
   a5518:	701a      	strb	r2, [r3, #0]
		break;
   a551a:	e06c      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
		case  EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_rinse_event= EVENT_START_RINSE;
   a551c:	683b      	ldr	r3, [r7, #0]
   a551e:	2202      	movs	r2, #2
   a5520:	701a      	strb	r2, [r3, #0]
		break;
   a5522:	e068      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
		case  MACREQ_START_PRE_DISINF_RINSE:
		*cl_rinse_event= EVENT_START_PRE_DISINF_RINSE;
   a5524:	683b      	ldr	r3, [r7, #0]
   a5526:	2204      	movs	r2, #4
   a5528:	701a      	strb	r2, [r3, #0]
		break;
   a552a:	e064      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
		case  MACREQ_START_POST_DISINF_RINSE:
		*cl_rinse_event= EVENT_START_POST_DISINF_RINSE;
   a552c:	683b      	ldr	r3, [r7, #0]
   a552e:	2205      	movs	r2, #5
   a5530:	701a      	strb	r2, [r3, #0]
		break;
   a5532:	e060      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
		case EVT_CONSOLE_COMMAND_STOP_RINSE:
		*cl_rinse_event= EVENT_STOP_RINSE;
   a5534:	683b      	ldr	r3, [r7, #0]
   a5536:	2206      	movs	r2, #6
   a5538:	701a      	strb	r2, [r3, #0]
		break;
   a553a:	e05c      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
	
		case MACREQ_RINSE_COMPLETED:
		*cl_rinse_event = EVENT_MAC_RINSE_COMPLETED;
   a553c:	683b      	ldr	r3, [r7, #0]
   a553e:	2219      	movs	r2, #25
   a5540:	701a      	strb	r2, [r3, #0]
		break;
   a5542:	e058      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
		case MACREQ_BC_OPENFILL_COMPLETED:
		*cl_rinse_event = EVENT_RINSE_BC_OPENFILL_COMPLETED;
   a5544:	683b      	ldr	r3, [r7, #0]
   a5546:	2227      	movs	r2, #39	; 0x27
   a5548:	701a      	strb	r2, [r3, #0]
		break;
   a554a:	e054      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
		case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
		*cl_rinse_event = EVENT_RINSE_DIALYSIS_PREP;
   a554c:	683b      	ldr	r3, [r7, #0]
   a554e:	220e      	movs	r2, #14
   a5550:	701a      	strb	r2, [r3, #0]
		break; 
   a5552:	e050      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
		
		case EVT_TICK_50M:
		*cl_rinse_event =   EVENT_RINSE_TICK_50MS;
   a5554:	683b      	ldr	r3, [r7, #0]
   a5556:	220f      	movs	r2, #15
   a5558:	701a      	strb	r2, [r3, #0]
		break;
   a555a:	e04c      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
 		break;
		case EVT_TICK_100M:
		*cl_rinse_event =   EVENT_RINSE_TICK_100MS;
   a555c:	683b      	ldr	r3, [r7, #0]
   a555e:	2210      	movs	r2, #16
   a5560:	701a      	strb	r2, [r3, #0]
		break;
   a5562:	e048      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
		case EVT_TICK_500M:
		  		*cl_rinse_event =   EVENT_RINSE_TICK_500MS;
   a5564:	683b      	ldr	r3, [r7, #0]
   a5566:	2211      	movs	r2, #17
   a5568:	701a      	strb	r2, [r3, #0]
		break;
   a556a:	e044      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
		case EVT_TICK_SEC:
		*cl_rinse_event =   EVENT_RINSE_TICK_SECOND;
   a556c:	683b      	ldr	r3, [r7, #0]
   a556e:	2212      	movs	r2, #18
   a5570:	701a      	strb	r2, [r3, #0]
		break;
   a5572:	e040      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
		case EVT_TICK_MIN:
		*cl_rinse_event =   EVENT_RINSE_TICK_MINUTE;
   a5574:	683b      	ldr	r3, [r7, #0]
   a5576:	2213      	movs	r2, #19
   a5578:	701a      	strb	r2, [r3, #0]
		break;			 
   a557a:	e03c      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
		case EVT_TICK_HOUR:
		*cl_rinse_event =   EVENT_RINSE_TICK_HOUR;
   a557c:	683b      	ldr	r3, [r7, #0]
   a557e:	2214      	movs	r2, #20
   a5580:	701a      	strb	r2, [r3, #0]
		break;
   a5582:	e038      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
		case EVT_ALARM_TRIGGERED:
		*cl_rinse_event =  EVENT_RINSE_ALARM;
   a5584:	683b      	ldr	r3, [r7, #0]
   a5586:	2216      	movs	r2, #22
   a5588:	701a      	strb	r2, [r3, #0]
		break;
   a558a:	e034      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
		case  EVT_ALERT_TRIGGERED:
		*cl_rinse_event =  EVENT_RINSE_ALERT;
   a558c:	683b      	ldr	r3, [r7, #0]
   a558e:	2215      	movs	r2, #21
   a5590:	701a      	strb	r2, [r3, #0]
		break;
   a5592:	e030      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
		
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_rinse_event = EVT_RINSE_SET_DATA;
   a5594:	683b      	ldr	r3, [r7, #0]
   a5596:	2218      	movs	r2, #24
   a5598:	701a      	strb	r2, [r3, #0]
		break;
   a559a:	e02c      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_rinse_event =  EVT_RINSE_GET_DATA;
   a559c:	683b      	ldr	r3, [r7, #0]
   a559e:	2217      	movs	r2, #23
   a55a0:	701a      	strb	r2, [r3, #0]
		break;
   a55a2:	e028      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
		case EVT_CONSOLE_COMMAND_START_PRIME:
		*cl_rinse_event =  EVT_RINSE_START_PRIME;
   a55a4:	683b      	ldr	r3, [r7, #0]
   a55a6:	221a      	movs	r2, #26
   a55a8:	701a      	strb	r2, [r3, #0]
		break;
   a55aa:	e024      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
		case EVT_CONSOLE_COMMAND_STOP_PRIME:
		*cl_rinse_event =  EVT_RINSE_STOP_PRIME;
   a55ac:	683b      	ldr	r3, [r7, #0]
   a55ae:	221b      	movs	r2, #27
   a55b0:	701a      	strb	r2, [r3, #0]
		break;
   a55b2:	e020      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
		case EVT_CONSOLE_COMMAND_RCIRC_START:
		*cl_rinse_event = EVT_RINSE_RCIRC_START;
   a55b4:	683b      	ldr	r3, [r7, #0]
   a55b6:	221f      	movs	r2, #31
   a55b8:	701a      	strb	r2, [r3, #0]
		break;
   a55ba:	e01c      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
		case EVT_CONSOLE_COMMAND_RCIRC_STOP:
		*cl_rinse_event = EVT_RINSE_RCIRC_STOP;
   a55bc:	683b      	ldr	r3, [r7, #0]
   a55be:	2220      	movs	r2, #32
   a55c0:	701a      	strb	r2, [r3, #0]
		break;
   a55c2:	e018      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_rinse_event = EVT_RINSE_COMMAND_SET_BLDPMP_ON;
   a55c4:	683b      	ldr	r3, [r7, #0]
   a55c6:	2221      	movs	r2, #33	; 0x21
   a55c8:	701a      	strb	r2, [r3, #0]
		break;
   a55ca:	e014      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_rinse_event = EVT_RINSE_COMMAND_SET_BLDPMP_OFF;
   a55cc:	683b      	ldr	r3, [r7, #0]
   a55ce:	2222      	movs	r2, #34	; 0x22
   a55d0:	701a      	strb	r2, [r3, #0]
		break;
   a55d2:	e010      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
		break;
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_rinse_event = EVT_RINSE_COMMAND_SET_BLDPUMPRATE;
   a55d4:	683b      	ldr	r3, [r7, #0]
   a55d6:	2223      	movs	r2, #35	; 0x23
   a55d8:	701a      	strb	r2, [r3, #0]
		break;
   a55da:	e00c      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		*cl_rinse_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL;
   a55dc:	683b      	ldr	r3, [r7, #0]
   a55de:	225b      	movs	r2, #91	; 0x5b
   a55e0:	701a      	strb	r2, [r3, #0]
		break;
   a55e2:	e008      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		*cl_rinse_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL;
   a55e4:	683b      	ldr	r3, [r7, #0]
   a55e6:	225c      	movs	r2, #92	; 0x5c
   a55e8:	701a      	strb	r2, [r3, #0]
		break;
   a55ea:	e004      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
		case EVT_CONSOLE_COMMAND_MUTE_ALARM:
		*cl_rinse_event = EVT_RINSE_MUTE;
   a55ec:	683b      	ldr	r3, [r7, #0]
   a55ee:	2228      	movs	r2, #40	; 0x28
   a55f0:	701a      	strb	r2, [r3, #0]
		break;
   a55f2:	e000      	b.n	a55f6 <cl_rinse_translatemacevent+0x27a>
		
		default:
		break;
   a55f4:	bf00      	nop
	}
		 return CL_OK;
   a55f6:	2300      	movs	r3, #0
}
   a55f8:	4618      	mov	r0, r3
   a55fa:	370c      	adds	r7, #12
   a55fc:	46bd      	mov	sp, r7
   a55fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   a5602:	4770      	bx	lr

000a5604 <Cl_rinse_init>:
 Cl_ReturnCodeType Cl_rinse_init(void)
 {
   a5604:	b480      	push	{r7}
   a5606:	af00      	add	r7, sp, #0
	 disinfectionrinseFlag = 0;
   a5608:	4b2b      	ldr	r3, [pc, #172]	; (a56b8 <Cl_rinse_init+0xb4>)
   a560a:	2200      	movs	r2, #0
   a560c:	601a      	str	r2, [r3, #0]
		tempcount = 0;
   a560e:	4b2b      	ldr	r3, [pc, #172]	; (a56bc <Cl_rinse_init+0xb8>)
   a5610:	2200      	movs	r2, #0
   a5612:	801a      	strh	r2, [r3, #0]
	   blood_flag=0;
   a5614:	4b2a      	ldr	r3, [pc, #168]	; (a56c0 <Cl_rinse_init+0xbc>)
   a5616:	2200      	movs	r2, #0
   a5618:	701a      	strb	r2, [r3, #0]
	   var1=0;
   a561a:	4b2a      	ldr	r3, [pc, #168]	; (a56c4 <Cl_rinse_init+0xc0>)
   a561c:	2200      	movs	r2, #0
   a561e:	701a      	strb	r2, [r3, #0]
	   rinse1=0;
   a5620:	4b29      	ldr	r3, [pc, #164]	; (a56c8 <Cl_rinse_init+0xc4>)
   a5622:	2200      	movs	r2, #0
   a5624:	701a      	strb	r2, [r3, #0]
	   rinse2=0;
   a5626:	4b29      	ldr	r3, [pc, #164]	; (a56cc <Cl_rinse_init+0xc8>)
   a5628:	2200      	movs	r2, #0
   a562a:	701a      	strb	r2, [r3, #0]
	   rinse3=0;
   a562c:	4b28      	ldr	r3, [pc, #160]	; (a56d0 <Cl_rinse_init+0xcc>)
   a562e:	2200      	movs	r2, #0
   a5630:	701a      	strb	r2, [r3, #0]
	   rinse4=0;
   a5632:	4b28      	ldr	r3, [pc, #160]	; (a56d4 <Cl_rinse_init+0xd0>)
   a5634:	2200      	movs	r2, #0
   a5636:	701a      	strb	r2, [r3, #0]
	   prime_alarm_flag = 0;
   a5638:	4b27      	ldr	r3, [pc, #156]	; (a56d8 <Cl_rinse_init+0xd4>)
   a563a:	2200      	movs	r2, #0
   a563c:	601a      	str	r2, [r3, #0]
	 cl_rinse_powerFailureFlag = 0;
   a563e:	4b27      	ldr	r3, [pc, #156]	; (a56dc <Cl_rinse_init+0xd8>)
   a5640:	2200      	movs	r2, #0
   a5642:	601a      	str	r2, [r3, #0]
	  cl_rinsestate = CL_RINSE_STATE_IDLE;
   a5644:	4b26      	ldr	r3, [pc, #152]	; (a56e0 <Cl_rinse_init+0xdc>)
   a5646:	2200      	movs	r2, #0
   a5648:	701a      	strb	r2, [r3, #0]
	  cl_rinsing_substate = CL_RINSE_RINSING_IDLE;
   a564a:	4b26      	ldr	r3, [pc, #152]	; (a56e4 <Cl_rinse_init+0xe0>)
   a564c:	2200      	movs	r2, #0
   a564e:	701a      	strb	r2, [r3, #0]
	   Cl_Rinsesecondscounter =0 ;Cl_RinseMinutescounter=0; Cl_Rinseshourscounter=0;Cl_RinseOpenFillsecondscounter=0;
   a5650:	4b25      	ldr	r3, [pc, #148]	; (a56e8 <Cl_rinse_init+0xe4>)
   a5652:	2200      	movs	r2, #0
   a5654:	601a      	str	r2, [r3, #0]
   a5656:	4b25      	ldr	r3, [pc, #148]	; (a56ec <Cl_rinse_init+0xe8>)
   a5658:	2200      	movs	r2, #0
   a565a:	601a      	str	r2, [r3, #0]
   a565c:	4b24      	ldr	r3, [pc, #144]	; (a56f0 <Cl_rinse_init+0xec>)
   a565e:	2200      	movs	r2, #0
   a5660:	601a      	str	r2, [r3, #0]
   a5662:	4b24      	ldr	r3, [pc, #144]	; (a56f4 <Cl_rinse_init+0xf0>)
   a5664:	2200      	movs	r2, #0
   a5666:	601a      	str	r2, [r3, #0]
	   Cl_RinseTotalMinutescounter=0; Cl_RinsesTotalhourscounter=0;
   a5668:	4b23      	ldr	r3, [pc, #140]	; (a56f8 <Cl_rinse_init+0xf4>)
   a566a:	2200      	movs	r2, #0
   a566c:	601a      	str	r2, [r3, #0]
   a566e:	4b23      	ldr	r3, [pc, #140]	; (a56fc <Cl_rinse_init+0xf8>)
   a5670:	2200      	movs	r2, #0
   a5672:	601a      	str	r2, [r3, #0]
	   Cl_RinseOpenFillTimeOut = false;
   a5674:	4b22      	ldr	r3, [pc, #136]	; (a5700 <Cl_rinse_init+0xfc>)
   a5676:	2200      	movs	r2, #0
   a5678:	701a      	strb	r2, [r3, #0]
	   cl_gfillinprogress = false;
   a567a:	4b22      	ldr	r3, [pc, #136]	; (a5704 <Cl_rinse_init+0x100>)
   a567c:	2200      	movs	r2, #0
   a567e:	701a      	strb	r2, [r3, #0]
	   wait_cnt = 0;TmpVal=0;
   a5680:	4b21      	ldr	r3, [pc, #132]	; (a5708 <Cl_rinse_init+0x104>)
   a5682:	2200      	movs	r2, #0
   a5684:	801a      	strh	r2, [r3, #0]
   a5686:	4b21      	ldr	r3, [pc, #132]	; (a570c <Cl_rinse_init+0x108>)
   a5688:	2200      	movs	r2, #0
   a568a:	801a      	strh	r2, [r3, #0]
	   temp1;temp2;
	    cl_50ms_timer = 0;
   a568c:	4b20      	ldr	r3, [pc, #128]	; (a5710 <Cl_rinse_init+0x10c>)
   a568e:	2200      	movs	r2, #0
   a5690:	801a      	strh	r2, [r3, #0]
	   prevrinsealarm_id =_NO_ALARM;
   a5692:	4b20      	ldr	r3, [pc, #128]	; (a5714 <Cl_rinse_init+0x110>)
   a5694:	2200      	movs	r2, #0
   a5696:	701a      	strb	r2, [r3, #0]
	   rinsealarm =0;
   a5698:	4b1f      	ldr	r3, [pc, #124]	; (a5718 <Cl_rinse_init+0x114>)
   a569a:	2200      	movs	r2, #0
   a569c:	701a      	strb	r2, [r3, #0]
	  
	    hotrinse_flag=0;minute=0;
   a569e:	4b1f      	ldr	r3, [pc, #124]	; (a571c <Cl_rinse_init+0x118>)
   a56a0:	2200      	movs	r2, #0
   a56a2:	701a      	strb	r2, [r3, #0]
   a56a4:	4b1e      	ldr	r3, [pc, #120]	; (a5720 <Cl_rinse_init+0x11c>)
   a56a6:	2200      	movs	r2, #0
   a56a8:	701a      	strb	r2, [r3, #0]
	
	 return CL_OK;
   a56aa:	2300      	movs	r3, #0
 }
   a56ac:	4618      	mov	r0, r3
   a56ae:	46bd      	mov	sp, r7
   a56b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   a56b4:	4770      	bx	lr
   a56b6:	bf00      	nop
   a56b8:	20071e24 	.word	0x20071e24
   a56bc:	20072a48 	.word	0x20072a48
   a56c0:	20071dec 	.word	0x20071dec
   a56c4:	20071ded 	.word	0x20071ded
   a56c8:	20071dee 	.word	0x20071dee
   a56cc:	20071def 	.word	0x20071def
   a56d0:	20071df0 	.word	0x20071df0
   a56d4:	20071df1 	.word	0x20071df1
   a56d8:	20071e18 	.word	0x20071e18
   a56dc:	20071e1c 	.word	0x20071e1c
   a56e0:	20071df2 	.word	0x20071df2
   a56e4:	20071df3 	.word	0x20071df3
   a56e8:	20071df4 	.word	0x20071df4
   a56ec:	20071df8 	.word	0x20071df8
   a56f0:	20071dfc 	.word	0x20071dfc
   a56f4:	20071e00 	.word	0x20071e00
   a56f8:	20071e04 	.word	0x20071e04
   a56fc:	20071e08 	.word	0x20071e08
   a5700:	20071e0c 	.word	0x20071e0c
   a5704:	20071e0d 	.word	0x20071e0d
   a5708:	20071e0e 	.word	0x20071e0e
   a570c:	20071e10 	.word	0x20071e10
   a5710:	20071e12 	.word	0x20071e12
   a5714:	20071e14 	.word	0x20071e14
   a5718:	20072a59 	.word	0x20072a59
   a571c:	20071e15 	.word	0x20071e15
   a5720:	20071e16 	.word	0x20071e16

000a5724 <Cl_Rinse_UpdateTimeInfo>:
	 return CL_OK;
 }
 
 
 Cl_ReturnCodeType Cl_Rinse_UpdateTimeInfo(void)
 {
   a5724:	b580      	push	{r7, lr}
   a5726:	b084      	sub	sp, #16
   a5728:	af00      	add	r7, sp, #0
	 
	 Cl_ReturnCodeType Cl_rinseretcode = CL_ERROR;
   a572a:	2304      	movs	r3, #4
   a572c:	73fb      	strb	r3, [r7, #15]
	 Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a572e:	2359      	movs	r3, #89	; 0x59
   a5730:	73bb      	strb	r3, [r7, #14]
	 Cl_Uint8Type data[7] = {0,0,0,0,0 ,0,0};
   a5732:	2300      	movs	r3, #0
   a5734:	713b      	strb	r3, [r7, #4]
   a5736:	2300      	movs	r3, #0
   a5738:	717b      	strb	r3, [r7, #5]
   a573a:	2300      	movs	r3, #0
   a573c:	71bb      	strb	r3, [r7, #6]
   a573e:	2300      	movs	r3, #0
   a5740:	71fb      	strb	r3, [r7, #7]
   a5742:	2300      	movs	r3, #0
   a5744:	723b      	strb	r3, [r7, #8]
   a5746:	2300      	movs	r3, #0
   a5748:	727b      	strb	r3, [r7, #9]
   a574a:	2300      	movs	r3, #0
   a574c:	72bb      	strb	r3, [r7, #10]
	 
	command = CON_TX_COMMAND_REM_TIME;
   a574e:	230a      	movs	r3, #10
   a5750:	73bb      	strb	r3, [r7, #14]

	
		data[0]= (Cl_Uint8Type)CLEAN_DATA;
   a5752:	2301      	movs	r3, #1
   a5754:	713b      	strb	r3, [r7, #4]
		data[1]= (Cl_Uint8Type)Cl_RinseTotalMinutescounter;
   a5756:	4b09      	ldr	r3, [pc, #36]	; (a577c <Cl_Rinse_UpdateTimeInfo+0x58>)
   a5758:	681b      	ldr	r3, [r3, #0]
   a575a:	b2db      	uxtb	r3, r3
   a575c:	717b      	strb	r3, [r7, #5]

		
		Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,2);
   a575e:	7bba      	ldrb	r2, [r7, #14]
   a5760:	1d3b      	adds	r3, r7, #4
   a5762:	4610      	mov	r0, r2
   a5764:	4619      	mov	r1, r3
   a5766:	2202      	movs	r2, #2
   a5768:	4b05      	ldr	r3, [pc, #20]	; (a5780 <Cl_Rinse_UpdateTimeInfo+0x5c>)
   a576a:	4798      	blx	r3
   a576c:	4603      	mov	r3, r0
   a576e:	73fb      	strb	r3, [r7, #15]
		
		
//	Cl_Rinse_SendRinseStateData();                                                          commented on 28.05.2014
	return CL_OK;
   a5770:	2300      	movs	r3, #0
	
 }
   a5772:	4618      	mov	r0, r3
   a5774:	3710      	adds	r7, #16
   a5776:	46bd      	mov	sp, r7
   a5778:	bd80      	pop	{r7, pc}
   a577a:	bf00      	nop
   a577c:	20071e04 	.word	0x20071e04
   a5780:	0009d1e9 	.word	0x0009d1e9

000a5784 <Cl_Rinse_CheckforRinseCompletion>:
	  
  }
 
 
 Cl_ReturnCodeType Cl_Rinse_CheckforRinseCompletion(void)
 {
   a5784:	b580      	push	{r7, lr}
   a5786:	b082      	sub	sp, #8
   a5788:	af00      	add	r7, sp, #0
	 Cl_ReturnCodeType Cl_rinseretcode = CL_ERROR;
   a578a:	2304      	movs	r3, #4
   a578c:	71fb      	strb	r3, [r7, #7]
	 if(gtest_short_rinse)
   a578e:	4b23      	ldr	r3, [pc, #140]	; (a581c <Cl_Rinse_CheckforRinseCompletion+0x98>)
   a5790:	781b      	ldrb	r3, [r3, #0]
   a5792:	2b00      	cmp	r3, #0
   a5794:	d007      	beq.n	a57a6 <Cl_Rinse_CheckforRinseCompletion+0x22>
	 {
		if(Cl_RinseTotalMinutescounter > 5 ) 
   a5796:	4b22      	ldr	r3, [pc, #136]	; (a5820 <Cl_Rinse_CheckforRinseCompletion+0x9c>)
   a5798:	681b      	ldr	r3, [r3, #0]
   a579a:	2b05      	cmp	r3, #5
   a579c:	dd01      	ble.n	a57a2 <Cl_Rinse_CheckforRinseCompletion+0x1e>
		Cl_rinseretcode = CL_OK;
   a579e:	2300      	movs	r3, #0
   a57a0:	71fb      	strb	r3, [r7, #7]
		return Cl_rinseretcode;
   a57a2:	79fb      	ldrb	r3, [r7, #7]
   a57a4:	e035      	b.n	a5812 <Cl_Rinse_CheckforRinseCompletion+0x8e>
	 }
	if (hotrinse_flag == 1)
   a57a6:	4b1f      	ldr	r3, [pc, #124]	; (a5824 <Cl_Rinse_CheckforRinseCompletion+0xa0>)
   a57a8:	781b      	ldrb	r3, [r3, #0]
   a57aa:	b2db      	uxtb	r3, r3
   a57ac:	2b01      	cmp	r3, #1
   a57ae:	d11f      	bne.n	a57f0 <Cl_Rinse_CheckforRinseCompletion+0x6c>
	{
		if (Cl_RinseTotalMinutescounter >= (CL_HOTRINSE_TIMEOUT_MIN ) )
   a57b0:	4b1b      	ldr	r3, [pc, #108]	; (a5820 <Cl_Rinse_CheckforRinseCompletion+0x9c>)
   a57b2:	681b      	ldr	r3, [r3, #0]
   a57b4:	2b18      	cmp	r3, #24
   a57b6:	dd2b      	ble.n	a5810 <Cl_Rinse_CheckforRinseCompletion+0x8c>
		{
			sv_cntrl_poweroffheater();
   a57b8:	4b1b      	ldr	r3, [pc, #108]	; (a5828 <Cl_Rinse_CheckforRinseCompletion+0xa4>)
   a57ba:	4798      	blx	r3
			sv_cntrl_disable_loopback();											// added on 30.06.2017
   a57bc:	4b1b      	ldr	r3, [pc, #108]	; (a582c <Cl_Rinse_CheckforRinseCompletion+0xa8>)
   a57be:	4798      	blx	r3
				Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,false );     // manav02 added no ts1 alarm even after hot rinse
   a57c0:	2010      	movs	r0, #16
   a57c2:	2100      	movs	r1, #0
   a57c4:	4b1a      	ldr	r3, [pc, #104]	; (a5830 <Cl_Rinse_CheckforRinseCompletion+0xac>)
   a57c6:	4798      	blx	r3
				Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,false );
   a57c8:	200f      	movs	r0, #15
   a57ca:	2100      	movs	r1, #0
   a57cc:	4b18      	ldr	r3, [pc, #96]	; (a5830 <Cl_Rinse_CheckforRinseCompletion+0xac>)
   a57ce:	4798      	blx	r3

			SetHeaterState(CL_HEATER_STATE_OFF);
   a57d0:	2004      	movs	r0, #4
   a57d2:	4b18      	ldr	r3, [pc, #96]	; (a5834 <Cl_Rinse_CheckforRinseCompletion+0xb0>)
   a57d4:	4798      	blx	r3
			Cl_bc_controller(BC_EVENT_STOP);
   a57d6:	2005      	movs	r0, #5
   a57d8:	4b17      	ldr	r3, [pc, #92]	; (a5838 <Cl_Rinse_CheckforRinseCompletion+0xb4>)
   a57da:	4798      	blx	r3
			Cl_bc_controller(BC_EVENT_START);
   a57dc:	2004      	movs	r0, #4
   a57de:	4b16      	ldr	r3, [pc, #88]	; (a5838 <Cl_Rinse_CheckforRinseCompletion+0xb4>)
   a57e0:	4798      	blx	r3
			Cl_RinseTotalMinutescounter = 0;	
   a57e2:	4b0f      	ldr	r3, [pc, #60]	; (a5820 <Cl_Rinse_CheckforRinseCompletion+0x9c>)
   a57e4:	2200      	movs	r2, #0
   a57e6:	601a      	str	r2, [r3, #0]
			//Cl_rinseretcode = CL_OK;
			hotrinse_flag = 0;
   a57e8:	4b0e      	ldr	r3, [pc, #56]	; (a5824 <Cl_Rinse_CheckforRinseCompletion+0xa0>)
   a57ea:	2200      	movs	r2, #0
   a57ec:	701a      	strb	r2, [r3, #0]
   a57ee:	e00f      	b.n	a5810 <Cl_Rinse_CheckforRinseCompletion+0x8c>
// 			Cl_rinseretcode = CL_OK;
// 			hotrinse_flag = 0;
// 			return Cl_rinseretcode;
// 		}
	}
	else if (Cl_RinseTotalMinutescounter >= CL_RINSE_TIMEOUT_MIN)
   a57f0:	4b0b      	ldr	r3, [pc, #44]	; (a5820 <Cl_Rinse_CheckforRinseCompletion+0x9c>)
   a57f2:	681b      	ldr	r3, [r3, #0]
   a57f4:	2b09      	cmp	r3, #9
   a57f6:	dd0b      	ble.n	a5810 <Cl_Rinse_CheckforRinseCompletion+0x8c>
	{
		sv_cntrl_setgreenalarm();
   a57f8:	4b10      	ldr	r3, [pc, #64]	; (a583c <Cl_Rinse_CheckforRinseCompletion+0xb8>)
   a57fa:	4798      	blx	r3
	
	//	sv_cntrl_buzzer();	
	
	Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,true );     // manav02 added ts1 alarm even after rinse
   a57fc:	2010      	movs	r0, #16
   a57fe:	2101      	movs	r1, #1
   a5800:	4b0b      	ldr	r3, [pc, #44]	; (a5830 <Cl_Rinse_CheckforRinseCompletion+0xac>)
   a5802:	4798      	blx	r3
	Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,true );
   a5804:	200f      	movs	r0, #15
   a5806:	2101      	movs	r1, #1
   a5808:	4b09      	ldr	r3, [pc, #36]	; (a5830 <Cl_Rinse_CheckforRinseCompletion+0xac>)
   a580a:	4798      	blx	r3

		Cl_rinseretcode = CL_OK;
   a580c:	2300      	movs	r3, #0
   a580e:	71fb      	strb	r3, [r7, #7]
	}

	return Cl_rinseretcode;
   a5810:	79fb      	ldrb	r3, [r7, #7]
	 
 }
   a5812:	4618      	mov	r0, r3
   a5814:	3708      	adds	r7, #8
   a5816:	46bd      	mov	sp, r7
   a5818:	bd80      	pop	{r7, pc}
   a581a:	bf00      	nop
   a581c:	20071ba6 	.word	0x20071ba6
   a5820:	20071e04 	.word	0x20071e04
   a5824:	20071e15 	.word	0x20071e15
   a5828:	0009b3d5 	.word	0x0009b3d5
   a582c:	0009b579 	.word	0x0009b579
   a5830:	00082a35 	.word	0x00082a35
   a5834:	00089381 	.word	0x00089381
   a5838:	00082ee1 	.word	0x00082ee1
   a583c:	0009b65d 	.word	0x0009b65d

000a5840 <cl_rinse_notifydacandgotorinsestandby>:
 
Cl_ReturnCodeType cl_rinse_notifydacandgotorinsestandby(void)
{
   a5840:	b580      	push	{r7, lr}
   a5842:	b082      	sub	sp, #8
   a5844:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_rinseretcode2 = CL_OK;
   a5846:	2300      	movs	r3, #0
   a5848:	71fb      	strb	r3, [r7, #7]
	
	Cl_Uint8Type data =0;
   a584a:	2300      	movs	r3, #0
   a584c:	71bb      	strb	r3, [r7, #6]
	Cl_RinseStop();
   a584e:	4b26      	ldr	r3, [pc, #152]	; (a58e8 <cl_rinse_notifydacandgotorinsestandby+0xa8>)
   a5850:	4798      	blx	r3
	Cl_RinseFlowOff();
   a5852:	4b26      	ldr	r3, [pc, #152]	; (a58ec <cl_rinse_notifydacandgotorinsestandby+0xac>)
   a5854:	4798      	blx	r3
//	Cl_rinseretcode2 = sv_cntrl_poweroffheater();
	//inform DAC about rinse completed state.
	Cl_Rinsesecondscounter = 0;
   a5856:	4b26      	ldr	r3, [pc, #152]	; (a58f0 <cl_rinse_notifydacandgotorinsestandby+0xb0>)
   a5858:	2200      	movs	r2, #0
   a585a:	601a      	str	r2, [r3, #0]
	Cl_RinseMinutescounter= 0;
   a585c:	4b25      	ldr	r3, [pc, #148]	; (a58f4 <cl_rinse_notifydacandgotorinsestandby+0xb4>)
   a585e:	2200      	movs	r2, #0
   a5860:	601a      	str	r2, [r3, #0]
	Cl_Rinseshourscounter= 0;
   a5862:	4b25      	ldr	r3, [pc, #148]	; (a58f8 <cl_rinse_notifydacandgotorinsestandby+0xb8>)
   a5864:	2200      	movs	r2, #0
   a5866:	601a      	str	r2, [r3, #0]
	Cl_RinseTotalMinutescounter= 0;
   a5868:	4b24      	ldr	r3, [pc, #144]	; (a58fc <cl_rinse_notifydacandgotorinsestandby+0xbc>)
   a586a:	2200      	movs	r2, #0
   a586c:	601a      	str	r2, [r3, #0]
	Cl_RinsesTotalhourscounter=0;
   a586e:	4b24      	ldr	r3, [pc, #144]	; (a5900 <cl_rinse_notifydacandgotorinsestandby+0xc0>)
   a5870:	2200      	movs	r2, #0
   a5872:	601a      	str	r2, [r3, #0]
	
	data = 1;
   a5874:	2301      	movs	r3, #1
   a5876:	71bb      	strb	r3, [r7, #6]
	cl_wait(5);
   a5878:	2005      	movs	r0, #5
   a587a:	4b22      	ldr	r3, [pc, #136]	; (a5904 <cl_rinse_notifydacandgotorinsestandby+0xc4>)
   a587c:	4798      	blx	r3
	if((cl_rinsestate == CL_RINSE_STATE_RINSING)  )
   a587e:	4b22      	ldr	r3, [pc, #136]	; (a5908 <cl_rinse_notifydacandgotorinsestandby+0xc8>)
   a5880:	781b      	ldrb	r3, [r3, #0]
   a5882:	2b03      	cmp	r3, #3
   a5884:	d114      	bne.n	a58b0 <cl_rinse_notifydacandgotorinsestandby+0x70>
	{
		Cl_rinseretcode2 = sv_nvmsetdata(NV_NVM_RINSE_STATUS,&data,1);
   a5886:	1dbb      	adds	r3, r7, #6
   a5888:	2001      	movs	r0, #1
   a588a:	4619      	mov	r1, r3
   a588c:	2201      	movs	r2, #1
   a588e:	4b1f      	ldr	r3, [pc, #124]	; (a590c <cl_rinse_notifydacandgotorinsestandby+0xcc>)
   a5890:	4798      	blx	r3
   a5892:	4603      	mov	r3, r0
   a5894:	71fb      	strb	r3, [r7, #7]
		Cl_rinseretcode2 = Cl_SendDatatoconsole(CON_TX_COMMAND_RINSE_COMPLETED,&data,0);
   a5896:	1dbb      	adds	r3, r7, #6
   a5898:	200b      	movs	r0, #11
   a589a:	4619      	mov	r1, r3
   a589c:	2200      	movs	r2, #0
   a589e:	4b1c      	ldr	r3, [pc, #112]	; (a5910 <cl_rinse_notifydacandgotorinsestandby+0xd0>)
   a58a0:	4798      	blx	r3
   a58a2:	4603      	mov	r3, r0
   a58a4:	71fb      	strb	r3, [r7, #7]
		Cl_rinseretcode2 = Cl_mac_apprequesthandler(MACREQ_RINSE_COMPLETED);
   a58a6:	2048      	movs	r0, #72	; 0x48
   a58a8:	4b1a      	ldr	r3, [pc, #104]	; (a5914 <cl_rinse_notifydacandgotorinsestandby+0xd4>)
   a58aa:	4798      	blx	r3
   a58ac:	4603      	mov	r3, r0
   a58ae:	71fb      	strb	r3, [r7, #7]
		
	}
	if(cl_rinsestate == CL_RINSE_STATE_PRE_DISINFECT_RINSING)
   a58b0:	4b15      	ldr	r3, [pc, #84]	; (a5908 <cl_rinse_notifydacandgotorinsestandby+0xc8>)
   a58b2:	781b      	ldrb	r3, [r3, #0]
   a58b4:	2b04      	cmp	r3, #4
   a58b6:	d105      	bne.n	a58c4 <cl_rinse_notifydacandgotorinsestandby+0x84>
	{
		Cl_rinseretcode2 = Cl_mac_apprequesthandler(MACREQ_PRE_DISINFECT_RINSE_COMPLETED);
   a58b8:	2052      	movs	r0, #82	; 0x52
   a58ba:	4b16      	ldr	r3, [pc, #88]	; (a5914 <cl_rinse_notifydacandgotorinsestandby+0xd4>)
   a58bc:	4798      	blx	r3
   a58be:	4603      	mov	r3, r0
   a58c0:	71fb      	strb	r3, [r7, #7]
   a58c2:	e008      	b.n	a58d6 <cl_rinse_notifydacandgotorinsestandby+0x96>
	}
	else if(cl_rinsestate == CL_RINSE_STATE_POST_DISINFECT_RINSING)
   a58c4:	4b10      	ldr	r3, [pc, #64]	; (a5908 <cl_rinse_notifydacandgotorinsestandby+0xc8>)
   a58c6:	781b      	ldrb	r3, [r3, #0]
   a58c8:	2b05      	cmp	r3, #5
   a58ca:	d104      	bne.n	a58d6 <cl_rinse_notifydacandgotorinsestandby+0x96>
	{
		Cl_rinseretcode2 = Cl_mac_apprequesthandler(MACREQ_POST_DISINFECT_RINSE_COMPLETED);
   a58cc:	2053      	movs	r0, #83	; 0x53
   a58ce:	4b11      	ldr	r3, [pc, #68]	; (a5914 <cl_rinse_notifydacandgotorinsestandby+0xd4>)
   a58d0:	4798      	blx	r3
   a58d2:	4603      	mov	r3, r0
   a58d4:	71fb      	strb	r3, [r7, #7]
	}
	
	cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_STOP);
   a58d6:	2002      	movs	r0, #2
   a58d8:	4b0f      	ldr	r3, [pc, #60]	; (a5918 <cl_rinse_notifydacandgotorinsestandby+0xd8>)
   a58da:	4798      	blx	r3

						
	return Cl_rinseretcode2;
   a58dc:	79fb      	ldrb	r3, [r7, #7]
}
   a58de:	4618      	mov	r0, r3
   a58e0:	3708      	adds	r7, #8
   a58e2:	46bd      	mov	sp, r7
   a58e4:	bd80      	pop	{r7, pc}
   a58e6:	bf00      	nop
   a58e8:	000a5ea9 	.word	0x000a5ea9
   a58ec:	000a5e81 	.word	0x000a5e81
   a58f0:	20071df4 	.word	0x20071df4
   a58f4:	20071df8 	.word	0x20071df8
   a58f8:	20071dfc 	.word	0x20071dfc
   a58fc:	20071e04 	.word	0x20071e04
   a5900:	20071e08 	.word	0x20071e08
   a5904:	0009421d 	.word	0x0009421d
   a5908:	20071df2 	.word	0x20071df2
   a590c:	0009bd15 	.word	0x0009bd15
   a5910:	0009d1e9 	.word	0x0009d1e9
   a5914:	0008bbb9 	.word	0x0008bbb9
   a5918:	000948d9 	.word	0x000948d9

000a591c <Cl_Rinse_UpdateAlarmTable>:

Cl_ReturnCodeType Cl_Rinse_UpdateAlarmTable(ClRinseAlarmIdType* ClRinseAlarmId )
{
   a591c:	b580      	push	{r7, lr}
   a591e:	b086      	sub	sp, #24
   a5920:	af00      	add	r7, sp, #0
   a5922:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	Cl_rinseretcode = CL_OK;
   a5924:	2300      	movs	r3, #0
   a5926:	75fb      	strb	r3, [r7, #23]
	Cl_Uint8Type tempcount = 0;
   a5928:	2300      	movs	r3, #0
   a592a:	75bb      	strb	r3, [r7, #22]
	Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   a592c:	2300      	movs	r3, #0
   a592e:	81bb      	strh	r3, [r7, #12]
   a5930:	2300      	movs	r3, #0
   a5932:	73bb      	strb	r3, [r7, #14]
   a5934:	2300      	movs	r3, #0
   a5936:	613b      	str	r3, [r7, #16]
	Cl_Uint8Type data3;
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a5938:	2359      	movs	r3, #89	; 0x59
   a593a:	73fb      	strb	r3, [r7, #15]
	
	
	for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   a593c:	2300      	movs	r3, #0
   a593e:	75bb      	strb	r3, [r7, #22]
   a5940:	e046      	b.n	a59d0 <Cl_Rinse_UpdateAlarmTable+0xb4>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_RinseAlarmTable[tempcount].IsActive);
   a5942:	7dbb      	ldrb	r3, [r7, #22]
   a5944:	4a26      	ldr	r2, [pc, #152]	; (a59e0 <Cl_Rinse_UpdateAlarmTable+0xc4>)
   a5946:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   a594a:	7dbb      	ldrb	r3, [r7, #22]
   a594c:	00db      	lsls	r3, r3, #3
   a594e:	4a24      	ldr	r2, [pc, #144]	; (a59e0 <Cl_Rinse_UpdateAlarmTable+0xc4>)
   a5950:	4413      	add	r3, r2
   a5952:	3302      	adds	r3, #2
   a5954:	4608      	mov	r0, r1
   a5956:	4619      	mov	r1, r3
   a5958:	4b22      	ldr	r3, [pc, #136]	; (a59e4 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a595a:	4798      	blx	r3

		
			if (Cl_RinseAlarmTable[tempcount].IsActive)
   a595c:	7dbb      	ldrb	r3, [r7, #22]
   a595e:	4a20      	ldr	r2, [pc, #128]	; (a59e0 <Cl_Rinse_UpdateAlarmTable+0xc4>)
   a5960:	00db      	lsls	r3, r3, #3
   a5962:	4413      	add	r3, r2
   a5964:	789b      	ldrb	r3, [r3, #2]
   a5966:	2b00      	cmp	r3, #0
   a5968:	d019      	beq.n	a599e <Cl_Rinse_UpdateAlarmTable+0x82>
			{
				if(!Cl_RinseAlarmTable[tempcount].IsRaised)
   a596a:	7dbb      	ldrb	r3, [r7, #22]
   a596c:	4a1c      	ldr	r2, [pc, #112]	; (a59e0 <Cl_Rinse_UpdateAlarmTable+0xc4>)
   a596e:	00db      	lsls	r3, r3, #3
   a5970:	4413      	add	r3, r2
   a5972:	78db      	ldrb	r3, [r3, #3]
   a5974:	f083 0301 	eor.w	r3, r3, #1
   a5978:	b2db      	uxtb	r3, r3
   a597a:	2b00      	cmp	r3, #0
   a597c:	d025      	beq.n	a59ca <Cl_Rinse_UpdateAlarmTable+0xae>
					{
	
						Cl_RinseAlarmTable[tempcount].IsRaised = true;
   a597e:	7dbb      	ldrb	r3, [r7, #22]
   a5980:	4a17      	ldr	r2, [pc, #92]	; (a59e0 <Cl_Rinse_UpdateAlarmTable+0xc4>)
   a5982:	00db      	lsls	r3, r3, #3
   a5984:	4413      	add	r3, r2
   a5986:	2201      	movs	r2, #1
   a5988:	70da      	strb	r2, [r3, #3]
					
						Cl_rinseretcode = CL_RinseAlarmActon(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId);
   a598a:	7dbb      	ldrb	r3, [r7, #22]
   a598c:	4a14      	ldr	r2, [pc, #80]	; (a59e0 <Cl_Rinse_UpdateAlarmTable+0xc4>)
   a598e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   a5992:	4618      	mov	r0, r3
   a5994:	4b14      	ldr	r3, [pc, #80]	; (a59e8 <Cl_Rinse_UpdateAlarmTable+0xcc>)
   a5996:	4798      	blx	r3
   a5998:	4603      	mov	r3, r0
   a599a:	75fb      	strb	r3, [r7, #23]
   a599c:	e015      	b.n	a59ca <Cl_Rinse_UpdateAlarmTable+0xae>
			
			}
			else
			{
				// alarm was present before , but not active now.
				if(Cl_RinseAlarmTable[tempcount].IsRaised == true)
   a599e:	7dbb      	ldrb	r3, [r7, #22]
   a59a0:	4a0f      	ldr	r2, [pc, #60]	; (a59e0 <Cl_Rinse_UpdateAlarmTable+0xc4>)
   a59a2:	00db      	lsls	r3, r3, #3
   a59a4:	4413      	add	r3, r2
   a59a6:	78db      	ldrb	r3, [r3, #3]
   a59a8:	2b00      	cmp	r3, #0
   a59aa:	d00e      	beq.n	a59ca <Cl_Rinse_UpdateAlarmTable+0xae>
				{
					Cl_RinseAlarmTable[tempcount].IsRaised = false;
   a59ac:	7dbb      	ldrb	r3, [r7, #22]
   a59ae:	4a0c      	ldr	r2, [pc, #48]	; (a59e0 <Cl_Rinse_UpdateAlarmTable+0xc4>)
   a59b0:	00db      	lsls	r3, r3, #3
   a59b2:	4413      	add	r3, r2
   a59b4:	2200      	movs	r2, #0
   a59b6:	70da      	strb	r2, [r3, #3]
					command = CON_TX_COMMAND_ALARM;
   a59b8:	2307      	movs	r3, #7
   a59ba:	73fb      	strb	r3, [r7, #15]
					data[0] = (Cl_Uint8Type)(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId);
   a59bc:	7dbb      	ldrb	r3, [r7, #22]
   a59be:	4a08      	ldr	r2, [pc, #32]	; (a59e0 <Cl_Rinse_UpdateAlarmTable+0xc4>)
   a59c0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   a59c4:	733b      	strb	r3, [r7, #12]
					data[1] = (Cl_Uint8Type) CL_ALARM_CLEARED;
   a59c6:	2300      	movs	r3, #0
   a59c8:	737b      	strb	r3, [r7, #13]
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	
	for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   a59ca:	7dbb      	ldrb	r3, [r7, #22]
   a59cc:	3301      	adds	r3, #1
   a59ce:	75bb      	strb	r3, [r7, #22]
   a59d0:	7dbb      	ldrb	r3, [r7, #22]
   a59d2:	2b1a      	cmp	r3, #26
   a59d4:	d9b5      	bls.n	a5942 <Cl_Rinse_UpdateAlarmTable+0x26>
			}
		//}

	}

return (Cl_rinseretcode );
   a59d6:	7dfb      	ldrb	r3, [r7, #23]
}
   a59d8:	4618      	mov	r0, r3
   a59da:	3718      	adds	r7, #24
   a59dc:	46bd      	mov	sp, r7
   a59de:	bd80      	pop	{r7, pc}
   a59e0:	20070e98 	.word	0x20070e98
   a59e4:	00082c09 	.word	0x00082c09
   a59e8:	000a5b69 	.word	0x000a5b69

000a59ec <Cl_Rinse_ProcessAlarms>:

Cl_ReturnCodeType Cl_Rinse_ProcessAlarms(void )
{
   a59ec:	b580      	push	{r7, lr}
   a59ee:	b082      	sub	sp, #8
   a59f0:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_rinseretcode = CL_OK;
   a59f2:	2300      	movs	r3, #0
   a59f4:	71fb      	strb	r3, [r7, #7]
		ClRinseAlarmIdType ClRinseAlarmId;
		Cl_Uint8Type data;
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a59f6:	2359      	movs	r3, #89	; 0x59
   a59f8:	71bb      	strb	r3, [r7, #6]
		Cl_NewAlarmIdType cl_rinsealarmid;
	
	   Cl_rinseretcode = Cl_Rinse_UpdateAlarmTable(&ClRinseAlarmId);
   a59fa:	1d7b      	adds	r3, r7, #5
   a59fc:	4618      	mov	r0, r3
   a59fe:	4b04      	ldr	r3, [pc, #16]	; (a5a10 <Cl_Rinse_ProcessAlarms+0x24>)
   a5a00:	4798      	blx	r3
   a5a02:	4603      	mov	r3, r0
   a5a04:	71fb      	strb	r3, [r7, #7]

		   
		  
	   	return (Cl_rinseretcode);
   a5a06:	79fb      	ldrb	r3, [r7, #7]
}
   a5a08:	4618      	mov	r0, r3
   a5a0a:	3708      	adds	r7, #8
   a5a0c:	46bd      	mov	sp, r7
   a5a0e:	bd80      	pop	{r7, pc}
   a5a10:	000a591d 	.word	0x000a591d

000a5a14 <Cl_Rinse_ResetAlertsforReassertion>:

Cl_ReturnCodeType Cl_Rinse_ResetAlertsforReassertion(void )
{
   a5a14:	b580      	push	{r7, lr}
   a5a16:	b082      	sub	sp, #8
   a5a18:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_rinseretcode = CL_OK;
   a5a1a:	2300      	movs	r3, #0
   a5a1c:	71fb      	strb	r3, [r7, #7]
	ClRinseAlarmIdType ClRinseAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a5a1e:	2359      	movs	r3, #89	; 0x59
   a5a20:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_rinsealarmid;
	
		
	Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a5a22:	4b4f      	ldr	r3, [pc, #316]	; (a5b60 <Cl_Rinse_ResetAlertsforReassertion+0x14c>)
   a5a24:	2200      	movs	r2, #0
   a5a26:	70da      	strb	r2, [r3, #3]
	//Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
	Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);//Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].Cl_RinseAlarmId);
   a5a28:	2001      	movs	r0, #1
   a5a2a:	4b4e      	ldr	r3, [pc, #312]	; (a5b64 <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5a2c:	4798      	blx	r3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_BYPASSDOOR_STATUS_OPEN].IsRaised = false;
	//Cl_AlarmResetAlarm(BYPASSDOOR_STATUS_OPEN);

	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_LOW].IsRaised = false;
	//Cl_AlarmResetAlarm(COND_STATUS_LOW);
	Cl_RinseAlarmTable[CL_RINSE_ALARM_ACID_IN].IsRaised = false;
   a5a2e:	4b4c      	ldr	r3, [pc, #304]	; (a5b60 <Cl_Rinse_ResetAlertsforReassertion+0x14c>)
   a5a30:	2200      	movs	r2, #0
   a5a32:	72da      	strb	r2, [r3, #11]
	Cl_AlarmResetAlarm(ACID_IN_OPEN);
   a5a34:	2029      	movs	r0, #41	; 0x29
   a5a36:	4b4b      	ldr	r3, [pc, #300]	; (a5b64 <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5a38:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_BICARB_IN].IsRaised = false;
   a5a3a:	4b49      	ldr	r3, [pc, #292]	; (a5b60 <Cl_Rinse_ResetAlertsforReassertion+0x14c>)
   a5a3c:	2200      	movs	r2, #0
   a5a3e:	74da      	strb	r2, [r3, #19]
	Cl_AlarmResetAlarm(BICARB_IN_OPEN);
   a5a40:	202b      	movs	r0, #43	; 0x2b
   a5a42:	4b48      	ldr	r3, [pc, #288]	; (a5b64 <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5a44:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_HIGH].IsRaised = false;
   a5a46:	4b46      	ldr	r3, [pc, #280]	; (a5b60 <Cl_Rinse_ResetAlertsforReassertion+0x14c>)
   a5a48:	2200      	movs	r2, #0
   a5a4a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   a5a4e:	2008      	movs	r0, #8
   a5a50:	4b44      	ldr	r3, [pc, #272]	; (a5b64 <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5a52:	4798      	blx	r3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_OPEN].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_RO].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_HIGH].IsRaised = false;
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   a5a54:	4b42      	ldr	r3, [pc, #264]	; (a5b60 <Cl_Rinse_ResetAlertsforReassertion+0x14c>)
   a5a56:	2200      	movs	r2, #0
   a5a58:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   a5a5c:	4b40      	ldr	r3, [pc, #256]	; (a5b60 <Cl_Rinse_ResetAlertsforReassertion+0x14c>)
   a5a5e:	2200      	movs	r2, #0
   a5a60:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   a5a64:	2015      	movs	r0, #21
   a5a66:	4b3f      	ldr	r3, [pc, #252]	; (a5b64 <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5a68:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   a5a6a:	2016      	movs	r0, #22
   a5a6c:	4b3d      	ldr	r3, [pc, #244]	; (a5b64 <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5a6e:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   a5a70:	4b3b      	ldr	r3, [pc, #236]	; (a5b60 <Cl_Rinse_ResetAlertsforReassertion+0x14c>)
   a5a72:	2200      	movs	r2, #0
   a5a74:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   a5a78:	4b39      	ldr	r3, [pc, #228]	; (a5b60 <Cl_Rinse_ResetAlertsforReassertion+0x14c>)
   a5a7a:	2200      	movs	r2, #0
   a5a7c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   a5a80:	2017      	movs	r0, #23
   a5a82:	4b38      	ldr	r3, [pc, #224]	; (a5b64 <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5a84:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   a5a86:	2018      	movs	r0, #24
   a5a88:	4b36      	ldr	r3, [pc, #216]	; (a5b64 <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5a8a:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   a5a8c:	4b34      	ldr	r3, [pc, #208]	; (a5b60 <Cl_Rinse_ResetAlertsforReassertion+0x14c>)
   a5a8e:	2200      	movs	r2, #0
   a5a90:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   a5a94:	4b32      	ldr	r3, [pc, #200]	; (a5b60 <Cl_Rinse_ResetAlertsforReassertion+0x14c>)
   a5a96:	2200      	movs	r2, #0
   a5a98:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   a5a9c:	2028      	movs	r0, #40	; 0x28
   a5a9e:	4b31      	ldr	r3, [pc, #196]	; (a5b64 <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5aa0:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   a5aa2:	2027      	movs	r0, #39	; 0x27
   a5aa4:	4b2f      	ldr	r3, [pc, #188]	; (a5b64 <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5aa6:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   a5aa8:	4b2d      	ldr	r3, [pc, #180]	; (a5b60 <Cl_Rinse_ResetAlertsforReassertion+0x14c>)
   a5aaa:	2200      	movs	r2, #0
   a5aac:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   a5ab0:	2012      	movs	r0, #18
   a5ab2:	4b2c      	ldr	r3, [pc, #176]	; (a5b64 <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5ab4:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   a5ab6:	2011      	movs	r0, #17
   a5ab8:	4b2a      	ldr	r3, [pc, #168]	; (a5b64 <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5aba:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   a5abc:	4b28      	ldr	r3, [pc, #160]	; (a5b60 <Cl_Rinse_ResetAlertsforReassertion+0x14c>)
   a5abe:	2200      	movs	r2, #0
   a5ac0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   a5ac4:	4b26      	ldr	r3, [pc, #152]	; (a5b60 <Cl_Rinse_ResetAlertsforReassertion+0x14c>)
   a5ac6:	2200      	movs	r2, #0
   a5ac8:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	Cl_AlarmResetAlarm(TEMP3_HIGH_THRESHOLD);
   a5acc:	2013      	movs	r0, #19
   a5ace:	4b25      	ldr	r3, [pc, #148]	; (a5b64 <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5ad0:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP3_LOW_THRESHOLD);
   a5ad2:	2014      	movs	r0, #20
   a5ad4:	4b23      	ldr	r3, [pc, #140]	; (a5b64 <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5ad6:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_HOLDER1STATUS_OPEN].IsRaised = false;
   a5ad8:	4b21      	ldr	r3, [pc, #132]	; (a5b60 <Cl_Rinse_ResetAlertsforReassertion+0x14c>)
   a5ada:	2200      	movs	r2, #0
   a5adc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	Cl_AlarmResetAlarm(HOLDER1STATUS_OPEN);
   a5ae0:	2003      	movs	r0, #3
   a5ae2:	4b20      	ldr	r3, [pc, #128]	; (a5b64 <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5ae4:	4798      	blx	r3
	//Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
	Cl_RinseAlarmTable[CL_RINSE_ALARM_HOLDER2STATUS_OPEN].IsRaised = false;
   a5ae6:	4b1e      	ldr	r3, [pc, #120]	; (a5b60 <Cl_Rinse_ResetAlertsforReassertion+0x14c>)
   a5ae8:	2200      	movs	r2, #0
   a5aea:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	Cl_AlarmResetAlarm(HOLDER2STATUS_OPEN);
   a5aee:	2004      	movs	r0, #4
   a5af0:	4b1c      	ldr	r3, [pc, #112]	; (a5b64 <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5af2:	4798      	blx	r3
	//Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
	Cl_RinseAlarmTable[CL_RINSE_ALARM_POWER_FAILURE].IsRaised = false;
   a5af4:	4b1a      	ldr	r3, [pc, #104]	; (a5b60 <Cl_Rinse_ResetAlertsforReassertion+0x14c>)
   a5af6:	2200      	movs	r2, #0
   a5af8:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	Cl_AlarmResetAlarm(POWER_FAILURE);
   a5afc:	201d      	movs	r0, #29
   a5afe:	4b19      	ldr	r3, [pc, #100]	; (a5b64 <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5b00:	4798      	blx	r3
	
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_NO_FLOW].IsRaised = false;
   a5b02:	4b17      	ldr	r3, [pc, #92]	; (a5b60 <Cl_Rinse_ResetAlertsforReassertion+0x14c>)
   a5b04:	2200      	movs	r2, #0
   a5b06:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_HIGH_FLOWRATE].IsRaised = false;
   a5b0a:	4b15      	ldr	r3, [pc, #84]	; (a5b60 <Cl_Rinse_ResetAlertsforReassertion+0x14c>)
   a5b0c:	2200      	movs	r2, #0
   a5b0e:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
   a5b12:	4b13      	ldr	r3, [pc, #76]	; (a5b60 <Cl_Rinse_ResetAlertsforReassertion+0x14c>)
   a5b14:	2200      	movs	r2, #0
   a5b16:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	
	Cl_AlarmResetAlarm(FLOW_NO_FLOW);
   a5b1a:	200c      	movs	r0, #12
   a5b1c:	4b11      	ldr	r3, [pc, #68]	; (a5b64 <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5b1e:	4798      	blx	r3
	Cl_AlarmResetAlarm(FLOW_HIGH_FLOWRATE);
   a5b20:	200e      	movs	r0, #14
   a5b22:	4b10      	ldr	r3, [pc, #64]	; (a5b64 <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5b24:	4798      	blx	r3
	Cl_AlarmResetAlarm(FLOW_LOW_FLOWRATE);
   a5b26:	200d      	movs	r0, #13
   a5b28:	4b0e      	ldr	r3, [pc, #56]	; (a5b64 <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5b2a:	4798      	blx	r3
	
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_LEVEL_SWITCH_LOW_TOGGLERATE].IsRaised = false;
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP1_LOW_THRESHOLD].IsRaised = false;
   a5b2c:	4b0c      	ldr	r3, [pc, #48]	; (a5b60 <Cl_Rinse_ResetAlertsforReassertion+0x14c>)
   a5b2e:	2200      	movs	r2, #0
   a5b30:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(TEMP1_LOW_THRESHOLD);
   a5b34:	2010      	movs	r0, #16
   a5b36:	4b0b      	ldr	r3, [pc, #44]	; (a5b64 <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5b38:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP1_HIGH_THRESHOLD].IsRaised = false;
   a5b3a:	4b09      	ldr	r3, [pc, #36]	; (a5b60 <Cl_Rinse_ResetAlertsforReassertion+0x14c>)
   a5b3c:	2200      	movs	r2, #0
   a5b3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	Cl_AlarmResetAlarm(TEMP1_HIGH_THRESHOLD);
   a5b42:	200f      	movs	r0, #15
   a5b44:	4b07      	ldr	r3, [pc, #28]	; (a5b64 <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5b46:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_BP_STOPPED].IsRaised = false;
   a5b48:	4b05      	ldr	r3, [pc, #20]	; (a5b60 <Cl_Rinse_ResetAlertsforReassertion+0x14c>)
   a5b4a:	2200      	movs	r2, #0
   a5b4c:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
	Cl_AlarmResetAlarm(BP_STOPPED);
   a5b50:	203f      	movs	r0, #63	; 0x3f
   a5b52:	4b04      	ldr	r3, [pc, #16]	; (a5b64 <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5b54:	4798      	blx	r3
	//Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
	
	
	return (Cl_rinseretcode);
   a5b56:	79fb      	ldrb	r3, [r7, #7]
}
   a5b58:	4618      	mov	r0, r3
   a5b5a:	3708      	adds	r7, #8
   a5b5c:	46bd      	mov	sp, r7
   a5b5e:	bd80      	pop	{r7, pc}
   a5b60:	20070e98 	.word	0x20070e98
   a5b64:	00082b25 	.word	0x00082b25

000a5b68 <CL_RinseAlarmActon>:


Cl_ReturnCodeType  CL_RinseAlarmActon(Cl_NewAlarmIdType cl_rinsealarmid)
{
   a5b68:	b580      	push	{r7, lr}
   a5b6a:	b086      	sub	sp, #24
   a5b6c:	af00      	add	r7, sp, #0
   a5b6e:	4603      	mov	r3, r0
   a5b70:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType 	Cl_rinseretcode = CL_OK;
   a5b72:	2300      	movs	r3, #0
   a5b74:	75fb      	strb	r3, [r7, #23]
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   a5b76:	2300      	movs	r3, #0
   a5b78:	813b      	strh	r3, [r7, #8]
   a5b7a:	2300      	movs	r3, #0
   a5b7c:	72bb      	strb	r3, [r7, #10]
   a5b7e:	2300      	movs	r3, #0
   a5b80:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a5b82:	2359      	movs	r3, #89	; 0x59
   a5b84:	73fb      	strb	r3, [r7, #15]
			Cl_Uint16Type levelswitchstatus = 0;	
   a5b86:	2300      	movs	r3, #0
   a5b88:	81bb      	strh	r3, [r7, #12]
			static Cl_Uint8Type fillseccounter=0;
			Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   a5b8a:	2300      	movs	r3, #0
   a5b8c:	72fb      	strb	r3, [r7, #11]
		//Cl_Uint16Type var=0;

			

							
		switch(cl_rinsealarmid)
   a5b8e:	79fb      	ldrb	r3, [r7, #7]
   a5b90:	3b01      	subs	r3, #1
   a5b92:	2b3e      	cmp	r3, #62	; 0x3e
   a5b94:	f200 80dd 	bhi.w	a5d52 <CL_RinseAlarmActon+0x1ea>
   a5b98:	a201      	add	r2, pc, #4	; (adr r2, a5ba0 <CL_RinseAlarmActon+0x38>)
   a5b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a5b9e:	bf00      	nop
   a5ba0:	000a5ce3 	.word	0x000a5ce3
   a5ba4:	000a5d53 	.word	0x000a5d53
   a5ba8:	000a5d27 	.word	0x000a5d27
   a5bac:	000a5d27 	.word	0x000a5d27
   a5bb0:	000a5d53 	.word	0x000a5d53
   a5bb4:	000a5d53 	.word	0x000a5d53
   a5bb8:	000a5d53 	.word	0x000a5d53
   a5bbc:	000a5d27 	.word	0x000a5d27
   a5bc0:	000a5d53 	.word	0x000a5d53
   a5bc4:	000a5d53 	.word	0x000a5d53
   a5bc8:	000a5d53 	.word	0x000a5d53
   a5bcc:	000a5d27 	.word	0x000a5d27
   a5bd0:	000a5d27 	.word	0x000a5d27
   a5bd4:	000a5d27 	.word	0x000a5d27
   a5bd8:	000a5d27 	.word	0x000a5d27
   a5bdc:	000a5d27 	.word	0x000a5d27
   a5be0:	000a5d27 	.word	0x000a5d27
   a5be4:	000a5d27 	.word	0x000a5d27
   a5be8:	000a5d27 	.word	0x000a5d27
   a5bec:	000a5d53 	.word	0x000a5d53
   a5bf0:	000a5d27 	.word	0x000a5d27
   a5bf4:	000a5d27 	.word	0x000a5d27
   a5bf8:	000a5d27 	.word	0x000a5d27
   a5bfc:	000a5d27 	.word	0x000a5d27
   a5c00:	000a5d53 	.word	0x000a5d53
   a5c04:	000a5d27 	.word	0x000a5d27
   a5c08:	000a5d53 	.word	0x000a5d53
   a5c0c:	000a5d53 	.word	0x000a5d53
   a5c10:	000a5c9d 	.word	0x000a5c9d
   a5c14:	000a5d53 	.word	0x000a5d53
   a5c18:	000a5d59 	.word	0x000a5d59
   a5c1c:	000a5d53 	.word	0x000a5d53
   a5c20:	000a5d53 	.word	0x000a5d53
   a5c24:	000a5d53 	.word	0x000a5d53
   a5c28:	000a5d53 	.word	0x000a5d53
   a5c2c:	000a5d53 	.word	0x000a5d53
   a5c30:	000a5d53 	.word	0x000a5d53
   a5c34:	000a5d53 	.word	0x000a5d53
   a5c38:	000a5d27 	.word	0x000a5d27
   a5c3c:	000a5d27 	.word	0x000a5d27
   a5c40:	000a5d27 	.word	0x000a5d27
   a5c44:	000a5d53 	.word	0x000a5d53
   a5c48:	000a5d27 	.word	0x000a5d27
   a5c4c:	000a5d53 	.word	0x000a5d53
   a5c50:	000a5d53 	.word	0x000a5d53
   a5c54:	000a5d53 	.word	0x000a5d53
   a5c58:	000a5d53 	.word	0x000a5d53
   a5c5c:	000a5d53 	.word	0x000a5d53
   a5c60:	000a5d53 	.word	0x000a5d53
   a5c64:	000a5d27 	.word	0x000a5d27
   a5c68:	000a5d27 	.word	0x000a5d27
   a5c6c:	000a5d53 	.word	0x000a5d53
   a5c70:	000a5d53 	.word	0x000a5d53
   a5c74:	000a5d53 	.word	0x000a5d53
   a5c78:	000a5d53 	.word	0x000a5d53
   a5c7c:	000a5d53 	.word	0x000a5d53
   a5c80:	000a5d27 	.word	0x000a5d27
   a5c84:	000a5d27 	.word	0x000a5d27
   a5c88:	000a5d27 	.word	0x000a5d27
   a5c8c:	000a5d53 	.word	0x000a5d53
   a5c90:	000a5d53 	.word	0x000a5d53
   a5c94:	000a5d53 	.word	0x000a5d53
   a5c98:	000a5cb3 	.word	0x000a5cb3
		{
			
			case POWER_FAILURE:
			
		//	sv_cntrl_setredalarm();
		cl_rinse_powerFailureFlag = 1 ;
   a5c9c:	4b3f      	ldr	r3, [pc, #252]	; (a5d9c <CL_RinseAlarmActon+0x234>)
   a5c9e:	2201      	movs	r2, #1
   a5ca0:	601a      	str	r2, [r3, #0]
			sv_cntrl_buzzer();
   a5ca2:	4b3f      	ldr	r3, [pc, #252]	; (a5da0 <CL_RinseAlarmActon+0x238>)
   a5ca4:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a5ca6:	4b3f      	ldr	r3, [pc, #252]	; (a5da4 <CL_RinseAlarmActon+0x23c>)
   a5ca8:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a5caa:	4b3f      	ldr	r3, [pc, #252]	; (a5da8 <CL_RinseAlarmActon+0x240>)
   a5cac:	2206      	movs	r2, #6
   a5cae:	701a      	strb	r2, [r3, #0]
			break;
   a5cb0:	e053      	b.n	a5d5a <CL_RinseAlarmActon+0x1f2>
			
			case BP_STOPPED:
			// manav05 added flag for saline priming
			if(blood_flag == 1){
   a5cb2:	4b3e      	ldr	r3, [pc, #248]	; (a5dac <CL_RinseAlarmActon+0x244>)
   a5cb4:	781b      	ldrb	r3, [r3, #0]
   a5cb6:	b2db      	uxtb	r3, r3
   a5cb8:	2b01      	cmp	r3, #1
   a5cba:	d10a      	bne.n	a5cd2 <CL_RinseAlarmActon+0x16a>
			
			prime_alarm_flag = 1;
   a5cbc:	4b3c      	ldr	r3, [pc, #240]	; (a5db0 <CL_RinseAlarmActon+0x248>)
   a5cbe:	2201      	movs	r2, #1
   a5cc0:	601a      	str	r2, [r3, #0]
			sv_cntrl_setredalarm();
   a5cc2:	4b3c      	ldr	r3, [pc, #240]	; (a5db4 <CL_RinseAlarmActon+0x24c>)
   a5cc4:	4798      	blx	r3
			sv_cntrl_buzzer();
   a5cc6:	4b36      	ldr	r3, [pc, #216]	; (a5da0 <CL_RinseAlarmActon+0x238>)
   a5cc8:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;	
   a5cca:	4b37      	ldr	r3, [pc, #220]	; (a5da8 <CL_RinseAlarmActon+0x240>)
   a5ccc:	2206      	movs	r2, #6
   a5cce:	701a      	strb	r2, [r3, #0]
				sv_cntrl_setredalarm();
				sv_cntrl_buzzer();
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
			}
			
			break;
   a5cd0:	e043      	b.n	a5d5a <CL_RinseAlarmActon+0x1f2>
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;	
				
			}
			else{
				
				sv_cntrl_setredalarm();
   a5cd2:	4b38      	ldr	r3, [pc, #224]	; (a5db4 <CL_RinseAlarmActon+0x24c>)
   a5cd4:	4798      	blx	r3
				sv_cntrl_buzzer();
   a5cd6:	4b32      	ldr	r3, [pc, #200]	; (a5da0 <CL_RinseAlarmActon+0x238>)
   a5cd8:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a5cda:	4b33      	ldr	r3, [pc, #204]	; (a5da8 <CL_RinseAlarmActon+0x240>)
   a5cdc:	2206      	movs	r2, #6
   a5cde:	701a      	strb	r2, [r3, #0]
			}
			
			break;
   a5ce0:	e03b      	b.n	a5d5a <CL_RinseAlarmActon+0x1f2>
			
			case BLOODDOOR_STATUS_OPEN:
					sv_cntrl_setyellowalarm();
   a5ce2:	4b35      	ldr	r3, [pc, #212]	; (a5db8 <CL_RinseAlarmActon+0x250>)
   a5ce4:	4798      	blx	r3
					sv_cntrl_buzzer();
   a5ce6:	4b2e      	ldr	r3, [pc, #184]	; (a5da0 <CL_RinseAlarmActon+0x238>)
   a5ce8:	4798      	blx	r3
					cl_bp_controller(CL_BP_EVENT_STOP,0);
   a5cea:	2004      	movs	r0, #4
   a5cec:	2100      	movs	r1, #0
   a5cee:	4b33      	ldr	r3, [pc, #204]	; (a5dbc <CL_RinseAlarmActon+0x254>)
   a5cf0:	4798      	blx	r3
					Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false);
   a5cf2:	2001      	movs	r0, #1
   a5cf4:	2100      	movs	r1, #0
   a5cf6:	4b32      	ldr	r3, [pc, #200]	; (a5dc0 <CL_RinseAlarmActon+0x258>)
   a5cf8:	4798      	blx	r3
					if(blood_flag == 1){
   a5cfa:	4b2c      	ldr	r3, [pc, #176]	; (a5dac <CL_RinseAlarmActon+0x244>)
   a5cfc:	781b      	ldrb	r3, [r3, #0]
   a5cfe:	b2db      	uxtb	r3, r3
   a5d00:	2b01      	cmp	r3, #1
   a5d02:	d10f      	bne.n	a5d24 <CL_RinseAlarmActon+0x1bc>
						
						sv_cntrl_setredalarm();
   a5d04:	4b2b      	ldr	r3, [pc, #172]	; (a5db4 <CL_RinseAlarmActon+0x24c>)
   a5d06:	4798      	blx	r3
						sv_cntrl_resetyellowalarm();
   a5d08:	4b2e      	ldr	r3, [pc, #184]	; (a5dc4 <CL_RinseAlarmActon+0x25c>)
   a5d0a:	4798      	blx	r3
						prime_alarm_flag = 1;
   a5d0c:	4b28      	ldr	r3, [pc, #160]	; (a5db0 <CL_RinseAlarmActon+0x248>)
   a5d0e:	2201      	movs	r2, #1
   a5d10:	601a      	str	r2, [r3, #0]
						//blood_flag = 0;
						sv_cntrl_buzzer();
   a5d12:	4b23      	ldr	r3, [pc, #140]	; (a5da0 <CL_RinseAlarmActon+0x238>)
   a5d14:	4798      	blx	r3
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   a5d16:	2002      	movs	r0, #2
   a5d18:	2100      	movs	r1, #0
   a5d1a:	4b2b      	ldr	r3, [pc, #172]	; (a5dc8 <CL_RinseAlarmActon+0x260>)
   a5d1c:	4798      	blx	r3
						//Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false);  // manav02 added for prime alarm
						cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;         // manav02 added
   a5d1e:	4b22      	ldr	r3, [pc, #136]	; (a5da8 <CL_RinseAlarmActon+0x240>)
   a5d20:	2206      	movs	r2, #6
   a5d22:	701a      	strb	r2, [r3, #0]
					}
				//	cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_ALARM,0);
			//		Cl_Rinse_StopRinse();
			//		cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
				
			break;
   a5d24:	e019      	b.n	a5d5a <CL_RinseAlarmActon+0x1f2>
					case 	UFP_OVERRUN:
					case	UFP_UNDERRUN:
					case BC_ALARM:
	//		sv_cntrl_setyellowalarm();
	
	if(disinfectionrinseFlag == 1){
   a5d26:	4b29      	ldr	r3, [pc, #164]	; (a5dcc <CL_RinseAlarmActon+0x264>)
   a5d28:	681b      	ldr	r3, [r3, #0]
   a5d2a:	2b01      	cmp	r3, #1
   a5d2c:	d109      	bne.n	a5d42 <CL_RinseAlarmActon+0x1da>
	
				sv_cntrl_buzzer();
   a5d2e:	4b1c      	ldr	r3, [pc, #112]	; (a5da0 <CL_RinseAlarmActon+0x238>)
   a5d30:	4798      	blx	r3
				sv_cntrl_setredalarm();
   a5d32:	4b20      	ldr	r3, [pc, #128]	; (a5db4 <CL_RinseAlarmActon+0x24c>)
   a5d34:	4798      	blx	r3
				Cl_Rinse_DisinfStop();
   a5d36:	4b26      	ldr	r3, [pc, #152]	; (a5dd0 <CL_RinseAlarmActon+0x268>)
   a5d38:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a5d3a:	4b1b      	ldr	r3, [pc, #108]	; (a5da8 <CL_RinseAlarmActon+0x240>)
   a5d3c:	2206      	movs	r2, #6
   a5d3e:	701a      	strb	r2, [r3, #0]
	
			sv_cntrl_buzzer();
			Cl_Rinse_StopRinse();
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
	}
			break;
   a5d40:	e00b      	b.n	a5d5a <CL_RinseAlarmActon+0x1f2>
	}
	else{
		
	
	
			sv_cntrl_buzzer();
   a5d42:	4b17      	ldr	r3, [pc, #92]	; (a5da0 <CL_RinseAlarmActon+0x238>)
   a5d44:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a5d46:	4b17      	ldr	r3, [pc, #92]	; (a5da4 <CL_RinseAlarmActon+0x23c>)
   a5d48:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a5d4a:	4b17      	ldr	r3, [pc, #92]	; (a5da8 <CL_RinseAlarmActon+0x240>)
   a5d4c:	2206      	movs	r2, #6
   a5d4e:	701a      	strb	r2, [r3, #0]
	}
			break;
   a5d50:	e003      	b.n	a5d5a <CL_RinseAlarmActon+0x1f2>
			
			case WATCHDOG_TIMER: //27
		//		NewAlarmId = _WATCHDOG_TIMER;
			break;
			default:
			cl_rinsealarmid = _NO_ALARM;
   a5d52:	2300      	movs	r3, #0
   a5d54:	71fb      	strb	r3, [r7, #7]
			break;
   a5d56:	e000      	b.n	a5d5a <CL_RinseAlarmActon+0x1f2>

			break;*/
			
			case WATCHDOG_TIMER: //27
		//		NewAlarmId = _WATCHDOG_TIMER;
			break;
   a5d58:	bf00      	nop
			cl_rinsealarmid = _NO_ALARM;
			break;

		}
		
		 if(cl_rinsealarmid != _NO_ALARM)
   a5d5a:	79fb      	ldrb	r3, [r7, #7]
   a5d5c:	2b00      	cmp	r3, #0
   a5d5e:	d014      	beq.n	a5d8a <CL_RinseAlarmActon+0x222>
		 {
			 

			
			data[0] = (Cl_Uint8Type)cl_rinsealarmid;
   a5d60:	79fb      	ldrb	r3, [r7, #7]
   a5d62:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   a5d64:	2301      	movs	r3, #1
   a5d66:	727b      	strb	r3, [r7, #9]
			data[2] = (Cl_Uint8Type)CRITICAL;
   a5d68:	2302      	movs	r3, #2
   a5d6a:	72bb      	strb	r3, [r7, #10]
			command = CON_TX_COMMAND_ALARM;
   a5d6c:	2307      	movs	r3, #7
   a5d6e:	73fb      	strb	r3, [r7, #15]
			
			Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,3);
   a5d70:	7bfa      	ldrb	r2, [r7, #15]
   a5d72:	f107 0308 	add.w	r3, r7, #8
   a5d76:	4610      	mov	r0, r2
   a5d78:	4619      	mov	r1, r3
   a5d7a:	2203      	movs	r2, #3
   a5d7c:	4b15      	ldr	r3, [pc, #84]	; (a5dd4 <CL_RinseAlarmActon+0x26c>)
   a5d7e:	4798      	blx	r3
   a5d80:	4603      	mov	r3, r0
   a5d82:	75fb      	strb	r3, [r7, #23]
			cl_wait(10);
   a5d84:	200a      	movs	r0, #10
   a5d86:	4b14      	ldr	r3, [pc, #80]	; (a5dd8 <CL_RinseAlarmActon+0x270>)
   a5d88:	4798      	blx	r3
					

		 }
		 prevrinsealarm_id = cl_rinsealarmid;
   a5d8a:	4a14      	ldr	r2, [pc, #80]	; (a5ddc <CL_RinseAlarmActon+0x274>)
   a5d8c:	79fb      	ldrb	r3, [r7, #7]
   a5d8e:	7013      	strb	r3, [r2, #0]
		return CL_OK;	
   a5d90:	2300      	movs	r3, #0
}
   a5d92:	4618      	mov	r0, r3
   a5d94:	3718      	adds	r7, #24
   a5d96:	46bd      	mov	sp, r7
   a5d98:	bd80      	pop	{r7, pc}
   a5d9a:	bf00      	nop
   a5d9c:	20071e1c 	.word	0x20071e1c
   a5da0:	0009b671 	.word	0x0009b671
   a5da4:	000a66d5 	.word	0x000a66d5
   a5da8:	20071df2 	.word	0x20071df2
   a5dac:	20071dec 	.word	0x20071dec
   a5db0:	20071e18 	.word	0x20071e18
   a5db4:	0009b635 	.word	0x0009b635
   a5db8:	0009b649 	.word	0x0009b649
   a5dbc:	00094325 	.word	0x00094325
   a5dc0:	00082a35 	.word	0x00082a35
   a5dc4:	0009b699 	.word	0x0009b699
   a5dc8:	000880c1 	.word	0x000880c1
   a5dcc:	20071e24 	.word	0x20071e24
   a5dd0:	000a65a1 	.word	0x000a65a1
   a5dd4:	0009d1e9 	.word	0x0009d1e9
   a5dd8:	0009421d 	.word	0x0009421d
   a5ddc:	20071e14 	.word	0x20071e14

000a5de0 <Cl_RinseSendAlarm>:
Cl_ReturnCodeType  Cl_RinseSendAlarm(Cl_NewAlarmIdType cl_rinsealarmId )
{
   a5de0:	b580      	push	{r7, lr}
   a5de2:	b086      	sub	sp, #24
   a5de4:	af00      	add	r7, sp, #0
   a5de6:	4603      	mov	r3, r0
   a5de8:	71fb      	strb	r3, [r7, #7]
	
			Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a5dea:	2300      	movs	r3, #0
   a5dec:	75fb      	strb	r3, [r7, #23]
			 
			 
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   a5dee:	2300      	movs	r3, #0
   a5df0:	81bb      	strh	r3, [r7, #12]
   a5df2:	2300      	movs	r3, #0
   a5df4:	73bb      	strb	r3, [r7, #14]
   a5df6:	2300      	movs	r3, #0
   a5df8:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a5dfa:	2359      	movs	r3, #89	; 0x59
   a5dfc:	73fb      	strb	r3, [r7, #15]
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a5dfe:	4b11      	ldr	r3, [pc, #68]	; (a5e44 <Cl_RinseSendAlarm+0x64>)
   a5e00:	2206      	movs	r2, #6
   a5e02:	701a      	strb	r2, [r3, #0]
			sv_cntrl_setredalarm();
   a5e04:	4b10      	ldr	r3, [pc, #64]	; (a5e48 <Cl_RinseSendAlarm+0x68>)
   a5e06:	4798      	blx	r3
			sv_cntrl_buzzer();
   a5e08:	4b10      	ldr	r3, [pc, #64]	; (a5e4c <Cl_RinseSendAlarm+0x6c>)
   a5e0a:	4798      	blx	r3
			if(cl_rinsealarmId != _NO_ALARM)
   a5e0c:	79fb      	ldrb	r3, [r7, #7]
   a5e0e:	2b00      	cmp	r3, #0
   a5e10:	d014      	beq.n	a5e3c <Cl_RinseSendAlarm+0x5c>
			 {
				data[0] = (Cl_Uint8Type)cl_rinsealarmId;
   a5e12:	79fb      	ldrb	r3, [r7, #7]
   a5e14:	733b      	strb	r3, [r7, #12]
				data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   a5e16:	2301      	movs	r3, #1
   a5e18:	737b      	strb	r3, [r7, #13]
				data[2] = (Cl_Uint8Type)CRITICAL;
   a5e1a:	2302      	movs	r3, #2
   a5e1c:	73bb      	strb	r3, [r7, #14]
				command = CON_TX_COMMAND_ALARM;
   a5e1e:	2307      	movs	r3, #7
   a5e20:	73fb      	strb	r3, [r7, #15]
			
				Cl_RetVal = Cl_SendDatatoconsole(command,&data,3);
   a5e22:	7bfa      	ldrb	r2, [r7, #15]
   a5e24:	f107 030c 	add.w	r3, r7, #12
   a5e28:	4610      	mov	r0, r2
   a5e2a:	4619      	mov	r1, r3
   a5e2c:	2203      	movs	r2, #3
   a5e2e:	4b08      	ldr	r3, [pc, #32]	; (a5e50 <Cl_RinseSendAlarm+0x70>)
   a5e30:	4798      	blx	r3
   a5e32:	4603      	mov	r3, r0
   a5e34:	75fb      	strb	r3, [r7, #23]
				cl_wait(10);
   a5e36:	200a      	movs	r0, #10
   a5e38:	4b06      	ldr	r3, [pc, #24]	; (a5e54 <Cl_RinseSendAlarm+0x74>)
   a5e3a:	4798      	blx	r3

			 }
}
   a5e3c:	4618      	mov	r0, r3
   a5e3e:	3718      	adds	r7, #24
   a5e40:	46bd      	mov	sp, r7
   a5e42:	bd80      	pop	{r7, pc}
   a5e44:	20071df2 	.word	0x20071df2
   a5e48:	0009b635 	.word	0x0009b635
   a5e4c:	0009b671 	.word	0x0009b671
   a5e50:	0009d1e9 	.word	0x0009d1e9
   a5e54:	0009421d 	.word	0x0009421d

000a5e58 <Cl_RinseFlowOn>:
Cl_ReturnCodeType  Cl_RinseFlowOn(void )
{
   a5e58:	b580      	push	{r7, lr}
   a5e5a:	b082      	sub	sp, #8
   a5e5c:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a5e5e:	2300      	movs	r3, #0
   a5e60:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_activate_valve(VALVE_ID1);
   a5e62:	2001      	movs	r0, #1
   a5e64:	4b04      	ldr	r3, [pc, #16]	; (a5e78 <Cl_RinseFlowOn+0x20>)
   a5e66:	4798      	blx	r3
	cl_gfillinprogress = true;
   a5e68:	4b04      	ldr	r3, [pc, #16]	; (a5e7c <Cl_RinseFlowOn+0x24>)
   a5e6a:	2201      	movs	r2, #1
   a5e6c:	701a      	strb	r2, [r3, #0]
	return Cl_RetVal;
   a5e6e:	79fb      	ldrb	r3, [r7, #7]
	
}
   a5e70:	4618      	mov	r0, r3
   a5e72:	3708      	adds	r7, #8
   a5e74:	46bd      	mov	sp, r7
   a5e76:	bd80      	pop	{r7, pc}
   a5e78:	0009b3e9 	.word	0x0009b3e9
   a5e7c:	20071e0d 	.word	0x20071e0d

000a5e80 <Cl_RinseFlowOff>:

Cl_ReturnCodeType  Cl_RinseFlowOff(void )
{
   a5e80:	b580      	push	{r7, lr}
   a5e82:	b082      	sub	sp, #8
   a5e84:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a5e86:	2300      	movs	r3, #0
   a5e88:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_deactivate_valve(VALVE_ID1);
   a5e8a:	2001      	movs	r0, #1
   a5e8c:	4b04      	ldr	r3, [pc, #16]	; (a5ea0 <Cl_RinseFlowOff+0x20>)
   a5e8e:	4798      	blx	r3
	cl_gfillinprogress = false;
   a5e90:	4b04      	ldr	r3, [pc, #16]	; (a5ea4 <Cl_RinseFlowOff+0x24>)
   a5e92:	2200      	movs	r2, #0
   a5e94:	701a      	strb	r2, [r3, #0]
	return Cl_RetVal;
   a5e96:	79fb      	ldrb	r3, [r7, #7]
	
}
   a5e98:	4618      	mov	r0, r3
   a5e9a:	3708      	adds	r7, #8
   a5e9c:	46bd      	mov	sp, r7
   a5e9e:	bd80      	pop	{r7, pc}
   a5ea0:	0009b409 	.word	0x0009b409
   a5ea4:	20071e0d 	.word	0x20071e0d

000a5ea8 <Cl_RinseStop>:

Cl_ReturnCodeType  Cl_RinseStop(void)
{
   a5ea8:	b580      	push	{r7, lr}
   a5eaa:	b082      	sub	sp, #8
   a5eac:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a5eae:	2300      	movs	r3, #0
   a5eb0:	71fb      	strb	r3, [r7, #7]
	//sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
	Cl_bc_controller(BC_EVENT_STOP);
   a5eb2:	2005      	movs	r0, #5
   a5eb4:	4b04      	ldr	r3, [pc, #16]	; (a5ec8 <Cl_RinseStop+0x20>)
   a5eb6:	4798      	blx	r3
	
	sv_cntrl_poweroffheater();
   a5eb8:	4b04      	ldr	r3, [pc, #16]	; (a5ecc <Cl_RinseStop+0x24>)
   a5eba:	4798      	blx	r3
	return Cl_RetVal;
   a5ebc:	79fb      	ldrb	r3, [r7, #7]
	
}
   a5ebe:	4618      	mov	r0, r3
   a5ec0:	3708      	adds	r7, #8
   a5ec2:	46bd      	mov	sp, r7
   a5ec4:	bd80      	pop	{r7, pc}
   a5ec6:	bf00      	nop
   a5ec8:	00082ee1 	.word	0x00082ee1
   a5ecc:	0009b3d5 	.word	0x0009b3d5

000a5ed0 <Cl_Rinse_SendRinseStateData>:
Cl_ReturnCodeType Cl_Rinse_SendRinseStateData(void)
{
   a5ed0:	b580      	push	{r7, lr}
   a5ed2:	b088      	sub	sp, #32
   a5ed4:	af00      	add	r7, sp, #0
	static float cond = 0;
	Cl_ReturnCodeType  Cl_rinseretcode = CL_OK;
   a5ed6:	2300      	movs	r3, #0
   a5ed8:	77fb      	strb	r3, [r7, #31]
	StateDatatype data;
	Cl_Uint8Type count=0;
   a5eda:	2300      	movs	r3, #0
   a5edc:	77bb      	strb	r3, [r7, #30]
	Cl_Uint16Type ts2,temp=0,temp1=0,sensordata =0 , temp2 = 0;
   a5ede:	2300      	movs	r3, #0
   a5ee0:	82fb      	strh	r3, [r7, #22]
   a5ee2:	2300      	movs	r3, #0
   a5ee4:	83bb      	strh	r3, [r7, #28]
   a5ee6:	2300      	movs	r3, #0
   a5ee8:	82bb      	strh	r3, [r7, #20]
   a5eea:	2300      	movs	r3, #0
   a5eec:	827b      	strh	r3, [r7, #18]
	Cl_Uint8Type dataarray[12] =  {0,0,0,0,0,0,0,0,0,0,0,0};
   a5eee:	2300      	movs	r3, #0
   a5ef0:	713b      	strb	r3, [r7, #4]
   a5ef2:	2300      	movs	r3, #0
   a5ef4:	717b      	strb	r3, [r7, #5]
   a5ef6:	2300      	movs	r3, #0
   a5ef8:	71bb      	strb	r3, [r7, #6]
   a5efa:	2300      	movs	r3, #0
   a5efc:	71fb      	strb	r3, [r7, #7]
   a5efe:	2300      	movs	r3, #0
   a5f00:	723b      	strb	r3, [r7, #8]
   a5f02:	2300      	movs	r3, #0
   a5f04:	727b      	strb	r3, [r7, #9]
   a5f06:	2300      	movs	r3, #0
   a5f08:	72bb      	strb	r3, [r7, #10]
   a5f0a:	2300      	movs	r3, #0
   a5f0c:	72fb      	strb	r3, [r7, #11]
   a5f0e:	2300      	movs	r3, #0
   a5f10:	733b      	strb	r3, [r7, #12]
   a5f12:	2300      	movs	r3, #0
   a5f14:	737b      	strb	r3, [r7, #13]
   a5f16:	2300      	movs	r3, #0
   a5f18:	73bb      	strb	r3, [r7, #14]
   a5f1a:	2300      	movs	r3, #0
   a5f1c:	73fb      	strb	r3, [r7, #15]
	static timecount = 0;
	static float tmp3 = 0, tmp2 = 0;
	
	//Cl_Console_bulkdatatype 
	
	timecount++;
   a5f1e:	4b69      	ldr	r3, [pc, #420]	; (a60c4 <Cl_Rinse_SendRinseStateData+0x1f4>)
   a5f20:	681b      	ldr	r3, [r3, #0]
   a5f22:	3301      	adds	r3, #1
   a5f24:	4a67      	ldr	r2, [pc, #412]	; (a60c4 <Cl_Rinse_SendRinseStateData+0x1f4>)
   a5f26:	6013      	str	r3, [r2, #0]

	if (timecount < 5)
   a5f28:	4b66      	ldr	r3, [pc, #408]	; (a60c4 <Cl_Rinse_SendRinseStateData+0x1f4>)
   a5f2a:	681b      	ldr	r3, [r3, #0]
   a5f2c:	2b04      	cmp	r3, #4
   a5f2e:	f340 80c5 	ble.w	a60bc <Cl_Rinse_SendRinseStateData+0x1ec>
	{
		return;
	}
	else
	{
		timecount = 0;
   a5f32:	4b64      	ldr	r3, [pc, #400]	; (a60c4 <Cl_Rinse_SendRinseStateData+0x1f4>)
   a5f34:	2200      	movs	r2, #0
   a5f36:	601a      	str	r2, [r3, #0]
	}
	
	dataarray[0] = CLEAN_DATA;
   a5f38:	2301      	movs	r3, #1
   a5f3a:	713b      	strb	r3, [r7, #4]
	count++;
   a5f3c:	7fbb      	ldrb	r3, [r7, #30]
   a5f3e:	3301      	adds	r3, #1
   a5f40:	77bb      	strb	r3, [r7, #30]
	//Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);


		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   a5f42:	f107 0314 	add.w	r3, r7, #20
   a5f46:	2014      	movs	r0, #20
   a5f48:	4619      	mov	r1, r3
   a5f4a:	4b5f      	ldr	r3, [pc, #380]	; (a60c8 <Cl_Rinse_SendRinseStateData+0x1f8>)
   a5f4c:	4798      	blx	r3
		{
			tmp3 = (float)sensordata /10;
   a5f4e:	8aba      	ldrh	r2, [r7, #20]
   a5f50:	4b5e      	ldr	r3, [pc, #376]	; (a60cc <Cl_Rinse_SendRinseStateData+0x1fc>)
   a5f52:	4610      	mov	r0, r2
   a5f54:	4798      	blx	r3
   a5f56:	4602      	mov	r2, r0
   a5f58:	4b5d      	ldr	r3, [pc, #372]	; (a60d0 <Cl_Rinse_SendRinseStateData+0x200>)
   a5f5a:	4610      	mov	r0, r2
   a5f5c:	495d      	ldr	r1, [pc, #372]	; (a60d4 <Cl_Rinse_SendRinseStateData+0x204>)
   a5f5e:	4798      	blx	r3
   a5f60:	4603      	mov	r3, r0
   a5f62:	461a      	mov	r2, r3
   a5f64:	4b5c      	ldr	r3, [pc, #368]	; (a60d8 <Cl_Rinse_SendRinseStateData+0x208>)
   a5f66:	601a      	str	r2, [r3, #0]
		}

		Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&temp);
   a5f68:	f107 0316 	add.w	r3, r7, #22
   a5f6c:	2007      	movs	r0, #7
   a5f6e:	4619      	mov	r1, r3
   a5f70:	4b55      	ldr	r3, [pc, #340]	; (a60c8 <Cl_Rinse_SendRinseStateData+0x1f8>)
   a5f72:	4798      	blx	r3
		{
			// manav03 changed
							data.fourbytedata = temp/100;
   a5f74:	8afb      	ldrh	r3, [r7, #22]
   a5f76:	4a59      	ldr	r2, [pc, #356]	; (a60dc <Cl_Rinse_SendRinseStateData+0x20c>)
   a5f78:	fba2 2303 	umull	r2, r3, r2, r3
   a5f7c:	095b      	lsrs	r3, r3, #5
   a5f7e:	b29b      	uxth	r3, r3
   a5f80:	61bb      	str	r3, [r7, #24]
			 				dataarray[count++] = data.bytedata[0];
   a5f82:	7fbb      	ldrb	r3, [r7, #30]
   a5f84:	1c5a      	adds	r2, r3, #1
   a5f86:	77ba      	strb	r2, [r7, #30]
   a5f88:	7e3a      	ldrb	r2, [r7, #24]
   a5f8a:	f107 0120 	add.w	r1, r7, #32
   a5f8e:	440b      	add	r3, r1
   a5f90:	f803 2c1c 	strb.w	r2, [r3, #-28]
			 				dataarray[count++] = data.bytedata[1];
   a5f94:	7fbb      	ldrb	r3, [r7, #30]
   a5f96:	1c5a      	adds	r2, r3, #1
   a5f98:	77ba      	strb	r2, [r7, #30]
   a5f9a:	7e7a      	ldrb	r2, [r7, #25]
   a5f9c:	f107 0120 	add.w	r1, r7, #32
   a5fa0:	440b      	add	r3, r1
   a5fa2:	f803 2c1c 	strb.w	r2, [r3, #-28]
			 				dataarray[count++] = data.bytedata[2];
   a5fa6:	7fbb      	ldrb	r3, [r7, #30]
   a5fa8:	1c5a      	adds	r2, r3, #1
   a5faa:	77ba      	strb	r2, [r7, #30]
   a5fac:	7eba      	ldrb	r2, [r7, #26]
   a5fae:	f107 0120 	add.w	r1, r7, #32
   a5fb2:	440b      	add	r3, r1
   a5fb4:	f803 2c1c 	strb.w	r2, [r3, #-28]
			 				dataarray[count++] = data.bytedata[3];
   a5fb8:	7fbb      	ldrb	r3, [r7, #30]
   a5fba:	1c5a      	adds	r2, r3, #1
   a5fbc:	77ba      	strb	r2, [r7, #30]
   a5fbe:	7efa      	ldrb	r2, [r7, #27]
   a5fc0:	f107 0120 	add.w	r1, r7, #32
   a5fc4:	440b      	add	r3, r1
   a5fc6:	f803 2c1c 	strb.w	r2, [r3, #-28]
// 				dataarray[count++] = data.bytedata[2];
// 				dataarray[count++] = data.bytedata[3];
// 			}
			
		}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   a5fca:	f107 0314 	add.w	r3, r7, #20
   a5fce:	2014      	movs	r0, #20
   a5fd0:	4619      	mov	r1, r3
   a5fd2:	4b3d      	ldr	r3, [pc, #244]	; (a60c8 <Cl_Rinse_SendRinseStateData+0x1f8>)
   a5fd4:	4798      	blx	r3
			{
				float ftemp,ftemp1,temp1;
				tmp3 = sensordata /10;
   a5fd6:	8abb      	ldrh	r3, [r7, #20]
   a5fd8:	4a41      	ldr	r2, [pc, #260]	; (a60e0 <Cl_Rinse_SendRinseStateData+0x210>)
   a5fda:	fba2 2303 	umull	r2, r3, r2, r3
   a5fde:	08db      	lsrs	r3, r3, #3
   a5fe0:	b29b      	uxth	r3, r3
   a5fe2:	461a      	mov	r2, r3
   a5fe4:	4b3f      	ldr	r3, [pc, #252]	; (a60e4 <Cl_Rinse_SendRinseStateData+0x214>)
   a5fe6:	4610      	mov	r0, r2
   a5fe8:	4798      	blx	r3
   a5fea:	4602      	mov	r2, r0
   a5fec:	4b3a      	ldr	r3, [pc, #232]	; (a60d8 <Cl_Rinse_SendRinseStateData+0x208>)
   a5fee:	601a      	str	r2, [r3, #0]
				data.fourbytedata = (uint16_t)(tmp3 );
   a5ff0:	4b39      	ldr	r3, [pc, #228]	; (a60d8 <Cl_Rinse_SendRinseStateData+0x208>)
   a5ff2:	681a      	ldr	r2, [r3, #0]
   a5ff4:	4b3c      	ldr	r3, [pc, #240]	; (a60e8 <Cl_Rinse_SendRinseStateData+0x218>)
   a5ff6:	4610      	mov	r0, r2
   a5ff8:	4798      	blx	r3
   a5ffa:	4603      	mov	r3, r0
   a5ffc:	b29b      	uxth	r3, r3
   a5ffe:	61bb      	str	r3, [r7, #24]
				dataarray[count++] = data.bytedata[0];
   a6000:	7fbb      	ldrb	r3, [r7, #30]
   a6002:	1c5a      	adds	r2, r3, #1
   a6004:	77ba      	strb	r2, [r7, #30]
   a6006:	7e3a      	ldrb	r2, [r7, #24]
   a6008:	f107 0120 	add.w	r1, r7, #32
   a600c:	440b      	add	r3, r1
   a600e:	f803 2c1c 	strb.w	r2, [r3, #-28]
				dataarray[count++] = data.bytedata[1];
   a6012:	7fbb      	ldrb	r3, [r7, #30]
   a6014:	1c5a      	adds	r2, r3, #1
   a6016:	77ba      	strb	r2, [r7, #30]
   a6018:	7e7a      	ldrb	r2, [r7, #25]
   a601a:	f107 0120 	add.w	r1, r7, #32
   a601e:	440b      	add	r3, r1
   a6020:	f803 2c1c 	strb.w	r2, [r3, #-28]
				dataarray[count++] = data.bytedata[2];
   a6024:	7fbb      	ldrb	r3, [r7, #30]
   a6026:	1c5a      	adds	r2, r3, #1
   a6028:	77ba      	strb	r2, [r7, #30]
   a602a:	7eba      	ldrb	r2, [r7, #26]
   a602c:	f107 0120 	add.w	r1, r7, #32
   a6030:	440b      	add	r3, r1
   a6032:	f803 2c1c 	strb.w	r2, [r3, #-28]
				dataarray[count++] = data.bytedata[3];
   a6036:	7fbb      	ldrb	r3, [r7, #30]
   a6038:	1c5a      	adds	r2, r3, #1
   a603a:	77ba      	strb	r2, [r7, #30]
   a603c:	7efa      	ldrb	r2, [r7, #27]
   a603e:	f107 0120 	add.w	r1, r7, #32
   a6042:	440b      	add	r3, r1
   a6044:	f803 2c1c 	strb.w	r2, [r3, #-28]
			}
		
		// manav02 added
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&temp2);
   a6048:	f107 0312 	add.w	r3, r7, #18
   a604c:	2013      	movs	r0, #19
   a604e:	4619      	mov	r1, r3
   a6050:	4b1d      	ldr	r3, [pc, #116]	; (a60c8 <Cl_Rinse_SendRinseStateData+0x1f8>)
   a6052:	4798      	blx	r3
		{
			
			data.fourbytedata = (uint16_t)temp2/10 ;
   a6054:	8a7b      	ldrh	r3, [r7, #18]
   a6056:	4a22      	ldr	r2, [pc, #136]	; (a60e0 <Cl_Rinse_SendRinseStateData+0x210>)
   a6058:	fba2 2303 	umull	r2, r3, r2, r3
   a605c:	08db      	lsrs	r3, r3, #3
   a605e:	b29b      	uxth	r3, r3
   a6060:	61bb      	str	r3, [r7, #24]
			dataarray[count++] = data.bytedata[0];
   a6062:	7fbb      	ldrb	r3, [r7, #30]
   a6064:	1c5a      	adds	r2, r3, #1
   a6066:	77ba      	strb	r2, [r7, #30]
   a6068:	7e3a      	ldrb	r2, [r7, #24]
   a606a:	f107 0120 	add.w	r1, r7, #32
   a606e:	440b      	add	r3, r1
   a6070:	f803 2c1c 	strb.w	r2, [r3, #-28]
			dataarray[count++] = data.bytedata[1];
   a6074:	7fbb      	ldrb	r3, [r7, #30]
   a6076:	1c5a      	adds	r2, r3, #1
   a6078:	77ba      	strb	r2, [r7, #30]
   a607a:	7e7a      	ldrb	r2, [r7, #25]
   a607c:	f107 0120 	add.w	r1, r7, #32
   a6080:	440b      	add	r3, r1
   a6082:	f803 2c1c 	strb.w	r2, [r3, #-28]
			dataarray[count++] = data.bytedata[2];
   a6086:	7fbb      	ldrb	r3, [r7, #30]
   a6088:	1c5a      	adds	r2, r3, #1
   a608a:	77ba      	strb	r2, [r7, #30]
   a608c:	7eba      	ldrb	r2, [r7, #26]
   a608e:	f107 0120 	add.w	r1, r7, #32
   a6092:	440b      	add	r3, r1
   a6094:	f803 2c1c 	strb.w	r2, [r3, #-28]
			dataarray[count++] = data.bytedata[3];
   a6098:	7fbb      	ldrb	r3, [r7, #30]
   a609a:	1c5a      	adds	r2, r3, #1
   a609c:	77ba      	strb	r2, [r7, #30]
   a609e:	7efa      	ldrb	r2, [r7, #27]
   a60a0:	f107 0120 	add.w	r1, r7, #32
   a60a4:	440b      	add	r3, r1
   a60a6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		}
		
		Cl_rinseretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&dataarray,count);
   a60aa:	1d3a      	adds	r2, r7, #4
   a60ac:	7fbb      	ldrb	r3, [r7, #30]
   a60ae:	202a      	movs	r0, #42	; 0x2a
   a60b0:	4611      	mov	r1, r2
   a60b2:	461a      	mov	r2, r3
   a60b4:	4b0d      	ldr	r3, [pc, #52]	; (a60ec <Cl_Rinse_SendRinseStateData+0x21c>)
   a60b6:	4798      	blx	r3
   a60b8:	4603      	mov	r3, r0
   a60ba:	77fb      	strb	r3, [r7, #31]
		

}
   a60bc:	4618      	mov	r0, r3
   a60be:	3720      	adds	r7, #32
   a60c0:	46bd      	mov	sp, r7
   a60c2:	bd80      	pop	{r7, pc}
   a60c4:	20071e28 	.word	0x20071e28
   a60c8:	0008fd69 	.word	0x0008fd69
   a60cc:	000a8255 	.word	0x000a8255
   a60d0:	000a846d 	.word	0x000a846d
   a60d4:	41200000 	.word	0x41200000
   a60d8:	20071e2c 	.word	0x20071e2c
   a60dc:	51eb851f 	.word	0x51eb851f
   a60e0:	cccccccd 	.word	0xcccccccd
   a60e4:	000a825d 	.word	0x000a825d
   a60e8:	000a86dd 	.word	0x000a86dd
   a60ec:	0009d1e9 	.word	0x0009d1e9

000a60f0 <Cl_Rinse_StartRinse>:
	

	
}
Cl_ReturnCodeType Cl_Rinse_StartRinse(void)
{
   a60f0:	b590      	push	{r4, r7, lr}
   a60f2:	b089      	sub	sp, #36	; 0x24
   a60f4:	af02      	add	r7, sp, #8
				Cl_ReturnCodeType Cl_rinseretcode = CL_OK;
   a60f6:	2300      	movs	r3, #0
   a60f8:	75bb      	strb	r3, [r7, #22]
				Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a60fa:	2359      	movs	r3, #89	; 0x59
   a60fc:	757b      	strb	r3, [r7, #21]
				Cl_Uint8Type dataarray[4] = {0,0,0,0};
   a60fe:	2300      	movs	r3, #0
   a6100:	723b      	strb	r3, [r7, #8]
   a6102:	2300      	movs	r3, #0
   a6104:	727b      	strb	r3, [r7, #9]
   a6106:	2300      	movs	r3, #0
   a6108:	72bb      	strb	r3, [r7, #10]
   a610a:	2300      	movs	r3, #0
   a610c:	72fb      	strb	r3, [r7, #11]
				
				Cl_Uint8Type data = 0;
   a610e:	2300      	movs	r3, #0
   a6110:	753b      	strb	r3, [r7, #20]
				Cl_Uint16Type cl_rinse_acidstatus = 0, cl_rinse_bicarbstatus =0 , cl_rinse_holder1status = 0 , cl_rinse_holder2status = 0;
   a6112:	2300      	movs	r3, #0
   a6114:	80fb      	strh	r3, [r7, #6]
   a6116:	2300      	movs	r3, #0
   a6118:	80bb      	strh	r3, [r7, #4]
   a611a:	2300      	movs	r3, #0
   a611c:	807b      	strh	r3, [r7, #2]
   a611e:	2300      	movs	r3, #0
   a6120:	803b      	strh	r3, [r7, #0]
				Cl_BoolType Cl_Rinsereaduinessflag = true;
   a6122:	2301      	movs	r3, #1
   a6124:	75fb      	strb	r3, [r7, #23]
					
				//Check for  rinse readiness and alarm status
				
				//Cl_checkRinseReadyness();

                    Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a6126:	200d      	movs	r0, #13
   a6128:	2100      	movs	r1, #0
   a612a:	4b29      	ldr	r3, [pc, #164]	; (a61d0 <Cl_Rinse_StartRinse+0xe0>)
   a612c:	4798      	blx	r3
   a612e:	4603      	mov	r3, r0
   a6130:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );					
   a6132:	200c      	movs	r0, #12
   a6134:	2100      	movs	r1, #0
   a6136:	4b26      	ldr	r3, [pc, #152]	; (a61d0 <Cl_Rinse_StartRinse+0xe0>)
   a6138:	4798      	blx	r3
   a613a:	4603      	mov	r3, r0
   a613c:	75bb      	strb	r3, [r7, #22]
 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );   // manav02 changed from low to high
   a613e:	200e      	movs	r0, #14
   a6140:	2100      	movs	r1, #0
   a6142:	4b23      	ldr	r3, [pc, #140]	; (a61d0 <Cl_Rinse_StartRinse+0xe0>)
   a6144:	4798      	blx	r3
   a6146:	4603      	mov	r3, r0
   a6148:	75bb      	strb	r3, [r7, #22]


				SetHeaterState(CL_HEATER_STATE_OFF);
   a614a:	2004      	movs	r0, #4
   a614c:	4b21      	ldr	r3, [pc, #132]	; (a61d4 <Cl_Rinse_StartRinse+0xe4>)
   a614e:	4798      	blx	r3
				cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   a6150:	2001      	movs	r0, #1
   a6152:	4b21      	ldr	r3, [pc, #132]	; (a61d8 <Cl_Rinse_StartRinse+0xe8>)
   a6154:	4798      	blx	r3
				
				Cl_SysStat_GetSensor_Status_Query(SENSOR_ACID_INLET,&cl_rinse_acidstatus);
   a6156:	1dbb      	adds	r3, r7, #6
   a6158:	2020      	movs	r0, #32
   a615a:	4619      	mov	r1, r3
   a615c:	4b1f      	ldr	r3, [pc, #124]	; (a61dc <Cl_Rinse_StartRinse+0xec>)
   a615e:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_BICARB_INLET,&cl_rinse_bicarbstatus);
   a6160:	1d3b      	adds	r3, r7, #4
   a6162:	2021      	movs	r0, #33	; 0x21
   a6164:	4619      	mov	r1, r3
   a6166:	4b1d      	ldr	r3, [pc, #116]	; (a61dc <Cl_Rinse_StartRinse+0xec>)
   a6168:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_HOLDER1STATUS,&cl_rinse_holder1status);
   a616a:	1cbb      	adds	r3, r7, #2
   a616c:	2003      	movs	r0, #3
   a616e:	4619      	mov	r1, r3
   a6170:	4b1a      	ldr	r3, [pc, #104]	; (a61dc <Cl_Rinse_StartRinse+0xec>)
   a6172:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_HOLDER2STATUS,&cl_rinse_holder2status);
   a6174:	463b      	mov	r3, r7
   a6176:	2004      	movs	r0, #4
   a6178:	4619      	mov	r1, r3
   a617a:	4b18      	ldr	r3, [pc, #96]	; (a61dc <Cl_Rinse_StartRinse+0xec>)
   a617c:	4798      	blx	r3
				
				//DD_CAN_WRITE_HEMO(HEMO_START_BD_CALIBRATION, 0);
				
				// below commented for tuv testing holder alarms were present even after hoolders were connected
				 if(cl_rinse_acidstatus == ACID_INLET_OPEN )    // manav03 commented for testing
   a617e:	88fb      	ldrh	r3, [r7, #6]
   a6180:	2b00      	cmp	r3, #0
   a6182:	d104      	bne.n	a618e <Cl_Rinse_StartRinse+0x9e>
				 {
					 Cl_RinseSendAlarm(ACID_IN_OPEN);
   a6184:	2029      	movs	r0, #41	; 0x29
   a6186:	4b16      	ldr	r3, [pc, #88]	; (a61e0 <Cl_Rinse_StartRinse+0xf0>)
   a6188:	4798      	blx	r3
					 Cl_Rinsereaduinessflag = false;
   a618a:	2300      	movs	r3, #0
   a618c:	75fb      	strb	r3, [r7, #23]
				 } 
				 if(cl_rinse_bicarbstatus == BICARB_INLET_OPEN )
   a618e:	88bb      	ldrh	r3, [r7, #4]
   a6190:	2b00      	cmp	r3, #0
   a6192:	d104      	bne.n	a619e <Cl_Rinse_StartRinse+0xae>
				 {
					  Cl_RinseSendAlarm(BICARB_IN_OPEN);
   a6194:	202b      	movs	r0, #43	; 0x2b
   a6196:	4b12      	ldr	r3, [pc, #72]	; (a61e0 <Cl_Rinse_StartRinse+0xf0>)
   a6198:	4798      	blx	r3
					 Cl_Rinsereaduinessflag = false;
   a619a:	2300      	movs	r3, #0
   a619c:	75fb      	strb	r3, [r7, #23]
				 }	
				 if(cl_rinse_holder1status == CL_HOLDER1OPEN )  //CL_HOLDER1OPEN
   a619e:	887b      	ldrh	r3, [r7, #2]
   a61a0:	2b01      	cmp	r3, #1
   a61a2:	d104      	bne.n	a61ae <Cl_Rinse_StartRinse+0xbe>
				 {
					 Cl_RinseSendAlarm(HOLDER1STATUS_OPEN);
   a61a4:	2003      	movs	r0, #3
   a61a6:	4b0e      	ldr	r3, [pc, #56]	; (a61e0 <Cl_Rinse_StartRinse+0xf0>)
   a61a8:	4798      	blx	r3
					 Cl_Rinsereaduinessflag = false;
   a61aa:	2300      	movs	r3, #0
   a61ac:	75fb      	strb	r3, [r7, #23]
				 }
				 if(cl_rinse_holder2status == CL_HOLDER2OPEN )// CL_HOLDER1OPEN
   a61ae:	883b      	ldrh	r3, [r7, #0]
   a61b0:	2b01      	cmp	r3, #1
   a61b2:	d104      	bne.n	a61be <Cl_Rinse_StartRinse+0xce>
				 {
					 Cl_RinseSendAlarm(HOLDER2STATUS_OPEN);
   a61b4:	2004      	movs	r0, #4
   a61b6:	4b0a      	ldr	r3, [pc, #40]	; (a61e0 <Cl_Rinse_StartRinse+0xf0>)
   a61b8:	4798      	blx	r3
					 Cl_Rinsereaduinessflag = false;
   a61ba:	2300      	movs	r3, #0
   a61bc:	75fb      	strb	r3, [r7, #23]
				 }				 
				 if(Cl_Rinsereaduinessflag == false)
   a61be:	7dfb      	ldrb	r3, [r7, #23]
   a61c0:	f083 0301 	eor.w	r3, r3, #1
   a61c4:	b2db      	uxtb	r3, r3
   a61c6:	2b00      	cmp	r3, #0
   a61c8:	d00c      	beq.n	a61e4 <Cl_Rinse_StartRinse+0xf4>
				 {
					// Cl_Rinsereaduinessflag = true;
					 return CL_REJECTED;
   a61ca:	2303      	movs	r3, #3
   a61cc:	e1de      	b.n	a658c <Cl_Rinse_StartRinse+0x49c>
   a61ce:	bf00      	nop
   a61d0:	00082a35 	.word	0x00082a35
   a61d4:	00089381 	.word	0x00089381
   a61d8:	000948d9 	.word	0x000948d9
   a61dc:	0008fd69 	.word	0x0008fd69
   a61e0:	000a5de1 	.word	0x000a5de1
				 }
				 
				sv_cntrl_resetgreenalarm();
   a61e4:	4bb5      	ldr	r3, [pc, #724]	; (a64bc <Cl_Rinse_StartRinse+0x3cc>)
   a61e6:	4798      	blx	r3
// 				sv_cntrl_resetyellowalarm();
// 				sv_cntrl_resetredalarm();
 				sv_cntrl_nobuzzer();
   a61e8:	4bb5      	ldr	r3, [pc, #724]	; (a64c0 <Cl_Rinse_StartRinse+0x3d0>)
   a61ea:	4798      	blx	r3
// 				

	sv_cntrl_resetredalarm();
   a61ec:	4bb5      	ldr	r3, [pc, #724]	; (a64c4 <Cl_Rinse_StartRinse+0x3d4>)
   a61ee:	4798      	blx	r3
//	sv_cntrl_setgreenalarm();
				Cl_RinseFlowOn();
   a61f0:	4bb5      	ldr	r3, [pc, #724]	; (a64c8 <Cl_Rinse_StartRinse+0x3d8>)
   a61f2:	4798      	blx	r3
				//sv_prop_startpropeo_aligning();
				sv_cntrl_activate_valve(VALVE_ID2);
   a61f4:	2002      	movs	r0, #2
   a61f6:	4bb5      	ldr	r3, [pc, #724]	; (a64cc <Cl_Rinse_StartRinse+0x3dc>)
   a61f8:	4798      	blx	r3
				sv_cntrl_activate_valve(VALVE_ID3);
   a61fa:	2003      	movs	r0, #3
   a61fc:	4bb3      	ldr	r3, [pc, #716]	; (a64cc <Cl_Rinse_StartRinse+0x3dc>)
   a61fe:	4798      	blx	r3
				//	Cl_rinseretcode = sv_cntrl_setflowpath(BC_FLUSH_OPEN); // sanjeer BC_NEW
				
				Cl_rinseretcode = sv_cntrl_setpumpspeed(DCMOTOR2,1000);   // 900
   a6200:	2002      	movs	r0, #2
   a6202:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a6206:	4bb2      	ldr	r3, [pc, #712]	; (a64d0 <Cl_Rinse_StartRinse+0x3e0>)
   a6208:	4798      	blx	r3
   a620a:	4603      	mov	r3, r0
   a620c:	75bb      	strb	r3, [r7, #22]
				Cl_rinseretcode = sv_cntrl_setpumpspeed(DCMOTOR1,1100);
   a620e:	2001      	movs	r0, #1
   a6210:	f240 414c 	movw	r1, #1100	; 0x44c
   a6214:	4bae      	ldr	r3, [pc, #696]	; (a64d0 <Cl_Rinse_StartRinse+0x3e0>)
   a6216:	4798      	blx	r3
   a6218:	4603      	mov	r3, r0
   a621a:	75bb      	strb	r3, [r7, #22]
				Cl_rinseretcode =  sv_cntrl_activatepump(DCMOTOR1);
   a621c:	2001      	movs	r0, #1
   a621e:	4bad      	ldr	r3, [pc, #692]	; (a64d4 <Cl_Rinse_StartRinse+0x3e4>)
   a6220:	4798      	blx	r3
   a6222:	4603      	mov	r3, r0
   a6224:	75bb      	strb	r3, [r7, #22]
				Cl_rinseretcode =  sv_cntrl_activatepump(DCMOTOR2);
   a6226:	2002      	movs	r0, #2
   a6228:	4baa      	ldr	r3, [pc, #680]	; (a64d4 <Cl_Rinse_StartRinse+0x3e4>)
   a622a:	4798      	blx	r3
   a622c:	4603      	mov	r3, r0
   a622e:	75bb      	strb	r3, [r7, #22]

				Cl_Uint16Type potvalue = 0;
   a6230:	2300      	movs	r3, #0
   a6232:	827b      	strh	r3, [r7, #18]
				potvalue = (900* 1024)/10000;                                 // 600
   a6234:	235c      	movs	r3, #92	; 0x5c
   a6236:	827b      	strh	r3, [r7, #18]
				sv_cs_setpotvalue(potvalue);
   a6238:	8a7b      	ldrh	r3, [r7, #18]
   a623a:	4618      	mov	r0, r3
   a623c:	4ba6      	ldr	r3, [pc, #664]	; (a64d8 <Cl_Rinse_StartRinse+0x3e8>)
   a623e:	4798      	blx	r3
				
				Cl_Uint32Type temp = Treatdata[ID_dflow];
   a6240:	4ba6      	ldr	r3, [pc, #664]	; (a64dc <Cl_Rinse_StartRinse+0x3ec>)
   a6242:	695b      	ldr	r3, [r3, #20]
   a6244:	60fb      	str	r3, [r7, #12]
				flow_rate = temp;
   a6246:	4aa6      	ldr	r2, [pc, #664]	; (a64e0 <Cl_Rinse_StartRinse+0x3f0>)
   a6248:	68fb      	ldr	r3, [r7, #12]
   a624a:	6013      	str	r3, [r2, #0]
				
				cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,16000);
   a624c:	2001      	movs	r0, #1
   a624e:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
   a6252:	4ba4      	ldr	r3, [pc, #656]	; (a64e4 <Cl_Rinse_StartRinse+0x3f4>)
   a6254:	4798      	blx	r3
					cl_wait(100);
   a6256:	2064      	movs	r0, #100	; 0x64
   a6258:	4ba3      	ldr	r3, [pc, #652]	; (a64e8 <Cl_Rinse_StartRinse+0x3f8>)
   a625a:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_START,0);
   a625c:	2002      	movs	r0, #2
   a625e:	2100      	movs	r1, #0
   a6260:	4ba0      	ldr	r3, [pc, #640]	; (a64e4 <Cl_Rinse_StartRinse+0x3f4>)
   a6262:	4798      	blx	r3
					cl_ufpumpFeedback_start();
   a6264:	4ba1      	ldr	r3, [pc, #644]	; (a64ec <Cl_Rinse_StartRinse+0x3fc>)
   a6266:	4798      	blx	r3
					cl_wait(100);
   a6268:	2064      	movs	r0, #100	; 0x64
   a626a:	4b9f      	ldr	r3, [pc, #636]	; (a64e8 <Cl_Rinse_StartRinse+0x3f8>)
   a626c:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,12000);
   a626e:	2001      	movs	r0, #1
   a6270:	f642 61e0 	movw	r1, #12000	; 0x2ee0
   a6274:	4b9b      	ldr	r3, [pc, #620]	; (a64e4 <Cl_Rinse_StartRinse+0x3f4>)
   a6276:	4798      	blx	r3
					cl_wait(100);
   a6278:	2064      	movs	r0, #100	; 0x64
   a627a:	4b9b      	ldr	r3, [pc, #620]	; (a64e8 <Cl_Rinse_StartRinse+0x3f8>)
   a627c:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,8000);
   a627e:	2001      	movs	r0, #1
   a6280:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   a6284:	4b97      	ldr	r3, [pc, #604]	; (a64e4 <Cl_Rinse_StartRinse+0x3f4>)
   a6286:	4798      	blx	r3
					cl_wait(100);
   a6288:	2064      	movs	r0, #100	; 0x64
   a628a:	4b97      	ldr	r3, [pc, #604]	; (a64e8 <Cl_Rinse_StartRinse+0x3f8>)
   a628c:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,6000);
   a628e:	2001      	movs	r0, #1
   a6290:	f241 7170 	movw	r1, #6000	; 0x1770
   a6294:	4b93      	ldr	r3, [pc, #588]	; (a64e4 <Cl_Rinse_StartRinse+0x3f4>)
   a6296:	4798      	blx	r3
					cl_wait(100);
   a6298:	2064      	movs	r0, #100	; 0x64
   a629a:	4b93      	ldr	r3, [pc, #588]	; (a64e8 <Cl_Rinse_StartRinse+0x3f8>)
   a629c:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2000);
   a629e:	2001      	movs	r0, #1
   a62a0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   a62a4:	4b8f      	ldr	r3, [pc, #572]	; (a64e4 <Cl_Rinse_StartRinse+0x3f4>)
   a62a6:	4798      	blx	r3
					cl_wait(100);
   a62a8:	2064      	movs	r0, #100	; 0x64
   a62aa:	4b8f      	ldr	r3, [pc, #572]	; (a64e8 <Cl_Rinse_StartRinse+0x3f8>)
   a62ac:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,500);
   a62ae:	2001      	movs	r0, #1
   a62b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   a62b4:	4b8b      	ldr	r3, [pc, #556]	; (a64e4 <Cl_Rinse_StartRinse+0x3f4>)
   a62b6:	4798      	blx	r3
// 				sv_cntrl_setpumpspeed(UFPUMP,1000);
// 				cl_wait(100);
// 				sv_cntrl_setpumpspeed(UFPUMP,150);
// 				cl_wait(100);
// 				
				cl_uf_controller(CL_UF_EVENT_START,0);
   a62b8:	2002      	movs	r0, #2
   a62ba:	2100      	movs	r1, #0
   a62bc:	4b89      	ldr	r3, [pc, #548]	; (a64e4 <Cl_Rinse_StartRinse+0x3f4>)
   a62be:	4798      	blx	r3
				Cl_rinseretcode =  cl_deaeration_controller(CL_DEAER_EVENT_ACTIVATE);
   a62c0:	2000      	movs	r0, #0
   a62c2:	4b8b      	ldr	r3, [pc, #556]	; (a64f0 <Cl_Rinse_StartRinse+0x400>)
   a62c4:	4798      	blx	r3
   a62c6:	4603      	mov	r3, r0
   a62c8:	75bb      	strb	r3, [r7, #22]
				
				Cl_rinseretcode = Cl_bc_controller(BC_EVENT_START);
   a62ca:	2004      	movs	r0, #4
   a62cc:	4b89      	ldr	r3, [pc, #548]	; (a64f4 <Cl_Rinse_StartRinse+0x404>)
   a62ce:	4798      	blx	r3
   a62d0:	4603      	mov	r3, r0
   a62d2:	75bb      	strb	r3, [r7, #22]
		
				sv_prop_startopenfill(); 
   a62d4:	4b88      	ldr	r3, [pc, #544]	; (a64f8 <Cl_Rinse_StartRinse+0x408>)
   a62d6:	4798      	blx	r3
							//	sv_cntrl_deactivatepump(DCMOTOR1 );
							//	sv_cntrl_deactivatepump(DCMOTOR2 );
				if(Cl_rinseretcode == CL_OK)
   a62d8:	7dbb      	ldrb	r3, [r7, #22]
   a62da:	2b00      	cmp	r3, #0
   a62dc:	f040 8155 	bne.w	a658a <Cl_Rinse_StartRinse+0x49a>
				{
					

					//Reset the  OPENFILL time count
					Cl_RinseMinutescounter = 0;
   a62e0:	4b86      	ldr	r3, [pc, #536]	; (a64fc <Cl_Rinse_StartRinse+0x40c>)
   a62e2:	2200      	movs	r2, #0
   a62e4:	601a      	str	r2, [r3, #0]
					Cl_RinseTotalMinutescounter = 0;
   a62e6:	4b86      	ldr	r3, [pc, #536]	; (a6500 <Cl_Rinse_StartRinse+0x410>)
   a62e8:	2200      	movs	r2, #0
   a62ea:	601a      	str	r2, [r3, #0]
					Cl_RinseOpenFillTimeOut = false;
   a62ec:	4b85      	ldr	r3, [pc, #532]	; (a6504 <Cl_Rinse_StartRinse+0x414>)
   a62ee:	2200      	movs	r2, #0
   a62f0:	701a      	strb	r2, [r3, #0]

					

					sv_cntrl_activatevenousclamp();
   a62f2:	4b85      	ldr	r3, [pc, #532]	; (a6508 <Cl_Rinse_StartRinse+0x418>)
   a62f4:	4798      	blx	r3
					Cl_rinseretcode =  cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   a62f6:	2001      	movs	r0, #1
   a62f8:	4b84      	ldr	r3, [pc, #528]	; (a650c <Cl_Rinse_StartRinse+0x41c>)
   a62fa:	4798      	blx	r3
   a62fc:	4603      	mov	r3, r0
   a62fe:	75bb      	strb	r3, [r7, #22]
					//Cl_Rinse_ResetAlertsforReassertion();
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);	
   a6300:	2300      	movs	r3, #0
   a6302:	9300      	str	r3, [sp, #0]
   a6304:	2001      	movs	r0, #1
   a6306:	2101      	movs	r1, #1
   a6308:	f04f 0200 	mov.w	r2, #0
   a630c:	f04f 0300 	mov.w	r3, #0
   a6310:	4c7f      	ldr	r4, [pc, #508]	; (a6510 <Cl_Rinse_StartRinse+0x420>)
   a6312:	47a0      	blx	r4
   a6314:	4603      	mov	r3, r0
   a6316:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);	
   a6318:	2300      	movs	r3, #0
   a631a:	9300      	str	r3, [sp, #0]
   a631c:	2029      	movs	r0, #41	; 0x29
   a631e:	2100      	movs	r1, #0
   a6320:	f04f 0200 	mov.w	r2, #0
   a6324:	f04f 0300 	mov.w	r3, #0
   a6328:	4c79      	ldr	r4, [pc, #484]	; (a6510 <Cl_Rinse_StartRinse+0x420>)
   a632a:	47a0      	blx	r4
   a632c:	4603      	mov	r3, r0
   a632e:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);			
   a6330:	2300      	movs	r3, #0
   a6332:	9300      	str	r3, [sp, #0]
   a6334:	202b      	movs	r0, #43	; 0x2b
   a6336:	2100      	movs	r1, #0
   a6338:	f04f 0200 	mov.w	r2, #0
   a633c:	f04f 0300 	mov.w	r3, #0
   a6340:	4c73      	ldr	r4, [pc, #460]	; (a6510 <Cl_Rinse_StartRinse+0x420>)
   a6342:	47a0      	blx	r4
   a6344:	4603      	mov	r3, r0
   a6346:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_OPEN,LOGIC_HIGH,0,0,0);
   a6348:	2300      	movs	r3, #0
   a634a:	9300      	str	r3, [sp, #0]
   a634c:	2003      	movs	r0, #3
   a634e:	2101      	movs	r1, #1
   a6350:	f04f 0200 	mov.w	r2, #0
   a6354:	f04f 0300 	mov.w	r3, #0
   a6358:	4c6d      	ldr	r4, [pc, #436]	; (a6510 <Cl_Rinse_StartRinse+0x420>)
   a635a:	47a0      	blx	r4
   a635c:	4603      	mov	r3, r0
   a635e:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_OPEN,LOGIC_HIGH,0,0,0);
   a6360:	2300      	movs	r3, #0
   a6362:	9300      	str	r3, [sp, #0]
   a6364:	2004      	movs	r0, #4
   a6366:	2101      	movs	r1, #1
   a6368:	f04f 0200 	mov.w	r2, #0
   a636c:	f04f 0300 	mov.w	r3, #0
   a6370:	4c67      	ldr	r4, [pc, #412]	; (a6510 <Cl_Rinse_StartRinse+0x420>)
   a6372:	47a0      	blx	r4
   a6374:	4603      	mov	r3, r0
   a6376:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_OFF_TO_ON,LOGIC_LOW,0,0,0);
   a6378:	2300      	movs	r3, #0
   a637a:	9300      	str	r3, [sp, #0]
   a637c:	203d      	movs	r0, #61	; 0x3d
   a637e:	2100      	movs	r1, #0
   a6380:	f04f 0200 	mov.w	r2, #0
   a6384:	f04f 0300 	mov.w	r3, #0
   a6388:	4c61      	ldr	r4, [pc, #388]	; (a6510 <Cl_Rinse_StartRinse+0x420>)
   a638a:	47a0      	blx	r4
   a638c:	4603      	mov	r3, r0
   a638e:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_ON_TO_OFF,LOGIC_HIGH,0,0,0);
   a6390:	2300      	movs	r3, #0
   a6392:	9300      	str	r3, [sp, #0]
   a6394:	203e      	movs	r0, #62	; 0x3e
   a6396:	2101      	movs	r1, #1
   a6398:	f04f 0200 	mov.w	r2, #0
   a639c:	f04f 0300 	mov.w	r3, #0
   a63a0:	4c5b      	ldr	r4, [pc, #364]	; (a6510 <Cl_Rinse_StartRinse+0x420>)
   a63a2:	47a0      	blx	r4
   a63a4:	4603      	mov	r3, r0
   a63a6:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(BC_ALARM,0,0,0,0);
   a63a8:	2300      	movs	r3, #0
   a63aa:	9300      	str	r3, [sp, #0]
   a63ac:	201a      	movs	r0, #26
   a63ae:	2100      	movs	r1, #0
   a63b0:	f04f 0200 	mov.w	r2, #0
   a63b4:	f04f 0300 	mov.w	r3, #0
   a63b8:	4c55      	ldr	r4, [pc, #340]	; (a6510 <Cl_Rinse_StartRinse+0x420>)
   a63ba:	47a0      	blx	r4
   a63bc:	4603      	mov	r3, r0
   a63be:	75bb      	strb	r3, [r7, #22]
					
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(POWER_FAILURE,LOGIC_HIGH,0,0,0);
   a63c0:	2300      	movs	r3, #0
   a63c2:	9300      	str	r3, [sp, #0]
   a63c4:	201d      	movs	r0, #29
   a63c6:	2101      	movs	r1, #1
   a63c8:	f04f 0200 	mov.w	r2, #0
   a63cc:	f04f 0300 	mov.w	r3, #0
   a63d0:	4c4f      	ldr	r4, [pc, #316]	; (a6510 <Cl_Rinse_StartRinse+0x420>)
   a63d2:	47a0      	blx	r4
   a63d4:	4603      	mov	r3, r0
   a63d6:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(FLOW_LOW_FLOWRATE,0,0,0,0);
   a63d8:	2300      	movs	r3, #0
   a63da:	9300      	str	r3, [sp, #0]
   a63dc:	200d      	movs	r0, #13
   a63de:	2100      	movs	r1, #0
   a63e0:	f04f 0200 	mov.w	r2, #0
   a63e4:	f04f 0300 	mov.w	r3, #0
   a63e8:	4c49      	ldr	r4, [pc, #292]	; (a6510 <Cl_Rinse_StartRinse+0x420>)
   a63ea:	47a0      	blx	r4
   a63ec:	4603      	mov	r3, r0
   a63ee:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(FLOW_NO_FLOW,0,0,0,0);
   a63f0:	2300      	movs	r3, #0
   a63f2:	9300      	str	r3, [sp, #0]
   a63f4:	200c      	movs	r0, #12
   a63f6:	2100      	movs	r1, #0
   a63f8:	f04f 0200 	mov.w	r2, #0
   a63fc:	f04f 0300 	mov.w	r3, #0
   a6400:	4c43      	ldr	r4, [pc, #268]	; (a6510 <Cl_Rinse_StartRinse+0x420>)
   a6402:	47a0      	blx	r4
   a6404:	4603      	mov	r3, r0
   a6406:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(FLOW_HIGH_FLOWRATE,0,1500,0,0);
   a6408:	2300      	movs	r3, #0
   a640a:	9300      	str	r3, [sp, #0]
   a640c:	200e      	movs	r0, #14
   a640e:	2100      	movs	r1, #0
   a6410:	4a40      	ldr	r2, [pc, #256]	; (a6514 <Cl_Rinse_StartRinse+0x424>)
   a6412:	f04f 0300 	mov.w	r3, #0
   a6416:	4c3e      	ldr	r4, [pc, #248]	; (a6510 <Cl_Rinse_StartRinse+0x420>)
   a6418:	47a0      	blx	r4
   a641a:	4603      	mov	r3, r0
   a641c:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(TEMP1_HIGH_THRESHOLD,0,370,150,0);
   a641e:	2300      	movs	r3, #0
   a6420:	9300      	str	r3, [sp, #0]
   a6422:	200f      	movs	r0, #15
   a6424:	2100      	movs	r1, #0
   a6426:	4a3c      	ldr	r2, [pc, #240]	; (a6518 <Cl_Rinse_StartRinse+0x428>)
   a6428:	4b3c      	ldr	r3, [pc, #240]	; (a651c <Cl_Rinse_StartRinse+0x42c>)
   a642a:	4c39      	ldr	r4, [pc, #228]	; (a6510 <Cl_Rinse_StartRinse+0x420>)
   a642c:	47a0      	blx	r4
   a642e:	4603      	mov	r3, r0
   a6430:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(TEMP1_LOW_THRESHOLD,0,150,150,0);
   a6432:	2300      	movs	r3, #0
   a6434:	9300      	str	r3, [sp, #0]
   a6436:	2010      	movs	r0, #16
   a6438:	2100      	movs	r1, #0
   a643a:	4a38      	ldr	r2, [pc, #224]	; (a651c <Cl_Rinse_StartRinse+0x42c>)
   a643c:	4b37      	ldr	r3, [pc, #220]	; (a651c <Cl_Rinse_StartRinse+0x42c>)
   a643e:	4c34      	ldr	r4, [pc, #208]	; (a6510 <Cl_Rinse_StartRinse+0x420>)
   a6440:	47a0      	blx	r4
   a6442:	4603      	mov	r3, r0
   a6444:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(TEMP2_HIGH_THRESHOLD,0,850,150,0);
   a6446:	2300      	movs	r3, #0
   a6448:	9300      	str	r3, [sp, #0]
   a644a:	2011      	movs	r0, #17
   a644c:	2100      	movs	r1, #0
   a644e:	4a34      	ldr	r2, [pc, #208]	; (a6520 <Cl_Rinse_StartRinse+0x430>)
   a6450:	4b32      	ldr	r3, [pc, #200]	; (a651c <Cl_Rinse_StartRinse+0x42c>)
   a6452:	4c2f      	ldr	r4, [pc, #188]	; (a6510 <Cl_Rinse_StartRinse+0x420>)
   a6454:	47a0      	blx	r4
   a6456:	4603      	mov	r3, r0
   a6458:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(TEMP2_LOW_THRESHOLD,0,150,150,0);
   a645a:	2300      	movs	r3, #0
   a645c:	9300      	str	r3, [sp, #0]
   a645e:	2012      	movs	r0, #18
   a6460:	2100      	movs	r1, #0
   a6462:	4a2e      	ldr	r2, [pc, #184]	; (a651c <Cl_Rinse_StartRinse+0x42c>)
   a6464:	4b2d      	ldr	r3, [pc, #180]	; (a651c <Cl_Rinse_StartRinse+0x42c>)
   a6466:	4c2a      	ldr	r4, [pc, #168]	; (a6510 <Cl_Rinse_StartRinse+0x420>)
   a6468:	47a0      	blx	r4
   a646a:	4603      	mov	r3, r0
   a646c:	75bb      	strb	r3, [r7, #22]
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );
				
				   Cl_rinseretcode =  Cl_AlarmActivateAlarms(POWER_FAILURE,true);          //manav03 disabled for testing
   a646e:	201d      	movs	r0, #29
   a6470:	2101      	movs	r1, #1
   a6472:	4b2c      	ldr	r3, [pc, #176]	; (a6524 <Cl_Rinse_StartRinse+0x434>)
   a6474:	4798      	blx	r3
   a6476:	4603      	mov	r3, r0
   a6478:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   a647a:	203d      	movs	r0, #61	; 0x3d
   a647c:	2101      	movs	r1, #1
   a647e:	4b29      	ldr	r3, [pc, #164]	; (a6524 <Cl_Rinse_StartRinse+0x434>)
   a6480:	4798      	blx	r3
   a6482:	4603      	mov	r3, r0
   a6484:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,true );					
   a6486:	203e      	movs	r0, #62	; 0x3e
   a6488:	2101      	movs	r1, #1
   a648a:	4b26      	ldr	r3, [pc, #152]	; (a6524 <Cl_Rinse_StartRinse+0x434>)
   a648c:	4798      	blx	r3
   a648e:	4603      	mov	r3, r0
   a6490:	75bb      	strb	r3, [r7, #22]
				//	Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
// 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );					
// 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
// 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,true );       // manav03 alarm removed for testing
   a6492:	2029      	movs	r0, #41	; 0x29
   a6494:	2101      	movs	r1, #1
   a6496:	4b23      	ldr	r3, [pc, #140]	; (a6524 <Cl_Rinse_StartRinse+0x434>)
   a6498:	4798      	blx	r3
   a649a:	4603      	mov	r3, r0
   a649c:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,true ); 
   a649e:	202b      	movs	r0, #43	; 0x2b
   a64a0:	2101      	movs	r1, #1
   a64a2:	4b20      	ldr	r3, [pc, #128]	; (a6524 <Cl_Rinse_StartRinse+0x434>)
   a64a4:	4798      	blx	r3
   a64a6:	4603      	mov	r3, r0
   a64a8:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true ); // manav03 alarm removed for testing
   a64aa:	2003      	movs	r0, #3
   a64ac:	2101      	movs	r1, #1
   a64ae:	4b1d      	ldr	r3, [pc, #116]	; (a6524 <Cl_Rinse_StartRinse+0x434>)
   a64b0:	4798      	blx	r3
   a64b2:	4603      	mov	r3, r0
   a64b4:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true ); // manav03 alarm removed for testing
   a64b6:	2004      	movs	r0, #4
   a64b8:	e036      	b.n	a6528 <Cl_Rinse_StartRinse+0x438>
   a64ba:	bf00      	nop
   a64bc:	0009b6ad 	.word	0x0009b6ad
   a64c0:	0009b6c1 	.word	0x0009b6c1
   a64c4:	0009b685 	.word	0x0009b685
   a64c8:	000a5e59 	.word	0x000a5e59
   a64cc:	0009b3e9 	.word	0x0009b3e9
   a64d0:	0009b461 	.word	0x0009b461
   a64d4:	0009b32d 	.word	0x0009b32d
   a64d8:	0009b899 	.word	0x0009b899
   a64dc:	20072880 	.word	0x20072880
   a64e0:	20071a68 	.word	0x20071a68
   a64e4:	00097499 	.word	0x00097499
   a64e8:	0009421d 	.word	0x0009421d
   a64ec:	00097255 	.word	0x00097255
   a64f0:	00094819 	.word	0x00094819
   a64f4:	00082ee1 	.word	0x00082ee1
   a64f8:	0009b851 	.word	0x0009b851
   a64fc:	20071df8 	.word	0x20071df8
   a6500:	20071e04 	.word	0x20071e04
   a6504:	20071e0c 	.word	0x20071e0c
   a6508:	0009b535 	.word	0x0009b535
   a650c:	000948d9 	.word	0x000948d9
   a6510:	000829dd 	.word	0x000829dd
   a6514:	44bb8000 	.word	0x44bb8000
   a6518:	43b90000 	.word	0x43b90000
   a651c:	43160000 	.word	0x43160000
   a6520:	44548000 	.word	0x44548000
   a6524:	00082a35 	.word	0x00082a35
   a6528:	2101      	movs	r1, #1
   a652a:	4b1a      	ldr	r3, [pc, #104]	; (a6594 <Cl_Rinse_StartRinse+0x4a4>)
   a652c:	4798      	blx	r3
   a652e:	4603      	mov	r3, r0
   a6530:	75bb      	strb	r3, [r7, #22]
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,true );
   a6532:	2011      	movs	r0, #17
   a6534:	2101      	movs	r1, #1
   a6536:	4b17      	ldr	r3, [pc, #92]	; (a6594 <Cl_Rinse_StartRinse+0x4a4>)
   a6538:	4798      	blx	r3
   a653a:	4603      	mov	r3, r0
   a653c:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,true );
   a653e:	2012      	movs	r0, #18
   a6540:	2101      	movs	r1, #1
   a6542:	4b14      	ldr	r3, [pc, #80]	; (a6594 <Cl_Rinse_StartRinse+0x4a4>)
   a6544:	4798      	blx	r3
   a6546:	4603      	mov	r3, r0
   a6548:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,true );
   a654a:	2010      	movs	r0, #16
   a654c:	2101      	movs	r1, #1
   a654e:	4b11      	ldr	r3, [pc, #68]	; (a6594 <Cl_Rinse_StartRinse+0x4a4>)
   a6550:	4798      	blx	r3
   a6552:	4603      	mov	r3, r0
   a6554:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,true );
   a6556:	200f      	movs	r0, #15
   a6558:	2101      	movs	r1, #1
   a655a:	4b0e      	ldr	r3, [pc, #56]	; (a6594 <Cl_Rinse_StartRinse+0x4a4>)
   a655c:	4798      	blx	r3
   a655e:	4603      	mov	r3, r0
   a6560:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(BP_STOPPED,true );
   a6562:	203f      	movs	r0, #63	; 0x3f
   a6564:	2101      	movs	r1, #1
   a6566:	4b0b      	ldr	r3, [pc, #44]	; (a6594 <Cl_Rinse_StartRinse+0x4a4>)
   a6568:	4798      	blx	r3
   a656a:	4603      	mov	r3, r0
   a656c:	75bb      	strb	r3, [r7, #22]
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(COND_DAC_RO,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(COND_DAC_HIGH,true );
					

					
					if(Current_sense_trigger)
   a656e:	4b0a      	ldr	r3, [pc, #40]	; (a6598 <Cl_Rinse_StartRinse+0x4a8>)
   a6570:	781b      	ldrb	r3, [r3, #0]
   a6572:	2b00      	cmp	r3, #0
   a6574:	d005      	beq.n	a6582 <Cl_Rinse_StartRinse+0x492>
					{
						Cl_rinseretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   a6576:	203c      	movs	r0, #60	; 0x3c
   a6578:	2101      	movs	r1, #1
   a657a:	4b06      	ldr	r3, [pc, #24]	; (a6594 <Cl_Rinse_StartRinse+0x4a4>)
   a657c:	4798      	blx	r3
   a657e:	4603      	mov	r3, r0
   a6580:	75bb      	strb	r3, [r7, #22]
					else
					{
						//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
					}
											
					Cl_rinseretcode = Cl_Rinse_ResetAlertsforReassertion();
   a6582:	4b06      	ldr	r3, [pc, #24]	; (a659c <Cl_Rinse_StartRinse+0x4ac>)
   a6584:	4798      	blx	r3
   a6586:	4603      	mov	r3, r0
   a6588:	75bb      	strb	r3, [r7, #22]
					//Cl_rinseretcode = SetHeaterState(CL_HEATER_STATE_START);
					

					
				}
					return CL_OK;
   a658a:	2300      	movs	r3, #0
}
   a658c:	4618      	mov	r0, r3
   a658e:	371c      	adds	r7, #28
   a6590:	46bd      	mov	sp, r7
   a6592:	bd90      	pop	{r4, r7, pc}
   a6594:	00082a35 	.word	0x00082a35
   a6598:	20070bea 	.word	0x20070bea
   a659c:	000a5a15 	.word	0x000a5a15

000a65a0 <Cl_Rinse_DisinfStop>:

Cl_ReturnCodeType Cl_Rinse_DisinfStop(void){
   a65a0:	b580      	push	{r7, lr}
   a65a2:	b082      	sub	sp, #8
   a65a4:	af00      	add	r7, sp, #0
	
	
	Cl_ReturnCodeType Cl_rinseretcode = CL_OK;
   a65a6:	2300      	movs	r3, #0
   a65a8:	71fb      	strb	r3, [r7, #7]
	Cl_Uint8Type data;
	
	sv_cntrl_setredalarm();
   a65aa:	4b3d      	ldr	r3, [pc, #244]	; (a66a0 <Cl_Rinse_DisinfStop+0x100>)
   a65ac:	4798      	blx	r3
	
	Cl_rinseretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false );
   a65ae:	2001      	movs	r0, #1
   a65b0:	2100      	movs	r1, #0
   a65b2:	4b3c      	ldr	r3, [pc, #240]	; (a66a4 <Cl_Rinse_DisinfStop+0x104>)
   a65b4:	4798      	blx	r3
   a65b6:	4603      	mov	r3, r0
   a65b8:	71fb      	strb	r3, [r7, #7]
	//Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );
	//Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );
	Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,false );
   a65ba:	203d      	movs	r0, #61	; 0x3d
   a65bc:	2100      	movs	r1, #0
   a65be:	4b39      	ldr	r3, [pc, #228]	; (a66a4 <Cl_Rinse_DisinfStop+0x104>)
   a65c0:	4798      	blx	r3
   a65c2:	4603      	mov	r3, r0
   a65c4:	71fb      	strb	r3, [r7, #7]
	Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,false );
   a65c6:	203e      	movs	r0, #62	; 0x3e
   a65c8:	2100      	movs	r1, #0
   a65ca:	4b36      	ldr	r3, [pc, #216]	; (a66a4 <Cl_Rinse_DisinfStop+0x104>)
   a65cc:	4798      	blx	r3
   a65ce:	4603      	mov	r3, r0
   a65d0:	71fb      	strb	r3, [r7, #7]
	Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a65d2:	200d      	movs	r0, #13
   a65d4:	2100      	movs	r1, #0
   a65d6:	4b33      	ldr	r3, [pc, #204]	; (a66a4 <Cl_Rinse_DisinfStop+0x104>)
   a65d8:	4798      	blx	r3
   a65da:	4603      	mov	r3, r0
   a65dc:	71fb      	strb	r3, [r7, #7]
	Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );
   a65de:	200c      	movs	r0, #12
   a65e0:	2100      	movs	r1, #0
   a65e2:	4b30      	ldr	r3, [pc, #192]	; (a66a4 <Cl_Rinse_DisinfStop+0x104>)
   a65e4:	4798      	blx	r3
   a65e6:	4603      	mov	r3, r0
   a65e8:	71fb      	strb	r3, [r7, #7]
	Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a65ea:	200d      	movs	r0, #13
   a65ec:	2100      	movs	r1, #0
   a65ee:	4b2d      	ldr	r3, [pc, #180]	; (a66a4 <Cl_Rinse_DisinfStop+0x104>)
   a65f0:	4798      	blx	r3
   a65f2:	4603      	mov	r3, r0
   a65f4:	71fb      	strb	r3, [r7, #7]
	// 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
	Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a65f6:	2029      	movs	r0, #41	; 0x29
   a65f8:	2100      	movs	r1, #0
   a65fa:	4b2a      	ldr	r3, [pc, #168]	; (a66a4 <Cl_Rinse_DisinfStop+0x104>)
   a65fc:	4798      	blx	r3
   a65fe:	4603      	mov	r3, r0
   a6600:	71fb      	strb	r3, [r7, #7]
	Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a6602:	202b      	movs	r0, #43	; 0x2b
   a6604:	2100      	movs	r1, #0
   a6606:	4b27      	ldr	r3, [pc, #156]	; (a66a4 <Cl_Rinse_DisinfStop+0x104>)
   a6608:	4798      	blx	r3
   a660a:	4603      	mov	r3, r0
   a660c:	71fb      	strb	r3, [r7, #7]
	Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a660e:	2003      	movs	r0, #3
   a6610:	2100      	movs	r1, #0
   a6612:	4b24      	ldr	r3, [pc, #144]	; (a66a4 <Cl_Rinse_DisinfStop+0x104>)
   a6614:	4798      	blx	r3
   a6616:	4603      	mov	r3, r0
   a6618:	71fb      	strb	r3, [r7, #7]
	Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a661a:	2004      	movs	r0, #4
   a661c:	2100      	movs	r1, #0
   a661e:	4b21      	ldr	r3, [pc, #132]	; (a66a4 <Cl_Rinse_DisinfStop+0x104>)
   a6620:	4798      	blx	r3
   a6622:	4603      	mov	r3, r0
   a6624:	71fb      	strb	r3, [r7, #7]
	Cl_rinseretcode =  Cl_AlarmActivateAlarms(BC_ALARM,false);
   a6626:	201a      	movs	r0, #26
   a6628:	2100      	movs	r1, #0
   a662a:	4b1e      	ldr	r3, [pc, #120]	; (a66a4 <Cl_Rinse_DisinfStop+0x104>)
   a662c:	4798      	blx	r3
   a662e:	4603      	mov	r3, r0
   a6630:	71fb      	strb	r3, [r7, #7]
	
	Cl_Rinse_ResetAlertsforReassertion();
   a6632:	4b1d      	ldr	r3, [pc, #116]	; (a66a8 <Cl_Rinse_DisinfStop+0x108>)
   a6634:	4798      	blx	r3
	
	if(!((cl_rinsestate == CL_RINSE_STATE_IDLE ) || (cl_rinsestate == CL_RINSE_STATE_STOPPED ) ||(cl_rinsestate == CL_RINSE_STATE_CRITICAL_ALARM )  ))
   a6636:	4b1d      	ldr	r3, [pc, #116]	; (a66ac <Cl_Rinse_DisinfStop+0x10c>)
   a6638:	781b      	ldrb	r3, [r3, #0]
   a663a:	2b00      	cmp	r3, #0
   a663c:	d02c      	beq.n	a6698 <Cl_Rinse_DisinfStop+0xf8>
   a663e:	4b1b      	ldr	r3, [pc, #108]	; (a66ac <Cl_Rinse_DisinfStop+0x10c>)
   a6640:	781b      	ldrb	r3, [r3, #0]
   a6642:	2b08      	cmp	r3, #8
   a6644:	d028      	beq.n	a6698 <Cl_Rinse_DisinfStop+0xf8>
   a6646:	4b19      	ldr	r3, [pc, #100]	; (a66ac <Cl_Rinse_DisinfStop+0x10c>)
   a6648:	781b      	ldrb	r3, [r3, #0]
   a664a:	2b06      	cmp	r3, #6
   a664c:	d024      	beq.n	a6698 <Cl_Rinse_DisinfStop+0xf8>
		// 					}
		// 					else{
		//
		
		//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DOOR",4);
		sv_cntrl_activatevenousclamp();
   a664e:	4b18      	ldr	r3, [pc, #96]	; (a66b0 <Cl_Rinse_DisinfStop+0x110>)
   a6650:	4798      	blx	r3
		Cl_Rinsesecondscounter = 0;
   a6652:	4b18      	ldr	r3, [pc, #96]	; (a66b4 <Cl_Rinse_DisinfStop+0x114>)
   a6654:	2200      	movs	r2, #0
   a6656:	601a      	str	r2, [r3, #0]
		Cl_RinseMinutescounter = 0;
   a6658:	4b17      	ldr	r3, [pc, #92]	; (a66b8 <Cl_Rinse_DisinfStop+0x118>)
   a665a:	2200      	movs	r2, #0
   a665c:	601a      	str	r2, [r3, #0]
		Cl_RinseTotalMinutescounter = 0;
   a665e:	4b17      	ldr	r3, [pc, #92]	; (a66bc <Cl_Rinse_DisinfStop+0x11c>)
   a6660:	2200      	movs	r2, #0
   a6662:	601a      	str	r2, [r3, #0]
		Cl_RinsesTotalhourscounter = 0 ;
   a6664:	4b16      	ldr	r3, [pc, #88]	; (a66c0 <Cl_Rinse_DisinfStop+0x120>)
   a6666:	2200      	movs	r2, #0
   a6668:	601a      	str	r2, [r3, #0]
		//Cl_rinseretcode = sv_cntrl_poweroffheater();
		Cl_bc_controller(BC_EVENT_STOP);
   a666a:	2005      	movs	r0, #5
   a666c:	4b15      	ldr	r3, [pc, #84]	; (a66c4 <Cl_Rinse_DisinfStop+0x124>)
   a666e:	4798      	blx	r3
		Cl_bc_controller(BC_EVENT_STOP_RINSE);
   a6670:	200d      	movs	r0, #13
   a6672:	4b14      	ldr	r3, [pc, #80]	; (a66c4 <Cl_Rinse_DisinfStop+0x124>)
   a6674:	4798      	blx	r3
		cl_uf_controller(CL_UF_EVENT_STOP,0);
   a6676:	2004      	movs	r0, #4
   a6678:	2100      	movs	r1, #0
   a667a:	4b13      	ldr	r3, [pc, #76]	; (a66c8 <Cl_Rinse_DisinfStop+0x128>)
   a667c:	4798      	blx	r3
		sv_prop_stopmixing();
   a667e:	4b13      	ldr	r3, [pc, #76]	; (a66cc <Cl_Rinse_DisinfStop+0x12c>)
   a6680:	4798      	blx	r3
		//Cl_rinseretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
		cl_rinsestate = CL_RINSE_STATE_IDLE;
   a6682:	4b0a      	ldr	r3, [pc, #40]	; (a66ac <Cl_Rinse_DisinfStop+0x10c>)
   a6684:	2200      	movs	r2, #0
   a6686:	701a      	strb	r2, [r3, #0]
		Cl_rinseretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DISINF_STOPPED,&data,0);
   a6688:	1dbb      	adds	r3, r7, #6
   a668a:	2050      	movs	r0, #80	; 0x50
   a668c:	4619      	mov	r1, r3
   a668e:	2200      	movs	r2, #0
   a6690:	4b0f      	ldr	r3, [pc, #60]	; (a66d0 <Cl_Rinse_DisinfStop+0x130>)
   a6692:	4798      	blx	r3
   a6694:	4603      	mov	r3, r0
   a6696:	71fb      	strb	r3, [r7, #7]
	
		}
}
   a6698:	4618      	mov	r0, r3
   a669a:	3708      	adds	r7, #8
   a669c:	46bd      	mov	sp, r7
   a669e:	bd80      	pop	{r7, pc}
   a66a0:	0009b635 	.word	0x0009b635
   a66a4:	00082a35 	.word	0x00082a35
   a66a8:	000a5a15 	.word	0x000a5a15
   a66ac:	20071df2 	.word	0x20071df2
   a66b0:	0009b535 	.word	0x0009b535
   a66b4:	20071df4 	.word	0x20071df4
   a66b8:	20071df8 	.word	0x20071df8
   a66bc:	20071e04 	.word	0x20071e04
   a66c0:	20071e08 	.word	0x20071e08
   a66c4:	00082ee1 	.word	0x00082ee1
   a66c8:	00097499 	.word	0x00097499
   a66cc:	0009b7ed 	.word	0x0009b7ed
   a66d0:	0009d1e9 	.word	0x0009d1e9

000a66d4 <Cl_Rinse_StopRinse>:

Cl_ReturnCodeType Cl_Rinse_StopRinse(void)
{
   a66d4:	b580      	push	{r7, lr}
   a66d6:	b082      	sub	sp, #8
   a66d8:	af00      	add	r7, sp, #0
				Cl_ReturnCodeType Cl_rinseretcode = CL_OK;
   a66da:	2300      	movs	r3, #0
   a66dc:	71fb      	strb	r3, [r7, #7]
				Cl_Uint8Type data;
				
				sv_cntrl_setredalarm();
   a66de:	4b3e      	ldr	r3, [pc, #248]	; (a67d8 <Cl_Rinse_StopRinse+0x104>)
   a66e0:	4798      	blx	r3
				
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false );
   a66e2:	2001      	movs	r0, #1
   a66e4:	2100      	movs	r1, #0
   a66e6:	4b3d      	ldr	r3, [pc, #244]	; (a67dc <Cl_Rinse_StopRinse+0x108>)
   a66e8:	4798      	blx	r3
   a66ea:	4603      	mov	r3, r0
   a66ec:	71fb      	strb	r3, [r7, #7]
				//Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );
				//Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,false );
   a66ee:	203d      	movs	r0, #61	; 0x3d
   a66f0:	2100      	movs	r1, #0
   a66f2:	4b3a      	ldr	r3, [pc, #232]	; (a67dc <Cl_Rinse_StopRinse+0x108>)
   a66f4:	4798      	blx	r3
   a66f6:	4603      	mov	r3, r0
   a66f8:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,false );
   a66fa:	203e      	movs	r0, #62	; 0x3e
   a66fc:	2100      	movs	r1, #0
   a66fe:	4b37      	ldr	r3, [pc, #220]	; (a67dc <Cl_Rinse_StopRinse+0x108>)
   a6700:	4798      	blx	r3
   a6702:	4603      	mov	r3, r0
   a6704:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a6706:	200d      	movs	r0, #13
   a6708:	2100      	movs	r1, #0
   a670a:	4b34      	ldr	r3, [pc, #208]	; (a67dc <Cl_Rinse_StopRinse+0x108>)
   a670c:	4798      	blx	r3
   a670e:	4603      	mov	r3, r0
   a6710:	71fb      	strb	r3, [r7, #7]
				 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );
   a6712:	200c      	movs	r0, #12
   a6714:	2100      	movs	r1, #0
   a6716:	4b31      	ldr	r3, [pc, #196]	; (a67dc <Cl_Rinse_StopRinse+0x108>)
   a6718:	4798      	blx	r3
   a671a:	4603      	mov	r3, r0
   a671c:	71fb      	strb	r3, [r7, #7]
				 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a671e:	200d      	movs	r0, #13
   a6720:	2100      	movs	r1, #0
   a6722:	4b2e      	ldr	r3, [pc, #184]	; (a67dc <Cl_Rinse_StopRinse+0x108>)
   a6724:	4798      	blx	r3
   a6726:	4603      	mov	r3, r0
   a6728:	71fb      	strb	r3, [r7, #7]
				// 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a672a:	2029      	movs	r0, #41	; 0x29
   a672c:	2100      	movs	r1, #0
   a672e:	4b2b      	ldr	r3, [pc, #172]	; (a67dc <Cl_Rinse_StopRinse+0x108>)
   a6730:	4798      	blx	r3
   a6732:	4603      	mov	r3, r0
   a6734:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a6736:	202b      	movs	r0, #43	; 0x2b
   a6738:	2100      	movs	r1, #0
   a673a:	4b28      	ldr	r3, [pc, #160]	; (a67dc <Cl_Rinse_StopRinse+0x108>)
   a673c:	4798      	blx	r3
   a673e:	4603      	mov	r3, r0
   a6740:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a6742:	2003      	movs	r0, #3
   a6744:	2100      	movs	r1, #0
   a6746:	4b25      	ldr	r3, [pc, #148]	; (a67dc <Cl_Rinse_StopRinse+0x108>)
   a6748:	4798      	blx	r3
   a674a:	4603      	mov	r3, r0
   a674c:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a674e:	2004      	movs	r0, #4
   a6750:	2100      	movs	r1, #0
   a6752:	4b22      	ldr	r3, [pc, #136]	; (a67dc <Cl_Rinse_StopRinse+0x108>)
   a6754:	4798      	blx	r3
   a6756:	4603      	mov	r3, r0
   a6758:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(BC_ALARM,false);
   a675a:	201a      	movs	r0, #26
   a675c:	2100      	movs	r1, #0
   a675e:	4b1f      	ldr	r3, [pc, #124]	; (a67dc <Cl_Rinse_StopRinse+0x108>)
   a6760:	4798      	blx	r3
   a6762:	4603      	mov	r3, r0
   a6764:	71fb      	strb	r3, [r7, #7]
				
				Cl_Rinse_ResetAlertsforReassertion();
   a6766:	4b1e      	ldr	r3, [pc, #120]	; (a67e0 <Cl_Rinse_StopRinse+0x10c>)
   a6768:	4798      	blx	r3
				
				if(!((cl_rinsestate == CL_RINSE_STATE_IDLE ) || (cl_rinsestate == CL_RINSE_STATE_STOPPED ) ||(cl_rinsestate == CL_RINSE_STATE_CRITICAL_ALARM )  ))
   a676a:	4b1e      	ldr	r3, [pc, #120]	; (a67e4 <Cl_Rinse_StopRinse+0x110>)
   a676c:	781b      	ldrb	r3, [r3, #0]
   a676e:	2b00      	cmp	r3, #0
   a6770:	d02c      	beq.n	a67cc <Cl_Rinse_StopRinse+0xf8>
   a6772:	4b1c      	ldr	r3, [pc, #112]	; (a67e4 <Cl_Rinse_StopRinse+0x110>)
   a6774:	781b      	ldrb	r3, [r3, #0]
   a6776:	2b08      	cmp	r3, #8
   a6778:	d028      	beq.n	a67cc <Cl_Rinse_StopRinse+0xf8>
   a677a:	4b1a      	ldr	r3, [pc, #104]	; (a67e4 <Cl_Rinse_StopRinse+0x110>)
   a677c:	781b      	ldrb	r3, [r3, #0]
   a677e:	2b06      	cmp	r3, #6
   a6780:	d024      	beq.n	a67cc <Cl_Rinse_StopRinse+0xf8>
// 					}
// 					else{
// 						
					
				//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DOOR",4);
				sv_cntrl_activatevenousclamp();
   a6782:	4b19      	ldr	r3, [pc, #100]	; (a67e8 <Cl_Rinse_StopRinse+0x114>)
   a6784:	4798      	blx	r3
				Cl_Rinsesecondscounter = 0;
   a6786:	4b19      	ldr	r3, [pc, #100]	; (a67ec <Cl_Rinse_StopRinse+0x118>)
   a6788:	2200      	movs	r2, #0
   a678a:	601a      	str	r2, [r3, #0]
				Cl_RinseMinutescounter = 0;
   a678c:	4b18      	ldr	r3, [pc, #96]	; (a67f0 <Cl_Rinse_StopRinse+0x11c>)
   a678e:	2200      	movs	r2, #0
   a6790:	601a      	str	r2, [r3, #0]
				Cl_RinseTotalMinutescounter = 0;
   a6792:	4b18      	ldr	r3, [pc, #96]	; (a67f4 <Cl_Rinse_StopRinse+0x120>)
   a6794:	2200      	movs	r2, #0
   a6796:	601a      	str	r2, [r3, #0]
				Cl_RinsesTotalhourscounter = 0 ;
   a6798:	4b17      	ldr	r3, [pc, #92]	; (a67f8 <Cl_Rinse_StopRinse+0x124>)
   a679a:	2200      	movs	r2, #0
   a679c:	601a      	str	r2, [r3, #0]
				//Cl_rinseretcode = sv_cntrl_poweroffheater();
				Cl_bc_controller(BC_EVENT_STOP);
   a679e:	2005      	movs	r0, #5
   a67a0:	4b16      	ldr	r3, [pc, #88]	; (a67fc <Cl_Rinse_StopRinse+0x128>)
   a67a2:	4798      	blx	r3
				Cl_bc_controller(BC_EVENT_STOP_RINSE);
   a67a4:	200d      	movs	r0, #13
   a67a6:	4b15      	ldr	r3, [pc, #84]	; (a67fc <Cl_Rinse_StopRinse+0x128>)
   a67a8:	4798      	blx	r3
				cl_uf_controller(CL_UF_EVENT_STOP,0);
   a67aa:	2004      	movs	r0, #4
   a67ac:	2100      	movs	r1, #0
   a67ae:	4b14      	ldr	r3, [pc, #80]	; (a6800 <Cl_Rinse_StopRinse+0x12c>)
   a67b0:	4798      	blx	r3
				sv_prop_stopmixing();
   a67b2:	4b14      	ldr	r3, [pc, #80]	; (a6804 <Cl_Rinse_StopRinse+0x130>)
   a67b4:	4798      	blx	r3
				//Cl_rinseretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
				cl_rinsestate = CL_RINSE_STATE_IDLE;
   a67b6:	4b0b      	ldr	r3, [pc, #44]	; (a67e4 <Cl_Rinse_StopRinse+0x110>)
   a67b8:	2200      	movs	r2, #0
   a67ba:	701a      	strb	r2, [r3, #0]
				Cl_rinseretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_RINSE_STOPPED,&data,0);
   a67bc:	1dbb      	adds	r3, r7, #6
   a67be:	2022      	movs	r0, #34	; 0x22
   a67c0:	4619      	mov	r1, r3
   a67c2:	2200      	movs	r2, #0
   a67c4:	4b10      	ldr	r3, [pc, #64]	; (a6808 <Cl_Rinse_StopRinse+0x134>)
   a67c6:	4798      	blx	r3
   a67c8:	4603      	mov	r3, r0
   a67ca:	71fb      	strb	r3, [r7, #7]
//					}
					
				}
			
				return Cl_rinseretcode;
   a67cc:	79fb      	ldrb	r3, [r7, #7]
}
   a67ce:	4618      	mov	r0, r3
   a67d0:	3708      	adds	r7, #8
   a67d2:	46bd      	mov	sp, r7
   a67d4:	bd80      	pop	{r7, pc}
   a67d6:	bf00      	nop
   a67d8:	0009b635 	.word	0x0009b635
   a67dc:	00082a35 	.word	0x00082a35
   a67e0:	000a5a15 	.word	0x000a5a15
   a67e4:	20071df2 	.word	0x20071df2
   a67e8:	0009b535 	.word	0x0009b535
   a67ec:	20071df4 	.word	0x20071df4
   a67f0:	20071df8 	.word	0x20071df8
   a67f4:	20071e04 	.word	0x20071e04
   a67f8:	20071e08 	.word	0x20071e08
   a67fc:	00082ee1 	.word	0x00082ee1
   a6800:	00097499 	.word	0x00097499
   a6804:	0009b7ed 	.word	0x0009b7ed
   a6808:	0009d1e9 	.word	0x0009d1e9

000a680c <Cl_Standby_Controller>:
 
 extern Cl_AlarmThresholdType  Cl_alarmThresholdTable;
extern Cl_Uint32Type Treatdata[ID_MAX_TREAT_PARAM] ;

Cl_ReturnCodeType Cl_Standby_Controller(Cl_Mac_EventsType Cl_MacStandbyEvent)
{
   a680c:	b580      	push	{r7, lr}
   a680e:	b08a      	sub	sp, #40	; 0x28
   a6810:	af00      	add	r7, sp, #0
   a6812:	4603      	mov	r3, r0
   a6814:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType cl_stby_retval;
		Cl_Stby_Events cl_stdby_event;
		Cl_ConsoleTxCommandtype con_command = CON_TX_COMMAND_COMMAND_MAX;
   a6816:	2359      	movs	r3, #89	; 0x59
   a6818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		Cl_Uint8Type data =0;
   a681c:	2300      	movs	r3, #0
   a681e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		Cl_Uint8Type dataarray[4];
		ClStbyAlarmIdType ClstbyAlarmId;
						STBStateDatatype abfdata;
						Cl_Uint8Type abfdataarray[5] =  {0,0,0,0,0};
   a6822:	2300      	movs	r3, #0
   a6824:	743b      	strb	r3, [r7, #16]
   a6826:	2300      	movs	r3, #0
   a6828:	747b      	strb	r3, [r7, #17]
   a682a:	2300      	movs	r3, #0
   a682c:	74bb      	strb	r3, [r7, #18]
   a682e:	2300      	movs	r3, #0
   a6830:	74fb      	strb	r3, [r7, #19]
   a6832:	2300      	movs	r3, #0
   a6834:	753b      	strb	r3, [r7, #20]

		// dummy = Cl_MacStandbyEvent;

	//	cl_stby_translatemacevent( dummy, &cl_stdby_event);
		cl_stby_retval = cl_stby_translatemacevent( Cl_MacStandbyEvent, &cl_stdby_event);
   a6836:	79fa      	ldrb	r2, [r7, #7]
   a6838:	f107 0325 	add.w	r3, r7, #37	; 0x25
   a683c:	4610      	mov	r0, r2
   a683e:	4619      	mov	r1, r3
   a6840:	4ba8      	ldr	r3, [pc, #672]	; (a6ae4 <Cl_Standby_Controller+0x2d8>)
   a6842:	4798      	blx	r3
   a6844:	4603      	mov	r3, r0
   a6846:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		switch(cl_stbystate)
   a684a:	4ba7      	ldr	r3, [pc, #668]	; (a6ae8 <Cl_Standby_Controller+0x2dc>)
   a684c:	781b      	ldrb	r3, [r3, #0]
   a684e:	2b0a      	cmp	r3, #10
   a6850:	f200 84b4 	bhi.w	a71bc <Cl_Standby_Controller+0x9b0>
   a6854:	a201      	add	r2, pc, #4	; (adr r2, a685c <Cl_Standby_Controller+0x50>)
   a6856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a685a:	bf00      	nop
   a685c:	000a71bd 	.word	0x000a71bd
   a6860:	000a6889 	.word	0x000a6889
   a6864:	000a69f7 	.word	0x000a69f7
   a6868:	000a6cc1 	.word	0x000a6cc1
   a686c:	000a6e31 	.word	0x000a6e31
   a6870:	000a6f2f 	.word	0x000a6f2f
   a6874:	000a6fcd 	.word	0x000a6fcd
   a6878:	000a7069 	.word	0x000a7069
   a687c:	000a7107 	.word	0x000a7107
   a6880:	000a71bd 	.word	0x000a71bd
   a6884:	000a71bd 	.word	0x000a71bd
		{
			case CL_STBY_STATE_INIT:
		//	printf("K\n");
			break;
			case CL_STBY_STATE_IDLE:
				switch (cl_stdby_event)
   a6888:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a688c:	2b10      	cmp	r3, #16
   a688e:	d04b      	beq.n	a6928 <Cl_Standby_Controller+0x11c>
   a6890:	2b10      	cmp	r3, #16
   a6892:	dc06      	bgt.n	a68a2 <Cl_Standby_Controller+0x96>
   a6894:	2b0e      	cmp	r3, #14
   a6896:	d037      	beq.n	a6908 <Cl_Standby_Controller+0xfc>
   a6898:	2b0e      	cmp	r3, #14
   a689a:	dc3d      	bgt.n	a6918 <Cl_Standby_Controller+0x10c>
   a689c:	2b01      	cmp	r3, #1
   a689e:	d01d      	beq.n	a68dc <Cl_Standby_Controller+0xd0>
				
				cl_stdby_event == EVENT_STBY_NULL;
				break;
				
				default:
				break;	
   a68a0:	e0a8      	b.n	a69f4 <Cl_Standby_Controller+0x1e8>
		{
			case CL_STBY_STATE_INIT:
		//	printf("K\n");
			break;
			case CL_STBY_STATE_IDLE:
				switch (cl_stdby_event)
   a68a2:	2b5b      	cmp	r3, #91	; 0x5b
   a68a4:	d05b      	beq.n	a695e <Cl_Standby_Controller+0x152>
   a68a6:	2b5c      	cmp	r3, #92	; 0x5c
   a68a8:	d07f      	beq.n	a69aa <Cl_Standby_Controller+0x19e>
   a68aa:	2b11      	cmp	r3, #17
   a68ac:	d000      	beq.n	a68b0 <Cl_Standby_Controller+0xa4>
				
				cl_stdby_event == EVENT_STBY_NULL;
				break;
				
				default:
				break;	
   a68ae:	e0a1      	b.n	a69f4 <Cl_Standby_Controller+0x1e8>
				{
					
					
				case EVENT_STBY_CLR_ALARM :
				
				con_command = CON_TX_COMMAND_ALARM_CLEARED;
   a68b0:	2351      	movs	r3, #81	; 0x51
   a68b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a68b6:	2301      	movs	r3, #1
   a68b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						Cl_SendDatatoconsole(con_command,&data,0);
   a68bc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a68c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
   a68c4:	4610      	mov	r0, r2
   a68c6:	4619      	mov	r1, r3
   a68c8:	2200      	movs	r2, #0
   a68ca:	4b88      	ldr	r3, [pc, #544]	; (a6aec <Cl_Standby_Controller+0x2e0>)
   a68cc:	4798      	blx	r3
						
										sv_cntrl_resetyellowalarm();
   a68ce:	4b88      	ldr	r3, [pc, #544]	; (a6af0 <Cl_Standby_Controller+0x2e4>)
   a68d0:	4798      	blx	r3
										sv_cntrl_resetredalarm();
   a68d2:	4b88      	ldr	r3, [pc, #544]	; (a6af4 <Cl_Standby_Controller+0x2e8>)
   a68d4:	4798      	blx	r3
										sv_cntrl_nobuzzer();
   a68d6:	4b88      	ldr	r3, [pc, #544]	; (a6af8 <Cl_Standby_Controller+0x2ec>)
   a68d8:	4798      	blx	r3
										
				
				
				break;	
   a68da:	e08b      	b.n	a69f4 <Cl_Standby_Controller+0x1e8>
				case EVENT_STBY_ENTER_STANDBY:
				
			//	cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , true );
			//	cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , true );
												
				con_command = CON_TX_COMMAND_SYSDATA;
   a68dc:	2316      	movs	r3, #22
   a68de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
				dataarray[0] = CON_TX_PARAM_SYS_SOFT_VERSION;
   a68e2:	2311      	movs	r3, #17
   a68e4:	f887 3020 	strb.w	r3, [r7, #32]
			//	cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &dataarray[1]);
			//	cl_stby_retval = cl_testgetversion(&dataarray[1]);								
				//Reset the  OPENFILL time count
				
				dataarray[1] = SYS_VER;
   a68e8:	230e      	movs	r3, #14
   a68ea:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a68ee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a68f2:	f107 0320 	add.w	r3, r7, #32
   a68f6:	4610      	mov	r0, r2
   a68f8:	4619      	mov	r1, r3
   a68fa:	2202      	movs	r2, #2
   a68fc:	4b7b      	ldr	r3, [pc, #492]	; (a6aec <Cl_Standby_Controller+0x2e0>)
   a68fe:	4798      	blx	r3
   a6900:	4603      	mov	r3, r0
   a6902:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				
		//		cl_stbystate = CL_STBY_STATE_V1;
				break;
   a6906:	e075      	b.n	a69f4 <Cl_Standby_Controller+0x1e8>
				case EVENT_STBY_SET_BLDPMP_ON:
				prev_bpstate = 1;
   a6908:	4b7c      	ldr	r3, [pc, #496]	; (a6afc <Cl_Standby_Controller+0x2f0>)
   a690a:	2201      	movs	r2, #1
   a690c:	801a      	strh	r2, [r3, #0]
					cl_bp_controller(CL_BP_EVENT_START,0);
   a690e:	2002      	movs	r0, #2
   a6910:	2100      	movs	r1, #0
   a6912:	4b7b      	ldr	r3, [pc, #492]	; (a6b00 <Cl_Standby_Controller+0x2f4>)
   a6914:	4798      	blx	r3
				break;
   a6916:	e06d      	b.n	a69f4 <Cl_Standby_Controller+0x1e8>
				case EVENT_STBY_SET_BLDPMP_OFF:
				prev_bpstate = 0;
   a6918:	4b78      	ldr	r3, [pc, #480]	; (a6afc <Cl_Standby_Controller+0x2f0>)
   a691a:	2200      	movs	r2, #0
   a691c:	801a      	strh	r2, [r3, #0]
					cl_bp_controller(CL_BP_EVENT_STOP,0);
   a691e:	2004      	movs	r0, #4
   a6920:	2100      	movs	r1, #0
   a6922:	4b77      	ldr	r3, [pc, #476]	; (a6b00 <Cl_Standby_Controller+0x2f4>)
   a6924:	4798      	blx	r3
				break;
   a6926:	e065      	b.n	a69f4 <Cl_Standby_Controller+0x1e8>
				case EVENT_STBY__SET_BP_RATE:
					if(Cl_ConsoleRxMsg.msgready == true)
   a6928:	4b76      	ldr	r3, [pc, #472]	; (a6b04 <Cl_Standby_Controller+0x2f8>)
   a692a:	7e1b      	ldrb	r3, [r3, #24]
   a692c:	2b00      	cmp	r3, #0
   a692e:	d015      	beq.n	a695c <Cl_Standby_Controller+0x150>
					{
						
						
			
						cl_Datastreamtype cl_temp  ;
						cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a6930:	4b74      	ldr	r3, [pc, #464]	; (a6b04 <Cl_Standby_Controller+0x2f8>)
   a6932:	791b      	ldrb	r3, [r3, #4]
   a6934:	733b      	strb	r3, [r7, #12]
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   a6936:	4b73      	ldr	r3, [pc, #460]	; (a6b04 <Cl_Standby_Controller+0x2f8>)
   a6938:	795b      	ldrb	r3, [r3, #5]
   a693a:	737b      	strb	r3, [r7, #13]
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   a693c:	4b71      	ldr	r3, [pc, #452]	; (a6b04 <Cl_Standby_Controller+0x2f8>)
   a693e:	799b      	ldrb	r3, [r3, #6]
   a6940:	73bb      	strb	r3, [r7, #14]
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   a6942:	4b70      	ldr	r3, [pc, #448]	; (a6b04 <Cl_Standby_Controller+0x2f8>)
   a6944:	79db      	ldrb	r3, [r3, #7]
   a6946:	73fb      	strb	r3, [r7, #15]
						
						Treatdata[ID_bloodrate] = cl_temp.Twobyte;
   a6948:	89bb      	ldrh	r3, [r7, #12]
   a694a:	461a      	mov	r2, r3
   a694c:	4b6e      	ldr	r3, [pc, #440]	; (a6b08 <Cl_Standby_Controller+0x2fc>)
   a694e:	63da      	str	r2, [r3, #60]	; 0x3c
						
						cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   a6950:	89bb      	ldrh	r3, [r7, #12]
   a6952:	2001      	movs	r0, #1
   a6954:	4619      	mov	r1, r3
   a6956:	4b6a      	ldr	r3, [pc, #424]	; (a6b00 <Cl_Standby_Controller+0x2f4>)
   a6958:	4798      	blx	r3
						
						
					}
					cl_stdby_event == EVENT_STBY_NULL;
				break;
   a695a:	e04b      	b.n	a69f4 <Cl_Standby_Controller+0x1e8>
   a695c:	e04a      	b.n	a69f4 <Cl_Standby_Controller+0x1e8>
				
				case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
				
				if(Treatdata[ID_bloodrate] <= 450){
   a695e:	4b6a      	ldr	r3, [pc, #424]	; (a6b08 <Cl_Standby_Controller+0x2fc>)
   a6960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a6962:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
   a6966:	d81f      	bhi.n	a69a8 <Cl_Standby_Controller+0x19c>
				
				Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] + 10;
   a6968:	4b67      	ldr	r3, [pc, #412]	; (a6b08 <Cl_Standby_Controller+0x2fc>)
   a696a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a696c:	330a      	adds	r3, #10
   a696e:	4a66      	ldr	r2, [pc, #408]	; (a6b08 <Cl_Standby_Controller+0x2fc>)
   a6970:	63d3      	str	r3, [r2, #60]	; 0x3c
				cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   a6972:	4b65      	ldr	r3, [pc, #404]	; (a6b08 <Cl_Standby_Controller+0x2fc>)
   a6974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a6976:	2001      	movs	r0, #1
   a6978:	4619      	mov	r1, r3
   a697a:	4b61      	ldr	r3, [pc, #388]	; (a6b00 <Cl_Standby_Controller+0x2f4>)
   a697c:	4798      	blx	r3
				
				// send blood rate data to console
				
				
				abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   a697e:	230f      	movs	r3, #15
   a6980:	743b      	strb	r3, [r7, #16]
				abfdata.fourbytedata = Treatdata[ID_bloodrate];
   a6982:	4b61      	ldr	r3, [pc, #388]	; (a6b08 <Cl_Standby_Controller+0x2fc>)
   a6984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a6986:	61bb      	str	r3, [r7, #24]
				abfdataarray[1] = abfdata.bytedata[0];
   a6988:	7e3b      	ldrb	r3, [r7, #24]
   a698a:	747b      	strb	r3, [r7, #17]
				abfdataarray[2] = abfdata.bytedata[1];
   a698c:	7e7b      	ldrb	r3, [r7, #25]
   a698e:	74bb      	strb	r3, [r7, #18]
				abfdataarray[3] = abfdata.bytedata[2];
   a6990:	7ebb      	ldrb	r3, [r7, #26]
   a6992:	74fb      	strb	r3, [r7, #19]
				abfdataarray[4] = abfdata.bytedata[3];
   a6994:	7efb      	ldrb	r3, [r7, #27]
   a6996:	753b      	strb	r3, [r7, #20]
				
				Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   a6998:	f107 0310 	add.w	r3, r7, #16
   a699c:	202a      	movs	r0, #42	; 0x2a
   a699e:	4619      	mov	r1, r3
   a69a0:	2205      	movs	r2, #5
   a69a2:	4b52      	ldr	r3, [pc, #328]	; (a6aec <Cl_Standby_Controller+0x2e0>)
   a69a4:	4798      	blx	r3
				
				}
				
				cl_stdby_event == EVENT_STBY_NULL;
				break;
   a69a6:	e025      	b.n	a69f4 <Cl_Standby_Controller+0x1e8>
   a69a8:	e024      	b.n	a69f4 <Cl_Standby_Controller+0x1e8>
				
				case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
				
				if(Treatdata[ID_bloodrate] >= 100){
   a69aa:	4b57      	ldr	r3, [pc, #348]	; (a6b08 <Cl_Standby_Controller+0x2fc>)
   a69ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a69ae:	2b63      	cmp	r3, #99	; 0x63
   a69b0:	d91f      	bls.n	a69f2 <Cl_Standby_Controller+0x1e6>
				
				Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] - 10;
   a69b2:	4b55      	ldr	r3, [pc, #340]	; (a6b08 <Cl_Standby_Controller+0x2fc>)
   a69b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a69b6:	3b0a      	subs	r3, #10
   a69b8:	4a53      	ldr	r2, [pc, #332]	; (a6b08 <Cl_Standby_Controller+0x2fc>)
   a69ba:	63d3      	str	r3, [r2, #60]	; 0x3c
				cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   a69bc:	4b52      	ldr	r3, [pc, #328]	; (a6b08 <Cl_Standby_Controller+0x2fc>)
   a69be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a69c0:	2001      	movs	r0, #1
   a69c2:	4619      	mov	r1, r3
   a69c4:	4b4e      	ldr	r3, [pc, #312]	; (a6b00 <Cl_Standby_Controller+0x2f4>)
   a69c6:	4798      	blx	r3
				
				
				abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   a69c8:	230f      	movs	r3, #15
   a69ca:	743b      	strb	r3, [r7, #16]
				abfdata.fourbytedata = Treatdata[ID_bloodrate];
   a69cc:	4b4e      	ldr	r3, [pc, #312]	; (a6b08 <Cl_Standby_Controller+0x2fc>)
   a69ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a69d0:	61bb      	str	r3, [r7, #24]
				abfdataarray[1] = abfdata.bytedata[0];
   a69d2:	7e3b      	ldrb	r3, [r7, #24]
   a69d4:	747b      	strb	r3, [r7, #17]
				abfdataarray[2] = abfdata.bytedata[1];
   a69d6:	7e7b      	ldrb	r3, [r7, #25]
   a69d8:	74bb      	strb	r3, [r7, #18]
				abfdataarray[3] = abfdata.bytedata[2];
   a69da:	7ebb      	ldrb	r3, [r7, #26]
   a69dc:	74fb      	strb	r3, [r7, #19]
				abfdataarray[4] = abfdata.bytedata[3];
   a69de:	7efb      	ldrb	r3, [r7, #27]
   a69e0:	753b      	strb	r3, [r7, #20]
				
				Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   a69e2:	f107 0310 	add.w	r3, r7, #16
   a69e6:	202a      	movs	r0, #42	; 0x2a
   a69e8:	4619      	mov	r1, r3
   a69ea:	2205      	movs	r2, #5
   a69ec:	4b3f      	ldr	r3, [pc, #252]	; (a6aec <Cl_Standby_Controller+0x2e0>)
   a69ee:	4798      	blx	r3
				}
				
				cl_stdby_event == EVENT_STBY_NULL;
				break;
   a69f0:	e7ff      	b.n	a69f2 <Cl_Standby_Controller+0x1e6>
   a69f2:	bf00      	nop
				default:
				break;	
				}


				break;
   a69f4:	e3e3      	b.n	a71be <Cl_Standby_Controller+0x9b2>
			break;
			case CL_STBY_STATE_STANDBY_RINSE:
			//printf("J\n");
			switch (cl_stdby_event)
   a69f6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a69fa:	3b01      	subs	r3, #1
   a69fc:	2b0c      	cmp	r3, #12
   a69fe:	f200 815d 	bhi.w	a6cbc <Cl_Standby_Controller+0x4b0>
   a6a02:	a201      	add	r2, pc, #4	; (adr r2, a6a08 <Cl_Standby_Controller+0x1fc>)
   a6a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a6a08:	000a6c71 	.word	0x000a6c71
   a6a0c:	000a6cbd 	.word	0x000a6cbd
   a6a10:	000a6cbd 	.word	0x000a6cbd
   a6a14:	000a6cbd 	.word	0x000a6cbd
   a6a18:	000a6cbd 	.word	0x000a6cbd
   a6a1c:	000a6c99 	.word	0x000a6c99
   a6a20:	000a6caf 	.word	0x000a6caf
   a6a24:	000a6cbd 	.word	0x000a6cbd
   a6a28:	000a6c79 	.word	0x000a6c79
   a6a2c:	000a6a45 	.word	0x000a6a45
   a6a30:	000a6b11 	.word	0x000a6b11
   a6a34:	000a6a3d 	.word	0x000a6a3d
   a6a38:	000a6cbd 	.word	0x000a6cbd
			{
					case EVENT_STBY_START_RINSE:
					//check for alarms and then notify if needed
						cl_stbystate = CL_STBY_STATE_IDLE;
   a6a3c:	4b2a      	ldr	r3, [pc, #168]	; (a6ae8 <Cl_Standby_Controller+0x2dc>)
   a6a3e:	2201      	movs	r2, #1
   a6a40:	701a      	strb	r2, [r3, #0]
					break;
   a6a42:	e13c      	b.n	a6cbe <Cl_Standby_Controller+0x4b2>
					case EVENT_STBY_DIALYSIS_PREP:
					// check for alarms and change hardware status as required before going to dialysis prepration
					break;
					case EVENT_STBY_GET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   a6a44:	4b2f      	ldr	r3, [pc, #188]	; (a6b04 <Cl_Standby_Controller+0x2f8>)
   a6a46:	7e1b      	ldrb	r3, [r3, #24]
   a6a48:	2b00      	cmp	r3, #0
   a6a4a:	d04a      	beq.n	a6ae2 <Cl_Standby_Controller+0x2d6>
					{
					
						switch(Cl_ConsoleRxMsg.data.byte[0])
   a6a4c:	4b2d      	ldr	r3, [pc, #180]	; (a6b04 <Cl_Standby_Controller+0x2f8>)
   a6a4e:	791b      	ldrb	r3, [r3, #4]
   a6a50:	2b01      	cmp	r3, #1
   a6a52:	d002      	beq.n	a6a5a <Cl_Standby_Controller+0x24e>
   a6a54:	2b21      	cmp	r3, #33	; 0x21
   a6a56:	d01d      	beq.n	a6a94 <Cl_Standby_Controller+0x288>
									cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
									cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);

							break;
							default:
							break;
   a6a58:	e043      	b.n	a6ae2 <Cl_Standby_Controller+0x2d6>
						switch(Cl_ConsoleRxMsg.data.byte[0])
						{
							case CON_RX_PARAM_DATA_RINSE_STATUS:
								//	cl_wait(10);
													
									con_command = CON_TX_COMMAND_SYSDATA;
   a6a5a:	2316      	movs	r3, #22
   a6a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
									dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a6a60:	2301      	movs	r3, #1
   a6a62:	f887 3020 	strb.w	r3, [r7, #32]
									cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a6a66:	f107 0320 	add.w	r3, r7, #32
   a6a6a:	3301      	adds	r3, #1
   a6a6c:	2001      	movs	r0, #1
   a6a6e:	4619      	mov	r1, r3
   a6a70:	4b26      	ldr	r3, [pc, #152]	; (a6b0c <Cl_Standby_Controller+0x300>)
   a6a72:	4798      	blx	r3
   a6a74:	4603      	mov	r3, r0
   a6a76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a6a7a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a6a7e:	f107 0320 	add.w	r3, r7, #32
   a6a82:	4610      	mov	r0, r2
   a6a84:	4619      	mov	r1, r3
   a6a86:	2202      	movs	r2, #2
   a6a88:	4b18      	ldr	r3, [pc, #96]	; (a6aec <Cl_Standby_Controller+0x2e0>)
   a6a8a:	4798      	blx	r3
   a6a8c:	4603      	mov	r3, r0
   a6a8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									//cl_wait(100);
							break;
   a6a92:	e026      	b.n	a6ae2 <Cl_Standby_Controller+0x2d6>
						{
							case CON_RX_PARAM_DATA_DISINF_STATUS:
								//	cl_wait(10);
													
									con_command = CON_TX_COMMAND_SYSDATA;									
   a6a94:	2316      	movs	r3, #22
   a6a96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;	
   a6a9a:	2323      	movs	r3, #35	; 0x23
   a6a9c:	f887 3020 	strb.w	r3, [r7, #32]
									cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);																		
   a6aa0:	f107 0320 	add.w	r3, r7, #32
   a6aa4:	3301      	adds	r3, #1
   a6aa6:	2001      	movs	r0, #1
   a6aa8:	4619      	mov	r1, r3
   a6aaa:	4b18      	ldr	r3, [pc, #96]	; (a6b0c <Cl_Standby_Controller+0x300>)
   a6aac:	4798      	blx	r3
   a6aae:	4603      	mov	r3, r0
   a6ab0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   a6ab4:	f107 0320 	add.w	r3, r7, #32
   a6ab8:	3301      	adds	r3, #1
   a6aba:	2028      	movs	r0, #40	; 0x28
   a6abc:	4619      	mov	r1, r3
   a6abe:	4b13      	ldr	r3, [pc, #76]	; (a6b0c <Cl_Standby_Controller+0x300>)
   a6ac0:	4798      	blx	r3
   a6ac2:	4603      	mov	r3, r0
   a6ac4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a6ac8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a6acc:	f107 0320 	add.w	r3, r7, #32
   a6ad0:	4610      	mov	r0, r2
   a6ad2:	4619      	mov	r1, r3
   a6ad4:	2202      	movs	r2, #2
   a6ad6:	4b05      	ldr	r3, [pc, #20]	; (a6aec <Cl_Standby_Controller+0x2e0>)
   a6ad8:	4798      	blx	r3
   a6ada:	4603      	mov	r3, r0
   a6adc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

							break;
   a6ae0:	bf00      	nop
							break;
						}

					}
				}
				break;
   a6ae2:	e0ec      	b.n	a6cbe <Cl_Standby_Controller+0x4b2>
   a6ae4:	000a71d5 	.word	0x000a71d5
   a6ae8:	20070f94 	.word	0x20070f94
   a6aec:	0009d1e9 	.word	0x0009d1e9
   a6af0:	0009b699 	.word	0x0009b699
   a6af4:	0009b685 	.word	0x0009b685
   a6af8:	0009b6c1 	.word	0x0009b6c1
   a6afc:	20071ab0 	.word	0x20071ab0
   a6b00:	00094325 	.word	0x00094325
   a6b04:	200725bc 	.word	0x200725bc
   a6b08:	20072880 	.word	0x20072880
   a6b0c:	0009bcdd 	.word	0x0009bcdd
				
				case EVENT_STBY_SET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   a6b10:	4bb3      	ldr	r3, [pc, #716]	; (a6de0 <Cl_Standby_Controller+0x5d4>)
   a6b12:	7e1b      	ldrb	r3, [r3, #24]
   a6b14:	2b00      	cmp	r3, #0
   a6b16:	f000 80aa 	beq.w	a6c6e <Cl_Standby_Controller+0x462>
				{
					cl_Datastreamtype cl_temp  ;
					cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   a6b1a:	4bb1      	ldr	r3, [pc, #708]	; (a6de0 <Cl_Standby_Controller+0x5d4>)
   a6b1c:	795b      	ldrb	r3, [r3, #5]
   a6b1e:	723b      	strb	r3, [r7, #8]
					cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   a6b20:	4baf      	ldr	r3, [pc, #700]	; (a6de0 <Cl_Standby_Controller+0x5d4>)
   a6b22:	799b      	ldrb	r3, [r3, #6]
   a6b24:	727b      	strb	r3, [r7, #9]
					cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   a6b26:	4bae      	ldr	r3, [pc, #696]	; (a6de0 <Cl_Standby_Controller+0x5d4>)
   a6b28:	79db      	ldrb	r3, [r3, #7]
   a6b2a:	72bb      	strb	r3, [r7, #10]
					cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   a6b2c:	4bac      	ldr	r3, [pc, #688]	; (a6de0 <Cl_Standby_Controller+0x5d4>)
   a6b2e:	7a1b      	ldrb	r3, [r3, #8]
   a6b30:	72fb      	strb	r3, [r7, #11]
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
   a6b32:	4bab      	ldr	r3, [pc, #684]	; (a6de0 <Cl_Standby_Controller+0x5d4>)
   a6b34:	791b      	ldrb	r3, [r3, #4]
   a6b36:	3b05      	subs	r3, #5
   a6b38:	2b20      	cmp	r3, #32
   a6b3a:	f200 8097 	bhi.w	a6c6c <Cl_Standby_Controller+0x460>
   a6b3e:	a201      	add	r2, pc, #4	; (adr r2, a6b44 <Cl_Standby_Controller+0x338>)
   a6b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a6b44:	000a6c6d 	.word	0x000a6c6d
   a6b48:	000a6c6d 	.word	0x000a6c6d
   a6b4c:	000a6c6d 	.word	0x000a6c6d
   a6b50:	000a6c6d 	.word	0x000a6c6d
   a6b54:	000a6c6d 	.word	0x000a6c6d
   a6b58:	000a6c6d 	.word	0x000a6c6d
   a6b5c:	000a6c6d 	.word	0x000a6c6d
   a6b60:	000a6c6d 	.word	0x000a6c6d
   a6b64:	000a6c6d 	.word	0x000a6c6d
   a6b68:	000a6c6d 	.word	0x000a6c6d
   a6b6c:	000a6c6d 	.word	0x000a6c6d
   a6b70:	000a6c6d 	.word	0x000a6c6d
   a6b74:	000a6c6d 	.word	0x000a6c6d
   a6b78:	000a6c6d 	.word	0x000a6c6d
   a6b7c:	000a6c6d 	.word	0x000a6c6d
   a6b80:	000a6c6d 	.word	0x000a6c6d
   a6b84:	000a6c6d 	.word	0x000a6c6d
   a6b88:	000a6c6d 	.word	0x000a6c6d
   a6b8c:	000a6c6d 	.word	0x000a6c6d
   a6b90:	000a6bc9 	.word	0x000a6bc9
   a6b94:	000a6be1 	.word	0x000a6be1
   a6b98:	000a6bf9 	.word	0x000a6bf9
   a6b9c:	000a6c09 	.word	0x000a6c09
   a6ba0:	000a6c19 	.word	0x000a6c19
   a6ba4:	000a6c29 	.word	0x000a6c29
   a6ba8:	000a6c6d 	.word	0x000a6c6d
   a6bac:	000a6c6d 	.word	0x000a6c6d
   a6bb0:	000a6c6d 	.word	0x000a6c6d
   a6bb4:	000a6c6d 	.word	0x000a6c6d
   a6bb8:	000a6c39 	.word	0x000a6c39
   a6bbc:	000a6c43 	.word	0x000a6c43
   a6bc0:	000a6c4d 	.word	0x000a6c4d
   a6bc4:	000a6c5d 	.word	0x000a6c5d
						case ID_bloodratereturn:
						break;
						case ID_bloodratetreat:
						break;
						case ID_tempulimit:
						Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   a6bc8:	68bb      	ldr	r3, [r7, #8]
   a6bca:	4a86      	ldr	r2, [pc, #536]	; (a6de4 <Cl_Standby_Controller+0x5d8>)
   a6bcc:	fba2 2303 	umull	r2, r3, r2, r3
   a6bd0:	08da      	lsrs	r2, r3, #3
   a6bd2:	4b85      	ldr	r3, [pc, #532]	; (a6de8 <Cl_Standby_Controller+0x5dc>)
   a6bd4:	4610      	mov	r0, r2
   a6bd6:	4798      	blx	r3
   a6bd8:	4602      	mov	r2, r0
   a6bda:	4b84      	ldr	r3, [pc, #528]	; (a6dec <Cl_Standby_Controller+0x5e0>)
   a6bdc:	649a      	str	r2, [r3, #72]	; 0x48
						break;
   a6bde:	e046      	b.n	a6c6e <Cl_Standby_Controller+0x462>
						case ID_templlimit:
						Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   a6be0:	68bb      	ldr	r3, [r7, #8]
   a6be2:	4a80      	ldr	r2, [pc, #512]	; (a6de4 <Cl_Standby_Controller+0x5d8>)
   a6be4:	fba2 2303 	umull	r2, r3, r2, r3
   a6be8:	08da      	lsrs	r2, r3, #3
   a6bea:	4b7f      	ldr	r3, [pc, #508]	; (a6de8 <Cl_Standby_Controller+0x5dc>)
   a6bec:	4610      	mov	r0, r2
   a6bee:	4798      	blx	r3
   a6bf0:	4602      	mov	r2, r0
   a6bf2:	4b7e      	ldr	r3, [pc, #504]	; (a6dec <Cl_Standby_Controller+0x5e0>)
   a6bf4:	64da      	str	r2, [r3, #76]	; 0x4c
						break;
   a6bf6:	e03a      	b.n	a6c6e <Cl_Standby_Controller+0x462>
						case ID_tmpllimit:
						Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   a6bf8:	68ba      	ldr	r2, [r7, #8]
   a6bfa:	4b7b      	ldr	r3, [pc, #492]	; (a6de8 <Cl_Standby_Controller+0x5dc>)
   a6bfc:	4610      	mov	r0, r2
   a6bfe:	4798      	blx	r3
   a6c00:	4602      	mov	r2, r0
   a6c02:	4b7a      	ldr	r3, [pc, #488]	; (a6dec <Cl_Standby_Controller+0x5e0>)
   a6c04:	635a      	str	r2, [r3, #52]	; 0x34
						break;
   a6c06:	e032      	b.n	a6c6e <Cl_Standby_Controller+0x462>
						case ID_tmpulimit:
						Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   a6c08:	68ba      	ldr	r2, [r7, #8]
   a6c0a:	4b77      	ldr	r3, [pc, #476]	; (a6de8 <Cl_Standby_Controller+0x5dc>)
   a6c0c:	4610      	mov	r0, r2
   a6c0e:	4798      	blx	r3
   a6c10:	4602      	mov	r2, r0
   a6c12:	4b76      	ldr	r3, [pc, #472]	; (a6dec <Cl_Standby_Controller+0x5e0>)
   a6c14:	631a      	str	r2, [r3, #48]	; 0x30
						break;
   a6c16:	e02a      	b.n	a6c6e <Cl_Standby_Controller+0x462>
						case ID_vptllimit:
						Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   a6c18:	68ba      	ldr	r2, [r7, #8]
   a6c1a:	4b73      	ldr	r3, [pc, #460]	; (a6de8 <Cl_Standby_Controller+0x5dc>)
   a6c1c:	4610      	mov	r0, r2
   a6c1e:	4798      	blx	r3
   a6c20:	4602      	mov	r2, r0
   a6c22:	4b72      	ldr	r3, [pc, #456]	; (a6dec <Cl_Standby_Controller+0x5e0>)
   a6c24:	615a      	str	r2, [r3, #20]
						break;
   a6c26:	e022      	b.n	a6c6e <Cl_Standby_Controller+0x462>
						case ID_vptulimit:
						Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   a6c28:	68ba      	ldr	r2, [r7, #8]
   a6c2a:	4b6f      	ldr	r3, [pc, #444]	; (a6de8 <Cl_Standby_Controller+0x5dc>)
   a6c2c:	4610      	mov	r0, r2
   a6c2e:	4798      	blx	r3
   a6c30:	4602      	mov	r2, r0
   a6c32:	4b6e      	ldr	r3, [pc, #440]	; (a6dec <Cl_Standby_Controller+0x5e0>)
   a6c34:	611a      	str	r2, [r3, #16]
						break;
   a6c36:	e01a      	b.n	a6c6e <Cl_Standby_Controller+0x462>
						break;
						case ID_dflowllimit:
						case ID_dflowulimit:
						break;
						case ID_condllimit:
						Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   a6c38:	68bb      	ldr	r3, [r7, #8]
   a6c3a:	b29a      	uxth	r2, r3
   a6c3c:	4b6b      	ldr	r3, [pc, #428]	; (a6dec <Cl_Standby_Controller+0x5e0>)
   a6c3e:	801a      	strh	r2, [r3, #0]
						break;
   a6c40:	e015      	b.n	a6c6e <Cl_Standby_Controller+0x462>
						case ID_condulimit:
						Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   a6c42:	68bb      	ldr	r3, [r7, #8]
   a6c44:	b29a      	uxth	r2, r3
   a6c46:	4b69      	ldr	r3, [pc, #420]	; (a6dec <Cl_Standby_Controller+0x5e0>)
   a6c48:	805a      	strh	r2, [r3, #2]
						break;
   a6c4a:	e010      	b.n	a6c6e <Cl_Standby_Controller+0x462>
						case ID_aptllimit:
						Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   a6c4c:	68ba      	ldr	r2, [r7, #8]
   a6c4e:	4b66      	ldr	r3, [pc, #408]	; (a6de8 <Cl_Standby_Controller+0x5dc>)
   a6c50:	4610      	mov	r0, r2
   a6c52:	4798      	blx	r3
   a6c54:	4602      	mov	r2, r0
   a6c56:	4b65      	ldr	r3, [pc, #404]	; (a6dec <Cl_Standby_Controller+0x5e0>)
   a6c58:	60da      	str	r2, [r3, #12]
						break;
   a6c5a:	e008      	b.n	a6c6e <Cl_Standby_Controller+0x462>
						case ID_aptulimit:
						Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   a6c5c:	68ba      	ldr	r2, [r7, #8]
   a6c5e:	4b62      	ldr	r3, [pc, #392]	; (a6de8 <Cl_Standby_Controller+0x5dc>)
   a6c60:	4610      	mov	r0, r2
   a6c62:	4798      	blx	r3
   a6c64:	4602      	mov	r2, r0
   a6c66:	4b61      	ldr	r3, [pc, #388]	; (a6dec <Cl_Standby_Controller+0x5e0>)
   a6c68:	609a      	str	r2, [r3, #8]
						break;
   a6c6a:	e000      	b.n	a6c6e <Cl_Standby_Controller+0x462>

						default:break;
   a6c6c:	bf00      	nop
					}
				}
				break;
   a6c6e:	e026      	b.n	a6cbe <Cl_Standby_Controller+0x4b2>
				case EVENT_STBY_ENTER_STANDBY:
				
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , true );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , true );
				
				cl_stbystate = CL_STBY_STATE_IDLE;
   a6c70:	4b5f      	ldr	r3, [pc, #380]	; (a6df0 <Cl_Standby_Controller+0x5e4>)
   a6c72:	2201      	movs	r2, #1
   a6c74:	701a      	strb	r2, [r3, #0]

				break;
   a6c76:	e022      	b.n	a6cbe <Cl_Standby_Controller+0x4b2>
				//Activate V1 time count
				//change state to V1
				// send update to console
				//Cl_SendDatatoconsole();
				//command = CON_TX_HELLO;
				con_command = CON_TX_COMMAND_ALARM;
   a6c78:	2307      	movs	r3, #7
   a6c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , false );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , false );
				cl_stby_retval = Cl_SendDatatoconsole(con_command,&data,0);
   a6c7e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a6c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
   a6c86:	4610      	mov	r0, r2
   a6c88:	4619      	mov	r1, r3
   a6c8a:	2200      	movs	r2, #0
   a6c8c:	4b59      	ldr	r3, [pc, #356]	; (a6df4 <Cl_Standby_Controller+0x5e8>)
   a6c8e:	4798      	blx	r3
   a6c90:	4603      	mov	r3, r0
   a6c92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

				break;
   a6c96:	e012      	b.n	a6cbe <Cl_Standby_Controller+0x4b2>
				case	EVENT_STBY_TICK_SECOND:
				Cl_StbRinsesecondscounter++;
   a6c98:	4b57      	ldr	r3, [pc, #348]	; (a6df8 <Cl_Standby_Controller+0x5ec>)
   a6c9a:	681b      	ldr	r3, [r3, #0]
   a6c9c:	3301      	adds	r3, #1
   a6c9e:	4a56      	ldr	r2, [pc, #344]	; (a6df8 <Cl_Standby_Controller+0x5ec>)
   a6ca0:	6013      	str	r3, [r2, #0]
				cl_stby_retval = Cl_StabyRinse_UpdateTimeInfo();
   a6ca2:	4b56      	ldr	r3, [pc, #344]	; (a6dfc <Cl_Standby_Controller+0x5f0>)
   a6ca4:	4798      	blx	r3
   a6ca6:	4603      	mov	r3, r0
   a6ca8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				break;
   a6cac:	e007      	b.n	a6cbe <Cl_Standby_Controller+0x4b2>
				case EVENT_STBY_TICK_MINUTES:
				Cl_StbRinsesecondscounter =0;
   a6cae:	4b52      	ldr	r3, [pc, #328]	; (a6df8 <Cl_Standby_Controller+0x5ec>)
   a6cb0:	2200      	movs	r2, #0
   a6cb2:	601a      	str	r2, [r3, #0]
				cl_stbystate = CL_STBY_STATE_IDLE;
   a6cb4:	4b4e      	ldr	r3, [pc, #312]	; (a6df0 <Cl_Standby_Controller+0x5e4>)
   a6cb6:	2201      	movs	r2, #1
   a6cb8:	701a      	strb	r2, [r3, #0]
			//	printf("M");
				break;
   a6cba:	e000      	b.n	a6cbe <Cl_Standby_Controller+0x4b2>
			//	printf("H");
				break;

				
				default:
				break;
   a6cbc:	bf00      	nop
			}
			break;
   a6cbe:	e27e      	b.n	a71be <Cl_Standby_Controller+0x9b2>

			case CL_STBY_STATE_V1:
			
			switch (cl_stdby_event)
   a6cc0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a6cc4:	3b06      	subs	r3, #6
   a6cc6:	2b07      	cmp	r3, #7
   a6cc8:	f200 80b0 	bhi.w	a6e2c <Cl_Standby_Controller+0x620>
   a6ccc:	a201      	add	r2, pc, #4	; (adr r2, a6cd4 <Cl_Standby_Controller+0x4c8>)
   a6cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a6cd2:	bf00      	nop
   a6cd4:	000a6e09 	.word	0x000a6e09
   a6cd8:	000a6e25 	.word	0x000a6e25
   a6cdc:	000a6e2d 	.word	0x000a6e2d
   a6ce0:	000a6dcf 	.word	0x000a6dcf
   a6ce4:	000a6cf5 	.word	0x000a6cf5
   a6ce8:	000a6d81 	.word	0x000a6d81
   a6cec:	000a6e2d 	.word	0x000a6e2d
   a6cf0:	000a6e2d 	.word	0x000a6e2d
				case EVENT_STBY_DIALYSIS_PREP:
				// check for alarms and change hardware status as required before going to dialysis prepration
				break;
				case EVENT_STBY_GET_DATA:
				
								if(Cl_ConsoleRxMsg.msgready == true)
   a6cf4:	4b3a      	ldr	r3, [pc, #232]	; (a6de0 <Cl_Standby_Controller+0x5d4>)
   a6cf6:	7e1b      	ldrb	r3, [r3, #24]
   a6cf8:	2b00      	cmp	r3, #0
   a6cfa:	d040      	beq.n	a6d7e <Cl_Standby_Controller+0x572>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a6cfc:	4b38      	ldr	r3, [pc, #224]	; (a6de0 <Cl_Standby_Controller+0x5d4>)
   a6cfe:	791b      	ldrb	r3, [r3, #4]
   a6d00:	2b01      	cmp	r3, #1
   a6d02:	d002      	beq.n	a6d0a <Cl_Standby_Controller+0x4fe>
   a6d04:	2b21      	cmp	r3, #33	; 0x21
   a6d06:	d01d      	beq.n	a6d44 <Cl_Standby_Controller+0x538>
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
						break;
										default:
										break;
   a6d08:	e039      	b.n	a6d7e <Cl_Standby_Controller+0x572>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
									//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a6d0a:	2316      	movs	r3, #22
   a6d0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a6d10:	2301      	movs	r3, #1
   a6d12:	f887 3020 	strb.w	r3, [r7, #32]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a6d16:	f107 0320 	add.w	r3, r7, #32
   a6d1a:	3301      	adds	r3, #1
   a6d1c:	2001      	movs	r0, #1
   a6d1e:	4619      	mov	r1, r3
   a6d20:	4b37      	ldr	r3, [pc, #220]	; (a6e00 <Cl_Standby_Controller+0x5f4>)
   a6d22:	4798      	blx	r3
   a6d24:	4603      	mov	r3, r0
   a6d26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,(Cl_Uint8Type)2);
   a6d2a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a6d2e:	f107 0320 	add.w	r3, r7, #32
   a6d32:	4610      	mov	r0, r2
   a6d34:	4619      	mov	r1, r3
   a6d36:	2202      	movs	r2, #2
   a6d38:	4b2e      	ldr	r3, [pc, #184]	; (a6df4 <Cl_Standby_Controller+0x5e8>)
   a6d3a:	4798      	blx	r3
   a6d3c:	4603      	mov	r3, r0
   a6d3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									//	cl_wait(
										break;
   a6d42:	e01c      	b.n	a6d7e <Cl_Standby_Controller+0x572>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a6d44:	2316      	movs	r3, #22
   a6d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;	
   a6d4a:	2323      	movs	r3, #35	; 0x23
   a6d4c:	f887 3020 	strb.w	r3, [r7, #32]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a6d50:	f107 0320 	add.w	r3, r7, #32
   a6d54:	3301      	adds	r3, #1
   a6d56:	2001      	movs	r0, #1
   a6d58:	4619      	mov	r1, r3
   a6d5a:	4b29      	ldr	r3, [pc, #164]	; (a6e00 <Cl_Standby_Controller+0x5f4>)
   a6d5c:	4798      	blx	r3
   a6d5e:	4603      	mov	r3, r0
   a6d60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a6d64:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a6d68:	f107 0320 	add.w	r3, r7, #32
   a6d6c:	4610      	mov	r0, r2
   a6d6e:	4619      	mov	r1, r3
   a6d70:	2202      	movs	r2, #2
   a6d72:	4b20      	ldr	r3, [pc, #128]	; (a6df4 <Cl_Standby_Controller+0x5e8>)
   a6d74:	4798      	blx	r3
   a6d76:	4603      	mov	r3, r0
   a6d78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
												//cl_wait(100);
						break;
   a6d7c:	bf00      	nop
										default:
										break;
									}
								}

				break;
   a6d7e:	e056      	b.n	a6e2e <Cl_Standby_Controller+0x622>
				case EVENT_STBY_SET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   a6d80:	4b17      	ldr	r3, [pc, #92]	; (a6de0 <Cl_Standby_Controller+0x5d4>)
   a6d82:	7e1b      	ldrb	r3, [r3, #24]
   a6d84:	2b00      	cmp	r3, #0
   a6d86:	d021      	beq.n	a6dcc <Cl_Standby_Controller+0x5c0>
				{
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
   a6d88:	4b15      	ldr	r3, [pc, #84]	; (a6de0 <Cl_Standby_Controller+0x5d4>)
   a6d8a:	791b      	ldrb	r3, [r3, #4]
   a6d8c:	2b01      	cmp	r3, #1
   a6d8e:	d000      	beq.n	a6d92 <Cl_Standby_Controller+0x586>
						//Reset the  OPENFILL time count
						cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
						//cl_wait(10);
						break;
						default:
						break;
   a6d90:	e01c      	b.n	a6dcc <Cl_Standby_Controller+0x5c0>
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case CON_RX_PARAM_DATA_RINSE_STATUS:
					//	cl_wait(10);
						
						con_command = CON_TX_COMMAND_SYSDATA;
   a6d92:	2316      	movs	r3, #22
   a6d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
						dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a6d98:	2301      	movs	r3, #1
   a6d9a:	f887 3020 	strb.w	r3, [r7, #32]
					//	cl_stby_retval =sv_nvmsetdata(Cl_ConsoleRxMsg.data.byte[0],&Cl_ConsoleRxMsg.data.byte[1]);
						cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a6d9e:	f107 0320 	add.w	r3, r7, #32
   a6da2:	3301      	adds	r3, #1
   a6da4:	2001      	movs	r0, #1
   a6da6:	4619      	mov	r1, r3
   a6da8:	4b15      	ldr	r3, [pc, #84]	; (a6e00 <Cl_Standby_Controller+0x5f4>)
   a6daa:	4798      	blx	r3
   a6dac:	4603      	mov	r3, r0
   a6dae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						
						//Reset the  OPENFILL time count
						cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a6db2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a6db6:	f107 0320 	add.w	r3, r7, #32
   a6dba:	4610      	mov	r0, r2
   a6dbc:	4619      	mov	r1, r3
   a6dbe:	2202      	movs	r2, #2
   a6dc0:	4b0c      	ldr	r3, [pc, #48]	; (a6df4 <Cl_Standby_Controller+0x5e8>)
   a6dc2:	4798      	blx	r3
   a6dc4:	4603      	mov	r3, r0
   a6dc6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						//cl_wait(10);
						break;
   a6dca:	bf00      	nop
						default:
						break;
					}
					
				}
				break;
   a6dcc:	e02f      	b.n	a6e2e <Cl_Standby_Controller+0x622>
				//Activate V1 time count
				//change state to V1
				// send update to console
				//Cl_SendDatatoconsole();
				//command = CON_TX_HELLO;
				con_command = CON_TX_COMMAND_ALARM;
   a6dce:	2307      	movs	r3, #7
   a6dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , false );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , false );
				//cl_stby_retval = Cl_SendDatatoconsole(con_command,&data,0);
				cl_stby_retval = Cl_standby_ProcessAlarms();
   a6dd4:	4b0b      	ldr	r3, [pc, #44]	; (a6e04 <Cl_Standby_Controller+0x5f8>)
   a6dd6:	4798      	blx	r3
   a6dd8:	4603      	mov	r3, r0
   a6dda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

				break;
   a6dde:	e026      	b.n	a6e2e <Cl_Standby_Controller+0x622>
   a6de0:	200725bc 	.word	0x200725bc
   a6de4:	cccccccd 	.word	0xcccccccd
   a6de8:	000a8255 	.word	0x000a8255
   a6dec:	200722a8 	.word	0x200722a8
   a6df0:	20070f94 	.word	0x20070f94
   a6df4:	0009d1e9 	.word	0x0009d1e9
   a6df8:	20071e30 	.word	0x20071e30
   a6dfc:	000a7469 	.word	0x000a7469
   a6e00:	0009bcdd 	.word	0x0009bcdd
   a6e04:	000a7509 	.word	0x000a7509
				case	EVENT_STBY_TICK_SECOND:
				Cl_StbRinsesecondscounter++;
   a6e08:	4bc2      	ldr	r3, [pc, #776]	; (a7114 <Cl_Standby_Controller+0x908>)
   a6e0a:	681b      	ldr	r3, [r3, #0]
   a6e0c:	3301      	adds	r3, #1
   a6e0e:	4ac1      	ldr	r2, [pc, #772]	; (a7114 <Cl_Standby_Controller+0x908>)
   a6e10:	6013      	str	r3, [r2, #0]
				//cl_stby_retval = Cl_StabyRinse_UpdateTimeInfo();
				//cl_stby_retval = Cl_standby_ProcessAlarms();
				cl_stby_retval = Cl_standby_UpdateAlarmTable(&ClstbyAlarmId );
   a6e12:	f107 031f 	add.w	r3, r7, #31
   a6e16:	4618      	mov	r0, r3
   a6e18:	4bbf      	ldr	r3, [pc, #764]	; (a7118 <Cl_Standby_Controller+0x90c>)
   a6e1a:	4798      	blx	r3
   a6e1c:	4603      	mov	r3, r0
   a6e1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				
				
				break;
   a6e22:	e004      	b.n	a6e2e <Cl_Standby_Controller+0x622>
				case EVENT_STBY_TICK_MINUTES:
				Cl_StbRinsesecondscounter =0;
   a6e24:	4bbb      	ldr	r3, [pc, #748]	; (a7114 <Cl_Standby_Controller+0x908>)
   a6e26:	2200      	movs	r2, #0
   a6e28:	601a      	str	r2, [r3, #0]
			//	printf("M");
				break;
   a6e2a:	e000      	b.n	a6e2e <Cl_Standby_Controller+0x622>
			//	printf("H");
				break;

				
				default:
				break;
   a6e2c:	bf00      	nop
			}
			break;
   a6e2e:	e1c6      	b.n	a71be <Cl_Standby_Controller+0x9b2>
			case CL_STBY_STATE_V2:
			switch (cl_stdby_event)
   a6e30:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a6e34:	3b06      	subs	r3, #6
   a6e36:	2b07      	cmp	r3, #7
   a6e38:	d877      	bhi.n	a6f2a <Cl_Standby_Controller+0x71e>
   a6e3a:	a201      	add	r2, pc, #4	; (adr r2, a6e40 <Cl_Standby_Controller+0x634>)
   a6e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a6e40:	000a6f0d 	.word	0x000a6f0d
   a6e44:	000a6f23 	.word	0x000a6f23
   a6e48:	000a6f2b 	.word	0x000a6f2b
   a6e4c:	000a6eed 	.word	0x000a6eed
   a6e50:	000a6e61 	.word	0x000a6e61
   a6e54:	000a6f2b 	.word	0x000a6f2b
   a6e58:	000a6f2b 	.word	0x000a6f2b
   a6e5c:	000a6f2b 	.word	0x000a6f2b
			{
				case EVENT_STBY_DIALYSIS_PREP:
				// check for alarms and change hardware status as required before going to dialysis prepration
				break;
				case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   a6e60:	4bae      	ldr	r3, [pc, #696]	; (a711c <Cl_Standby_Controller+0x910>)
   a6e62:	7e1b      	ldrb	r3, [r3, #24]
   a6e64:	2b00      	cmp	r3, #0
   a6e66:	d040      	beq.n	a6eea <Cl_Standby_Controller+0x6de>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a6e68:	4bac      	ldr	r3, [pc, #688]	; (a711c <Cl_Standby_Controller+0x910>)
   a6e6a:	791b      	ldrb	r3, [r3, #4]
   a6e6c:	2b01      	cmp	r3, #1
   a6e6e:	d002      	beq.n	a6e76 <Cl_Standby_Controller+0x66a>
   a6e70:	2b21      	cmp	r3, #33	; 0x21
   a6e72:	d01d      	beq.n	a6eb0 <Cl_Standby_Controller+0x6a4>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   a6e74:	e039      	b.n	a6eea <Cl_Standby_Controller+0x6de>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a6e76:	2316      	movs	r3, #22
   a6e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a6e7c:	2301      	movs	r3, #1
   a6e7e:	f887 3020 	strb.w	r3, [r7, #32]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a6e82:	f107 0320 	add.w	r3, r7, #32
   a6e86:	3301      	adds	r3, #1
   a6e88:	2001      	movs	r0, #1
   a6e8a:	4619      	mov	r1, r3
   a6e8c:	4ba4      	ldr	r3, [pc, #656]	; (a7120 <Cl_Standby_Controller+0x914>)
   a6e8e:	4798      	blx	r3
   a6e90:	4603      	mov	r3, r0
   a6e92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a6e96:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a6e9a:	f107 0320 	add.w	r3, r7, #32
   a6e9e:	4610      	mov	r0, r2
   a6ea0:	4619      	mov	r1, r3
   a6ea2:	2202      	movs	r2, #2
   a6ea4:	4b9f      	ldr	r3, [pc, #636]	; (a7124 <Cl_Standby_Controller+0x918>)
   a6ea6:	4798      	blx	r3
   a6ea8:	4603      	mov	r3, r0
   a6eaa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										//cl_wait(10);
										break;
   a6eae:	e01c      	b.n	a6eea <Cl_Standby_Controller+0x6de>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a6eb0:	2316      	movs	r3, #22
   a6eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a6eb6:	2323      	movs	r3, #35	; 0x23
   a6eb8:	f887 3020 	strb.w	r3, [r7, #32]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a6ebc:	f107 0320 	add.w	r3, r7, #32
   a6ec0:	3301      	adds	r3, #1
   a6ec2:	2001      	movs	r0, #1
   a6ec4:	4619      	mov	r1, r3
   a6ec6:	4b96      	ldr	r3, [pc, #600]	; (a7120 <Cl_Standby_Controller+0x914>)
   a6ec8:	4798      	blx	r3
   a6eca:	4603      	mov	r3, r0
   a6ecc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a6ed0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a6ed4:	f107 0320 	add.w	r3, r7, #32
   a6ed8:	4610      	mov	r0, r2
   a6eda:	4619      	mov	r1, r3
   a6edc:	2202      	movs	r2, #2
   a6ede:	4b91      	ldr	r3, [pc, #580]	; (a7124 <Cl_Standby_Controller+0x918>)
   a6ee0:	4798      	blx	r3
   a6ee2:	4603      	mov	r3, r0
   a6ee4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
												//cl_wait(100);
										break;
   a6ee8:	bf00      	nop
										default:
										break;
									}
								}
				break;
   a6eea:	e01f      	b.n	a6f2c <Cl_Standby_Controller+0x720>
				//Activate V1 time count
				//change state to V1
				// send update to console
				//Cl_SendDatatoconsole();
				//command = CON_TX_HELLO;
				con_command = CON_TX_COMMAND_ALARM;
   a6eec:	2307      	movs	r3, #7
   a6eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , false );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , false );
				cl_stby_retval = Cl_SendDatatoconsole(con_command,&data,0);
   a6ef2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a6ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
   a6efa:	4610      	mov	r0, r2
   a6efc:	4619      	mov	r1, r3
   a6efe:	2200      	movs	r2, #0
   a6f00:	4b88      	ldr	r3, [pc, #544]	; (a7124 <Cl_Standby_Controller+0x918>)
   a6f02:	4798      	blx	r3
   a6f04:	4603      	mov	r3, r0
   a6f06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

				break;
   a6f0a:	e00f      	b.n	a6f2c <Cl_Standby_Controller+0x720>
				case	EVENT_STBY_TICK_SECOND:
				Cl_StbRinsesecondscounter++;
   a6f0c:	4b81      	ldr	r3, [pc, #516]	; (a7114 <Cl_Standby_Controller+0x908>)
   a6f0e:	681b      	ldr	r3, [r3, #0]
   a6f10:	3301      	adds	r3, #1
   a6f12:	4a80      	ldr	r2, [pc, #512]	; (a7114 <Cl_Standby_Controller+0x908>)
   a6f14:	6013      	str	r3, [r2, #0]
				cl_stby_retval = Cl_StabyRinse_UpdateTimeInfo();
   a6f16:	4b84      	ldr	r3, [pc, #528]	; (a7128 <Cl_Standby_Controller+0x91c>)
   a6f18:	4798      	blx	r3
   a6f1a:	4603      	mov	r3, r0
   a6f1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				break;
   a6f20:	e004      	b.n	a6f2c <Cl_Standby_Controller+0x720>
				case EVENT_STBY_TICK_MINUTES:
				Cl_StbRinsesecondscounter =0;
   a6f22:	4b7c      	ldr	r3, [pc, #496]	; (a7114 <Cl_Standby_Controller+0x908>)
   a6f24:	2200      	movs	r2, #0
   a6f26:	601a      	str	r2, [r3, #0]
			//	printf("M");
				break;
   a6f28:	e000      	b.n	a6f2c <Cl_Standby_Controller+0x720>
			//	printf("H");
				break;

				
				default:
				break;
   a6f2a:	bf00      	nop
			}
			break;
   a6f2c:	e147      	b.n	a71be <Cl_Standby_Controller+0x9b2>
			case CL_STBY_STATE_BO1_V4:
						switch (cl_stdby_event)
   a6f2e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a6f32:	2b0a      	cmp	r3, #10
   a6f34:	d002      	beq.n	a6f3c <Cl_Standby_Controller+0x730>
   a6f36:	2b0d      	cmp	r3, #13
   a6f38:	d046      	beq.n	a6fc8 <Cl_Standby_Controller+0x7bc>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   a6f3a:	e046      	b.n	a6fca <Cl_Standby_Controller+0x7be>
			break;
			case CL_STBY_STATE_BO1_V4:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
										if(Cl_ConsoleRxMsg.msgready == true)
   a6f3c:	4b77      	ldr	r3, [pc, #476]	; (a711c <Cl_Standby_Controller+0x910>)
   a6f3e:	7e1b      	ldrb	r3, [r3, #24]
   a6f40:	2b00      	cmp	r3, #0
   a6f42:	d040      	beq.n	a6fc6 <Cl_Standby_Controller+0x7ba>
										{
											
											switch(Cl_ConsoleRxMsg.data.byte[0])
   a6f44:	4b75      	ldr	r3, [pc, #468]	; (a711c <Cl_Standby_Controller+0x910>)
   a6f46:	791b      	ldrb	r3, [r3, #4]
   a6f48:	2b01      	cmp	r3, #1
   a6f4a:	d002      	beq.n	a6f52 <Cl_Standby_Controller+0x746>
   a6f4c:	2b21      	cmp	r3, #33	; 0x21
   a6f4e:	d01d      	beq.n	a6f8c <Cl_Standby_Controller+0x780>
														//Reset the  OPENFILL time count
														cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
														//cl_wait(100);
												break;
												default:
												break;
   a6f50:	e039      	b.n	a6fc6 <Cl_Standby_Controller+0x7ba>
											switch(Cl_ConsoleRxMsg.data.byte[0])
											{
												case CON_RX_PARAM_DATA_RINSE_STATUS:
												//	cl_wait(10);
												
												con_command = CON_TX_COMMAND_SYSDATA;
   a6f52:	2316      	movs	r3, #22
   a6f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a6f58:	2301      	movs	r3, #1
   a6f5a:	f887 3020 	strb.w	r3, [r7, #32]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a6f5e:	f107 0320 	add.w	r3, r7, #32
   a6f62:	3301      	adds	r3, #1
   a6f64:	2001      	movs	r0, #1
   a6f66:	4619      	mov	r1, r3
   a6f68:	4b6d      	ldr	r3, [pc, #436]	; (a7120 <Cl_Standby_Controller+0x914>)
   a6f6a:	4798      	blx	r3
   a6f6c:	4603      	mov	r3, r0
   a6f6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a6f72:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a6f76:	f107 0320 	add.w	r3, r7, #32
   a6f7a:	4610      	mov	r0, r2
   a6f7c:	4619      	mov	r1, r3
   a6f7e:	2202      	movs	r2, #2
   a6f80:	4b68      	ldr	r3, [pc, #416]	; (a7124 <Cl_Standby_Controller+0x918>)
   a6f82:	4798      	blx	r3
   a6f84:	4603      	mov	r3, r0
   a6f86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
												//cl_wait(10);
												break;
   a6f8a:	e01c      	b.n	a6fc6 <Cl_Standby_Controller+0x7ba>
												case CON_RX_PARAM_DATA_DISINF_STATUS:
													//	cl_wait(10);
													
														con_command = CON_TX_COMMAND_SYSDATA;
   a6f8c:	2316      	movs	r3, #22
   a6f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
														//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
														dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a6f92:	2323      	movs	r3, #35	; 0x23
   a6f94:	f887 3020 	strb.w	r3, [r7, #32]
														cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a6f98:	f107 0320 	add.w	r3, r7, #32
   a6f9c:	3301      	adds	r3, #1
   a6f9e:	2001      	movs	r0, #1
   a6fa0:	4619      	mov	r1, r3
   a6fa2:	4b5f      	ldr	r3, [pc, #380]	; (a7120 <Cl_Standby_Controller+0x914>)
   a6fa4:	4798      	blx	r3
   a6fa6:	4603      	mov	r3, r0
   a6fa8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
													
														//Reset the  OPENFILL time count
														cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a6fac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a6fb0:	f107 0320 	add.w	r3, r7, #32
   a6fb4:	4610      	mov	r0, r2
   a6fb6:	4619      	mov	r1, r3
   a6fb8:	2202      	movs	r2, #2
   a6fba:	4b5a      	ldr	r3, [pc, #360]	; (a7124 <Cl_Standby_Controller+0x918>)
   a6fbc:	4798      	blx	r3
   a6fbe:	4603      	mov	r3, r0
   a6fc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
														//cl_wait(100);
												break;
   a6fc4:	bf00      	nop
												default:
												break;
											}
										}
							break;
   a6fc6:	e000      	b.n	a6fca <Cl_Standby_Controller+0x7be>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   a6fc8:	bf00      	nop
							default:
							break;
						}
			break;
   a6fca:	e0f8      	b.n	a71be <Cl_Standby_Controller+0x9b2>
			case CL_STBY_STATE_BO2_V4:
						switch (cl_stdby_event)
   a6fcc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a6fd0:	2b0a      	cmp	r3, #10
   a6fd2:	d002      	beq.n	a6fda <Cl_Standby_Controller+0x7ce>
   a6fd4:	2b0d      	cmp	r3, #13
   a6fd6:	d046      	beq.n	a7066 <Cl_Standby_Controller+0x85a>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   a6fd8:	e046      	b.n	a7068 <Cl_Standby_Controller+0x85c>
			break;
			case CL_STBY_STATE_BO2_V4:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   a6fda:	4b50      	ldr	r3, [pc, #320]	; (a711c <Cl_Standby_Controller+0x910>)
   a6fdc:	7e1b      	ldrb	r3, [r3, #24]
   a6fde:	2b00      	cmp	r3, #0
   a6fe0:	d040      	beq.n	a7064 <Cl_Standby_Controller+0x858>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a6fe2:	4b4e      	ldr	r3, [pc, #312]	; (a711c <Cl_Standby_Controller+0x910>)
   a6fe4:	791b      	ldrb	r3, [r3, #4]
   a6fe6:	2b01      	cmp	r3, #1
   a6fe8:	d002      	beq.n	a6ff0 <Cl_Standby_Controller+0x7e4>
   a6fea:	2b21      	cmp	r3, #33	; 0x21
   a6fec:	d01d      	beq.n	a702a <Cl_Standby_Controller+0x81e>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   a6fee:	e039      	b.n	a7064 <Cl_Standby_Controller+0x858>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a6ff0:	2316      	movs	r3, #22
   a6ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a6ff6:	2301      	movs	r3, #1
   a6ff8:	f887 3020 	strb.w	r3, [r7, #32]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a6ffc:	f107 0320 	add.w	r3, r7, #32
   a7000:	3301      	adds	r3, #1
   a7002:	2001      	movs	r0, #1
   a7004:	4619      	mov	r1, r3
   a7006:	4b46      	ldr	r3, [pc, #280]	; (a7120 <Cl_Standby_Controller+0x914>)
   a7008:	4798      	blx	r3
   a700a:	4603      	mov	r3, r0
   a700c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a7010:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a7014:	f107 0320 	add.w	r3, r7, #32
   a7018:	4610      	mov	r0, r2
   a701a:	4619      	mov	r1, r3
   a701c:	2202      	movs	r2, #2
   a701e:	4b41      	ldr	r3, [pc, #260]	; (a7124 <Cl_Standby_Controller+0x918>)
   a7020:	4798      	blx	r3
   a7022:	4603      	mov	r3, r0
   a7024:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										//cl_wait(10);
										break;
   a7028:	e01c      	b.n	a7064 <Cl_Standby_Controller+0x858>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a702a:	2316      	movs	r3, #22
   a702c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a7030:	2323      	movs	r3, #35	; 0x23
   a7032:	f887 3020 	strb.w	r3, [r7, #32]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a7036:	f107 0320 	add.w	r3, r7, #32
   a703a:	3301      	adds	r3, #1
   a703c:	2001      	movs	r0, #1
   a703e:	4619      	mov	r1, r3
   a7040:	4b37      	ldr	r3, [pc, #220]	; (a7120 <Cl_Standby_Controller+0x914>)
   a7042:	4798      	blx	r3
   a7044:	4603      	mov	r3, r0
   a7046:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a704a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a704e:	f107 0320 	add.w	r3, r7, #32
   a7052:	4610      	mov	r0, r2
   a7054:	4619      	mov	r1, r3
   a7056:	2202      	movs	r2, #2
   a7058:	4b32      	ldr	r3, [pc, #200]	; (a7124 <Cl_Standby_Controller+0x918>)
   a705a:	4798      	blx	r3
   a705c:	4603      	mov	r3, r0
   a705e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
												//cl_wait(100);
										break;
   a7062:	bf00      	nop
										default:
										break;
									}
								}
							break;
   a7064:	e000      	b.n	a7068 <Cl_Standby_Controller+0x85c>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   a7066:	bf00      	nop
							default:
							break;
						}
			case CL_STBY_STATE_BO1_V13V14:
						switch (cl_stdby_event)
   a7068:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a706c:	2b0a      	cmp	r3, #10
   a706e:	d002      	beq.n	a7076 <Cl_Standby_Controller+0x86a>
   a7070:	2b0d      	cmp	r3, #13
   a7072:	d046      	beq.n	a7102 <Cl_Standby_Controller+0x8f6>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   a7074:	e046      	b.n	a7104 <Cl_Standby_Controller+0x8f8>
						}
			case CL_STBY_STATE_BO1_V13V14:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   a7076:	4b29      	ldr	r3, [pc, #164]	; (a711c <Cl_Standby_Controller+0x910>)
   a7078:	7e1b      	ldrb	r3, [r3, #24]
   a707a:	2b00      	cmp	r3, #0
   a707c:	d040      	beq.n	a7100 <Cl_Standby_Controller+0x8f4>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a707e:	4b27      	ldr	r3, [pc, #156]	; (a711c <Cl_Standby_Controller+0x910>)
   a7080:	791b      	ldrb	r3, [r3, #4]
   a7082:	2b01      	cmp	r3, #1
   a7084:	d002      	beq.n	a708c <Cl_Standby_Controller+0x880>
   a7086:	2b21      	cmp	r3, #33	; 0x21
   a7088:	d01d      	beq.n	a70c6 <Cl_Standby_Controller+0x8ba>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   a708a:	e039      	b.n	a7100 <Cl_Standby_Controller+0x8f4>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a708c:	2316      	movs	r3, #22
   a708e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a7092:	2301      	movs	r3, #1
   a7094:	f887 3020 	strb.w	r3, [r7, #32]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a7098:	f107 0320 	add.w	r3, r7, #32
   a709c:	3301      	adds	r3, #1
   a709e:	2001      	movs	r0, #1
   a70a0:	4619      	mov	r1, r3
   a70a2:	4b1f      	ldr	r3, [pc, #124]	; (a7120 <Cl_Standby_Controller+0x914>)
   a70a4:	4798      	blx	r3
   a70a6:	4603      	mov	r3, r0
   a70a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a70ac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a70b0:	f107 0320 	add.w	r3, r7, #32
   a70b4:	4610      	mov	r0, r2
   a70b6:	4619      	mov	r1, r3
   a70b8:	2202      	movs	r2, #2
   a70ba:	4b1a      	ldr	r3, [pc, #104]	; (a7124 <Cl_Standby_Controller+0x918>)
   a70bc:	4798      	blx	r3
   a70be:	4603      	mov	r3, r0
   a70c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										//cl_wait(10);
										break;
   a70c4:	e01c      	b.n	a7100 <Cl_Standby_Controller+0x8f4>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a70c6:	2316      	movs	r3, #22
   a70c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a70cc:	2323      	movs	r3, #35	; 0x23
   a70ce:	f887 3020 	strb.w	r3, [r7, #32]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a70d2:	f107 0320 	add.w	r3, r7, #32
   a70d6:	3301      	adds	r3, #1
   a70d8:	2001      	movs	r0, #1
   a70da:	4619      	mov	r1, r3
   a70dc:	4b10      	ldr	r3, [pc, #64]	; (a7120 <Cl_Standby_Controller+0x914>)
   a70de:	4798      	blx	r3
   a70e0:	4603      	mov	r3, r0
   a70e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a70e6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a70ea:	f107 0320 	add.w	r3, r7, #32
   a70ee:	4610      	mov	r0, r2
   a70f0:	4619      	mov	r1, r3
   a70f2:	2202      	movs	r2, #2
   a70f4:	4b0b      	ldr	r3, [pc, #44]	; (a7124 <Cl_Standby_Controller+0x918>)
   a70f6:	4798      	blx	r3
   a70f8:	4603      	mov	r3, r0
   a70fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
												//cl_wait(100);
										break;
   a70fe:	bf00      	nop
										default:
										break;
									}
								}
							break;
   a7100:	e000      	b.n	a7104 <Cl_Standby_Controller+0x8f8>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   a7102:	bf00      	nop
							default:
							break;
						}
			break;
   a7104:	e05b      	b.n	a71be <Cl_Standby_Controller+0x9b2>
			case CL_STBY_STATE_BO2_V13V14:
						switch (cl_stdby_event)
   a7106:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a710a:	2b0a      	cmp	r3, #10
   a710c:	d00e      	beq.n	a712c <Cl_Standby_Controller+0x920>
   a710e:	2b0d      	cmp	r3, #13
   a7110:	d052      	beq.n	a71b8 <Cl_Standby_Controller+0x9ac>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   a7112:	e052      	b.n	a71ba <Cl_Standby_Controller+0x9ae>
   a7114:	20071e30 	.word	0x20071e30
   a7118:	000a7575 	.word	0x000a7575
   a711c:	200725bc 	.word	0x200725bc
   a7120:	0009bcdd 	.word	0x0009bcdd
   a7124:	0009d1e9 	.word	0x0009d1e9
   a7128:	000a7469 	.word	0x000a7469
			break;
			case CL_STBY_STATE_BO2_V13V14:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   a712c:	4b26      	ldr	r3, [pc, #152]	; (a71c8 <Cl_Standby_Controller+0x9bc>)
   a712e:	7e1b      	ldrb	r3, [r3, #24]
   a7130:	2b00      	cmp	r3, #0
   a7132:	d040      	beq.n	a71b6 <Cl_Standby_Controller+0x9aa>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a7134:	4b24      	ldr	r3, [pc, #144]	; (a71c8 <Cl_Standby_Controller+0x9bc>)
   a7136:	791b      	ldrb	r3, [r3, #4]
   a7138:	2b01      	cmp	r3, #1
   a713a:	d002      	beq.n	a7142 <Cl_Standby_Controller+0x936>
   a713c:	2b21      	cmp	r3, #33	; 0x21
   a713e:	d01d      	beq.n	a717c <Cl_Standby_Controller+0x970>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   a7140:	e039      	b.n	a71b6 <Cl_Standby_Controller+0x9aa>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a7142:	2316      	movs	r3, #22
   a7144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a7148:	2301      	movs	r3, #1
   a714a:	f887 3020 	strb.w	r3, [r7, #32]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a714e:	f107 0320 	add.w	r3, r7, #32
   a7152:	3301      	adds	r3, #1
   a7154:	2001      	movs	r0, #1
   a7156:	4619      	mov	r1, r3
   a7158:	4b1c      	ldr	r3, [pc, #112]	; (a71cc <Cl_Standby_Controller+0x9c0>)
   a715a:	4798      	blx	r3
   a715c:	4603      	mov	r3, r0
   a715e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a7162:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a7166:	f107 0320 	add.w	r3, r7, #32
   a716a:	4610      	mov	r0, r2
   a716c:	4619      	mov	r1, r3
   a716e:	2202      	movs	r2, #2
   a7170:	4b17      	ldr	r3, [pc, #92]	; (a71d0 <Cl_Standby_Controller+0x9c4>)
   a7172:	4798      	blx	r3
   a7174:	4603      	mov	r3, r0
   a7176:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										//cl_wait(10);
										break;
   a717a:	e01c      	b.n	a71b6 <Cl_Standby_Controller+0x9aa>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a717c:	2316      	movs	r3, #22
   a717e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a7182:	2323      	movs	r3, #35	; 0x23
   a7184:	f887 3020 	strb.w	r3, [r7, #32]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a7188:	f107 0320 	add.w	r3, r7, #32
   a718c:	3301      	adds	r3, #1
   a718e:	2001      	movs	r0, #1
   a7190:	4619      	mov	r1, r3
   a7192:	4b0e      	ldr	r3, [pc, #56]	; (a71cc <Cl_Standby_Controller+0x9c0>)
   a7194:	4798      	blx	r3
   a7196:	4603      	mov	r3, r0
   a7198:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a719c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a71a0:	f107 0320 	add.w	r3, r7, #32
   a71a4:	4610      	mov	r0, r2
   a71a6:	4619      	mov	r1, r3
   a71a8:	2202      	movs	r2, #2
   a71aa:	4b09      	ldr	r3, [pc, #36]	; (a71d0 <Cl_Standby_Controller+0x9c4>)
   a71ac:	4798      	blx	r3
   a71ae:	4603      	mov	r3, r0
   a71b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
												//cl_wait(100);
										break;
   a71b4:	bf00      	nop
										default:
										break;
									}
								}
							break;
   a71b6:	e000      	b.n	a71ba <Cl_Standby_Controller+0x9ae>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   a71b8:	bf00      	nop
							default:
							break;
						}
			break;
   a71ba:	e000      	b.n	a71be <Cl_Standby_Controller+0x9b2>
			break;
			case CL_STBY_STATE_STOP:
			break;

			default:
			break;
   a71bc:	bf00      	nop
		}

	
return CL_OK;
   a71be:	2300      	movs	r3, #0
}
   a71c0:	4618      	mov	r0, r3
   a71c2:	3728      	adds	r7, #40	; 0x28
   a71c4:	46bd      	mov	sp, r7
   a71c6:	bd80      	pop	{r7, pc}
   a71c8:	200725bc 	.word	0x200725bc
   a71cc:	0009bcdd 	.word	0x0009bcdd
   a71d0:	0009d1e9 	.word	0x0009d1e9

000a71d4 <cl_stby_translatemacevent>:



Cl_ReturnCodeType  cl_stby_translatemacevent(Cl_Mac_EventsType Cl_MacStbyEvent,Cl_Stby_Events* cl_stdby_event)
{
   a71d4:	b480      	push	{r7}
   a71d6:	b083      	sub	sp, #12
   a71d8:	af00      	add	r7, sp, #0
   a71da:	4603      	mov	r3, r0
   a71dc:	6039      	str	r1, [r7, #0]
   a71de:	71fb      	strb	r3, [r7, #7]
	//dummy1  =  Cl_MacStbyEvent;
	
	//switch(dummy1)
	
		*cl_stdby_event =	EVENT_STBY_NULL;
   a71e0:	683b      	ldr	r3, [r7, #0]
   a71e2:	2200      	movs	r2, #0
   a71e4:	701a      	strb	r2, [r3, #0]
		
	switch(Cl_MacStbyEvent)
   a71e6:	79fb      	ldrb	r3, [r7, #7]
   a71e8:	3b07      	subs	r3, #7
   a71ea:	2b55      	cmp	r3, #85	; 0x55
   a71ec:	f200 80ec 	bhi.w	a73c8 <cl_stby_translatemacevent+0x1f4>
   a71f0:	a201      	add	r2, pc, #4	; (adr r2, a71f8 <cl_stby_translatemacevent+0x24>)
   a71f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a71f6:	bf00      	nop
   a71f8:	000a7381 	.word	0x000a7381
   a71fc:	000a73c9 	.word	0x000a73c9
   a7200:	000a7389 	.word	0x000a7389
   a7204:	000a7391 	.word	0x000a7391
   a7208:	000a7399 	.word	0x000a7399
   a720c:	000a73a1 	.word	0x000a73a1
   a7210:	000a73c9 	.word	0x000a73c9
   a7214:	000a7379 	.word	0x000a7379
   a7218:	000a73c9 	.word	0x000a73c9
   a721c:	000a73a9 	.word	0x000a73a9
   a7220:	000a73c9 	.word	0x000a73c9
   a7224:	000a73c9 	.word	0x000a73c9
   a7228:	000a73c9 	.word	0x000a73c9
   a722c:	000a73c9 	.word	0x000a73c9
   a7230:	000a73c9 	.word	0x000a73c9
   a7234:	000a73c9 	.word	0x000a73c9
   a7238:	000a73c9 	.word	0x000a73c9
   a723c:	000a73c9 	.word	0x000a73c9
   a7240:	000a73c9 	.word	0x000a73c9
   a7244:	000a73c9 	.word	0x000a73c9
   a7248:	000a73c9 	.word	0x000a73c9
   a724c:	000a73c9 	.word	0x000a73c9
   a7250:	000a73c9 	.word	0x000a73c9
   a7254:	000a73c9 	.word	0x000a73c9
   a7258:	000a73c9 	.word	0x000a73c9
   a725c:	000a73c9 	.word	0x000a73c9
   a7260:	000a73c9 	.word	0x000a73c9
   a7264:	000a73c9 	.word	0x000a73c9
   a7268:	000a73c9 	.word	0x000a73c9
   a726c:	000a73c9 	.word	0x000a73c9
   a7270:	000a73c9 	.word	0x000a73c9
   a7274:	000a73c9 	.word	0x000a73c9
   a7278:	000a73c9 	.word	0x000a73c9
   a727c:	000a73c9 	.word	0x000a73c9
   a7280:	000a73b1 	.word	0x000a73b1
   a7284:	000a73c9 	.word	0x000a73c9
   a7288:	000a7351 	.word	0x000a7351
   a728c:	000a73c9 	.word	0x000a73c9
   a7290:	000a73c9 	.word	0x000a73c9
   a7294:	000a7371 	.word	0x000a7371
   a7298:	000a73c9 	.word	0x000a73c9
   a729c:	000a73c9 	.word	0x000a73c9
   a72a0:	000a73c9 	.word	0x000a73c9
   a72a4:	000a73c9 	.word	0x000a73c9
   a72a8:	000a73c9 	.word	0x000a73c9
   a72ac:	000a73c9 	.word	0x000a73c9
   a72b0:	000a73c9 	.word	0x000a73c9
   a72b4:	000a73c9 	.word	0x000a73c9
   a72b8:	000a73c9 	.word	0x000a73c9
   a72bc:	000a73c9 	.word	0x000a73c9
   a72c0:	000a7359 	.word	0x000a7359
   a72c4:	000a73c9 	.word	0x000a73c9
   a72c8:	000a7361 	.word	0x000a7361
   a72cc:	000a7369 	.word	0x000a7369
   a72d0:	000a73c9 	.word	0x000a73c9
   a72d4:	000a73c9 	.word	0x000a73c9
   a72d8:	000a73c9 	.word	0x000a73c9
   a72dc:	000a73c9 	.word	0x000a73c9
   a72e0:	000a73c9 	.word	0x000a73c9
   a72e4:	000a73c9 	.word	0x000a73c9
   a72e8:	000a73c9 	.word	0x000a73c9
   a72ec:	000a73c9 	.word	0x000a73c9
   a72f0:	000a73c9 	.word	0x000a73c9
   a72f4:	000a73c9 	.word	0x000a73c9
   a72f8:	000a73c9 	.word	0x000a73c9
   a72fc:	000a73c9 	.word	0x000a73c9
   a7300:	000a73c9 	.word	0x000a73c9
   a7304:	000a73c9 	.word	0x000a73c9
   a7308:	000a73c9 	.word	0x000a73c9
   a730c:	000a73c9 	.word	0x000a73c9
   a7310:	000a73c9 	.word	0x000a73c9
   a7314:	000a73c9 	.word	0x000a73c9
   a7318:	000a73c9 	.word	0x000a73c9
   a731c:	000a73c9 	.word	0x000a73c9
   a7320:	000a73c9 	.word	0x000a73c9
   a7324:	000a73c9 	.word	0x000a73c9
   a7328:	000a73c9 	.word	0x000a73c9
   a732c:	000a73c9 	.word	0x000a73c9
   a7330:	000a73c9 	.word	0x000a73c9
   a7334:	000a73c9 	.word	0x000a73c9
   a7338:	000a73c9 	.word	0x000a73c9
   a733c:	000a73c9 	.word	0x000a73c9
   a7340:	000a73c9 	.word	0x000a73c9
   a7344:	000a73c9 	.word	0x000a73c9
   a7348:	000a73b9 	.word	0x000a73b9
   a734c:	000a73c1 	.word	0x000a73c1
	{
		case  EVT_COMMAND_ENTER_STANDBY:
		*cl_stdby_event = EVENT_STBY_ENTER_STANDBY;
   a7350:	683b      	ldr	r3, [r7, #0]
   a7352:	2201      	movs	r2, #1
   a7354:	701a      	strb	r2, [r3, #0]
		break;
   a7356:	e038      	b.n	a73ca <cl_stby_translatemacevent+0x1f6>
		case EVT_TICK_100M:
		*cl_stdby_event = EVENT_STBY_TICK_100MS;
   a7358:	683b      	ldr	r3, [r7, #0]
   a735a:	2204      	movs	r2, #4
   a735c:	701a      	strb	r2, [r3, #0]
		break;
   a735e:	e034      	b.n	a73ca <cl_stby_translatemacevent+0x1f6>
		case EVT_TICK_SEC:
		*cl_stdby_event = EVENT_STBY_TICK_SECOND;
   a7360:	683b      	ldr	r3, [r7, #0]
   a7362:	2206      	movs	r2, #6
   a7364:	701a      	strb	r2, [r3, #0]
		break;
   a7366:	e030      	b.n	a73ca <cl_stby_translatemacevent+0x1f6>
		case EVT_TICK_MIN:
		*cl_stdby_event = EVENT_STBY_TICK_MINUTES;
   a7368:	683b      	ldr	r3, [r7, #0]
   a736a:	2207      	movs	r2, #7
   a736c:	701a      	strb	r2, [r3, #0]
		break;
   a736e:	e02c      	b.n	a73ca <cl_stby_translatemacevent+0x1f6>
		case EVT_TICK_HOUR:
		break;
		case  EVT_ALARM_TRIGGERED:
		*cl_stdby_event = EVENT_STBY_ALARM;
   a7370:	683b      	ldr	r3, [r7, #0]
   a7372:	2209      	movs	r2, #9
   a7374:	701a      	strb	r2, [r3, #0]
		break;
   a7376:	e028      	b.n	a73ca <cl_stby_translatemacevent+0x1f6>
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_stdby_event = EVENT_STBY_GET_DATA;
   a7378:	683b      	ldr	r3, [r7, #0]
   a737a:	220a      	movs	r2, #10
   a737c:	701a      	strb	r2, [r3, #0]
		break;
   a737e:	e024      	b.n	a73ca <cl_stby_translatemacevent+0x1f6>
		case  EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_stdby_event= EVENT_STBY_START_RINSE;
   a7380:	683b      	ldr	r3, [r7, #0]
   a7382:	220c      	movs	r2, #12
   a7384:	701a      	strb	r2, [r3, #0]
		break;
   a7386:	e020      	b.n	a73ca <cl_stby_translatemacevent+0x1f6>
		case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
		*cl_stdby_event = EVENT_STBY_DIALYSIS_PREP;
   a7388:	683b      	ldr	r3, [r7, #0]
   a738a:	220d      	movs	r2, #13
   a738c:	701a      	strb	r2, [r3, #0]
		break; 
   a738e:	e01c      	b.n	a73ca <cl_stby_translatemacevent+0x1f6>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
			*cl_stdby_event = EVENT_STBY_SET_BLDPMP_ON;
   a7390:	683b      	ldr	r3, [r7, #0]
   a7392:	220e      	movs	r2, #14
   a7394:	701a      	strb	r2, [r3, #0]
		break;
   a7396:	e018      	b.n	a73ca <cl_stby_translatemacevent+0x1f6>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
			*cl_stdby_event = EVENT_STBY_SET_BLDPMP_OFF;
   a7398:	683b      	ldr	r3, [r7, #0]
   a739a:	220f      	movs	r2, #15
   a739c:	701a      	strb	r2, [r3, #0]
		break;
   a739e:	e014      	b.n	a73ca <cl_stby_translatemacevent+0x1f6>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_stdby_event = EVENT_STBY__SET_BP_RATE;
   a73a0:	683b      	ldr	r3, [r7, #0]
   a73a2:	2210      	movs	r2, #16
   a73a4:	701a      	strb	r2, [r3, #0]
		break;
   a73a6:	e010      	b.n	a73ca <cl_stby_translatemacevent+0x1f6>
		
		case EVENT_STBY__SET_BP_RATE:
			*cl_stdby_event = EVENT_STBY__SET_BP_RATE;
   a73a8:	683b      	ldr	r3, [r7, #0]
   a73aa:	2210      	movs	r2, #16
   a73ac:	701a      	strb	r2, [r3, #0]
		break;
   a73ae:	e00c      	b.n	a73ca <cl_stby_translatemacevent+0x1f6>
		case EVT_CONSOLE_COMMAND_CLR_ALARM:
			*cl_stdby_event = EVENT_STBY_CLR_ALARM ;
   a73b0:	683b      	ldr	r3, [r7, #0]
   a73b2:	2211      	movs	r2, #17
   a73b4:	701a      	strb	r2, [r3, #0]
		break;
   a73b6:	e008      	b.n	a73ca <cl_stby_translatemacevent+0x1f6>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		*cl_stdby_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL;
   a73b8:	683b      	ldr	r3, [r7, #0]
   a73ba:	225b      	movs	r2, #91	; 0x5b
   a73bc:	701a      	strb	r2, [r3, #0]
		break;
   a73be:	e004      	b.n	a73ca <cl_stby_translatemacevent+0x1f6>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		*cl_stdby_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL;
   a73c0:	683b      	ldr	r3, [r7, #0]
   a73c2:	225c      	movs	r2, #92	; 0x5c
   a73c4:	701a      	strb	r2, [r3, #0]
		break;
   a73c6:	e000      	b.n	a73ca <cl_stby_translatemacevent+0x1f6>
		default:
		break;
   a73c8:	bf00      	nop
	}
	return CL_OK;
   a73ca:	2300      	movs	r3, #0
}
   a73cc:	4618      	mov	r0, r3
   a73ce:	370c      	adds	r7, #12
   a73d0:	46bd      	mov	sp, r7
   a73d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   a73d6:	4770      	bx	lr

000a73d8 <Cl_stby_init>:

 Cl_ReturnCodeType Cl_stby_init(void)
 {
   a73d8:	b580      	push	{r7, lr}
   a73da:	b082      	sub	sp, #8
   a73dc:	af00      	add	r7, sp, #0
	 Cl_Uint16Type temp;
	 	 Cl_ReturnCodeType cl_stby_retval = CL_ERROR;
   a73de:	2304      	movs	r3, #4
   a73e0:	717b      	strb	r3, [r7, #5]
		  
		 
		  	 for(temp = 1;temp<=20; temp++)
   a73e2:	2301      	movs	r3, #1
   a73e4:	80fb      	strh	r3, [r7, #6]
   a73e6:	e00a      	b.n	a73fe <Cl_stby_init+0x26>
		 {
				sv_cntrl_deactivate_valve((sv_valvetype)temp);
   a73e8:	88fb      	ldrh	r3, [r7, #6]
   a73ea:	b2db      	uxtb	r3, r3
   a73ec:	4618      	mov	r0, r3
   a73ee:	4b19      	ldr	r3, [pc, #100]	; (a7454 <Cl_stby_init+0x7c>)
   a73f0:	4798      	blx	r3
				cl_wait(10);
   a73f2:	200a      	movs	r0, #10
   a73f4:	4b18      	ldr	r3, [pc, #96]	; (a7458 <Cl_stby_init+0x80>)
   a73f6:	4798      	blx	r3
 {
	 Cl_Uint16Type temp;
	 	 Cl_ReturnCodeType cl_stby_retval = CL_ERROR;
		  
		 
		  	 for(temp = 1;temp<=20; temp++)
   a73f8:	88fb      	ldrh	r3, [r7, #6]
   a73fa:	3301      	adds	r3, #1
   a73fc:	80fb      	strh	r3, [r7, #6]
   a73fe:	88fb      	ldrh	r3, [r7, #6]
   a7400:	2b14      	cmp	r3, #20
   a7402:	d9f1      	bls.n	a73e8 <Cl_stby_init+0x10>
		 {
				sv_cntrl_deactivate_valve((sv_valvetype)temp);
				cl_wait(10);
		 }
		  
	 	cl_stby_retval =  sv_cntrl_deactivatepump(DCMOTOR1);
   a7404:	2001      	movs	r0, #1
   a7406:	4b15      	ldr	r3, [pc, #84]	; (a745c <Cl_stby_init+0x84>)
   a7408:	4798      	blx	r3
   a740a:	4603      	mov	r3, r0
   a740c:	717b      	strb	r3, [r7, #5]
	 	cl_stby_retval =  sv_cntrl_deactivatepump(DCMOTOR2);
   a740e:	2002      	movs	r0, #2
   a7410:	4b12      	ldr	r3, [pc, #72]	; (a745c <Cl_stby_init+0x84>)
   a7412:	4798      	blx	r3
   a7414:	4603      	mov	r3, r0
   a7416:	717b      	strb	r3, [r7, #5]
	 //	cl_stby_retval =  sv_cntrl_deactivatepump(BLOODPUMP);
	 	cl_stby_retval =  sv_cntrl_deactivatepump(UFPUMP);
   a7418:	2004      	movs	r0, #4
   a741a:	4b10      	ldr	r3, [pc, #64]	; (a745c <Cl_stby_init+0x84>)
   a741c:	4798      	blx	r3
   a741e:	4603      	mov	r3, r0
   a7420:	717b      	strb	r3, [r7, #5]
	 	cl_stby_retval =  sv_cntrl_deactivatepump(HEPARINPUMP);
   a7422:	2005      	movs	r0, #5
   a7424:	4b0d      	ldr	r3, [pc, #52]	; (a745c <Cl_stby_init+0x84>)
   a7426:	4798      	blx	r3
   a7428:	4603      	mov	r3, r0
   a742a:	717b      	strb	r3, [r7, #5]
		cl_stby_retval =  sv_cntrl_deactivatepump(VLA_PUMP);
   a742c:	2006      	movs	r0, #6
   a742e:	4b0b      	ldr	r3, [pc, #44]	; (a745c <Cl_stby_init+0x84>)
   a7430:	4798      	blx	r3
   a7432:	4603      	mov	r3, r0
   a7434:	717b      	strb	r3, [r7, #5]
	//	cl_stby_retval =  sv_cntrl_poweroffheater();

		
	
			cl_stby_retval =  sv_cs_setpotvalue((2200 * 1024)/10000);	
   a7436:	20e1      	movs	r0, #225	; 0xe1
   a7438:	4b09      	ldr	r3, [pc, #36]	; (a7460 <Cl_stby_init+0x88>)
   a743a:	4798      	blx	r3
   a743c:	4603      	mov	r3, r0
   a743e:	717b      	strb	r3, [r7, #5]
			//cl_stby_retval =  sv_cs_setcondpotvalue((3200 * 1024)/10000);
			cl_stby_retval =  Cl_Conductivity_Sensor_Controller(COND_EVENT_INIT);
   a7440:	2000      	movs	r0, #0
   a7442:	4b08      	ldr	r3, [pc, #32]	; (a7464 <Cl_stby_init+0x8c>)
   a7444:	4798      	blx	r3
   a7446:	4603      	mov	r3, r0
   a7448:	717b      	strb	r3, [r7, #5]
		
		

				
	 return CL_OK;
   a744a:	2300      	movs	r3, #0
 }
   a744c:	4618      	mov	r0, r3
   a744e:	3708      	adds	r7, #8
   a7450:	46bd      	mov	sp, r7
   a7452:	bd80      	pop	{r7, pc}
   a7454:	0009b409 	.word	0x0009b409
   a7458:	0009421d 	.word	0x0009421d
   a745c:	0009b369 	.word	0x0009b369
   a7460:	0009b899 	.word	0x0009b899
   a7464:	00090981 	.word	0x00090981

000a7468 <Cl_StabyRinse_UpdateTimeInfo>:
 
 Cl_ReturnCodeType Cl_StabyRinse_UpdateTimeInfo(void)
 {
   a7468:	b580      	push	{r7, lr}
   a746a:	b084      	sub	sp, #16
   a746c:	af00      	add	r7, sp, #0
	 
	 Cl_ReturnCodeType cl_stby_retval = CL_ERROR;
   a746e:	2304      	movs	r3, #4
   a7470:	73fb      	strb	r3, [r7, #15]
	 Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a7472:	2359      	movs	r3, #89	; 0x59
   a7474:	73bb      	strb	r3, [r7, #14]
	 Cl_Uint8Type data[7] = {0,0,0,0,0 ,0,0};
   a7476:	2300      	movs	r3, #0
   a7478:	713b      	strb	r3, [r7, #4]
   a747a:	2300      	movs	r3, #0
   a747c:	717b      	strb	r3, [r7, #5]
   a747e:	2300      	movs	r3, #0
   a7480:	71bb      	strb	r3, [r7, #6]
   a7482:	2300      	movs	r3, #0
   a7484:	71fb      	strb	r3, [r7, #7]
   a7486:	2300      	movs	r3, #0
   a7488:	723b      	strb	r3, [r7, #8]
   a748a:	2300      	movs	r3, #0
   a748c:	727b      	strb	r3, [r7, #9]
   a748e:	2300      	movs	r3, #0
   a7490:	72bb      	strb	r3, [r7, #10]
	 
	command = CON_TX_COMMAND_REM_TIME;
   a7492:	230a      	movs	r3, #10
   a7494:	73bb      	strb	r3, [r7, #14]
	
	data[0]= (Cl_Uint8Type)STANDBY_DATA;
   a7496:	2300      	movs	r3, #0
   a7498:	713b      	strb	r3, [r7, #4]
	data[1]= (Cl_Uint8Type)Cl_StbRinseTotalhourscounter; 
   a749a:	4b17      	ldr	r3, [pc, #92]	; (a74f8 <Cl_StabyRinse_UpdateTimeInfo+0x90>)
   a749c:	681b      	ldr	r3, [r3, #0]
   a749e:	b2db      	uxtb	r3, r3
   a74a0:	717b      	strb	r3, [r7, #5]
	data[2]= (Cl_Uint8Type)Cl_StbRinseTotalMinutescounter;
   a74a2:	4b16      	ldr	r3, [pc, #88]	; (a74fc <Cl_StabyRinse_UpdateTimeInfo+0x94>)
   a74a4:	681b      	ldr	r3, [r3, #0]
   a74a6:	b2db      	uxtb	r3, r3
   a74a8:	71bb      	strb	r3, [r7, #6]
	data[3]= (Cl_Uint8Type)Cl_StbRinsesecondscounter;
   a74aa:	4b15      	ldr	r3, [pc, #84]	; (a7500 <Cl_StabyRinse_UpdateTimeInfo+0x98>)
   a74ac:	681b      	ldr	r3, [r3, #0]
   a74ae:	b2db      	uxtb	r3, r3
   a74b0:	71fb      	strb	r3, [r7, #7]
	data[4]= (Cl_Uint8Type) (CL_STBYRINSE_TIMEOUT_HRS - Cl_StbRinseTotalhourscounter );
   a74b2:	4b11      	ldr	r3, [pc, #68]	; (a74f8 <Cl_StabyRinse_UpdateTimeInfo+0x90>)
   a74b4:	681b      	ldr	r3, [r3, #0]
   a74b6:	b2db      	uxtb	r3, r3
   a74b8:	425b      	negs	r3, r3
   a74ba:	b2db      	uxtb	r3, r3
   a74bc:	723b      	strb	r3, [r7, #8]
	data[5]= (Cl_Uint8Type) (CL_STBYRINSE_TIMEOUT_MIN - Cl_StbRinseTotalMinutescounter );
   a74be:	4b0f      	ldr	r3, [pc, #60]	; (a74fc <Cl_StabyRinse_UpdateTimeInfo+0x94>)
   a74c0:	681b      	ldr	r3, [r3, #0]
   a74c2:	b2db      	uxtb	r3, r3
   a74c4:	f1c3 0308 	rsb	r3, r3, #8
   a74c8:	b2db      	uxtb	r3, r3
   a74ca:	727b      	strb	r3, [r7, #9]
	data[6]= (Cl_Uint8Type) (60 - Cl_StbRinsesecondscounter );
   a74cc:	4b0c      	ldr	r3, [pc, #48]	; (a7500 <Cl_StabyRinse_UpdateTimeInfo+0x98>)
   a74ce:	681b      	ldr	r3, [r3, #0]
   a74d0:	b2db      	uxtb	r3, r3
   a74d2:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   a74d6:	b2db      	uxtb	r3, r3
   a74d8:	72bb      	strb	r3, [r7, #10]
	
	cl_stby_retval = Cl_SendDatatoconsole(command,&data,7);
   a74da:	7bba      	ldrb	r2, [r7, #14]
   a74dc:	1d3b      	adds	r3, r7, #4
   a74de:	4610      	mov	r0, r2
   a74e0:	4619      	mov	r1, r3
   a74e2:	2207      	movs	r2, #7
   a74e4:	4b07      	ldr	r3, [pc, #28]	; (a7504 <Cl_StabyRinse_UpdateTimeInfo+0x9c>)
   a74e6:	4798      	blx	r3
   a74e8:	4603      	mov	r3, r0
   a74ea:	73fb      	strb	r3, [r7, #15]
	//Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);
	
	return CL_OK;
   a74ec:	2300      	movs	r3, #0
	
 }
   a74ee:	4618      	mov	r0, r3
   a74f0:	3710      	adds	r7, #16
   a74f2:	46bd      	mov	sp, r7
   a74f4:	bd80      	pop	{r7, pc}
   a74f6:	bf00      	nop
   a74f8:	20071e38 	.word	0x20071e38
   a74fc:	20071e34 	.word	0x20071e34
   a7500:	20071e30 	.word	0x20071e30
   a7504:	0009d1e9 	.word	0x0009d1e9

000a7508 <Cl_standby_ProcessAlarms>:
 
 Cl_ReturnCodeType Cl_standby_ProcessAlarms( void)
{
   a7508:	b580      	push	{r7, lr}
   a750a:	b082      	sub	sp, #8
   a750c:	af00      	add	r7, sp, #0

	Cl_ReturnCodeType 	cl_stby_retval = CL_OK;
   a750e:	2300      	movs	r3, #0
   a7510:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type tempcount = 0;
   a7512:	2300      	movs	r3, #0
   a7514:	71fb      	strb	r3, [r7, #7]
	Cl_Uint8Type data[2];
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a7516:	2359      	movs	r3, #89	; 0x59
   a7518:	717b      	strb	r3, [r7, #5]
	
	//cl_wait(10);
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   a751a:	2300      	movs	r3, #0
   a751c:	71fb      	strb	r3, [r7, #7]
   a751e:	e01c      	b.n	a755a <Cl_standby_ProcessAlarms+0x52>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_StandbyAlarmTable[tempcount].IsActive);
   a7520:	79fa      	ldrb	r2, [r7, #7]
   a7522:	4912      	ldr	r1, [pc, #72]	; (a756c <Cl_standby_ProcessAlarms+0x64>)
   a7524:	4613      	mov	r3, r2
   a7526:	00db      	lsls	r3, r3, #3
   a7528:	4413      	add	r3, r2
   a752a:	440b      	add	r3, r1
   a752c:	7819      	ldrb	r1, [r3, #0]
   a752e:	79fa      	ldrb	r2, [r7, #7]
   a7530:	4613      	mov	r3, r2
   a7532:	00db      	lsls	r3, r3, #3
   a7534:	4413      	add	r3, r2
   a7536:	4a0d      	ldr	r2, [pc, #52]	; (a756c <Cl_standby_ProcessAlarms+0x64>)
   a7538:	4413      	add	r3, r2
   a753a:	3304      	adds	r3, #4
   a753c:	4608      	mov	r0, r1
   a753e:	4619      	mov	r1, r3
   a7540:	4b0b      	ldr	r3, [pc, #44]	; (a7570 <Cl_standby_ProcessAlarms+0x68>)
   a7542:	4798      	blx	r3
		if (Cl_StandbyAlarmTable[tempcount].IsActive)
   a7544:	79fa      	ldrb	r2, [r7, #7]
   a7546:	4909      	ldr	r1, [pc, #36]	; (a756c <Cl_standby_ProcessAlarms+0x64>)
   a7548:	4613      	mov	r3, r2
   a754a:	00db      	lsls	r3, r3, #3
   a754c:	4413      	add	r3, r2
   a754e:	440b      	add	r3, r1
   a7550:	791b      	ldrb	r3, [r3, #4]
   a7552:	2b00      	cmp	r3, #0
	Cl_Uint8Type data[2];
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	//cl_wait(10);
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   a7554:	79fb      	ldrb	r3, [r7, #7]
   a7556:	3301      	adds	r3, #1
   a7558:	71fb      	strb	r3, [r7, #7]
   a755a:	79fb      	ldrb	r3, [r7, #7]
   a755c:	2b03      	cmp	r3, #3
   a755e:	d9df      	bls.n	a7520 <Cl_standby_ProcessAlarms+0x18>
			
		}

	}

return (cl_stby_retval );
   a7560:	79bb      	ldrb	r3, [r7, #6]
	   	
}
   a7562:	4618      	mov	r0, r3
   a7564:	3708      	adds	r7, #8
   a7566:	46bd      	mov	sp, r7
   a7568:	bd80      	pop	{r7, pc}
   a756a:	bf00      	nop
   a756c:	20070f70 	.word	0x20070f70
   a7570:	00082c09 	.word	0x00082c09

000a7574 <Cl_standby_UpdateAlarmTable>:

Cl_ReturnCodeType Cl_standby_UpdateAlarmTable(ClStbyAlarmIdType* ClstbyAlarmId )
{
   a7574:	b580      	push	{r7, lr}
   a7576:	b084      	sub	sp, #16
   a7578:	af00      	add	r7, sp, #0
   a757a:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	cl_stby_retval = CL_OK;
   a757c:	2300      	movs	r3, #0
   a757e:	73fb      	strb	r3, [r7, #15]
	Cl_Uint8Type tempcount = 0;
   a7580:	2300      	movs	r3, #0
   a7582:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[2];
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a7584:	2359      	movs	r3, #89	; 0x59
   a7586:	737b      	strb	r3, [r7, #13]
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   a7588:	2300      	movs	r3, #0
   a758a:	73bb      	strb	r3, [r7, #14]
   a758c:	e0b2      	b.n	a76f4 <Cl_standby_UpdateAlarmTable+0x180>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_StandbyAlarmTable[tempcount].IsActive);
   a758e:	7bba      	ldrb	r2, [r7, #14]
   a7590:	495d      	ldr	r1, [pc, #372]	; (a7708 <Cl_standby_UpdateAlarmTable+0x194>)
   a7592:	4613      	mov	r3, r2
   a7594:	00db      	lsls	r3, r3, #3
   a7596:	4413      	add	r3, r2
   a7598:	440b      	add	r3, r1
   a759a:	7819      	ldrb	r1, [r3, #0]
   a759c:	7bba      	ldrb	r2, [r7, #14]
   a759e:	4613      	mov	r3, r2
   a75a0:	00db      	lsls	r3, r3, #3
   a75a2:	4413      	add	r3, r2
   a75a4:	4a58      	ldr	r2, [pc, #352]	; (a7708 <Cl_standby_UpdateAlarmTable+0x194>)
   a75a6:	4413      	add	r3, r2
   a75a8:	3304      	adds	r3, #4
   a75aa:	4608      	mov	r0, r1
   a75ac:	4619      	mov	r1, r3
   a75ae:	4b57      	ldr	r3, [pc, #348]	; (a770c <Cl_standby_UpdateAlarmTable+0x198>)
   a75b0:	4798      	blx	r3
		if (Cl_StandbyAlarmTable[tempcount].IsActive)
   a75b2:	7bba      	ldrb	r2, [r7, #14]
   a75b4:	4954      	ldr	r1, [pc, #336]	; (a7708 <Cl_standby_UpdateAlarmTable+0x194>)
   a75b6:	4613      	mov	r3, r2
   a75b8:	00db      	lsls	r3, r3, #3
   a75ba:	4413      	add	r3, r2
   a75bc:	440b      	add	r3, r1
   a75be:	791b      	ldrb	r3, [r3, #4]
   a75c0:	2b00      	cmp	r3, #0
   a75c2:	d06d      	beq.n	a76a0 <Cl_standby_UpdateAlarmTable+0x12c>
		{
			if(!Cl_StandbyAlarmTable[tempcount].IsRaised)
   a75c4:	7bba      	ldrb	r2, [r7, #14]
   a75c6:	4950      	ldr	r1, [pc, #320]	; (a7708 <Cl_standby_UpdateAlarmTable+0x194>)
   a75c8:	4613      	mov	r3, r2
   a75ca:	00db      	lsls	r3, r3, #3
   a75cc:	4413      	add	r3, r2
   a75ce:	440b      	add	r3, r1
   a75d0:	795b      	ldrb	r3, [r3, #5]
   a75d2:	f083 0301 	eor.w	r3, r3, #1
   a75d6:	b2db      	uxtb	r3, r3
   a75d8:	2b00      	cmp	r3, #0
   a75da:	d01e      	beq.n	a761a <Cl_standby_UpdateAlarmTable+0xa6>
				{
					data[0] = (Cl_Uint8Type)Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId;
   a75dc:	7bba      	ldrb	r2, [r7, #14]
   a75de:	494a      	ldr	r1, [pc, #296]	; (a7708 <Cl_standby_UpdateAlarmTable+0x194>)
   a75e0:	4613      	mov	r3, r2
   a75e2:	00db      	lsls	r3, r3, #3
   a75e4:	4413      	add	r3, r2
   a75e6:	440b      	add	r3, r1
   a75e8:	781b      	ldrb	r3, [r3, #0]
   a75ea:	723b      	strb	r3, [r7, #8]
					data[1] = 1;
   a75ec:	2301      	movs	r3, #1
   a75ee:	727b      	strb	r3, [r7, #9]
					command = CON_TX_COMMAND_ALARM;
   a75f0:	2307      	movs	r3, #7
   a75f2:	737b      	strb	r3, [r7, #13]
					cl_stby_retval = Cl_SendDatatoconsole(command,&data,2);
   a75f4:	7b7a      	ldrb	r2, [r7, #13]
   a75f6:	f107 0308 	add.w	r3, r7, #8
   a75fa:	4610      	mov	r0, r2
   a75fc:	4619      	mov	r1, r3
   a75fe:	2202      	movs	r2, #2
   a7600:	4b43      	ldr	r3, [pc, #268]	; (a7710 <Cl_standby_UpdateAlarmTable+0x19c>)
   a7602:	4798      	blx	r3
   a7604:	4603      	mov	r3, r0
   a7606:	73fb      	strb	r3, [r7, #15]
					Cl_StandbyAlarmTable[tempcount].IsRaised = true;
   a7608:	7bba      	ldrb	r2, [r7, #14]
   a760a:	493f      	ldr	r1, [pc, #252]	; (a7708 <Cl_standby_UpdateAlarmTable+0x194>)
   a760c:	4613      	mov	r3, r2
   a760e:	00db      	lsls	r3, r3, #3
   a7610:	4413      	add	r3, r2
   a7612:	440b      	add	r3, r1
   a7614:	2201      	movs	r2, #1
   a7616:	715a      	strb	r2, [r3, #5]
   a7618:	e069      	b.n	a76ee <Cl_standby_UpdateAlarmTable+0x17a>
					
			
				}
				else
				{
					Cl_StandbyAlarmTable[tempcount].alarmseccount++;
   a761a:	7bba      	ldrb	r2, [r7, #14]
   a761c:	493a      	ldr	r1, [pc, #232]	; (a7708 <Cl_standby_UpdateAlarmTable+0x194>)
   a761e:	4613      	mov	r3, r2
   a7620:	00db      	lsls	r3, r3, #3
   a7622:	4413      	add	r3, r2
   a7624:	440b      	add	r3, r1
   a7626:	785b      	ldrb	r3, [r3, #1]
   a7628:	3301      	adds	r3, #1
   a762a:	b2d8      	uxtb	r0, r3
   a762c:	4936      	ldr	r1, [pc, #216]	; (a7708 <Cl_standby_UpdateAlarmTable+0x194>)
   a762e:	4613      	mov	r3, r2
   a7630:	00db      	lsls	r3, r3, #3
   a7632:	4413      	add	r3, r2
   a7634:	440b      	add	r3, r1
   a7636:	4602      	mov	r2, r0
   a7638:	705a      	strb	r2, [r3, #1]
					Cl_StandbyAlarmTable[tempcount].alarm5seccount++;
   a763a:	7bba      	ldrb	r2, [r7, #14]
   a763c:	4932      	ldr	r1, [pc, #200]	; (a7708 <Cl_standby_UpdateAlarmTable+0x194>)
   a763e:	4613      	mov	r3, r2
   a7640:	00db      	lsls	r3, r3, #3
   a7642:	4413      	add	r3, r2
   a7644:	440b      	add	r3, r1
   a7646:	78db      	ldrb	r3, [r3, #3]
   a7648:	3301      	adds	r3, #1
   a764a:	b2d8      	uxtb	r0, r3
   a764c:	492e      	ldr	r1, [pc, #184]	; (a7708 <Cl_standby_UpdateAlarmTable+0x194>)
   a764e:	4613      	mov	r3, r2
   a7650:	00db      	lsls	r3, r3, #3
   a7652:	4413      	add	r3, r2
   a7654:	440b      	add	r3, r1
   a7656:	4602      	mov	r2, r0
   a7658:	70da      	strb	r2, [r3, #3]
					
					if (Cl_StandbyAlarmTable[tempcount].alarmseccount > 5 )
   a765a:	7bba      	ldrb	r2, [r7, #14]
   a765c:	492a      	ldr	r1, [pc, #168]	; (a7708 <Cl_standby_UpdateAlarmTable+0x194>)
   a765e:	4613      	mov	r3, r2
   a7660:	00db      	lsls	r3, r3, #3
   a7662:	4413      	add	r3, r2
   a7664:	440b      	add	r3, r1
   a7666:	785b      	ldrb	r3, [r3, #1]
   a7668:	2b05      	cmp	r3, #5
   a766a:	d907      	bls.n	a767c <Cl_standby_UpdateAlarmTable+0x108>
					{
						// do  5 sec action
						Cl_StandbyAlarmTable[tempcount].alarm5seccount = 0;
   a766c:	7bba      	ldrb	r2, [r7, #14]
   a766e:	4926      	ldr	r1, [pc, #152]	; (a7708 <Cl_standby_UpdateAlarmTable+0x194>)
   a7670:	4613      	mov	r3, r2
   a7672:	00db      	lsls	r3, r3, #3
   a7674:	4413      	add	r3, r2
   a7676:	440b      	add	r3, r1
   a7678:	2200      	movs	r2, #0
   a767a:	70da      	strb	r2, [r3, #3]
					}
					if (Cl_StandbyAlarmTable[tempcount].alarmseccount >= 60 )
   a767c:	7bba      	ldrb	r2, [r7, #14]
   a767e:	4922      	ldr	r1, [pc, #136]	; (a7708 <Cl_standby_UpdateAlarmTable+0x194>)
   a7680:	4613      	mov	r3, r2
   a7682:	00db      	lsls	r3, r3, #3
   a7684:	4413      	add	r3, r2
   a7686:	440b      	add	r3, r1
   a7688:	785b      	ldrb	r3, [r3, #1]
   a768a:	2b3b      	cmp	r3, #59	; 0x3b
   a768c:	d92f      	bls.n	a76ee <Cl_standby_UpdateAlarmTable+0x17a>
					{
						// do 1 min action
						Cl_StandbyAlarmTable[tempcount].alarmseccount = 0;
   a768e:	7bba      	ldrb	r2, [r7, #14]
   a7690:	491d      	ldr	r1, [pc, #116]	; (a7708 <Cl_standby_UpdateAlarmTable+0x194>)
   a7692:	4613      	mov	r3, r2
   a7694:	00db      	lsls	r3, r3, #3
   a7696:	4413      	add	r3, r2
   a7698:	440b      	add	r3, r1
   a769a:	2200      	movs	r2, #0
   a769c:	705a      	strb	r2, [r3, #1]
   a769e:	e026      	b.n	a76ee <Cl_standby_UpdateAlarmTable+0x17a>
			
		}
		else
		{
			// alarm was present before , but not active now.
			if(Cl_StandbyAlarmTable[tempcount].IsRaised)
   a76a0:	7bba      	ldrb	r2, [r7, #14]
   a76a2:	4919      	ldr	r1, [pc, #100]	; (a7708 <Cl_standby_UpdateAlarmTable+0x194>)
   a76a4:	4613      	mov	r3, r2
   a76a6:	00db      	lsls	r3, r3, #3
   a76a8:	4413      	add	r3, r2
   a76aa:	440b      	add	r3, r1
   a76ac:	795b      	ldrb	r3, [r3, #5]
   a76ae:	2b00      	cmp	r3, #0
   a76b0:	d01d      	beq.n	a76ee <Cl_standby_UpdateAlarmTable+0x17a>
			{
				
				Cl_StandbyAlarmTable[tempcount].IsRaised = false;
   a76b2:	7bba      	ldrb	r2, [r7, #14]
   a76b4:	4914      	ldr	r1, [pc, #80]	; (a7708 <Cl_standby_UpdateAlarmTable+0x194>)
   a76b6:	4613      	mov	r3, r2
   a76b8:	00db      	lsls	r3, r3, #3
   a76ba:	4413      	add	r3, r2
   a76bc:	440b      	add	r3, r1
   a76be:	2200      	movs	r2, #0
   a76c0:	715a      	strb	r2, [r3, #5]
				command = CON_TX_COMMAND_ALARM;
   a76c2:	2307      	movs	r3, #7
   a76c4:	737b      	strb	r3, [r7, #13]
				data[0] = (Cl_Uint8Type)(Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId);
   a76c6:	7bba      	ldrb	r2, [r7, #14]
   a76c8:	490f      	ldr	r1, [pc, #60]	; (a7708 <Cl_standby_UpdateAlarmTable+0x194>)
   a76ca:	4613      	mov	r3, r2
   a76cc:	00db      	lsls	r3, r3, #3
   a76ce:	4413      	add	r3, r2
   a76d0:	440b      	add	r3, r1
   a76d2:	781b      	ldrb	r3, [r3, #0]
   a76d4:	723b      	strb	r3, [r7, #8]
				data[1] = (Cl_Uint8Type) 0;
   a76d6:	2300      	movs	r3, #0
   a76d8:	727b      	strb	r3, [r7, #9]
				cl_stby_retval = Cl_SendDatatoconsole(command,&data,2);
   a76da:	7b7a      	ldrb	r2, [r7, #13]
   a76dc:	f107 0308 	add.w	r3, r7, #8
   a76e0:	4610      	mov	r0, r2
   a76e2:	4619      	mov	r1, r3
   a76e4:	2202      	movs	r2, #2
   a76e6:	4b0a      	ldr	r3, [pc, #40]	; (a7710 <Cl_standby_UpdateAlarmTable+0x19c>)
   a76e8:	4798      	blx	r3
   a76ea:	4603      	mov	r3, r0
   a76ec:	73fb      	strb	r3, [r7, #15]
	Cl_Uint8Type tempcount = 0;
	Cl_Uint8Type data[2];
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   a76ee:	7bbb      	ldrb	r3, [r7, #14]
   a76f0:	3301      	adds	r3, #1
   a76f2:	73bb      	strb	r3, [r7, #14]
   a76f4:	7bbb      	ldrb	r3, [r7, #14]
   a76f6:	2b03      	cmp	r3, #3
   a76f8:	f67f af49 	bls.w	a758e <Cl_standby_UpdateAlarmTable+0x1a>

		}	

	}

return (cl_stby_retval );
   a76fc:	7bfb      	ldrb	r3, [r7, #15]
}
   a76fe:	4618      	mov	r0, r3
   a7700:	3710      	adds	r7, #16
   a7702:	46bd      	mov	sp, r7
   a7704:	bd80      	pop	{r7, pc}
   a7706:	bf00      	nop
   a7708:	20070f70 	.word	0x20070f70
   a770c:	00082c09 	.word	0x00082c09
   a7710:	0009d1e9 	.word	0x0009d1e9

000a7714 <__aeabi_drsub>:
   a7714:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   a7718:	e002      	b.n	a7720 <__adddf3>
   a771a:	bf00      	nop

000a771c <__aeabi_dsub>:
   a771c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000a7720 <__adddf3>:
   a7720:	b530      	push	{r4, r5, lr}
   a7722:	ea4f 0441 	mov.w	r4, r1, lsl #1
   a7726:	ea4f 0543 	mov.w	r5, r3, lsl #1
   a772a:	ea94 0f05 	teq	r4, r5
   a772e:	bf08      	it	eq
   a7730:	ea90 0f02 	teqeq	r0, r2
   a7734:	bf1f      	itttt	ne
   a7736:	ea54 0c00 	orrsne.w	ip, r4, r0
   a773a:	ea55 0c02 	orrsne.w	ip, r5, r2
   a773e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   a7742:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   a7746:	f000 80e2 	beq.w	a790e <__adddf3+0x1ee>
   a774a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   a774e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   a7752:	bfb8      	it	lt
   a7754:	426d      	neglt	r5, r5
   a7756:	dd0c      	ble.n	a7772 <__adddf3+0x52>
   a7758:	442c      	add	r4, r5
   a775a:	ea80 0202 	eor.w	r2, r0, r2
   a775e:	ea81 0303 	eor.w	r3, r1, r3
   a7762:	ea82 0000 	eor.w	r0, r2, r0
   a7766:	ea83 0101 	eor.w	r1, r3, r1
   a776a:	ea80 0202 	eor.w	r2, r0, r2
   a776e:	ea81 0303 	eor.w	r3, r1, r3
   a7772:	2d36      	cmp	r5, #54	; 0x36
   a7774:	bf88      	it	hi
   a7776:	bd30      	pophi	{r4, r5, pc}
   a7778:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   a777c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   a7780:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   a7784:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   a7788:	d002      	beq.n	a7790 <__adddf3+0x70>
   a778a:	4240      	negs	r0, r0
   a778c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   a7790:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   a7794:	ea4f 3303 	mov.w	r3, r3, lsl #12
   a7798:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   a779c:	d002      	beq.n	a77a4 <__adddf3+0x84>
   a779e:	4252      	negs	r2, r2
   a77a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   a77a4:	ea94 0f05 	teq	r4, r5
   a77a8:	f000 80a7 	beq.w	a78fa <__adddf3+0x1da>
   a77ac:	f1a4 0401 	sub.w	r4, r4, #1
   a77b0:	f1d5 0e20 	rsbs	lr, r5, #32
   a77b4:	db0d      	blt.n	a77d2 <__adddf3+0xb2>
   a77b6:	fa02 fc0e 	lsl.w	ip, r2, lr
   a77ba:	fa22 f205 	lsr.w	r2, r2, r5
   a77be:	1880      	adds	r0, r0, r2
   a77c0:	f141 0100 	adc.w	r1, r1, #0
   a77c4:	fa03 f20e 	lsl.w	r2, r3, lr
   a77c8:	1880      	adds	r0, r0, r2
   a77ca:	fa43 f305 	asr.w	r3, r3, r5
   a77ce:	4159      	adcs	r1, r3
   a77d0:	e00e      	b.n	a77f0 <__adddf3+0xd0>
   a77d2:	f1a5 0520 	sub.w	r5, r5, #32
   a77d6:	f10e 0e20 	add.w	lr, lr, #32
   a77da:	2a01      	cmp	r2, #1
   a77dc:	fa03 fc0e 	lsl.w	ip, r3, lr
   a77e0:	bf28      	it	cs
   a77e2:	f04c 0c02 	orrcs.w	ip, ip, #2
   a77e6:	fa43 f305 	asr.w	r3, r3, r5
   a77ea:	18c0      	adds	r0, r0, r3
   a77ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   a77f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   a77f4:	d507      	bpl.n	a7806 <__adddf3+0xe6>
   a77f6:	f04f 0e00 	mov.w	lr, #0
   a77fa:	f1dc 0c00 	rsbs	ip, ip, #0
   a77fe:	eb7e 0000 	sbcs.w	r0, lr, r0
   a7802:	eb6e 0101 	sbc.w	r1, lr, r1
   a7806:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   a780a:	d31b      	bcc.n	a7844 <__adddf3+0x124>
   a780c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   a7810:	d30c      	bcc.n	a782c <__adddf3+0x10c>
   a7812:	0849      	lsrs	r1, r1, #1
   a7814:	ea5f 0030 	movs.w	r0, r0, rrx
   a7818:	ea4f 0c3c 	mov.w	ip, ip, rrx
   a781c:	f104 0401 	add.w	r4, r4, #1
   a7820:	ea4f 5244 	mov.w	r2, r4, lsl #21
   a7824:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   a7828:	f080 809a 	bcs.w	a7960 <__adddf3+0x240>
   a782c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   a7830:	bf08      	it	eq
   a7832:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   a7836:	f150 0000 	adcs.w	r0, r0, #0
   a783a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   a783e:	ea41 0105 	orr.w	r1, r1, r5
   a7842:	bd30      	pop	{r4, r5, pc}
   a7844:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   a7848:	4140      	adcs	r0, r0
   a784a:	eb41 0101 	adc.w	r1, r1, r1
   a784e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a7852:	f1a4 0401 	sub.w	r4, r4, #1
   a7856:	d1e9      	bne.n	a782c <__adddf3+0x10c>
   a7858:	f091 0f00 	teq	r1, #0
   a785c:	bf04      	itt	eq
   a785e:	4601      	moveq	r1, r0
   a7860:	2000      	moveq	r0, #0
   a7862:	fab1 f381 	clz	r3, r1
   a7866:	bf08      	it	eq
   a7868:	3320      	addeq	r3, #32
   a786a:	f1a3 030b 	sub.w	r3, r3, #11
   a786e:	f1b3 0220 	subs.w	r2, r3, #32
   a7872:	da0c      	bge.n	a788e <__adddf3+0x16e>
   a7874:	320c      	adds	r2, #12
   a7876:	dd08      	ble.n	a788a <__adddf3+0x16a>
   a7878:	f102 0c14 	add.w	ip, r2, #20
   a787c:	f1c2 020c 	rsb	r2, r2, #12
   a7880:	fa01 f00c 	lsl.w	r0, r1, ip
   a7884:	fa21 f102 	lsr.w	r1, r1, r2
   a7888:	e00c      	b.n	a78a4 <__adddf3+0x184>
   a788a:	f102 0214 	add.w	r2, r2, #20
   a788e:	bfd8      	it	le
   a7890:	f1c2 0c20 	rsble	ip, r2, #32
   a7894:	fa01 f102 	lsl.w	r1, r1, r2
   a7898:	fa20 fc0c 	lsr.w	ip, r0, ip
   a789c:	bfdc      	itt	le
   a789e:	ea41 010c 	orrle.w	r1, r1, ip
   a78a2:	4090      	lslle	r0, r2
   a78a4:	1ae4      	subs	r4, r4, r3
   a78a6:	bfa2      	ittt	ge
   a78a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   a78ac:	4329      	orrge	r1, r5
   a78ae:	bd30      	popge	{r4, r5, pc}
   a78b0:	ea6f 0404 	mvn.w	r4, r4
   a78b4:	3c1f      	subs	r4, #31
   a78b6:	da1c      	bge.n	a78f2 <__adddf3+0x1d2>
   a78b8:	340c      	adds	r4, #12
   a78ba:	dc0e      	bgt.n	a78da <__adddf3+0x1ba>
   a78bc:	f104 0414 	add.w	r4, r4, #20
   a78c0:	f1c4 0220 	rsb	r2, r4, #32
   a78c4:	fa20 f004 	lsr.w	r0, r0, r4
   a78c8:	fa01 f302 	lsl.w	r3, r1, r2
   a78cc:	ea40 0003 	orr.w	r0, r0, r3
   a78d0:	fa21 f304 	lsr.w	r3, r1, r4
   a78d4:	ea45 0103 	orr.w	r1, r5, r3
   a78d8:	bd30      	pop	{r4, r5, pc}
   a78da:	f1c4 040c 	rsb	r4, r4, #12
   a78de:	f1c4 0220 	rsb	r2, r4, #32
   a78e2:	fa20 f002 	lsr.w	r0, r0, r2
   a78e6:	fa01 f304 	lsl.w	r3, r1, r4
   a78ea:	ea40 0003 	orr.w	r0, r0, r3
   a78ee:	4629      	mov	r1, r5
   a78f0:	bd30      	pop	{r4, r5, pc}
   a78f2:	fa21 f004 	lsr.w	r0, r1, r4
   a78f6:	4629      	mov	r1, r5
   a78f8:	bd30      	pop	{r4, r5, pc}
   a78fa:	f094 0f00 	teq	r4, #0
   a78fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   a7902:	bf06      	itte	eq
   a7904:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   a7908:	3401      	addeq	r4, #1
   a790a:	3d01      	subne	r5, #1
   a790c:	e74e      	b.n	a77ac <__adddf3+0x8c>
   a790e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   a7912:	bf18      	it	ne
   a7914:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   a7918:	d029      	beq.n	a796e <__adddf3+0x24e>
   a791a:	ea94 0f05 	teq	r4, r5
   a791e:	bf08      	it	eq
   a7920:	ea90 0f02 	teqeq	r0, r2
   a7924:	d005      	beq.n	a7932 <__adddf3+0x212>
   a7926:	ea54 0c00 	orrs.w	ip, r4, r0
   a792a:	bf04      	itt	eq
   a792c:	4619      	moveq	r1, r3
   a792e:	4610      	moveq	r0, r2
   a7930:	bd30      	pop	{r4, r5, pc}
   a7932:	ea91 0f03 	teq	r1, r3
   a7936:	bf1e      	ittt	ne
   a7938:	2100      	movne	r1, #0
   a793a:	2000      	movne	r0, #0
   a793c:	bd30      	popne	{r4, r5, pc}
   a793e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   a7942:	d105      	bne.n	a7950 <__adddf3+0x230>
   a7944:	0040      	lsls	r0, r0, #1
   a7946:	4149      	adcs	r1, r1
   a7948:	bf28      	it	cs
   a794a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   a794e:	bd30      	pop	{r4, r5, pc}
   a7950:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   a7954:	bf3c      	itt	cc
   a7956:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   a795a:	bd30      	popcc	{r4, r5, pc}
   a795c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   a7960:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   a7964:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   a7968:	f04f 0000 	mov.w	r0, #0
   a796c:	bd30      	pop	{r4, r5, pc}
   a796e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   a7972:	bf1a      	itte	ne
   a7974:	4619      	movne	r1, r3
   a7976:	4610      	movne	r0, r2
   a7978:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   a797c:	bf1c      	itt	ne
   a797e:	460b      	movne	r3, r1
   a7980:	4602      	movne	r2, r0
   a7982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   a7986:	bf06      	itte	eq
   a7988:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   a798c:	ea91 0f03 	teqeq	r1, r3
   a7990:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   a7994:	bd30      	pop	{r4, r5, pc}
   a7996:	bf00      	nop

000a7998 <__aeabi_ui2d>:
   a7998:	f090 0f00 	teq	r0, #0
   a799c:	bf04      	itt	eq
   a799e:	2100      	moveq	r1, #0
   a79a0:	4770      	bxeq	lr
   a79a2:	b530      	push	{r4, r5, lr}
   a79a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   a79a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   a79ac:	f04f 0500 	mov.w	r5, #0
   a79b0:	f04f 0100 	mov.w	r1, #0
   a79b4:	e750      	b.n	a7858 <__adddf3+0x138>
   a79b6:	bf00      	nop

000a79b8 <__aeabi_i2d>:
   a79b8:	f090 0f00 	teq	r0, #0
   a79bc:	bf04      	itt	eq
   a79be:	2100      	moveq	r1, #0
   a79c0:	4770      	bxeq	lr
   a79c2:	b530      	push	{r4, r5, lr}
   a79c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   a79c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   a79cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   a79d0:	bf48      	it	mi
   a79d2:	4240      	negmi	r0, r0
   a79d4:	f04f 0100 	mov.w	r1, #0
   a79d8:	e73e      	b.n	a7858 <__adddf3+0x138>
   a79da:	bf00      	nop

000a79dc <__aeabi_f2d>:
   a79dc:	0042      	lsls	r2, r0, #1
   a79de:	ea4f 01e2 	mov.w	r1, r2, asr #3
   a79e2:	ea4f 0131 	mov.w	r1, r1, rrx
   a79e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   a79ea:	bf1f      	itttt	ne
   a79ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   a79f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   a79f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   a79f8:	4770      	bxne	lr
   a79fa:	f092 0f00 	teq	r2, #0
   a79fe:	bf14      	ite	ne
   a7a00:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   a7a04:	4770      	bxeq	lr
   a7a06:	b530      	push	{r4, r5, lr}
   a7a08:	f44f 7460 	mov.w	r4, #896	; 0x380
   a7a0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   a7a10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   a7a14:	e720      	b.n	a7858 <__adddf3+0x138>
   a7a16:	bf00      	nop

000a7a18 <__aeabi_ul2d>:
   a7a18:	ea50 0201 	orrs.w	r2, r0, r1
   a7a1c:	bf08      	it	eq
   a7a1e:	4770      	bxeq	lr
   a7a20:	b530      	push	{r4, r5, lr}
   a7a22:	f04f 0500 	mov.w	r5, #0
   a7a26:	e00a      	b.n	a7a3e <__aeabi_l2d+0x16>

000a7a28 <__aeabi_l2d>:
   a7a28:	ea50 0201 	orrs.w	r2, r0, r1
   a7a2c:	bf08      	it	eq
   a7a2e:	4770      	bxeq	lr
   a7a30:	b530      	push	{r4, r5, lr}
   a7a32:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   a7a36:	d502      	bpl.n	a7a3e <__aeabi_l2d+0x16>
   a7a38:	4240      	negs	r0, r0
   a7a3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   a7a3e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   a7a42:	f104 0432 	add.w	r4, r4, #50	; 0x32
   a7a46:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   a7a4a:	f43f aedc 	beq.w	a7806 <__adddf3+0xe6>
   a7a4e:	f04f 0203 	mov.w	r2, #3
   a7a52:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   a7a56:	bf18      	it	ne
   a7a58:	3203      	addne	r2, #3
   a7a5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   a7a5e:	bf18      	it	ne
   a7a60:	3203      	addne	r2, #3
   a7a62:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   a7a66:	f1c2 0320 	rsb	r3, r2, #32
   a7a6a:	fa00 fc03 	lsl.w	ip, r0, r3
   a7a6e:	fa20 f002 	lsr.w	r0, r0, r2
   a7a72:	fa01 fe03 	lsl.w	lr, r1, r3
   a7a76:	ea40 000e 	orr.w	r0, r0, lr
   a7a7a:	fa21 f102 	lsr.w	r1, r1, r2
   a7a7e:	4414      	add	r4, r2
   a7a80:	e6c1      	b.n	a7806 <__adddf3+0xe6>
   a7a82:	bf00      	nop

000a7a84 <__aeabi_dmul>:
   a7a84:	b570      	push	{r4, r5, r6, lr}
   a7a86:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a7a8a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   a7a8e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   a7a92:	bf1d      	ittte	ne
   a7a94:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   a7a98:	ea94 0f0c 	teqne	r4, ip
   a7a9c:	ea95 0f0c 	teqne	r5, ip
   a7aa0:	f000 f8de 	bleq	a7c60 <__aeabi_dmul+0x1dc>
   a7aa4:	442c      	add	r4, r5
   a7aa6:	ea81 0603 	eor.w	r6, r1, r3
   a7aaa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   a7aae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   a7ab2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   a7ab6:	bf18      	it	ne
   a7ab8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   a7abc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a7ac0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   a7ac4:	d038      	beq.n	a7b38 <__aeabi_dmul+0xb4>
   a7ac6:	fba0 ce02 	umull	ip, lr, r0, r2
   a7aca:	f04f 0500 	mov.w	r5, #0
   a7ace:	fbe1 e502 	umlal	lr, r5, r1, r2
   a7ad2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   a7ad6:	fbe0 e503 	umlal	lr, r5, r0, r3
   a7ada:	f04f 0600 	mov.w	r6, #0
   a7ade:	fbe1 5603 	umlal	r5, r6, r1, r3
   a7ae2:	f09c 0f00 	teq	ip, #0
   a7ae6:	bf18      	it	ne
   a7ae8:	f04e 0e01 	orrne.w	lr, lr, #1
   a7aec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   a7af0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   a7af4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   a7af8:	d204      	bcs.n	a7b04 <__aeabi_dmul+0x80>
   a7afa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   a7afe:	416d      	adcs	r5, r5
   a7b00:	eb46 0606 	adc.w	r6, r6, r6
   a7b04:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   a7b08:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   a7b0c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   a7b10:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   a7b14:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   a7b18:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   a7b1c:	bf88      	it	hi
   a7b1e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   a7b22:	d81e      	bhi.n	a7b62 <__aeabi_dmul+0xde>
   a7b24:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   a7b28:	bf08      	it	eq
   a7b2a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   a7b2e:	f150 0000 	adcs.w	r0, r0, #0
   a7b32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   a7b36:	bd70      	pop	{r4, r5, r6, pc}
   a7b38:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   a7b3c:	ea46 0101 	orr.w	r1, r6, r1
   a7b40:	ea40 0002 	orr.w	r0, r0, r2
   a7b44:	ea81 0103 	eor.w	r1, r1, r3
   a7b48:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   a7b4c:	bfc2      	ittt	gt
   a7b4e:	ebd4 050c 	rsbsgt	r5, r4, ip
   a7b52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   a7b56:	bd70      	popgt	{r4, r5, r6, pc}
   a7b58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a7b5c:	f04f 0e00 	mov.w	lr, #0
   a7b60:	3c01      	subs	r4, #1
   a7b62:	f300 80ab 	bgt.w	a7cbc <__aeabi_dmul+0x238>
   a7b66:	f114 0f36 	cmn.w	r4, #54	; 0x36
   a7b6a:	bfde      	ittt	le
   a7b6c:	2000      	movle	r0, #0
   a7b6e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   a7b72:	bd70      	pople	{r4, r5, r6, pc}
   a7b74:	f1c4 0400 	rsb	r4, r4, #0
   a7b78:	3c20      	subs	r4, #32
   a7b7a:	da35      	bge.n	a7be8 <__aeabi_dmul+0x164>
   a7b7c:	340c      	adds	r4, #12
   a7b7e:	dc1b      	bgt.n	a7bb8 <__aeabi_dmul+0x134>
   a7b80:	f104 0414 	add.w	r4, r4, #20
   a7b84:	f1c4 0520 	rsb	r5, r4, #32
   a7b88:	fa00 f305 	lsl.w	r3, r0, r5
   a7b8c:	fa20 f004 	lsr.w	r0, r0, r4
   a7b90:	fa01 f205 	lsl.w	r2, r1, r5
   a7b94:	ea40 0002 	orr.w	r0, r0, r2
   a7b98:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   a7b9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   a7ba0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   a7ba4:	fa21 f604 	lsr.w	r6, r1, r4
   a7ba8:	eb42 0106 	adc.w	r1, r2, r6
   a7bac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   a7bb0:	bf08      	it	eq
   a7bb2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   a7bb6:	bd70      	pop	{r4, r5, r6, pc}
   a7bb8:	f1c4 040c 	rsb	r4, r4, #12
   a7bbc:	f1c4 0520 	rsb	r5, r4, #32
   a7bc0:	fa00 f304 	lsl.w	r3, r0, r4
   a7bc4:	fa20 f005 	lsr.w	r0, r0, r5
   a7bc8:	fa01 f204 	lsl.w	r2, r1, r4
   a7bcc:	ea40 0002 	orr.w	r0, r0, r2
   a7bd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a7bd4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   a7bd8:	f141 0100 	adc.w	r1, r1, #0
   a7bdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   a7be0:	bf08      	it	eq
   a7be2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   a7be6:	bd70      	pop	{r4, r5, r6, pc}
   a7be8:	f1c4 0520 	rsb	r5, r4, #32
   a7bec:	fa00 f205 	lsl.w	r2, r0, r5
   a7bf0:	ea4e 0e02 	orr.w	lr, lr, r2
   a7bf4:	fa20 f304 	lsr.w	r3, r0, r4
   a7bf8:	fa01 f205 	lsl.w	r2, r1, r5
   a7bfc:	ea43 0302 	orr.w	r3, r3, r2
   a7c00:	fa21 f004 	lsr.w	r0, r1, r4
   a7c04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a7c08:	fa21 f204 	lsr.w	r2, r1, r4
   a7c0c:	ea20 0002 	bic.w	r0, r0, r2
   a7c10:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   a7c14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   a7c18:	bf08      	it	eq
   a7c1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   a7c1e:	bd70      	pop	{r4, r5, r6, pc}
   a7c20:	f094 0f00 	teq	r4, #0
   a7c24:	d10f      	bne.n	a7c46 <__aeabi_dmul+0x1c2>
   a7c26:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   a7c2a:	0040      	lsls	r0, r0, #1
   a7c2c:	eb41 0101 	adc.w	r1, r1, r1
   a7c30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a7c34:	bf08      	it	eq
   a7c36:	3c01      	subeq	r4, #1
   a7c38:	d0f7      	beq.n	a7c2a <__aeabi_dmul+0x1a6>
   a7c3a:	ea41 0106 	orr.w	r1, r1, r6
   a7c3e:	f095 0f00 	teq	r5, #0
   a7c42:	bf18      	it	ne
   a7c44:	4770      	bxne	lr
   a7c46:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   a7c4a:	0052      	lsls	r2, r2, #1
   a7c4c:	eb43 0303 	adc.w	r3, r3, r3
   a7c50:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   a7c54:	bf08      	it	eq
   a7c56:	3d01      	subeq	r5, #1
   a7c58:	d0f7      	beq.n	a7c4a <__aeabi_dmul+0x1c6>
   a7c5a:	ea43 0306 	orr.w	r3, r3, r6
   a7c5e:	4770      	bx	lr
   a7c60:	ea94 0f0c 	teq	r4, ip
   a7c64:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   a7c68:	bf18      	it	ne
   a7c6a:	ea95 0f0c 	teqne	r5, ip
   a7c6e:	d00c      	beq.n	a7c8a <__aeabi_dmul+0x206>
   a7c70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   a7c74:	bf18      	it	ne
   a7c76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   a7c7a:	d1d1      	bne.n	a7c20 <__aeabi_dmul+0x19c>
   a7c7c:	ea81 0103 	eor.w	r1, r1, r3
   a7c80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a7c84:	f04f 0000 	mov.w	r0, #0
   a7c88:	bd70      	pop	{r4, r5, r6, pc}
   a7c8a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   a7c8e:	bf06      	itte	eq
   a7c90:	4610      	moveq	r0, r2
   a7c92:	4619      	moveq	r1, r3
   a7c94:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   a7c98:	d019      	beq.n	a7cce <__aeabi_dmul+0x24a>
   a7c9a:	ea94 0f0c 	teq	r4, ip
   a7c9e:	d102      	bne.n	a7ca6 <__aeabi_dmul+0x222>
   a7ca0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   a7ca4:	d113      	bne.n	a7cce <__aeabi_dmul+0x24a>
   a7ca6:	ea95 0f0c 	teq	r5, ip
   a7caa:	d105      	bne.n	a7cb8 <__aeabi_dmul+0x234>
   a7cac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   a7cb0:	bf1c      	itt	ne
   a7cb2:	4610      	movne	r0, r2
   a7cb4:	4619      	movne	r1, r3
   a7cb6:	d10a      	bne.n	a7cce <__aeabi_dmul+0x24a>
   a7cb8:	ea81 0103 	eor.w	r1, r1, r3
   a7cbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a7cc0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   a7cc4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   a7cc8:	f04f 0000 	mov.w	r0, #0
   a7ccc:	bd70      	pop	{r4, r5, r6, pc}
   a7cce:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   a7cd2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   a7cd6:	bd70      	pop	{r4, r5, r6, pc}

000a7cd8 <__aeabi_ddiv>:
   a7cd8:	b570      	push	{r4, r5, r6, lr}
   a7cda:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a7cde:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   a7ce2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   a7ce6:	bf1d      	ittte	ne
   a7ce8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   a7cec:	ea94 0f0c 	teqne	r4, ip
   a7cf0:	ea95 0f0c 	teqne	r5, ip
   a7cf4:	f000 f8a7 	bleq	a7e46 <__aeabi_ddiv+0x16e>
   a7cf8:	eba4 0405 	sub.w	r4, r4, r5
   a7cfc:	ea81 0e03 	eor.w	lr, r1, r3
   a7d00:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   a7d04:	ea4f 3101 	mov.w	r1, r1, lsl #12
   a7d08:	f000 8088 	beq.w	a7e1c <__aeabi_ddiv+0x144>
   a7d0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   a7d10:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   a7d14:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   a7d18:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   a7d1c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   a7d20:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   a7d24:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   a7d28:	ea4f 2600 	mov.w	r6, r0, lsl #8
   a7d2c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   a7d30:	429d      	cmp	r5, r3
   a7d32:	bf08      	it	eq
   a7d34:	4296      	cmpeq	r6, r2
   a7d36:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   a7d3a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   a7d3e:	d202      	bcs.n	a7d46 <__aeabi_ddiv+0x6e>
   a7d40:	085b      	lsrs	r3, r3, #1
   a7d42:	ea4f 0232 	mov.w	r2, r2, rrx
   a7d46:	1ab6      	subs	r6, r6, r2
   a7d48:	eb65 0503 	sbc.w	r5, r5, r3
   a7d4c:	085b      	lsrs	r3, r3, #1
   a7d4e:	ea4f 0232 	mov.w	r2, r2, rrx
   a7d52:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   a7d56:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   a7d5a:	ebb6 0e02 	subs.w	lr, r6, r2
   a7d5e:	eb75 0e03 	sbcs.w	lr, r5, r3
   a7d62:	bf22      	ittt	cs
   a7d64:	1ab6      	subcs	r6, r6, r2
   a7d66:	4675      	movcs	r5, lr
   a7d68:	ea40 000c 	orrcs.w	r0, r0, ip
   a7d6c:	085b      	lsrs	r3, r3, #1
   a7d6e:	ea4f 0232 	mov.w	r2, r2, rrx
   a7d72:	ebb6 0e02 	subs.w	lr, r6, r2
   a7d76:	eb75 0e03 	sbcs.w	lr, r5, r3
   a7d7a:	bf22      	ittt	cs
   a7d7c:	1ab6      	subcs	r6, r6, r2
   a7d7e:	4675      	movcs	r5, lr
   a7d80:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   a7d84:	085b      	lsrs	r3, r3, #1
   a7d86:	ea4f 0232 	mov.w	r2, r2, rrx
   a7d8a:	ebb6 0e02 	subs.w	lr, r6, r2
   a7d8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   a7d92:	bf22      	ittt	cs
   a7d94:	1ab6      	subcs	r6, r6, r2
   a7d96:	4675      	movcs	r5, lr
   a7d98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   a7d9c:	085b      	lsrs	r3, r3, #1
   a7d9e:	ea4f 0232 	mov.w	r2, r2, rrx
   a7da2:	ebb6 0e02 	subs.w	lr, r6, r2
   a7da6:	eb75 0e03 	sbcs.w	lr, r5, r3
   a7daa:	bf22      	ittt	cs
   a7dac:	1ab6      	subcs	r6, r6, r2
   a7dae:	4675      	movcs	r5, lr
   a7db0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   a7db4:	ea55 0e06 	orrs.w	lr, r5, r6
   a7db8:	d018      	beq.n	a7dec <__aeabi_ddiv+0x114>
   a7dba:	ea4f 1505 	mov.w	r5, r5, lsl #4
   a7dbe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   a7dc2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   a7dc6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   a7dca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   a7dce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   a7dd2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   a7dd6:	d1c0      	bne.n	a7d5a <__aeabi_ddiv+0x82>
   a7dd8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a7ddc:	d10b      	bne.n	a7df6 <__aeabi_ddiv+0x11e>
   a7dde:	ea41 0100 	orr.w	r1, r1, r0
   a7de2:	f04f 0000 	mov.w	r0, #0
   a7de6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   a7dea:	e7b6      	b.n	a7d5a <__aeabi_ddiv+0x82>
   a7dec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a7df0:	bf04      	itt	eq
   a7df2:	4301      	orreq	r1, r0
   a7df4:	2000      	moveq	r0, #0
   a7df6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   a7dfa:	bf88      	it	hi
   a7dfc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   a7e00:	f63f aeaf 	bhi.w	a7b62 <__aeabi_dmul+0xde>
   a7e04:	ebb5 0c03 	subs.w	ip, r5, r3
   a7e08:	bf04      	itt	eq
   a7e0a:	ebb6 0c02 	subseq.w	ip, r6, r2
   a7e0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   a7e12:	f150 0000 	adcs.w	r0, r0, #0
   a7e16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   a7e1a:	bd70      	pop	{r4, r5, r6, pc}
   a7e1c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   a7e20:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   a7e24:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   a7e28:	bfc2      	ittt	gt
   a7e2a:	ebd4 050c 	rsbsgt	r5, r4, ip
   a7e2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   a7e32:	bd70      	popgt	{r4, r5, r6, pc}
   a7e34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a7e38:	f04f 0e00 	mov.w	lr, #0
   a7e3c:	3c01      	subs	r4, #1
   a7e3e:	e690      	b.n	a7b62 <__aeabi_dmul+0xde>
   a7e40:	ea45 0e06 	orr.w	lr, r5, r6
   a7e44:	e68d      	b.n	a7b62 <__aeabi_dmul+0xde>
   a7e46:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   a7e4a:	ea94 0f0c 	teq	r4, ip
   a7e4e:	bf08      	it	eq
   a7e50:	ea95 0f0c 	teqeq	r5, ip
   a7e54:	f43f af3b 	beq.w	a7cce <__aeabi_dmul+0x24a>
   a7e58:	ea94 0f0c 	teq	r4, ip
   a7e5c:	d10a      	bne.n	a7e74 <__aeabi_ddiv+0x19c>
   a7e5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   a7e62:	f47f af34 	bne.w	a7cce <__aeabi_dmul+0x24a>
   a7e66:	ea95 0f0c 	teq	r5, ip
   a7e6a:	f47f af25 	bne.w	a7cb8 <__aeabi_dmul+0x234>
   a7e6e:	4610      	mov	r0, r2
   a7e70:	4619      	mov	r1, r3
   a7e72:	e72c      	b.n	a7cce <__aeabi_dmul+0x24a>
   a7e74:	ea95 0f0c 	teq	r5, ip
   a7e78:	d106      	bne.n	a7e88 <__aeabi_ddiv+0x1b0>
   a7e7a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   a7e7e:	f43f aefd 	beq.w	a7c7c <__aeabi_dmul+0x1f8>
   a7e82:	4610      	mov	r0, r2
   a7e84:	4619      	mov	r1, r3
   a7e86:	e722      	b.n	a7cce <__aeabi_dmul+0x24a>
   a7e88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   a7e8c:	bf18      	it	ne
   a7e8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   a7e92:	f47f aec5 	bne.w	a7c20 <__aeabi_dmul+0x19c>
   a7e96:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   a7e9a:	f47f af0d 	bne.w	a7cb8 <__aeabi_dmul+0x234>
   a7e9e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   a7ea2:	f47f aeeb 	bne.w	a7c7c <__aeabi_dmul+0x1f8>
   a7ea6:	e712      	b.n	a7cce <__aeabi_dmul+0x24a>

000a7ea8 <__gedf2>:
   a7ea8:	f04f 3cff 	mov.w	ip, #4294967295
   a7eac:	e006      	b.n	a7ebc <__cmpdf2+0x4>
   a7eae:	bf00      	nop

000a7eb0 <__ledf2>:
   a7eb0:	f04f 0c01 	mov.w	ip, #1
   a7eb4:	e002      	b.n	a7ebc <__cmpdf2+0x4>
   a7eb6:	bf00      	nop

000a7eb8 <__cmpdf2>:
   a7eb8:	f04f 0c01 	mov.w	ip, #1
   a7ebc:	f84d cd04 	str.w	ip, [sp, #-4]!
   a7ec0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   a7ec4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   a7ec8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   a7ecc:	bf18      	it	ne
   a7ece:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   a7ed2:	d01b      	beq.n	a7f0c <__cmpdf2+0x54>
   a7ed4:	b001      	add	sp, #4
   a7ed6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   a7eda:	bf0c      	ite	eq
   a7edc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   a7ee0:	ea91 0f03 	teqne	r1, r3
   a7ee4:	bf02      	ittt	eq
   a7ee6:	ea90 0f02 	teqeq	r0, r2
   a7eea:	2000      	moveq	r0, #0
   a7eec:	4770      	bxeq	lr
   a7eee:	f110 0f00 	cmn.w	r0, #0
   a7ef2:	ea91 0f03 	teq	r1, r3
   a7ef6:	bf58      	it	pl
   a7ef8:	4299      	cmppl	r1, r3
   a7efa:	bf08      	it	eq
   a7efc:	4290      	cmpeq	r0, r2
   a7efe:	bf2c      	ite	cs
   a7f00:	17d8      	asrcs	r0, r3, #31
   a7f02:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   a7f06:	f040 0001 	orr.w	r0, r0, #1
   a7f0a:	4770      	bx	lr
   a7f0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   a7f10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   a7f14:	d102      	bne.n	a7f1c <__cmpdf2+0x64>
   a7f16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   a7f1a:	d107      	bne.n	a7f2c <__cmpdf2+0x74>
   a7f1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   a7f20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   a7f24:	d1d6      	bne.n	a7ed4 <__cmpdf2+0x1c>
   a7f26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   a7f2a:	d0d3      	beq.n	a7ed4 <__cmpdf2+0x1c>
   a7f2c:	f85d 0b04 	ldr.w	r0, [sp], #4
   a7f30:	4770      	bx	lr
   a7f32:	bf00      	nop

000a7f34 <__aeabi_cdrcmple>:
   a7f34:	4684      	mov	ip, r0
   a7f36:	4610      	mov	r0, r2
   a7f38:	4662      	mov	r2, ip
   a7f3a:	468c      	mov	ip, r1
   a7f3c:	4619      	mov	r1, r3
   a7f3e:	4663      	mov	r3, ip
   a7f40:	e000      	b.n	a7f44 <__aeabi_cdcmpeq>
   a7f42:	bf00      	nop

000a7f44 <__aeabi_cdcmpeq>:
   a7f44:	b501      	push	{r0, lr}
   a7f46:	f7ff ffb7 	bl	a7eb8 <__cmpdf2>
   a7f4a:	2800      	cmp	r0, #0
   a7f4c:	bf48      	it	mi
   a7f4e:	f110 0f00 	cmnmi.w	r0, #0
   a7f52:	bd01      	pop	{r0, pc}

000a7f54 <__aeabi_dcmpeq>:
   a7f54:	f84d ed08 	str.w	lr, [sp, #-8]!
   a7f58:	f7ff fff4 	bl	a7f44 <__aeabi_cdcmpeq>
   a7f5c:	bf0c      	ite	eq
   a7f5e:	2001      	moveq	r0, #1
   a7f60:	2000      	movne	r0, #0
   a7f62:	f85d fb08 	ldr.w	pc, [sp], #8
   a7f66:	bf00      	nop

000a7f68 <__aeabi_dcmplt>:
   a7f68:	f84d ed08 	str.w	lr, [sp, #-8]!
   a7f6c:	f7ff ffea 	bl	a7f44 <__aeabi_cdcmpeq>
   a7f70:	bf34      	ite	cc
   a7f72:	2001      	movcc	r0, #1
   a7f74:	2000      	movcs	r0, #0
   a7f76:	f85d fb08 	ldr.w	pc, [sp], #8
   a7f7a:	bf00      	nop

000a7f7c <__aeabi_dcmple>:
   a7f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   a7f80:	f7ff ffe0 	bl	a7f44 <__aeabi_cdcmpeq>
   a7f84:	bf94      	ite	ls
   a7f86:	2001      	movls	r0, #1
   a7f88:	2000      	movhi	r0, #0
   a7f8a:	f85d fb08 	ldr.w	pc, [sp], #8
   a7f8e:	bf00      	nop

000a7f90 <__aeabi_dcmpge>:
   a7f90:	f84d ed08 	str.w	lr, [sp, #-8]!
   a7f94:	f7ff ffce 	bl	a7f34 <__aeabi_cdrcmple>
   a7f98:	bf94      	ite	ls
   a7f9a:	2001      	movls	r0, #1
   a7f9c:	2000      	movhi	r0, #0
   a7f9e:	f85d fb08 	ldr.w	pc, [sp], #8
   a7fa2:	bf00      	nop

000a7fa4 <__aeabi_dcmpgt>:
   a7fa4:	f84d ed08 	str.w	lr, [sp, #-8]!
   a7fa8:	f7ff ffc4 	bl	a7f34 <__aeabi_cdrcmple>
   a7fac:	bf34      	ite	cc
   a7fae:	2001      	movcc	r0, #1
   a7fb0:	2000      	movcs	r0, #0
   a7fb2:	f85d fb08 	ldr.w	pc, [sp], #8
   a7fb6:	bf00      	nop

000a7fb8 <__aeabi_d2iz>:
   a7fb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   a7fbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   a7fc0:	d215      	bcs.n	a7fee <__aeabi_d2iz+0x36>
   a7fc2:	d511      	bpl.n	a7fe8 <__aeabi_d2iz+0x30>
   a7fc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   a7fc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   a7fcc:	d912      	bls.n	a7ff4 <__aeabi_d2iz+0x3c>
   a7fce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   a7fd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a7fd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   a7fda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   a7fde:	fa23 f002 	lsr.w	r0, r3, r2
   a7fe2:	bf18      	it	ne
   a7fe4:	4240      	negne	r0, r0
   a7fe6:	4770      	bx	lr
   a7fe8:	f04f 0000 	mov.w	r0, #0
   a7fec:	4770      	bx	lr
   a7fee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   a7ff2:	d105      	bne.n	a8000 <__aeabi_d2iz+0x48>
   a7ff4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   a7ff8:	bf08      	it	eq
   a7ffa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   a7ffe:	4770      	bx	lr
   a8000:	f04f 0000 	mov.w	r0, #0
   a8004:	4770      	bx	lr
   a8006:	bf00      	nop

000a8008 <__aeabi_d2uiz>:
   a8008:	004a      	lsls	r2, r1, #1
   a800a:	d211      	bcs.n	a8030 <__aeabi_d2uiz+0x28>
   a800c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   a8010:	d211      	bcs.n	a8036 <__aeabi_d2uiz+0x2e>
   a8012:	d50d      	bpl.n	a8030 <__aeabi_d2uiz+0x28>
   a8014:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   a8018:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   a801c:	d40e      	bmi.n	a803c <__aeabi_d2uiz+0x34>
   a801e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   a8022:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a8026:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   a802a:	fa23 f002 	lsr.w	r0, r3, r2
   a802e:	4770      	bx	lr
   a8030:	f04f 0000 	mov.w	r0, #0
   a8034:	4770      	bx	lr
   a8036:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   a803a:	d102      	bne.n	a8042 <__aeabi_d2uiz+0x3a>
   a803c:	f04f 30ff 	mov.w	r0, #4294967295
   a8040:	4770      	bx	lr
   a8042:	f04f 0000 	mov.w	r0, #0
   a8046:	4770      	bx	lr

000a8048 <__aeabi_d2f>:
   a8048:	ea4f 0241 	mov.w	r2, r1, lsl #1
   a804c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   a8050:	bf24      	itt	cs
   a8052:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   a8056:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   a805a:	d90d      	bls.n	a8078 <__aeabi_d2f+0x30>
   a805c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   a8060:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   a8064:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   a8068:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   a806c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   a8070:	bf08      	it	eq
   a8072:	f020 0001 	biceq.w	r0, r0, #1
   a8076:	4770      	bx	lr
   a8078:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   a807c:	d121      	bne.n	a80c2 <__aeabi_d2f+0x7a>
   a807e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   a8082:	bfbc      	itt	lt
   a8084:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   a8088:	4770      	bxlt	lr
   a808a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a808e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   a8092:	f1c2 0218 	rsb	r2, r2, #24
   a8096:	f1c2 0c20 	rsb	ip, r2, #32
   a809a:	fa10 f30c 	lsls.w	r3, r0, ip
   a809e:	fa20 f002 	lsr.w	r0, r0, r2
   a80a2:	bf18      	it	ne
   a80a4:	f040 0001 	orrne.w	r0, r0, #1
   a80a8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   a80ac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   a80b0:	fa03 fc0c 	lsl.w	ip, r3, ip
   a80b4:	ea40 000c 	orr.w	r0, r0, ip
   a80b8:	fa23 f302 	lsr.w	r3, r3, r2
   a80bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   a80c0:	e7cc      	b.n	a805c <__aeabi_d2f+0x14>
   a80c2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   a80c6:	d107      	bne.n	a80d8 <__aeabi_d2f+0x90>
   a80c8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   a80cc:	bf1e      	ittt	ne
   a80ce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   a80d2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   a80d6:	4770      	bxne	lr
   a80d8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   a80dc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   a80e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a80e4:	4770      	bx	lr
   a80e6:	bf00      	nop

000a80e8 <__aeabi_frsub>:
   a80e8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   a80ec:	e002      	b.n	a80f4 <__addsf3>
   a80ee:	bf00      	nop

000a80f0 <__aeabi_fsub>:
   a80f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000a80f4 <__addsf3>:
   a80f4:	0042      	lsls	r2, r0, #1
   a80f6:	bf1f      	itttt	ne
   a80f8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   a80fc:	ea92 0f03 	teqne	r2, r3
   a8100:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   a8104:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   a8108:	d06a      	beq.n	a81e0 <__addsf3+0xec>
   a810a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   a810e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   a8112:	bfc1      	itttt	gt
   a8114:	18d2      	addgt	r2, r2, r3
   a8116:	4041      	eorgt	r1, r0
   a8118:	4048      	eorgt	r0, r1
   a811a:	4041      	eorgt	r1, r0
   a811c:	bfb8      	it	lt
   a811e:	425b      	neglt	r3, r3
   a8120:	2b19      	cmp	r3, #25
   a8122:	bf88      	it	hi
   a8124:	4770      	bxhi	lr
   a8126:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   a812a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a812e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   a8132:	bf18      	it	ne
   a8134:	4240      	negne	r0, r0
   a8136:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   a813a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   a813e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   a8142:	bf18      	it	ne
   a8144:	4249      	negne	r1, r1
   a8146:	ea92 0f03 	teq	r2, r3
   a814a:	d03f      	beq.n	a81cc <__addsf3+0xd8>
   a814c:	f1a2 0201 	sub.w	r2, r2, #1
   a8150:	fa41 fc03 	asr.w	ip, r1, r3
   a8154:	eb10 000c 	adds.w	r0, r0, ip
   a8158:	f1c3 0320 	rsb	r3, r3, #32
   a815c:	fa01 f103 	lsl.w	r1, r1, r3
   a8160:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   a8164:	d502      	bpl.n	a816c <__addsf3+0x78>
   a8166:	4249      	negs	r1, r1
   a8168:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   a816c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   a8170:	d313      	bcc.n	a819a <__addsf3+0xa6>
   a8172:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   a8176:	d306      	bcc.n	a8186 <__addsf3+0x92>
   a8178:	0840      	lsrs	r0, r0, #1
   a817a:	ea4f 0131 	mov.w	r1, r1, rrx
   a817e:	f102 0201 	add.w	r2, r2, #1
   a8182:	2afe      	cmp	r2, #254	; 0xfe
   a8184:	d251      	bcs.n	a822a <__addsf3+0x136>
   a8186:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   a818a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   a818e:	bf08      	it	eq
   a8190:	f020 0001 	biceq.w	r0, r0, #1
   a8194:	ea40 0003 	orr.w	r0, r0, r3
   a8198:	4770      	bx	lr
   a819a:	0049      	lsls	r1, r1, #1
   a819c:	eb40 0000 	adc.w	r0, r0, r0
   a81a0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   a81a4:	f1a2 0201 	sub.w	r2, r2, #1
   a81a8:	d1ed      	bne.n	a8186 <__addsf3+0x92>
   a81aa:	fab0 fc80 	clz	ip, r0
   a81ae:	f1ac 0c08 	sub.w	ip, ip, #8
   a81b2:	ebb2 020c 	subs.w	r2, r2, ip
   a81b6:	fa00 f00c 	lsl.w	r0, r0, ip
   a81ba:	bfaa      	itet	ge
   a81bc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   a81c0:	4252      	neglt	r2, r2
   a81c2:	4318      	orrge	r0, r3
   a81c4:	bfbc      	itt	lt
   a81c6:	40d0      	lsrlt	r0, r2
   a81c8:	4318      	orrlt	r0, r3
   a81ca:	4770      	bx	lr
   a81cc:	f092 0f00 	teq	r2, #0
   a81d0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   a81d4:	bf06      	itte	eq
   a81d6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   a81da:	3201      	addeq	r2, #1
   a81dc:	3b01      	subne	r3, #1
   a81de:	e7b5      	b.n	a814c <__addsf3+0x58>
   a81e0:	ea4f 0341 	mov.w	r3, r1, lsl #1
   a81e4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   a81e8:	bf18      	it	ne
   a81ea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   a81ee:	d021      	beq.n	a8234 <__addsf3+0x140>
   a81f0:	ea92 0f03 	teq	r2, r3
   a81f4:	d004      	beq.n	a8200 <__addsf3+0x10c>
   a81f6:	f092 0f00 	teq	r2, #0
   a81fa:	bf08      	it	eq
   a81fc:	4608      	moveq	r0, r1
   a81fe:	4770      	bx	lr
   a8200:	ea90 0f01 	teq	r0, r1
   a8204:	bf1c      	itt	ne
   a8206:	2000      	movne	r0, #0
   a8208:	4770      	bxne	lr
   a820a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   a820e:	d104      	bne.n	a821a <__addsf3+0x126>
   a8210:	0040      	lsls	r0, r0, #1
   a8212:	bf28      	it	cs
   a8214:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   a8218:	4770      	bx	lr
   a821a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   a821e:	bf3c      	itt	cc
   a8220:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   a8224:	4770      	bxcc	lr
   a8226:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   a822a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   a822e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a8232:	4770      	bx	lr
   a8234:	ea7f 6222 	mvns.w	r2, r2, asr #24
   a8238:	bf16      	itet	ne
   a823a:	4608      	movne	r0, r1
   a823c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   a8240:	4601      	movne	r1, r0
   a8242:	0242      	lsls	r2, r0, #9
   a8244:	bf06      	itte	eq
   a8246:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   a824a:	ea90 0f01 	teqeq	r0, r1
   a824e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   a8252:	4770      	bx	lr

000a8254 <__aeabi_ui2f>:
   a8254:	f04f 0300 	mov.w	r3, #0
   a8258:	e004      	b.n	a8264 <__aeabi_i2f+0x8>
   a825a:	bf00      	nop

000a825c <__aeabi_i2f>:
   a825c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   a8260:	bf48      	it	mi
   a8262:	4240      	negmi	r0, r0
   a8264:	ea5f 0c00 	movs.w	ip, r0
   a8268:	bf08      	it	eq
   a826a:	4770      	bxeq	lr
   a826c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   a8270:	4601      	mov	r1, r0
   a8272:	f04f 0000 	mov.w	r0, #0
   a8276:	e01c      	b.n	a82b2 <__aeabi_l2f+0x2a>

000a8278 <__aeabi_ul2f>:
   a8278:	ea50 0201 	orrs.w	r2, r0, r1
   a827c:	bf08      	it	eq
   a827e:	4770      	bxeq	lr
   a8280:	f04f 0300 	mov.w	r3, #0
   a8284:	e00a      	b.n	a829c <__aeabi_l2f+0x14>
   a8286:	bf00      	nop

000a8288 <__aeabi_l2f>:
   a8288:	ea50 0201 	orrs.w	r2, r0, r1
   a828c:	bf08      	it	eq
   a828e:	4770      	bxeq	lr
   a8290:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   a8294:	d502      	bpl.n	a829c <__aeabi_l2f+0x14>
   a8296:	4240      	negs	r0, r0
   a8298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   a829c:	ea5f 0c01 	movs.w	ip, r1
   a82a0:	bf02      	ittt	eq
   a82a2:	4684      	moveq	ip, r0
   a82a4:	4601      	moveq	r1, r0
   a82a6:	2000      	moveq	r0, #0
   a82a8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   a82ac:	bf08      	it	eq
   a82ae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   a82b2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   a82b6:	fabc f28c 	clz	r2, ip
   a82ba:	3a08      	subs	r2, #8
   a82bc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   a82c0:	db10      	blt.n	a82e4 <__aeabi_l2f+0x5c>
   a82c2:	fa01 fc02 	lsl.w	ip, r1, r2
   a82c6:	4463      	add	r3, ip
   a82c8:	fa00 fc02 	lsl.w	ip, r0, r2
   a82cc:	f1c2 0220 	rsb	r2, r2, #32
   a82d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   a82d4:	fa20 f202 	lsr.w	r2, r0, r2
   a82d8:	eb43 0002 	adc.w	r0, r3, r2
   a82dc:	bf08      	it	eq
   a82de:	f020 0001 	biceq.w	r0, r0, #1
   a82e2:	4770      	bx	lr
   a82e4:	f102 0220 	add.w	r2, r2, #32
   a82e8:	fa01 fc02 	lsl.w	ip, r1, r2
   a82ec:	f1c2 0220 	rsb	r2, r2, #32
   a82f0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   a82f4:	fa21 f202 	lsr.w	r2, r1, r2
   a82f8:	eb43 0002 	adc.w	r0, r3, r2
   a82fc:	bf08      	it	eq
   a82fe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   a8302:	4770      	bx	lr

000a8304 <__aeabi_fmul>:
   a8304:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a8308:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   a830c:	bf1e      	ittt	ne
   a830e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   a8312:	ea92 0f0c 	teqne	r2, ip
   a8316:	ea93 0f0c 	teqne	r3, ip
   a831a:	d06f      	beq.n	a83fc <__aeabi_fmul+0xf8>
   a831c:	441a      	add	r2, r3
   a831e:	ea80 0c01 	eor.w	ip, r0, r1
   a8322:	0240      	lsls	r0, r0, #9
   a8324:	bf18      	it	ne
   a8326:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   a832a:	d01e      	beq.n	a836a <__aeabi_fmul+0x66>
   a832c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   a8330:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   a8334:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   a8338:	fba0 3101 	umull	r3, r1, r0, r1
   a833c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   a8340:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   a8344:	bf3e      	ittt	cc
   a8346:	0049      	lslcc	r1, r1, #1
   a8348:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   a834c:	005b      	lslcc	r3, r3, #1
   a834e:	ea40 0001 	orr.w	r0, r0, r1
   a8352:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   a8356:	2afd      	cmp	r2, #253	; 0xfd
   a8358:	d81d      	bhi.n	a8396 <__aeabi_fmul+0x92>
   a835a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   a835e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   a8362:	bf08      	it	eq
   a8364:	f020 0001 	biceq.w	r0, r0, #1
   a8368:	4770      	bx	lr
   a836a:	f090 0f00 	teq	r0, #0
   a836e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   a8372:	bf08      	it	eq
   a8374:	0249      	lsleq	r1, r1, #9
   a8376:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   a837a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   a837e:	3a7f      	subs	r2, #127	; 0x7f
   a8380:	bfc2      	ittt	gt
   a8382:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   a8386:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   a838a:	4770      	bxgt	lr
   a838c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a8390:	f04f 0300 	mov.w	r3, #0
   a8394:	3a01      	subs	r2, #1
   a8396:	dc5d      	bgt.n	a8454 <__aeabi_fmul+0x150>
   a8398:	f112 0f19 	cmn.w	r2, #25
   a839c:	bfdc      	itt	le
   a839e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   a83a2:	4770      	bxle	lr
   a83a4:	f1c2 0200 	rsb	r2, r2, #0
   a83a8:	0041      	lsls	r1, r0, #1
   a83aa:	fa21 f102 	lsr.w	r1, r1, r2
   a83ae:	f1c2 0220 	rsb	r2, r2, #32
   a83b2:	fa00 fc02 	lsl.w	ip, r0, r2
   a83b6:	ea5f 0031 	movs.w	r0, r1, rrx
   a83ba:	f140 0000 	adc.w	r0, r0, #0
   a83be:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   a83c2:	bf08      	it	eq
   a83c4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   a83c8:	4770      	bx	lr
   a83ca:	f092 0f00 	teq	r2, #0
   a83ce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   a83d2:	bf02      	ittt	eq
   a83d4:	0040      	lsleq	r0, r0, #1
   a83d6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   a83da:	3a01      	subeq	r2, #1
   a83dc:	d0f9      	beq.n	a83d2 <__aeabi_fmul+0xce>
   a83de:	ea40 000c 	orr.w	r0, r0, ip
   a83e2:	f093 0f00 	teq	r3, #0
   a83e6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   a83ea:	bf02      	ittt	eq
   a83ec:	0049      	lsleq	r1, r1, #1
   a83ee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   a83f2:	3b01      	subeq	r3, #1
   a83f4:	d0f9      	beq.n	a83ea <__aeabi_fmul+0xe6>
   a83f6:	ea41 010c 	orr.w	r1, r1, ip
   a83fa:	e78f      	b.n	a831c <__aeabi_fmul+0x18>
   a83fc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   a8400:	ea92 0f0c 	teq	r2, ip
   a8404:	bf18      	it	ne
   a8406:	ea93 0f0c 	teqne	r3, ip
   a840a:	d00a      	beq.n	a8422 <__aeabi_fmul+0x11e>
   a840c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   a8410:	bf18      	it	ne
   a8412:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   a8416:	d1d8      	bne.n	a83ca <__aeabi_fmul+0xc6>
   a8418:	ea80 0001 	eor.w	r0, r0, r1
   a841c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   a8420:	4770      	bx	lr
   a8422:	f090 0f00 	teq	r0, #0
   a8426:	bf17      	itett	ne
   a8428:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   a842c:	4608      	moveq	r0, r1
   a842e:	f091 0f00 	teqne	r1, #0
   a8432:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   a8436:	d014      	beq.n	a8462 <__aeabi_fmul+0x15e>
   a8438:	ea92 0f0c 	teq	r2, ip
   a843c:	d101      	bne.n	a8442 <__aeabi_fmul+0x13e>
   a843e:	0242      	lsls	r2, r0, #9
   a8440:	d10f      	bne.n	a8462 <__aeabi_fmul+0x15e>
   a8442:	ea93 0f0c 	teq	r3, ip
   a8446:	d103      	bne.n	a8450 <__aeabi_fmul+0x14c>
   a8448:	024b      	lsls	r3, r1, #9
   a844a:	bf18      	it	ne
   a844c:	4608      	movne	r0, r1
   a844e:	d108      	bne.n	a8462 <__aeabi_fmul+0x15e>
   a8450:	ea80 0001 	eor.w	r0, r0, r1
   a8454:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   a8458:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   a845c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a8460:	4770      	bx	lr
   a8462:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   a8466:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   a846a:	4770      	bx	lr

000a846c <__aeabi_fdiv>:
   a846c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a8470:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   a8474:	bf1e      	ittt	ne
   a8476:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   a847a:	ea92 0f0c 	teqne	r2, ip
   a847e:	ea93 0f0c 	teqne	r3, ip
   a8482:	d069      	beq.n	a8558 <__aeabi_fdiv+0xec>
   a8484:	eba2 0203 	sub.w	r2, r2, r3
   a8488:	ea80 0c01 	eor.w	ip, r0, r1
   a848c:	0249      	lsls	r1, r1, #9
   a848e:	ea4f 2040 	mov.w	r0, r0, lsl #9
   a8492:	d037      	beq.n	a8504 <__aeabi_fdiv+0x98>
   a8494:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   a8498:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   a849c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   a84a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   a84a4:	428b      	cmp	r3, r1
   a84a6:	bf38      	it	cc
   a84a8:	005b      	lslcc	r3, r3, #1
   a84aa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   a84ae:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   a84b2:	428b      	cmp	r3, r1
   a84b4:	bf24      	itt	cs
   a84b6:	1a5b      	subcs	r3, r3, r1
   a84b8:	ea40 000c 	orrcs.w	r0, r0, ip
   a84bc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   a84c0:	bf24      	itt	cs
   a84c2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   a84c6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   a84ca:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   a84ce:	bf24      	itt	cs
   a84d0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   a84d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   a84d8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   a84dc:	bf24      	itt	cs
   a84de:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   a84e2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   a84e6:	011b      	lsls	r3, r3, #4
   a84e8:	bf18      	it	ne
   a84ea:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   a84ee:	d1e0      	bne.n	a84b2 <__aeabi_fdiv+0x46>
   a84f0:	2afd      	cmp	r2, #253	; 0xfd
   a84f2:	f63f af50 	bhi.w	a8396 <__aeabi_fmul+0x92>
   a84f6:	428b      	cmp	r3, r1
   a84f8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   a84fc:	bf08      	it	eq
   a84fe:	f020 0001 	biceq.w	r0, r0, #1
   a8502:	4770      	bx	lr
   a8504:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   a8508:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   a850c:	327f      	adds	r2, #127	; 0x7f
   a850e:	bfc2      	ittt	gt
   a8510:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   a8514:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   a8518:	4770      	bxgt	lr
   a851a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a851e:	f04f 0300 	mov.w	r3, #0
   a8522:	3a01      	subs	r2, #1
   a8524:	e737      	b.n	a8396 <__aeabi_fmul+0x92>
   a8526:	f092 0f00 	teq	r2, #0
   a852a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   a852e:	bf02      	ittt	eq
   a8530:	0040      	lsleq	r0, r0, #1
   a8532:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   a8536:	3a01      	subeq	r2, #1
   a8538:	d0f9      	beq.n	a852e <__aeabi_fdiv+0xc2>
   a853a:	ea40 000c 	orr.w	r0, r0, ip
   a853e:	f093 0f00 	teq	r3, #0
   a8542:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   a8546:	bf02      	ittt	eq
   a8548:	0049      	lsleq	r1, r1, #1
   a854a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   a854e:	3b01      	subeq	r3, #1
   a8550:	d0f9      	beq.n	a8546 <__aeabi_fdiv+0xda>
   a8552:	ea41 010c 	orr.w	r1, r1, ip
   a8556:	e795      	b.n	a8484 <__aeabi_fdiv+0x18>
   a8558:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   a855c:	ea92 0f0c 	teq	r2, ip
   a8560:	d108      	bne.n	a8574 <__aeabi_fdiv+0x108>
   a8562:	0242      	lsls	r2, r0, #9
   a8564:	f47f af7d 	bne.w	a8462 <__aeabi_fmul+0x15e>
   a8568:	ea93 0f0c 	teq	r3, ip
   a856c:	f47f af70 	bne.w	a8450 <__aeabi_fmul+0x14c>
   a8570:	4608      	mov	r0, r1
   a8572:	e776      	b.n	a8462 <__aeabi_fmul+0x15e>
   a8574:	ea93 0f0c 	teq	r3, ip
   a8578:	d104      	bne.n	a8584 <__aeabi_fdiv+0x118>
   a857a:	024b      	lsls	r3, r1, #9
   a857c:	f43f af4c 	beq.w	a8418 <__aeabi_fmul+0x114>
   a8580:	4608      	mov	r0, r1
   a8582:	e76e      	b.n	a8462 <__aeabi_fmul+0x15e>
   a8584:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   a8588:	bf18      	it	ne
   a858a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   a858e:	d1ca      	bne.n	a8526 <__aeabi_fdiv+0xba>
   a8590:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   a8594:	f47f af5c 	bne.w	a8450 <__aeabi_fmul+0x14c>
   a8598:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   a859c:	f47f af3c 	bne.w	a8418 <__aeabi_fmul+0x114>
   a85a0:	e75f      	b.n	a8462 <__aeabi_fmul+0x15e>
   a85a2:	bf00      	nop

000a85a4 <__gesf2>:
   a85a4:	f04f 3cff 	mov.w	ip, #4294967295
   a85a8:	e006      	b.n	a85b8 <__cmpsf2+0x4>
   a85aa:	bf00      	nop

000a85ac <__lesf2>:
   a85ac:	f04f 0c01 	mov.w	ip, #1
   a85b0:	e002      	b.n	a85b8 <__cmpsf2+0x4>
   a85b2:	bf00      	nop

000a85b4 <__cmpsf2>:
   a85b4:	f04f 0c01 	mov.w	ip, #1
   a85b8:	f84d cd04 	str.w	ip, [sp, #-4]!
   a85bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
   a85c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
   a85c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   a85c8:	bf18      	it	ne
   a85ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   a85ce:	d011      	beq.n	a85f4 <__cmpsf2+0x40>
   a85d0:	b001      	add	sp, #4
   a85d2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   a85d6:	bf18      	it	ne
   a85d8:	ea90 0f01 	teqne	r0, r1
   a85dc:	bf58      	it	pl
   a85de:	ebb2 0003 	subspl.w	r0, r2, r3
   a85e2:	bf88      	it	hi
   a85e4:	17c8      	asrhi	r0, r1, #31
   a85e6:	bf38      	it	cc
   a85e8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   a85ec:	bf18      	it	ne
   a85ee:	f040 0001 	orrne.w	r0, r0, #1
   a85f2:	4770      	bx	lr
   a85f4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   a85f8:	d102      	bne.n	a8600 <__cmpsf2+0x4c>
   a85fa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   a85fe:	d105      	bne.n	a860c <__cmpsf2+0x58>
   a8600:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   a8604:	d1e4      	bne.n	a85d0 <__cmpsf2+0x1c>
   a8606:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   a860a:	d0e1      	beq.n	a85d0 <__cmpsf2+0x1c>
   a860c:	f85d 0b04 	ldr.w	r0, [sp], #4
   a8610:	4770      	bx	lr
   a8612:	bf00      	nop

000a8614 <__aeabi_cfrcmple>:
   a8614:	4684      	mov	ip, r0
   a8616:	4608      	mov	r0, r1
   a8618:	4661      	mov	r1, ip
   a861a:	e7ff      	b.n	a861c <__aeabi_cfcmpeq>

000a861c <__aeabi_cfcmpeq>:
   a861c:	b50f      	push	{r0, r1, r2, r3, lr}
   a861e:	f7ff ffc9 	bl	a85b4 <__cmpsf2>
   a8622:	2800      	cmp	r0, #0
   a8624:	bf48      	it	mi
   a8626:	f110 0f00 	cmnmi.w	r0, #0
   a862a:	bd0f      	pop	{r0, r1, r2, r3, pc}

000a862c <__aeabi_fcmpeq>:
   a862c:	f84d ed08 	str.w	lr, [sp, #-8]!
   a8630:	f7ff fff4 	bl	a861c <__aeabi_cfcmpeq>
   a8634:	bf0c      	ite	eq
   a8636:	2001      	moveq	r0, #1
   a8638:	2000      	movne	r0, #0
   a863a:	f85d fb08 	ldr.w	pc, [sp], #8
   a863e:	bf00      	nop

000a8640 <__aeabi_fcmplt>:
   a8640:	f84d ed08 	str.w	lr, [sp, #-8]!
   a8644:	f7ff ffea 	bl	a861c <__aeabi_cfcmpeq>
   a8648:	bf34      	ite	cc
   a864a:	2001      	movcc	r0, #1
   a864c:	2000      	movcs	r0, #0
   a864e:	f85d fb08 	ldr.w	pc, [sp], #8
   a8652:	bf00      	nop

000a8654 <__aeabi_fcmple>:
   a8654:	f84d ed08 	str.w	lr, [sp, #-8]!
   a8658:	f7ff ffe0 	bl	a861c <__aeabi_cfcmpeq>
   a865c:	bf94      	ite	ls
   a865e:	2001      	movls	r0, #1
   a8660:	2000      	movhi	r0, #0
   a8662:	f85d fb08 	ldr.w	pc, [sp], #8
   a8666:	bf00      	nop

000a8668 <__aeabi_fcmpge>:
   a8668:	f84d ed08 	str.w	lr, [sp, #-8]!
   a866c:	f7ff ffd2 	bl	a8614 <__aeabi_cfrcmple>
   a8670:	bf94      	ite	ls
   a8672:	2001      	movls	r0, #1
   a8674:	2000      	movhi	r0, #0
   a8676:	f85d fb08 	ldr.w	pc, [sp], #8
   a867a:	bf00      	nop

000a867c <__aeabi_fcmpgt>:
   a867c:	f84d ed08 	str.w	lr, [sp, #-8]!
   a8680:	f7ff ffc8 	bl	a8614 <__aeabi_cfrcmple>
   a8684:	bf34      	ite	cc
   a8686:	2001      	movcc	r0, #1
   a8688:	2000      	movcs	r0, #0
   a868a:	f85d fb08 	ldr.w	pc, [sp], #8
   a868e:	bf00      	nop

000a8690 <__aeabi_f2iz>:
   a8690:	ea4f 0240 	mov.w	r2, r0, lsl #1
   a8694:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   a8698:	d30f      	bcc.n	a86ba <__aeabi_f2iz+0x2a>
   a869a:	f04f 039e 	mov.w	r3, #158	; 0x9e
   a869e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   a86a2:	d90d      	bls.n	a86c0 <__aeabi_f2iz+0x30>
   a86a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
   a86a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a86ac:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   a86b0:	fa23 f002 	lsr.w	r0, r3, r2
   a86b4:	bf18      	it	ne
   a86b6:	4240      	negne	r0, r0
   a86b8:	4770      	bx	lr
   a86ba:	f04f 0000 	mov.w	r0, #0
   a86be:	4770      	bx	lr
   a86c0:	f112 0f61 	cmn.w	r2, #97	; 0x61
   a86c4:	d101      	bne.n	a86ca <__aeabi_f2iz+0x3a>
   a86c6:	0242      	lsls	r2, r0, #9
   a86c8:	d105      	bne.n	a86d6 <__aeabi_f2iz+0x46>
   a86ca:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   a86ce:	bf08      	it	eq
   a86d0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   a86d4:	4770      	bx	lr
   a86d6:	f04f 0000 	mov.w	r0, #0
   a86da:	4770      	bx	lr

000a86dc <__aeabi_f2uiz>:
   a86dc:	0042      	lsls	r2, r0, #1
   a86de:	d20e      	bcs.n	a86fe <__aeabi_f2uiz+0x22>
   a86e0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   a86e4:	d30b      	bcc.n	a86fe <__aeabi_f2uiz+0x22>
   a86e6:	f04f 039e 	mov.w	r3, #158	; 0x9e
   a86ea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   a86ee:	d409      	bmi.n	a8704 <__aeabi_f2uiz+0x28>
   a86f0:	ea4f 2300 	mov.w	r3, r0, lsl #8
   a86f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a86f8:	fa23 f002 	lsr.w	r0, r3, r2
   a86fc:	4770      	bx	lr
   a86fe:	f04f 0000 	mov.w	r0, #0
   a8702:	4770      	bx	lr
   a8704:	f112 0f61 	cmn.w	r2, #97	; 0x61
   a8708:	d101      	bne.n	a870e <__aeabi_f2uiz+0x32>
   a870a:	0242      	lsls	r2, r0, #9
   a870c:	d102      	bne.n	a8714 <__aeabi_f2uiz+0x38>
   a870e:	f04f 30ff 	mov.w	r0, #4294967295
   a8712:	4770      	bx	lr
   a8714:	f04f 0000 	mov.w	r0, #0
   a8718:	4770      	bx	lr
   a871a:	bf00      	nop

000a871c <__libc_init_array>:
   a871c:	b570      	push	{r4, r5, r6, lr}
   a871e:	4e0f      	ldr	r6, [pc, #60]	; (a875c <__libc_init_array+0x40>)
   a8720:	4d0f      	ldr	r5, [pc, #60]	; (a8760 <__libc_init_array+0x44>)
   a8722:	1b76      	subs	r6, r6, r5
   a8724:	10b6      	asrs	r6, r6, #2
   a8726:	bf18      	it	ne
   a8728:	2400      	movne	r4, #0
   a872a:	d005      	beq.n	a8738 <__libc_init_array+0x1c>
   a872c:	3401      	adds	r4, #1
   a872e:	f855 3b04 	ldr.w	r3, [r5], #4
   a8732:	4798      	blx	r3
   a8734:	42a6      	cmp	r6, r4
   a8736:	d1f9      	bne.n	a872c <__libc_init_array+0x10>
   a8738:	4e0a      	ldr	r6, [pc, #40]	; (a8764 <__libc_init_array+0x48>)
   a873a:	4d0b      	ldr	r5, [pc, #44]	; (a8768 <__libc_init_array+0x4c>)
   a873c:	f001 ffee 	bl	aa71c <_init>
   a8740:	1b76      	subs	r6, r6, r5
   a8742:	10b6      	asrs	r6, r6, #2
   a8744:	bf18      	it	ne
   a8746:	2400      	movne	r4, #0
   a8748:	d006      	beq.n	a8758 <__libc_init_array+0x3c>
   a874a:	3401      	adds	r4, #1
   a874c:	f855 3b04 	ldr.w	r3, [r5], #4
   a8750:	4798      	blx	r3
   a8752:	42a6      	cmp	r6, r4
   a8754:	d1f9      	bne.n	a874a <__libc_init_array+0x2e>
   a8756:	bd70      	pop	{r4, r5, r6, pc}
   a8758:	bd70      	pop	{r4, r5, r6, pc}
   a875a:	bf00      	nop
   a875c:	000aa728 	.word	0x000aa728
   a8760:	000aa728 	.word	0x000aa728
   a8764:	000aa730 	.word	0x000aa730
   a8768:	000aa728 	.word	0x000aa728

000a876c <memcpy>:
   a876c:	4684      	mov	ip, r0
   a876e:	ea41 0300 	orr.w	r3, r1, r0
   a8772:	f013 0303 	ands.w	r3, r3, #3
   a8776:	d149      	bne.n	a880c <memcpy+0xa0>
   a8778:	3a40      	subs	r2, #64	; 0x40
   a877a:	d323      	bcc.n	a87c4 <memcpy+0x58>
   a877c:	680b      	ldr	r3, [r1, #0]
   a877e:	6003      	str	r3, [r0, #0]
   a8780:	684b      	ldr	r3, [r1, #4]
   a8782:	6043      	str	r3, [r0, #4]
   a8784:	688b      	ldr	r3, [r1, #8]
   a8786:	6083      	str	r3, [r0, #8]
   a8788:	68cb      	ldr	r3, [r1, #12]
   a878a:	60c3      	str	r3, [r0, #12]
   a878c:	690b      	ldr	r3, [r1, #16]
   a878e:	6103      	str	r3, [r0, #16]
   a8790:	694b      	ldr	r3, [r1, #20]
   a8792:	6143      	str	r3, [r0, #20]
   a8794:	698b      	ldr	r3, [r1, #24]
   a8796:	6183      	str	r3, [r0, #24]
   a8798:	69cb      	ldr	r3, [r1, #28]
   a879a:	61c3      	str	r3, [r0, #28]
   a879c:	6a0b      	ldr	r3, [r1, #32]
   a879e:	6203      	str	r3, [r0, #32]
   a87a0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   a87a2:	6243      	str	r3, [r0, #36]	; 0x24
   a87a4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   a87a6:	6283      	str	r3, [r0, #40]	; 0x28
   a87a8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   a87aa:	62c3      	str	r3, [r0, #44]	; 0x2c
   a87ac:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   a87ae:	6303      	str	r3, [r0, #48]	; 0x30
   a87b0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   a87b2:	6343      	str	r3, [r0, #52]	; 0x34
   a87b4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   a87b6:	6383      	str	r3, [r0, #56]	; 0x38
   a87b8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   a87ba:	63c3      	str	r3, [r0, #60]	; 0x3c
   a87bc:	3040      	adds	r0, #64	; 0x40
   a87be:	3140      	adds	r1, #64	; 0x40
   a87c0:	3a40      	subs	r2, #64	; 0x40
   a87c2:	d2db      	bcs.n	a877c <memcpy+0x10>
   a87c4:	3230      	adds	r2, #48	; 0x30
   a87c6:	d30b      	bcc.n	a87e0 <memcpy+0x74>
   a87c8:	680b      	ldr	r3, [r1, #0]
   a87ca:	6003      	str	r3, [r0, #0]
   a87cc:	684b      	ldr	r3, [r1, #4]
   a87ce:	6043      	str	r3, [r0, #4]
   a87d0:	688b      	ldr	r3, [r1, #8]
   a87d2:	6083      	str	r3, [r0, #8]
   a87d4:	68cb      	ldr	r3, [r1, #12]
   a87d6:	60c3      	str	r3, [r0, #12]
   a87d8:	3010      	adds	r0, #16
   a87da:	3110      	adds	r1, #16
   a87dc:	3a10      	subs	r2, #16
   a87de:	d2f3      	bcs.n	a87c8 <memcpy+0x5c>
   a87e0:	320c      	adds	r2, #12
   a87e2:	d305      	bcc.n	a87f0 <memcpy+0x84>
   a87e4:	f851 3b04 	ldr.w	r3, [r1], #4
   a87e8:	f840 3b04 	str.w	r3, [r0], #4
   a87ec:	3a04      	subs	r2, #4
   a87ee:	d2f9      	bcs.n	a87e4 <memcpy+0x78>
   a87f0:	3204      	adds	r2, #4
   a87f2:	d008      	beq.n	a8806 <memcpy+0x9a>
   a87f4:	07d2      	lsls	r2, r2, #31
   a87f6:	bf1c      	itt	ne
   a87f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   a87fc:	f800 3b01 	strbne.w	r3, [r0], #1
   a8800:	d301      	bcc.n	a8806 <memcpy+0x9a>
   a8802:	880b      	ldrh	r3, [r1, #0]
   a8804:	8003      	strh	r3, [r0, #0]
   a8806:	4660      	mov	r0, ip
   a8808:	4770      	bx	lr
   a880a:	bf00      	nop
   a880c:	2a08      	cmp	r2, #8
   a880e:	d313      	bcc.n	a8838 <memcpy+0xcc>
   a8810:	078b      	lsls	r3, r1, #30
   a8812:	d0b1      	beq.n	a8778 <memcpy+0xc>
   a8814:	f010 0303 	ands.w	r3, r0, #3
   a8818:	d0ae      	beq.n	a8778 <memcpy+0xc>
   a881a:	f1c3 0304 	rsb	r3, r3, #4
   a881e:	1ad2      	subs	r2, r2, r3
   a8820:	07db      	lsls	r3, r3, #31
   a8822:	bf1c      	itt	ne
   a8824:	f811 3b01 	ldrbne.w	r3, [r1], #1
   a8828:	f800 3b01 	strbne.w	r3, [r0], #1
   a882c:	d3a4      	bcc.n	a8778 <memcpy+0xc>
   a882e:	f831 3b02 	ldrh.w	r3, [r1], #2
   a8832:	f820 3b02 	strh.w	r3, [r0], #2
   a8836:	e79f      	b.n	a8778 <memcpy+0xc>
   a8838:	3a04      	subs	r2, #4
   a883a:	d3d9      	bcc.n	a87f0 <memcpy+0x84>
   a883c:	3a01      	subs	r2, #1
   a883e:	f811 3b01 	ldrb.w	r3, [r1], #1
   a8842:	f800 3b01 	strb.w	r3, [r0], #1
   a8846:	d2f9      	bcs.n	a883c <memcpy+0xd0>
   a8848:	780b      	ldrb	r3, [r1, #0]
   a884a:	7003      	strb	r3, [r0, #0]
   a884c:	784b      	ldrb	r3, [r1, #1]
   a884e:	7043      	strb	r3, [r0, #1]
   a8850:	788b      	ldrb	r3, [r1, #2]
   a8852:	7083      	strb	r3, [r0, #2]
   a8854:	4660      	mov	r0, ip
   a8856:	4770      	bx	lr

000a8858 <memset>:
   a8858:	b470      	push	{r4, r5, r6}
   a885a:	0784      	lsls	r4, r0, #30
   a885c:	d046      	beq.n	a88ec <memset+0x94>
   a885e:	1e54      	subs	r4, r2, #1
   a8860:	2a00      	cmp	r2, #0
   a8862:	d041      	beq.n	a88e8 <memset+0x90>
   a8864:	b2cd      	uxtb	r5, r1
   a8866:	4603      	mov	r3, r0
   a8868:	e002      	b.n	a8870 <memset+0x18>
   a886a:	1e62      	subs	r2, r4, #1
   a886c:	b3e4      	cbz	r4, a88e8 <memset+0x90>
   a886e:	4614      	mov	r4, r2
   a8870:	f803 5b01 	strb.w	r5, [r3], #1
   a8874:	079a      	lsls	r2, r3, #30
   a8876:	d1f8      	bne.n	a886a <memset+0x12>
   a8878:	2c03      	cmp	r4, #3
   a887a:	d92e      	bls.n	a88da <memset+0x82>
   a887c:	b2cd      	uxtb	r5, r1
   a887e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   a8882:	2c0f      	cmp	r4, #15
   a8884:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   a8888:	d919      	bls.n	a88be <memset+0x66>
   a888a:	4626      	mov	r6, r4
   a888c:	f103 0210 	add.w	r2, r3, #16
   a8890:	3e10      	subs	r6, #16
   a8892:	2e0f      	cmp	r6, #15
   a8894:	f842 5c10 	str.w	r5, [r2, #-16]
   a8898:	f842 5c0c 	str.w	r5, [r2, #-12]
   a889c:	f842 5c08 	str.w	r5, [r2, #-8]
   a88a0:	f842 5c04 	str.w	r5, [r2, #-4]
   a88a4:	f102 0210 	add.w	r2, r2, #16
   a88a8:	d8f2      	bhi.n	a8890 <memset+0x38>
   a88aa:	f1a4 0210 	sub.w	r2, r4, #16
   a88ae:	f022 020f 	bic.w	r2, r2, #15
   a88b2:	f004 040f 	and.w	r4, r4, #15
   a88b6:	3210      	adds	r2, #16
   a88b8:	2c03      	cmp	r4, #3
   a88ba:	4413      	add	r3, r2
   a88bc:	d90d      	bls.n	a88da <memset+0x82>
   a88be:	461e      	mov	r6, r3
   a88c0:	4622      	mov	r2, r4
   a88c2:	3a04      	subs	r2, #4
   a88c4:	2a03      	cmp	r2, #3
   a88c6:	f846 5b04 	str.w	r5, [r6], #4
   a88ca:	d8fa      	bhi.n	a88c2 <memset+0x6a>
   a88cc:	1f22      	subs	r2, r4, #4
   a88ce:	f022 0203 	bic.w	r2, r2, #3
   a88d2:	3204      	adds	r2, #4
   a88d4:	4413      	add	r3, r2
   a88d6:	f004 0403 	and.w	r4, r4, #3
   a88da:	b12c      	cbz	r4, a88e8 <memset+0x90>
   a88dc:	b2c9      	uxtb	r1, r1
   a88de:	441c      	add	r4, r3
   a88e0:	f803 1b01 	strb.w	r1, [r3], #1
   a88e4:	42a3      	cmp	r3, r4
   a88e6:	d1fb      	bne.n	a88e0 <memset+0x88>
   a88e8:	bc70      	pop	{r4, r5, r6}
   a88ea:	4770      	bx	lr
   a88ec:	4614      	mov	r4, r2
   a88ee:	4603      	mov	r3, r0
   a88f0:	e7c2      	b.n	a8878 <memset+0x20>
   a88f2:	bf00      	nop

000a88f4 <_puts_r>:
   a88f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   a88f6:	4604      	mov	r4, r0
   a88f8:	b089      	sub	sp, #36	; 0x24
   a88fa:	4608      	mov	r0, r1
   a88fc:	460d      	mov	r5, r1
   a88fe:	f000 f8b5 	bl	a8a6c <strlen>
   a8902:	68a3      	ldr	r3, [r4, #8]
   a8904:	2102      	movs	r1, #2
   a8906:	899a      	ldrh	r2, [r3, #12]
   a8908:	f8df e044 	ldr.w	lr, [pc, #68]	; a8950 <_puts_r+0x5c>
   a890c:	f100 0c01 	add.w	ip, r0, #1
   a8910:	2701      	movs	r7, #1
   a8912:	ae04      	add	r6, sp, #16
   a8914:	9102      	str	r1, [sp, #8]
   a8916:	0491      	lsls	r1, r2, #18
   a8918:	9504      	str	r5, [sp, #16]
   a891a:	9005      	str	r0, [sp, #20]
   a891c:	f8cd c00c 	str.w	ip, [sp, #12]
   a8920:	f8cd e018 	str.w	lr, [sp, #24]
   a8924:	9707      	str	r7, [sp, #28]
   a8926:	9601      	str	r6, [sp, #4]
   a8928:	d406      	bmi.n	a8938 <_puts_r+0x44>
   a892a:	6e59      	ldr	r1, [r3, #100]	; 0x64
   a892c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   a8930:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   a8934:	819a      	strh	r2, [r3, #12]
   a8936:	6659      	str	r1, [r3, #100]	; 0x64
   a8938:	4620      	mov	r0, r4
   a893a:	4619      	mov	r1, r3
   a893c:	aa01      	add	r2, sp, #4
   a893e:	f000 fbb3 	bl	a90a8 <__sfvwrite_r>
   a8942:	2800      	cmp	r0, #0
   a8944:	bf14      	ite	ne
   a8946:	f04f 30ff 	movne.w	r0, #4294967295
   a894a:	200a      	moveq	r0, #10
   a894c:	b009      	add	sp, #36	; 0x24
   a894e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a8950:	000aa718 	.word	0x000aa718

000a8954 <puts>:
   a8954:	4b02      	ldr	r3, [pc, #8]	; (a8960 <puts+0xc>)
   a8956:	4601      	mov	r1, r0
   a8958:	6818      	ldr	r0, [r3, #0]
   a895a:	f7ff bfcb 	b.w	a88f4 <_puts_r>
   a895e:	bf00      	nop
   a8960:	200713c0 	.word	0x200713c0

000a8964 <setbuf>:
   a8964:	2900      	cmp	r1, #0
   a8966:	bf0c      	ite	eq
   a8968:	2202      	moveq	r2, #2
   a896a:	2200      	movne	r2, #0
   a896c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   a8970:	f000 b800 	b.w	a8974 <setvbuf>

000a8974 <setvbuf>:
   a8974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a8978:	4d3a      	ldr	r5, [pc, #232]	; (a8a64 <setvbuf+0xf0>)
   a897a:	4604      	mov	r4, r0
   a897c:	682e      	ldr	r6, [r5, #0]
   a897e:	4690      	mov	r8, r2
   a8980:	460d      	mov	r5, r1
   a8982:	461f      	mov	r7, r3
   a8984:	b116      	cbz	r6, a898c <setvbuf+0x18>
   a8986:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   a8988:	2b00      	cmp	r3, #0
   a898a:	d03c      	beq.n	a8a06 <setvbuf+0x92>
   a898c:	f1b8 0f02 	cmp.w	r8, #2
   a8990:	d82f      	bhi.n	a89f2 <setvbuf+0x7e>
   a8992:	2f00      	cmp	r7, #0
   a8994:	db2d      	blt.n	a89f2 <setvbuf+0x7e>
   a8996:	4621      	mov	r1, r4
   a8998:	4630      	mov	r0, r6
   a899a:	f000 f9ab 	bl	a8cf4 <_fflush_r>
   a899e:	89a1      	ldrh	r1, [r4, #12]
   a89a0:	2300      	movs	r3, #0
   a89a2:	6063      	str	r3, [r4, #4]
   a89a4:	61a3      	str	r3, [r4, #24]
   a89a6:	060b      	lsls	r3, r1, #24
   a89a8:	d427      	bmi.n	a89fa <setvbuf+0x86>
   a89aa:	f021 0183 	bic.w	r1, r1, #131	; 0x83
   a89ae:	b289      	uxth	r1, r1
   a89b0:	f1b8 0f02 	cmp.w	r8, #2
   a89b4:	81a1      	strh	r1, [r4, #12]
   a89b6:	d02a      	beq.n	a8a0e <setvbuf+0x9a>
   a89b8:	2d00      	cmp	r5, #0
   a89ba:	d036      	beq.n	a8a2a <setvbuf+0xb6>
   a89bc:	f1b8 0f01 	cmp.w	r8, #1
   a89c0:	d011      	beq.n	a89e6 <setvbuf+0x72>
   a89c2:	b289      	uxth	r1, r1
   a89c4:	f001 0008 	and.w	r0, r1, #8
   a89c8:	4b27      	ldr	r3, [pc, #156]	; (a8a68 <setvbuf+0xf4>)
   a89ca:	b280      	uxth	r0, r0
   a89cc:	63f3      	str	r3, [r6, #60]	; 0x3c
   a89ce:	6025      	str	r5, [r4, #0]
   a89d0:	6125      	str	r5, [r4, #16]
   a89d2:	6167      	str	r7, [r4, #20]
   a89d4:	b178      	cbz	r0, a89f6 <setvbuf+0x82>
   a89d6:	f011 0f03 	tst.w	r1, #3
   a89da:	bf18      	it	ne
   a89dc:	2700      	movne	r7, #0
   a89de:	2000      	movs	r0, #0
   a89e0:	60a7      	str	r7, [r4, #8]
   a89e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a89e6:	f041 0101 	orr.w	r1, r1, #1
   a89ea:	427b      	negs	r3, r7
   a89ec:	81a1      	strh	r1, [r4, #12]
   a89ee:	61a3      	str	r3, [r4, #24]
   a89f0:	e7e7      	b.n	a89c2 <setvbuf+0x4e>
   a89f2:	f04f 30ff 	mov.w	r0, #4294967295
   a89f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a89fa:	6921      	ldr	r1, [r4, #16]
   a89fc:	4630      	mov	r0, r6
   a89fe:	f000 fa7b 	bl	a8ef8 <_free_r>
   a8a02:	89a1      	ldrh	r1, [r4, #12]
   a8a04:	e7d1      	b.n	a89aa <setvbuf+0x36>
   a8a06:	4630      	mov	r0, r6
   a8a08:	f000 fa08 	bl	a8e1c <__sinit>
   a8a0c:	e7be      	b.n	a898c <setvbuf+0x18>
   a8a0e:	2000      	movs	r0, #0
   a8a10:	f104 0343 	add.w	r3, r4, #67	; 0x43
   a8a14:	f041 0102 	orr.w	r1, r1, #2
   a8a18:	2500      	movs	r5, #0
   a8a1a:	2201      	movs	r2, #1
   a8a1c:	81a1      	strh	r1, [r4, #12]
   a8a1e:	60a5      	str	r5, [r4, #8]
   a8a20:	6023      	str	r3, [r4, #0]
   a8a22:	6123      	str	r3, [r4, #16]
   a8a24:	6162      	str	r2, [r4, #20]
   a8a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a8a2a:	2f00      	cmp	r7, #0
   a8a2c:	bf08      	it	eq
   a8a2e:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   a8a32:	4638      	mov	r0, r7
   a8a34:	f000 fd60 	bl	a94f8 <malloc>
   a8a38:	4605      	mov	r5, r0
   a8a3a:	b128      	cbz	r0, a8a48 <setvbuf+0xd4>
   a8a3c:	89a1      	ldrh	r1, [r4, #12]
   a8a3e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   a8a42:	b289      	uxth	r1, r1
   a8a44:	81a1      	strh	r1, [r4, #12]
   a8a46:	e7b9      	b.n	a89bc <setvbuf+0x48>
   a8a48:	f44f 6080 	mov.w	r0, #1024	; 0x400
   a8a4c:	f000 fd54 	bl	a94f8 <malloc>
   a8a50:	4605      	mov	r5, r0
   a8a52:	b918      	cbnz	r0, a8a5c <setvbuf+0xe8>
   a8a54:	89a1      	ldrh	r1, [r4, #12]
   a8a56:	f04f 30ff 	mov.w	r0, #4294967295
   a8a5a:	e7d9      	b.n	a8a10 <setvbuf+0x9c>
   a8a5c:	f44f 6780 	mov.w	r7, #1024	; 0x400
   a8a60:	e7ec      	b.n	a8a3c <setvbuf+0xc8>
   a8a62:	bf00      	nop
   a8a64:	200713c0 	.word	0x200713c0
   a8a68:	000a8d21 	.word	0x000a8d21

000a8a6c <strlen>:
   a8a6c:	f020 0103 	bic.w	r1, r0, #3
   a8a70:	f010 0003 	ands.w	r0, r0, #3
   a8a74:	f1c0 0000 	rsb	r0, r0, #0
   a8a78:	f851 3b04 	ldr.w	r3, [r1], #4
   a8a7c:	f100 0c04 	add.w	ip, r0, #4
   a8a80:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   a8a84:	f06f 0200 	mvn.w	r2, #0
   a8a88:	bf1c      	itt	ne
   a8a8a:	fa22 f20c 	lsrne.w	r2, r2, ip
   a8a8e:	4313      	orrne	r3, r2
   a8a90:	f04f 0c01 	mov.w	ip, #1
   a8a94:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   a8a98:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   a8a9c:	eba3 020c 	sub.w	r2, r3, ip
   a8aa0:	ea22 0203 	bic.w	r2, r2, r3
   a8aa4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   a8aa8:	bf04      	itt	eq
   a8aaa:	f851 3b04 	ldreq.w	r3, [r1], #4
   a8aae:	3004      	addeq	r0, #4
   a8ab0:	d0f4      	beq.n	a8a9c <strlen+0x30>
   a8ab2:	f1c2 0100 	rsb	r1, r2, #0
   a8ab6:	ea02 0201 	and.w	r2, r2, r1
   a8aba:	fab2 f282 	clz	r2, r2
   a8abe:	f1c2 021f 	rsb	r2, r2, #31
   a8ac2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   a8ac6:	4770      	bx	lr

000a8ac8 <__swsetup_r>:
   a8ac8:	b538      	push	{r3, r4, r5, lr}
   a8aca:	4b2f      	ldr	r3, [pc, #188]	; (a8b88 <__swsetup_r+0xc0>)
   a8acc:	4605      	mov	r5, r0
   a8ace:	6818      	ldr	r0, [r3, #0]
   a8ad0:	460c      	mov	r4, r1
   a8ad2:	b110      	cbz	r0, a8ada <__swsetup_r+0x12>
   a8ad4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a8ad6:	2b00      	cmp	r3, #0
   a8ad8:	d036      	beq.n	a8b48 <__swsetup_r+0x80>
   a8ada:	89a2      	ldrh	r2, [r4, #12]
   a8adc:	b293      	uxth	r3, r2
   a8ade:	0718      	lsls	r0, r3, #28
   a8ae0:	d50c      	bpl.n	a8afc <__swsetup_r+0x34>
   a8ae2:	6920      	ldr	r0, [r4, #16]
   a8ae4:	b1a8      	cbz	r0, a8b12 <__swsetup_r+0x4a>
   a8ae6:	f013 0201 	ands.w	r2, r3, #1
   a8aea:	d01e      	beq.n	a8b2a <__swsetup_r+0x62>
   a8aec:	6963      	ldr	r3, [r4, #20]
   a8aee:	2200      	movs	r2, #0
   a8af0:	425b      	negs	r3, r3
   a8af2:	61a3      	str	r3, [r4, #24]
   a8af4:	60a2      	str	r2, [r4, #8]
   a8af6:	b1f0      	cbz	r0, a8b36 <__swsetup_r+0x6e>
   a8af8:	2000      	movs	r0, #0
   a8afa:	bd38      	pop	{r3, r4, r5, pc}
   a8afc:	06d9      	lsls	r1, r3, #27
   a8afe:	d53a      	bpl.n	a8b76 <__swsetup_r+0xae>
   a8b00:	0758      	lsls	r0, r3, #29
   a8b02:	d424      	bmi.n	a8b4e <__swsetup_r+0x86>
   a8b04:	6920      	ldr	r0, [r4, #16]
   a8b06:	f042 0308 	orr.w	r3, r2, #8
   a8b0a:	81a3      	strh	r3, [r4, #12]
   a8b0c:	b29b      	uxth	r3, r3
   a8b0e:	2800      	cmp	r0, #0
   a8b10:	d1e9      	bne.n	a8ae6 <__swsetup_r+0x1e>
   a8b12:	f403 7220 	and.w	r2, r3, #640	; 0x280
   a8b16:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   a8b1a:	d0e4      	beq.n	a8ae6 <__swsetup_r+0x1e>
   a8b1c:	4628      	mov	r0, r5
   a8b1e:	4621      	mov	r1, r4
   a8b20:	f000 fc7a 	bl	a9418 <__smakebuf_r>
   a8b24:	89a3      	ldrh	r3, [r4, #12]
   a8b26:	6920      	ldr	r0, [r4, #16]
   a8b28:	e7dd      	b.n	a8ae6 <__swsetup_r+0x1e>
   a8b2a:	0799      	lsls	r1, r3, #30
   a8b2c:	bf58      	it	pl
   a8b2e:	6962      	ldrpl	r2, [r4, #20]
   a8b30:	60a2      	str	r2, [r4, #8]
   a8b32:	2800      	cmp	r0, #0
   a8b34:	d1e0      	bne.n	a8af8 <__swsetup_r+0x30>
   a8b36:	89a3      	ldrh	r3, [r4, #12]
   a8b38:	061a      	lsls	r2, r3, #24
   a8b3a:	d5de      	bpl.n	a8afa <__swsetup_r+0x32>
   a8b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a8b40:	81a3      	strh	r3, [r4, #12]
   a8b42:	f04f 30ff 	mov.w	r0, #4294967295
   a8b46:	bd38      	pop	{r3, r4, r5, pc}
   a8b48:	f000 f968 	bl	a8e1c <__sinit>
   a8b4c:	e7c5      	b.n	a8ada <__swsetup_r+0x12>
   a8b4e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   a8b50:	b149      	cbz	r1, a8b66 <__swsetup_r+0x9e>
   a8b52:	f104 0340 	add.w	r3, r4, #64	; 0x40
   a8b56:	4299      	cmp	r1, r3
   a8b58:	d003      	beq.n	a8b62 <__swsetup_r+0x9a>
   a8b5a:	4628      	mov	r0, r5
   a8b5c:	f000 f9cc 	bl	a8ef8 <_free_r>
   a8b60:	89a2      	ldrh	r2, [r4, #12]
   a8b62:	2300      	movs	r3, #0
   a8b64:	6323      	str	r3, [r4, #48]	; 0x30
   a8b66:	6920      	ldr	r0, [r4, #16]
   a8b68:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   a8b6c:	2300      	movs	r3, #0
   a8b6e:	b292      	uxth	r2, r2
   a8b70:	e884 0009 	stmia.w	r4, {r0, r3}
   a8b74:	e7c7      	b.n	a8b06 <__swsetup_r+0x3e>
   a8b76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   a8b7a:	2309      	movs	r3, #9
   a8b7c:	602b      	str	r3, [r5, #0]
   a8b7e:	f04f 30ff 	mov.w	r0, #4294967295
   a8b82:	81a2      	strh	r2, [r4, #12]
   a8b84:	bd38      	pop	{r3, r4, r5, pc}
   a8b86:	bf00      	nop
   a8b88:	200713c0 	.word	0x200713c0

000a8b8c <register_fini>:
   a8b8c:	4b02      	ldr	r3, [pc, #8]	; (a8b98 <register_fini+0xc>)
   a8b8e:	b113      	cbz	r3, a8b96 <register_fini+0xa>
   a8b90:	4802      	ldr	r0, [pc, #8]	; (a8b9c <register_fini+0x10>)
   a8b92:	f000 b805 	b.w	a8ba0 <atexit>
   a8b96:	4770      	bx	lr
   a8b98:	00000000 	.word	0x00000000
   a8b9c:	000a8e31 	.word	0x000a8e31

000a8ba0 <atexit>:
   a8ba0:	4601      	mov	r1, r0
   a8ba2:	2000      	movs	r0, #0
   a8ba4:	4602      	mov	r2, r0
   a8ba6:	4603      	mov	r3, r0
   a8ba8:	f001 ba3e 	b.w	aa028 <__register_exitproc>

000a8bac <__sflush_r>:
   a8bac:	898b      	ldrh	r3, [r1, #12]
   a8bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a8bb2:	b29a      	uxth	r2, r3
   a8bb4:	460d      	mov	r5, r1
   a8bb6:	0711      	lsls	r1, r2, #28
   a8bb8:	4680      	mov	r8, r0
   a8bba:	d43c      	bmi.n	a8c36 <__sflush_r+0x8a>
   a8bbc:	686a      	ldr	r2, [r5, #4]
   a8bbe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   a8bc2:	2a00      	cmp	r2, #0
   a8bc4:	81ab      	strh	r3, [r5, #12]
   a8bc6:	dd65      	ble.n	a8c94 <__sflush_r+0xe8>
   a8bc8:	6aae      	ldr	r6, [r5, #40]	; 0x28
   a8bca:	2e00      	cmp	r6, #0
   a8bcc:	d04b      	beq.n	a8c66 <__sflush_r+0xba>
   a8bce:	b29b      	uxth	r3, r3
   a8bd0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   a8bd4:	2100      	movs	r1, #0
   a8bd6:	b292      	uxth	r2, r2
   a8bd8:	f8d8 4000 	ldr.w	r4, [r8]
   a8bdc:	f8c8 1000 	str.w	r1, [r8]
   a8be0:	2a00      	cmp	r2, #0
   a8be2:	d05b      	beq.n	a8c9c <__sflush_r+0xf0>
   a8be4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   a8be6:	075f      	lsls	r7, r3, #29
   a8be8:	d505      	bpl.n	a8bf6 <__sflush_r+0x4a>
   a8bea:	6869      	ldr	r1, [r5, #4]
   a8bec:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   a8bee:	1a52      	subs	r2, r2, r1
   a8bf0:	b10b      	cbz	r3, a8bf6 <__sflush_r+0x4a>
   a8bf2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   a8bf4:	1ad2      	subs	r2, r2, r3
   a8bf6:	4640      	mov	r0, r8
   a8bf8:	69e9      	ldr	r1, [r5, #28]
   a8bfa:	2300      	movs	r3, #0
   a8bfc:	47b0      	blx	r6
   a8bfe:	1c46      	adds	r6, r0, #1
   a8c00:	d056      	beq.n	a8cb0 <__sflush_r+0x104>
   a8c02:	89ab      	ldrh	r3, [r5, #12]
   a8c04:	692a      	ldr	r2, [r5, #16]
   a8c06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   a8c0a:	b29b      	uxth	r3, r3
   a8c0c:	2100      	movs	r1, #0
   a8c0e:	602a      	str	r2, [r5, #0]
   a8c10:	04da      	lsls	r2, r3, #19
   a8c12:	81ab      	strh	r3, [r5, #12]
   a8c14:	6069      	str	r1, [r5, #4]
   a8c16:	d43b      	bmi.n	a8c90 <__sflush_r+0xe4>
   a8c18:	6b29      	ldr	r1, [r5, #48]	; 0x30
   a8c1a:	f8c8 4000 	str.w	r4, [r8]
   a8c1e:	b311      	cbz	r1, a8c66 <__sflush_r+0xba>
   a8c20:	f105 0340 	add.w	r3, r5, #64	; 0x40
   a8c24:	4299      	cmp	r1, r3
   a8c26:	d002      	beq.n	a8c2e <__sflush_r+0x82>
   a8c28:	4640      	mov	r0, r8
   a8c2a:	f000 f965 	bl	a8ef8 <_free_r>
   a8c2e:	2000      	movs	r0, #0
   a8c30:	6328      	str	r0, [r5, #48]	; 0x30
   a8c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a8c36:	692e      	ldr	r6, [r5, #16]
   a8c38:	b1ae      	cbz	r6, a8c66 <__sflush_r+0xba>
   a8c3a:	0791      	lsls	r1, r2, #30
   a8c3c:	682c      	ldr	r4, [r5, #0]
   a8c3e:	bf0c      	ite	eq
   a8c40:	696b      	ldreq	r3, [r5, #20]
   a8c42:	2300      	movne	r3, #0
   a8c44:	602e      	str	r6, [r5, #0]
   a8c46:	1ba4      	subs	r4, r4, r6
   a8c48:	60ab      	str	r3, [r5, #8]
   a8c4a:	e00a      	b.n	a8c62 <__sflush_r+0xb6>
   a8c4c:	4632      	mov	r2, r6
   a8c4e:	4623      	mov	r3, r4
   a8c50:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   a8c52:	4640      	mov	r0, r8
   a8c54:	69e9      	ldr	r1, [r5, #28]
   a8c56:	47b8      	blx	r7
   a8c58:	2800      	cmp	r0, #0
   a8c5a:	eba4 0400 	sub.w	r4, r4, r0
   a8c5e:	4406      	add	r6, r0
   a8c60:	dd04      	ble.n	a8c6c <__sflush_r+0xc0>
   a8c62:	2c00      	cmp	r4, #0
   a8c64:	dcf2      	bgt.n	a8c4c <__sflush_r+0xa0>
   a8c66:	2000      	movs	r0, #0
   a8c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a8c6c:	89ab      	ldrh	r3, [r5, #12]
   a8c6e:	f04f 30ff 	mov.w	r0, #4294967295
   a8c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a8c76:	81ab      	strh	r3, [r5, #12]
   a8c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a8c7c:	89ab      	ldrh	r3, [r5, #12]
   a8c7e:	692a      	ldr	r2, [r5, #16]
   a8c80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   a8c84:	b29b      	uxth	r3, r3
   a8c86:	81ab      	strh	r3, [r5, #12]
   a8c88:	04db      	lsls	r3, r3, #19
   a8c8a:	6069      	str	r1, [r5, #4]
   a8c8c:	602a      	str	r2, [r5, #0]
   a8c8e:	d5c3      	bpl.n	a8c18 <__sflush_r+0x6c>
   a8c90:	6528      	str	r0, [r5, #80]	; 0x50
   a8c92:	e7c1      	b.n	a8c18 <__sflush_r+0x6c>
   a8c94:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   a8c96:	2a00      	cmp	r2, #0
   a8c98:	dc96      	bgt.n	a8bc8 <__sflush_r+0x1c>
   a8c9a:	e7e4      	b.n	a8c66 <__sflush_r+0xba>
   a8c9c:	2301      	movs	r3, #1
   a8c9e:	4640      	mov	r0, r8
   a8ca0:	69e9      	ldr	r1, [r5, #28]
   a8ca2:	47b0      	blx	r6
   a8ca4:	1c43      	adds	r3, r0, #1
   a8ca6:	4602      	mov	r2, r0
   a8ca8:	d019      	beq.n	a8cde <__sflush_r+0x132>
   a8caa:	89ab      	ldrh	r3, [r5, #12]
   a8cac:	6aae      	ldr	r6, [r5, #40]	; 0x28
   a8cae:	e79a      	b.n	a8be6 <__sflush_r+0x3a>
   a8cb0:	f8d8 1000 	ldr.w	r1, [r8]
   a8cb4:	2900      	cmp	r1, #0
   a8cb6:	d0e1      	beq.n	a8c7c <__sflush_r+0xd0>
   a8cb8:	291d      	cmp	r1, #29
   a8cba:	d007      	beq.n	a8ccc <__sflush_r+0x120>
   a8cbc:	2916      	cmp	r1, #22
   a8cbe:	d005      	beq.n	a8ccc <__sflush_r+0x120>
   a8cc0:	89ab      	ldrh	r3, [r5, #12]
   a8cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a8cc6:	81ab      	strh	r3, [r5, #12]
   a8cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a8ccc:	89ab      	ldrh	r3, [r5, #12]
   a8cce:	6929      	ldr	r1, [r5, #16]
   a8cd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   a8cd4:	2200      	movs	r2, #0
   a8cd6:	81ab      	strh	r3, [r5, #12]
   a8cd8:	e885 0006 	stmia.w	r5, {r1, r2}
   a8cdc:	e79c      	b.n	a8c18 <__sflush_r+0x6c>
   a8cde:	f8d8 3000 	ldr.w	r3, [r8]
   a8ce2:	2b00      	cmp	r3, #0
   a8ce4:	d0e1      	beq.n	a8caa <__sflush_r+0xfe>
   a8ce6:	2b1d      	cmp	r3, #29
   a8ce8:	d001      	beq.n	a8cee <__sflush_r+0x142>
   a8cea:	2b16      	cmp	r3, #22
   a8cec:	d1be      	bne.n	a8c6c <__sflush_r+0xc0>
   a8cee:	f8c8 4000 	str.w	r4, [r8]
   a8cf2:	e7b8      	b.n	a8c66 <__sflush_r+0xba>

000a8cf4 <_fflush_r>:
   a8cf4:	b510      	push	{r4, lr}
   a8cf6:	4604      	mov	r4, r0
   a8cf8:	b082      	sub	sp, #8
   a8cfa:	b108      	cbz	r0, a8d00 <_fflush_r+0xc>
   a8cfc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a8cfe:	b153      	cbz	r3, a8d16 <_fflush_r+0x22>
   a8d00:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   a8d04:	b908      	cbnz	r0, a8d0a <_fflush_r+0x16>
   a8d06:	b002      	add	sp, #8
   a8d08:	bd10      	pop	{r4, pc}
   a8d0a:	4620      	mov	r0, r4
   a8d0c:	b002      	add	sp, #8
   a8d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   a8d12:	f7ff bf4b 	b.w	a8bac <__sflush_r>
   a8d16:	9101      	str	r1, [sp, #4]
   a8d18:	f000 f880 	bl	a8e1c <__sinit>
   a8d1c:	9901      	ldr	r1, [sp, #4]
   a8d1e:	e7ef      	b.n	a8d00 <_fflush_r+0xc>

000a8d20 <_cleanup_r>:
   a8d20:	4901      	ldr	r1, [pc, #4]	; (a8d28 <_cleanup_r+0x8>)
   a8d22:	f000 bb51 	b.w	a93c8 <_fwalk_reent>
   a8d26:	bf00      	nop
   a8d28:	000aa0f1 	.word	0x000aa0f1

000a8d2c <__sinit.part.1>:
   a8d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a8d30:	4607      	mov	r7, r0
   a8d32:	4835      	ldr	r0, [pc, #212]	; (a8e08 <__sinit.part.1+0xdc>)
   a8d34:	687d      	ldr	r5, [r7, #4]
   a8d36:	2400      	movs	r4, #0
   a8d38:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   a8d3c:	2304      	movs	r3, #4
   a8d3e:	2103      	movs	r1, #3
   a8d40:	63f8      	str	r0, [r7, #60]	; 0x3c
   a8d42:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   a8d46:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   a8d4a:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   a8d4e:	b083      	sub	sp, #12
   a8d50:	602c      	str	r4, [r5, #0]
   a8d52:	606c      	str	r4, [r5, #4]
   a8d54:	60ac      	str	r4, [r5, #8]
   a8d56:	666c      	str	r4, [r5, #100]	; 0x64
   a8d58:	81ec      	strh	r4, [r5, #14]
   a8d5a:	612c      	str	r4, [r5, #16]
   a8d5c:	616c      	str	r4, [r5, #20]
   a8d5e:	61ac      	str	r4, [r5, #24]
   a8d60:	81ab      	strh	r3, [r5, #12]
   a8d62:	4621      	mov	r1, r4
   a8d64:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   a8d68:	2208      	movs	r2, #8
   a8d6a:	f7ff fd75 	bl	a8858 <memset>
   a8d6e:	f8df b09c 	ldr.w	fp, [pc, #156]	; a8e0c <__sinit.part.1+0xe0>
   a8d72:	68be      	ldr	r6, [r7, #8]
   a8d74:	f8df a098 	ldr.w	sl, [pc, #152]	; a8e10 <__sinit.part.1+0xe4>
   a8d78:	f8df 9098 	ldr.w	r9, [pc, #152]	; a8e14 <__sinit.part.1+0xe8>
   a8d7c:	f8df 8098 	ldr.w	r8, [pc, #152]	; a8e18 <__sinit.part.1+0xec>
   a8d80:	2301      	movs	r3, #1
   a8d82:	2209      	movs	r2, #9
   a8d84:	f8c5 b020 	str.w	fp, [r5, #32]
   a8d88:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   a8d8c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   a8d90:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   a8d94:	61ed      	str	r5, [r5, #28]
   a8d96:	4621      	mov	r1, r4
   a8d98:	81f3      	strh	r3, [r6, #14]
   a8d9a:	81b2      	strh	r2, [r6, #12]
   a8d9c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   a8da0:	6034      	str	r4, [r6, #0]
   a8da2:	6074      	str	r4, [r6, #4]
   a8da4:	60b4      	str	r4, [r6, #8]
   a8da6:	6674      	str	r4, [r6, #100]	; 0x64
   a8da8:	6134      	str	r4, [r6, #16]
   a8daa:	6174      	str	r4, [r6, #20]
   a8dac:	61b4      	str	r4, [r6, #24]
   a8dae:	2208      	movs	r2, #8
   a8db0:	9301      	str	r3, [sp, #4]
   a8db2:	f7ff fd51 	bl	a8858 <memset>
   a8db6:	68fd      	ldr	r5, [r7, #12]
   a8db8:	2012      	movs	r0, #18
   a8dba:	2202      	movs	r2, #2
   a8dbc:	61f6      	str	r6, [r6, #28]
   a8dbe:	f8c6 b020 	str.w	fp, [r6, #32]
   a8dc2:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   a8dc6:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   a8dca:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   a8dce:	4621      	mov	r1, r4
   a8dd0:	81a8      	strh	r0, [r5, #12]
   a8dd2:	81ea      	strh	r2, [r5, #14]
   a8dd4:	602c      	str	r4, [r5, #0]
   a8dd6:	606c      	str	r4, [r5, #4]
   a8dd8:	60ac      	str	r4, [r5, #8]
   a8dda:	666c      	str	r4, [r5, #100]	; 0x64
   a8ddc:	612c      	str	r4, [r5, #16]
   a8dde:	616c      	str	r4, [r5, #20]
   a8de0:	61ac      	str	r4, [r5, #24]
   a8de2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   a8de6:	2208      	movs	r2, #8
   a8de8:	f7ff fd36 	bl	a8858 <memset>
   a8dec:	9b01      	ldr	r3, [sp, #4]
   a8dee:	61ed      	str	r5, [r5, #28]
   a8df0:	f8c5 b020 	str.w	fp, [r5, #32]
   a8df4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   a8df8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   a8dfc:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   a8e00:	63bb      	str	r3, [r7, #56]	; 0x38
   a8e02:	b003      	add	sp, #12
   a8e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a8e08:	000a8d21 	.word	0x000a8d21
   a8e0c:	000a9f7d 	.word	0x000a9f7d
   a8e10:	000a9fa1 	.word	0x000a9fa1
   a8e14:	000a9fd9 	.word	0x000a9fd9
   a8e18:	000a9ff9 	.word	0x000a9ff9

000a8e1c <__sinit>:
   a8e1c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a8e1e:	b103      	cbz	r3, a8e22 <__sinit+0x6>
   a8e20:	4770      	bx	lr
   a8e22:	f7ff bf83 	b.w	a8d2c <__sinit.part.1>
   a8e26:	bf00      	nop

000a8e28 <__sfp_lock_acquire>:
   a8e28:	4770      	bx	lr
   a8e2a:	bf00      	nop

000a8e2c <__sfp_lock_release>:
   a8e2c:	4770      	bx	lr
   a8e2e:	bf00      	nop

000a8e30 <__libc_fini_array>:
   a8e30:	b538      	push	{r3, r4, r5, lr}
   a8e32:	4b08      	ldr	r3, [pc, #32]	; (a8e54 <__libc_fini_array+0x24>)
   a8e34:	4d08      	ldr	r5, [pc, #32]	; (a8e58 <__libc_fini_array+0x28>)
   a8e36:	1aed      	subs	r5, r5, r3
   a8e38:	10ac      	asrs	r4, r5, #2
   a8e3a:	bf18      	it	ne
   a8e3c:	18ed      	addne	r5, r5, r3
   a8e3e:	d005      	beq.n	a8e4c <__libc_fini_array+0x1c>
   a8e40:	3c01      	subs	r4, #1
   a8e42:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   a8e46:	4798      	blx	r3
   a8e48:	2c00      	cmp	r4, #0
   a8e4a:	d1f9      	bne.n	a8e40 <__libc_fini_array+0x10>
   a8e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   a8e50:	f001 bc6e 	b.w	aa730 <_fini>
   a8e54:	000aa73c 	.word	0x000aa73c
   a8e58:	000aa740 	.word	0x000aa740

000a8e5c <_malloc_trim_r>:
   a8e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   a8e5e:	460c      	mov	r4, r1
   a8e60:	4f22      	ldr	r7, [pc, #136]	; (a8eec <_malloc_trim_r+0x90>)
   a8e62:	4606      	mov	r6, r0
   a8e64:	f000 fe84 	bl	a9b70 <__malloc_lock>
   a8e68:	68bb      	ldr	r3, [r7, #8]
   a8e6a:	685d      	ldr	r5, [r3, #4]
   a8e6c:	f025 0503 	bic.w	r5, r5, #3
   a8e70:	1b29      	subs	r1, r5, r4
   a8e72:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   a8e76:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   a8e7a:	f021 010f 	bic.w	r1, r1, #15
   a8e7e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   a8e82:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   a8e86:	db07      	blt.n	a8e98 <_malloc_trim_r+0x3c>
   a8e88:	4630      	mov	r0, r6
   a8e8a:	2100      	movs	r1, #0
   a8e8c:	f001 f864 	bl	a9f58 <_sbrk_r>
   a8e90:	68bb      	ldr	r3, [r7, #8]
   a8e92:	442b      	add	r3, r5
   a8e94:	4298      	cmp	r0, r3
   a8e96:	d004      	beq.n	a8ea2 <_malloc_trim_r+0x46>
   a8e98:	4630      	mov	r0, r6
   a8e9a:	f000 fe6b 	bl	a9b74 <__malloc_unlock>
   a8e9e:	2000      	movs	r0, #0
   a8ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   a8ea2:	4630      	mov	r0, r6
   a8ea4:	4261      	negs	r1, r4
   a8ea6:	f001 f857 	bl	a9f58 <_sbrk_r>
   a8eaa:	3001      	adds	r0, #1
   a8eac:	d00d      	beq.n	a8eca <_malloc_trim_r+0x6e>
   a8eae:	4b10      	ldr	r3, [pc, #64]	; (a8ef0 <_malloc_trim_r+0x94>)
   a8eb0:	68ba      	ldr	r2, [r7, #8]
   a8eb2:	6819      	ldr	r1, [r3, #0]
   a8eb4:	1b2d      	subs	r5, r5, r4
   a8eb6:	f045 0501 	orr.w	r5, r5, #1
   a8eba:	4630      	mov	r0, r6
   a8ebc:	1b09      	subs	r1, r1, r4
   a8ebe:	6055      	str	r5, [r2, #4]
   a8ec0:	6019      	str	r1, [r3, #0]
   a8ec2:	f000 fe57 	bl	a9b74 <__malloc_unlock>
   a8ec6:	2001      	movs	r0, #1
   a8ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   a8eca:	4630      	mov	r0, r6
   a8ecc:	2100      	movs	r1, #0
   a8ece:	f001 f843 	bl	a9f58 <_sbrk_r>
   a8ed2:	68ba      	ldr	r2, [r7, #8]
   a8ed4:	1a83      	subs	r3, r0, r2
   a8ed6:	2b0f      	cmp	r3, #15
   a8ed8:	ddde      	ble.n	a8e98 <_malloc_trim_r+0x3c>
   a8eda:	4c06      	ldr	r4, [pc, #24]	; (a8ef4 <_malloc_trim_r+0x98>)
   a8edc:	4904      	ldr	r1, [pc, #16]	; (a8ef0 <_malloc_trim_r+0x94>)
   a8ede:	6824      	ldr	r4, [r4, #0]
   a8ee0:	f043 0301 	orr.w	r3, r3, #1
   a8ee4:	1b00      	subs	r0, r0, r4
   a8ee6:	6053      	str	r3, [r2, #4]
   a8ee8:	6008      	str	r0, [r1, #0]
   a8eea:	e7d5      	b.n	a8e98 <_malloc_trim_r+0x3c>
   a8eec:	200713c4 	.word	0x200713c4
   a8ef0:	20071e48 	.word	0x20071e48
   a8ef4:	200717d0 	.word	0x200717d0

000a8ef8 <_free_r>:
   a8ef8:	2900      	cmp	r1, #0
   a8efa:	d04e      	beq.n	a8f9a <_free_r+0xa2>
   a8efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a8f00:	460c      	mov	r4, r1
   a8f02:	4680      	mov	r8, r0
   a8f04:	f000 fe34 	bl	a9b70 <__malloc_lock>
   a8f08:	f854 7c04 	ldr.w	r7, [r4, #-4]
   a8f0c:	4962      	ldr	r1, [pc, #392]	; (a9098 <_free_r+0x1a0>)
   a8f0e:	f1a4 0508 	sub.w	r5, r4, #8
   a8f12:	f027 0201 	bic.w	r2, r7, #1
   a8f16:	18ab      	adds	r3, r5, r2
   a8f18:	688e      	ldr	r6, [r1, #8]
   a8f1a:	6858      	ldr	r0, [r3, #4]
   a8f1c:	429e      	cmp	r6, r3
   a8f1e:	f020 0003 	bic.w	r0, r0, #3
   a8f22:	d05a      	beq.n	a8fda <_free_r+0xe2>
   a8f24:	07fe      	lsls	r6, r7, #31
   a8f26:	6058      	str	r0, [r3, #4]
   a8f28:	d40b      	bmi.n	a8f42 <_free_r+0x4a>
   a8f2a:	f854 7c08 	ldr.w	r7, [r4, #-8]
   a8f2e:	f101 0e08 	add.w	lr, r1, #8
   a8f32:	1bed      	subs	r5, r5, r7
   a8f34:	68ac      	ldr	r4, [r5, #8]
   a8f36:	443a      	add	r2, r7
   a8f38:	4574      	cmp	r4, lr
   a8f3a:	d067      	beq.n	a900c <_free_r+0x114>
   a8f3c:	68ef      	ldr	r7, [r5, #12]
   a8f3e:	60e7      	str	r7, [r4, #12]
   a8f40:	60bc      	str	r4, [r7, #8]
   a8f42:	181c      	adds	r4, r3, r0
   a8f44:	6864      	ldr	r4, [r4, #4]
   a8f46:	07e4      	lsls	r4, r4, #31
   a8f48:	d40c      	bmi.n	a8f64 <_free_r+0x6c>
   a8f4a:	4f54      	ldr	r7, [pc, #336]	; (a909c <_free_r+0x1a4>)
   a8f4c:	689c      	ldr	r4, [r3, #8]
   a8f4e:	4402      	add	r2, r0
   a8f50:	42bc      	cmp	r4, r7
   a8f52:	d07c      	beq.n	a904e <_free_r+0x156>
   a8f54:	68d8      	ldr	r0, [r3, #12]
   a8f56:	f042 0301 	orr.w	r3, r2, #1
   a8f5a:	60e0      	str	r0, [r4, #12]
   a8f5c:	6084      	str	r4, [r0, #8]
   a8f5e:	606b      	str	r3, [r5, #4]
   a8f60:	50aa      	str	r2, [r5, r2]
   a8f62:	e003      	b.n	a8f6c <_free_r+0x74>
   a8f64:	f042 0301 	orr.w	r3, r2, #1
   a8f68:	606b      	str	r3, [r5, #4]
   a8f6a:	50aa      	str	r2, [r5, r2]
   a8f6c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   a8f70:	d214      	bcs.n	a8f9c <_free_r+0xa4>
   a8f72:	08d2      	lsrs	r2, r2, #3
   a8f74:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   a8f78:	2401      	movs	r4, #1
   a8f7a:	6848      	ldr	r0, [r1, #4]
   a8f7c:	1092      	asrs	r2, r2, #2
   a8f7e:	fa04 f202 	lsl.w	r2, r4, r2
   a8f82:	689c      	ldr	r4, [r3, #8]
   a8f84:	4310      	orrs	r0, r2
   a8f86:	60ac      	str	r4, [r5, #8]
   a8f88:	60eb      	str	r3, [r5, #12]
   a8f8a:	6048      	str	r0, [r1, #4]
   a8f8c:	609d      	str	r5, [r3, #8]
   a8f8e:	60e5      	str	r5, [r4, #12]
   a8f90:	4640      	mov	r0, r8
   a8f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   a8f96:	f000 bded 	b.w	a9b74 <__malloc_unlock>
   a8f9a:	4770      	bx	lr
   a8f9c:	0a53      	lsrs	r3, r2, #9
   a8f9e:	2b04      	cmp	r3, #4
   a8fa0:	d847      	bhi.n	a9032 <_free_r+0x13a>
   a8fa2:	0993      	lsrs	r3, r2, #6
   a8fa4:	f103 0438 	add.w	r4, r3, #56	; 0x38
   a8fa8:	0060      	lsls	r0, r4, #1
   a8faa:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   a8fae:	6883      	ldr	r3, [r0, #8]
   a8fb0:	4939      	ldr	r1, [pc, #228]	; (a9098 <_free_r+0x1a0>)
   a8fb2:	4283      	cmp	r3, r0
   a8fb4:	d043      	beq.n	a903e <_free_r+0x146>
   a8fb6:	6859      	ldr	r1, [r3, #4]
   a8fb8:	f021 0103 	bic.w	r1, r1, #3
   a8fbc:	4291      	cmp	r1, r2
   a8fbe:	d902      	bls.n	a8fc6 <_free_r+0xce>
   a8fc0:	689b      	ldr	r3, [r3, #8]
   a8fc2:	4298      	cmp	r0, r3
   a8fc4:	d1f7      	bne.n	a8fb6 <_free_r+0xbe>
   a8fc6:	68da      	ldr	r2, [r3, #12]
   a8fc8:	60ea      	str	r2, [r5, #12]
   a8fca:	60ab      	str	r3, [r5, #8]
   a8fcc:	4640      	mov	r0, r8
   a8fce:	6095      	str	r5, [r2, #8]
   a8fd0:	60dd      	str	r5, [r3, #12]
   a8fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   a8fd6:	f000 bdcd 	b.w	a9b74 <__malloc_unlock>
   a8fda:	07ff      	lsls	r7, r7, #31
   a8fdc:	4402      	add	r2, r0
   a8fde:	d407      	bmi.n	a8ff0 <_free_r+0xf8>
   a8fe0:	f854 4c08 	ldr.w	r4, [r4, #-8]
   a8fe4:	1b2d      	subs	r5, r5, r4
   a8fe6:	68eb      	ldr	r3, [r5, #12]
   a8fe8:	68a8      	ldr	r0, [r5, #8]
   a8fea:	4422      	add	r2, r4
   a8fec:	60c3      	str	r3, [r0, #12]
   a8fee:	6098      	str	r0, [r3, #8]
   a8ff0:	4b2b      	ldr	r3, [pc, #172]	; (a90a0 <_free_r+0x1a8>)
   a8ff2:	f042 0001 	orr.w	r0, r2, #1
   a8ff6:	681b      	ldr	r3, [r3, #0]
   a8ff8:	6068      	str	r0, [r5, #4]
   a8ffa:	429a      	cmp	r2, r3
   a8ffc:	608d      	str	r5, [r1, #8]
   a8ffe:	d3c7      	bcc.n	a8f90 <_free_r+0x98>
   a9000:	4b28      	ldr	r3, [pc, #160]	; (a90a4 <_free_r+0x1ac>)
   a9002:	4640      	mov	r0, r8
   a9004:	6819      	ldr	r1, [r3, #0]
   a9006:	f7ff ff29 	bl	a8e5c <_malloc_trim_r>
   a900a:	e7c1      	b.n	a8f90 <_free_r+0x98>
   a900c:	1819      	adds	r1, r3, r0
   a900e:	6849      	ldr	r1, [r1, #4]
   a9010:	07c9      	lsls	r1, r1, #31
   a9012:	d409      	bmi.n	a9028 <_free_r+0x130>
   a9014:	68d9      	ldr	r1, [r3, #12]
   a9016:	4402      	add	r2, r0
   a9018:	689b      	ldr	r3, [r3, #8]
   a901a:	f042 0001 	orr.w	r0, r2, #1
   a901e:	60d9      	str	r1, [r3, #12]
   a9020:	608b      	str	r3, [r1, #8]
   a9022:	6068      	str	r0, [r5, #4]
   a9024:	50aa      	str	r2, [r5, r2]
   a9026:	e7b3      	b.n	a8f90 <_free_r+0x98>
   a9028:	f042 0301 	orr.w	r3, r2, #1
   a902c:	606b      	str	r3, [r5, #4]
   a902e:	50aa      	str	r2, [r5, r2]
   a9030:	e7ae      	b.n	a8f90 <_free_r+0x98>
   a9032:	2b14      	cmp	r3, #20
   a9034:	d814      	bhi.n	a9060 <_free_r+0x168>
   a9036:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   a903a:	0060      	lsls	r0, r4, #1
   a903c:	e7b5      	b.n	a8faa <_free_r+0xb2>
   a903e:	684a      	ldr	r2, [r1, #4]
   a9040:	10a4      	asrs	r4, r4, #2
   a9042:	2001      	movs	r0, #1
   a9044:	40a0      	lsls	r0, r4
   a9046:	4302      	orrs	r2, r0
   a9048:	604a      	str	r2, [r1, #4]
   a904a:	461a      	mov	r2, r3
   a904c:	e7bc      	b.n	a8fc8 <_free_r+0xd0>
   a904e:	f042 0301 	orr.w	r3, r2, #1
   a9052:	614d      	str	r5, [r1, #20]
   a9054:	610d      	str	r5, [r1, #16]
   a9056:	60ec      	str	r4, [r5, #12]
   a9058:	60ac      	str	r4, [r5, #8]
   a905a:	606b      	str	r3, [r5, #4]
   a905c:	50aa      	str	r2, [r5, r2]
   a905e:	e797      	b.n	a8f90 <_free_r+0x98>
   a9060:	2b54      	cmp	r3, #84	; 0x54
   a9062:	d804      	bhi.n	a906e <_free_r+0x176>
   a9064:	0b13      	lsrs	r3, r2, #12
   a9066:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   a906a:	0060      	lsls	r0, r4, #1
   a906c:	e79d      	b.n	a8faa <_free_r+0xb2>
   a906e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   a9072:	d804      	bhi.n	a907e <_free_r+0x186>
   a9074:	0bd3      	lsrs	r3, r2, #15
   a9076:	f103 0477 	add.w	r4, r3, #119	; 0x77
   a907a:	0060      	lsls	r0, r4, #1
   a907c:	e795      	b.n	a8faa <_free_r+0xb2>
   a907e:	f240 5054 	movw	r0, #1364	; 0x554
   a9082:	4283      	cmp	r3, r0
   a9084:	d804      	bhi.n	a9090 <_free_r+0x198>
   a9086:	0c93      	lsrs	r3, r2, #18
   a9088:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   a908c:	0060      	lsls	r0, r4, #1
   a908e:	e78c      	b.n	a8faa <_free_r+0xb2>
   a9090:	20fc      	movs	r0, #252	; 0xfc
   a9092:	247e      	movs	r4, #126	; 0x7e
   a9094:	e789      	b.n	a8faa <_free_r+0xb2>
   a9096:	bf00      	nop
   a9098:	200713c4 	.word	0x200713c4
   a909c:	200713cc 	.word	0x200713cc
   a90a0:	200717cc 	.word	0x200717cc
   a90a4:	20071e44 	.word	0x20071e44

000a90a8 <__sfvwrite_r>:
   a90a8:	6893      	ldr	r3, [r2, #8]
   a90aa:	2b00      	cmp	r3, #0
   a90ac:	f000 80b1 	beq.w	a9212 <__sfvwrite_r+0x16a>
   a90b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a90b4:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   a90b8:	b083      	sub	sp, #12
   a90ba:	f01e 0f08 	tst.w	lr, #8
   a90be:	460c      	mov	r4, r1
   a90c0:	4681      	mov	r9, r0
   a90c2:	4616      	mov	r6, r2
   a90c4:	d028      	beq.n	a9118 <__sfvwrite_r+0x70>
   a90c6:	690b      	ldr	r3, [r1, #16]
   a90c8:	b333      	cbz	r3, a9118 <__sfvwrite_r+0x70>
   a90ca:	f00e 0802 	and.w	r8, lr, #2
   a90ce:	fa1f f088 	uxth.w	r0, r8
   a90d2:	6835      	ldr	r5, [r6, #0]
   a90d4:	b380      	cbz	r0, a9138 <__sfvwrite_r+0x90>
   a90d6:	f04f 0b00 	mov.w	fp, #0
   a90da:	46d8      	mov	r8, fp
   a90dc:	f8df a2e4 	ldr.w	sl, [pc, #740]	; a93c4 <__sfvwrite_r+0x31c>
   a90e0:	f1b8 0f00 	cmp.w	r8, #0
   a90e4:	f000 808f 	beq.w	a9206 <__sfvwrite_r+0x15e>
   a90e8:	45d0      	cmp	r8, sl
   a90ea:	4643      	mov	r3, r8
   a90ec:	4648      	mov	r0, r9
   a90ee:	bf28      	it	cs
   a90f0:	4653      	movcs	r3, sl
   a90f2:	69e1      	ldr	r1, [r4, #28]
   a90f4:	465a      	mov	r2, fp
   a90f6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   a90f8:	47b8      	blx	r7
   a90fa:	2800      	cmp	r0, #0
   a90fc:	f340 80a8 	ble.w	a9250 <__sfvwrite_r+0x1a8>
   a9100:	68b3      	ldr	r3, [r6, #8]
   a9102:	4483      	add	fp, r0
   a9104:	1a1b      	subs	r3, r3, r0
   a9106:	ebc0 0808 	rsb	r8, r0, r8
   a910a:	60b3      	str	r3, [r6, #8]
   a910c:	2b00      	cmp	r3, #0
   a910e:	d1e7      	bne.n	a90e0 <__sfvwrite_r+0x38>
   a9110:	2000      	movs	r0, #0
   a9112:	b003      	add	sp, #12
   a9114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a9118:	4648      	mov	r0, r9
   a911a:	4621      	mov	r1, r4
   a911c:	f7ff fcd4 	bl	a8ac8 <__swsetup_r>
   a9120:	2800      	cmp	r0, #0
   a9122:	f040 8146 	bne.w	a93b2 <__sfvwrite_r+0x30a>
   a9126:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   a912a:	6835      	ldr	r5, [r6, #0]
   a912c:	f00e 0802 	and.w	r8, lr, #2
   a9130:	fa1f f088 	uxth.w	r0, r8
   a9134:	2800      	cmp	r0, #0
   a9136:	d1ce      	bne.n	a90d6 <__sfvwrite_r+0x2e>
   a9138:	f01e 0b01 	ands.w	fp, lr, #1
   a913c:	f040 8091 	bne.w	a9262 <__sfvwrite_r+0x1ba>
   a9140:	46d8      	mov	r8, fp
   a9142:	f1b8 0f00 	cmp.w	r8, #0
   a9146:	d058      	beq.n	a91fa <__sfvwrite_r+0x152>
   a9148:	f41e 7f00 	tst.w	lr, #512	; 0x200
   a914c:	68a7      	ldr	r7, [r4, #8]
   a914e:	d062      	beq.n	a9216 <__sfvwrite_r+0x16e>
   a9150:	45b8      	cmp	r8, r7
   a9152:	46ba      	mov	sl, r7
   a9154:	f0c0 80c2 	bcc.w	a92dc <__sfvwrite_r+0x234>
   a9158:	f41e 6f90 	tst.w	lr, #1152	; 0x480
   a915c:	f000 80c0 	beq.w	a92e0 <__sfvwrite_r+0x238>
   a9160:	6967      	ldr	r7, [r4, #20]
   a9162:	6921      	ldr	r1, [r4, #16]
   a9164:	6823      	ldr	r3, [r4, #0]
   a9166:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   a916a:	1a5b      	subs	r3, r3, r1
   a916c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   a9170:	1c58      	adds	r0, r3, #1
   a9172:	107f      	asrs	r7, r7, #1
   a9174:	4440      	add	r0, r8
   a9176:	4287      	cmp	r7, r0
   a9178:	463a      	mov	r2, r7
   a917a:	bf3c      	itt	cc
   a917c:	4607      	movcc	r7, r0
   a917e:	463a      	movcc	r2, r7
   a9180:	f41e 6f80 	tst.w	lr, #1024	; 0x400
   a9184:	9300      	str	r3, [sp, #0]
   a9186:	f000 80fb 	beq.w	a9380 <__sfvwrite_r+0x2d8>
   a918a:	4611      	mov	r1, r2
   a918c:	4648      	mov	r0, r9
   a918e:	f000 f9bb 	bl	a9508 <_malloc_r>
   a9192:	9b00      	ldr	r3, [sp, #0]
   a9194:	4682      	mov	sl, r0
   a9196:	2800      	cmp	r0, #0
   a9198:	f000 810e 	beq.w	a93b8 <__sfvwrite_r+0x310>
   a919c:	461a      	mov	r2, r3
   a919e:	6921      	ldr	r1, [r4, #16]
   a91a0:	9300      	str	r3, [sp, #0]
   a91a2:	f7ff fae3 	bl	a876c <memcpy>
   a91a6:	89a2      	ldrh	r2, [r4, #12]
   a91a8:	9b00      	ldr	r3, [sp, #0]
   a91aa:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   a91ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   a91b2:	81a2      	strh	r2, [r4, #12]
   a91b4:	eb0a 0003 	add.w	r0, sl, r3
   a91b8:	f8c4 a010 	str.w	sl, [r4, #16]
   a91bc:	1afb      	subs	r3, r7, r3
   a91be:	6167      	str	r7, [r4, #20]
   a91c0:	46c2      	mov	sl, r8
   a91c2:	4647      	mov	r7, r8
   a91c4:	6020      	str	r0, [r4, #0]
   a91c6:	60a3      	str	r3, [r4, #8]
   a91c8:	4652      	mov	r2, sl
   a91ca:	4659      	mov	r1, fp
   a91cc:	f000 fc6c 	bl	a9aa8 <memmove>
   a91d0:	68a0      	ldr	r0, [r4, #8]
   a91d2:	6822      	ldr	r2, [r4, #0]
   a91d4:	1bc0      	subs	r0, r0, r7
   a91d6:	60a0      	str	r0, [r4, #8]
   a91d8:	4640      	mov	r0, r8
   a91da:	eb02 030a 	add.w	r3, r2, sl
   a91de:	6023      	str	r3, [r4, #0]
   a91e0:	68b3      	ldr	r3, [r6, #8]
   a91e2:	4483      	add	fp, r0
   a91e4:	1a1b      	subs	r3, r3, r0
   a91e6:	ebc0 0808 	rsb	r8, r0, r8
   a91ea:	60b3      	str	r3, [r6, #8]
   a91ec:	2b00      	cmp	r3, #0
   a91ee:	d08f      	beq.n	a9110 <__sfvwrite_r+0x68>
   a91f0:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   a91f4:	f1b8 0f00 	cmp.w	r8, #0
   a91f8:	d1a6      	bne.n	a9148 <__sfvwrite_r+0xa0>
   a91fa:	f8d5 b000 	ldr.w	fp, [r5]
   a91fe:	f8d5 8004 	ldr.w	r8, [r5, #4]
   a9202:	3508      	adds	r5, #8
   a9204:	e79d      	b.n	a9142 <__sfvwrite_r+0x9a>
   a9206:	f8d5 b000 	ldr.w	fp, [r5]
   a920a:	f8d5 8004 	ldr.w	r8, [r5, #4]
   a920e:	3508      	adds	r5, #8
   a9210:	e766      	b.n	a90e0 <__sfvwrite_r+0x38>
   a9212:	2000      	movs	r0, #0
   a9214:	4770      	bx	lr
   a9216:	6820      	ldr	r0, [r4, #0]
   a9218:	6923      	ldr	r3, [r4, #16]
   a921a:	4298      	cmp	r0, r3
   a921c:	d803      	bhi.n	a9226 <__sfvwrite_r+0x17e>
   a921e:	6962      	ldr	r2, [r4, #20]
   a9220:	4590      	cmp	r8, r2
   a9222:	f080 8085 	bcs.w	a9330 <__sfvwrite_r+0x288>
   a9226:	4547      	cmp	r7, r8
   a9228:	bf28      	it	cs
   a922a:	4647      	movcs	r7, r8
   a922c:	4659      	mov	r1, fp
   a922e:	463a      	mov	r2, r7
   a9230:	f000 fc3a 	bl	a9aa8 <memmove>
   a9234:	68a3      	ldr	r3, [r4, #8]
   a9236:	6822      	ldr	r2, [r4, #0]
   a9238:	1bdb      	subs	r3, r3, r7
   a923a:	443a      	add	r2, r7
   a923c:	60a3      	str	r3, [r4, #8]
   a923e:	6022      	str	r2, [r4, #0]
   a9240:	2b00      	cmp	r3, #0
   a9242:	d149      	bne.n	a92d8 <__sfvwrite_r+0x230>
   a9244:	4648      	mov	r0, r9
   a9246:	4621      	mov	r1, r4
   a9248:	f7ff fd54 	bl	a8cf4 <_fflush_r>
   a924c:	2800      	cmp	r0, #0
   a924e:	d043      	beq.n	a92d8 <__sfvwrite_r+0x230>
   a9250:	89a3      	ldrh	r3, [r4, #12]
   a9252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a9256:	f04f 30ff 	mov.w	r0, #4294967295
   a925a:	81a3      	strh	r3, [r4, #12]
   a925c:	b003      	add	sp, #12
   a925e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a9262:	4680      	mov	r8, r0
   a9264:	4683      	mov	fp, r0
   a9266:	4682      	mov	sl, r0
   a9268:	9000      	str	r0, [sp, #0]
   a926a:	f1ba 0f00 	cmp.w	sl, #0
   a926e:	d02b      	beq.n	a92c8 <__sfvwrite_r+0x220>
   a9270:	9b00      	ldr	r3, [sp, #0]
   a9272:	2b00      	cmp	r3, #0
   a9274:	d04f      	beq.n	a9316 <__sfvwrite_r+0x26e>
   a9276:	45d0      	cmp	r8, sl
   a9278:	4643      	mov	r3, r8
   a927a:	bf28      	it	cs
   a927c:	4653      	movcs	r3, sl
   a927e:	6820      	ldr	r0, [r4, #0]
   a9280:	6921      	ldr	r1, [r4, #16]
   a9282:	461f      	mov	r7, r3
   a9284:	4288      	cmp	r0, r1
   a9286:	f8d4 e008 	ldr.w	lr, [r4, #8]
   a928a:	6962      	ldr	r2, [r4, #20]
   a928c:	d903      	bls.n	a9296 <__sfvwrite_r+0x1ee>
   a928e:	eb0e 0c02 	add.w	ip, lr, r2
   a9292:	4563      	cmp	r3, ip
   a9294:	dc5e      	bgt.n	a9354 <__sfvwrite_r+0x2ac>
   a9296:	4293      	cmp	r3, r2
   a9298:	db24      	blt.n	a92e4 <__sfvwrite_r+0x23c>
   a929a:	4613      	mov	r3, r2
   a929c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   a929e:	4648      	mov	r0, r9
   a92a0:	69e1      	ldr	r1, [r4, #28]
   a92a2:	465a      	mov	r2, fp
   a92a4:	47b8      	blx	r7
   a92a6:	1e07      	subs	r7, r0, #0
   a92a8:	ddd2      	ble.n	a9250 <__sfvwrite_r+0x1a8>
   a92aa:	ebb8 0807 	subs.w	r8, r8, r7
   a92ae:	d029      	beq.n	a9304 <__sfvwrite_r+0x25c>
   a92b0:	68b3      	ldr	r3, [r6, #8]
   a92b2:	44bb      	add	fp, r7
   a92b4:	1bdb      	subs	r3, r3, r7
   a92b6:	ebc7 0a0a 	rsb	sl, r7, sl
   a92ba:	60b3      	str	r3, [r6, #8]
   a92bc:	2b00      	cmp	r3, #0
   a92be:	f43f af27 	beq.w	a9110 <__sfvwrite_r+0x68>
   a92c2:	f1ba 0f00 	cmp.w	sl, #0
   a92c6:	d1d3      	bne.n	a9270 <__sfvwrite_r+0x1c8>
   a92c8:	2300      	movs	r3, #0
   a92ca:	f8d5 b000 	ldr.w	fp, [r5]
   a92ce:	f8d5 a004 	ldr.w	sl, [r5, #4]
   a92d2:	9300      	str	r3, [sp, #0]
   a92d4:	3508      	adds	r5, #8
   a92d6:	e7c8      	b.n	a926a <__sfvwrite_r+0x1c2>
   a92d8:	4638      	mov	r0, r7
   a92da:	e781      	b.n	a91e0 <__sfvwrite_r+0x138>
   a92dc:	4647      	mov	r7, r8
   a92de:	46c2      	mov	sl, r8
   a92e0:	6820      	ldr	r0, [r4, #0]
   a92e2:	e771      	b.n	a91c8 <__sfvwrite_r+0x120>
   a92e4:	461a      	mov	r2, r3
   a92e6:	4659      	mov	r1, fp
   a92e8:	9301      	str	r3, [sp, #4]
   a92ea:	f000 fbdd 	bl	a9aa8 <memmove>
   a92ee:	68a2      	ldr	r2, [r4, #8]
   a92f0:	6821      	ldr	r1, [r4, #0]
   a92f2:	9b01      	ldr	r3, [sp, #4]
   a92f4:	ebb8 0807 	subs.w	r8, r8, r7
   a92f8:	eba2 0203 	sub.w	r2, r2, r3
   a92fc:	440b      	add	r3, r1
   a92fe:	60a2      	str	r2, [r4, #8]
   a9300:	6023      	str	r3, [r4, #0]
   a9302:	d1d5      	bne.n	a92b0 <__sfvwrite_r+0x208>
   a9304:	4648      	mov	r0, r9
   a9306:	4621      	mov	r1, r4
   a9308:	f7ff fcf4 	bl	a8cf4 <_fflush_r>
   a930c:	2800      	cmp	r0, #0
   a930e:	d19f      	bne.n	a9250 <__sfvwrite_r+0x1a8>
   a9310:	f8cd 8000 	str.w	r8, [sp]
   a9314:	e7cc      	b.n	a92b0 <__sfvwrite_r+0x208>
   a9316:	4658      	mov	r0, fp
   a9318:	210a      	movs	r1, #10
   a931a:	4652      	mov	r2, sl
   a931c:	f000 fb7a 	bl	a9a14 <memchr>
   a9320:	2800      	cmp	r0, #0
   a9322:	d041      	beq.n	a93a8 <__sfvwrite_r+0x300>
   a9324:	3001      	adds	r0, #1
   a9326:	2301      	movs	r3, #1
   a9328:	ebcb 0800 	rsb	r8, fp, r0
   a932c:	9300      	str	r3, [sp, #0]
   a932e:	e7a2      	b.n	a9276 <__sfvwrite_r+0x1ce>
   a9330:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   a9334:	4543      	cmp	r3, r8
   a9336:	bf28      	it	cs
   a9338:	4643      	movcs	r3, r8
   a933a:	fb93 f3f2 	sdiv	r3, r3, r2
   a933e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   a9340:	fb03 f302 	mul.w	r3, r3, r2
   a9344:	4648      	mov	r0, r9
   a9346:	69e1      	ldr	r1, [r4, #28]
   a9348:	465a      	mov	r2, fp
   a934a:	47b8      	blx	r7
   a934c:	2800      	cmp	r0, #0
   a934e:	f73f af47 	bgt.w	a91e0 <__sfvwrite_r+0x138>
   a9352:	e77d      	b.n	a9250 <__sfvwrite_r+0x1a8>
   a9354:	4662      	mov	r2, ip
   a9356:	4659      	mov	r1, fp
   a9358:	f8cd c004 	str.w	ip, [sp, #4]
   a935c:	f000 fba4 	bl	a9aa8 <memmove>
   a9360:	6823      	ldr	r3, [r4, #0]
   a9362:	f8dd c004 	ldr.w	ip, [sp, #4]
   a9366:	4648      	mov	r0, r9
   a9368:	4463      	add	r3, ip
   a936a:	6023      	str	r3, [r4, #0]
   a936c:	4621      	mov	r1, r4
   a936e:	f7ff fcc1 	bl	a8cf4 <_fflush_r>
   a9372:	f8dd c004 	ldr.w	ip, [sp, #4]
   a9376:	2800      	cmp	r0, #0
   a9378:	f47f af6a 	bne.w	a9250 <__sfvwrite_r+0x1a8>
   a937c:	4667      	mov	r7, ip
   a937e:	e794      	b.n	a92aa <__sfvwrite_r+0x202>
   a9380:	4648      	mov	r0, r9
   a9382:	f000 fbf9 	bl	a9b78 <_realloc_r>
   a9386:	9b00      	ldr	r3, [sp, #0]
   a9388:	4682      	mov	sl, r0
   a938a:	2800      	cmp	r0, #0
   a938c:	f47f af12 	bne.w	a91b4 <__sfvwrite_r+0x10c>
   a9390:	4648      	mov	r0, r9
   a9392:	6921      	ldr	r1, [r4, #16]
   a9394:	f7ff fdb0 	bl	a8ef8 <_free_r>
   a9398:	89a3      	ldrh	r3, [r4, #12]
   a939a:	220c      	movs	r2, #12
   a939c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   a93a0:	b29b      	uxth	r3, r3
   a93a2:	f8c9 2000 	str.w	r2, [r9]
   a93a6:	e754      	b.n	a9252 <__sfvwrite_r+0x1aa>
   a93a8:	2301      	movs	r3, #1
   a93aa:	f10a 0801 	add.w	r8, sl, #1
   a93ae:	9300      	str	r3, [sp, #0]
   a93b0:	e761      	b.n	a9276 <__sfvwrite_r+0x1ce>
   a93b2:	f04f 30ff 	mov.w	r0, #4294967295
   a93b6:	e6ac      	b.n	a9112 <__sfvwrite_r+0x6a>
   a93b8:	230c      	movs	r3, #12
   a93ba:	f8c9 3000 	str.w	r3, [r9]
   a93be:	89a3      	ldrh	r3, [r4, #12]
   a93c0:	e747      	b.n	a9252 <__sfvwrite_r+0x1aa>
   a93c2:	bf00      	nop
   a93c4:	7ffffc00 	.word	0x7ffffc00

000a93c8 <_fwalk_reent>:
   a93c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   a93cc:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   a93d0:	d01e      	beq.n	a9410 <_fwalk_reent+0x48>
   a93d2:	4688      	mov	r8, r1
   a93d4:	4607      	mov	r7, r0
   a93d6:	f04f 0900 	mov.w	r9, #0
   a93da:	6875      	ldr	r5, [r6, #4]
   a93dc:	68b4      	ldr	r4, [r6, #8]
   a93de:	3d01      	subs	r5, #1
   a93e0:	d410      	bmi.n	a9404 <_fwalk_reent+0x3c>
   a93e2:	89a3      	ldrh	r3, [r4, #12]
   a93e4:	3d01      	subs	r5, #1
   a93e6:	2b01      	cmp	r3, #1
   a93e8:	d908      	bls.n	a93fc <_fwalk_reent+0x34>
   a93ea:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   a93ee:	3301      	adds	r3, #1
   a93f0:	d004      	beq.n	a93fc <_fwalk_reent+0x34>
   a93f2:	4638      	mov	r0, r7
   a93f4:	4621      	mov	r1, r4
   a93f6:	47c0      	blx	r8
   a93f8:	ea49 0900 	orr.w	r9, r9, r0
   a93fc:	1c6b      	adds	r3, r5, #1
   a93fe:	f104 0468 	add.w	r4, r4, #104	; 0x68
   a9402:	d1ee      	bne.n	a93e2 <_fwalk_reent+0x1a>
   a9404:	6836      	ldr	r6, [r6, #0]
   a9406:	2e00      	cmp	r6, #0
   a9408:	d1e7      	bne.n	a93da <_fwalk_reent+0x12>
   a940a:	4648      	mov	r0, r9
   a940c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   a9410:	46b1      	mov	r9, r6
   a9412:	4648      	mov	r0, r9
   a9414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000a9418 <__smakebuf_r>:
   a9418:	898b      	ldrh	r3, [r1, #12]
   a941a:	b29a      	uxth	r2, r3
   a941c:	f012 0f02 	tst.w	r2, #2
   a9420:	d13c      	bne.n	a949c <__smakebuf_r+0x84>
   a9422:	b5f0      	push	{r4, r5, r6, r7, lr}
   a9424:	460c      	mov	r4, r1
   a9426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a942a:	b091      	sub	sp, #68	; 0x44
   a942c:	2900      	cmp	r1, #0
   a942e:	4605      	mov	r5, r0
   a9430:	db19      	blt.n	a9466 <__smakebuf_r+0x4e>
   a9432:	aa01      	add	r2, sp, #4
   a9434:	f000 fe9e 	bl	aa174 <_fstat_r>
   a9438:	2800      	cmp	r0, #0
   a943a:	db12      	blt.n	a9462 <__smakebuf_r+0x4a>
   a943c:	9b02      	ldr	r3, [sp, #8]
   a943e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   a9442:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
   a9446:	fab7 f787 	clz	r7, r7
   a944a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   a944e:	ea4f 1757 	mov.w	r7, r7, lsr #5
   a9452:	d02a      	beq.n	a94aa <__smakebuf_r+0x92>
   a9454:	89a3      	ldrh	r3, [r4, #12]
   a9456:	f44f 6680 	mov.w	r6, #1024	; 0x400
   a945a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   a945e:	81a3      	strh	r3, [r4, #12]
   a9460:	e00b      	b.n	a947a <__smakebuf_r+0x62>
   a9462:	89a3      	ldrh	r3, [r4, #12]
   a9464:	b29a      	uxth	r2, r3
   a9466:	f012 0f80 	tst.w	r2, #128	; 0x80
   a946a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   a946e:	81a3      	strh	r3, [r4, #12]
   a9470:	bf0c      	ite	eq
   a9472:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   a9476:	2640      	movne	r6, #64	; 0x40
   a9478:	2700      	movs	r7, #0
   a947a:	4628      	mov	r0, r5
   a947c:	4631      	mov	r1, r6
   a947e:	f000 f843 	bl	a9508 <_malloc_r>
   a9482:	89a3      	ldrh	r3, [r4, #12]
   a9484:	b340      	cbz	r0, a94d8 <__smakebuf_r+0xc0>
   a9486:	4a1a      	ldr	r2, [pc, #104]	; (a94f0 <__smakebuf_r+0xd8>)
   a9488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   a948c:	63ea      	str	r2, [r5, #60]	; 0x3c
   a948e:	81a3      	strh	r3, [r4, #12]
   a9490:	6020      	str	r0, [r4, #0]
   a9492:	6120      	str	r0, [r4, #16]
   a9494:	6166      	str	r6, [r4, #20]
   a9496:	b99f      	cbnz	r7, a94c0 <__smakebuf_r+0xa8>
   a9498:	b011      	add	sp, #68	; 0x44
   a949a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a949c:	f101 0343 	add.w	r3, r1, #67	; 0x43
   a94a0:	2201      	movs	r2, #1
   a94a2:	600b      	str	r3, [r1, #0]
   a94a4:	610b      	str	r3, [r1, #16]
   a94a6:	614a      	str	r2, [r1, #20]
   a94a8:	4770      	bx	lr
   a94aa:	4b12      	ldr	r3, [pc, #72]	; (a94f4 <__smakebuf_r+0xdc>)
   a94ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   a94ae:	429a      	cmp	r2, r3
   a94b0:	d1d0      	bne.n	a9454 <__smakebuf_r+0x3c>
   a94b2:	89a3      	ldrh	r3, [r4, #12]
   a94b4:	f44f 6680 	mov.w	r6, #1024	; 0x400
   a94b8:	4333      	orrs	r3, r6
   a94ba:	81a3      	strh	r3, [r4, #12]
   a94bc:	64e6      	str	r6, [r4, #76]	; 0x4c
   a94be:	e7dc      	b.n	a947a <__smakebuf_r+0x62>
   a94c0:	4628      	mov	r0, r5
   a94c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   a94c6:	f000 fe69 	bl	aa19c <_isatty_r>
   a94ca:	2800      	cmp	r0, #0
   a94cc:	d0e4      	beq.n	a9498 <__smakebuf_r+0x80>
   a94ce:	89a3      	ldrh	r3, [r4, #12]
   a94d0:	f043 0301 	orr.w	r3, r3, #1
   a94d4:	81a3      	strh	r3, [r4, #12]
   a94d6:	e7df      	b.n	a9498 <__smakebuf_r+0x80>
   a94d8:	059a      	lsls	r2, r3, #22
   a94da:	d4dd      	bmi.n	a9498 <__smakebuf_r+0x80>
   a94dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
   a94e0:	f043 0302 	orr.w	r3, r3, #2
   a94e4:	2101      	movs	r1, #1
   a94e6:	81a3      	strh	r3, [r4, #12]
   a94e8:	6022      	str	r2, [r4, #0]
   a94ea:	6122      	str	r2, [r4, #16]
   a94ec:	6161      	str	r1, [r4, #20]
   a94ee:	e7d3      	b.n	a9498 <__smakebuf_r+0x80>
   a94f0:	000a8d21 	.word	0x000a8d21
   a94f4:	000a9fd9 	.word	0x000a9fd9

000a94f8 <malloc>:
   a94f8:	4b02      	ldr	r3, [pc, #8]	; (a9504 <malloc+0xc>)
   a94fa:	4601      	mov	r1, r0
   a94fc:	6818      	ldr	r0, [r3, #0]
   a94fe:	f000 b803 	b.w	a9508 <_malloc_r>
   a9502:	bf00      	nop
   a9504:	200713c0 	.word	0x200713c0

000a9508 <_malloc_r>:
   a9508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a950c:	f101 050b 	add.w	r5, r1, #11
   a9510:	2d16      	cmp	r5, #22
   a9512:	b083      	sub	sp, #12
   a9514:	4606      	mov	r6, r0
   a9516:	d927      	bls.n	a9568 <_malloc_r+0x60>
   a9518:	f035 0507 	bics.w	r5, r5, #7
   a951c:	f100 80b6 	bmi.w	a968c <_malloc_r+0x184>
   a9520:	42a9      	cmp	r1, r5
   a9522:	f200 80b3 	bhi.w	a968c <_malloc_r+0x184>
   a9526:	f000 fb23 	bl	a9b70 <__malloc_lock>
   a952a:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   a952e:	d222      	bcs.n	a9576 <_malloc_r+0x6e>
   a9530:	4fbc      	ldr	r7, [pc, #752]	; (a9824 <_malloc_r+0x31c>)
   a9532:	08e8      	lsrs	r0, r5, #3
   a9534:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
   a9538:	68dc      	ldr	r4, [r3, #12]
   a953a:	429c      	cmp	r4, r3
   a953c:	f000 81bc 	beq.w	a98b8 <_malloc_r+0x3b0>
   a9540:	6863      	ldr	r3, [r4, #4]
   a9542:	68e1      	ldr	r1, [r4, #12]
   a9544:	f023 0303 	bic.w	r3, r3, #3
   a9548:	4423      	add	r3, r4
   a954a:	685a      	ldr	r2, [r3, #4]
   a954c:	68a5      	ldr	r5, [r4, #8]
   a954e:	f042 0201 	orr.w	r2, r2, #1
   a9552:	60e9      	str	r1, [r5, #12]
   a9554:	4630      	mov	r0, r6
   a9556:	608d      	str	r5, [r1, #8]
   a9558:	605a      	str	r2, [r3, #4]
   a955a:	f000 fb0b 	bl	a9b74 <__malloc_unlock>
   a955e:	3408      	adds	r4, #8
   a9560:	4620      	mov	r0, r4
   a9562:	b003      	add	sp, #12
   a9564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a9568:	2910      	cmp	r1, #16
   a956a:	f200 808f 	bhi.w	a968c <_malloc_r+0x184>
   a956e:	f000 faff 	bl	a9b70 <__malloc_lock>
   a9572:	2510      	movs	r5, #16
   a9574:	e7dc      	b.n	a9530 <_malloc_r+0x28>
   a9576:	0a68      	lsrs	r0, r5, #9
   a9578:	f000 808f 	beq.w	a969a <_malloc_r+0x192>
   a957c:	2804      	cmp	r0, #4
   a957e:	f200 8147 	bhi.w	a9810 <_malloc_r+0x308>
   a9582:	09a8      	lsrs	r0, r5, #6
   a9584:	3038      	adds	r0, #56	; 0x38
   a9586:	0041      	lsls	r1, r0, #1
   a9588:	4fa6      	ldr	r7, [pc, #664]	; (a9824 <_malloc_r+0x31c>)
   a958a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   a958e:	68cc      	ldr	r4, [r1, #12]
   a9590:	42a1      	cmp	r1, r4
   a9592:	d106      	bne.n	a95a2 <_malloc_r+0x9a>
   a9594:	e00c      	b.n	a95b0 <_malloc_r+0xa8>
   a9596:	2a00      	cmp	r2, #0
   a9598:	f280 8082 	bge.w	a96a0 <_malloc_r+0x198>
   a959c:	68e4      	ldr	r4, [r4, #12]
   a959e:	42a1      	cmp	r1, r4
   a95a0:	d006      	beq.n	a95b0 <_malloc_r+0xa8>
   a95a2:	6863      	ldr	r3, [r4, #4]
   a95a4:	f023 0303 	bic.w	r3, r3, #3
   a95a8:	1b5a      	subs	r2, r3, r5
   a95aa:	2a0f      	cmp	r2, #15
   a95ac:	ddf3      	ble.n	a9596 <_malloc_r+0x8e>
   a95ae:	3801      	subs	r0, #1
   a95b0:	3001      	adds	r0, #1
   a95b2:	499c      	ldr	r1, [pc, #624]	; (a9824 <_malloc_r+0x31c>)
   a95b4:	693c      	ldr	r4, [r7, #16]
   a95b6:	f101 0e08 	add.w	lr, r1, #8
   a95ba:	4574      	cmp	r4, lr
   a95bc:	f000 8171 	beq.w	a98a2 <_malloc_r+0x39a>
   a95c0:	6863      	ldr	r3, [r4, #4]
   a95c2:	f023 0303 	bic.w	r3, r3, #3
   a95c6:	1b5a      	subs	r2, r3, r5
   a95c8:	2a0f      	cmp	r2, #15
   a95ca:	f300 8157 	bgt.w	a987c <_malloc_r+0x374>
   a95ce:	2a00      	cmp	r2, #0
   a95d0:	f8c1 e014 	str.w	lr, [r1, #20]
   a95d4:	f8c1 e010 	str.w	lr, [r1, #16]
   a95d8:	da66      	bge.n	a96a8 <_malloc_r+0x1a0>
   a95da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   a95de:	f080 812d 	bcs.w	a983c <_malloc_r+0x334>
   a95e2:	08db      	lsrs	r3, r3, #3
   a95e4:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
   a95e8:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   a95ec:	684a      	ldr	r2, [r1, #4]
   a95ee:	2301      	movs	r3, #1
   a95f0:	fa03 f30c 	lsl.w	r3, r3, ip
   a95f4:	f8d8 c008 	ldr.w	ip, [r8, #8]
   a95f8:	4313      	orrs	r3, r2
   a95fa:	f8c4 c008 	str.w	ip, [r4, #8]
   a95fe:	f8c4 800c 	str.w	r8, [r4, #12]
   a9602:	604b      	str	r3, [r1, #4]
   a9604:	f8c8 4008 	str.w	r4, [r8, #8]
   a9608:	f8cc 400c 	str.w	r4, [ip, #12]
   a960c:	1082      	asrs	r2, r0, #2
   a960e:	2401      	movs	r4, #1
   a9610:	4094      	lsls	r4, r2
   a9612:	429c      	cmp	r4, r3
   a9614:	d855      	bhi.n	a96c2 <_malloc_r+0x1ba>
   a9616:	4223      	tst	r3, r4
   a9618:	d106      	bne.n	a9628 <_malloc_r+0x120>
   a961a:	f020 0003 	bic.w	r0, r0, #3
   a961e:	0064      	lsls	r4, r4, #1
   a9620:	4223      	tst	r3, r4
   a9622:	f100 0004 	add.w	r0, r0, #4
   a9626:	d0fa      	beq.n	a961e <_malloc_r+0x116>
   a9628:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
   a962c:	46c4      	mov	ip, r8
   a962e:	4681      	mov	r9, r0
   a9630:	f8dc 300c 	ldr.w	r3, [ip, #12]
   a9634:	459c      	cmp	ip, r3
   a9636:	d107      	bne.n	a9648 <_malloc_r+0x140>
   a9638:	e135      	b.n	a98a6 <_malloc_r+0x39e>
   a963a:	2900      	cmp	r1, #0
   a963c:	f280 8145 	bge.w	a98ca <_malloc_r+0x3c2>
   a9640:	68db      	ldr	r3, [r3, #12]
   a9642:	459c      	cmp	ip, r3
   a9644:	f000 812f 	beq.w	a98a6 <_malloc_r+0x39e>
   a9648:	685a      	ldr	r2, [r3, #4]
   a964a:	f022 0203 	bic.w	r2, r2, #3
   a964e:	1b51      	subs	r1, r2, r5
   a9650:	290f      	cmp	r1, #15
   a9652:	ddf2      	ble.n	a963a <_malloc_r+0x132>
   a9654:	461c      	mov	r4, r3
   a9656:	68da      	ldr	r2, [r3, #12]
   a9658:	f854 cf08 	ldr.w	ip, [r4, #8]!
   a965c:	f045 0901 	orr.w	r9, r5, #1
   a9660:	f041 0801 	orr.w	r8, r1, #1
   a9664:	441d      	add	r5, r3
   a9666:	f8c3 9004 	str.w	r9, [r3, #4]
   a966a:	4630      	mov	r0, r6
   a966c:	f8cc 200c 	str.w	r2, [ip, #12]
   a9670:	f8c2 c008 	str.w	ip, [r2, #8]
   a9674:	617d      	str	r5, [r7, #20]
   a9676:	613d      	str	r5, [r7, #16]
   a9678:	f8c5 e00c 	str.w	lr, [r5, #12]
   a967c:	f8c5 e008 	str.w	lr, [r5, #8]
   a9680:	f8c5 8004 	str.w	r8, [r5, #4]
   a9684:	5069      	str	r1, [r5, r1]
   a9686:	f000 fa75 	bl	a9b74 <__malloc_unlock>
   a968a:	e769      	b.n	a9560 <_malloc_r+0x58>
   a968c:	2400      	movs	r4, #0
   a968e:	4620      	mov	r0, r4
   a9690:	230c      	movs	r3, #12
   a9692:	6033      	str	r3, [r6, #0]
   a9694:	b003      	add	sp, #12
   a9696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a969a:	217e      	movs	r1, #126	; 0x7e
   a969c:	203f      	movs	r0, #63	; 0x3f
   a969e:	e773      	b.n	a9588 <_malloc_r+0x80>
   a96a0:	4423      	add	r3, r4
   a96a2:	685a      	ldr	r2, [r3, #4]
   a96a4:	68e1      	ldr	r1, [r4, #12]
   a96a6:	e751      	b.n	a954c <_malloc_r+0x44>
   a96a8:	4423      	add	r3, r4
   a96aa:	685a      	ldr	r2, [r3, #4]
   a96ac:	4630      	mov	r0, r6
   a96ae:	f042 0201 	orr.w	r2, r2, #1
   a96b2:	605a      	str	r2, [r3, #4]
   a96b4:	3408      	adds	r4, #8
   a96b6:	f000 fa5d 	bl	a9b74 <__malloc_unlock>
   a96ba:	4620      	mov	r0, r4
   a96bc:	b003      	add	sp, #12
   a96be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a96c2:	68bc      	ldr	r4, [r7, #8]
   a96c4:	6863      	ldr	r3, [r4, #4]
   a96c6:	f023 0803 	bic.w	r8, r3, #3
   a96ca:	4545      	cmp	r5, r8
   a96cc:	d804      	bhi.n	a96d8 <_malloc_r+0x1d0>
   a96ce:	ebc5 0308 	rsb	r3, r5, r8
   a96d2:	2b0f      	cmp	r3, #15
   a96d4:	f300 808c 	bgt.w	a97f0 <_malloc_r+0x2e8>
   a96d8:	4b53      	ldr	r3, [pc, #332]	; (a9828 <_malloc_r+0x320>)
   a96da:	f8df a15c 	ldr.w	sl, [pc, #348]	; a9838 <_malloc_r+0x330>
   a96de:	681a      	ldr	r2, [r3, #0]
   a96e0:	f8da 3000 	ldr.w	r3, [sl]
   a96e4:	442a      	add	r2, r5
   a96e6:	3301      	adds	r3, #1
   a96e8:	eb04 0b08 	add.w	fp, r4, r8
   a96ec:	f000 8151 	beq.w	a9992 <_malloc_r+0x48a>
   a96f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   a96f4:	320f      	adds	r2, #15
   a96f6:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   a96fa:	f022 020f 	bic.w	r2, r2, #15
   a96fe:	4611      	mov	r1, r2
   a9700:	4630      	mov	r0, r6
   a9702:	9201      	str	r2, [sp, #4]
   a9704:	f000 fc28 	bl	a9f58 <_sbrk_r>
   a9708:	f1b0 3fff 	cmp.w	r0, #4294967295
   a970c:	4681      	mov	r9, r0
   a970e:	9a01      	ldr	r2, [sp, #4]
   a9710:	f000 8148 	beq.w	a99a4 <_malloc_r+0x49c>
   a9714:	4583      	cmp	fp, r0
   a9716:	f200 80ef 	bhi.w	a98f8 <_malloc_r+0x3f0>
   a971a:	4b44      	ldr	r3, [pc, #272]	; (a982c <_malloc_r+0x324>)
   a971c:	45cb      	cmp	fp, r9
   a971e:	6819      	ldr	r1, [r3, #0]
   a9720:	4411      	add	r1, r2
   a9722:	6019      	str	r1, [r3, #0]
   a9724:	f000 8143 	beq.w	a99ae <_malloc_r+0x4a6>
   a9728:	f8da 0000 	ldr.w	r0, [sl]
   a972c:	f8df e108 	ldr.w	lr, [pc, #264]	; a9838 <_malloc_r+0x330>
   a9730:	3001      	adds	r0, #1
   a9732:	bf1b      	ittet	ne
   a9734:	ebcb 0b09 	rsbne	fp, fp, r9
   a9738:	4459      	addne	r1, fp
   a973a:	f8ce 9000 	streq.w	r9, [lr]
   a973e:	6019      	strne	r1, [r3, #0]
   a9740:	f019 0107 	ands.w	r1, r9, #7
   a9744:	f000 8108 	beq.w	a9958 <_malloc_r+0x450>
   a9748:	f1c1 0008 	rsb	r0, r1, #8
   a974c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   a9750:	4481      	add	r9, r0
   a9752:	3108      	adds	r1, #8
   a9754:	444a      	add	r2, r9
   a9756:	f3c2 020b 	ubfx	r2, r2, #0, #12
   a975a:	ebc2 0a01 	rsb	sl, r2, r1
   a975e:	4651      	mov	r1, sl
   a9760:	4630      	mov	r0, r6
   a9762:	9301      	str	r3, [sp, #4]
   a9764:	f000 fbf8 	bl	a9f58 <_sbrk_r>
   a9768:	1c43      	adds	r3, r0, #1
   a976a:	9b01      	ldr	r3, [sp, #4]
   a976c:	f000 812d 	beq.w	a99ca <_malloc_r+0x4c2>
   a9770:	ebc9 0200 	rsb	r2, r9, r0
   a9774:	4452      	add	r2, sl
   a9776:	f042 0201 	orr.w	r2, r2, #1
   a977a:	6819      	ldr	r1, [r3, #0]
   a977c:	42bc      	cmp	r4, r7
   a977e:	4451      	add	r1, sl
   a9780:	f8c7 9008 	str.w	r9, [r7, #8]
   a9784:	6019      	str	r1, [r3, #0]
   a9786:	f8c9 2004 	str.w	r2, [r9, #4]
   a978a:	f8df a0a0 	ldr.w	sl, [pc, #160]	; a982c <_malloc_r+0x324>
   a978e:	d016      	beq.n	a97be <_malloc_r+0x2b6>
   a9790:	f1b8 0f0f 	cmp.w	r8, #15
   a9794:	f240 80ef 	bls.w	a9976 <_malloc_r+0x46e>
   a9798:	6862      	ldr	r2, [r4, #4]
   a979a:	f1a8 030c 	sub.w	r3, r8, #12
   a979e:	f023 0307 	bic.w	r3, r3, #7
   a97a2:	f002 0201 	and.w	r2, r2, #1
   a97a6:	18e0      	adds	r0, r4, r3
   a97a8:	f04f 0e05 	mov.w	lr, #5
   a97ac:	431a      	orrs	r2, r3
   a97ae:	2b0f      	cmp	r3, #15
   a97b0:	6062      	str	r2, [r4, #4]
   a97b2:	f8c0 e004 	str.w	lr, [r0, #4]
   a97b6:	f8c0 e008 	str.w	lr, [r0, #8]
   a97ba:	f200 810a 	bhi.w	a99d2 <_malloc_r+0x4ca>
   a97be:	4b1c      	ldr	r3, [pc, #112]	; (a9830 <_malloc_r+0x328>)
   a97c0:	68bc      	ldr	r4, [r7, #8]
   a97c2:	681a      	ldr	r2, [r3, #0]
   a97c4:	4291      	cmp	r1, r2
   a97c6:	bf88      	it	hi
   a97c8:	6019      	strhi	r1, [r3, #0]
   a97ca:	4b1a      	ldr	r3, [pc, #104]	; (a9834 <_malloc_r+0x32c>)
   a97cc:	681a      	ldr	r2, [r3, #0]
   a97ce:	4291      	cmp	r1, r2
   a97d0:	6862      	ldr	r2, [r4, #4]
   a97d2:	bf88      	it	hi
   a97d4:	6019      	strhi	r1, [r3, #0]
   a97d6:	f022 0203 	bic.w	r2, r2, #3
   a97da:	4295      	cmp	r5, r2
   a97dc:	eba2 0305 	sub.w	r3, r2, r5
   a97e0:	d801      	bhi.n	a97e6 <_malloc_r+0x2de>
   a97e2:	2b0f      	cmp	r3, #15
   a97e4:	dc04      	bgt.n	a97f0 <_malloc_r+0x2e8>
   a97e6:	4630      	mov	r0, r6
   a97e8:	f000 f9c4 	bl	a9b74 <__malloc_unlock>
   a97ec:	2400      	movs	r4, #0
   a97ee:	e6b7      	b.n	a9560 <_malloc_r+0x58>
   a97f0:	f045 0201 	orr.w	r2, r5, #1
   a97f4:	f043 0301 	orr.w	r3, r3, #1
   a97f8:	4425      	add	r5, r4
   a97fa:	6062      	str	r2, [r4, #4]
   a97fc:	4630      	mov	r0, r6
   a97fe:	60bd      	str	r5, [r7, #8]
   a9800:	3408      	adds	r4, #8
   a9802:	606b      	str	r3, [r5, #4]
   a9804:	f000 f9b6 	bl	a9b74 <__malloc_unlock>
   a9808:	4620      	mov	r0, r4
   a980a:	b003      	add	sp, #12
   a980c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a9810:	2814      	cmp	r0, #20
   a9812:	d969      	bls.n	a98e8 <_malloc_r+0x3e0>
   a9814:	2854      	cmp	r0, #84	; 0x54
   a9816:	f200 8098 	bhi.w	a994a <_malloc_r+0x442>
   a981a:	0b28      	lsrs	r0, r5, #12
   a981c:	306e      	adds	r0, #110	; 0x6e
   a981e:	0041      	lsls	r1, r0, #1
   a9820:	e6b2      	b.n	a9588 <_malloc_r+0x80>
   a9822:	bf00      	nop
   a9824:	200713c4 	.word	0x200713c4
   a9828:	20071e44 	.word	0x20071e44
   a982c:	20071e48 	.word	0x20071e48
   a9830:	20071e40 	.word	0x20071e40
   a9834:	20071e3c 	.word	0x20071e3c
   a9838:	200717d0 	.word	0x200717d0
   a983c:	0a5a      	lsrs	r2, r3, #9
   a983e:	2a04      	cmp	r2, #4
   a9840:	d955      	bls.n	a98ee <_malloc_r+0x3e6>
   a9842:	2a14      	cmp	r2, #20
   a9844:	f200 80a7 	bhi.w	a9996 <_malloc_r+0x48e>
   a9848:	325b      	adds	r2, #91	; 0x5b
   a984a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   a984e:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
   a9852:	f8dc 1008 	ldr.w	r1, [ip, #8]
   a9856:	f8df 81b8 	ldr.w	r8, [pc, #440]	; a9a10 <_malloc_r+0x508>
   a985a:	4561      	cmp	r1, ip
   a985c:	d07f      	beq.n	a995e <_malloc_r+0x456>
   a985e:	684a      	ldr	r2, [r1, #4]
   a9860:	f022 0203 	bic.w	r2, r2, #3
   a9864:	4293      	cmp	r3, r2
   a9866:	d202      	bcs.n	a986e <_malloc_r+0x366>
   a9868:	6889      	ldr	r1, [r1, #8]
   a986a:	458c      	cmp	ip, r1
   a986c:	d1f7      	bne.n	a985e <_malloc_r+0x356>
   a986e:	68ca      	ldr	r2, [r1, #12]
   a9870:	687b      	ldr	r3, [r7, #4]
   a9872:	60e2      	str	r2, [r4, #12]
   a9874:	60a1      	str	r1, [r4, #8]
   a9876:	6094      	str	r4, [r2, #8]
   a9878:	60cc      	str	r4, [r1, #12]
   a987a:	e6c7      	b.n	a960c <_malloc_r+0x104>
   a987c:	f045 0701 	orr.w	r7, r5, #1
   a9880:	f042 0301 	orr.w	r3, r2, #1
   a9884:	4425      	add	r5, r4
   a9886:	6067      	str	r7, [r4, #4]
   a9888:	4630      	mov	r0, r6
   a988a:	614d      	str	r5, [r1, #20]
   a988c:	610d      	str	r5, [r1, #16]
   a988e:	f8c5 e00c 	str.w	lr, [r5, #12]
   a9892:	f8c5 e008 	str.w	lr, [r5, #8]
   a9896:	606b      	str	r3, [r5, #4]
   a9898:	50aa      	str	r2, [r5, r2]
   a989a:	3408      	adds	r4, #8
   a989c:	f000 f96a 	bl	a9b74 <__malloc_unlock>
   a98a0:	e65e      	b.n	a9560 <_malloc_r+0x58>
   a98a2:	684b      	ldr	r3, [r1, #4]
   a98a4:	e6b2      	b.n	a960c <_malloc_r+0x104>
   a98a6:	f109 0901 	add.w	r9, r9, #1
   a98aa:	f019 0f03 	tst.w	r9, #3
   a98ae:	f10c 0c08 	add.w	ip, ip, #8
   a98b2:	f47f aebd 	bne.w	a9630 <_malloc_r+0x128>
   a98b6:	e02c      	b.n	a9912 <_malloc_r+0x40a>
   a98b8:	f104 0308 	add.w	r3, r4, #8
   a98bc:	6964      	ldr	r4, [r4, #20]
   a98be:	42a3      	cmp	r3, r4
   a98c0:	bf08      	it	eq
   a98c2:	3002      	addeq	r0, #2
   a98c4:	f43f ae75 	beq.w	a95b2 <_malloc_r+0xaa>
   a98c8:	e63a      	b.n	a9540 <_malloc_r+0x38>
   a98ca:	461c      	mov	r4, r3
   a98cc:	441a      	add	r2, r3
   a98ce:	6851      	ldr	r1, [r2, #4]
   a98d0:	68db      	ldr	r3, [r3, #12]
   a98d2:	f854 5f08 	ldr.w	r5, [r4, #8]!
   a98d6:	f041 0101 	orr.w	r1, r1, #1
   a98da:	6051      	str	r1, [r2, #4]
   a98dc:	4630      	mov	r0, r6
   a98de:	60eb      	str	r3, [r5, #12]
   a98e0:	609d      	str	r5, [r3, #8]
   a98e2:	f000 f947 	bl	a9b74 <__malloc_unlock>
   a98e6:	e63b      	b.n	a9560 <_malloc_r+0x58>
   a98e8:	305b      	adds	r0, #91	; 0x5b
   a98ea:	0041      	lsls	r1, r0, #1
   a98ec:	e64c      	b.n	a9588 <_malloc_r+0x80>
   a98ee:	099a      	lsrs	r2, r3, #6
   a98f0:	3238      	adds	r2, #56	; 0x38
   a98f2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   a98f6:	e7aa      	b.n	a984e <_malloc_r+0x346>
   a98f8:	42bc      	cmp	r4, r7
   a98fa:	4b45      	ldr	r3, [pc, #276]	; (a9a10 <_malloc_r+0x508>)
   a98fc:	f43f af0d 	beq.w	a971a <_malloc_r+0x212>
   a9900:	689c      	ldr	r4, [r3, #8]
   a9902:	6862      	ldr	r2, [r4, #4]
   a9904:	f022 0203 	bic.w	r2, r2, #3
   a9908:	e767      	b.n	a97da <_malloc_r+0x2d2>
   a990a:	f8d8 8000 	ldr.w	r8, [r8]
   a990e:	4598      	cmp	r8, r3
   a9910:	d17c      	bne.n	a9a0c <_malloc_r+0x504>
   a9912:	f010 0f03 	tst.w	r0, #3
   a9916:	f1a8 0308 	sub.w	r3, r8, #8
   a991a:	f100 30ff 	add.w	r0, r0, #4294967295
   a991e:	d1f4      	bne.n	a990a <_malloc_r+0x402>
   a9920:	687b      	ldr	r3, [r7, #4]
   a9922:	ea23 0304 	bic.w	r3, r3, r4
   a9926:	607b      	str	r3, [r7, #4]
   a9928:	0064      	lsls	r4, r4, #1
   a992a:	429c      	cmp	r4, r3
   a992c:	f63f aec9 	bhi.w	a96c2 <_malloc_r+0x1ba>
   a9930:	2c00      	cmp	r4, #0
   a9932:	f43f aec6 	beq.w	a96c2 <_malloc_r+0x1ba>
   a9936:	4223      	tst	r3, r4
   a9938:	4648      	mov	r0, r9
   a993a:	f47f ae75 	bne.w	a9628 <_malloc_r+0x120>
   a993e:	0064      	lsls	r4, r4, #1
   a9940:	4223      	tst	r3, r4
   a9942:	f100 0004 	add.w	r0, r0, #4
   a9946:	d0fa      	beq.n	a993e <_malloc_r+0x436>
   a9948:	e66e      	b.n	a9628 <_malloc_r+0x120>
   a994a:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   a994e:	d818      	bhi.n	a9982 <_malloc_r+0x47a>
   a9950:	0be8      	lsrs	r0, r5, #15
   a9952:	3077      	adds	r0, #119	; 0x77
   a9954:	0041      	lsls	r1, r0, #1
   a9956:	e617      	b.n	a9588 <_malloc_r+0x80>
   a9958:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   a995c:	e6fa      	b.n	a9754 <_malloc_r+0x24c>
   a995e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   a9962:	1092      	asrs	r2, r2, #2
   a9964:	f04f 0c01 	mov.w	ip, #1
   a9968:	fa0c f202 	lsl.w	r2, ip, r2
   a996c:	4313      	orrs	r3, r2
   a996e:	f8c8 3004 	str.w	r3, [r8, #4]
   a9972:	460a      	mov	r2, r1
   a9974:	e77d      	b.n	a9872 <_malloc_r+0x36a>
   a9976:	2301      	movs	r3, #1
   a9978:	f8c9 3004 	str.w	r3, [r9, #4]
   a997c:	464c      	mov	r4, r9
   a997e:	2200      	movs	r2, #0
   a9980:	e72b      	b.n	a97da <_malloc_r+0x2d2>
   a9982:	f240 5354 	movw	r3, #1364	; 0x554
   a9986:	4298      	cmp	r0, r3
   a9988:	d81c      	bhi.n	a99c4 <_malloc_r+0x4bc>
   a998a:	0ca8      	lsrs	r0, r5, #18
   a998c:	307c      	adds	r0, #124	; 0x7c
   a998e:	0041      	lsls	r1, r0, #1
   a9990:	e5fa      	b.n	a9588 <_malloc_r+0x80>
   a9992:	3210      	adds	r2, #16
   a9994:	e6b3      	b.n	a96fe <_malloc_r+0x1f6>
   a9996:	2a54      	cmp	r2, #84	; 0x54
   a9998:	d823      	bhi.n	a99e2 <_malloc_r+0x4da>
   a999a:	0b1a      	lsrs	r2, r3, #12
   a999c:	326e      	adds	r2, #110	; 0x6e
   a999e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   a99a2:	e754      	b.n	a984e <_malloc_r+0x346>
   a99a4:	68bc      	ldr	r4, [r7, #8]
   a99a6:	6862      	ldr	r2, [r4, #4]
   a99a8:	f022 0203 	bic.w	r2, r2, #3
   a99ac:	e715      	b.n	a97da <_malloc_r+0x2d2>
   a99ae:	f3cb 000b 	ubfx	r0, fp, #0, #12
   a99b2:	2800      	cmp	r0, #0
   a99b4:	f47f aeb8 	bne.w	a9728 <_malloc_r+0x220>
   a99b8:	4442      	add	r2, r8
   a99ba:	68bb      	ldr	r3, [r7, #8]
   a99bc:	f042 0201 	orr.w	r2, r2, #1
   a99c0:	605a      	str	r2, [r3, #4]
   a99c2:	e6fc      	b.n	a97be <_malloc_r+0x2b6>
   a99c4:	21fc      	movs	r1, #252	; 0xfc
   a99c6:	207e      	movs	r0, #126	; 0x7e
   a99c8:	e5de      	b.n	a9588 <_malloc_r+0x80>
   a99ca:	2201      	movs	r2, #1
   a99cc:	f04f 0a00 	mov.w	sl, #0
   a99d0:	e6d3      	b.n	a977a <_malloc_r+0x272>
   a99d2:	f104 0108 	add.w	r1, r4, #8
   a99d6:	4630      	mov	r0, r6
   a99d8:	f7ff fa8e 	bl	a8ef8 <_free_r>
   a99dc:	f8da 1000 	ldr.w	r1, [sl]
   a99e0:	e6ed      	b.n	a97be <_malloc_r+0x2b6>
   a99e2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   a99e6:	d804      	bhi.n	a99f2 <_malloc_r+0x4ea>
   a99e8:	0bda      	lsrs	r2, r3, #15
   a99ea:	3277      	adds	r2, #119	; 0x77
   a99ec:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   a99f0:	e72d      	b.n	a984e <_malloc_r+0x346>
   a99f2:	f240 5154 	movw	r1, #1364	; 0x554
   a99f6:	428a      	cmp	r2, r1
   a99f8:	d804      	bhi.n	a9a04 <_malloc_r+0x4fc>
   a99fa:	0c9a      	lsrs	r2, r3, #18
   a99fc:	327c      	adds	r2, #124	; 0x7c
   a99fe:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   a9a02:	e724      	b.n	a984e <_malloc_r+0x346>
   a9a04:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
   a9a08:	227e      	movs	r2, #126	; 0x7e
   a9a0a:	e720      	b.n	a984e <_malloc_r+0x346>
   a9a0c:	687b      	ldr	r3, [r7, #4]
   a9a0e:	e78b      	b.n	a9928 <_malloc_r+0x420>
   a9a10:	200713c4 	.word	0x200713c4

000a9a14 <memchr>:
   a9a14:	0783      	lsls	r3, r0, #30
   a9a16:	b470      	push	{r4, r5, r6}
   a9a18:	b2c9      	uxtb	r1, r1
   a9a1a:	d040      	beq.n	a9a9e <memchr+0x8a>
   a9a1c:	1e54      	subs	r4, r2, #1
   a9a1e:	2a00      	cmp	r2, #0
   a9a20:	d03f      	beq.n	a9aa2 <memchr+0x8e>
   a9a22:	7803      	ldrb	r3, [r0, #0]
   a9a24:	428b      	cmp	r3, r1
   a9a26:	bf18      	it	ne
   a9a28:	1c43      	addne	r3, r0, #1
   a9a2a:	d105      	bne.n	a9a38 <memchr+0x24>
   a9a2c:	e01c      	b.n	a9a68 <memchr+0x54>
   a9a2e:	b1ec      	cbz	r4, a9a6c <memchr+0x58>
   a9a30:	7802      	ldrb	r2, [r0, #0]
   a9a32:	3c01      	subs	r4, #1
   a9a34:	428a      	cmp	r2, r1
   a9a36:	d017      	beq.n	a9a68 <memchr+0x54>
   a9a38:	f013 0f03 	tst.w	r3, #3
   a9a3c:	4618      	mov	r0, r3
   a9a3e:	f103 0301 	add.w	r3, r3, #1
   a9a42:	d1f4      	bne.n	a9a2e <memchr+0x1a>
   a9a44:	2c03      	cmp	r4, #3
   a9a46:	d814      	bhi.n	a9a72 <memchr+0x5e>
   a9a48:	b184      	cbz	r4, a9a6c <memchr+0x58>
   a9a4a:	7803      	ldrb	r3, [r0, #0]
   a9a4c:	428b      	cmp	r3, r1
   a9a4e:	d00b      	beq.n	a9a68 <memchr+0x54>
   a9a50:	1905      	adds	r5, r0, r4
   a9a52:	1c43      	adds	r3, r0, #1
   a9a54:	e002      	b.n	a9a5c <memchr+0x48>
   a9a56:	7802      	ldrb	r2, [r0, #0]
   a9a58:	428a      	cmp	r2, r1
   a9a5a:	d005      	beq.n	a9a68 <memchr+0x54>
   a9a5c:	42ab      	cmp	r3, r5
   a9a5e:	4618      	mov	r0, r3
   a9a60:	f103 0301 	add.w	r3, r3, #1
   a9a64:	d1f7      	bne.n	a9a56 <memchr+0x42>
   a9a66:	2000      	movs	r0, #0
   a9a68:	bc70      	pop	{r4, r5, r6}
   a9a6a:	4770      	bx	lr
   a9a6c:	4620      	mov	r0, r4
   a9a6e:	bc70      	pop	{r4, r5, r6}
   a9a70:	4770      	bx	lr
   a9a72:	4602      	mov	r2, r0
   a9a74:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   a9a78:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   a9a7c:	6813      	ldr	r3, [r2, #0]
   a9a7e:	4610      	mov	r0, r2
   a9a80:	4073      	eors	r3, r6
   a9a82:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
   a9a86:	ea25 0303 	bic.w	r3, r5, r3
   a9a8a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   a9a8e:	f102 0204 	add.w	r2, r2, #4
   a9a92:	d1d9      	bne.n	a9a48 <memchr+0x34>
   a9a94:	3c04      	subs	r4, #4
   a9a96:	2c03      	cmp	r4, #3
   a9a98:	4610      	mov	r0, r2
   a9a9a:	d8ef      	bhi.n	a9a7c <memchr+0x68>
   a9a9c:	e7d4      	b.n	a9a48 <memchr+0x34>
   a9a9e:	4614      	mov	r4, r2
   a9aa0:	e7d0      	b.n	a9a44 <memchr+0x30>
   a9aa2:	4610      	mov	r0, r2
   a9aa4:	e7e0      	b.n	a9a68 <memchr+0x54>
   a9aa6:	bf00      	nop

000a9aa8 <memmove>:
   a9aa8:	4288      	cmp	r0, r1
   a9aaa:	b5f0      	push	{r4, r5, r6, r7, lr}
   a9aac:	d90d      	bls.n	a9aca <memmove+0x22>
   a9aae:	188b      	adds	r3, r1, r2
   a9ab0:	4298      	cmp	r0, r3
   a9ab2:	d20a      	bcs.n	a9aca <memmove+0x22>
   a9ab4:	1881      	adds	r1, r0, r2
   a9ab6:	2a00      	cmp	r2, #0
   a9ab8:	d054      	beq.n	a9b64 <memmove+0xbc>
   a9aba:	1a9a      	subs	r2, r3, r2
   a9abc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   a9ac0:	4293      	cmp	r3, r2
   a9ac2:	f801 4d01 	strb.w	r4, [r1, #-1]!
   a9ac6:	d1f9      	bne.n	a9abc <memmove+0x14>
   a9ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a9aca:	2a0f      	cmp	r2, #15
   a9acc:	d948      	bls.n	a9b60 <memmove+0xb8>
   a9ace:	ea40 0301 	orr.w	r3, r0, r1
   a9ad2:	079b      	lsls	r3, r3, #30
   a9ad4:	d147      	bne.n	a9b66 <memmove+0xbe>
   a9ad6:	4615      	mov	r5, r2
   a9ad8:	f100 0410 	add.w	r4, r0, #16
   a9adc:	f101 0310 	add.w	r3, r1, #16
   a9ae0:	f853 6c10 	ldr.w	r6, [r3, #-16]
   a9ae4:	3d10      	subs	r5, #16
   a9ae6:	f844 6c10 	str.w	r6, [r4, #-16]
   a9aea:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   a9aee:	2d0f      	cmp	r5, #15
   a9af0:	f844 6c0c 	str.w	r6, [r4, #-12]
   a9af4:	f853 6c08 	ldr.w	r6, [r3, #-8]
   a9af8:	f104 0410 	add.w	r4, r4, #16
   a9afc:	f844 6c18 	str.w	r6, [r4, #-24]
   a9b00:	f853 6c04 	ldr.w	r6, [r3, #-4]
   a9b04:	f103 0310 	add.w	r3, r3, #16
   a9b08:	f844 6c14 	str.w	r6, [r4, #-20]
   a9b0c:	d8e8      	bhi.n	a9ae0 <memmove+0x38>
   a9b0e:	f1a2 0310 	sub.w	r3, r2, #16
   a9b12:	f023 030f 	bic.w	r3, r3, #15
   a9b16:	f002 0e0f 	and.w	lr, r2, #15
   a9b1a:	3310      	adds	r3, #16
   a9b1c:	f1be 0f03 	cmp.w	lr, #3
   a9b20:	4419      	add	r1, r3
   a9b22:	4403      	add	r3, r0
   a9b24:	d921      	bls.n	a9b6a <memmove+0xc2>
   a9b26:	460e      	mov	r6, r1
   a9b28:	4674      	mov	r4, lr
   a9b2a:	1f1d      	subs	r5, r3, #4
   a9b2c:	f856 7b04 	ldr.w	r7, [r6], #4
   a9b30:	3c04      	subs	r4, #4
   a9b32:	2c03      	cmp	r4, #3
   a9b34:	f845 7f04 	str.w	r7, [r5, #4]!
   a9b38:	d8f8      	bhi.n	a9b2c <memmove+0x84>
   a9b3a:	f1ae 0404 	sub.w	r4, lr, #4
   a9b3e:	f024 0403 	bic.w	r4, r4, #3
   a9b42:	3404      	adds	r4, #4
   a9b44:	4423      	add	r3, r4
   a9b46:	4421      	add	r1, r4
   a9b48:	f002 0203 	and.w	r2, r2, #3
   a9b4c:	b152      	cbz	r2, a9b64 <memmove+0xbc>
   a9b4e:	3b01      	subs	r3, #1
   a9b50:	440a      	add	r2, r1
   a9b52:	f811 4b01 	ldrb.w	r4, [r1], #1
   a9b56:	4291      	cmp	r1, r2
   a9b58:	f803 4f01 	strb.w	r4, [r3, #1]!
   a9b5c:	d1f9      	bne.n	a9b52 <memmove+0xaa>
   a9b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a9b60:	4603      	mov	r3, r0
   a9b62:	e7f3      	b.n	a9b4c <memmove+0xa4>
   a9b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a9b66:	4603      	mov	r3, r0
   a9b68:	e7f1      	b.n	a9b4e <memmove+0xa6>
   a9b6a:	4672      	mov	r2, lr
   a9b6c:	e7ee      	b.n	a9b4c <memmove+0xa4>
   a9b6e:	bf00      	nop

000a9b70 <__malloc_lock>:
   a9b70:	4770      	bx	lr
   a9b72:	bf00      	nop

000a9b74 <__malloc_unlock>:
   a9b74:	4770      	bx	lr
   a9b76:	bf00      	nop

000a9b78 <_realloc_r>:
   a9b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a9b7c:	4617      	mov	r7, r2
   a9b7e:	b083      	sub	sp, #12
   a9b80:	460d      	mov	r5, r1
   a9b82:	2900      	cmp	r1, #0
   a9b84:	f000 80e2 	beq.w	a9d4c <_realloc_r+0x1d4>
   a9b88:	4681      	mov	r9, r0
   a9b8a:	f107 040b 	add.w	r4, r7, #11
   a9b8e:	f7ff ffef 	bl	a9b70 <__malloc_lock>
   a9b92:	f855 3c04 	ldr.w	r3, [r5, #-4]
   a9b96:	2c16      	cmp	r4, #22
   a9b98:	f023 0603 	bic.w	r6, r3, #3
   a9b9c:	f1a5 0808 	sub.w	r8, r5, #8
   a9ba0:	d84b      	bhi.n	a9c3a <_realloc_r+0xc2>
   a9ba2:	2210      	movs	r2, #16
   a9ba4:	4614      	mov	r4, r2
   a9ba6:	42a7      	cmp	r7, r4
   a9ba8:	d84c      	bhi.n	a9c44 <_realloc_r+0xcc>
   a9baa:	4296      	cmp	r6, r2
   a9bac:	da51      	bge.n	a9c52 <_realloc_r+0xda>
   a9bae:	f8df b3a4 	ldr.w	fp, [pc, #932]	; a9f54 <_realloc_r+0x3dc>
   a9bb2:	eb08 0106 	add.w	r1, r8, r6
   a9bb6:	f8db 0008 	ldr.w	r0, [fp, #8]
   a9bba:	4288      	cmp	r0, r1
   a9bbc:	f000 80d3 	beq.w	a9d66 <_realloc_r+0x1ee>
   a9bc0:	6848      	ldr	r0, [r1, #4]
   a9bc2:	f020 0e01 	bic.w	lr, r0, #1
   a9bc6:	448e      	add	lr, r1
   a9bc8:	f8de e004 	ldr.w	lr, [lr, #4]
   a9bcc:	f01e 0f01 	tst.w	lr, #1
   a9bd0:	d154      	bne.n	a9c7c <_realloc_r+0x104>
   a9bd2:	f020 0003 	bic.w	r0, r0, #3
   a9bd6:	4430      	add	r0, r6
   a9bd8:	4290      	cmp	r0, r2
   a9bda:	f280 80bd 	bge.w	a9d58 <_realloc_r+0x1e0>
   a9bde:	07db      	lsls	r3, r3, #31
   a9be0:	f100 8090 	bmi.w	a9d04 <_realloc_r+0x18c>
   a9be4:	f855 3c08 	ldr.w	r3, [r5, #-8]
   a9be8:	ebc3 0a08 	rsb	sl, r3, r8
   a9bec:	f8da 3004 	ldr.w	r3, [sl, #4]
   a9bf0:	f023 0303 	bic.w	r3, r3, #3
   a9bf4:	eb00 0e03 	add.w	lr, r0, r3
   a9bf8:	4596      	cmp	lr, r2
   a9bfa:	db49      	blt.n	a9c90 <_realloc_r+0x118>
   a9bfc:	4657      	mov	r7, sl
   a9bfe:	68cb      	ldr	r3, [r1, #12]
   a9c00:	6889      	ldr	r1, [r1, #8]
   a9c02:	1f32      	subs	r2, r6, #4
   a9c04:	60cb      	str	r3, [r1, #12]
   a9c06:	6099      	str	r1, [r3, #8]
   a9c08:	f857 1f08 	ldr.w	r1, [r7, #8]!
   a9c0c:	f8da 300c 	ldr.w	r3, [sl, #12]
   a9c10:	2a24      	cmp	r2, #36	; 0x24
   a9c12:	60cb      	str	r3, [r1, #12]
   a9c14:	6099      	str	r1, [r3, #8]
   a9c16:	f200 8133 	bhi.w	a9e80 <_realloc_r+0x308>
   a9c1a:	2a13      	cmp	r2, #19
   a9c1c:	f240 80fa 	bls.w	a9e14 <_realloc_r+0x29c>
   a9c20:	682b      	ldr	r3, [r5, #0]
   a9c22:	2a1b      	cmp	r2, #27
   a9c24:	f8ca 3008 	str.w	r3, [sl, #8]
   a9c28:	686b      	ldr	r3, [r5, #4]
   a9c2a:	f8ca 300c 	str.w	r3, [sl, #12]
   a9c2e:	f200 813b 	bhi.w	a9ea8 <_realloc_r+0x330>
   a9c32:	3508      	adds	r5, #8
   a9c34:	f10a 0310 	add.w	r3, sl, #16
   a9c38:	e0ed      	b.n	a9e16 <_realloc_r+0x29e>
   a9c3a:	f024 0407 	bic.w	r4, r4, #7
   a9c3e:	2c00      	cmp	r4, #0
   a9c40:	4622      	mov	r2, r4
   a9c42:	dab0      	bge.n	a9ba6 <_realloc_r+0x2e>
   a9c44:	230c      	movs	r3, #12
   a9c46:	2000      	movs	r0, #0
   a9c48:	f8c9 3000 	str.w	r3, [r9]
   a9c4c:	b003      	add	sp, #12
   a9c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a9c52:	462f      	mov	r7, r5
   a9c54:	1b32      	subs	r2, r6, r4
   a9c56:	2a0f      	cmp	r2, #15
   a9c58:	f003 0301 	and.w	r3, r3, #1
   a9c5c:	d840      	bhi.n	a9ce0 <_realloc_r+0x168>
   a9c5e:	4333      	orrs	r3, r6
   a9c60:	f8c8 3004 	str.w	r3, [r8, #4]
   a9c64:	4446      	add	r6, r8
   a9c66:	6873      	ldr	r3, [r6, #4]
   a9c68:	f043 0301 	orr.w	r3, r3, #1
   a9c6c:	6073      	str	r3, [r6, #4]
   a9c6e:	4648      	mov	r0, r9
   a9c70:	f7ff ff80 	bl	a9b74 <__malloc_unlock>
   a9c74:	4638      	mov	r0, r7
   a9c76:	b003      	add	sp, #12
   a9c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a9c7c:	07d9      	lsls	r1, r3, #31
   a9c7e:	d441      	bmi.n	a9d04 <_realloc_r+0x18c>
   a9c80:	f855 3c08 	ldr.w	r3, [r5, #-8]
   a9c84:	ebc3 0a08 	rsb	sl, r3, r8
   a9c88:	f8da 3004 	ldr.w	r3, [sl, #4]
   a9c8c:	f023 0303 	bic.w	r3, r3, #3
   a9c90:	4433      	add	r3, r6
   a9c92:	4293      	cmp	r3, r2
   a9c94:	db36      	blt.n	a9d04 <_realloc_r+0x18c>
   a9c96:	4657      	mov	r7, sl
   a9c98:	f8da 100c 	ldr.w	r1, [sl, #12]
   a9c9c:	f857 0f08 	ldr.w	r0, [r7, #8]!
   a9ca0:	1f32      	subs	r2, r6, #4
   a9ca2:	2a24      	cmp	r2, #36	; 0x24
   a9ca4:	60c1      	str	r1, [r0, #12]
   a9ca6:	6088      	str	r0, [r1, #8]
   a9ca8:	f200 80f5 	bhi.w	a9e96 <_realloc_r+0x31e>
   a9cac:	2a13      	cmp	r2, #19
   a9cae:	f240 80f0 	bls.w	a9e92 <_realloc_r+0x31a>
   a9cb2:	6829      	ldr	r1, [r5, #0]
   a9cb4:	2a1b      	cmp	r2, #27
   a9cb6:	f8ca 1008 	str.w	r1, [sl, #8]
   a9cba:	6869      	ldr	r1, [r5, #4]
   a9cbc:	f8ca 100c 	str.w	r1, [sl, #12]
   a9cc0:	f200 8107 	bhi.w	a9ed2 <_realloc_r+0x35a>
   a9cc4:	3508      	adds	r5, #8
   a9cc6:	f10a 0210 	add.w	r2, sl, #16
   a9cca:	6829      	ldr	r1, [r5, #0]
   a9ccc:	461e      	mov	r6, r3
   a9cce:	6011      	str	r1, [r2, #0]
   a9cd0:	6869      	ldr	r1, [r5, #4]
   a9cd2:	46d0      	mov	r8, sl
   a9cd4:	6051      	str	r1, [r2, #4]
   a9cd6:	68ab      	ldr	r3, [r5, #8]
   a9cd8:	6093      	str	r3, [r2, #8]
   a9cda:	f8da 3004 	ldr.w	r3, [sl, #4]
   a9cde:	e7b9      	b.n	a9c54 <_realloc_r+0xdc>
   a9ce0:	eb08 0104 	add.w	r1, r8, r4
   a9ce4:	4323      	orrs	r3, r4
   a9ce6:	f042 0001 	orr.w	r0, r2, #1
   a9cea:	f8c8 3004 	str.w	r3, [r8, #4]
   a9cee:	440a      	add	r2, r1
   a9cf0:	6048      	str	r0, [r1, #4]
   a9cf2:	6853      	ldr	r3, [r2, #4]
   a9cf4:	3108      	adds	r1, #8
   a9cf6:	f043 0301 	orr.w	r3, r3, #1
   a9cfa:	6053      	str	r3, [r2, #4]
   a9cfc:	4648      	mov	r0, r9
   a9cfe:	f7ff f8fb 	bl	a8ef8 <_free_r>
   a9d02:	e7b4      	b.n	a9c6e <_realloc_r+0xf6>
   a9d04:	4639      	mov	r1, r7
   a9d06:	4648      	mov	r0, r9
   a9d08:	f7ff fbfe 	bl	a9508 <_malloc_r>
   a9d0c:	4607      	mov	r7, r0
   a9d0e:	2800      	cmp	r0, #0
   a9d10:	d0ad      	beq.n	a9c6e <_realloc_r+0xf6>
   a9d12:	f855 3c04 	ldr.w	r3, [r5, #-4]
   a9d16:	f1a0 0108 	sub.w	r1, r0, #8
   a9d1a:	f023 0201 	bic.w	r2, r3, #1
   a9d1e:	4442      	add	r2, r8
   a9d20:	4291      	cmp	r1, r2
   a9d22:	f000 80a6 	beq.w	a9e72 <_realloc_r+0x2fa>
   a9d26:	1f32      	subs	r2, r6, #4
   a9d28:	2a24      	cmp	r2, #36	; 0x24
   a9d2a:	f200 8093 	bhi.w	a9e54 <_realloc_r+0x2dc>
   a9d2e:	2a13      	cmp	r2, #19
   a9d30:	d865      	bhi.n	a9dfe <_realloc_r+0x286>
   a9d32:	4603      	mov	r3, r0
   a9d34:	462a      	mov	r2, r5
   a9d36:	6811      	ldr	r1, [r2, #0]
   a9d38:	6019      	str	r1, [r3, #0]
   a9d3a:	6851      	ldr	r1, [r2, #4]
   a9d3c:	6059      	str	r1, [r3, #4]
   a9d3e:	6892      	ldr	r2, [r2, #8]
   a9d40:	609a      	str	r2, [r3, #8]
   a9d42:	4629      	mov	r1, r5
   a9d44:	4648      	mov	r0, r9
   a9d46:	f7ff f8d7 	bl	a8ef8 <_free_r>
   a9d4a:	e790      	b.n	a9c6e <_realloc_r+0xf6>
   a9d4c:	4611      	mov	r1, r2
   a9d4e:	b003      	add	sp, #12
   a9d50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a9d54:	f7ff bbd8 	b.w	a9508 <_malloc_r>
   a9d58:	68ca      	ldr	r2, [r1, #12]
   a9d5a:	6889      	ldr	r1, [r1, #8]
   a9d5c:	462f      	mov	r7, r5
   a9d5e:	60ca      	str	r2, [r1, #12]
   a9d60:	4606      	mov	r6, r0
   a9d62:	6091      	str	r1, [r2, #8]
   a9d64:	e776      	b.n	a9c54 <_realloc_r+0xdc>
   a9d66:	6841      	ldr	r1, [r0, #4]
   a9d68:	f104 0010 	add.w	r0, r4, #16
   a9d6c:	f021 0103 	bic.w	r1, r1, #3
   a9d70:	4431      	add	r1, r6
   a9d72:	4281      	cmp	r1, r0
   a9d74:	da5a      	bge.n	a9e2c <_realloc_r+0x2b4>
   a9d76:	07db      	lsls	r3, r3, #31
   a9d78:	d4c4      	bmi.n	a9d04 <_realloc_r+0x18c>
   a9d7a:	f855 3c08 	ldr.w	r3, [r5, #-8]
   a9d7e:	ebc3 0a08 	rsb	sl, r3, r8
   a9d82:	f8da 3004 	ldr.w	r3, [sl, #4]
   a9d86:	f023 0303 	bic.w	r3, r3, #3
   a9d8a:	eb01 0c03 	add.w	ip, r1, r3
   a9d8e:	4560      	cmp	r0, ip
   a9d90:	f73f af7e 	bgt.w	a9c90 <_realloc_r+0x118>
   a9d94:	4657      	mov	r7, sl
   a9d96:	f8da 300c 	ldr.w	r3, [sl, #12]
   a9d9a:	f857 1f08 	ldr.w	r1, [r7, #8]!
   a9d9e:	1f32      	subs	r2, r6, #4
   a9da0:	2a24      	cmp	r2, #36	; 0x24
   a9da2:	60cb      	str	r3, [r1, #12]
   a9da4:	6099      	str	r1, [r3, #8]
   a9da6:	f200 80b6 	bhi.w	a9f16 <_realloc_r+0x39e>
   a9daa:	2a13      	cmp	r2, #19
   a9dac:	f240 80a7 	bls.w	a9efe <_realloc_r+0x386>
   a9db0:	682b      	ldr	r3, [r5, #0]
   a9db2:	2a1b      	cmp	r2, #27
   a9db4:	f8ca 3008 	str.w	r3, [sl, #8]
   a9db8:	686b      	ldr	r3, [r5, #4]
   a9dba:	f8ca 300c 	str.w	r3, [sl, #12]
   a9dbe:	f200 80b3 	bhi.w	a9f28 <_realloc_r+0x3b0>
   a9dc2:	3508      	adds	r5, #8
   a9dc4:	f10a 0310 	add.w	r3, sl, #16
   a9dc8:	682a      	ldr	r2, [r5, #0]
   a9dca:	601a      	str	r2, [r3, #0]
   a9dcc:	686a      	ldr	r2, [r5, #4]
   a9dce:	605a      	str	r2, [r3, #4]
   a9dd0:	68aa      	ldr	r2, [r5, #8]
   a9dd2:	609a      	str	r2, [r3, #8]
   a9dd4:	ebc4 030c 	rsb	r3, r4, ip
   a9dd8:	eb0a 0204 	add.w	r2, sl, r4
   a9ddc:	f043 0301 	orr.w	r3, r3, #1
   a9de0:	f8cb 2008 	str.w	r2, [fp, #8]
   a9de4:	6053      	str	r3, [r2, #4]
   a9de6:	f8da 3004 	ldr.w	r3, [sl, #4]
   a9dea:	4648      	mov	r0, r9
   a9dec:	f003 0301 	and.w	r3, r3, #1
   a9df0:	431c      	orrs	r4, r3
   a9df2:	f8ca 4004 	str.w	r4, [sl, #4]
   a9df6:	f7ff febd 	bl	a9b74 <__malloc_unlock>
   a9dfa:	4638      	mov	r0, r7
   a9dfc:	e73b      	b.n	a9c76 <_realloc_r+0xfe>
   a9dfe:	682b      	ldr	r3, [r5, #0]
   a9e00:	2a1b      	cmp	r2, #27
   a9e02:	6003      	str	r3, [r0, #0]
   a9e04:	686b      	ldr	r3, [r5, #4]
   a9e06:	6043      	str	r3, [r0, #4]
   a9e08:	d828      	bhi.n	a9e5c <_realloc_r+0x2e4>
   a9e0a:	f100 0308 	add.w	r3, r0, #8
   a9e0e:	f105 0208 	add.w	r2, r5, #8
   a9e12:	e790      	b.n	a9d36 <_realloc_r+0x1be>
   a9e14:	463b      	mov	r3, r7
   a9e16:	682a      	ldr	r2, [r5, #0]
   a9e18:	4676      	mov	r6, lr
   a9e1a:	601a      	str	r2, [r3, #0]
   a9e1c:	686a      	ldr	r2, [r5, #4]
   a9e1e:	46d0      	mov	r8, sl
   a9e20:	605a      	str	r2, [r3, #4]
   a9e22:	68aa      	ldr	r2, [r5, #8]
   a9e24:	609a      	str	r2, [r3, #8]
   a9e26:	f8da 3004 	ldr.w	r3, [sl, #4]
   a9e2a:	e713      	b.n	a9c54 <_realloc_r+0xdc>
   a9e2c:	1b0b      	subs	r3, r1, r4
   a9e2e:	eb08 0204 	add.w	r2, r8, r4
   a9e32:	f043 0301 	orr.w	r3, r3, #1
   a9e36:	f8cb 2008 	str.w	r2, [fp, #8]
   a9e3a:	6053      	str	r3, [r2, #4]
   a9e3c:	f855 3c04 	ldr.w	r3, [r5, #-4]
   a9e40:	4648      	mov	r0, r9
   a9e42:	f003 0301 	and.w	r3, r3, #1
   a9e46:	431c      	orrs	r4, r3
   a9e48:	f845 4c04 	str.w	r4, [r5, #-4]
   a9e4c:	f7ff fe92 	bl	a9b74 <__malloc_unlock>
   a9e50:	4628      	mov	r0, r5
   a9e52:	e710      	b.n	a9c76 <_realloc_r+0xfe>
   a9e54:	4629      	mov	r1, r5
   a9e56:	f7ff fe27 	bl	a9aa8 <memmove>
   a9e5a:	e772      	b.n	a9d42 <_realloc_r+0x1ca>
   a9e5c:	68ab      	ldr	r3, [r5, #8]
   a9e5e:	2a24      	cmp	r2, #36	; 0x24
   a9e60:	6083      	str	r3, [r0, #8]
   a9e62:	68eb      	ldr	r3, [r5, #12]
   a9e64:	60c3      	str	r3, [r0, #12]
   a9e66:	d02b      	beq.n	a9ec0 <_realloc_r+0x348>
   a9e68:	f100 0310 	add.w	r3, r0, #16
   a9e6c:	f105 0210 	add.w	r2, r5, #16
   a9e70:	e761      	b.n	a9d36 <_realloc_r+0x1be>
   a9e72:	f850 2c04 	ldr.w	r2, [r0, #-4]
   a9e76:	462f      	mov	r7, r5
   a9e78:	f022 0203 	bic.w	r2, r2, #3
   a9e7c:	4416      	add	r6, r2
   a9e7e:	e6e9      	b.n	a9c54 <_realloc_r+0xdc>
   a9e80:	4629      	mov	r1, r5
   a9e82:	4638      	mov	r0, r7
   a9e84:	4676      	mov	r6, lr
   a9e86:	46d0      	mov	r8, sl
   a9e88:	f7ff fe0e 	bl	a9aa8 <memmove>
   a9e8c:	f8da 3004 	ldr.w	r3, [sl, #4]
   a9e90:	e6e0      	b.n	a9c54 <_realloc_r+0xdc>
   a9e92:	463a      	mov	r2, r7
   a9e94:	e719      	b.n	a9cca <_realloc_r+0x152>
   a9e96:	4629      	mov	r1, r5
   a9e98:	4638      	mov	r0, r7
   a9e9a:	461e      	mov	r6, r3
   a9e9c:	46d0      	mov	r8, sl
   a9e9e:	f7ff fe03 	bl	a9aa8 <memmove>
   a9ea2:	f8da 3004 	ldr.w	r3, [sl, #4]
   a9ea6:	e6d5      	b.n	a9c54 <_realloc_r+0xdc>
   a9ea8:	68ab      	ldr	r3, [r5, #8]
   a9eaa:	2a24      	cmp	r2, #36	; 0x24
   a9eac:	f8ca 3010 	str.w	r3, [sl, #16]
   a9eb0:	68eb      	ldr	r3, [r5, #12]
   a9eb2:	f8ca 3014 	str.w	r3, [sl, #20]
   a9eb6:	d018      	beq.n	a9eea <_realloc_r+0x372>
   a9eb8:	3510      	adds	r5, #16
   a9eba:	f10a 0318 	add.w	r3, sl, #24
   a9ebe:	e7aa      	b.n	a9e16 <_realloc_r+0x29e>
   a9ec0:	692a      	ldr	r2, [r5, #16]
   a9ec2:	f100 0318 	add.w	r3, r0, #24
   a9ec6:	6102      	str	r2, [r0, #16]
   a9ec8:	6969      	ldr	r1, [r5, #20]
   a9eca:	f105 0218 	add.w	r2, r5, #24
   a9ece:	6141      	str	r1, [r0, #20]
   a9ed0:	e731      	b.n	a9d36 <_realloc_r+0x1be>
   a9ed2:	68a9      	ldr	r1, [r5, #8]
   a9ed4:	2a24      	cmp	r2, #36	; 0x24
   a9ed6:	f8ca 1010 	str.w	r1, [sl, #16]
   a9eda:	68e9      	ldr	r1, [r5, #12]
   a9edc:	f8ca 1014 	str.w	r1, [sl, #20]
   a9ee0:	d00f      	beq.n	a9f02 <_realloc_r+0x38a>
   a9ee2:	3510      	adds	r5, #16
   a9ee4:	f10a 0218 	add.w	r2, sl, #24
   a9ee8:	e6ef      	b.n	a9cca <_realloc_r+0x152>
   a9eea:	692a      	ldr	r2, [r5, #16]
   a9eec:	f10a 0320 	add.w	r3, sl, #32
   a9ef0:	f8ca 2018 	str.w	r2, [sl, #24]
   a9ef4:	696a      	ldr	r2, [r5, #20]
   a9ef6:	3518      	adds	r5, #24
   a9ef8:	f8ca 201c 	str.w	r2, [sl, #28]
   a9efc:	e78b      	b.n	a9e16 <_realloc_r+0x29e>
   a9efe:	463b      	mov	r3, r7
   a9f00:	e762      	b.n	a9dc8 <_realloc_r+0x250>
   a9f02:	6929      	ldr	r1, [r5, #16]
   a9f04:	f10a 0220 	add.w	r2, sl, #32
   a9f08:	f8ca 1018 	str.w	r1, [sl, #24]
   a9f0c:	6969      	ldr	r1, [r5, #20]
   a9f0e:	3518      	adds	r5, #24
   a9f10:	f8ca 101c 	str.w	r1, [sl, #28]
   a9f14:	e6d9      	b.n	a9cca <_realloc_r+0x152>
   a9f16:	4629      	mov	r1, r5
   a9f18:	4638      	mov	r0, r7
   a9f1a:	f8cd c004 	str.w	ip, [sp, #4]
   a9f1e:	f7ff fdc3 	bl	a9aa8 <memmove>
   a9f22:	f8dd c004 	ldr.w	ip, [sp, #4]
   a9f26:	e755      	b.n	a9dd4 <_realloc_r+0x25c>
   a9f28:	68ab      	ldr	r3, [r5, #8]
   a9f2a:	2a24      	cmp	r2, #36	; 0x24
   a9f2c:	f8ca 3010 	str.w	r3, [sl, #16]
   a9f30:	68eb      	ldr	r3, [r5, #12]
   a9f32:	f8ca 3014 	str.w	r3, [sl, #20]
   a9f36:	d003      	beq.n	a9f40 <_realloc_r+0x3c8>
   a9f38:	3510      	adds	r5, #16
   a9f3a:	f10a 0318 	add.w	r3, sl, #24
   a9f3e:	e743      	b.n	a9dc8 <_realloc_r+0x250>
   a9f40:	692a      	ldr	r2, [r5, #16]
   a9f42:	f10a 0320 	add.w	r3, sl, #32
   a9f46:	f8ca 2018 	str.w	r2, [sl, #24]
   a9f4a:	696a      	ldr	r2, [r5, #20]
   a9f4c:	3518      	adds	r5, #24
   a9f4e:	f8ca 201c 	str.w	r2, [sl, #28]
   a9f52:	e739      	b.n	a9dc8 <_realloc_r+0x250>
   a9f54:	200713c4 	.word	0x200713c4

000a9f58 <_sbrk_r>:
   a9f58:	b538      	push	{r3, r4, r5, lr}
   a9f5a:	4c07      	ldr	r4, [pc, #28]	; (a9f78 <_sbrk_r+0x20>)
   a9f5c:	2300      	movs	r3, #0
   a9f5e:	4605      	mov	r5, r0
   a9f60:	4608      	mov	r0, r1
   a9f62:	6023      	str	r3, [r4, #0]
   a9f64:	f7f2 ff12 	bl	9cd8c <_sbrk>
   a9f68:	1c43      	adds	r3, r0, #1
   a9f6a:	d000      	beq.n	a9f6e <_sbrk_r+0x16>
   a9f6c:	bd38      	pop	{r3, r4, r5, pc}
   a9f6e:	6823      	ldr	r3, [r4, #0]
   a9f70:	2b00      	cmp	r3, #0
   a9f72:	d0fb      	beq.n	a9f6c <_sbrk_r+0x14>
   a9f74:	602b      	str	r3, [r5, #0]
   a9f76:	bd38      	pop	{r3, r4, r5, pc}
   a9f78:	20072a5c 	.word	0x20072a5c

000a9f7c <__sread>:
   a9f7c:	b510      	push	{r4, lr}
   a9f7e:	460c      	mov	r4, r1
   a9f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a9f84:	f000 f930 	bl	aa1e8 <_read_r>
   a9f88:	2800      	cmp	r0, #0
   a9f8a:	db03      	blt.n	a9f94 <__sread+0x18>
   a9f8c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   a9f8e:	4403      	add	r3, r0
   a9f90:	6523      	str	r3, [r4, #80]	; 0x50
   a9f92:	bd10      	pop	{r4, pc}
   a9f94:	89a3      	ldrh	r3, [r4, #12]
   a9f96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   a9f9a:	81a3      	strh	r3, [r4, #12]
   a9f9c:	bd10      	pop	{r4, pc}
   a9f9e:	bf00      	nop

000a9fa0 <__swrite>:
   a9fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a9fa4:	460c      	mov	r4, r1
   a9fa6:	8989      	ldrh	r1, [r1, #12]
   a9fa8:	461d      	mov	r5, r3
   a9faa:	05cb      	lsls	r3, r1, #23
   a9fac:	4616      	mov	r6, r2
   a9fae:	4607      	mov	r7, r0
   a9fb0:	d506      	bpl.n	a9fc0 <__swrite+0x20>
   a9fb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   a9fb6:	2200      	movs	r2, #0
   a9fb8:	2302      	movs	r3, #2
   a9fba:	f000 f901 	bl	aa1c0 <_lseek_r>
   a9fbe:	89a1      	ldrh	r1, [r4, #12]
   a9fc0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   a9fc4:	81a1      	strh	r1, [r4, #12]
   a9fc6:	4638      	mov	r0, r7
   a9fc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   a9fcc:	4632      	mov	r2, r6
   a9fce:	462b      	mov	r3, r5
   a9fd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   a9fd4:	f000 b814 	b.w	aa000 <_write_r>

000a9fd8 <__sseek>:
   a9fd8:	b510      	push	{r4, lr}
   a9fda:	460c      	mov	r4, r1
   a9fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a9fe0:	f000 f8ee 	bl	aa1c0 <_lseek_r>
   a9fe4:	89a3      	ldrh	r3, [r4, #12]
   a9fe6:	1c42      	adds	r2, r0, #1
   a9fe8:	bf0e      	itee	eq
   a9fea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   a9fee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   a9ff2:	6520      	strne	r0, [r4, #80]	; 0x50
   a9ff4:	81a3      	strh	r3, [r4, #12]
   a9ff6:	bd10      	pop	{r4, pc}

000a9ff8 <__sclose>:
   a9ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a9ffc:	f000 b866 	b.w	aa0cc <_close_r>

000aa000 <_write_r>:
   aa000:	b570      	push	{r4, r5, r6, lr}
   aa002:	4c08      	ldr	r4, [pc, #32]	; (aa024 <_write_r+0x24>)
   aa004:	4606      	mov	r6, r0
   aa006:	2500      	movs	r5, #0
   aa008:	4608      	mov	r0, r1
   aa00a:	4611      	mov	r1, r2
   aa00c:	461a      	mov	r2, r3
   aa00e:	6025      	str	r5, [r4, #0]
   aa010:	f7f1 febc 	bl	9bd8c <_write>
   aa014:	1c43      	adds	r3, r0, #1
   aa016:	d000      	beq.n	aa01a <_write_r+0x1a>
   aa018:	bd70      	pop	{r4, r5, r6, pc}
   aa01a:	6823      	ldr	r3, [r4, #0]
   aa01c:	2b00      	cmp	r3, #0
   aa01e:	d0fb      	beq.n	aa018 <_write_r+0x18>
   aa020:	6033      	str	r3, [r6, #0]
   aa022:	bd70      	pop	{r4, r5, r6, pc}
   aa024:	20072a5c 	.word	0x20072a5c

000aa028 <__register_exitproc>:
   aa028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   aa02c:	4c25      	ldr	r4, [pc, #148]	; (aa0c4 <__register_exitproc+0x9c>)
   aa02e:	4606      	mov	r6, r0
   aa030:	6825      	ldr	r5, [r4, #0]
   aa032:	4688      	mov	r8, r1
   aa034:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   aa038:	4692      	mov	sl, r2
   aa03a:	4699      	mov	r9, r3
   aa03c:	b3c4      	cbz	r4, aa0b0 <__register_exitproc+0x88>
   aa03e:	6860      	ldr	r0, [r4, #4]
   aa040:	281f      	cmp	r0, #31
   aa042:	dc17      	bgt.n	aa074 <__register_exitproc+0x4c>
   aa044:	1c41      	adds	r1, r0, #1
   aa046:	b176      	cbz	r6, aa066 <__register_exitproc+0x3e>
   aa048:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   aa04c:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   aa050:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   aa054:	2201      	movs	r2, #1
   aa056:	4082      	lsls	r2, r0
   aa058:	4315      	orrs	r5, r2
   aa05a:	2e02      	cmp	r6, #2
   aa05c:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   aa060:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   aa064:	d01e      	beq.n	aa0a4 <__register_exitproc+0x7c>
   aa066:	1c83      	adds	r3, r0, #2
   aa068:	6061      	str	r1, [r4, #4]
   aa06a:	2000      	movs	r0, #0
   aa06c:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   aa070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   aa074:	4b14      	ldr	r3, [pc, #80]	; (aa0c8 <__register_exitproc+0xa0>)
   aa076:	b303      	cbz	r3, aa0ba <__register_exitproc+0x92>
   aa078:	f44f 70c8 	mov.w	r0, #400	; 0x190
   aa07c:	f7ff fa3c 	bl	a94f8 <malloc>
   aa080:	4604      	mov	r4, r0
   aa082:	b1d0      	cbz	r0, aa0ba <__register_exitproc+0x92>
   aa084:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   aa088:	2700      	movs	r7, #0
   aa08a:	e884 0088 	stmia.w	r4, {r3, r7}
   aa08e:	4638      	mov	r0, r7
   aa090:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   aa094:	2101      	movs	r1, #1
   aa096:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   aa09a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   aa09e:	2e00      	cmp	r6, #0
   aa0a0:	d0e1      	beq.n	aa066 <__register_exitproc+0x3e>
   aa0a2:	e7d1      	b.n	aa048 <__register_exitproc+0x20>
   aa0a4:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   aa0a8:	431a      	orrs	r2, r3
   aa0aa:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   aa0ae:	e7da      	b.n	aa066 <__register_exitproc+0x3e>
   aa0b0:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   aa0b4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   aa0b8:	e7c1      	b.n	aa03e <__register_exitproc+0x16>
   aa0ba:	f04f 30ff 	mov.w	r0, #4294967295
   aa0be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   aa0c2:	bf00      	nop
   aa0c4:	000aa714 	.word	0x000aa714
   aa0c8:	000a94f9 	.word	0x000a94f9

000aa0cc <_close_r>:
   aa0cc:	b538      	push	{r3, r4, r5, lr}
   aa0ce:	4c07      	ldr	r4, [pc, #28]	; (aa0ec <_close_r+0x20>)
   aa0d0:	2300      	movs	r3, #0
   aa0d2:	4605      	mov	r5, r0
   aa0d4:	4608      	mov	r0, r1
   aa0d6:	6023      	str	r3, [r4, #0]
   aa0d8:	f7f2 fe78 	bl	9cdcc <_close>
   aa0dc:	1c43      	adds	r3, r0, #1
   aa0de:	d000      	beq.n	aa0e2 <_close_r+0x16>
   aa0e0:	bd38      	pop	{r3, r4, r5, pc}
   aa0e2:	6823      	ldr	r3, [r4, #0]
   aa0e4:	2b00      	cmp	r3, #0
   aa0e6:	d0fb      	beq.n	aa0e0 <_close_r+0x14>
   aa0e8:	602b      	str	r3, [r5, #0]
   aa0ea:	bd38      	pop	{r3, r4, r5, pc}
   aa0ec:	20072a5c 	.word	0x20072a5c

000aa0f0 <_fclose_r>:
   aa0f0:	2900      	cmp	r1, #0
   aa0f2:	d03d      	beq.n	aa170 <_fclose_r+0x80>
   aa0f4:	b570      	push	{r4, r5, r6, lr}
   aa0f6:	4605      	mov	r5, r0
   aa0f8:	460c      	mov	r4, r1
   aa0fa:	b108      	cbz	r0, aa100 <_fclose_r+0x10>
   aa0fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   aa0fe:	b37b      	cbz	r3, aa160 <_fclose_r+0x70>
   aa100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   aa104:	b90b      	cbnz	r3, aa10a <_fclose_r+0x1a>
   aa106:	2000      	movs	r0, #0
   aa108:	bd70      	pop	{r4, r5, r6, pc}
   aa10a:	4628      	mov	r0, r5
   aa10c:	4621      	mov	r1, r4
   aa10e:	f7fe fd4d 	bl	a8bac <__sflush_r>
   aa112:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   aa114:	4606      	mov	r6, r0
   aa116:	b133      	cbz	r3, aa126 <_fclose_r+0x36>
   aa118:	4628      	mov	r0, r5
   aa11a:	69e1      	ldr	r1, [r4, #28]
   aa11c:	4798      	blx	r3
   aa11e:	2800      	cmp	r0, #0
   aa120:	bfb8      	it	lt
   aa122:	f04f 36ff 	movlt.w	r6, #4294967295
   aa126:	89a3      	ldrh	r3, [r4, #12]
   aa128:	061b      	lsls	r3, r3, #24
   aa12a:	d41c      	bmi.n	aa166 <_fclose_r+0x76>
   aa12c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   aa12e:	b141      	cbz	r1, aa142 <_fclose_r+0x52>
   aa130:	f104 0340 	add.w	r3, r4, #64	; 0x40
   aa134:	4299      	cmp	r1, r3
   aa136:	d002      	beq.n	aa13e <_fclose_r+0x4e>
   aa138:	4628      	mov	r0, r5
   aa13a:	f7fe fedd 	bl	a8ef8 <_free_r>
   aa13e:	2300      	movs	r3, #0
   aa140:	6323      	str	r3, [r4, #48]	; 0x30
   aa142:	6c61      	ldr	r1, [r4, #68]	; 0x44
   aa144:	b121      	cbz	r1, aa150 <_fclose_r+0x60>
   aa146:	4628      	mov	r0, r5
   aa148:	f7fe fed6 	bl	a8ef8 <_free_r>
   aa14c:	2300      	movs	r3, #0
   aa14e:	6463      	str	r3, [r4, #68]	; 0x44
   aa150:	f7fe fe6a 	bl	a8e28 <__sfp_lock_acquire>
   aa154:	2300      	movs	r3, #0
   aa156:	81a3      	strh	r3, [r4, #12]
   aa158:	f7fe fe68 	bl	a8e2c <__sfp_lock_release>
   aa15c:	4630      	mov	r0, r6
   aa15e:	bd70      	pop	{r4, r5, r6, pc}
   aa160:	f7fe fe5c 	bl	a8e1c <__sinit>
   aa164:	e7cc      	b.n	aa100 <_fclose_r+0x10>
   aa166:	4628      	mov	r0, r5
   aa168:	6921      	ldr	r1, [r4, #16]
   aa16a:	f7fe fec5 	bl	a8ef8 <_free_r>
   aa16e:	e7dd      	b.n	aa12c <_fclose_r+0x3c>
   aa170:	2000      	movs	r0, #0
   aa172:	4770      	bx	lr

000aa174 <_fstat_r>:
   aa174:	b538      	push	{r3, r4, r5, lr}
   aa176:	4c08      	ldr	r4, [pc, #32]	; (aa198 <_fstat_r+0x24>)
   aa178:	2300      	movs	r3, #0
   aa17a:	4605      	mov	r5, r0
   aa17c:	4608      	mov	r0, r1
   aa17e:	4611      	mov	r1, r2
   aa180:	6023      	str	r3, [r4, #0]
   aa182:	f7f2 fe2f 	bl	9cde4 <_fstat>
   aa186:	1c43      	adds	r3, r0, #1
   aa188:	d000      	beq.n	aa18c <_fstat_r+0x18>
   aa18a:	bd38      	pop	{r3, r4, r5, pc}
   aa18c:	6823      	ldr	r3, [r4, #0]
   aa18e:	2b00      	cmp	r3, #0
   aa190:	d0fb      	beq.n	aa18a <_fstat_r+0x16>
   aa192:	602b      	str	r3, [r5, #0]
   aa194:	bd38      	pop	{r3, r4, r5, pc}
   aa196:	bf00      	nop
   aa198:	20072a5c 	.word	0x20072a5c

000aa19c <_isatty_r>:
   aa19c:	b538      	push	{r3, r4, r5, lr}
   aa19e:	4c07      	ldr	r4, [pc, #28]	; (aa1bc <_isatty_r+0x20>)
   aa1a0:	2300      	movs	r3, #0
   aa1a2:	4605      	mov	r5, r0
   aa1a4:	4608      	mov	r0, r1
   aa1a6:	6023      	str	r3, [r4, #0]
   aa1a8:	f7f2 fe2c 	bl	9ce04 <_isatty>
   aa1ac:	1c43      	adds	r3, r0, #1
   aa1ae:	d000      	beq.n	aa1b2 <_isatty_r+0x16>
   aa1b0:	bd38      	pop	{r3, r4, r5, pc}
   aa1b2:	6823      	ldr	r3, [r4, #0]
   aa1b4:	2b00      	cmp	r3, #0
   aa1b6:	d0fb      	beq.n	aa1b0 <_isatty_r+0x14>
   aa1b8:	602b      	str	r3, [r5, #0]
   aa1ba:	bd38      	pop	{r3, r4, r5, pc}
   aa1bc:	20072a5c 	.word	0x20072a5c

000aa1c0 <_lseek_r>:
   aa1c0:	b570      	push	{r4, r5, r6, lr}
   aa1c2:	4c08      	ldr	r4, [pc, #32]	; (aa1e4 <_lseek_r+0x24>)
   aa1c4:	4606      	mov	r6, r0
   aa1c6:	2500      	movs	r5, #0
   aa1c8:	4608      	mov	r0, r1
   aa1ca:	4611      	mov	r1, r2
   aa1cc:	461a      	mov	r2, r3
   aa1ce:	6025      	str	r5, [r4, #0]
   aa1d0:	f7f2 fe24 	bl	9ce1c <_lseek>
   aa1d4:	1c43      	adds	r3, r0, #1
   aa1d6:	d000      	beq.n	aa1da <_lseek_r+0x1a>
   aa1d8:	bd70      	pop	{r4, r5, r6, pc}
   aa1da:	6823      	ldr	r3, [r4, #0]
   aa1dc:	2b00      	cmp	r3, #0
   aa1de:	d0fb      	beq.n	aa1d8 <_lseek_r+0x18>
   aa1e0:	6033      	str	r3, [r6, #0]
   aa1e2:	bd70      	pop	{r4, r5, r6, pc}
   aa1e4:	20072a5c 	.word	0x20072a5c

000aa1e8 <_read_r>:
   aa1e8:	b570      	push	{r4, r5, r6, lr}
   aa1ea:	4c08      	ldr	r4, [pc, #32]	; (aa20c <_read_r+0x24>)
   aa1ec:	4606      	mov	r6, r0
   aa1ee:	2500      	movs	r5, #0
   aa1f0:	4608      	mov	r0, r1
   aa1f2:	4611      	mov	r1, r2
   aa1f4:	461a      	mov	r2, r3
   aa1f6:	6025      	str	r5, [r4, #0]
   aa1f8:	f7f1 fd9c 	bl	9bd34 <_read>
   aa1fc:	1c43      	adds	r3, r0, #1
   aa1fe:	d000      	beq.n	aa202 <_read_r+0x1a>
   aa200:	bd70      	pop	{r4, r5, r6, pc}
   aa202:	6823      	ldr	r3, [r4, #0]
   aa204:	2b00      	cmp	r3, #0
   aa206:	d0fb      	beq.n	aa200 <_read_r+0x18>
   aa208:	6033      	str	r3, [r6, #0]
   aa20a:	bd70      	pop	{r4, r5, r6, pc}
   aa20c:	20072a5c 	.word	0x20072a5c
   aa210:	48545056 	.word	0x48545056
   aa214:	00484749 	.word	0x00484749
   aa218:	4f4f4c42 	.word	0x4f4f4c42
   aa21c:	4c445f44 	.word	0x4c445f44
   aa220:	00000000 	.word	0x00000000
   aa224:	00545041 	.word	0x00545041
   aa228:	45544e45 	.word	0x45544e45
   aa22c:	00325f52 	.word	0x00325f52
   aa230:	45544e45 	.word	0x45544e45
   aa234:	00335f52 	.word	0x00335f52
   aa238:	45544e45 	.word	0x45544e45
   aa23c:	00345f52 	.word	0x00345f52
   aa240:	00303035 	.word	0x00303035
   aa244:	41505942 	.word	0x41505942
   aa248:	00005353 	.word	0x00005353
   aa24c:	4d495250 	.word	0x4d495250
   aa250:	00003245 	.word	0x00003245
   aa254:	52494352 	.word	0x52494352
   aa258:	00003243 	.word	0x00003243
   aa25c:	4f5f4548 	.word	0x4f5f4548
   aa260:	0000004e 	.word	0x0000004e
   aa264:	4f5f4548 	.word	0x4f5f4548
   aa268:	00004646 	.word	0x00004646
   aa26c:	4f5f5046 	.word	0x4f5f5046
   aa270:	0000004e 	.word	0x0000004e
   aa274:	4f5f5046 	.word	0x4f5f5046
   aa278:	00004646 	.word	0x00004646
   aa27c:	505f5343 	.word	0x505f5343
   aa280:	535f544f 	.word	0x535f544f
   aa284:	00005445 	.word	0x00005445
   aa288:	525f5046 	.word	0x525f5046
   aa28c:	00455441 	.word	0x00455441
   aa290:	465f5046 	.word	0x465f5046
   aa294:	00005152 	.word	0x00005152
   aa298:	5f504744 	.word	0x5f504744
   aa29c:	00004e4f 	.word	0x00004e4f
   aa2a0:	5f504744 	.word	0x5f504744
   aa2a4:	0046464f 	.word	0x0046464f
   aa2a8:	5f504744 	.word	0x5f504744
   aa2ac:	45544152 	.word	0x45544152
   aa2b0:	00000000 	.word	0x00000000
   aa2b4:	5f504744 	.word	0x5f504744
   aa2b8:	00515246 	.word	0x00515246
   aa2bc:	545f5350 	.word	0x545f5350
   aa2c0:	00000000 	.word	0x00000000
   aa2c4:	5f504655 	.word	0x5f504655
   aa2c8:	0046464f 	.word	0x0046464f
   aa2cc:	5f504655 	.word	0x5f504655
   aa2d0:	45544152 	.word	0x45544152
   aa2d4:	00000000 	.word	0x00000000
   aa2d8:	5f414c56 	.word	0x5f414c56
   aa2dc:	504d5550 	.word	0x504d5550
   aa2e0:	004e4f5f 	.word	0x004e4f5f
   aa2e4:	5f414c56 	.word	0x5f414c56
   aa2e8:	504d5550 	.word	0x504d5550
   aa2ec:	46464f5f 	.word	0x46464f5f
   aa2f0:	00000000 	.word	0x00000000
   aa2f4:	525f5042 	.word	0x525f5042
   aa2f8:	00455441 	.word	0x00455441
   aa2fc:	4f5f4356 	.word	0x4f5f4356
   aa300:	00004646 	.word	0x00004646
   aa304:	4f5f4957 	.word	0x4f5f4957
   aa308:	0000004e 	.word	0x0000004e
   aa30c:	4f5f4957 	.word	0x4f5f4957
   aa310:	00004646 	.word	0x00004646
   aa314:	49415244 	.word	0x49415244
   aa318:	4e4f5f4e 	.word	0x4e4f5f4e
   aa31c:	00000000 	.word	0x00000000
   aa320:	49415244 	.word	0x49415244
   aa324:	464f5f4e 	.word	0x464f5f4e
   aa328:	00000046 	.word	0x00000046
   aa32c:	504f5f56 	.word	0x504f5f56
   aa330:	00004e45 	.word	0x00004e45
   aa334:	4c435f56 	.word	0x4c435f56
   aa338:	0045534f 	.word	0x0045534f
   aa33c:	4c415f56 	.word	0x4c415f56
   aa340:	45504f4c 	.word	0x45504f4c
   aa344:	0000004e 	.word	0x0000004e
   aa348:	4f5f5048 	.word	0x4f5f5048
   aa34c:	0000004e 	.word	0x0000004e
   aa350:	4f5f5048 	.word	0x4f5f5048
   aa354:	00004646 	.word	0x00004646
   aa358:	525f5048 	.word	0x525f5048
   aa35c:	00455441 	.word	0x00455441
   aa360:	565f4342 	.word	0x565f4342
   aa364:	45532031 	.word	0x45532031
   aa368:	00000054 	.word	0x00000054
   aa36c:	565f4342 	.word	0x565f4342
   aa370:	45532032 	.word	0x45532032
   aa374:	00000054 	.word	0x00000054
   aa378:	565f4342 	.word	0x565f4342
   aa37c:	33315f31 	.word	0x33315f31
   aa380:	53203431 	.word	0x53203431
   aa384:	00005445 	.word	0x00005445
   aa388:	565f4342 	.word	0x565f4342
   aa38c:	33315f32 	.word	0x33315f32
   aa390:	53203431 	.word	0x53203431
   aa394:	00005445 	.word	0x00005445
   aa398:	565f4342 	.word	0x565f4342
   aa39c:	20345f31 	.word	0x20345f31
   aa3a0:	00544553 	.word	0x00544553
   aa3a4:	565f4342 	.word	0x565f4342
   aa3a8:	20345f32 	.word	0x20345f32
   aa3ac:	00544553 	.word	0x00544553
   aa3b0:	525f4342 	.word	0x525f4342
   aa3b4:	54455345 	.word	0x54455345
   aa3b8:	00000000 	.word	0x00000000
   aa3bc:	465f4342 	.word	0x465f4342
   aa3c0:	5a454552 	.word	0x5a454552
   aa3c4:	00000045 	.word	0x00000045
   aa3c8:	555f4342 	.word	0x555f4342
   aa3cc:	4552464e 	.word	0x4552464e
   aa3d0:	00455a45 	.word	0x00455a45
   aa3d4:	4e45504f 	.word	0x4e45504f
   aa3d8:	4c4c4946 	.word	0x4c4c4946
   aa3dc:	00000000 	.word	0x00000000
   aa3e0:	0052544a 	.word	0x0052544a
   aa3e4:	4f5f4356 	.word	0x4f5f4356
   aa3e8:	0000004e 	.word	0x0000004e
   aa3ec:	545f5343 	.word	0x545f5343
   aa3f0:	47474952 	.word	0x47474952
   aa3f4:	00005245 	.word	0x00005245
   aa3f8:	545f5350 	.word	0x545f5350
   aa3fc:	47474952 	.word	0x47474952
   aa400:	00005245 	.word	0x00005245
   aa404:	3a726556 	.word	0x3a726556
   aa408:	00342e54 	.word	0x00342e54
   aa40c:	574f4c46 	.word	0x574f4c46
   aa410:	004e455f 	.word	0x004e455f
   aa414:	574f4c46 	.word	0x574f4c46
   aa418:	5349445f 	.word	0x5349445f
   aa41c:	00000000 	.word	0x00000000
   aa420:	504d4554 	.word	0x504d4554
   aa424:	49485f31 	.word	0x49485f31
   aa428:	00004847 	.word	0x00004847
   aa42c:	504d4554 	.word	0x504d4554
   aa430:	4f4c5f31 	.word	0x4f4c5f31
   aa434:	00000057 	.word	0x00000057
   aa438:	504d4554 	.word	0x504d4554
   aa43c:	00000031 	.word	0x00000031
   aa440:	504d4554 	.word	0x504d4554
   aa444:	49485f32 	.word	0x49485f32
   aa448:	00004847 	.word	0x00004847
   aa44c:	504d4554 	.word	0x504d4554
   aa450:	4f4c5f32 	.word	0x4f4c5f32
   aa454:	00000057 	.word	0x00000057
   aa458:	54534554 	.word	0x54534554
   aa45c:	00000000 	.word	0x00000000
   aa460:	504d4554 	.word	0x504d4554
   aa464:	00000032 	.word	0x00000032
   aa468:	504d4554 	.word	0x504d4554
   aa46c:	4749485f 	.word	0x4749485f
   aa470:	00000048 	.word	0x00000048
   aa474:	504d4554 	.word	0x504d4554
   aa478:	574f4c5f 	.word	0x574f4c5f
   aa47c:	00000000 	.word	0x00000000
   aa480:	504d4554 	.word	0x504d4554
   aa484:	00000033 	.word	0x00000033
   aa488:	5f545041 	.word	0x5f545041
   aa48c:	48474948 	.word	0x48474948
   aa490:	00000000 	.word	0x00000000
   aa494:	5f545041 	.word	0x5f545041
   aa498:	3d574f4c 	.word	0x3d574f4c
   aa49c:	292d2820 	.word	0x292d2820
   aa4a0:	00000000 	.word	0x00000000
   aa4a4:	5f545041 	.word	0x5f545041
   aa4a8:	00574f4c 	.word	0x00574f4c
   aa4ac:	5f545056 	.word	0x5f545056
   aa4b0:	48474948 	.word	0x48474948
   aa4b4:	00000000 	.word	0x00000000
   aa4b8:	5f545056 	.word	0x5f545056
   aa4bc:	3d574f4c 	.word	0x3d574f4c
   aa4c0:	292d2820 	.word	0x292d2820
   aa4c4:	00000000 	.word	0x00000000
   aa4c8:	5f325350 	.word	0x5f325350
   aa4cc:	00574f4c 	.word	0x00574f4c
   aa4d0:	444e4f43 	.word	0x444e4f43
   aa4d4:	4749485f 	.word	0x4749485f
   aa4d8:	00000048 	.word	0x00000048
   aa4dc:	444e4f43 	.word	0x444e4f43
   aa4e0:	574f4c5f 	.word	0x574f4c5f
   aa4e4:	00000000 	.word	0x00000000
   aa4e8:	5f4e4f43 	.word	0x5f4e4f43
   aa4ec:	00574f4c 	.word	0x00574f4c
   aa4f0:	5f315350 	.word	0x5f315350
   aa4f4:	48474948 	.word	0x48474948
   aa4f8:	00000000 	.word	0x00000000
   aa4fc:	5f315350 	.word	0x5f315350
   aa500:	3d574f4c 	.word	0x3d574f4c
   aa504:	292d2820 	.word	0x292d2820
   aa508:	00000000 	.word	0x00000000
   aa50c:	00325350 	.word	0x00325350
   aa510:	5f325350 	.word	0x5f325350
   aa514:	3d574f4c 	.word	0x3d574f4c
   aa518:	292d2820 	.word	0x292d2820
   aa51c:	00000000 	.word	0x00000000
   aa520:	00335350 	.word	0x00335350
   aa524:	5f335350 	.word	0x5f335350
   aa528:	3d574f4c 	.word	0x3d574f4c
   aa52c:	292d2820 	.word	0x292d2820
   aa530:	00000000 	.word	0x00000000
   aa534:	5f335350 	.word	0x5f335350
   aa538:	00574f4c 	.word	0x00574f4c
   aa53c:	535f5048 	.word	0x535f5048
   aa540:	54524154 	.word	0x54524154
   aa544:	0000003d 	.word	0x0000003d
   aa548:	455f5048 	.word	0x455f5048
   aa54c:	003d444e 	.word	0x003d444e
   aa550:	3d315350 	.word	0x3d315350
   aa554:	00000000 	.word	0x00000000
   aa558:	3d325350 	.word	0x3d325350
   aa55c:	00000000 	.word	0x00000000
   aa560:	3d335350 	.word	0x3d335350
   aa564:	00000000 	.word	0x00000000
   aa568:	3d545041 	.word	0x3d545041
   aa56c:	00000000 	.word	0x00000000
   aa570:	3d545056 	.word	0x3d545056
   aa574:	00000000 	.word	0x00000000
   aa578:	31504d54 	.word	0x31504d54
   aa57c:	0000003d 	.word	0x0000003d
   aa580:	32504d54 	.word	0x32504d54
   aa584:	0000003d 	.word	0x0000003d
   aa588:	504d4554 	.word	0x504d4554
   aa58c:	00003d31 	.word	0x00003d31
   aa590:	504d4554 	.word	0x504d4554
   aa594:	00003d32 	.word	0x00003d32
   aa598:	504d4554 	.word	0x504d4554
   aa59c:	00003d33 	.word	0x00003d33
   aa5a0:	544e4328 	.word	0x544e4328
   aa5a4:	00000029 	.word	0x00000029

000aa5a8 <can_bit_time>:
   aa5a8:	02020308 02094b03 43020303 0303030a     .....K.....C....
   aa5b8:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
   aa5c8:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
   aa5d8:	05050510 06114504 47040505 06060512     .....E.....G....
   aa5e8:	06134304 44040606 06060714 08154604     .C.....D.....F..
   aa5f8:	47040606 07070716 08174404 46040708     ...G.....D.....F
   aa608:	08080718 08194304 44040808 00006325     .....C.....D%c..
   aa618:	0004021c 5f373156 00000030 202d462d     ....V17_0...-F- 
   aa628:	74737953 206b6369 666e6f63 72756769     Systick configur
   aa638:	6f697461 7265206e 0d726f72 00000000     ation error.....

000aa648 <uart_serial_options>:
   aa648:	0001c200 00000000 00000800 00000001     ................
   aa658:	01ddccaa 05040302 09080706 bbee0b0a     ................
   aa668:	4e45504f 004c4946 504f5453 004c4946     OPENFIL.STOPFIL.
   aa678:	45544e45 00315f52 00544e49 0065766f     ENTER_1.INT.ove.
   aa688:	45464153 00000000 52494352 00000043     SAFE....RCIRC...
   aa698:	4d495250 00003145 4f4f4c42 00000044     PRIME1..BLOOD...
   aa6a8:	41504548 004e4952 454e4f44 0050485f     HEPARIN.DONE_HP.
   aa6b8:	00303035 534e4952 00003245 534e4952     500.RINSE2..RINS
   aa6c8:	00003345 534e4952 00003445 534e4952     E3..RINSE4..RINS
   aa6d8:	00003145 454e4f44 00000000 52494352     E1..DONE....RCIR
   aa6e8:	00000043 52494352 54535f43 0000504f     C...RCIRC_STOP..
   aa6f8:	45544e45 00315f52 45464153 00000000     ENTER_1.SAFE....
   aa708:	4d495250 00003145 00000043              PRIME1..C...

000aa714 <_global_impure_ptr>:
   aa714:	20070f98 0000000a                       ... ....

000aa71c <_init>:
   aa71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   aa71e:	bf00      	nop
   aa720:	bcf8      	pop	{r3, r4, r5, r6, r7}
   aa722:	bc08      	pop	{r3}
   aa724:	469e      	mov	lr, r3
   aa726:	4770      	bx	lr

000aa728 <__init_array_start>:
   aa728:	000a8b8d 	.word	0x000a8b8d

000aa72c <__frame_dummy_init_array_entry>:
   aa72c:	00080119                                ....

000aa730 <_fini>:
   aa730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   aa732:	bf00      	nop
   aa734:	bcf8      	pop	{r3, r4, r5, r6, r7}
   aa736:	bc08      	pop	{r3}
   aa738:	469e      	mov	lr, r3
   aa73a:	4770      	bx	lr

000aa73c <__fini_array_start>:
   aa73c:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <efc_perform_read_sequence>:
 */
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20070000:	b480      	push	{r7}
20070002:	b089      	sub	sp, #36	; 0x24
20070004:	af00      	add	r7, sp, #0
20070006:	60f8      	str	r0, [r7, #12]
20070008:	60b9      	str	r1, [r7, #8]
2007000a:	607a      	str	r2, [r7, #4]
2007000c:	603b      	str	r3, [r7, #0]
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
2007000e:	68fb      	ldr	r3, [r7, #12]
20070010:	4a28      	ldr	r2, [pc, #160]	; (200700b4 <efc_perform_read_sequence+0xb4>)
20070012:	4293      	cmp	r3, r2
20070014:	d102      	bne.n	2007001c <efc_perform_read_sequence+0x1c>
20070016:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2007001a:	e001      	b.n	20070020 <efc_perform_read_sequence+0x20>
2007001c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
{
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32)
	uint32_t *p_ul_data =
20070020:	61bb      	str	r3, [r7, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20070022:	683b      	ldr	r3, [r7, #0]
20070024:	2b00      	cmp	r3, #0
20070026:	d101      	bne.n	2007002c <efc_perform_read_sequence+0x2c>
		return EFC_RC_INVALID;
20070028:	2302      	movs	r3, #2
2007002a:	e03c      	b.n	200700a6 <efc_perform_read_sequence+0xa6>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2007002c:	68fb      	ldr	r3, [r7, #12]
2007002e:	681b      	ldr	r3, [r3, #0]
20070030:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20070034:	68fb      	ldr	r3, [r7, #12]
20070036:	601a      	str	r2, [r3, #0]
#if (SAM4S || SAM4E || SAM4N)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20070038:	68bb      	ldr	r3, [r7, #8]
2007003a:	b2db      	uxtb	r3, r3
2007003c:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20070040:	68fb      	ldr	r3, [r7, #12]
20070042:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070044:	68fb      	ldr	r3, [r7, #12]
20070046:	689b      	ldr	r3, [r3, #8]
20070048:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2007004a:	697b      	ldr	r3, [r7, #20]
2007004c:	f003 0301 	and.w	r3, r3, #1
20070050:	2b00      	cmp	r3, #0
20070052:	d1f7      	bne.n	20070044 <efc_perform_read_sequence+0x44>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070054:	2300      	movs	r3, #0
20070056:	61fb      	str	r3, [r7, #28]
20070058:	e00c      	b.n	20070074 <efc_perform_read_sequence+0x74>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2007005a:	69fb      	ldr	r3, [r7, #28]
2007005c:	009b      	lsls	r3, r3, #2
2007005e:	683a      	ldr	r2, [r7, #0]
20070060:	4413      	add	r3, r2
20070062:	69fa      	ldr	r2, [r7, #28]
20070064:	0092      	lsls	r2, r2, #2
20070066:	69b9      	ldr	r1, [r7, #24]
20070068:	440a      	add	r2, r1
2007006a:	6812      	ldr	r2, [r2, #0]
2007006c:	601a      	str	r2, [r3, #0]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2007006e:	69fb      	ldr	r3, [r7, #28]
20070070:	3301      	adds	r3, #1
20070072:	61fb      	str	r3, [r7, #28]
20070074:	69fa      	ldr	r2, [r7, #28]
20070076:	6abb      	ldr	r3, [r7, #40]	; 0x28
20070078:	429a      	cmp	r2, r3
2007007a:	d3ee      	bcc.n	2007005a <efc_perform_read_sequence+0x5a>
#if (SAM4S || SAM4E || SAM4N)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2007007c:	687b      	ldr	r3, [r7, #4]
2007007e:	b2db      	uxtb	r3, r3
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20070080:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
	}

	/* To stop the read mode */
	p_efc->EEFC_FCR =
20070084:	68fb      	ldr	r3, [r7, #12]
20070086:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070088:	68fb      	ldr	r3, [r7, #12]
2007008a:	689b      	ldr	r3, [r3, #8]
2007008c:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
2007008e:	697b      	ldr	r3, [r7, #20]
20070090:	f003 0301 	and.w	r3, r3, #1
20070094:	2b00      	cmp	r3, #0
20070096:	d0f7      	beq.n	20070088 <efc_perform_read_sequence+0x88>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20070098:	68fb      	ldr	r3, [r7, #12]
2007009a:	681b      	ldr	r3, [r3, #0]
2007009c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
200700a0:	68fb      	ldr	r3, [r7, #12]
200700a2:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
200700a4:	2300      	movs	r3, #0
}
200700a6:	4618      	mov	r0, r3
200700a8:	3724      	adds	r7, #36	; 0x24
200700aa:	46bd      	mov	sp, r7
200700ac:	f85d 7b04 	ldr.w	r7, [sp], #4
200700b0:	4770      	bx	lr
200700b2:	bf00      	nop
200700b4:	400e0a00 	.word	0x400e0a00

200700b8 <efc_write_fmr>:
 * \param p_efc Pointer to an EFC instance.
 * \param ul_fmr Value of mode register
 */
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200700b8:	b480      	push	{r7}
200700ba:	b083      	sub	sp, #12
200700bc:	af00      	add	r7, sp, #0
200700be:	6078      	str	r0, [r7, #4]
200700c0:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200700c2:	687b      	ldr	r3, [r7, #4]
200700c4:	683a      	ldr	r2, [r7, #0]
200700c6:	601a      	str	r2, [r3, #0]
}
200700c8:	370c      	adds	r7, #12
200700ca:	46bd      	mov	sp, r7
200700cc:	f85d 7b04 	ldr.w	r7, [sp], #4
200700d0:	4770      	bx	lr
200700d2:	bf00      	nop

200700d4 <efc_perform_fcr>:
 *
 * \return The current status.
 */
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200700d4:	b480      	push	{r7}
200700d6:	b085      	sub	sp, #20
200700d8:	af00      	add	r7, sp, #0
200700da:	6078      	str	r0, [r7, #4]
200700dc:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200700de:	687b      	ldr	r3, [r7, #4]
200700e0:	683a      	ldr	r2, [r7, #0]
200700e2:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200700e4:	687b      	ldr	r3, [r7, #4]
200700e6:	689b      	ldr	r3, [r3, #8]
200700e8:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200700ea:	68fb      	ldr	r3, [r7, #12]
200700ec:	f003 0301 	and.w	r3, r3, #1
200700f0:	2b00      	cmp	r3, #0
200700f2:	d0f7      	beq.n	200700e4 <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200700f4:	68fb      	ldr	r3, [r7, #12]
200700f6:	f003 0306 	and.w	r3, r3, #6
}
200700fa:	4618      	mov	r0, r3
200700fc:	3714      	adds	r7, #20
200700fe:	46bd      	mov	sp, r7
20070100:	f85d 7b04 	ldr.w	r7, [sp], #4
20070104:	4770      	bx	lr
20070106:	bf00      	nop

20070108 <levelswitchprevstatus>:
20070108:	0001                                        ..

2007010a <ps3_threshold>:
2007010a:	1000                                        ..

2007010c <cl_flowpathtable>:
2007010c:	0000 0707 0101 0202 0303 0404 0505 0606     ................
	...

20070124 <hp>:
20070124:	000a 04b0 7530 0000 88b8 0000 0014 0258     ....0u........X.
20070134:	3a98 0000 4650 0000 001e 0190 28a0 0000     .:..PF.......(..
20070144:	30d4 0000 0028 012c 1d4c 0000 2134 0000     .0..(.,.L...4!..
20070154:	0032 00f0 1770 0000 1b58 0000 003c 00c8     2...p...X...<...
20070164:	1388 0000 1644 0000 0046 00aa 1068 0000     ....D...F...h...
20070174:	11f8 0000 0050 0096 0ed8 0000 1004 0000     ....P...........
20070184:	005a 0082 0d48 0000 0e10 0000 0064 0078     Z...H.......d.x.
20070194:	0bb8 0000 0ce4 0000 0000 0000 0000 0000     ................
	...

2007037c <apt2>:
2007037c:	ffd8 fd08 ffe2 fdda ffec fe52 fff6 fee8     ..........R.....
2007038c:	0000 ff2e 000a 0005 0014 008c 001e 0118     ................
2007039c:	0028 0150 0032 0226 003c 02b4 0046 0348     (.P.2.&.<...F.H.
200703ac:	0050 03d4 005a 045b 0064 04ec 006e 0574     P...Z.[.d...n.t.
200703bc:	0078 05e9 008c 06d3 00a0 07ee 00b4 094d     x.............M.
200703cc:	00c8 0ab6 00f0 0c76 0118 0e3e 0140 10cc     ......v...>.@...
200703dc:	0168 12e1 01a4 1630                         h.....0.

200703e4 <vpt2>:
200703e4:	ffd8 fd08 ffe2 fdda ffec fe52 fff6 fee8     ..........R.....
200703f4:	0000 ff2e 000a 0005 0014 008c 001e 0118     ................
20070404:	0028 0150 0032 0226 003c 02b4 0046 0348     (.P.2.&.<...F.H.
20070414:	0050 03d4 005a 045b 0064 04ec 006e 0574     P...Z.[.d...n.t.
20070424:	0078 05e9 008c 06d3 00a0 07ee 00b4 094d     x.............M.
20070434:	00c8 0ab6 00f0 0c76 0118 0e3e 0140 10cc     ......v...>.@...
20070444:	0168 12e1 01a4 1630                         h.....0.

2007044c <ufp>:
2007044c:	000a 03e8 0014 03b6 001e 0384 0028 0352     ............(.R.
2007045c:	0032 0320 003c 02ee 0046 02bc 0050 028a     2. .<...F...P...
2007046c:	005a 0258 0064 0226 006e 01f4 0078 01c2     Z.X.d.&.n...x...
2007047c:	0082 0190 0096 015e                         ......^.

20070484 <ps_1_2>:
20070484:	fe70 d41d fea2 d611 fed4 da25 ff06 dbbd     p.........%.....
20070494:	ff38 df71 ff6a e16e ff9c e565 ffce e769     8.q.j.n...e...i.
200704a4:	0000 eb1c 0032 ed4c 0064 f0a0 0096 f414     ....2.L.d.......
200704b4:	00c8 f708 00fa f972 012c fc35 015e ff10     ......r.,.5.^...
200704c4:	0190 026c 01c2 0559 01da 06a4 01f4 0719     ..l...Y.........
200704d4:	0226 0ace 0258 0e10 028a 1004 02bc 13ec     &...X...........
200704e4:	02ee 1676 0320 1964 0000 0000               ..v. .d.....

200704f0 <ps_2_2>:
200704f0:	fe70 d3b9 fea2 d5ad fed4 d998 ff06 db4a     p.............J.
20070500:	ff38 def9 ff6a e0f9 ff9c e522 ffce e694     8...j.....".....
20070510:	0000 ea9a 0032 ec67 0064 f01d 0096 f326     ....2.g.d.....&.
20070520:	00c8 f61a 00fa f85d 012c fb57 015e fe3e     ......].,.W.^.>.
20070530:	0190 0190 01c2 044c 01da 05be 01f4 062c     ......L.......,.
20070540:	0226 09e8 0258 0d20 028a 0f3c 02bc 1388     &...X. ...<.....
20070550:	02ee 1612 0320 1900 0000 0000               .... .......

2007055c <blood_array>:
2007055c:	0032 02bc 0032 003c 02ee 0039 0041 02ee     2...2.<...9.A...
2007056c:	0040 0046 02ee 0046 004b 02ee 004a 0050     @.F...F.K...J.P.
2007057c:	02ee 004e 0055 02ee 0052 005a 02ee 0056     ..N.U...R.Z...V.
2007058c:	005f 02ee 005a 0064 02f8 0064 006e 030c     _...Z.d...d.n...
2007059c:	006e 0078 032a 0078 008c 032a 008c 0096     n.x.*.x...*.....
200705ac:	0352 0096 00c8 03ca 00c8 012c 04b0 0122     R.........,...".
200705bc:	0190 04e2 015e 0000 0000 0000 0000 0000     ....^...........
	...

200705d4 <Cl_DlsisAlarmTable>:
200705d4:	0105 0000 0000 0600 0001 0000 0000 012a     ..............*.
200705e4:	0000 0000 2c00 0001 0000 0000 010c 0000     .....,..........
200705f4:	0000 0d00 0001 0000 0000 010e 0000 0000     ................
20070604:	0100 0001 0000 0000 0115 0000 0000 1600     ................
20070614:	0001 0000 0000 0117 0000 0000 1800 0001     ................
20070624:	0000 0000 0127 0000 0000 2800 0001 0000     ....'......(....
20070634:	0000 0121 0000 0000 2000 0001 0000 0000     ..!...... ......
20070644:	0122 0000 0000 2400 0001 0000 0000 0123     "......$......#.
20070654:	0000 0000 2600 0001 0000 0000 0125 0000     .....&......%...
20070664:	0000 0700 0001 0100 0000 0108 0000 0001     ................
20070674:	1300 0001 0000 0000 0114 0000 0000 1100     ................
20070684:	0001 0000 0000 0112 0000 0000 0f00 0001     ................
20070694:	0000 0000 0110 0000 0000 1d00 0001 0000     ................
200706a4:	0000 013f 0000 0000 4100 0001 0000 0000     ..?......A......
200706b4:	0142 0000 0000 4000 0001 0000 0000 011a     B......@........
200706c4:	0000 0000 3500 0001 0000 0000 0134 0000     .....5......4...
200706d4:	0000 3700 0001 0000 0000 0136 0000 0000     ...7......6.....
	...

200706f4 <heater_duty>:
200706f4:	0555 0000                                   U...

200706f8 <prescribed_temp>:
200706f8:	0000 4214                                   ...B

200706fc <wait_4_TS2Stability>:
200706fc:	00b4                                        ..

200706fe <wait_4_stability>:
200706fe:	00f0                                        ..

20070700 <wait_4_TS3NeuStability>:
20070700:	0078                                        x.

20070702 <Neupost_stability_count>:
20070702:	0078                                        x.

20070704 <SYSTEM_FLOW>:
20070704:	012c 0000                                   ,...

20070708 <gram_test_buffer.9519>:
20070708:	aaaa 0000 5555 0000 aaaa 0000 5555 0000     ....UU......UU..
20070718:	aaaa 0000 5555 0000 aaaa 0000 5555 0000     ....UU......UU..
20070728:	aaaa 0000 0000 0000                         ........

20070730 <Cl_MacState>:
20070730:	0501                                             .

20070731 <Cl_SelfTest_prevMacState>:
20070731:	0105                                             .

20070732 <ConsoleSync>:
20070732:	0001                                        ..

20070734 <cond_pot_val_2volts.9533>:
20070734:	02cc 0000                                   ....

20070738 <res_temp>:
20070738:	6c00 4628 0000 44fa 0800 4629 4000 4503     .l(F...D..)F.@.E
20070748:	a400 4629 8000 4509 4000 462a c000 450f     ..)F...E.@*F...E
20070758:	dc00 462a 0000 4516 7400 462b 4000 451c     ..*F...E.t+F.@.E
20070768:	1000 462c 8000 4522 ac00 462c c000 4528     ..,F.."E..,F..(E
20070778:	4800 462d 0000 452f e000 462d 4000 4535     .H-F../E..-F.@5E
20070788:	7c00 462e 8000 453b 1800 462f c000 4541     .|.F..;E../F..AE
20070798:	b400 462f 0000 4548 4c00 4630 4000 454e     ../F..HE.L0F.@NE
200707a8:	e800 4630 8000 4554 8400 4631 c000 455a     ..0F..TE..1F..ZE
200707b8:	1c00 4632 0000 4561 b800 4632 4000 4567     ..2F..aE..2F.@gE
200707c8:	5400 4633 8000 456d ec00 4633 c000 4573     .T3F..mE..3F..sE
200707d8:	8800 4634 0000 457a 2400 4635 2000 4580     ..4F..zE.$5F. .E
200707e8:	bc00 4635 4000 4583 5800 4636 6000 4586     ..5F.@.E.X6F.`.E
200707f8:	f000 4636 8000 4589 8c00 4637 a000 458c     ..6F...E..7F...E
20070808:	2400 4638 c000 458f c000 4638 e000 4592     .$8F...E..8F...E
20070818:	5800 4639 0000 4596 f400 4639 2000 4599     .X9F...E..9F. .E
20070828:	9000 463a 4000 459c 2800 463b 6000 459f     ..:F.@.E.(;F.`.E
20070838:	c000 463b 8000 45a2 5c00 463c a000 45a5     ..;F...E.\<F...E
20070848:	f400 463c c000 45a8 9000 463d e000 45ab     ..<F...E..=F...E
20070858:	2800 463e 0000 45af c400 463e 2000 45b2     .(>F...E..>F. .E
20070868:	5c00 463f 4000 45b5 f800 463f 6000 45b8     .\?F.@.E..?F.`.E
20070878:	9000 4640 8000 45bb 2800 4641 a000 45be     ..@F...E.(AF...E
20070888:	c400 4641 c000 45c1 5c00 4642 e000 45c4     ..AF...E.\BF...E
20070898:	f400 4642 0000 45c8 9000 4643 2000 45cb     ..BF...E..CF. .E
200708a8:	2800 4644 4000 45ce c000 4644 6000 45d1     .(DF.@.E..DF.`.E
200708b8:	5c00 4645 8000 45d4 f400 4645 a000 45d7     .\EF...E..EF...E
200708c8:	8c00 4646 c000 45da 2400 4647 e000 45dd     ..FF...E.$GF...E
200708d8:	c000 4647 0000 45e1 5800 4648 2000 45e4     ..GF...E.XHF. .E
200708e8:	f000 4648 4000 45e7 8800 4649 6000 45ea     ..HF.@.E..IF.`.E
200708f8:	2400 464a 8000 45ed bc00 464a a000 45f0     .$JF...E..JF...E
20070908:	5400 464b c000 45f3 ec00 464b e000 45f6     .TKF...E..KF...E
20070918:	8400 464c 0000 45fa 1c00 464d 2000 45fd     ..LF...E..MF. .E
20070928:	b800 464d 2000 4600 5000 464e b000 4601     ..MF. .F.PNF...F
20070938:	e800 464e 4000 4603 8000 464f d000 4604     ..NF.@.F..OF...F
20070948:	1800 4650 6000 4606 b000 4650 f000 4607     ..PF.`.F..PF...F
20070958:	4800 4651 8000 4609 e000 4651 1000 460b     .HQF...F..QF...F
20070968:	7800 4652 a000 460c 1000 4653 3000 460e     .xRF...F..SF.0.F
20070978:	a800 4653 c000 460f 0000 0000 0000 0000     ..SF...F........
	...

20070be8 <TEST_STUB_ENABLEGATE>:
20070be8:	0101                                             .

20070be9 <prev_gate_status>:
20070be9:	0101                                             .

20070bea <Current_sense_trigger>:
20070bea:	0001                                        ..

20070bec <pwm_period>:
20070bec:	00c8 0000                                   ....

20070bf0 <bp_rotataion_marker>:
20070bf0:	0001                                        ..

20070bf2 <prev_bp_rotataion_marker>:
20070bf2:	0001                                        ..

20070bf4 <cl_hep_deliveryrate>:
20070bf4:	0064 0000                                   d...

20070bf8 <hep_rotataion_marker>:
20070bf8:	0001                                        ..

20070bfa <prev_hep_rotataion_marker>:
20070bfa:	0001                                        ..

20070bfc <prevhep>:
20070bfc:	0001                                        ..

20070bfe <cl_hep_bolus_count_rate>:
20070bfe:	0064                                        d.

20070c00 <Cl_IsoufAlarmTable>:
20070c00:	0105 0000 0000 0600 0001 0000 0000 012a     ..............*.
20070c10:	0000 0000 2c00 0001 0000 0000 010c 0000     .....,..........
20070c20:	0000 0d00 0001 0000 0000 0101 0000 0000     ................
20070c30:	1500 0001 0000 0000 0116 0000 0000 1700     ................
20070c40:	0001 0000 0000 0118 0000 0000 2700 0001     .............'..
20070c50:	0000 0000 0128 0000 0000 2100 0001 0000     ....(......!....
20070c60:	0000 0120 0000 0000 2200 0001 0000 0000     .. ......"......
20070c70:	0124 0000 0000 2300 0001 0000 0000 0126     $......#......&.
20070c80:	0000 0000 2500 0001 0000 0000 0107 0000     .....%..........
20070c90:	0001 0800 0001 0100 0000 0113 0000 0000     ................
20070ca0:	1400 0001 0000 0000 0111 0000 0000 1200     ................
20070cb0:	0001 0000 0000 010f 0000 0000 1000 0001     ................
20070cc0:	0000 0000 011d 0000 0000 3f00 0001 0000     ...........?....
	...

20070cd2 <uf_rotataion_marker>:
20070cd2:	0001                                        ..

20070cd4 <prev_uf_rotataion_marker>:
20070cd4:	0001 0000                                   ....

20070cd8 <opt>:
20070cd8:	0000 0000 86a0 0001 002c 0000               ........,...

20070ce4 <nvmarray>:
	...
20070cec:	fffe 0000 0000 0000 0000 0000 0000 0000     ................
20070cfc:	fffc 0000 0000 0000 0000 0000 0000 0000     ................
	...

20070d38 <SystemCoreClock>:
20070d38:	0900 003d                                   ..=.

20070d3c <Cl_ConsoleState>:
20070d3c:	0101                                             .

20070d3d <g_b_led0_active>:
20070d3d:	0101                                             .

20070d3e <Cl_disinfOpenFillTimeOut>:
20070d3e:	0001                                        ..

20070d40 <Cl_DisinfAlarmTable>:
20070d40:	012a 0000 0000 2c00 0001 0000 0000 0103     *......,........
20070d50:	0000 0000 0400 0001 0000 0000 0113 0000     ................
20070d60:	0000 1500 0001 0000 0000 0116 0000 0000     ................
20070d70:	1700 0001 0000 0000 0118 0000 0000 2700     ...............'
20070d80:	0001 0000 0000 0128 0000 0000 0800 0001     ......(.........
20070d90:	0000 0000                                   ....

20070d94 <Cl_DprepAlarmTable>:
20070d94:	0101 0000 0000 0500 0001 0000 0000 0106     ................
20070da4:	0000 0000 0300 0001 0000 0000 0104 0000     ................
20070db4:	0000 2a00 0001 0000 0000 012c 0000 0000     ...*......,.....
20070dc4:	0700 0001 0000 0000 0108 0000 0000 0900     ................
20070dd4:	0001 0000 0000 010a 0000 0000 0b00 0001     ................
20070de4:	0000 0000 010c 0000 0000 0d00 0001 0000     ................
20070df4:	0000 010e 0000 0000 2000 0001 0000 0000     ......... ......
20070e04:	0121 0000 0000 2200 0001 0000 0000 0124     !......"......$.
20070e14:	0000 0000 2600 0001 0000 0000 0115 0000     .....&..........
20070e24:	0000 1600 0001 0000 0000 0117 0000 0000     ................
20070e34:	1800 0001 0000 0000 0127 0000 0000 2800     ........'......(
20070e44:	0001 0000 0000 010f 0000 0000 1000 0001     ................
20070e54:	0000 0000 0111 0000 0000 1200 0001 0000     ................
20070e64:	0000 0113 0000 0000 1400 0001 0000 0000     ................
20070e74:	013c 0000 0000 1d00 0001 0000 0000 013f     <.............?.
20070e84:	0000 0000 1a00 0001 0000 0000 0000 0000     ................
20070e94:	0000 0000                                   ....

20070e98 <Cl_RinseAlarmTable>:
20070e98:	0101 0000 0000 0000 0129 0000 0100 0000     ........).......
20070ea8:	012b 0000 0100 0000 013d 0000 0100 0000     +.......=.......
20070eb8:	013e 0000 0100 0000 0103 0000 0100 0000     >...............
20070ec8:	0104 0000 0100 0000 0110 0000 0000 0000     ................
20070ed8:	010f 0000 0000 0000 0112 0000 0000 0000     ................
20070ee8:	0111 0000 0000 0000 0114 0000 0000 0000     ................
20070ef8:	0113 0000 0000 0000 0115 0000 0000 0000     ................
20070f08:	0116 0000 0000 0000 0117 0000 0000 0000     ................
20070f18:	0118 0000 0000 0000 0127 0000 0000 0000     ........'.......
20070f28:	0128 0000 0000 0000 0108 0000 0000 0000     (...............
20070f38:	011d 0000 0000 0000 010c 0000 0000 0000     ................
20070f48:	010d 0000 0000 0000 010e 0000 0000 0000     ................
20070f58:	0121 0000 0000 0000 011a 0000 0000 0000     !...............
20070f68:	013f 0000 0000 0000                         ?.......

20070f70 <Cl_StandbyAlarmTable>:
20070f70:	003d 0000 0000 0000 3e00 0000 0000 0000     =........>......
20070f80:	0000 0003 0000 0000 0000 0400 0000 0000     ................
20070f90:	0000 0000                                   ....

20070f94 <cl_stbystate>:
20070f94:	0001 0000                                   ....

20070f98 <impure_data>:
20070f98:	0000 0000 1284 2007 12ec 2007 1354 2007     ....... ... T.. 
	...
20070fcc:	a710 000a 0000 0000 0000 0000 0000 0000     ................
	...
20071040:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20071050:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200713c0 <_impure_ptr>:
200713c0:	0f98 2007                                   ... 

200713c4 <__malloc_av_>:
	...
200713cc:	13c4 2007 13c4 2007 13cc 2007 13cc 2007     ... ... ... ... 
200713dc:	13d4 2007 13d4 2007 13dc 2007 13dc 2007     ... ... ... ... 
200713ec:	13e4 2007 13e4 2007 13ec 2007 13ec 2007     ... ... ... ... 
200713fc:	13f4 2007 13f4 2007 13fc 2007 13fc 2007     ... ... ... ... 
2007140c:	1404 2007 1404 2007 140c 2007 140c 2007     ... ... ... ... 
2007141c:	1414 2007 1414 2007 141c 2007 141c 2007     ... ... ... ... 
2007142c:	1424 2007 1424 2007 142c 2007 142c 2007     $.. $.. ,.. ,.. 
2007143c:	1434 2007 1434 2007 143c 2007 143c 2007     4.. 4.. <.. <.. 
2007144c:	1444 2007 1444 2007 144c 2007 144c 2007     D.. D.. L.. L.. 
2007145c:	1454 2007 1454 2007 145c 2007 145c 2007     T.. T.. \.. \.. 
2007146c:	1464 2007 1464 2007 146c 2007 146c 2007     d.. d.. l.. l.. 
2007147c:	1474 2007 1474 2007 147c 2007 147c 2007     t.. t.. |.. |.. 
2007148c:	1484 2007 1484 2007 148c 2007 148c 2007     ... ... ... ... 
2007149c:	1494 2007 1494 2007 149c 2007 149c 2007     ... ... ... ... 
200714ac:	14a4 2007 14a4 2007 14ac 2007 14ac 2007     ... ... ... ... 
200714bc:	14b4 2007 14b4 2007 14bc 2007 14bc 2007     ... ... ... ... 
200714cc:	14c4 2007 14c4 2007 14cc 2007 14cc 2007     ... ... ... ... 
200714dc:	14d4 2007 14d4 2007 14dc 2007 14dc 2007     ... ... ... ... 
200714ec:	14e4 2007 14e4 2007 14ec 2007 14ec 2007     ... ... ... ... 
200714fc:	14f4 2007 14f4 2007 14fc 2007 14fc 2007     ... ... ... ... 
2007150c:	1504 2007 1504 2007 150c 2007 150c 2007     ... ... ... ... 
2007151c:	1514 2007 1514 2007 151c 2007 151c 2007     ... ... ... ... 
2007152c:	1524 2007 1524 2007 152c 2007 152c 2007     $.. $.. ,.. ,.. 
2007153c:	1534 2007 1534 2007 153c 2007 153c 2007     4.. 4.. <.. <.. 
2007154c:	1544 2007 1544 2007 154c 2007 154c 2007     D.. D.. L.. L.. 
2007155c:	1554 2007 1554 2007 155c 2007 155c 2007     T.. T.. \.. \.. 
2007156c:	1564 2007 1564 2007 156c 2007 156c 2007     d.. d.. l.. l.. 
2007157c:	1574 2007 1574 2007 157c 2007 157c 2007     t.. t.. |.. |.. 
2007158c:	1584 2007 1584 2007 158c 2007 158c 2007     ... ... ... ... 
2007159c:	1594 2007 1594 2007 159c 2007 159c 2007     ... ... ... ... 
200715ac:	15a4 2007 15a4 2007 15ac 2007 15ac 2007     ... ... ... ... 
200715bc:	15b4 2007 15b4 2007 15bc 2007 15bc 2007     ... ... ... ... 
200715cc:	15c4 2007 15c4 2007 15cc 2007 15cc 2007     ... ... ... ... 
200715dc:	15d4 2007 15d4 2007 15dc 2007 15dc 2007     ... ... ... ... 
200715ec:	15e4 2007 15e4 2007 15ec 2007 15ec 2007     ... ... ... ... 
200715fc:	15f4 2007 15f4 2007 15fc 2007 15fc 2007     ... ... ... ... 
2007160c:	1604 2007 1604 2007 160c 2007 160c 2007     ... ... ... ... 
2007161c:	1614 2007 1614 2007 161c 2007 161c 2007     ... ... ... ... 
2007162c:	1624 2007 1624 2007 162c 2007 162c 2007     $.. $.. ,.. ,.. 
2007163c:	1634 2007 1634 2007 163c 2007 163c 2007     4.. 4.. <.. <.. 
2007164c:	1644 2007 1644 2007 164c 2007 164c 2007     D.. D.. L.. L.. 
2007165c:	1654 2007 1654 2007 165c 2007 165c 2007     T.. T.. \.. \.. 
2007166c:	1664 2007 1664 2007 166c 2007 166c 2007     d.. d.. l.. l.. 
2007167c:	1674 2007 1674 2007 167c 2007 167c 2007     t.. t.. |.. |.. 
2007168c:	1684 2007 1684 2007 168c 2007 168c 2007     ... ... ... ... 
2007169c:	1694 2007 1694 2007 169c 2007 169c 2007     ... ... ... ... 
200716ac:	16a4 2007 16a4 2007 16ac 2007 16ac 2007     ... ... ... ... 
200716bc:	16b4 2007 16b4 2007 16bc 2007 16bc 2007     ... ... ... ... 
200716cc:	16c4 2007 16c4 2007 16cc 2007 16cc 2007     ... ... ... ... 
200716dc:	16d4 2007 16d4 2007 16dc 2007 16dc 2007     ... ... ... ... 
200716ec:	16e4 2007 16e4 2007 16ec 2007 16ec 2007     ... ... ... ... 
200716fc:	16f4 2007 16f4 2007 16fc 2007 16fc 2007     ... ... ... ... 
2007170c:	1704 2007 1704 2007 170c 2007 170c 2007     ... ... ... ... 
2007171c:	1714 2007 1714 2007 171c 2007 171c 2007     ... ... ... ... 
2007172c:	1724 2007 1724 2007 172c 2007 172c 2007     $.. $.. ,.. ,.. 
2007173c:	1734 2007 1734 2007 173c 2007 173c 2007     4.. 4.. <.. <.. 
2007174c:	1744 2007 1744 2007 174c 2007 174c 2007     D.. D.. L.. L.. 
2007175c:	1754 2007 1754 2007 175c 2007 175c 2007     T.. T.. \.. \.. 
2007176c:	1764 2007 1764 2007 176c 2007 176c 2007     d.. d.. l.. l.. 
2007177c:	1774 2007 1774 2007 177c 2007 177c 2007     t.. t.. |.. |.. 
2007178c:	1784 2007 1784 2007 178c 2007 178c 2007     ... ... ... ... 
2007179c:	1794 2007 1794 2007 179c 2007 179c 2007     ... ... ... ... 
200717ac:	17a4 2007 17a4 2007 17ac 2007 17ac 2007     ... ... ... ... 
200717bc:	17b4 2007 17b4 2007 17bc 2007 17bc 2007     ... ... ... ... 

200717cc <__malloc_trim_threshold>:
200717cc:	0000 0002                                   ....

200717d0 <__malloc_sbrk_base>:
200717d0:	ffff ffff                                   ....
